[
    {
        "content": "<p>So I did a thing and the rustc <em>builds</em> with the latest Chalk version</p>",
        "id": 187698558,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581129857
    },
    {
        "content": "<p>Now, there are definitely some <code>todo!()</code>s</p>",
        "id": 187698562,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581129884
    },
    {
        "content": "<p>And keeps the same scheme as before - where everything is built around <code>chalk-engine</code></p>",
        "id": 187698571,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581129910
    },
    {
        "content": "<p>But it at least is a starting point (for me at least)</p>",
        "id": 187698579,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581129958
    },
    {
        "content": "<p>Now, two questions:</p>",
        "id": 187698618,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581129989
    },
    {
        "content": "<p>Actually maybe three</p>",
        "id": 187698622,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581130013
    },
    {
        "content": "<p>1) Maybe we should regularly publish chalk versions to <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a>, even if they're still <code>0.x.x</code> for now</p>",
        "id": 187698627,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581130057
    },
    {
        "content": "<p>2) Should I push this to a branch so people can check it out?</p>",
        "id": 187698628,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581130075
    },
    {
        "content": "<p>3) Is it more worth it to completely rip out the existing integration and start fresh</p>",
        "id": 187698666,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581130100
    },
    {
        "content": "<p>Interesting. I was debating about this.</p>",
        "id": 187712987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581160888
    },
    {
        "content": "<p>It seems like some folks are blocked on the current chalk integration, so I think it makes sense to do something to change that ASAP</p>",
        "id": 187713034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581160936
    },
    {
        "content": "<p>I do think we should probably get in the habit of publishing regular versions to <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a></p>",
        "id": 187713038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581160956
    },
    {
        "content": "<p>I am debating about whether it makes sense to try and remove the existing integration or upgrade it -- I guess I don't have a strong feeling. The benefits I see of upgrading are</p>\n<ul>\n<li>you already did it :)</li>\n<li>it lets us run some tests, which we could try to use more of</li>\n<li>it is maybe easier to port over to using chalk-solve this way</li>\n</ul>\n<p>The benefits I see of removing are</p>\n<ul>\n<li>less code for rustc to compile, marginally faster compilation times  :)</li>\n<li>I don't really expect to re-use that much of the code that's in there</li>\n<li>We don't have to start publishing <em>yet</em> -- though I think we will want to <em>soon</em></li>\n</ul>",
        "id": 187713108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581161059
    },
    {
        "content": "<p>So, the idea I was going for is: Can I spend only a bit of time and get rustc to build with the latest version of Chalk, so we can start to unblock issues like <a href=\"https://github.com/rust-lang/rust/pull/68807\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/68807\">https://github.com/rust-lang/rust/pull/68807</a>. Under the assumption that we don't particularly care if it <em>works</em>.</p>",
        "id": 187733544,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581200267
    },
    {
        "content": "<p>And yes, it's completely possible and only about an hour of work</p>",
        "id": 187733585,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581200298
    },
    {
        "content": "<p>But, I also sort of think that a lot of the existing code will be replaced when we move to use <code>chalk-solve</code></p>",
        "id": 187733593,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581200368
    },
    {
        "content": "<p>Shoot, I know this was talked about at some point (I think), but what was the reasoning for making all the functions of <code>TypeFamily</code> (particularly here the intern* functions) take no parameter that could store state</p>",
        "id": 187735696,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581204475
    },
    {
        "content": "<p>So, like in <code>ChakIr</code> and <code>rust-analyzer</code> <code>intern_goal</code> just returns <code>Arc::new(goal)</code>. But in rustc, the goals are actually interned on <code>TyCtxt</code></p>",
        "id": 187735765,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581204562
    },
    {
        "content": "<p>Ok in hindsight <a href=\"https://github.com/rust-lang/chalk/commit/9f5d084d3cd39feba2a6264d879ffc4e1c09d9e8#diff-f8d532fdb5ed1dd1137e521e1fb3f704\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/commit/9f5d084d3cd39feba2a6264d879ffc4e1c09d9e8#diff-f8d532fdb5ed1dd1137e521e1fb3f704\">https://github.com/rust-lang/chalk/commit/9f5d084d3cd39feba2a6264d879ffc4e1c09d9e8#diff-f8d532fdb5ed1dd1137e521e1fb3f704</a> was a bad commit</p>",
        "id": 187736141,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581205324
    },
    {
        "content": "<p>Oh hey, all the <code>-Z chalk</code> tests pass</p>",
        "id": 187736736,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581206591
    },
    {
        "content": "<p>that can't be right....too many <code>todo!()</code>s</p>",
        "id": 187736865,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581206792
    },
    {
        "content": "<p>update: it wasn't right</p>",
        "id": 187738291,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581209968
    },
    {
        "content": "<p>So, next roadblock</p>",
        "id": 187738347,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581210017
    },
    {
        "content": "<p><code>instantiate_ucanonical_goal</code> and <code>instantiate_ex_clause</code></p>",
        "id": 187738352,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581210028
    },
    {
        "content": "<p>And I knew this one was coming</p>",
        "id": 187738371,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581210106
    },
    {
        "content": "<p>But, the essentially <code>impl Fn</code> arg was added to these for when Chalk was originally integrated with rustc</p>",
        "id": 187738415,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581210137
    },
    {
        "content": "<p>But in the name of simplicity, these have been reverted back to just returning the instantiated forms</p>",
        "id": 187738422,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581210163
    },
    {
        "content": "<p>(which works fine in <code>chalk-solve</code>)</p>",
        "id": 187738428,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581210174
    },
    {
        "content": "<p>but in rustc the <code>InferenceTable</code> includes a reference to <code>InferCtxt</code>, which is passed as an arg to the function provided to <code>enter_with_canonical</code></p>",
        "id": 187738483,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581210266
    },
    {
        "content": "<p>now, <code>instantiate_ucanonical_goal</code> doesn't seem <em>too</em> bad, I don't think, since the two times we use it, the return values are \"short-lived\"</p>",
        "id": 187738537,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581210380
    },
    {
        "content": "<p>now, <code>instantiate_ex_clause</code> is a bit more difficult</p>",
        "id": 187738538,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581210397
    },
    {
        "content": "<p>since that makes a <code>Strand</code>, which we store on the <code>Stack</code></p>",
        "id": 187738543,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581210419
    },
    {
        "content": "<p>now, looking through <code>chalk-engine</code> a bit, I think we could actually get away with instantiating the <code>ExClause</code> further down, instead of when we pop the <code>CanonicalStrand</code></p>",
        "id": 187738748,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581210757
    },
    {
        "content": "<p>Though, this does mean more calls to instantiate it</p>",
        "id": 187738754,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581210779
    },
    {
        "content": "<p>Maybe I should step back and clarify why requiring that <code>instantiate_ex_clause</code> take a function with a scoped reference is a bad thing right now:</p>",
        "id": 187738811,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581210858
    },
    {
        "content": "<p>it means that we have to start thinking recursively again</p>",
        "id": 187738812,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581210882
    },
    {
        "content": "<p>Also, looking back at <a href=\"https://github.com/rust-lang/chalk/pull/277\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/277\">https://github.com/rust-lang/chalk/pull/277</a></p>",
        "id": 187738891,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581211069
    },
    {
        "content": "<p>specifically this <code>Clone</code> bound: <a href=\"https://github.com/rust-lang/chalk/pull/277/files#diff-f8d532fdb5ed1dd1137e521e1fb3f704R80\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/277/files#diff-f8d532fdb5ed1dd1137e521e1fb3f704R80\">https://github.com/rust-lang/chalk/pull/277/files#diff-f8d532fdb5ed1dd1137e521e1fb3f704R80</a></p>",
        "id": 187738936,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581211100
    },
    {
        "content": "<p>I think that scheme wouldn't work for rustc</p>",
        "id": 187738941,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581211116
    },
    {
        "content": "<p>Now, the other question is: do we really have to think about this, or will switching to <code>chalk-solve</code> fix this automatically</p>",
        "id": 187739044,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581211350
    },
    {
        "content": "<p>I have a feeling we're gonna run into this somewhere</p>",
        "id": 187739094,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581211450
    },
    {
        "content": "<blockquote>\n<p>So, like in <code>ChakIr</code> and <code>rust-analyzer</code> <code>intern_goal</code> just returns <code>Arc::new(goal)</code>. But in rustc, the goals are actually interned on <code>TyCtxt</code></p>\n</blockquote>\n<p>maybe it's here</p>",
        "id": 187739097,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581211463
    },
    {
        "content": "<blockquote>\n<p>Shoot, I know this was talked about at some point (I think), but what was the reasoning for making all the functions of <code>TypeFamily</code> (particularly here the intern* functions) take no parameter that could store state</p>\n</blockquote>\n<p>I think we want to add such a parameter</p>",
        "id": 187849880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581363008
    },
    {
        "content": "<p>the reasoning was \"incremental steps\", but that's one of the big refactorings yet to come I think</p>",
        "id": 187849888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581363018
    },
    {
        "content": "<p>Question, would throwing more people at chalk integration help it get into the compiler faster? I'd be interested in dedicating time to help out if the issue is just lack of people hours and you can just throw blockers at me to grind away at, but if the issue is just the complexity of the issue I would rather not distract from the work.</p>",
        "id": 187880074,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581391095
    },
    {
        "content": "<p>We definitely could use some help! We're in the process of organizing things better so we can split up tasks, so I expect you can help out</p>",
        "id": 187886327,
        "sender_full_name": "detrumi",
        "timestamp": 1581401215
    },
    {
        "content": "<p>I'm interested as well but it always seemed that people are busy enough to get their own tasks done :D</p>",
        "id": 187900377,
        "sender_full_name": "matprec",
        "timestamp": 1581417491
    },
    {
        "content": "<p>Feel free to ping me if there is something easy to tackle :)</p>",
        "id": 187900447,
        "sender_full_name": "matprec",
        "timestamp": 1581417573
    },
    {
        "content": "<p>Yes <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> <span class=\"user-mention\" data-user-id=\"202314\">@matprec</span>, there are always things to do :) As <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> said, we're in process of setting up a sprint for the next 6 weeks, so be on the lookout for a blog post (or hang around the channel)</p>",
        "id": 187918065,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581432452
    },
    {
        "content": "<p>Okay well write my name down and assign me issues, I have Sunjay who can mentor me on getting started with chalk so I think I'll be able to get up and running quickly</p>",
        "id": 187919794,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581433629
    },
    {
        "content": "<p>Definitely extremely interested in chalk integration</p>",
        "id": 187919818,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581433650
    },
    {
        "content": "<p>(I should note that I'm happy to help Jane get started if anyone needs me to, but I'm not really involved very much right now because of a lot of things going on in my personal life. Hoping to come back in a few months in a way where I can be much more consistent in my contributions!)</p>",
        "id": 187920610,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1581434185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you around?</p>",
        "id": 188212231,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581691802
    },
    {
        "content": "<p>Whoops</p>",
        "id": 188212265,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581691807
    },
    {
        "content": "<p>Was doing more work on integrating chalk into rustc last night</p>",
        "id": 188212327,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581691851
    },
    {
        "content": "<p>Specifically, using chalk-solve and chalk-ir</p>",
        "id": 188212358,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581691867
    },
    {
        "content": "<p>And came across this problem:</p>",
        "id": 188212388,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581691888
    },
    {
        "content": "<p>So, in <code>TypeFamily</code>, the <code>_data</code> functions return back a reference</p>",
        "id": 188212516,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581691949
    },
    {
        "content": "<p>Which, makes sense if the argument is a reference</p>",
        "id": 188212569,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581691973
    },
    {
        "content": "<p>But, when we have to create a new <code>TyData</code> instance, it doesn't work</p>",
        "id": 188212610,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581692002
    },
    {
        "content": "<p>(rust-analyzer also has this problem)</p>",
        "id": 188212634,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581692020
    },
    {
        "content": "<p>So I was thinking, rather than returning a reference, we could have the <code>_data</code> functions take a function that is called with the reference to the <code>TyData</code></p>",
        "id": 188212747,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581692102
    },
    {
        "content": "<p>So, for the default <code>TypeFamily</code>, it just passes the argument</p>",
        "id": 188212820,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581692145
    },
    {
        "content": "<p>But for rustc or rust-analyzer, where we have to create a <code>TyData</code>, we don't have to store it anywhere</p>",
        "id": 188212915,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581692200
    },
    {
        "content": "<p>Just wanted to know what you thought</p>",
        "id": 188212936,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581692220
    },
    {
        "content": "<p>Either that, or make <code>_data</code> functions return a non-reference <code>TyData</code></p>",
        "id": 188213698,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581692712
    },
    {
        "content": "<p>(I guess this same problem applies for other types other than <code>Ty</code>/<code>TyData</code>)</p>",
        "id": 188213750,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581692750
    },
    {
        "content": "<p>Actually maybe <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> might want to chime in here too (or has an opinion), since they do the rust-analyzer related work, I think</p>",
        "id": 188217275,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581694970
    },
    {
        "content": "<p>we would also have this problem in RA, yeah, at least until we completely switch to Chalk's type representation. I guess the idea is that the type family is really just interning types, not synthesizing them on the fly. </p>\n<blockquote>\n<p>have the _data functions take a function that is called with the reference to the TyData</p>\n</blockquote>\n<p>that seems a bit weird as an API, but I guess it would work. Another alternative might just be returning a <code>Cow</code>...</p>",
        "id": 188218469,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581695649
    },
    {
        "content": "<p>on the other hand, if rustc is fine synthesizing <code>TyData</code>s performance-wise, why not just return an owned <code>TyData</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 188218528,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581695690
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/188218469\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/188218469\">said</a>:</p>\n<blockquote>\n<p>that seems a bit weird as an API, but I guess it would work. Another alternative might just be returning a <code>Cow</code>...</p>\n</blockquote>",
        "id": 188218780,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581695794
    },
    {
        "content": "<p>whoops</p>",
        "id": 188218786,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581695799
    },
    {
        "content": "<p>not entirely a weird api, it's essentially the same as like tls apis</p>",
        "id": 188218832,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581695831
    },
    {
        "content": "<p>maybe I'm just misunderstanding the goal a bit. The current <code>TypeFamily</code> seems to be mostly not super useful unless your <code>InternedTy</code> <em>is</em> <code>TyData</code> (as is the default <code>TypeFamily</code>)</p>",
        "id": 188219253,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581696045
    },
    {
        "content": "<p><em>or</em> you store the <code>TyData</code> in your <code>InternedType</code></p>",
        "id": 188219349,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581696094
    },
    {
        "content": "<p>I <em>thought</em> it was supposed to act as sort of a \"bridge\"</p>",
        "id": 188219441,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581696143
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/188212747\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/188212747\">said</a>:</p>\n<blockquote>\n<p>So I was thinking, rather than returning a reference, we could have the <code>_data</code> functions take a function that is called with the reference to the <code>TyData</code></p>\n</blockquote>\n<p>nope :)</p>",
        "id": 188235125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581706798
    },
    {
        "content": "<p>or at least</p>",
        "id": 188235131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581706802
    },
    {
        "content": "<p>it was designed the way it is</p>",
        "id": 188235177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581706805
    },
    {
        "content": "<p>intentionally</p>",
        "id": 188235189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581706807
    },
    {
        "content": "<p>I would prefer that we return references</p>",
        "id": 188235225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581706828
    },
    {
        "content": "<p>(sorry, I hate the way I reply nope without thinking how jerky that sounds ;) please accept my apology!)</p>",
        "id": 188235251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581706840
    },
    {
        "content": "<p>let me back up and enumerate:</p>",
        "id": 188235259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581706845
    },
    {
        "content": "<p>what I had hope to do in the case of <em>rustc</em> was this</p>",
        "id": 188235289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581706859
    },
    {
        "content": "<ul>\n<li>for each <code>Ty&lt;'tcx&gt;</code>, we would allocate (in the tcx arena) a <code>&amp;'tcx TyData</code> that we can return</li>\n</ul>",
        "id": 188235350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581706893
    },
    {
        "content": "<ul>\n<li>we'd probably keep (for now) a cache from one to the other, though we could include a <code>Cell&lt;&gt;</code> in the <code>TyData</code> or something, rather than a separate hashmap</li>\n</ul>",
        "id": 188235364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581706906
    },
    {
        "content": "<ul>\n<li>cell would be faster, but hashmap would be \"zero cost\" if chalk is not in use</li>\n</ul>",
        "id": 188235382,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581706919
    },
    {
        "content": "<p>in the case of <em>rust analyzer</em>, ideally there would be no map at all</p>",
        "id": 188235436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581706935
    },
    {
        "content": "<p>they would just be using chalk's types</p>",
        "id": 188235441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581706939
    },
    {
        "content": "<p>and if that's a problem, then we should see why and adjust chalk's types</p>",
        "id": 188235449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581706945
    },
    {
        "content": "<p>so that it can work</p>",
        "id": 188235453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581706949
    },
    {
        "content": "<p>longer term, I would think rustc would also just be using chalk's types</p>",
        "id": 188235470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581706958
    },
    {
        "content": "<p>I would really prefer not to use <code>Cow</code> or the TLS-style APIs,</p>",
        "id": 188235492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581706977
    },
    {
        "content": "<p>TLS beacuse it'll be annoying as all get out in practice</p>",
        "id": 188235503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581706985
    },
    {
        "content": "<p>Cow because you really don't want to be allocating this data every time anyway I don't think and because it's also kind of complex :)</p>",
        "id": 188235533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581707009
    },
    {
        "content": "<p>Anyway, what do you think about those directions? I could imagine there's a flaw</p>",
        "id": 188235549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581707027
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/188235436\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/188235436\">said</a>:</p>\n<blockquote>\n<p>in the case of <em>rust analyzer</em>, ideally there would be no map at all</p>\n</blockquote>\n<p>but I guess <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> might be able to tell us how feasible this is :)</p>",
        "id": 188235614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581707061
    },
    {
        "content": "<p>so far it's not been possible because the <code>TypeFamily</code> can't carry any context, I think once that is changed it should be doable. I'm a bit wary about the inference code becoming more verbose, but we'll see</p>",
        "id": 188236474,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581707602
    },
    {
        "content": "<p>Interesting!</p>",
        "id": 188236614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581707697
    },
    {
        "content": "<p>One of the things I wanted to mentor for this sprint is adding context to <code>TypeFamily</code></p>",
        "id": 188236634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581707706
    },
    {
        "content": "<p>let's prioritize that</p>",
        "id": 188236639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581707710
    },
    {
        "content": "<p>Interesting</p>",
        "id": 188236833,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581707840
    },
    {
        "content": "<p>Thanks for the feedback :)</p>",
        "id": 188237004,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581707963
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/188236634\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/188236634\">said</a>:</p>\n<blockquote>\n<p>One of the things I wanted to mentor for this sprint is adding context to <code>TypeFamily</code></p>\n</blockquote>\n<p>I'd be interested in working on this if you're looking for a mentee</p>",
        "id": 188237011,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581707971
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/188236474\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/188236474\">said</a>:</p>\n<blockquote>\n<p>so far it's not been possible because the <code>TypeFamily</code> can't carry any context, I think once that is changed it should be doable. I'm a bit wary about the inference code becoming more verbose, but we'll see</p>\n</blockquote>\n<p>this would also be useful to know</p>",
        "id": 188237330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708133
    },
    {
        "content": "<p>I do think eventually we should have everyone using a library like chalk-ty to represent their types, so if we can figure out what's the most ergonomic/correct set of variants, would be good</p>",
        "id": 188237401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708179
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> are you using the salsa interning mechanism, too?</p>",
        "id": 188237467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708226
    },
    {
        "content": "<p>yes</p>",
        "id": 188237863,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581708430
    },
    {
        "content": "<p>OK, good. Or I mean \"bad\", in the sense  that it means you also need <code>&amp;self</code> during lookup</p>",
        "id": 188237990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708509
    },
    {
        "content": "<p>but I think that's the right design anyway</p>",
        "id": 188238000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708513
    },
    {
        "content": "<p>one thing that might be nice would be having <code>TypeName</code> be an associated type of the <code>TypeFamily</code>, so we can keep it as a richer enum (so we don't need to intern things all the time during inference)</p>",
        "id": 188238042,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581708546
    },
    {
        "content": "<p>Yeah, I was debating about whether <code>TypeName</code> should be an associated type or not</p>",
        "id": 188238370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708727
    },
    {
        "content": "<p>There was another thing I found that I should bring up</p>",
        "id": 188244316,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581712800
    },
    {
        "content": "<p>why are all the <code>Interned</code> types required to be <code>Ord</code></p>",
        "id": 188244377,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581712817
    },
    {
        "content": "<p>could be no reason :)</p>",
        "id": 188244415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581712842
    },
    {
        "content": "<p>or could be that use <code>BTreeMap</code> in some places for determinism</p>",
        "id": 188244427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581712851
    },
    {
        "content": "<p>we could probably switch to rustc-hash</p>",
        "id": 188244439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581712858
    },
    {
        "content": "<p>if it's the latter</p>",
        "id": 188244441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581712861
    },
    {
        "content": "<p>that didn't used to exist at the time</p>",
        "id": 188244456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581712876
    },
    {
        "content": "<p>I removed <code>Ord</code> on all of them (because rustc)</p>",
        "id": 188244458,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581712880
    },
    {
        "content": "<p>seems ok, if it built</p>",
        "id": 188244468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581712888
    },
    {
        "content": "<p>and there was only one <code>BTreeSet</code> use</p>",
        "id": 188244469,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581712889
    },
    {
        "content": "<p>for program_clauses</p>",
        "id": 188244476,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581712895
    },
    {
        "content": "<p>somewhere related to that</p>",
        "id": 188244489,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581712904
    },
    {
        "content": "<p>yeah ok</p>",
        "id": 188244500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581712912
    },
    {
        "content": "<p>I think we could switch to rustc-hash</p>",
        "id": 188244506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581712921
    },
    {
        "content": "<p>I don't think we care <em>what</em> ordering we have, just that it is consistent run to run for the same inputs</p>",
        "id": 188244572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581712940
    },
    {
        "content": "<p>probably</p>",
        "id": 188244583,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581712947
    },
    {
        "content": "<p>anyway rustc-hash would be faster!</p>",
        "id": 188244601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581712957
    },
    {
        "content": "<p>I also had to make a bunch of misc. changes like removing <code>extern crate</code>s, <code>HashMap</code> to <code>FxHashMap</code>, <code>Formatter</code> to <code>Formatter&lt;'_&gt;</code></p>",
        "id": 188244646,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581713002
    },
    {
        "content": "<p>I'll probably make a PR with just those changes at some point</p>",
        "id": 188244665,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581713020
    },
    {
        "content": "<p>Also, if the determinism <em>is</em> important, it's not currently checked by any tests</p>",
        "id": 188244722,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581713048
    },
    {
        "content": "<p>it's more that tests didn't work</p>",
        "id": 188244751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581713079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/188244646\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/188244646\">said</a>:</p>\n<blockquote>\n<p>I also had to make a bunch of misc. changes like removing <code>extern crate</code>s, <code>HashMap</code> to <code>FxHashMap</code>, <code>Formatter</code> to <code>Formatter&lt;'_&gt;</code></p>\n</blockquote>\n<p>eh? are we not on rust 2018?</p>",
        "id": 188244776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581713099
    },
    {
        "content": "<p>anyway that PR seems good</p>",
        "id": 188244793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581713109
    },
    {
        "content": "<p><code>edition = \"2018\"</code></p>",
        "id": 188244823,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581713139
    },
    {
        "content": "<p>but still <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span>‍♂️</p>",
        "id": 188244851,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581713156
    },
    {
        "content": "<p>So I realized that not having a <code>interner</code> value passed an argument is <em>not</em> a blocker (necessarily), because we can \"get it to work\" by using tls</p>",
        "id": 188301511,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581805952
    },
    {
        "content": "<p>that being said, I've actually got the skeleton of chalk-solve/chalk-ir set up</p>",
        "id": 188301575,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581806048
    },
    {
        "content": "<p>everything in <code>RustIrDatabase</code> is <code>unimplemented!()</code></p>",
        "id": 188301584,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581806072
    },
    {
        "content": "<p>and everything in <code>Interner</code> essentially just matched the default</p>",
        "id": 188301586,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581806087
    },
    {
        "content": "<p>but getting there</p>",
        "id": 188301588,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581806091
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/188301511\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/188301511\">said</a>:</p>\n<blockquote>\n<p>So I realized that not having a <code>interner</code> value passed an argument is <em>not</em> a blocker (necessarily), because we can \"get it to work\" by using tls</p>\n</blockquote>\n<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span>‍♂️nevermind this</p>",
        "id": 188308006,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581818569
    },
    {
        "content": "<p>Ok so I have integrated chalk-solve/chalk-ir into rustc <em>just enough</em> to be able to lower the most basic rustc goal and some traits/structs/impls</p>",
        "id": 188504054,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582070418
    },
    {
        "content": "<p><em>but</em> it's not right</p>",
        "id": 188504060,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582070425
    },
    {
        "content": "<p>and I'm doing something <em>very</em> unsafe in order to be able to actually intern types</p>",
        "id": 188504087,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582070456
    },
    {
        "content": "<p>(using tls <code>TyCtxt</code> and transmuting lifetime)</p>",
        "id": 188504113,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582070496
    },
    {
        "content": "<p>so it's not actually <em>correct</em></p>",
        "id": 188504123,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582070508
    },
    {
        "content": "<p>but theoretically, that should be a local fix once <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span>'s changes get merged</p>",
        "id": 188504178,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582070530
    },
    {
        "content": "<p>in the meantime, I gotta figure out why the simple query I am doing is failing</p>",
        "id": 188504203,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582070564
    },
    {
        "content": "<p>soon <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span></p>",
        "id": 188504205,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582070565
    },
    {
        "content": "<p>somewhere, a <code>TraitRef</code> is getting created with an empty substitution</p>",
        "id": 188504223,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582070585
    },
    {
        "content": "<p>but I don't <em>think</em> it's because of how I'm lowering to <code>TraitRef</code>s directly. I think it has to do with the <code>Binder</code>s</p>",
        "id": 188504249,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582070616
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/pull/332\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/332\">https://github.com/rust-lang/chalk/pull/332</a> and <a href=\"https://github.com/rust-lang/rust/pull/69406\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/69406\">https://github.com/rust-lang/rust/pull/69406</a></p>",
        "id": 188884792,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582492568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> nice, will take a look, I have a question --</p>",
        "id": 188950210,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582567468
    },
    {
        "content": "<p>there was this PR about removing the existing integration</p>",
        "id": 188950223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582567487
    },
    {
        "content": "<p>I have to look it over but I was thinking of merging it, just to undo the old dependency</p>",
        "id": 188950236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582567508
    },
    {
        "content": "<p>do you think that would make this PR harder?</p>",
        "id": 188950238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582567511
    },
    {
        "content": "<p>seems like \"probably not\"</p>",
        "id": 188950252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582567520
    },
    {
        "content": "<p>So, in some ways, <em>yes</em></p>",
        "id": 188951489,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582568442
    },
    {
        "content": "<p>because that PR also removes all the infrastructure for <code>-Z chalk</code></p>",
        "id": 188951515,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582568469
    },
    {
        "content": "<p>and there are some places like here <a href=\"https://github.com/rust-lang/rust/pull/69247/files#diff-f485b4e6b0c24b409813516a33e7083aL360\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/69247/files#diff-f485b4e6b0c24b409813516a33e7083aL360\">https://github.com/rust-lang/rust/pull/69247/files#diff-f485b4e6b0c24b409813516a33e7083aL360</a> that are doing something special for Chalk (unsure exactly why)</p>",
        "id": 188951625,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582568542
    },
    {
        "content": "<p>that's not to say I can't <em>revert</em> that PR as my first commit in my PR</p>",
        "id": 188951661,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582568583
    },
    {
        "content": "<p>(since a good chunk of that code does get removed/changed anyways)</p>",
        "id": 188951679,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582568607
    },
    {
        "content": "<p>OK, that PR perhaps goes a bit too far then</p>",
        "id": 188958798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582573369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you around?</p>",
        "id": 188973905,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582583898
    },
    {
        "content": "<p>question about rustc I think</p>",
        "id": 188973939,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582583935
    },
    {
        "content": "<p>related to <a href=\"https://github.com/rust-lang/chalk/issues/261\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/261\">https://github.com/rust-lang/chalk/issues/261</a></p>",
        "id": 188973968,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582583954
    },
    {
        "content": "<p>do you know what the best way to generate these clauses are?</p>",
        "id": 188974045,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582584007
    },
    {
        "content": "<p>well</p>",
        "id": 188974659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582584541
    },
    {
        "content": "<p>Sized is maybe the trickiest to start with</p>",
        "id": 188974675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582584550
    },
    {
        "content": "<p>I realize now</p>",
        "id": 188974686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582584565
    },
    {
        "content": "<p>or, maybe not</p>",
        "id": 188974696,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582584570
    },
    {
        "content": "<p>there is some specialized code in rustc to handle Sized</p>",
        "id": 188974703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582584575
    },
    {
        "content": "<p>but I think it's primarily done that way for efficiency</p>",
        "id": 188974707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582584579
    },
    {
        "content": "<p>/me thinks</p>",
        "id": 188974723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582584601
    },
    {
        "content": "<p>the short version is that there will be some custom code in chalk-solve I think</p>",
        "id": 188974774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582584624
    },
    {
        "content": "<p>that looks at the \"Self type\" and generates some clauses</p>",
        "id": 188974778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582584630
    },
    {
        "content": "<p>in the case of <code>SomeStruct: Sized</code> (i.e., where self-type is a struct type) we would want to check that the fields are <code>Sized</code> -- in fact, the <em>actual</em> rules are that only the <em>final field</em> can be unsized I think, so that's really the only type you have to check</p>",
        "id": 188974812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582584663
    },
    {
        "content": "<p>it might be easier to start with some of the other well-known traits, e.g. <code>Clone</code></p>",
        "id": 188974829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582584678
    },
    {
        "content": "<p><code>Clone</code> is interesting in that it has a mix of user-given impls and -- for some types, like closures -- we auto-generate impls</p>",
        "id": 188974848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582584692
    },
    {
        "content": "<p>the current chalk-ir doesn't recognize those distinctions I guess</p>",
        "id": 188974857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582584701
    },
    {
        "content": "<p>So, for reference, I'm trying to get the most basic possible program to compile successfully</p>",
        "id": 188974928,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582584728
    },
    {
        "content": "<p>we should make a list of all the built-in traits that are required and start to list them out with some notes on what their impls are</p>",
        "id": 188974929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582584729
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>trait Foo {}\n\nstruct Bar {}\n\nimpl Foo for Bar {}\n\nfn main() -&gt; () {\n}\n</pre></div>",
        "id": 188974941,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582584744
    },
    {
        "content": "<p>ah, ok, and you're hitting the need for <code>Sized</code> specifically I guess</p>",
        "id": 188974942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582584745
    },
    {
        "content": "<p>exactly</p>",
        "id": 188974947,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582584749
    },
    {
        "content": "<p>well basically the rule would be that, for a struct type, all the fields must be sized</p>",
        "id": 188974967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582584765
    },
    {
        "content": "<p>BUT, <code>unimplemented!()</code>s get called</p>",
        "id": 188974971,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582584770
    },
    {
        "content": "<p>that's more than you need but it's ok</p>",
        "id": 188974973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582584771
    },
    {
        "content": "<p>good starting point</p>",
        "id": 188974987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582584785
    },
    {
        "content": "<p>I mean, there is <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/struct.TyS.html#method.is_sized\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/struct.TyS.html#method.is_sized\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/struct.TyS.html#method.is_sized</a></p>",
        "id": 188974991,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582584788
    },
    {
        "content": "<p>I don't know if I can use that</p>",
        "id": 188975009,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582584805
    },
    {
        "content": "<p>The problem right now, is I assume I would have to return that impl in <code>impls_for_trait</code></p>",
        "id": 188975036,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582584831
    },
    {
        "content": "<p>but, then I would have to return all impls for <code>Sized</code></p>",
        "id": 188975095,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582584855
    },
    {
        "content": "<p>I guess <code>Sized</code> is an auto trait?</p>",
        "id": 188975183,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582584931
    },
    {
        "content": "<p>Well, not exactly</p>",
        "id": 188976948,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582586391
    },
    {
        "content": "<p>but that <em>scheme</em> seems to work here</p>",
        "id": 188976961,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582586400
    },
    {
        "content": "<p>since, chalk-solve calls <code>impl_provided_for</code> for auto traits</p>",
        "id": 188977034,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582586434
    },
    {
        "content": "<p>Sized is <em>special</em></p>",
        "id": 188977485,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582586847
    },
    {
        "content": "<p>This makes me think. Maybe <code>chalk-ir</code> needs a bit of refining in regards to auto traits. They really represent a couple things right now: coinductive (which is a separate flag too), non_enumerable (also a separate flag too), and this \"late implementations\" (similar to the idea of non-enumerability, but we can generate a <em>single</em> clause given a struct via <code>impl_provided_for</code>)</p>",
        "id": 188977742,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582587110
    },
    {
        "content": "<p>So, maybe \"auto trait\" in chalk-ir should also should only mean that bit (renamed maybe too). And both actual auto traits and <code>Sized</code> would have that flag</p>",
        "id": 188977813,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582587174
    },
    {
        "content": "<p>I actually don't think <code>Clone</code> is that special tbh</p>",
        "id": 188977827,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582587189
    },
    {
        "content": "<p>ok so I (with tons of hacks) got all of the goals from the basic test to return a Unique Solution.</p>",
        "id": 188979501,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582588916
    },
    {
        "content": "<p>And I <em>expected</em> that to cause the test to pass</p>",
        "id": 188979551,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582588931
    },
    {
        "content": "<p>But it still fails</p>",
        "id": 188979555,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582588937
    },
    {
        "content": "<p>But I don't get any info why</p>",
        "id": 188979565,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582588944
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span>‍♂️</p>",
        "id": 188979568,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582588947
    },
    {
        "content": "<p>So, I'm probably lowering something as a struct or something where it should be variable</p>",
        "id": 188979669,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582589048
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/188977742\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/188977742\">said</a>:</p>\n<blockquote>\n<p>but we can generate a <em>single</em> clause given a struct via <code>impl_provided_for</code>)</p>\n</blockquote>\n<p>Also, I realized this isn't correct. We generate the impl if this is false</p>",
        "id": 188979866,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582589258
    },
    {
        "content": "<p>oh haha</p>",
        "id": 188980076,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582589497
    },
    {
        "content": "<p>I had to --bless the test <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 188980080,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582589508
    },
    {
        "content": "<p>That means....first passing test with Chalk reintegration</p>",
        "id": 188980138,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582589533
    },
    {
        "content": "<p>(don't pay attention to the terrible hacks done to get this specific test to pass)</p>",
        "id": 188980153,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582589560
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/jx4_fXebMPk9knGE8qZYPLQS/image.png\" target=\"_blank\" title=\"image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/jx4_fXebMPk9knGE8qZYPLQS/image.png\" target=\"_blank\" title=\"image.png\"><img src=\"/user_uploads/4715/jx4_fXebMPk9knGE8qZYPLQS/image.png\"></a></div>",
        "id": 188980247,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582589645
    },
    {
        "content": "<p>wait...</p>",
        "id": 188980257,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582589660
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/rD1xn-RJzlG7VxU3C3e3nawT/image.png\" target=\"_blank\" title=\"image.png\">image.png</a> it was because it had already ran/passed</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/rD1xn-RJzlG7VxU3C3e3nawT/image.png\" target=\"_blank\" title=\"image.png\"><img src=\"/user_uploads/4715/rD1xn-RJzlG7VxU3C3e3nawT/image.png\"></a></div>",
        "id": 188980299,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582589740
    },
    {
        "content": "<p>auto-trait is a completely distinct thing from <code>Sized</code>, imo</p>",
        "id": 189051433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582658512
    },
    {
        "content": "<p>there are some vague similarities but</p>",
        "id": 189051474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582658522
    },
    {
        "content": "<p>what I mean is</p>",
        "id": 189051493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582658536
    },
    {
        "content": "<p>it's true that the most naive rule for <code>Sized</code> is to generate a similar predicate for all field types</p>",
        "id": 189051506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582658544
    },
    {
        "content": "<p>but rustc uses a rather different rule</p>",
        "id": 189051512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582658548
    },
    {
        "content": "<p>(that is significantly more efficient)</p>",
        "id": 189051515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582658554
    },
    {
        "content": "<p>and I expect we will ultimately want that</p>",
        "id": 189051521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582658558
    },
    {
        "content": "<p>side note: do you think <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> that I should merge your PR that upgrades chalk into rustc, as opposed to the PR that is trying to <em>remove</em> support?</p>",
        "id": 189051569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582658603
    },
    {
        "content": "<p>(I didn't catch up on all your comments above yet)</p>",
        "id": 189051574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582658611
    },
    {
        "content": "<p>We can talk more about Sized during design meeting.</p>",
        "id": 189051821,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582658764
    },
    {
        "content": "<p>And I think if we can get the upgrade PR to a place that it can be merged, it would just be easier to merge that</p>",
        "id": 189051889,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582658808
    },
    {
        "content": "<p>OK</p>",
        "id": 189057084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582662077
    },
    {
        "content": "<p>Another thing to think about, because I'm unsure, is how do we handle <code>Predicate::RegionOutlives</code> and <code>Predicate::TypeOutlives</code></p>",
        "id": 189073857,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582675065
    },
    {
        "content": "<p>for now you should just ignore them :) but we should add that to our list of things to work out</p>",
        "id": 189123490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582730342
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> another question if you're around</p>",
        "id": 189138332,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582739218
    },
    {
        "content": "<p>how do I best translate a <code>PolyTraitPredicate</code> into a <code>WhereClause</code>?</p>",
        "id": 189138386,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582739262
    },
    {
        "content": "<p>For example, <code>Binder(TraitPredicate(&lt;P as std::ops::FnMut&lt;(&amp;T,)&gt;&gt;))</code></p>",
        "id": 189138579,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582739394
    },
    {
        "content": "<p>heh this is one of the things I want to refactor</p>",
        "id": 189226459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582819126
    },
    {
        "content": "<p>(on the rustc side)</p>",
        "id": 189226466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582819129
    },
    {
        "content": "<p>but basically that would be converted to multiple where clauses</p>",
        "id": 189226480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582819137
    },
    {
        "content": "<p>actually, are you sure you want to return a <code>WhereClause</code>?</p>",
        "id": 189226551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582819180
    },
    {
        "content": "<p>(vs a <code>Goal</code> or <code>Clause</code>?)</p>",
        "id": 189226562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582819184
    },
    {
        "content": "<p>if so, that seems like a problem =)</p>",
        "id": 189226567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582819187
    },
    {
        "content": "<p>So, this is in <code>impl_datum</code></p>",
        "id": 189227704,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582819845
    },
    {
        "content": "<p>so, need to return <code>QuantifiedWhereClause</code></p>",
        "id": 189227731,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582819868
    },
    {
        "content": "<p>so...kind of just answered my own question</p>",
        "id": 189227763,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582819886
    },
    {
        "content": "<p>Ok yeah, I definitely think that I this is the PR is sort of in a place that I need some kind of review to be able to tell what I'm doing wrong</p>",
        "id": 189372906,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582946651
    },
    {
        "content": "<p>but I should maybe clean things up a bit</p>",
        "id": 189372909,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582946661
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> so regarding <a href=\"https://github.com/rust-lang/rust/pull/69247/\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/69247/\">https://github.com/rust-lang/rust/pull/69247/</a> --</p>",
        "id": 189523876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583175683
    },
    {
        "content": "<p>you felt like you wouldn't be able to \"just revert\"</p>",
        "id": 189523891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583175695
    },
    {
        "content": "<p>if we tried to land it first</p>",
        "id": 189523897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583175698
    },
    {
        "content": "<p>I see that it removes e.g. the <code>-Zchalk</code> option etc</p>",
        "id": 189523911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583175709
    },
    {
        "content": "<p>but I'm not quite sure why it can't be reverted</p>",
        "id": 189524291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583175910
    },
    {
        "content": "<p>no no, I said I <em>can</em> revert it :)</p>",
        "id": 189526355,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583177067
    },
    {
        "content": "<p>oh, I misunderstood then :)</p>",
        "id": 189531604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583180121
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I was more-or-less expecting that we would land it and just revert it and build on that revert (and then perhaps flatten those first few commits)</p>",
        "id": 189531631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583180143
    },
    {
        "content": "<p>\"seems ok\"</p>",
        "id": 189531641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583180150
    },
    {
        "content": "<p>that works for me</p>",
        "id": 189532087,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583180447
    },
    {
        "content": "<p><code>pub trait Interner: Debug + Copy + Eq + Ord + Hash</code></p>",
        "id": 189544052,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583187646
    },
    {
        "content": "<p>it really shouldn't need those bounds</p>",
        "id": 189544059,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583187652
    },
    {
        "content": "<p>(and if we're gonna store a <code>&amp;'tcx TyCtxt</code> in <code>RustInterner</code>, we can't have them)</p>",
        "id": 189544109,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583187699
    },
    {
        "content": "<p>But then in places like <code>chalk-solve</code>, when making the <code>Graph&lt;ImplId&lt;I&gt;, ()&gt;</code>, you can't unless <code>I: Ord</code></p>",
        "id": 189544210,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583187766
    },
    {
        "content": "<p>probably because those use <code>derive(Ord)</code></p>",
        "id": 189544262,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583187817
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/189544052\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/189544052\">said</a>:</p>\n<blockquote>\n<p><code>pub trait Interner: Debug + Copy + Eq + Ord + Hash</code></p>\n</blockquote>\n<p>oh but it's so convenient :)</p>",
        "id": 189545615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583188949
    },
    {
        "content": "<p>we can have them</p>",
        "id": 189545619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583188954
    },
    {
        "content": "<p><code>eq</code> can just always be false or something</p>",
        "id": 189545626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583188959
    },
    {
        "content": "<p>or always true :)</p>",
        "id": 189545647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583188977
    },
    {
        "content": "<p>but maybe that's too hacky</p>",
        "id": 189545666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583188995
    },
    {
        "content": "<p>well, it does't have to be that, it can use ptr comparison or something</p>",
        "id": 189545675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583189009
    },
    {
        "content": "<p>yeah, I almost want to just keep those because not adding those spreads so fast</p>",
        "id": 189545744,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583189055
    },
    {
        "content": "<p>\"just keep those\" = \"keep Debug +C opy + Eq + Org + HAsh\"?</p>",
        "id": 189606418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583251313
    },
    {
        "content": "<p>I definitely want to keep them :)</p>",
        "id": 189606426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583251316
    },
    {
        "content": "<p>being able to use <code>#[derive]</code> is a big win</p>",
        "id": 189606441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583251320
    },
    {
        "content": "<p>and I don't think there's a real problem caused by those bounds</p>",
        "id": 189606508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583251339
    },
    {
        "content": "<p>we have to add a few impls, seems ok</p>",
        "id": 189606516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583251343
    },
    {
        "content": "<p>honestly, those impls can even <code>panic!</code></p>",
        "id": 189606528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583251354
    },
    {
        "content": "<p>who cares</p>",
        "id": 189606530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583251355
    },
    {
        "content": "<p>That's actually a good compromise, to make the impls panic</p>",
        "id": 189607090,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583251654
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> -- Friday -- are you flexible as for times?</p>",
        "id": 189639517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583272976
    },
    {
        "content": "<p>I'm working out a few things</p>",
        "id": 189639587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583273019
    },
    {
        "content": "<p>I'm flexible</p>",
        "id": 189639596,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583273028
    },
    {
        "content": "<p>I have to stop early this particular Friday because of childcare duties, but I suspect something like 9am would work well</p>",
        "id": 189639602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583273038
    },
    {
        "content": "<p>Also good for other days, but I know you're carving out time on Friday</p>",
        "id": 189639620,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583273042
    },
    {
        "content": "<p>actually let's ust say that</p>",
        "id": 189639646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583273045
    },
    {
        "content": "<p>hmm ok I might be able to ping you earlier :)</p>",
        "id": 189639654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583273053
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/189639602\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/189639602\">said</a>:</p>\n<blockquote>\n<p>I have to stop early this particular Friday because of childcare duties, but I suspect something like 9am would work well</p>\n</blockquote>\n<p>or is that too early for you :)</p>",
        "id": 189639675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583273081
    },
    {
        "content": "<p>Okay, let's plan for Friday 9am</p>",
        "id": 189639676,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583273081
    },
    {
        "content": "<p>and earlier if you need</p>",
        "id": 189639683,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583273087
    },
    {
        "content": "<p>(9 am is early, but it's okay)</p>",
        "id": 189639700,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583273098
    },
    {
        "content": "<p>So next thing I'm finding is that I think the <code>WellFormed</code> clauses for <code>TyData::Function</code> are wrong</p>",
        "id": 189748244,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583365735
    },
    {
        "content": "<p>chalk-solve currently just gives the program clauses for each of the parameter types</p>",
        "id": 189748367,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583365857
    },
    {
        "content": "<p>Another thing that I think might be wrong:</p>",
        "id": 189809815,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583426010
    },
    {
        "content": "<p>So, there is a portion of the <code>builtin-copy-clone.rs</code> test:</p>",
        "id": 189809864,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583426041
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>fn test_copy&lt;T: Copy&gt;(arg: T) {\n    let _ = arg;\n    let _ = arg;\n}\n</pre></div>",
        "id": 189809924,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583426055
    },
    {
        "content": "<p>And rustc generates a goal <code>Implemented(T: Clone)</code></p>",
        "id": 189809987,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583426092
    },
    {
        "content": "<p>With <code>T: Copy</code> in the environment</p>",
        "id": 189810012,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583426105
    },
    {
        "content": "<p>and of course <code>Copy: Clone</code></p>",
        "id": 189810037,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583426114
    },
    {
        "content": "<p>So a clause gets generated <code>FromEnv(T: Clone) :- FromEnv(T: Copy)</code></p>",
        "id": 189810091,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583426144
    },
    {
        "content": "<p>(one sec, looking so I can paste/confirm)</p>",
        "id": 189810272,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583426239
    },
    {
        "content": "<p><code>: : : | pushed clause Some(for&lt;type, lifetime&gt; FromEnv(StructId(Param(Self/#0)): TraitId(Trait(DefId(2:1593 ~ core[8350]::clone[0]::Clone[0])))) :- FromEnv(^0: TraitId(Trait(DefId(2:1893 ~ core[8350]::marker[0]::Copy[0])))))</code></p>",
        "id": 189810433,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583426335
    },
    {
        "content": "<p>Well that's not right...that's <code>FromEnv(Self: Clone) :- FromEnv(Self: Copy)</code></p>",
        "id": 189810490,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583426368
    },
    {
        "content": "<p>ok so I might be lowering that wrong</p>",
        "id": 189810615,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583426427
    },
    {
        "content": "<p>I was indeed lowering wrong. <code>Self</code> really should have been a <code>BoundVar</code>. Now it's hackily (is that a word) fixed</p>",
        "id": 189847624,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583450060
    },
    {
        "content": "<p>Next thing: checking if <code>chalk_ir::Fn</code> is <code>Sized</code></p>",
        "id": 189847658,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583450094
    },
    {
        "content": "<p>I feel like this is where my auto-trait hijacking is gonna break down</p>",
        "id": 189847689,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583450122
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> if you're around, I am too</p>",
        "id": 189892474,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583501609
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> here now</p>",
        "id": 189893373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583502342
    },
    {
        "content": "<p>Have you had a chance to at least briefly skim over the PR?</p>",
        "id": 189893436,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583502369
    },
    {
        "content": "<p>nope, let me do that now</p>",
        "id": 189893487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583502426
    },
    {
        "content": "<p>yeah, that would probably be best. Because I'm sure there are things I am doing wrong</p>",
        "id": 189893540,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583502469
    },
    {
        "content": "<p>there's a lot  here :)</p>",
        "id": 189894413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503078
    },
    {
        "content": "<p>(duh)</p>",
        "id": 189894458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503085
    },
    {
        "content": "<p>(hopefully that's good?)</p>",
        "id": 189894464,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583503093
    },
    {
        "content": "<p>I guess a few fundamental things to point out/talk about:</p>",
        "id": 189894473,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583503103
    },
    {
        "content": "<ul>\n<li><code>Interned</code></li>\n</ul>",
        "id": 189894477,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583503108
    },
    {
        "content": "<p>it's just taking me some time to get a sense for it</p>",
        "id": 189894484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503113
    },
    {
        "content": "<p>(going through and adding a couple things to that list)</p>",
        "id": 189894520,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583503133
    },
    {
        "content": "<p>many parts are what I expected :)</p>",
        "id": 189894527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503140
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/189894464\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/189894464\">said</a>:</p>\n<blockquote>\n<p>(hopefully that's good?)</p>\n</blockquote>\n<p>to be clear, yes, good :)</p>",
        "id": 189894574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503170
    },
    {
        "content": "<p>I'm mostly looking for difficulties I didn't expect</p>",
        "id": 189894590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503188
    },
    {
        "content": "<ul>\n<li>What to do about <code>const</code></li>\n</ul>",
        "id": 189894636,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583503203
    },
    {
        "content": "<p>I thought I would start with the code that converts rust types into chalk types (similar goals etc)</p>",
        "id": 189894659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503209
    },
    {
        "content": "<p>that works too :)</p>",
        "id": 189894672,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583503218
    },
    {
        "content": "<p>I gather that's the <code>lower_into</code> fns</p>",
        "id": 189894674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503219
    },
    {
        "content": "<p>yes</p>",
        "id": 189894697,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583503234
    },
    {
        "content": "<p>well, that plus the <code>RustIrDatabase</code> impl</p>",
        "id": 189894700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503235
    },
    {
        "content": "<p>Yeah, it's a <em>bit</em> scattered right now</p>",
        "id": 189894710,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583503246
    },
    {
        "content": "<p>(it was worse initially, but I've consolidated somewhat into <code>lower_into</code>s)</p>",
        "id": 189894734,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583503270
    },
    {
        "content": "<p>we talked a bit about the <code>RustDefId</code> enum</p>",
        "id": 189894772,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503299
    },
    {
        "content": "<ul>\n<li>What is the difference between <code>CanonicalVarKind::Placeholder*</code> and <code>CanonicalVarKind::*</code></li>\n</ul>",
        "id": 189894773,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583503300
    },
    {
        "content": "<ul>\n<li>For <code>Params</code>, do those always gets substituted for <code>Parameter</code>/<code>BoundVar</code>?</li>\n</ul>",
        "id": 189894906,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583503382
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/189894636\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/189894636\">said</a>:</p>\n<blockquote>\n<ul>\n<li>What to do about <code>const</code></li>\n</ul>\n</blockquote>\n<p>I expected to panic for now :)</p>",
        "id": 189894929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503397
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/189894906\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/189894906\">said</a>:</p>\n<blockquote>\n<ul>\n<li>For <code>Params</code>, do those always gets substituted for <code>Parameter</code>/<code>BoundVar</code>?</li>\n</ul>\n</blockquote>\n<p>you may have noticed I had a work item for chalk; this is one of the cases where I thought we might want to extend Chalk's type IR with another variant -- logically, rust's param types are a combination of \"bound variables\" or \"placeholders\"</p>",
        "id": 189895011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503457
    },
    {
        "content": "<p>but rustc draws a distinction that may be useful</p>",
        "id": 189895029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503471
    },
    {
        "content": "<p>Which is?</p>",
        "id": 189895133,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583503544
    },
    {
        "content": "<p>(guessing you're explaining)</p>",
        "id": 189895140,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583503551
    },
    {
        "content": "<p>well</p>",
        "id": 189895232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503614
    },
    {
        "content": "<p>so in rustc we use <code>ty::Param</code> for type parameters declares on impls, structs, and other \"declarations\"</p>",
        "id": 189895251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503637
    },
    {
        "content": "<p>but we use a different thing for the regions that are bound as part of a type (e.g., the <code>'a</code> in <code>for&lt;'a&gt; fn(&amp;'a u32)</code>)</p>",
        "id": 189895286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503672
    },
    {
        "content": "<p>\"early\" vs \"late\" bound, is the rustc terminology</p>",
        "id": 189895313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503681
    },
    {
        "content": "<p>I believe rust-analyzer has a similar distinction</p>",
        "id": 189895369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503695
    },
    {
        "content": "<p>so, if nothing else, in chalk, it might be easier for us if we create a form of placeholder that makes it easy to map a <code>ty::Param</code></p>",
        "id": 189895412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503722
    },
    {
        "content": "<p>I believe rustc parameters have def-ids by now?</p>",
        "id": 189895421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503728
    },
    {
        "content": "<p>let me double check</p>",
        "id": 189895425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503730
    },
    {
        "content": "<p>ah, interesting, no, they <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/struct.ParamTy.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/struct.ParamTy.html\">just have an index</a></p>",
        "id": 189895507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503768
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 189895509,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583503769
    },
    {
        "content": "<p>I mean they <em>do</em> have a DefId</p>",
        "id": 189895549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503774
    },
    {
        "content": "<p>but we don't store it in the type</p>",
        "id": 189895556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503778
    },
    {
        "content": "<p>those docs are so nice</p>",
        "id": 189895558,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583503780
    },
    {
        "content": "<p>rustdocs?</p>",
        "id": 189895578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503794
    },
    {
        "content": "<p>it's nice to have them, I remember how long it took us to get them setup</p>",
        "id": 189895640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503808
    },
    {
        "content": "<p>yep</p>",
        "id": 189895641,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583503809
    },
    {
        "content": "<p>I find them hard to read with the \"This is an internal compiler API\" all over the place :)</p>",
        "id": 189895665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503821
    },
    {
        "content": "<p>but oh well</p>",
        "id": 189895666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503823
    },
    {
        "content": "<p>otherwise I would be absolutely lost</p>",
        "id": 189895670,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583503824
    },
    {
        "content": "<p>I've learned to ignore that</p>",
        "id": 189895699,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583503836
    },
    {
        "content": "<p>so somewhat separately</p>",
        "id": 189895712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503842
    },
    {
        "content": "<p>but relatedly</p>",
        "id": 189895716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503845
    },
    {
        "content": "<p>the way I still think we should handle region constraints</p>",
        "id": 189895758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503867
    },
    {
        "content": "<p>does require a kind of distinction between \"external region placeholders\"</p>",
        "id": 189895779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503880
    },
    {
        "content": "<p>and the ones we create from higher-ranked things like <code>for&lt;'a&gt;</code></p>",
        "id": 189895788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503891
    },
    {
        "content": "<p>which is only to say</p>",
        "id": 189895816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503908
    },
    {
        "content": "<p>that this distinction between \"placeholders in scope in the starting environment\"</p>",
        "id": 189895906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503942
    },
    {
        "content": "<p>and \"placeholders we introduce as part of solving forall goals\"</p>",
        "id": 189895919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503952
    },
    {
        "content": "<p>might be useful there too</p>",
        "id": 189895920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583503955
    },
    {
        "content": "<p>is this only useful for regions?</p>",
        "id": 189895971,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583503992
    },
    {
        "content": "<p>not types?</p>",
        "id": 189895986,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583503995
    },
    {
        "content": "<p>depends what you mean</p>",
        "id": 189896004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504016
    },
    {
        "content": "<p>I think it's useful for both</p>",
        "id": 189896019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504025
    },
    {
        "content": "<p>well ok so let's back up</p>",
        "id": 189896043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504041
    },
    {
        "content": "<p>maybe we should make a hackmd or something that we can use for shared context?</p>",
        "id": 189896086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504049
    },
    {
        "content": "<p>i.e., the list of questions and \"uncomfortable things\"</p>",
        "id": 189896096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504054
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/189896086\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/189896086\">said</a>:</p>\n<blockquote>\n<p>maybe we should make a hackmd or something that we can use for shared context?</p>\n</blockquote>\n<p>that works</p>",
        "id": 189896139,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583504075
    },
    {
        "content": "<p>do you want to create it?</p>",
        "id": 189896195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/189894477\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/189894477\">said</a>:</p>\n<blockquote>\n<ul>\n<li><code>Interned</code></li>\n</ul>\n</blockquote>\n<p>So, this is more of talking about the <code>Interner</code> in general</p>",
        "id": 189896231,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583504115
    },
    {
        "content": "<p>I'll create one</p>",
        "id": 189896251,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583504120
    },
    {
        "content": "<p><a href=\"https://hackmd.io/6Ftm1EgRTOy_wmQyc_kAng?both\" target=\"_blank\" title=\"https://hackmd.io/6Ftm1EgRTOy_wmQyc_kAng?both\">https://hackmd.io/6Ftm1EgRTOy_wmQyc_kAng?both</a></p>",
        "id": 189896296,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583504148
    },
    {
        "content": "<p>So, for interning, I'm just using the same interners as the rest of rustc</p>",
        "id": 189896429,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583504201
    },
    {
        "content": "<p>which I think is correct?</p>",
        "id": 189896438,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583504210
    },
    {
        "content": "<p>but it does mean I have to make <code>Interned</code> public: <a href=\"https://github.com/rust-lang/rust/pull/69406/files#diff-c8a6d543f758cb294320bcac3b5268aeR1951\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/69406/files#diff-c8a6d543f758cb294320bcac3b5268aeR1951\">https://github.com/rust-lang/rust/pull/69406/files#diff-c8a6d543f758cb294320bcac3b5268aeR1951</a></p>",
        "id": 189896480,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583504236
    },
    {
        "content": "<p>yes, that's what I expected</p>",
        "id": 189896484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504240
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/189896480\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/189896480\">said</a>:</p>\n<blockquote>\n<p>but it does mean I have to make <code>Interned</code> public: <a href=\"https://github.com/rust-lang/rust/pull/69406/files#diff-c8a6d543f758cb294320bcac3b5268aeR1951\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/69406/files#diff-c8a6d543f758cb294320bcac3b5268aeR1951\">https://github.com/rust-lang/rust/pull/69406/files#diff-c8a6d543f758cb294320bcac3b5268aeR1951</a></p>\n</blockquote>\n<p>because it is used across crates?</p>",
        "id": 189896533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504266
    },
    {
        "content": "<p>The <code>'tcx T</code> field is still only <code>pub(crate)</code>, but I think if that was public, I could actually move everything to <code>librustc_traits</code></p>",
        "id": 189896609,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583504293
    },
    {
        "content": "<p>yes</p>",
        "id": 189896614,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583504296
    },
    {
        "content": "<p>because it gets exposed in <code>Interner</code></p>",
        "id": 189896622,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583504303
    },
    {
        "content": "<p>And I just wanted to touch base that this is <em>okay</em></p>",
        "id": 189896738,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583504373
    },
    {
        "content": "<p>Alternatively, could make a new <code>ChalkInterned</code> type</p>",
        "id": 189896854,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583504416
    },
    {
        "content": "<p>it seems ok, though I don't <em>quite</em> know why it's necessary yet</p>",
        "id": 189896907,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504443
    },
    {
        "content": "<p>oh, because this?</p>",
        "id": 189896927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504459
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">     </span><span class=\"k\">type</span> <span class=\"nc\">InternedType</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Interned</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">chalk_ir</span>::<span class=\"n\">TyData</span><span class=\"o\">&lt;</span><span class=\"n\">Self</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 189896932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504463
    },
    {
        "content": "<p>yes</p>",
        "id": 189896939,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583504467
    },
    {
        "content": "<p>I expected <code>&amp;'tcx chalk_ir::TyData&lt;Self&gt;</code></p>",
        "id": 189896969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504478
    },
    {
        "content": "<p>oh</p>",
        "id": 189896984,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583504489
    },
    {
        "content": "<p>that would work too...</p>",
        "id": 189896991,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583504494
    },
    {
        "content": "<p>although I suppose that might have some downsides</p>",
        "id": 189897016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504507
    },
    {
        "content": "<p>in particular the <code>PartialEq</code> etc is less efficient</p>",
        "id": 189897102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504537
    },
    {
        "content": "<p>anyway I don't think it's <em>bad</em> for <code>Interned</code> to be public</p>",
        "id": 189897119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504547
    },
    {
        "content": "<p>you could overcome the <code>PartialEq</code> perf loss by having some \"newtype\" like <code>&amp;'tcx InternedTyData&lt;Self&gt;</code></p>",
        "id": 189897186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504580
    },
    {
        "content": "<p>but then you're just kind of reproducing what <code>Interned</code> already does, I imagine..?</p>",
        "id": 189897197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504591
    },
    {
        "content": "<p>So</p>",
        "id": 189897231,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583504607
    },
    {
        "content": "<p>relevant: <a href=\"https://github.com/rust-lang/rust/pull/69406/files#diff-c8a6d543f758cb294320bcac3b5268aeR2137\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/69406/files#diff-c8a6d543f758cb294320bcac3b5268aeR2137\">https://github.com/rust-lang/rust/pull/69406/files#diff-c8a6d543f758cb294320bcac3b5268aeR2137</a></p>",
        "id": 189897242,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583504618
    },
    {
        "content": "<p>mm yeah I guesss you're adding those impls yourself anyway</p>",
        "id": 189897334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504664
    },
    {
        "content": "<p>I'm sure there is a reason we don't have blanket impls</p>",
        "id": 189897398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504717
    },
    {
        "content": "<p>though I don't recall what it is</p>",
        "id": 189897402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504720
    },
    {
        "content": "<p>anyway this is small potatoes</p>",
        "id": 189897439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504758
    },
    {
        "content": "<p>let's move on to the other stuff :)</p>",
        "id": 189897443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504761
    },
    {
        "content": "<p>I think it's ok to make <code>Interned</code> public for now</p>",
        "id": 189897489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504767
    },
    {
        "content": "<p>or to use <code>&amp;'tcx TyData</code></p>",
        "id": 189897498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504773
    },
    {
        "content": "<p>I'll try the latter</p>",
        "id": 189897509,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583504785
    },
    {
        "content": "<p>So, for const</p>",
        "id": 189897514,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583504789
    },
    {
        "content": "<p>I would add a TODO or FIXME or something</p>",
        "id": 189897535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504806
    },
    {
        "content": "<p>Is an \"okay\" alternative to panicing just replace it with <code>()</code>?</p>",
        "id": 189897536,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583504808
    },
    {
        "content": "<p>indicating like \"this could be more efficient if we used the address\"</p>",
        "id": 189897546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504815
    },
    {
        "content": "<p>i.e., convert all constants to unit type?</p>",
        "id": 189897576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504837
    },
    {
        "content": "<p>yeah</p>",
        "id": 189897581,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583504841
    },
    {
        "content": "<p>I guess it's ok for now</p>",
        "id": 189897592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504853
    },
    {
        "content": "<p>not something I had considered but it seems fine</p>",
        "id": 189897607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504866
    },
    {
        "content": "<p>it'l make some things pass that shouldn't</p>",
        "id": 189897611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504875
    },
    {
        "content": "<p>So, for context:</p>",
        "id": 189897614,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583504877
    },
    {
        "content": "<p>I was running into an issue where I was trying to lower I think <code>IntoIter</code></p>",
        "id": 189897683,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583504910
    },
    {
        "content": "<p>I guess without doing <em>something</em> we may not be able to get very far</p>",
        "id": 189897692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504911
    },
    {
        "content": "<p>we could also talk about extending chalk with constants</p>",
        "id": 189897699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504916
    },
    {
        "content": "<p>which has the <code>const</code> param</p>",
        "id": 189897708,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583504924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/189897683\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/189897683\">said</a>:</p>\n<blockquote>\n<p>I was running into an issue where I was trying to lower I think <code>IntoIter</code></p>\n</blockquote>\n<p>yeah, I just realized that you'll hit some primitive impls in libcore</p>",
        "id": 189897712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504930
    },
    {
        "content": "<p>I should be updating the roadmap actually, hold up :)</p>",
        "id": 189897733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504949
    },
    {
        "content": "<p>constant support is definitely a \"category of work\"</p>",
        "id": 189897738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504958
    },
    {
        "content": "<p>Though, may not have to worry about that, because I <em>was</em> being super conservative and returning <em>all</em> impls instead of filtering</p>",
        "id": 189897741,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583504959
    },
    {
        "content": "<p>Yeah, I think that's an issue already somewhere</p>",
        "id": 189897761,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583504973
    },
    {
        "content": "<p>I suspect we could do something reasonable</p>",
        "id": 189897766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504977
    },
    {
        "content": "<p>that works for \"the simple stuff\"</p>",
        "id": 189897774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504984
    },
    {
        "content": "<p>fairly easily</p>",
        "id": 189897777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583504986
    },
    {
        "content": "<p>Along the same lines, how do I handle <code>Array</code>?</p>",
        "id": 189897797,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583505001
    },
    {
        "content": "<p>Because the array length is specified as a mir <code>Const</code></p>",
        "id": 189897859,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583505015
    },
    {
        "content": "<p>right, that's why you might want better support for constants</p>",
        "id": 189897908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505031
    },
    {
        "content": "<p>Just keep that around?</p>",
        "id": 189897921,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583505037
    },
    {
        "content": "<p>okay</p>",
        "id": 189897927,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583505042
    },
    {
        "content": "<p>I'm wondering if we should just go ahead and try to add some sort of constants</p>",
        "id": 189898027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505121
    },
    {
        "content": "<p>Probably sooner rather than later</p>",
        "id": 189898079,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583505131
    },
    {
        "content": "<p>basically i'm wondering a bit whether the better strategy</p>",
        "id": 189898080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505132
    },
    {
        "content": "<p>is to build up \"something that works\" on rustc side asap</p>",
        "id": 189898102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505144
    },
    {
        "content": "<p>or to take the time to go and refactor chalk</p>",
        "id": 189898108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505150
    },
    {
        "content": "<p>with things like constants, parameters, etc</p>",
        "id": 189898115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505156
    },
    {
        "content": "<p>that feel rough</p>",
        "id": 189898117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505158
    },
    {
        "content": "<p>given that we have rust-analyzer</p>",
        "id": 189898122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505162
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/189898108\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/189898108\">said</a>:</p>\n<blockquote>\n<p>or to take the time to go and refactor chalk</p>\n</blockquote>\n<p>this might be better</p>",
        "id": 189898131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505168
    },
    {
        "content": "<p>but I'd be curious about your take on it</p>",
        "id": 189898150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505184
    },
    {
        "content": "<p>Yeah, I've basically been trying to \"get as far as I can\"</p>",
        "id": 189898159,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583505191
    },
    {
        "content": "<p>But there's some fundamental things that will make the integration not possible in a general sense</p>",
        "id": 189898170,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583505209
    },
    {
        "content": "<p>So far:</p>",
        "id": 189898176,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583505214
    },
    {
        "content": "<p>yes, I viewed your effort in part as</p>",
        "id": 189898180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505220
    },
    {
        "content": "<p>\"let's give this a try to get a better idea of what work is left\"</p>",
        "id": 189898194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505231
    },
    {
        "content": "<ul>\n<li>Binders and such</li>\n<li>Consts</li>\n<li>Sized and such</li>\n</ul>",
        "id": 189898197,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583505235
    },
    {
        "content": "<p>(maybe others)</p>",
        "id": 189898203,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583505240
    },
    {
        "content": "<p>There's quite a few things that I'm doing on to let the <em>current test</em> go a bit further</p>",
        "id": 189898305,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583505278
    },
    {
        "content": "<p>can we take a sec to try and get them into roadmap a bit?</p>",
        "id": 189898396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505325
    },
    {
        "content": "<p>so built-in traits are a major thing that's not present</p>",
        "id": 189898404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505329
    },
    {
        "content": "<p>(I'm editing a file locally now)</p>",
        "id": 189898410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505333
    },
    {
        "content": "<p>Yes</p>",
        "id": 189898414,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583505335
    },
    {
        "content": "<p>what's the list of built-in traits?</p>",
        "id": 189898484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505363
    },
    {
        "content": "<p>Sized, Clone, Copy</p>",
        "id": 189898489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505366
    },
    {
        "content": "<p>I forget if there are others</p>",
        "id": 189898499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505373
    },
    {
        "content": "<p>I think only <code>Sized</code></p>",
        "id": 189898500,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583505373
    },
    {
        "content": "<p>(at least <em>partially</em> built-in)</p>",
        "id": 189898503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505377
    },
    {
        "content": "<p>Clone and Copy are not a problem</p>",
        "id": 189898510,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583505381
    },
    {
        "content": "<p>well, no, we have built-in impls for Clone and Copy that relate to closures</p>",
        "id": 189898517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505385
    },
    {
        "content": "<p>not a problem, it's true</p>",
        "id": 189898524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505388
    },
    {
        "content": "<p>oh</p>",
        "id": 189898532,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583505392
    },
    {
        "content": "<p>but we don't support them yet</p>",
        "id": 189898533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505392
    },
    {
        "content": "<p>oh, <code>Unsize</code></p>",
        "id": 189898572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505412
    },
    {
        "content": "<p>that's a big one</p>",
        "id": 189898577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505414
    },
    {
        "content": "<p>you'll find this logic in <a href=\"http://select.rs\" target=\"_blank\" title=\"http://select.rs\">select.rs</a></p>",
        "id": 189898584,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505417
    },
    {
        "content": "<p>ok I'll take a look</p>",
        "id": 189898620,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583505439
    },
    {
        "content": "<p>at some point</p>",
        "id": 189898630,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583505445
    },
    {
        "content": "<p><code>UnwindSafe</code> is just an auto trait right?</p>",
        "id": 189898678,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583505479
    },
    {
        "content": "<p>I thnk <code>UnwindSafe</code> is a regular auto trait</p>",
        "id": 189898820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505566
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> the place to look, in part, is at the <a href=\"https://github.com/rust-lang/rust/blob/865b44a3e330f3ef8be0f6edf69896c9ed957ac0/src/librustc/traits/select.rs#L106\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/865b44a3e330f3ef8be0f6edf69896c9ed957ac0/src/librustc/traits/select.rs#L106\"><code>SelectionCandidate</code></a></p>",
        "id": 189898918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505606
    },
    {
        "content": "<p>Oh interesting</p>",
        "id": 189898943,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583505625
    },
    {
        "content": "<p>oh right</p>",
        "id": 189898966,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505648
    },
    {
        "content": "<p>this code got moved into crates at some point</p>",
        "id": 189898978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505652
    },
    {
        "content": "<p>I was like \"where...did all the contents of this file go\"</p>",
        "id": 189898991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505659
    },
    {
        "content": "<p>Oh another thing to add to the think about is <code>chalk_ir::Function</code> and it's interaction with those (specifically Sized is what I've run into)</p>",
        "id": 189899028,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583505682
    },
    {
        "content": "<p>But I guess that will just be part of the logic</p>",
        "id": 189899045,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583505701
    },
    {
        "content": "<p>so yeah the built-in logic is <a href=\"https://github.com/rust-lang/rust/blob/865b44a3e330f3ef8be0f6edf69896c9ed957ac0/src/librustc_infer/traits/select.rs#L1373-L1404\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/865b44a3e330f3ef8be0f6edf69896c9ed957ac0/src/librustc_infer/traits/select.rs#L1373-L1404\">sized/copy/clone/unsize</a></p>",
        "id": 189899167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505762
    },
    {
        "content": "<p>Cool</p>",
        "id": 189899198,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583505787
    },
    {
        "content": "<p>Also another think to maybe discuss is: is this the right \"level\" of integration for Chalk?</p>",
        "id": 189899219,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583505810
    },
    {
        "content": "<p>By that I mean</p>",
        "id": 189899231,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583505820
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/189898203\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/189898203\">said</a>:</p>\n<blockquote>\n<p>(maybe others)</p>\n</blockquote>\n<p>so I think there are some things in mapping types that are difficult</p>",
        "id": 189899238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505826
    },
    {
        "content": "<p>it seems like the rules around Well-formedness are already being defined upstream of <code>evaluate_goal</code></p>",
        "id": 189899297,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583505849
    },
    {
        "content": "<p>well so</p>",
        "id": 189899346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505889
    },
    {
        "content": "<p>coherence checks and well-formedness</p>",
        "id": 189899371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505910
    },
    {
        "content": "<p>are another layer where rustc duplicates chalk to some extent</p>",
        "id": 189899403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505928
    },
    {
        "content": "<p>and that I would expect to consolidate</p>",
        "id": 189899407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505932
    },
    {
        "content": "<p>but I think we're going to need to do the level we're doing <em>now</em> first</p>",
        "id": 189899426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583505944
    },
    {
        "content": "<p>okay</p>",
        "id": 189899536,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583506006
    },
    {
        "content": "<p>I sort of figured that</p>",
        "id": 189899543,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583506010
    },
    {
        "content": "<p>but wanted to double check</p>",
        "id": 189899548,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583506014
    },
    {
        "content": "<p>So, in terms of \"roadmap\"</p>",
        "id": 189899646,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583506074
    },
    {
        "content": "<p>I think that the items that we identify as \"blockers\" should probably be the \"focus\" of next sprint?</p>",
        "id": 189899721,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583506095
    },
    {
        "content": "<p>yes probably</p>",
        "id": 189899829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583506179
    },
    {
        "content": "<p>I'm about to push an updated roadmap with the stuff we've said so far,</p>",
        "id": 189899840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583506185
    },
    {
        "content": "<p>but I think we could use to drill a bit more into the type details</p>",
        "id": 189899859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583506191
    },
    {
        "content": "<p>Anything specific?</p>",
        "id": 189899921,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583506210
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/189899721\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/189899721\">said</a>:</p>\n<blockquote>\n<p>I think that the items that we identify as \"blockers\" should probably be the \"focus\" of next sprint?</p>\n</blockquote>\n<p>this was kind of my hope, that we would use this time to be better prepared next time :)</p>",
        "id": 189899934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583506220
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/189899921\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/189899921\">said</a>:</p>\n<blockquote>\n<p>Anything specific?</p>\n</blockquote>\n<p>good question, let me see if I can drop some thoughts into the hackmd</p>",
        "id": 189899951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583506232
    },
    {
        "content": "<p>to start</p>",
        "id": 189899955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583506235
    },
    {
        "content": "<p>We do have an <code>Error</code> TypeName right?</p>",
        "id": 189900198,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583506406
    },
    {
        "content": "<p>yes</p>",
        "id": 189900229,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583506423
    },
    {
        "content": "<p>ok, I left some notes in <a href=\"https://hackmd.io/6Ftm1EgRTOy_wmQyc_kAng?both#What-about-mapping-types\" target=\"_blank\" title=\"https://hackmd.io/6Ftm1EgRTOy_wmQyc_kAng?both#What-about-mapping-types\">what about mapping types</a> section</p>",
        "id": 189900574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583506604
    },
    {
        "content": "<p>I saw</p>",
        "id": 189900584,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583506615
    },
    {
        "content": "<p>Basically out of time for today though</p>",
        "id": 189900600,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583506628
    },
    {
        "content": "<p>This was a good prelude to the design meeting lol</p>",
        "id": 189900614,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583506638
    },
    {
        "content": "<p>heh, yes</p>",
        "id": 189900646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583506659
    },
    {
        "content": "<p>I mean, of course my first \"real\" contribution to rustc ends up being the <em>trait system</em> of all things</p>",
        "id": 189900766,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583506736
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/wg-traits/pull/10\" target=\"_blank\" title=\"https://github.com/rust-lang/wg-traits/pull/10\">https://github.com/rust-lang/wg-traits/pull/10</a></p>",
        "id": 189900795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583506758
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> are you available Friday at 9 again?</p>",
        "id": 190336373,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583963823
    },
    {
        "content": "<p>Yes.</p>",
        "id": 190336384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583963835
    },
    {
        "content": "<p>Want to talk more?</p>",
        "id": 190336407,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583963854
    },
    {
        "content": "<p>Definitely would like to discuss more about <code>Param</code> and what extending <code>chalk-ir</code> with another variant would look like</p>",
        "id": 190336490,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583963897
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> yes!</p>",
        "id": 190375422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584009580
    },
    {
        "content": "<p>Okay tomorrow at 9 AM :)</p>",
        "id": 190411417,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584030653
    },
    {
        "content": "<p>Ok, so current status: still unsure about <code>Param</code>s</p>",
        "id": 190452592,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584052087
    },
    {
        "content": "<p>So, before, I was essentially lowering <code>ty::Param(p)</code> to <code>TyData::Apply(RustDefId::Param(p))</code></p>",
        "id": 190452657,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584052144
    },
    {
        "content": "<p>But from talking with <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> before, it seemed like these should be either <code>BoundVar</code>s or <code>Placeholder</code>s, depending on where we lower</p>",
        "id": 190452710,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584052186
    },
    {
        "content": "<p>So, I started switching things around for that</p>",
        "id": 190452772,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584052205
    },
    {
        "content": "<p>(trying to get the <code>lower_impl</code> test to check-pass)</p>",
        "id": 190452789,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584052219
    },
    {
        "content": "<p>but, I think that, actually, I was \"right\" to lower <code>ty::Param</code> to <code>TyData::Apply(..)</code> in <em>some</em> cases</p>",
        "id": 190452852,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584052279
    },
    {
        "content": "<p>meaning, that in terms of <em>Chalk</em>, the <code>Param</code>s (when we're trying to solve a goal like <code>WellFormed(T)</code>) act like <code>Apply</code>s</p>",
        "id": 190452940,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584052356
    },
    {
        "content": "<p>I say this, primarily, because we don't generate <code>WellFormed</code> clauses for <code>Placeholder</code>s</p>",
        "id": 190452979,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584052398
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/blob/master/chalk-solve/src/clauses.rs#L336\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/blob/master/chalk-solve/src/clauses.rs#L336\">https://github.com/rust-lang/chalk/blob/master/chalk-solve/src/clauses.rs#L336</a></p>",
        "id": 190453096,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584052498
    },
    {
        "content": "<p>so there's 3 options here:<br>\n1) We treat <code>Param</code>s here as <code>Apply</code> (with a special (chalk)<code>DefId</code>).<br>\n2) We allow generating clauses for <code>Placeholder</code>s<br>\n3) We introduce a new <code>TyData::Param</code></p>",
        "id": 190453330,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584052677
    },
    {
        "content": "<p>Also, are we generated <code>WellFormed</code> goals for traits?</p>",
        "id": 190454559,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584053796
    },
    {
        "content": "<p>yes</p>",
        "id": 190454623,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584053869
    },
    {
        "content": "<p>So, something different between the way Chalk handles well-formed goals and rustc:</p>",
        "id": 190455124,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584054323
    },
    {
        "content": "<p>This is rustc's WF goal for a trait:</p>\n<div class=\"codehilite\"><pre><span></span>Canonical {\n    max_universe: U0,\n    variables: [],\n    value: InEnvironment {\n        environment: Environment {\n            clauses: [\n                ForAll(\n                    Binder(\n                        ProgramClause {\n                            goal: FromEnv(\n                                Trait(\n                                    TraitPredicate(&lt;Self as Foo&gt;),\n                                ),\n                            ),\n                            hypotheses: [],\n                            category: Other,\n                        },\n                    ),\n                ),\n            ],\n        },\n        goal: WellFormed(Self),\n    },\n}\n</pre></div>",
        "id": 190455141,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584054345
    },
    {
        "content": "<p><code>goal: WellFormed(Self)</code> is the particularly interesting bit</p>",
        "id": 190455193,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584054370
    },
    {
        "content": "<p>In Chalk, the WF goal for a trait is <code>WellFormed(&lt;Self as Foo&gt;)</code></p>",
        "id": 190455220,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584054410
    },
    {
        "content": "<p>ah nevermind it's the same</p>",
        "id": 190455251,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584054455
    },
    {
        "content": "<p><code>Trait(TraitPredicate&lt;'tcx&gt;)</code></p>",
        "id": 190455259,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584054467
    },
    {
        "content": "<p>ok I've been lowering this wrong :/</p>",
        "id": 190455573,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584054711
    },
    {
        "content": "<p>wait no</p>",
        "id": 190455652,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584054793
    },
    {
        "content": "<p><code>Predicate::WellFormed</code> is a <code>Ty</code></p>",
        "id": 190455709,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584054842
    },
    {
        "content": "<p>ah, yes, because that <code>Ty</code> is a <code>Param</code></p>",
        "id": 190455744,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584054858
    },
    {
        "content": "<p>Really, that should get lowered into a WF trait goal</p>",
        "id": 190455778,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584054906
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>Canonical {\n    max_universe: U0,\n    variables: [],\n    value: InEnvironment {\n        environment: Environment {\n            clauses: [\n                ForAll(\n                    Binder(\n                        ProgramClause {\n                            goal: FromEnv(\n                                Trait(\n                                    TraitPredicate(&lt;Self as Foo&gt;),\n                                ),\n                            ),\n                            hypotheses: [],\n                            category: Other,\n                        },\n                    ),\n                ),\n            ],\n        },\n        goal: Binder(\n            TraitPredicate(&lt;Self as Foo&gt;),\n        ),\n    },\n}\n</pre></div>",
        "id": 190456029,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584055124
    },
    {
        "content": "<p>now I'm just confused</p>",
        "id": 190456036,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584055135
    },
    {
        "content": "<p>ok so I don't think <code>chalk-integration</code> actually checks if all traits are well-formed</p>",
        "id": 190457071,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584056132
    },
    {
        "content": "<p>and I'm gonna defer further thought until tomorrow morning</p>",
        "id": 190457209,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584056205
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> oh, just saw these comments, haven't read them yet -- just wanted to say that I might not be avail at 9am but I started updating <a href=\"https://internals.rust-lang.org/t/stepping-away-from-the-rust-project/11971\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/stepping-away-from-the-rust-project/11971\">the gist</a> with a few more details</p>",
        "id": 190495145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584101119
    },
    {
        "content": "<p>Oof okay</p>",
        "id": 190495234,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584101179
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> wrong link</p>",
        "id": 190495236,
        "sender_full_name": "detrumi",
        "timestamp": 1584101182
    },
    {
        "content": "<p>lol correct</p>",
        "id": 190513887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584112262
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> i'm around now</p>",
        "id": 190513897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584112265
    },
    {
        "content": "<p>sorry, I blame COVID-19 :)</p>",
        "id": 190513902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584112271
    },
    {
        "content": "<p>my daughter's school is canceled and our schedule's are all topsy turvy :)</p>",
        "id": 190513926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584112283
    },
    {
        "content": "<p>no problem</p>",
        "id": 190514062,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584112339
    },
    {
        "content": "<p>so let me see, should I first read all your comments?</p>",
        "id": 190514087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584112356
    },
    {
        "content": "<p>as <span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span>  said, the gist link isn't correct :)</p>",
        "id": 190514103,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584112362
    },
    {
        "content": "<p>Uh, maybe not all of them</p>",
        "id": 190514173,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584112373
    },
    {
        "content": "<p>quite a bit was me rambling as I tried to understand things</p>",
        "id": 190514194,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584112383
    },
    {
        "content": "<p>let me see if I can pull out the most relevant</p>",
        "id": 190514210,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584112391
    },
    {
        "content": "<p>actually give me 5 minutes</p>",
        "id": 190514229,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584112397
    },
    {
        "content": "<p>to talk with my partner and figure out my workday schedule</p>",
        "id": 190514235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584112402
    },
    {
        "content": "<p>since right now i'm fielding like 3 conversations at once :)</p>",
        "id": 190514247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584112407
    },
    {
        "content": "<p>brb</p>",
        "id": 190514258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584112413
    },
    {
        "content": "<p>no problem, I'm gonna go through the comments</p>",
        "id": 190514303,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584112432
    },
    {
        "content": "<p>Ok, yeah, so I was basically getting confused/stuck with how to deal with the <code>WellFormed</code> goal generated by rustc for traits <code>WellFormed(Self)</code> (where <code>Self</code> is the Param presumably for <code>Foo</code> for <code>trait Foo { }</code>)</p>",
        "id": 190514590,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584112568
    },
    {
        "content": "<p>But rustc is also generating this goal: <code>goal: Binder(TraitPredicate(&lt;Self as Foo&gt;))</code></p>",
        "id": 190514666,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584112601
    },
    {
        "content": "<p>Which gets lowered to <code>Implemented(Self: Foo)</code></p>",
        "id": 190514701,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584112622
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/190453330\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/190453330\">said</a>:</p>\n<blockquote>\n<p>so there's 3 options here:<br>\n1) We treat <code>Param</code>s here as <code>Apply</code> (with a special (chalk)<code>DefId</code>).<br>\n2) We allow generating clauses for <code>Placeholder</code>s<br>\n3) We introduce a new <code>TyData::Param</code></p>\n</blockquote>\n<p>Then here I also was thinking about <code>Param</code> and how to lower it</p>",
        "id": 190514762,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584112655
    },
    {
        "content": "<p>I've found that it's actually really helpful to just look at the old chalk integration (have to look at an older commit), since in a lot of cases things are fairly similar</p>",
        "id": 190515000,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584112746
    },
    {
        "content": "<p>For example, here is where the <code>WellFormed</code> goals are lowered: <a href=\"https://github.com/rust-lang/rust/blob/21affdd00d52fba6388f1858a52c253b3f83a90d/src/librustc_traits/chalk_context/program_clauses/mod.rs#L165\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/21affdd00d52fba6388f1858a52c253b3f83a90d/src/librustc_traits/chalk_context/program_clauses/mod.rs#L165\">https://github.com/rust-lang/rust/blob/21affdd00d52fba6388f1858a52c253b3f83a90d/src/librustc_traits/chalk_context/program_clauses/mod.rs#L165</a></p>",
        "id": 190515037,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584112766
    },
    {
        "content": "<p>And so, for a bunch of types (including <code>Param</code>), if we followed the same idea, we can lower this into an empty set of goals</p>",
        "id": 190515164,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584112811
    },
    {
        "content": "<p>(but not sure that's what we <em>want</em> to do)</p>",
        "id": 190515189,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584112823
    },
    {
        "content": "<p>ok, better</p>",
        "id": 190515356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584112902
    },
    {
        "content": "<p>OK so</p>",
        "id": 190515449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584112932
    },
    {
        "content": "<p>let's back up one second</p>",
        "id": 190515462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584112936
    },
    {
        "content": "<p>gladly :)</p>",
        "id": 190515477,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584112943
    },
    {
        "content": "<p>I <em>think</em> what you're asking about is the way that <code>ty::Param</code> in rustc has a \"dual role\"</p>",
        "id": 190515497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584112955
    },
    {
        "content": "<p>sometimes it is what chalk would call a \"bound variable\"</p>",
        "id": 190515513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584112963
    },
    {
        "content": "<p>and other times it's a placeholder</p>",
        "id": 190515521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584112969
    },
    {
        "content": "<p>in rustc, this has to be known by context</p>",
        "id": 190515548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584112983
    },
    {
        "content": "<p>I'm not 100% sure how this is connected to <code>WellFormed</code> goals though</p>",
        "id": 190515589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113006
    },
    {
        "content": "<p>I think it's independent from that</p>",
        "id": 190515600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113010
    },
    {
        "content": "<p>so maybe I'm a bit confused?</p>",
        "id": 190515722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113068
    },
    {
        "content": "<p>PS, the <a href=\"https://gist.github.com/fe440aec437f7e8ad4cce8319954a973\" target=\"_blank\" title=\"https://gist.github.com/fe440aec437f7e8ad4cce8319954a973\">gist link</a> is this -- same as before, though</p>",
        "id": 190515839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113099
    },
    {
        "content": "<p>you're right. I switched gears because that was the problem I was encountering at the time</p>",
        "id": 190515860,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584113106
    },
    {
        "content": "<p>I was just at the end starting to get into the <code>ty::Param</code> question</p>",
        "id": 190515879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113115
    },
    {
        "content": "<p>(oh that one, about <code>Param</code>s)</p>",
        "id": 190515899,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584113125
    },
    {
        "content": "<p>we can talk about <code>Param</code>s only for now</p>",
        "id": 190515917,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584113138
    },
    {
        "content": "<p>there are some practical advantages to what rustc does</p>",
        "id": 190515942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113152
    },
    {
        "content": "<p>but before we talk about that, do you understand what it's doing?</p>",
        "id": 190515955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113158
    },
    {
        "content": "<p>I'm understanding the gist of it</p>",
        "id": 190516097,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584113216
    },
    {
        "content": "<p>but still trying to wrap my head around it completely</p>",
        "id": 190516144,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584113240
    },
    {
        "content": "<p>the key point is that</p>",
        "id": 190516147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113240
    },
    {
        "content": "<p>when you get some type out of the <code>RustIrDatabase</code> (well, the rustc equivalent of it, which is the <code>tcx</code> queries)</p>",
        "id": 190516177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113258
    },
    {
        "content": "<p>you just kind of \"know\" if that type needs substitution or not</p>",
        "id": 190516195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113267
    },
    {
        "content": "<p>based on whether it's the type of something in your \"current scope\" or not</p>",
        "id": 190516206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113276
    },
    {
        "content": "<p>this doesn't really all apply to chalk that much</p>",
        "id": 190516254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113286
    },
    {
        "content": "<p>but in short, if you are getting the type of some other thing, like the signature of a function being called</p>",
        "id": 190516286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113304
    },
    {
        "content": "<p>you always apply the substitution first to \"import\" it into your current type-checking context, so to speak</p>",
        "id": 190516317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113321
    },
    {
        "content": "<p>and thus the <em>substitution code</em> treats <code>ty::Param</code> as a bound variable</p>",
        "id": 190516338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113331
    },
    {
        "content": "<p>but the rest of the code treats it as a placeholder, essentially</p>",
        "id": 190516352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113338
    },
    {
        "content": "<p>because you would never be (e.g.) unifying the type of something before you've applied the substitution</p>",
        "id": 190516388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113354
    },
    {
        "content": "<p>this is why rustc has this function <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/subst/type.InternalSubsts.html#method.identity_for_item\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/subst/type.InternalSubsts.html#method.identity_for_item\"><code>identity_for_item</code></a></p>",
        "id": 190516421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113378
    },
    {
        "content": "<p>which returns a substitution like <code>0 =&gt; ty::Param(0), ...</code></p>",
        "id": 190516440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113391
    },
    {
        "content": "<p>i.e., this substitution, when applied, has no effect on the actual type that results</p>",
        "id": 190516454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113400
    },
    {
        "content": "<p>but \"conceptually\" it's replacing the bound variables with their placeholders</p>",
        "id": 190516518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113410
    },
    {
        "content": "<p>which just happen to share the same representation</p>",
        "id": 190516525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113414
    },
    {
        "content": "<p>I decided not to take  this approach in chalk because it's kind of conflating two concepts</p>",
        "id": 190516605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113445
    },
    {
        "content": "<p>and I wanted chalk's code to be clean and resilient :)</p>",
        "id": 190516627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113452
    },
    {
        "content": "<p>Is this what we do with <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/subst/type.InternalSubsts.html#method.bound_vars_for_item\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/subst/type.InternalSubsts.html#method.bound_vars_for_item\"><code>bound_vars_for_item</code></a></p>",
        "id": 190516708,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584113491
    },
    {
        "content": "<p>yeah, I think the \"chalk translation code\" uses that to convert <code>ty::Param</code> into its bound form</p>",
        "id": 190516832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113547
    },
    {
        "content": "<p>there are some advantages to rustc's approach, though:</p>",
        "id": 190516869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113570
    },
    {
        "content": "<ul>\n<li>when you are e.g. type-checking the body of a function, you can just use the types from its signature without doing any substitution</li>\n</ul>",
        "id": 190516894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113589
    },
    {
        "content": "<ul>\n<li>even if you do the substitution, you have fewer overall types, so you use less memory</li>\n</ul>",
        "id": 190516962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113629
    },
    {
        "content": "<p>sorry if I'm not talking much, trying to wrap my head around everything</p>",
        "id": 190517193,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584113744
    },
    {
        "content": "<p>i.e., if you apply an identity substitution,</p>",
        "id": 190517201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113750
    },
    {
        "content": "<p>you will get back a \"logically distinct\" (but actually identical) type</p>",
        "id": 190517236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113762
    },
    {
        "content": "<p>which will be interned to the same pointer</p>",
        "id": 190517281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113768
    },
    {
        "content": "<p>interestingly,</p>",
        "id": 190517296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113775
    },
    {
        "content": "<p><em>within chalk</em>,</p>",
        "id": 190517304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113779
    },
    {
        "content": "<p>I had wanted to explore the idea of separating out things a bit more by using distinct interners</p>",
        "id": 190517319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113788
    },
    {
        "content": "<p>i.e., the interner that represents \"types from RustIrDatabase\" might be a different parameter than the interner for \"types we are processing in the engine\"</p>",
        "id": 190517398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113810
    },
    {
        "content": "<p>even if they are both the same interner at the end</p>",
        "id": 190517410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113818
    },
    {
        "content": "<p>which helps to draw these logical distinctions</p>",
        "id": 190517416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113822
    },
    {
        "content": "<p>and keep them cleanly separated in the code</p>",
        "id": 190517428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113828
    },
    {
        "content": "<p>anyway, let me pull this back: the question is, should we adjust chalk to match rustc, or try to meet somewhere in the middle</p>",
        "id": 190517451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113843
    },
    {
        "content": "<p>I was starting to sketch what it would mean to adjust chalk to match rustc</p>",
        "id": 190517461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113852
    },
    {
        "content": "<p>to get an idea of \"how nice or not nice would that be\"</p>",
        "id": 190517496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113872
    },
    {
        "content": "<p>this is for more than just the <code>ty:Param</code> question, of course, it also applies to the bound variables schemes etc</p>",
        "id": 190517624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113929
    },
    {
        "content": "<p>yeah, I was gonna say</p>",
        "id": 190517648,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584113938
    },
    {
        "content": "<p>it seems like there are <em>a few</em> differences here</p>",
        "id": 190517669,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584113949
    },
    {
        "content": "<p>Right, so ignoring the <code>ty::Param</code> question to start</p>",
        "id": 190517692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113962
    },
    {
        "content": "<p>rustc has this early/late bound distinction and represents them differently</p>",
        "id": 190517738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584113986
    },
    {
        "content": "<p>we could do the same, it would <em>basically</em> mean you have two \"substitution folders\"</p>",
        "id": 190517765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114001
    },
    {
        "content": "<p>and essentially two forms of <code>Binders</code></p>",
        "id": 190517813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114013
    },
    {
        "content": "<p>(Side note that I wonder if the best way to do this would be to try and play with the code itself to show the impact?)</p>",
        "id": 190517891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114069
    },
    {
        "content": "<p>on Chalk side?</p>",
        "id": 190517919,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584114087
    },
    {
        "content": "<p>I think the impact wouldn't really be that deep ultimately</p>",
        "id": 190517921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114089
    },
    {
        "content": "<p>Right, on chalk side</p>",
        "id": 190517931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114096
    },
    {
        "content": "<p>in some sense, it's the \"rust-ir\" code that would use the early binders</p>",
        "id": 190517946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114106
    },
    {
        "content": "<ul>\n<li>\n<p><strong>Early bound</strong> -- these are any binders attached to \"declarations\"<br>\n  or named things, such as traits, structs, associated types. Those<br>\n  are the things that, when referenced, have to get a \"parameter list\"<br>\n  to specify the values for them.</p>\n</li>\n<li>\n<p><strong>Late bound</strong> -- these are binders that in types, goals, and<br>\n  perhaps canonical values (see below). What these have in common is<br>\n  that the binder has no \"def-id\" and there is no construct that<br>\n  instantiates the binder with a list of values (instead, we always<br>\n  instantiate the binders with fresh inference variables or<br>\n  placeholders).</p>\n</li>\n</ul>",
        "id": 190517970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114117
    },
    {
        "content": "<p>(from the gist)</p>",
        "id": 190517995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114122
    },
    {
        "content": "<p>yes, I've been reading it over a couple times</p>",
        "id": 190518028,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584114129
    },
    {
        "content": "<p>maybe i'll move that to a hackmd</p>",
        "id": 190518053,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114142
    },
    {
        "content": "<p>Ok, so I don't know if I've missed this</p>",
        "id": 190518199,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584114206
    },
    {
        "content": "<p>What is the <em>benefit</em> of early vs late bound?</p>",
        "id": 190518232,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584114232
    },
    {
        "content": "<p>Like, why is making that distinction important?</p>",
        "id": 190518286,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584114246
    },
    {
        "content": "<p>there are maybe two answers to that question</p>",
        "id": 190518358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114296
    },
    {
        "content": "<p>at the <em>language level</em> we have this concept of early- vs late-bound parameters on functions that is more-or-less orthogonal from this discussion</p>",
        "id": 190518411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114328
    },
    {
        "content": "<p>(I mean, functions are obvious since <code>for&lt;'a&gt; (&amp;'a)</code>)</p>",
        "id": 190518417,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584114330
    },
    {
        "content": "<p>but it's where those terms came from</p>",
        "id": 190518419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114331
    },
    {
        "content": "<p>not sure where the best description of this is; I have a really old blog post from a very different Rust that talks a bit about it</p>",
        "id": 190518457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114361
    },
    {
        "content": "<p>there might be a chapter in rustc-dev-guide or something</p>",
        "id": 190518500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114367
    },
    {
        "content": "<p>but as I said it's not really that important, the main thing is that when you have functions like</p>\n<div class=\"codehilite\"><pre><span></span>fn foo&lt;&#39;a, &#39;b, T&gt;(x: &amp;&#39;a u32, y: &amp;&#39;b T) where T: &#39;b { ... }\n</pre></div>",
        "id": 190518539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114393
    },
    {
        "content": "<p>rustc presently doesn't treat <code>'a</code> and <code>'b</code> in quite the same way --</p>",
        "id": 190518586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114426
    },
    {
        "content": "<p>and in particular not <code>T</code></p>",
        "id": 190518651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114464
    },
    {
        "content": "<p>the distinction is that function types can't have <code>for&lt;T&gt; { .. }</code>, only <code>for&lt;'a&gt;</code>...</p>",
        "id": 190518733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114487
    },
    {
        "content": "<p>...so whenever you reference <code>foo</code> the type you get back can't be <code>for&lt;'a, 'b, T&gt; fn(&amp;'a u32, y: &amp;'b T)</code></p>",
        "id": 190518779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114509
    },
    {
        "content": "<p>the <code>T</code> must be substituted \"early\"</p>",
        "id": 190518797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114519
    },
    {
        "content": "<p>in particular if you have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// T, &#39;b have to be substituted here</span>\n<span class=\"n\">x</span><span class=\"p\">(...);</span><span class=\"w\"> </span><span class=\"c1\">// &#39;a substituted here, at the point of call</span>\n<span class=\"n\">x</span><span class=\"p\">(..);</span><span class=\"w\"> </span><span class=\"c1\">// &#39;a substituted here with a different value</span>\n</pre></div>",
        "id": 190518857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114553
    },
    {
        "content": "<p>I think I've just realized I've been mixing up early and late bound regions in my mind for a bit</p>",
        "id": 190518866,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584114557
    },
    {
        "content": "<p>anyway,  as I said, this <em>actually</em> isn't that relevant</p>",
        "id": 190518869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114561
    },
    {
        "content": "<p>(and it's kind of an artificial limitation)</p>",
        "id": 190518883,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114571
    },
    {
        "content": "<p>(kind of)</p>",
        "id": 190518906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114582
    },
    {
        "content": "<p>if the question is, why is it good to represent some bound variables one way, and others a different way</p>",
        "id": 190518985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114605
    },
    {
        "content": "<p>I think that .. mm .. it really isn't particularly good</p>",
        "id": 190519014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114617
    },
    {
        "content": "<p>but it is what rustc does and I suspect it's maybe convenient sometimes, I'm trying to think a bit more about that</p>",
        "id": 190519056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114640
    },
    {
        "content": "<p>the other question is</p>",
        "id": 190519069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114647
    },
    {
        "content": "<p>is it <em>bad</em></p>",
        "id": 190519075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114651
    },
    {
        "content": "<p>I think the answer there is mostly that it's potentially confusing and hard to explain</p>",
        "id": 190519108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114670
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/190519014\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/190519014\">said</a>:</p>\n<blockquote>\n<p>I think that .. mm .. it really isn't particularly good</p>\n</blockquote>\n<p>well, there is also this stuff I was saying earlier,</p>",
        "id": 190519132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114684
    },
    {
        "content": "<p>about having fewer types overall</p>",
        "id": 190519142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114690
    },
    {
        "content": "<p>and thus using less memory</p>",
        "id": 190519164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114705
    },
    {
        "content": "<p>and perhaps increasing efficiency (because you don't have to fold types in some cases, since you're just doing an identify substitution)</p>",
        "id": 190519185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114716
    },
    {
        "content": "<p>I'm not sure how connected that is to the early/late distinction <em>exactly</em> but it feels at least sort of related</p>",
        "id": 190519294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114754
    },
    {
        "content": "<p>that is to say, maybe you can have only one sort of parameter (eliminate debruijn indices, say) and get those same benefits</p>",
        "id": 190519353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114785
    },
    {
        "content": "<p>(separately I've been pondering if we could/should try to eliminate debruijn indices, they too have advantages and disadvantages compared to other schemes we could use; some things are simpler and more efficient, but they have to be explained, and nobody knows how to spell them)</p>",
        "id": 190519440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114829
    },
    {
        "content": "<p>I guess I feel a certain desire to avoid trying to figure out the perfect answer</p>",
        "id": 190519555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114864
    },
    {
        "content": "<p>in other words, if we can adjust chalk to match rustc fairly easily</p>",
        "id": 190519575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114873
    },
    {
        "content": "<p>we could defer a bit the question of whether we should try something different</p>",
        "id": 190519595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114885
    },
    {
        "content": "<p>and explore it a bit async</p>",
        "id": 190519600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114888
    },
    {
        "content": "<p>so, question</p>",
        "id": 190519618,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584114896
    },
    {
        "content": "<p>In what cases (if any) would you have two or more levels of late-bound regions</p>",
        "id": 190519670,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584114913
    },
    {
        "content": "<p>well, nested fn types, nested goals,</p>",
        "id": 190519744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114934
    },
    {
        "content": "<p>e.g. <code>for&lt;'a&gt; fn(for&lt;'b&gt; fn(&amp;'a &amp;'b u32))</code></p>",
        "id": 190519769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114947
    },
    {
        "content": "<p>ah yeah</p>",
        "id": 190519776,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584114949
    },
    {
        "content": "<p>or <code>forall&lt;T&gt; { exists&lt;U&gt; { T = U } }</code></p>",
        "id": 190519820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114962
    },
    {
        "content": "<p>PS, I have a meeting in 4 minutes :/</p>",
        "id": 190519900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584114994
    },
    {
        "content": "<p>I guess we didn't reach a firm conclusion but I do want to put forward this question:</p>",
        "id": 190519924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584115006
    },
    {
        "content": "<p>this has been helpful, I think</p>",
        "id": 190519940,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584115013
    },
    {
        "content": "<ul>\n<li>how much to emphasize  \"align with rustc and make progress, then revisit best choice\"</li>\n<li>vs \"explore all choices now and move rustc/chalk to match\"</li>\n</ul>",
        "id": 190520000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584115042
    },
    {
        "content": "<p>my sense is it may be worth sketching out somewhat the range of possibilities</p>",
        "id": 190520023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584115054
    },
    {
        "content": "<p>I honestly don't know if I have enough information/context to properly give the \"best\" answer here</p>",
        "id": 190520148,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584115096
    },
    {
        "content": "<p>I do think the practical value of not having to refactor rustc very much is not to be overlooked, though (but of course we can refactor rustc if we want to)</p>",
        "id": 190520177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584115104
    },
    {
        "content": "<p>but I somewhat lean towards the second</p>",
        "id": 190520185,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584115111
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/190520148\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/190520148\">said</a>:</p>\n<blockquote>\n<p>I honestly don't know if I have enough information/context to properly give the \"best\" answer here</p>\n</blockquote>\n<p>yeah :) I doubt there is a \"best\" answer anyway</p>",
        "id": 190520188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584115113
    },
    {
        "content": "<p>But I guess it sort of depends on if we <em>can</em> bridge between the two in the meantime</p>",
        "id": 190520252,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584115145
    },
    {
        "content": "<p>to be clear I thkn we could totally bridge rustc to what chalk has now</p>",
        "id": 190520319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584115180
    },
    {
        "content": "<p>and I can talk you through it</p>",
        "id": 190520326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584115184
    },
    {
        "content": "<p>(I've been trying)</p>",
        "id": 190520351,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584115195
    },
    {
        "content": "<p>but I think long term we don't want to be bridging</p>",
        "id": 190520352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584115195
    },
    {
        "content": "<p>of course</p>",
        "id": 190520386,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584115202
    },
    {
        "content": "<p>but, along the rule of \"temporary is never temporary\"</p>",
        "id": 190520456,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584115227
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/190520351\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/190520351\">said</a>:</p>\n<blockquote>\n<p>(I've been trying)</p>\n</blockquote>\n<p>&lt;3</p>",
        "id": 190520485,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584115238
    },
    {
        "content": "<p>I feel like if we just go with \"align with rustc, change later to 'better'\", that \"later\" might not come</p>",
        "id": 190520526,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584115264
    },
    {
        "content": "<p>or, it might be even <em>more</em> difficult</p>",
        "id": 190520542,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584115274
    },
    {
        "content": "<p>I think that's quite possible :)</p>",
        "id": 190520547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584115278
    },
    {
        "content": "<p>well but one caveat is</p>",
        "id": 190520567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584115290
    },
    {
        "content": "<p>I think that doing the refactoring in rustc is a good way to assess true feasibility or find out some of the advantages/disadvantages that may be less apparent</p>",
        "id": 190520603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584115313
    },
    {
        "content": "<p>anyway I'm on this call, will ping back later, I'll at least try to skech out some of the possibilities I see</p>",
        "id": 190520656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584115324
    },
    {
        "content": "<p>I mean (not saying this will happen anytime <em>soon</em>) but I would <em>maybe</em> be up for trying some of these</p>",
        "id": 190520791,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584115389
    },
    {
        "content": "<p>I've pushed more thoughts into <a href=\"https://gist.github.com/nikomatsakis/fe440aec437f7e8ad4cce8319954a973\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/fe440aec437f7e8ad4cce8319954a973\">the gist about how to represent parameters</a></p>",
        "id": 190902070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584474717
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> the reason I asked if you were around is that I wanted to know how rust-analyer was dealing with things like generics. What I was examining so far in that gist is that -- if we wanted to map most closely to rustc -- we would essentially create a \"generic parameter placeholder\" type similar to <code>ty::Param</code> (i.e., it'd probably have both an index and a def-id) that is used to represent \"named parameters\". This would really only be used in <code>RustIrDatbase</code>, but it would replace the use of <code>Binders</code> and debruijn indices there (and we'd have some special mode to substitute for it). I was curious if this would align well with what r-a does.</p>",
        "id": 190903577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584475425
    },
    {
        "content": "<p>I've kind of switched to the chalk model, using BoundVars wherever we would want to substitute them and using Param only in the placeholder function</p>",
        "id": 190904138,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1584475646
    },
    {
        "content": "<p>It used to be more like that, but I actually like how it's working now</p>",
        "id": 190904356,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1584475724
    },
    {
        "content": "<p>that's interesting feedback</p>",
        "id": 190905038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584476049
    },
    {
        "content": "<p>how are you managing the indices on those bound vars..? same way as chalk would, I guess?</p>",
        "id": 190905086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584476081
    },
    {
        "content": "<p>Yeah</p>",
        "id": 190906014,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1584476599
    },
    {
        "content": "<p>One of the tensions I've been struggling with a bit here is that I think that the \"count variables\" method that chalk uses has some disadvantages compared to counting binders, but it has a nice advantage in that it lets you have a single list of parameters to use for a set of substitutions on generic declarations</p>",
        "id": 190906340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584476785
    },
    {
        "content": "<p>Though maybe I'm overthinking this -- e.g., we could not have 'nested binders' in the rust-ir-database representation, potentially, and just have a single binder level that includes the binders from the trait etc</p>",
        "id": 190906402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584476824
    },
    {
        "content": "<p>PS, <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I'm looking a bit into your branch and pondering whether I was correct to say that the types can be bridged as is -- or rather, I suspect it could be done, but maybe it would require doing the full conversion \"eagerly' and isn't worth it</p>",
        "id": 190917065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584482790
    },
    {
        "content": "<p>Oh</p>",
        "id": 190917842,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584483304
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> so now i'm thinking that there may be a way to \"re-align\" things in chalk so that we can (a) count binders but (b) put all the parameters for e.g. associated types at the same binder level. anyway, I should stop working now. I'll ponder a bit more but this might be a reasonable starting point at least.</p>",
        "id": 190920193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584484901
    },
    {
        "content": "<p>are parameters for associated types not in the same binder level?</p>",
        "id": 190920361,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584485005
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> currently not, but I'm not sure if this is good or not. Currently we have e.g. the impl as one binding scope and the associated type as an inner one</p>",
        "id": 190980239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584538660
    },
    {
        "content": "<p>the same thing applies to methods</p>",
        "id": 190980271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584538678
    },
    {
        "content": "<p>in rustc however we create a single unified binding scope for methods, associated types</p>",
        "id": 190980372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584538701
    },
    {
        "content": "<p>that said, I think the chalk structure is in some ways suboptimal (in other ways good)</p>",
        "id": 190980522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584538760
    },
    {
        "content": "<p>I am going to look a bit at how hard it would be to change, I suspect not so hard</p>",
        "id": 190980593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584538787
    },
    {
        "content": "<p>one thing I like about the way we do it in RA now (now that I'm at a keyboard) is that since we never use <code>Param</code> for substitution, we can just use the global ID of the parameter in the type. Previously, that was annoying to do because it made substitution more complicated, so we had an index in there like rustc. (And having the global ID there then makes things like printing the type cleaner)</p>",
        "id": 190981243,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1584539073
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> interesting -- so rustc has both (index + def-id)</p>",
        "id": 190981326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584539112
    },
    {
        "content": "<p>but you're saying that you effectively have a \"placeholder\" type that has a def-id, right?</p>",
        "id": 190981352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584539124
    },
    {
        "content": "<p>I was thinking indeed of adding such a thing</p>",
        "id": 190981357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584539127
    },
    {
        "content": "<p>yeah</p>",
        "id": 190981363,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1584539132
    },
    {
        "content": "<p>though I would also sort of like it if we had TLS in place</p>",
        "id": 190981386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584539143
    },
    {
        "content": "<p>actually, I renamed it to <code>Placeholder</code> already</p>",
        "id": 190981398,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1584539149
    },
    {
        "content": "<p>that told you the generics and other bits of context in scope</p>",
        "id": 190981413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584539156
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I think that if we were going to do integration <em>today</em> (without any further refactorings), we'd probably have to convert each <code>Ty&lt;'tcx&gt;</code> to a <code>&amp;'tcx chalk_ir::TyData&lt;TyArena&lt;'tcx&gt;&gt;</code> deeply and eagerly. Then <code>TyArena::InternedType</code> would be <code>&amp;'tcx chalk_ir::TyData&lt;Self&gt;</code>. I don't see any reason we can't do that today.</p>",
        "id": 191636548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585067272
    },
    {
        "content": "<p><em>Eventually</em> we would want to make it possible for <code>TyArena::InternedType</code> to be <code>Ty&lt;'tcx&gt;</code> and not <code>&amp;TyData</code> (and/or we want those to become more-or-less equivalent by migrating rustc)</p>",
        "id": 191636693,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585067315
    },
    {
        "content": "<p>Hmm. I think this makes sense</p>",
        "id": 191644664,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585070578
    },
    {
        "content": "<p>I was debating about what we should try to do in the next sprint</p>",
        "id": 191650413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585072969
    },
    {
        "content": "<p><em>palpatine voice</em>: Do it</p>",
        "id": 191653254,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585074361
    },
    {
        "content": "<p>I've also been thinking about this. There's lots <em>to do</em>, it's more about getting things organized. I think it would be great to be able to get some sort of MVP for chalk reintegration in. Then we could come up with a list of things that need to be adjusted</p>",
        "id": 191658985,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585077097
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> -- you have some kind of \"extended def-id\", right?</p>",
        "id": 192080255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585343165
    },
    {
        "content": "<p>in your branch, I mean</p>",
        "id": 192080281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585343175
    },
    {
        "content": "<p>do you have a link to that?</p>",
        "id": 192080287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585343179
    },
    {
        "content": "<p>yes</p>",
        "id": 192080365,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585343223
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/69406/files#diff-57dad27d24554a6c8bc73a6fdb28debcR15\" title=\"https://github.com/rust-lang/rust/pull/69406/files#diff-57dad27d24554a6c8bc73a6fdb28debcR15\">https://github.com/rust-lang/rust/pull/69406/files#diff-57dad27d24554a6c8bc73a6fdb28debcR15</a></p>",
        "id": 192080425,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585343255
    },
    {
        "content": "<p>thanks</p>",
        "id": 192081335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585343669
    },
    {
        "content": "<p>would be nice to put all of those that don't have a <code>DefId</code> themselves, behind a <code>Builtin</code> variant :P</p>",
        "id": 192093551,
        "sender_full_name": "eddyb",
        "timestamp": 1585352777
    },
    {
        "content": "<p>(but also this seems to miss the distinction between <code>*mut T</code> and <code>*const T</code>?</p>",
        "id": 192093566,
        "sender_full_name": "eddyb",
        "timestamp": 1585352809
    },
    {
        "content": "<p>Yeah this is pretty hacky so far</p>",
        "id": 192094963,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585354332
    },
    {
        "content": "<p>I think we were talking about maybe moving this to <code>TypeName</code></p>",
        "id": 192094989,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585354356
    },
    {
        "content": "<p>This misses a few other types</p>",
        "id": 192095007,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585354367
    },
    {
        "content": "<p>(haven't gotten to them yet)</p>",
        "id": 192095017,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585354376
    },
    {
        "content": "<p>indeed, the idea is not to need this type at all when we're done</p>",
        "id": 192098057,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585358374
    },
    {
        "content": "<p>So, something I'm running into</p>",
        "id": 192215074,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585549284
    },
    {
        "content": "<p>So, rustc is generating goals like <code>WellFormed(^0)</code></p>",
        "id": 192215134,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585549332
    },
    {
        "content": "<p>So, asking if a BoundVar is well-formed</p>",
        "id": 192215142,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585549349
    },
    {
        "content": "<p>which...we don't do in Chalk</p>",
        "id": 192215150,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585549368
    },
    {
        "content": "<p>so this just flounders and leads to an ambiguous solution</p>",
        "id": 192215159,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585549384
    },
    {
        "content": "<p>I think</p>",
        "id": 192215167,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585549402
    },
    {
        "content": "<p>err</p>",
        "id": 192215223,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585549449
    },
    {
        "content": "<p>well, yes that</p>",
        "id": 192215230,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585549462
    },
    {
        "content": "<p>but also, I think we're missing the WellFormed(Fn) clause</p>",
        "id": 192215877,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585550171
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you around?</p>",
        "id": 192295057,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585591510
    },
    {
        "content": "<p>I have like 3 (maybe 4) questions</p>",
        "id": 192295124,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585591538
    },
    {
        "content": "<p>1) How would you feel about adding a stopgap solution for builtin traits. A <code>force_impl_for(&amp;self, wellknown: WellKnownTrait, ...)</code> function to <code>Interner</code>. Then rustc can just return true for types based on internal logic</p>",
        "id": 192295362,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585591639
    },
    {
        "content": "<p>2) For <code>Fn</code>s, we should add a <code>WellFormed(Fn) :- WellFormed(inputs and outputs)</code> (obviously enumerated for each) right?</p>",
        "id": 192295637,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585591734
    },
    {
        "content": "<p>3) For placeholders, we should add a <code>WellFormed(placeholder) :- FromEnv(placeholder)</code>?</p>",
        "id": 192295707,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585591763
    },
    {
        "content": "<p>4) rustc definitely is generated goals with a bound var:</p>\n<div class=\"codehilite\"><pre><span></span>Canonical {\n    max_universe: U0,\n    variables: [\n        CanonicalVarInfo {\n            kind: Ty(\n                General(\n                    U0,\n                ),\n            ),\n        },\n    ],\n    value: InEnvironment {\n        environment: Environment {\n            clauses: [],\n        },\n        goal: Binder(\n            TraitPredicate(&lt;^1_0 as std::marker::Sized&gt;),\n        ),\n    },\n}\n</pre></div>",
        "id": 192295911,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585591843
    },
    {
        "content": "<p>How do I handle this?</p>",
        "id": 192295933,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585591849
    },
    {
        "content": "<p>it's completely normal that such goals are generated I think, usually the bound var will be inferred to something more specific later</p>",
        "id": 192296665,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1585592207
    },
    {
        "content": "<p>I mean, is there any that <em>should</em> be returned other than ambiguous?</p>",
        "id": 192297349,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585592554
    },
    {
        "content": "<p>as far as I understand it, it should just be ambiguous</p>",
        "id": 192298107,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1585592930
    },
    {
        "content": "<p>okay</p>",
        "id": 192298327,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585593029
    },
    {
        "content": "<p>The other strange thing about these goals is that the debruijn index is 1, not 0</p>",
        "id": 192300140,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585593951
    },
    {
        "content": "<p>but there's not a second Binder</p>",
        "id": 192300215,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585593970
    },
    {
        "content": "<p>I guess the variables count as binders?</p>",
        "id": 192300247,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585593990
    },
    {
        "content": "<p>yeah, duh</p>",
        "id": 192300504,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585594103
    },
    {
        "content": "<p>yeah, the \"canonical\" is a binder</p>",
        "id": 192316400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585601858
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/192215134\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/192215134\">said</a>:</p>\n<blockquote>\n<p>So, rustc is generating goals like <code>WellFormed(^0)</code></p>\n</blockquote>\n<p>hmm so what rustc means and what we mean by WF may be a bit different</p>",
        "id": 192316425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585601872
    },
    {
        "content": "<p>I was pondering today that I have to bring the implied bounds back into cache, and that it might be nice if made chalk match rustc's current behavior to start</p>",
        "id": 192316543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585601932
    },
    {
        "content": "<p>(that's tied up a bit in the <code>WellFormed</code> goal stuff, is why I mention it)</p>",
        "id": 192316559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585601941
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/192215877\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/192215877\">said</a>:</p>\n<blockquote>\n<p>but also, I think we're missing the WellFormed(Fn) clause</p>\n</blockquote>\n<p>I'm not quite sure what <code>Fn</code> is here I guess -- the special type for functions?</p>",
        "id": 192316596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585601971
    },
    {
        "content": "<p>ah</p>",
        "id": 192316600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585601973
    },
    {
        "content": "<p>i.e., the <em>chalk</em> type for fn pointers?</p>",
        "id": 192316609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585601978
    },
    {
        "content": "<p>the WF rules there are perhaps a bit weird because of the bound variables</p>",
        "id": 192316702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585602005
    },
    {
        "content": "<p>I think the right rule might even just be <code>WellFormed(Fn).</code> -- i.e., those types are <em>always</em> well-formed, although I don't think this is quite what rustc does. (I think we try to test that the argument types are well-formed, but only if they don't contain bound regions; it's kind of an \"optional\" check, since ultimately we'll test that the argument/return types are well-formed at the point of call -- this is how we were handling well-formedness before I really underestood the right way to do it)</p>",
        "id": 192316847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585602077
    },
    {
        "content": "<p>Yeah, rustc is definitely doing things we aren't</p>",
        "id": 192422569,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585675857
    },
    {
        "content": "<p>so, the <code>Fn</code> type here is Chalk's <code>Fn</code> (held by <code>TyData::Function</code></p>",
        "id": 192422676,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585675895
    },
    {
        "content": "<p>Or rustc's <code>FnPtr</code></p>",
        "id": 192422715,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585675911
    },
    {
        "content": "<p>rustc generates obligations that <code>WellFormed(Fn)</code> if all the inputs and outputs are well formed</p>",
        "id": 192422849,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585675950
    },
    {
        "content": "<p>(and I just matched that locally)</p>",
        "id": 192422869,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585675960
    },
    {
        "content": "<p>and yeah, without bound variables</p>",
        "id": 192422916,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585675986
    },
    {
        "content": "<p>so, with a stopgap solution to allow forcing builtin clauses from rustc, I've got the <code>builtin-copy-clone</code> test passing</p>",
        "id": 192423259,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585676139
    },
    {
        "content": "<p>what does \"forcing\" builtin clauses mean?</p>",
        "id": 192428100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585678292
    },
    {
        "content": "<p>Basically just overriding any (currently missing) logic in <code>chalk_solve</code> to add the clause</p>",
        "id": 192428255,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585678356
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>    if db.force_impl_for(well_known, ty) {\n        builder.push_fact(trait_ref.clone());\n    }\n</pre></div>",
        "id": 192428340,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585678394
    },
    {
        "content": "<p>I saw the comment now</p>",
        "id": 192428362,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585678402
    },
    {
        "content": "<p>in the short term, seems ok, but I don't think we want it long term</p>",
        "id": 192428384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585678413
    },
    {
        "content": "<p>No, definitely not something we want long term</p>",
        "id": 192428412,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585678426
    },
    {
        "content": "<p>Though, we will have to think about how to deal with specific <code>Apply</code> types</p>",
        "id": 192428515,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585678458
    },
    {
        "content": "<p>e.g. <code>Bool</code>, <code>Int</code>,etc. vs. <code>Str</code></p>",
        "id": 192428550,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585678477
    },
    {
        "content": "<p>Ok, so for <code>WellFormed(Fn)</code>, I should change this to just be fact?</p>",
        "id": 192429099,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585678733
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> when you get a chance: <a href=\"https://github.com/rust-lang/chalk/pull/367\" title=\"https://github.com/rust-lang/chalk/pull/367\">https://github.com/rust-lang/chalk/pull/367</a></p>",
        "id": 192430624,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585679412
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> re. builtin traits</p>",
        "id": 192430671,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585679428
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/192428515\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/192428515\">said</a>:</p>\n<blockquote>\n<p>Though, we will have to think about how to deal with specific <code>Apply</code> types</p>\n</blockquote>\n<p>in what sense?</p>",
        "id": 192430675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585679431
    },
    {
        "content": "<p>I expect us to add variants to the <code>ApplyName</code> in chalk for al the rust types</p>",
        "id": 192430689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585679439
    },
    {
        "content": "<p>and just add those rules into chalk-solve</p>",
        "id": 192430703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585679444
    },
    {
        "content": "<p>That works</p>",
        "id": 192430734,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585679457
    },
    {
        "content": "<p>it's a bit of a shift for chalk, in that we've traditionally kind of avoided getting into all the \"grungy details\" of Rust</p>",
        "id": 192430800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585679488
    },
    {
        "content": "<p>but I think it's right</p>",
        "id": 192430807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585679491
    },
    {
        "content": "<p>chalk should I think encapsulate all you need to have a full trait solver</p>",
        "id": 192430824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585679502
    },
    {
        "content": "<p>but <em>nothing more than that</em></p>",
        "id": 192430833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585679508
    },
    {
        "content": "<p>and it seems like knowing that <code>u32: Copy</code> is just part of that to me</p>",
        "id": 192430930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585679536
    },
    {
        "content": "<p>otherwise, rust-analyzer + rustc would ahve to duplicate it</p>",
        "id": 192430958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585679548
    },
    {
        "content": "<p>yeah</p>",
        "id": 192431175,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585679648
    },
    {
        "content": "<p>I wonder if there's opportunity to split <code>chalk_solve</code> into two</p>",
        "id": 192431208,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585679661
    },
    {
        "content": "<p>One for the solving details without these bits, and one for these bits</p>",
        "id": 192431245,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585679678
    },
    {
        "content": "<p>Can you do that without needing to split enums as well?</p>",
        "id": 192431449,
        "sender_full_name": "detrumi",
        "timestamp": 1585679767
    },
    {
        "content": "<p>I don't know</p>",
        "id": 192431561,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585679824
    },
    {
        "content": "<p>But yeah, interesting idea.</p>",
        "id": 192431729,
        "sender_full_name": "detrumi",
        "timestamp": 1585679905
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you around?</p>",
        "id": 192563235,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585761956
    },
    {
        "content": "<p>yeah</p>",
        "id": 192563290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585761963
    },
    {
        "content": "<p>more or less</p>",
        "id": 192563300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585761968
    },
    {
        "content": "<p>So, thinking about how to \"deeply\" convert rustc types to chalk, and back</p>",
        "id": 192563321,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585761981
    },
    {
        "content": "<p>specifically about Params</p>",
        "id": 192563332,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585761988
    },
    {
        "content": "<p>so, my thought is in <em>most</em> cases we can just convert to a placeholder</p>",
        "id": 192563391,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585762015
    },
    {
        "content": "<p>the problem though, is converting <em>back</em></p>",
        "id": 192563428,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585762031
    },
    {
        "content": "<p>I'm somewhat confused/thinking through what the universe of the placeholder would be</p>",
        "id": 192563734,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585762151
    },
    {
        "content": "<p>More or less, the universe roughly translates to a level of binder removed right?</p>",
        "id": 192563799,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585762192
    },
    {
        "content": "<p>hmm</p>",
        "id": 192563979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585762254
    },
    {
        "content": "<p>why do we have to convert.. oh, duh, inference hints?</p>",
        "id": 192564014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585762268
    },
    {
        "content": "<p>I had sort of hoped to avoid converting back to start I think :)</p>",
        "id": 192564029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585762274
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/192563734\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/192563734\">said</a>:</p>\n<blockquote>\n<p>I'm somewhat confused/thinking through what the universe of the placeholder would be</p>\n</blockquote>\n<p>root</p>",
        "id": 192564041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585762280
    },
    {
        "content": "<p>but that's partly a cheat</p>",
        "id": 192564058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585762285
    },
    {
        "content": "<p>so like <code>forall&lt;1&gt; { forall&lt;0&gt; { ^1: ^0 } }</code> -&gt; <code>forall&lt;0&gt; { !0_0: ^0 }</code> -&gt; <code>!1_0: !0_0</code></p>",
        "id": 192564090,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585762299
    },
    {
        "content": "<p>still, I think we could definitely convert <code>ParamTy</code> to a placeholder in the root universe with the given index</p>",
        "id": 192564100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585762303
    },
    {
        "content": "<p>(or is that wildy wrong)</p>",
        "id": 192564112,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585762309
    },
    {
        "content": "<p>we will never create placeholders in that universe \"normally\" in chalk</p>",
        "id": 192564119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585762312
    },
    {
        "content": "<p>it's off by one</p>",
        "id": 192564181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585762323
    },
    {
        "content": "<p>I believe we <em>first</em> introduce a new universe</p>",
        "id": 192564192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585762330
    },
    {
        "content": "<p>then create the placeholders in it</p>",
        "id": 192564206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585762333
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/192564100\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/192564100\">said</a>:</p>\n<blockquote>\n<p>still, I think we could definitely convert <code>ParamTy</code> to a placeholder in the root universe with the given index</p>\n</blockquote>\n<p>that's what I've been doing I think</p>",
        "id": 192564216,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585762337
    },
    {
        "content": "<p>they don't get added to the <em>existing</em> universe, that wouldn't make sense</p>",
        "id": 192564225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585762340
    },
    {
        "content": "<p>i.e., they're supposed to be fresh types that don't alias anything that exists, so you have to put them in a new universe</p>",
        "id": 192564256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585762352
    },
    {
        "content": "<p>but let me double check</p>",
        "id": 192564265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585762354
    },
    {
        "content": "<p>right --</p>",
        "id": 192564335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585762382
    },
    {
        "content": "<p><a href=\"http://rust-lang.github.io/chalk/src/chalk_solve/infer/instantiate.rs.html#86\" title=\"http://rust-lang.github.io/chalk/src/chalk_solve/infer/instantiate.rs.html#86\">line 86</a> creates a new universe</p>",
        "id": 192564345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585762388
    },
    {
        "content": "<p>and then <a href=\"http://rust-lang.github.io/chalk/src/chalk_solve/infer/instantiate.rs.html#91\" title=\"http://rust-lang.github.io/chalk/src/chalk_solve/infer/instantiate.rs.html#91\">line 91</a> puts placeholders in it</p>",
        "id": 192564377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585762404
    },
    {
        "content": "<p>hmm</p>",
        "id": 192564521,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585762450
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/192564029\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/192564029\">said</a>:</p>\n<blockquote>\n<p>I had sort of hoped to avoid converting back to start I think :)</p>\n</blockquote>\n<p>Hmm, let me double check that there are currently cases in the few tests where we do have to convert back</p>",
        "id": 192564792,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585762577
    },
    {
        "content": "<p>so, if we <em>do</em> have to convert back</p>",
        "id": 192565261,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585762804
    },
    {
        "content": "<p>the idea that I had:</p>",
        "id": 192565271,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585762808
    },
    {
        "content": "<p>was we start by folding through the goal, and collecting the params, create a placeholder, and store a map of that placeholder to the param</p>",
        "id": 192565377,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585762863
    },
    {
        "content": "<p>(replacing the param with the placeholder as we go)</p>",
        "id": 192565415,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585762884
    },
    {
        "content": "<p>then, if we have placeholders in the solution, we can just map back</p>",
        "id": 192565573,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585762936
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so I wrote the code to collect bound vars for the rustc integration</p>",
        "id": 192748160,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585876208
    },
    {
        "content": "<p>and to convert params to placeholders</p>",
        "id": 192748168,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585876217
    },
    {
        "content": "<p>starting here: <a href=\"https://github.com/rust-lang/rust/pull/69406/files#diff-2c4ca7669b79bd3e9c8c06315b1b1f33R520\" title=\"https://github.com/rust-lang/rust/pull/69406/files#diff-2c4ca7669b79bd3e9c8c06315b1b1f33R520\">https://github.com/rust-lang/rust/pull/69406/files#diff-2c4ca7669b79bd3e9c8c06315b1b1f33R520</a></p>",
        "id": 192748212,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585876285
    },
    {
        "content": "<p>Right now,  we theoretically <em>could</em> convert any placeholders <em>back</em> in the solution, since we do this eagerly</p>",
        "id": 192748284,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585876343
    },
    {
        "content": "<p>Bound vars, I don't we need to convert back?</p>",
        "id": 192748305,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585876386
    },
    {
        "content": "<p>but anyways, trying to get the inherent_impl test to pass</p>",
        "id": 192748437,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585876544
    },
    {
        "content": "<p>And ending up with this error:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0308]: mismatched types\n  --&gt; /home/hueyj/temp/rust/rust/src/test/ui/chalkify/inherent_impl.rs:17:18\n   |\nLL | impl&lt;T&gt; S&lt;T&gt; {\n   |      - this type parameter\n...\nLL |         only_foo(&amp;self.x)\n   |                  ^^^^^^^ expected `i32`, found type parameter `T`\n   |\n   = note: expected reference `&amp;i32`\n              found reference `&amp;T`\n   = help: type parameters must be constrained to match other types\n   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n</pre></div>",
        "id": 192748465,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585876563
    },
    {
        "content": "<p>And I'm not exactly sure which one of the solutions I'm returning is the problem</p>",
        "id": 192748510,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585876604
    },
    {
        "content": "<p>none of them are a Param...</p>",
        "id": 192748540,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585876652
    },
    {
        "content": "<p>the goal/solution that seems most relevant is this one:</p>\n<div class=\"codehilite\"><pre><span></span>[src/librustc_traits/chalk/mod.rs:175] &amp;_lowered_goal = UCanonical {\n    canonical: Canonical {\n        value: InEnvironment {\n            environment: Env([for&lt;&gt; FromEnv(Ty(!1_0): TraitId(Trait(DefId(2:1893 ~ core[797c]::marker[0]::Sized[0])))), for&lt;&gt; FromEnv(Ty(!1_1): TraitId(Trait(DefId(2:1893 ~ core[797c]::marker[0]::Sized[0])))), for&lt;&gt; FromEnv(Ty(!1_1): TraitId(Trait(DefId(0:13 ~ inherent_impl[317d]::Bar[0])))), FromEnv(StructId(Ref(Not))&lt;Lifetime(&#39;^0.0), Ty(StructId(Adt(DefId(0:5 ~ inherent_impl[317d]::S[0])))&lt;Ty(!0_0)&gt;)&gt;), FromEnv(StructId(Adt(DefId(0:5 ~ inherent_impl[317d]::S[0])))&lt;Ty(!0_0)&gt;), FromEnv(!0_0)]),\n            goal: ForAll&lt;&gt; { Implemented(Ty(^1.1): TraitId(Trait(DefId(0:3 ~ inherent_impl[317d]::Foo[0])))) },\n        },\n        binders: [\n            Lifetime(U0),\n            Ty(U0),\n        ],\n    },\n    universes: 1,\n}\n[src/librustc_traits/chalk/mod.rs:176] solution = Some(\n    Unique(\n        Canonical {\n            value: ConstrainedSubst {\n                subst: [Lifetime(&#39;^0.0), Ty(StructId(Int(I32)))],\n                constraints: [],\n            },\n            binders: [\n                Lifetime(U0),\n            ],\n        },\n    ),\n)\n</pre></div>",
        "id": 192748627,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585876765
    },
    {
        "content": "<p>there's also this one:</p>\n<div class=\"codehilite\"><pre><span></span>[src/librustc_traits/chalk/mod.rs:175] &amp;_lowered_goal = UCanonical {\n    canonical: Canonical {\n        value: InEnvironment {\n            environment: Env([]),\n            goal: ForAll&lt;&gt; { Implemented(Ty(^1.0): TraitId(Trait(DefId(0:3 ~ inherent_impl[317d]::Foo[0])))) },\n        },\n        binders: [\n            Ty(U0),\n        ],\n    },\n    universes: 1,\n}\n[src/librustc_traits/chalk/mod.rs:176] solution = Some(\n    Unique(\n        Canonical {\n            value: ConstrainedSubst {\n                subst: [Ty(StructId(Int(I32)))],\n                constraints: [],\n            },\n            binders: [],\n        },\n    ),\n)\n</pre></div>",
        "id": 192748730,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585876894
    },
    {
        "content": "<p>So, I'm obviously doing something wrong <em>somewhere</em> and I would appreciate it if you could take a look</p>",
        "id": 192748949,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585877138
    },
    {
        "content": "<p>But, assuming that we're okay with the stopgap builtin traits solution for the MVP, once we get this fixed, that should be enough for the MVP to be \"done\"</p>",
        "id": 192749026,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585877211
    },
    {
        "content": "<p>I'll obviously have to cleanup everything (lots of dbg statements everywhere), and rebase/fmt/etc.</p>",
        "id": 192749037,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585877249
    },
    {
        "content": "<p>But I think this is pretty close</p>",
        "id": 192749040,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585877258
    },
    {
        "content": "<p>I'm wondering if the error here is backwards</p>",
        "id": 192749798,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585878344
    },
    {
        "content": "<p>That we're returning i32 but expecting the Param <code>T</code></p>",
        "id": 192749814,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585878362
    },
    {
        "content": "<p>Ah yeah</p>",
        "id": 192749866,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585878413
    },
    {
        "content": "<p>We're essentially checking this:</p>\n<div class=\"codehilite\"><pre><span></span>fn only_foo&lt;T: Foo&gt;(_x: &amp;T) { }\n\nimpl&lt;T&gt; S&lt;T&gt; {\n    // Test that we have the correct environment inside an inherent method.\n    fn dummy_foo(&amp;self) {\n        only_foo(&amp;self.x)\n    }\n}\n</pre></div>",
        "id": 192749871,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585878435
    },
    {
        "content": "<p>So this bit of the environment is important <code>for&lt;&gt; FromEnv(Ty(!1_0): TraitId(Trait(DefId(0:3 ~ inherent_impl[317d]::Foo[0]))))</code></p>",
        "id": 192749950,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585878511
    },
    {
        "content": "<p>ah, so I think this should be returning ambiguous here</p>",
        "id": 192751379,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585880418
    },
    {
        "content": "<p>And the reason why it's not</p>",
        "id": 192751384,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585880425
    },
    {
        "content": "<p>is because that <code>FromEnv(...)</code> clause isn't getting counted</p>",
        "id": 192751395,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585880451
    },
    {
        "content": "<p>Do we...never add the environment clauses to the list of program clauses that could match?</p>",
        "id": 192751734,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585880919
    },
    {
        "content": "<p>How can that be</p>",
        "id": 192751762,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585880992
    },
    {
        "content": "<p>Wait where did I get that <code>FromEnv</code> clause from</p>",
        "id": 192752421,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585881911
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> We have to convert the predicates you find in the <code>ParamEnv</code> into \"from-env\" predicates</p>",
        "id": 192836971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585934356
    },
    {
        "content": "<p>There is a bit of a \"two modes\" thing here -- the same where-clause, when appearing in the environment, becomes <code>FromEnv</code>, and when apperaing as a goal to prove, is <code>Implemented</code></p>",
        "id": 192837009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585934381
    },
    {
        "content": "<p>maybe that's the problem?</p>",
        "id": 192837022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585934391
    },
    {
        "content": "<p>Can you elaborate that first sentence?</p>",
        "id": 192837120,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585934420
    },
    {
        "content": "<p>So, the environment is getting correctly converted I think</p>",
        "id": 192838531,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585935082
    },
    {
        "content": "<p>I think there's a couple things going on here</p>",
        "id": 192838544,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585935091
    },
    {
        "content": "<p>The first one is there impl definition <code>impl&lt;T&gt; S&lt;T&gt; { ... }</code></p>",
        "id": 192838673,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585935139
    },
    {
        "content": "<p>Is that supposed to be <code>impl&lt;T: Foo&gt; S&lt;T&gt; { ... }</code>?</p>",
        "id": 192838749,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585935180
    },
    {
        "content": "<p>(this is why I'm not seeing this clause <code>for&lt;&gt; FromEnv(Ty(!1_0): TraitId(Trait(DefId(0:3 ~ inherent_impl[317d]::Foo[0]))))</code> in the environment)</p>",
        "id": 192838891,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585935246
    },
    {
        "content": "<p>second, even when I change the inherent_impl test to <code>impl&lt;T: Foo&gt; ...</code>, there is still the same error, which I'm checking</p>",
        "id": 192838968,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585935295
    },
    {
        "content": "<p>but that FromEnv clause does appear in the environment</p>",
        "id": 192839003,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585935317
    },
    {
        "content": "<p>okay so it seems <code>!1_0</code> can't unify with the <code>?1</code> of the goal <code>FromEnv(Ty(?1): TraitId(Trait(DefId(0:3 ~ inherent_impl[317d]::Foo[0]))))</code></p>",
        "id": 192840076,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585935821
    },
    {
        "content": "<p>yeah, okay, I'm gonna have to think about this a lot harder later</p>",
        "id": 192842804,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585937081
    },
    {
        "content": "<p>Because I need to look at/think about more thing now (e.g. OccursCheck, unifying w/ universes, placeholder universes as we change tables)</p>",
        "id": 192842936,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585937142
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/192838673\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/192838673\">said</a>:</p>\n<blockquote>\n<p>The first one is there impl definition <code>impl&lt;T&gt; S&lt;T&gt; { ... }</code></p>\n</blockquote>\n<p>What are you reading this from?</p>",
        "id": 192847180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585939123
    },
    {
        "content": "<p>I'l try to look in more detail at your code in just a bit, trying to get through my notifications first</p>",
        "id": 192847220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585939148
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/69406/files#diff-b92c83fac73fe9d1333abc149ec0b55cR14\" title=\"https://github.com/rust-lang/rust/pull/69406/files#diff-b92c83fac73fe9d1333abc149ec0b55cR14\">https://github.com/rust-lang/rust/pull/69406/files#diff-b92c83fac73fe9d1333abc149ec0b55cR14</a></p>",
        "id": 192848856,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585939960
    },
    {
        "content": "<p>I can also give you the massive stderr file with all the dbg and CHALK_DEBUG output, if you think that would be helpful</p>",
        "id": 192848962,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585940023
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/192848856\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/192848856\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/pull/69406/files#diff-b92c83fac73fe9d1333abc149ec0b55cR14\" title=\"https://github.com/rust-lang/rust/pull/69406/files#diff-b92c83fac73fe9d1333abc149ec0b55cR14\">https://github.com/rust-lang/rust/pull/69406/files#diff-b92c83fac73fe9d1333abc149ec0b55cR14</a></p>\n</blockquote>\n<p>ok, so</p>",
        "id": 192851328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585941137
    },
    {
        "content": "<p>the reason that this test is written the way it is</p>",
        "id": 192851341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585941143
    },
    {
        "content": "<p>is that you don't need the <code>T: Foo</code> with chalk's version of implied bounds</p>",
        "id": 192851364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585941154
    },
    {
        "content": "<p>this is precisely the \"extended variant of implied bounds\" that chalk is implementing</p>",
        "id": 192851383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585941164
    },
    {
        "content": "<p>we are able to figure out that <code>T: Foo</code> because otherwise <code>S&lt;T&gt;</code> would be ill-formed</p>",
        "id": 192851395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585941173
    },
    {
        "content": "<p>a massive debug might help me to see why, but I think what would be most useful is just to see all the <em>goals</em> we are trying to prove along the way</p>",
        "id": 192851461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585941211
    },
    {
        "content": "<p>I'll just give you the std err, then you can search for \"_lowered_goal = \"</p>",
        "id": 192852479,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585941772
    },
    {
        "content": "<p>ok</p>",
        "id": 192852793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585941957
    },
    {
        "content": "<p>I'm waiting for build/test with the src as-is in the PR</p>",
        "id": 192853381,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585942249
    },
    {
        "content": "<p><a href=\"https://www.dropbox.com/s/2ivzgauuiq1fgcb/test.log?dl=0\" title=\"https://www.dropbox.com/s/2ivzgauuiq1fgcb/test.log?dl=0\">https://www.dropbox.com/s/2ivzgauuiq1fgcb/test.log?dl=0</a></p>\n<div class=\"message_inline_ref\"><a href=\"https://www.dropbox.com/s/2ivzgauuiq1fgcb/test.log?dl=0\" title=\"test.log\"><img src=\"https://www.dropbox.com/static/images/spectrum-icons/generated/content/content-unknown-large.png\"></a><div><div class=\"message_inline_image_title\">test.log</div><desc class=\"message_inline_image_desc\"></desc></div></div>",
        "id": 192854513,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585942843
    },
    {
        "content": "<p>Let me know if you need anything else</p>",
        "id": 192854611,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585942905
    },
    {
        "content": "<p>Oh, you know..</p>",
        "id": 192855170,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585943237
    },
    {
        "content": "<p>I thnk I know the problem</p>",
        "id": 192855178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585943243
    },
    {
        "content": "<p><em>rustc</em> is constructing these environments, I guess</p>",
        "id": 192855194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585943252
    },
    {
        "content": "<p>i.e., you're convering a rustc <code>ParamEnv</code>?</p>",
        "id": 192855211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585943268
    },
    {
        "content": "<p>the problem here is that the stuff which chalk expects to be in the environment</p>",
        "id": 192855257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585943283
    },
    {
        "content": "<p>and the stuff that rustc currently adds</p>",
        "id": 192855261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585943288
    },
    {
        "content": "<p>aren't quite aligned</p>",
        "id": 192855263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585943290
    },
    {
        "content": "<p>in particular, chalk would expect a <code>FromEnv(WellFormed(S&lt;T&gt;))</code></p>",
        "id": 192855280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585943307
    },
    {
        "content": "<p>but rustc doesn't work like that</p>",
        "id": 192855296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585943320
    },
    {
        "content": "<p>we could alter this behavior of rustc with <code>-Zchalk</code>, potentially</p>",
        "id": 192855303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585943327
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/192855296\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/192855296\">said</a>:</p>\n<blockquote>\n<p>but rustc doesn't work like that</p>\n</blockquote>\n<p>rustc handles \"implied bounds\" by trying to enumerate all the things that are implied to be true and adding them</p>",
        "id": 192855349,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585943353
    },
    {
        "content": "<p>chalk, in contrast, just adds the \"type this should be well-formed\" and then lets us work out the implications from there</p>",
        "id": 192855390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585943367
    },
    {
        "content": "<p>which is better for certain things</p>",
        "id": 192855401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585943371
    },
    {
        "content": "<p>The ParamEnv conversion happens here I think: <a href=\"https://github.com/rust-lang/rust/pull/69406/files#diff-aecdbcef2e4435e37471cf92a7d10fdeR30\" title=\"https://github.com/rust-lang/rust/pull/69406/files#diff-aecdbcef2e4435e37471cf92a7d10fdeR30\">https://github.com/rust-lang/rust/pull/69406/files#diff-aecdbcef2e4435e37471cf92a7d10fdeR30</a></p>",
        "id": 192855955,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585943656
    },
    {
        "content": "<p>(which, was how it was done in the old integration and I haven't touched)</p>",
        "id": 192855985,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585943676
    },
    {
        "content": "<p>hmm</p>",
        "id": 192856044,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585943708
    },
    {
        "content": "<p><code>FromEnv(StructId(Adt(DefId(0:5 ~ inherent_impl[317d]::S[0])))&lt;Ty(!0_0)&gt;)</code> that is in the environment though</p>",
        "id": 192856193,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585943777
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/192855280\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/192855280\">said</a>:</p>\n<blockquote>\n<p>in particular, chalk would expect a <code>FromEnv(WellFormed(S&lt;T&gt;))</code></p>\n</blockquote>\n<p>this</p>",
        "id": 192856212,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585943785
    },
    {
        "content": "<p>maybe I missed it</p>",
        "id": 192856234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585943796
    },
    {
        "content": "<p>note that here <code>T</code> has already been converted into a placeholder (<code>!0_0</code>)</p>",
        "id": 192856263,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585943810
    },
    {
        "content": "<p>OK I gues I was mistaken</p>",
        "id": 192856376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585943878
    },
    {
        "content": "<p>I sort of remember this coming up before now, and that we added some def-id into param-env for that reason...</p>",
        "id": 192856431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585943889
    },
    {
        "content": "<p>so the problem is that we're getting an error that <code>T: Foo</code> doesn't hold, right?</p>",
        "id": 192856526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585943941
    },
    {
        "content": "<p>Well, so the goal/solution that I think is wrong is:</p>",
        "id": 192856560,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585943965
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>UCanonical {\n    canonical: Canonical {\n        value: InEnvironment {\n            environment: Env([for&lt;&gt; FromEnv(Ty(!1_0): TraitId(Trait(DefId(2:1893 ~ core[797c]::marker[0]::Sized[0])))), for&lt;&gt; FromEnv(Ty(!1_1): TraitId(Trait(DefId(2:1893 ~ core[797c]::marker[0]::Sized[0])))), for&lt;&gt; FromEnv(Ty(!1_1): TraitId(Trait(DefId(0:13 ~ inherent_impl[317d]::Bar[0])))), FromEnv(StructId(Ref(Not))&lt;Lifetime(&#39;^0.0), Ty(StructId(Adt(DefId(0:5 ~ inherent_impl[317d]::S[0])))&lt;Ty(!0_0)&gt;)&gt;), FromEnv(StructId(Adt(DefId(0:5 ~ inherent_impl[317d]::S[0])))&lt;Ty(!0_0)&gt;), FromEnv(!0_0)]),\n            goal: ForAll&lt;&gt; { Implemented(Ty(^1.1): TraitId(Trait(DefId(0:3 ~ inherent_impl[317d]::Foo[0])))) },\n        },\n        binders: [\n            Lifetime(U0),\n            Ty(U0),\n        ],\n    },\n    universes: 1,\n}\n</pre></div>",
        "id": 192856595,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585943976
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>Some(\n    Unique(\n        Canonical {\n            value: ConstrainedSubst {\n                subst: [Lifetime(&#39;^0.0), Ty(StructId(Int(I32)))],\n                constraints: [],\n            },\n            binders: [\n                Lifetime(U0),\n            ],\n        },\n    ),\n)\n</pre></div>",
        "id": 192856622,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585943988
    },
    {
        "content": "<p>So, chalk finds that <code>i32</code> impls <code>Foo</code></p>",
        "id": 192856794,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585944057
    },
    {
        "content": "<p>But I think what rustc wants is that <code>T</code> impls <code>Foo</code>, given that <code>T: Foo</code></p>",
        "id": 192856858,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585944099
    },
    {
        "content": "<p>hmm</p>",
        "id": 192857153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585944251
    },
    {
        "content": "<p>PS</p>",
        "id": 192857157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585944253
    },
    {
        "content": "<p>if we had made progress on that \"dump out the chalk-ir stuff\"</p>",
        "id": 192857169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585944261
    },
    {
        "content": "<p>this would be so useful here :)</p>",
        "id": 192857176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585944266
    },
    {
        "content": "<p>yes haha</p>",
        "id": 192857187,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585944272
    },
    {
        "content": "<p>so I think the \"right answer\" would probably be ambiguity</p>",
        "id": 192857217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585944285
    },
    {
        "content": "<p>i.e., if I'm understanding the goal is <code>?T: Foo</code></p>",
        "id": 192857259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585944304
    },
    {
        "content": "<p>and chalk is saying \"hey, <code>?T = i32</code> is a good answer\"</p>",
        "id": 192857281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585944314
    },
    {
        "content": "<p>but there's another valid answer, which is <code>?T = T</code></p>",
        "id": 192857287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585944320
    },
    {
        "content": "<p>and the question is kind of \"why didn't we see it\"?</p>",
        "id": 192857306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585944332
    },
    {
        "content": "<p>right, exactly</p>",
        "id": 192857324,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585944338
    },
    {
        "content": "<p>also, can you point to the line number in the log where that happens?</p>",
        "id": 192857332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585944340
    },
    {
        "content": "<p>64382 begins that goal</p>",
        "id": 192857376,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585944363
    },
    {
        "content": "<p>maybe I'm looking at it now</p>",
        "id": 192857413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585944376
    },
    {
        "content": "<p>(though, this one is actually the second <code>only_foo</code> call I think)</p>",
        "id": 192857431,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585944392
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>    fn dummy_bar&lt;U: Bar&gt;(&amp;self) {\n        only_foo(&amp;self.x);\n        only_bar::&lt;U&gt;();\n    }\n</pre></div>",
        "id": 192857443,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585944403
    },
    {
        "content": "<p>Since there are two placeholders</p>",
        "id": 192857466,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585944418
    },
    {
        "content": "<p>hmm</p>",
        "id": 192857515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585944448
    },
    {
        "content": "<p>can you maybe try with a smaller test?</p>",
        "id": 192857537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585944461
    },
    {
        "content": "<p>maybe I should build your branch...</p>",
        "id": 192857543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585944467
    },
    {
        "content": "<p>The other is line 79090</p>",
        "id": 192857550,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585944469
    },
    {
        "content": "<p>hard to read in a web browser.</p>",
        "id": 192857555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585944476
    },
    {
        "content": "<p>yeah, I can cut this down</p>",
        "id": 192857562,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585944478
    },
    {
        "content": "<p>I commited a non-building branch :/ Have the remove the <code>let self_parameter ...</code> line in <code>chalk/db.rs</code> line 310</p>",
        "id": 192857676,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585944540
    },
    {
        "content": "<p>But other than that, builds fine</p>",
        "id": 192857708,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585944557
    },
    {
        "content": "<p>(also have an extra dbg for obligations so locally so line numbers won't be the same)</p>",
        "id": 192857761,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585944583
    },
    {
        "content": "<p>And I think I've seen the order of these goals be different run-to-run...</p>",
        "id": 192857823,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585944610
    },
    {
        "content": "<p>smaller test:</p>\n<div class=\"codehilite\"><pre><span></span>// run-pass\n// compile-flags: -Z chalk\n\ntrait Foo { }\n\nimpl Foo for i32 { }\n\nstruct S&lt;T: Foo&gt; {\n    x: T,\n}\n\nfn only_foo&lt;T: Foo&gt;(_x: &amp;T) { }\n\nimpl&lt;T&gt; S&lt;T&gt; {\n    // Test that we have the correct environment inside an inherent method.\n    fn dummy_foo(&amp;self) {\n        only_foo(&amp;self.x)\n    }\n}\n\nfn main() {\n    let s = S {\n        x: 5,\n    };\n\n    s.dummy_foo();\n}\n</pre></div>",
        "id": 192858140,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585944803
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I'm currently building your branch, but it's taking a bit because it's a fresh directory of rust</p>",
        "id": 192858226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585944844
    },
    {
        "content": "<p>Interestingly, there's nothing in the environment:</p>\n<div class=\"codehilite\"><pre><span></span>UCanonical {\n    canonical: Canonical {\n        value: InEnvironment {\n            environment: Env([]),\n            goal: ForAll&lt;&gt; { Implemented(Ty(^1.0): TraitId(Trait(DefId(0:3 ~ inherent_impl_min[317d]::Foo[0])))) },\n        },\n        binders: [\n            Ty(U0),\n        ],\n    },\n    universes: 1,\n}\n</pre></div>",
        "id": 192858240,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585944856
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> does it need some special version of chalk btw?</p>",
        "id": 192858475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585944981
    },
    {
        "content": "<p>Nope</p>",
        "id": 192858565,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585945042
    },
    {
        "content": "<p>I guess I will find out :)</p>",
        "id": 192858567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585945044
    },
    {
        "content": "<p>ok</p>",
        "id": 192858568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585945045
    },
    {
        "content": "<p>I have mine set to a chalk in the parent directory</p>",
        "id": 192858586,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585945064
    },
    {
        "content": "<p>so I can make chalk changes</p>",
        "id": 192858588,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585945071
    },
    {
        "content": "<p>but you could just change it to use the current chalk master from git</p>",
        "id": 192858643,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585945088
    },
    {
        "content": "<p>the <code>librustc</code> Cargo.toml has <code>chalk-ir</code>, and <code>librustc_traits</code> has <code>chalk-ir</code>, <code>chalk-rust-ir</code>, and <code>chalk-solve</code></p>",
        "id": 192858738,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585945166
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> so i'm reproducing the problem, will try to dig into the log a bit, i'm not quite sure what's happening yet</p>",
        "id": 192863436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585947670
    },
    {
        "content": "<p>ok great</p>",
        "id": 192863826,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585947882
    },
    {
        "content": "<p>thanks :)</p>",
        "id": 192863834,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585947884
    },
    {
        "content": "<p>I'm wondering if just making all traits non_enumerable would fix it</p>",
        "id": 192864126,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585948069
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> well probably, and we probably want to do that eventually, but it doesn't seem like the right fix</p>",
        "id": 192867435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585950142
    },
    {
        "content": "<p>i.e., it seems like someting else is off</p>",
        "id": 192867449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585950156
    },
    {
        "content": "<p>I see</p>",
        "id": 192867493,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585950197
    },
    {
        "content": "<p>hmm, I do see this</p>",
        "id": 192867619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585950278
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>: | new answer to table with goal UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([for&lt;&gt; FromEnv(Ty(!1_0): TraitId(Trait(DefId(2:1893 ~ core[d046]::marker[0]::Sized[0])))), FromEnv(StructId(Adt(DefId(0:5 ~ inherent_impl[317d]::S[0])))&lt;Ty(!0_0)&gt;), FromEnv(!0_0)]), goal: ForAll&lt;&gt; { Implemented(Ty(^1.0): TraitId(Trait(DefId(0:3 ~ inherent_impl[317d]::Foo[0])))) } }, binders: [Ty(U0)] }, universes: 1 }: answer=Answer { subst: Canonical { value: AnswerSubst { subst: [Ty(StructId(Int(I32)))], constraints: [], delayed_subgoals: [] }, binders: [] }, ambiguous: false }\n</pre></div>",
        "id": 192867628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585950284
    },
    {
        "content": "<p>er nm</p>",
        "id": 192867653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585950310
    },
    {
        "content": "<p>I was misreading that</p>",
        "id": 192867656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585950312
    },
    {
        "content": "<p>Are you using minimized test?</p>",
        "id": 192867784,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585950394
    },
    {
        "content": "<p>I miminized the test, i'm tracing a bit the chalk debug logs now</p>",
        "id": 192868346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585950776
    },
    {
        "content": "<p>oh okay</p>",
        "id": 192868367,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585950804
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> well I think this is the problem:</p>",
        "id": 192868638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585950995
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>StructDatum { binders: for&lt;type&gt; StructDatumBound { fields: [], where_clauses: [] }\n</pre></div>",
        "id": 192868660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585951016
    },
    {
        "content": "<p>I think the where clauses list should not be empty :)</p>",
        "id": 192868684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585951036
    },
    {
        "content": "<p>in particular, that test is testing that we can deduce <code>T: Foo</code> based on the fact that <code>S&lt;T&gt;</code> requires <code>T: Foo</code>, which is derived from the where-clauses on <code>S</code></p>",
        "id": 192868731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585951079
    },
    {
        "content": "<p>whoops <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span>‍♀️</p>",
        "id": 192868907,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585951187
    },
    {
        "content": "<p>Okay, so yeah. I actually made the <code>StructDatum</code>s have where_clauses</p>",
        "id": 192888277,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585973243
    },
    {
        "content": "<p>new error: error: internal compiler error: broken MIR in DefId(0:12 ~ inherent_impl_min[317d]::{{impl}}[1]::dummy_foo[0]) (NoSolution): could not prove Binder(TraitPredicate(&lt;T as Foo&gt;))</p>",
        "id": 192888287,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585973253
    },
    {
        "content": "<p>And if I add that <code>T: Foo</code> bound to the <code>S</code> impl it passes</p>",
        "id": 192888419,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585973518
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> can you push your latest changes?</p>",
        "id": 192902433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585998309
    },
    {
        "content": "<p>Let me do that now</p>",
        "id": 192909200,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586009220
    },
    {
        "content": "<p>Should have done that last night</p>",
        "id": 192909214,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586009242
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> pushed</p>",
        "id": 192909362,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586009405
    },
    {
        "content": "<p>Fixed it. I think I need a refresher on how placeholder universes work</p>",
        "id": 192921012,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586025011
    },
    {
        "content": "<p>Well, I fixed <em>that</em> error</p>",
        "id": 192921445,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586025727
    },
    {
        "content": "<p>But now it's saying <code>S&lt;T&gt;</code> isn't well formed</p>",
        "id": 192921448,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586025743
    },
    {
        "content": "<p>Okay, so I got it working with the minimal inherent impl test</p>",
        "id": 192927259,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586034672
    },
    {
        "content": "<p>but the full one is giving me this error: </p>\n<div class=\"codehilite\"><pre><span></span>error: internal compiler error: broken MIR in DefId(0:21 ~ inherent_impl[317d]::main[0]) (CanonicalUserTypeAnnotation { user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: TypeOf(DefId(0:19 ~ inherent_impl[317d]::{{impl}}[3]::dummy_bar[0]), UserSubsts { substs: [^0, u32], user_self_ty: None }) }, span: /home/hueyj/temp/rust/rust/src/test/ui/chalkify/inherent_impl.rs:41:7: 41:16, inferred_ty: for&lt;&#39;r&gt; fn(&amp;&#39;r S&lt;i32&gt;) {S::&lt;i32&gt;::dummy_bar::&lt;u32&gt;} }): bad user type AscribeUserType(for&lt;&#39;r&gt; fn(&amp;&#39;r S&lt;i32&gt;) {S::&lt;i32&gt;::dummy_bar::&lt;u32&gt;}, DefId(0:19 ~ inherent_impl[317d]::{{impl}}[3]::dummy_bar[0]) UserSubsts { substs: [_, u32], user_self_ty: None }): NoSolution\n</pre></div>",
        "id": 192927269,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586034692
    },
    {
        "content": "<p>probably caused by the one goal that is returning <code>solution = None</code></p>",
        "id": 192927324,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586034749
    },
    {
        "content": "<p>I've made some decent progress on <a href=\"https://github.com/rust-lang/chalk/issues/368\" title=\"https://github.com/rust-lang/chalk/issues/368\">https://github.com/rust-lang/chalk/issues/368</a></p>\n<p>I'd appreciate some feedback on if I'm going in the right direction with this!  <code>FnDef</code> seems fairly complete (though we can't parse into it yet) and I just started working on closures now. <a href=\"https://github.com/rust-lang/chalk/pull/371\" title=\"https://github.com/rust-lang/chalk/pull/371\">https://github.com/rust-lang/chalk/pull/371</a></p>",
        "id": 192927989,
        "sender_full_name": "Mark McCaskey",
        "timestamp": 1586036016
    },
    {
        "content": "<p>Although now that I think of it, my <code>FnDef</code> is really a function declaration not a function definition <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 192928612,
        "sender_full_name": "Mark McCaskey",
        "timestamp": 1586037022
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281304\">@Mark McCaskey</span> I'll take a look</p>",
        "id": 192929023,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586037648
    },
    {
        "content": "<p>re. my error: something is weird with how I'm doing FnDefs. For one, need to figure out the binders</p>",
        "id": 192929738,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586038723
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/192929023\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/192929023\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281304\">Mark McCaskey</span> I'll take a look</p>\n</blockquote>\n<p>Thanks!  The PR is bigger than I initially expected and I've mostly just been following the flow of the existing project in terms of what I'm updating, so even just confirmation that I've not gone completely off the rails would be valuable to me <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 192930526,
        "sender_full_name": "Mark McCaskey",
        "timestamp": 1586040013
    },
    {
        "content": "<p>After fixing <code>FnDef</code> lowering, inherent_impl test passes :)</p>",
        "id": 193069133,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586191650
    },
    {
        "content": "<p>I'm building the latest here</p>",
        "id": 193097858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586205236
    },
    {
        "content": "<p>I don't think I pushed the latest changes</p>",
        "id": 193102194,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586207340
    },
    {
        "content": "<p>But basically, in lowering, FnDef shouldn't have substs</p>",
        "id": 193102243,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586207364
    },
    {
        "content": "<p>The next problem I have to tackle is just making sure substitute Params</p>",
        "id": 193102283,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586207396
    },
    {
        "content": "<p>I ran into an issue because I'm not currently handling <code>ReEarlyBound</code>s</p>",
        "id": 193102380,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586207424
    },
    {
        "content": "<p>And I think to fix that I have to change up the BoundVarCollector</p>",
        "id": 193102424,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586207453
    },
    {
        "content": "<p>(Oops those last couple sentences are two different problems)</p>",
        "id": 193102469,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586207475
    },
    {
        "content": "<p>Ok just pushed the FnDef subst fix</p>",
        "id": 193142997,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586238241
    },
    {
        "content": "<p>with that, here's the current state of the tests:</p>",
        "id": 193143039,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586238251
    },
    {
        "content": "<p>(chalkify tests)</p>",
        "id": 193143045,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586238261
    },
    {
        "content": "<p>lower_impl, lower_trait_higher_rank, lower_trait_where_clause all fail because we don't take into account <code>ReEarlyBound</code>s in <code>BoundVarCollector</code>. Need to be smarter with this. I think we'll actually have to substitute initially with a indexed bound var (for lowering)</p>",
        "id": 193143109,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586238361
    },
    {
        "content": "<p>lower_trait fails with \"cannot infer type for array `[_; 0]\", but I haven't looked into it</p>",
        "id": 193143151,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586238377
    },
    {
        "content": "<p>projection fails because of the current <code>force_impl_for</code> not handling <code>TypeName::AssociatedType</code></p>",
        "id": 193143213,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586238468
    },
    {
        "content": "<p>type inference  is supposed to fail, but it's not clear whether it's doing so correctly. Too much stderr output</p>",
        "id": 193143284,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586238501
    },
    {
        "content": "<p>I can pull your latest and start doing a build btw</p>",
        "id": 193246012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292549
    },
    {
        "content": "<p>that would be great</p>",
        "id": 193246192,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586292640
    },
    {
        "content": "<p>some general feedback on everything would be nice</p>",
        "id": 193246231,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586292664
    },
    {
        "content": "<p>or specific feedback on <code>ReEarlyBound</code>s would be good</p>",
        "id": 193246258,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586292683
    },
    {
        "content": "<p>I'm going to have to devote a bigger block of time to <em>really</em> read into this</p>",
        "id": 193247272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586293211
    },
    {
        "content": "<p><span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 193247365,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586293269
    },
    {
        "content": "<p>Like I said, I think it's <em>pretty</em> close</p>",
        "id": 193247478,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586293292
    },
    {
        "content": "<p>so, a review would be better sooner rather than later</p>",
        "id": 193247510,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586293308
    },
    {
        "content": "<p>ok</p>",
        "id": 193247926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586293498
    },
    {
        "content": "<p>building now, in any case, and I'll try to get you meaningful feedback before end of the week</p>",
        "id": 193251270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586295192
    },
    {
        "content": "<p>Okay, so I did some work on properly handling <code>ReEarlyBound</code>, <code>ReNamed</code>, etc.</p>",
        "id": 193545125,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586504349
    },
    {
        "content": "<p>It's sort of broken right now</p>",
        "id": 193545136,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586504363
    },
    {
        "content": "<p>So not worth pushing</p>",
        "id": 193545142,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586504373
    },
    {
        "content": "<p>But I'll also need to clean things up a bit</p>",
        "id": 193545160,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586504384
    },
    {
        "content": "<p>Also realized that still not being correct with how I lower <code>Param</code>s</p>",
        "id": 193545231,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586504419
    },
    {
        "content": "<p>Specifically, in the current state, they always lower to Placeholders</p>",
        "id": 193545256,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586504468
    },
    {
        "content": "<p>But that's not correct, <em>specifically in where clauses</em></p>",
        "id": 193545282,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586504489
    },
    {
        "content": "<p>If not other places</p>",
        "id": 193545286,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586504494
    },
    {
        "content": "<p>So, in these places we need to eagerly convert to bound vars</p>",
        "id": 193545294,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586504519
    },
    {
        "content": "<p>Ok so I added support for ReEarlyBound and ReNamed</p>",
        "id": 193608881,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586547451
    },
    {
        "content": "<p>Still haven't fixed the params issue yet</p>",
        "id": 193608909,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586547466
    },
    {
        "content": "<p>but none of the chalkify tests panic :)</p>",
        "id": 193608992,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586547494
    },
    {
        "content": "<p>Okay I have a quick question that someone with better knowledge of rustc may be able to answer</p>",
        "id": 193617952,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586552992
    },
    {
        "content": "<p>So, if I get a solution from chalk</p>",
        "id": 193618025,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586553012
    },
    {
        "content": "<p>e.g. </p>\n<div class=\"codehilite\"><pre><span></span>Canonical {\n    max_universe: U0,\n    variables: [\n        CanonicalVarInfo {\n            kind: Region(\n                U0,\n            ),\n        },\n    ],\n    value: InEnvironment {\n        environment: Environment {\n            clauses: [],\n        },\n        goal: Binder(\n            TraitPredicate(&lt;&amp;[std::fmt::ArgumentV1&lt;&#39;_&gt;] as std::marker::Sized&gt;),\n        ),\n    },\n}\n</pre></div>",
        "id": 193618059,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586553041
    },
    {
        "content": "<p>the solution chalk returns is \"true for all lifetimes\"</p>",
        "id": 193618086,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586553065
    },
    {
        "content": "<p>here is what it's currently returning: </p>\n<div class=\"codehilite\"><pre><span></span>Some(\n    Unique(\n        Canonical {\n            value: ConstrainedSubst {\n                subst: [Lifetime(&#39;^0.0)],\n                constraints: [],\n            },\n            binders: [\n                Lifetime(U0),\n            ],\n        },\n    ),\n)\n</pre></div>",
        "id": 193618119,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586553100
    },
    {
        "content": "<p>(chalk)</p>",
        "id": 193618195,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586553141
    },
    {
        "content": "<p>what would be the <code>var_values</code> be</p>",
        "id": 193618219,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586553166
    },
    {
        "content": "<p>Currently it's <code>[ReLateBound(DebruijnIndex(0), BrAnon(0))]</code></p>",
        "id": 193618248,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586553189
    },
    {
        "content": "<p>But rustc doesn't like this I don't think</p>",
        "id": 193618266,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586553204
    },
    {
        "content": "<p>(or, the problem I'm seeing is happening from an earlier goal)</p>",
        "id": 193618366,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586553258
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/193618219\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/193618219\">said</a>:</p>\n<blockquote>\n<p>what would be the <code>var_values</code> be</p>\n</blockquote>\n<p>So, this is the question.</p>",
        "id": 193618427,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586553291
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> or maybe <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 193618450,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586553303
    },
    {
        "content": "<p>ah, it might be the error I'm getting (something like \"can't infer [_; 0] in the <code>println!(\"hello\");</code>\")</p>",
        "id": 193618652,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586553421
    },
    {
        "content": "<p>I probably don't know the answer</p>",
        "id": 193618806,
        "sender_full_name": "eddyb",
        "timestamp": 1586553518
    },
    {
        "content": "<p>I figured it was a long shot</p>",
        "id": 193618844,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586553550
    },
    {
        "content": "<p>yeah, so writing in explicit panic in <code>need_type_info_err</code> unveils two errors that point to the source of the problem more: <code>dtorck encountered internal error</code> and <code>unresolved inference variable in outlives: _#6t</code></p>",
        "id": 193619014,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586553650
    },
    {
        "content": "<p>Alright, so the problem is almost certainly the fact that we're essentially ignoring <code>RegionOutlives</code>, <code>TypeOutlives</code>, and <code>Subtype</code> goals</p>",
        "id": 193642147,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586579891
    },
    {
        "content": "<p>(I think we're returning an empty solution when it should be ambiguous)</p>",
        "id": 193642158,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586579915
    },
    {
        "content": "<p>So, since for our MVP, we're choosing to ignore those, I've decided to move the <code>println!(\"hello\");</code> lines out of the for chalkify tests and into it's own test for now</p>",
        "id": 193642300,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586580215
    },
    {
        "content": "<p>With that, all the existing chalkify tests pass</p>",
        "id": 193642303,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586580232
    },
    {
        "content": "<p>only the new test fails</p>",
        "id": 193642323,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586580242
    },
    {
        "content": "<p>which we're accepting right now</p>",
        "id": 193642346,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586580254
    },
    {
        "content": "<p>Ok, so did a bit of cleanup</p>",
        "id": 193649137,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586593918
    },
    {
        "content": "<p>The type_inference test <em>does</em> look like something is wrong</p>",
        "id": 193649182,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586593935
    },
    {
        "content": "<p>\"ERROR the trait bound <code>{float}: Bar</code> is not satisfied\" that error isn't being emitted</p>",
        "id": 193649187,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586593956
    },
    {
        "content": "<p>I mean, of course I discover this <em>after</em> I remove all the dbg! statements</p>",
        "id": 193649200,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586593985
    },
    {
        "content": "<p>Ah okay, so the type_inference test is blocked on <a href=\"https://github.com/rust-lang/chalk/issues/327\" title=\"https://github.com/rust-lang/chalk/issues/327\">https://github.com/rust-lang/chalk/issues/327</a></p>",
        "id": 193675236,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586632880
    },
    {
        "content": "<p>We know it's a float, so we actually do <em>know</em> that there are no solutions</p>",
        "id": 193675246,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586632912
    },
    {
        "content": "<p>as opposed to ambiguity</p>",
        "id": 193675289,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586632928
    },
    {
        "content": "<p>Surprisingly, there isn't an error given by rustc on <code>Ambig(Unknown)</code> for <code>only_bar(5.0)</code></p>",
        "id": 193675305,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586632964
    },
    {
        "content": "<p>Oh, so apparently there are compile-fail/chalkify tests</p>",
        "id": 193677727,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586636451
    },
    {
        "content": "<p>gonna move those to ui/chalkify ...</p>",
        "id": 193677732,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586636462
    },
    {
        "content": "<p>yeah, so it seems there's quite a bit that requires us to know about float/ty special handling</p>",
        "id": 193683321,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586644974
    },
    {
        "content": "<p>in some of the new tests, for example, we have to know that {float}: Sized</p>",
        "id": 193683331,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586644997
    },
    {
        "content": "<p>For now, these portions of the tests I'm leaving out</p>",
        "id": 193683334,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586645021
    },
    {
        "content": "<blockquote>\n<p>test result: ok. 23 passed; 0 failed; 0 ignored; 0 measured; 9885 filtered out</p>\n</blockquote>",
        "id": 193683400,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586645146
    },
    {
        "content": "<p>Okay, so now my PR should build :)</p>",
        "id": 193683774,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586645864
    },
    {
        "content": "<p>huh</p>",
        "id": 193693389,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586665128
    },
    {
        "content": "<p>so, the recursive_where_clause_on_type test passes locally</p>",
        "id": 193693392,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586665143
    },
    {
        "content": "<p>but on ci it fails</p>",
        "id": 193693393,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586665148
    },
    {
        "content": "<p>so, the error is duplicated</p>",
        "id": 193695137,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586668551
    },
    {
        "content": "<p>and the order on ci is different</p>",
        "id": 193695139,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586668559
    },
    {
        "content": "<p>so, seems it might have a non-deterministic order</p>",
        "id": 193695178,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586668574
    },
    {
        "content": "<p>ugh no something else is different between local and ci for me</p>",
        "id": 193696625,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586671299
    },
    {
        "content": "<p>stderr</p>",
        "id": 193696626,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586671303
    },
    {
        "content": "<blockquote>\n<p>[ui] ui/chalkify/impl_wf.rs<br>\n    [ui] ui/chalkify/recursive_where_clause_on_type.rs<br>\n    [ui] ui/const-generics/issues/issue-65675.rs</p>\n</blockquote>",
        "id": 193696629,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586671316
    },
    {
        "content": "<p>ugh okay yeah the output seems different every time I push</p>",
        "id": 193699017,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586676114
    },
    {
        "content": "<p>Is rustc causing it to be non-deterministic, or chalk?</p>",
        "id": 193699302,
        "sender_full_name": "detrumi",
        "timestamp": 1586676704
    },
    {
        "content": "<p>I actually don't know</p>",
        "id": 193717736,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586705748
    },
    {
        "content": "<p>locally, I get the same output every time</p>",
        "id": 193718685,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586707303
    },
    {
        "content": "<p>Okay, I think <em>now</em> my PR should build</p>",
        "id": 193720921,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586711022
    },
    {
        "content": "<p>the recursive_where_clause_on_type test still doesn't match my local output</p>",
        "id": 193720980,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586711086
    },
    {
        "content": "<p>there's an extra <code>warning: 1 warning emitted</code></p>",
        "id": 193720983,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586711098
    },
    {
        "content": "<p>ah right, everything works but tidy complains about chalk because they are pointing to git</p>",
        "id": 193721068,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586711199
    },
    {
        "content": "<p>and whitelist</p>",
        "id": 193721148,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586711368
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I've been digging into the branch. I'm going to push a few comments</p>",
        "id": 193809819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586805627
    },
    {
        "content": "<p>as a commit</p>",
        "id": 193809821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586805629
    },
    {
        "content": "<p>Works for me</p>",
        "id": 193809853,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586805653
    },
    {
        "content": "<p>so far I don't see anything major</p>",
        "id": 193809854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586805655
    },
    {
        "content": "<p>plenty of work remaining of course</p>",
        "id": 193809865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586805664
    },
    {
        "content": "<p>one thing I am wondering about</p>",
        "id": 193809876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586805669
    },
    {
        "content": "<p>is the role of <code>DomainGoal</code> (the rustc version)</p>",
        "id": 193809892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586805680
    },
    {
        "content": "<p>I feel like we shouldn't have that type</p>",
        "id": 193809909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586805692
    },
    {
        "content": "<p>In rustc? Why</p>",
        "id": 193810031,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586805751
    },
    {
        "content": "<p>because we have <code>Predicate</code>, and I think <code>DomainGoal</code> was only ever used in the old integration</p>",
        "id": 193810073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586805774
    },
    {
        "content": "<p>i.e., we should be able to use the chalk version, in short</p>",
        "id": 193810095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586805784
    },
    {
        "content": "<p>Oh I see</p>",
        "id": 193810109,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586805796
    },
    {
        "content": "<p>I've not read all your comments above but one of the other \"major-ish\" things I was wondering about</p>",
        "id": 193810177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586805840
    },
    {
        "content": "<p>was this code</p>",
        "id": 193810251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586805866
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">LowerInto</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">chalk_ir</span>::<span class=\"n\">Lifetime</span><span class=\"o\">&lt;</span><span class=\"n\">RustInterner</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Region</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">lower_into</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">interner</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">RustInterner</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">chalk_ir</span>::<span class=\"n\">Lifetime</span><span class=\"o\">&lt;</span><span class=\"n\">RustInterner</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">rustc_middle</span>::<span class=\"n\">ty</span>::<span class=\"n\">RegionKind</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// FIXME: shouldn&#39;t be an InferenceVar</span>\n<span class=\"w\">            </span><span class=\"c1\">//</span>\n<span class=\"w\">            </span><span class=\"c1\">// ndm: No, it really shouldn&#39;t! I sort of expect to never</span>\n<span class=\"w\">            </span><span class=\"c1\">// see these, because I expect us to substitute them</span>\n<span class=\"w\">            </span><span class=\"c1\">// away. Have you tried making this panic?</span>\n<span class=\"w\">            </span><span class=\"n\">ReEarlyBound</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">chalk_ir</span>::<span class=\"n\">LifetimeData</span>::<span class=\"n\">InferenceVar</span><span class=\"p\">(</span><span class=\"n\">chalk_ir</span>::<span class=\"n\">InferenceVar</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">intern</span><span class=\"p\">(</span><span class=\"n\">interner</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 193810255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586805869
    },
    {
        "content": "<p>see my comment there (the one that starts \"ndm\")</p>",
        "id": 193810267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586805876
    },
    {
        "content": "<p>I have to run for a bit (meeting) but I wanted to go back and look at how you are handling early-bound placeholdrs in general</p>",
        "id": 193810296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586805896
    },
    {
        "content": "<p>I saw you mention about something about translating subst into placeholders or something</p>",
        "id": 193810311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586805905
    },
    {
        "content": "<p>I <em>suspect</em> that if you are doing substitutions at the right places, then indeed translating <code>ty::Param</code> into placeholders <em>is</em> ok, because you'd just never see them I guess</p>",
        "id": 193810362,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586805931
    },
    {
        "content": "<p>in particular for where clauses I think that's true</p>",
        "id": 193810377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586805944
    },
    {
        "content": "<p>That was one of the first things I wrote. I'm gonna have to go back and look at that</p>",
        "id": 193810580,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586806041
    },
    {
        "content": "<p>So Params are a bit tricky</p>",
        "id": 193810644,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586806078
    },
    {
        "content": "<p>(btw, I'm kicking off a build to run the tests myself)</p>",
        "id": 193810695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586806087
    },
    {
        "content": "<p>In most places, they're getting substituted as placeholders</p>",
        "id": 193810727,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586806103
    },
    {
        "content": "<p>But there's a couple places that they get substituted as bound vars</p>",
        "id": 193810749,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586806116
    },
    {
        "content": "<p>(for tests, you <em>might</em> run into output differences compared to what is in the PR. At least I did)</p>",
        "id": 193810842,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586806160
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/193810749\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/193810749\">said</a>:</p>\n<blockquote>\n<p>But there's a couple places that they get substituted as bound vars</p>\n</blockquote>\n<p>I would expect them to be subst as bound variables in most places</p>",
        "id": 193810867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586806176
    },
    {
        "content": "<p>but maybe I'm misunderstanding you</p>",
        "id": 193810884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586806183
    },
    {
        "content": "<p>in particular, I would expect that in methods like <code>trait_datum</code> and the like</p>",
        "id": 193810906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586806192
    },
    {
        "content": "<p>you'd be substituting them as bound variables</p>",
        "id": 193810937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586806199
    },
    {
        "content": "<p>and I don't expect you to be substituting them much anywhere else, I guess</p>",
        "id": 193810994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586806209
    },
    {
        "content": "<p>if by substitute, you mean using the <code>subst</code> method</p>",
        "id": 193811017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586806221
    },
    {
        "content": "<p>yeah, you're right</p>",
        "id": 193811386,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586806349
    },
    {
        "content": "<p>Maybe the only place they get substituted as placeholders is in the goal itself</p>",
        "id": 193811415,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586806369
    },
    {
        "content": "<p>This is actually wrong: <a href=\"https://github.com/rust-lang/rust/pull/69406/files#diff-828ef7bd1dead769c57f685079e876f6R297\" title=\"https://github.com/rust-lang/rust/pull/69406/files#diff-828ef7bd1dead769c57f685079e876f6R297\">https://github.com/rust-lang/rust/pull/69406/files#diff-828ef7bd1dead769c57f685079e876f6R297</a></p>",
        "id": 193811965,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586806704
    },
    {
        "content": "<p>That should be replaced with <code>substitute_params</code> I think</p>",
        "id": 193812095,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586806764
    },
    {
        "content": "<p>Well, maybe that should instead not actually lower each impl, but instead check on Rust <code>Ty</code>s</p>",
        "id": 193812277,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586806863
    },
    {
        "content": "<p>So one other thing <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> is that it'd be good to land the extensions to <code>TypeName</code> --</p>",
        "id": 193815140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586808455
    },
    {
        "content": "<p>but I guess that we could as well land this first and rebase atop such changes</p>",
        "id": 193815151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586808464
    },
    {
        "content": "<p>I added that to the agenda for tomorrow</p>",
        "id": 193815458,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586808620
    },
    {
        "content": "<p>I think we should discuss</p>",
        "id": 193815469,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586808626
    },
    {
        "content": "<p>OK. Also the changes I pushed don't <em>quite</em>  build I guess :)</p>",
        "id": 193817194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586809600
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>                upstream: trait_id.is_local(),\n                fundamental: self.tcx.has_attr(trait_ref.def_id, sym::fundamental),\n                non_enumerable: true,\n</pre></div>\n\n\n<p>these?</p>",
        "id": 193817907,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586809992
    },
    {
        "content": "<p>right, a few minor fixes needed</p>",
        "id": 193818983,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586810611
    },
    {
        "content": "<p>Do you want to play with it or do you want me to</p>",
        "id": 193821405,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586811959
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> when would be a good time for a zoom call to go over the PR?</p>",
        "id": 193958233,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586898991
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I could do tomorrow morning or afternoon</p>",
        "id": 193958645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586899286
    },
    {
        "content": "<p>I can do either, so whichever is better</p>",
        "id": 193958700,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586899317
    },
    {
        "content": "<p>3pm in the afternoon, perhaps?</p>",
        "id": 193959347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586899695
    },
    {
        "content": "<p>Works for me</p>",
        "id": 193959456,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586899787
    },
    {
        "content": "<p>btw I already address your InferenceVar comment</p>",
        "id": 193959526,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586899810
    },
    {
        "content": "<p>3pm et?</p>",
        "id": 193959530,
        "sender_full_name": "Areredify",
        "timestamp": 1586899812
    },
    {
        "content": "<p>yes</p>",
        "id": 193959538,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586899817
    },
    {
        "content": "<p>OK, added to <a href=\"https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=Nzd0b2NkazJjb24zZXFhaW10ZWN2cXEwM3MgNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw&amp;tmsrc=6u5rrtce6lrtv07pfi3damgjus%40group.calendar.google.com\" title=\"https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=Nzd0b2NkazJjb24zZXFhaW10ZWN2cXEwM3MgNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw&amp;tmsrc=6u5rrtce6lrtv07pfi3damgjus%40group.calendar.google.com\">calendar</a> w/ a zoom url</p>",
        "id": 193959839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586900046
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> Are you joining the call?</p>",
        "id": 194212178,
        "sender_full_name": "detrumi",
        "timestamp": 1586977265
    },
    {
        "content": "<p>yeah I moment</p>",
        "id": 194212199,
        "sender_full_name": "Areredify",
        "timestamp": 1586977280
    },
    {
        "content": "<p>gotta install zoom</p>",
        "id": 194212210,
        "sender_full_name": "Areredify",
        "timestamp": 1586977286
    },
    {
        "content": "<p><a href=\"https://paper.dropbox.com/doc/rustc-integration-overview--AyLn_P7a~ID3MA_v4Sc60qUlAg-R89osb7kQmMpVmBxmMJDB\" title=\"https://paper.dropbox.com/doc/rustc-integration-overview--AyLn_P7a~ID3MA_v4Sc60qUlAg-R89osb7kQmMpVmBxmMJDB\">paper doc</a></p>",
        "id": 194212613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586977471
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> <span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 194212667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586977496
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> can you push your commit with comments</p>",
        "id": 194227923,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586984986
    },
    {
        "content": "<p>whoops, sorry, done</p>",
        "id": 194230655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586986413
    },
    {
        "content": "<p>so I made a recording of that meeting, would it be useful to upload?</p>",
        "id": 194325951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587052320
    },
    {
        "content": "<p>sure</p>",
        "id": 194328944,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587053433
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you around?</p>",
        "id": 194987375,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587587385
    },
    {
        "content": "<p>Question</p>",
        "id": 194987381,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587587387
    },
    {
        "content": "<p>This impl: <a href=\"https://github.com/rust-lang/rust/blob/master/src/libcore/iter/traits/iterator.rs#L3255\" title=\"https://github.com/rust-lang/rust/blob/master/src/libcore/iter/traits/iterator.rs#L3255\">https://github.com/rust-lang/rust/blob/master/src/libcore/iter/traits/iterator.rs#L3255</a></p>",
        "id": 194987391,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587587393
    },
    {
        "content": "<p>go for it</p>",
        "id": 194987407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587587400
    },
    {
        "content": "<p>I'm around-ish</p>",
        "id": 194987456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587587404
    },
    {
        "content": "<p>Is the lifetime on that <code>&amp;mut Iterator</code> latebound</p>",
        "id": 194987458,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587587406
    },
    {
        "content": "<p>that's what I'm seeing</p>",
        "id": 194987475,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587587413
    },
    {
        "content": "<p>nope</p>",
        "id": 194987509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587587432
    },
    {
        "content": "<p>not sure why you're seeing that, I think you may be misinterpreting</p>",
        "id": 194987531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587587445
    },
    {
        "content": "<p>it <em>is</em> anonymous</p>",
        "id": 194987536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587587453
    },
    {
        "content": "<p>I'm trying to remember if we do something strange in HIR lowering that might make it be late-bound</p>",
        "id": 194987576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587587478
    },
    {
        "content": "<p>hmm</p>",
        "id": 194987577,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587587478
    },
    {
        "content": "<p>but I don't believe so</p>",
        "id": 194987598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587587493
    },
    {
        "content": "<p>let me point you to the lowering code where this is popping up</p>",
        "id": 194987623,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587587504
    },
    {
        "content": "<p>if you have time</p>",
        "id": 194987632,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587587509
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/69406/files#diff-828ef7bd1dead769c57f685079e876f6R279\" title=\"https://github.com/rust-lang/rust/pull/69406/files#diff-828ef7bd1dead769c57f685079e876f6R279\">https://github.com/rust-lang/rust/pull/69406/files#diff-828ef7bd1dead769c57f685079e876f6R279</a></p>",
        "id": 194987773,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587587566
    },
    {
        "content": "<p>I'm trying to remove the <code>subtitute_params</code> call on <code>trait_ref</code></p>",
        "id": 194987798,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587587583
    },
    {
        "content": "<p>(in that, I convert latebound named to latebound anons)</p>",
        "id": 194987902,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587587639
    },
    {
        "content": "<p>And it hits this <a href=\"https://github.com/rust-lang/rust/pull/69406/files#diff-2c4ca7669b79bd3e9c8c06315b1b1f33R447\" title=\"https://github.com/rust-lang/rust/pull/69406/files#diff-2c4ca7669b79bd3e9c8c06315b1b1f33R447\">https://github.com/rust-lang/rust/pull/69406/files#diff-2c4ca7669b79bd3e9c8c06315b1b1f33R447</a></p>",
        "id": 194988249,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587587821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> hmm those links aren't working for me :(</p>",
        "id": 194989409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587588488
    },
    {
        "content": "<p>can you maybe make them links into your repo instead?</p>",
        "id": 194989423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587588495
    },
    {
        "content": "<p>Yeah</p>",
        "id": 194989447,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587588505
    },
    {
        "content": "<p>also, is there some debugging output</p>",
        "id": 194989457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587588512
    },
    {
        "content": "<p>I bet it's because they are into collapsed files</p>",
        "id": 194989467,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587588517
    },
    {
        "content": "<p>or maybe you can puhs the commits and I can run it locally</p>",
        "id": 194989470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587588518
    },
    {
        "content": "<p>it's super small, I'll just paste it</p>",
        "id": 194989522,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587588560
    },
    {
        "content": "<p>let me get the links first</p>",
        "id": 194989530,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587588565
    },
    {
        "content": "<p>this is the second link: <a href=\"https://github.com/rust-lang/rust/blob/230a19f295279b60c670bce5ab393145668e8618/src/librustc_traits/lowering/mod.rs#L447\" title=\"https://github.com/rust-lang/rust/blob/230a19f295279b60c670bce5ab393145668e8618/src/librustc_traits/lowering/mod.rs#L447\">https://github.com/rust-lang/rust/blob/230a19f295279b60c670bce5ab393145668e8618/src/librustc_traits/lowering/mod.rs#L447</a></p>",
        "id": 194989674,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587588628
    },
    {
        "content": "<p>This is where the lowering gets called: <a href=\"https://github.com/rust-lang/rust/blob/230a19f295279b60c670bce5ab393145668e8618/src/librustc_traits/chalk/db.rs#L266\" title=\"https://github.com/rust-lang/rust/blob/230a19f295279b60c670bce5ab393145668e8618/src/librustc_traits/chalk/db.rs#L266\">https://github.com/rust-lang/rust/blob/230a19f295279b60c670bce5ab393145668e8618/src/librustc_traits/chalk/db.rs#L266</a></p>",
        "id": 194989779,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587588696
    },
    {
        "content": "<p>The diff is at 258 at <a href=\"http://db.rs\" title=\"http://db.rs\">db.rs</a></p>",
        "id": 194989922,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587588782
    },
    {
        "content": "<p>comment out</p>\n<div class=\"codehilite\"><pre><span></span>let (trait_ref, binders, _named_regions) =\n            crate::lowering::substitute_params(self.tcx, bound_vars, &amp;trait_ref);\n</pre></div>",
        "id": 194989948,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587588798
    },
    {
        "content": "<p>Add </p>\n<div class=\"codehilite\"><pre><span></span>        let binders = bound_vars\n            .iter()\n            .map(|arg| match arg.unpack() {\n                ty::subst::GenericArgKind::Lifetime(_re) =&gt; chalk_ir::ParameterKind::Lifetime(()),\n                ty::subst::GenericArgKind::Type(_ty) =&gt; chalk_ir::ParameterKind::Ty(()),\n                ty::subst::GenericArgKind::Const(_const) =&gt; chalk_ir::ParameterKind::Ty(()),\n            })\n            .collect();\n</pre></div>",
        "id": 194989982,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587588822
    },
    {
        "content": "<p>And some potentially relevant debug output:</p>\n<div class=\"codehilite\"><pre><span></span>[src/librustc_traits/chalk/db.rs:245] &amp;bound_vars = [\n    ReLateBound(DebruijnIndex(0), BrNamed(DefId(2:38280 ~ core[797c]::iter[0]::traits[0]::iterator[0]::{{impl}}[0]::&#39;_[0]), &#39;_)),\n    I,\n]\n[src/librustc_traits/chalk/db.rs:261] &amp;trait_ref = &lt;&amp;mut I as std::iter::Iterator&gt;\n[src/librustc_traits/chalk/db.rs:273] &amp;_predicates = [\n    (\n        Binder(\n            TraitPredicate(&lt;I as std::iter::Iterator&gt;),\n        ),\n        /home/hueyj/temp/rust/rust/src/libcore/iter/traits/iterator.rs:3255:9: 3255:17,\n    ),\n]\nthread &#39;rustc&#39; panicked at &#39;not implemented&#39;, src/librustc_traits/lowering/mod.rs:447:65\n</pre></div>",
        "id": 194990375,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587589032
    },
    {
        "content": "<p>hmm</p>",
        "id": 194994468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587591429
    },
    {
        "content": "<p>sorry I haven't been very \"at keyboard\"</p>",
        "id": 194994621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587591531
    },
    {
        "content": "<p>It's okay. Just whenever you have some time to take a look, it would be helpful :)</p>",
        "id": 194994728,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587591612
    },
    {
        "content": "<p>trying to reproduce now</p>",
        "id": 194994794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587591647
    },
    {
        "content": "<p>I'll post an update later on</p>",
        "id": 194994800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587591654
    },
    {
        "content": "<p>I can't really explain it :)</p>",
        "id": 194994811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587591660
    },
    {
        "content": "<p>Works for me</p>",
        "id": 194994867,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587591700
    },
    {
        "content": "<p>I'll be around whenever</p>",
        "id": 194994883,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587591716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> what test are you running?</p>",
        "id": 194996642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587592866
    },
    {
        "content": "<p>oops, lower_impl</p>",
        "id": 194997248,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587593298
    },
    {
        "content": "<p>that's important :)</p>",
        "id": 194997257,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587593302
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> so I added some <code>debug!</code> statements..</p>",
        "id": 195000471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587595650
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">trait_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">impl_trait_ref</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">&quot;not an impl&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;impl_trait_ref={:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">trait_ref</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">trait_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">trait_ref</span><span class=\"p\">.</span><span class=\"n\">subst</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bound_vars</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;trait_ref post substitution={:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">trait_ref</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 195000484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587595660
    },
    {
        "content": "<p>...and then ran with <code>-Zverbose</code>, which is a trick you might not know about...</p>",
        "id": 195000494,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587595671
    },
    {
        "content": "<p>and I see this</p>",
        "id": 195000506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587595680
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[DEBUG rustc_traits::chalk::db] impl_trait_ref=&lt;&amp;ReEarlyBound(0, &#39;_) mut I as std::iter::Iterator&gt;\n[DEBUG rustc_traits::chalk::db] trait_ref post substitution=&lt;&amp;ReLateBound(DebruijnIndex(0), BrNamed(DefId(2:38280 ~ core[d046]::iter[0]::traits[0]::iterator[0]::{{impl}}[0]::&#39;_[0]), &#39;_)) mut I as std::iter::Iterator&gt;\n</pre></div>",
        "id": 195000546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587595685
    },
    {
        "content": "<p>in other words, the <code>LateBound</code> is being injected by the <code>bound_vars</code> substitution</p>",
        "id": 195000568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587595699
    },
    {
        "content": "<p>I did not know about <code>-Zverbose</code></p>",
        "id": 195001396,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587596334
    },
    {
        "content": "<p>right, <code>bound_vars</code> has a <code>ReLateBound</code></p>",
        "id": 195001422,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587596359
    },
    {
        "content": "<p>(see above)</p>",
        "id": 195001429,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587596367
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>&amp;bound_vars = [\n    ReLateBound(DebruijnIndex(0), BrNamed(DefId(2:38280 ~ core[797c]::iter[0]::traits[0]::iterator[0]::{{impl}}[0]::&#39;_[0]), &#39;_)),\n    I,\n]\n</pre></div>",
        "id": 195001446,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587596386
    },
    {
        "content": "<p>yeah, so, I mean that does answer the question where it's coming :)</p>",
        "id": 195001586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587596432
    },
    {
        "content": "<p>maybe I don't understand your question exactly</p>",
        "id": 195001617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587596451
    },
    {
        "content": "<p>I think I would expect that, after the subst, you'd produce the form that lowering expects</p>",
        "id": 195001644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587596472
    },
    {
        "content": "<p>and in particular that it would convert <code>ReLateBound</code> into chalk's bound</p>",
        "id": 195001658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587596483
    },
    {
        "content": "<p>not quite, because it's a <code>BrNamed</code></p>",
        "id": 195001696,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587596518
    },
    {
        "content": "<p>I guess what's surprising is that it's a <code>ReLateBound</code> in an impl</p>",
        "id": 195001767,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587596540
    },
    {
        "content": "<p>huh so .. rustc never generates one</p>",
        "id": 195001910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587596642
    },
    {
        "content": "<p>but you injected it through the substitution</p>",
        "id": 195001934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587596647
    },
    {
        "content": "<p>Well, it from <code>bound_vars_for_item</code></p>",
        "id": 195001949,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587596661
    },
    {
        "content": "<p>yeah, which is some chalk-specific code</p>",
        "id": 195001964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587596675
    },
    {
        "content": "<p>oh</p>",
        "id": 195001970,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587596681
    },
    {
        "content": "<p>shoot</p>",
        "id": 195001980,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587596696
    },
    {
        "content": "<p>it's meant to translate from \"rust terms\" to \"bound variables that chalk understands\", I think</p>",
        "id": 195001981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587596696
    },
    {
        "content": "<p>so it chooses \"re-late-bound\" because, in chalk, the <code>'a</code> would be a Bound region</p>",
        "id": 195002000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587596714
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/195001964\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/195001964\">said</a>:</p>\n<blockquote>\n<p>yeah, which is some chalk-specific code</p>\n</blockquote>\n<p>pretty sure about this, anyway</p>",
        "id": 195002015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587596732
    },
    {
        "content": "<p>Okay, <em>thats</em> the answer I needed :)</p>",
        "id": 195002017,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587596734
    },
    {
        "content": "<p>indeed, it's only used in <code>librustc_traits</code></p>",
        "id": 195002029,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587596746
    },
    {
        "content": "<p>sorry it took so long :)</p>",
        "id": 195002031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587596747
    },
    {
        "content": "<p>no problem</p>",
        "id": 195002093,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587596770
    },
    {
        "content": "<p>thanks for the help</p>",
        "id": 195002097,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587596773
    },
    {
        "content": "<p>I'm wondering if it's worth doing another round of \"chalk removal\" <em>before</em> this PR is merged</p>",
        "id": 195002145,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587596851
    },
    {
        "content": "<p>or, if it's better after</p>",
        "id": 195002151,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587596859
    },
    {
        "content": "<p>i.e., to remove the domaingoal types and helpers etc?</p>",
        "id": 195002358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587597016
    },
    {
        "content": "<p>it might be nice, might help clarify the PR itself</p>",
        "id": 195002359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587597023
    },
    {
        "content": "<p>Yeah, somewhat</p>",
        "id": 195002611,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587597271
    },
    {
        "content": "<p>The only sort of, I guess, objection I have is that, when I tried to remove <code>DomainGoal</code>, things got interesting with placeholder canonicalization</p>",
        "id": 195002645,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587597322
    },
    {
        "content": "<p>What are the well-formed rules for <code>Tuple</code>s? That a tuple is well-formed if all the fields are?</p>",
        "id": 195020760,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587621074
    },
    {
        "content": "<p>Or, a tuple is always well formed?</p>",
        "id": 195020778,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587621101
    },
    {
        "content": "<p>Updating the rustc integration PR causes all the tests to fail because <code>() is not well-formed</code> (the <code>match_type_name</code> function is empty for tuples, so no well-formed rule is generated)</p>",
        "id": 195020867,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587621231
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/195020760\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/195020760\">said</a>:</p>\n<blockquote>\n<p>What are the well-formed rules for <code>Tuple</code>s? That a tuple is well-formed if all the fields are?</p>\n</blockquote>\n<p>this</p>",
        "id": 195064559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587650410
    },
    {
        "content": "<p><em>but</em></p>",
        "id": 195064589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587650426
    },
    {
        "content": "<p>probably the rule we want for <code>match_Type_name</code> is just \"tuples are always WF\", because of the thing we were discussing earlier, that the iteration over types is done \"externally\"</p>",
        "id": 195064633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587650450
    },
    {
        "content": "<p>I noticed there was no rule there in the original PR but I wanted to ponder the right addition, so I didn't mention it:)</p>",
        "id": 195064691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587650480
    },
    {
        "content": "<p>/me afk today btw, also tomorrow</p>",
        "id": 195064710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587650487
    },
    {
        "content": "<p>Oh ok. I'll make a PR to add that at some point</p>",
        "id": 195069324,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587652373
    },
    {
        "content": "<p>Okay <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>, I did some more cleanups of the PR</p>",
        "id": 195150302,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587709281
    },
    {
        "content": "<p>including removing the <code>subtitute_params</code> in favor of <code>subst</code></p>",
        "id": 195150306,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587709307
    },
    {
        "content": "<p>And the only one of your comments that hasn't been addressed is removing <code>DomainGoal</code></p>",
        "id": 195150350,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587709334
    },
    {
        "content": "<p>But I feel like we should do that in a followup PR</p>",
        "id": 195150355,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587709348
    },
    {
        "content": "<p>I had one question/observation: <a href=\"https://github.com/rust-lang/rust/blob/d4a58787fbd81d50d3e23cb86c7a01602e1bf6a4/src/librustc_traits/lowering/mod.rs#L858\" title=\"https://github.com/rust-lang/rust/blob/d4a58787fbd81d50d3e23cb86c7a01602e1bf6a4/src/librustc_traits/lowering/mod.rs#L858\">https://github.com/rust-lang/rust/blob/d4a58787fbd81d50d3e23cb86c7a01602e1bf6a4/src/librustc_traits/lowering/mod.rs#L858</a></p>",
        "id": 195150362,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587709366
    },
    {
        "content": "<p>But other than that, I think this is getting to a point that it needs a \"real\" review</p>",
        "id": 195150375,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587709390
    },
    {
        "content": "<p>That being said, I think after this PR is merged <a href=\"https://github.com/rust-lang/chalk/pull/411\" title=\"https://github.com/rust-lang/chalk/pull/411\">https://github.com/rust-lang/chalk/pull/411</a>, we should do a release</p>",
        "id": 195150455,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587709529
    },
    {
        "content": "<p>So, I did end up putting in the work to remove <code>DomainGoal</code> and other related types from rustc. I'm a bit hesitant to merge it into the main PR <em>right now</em>, since there is something wrong, at least in terms of lifetimes</p>",
        "id": 195267238,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587788565
    },
    {
        "content": "<p>The commits diffed to the PR: <a href=\"https://github.com/jackh726/rust/compare/chalk-upgrade...jackh726:chalk-upgrade-dg-new\" title=\"https://github.com/jackh726/rust/compare/chalk-upgrade...jackh726:chalk-upgrade-dg-new\">https://github.com/jackh726/rust/compare/chalk-upgrade...jackh726:chalk-upgrade-dg-new</a></p>",
        "id": 195267249,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587788620
    },
    {
        "content": "<p>The error I get with these changes (in lower_trait_where_clause test):</p>\n<div class=\"codehilite\"><pre><span></span>error[E0308]: mismatched types\n  --&gt; /home/hueyj/temp/rust/rust/src/test/ui/chalkify/lower_trait_where_clause.rs:6:1\n   |\nLL | / trait Foo&lt;&#39;a, &#39;b, T, U&gt;\nLL | | where\nLL | |     T: Borrow&lt;U&gt; + ?Sized,\nLL | |     U: ?Sized + &#39;b,\n...  |\nLL | | {\nLL | | }\n   | |_^ lifetime mismatch\n   |\n   = note: expected type `&#39;a`\n              found type `&#39;b`\nnote: the lifetime `&#39;b` as defined on the trait at 6:15...\n  --&gt; /home/hueyj/temp/rust/rust/src/test/ui/chalkify/lower_trait_where_clause.rs:6:15\n   |\nLL | trait Foo&lt;&#39;a, &#39;b, T, U&gt;\n   |               ^^\nnote: ...does not necessarily outlive the lifetime `&#39;a` as defined on the trait at 6:11\n  --&gt; /home/hueyj/temp/rust/rust/src/test/ui/chalkify/lower_trait_where_clause.rs:6:11\n   |\nLL | trait Foo&lt;&#39;a, &#39;b, T, U&gt;\n   |           ^^\n</pre></div>",
        "id": 195267305,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587788684
    },
    {
        "content": "<p>Yeah, so I sort of changed up how I was approaching this a bit</p>",
        "id": 195311144,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587864301
    },
    {
        "content": "<p>I was getting these errors, basically, because I was elaborating the environment <em>after</em> canonicalization</p>",
        "id": 195311189,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587864366
    },
    {
        "content": "<p>So, I now create a super simplified \"environment\" pre-canonicalization</p>",
        "id": 195311197,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587864412
    },
    {
        "content": "<p>then canonicalize everything together</p>",
        "id": 195311200,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587864425
    },
    {
        "content": "<p>It's moves a little bit of code around (some back into <code>librustc_trait_selection</code>, some up to <code>librustc_midle</code> because interning), but I think this is probably okay</p>",
        "id": 195311250,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587864488
    },
    {
        "content": "<p>Ok, I added a commit to the PR that removes DomainGoal and related types</p>",
        "id": 195315694,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587873105
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> &lt;3</p>",
        "id": 195474678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588021383
    },
    {
        "content": "<p>you're moving fast :)</p>",
        "id": 195474687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588021387
    },
    {
        "content": "<p>do you think it's ready for a \"real review\"?</p>",
        "id": 195474697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588021391
    },
    {
        "content": "<p>seems like yes!</p>",
        "id": 195474699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588021394
    },
    {
        "content": "<p>Yes</p>",
        "id": 195475949,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588022069
    },
    {
        "content": "<p>Doing some cleanups, but I think it's basically ready</p>",
        "id": 195475978,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588022085
    },
    {
        "content": "<p>Okay I finally fixed the submodules and Cargo.lock <span aria-label=\"cold sweat\" class=\"emoji emoji-1f630\" role=\"img\" title=\"cold sweat\">:cold_sweat:</span></p>",
        "id": 195477463,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588022890
    },
    {
        "content": "<p>Is there a way to create an interned <code>List</code> where <code>T</code> isn't <code>Copy</code></p>",
        "id": 195482150,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588025883
    },
    {
        "content": "<p>I only see <code>from_arena</code></p>",
        "id": 195482184,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588025911
    },
    {
        "content": "<p>which requires that</p>",
        "id": 195482186,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588025916
    },
    {
        "content": "<p>Hmm</p>",
        "id": 195615496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588102869
    },
    {
        "content": "<p>Probably not</p>",
        "id": 195615498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588102871
    },
    {
        "content": "<p>Because the arena we're using, I think, doesn't run destructors</p>",
        "id": 195615512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588102879
    },
    {
        "content": "<p>which generally simplifies things</p>",
        "id": 195615525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588102886
    },
    {
        "content": "<p>I need to add <code>Copy</code> derives to all our wrapper types in Chalk</p>",
        "id": 195615640,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588102928
    },
    {
        "content": "<p>Only <code>Lifetime</code> has it currently :/</p>",
        "id": 195615652,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588102937
    },
    {
        "content": "<p>Ok, so maybe we should talk a little about <code>from_fallible</code> methods on the various types in <code>Interner</code></p>",
        "id": 195617308,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588103666
    },
    {
        "content": "<p>So, all except <code>Substitution</code> collect an <code>impl IntoIterator&lt;Item = Result&lt;impl CastTo&lt;...&lt;I&gt;&gt;, E&gt;&gt;</code> into a <code>Result&lt;Vec&lt;Goal&lt;I&gt;&gt;, _&gt;</code></p>",
        "id": 195617449,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588103740
    },
    {
        "content": "<p>use <code>?</code> to return potential error</p>",
        "id": 195617469,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588103753
    },
    {
        "content": "<p>then, call <code>from</code> on the Vec</p>",
        "id": 195617538,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588103768
    },
    {
        "content": "<p><code>Substitution</code> is different, in that it's the other way around</p>",
        "id": 195617560,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588103783
    },
    {
        "content": "<p>and it's up to the interner to return an error</p>",
        "id": 195617589,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588103796
    },
    {
        "content": "<p>yeah ..</p>",
        "id": 195617692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588103839
    },
    {
        "content": "<p>I think I imagined we might eventually invert that</p>",
        "id": 195617704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588103846
    },
    {
        "content": "<p>invert which?</p>",
        "id": 195617720,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588103853
    },
    {
        "content": "<p>Substitution?</p>",
        "id": 195617724,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588103855
    },
    {
        "content": "<p>i.e., so that \"from-fallible\" was the \"core operation\"</p>",
        "id": 195617745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588103863
    },
    {
        "content": "<p>and the infallible case included an <code>Ok</code> and an <code>unwrap</code></p>",
        "id": 195617757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588103869
    },
    {
        "content": "<p>on the other hand, I think rustc's core operation presently is infallible</p>",
        "id": 195617778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588103879
    },
    {
        "content": "<p>oh</p>",
        "id": 195617779,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588103879
    },
    {
        "content": "<p>I forget</p>",
        "id": 195617783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588103881
    },
    {
        "content": "<p>it is</p>",
        "id": 195617820,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588103884
    },
    {
        "content": "<p>one of those small things to be reconciled</p>",
        "id": 195617830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588103891
    },
    {
        "content": "<p>(I'm running into this because I'm finishing up the actually interning)</p>",
        "id": 195617857,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588103900
    },
    {
        "content": "<p>(though fallibility makes sense to me, I think rustc doesn't do quite enough plumbing around of <code>Result</code>)</p>",
        "id": 195617867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588103905
    },
    {
        "content": "<p>I definitely think whatever solution we go for, we need to not collect into a vec</p>",
        "id": 195618066,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588103974
    },
    {
        "content": "<p>Some more things to think about, that haven't been discussed much:</p>",
        "id": 195656366,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588131405
    },
    {
        "content": "<p>Other builtin types, with potentially interesting implications: <code>Slice</code>, <code>Array</code>, <code>Ref</code>, <code>Never</code></p>",
        "id": 195656381,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588131439
    },
    {
        "content": "<p>Do we/should we split <code>TypeName::Struct</code> into <code>TypeName::Struct</code>/<code>TypeName::Enum</code>/<code>TypeName::Union</code>? Particularly, how do we deal with the \"last field\"</p>",
        "id": 195656452,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588131503
    },
    {
        "content": "<p>Okay, I did a few more cleanups. I'm gonna wait for a review to do anything else</p>",
        "id": 195661274,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588136802
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/195656452\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/195656452\">said</a>:</p>\n<blockquote>\n<p>Do we/should we split <code>TypeName::Struct</code> into <code>TypeName::Struct</code>/<code>TypeName::Enum</code>/<code>TypeName::Union</code>? Particularly, how do we deal with the \"last field\"</p>\n</blockquote>\n<p>I think not</p>",
        "id": 195764491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588191539
    },
    {
        "content": "<p>We used to do that in rustc and migrated away from it, iirc</p>",
        "id": 195764508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588191547
    },
    {
        "content": "<p>I think it's best to have the struct/enum/union info accessible in the <code>StructDatum</code></p>",
        "id": 195764520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588191555
    },
    {
        "content": "<p>we might however want to rename to \"adt\" or whatever to indicate the generalization</p>",
        "id": 195764536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588191564
    },
    {
        "content": "<p>I figured that was probably the option to go with</p>",
        "id": 195764802,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588191702
    },
    {
        "content": "<p>I guess the question is then how do we handle variants and fields</p>",
        "id": 195764826,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588191715
    },
    {
        "content": "<p>e.g. do we just match how rustc does it</p>",
        "id": 195764894,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588191737
    },
    {
        "content": "<p>I don't think there is any alternative, is there?</p>",
        "id": 195764928,
        "sender_full_name": "Areredify",
        "timestamp": 1588191755
    },
    {
        "content": "<p>I actually somewhat am curious why the different <code>AdtKind</code>s don't store the variant info</p>",
        "id": 195764981,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588191791
    },
    {
        "content": "<p>I guess it's stored as flags</p>",
        "id": 195765117,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588191867
    },
    {
        "content": "<p>Can someone help me figure out why the rustc integration PR failed CI? It just said rustc_middle failed to build with no specific error.</p>",
        "id": 195840709,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588254464
    },
    {
        "content": "<p>But only on the mingw check</p>",
        "id": 195840800,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588254488
    },
    {
        "content": "<p>Ok, so something is a bit weird with my PR and <code>parallel-compiler = true</code></p>",
        "id": 195931678,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588308285
    },
    {
        "content": "<p>It basically uses up a ton of memory</p>",
        "id": 195931691,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588308307
    },
    {
        "content": "<p>(Not sure if it does finish eventually)</p>",
        "id": 195931701,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588308322
    },
    {
        "content": "<p>So essentially, I think I'm gonna start trying to figure out why</p>",
        "id": 195931721,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588308348
    },
    {
        "content": "<p>But I figured a good intermediate step (which also is just better for reviewing) is to split out the removing of DomainGoal and such into a separate PR</p>",
        "id": 195931795,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588308394
    },
    {
        "content": "<p>Since I doubt <em>removing</em> things causes memory issues</p>",
        "id": 195931804,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588308415
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> the PR is just definitely reviewable still though</p>",
        "id": 195931818,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588308454
    },
    {
        "content": "<p>New PR <a href=\"https://github.com/rust-lang/rust/issues/71758\" title=\"https://github.com/rust-lang/rust/issues/71758\">#71758</a></p>",
        "id": 195983396,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588352848
    },
    {
        "content": "<p>Some surprising error changes</p>",
        "id": 195983407,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588352855
    },
    {
        "content": "<p>I'm trying to decide how much I care about those surprising error changes.</p>",
        "id": 196010157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588367209
    },
    {
        "content": "<p>They only come up with <code>parallel-compiler = true</code></p>",
        "id": 196011725,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588368176
    },
    {
        "content": "<p>And have nothing to do with the changes</p>",
        "id": 196011735,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588368185
    },
    {
        "content": "<p>(they're removed now and everything passes as expected)</p>",
        "id": 196011769,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588368219
    },
    {
        "content": "<p>I'm not trying to figure out what exactly is causing the memory problems with <code>parallel-compiler = true</code></p>",
        "id": 196011836,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588368251
    },
    {
        "content": "<p>Currently just trying to minimize from this: <a href=\"https://github.com/jackh726/rust/compare/chalk-remove..chalk-middle\" title=\"https://github.com/jackh726/rust/compare/chalk-remove..chalk-middle\">https://github.com/jackh726/rust/compare/chalk-remove..chalk-middle</a></p>",
        "id": 196011901,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588368317
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/196011725\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/196011725\">said</a>:</p>\n<blockquote>\n<p>They only come up with <code>parallel-compiler = true</code></p>\n</blockquote>\n<p>I meant the changes to errors from <a href=\"https://github.com/rust-lang/rust/issues/71758\" title=\"https://github.com/rust-lang/rust/issues/71758\">#71758</a></p>",
        "id": 196012801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588368937
    },
    {
        "content": "<p>No changes to errors anymore</p>",
        "id": 196013028,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588369069
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>...\n    = note: required because it appears within the type `chalk_ir::GoalData&lt;traits::chalk::RustInterner&lt;&#39;_&gt;&gt;`\n    = note: required because it appears within the type `chalk_ir::GoalData&lt;traits::chalk::RustInterner&lt;&#39;_&gt;&gt;`\n    = note: required because it appears within the type `chalk_ir::GoalData&lt;traits::chalk::RustInterner&lt;&#39;_&gt;&gt;`\n    = note: required because it appears within the type `chalk_ir::Goal&lt;traits::chalk::RustInterner&lt;&#39;_&gt;&gt;`\n</code></pre></div>",
        "id": 196013138,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588369103
    },
    {
        "content": "<p>That might have something to do with the memory issues...</p>",
        "id": 196013162,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588369118
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0275]: overflow evaluating the requirement `traits::chalk::RustInterner&lt;&#39;_&gt;: chalk_ir::interner::Interner`\n  --&gt; src/librustc_middle/traits/chalk.rs:74:26\n   |\n74 |     type InternedGoals = Vec&lt;chalk_ir::Goal&lt;Self&gt;&gt;;\n   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n  ::: /home/hueyj/.cargo/registry/src/github.com-1ecc6299db9ec823/chalk-ir-0.10.0/src/interner.rs:99:46\n   |\n99 |     type InternedGoals: Debug + Clone + Eq + Hash;\n   |                                              ---- required by this bound in `chalk_ir::interner::Interner`\n   |\n</code></pre></div>",
        "id": 196013360,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588369228
    },
    {
        "content": "<p>oh wait there's more</p>",
        "id": 196013547,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588369355
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0275]: overflow evaluating the requirement `traits::chalk::RustInterner&lt;&#39;_&gt;: chalk_ir::interner::Interner`\n   --&gt; src/librustc_middle/traits/chalk.rs:74:5\n    |\n74  |     type InternedGoals = Vec&lt;chalk_ir::Goal&lt;Self&gt;&gt;;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n   ::: /home/hueyj/temp/rust/rust/src/liballoc/vec.rs:300:16\n    |\n300 | pub struct Vec&lt;T&gt; {\n    |                - required by this bound in `std::vec::Vec`\n    |\n</code></pre></div>",
        "id": 196013558,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588369365
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0275]: overflow evaluating the requirement `traits::chalk::RustInterner&lt;&#39;_&gt;: chalk_ir::interner::Interner`\n   --&gt; src/librustc_middle/traits/chalk.rs:189:33\n    |\n189 |         data: impl IntoIterator&lt;Item = Result&lt;chalk_ir::Goal&lt;Self&gt;, E&gt;&gt;,\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n   ::: /home/hueyj/temp/rust/rust/src/libcore/result.rs:247:17\n    |\n247 | pub enum Result&lt;T, E&gt; {\n    |                 - required by this bound in `std::result::Result`\n    |\n</code></pre></div>",
        "id": 196013599,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588369395
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0275]: overflow evaluating the requirement `traits::chalk::RustInterner&lt;&#39;_&gt;: chalk_ir::interner::Interner`\n   --&gt; src/librustc_middle/traits/chalk.rs:194:37\n    |\n194 |     fn goals_data&lt;&#39;a&gt;(&amp;self, goals: &amp;&#39;a Self::InternedGoals) -&gt; &amp;&#39;a [chalk_ir::Goal&lt;Self&gt;] {\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n   ::: /home/hueyj/temp/rust/rust/src/liballoc/vec.rs:300:16\n    |\n300 | pub struct Vec&lt;T&gt; {\n    |                - required by this bound in `std::vec::Vec`\n    |\n</code></pre></div>",
        "id": 196013612,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588369410
    },
    {
        "content": "<p>Seems like some sort of recursive bounds problem that's showing up only with <code>parallel-compiler = true</code></p>",
        "id": 196015487,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588370697
    },
    {
        "content": "<p>I think roughly what's happening is (for example): <code>Goals</code> is getting checked, sees <code>InternedGoal</code>, <code>InternedGoal</code> is <code>TyData&lt;Self&gt;</code>, so now we have to check that <code>Self: Interner</code>, then recursion</p>",
        "id": 196015672,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588370844
    },
    {
        "content": "<p>Ok so <em>this</em> error is still showing up with <code>parallel-compiler = false</code></p>",
        "id": 196015796,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588370927
    },
    {
        "content": "<p>Nevermind. Boxing the interned types removes those errors</p>",
        "id": 196027949,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588385675
    },
    {
        "content": "<p>but doesn't fix the memory problems</p>",
        "id": 196027951,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588385688
    },
    {
        "content": "<p>Wait using <code>Box</code> instead of interning <em>does</em> fix the memory problems</p>",
        "id": 196030625,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588390327
    },
    {
        "content": "<p>Okay this is a \"minimal\" reproduction of the problem: <a href=\"https://github.com/rust-lang/rust/compare/master...jackh726:chalk-middle\" title=\"https://github.com/rust-lang/rust/compare/master...jackh726:chalk-middle\">https://github.com/rust-lang/rust/compare/master...jackh726:chalk-middle</a></p>",
        "id": 196033739,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588395367
    },
    {
        "content": "<p>This is <em>completely</em> fine with <code>parallel-compiler = false</code>, but just keeps increasing memory with <code>parallel-compiler = true</code></p>",
        "id": 196033760,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588395457
    },
    {
        "content": "<p>Removing the <code>chalk_ty</code> interner here <a href=\"https://github.com/rust-lang/rust/compare/master...jackh726:chalk-middle#diff-1bffadcc6a4ac0564af0f075eb094eb1R99\" title=\"https://github.com/rust-lang/rust/compare/master...jackh726:chalk-middle#diff-1bffadcc6a4ac0564af0f075eb094eb1R99\">https://github.com/rust-lang/rust/compare/master...jackh726:chalk-middle#diff-1bffadcc6a4ac0564af0f075eb094eb1R99</a> works fine</p>",
        "id": 196033811,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588395569
    },
    {
        "content": "<p>(also note that the interner is not even used in this repro)</p>",
        "id": 196033817,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588395593
    },
    {
        "content": "<p>Removed the interners in the chalk integration PR and it seems like it's gonna build/pass (just waiting on Azure now)</p>",
        "id": 196036569,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588400525
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/196033817\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/196033817\">said</a>:</p>\n<blockquote>\n<p>(also note that the interner is not even used in this repro)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> woah</p>",
        "id": 196221948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588617440
    },
    {
        "content": "<p>Yeah, so something is <em>very</em> wrong here</p>",
        "id": 196232758,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588622475
    },
    {
        "content": "<p>Trying to decide if it's worth filing an issue</p>",
        "id": 196244318,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588629023
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> you currently have two PRs related to this?</p>",
        "id": 196244354,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588629054
    },
    {
        "content": "<p>Nope, just the integration PR, which I've reverted the interning</p>",
        "id": 196244372,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588629081
    },
    {
        "content": "<p>I have the minimal repro in a branch</p>",
        "id": 196244382,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588629092
    },
    {
        "content": "<p>\"minimal\" at least in the sense that it uses Chalk</p>",
        "id": 196244394,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588629106
    },
    {
        "content": "<p>I haven't tried to minimize it to a non-Chalk case</p>",
        "id": 196244407,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588629121
    },
    {
        "content": "<p>There used to be a PR that removed the \"old chalk integration\"</p>",
        "id": 196244569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588629229
    },
    {
        "content": "<p>what happened to it?</p>",
        "id": 196244571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588629232
    },
    {
        "content": "<p>it got merged?</p>",
        "id": 196244841,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588629438
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/71758\" title=\"https://github.com/rust-lang/rust/pull/71758\">https://github.com/rust-lang/rust/pull/71758</a></p>",
        "id": 196244956,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588629517
    },
    {
        "content": "<p>Was that premature? oops...</p>",
        "id": 196244981,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588629535
    },
    {
        "content": "<p>no, that's ok</p>",
        "id": 196245022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588629563
    },
    {
        "content": "<p>Basically, the random errors were not PR issues, just <code>parallel-compiler</code> issues</p>",
        "id": 196245054,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588629589
    },
    {
        "content": "<p>yep, I see now</p>",
        "id": 196245062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588629599
    },
    {
        "content": "<p>heh, ok, I'm reading back over this PR</p>",
        "id": 196247147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588631003
    },
    {
        "content": "<p>it's a lot of code with relatively few comments...</p>",
        "id": 196247163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588631008
    },
    {
        "content": "<p>...but I'm wondering how much to worry about that, since I expect a lot of this code to eventually be removed</p>",
        "id": 196247182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588631022
    },
    {
        "content": "<p>I think what might be nicest is a high-level overview of what the role of each file is etc</p>",
        "id": 196247865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588631437
    },
    {
        "content": "<p>I can add lots of comments</p>",
        "id": 196247873,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588631443
    },
    {
        "content": "<p>I just extended <a href=\"https://github.com/rust-lang/chalk/issues/368\" title=\"https://github.com/rust-lang/chalk/issues/368\">https://github.com/rust-lang/chalk/issues/368</a></p>",
        "id": 196248071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588631568
    },
    {
        "content": "<p>with a bunch of stuff taken from the PR</p>",
        "id": 196248074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588631571
    },
    {
        "content": "<p>ok, I didn't have a lot of comments -- I mean it's fairly rough -- but it looks like what I expect</p>",
        "id": 196248224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588631671
    },
    {
        "content": "<p>very nice</p>",
        "id": 196248226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588631673
    },
    {
        "content": "<p>one thing I remembered... we discussed how to handle the environment a fair amount</p>",
        "id": 196248236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588631685
    },
    {
        "content": "<p>Ah, I see what you wound up with</p>",
        "id": 196248254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588631702
    },
    {
        "content": "<p><code>ChalkEnvironmentClause</code>?</p>",
        "id": 196248265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588631710
    },
    {
        "content": "<p>Seems good</p>",
        "id": 196248267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588631712
    },
    {
        "content": "<p>Yep</p>",
        "id": 196248303,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588631741
    },
    {
        "content": "<p>Basically as minimal as possible without having to try to a lower a non-canonicalized goal</p>",
        "id": 196248367,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588631765
    },
    {
        "content": "<p>(which, by the way, <code>canonicalize</code> is currently <code>pub(crate)</code>)</p>",
        "id": 196248412,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588631808
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm gonna some time this evening to add docs and address comments</p>",
        "id": 196367766,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588712781
    },
    {
        "content": "<p>Ok <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> added some docs and addressed comments</p>",
        "id": 196826338,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588883450
    },
    {
        "content": "<p>When you're done reviewing, I'm actually gonna squash the commits I think. Or I could do it now.</p>",
        "id": 196826404,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588883482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> you might as well do it now</p>",
        "id": 196829571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588885307
    },
    {
        "content": "<p>Okay, will do that</p>",
        "id": 196833391,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588887404
    },
    {
        "content": "<p>Also looks like CI is complaining about Cargo.lock file for some reason</p>",
        "id": 196833403,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588887420
    },
    {
        "content": "<p>So rebasing on master</p>",
        "id": 196833408,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588887424
    },
    {
        "content": "<p>reviewing now!</p>",
        "id": 196833441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588887463
    },
    {
        "content": "<p>heh, I'm wondering if we .. uh .. need an MCP here</p>",
        "id": 196834004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588887773
    },
    {
        "content": "<p>or if that's just kind of silly :P</p>",
        "id": 196834017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588887778
    },
    {
        "content": "<p>btw, I think the short comments are still really great to have</p>",
        "id": 196834049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588887800
    },
    {
        "content": "<p>a file with no comments is just so disspiriting</p>",
        "id": 196834064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588887813
    },
    {
        "content": "<p>I guess I feel like it's a good idea, even if I will probably \"move the process\" fast</p>",
        "id": 196834508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588888067
    },
    {
        "content": "<p>I wonder if we should make a design meeting proposal to talk about the integration and how it works (to disseminate info)</p>",
        "id": 196834571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588888091
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/196834004\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/196834004\">said</a>:</p>\n<blockquote>\n<p>heh, I'm wondering if we .. uh .. need an MCP here</p>\n</blockquote>\n<p>Hmm. I mean, maybe. It's...a lot of code...but it's pretty much isolated to <code>-Z chalk</code></p>",
        "id": 196834874,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588888281
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/196834049\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/196834049\">said</a>:</p>\n<blockquote>\n<p>btw, I think the short comments are still really great to have</p>\n</blockquote>\n<p>Is there something that you still think is missing?</p>",
        "id": 196834926,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588888312
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/196834571\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/196834571\">said</a>:</p>\n<blockquote>\n<p>I wonder if we should make a design meeting proposal to talk about the integration and how it works (to disseminate info)</p>\n</blockquote>\n<p>Pre-merge? Or not necessarily?</p>",
        "id": 196834996,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588888337
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/196834508\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/196834508\">said</a>:</p>\n<blockquote>\n<p>I guess I feel like it's a good idea, even if I will probably \"move the process\" fast</p>\n</blockquote>\n<p>this is probably in regards to the MCP</p>",
        "id": 196835785,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588888837
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/196834996\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/196834996\">said</a>:</p>\n<blockquote>\n<p>Pre-merge? Or not necessarily?</p>\n</blockquote>\n<p>post-merge, Imeant</p>",
        "id": 196836979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588889548
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/196835785\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/196835785\">said</a>:</p>\n<blockquote>\n<p>this is probably in regards to the MCP</p>\n</blockquote>\n<p>yep.</p>",
        "id": 196836995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588889567
    },
    {
        "content": "<p>in particular, the MCP process includes a specific proviso for \"forego the long waiting period\" if we believe it to be uncontroversial</p>",
        "id": 196837006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588889579
    },
    {
        "content": "<p>I think that applies here</p>",
        "id": 196837025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588889595
    },
    {
        "content": "<p>in any case i'm still skimming comments, I think they probably cover the important bits</p>",
        "id": 196837050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588889633
    },
    {
        "content": "<p>I do think we should try to get a better sense of the FIXMEs--but I guess in reality when we're actually talking about ungating this stuff we're going to be mostly driving the process by \"run all the tests\"</p>",
        "id": 196837109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588889654
    },
    {
        "content": "<p>Right</p>",
        "id": 196837132,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588889674
    },
    {
        "content": "<p>I wouldn't say the FIXMEs are an exhaustive set of changes that need to be made to make this \"correct\"</p>",
        "id": 196837175,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588889706
    },
    {
        "content": "<p>I think in the <a href=\"http://lowering.rs\" title=\"http://lowering.rs\">lowering.rs</a> file, I might have talked a bit more about the trait</p>",
        "id": 196837177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588889708
    },
    {
        "content": "<p>and how it is used elsewhere</p>",
        "id": 196837183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588889711
    },
    {
        "content": "<p>but .. it's fine</p>",
        "id": 196837192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588889722
    },
    {
        "content": "<p>Ah, I see</p>",
        "id": 196837214,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588889743
    },
    {
        "content": "<p>this is awesome</p>",
        "id": 196837219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588889748
    },
    {
        "content": "<p>quite a lot of work you put into this &lt;3</p>",
        "id": 196837222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588889754
    },
    {
        "content": "<p>Feels like it</p>",
        "id": 196837279,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588889768
    },
    {
        "content": "<p>I think it's basically good to go</p>",
        "id": 196837288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588889781
    },
    {
        "content": "<p>awesome</p>",
        "id": 196837299,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588889796
    },
    {
        "content": "<p>Do you want me to make an MCP issue?</p>",
        "id": 196837311,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588889810
    },
    {
        "content": "<p>hmm if you don't mind, why not -- I'll go ahead and second it</p>",
        "id": 196837336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588889829
    },
    {
        "content": "<p>the only thing I'm at all wondering is if we wanted to \"feature gate\" this in some way so avoid bumping up build times, but I have no reason to think it necessrily increases those</p>",
        "id": 196837361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588889852
    },
    {
        "content": "<p>In regards to build times</p>",
        "id": 196837400,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588889874
    },
    {
        "content": "<p>I really don't think it's going to have much impact</p>",
        "id": 196837444,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588889884
    },
    {
        "content": "<p>I suspect not too</p>",
        "id": 196837452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588889890
    },
    {
        "content": "<p>it's in that \"highly parallelized\" time I suspect</p>",
        "id": 196837465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588889903
    },
    {
        "content": "<p>90% of the code is in <code>librustc_traits</code>, which is very late in build</p>",
        "id": 196837468,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588889905
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/196837465\" title=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/196837465\">said</a>:</p>\n<blockquote>\n<p>it's in that \"highly parallelized\" time I suspect</p>\n</blockquote>\n<p>that's a better way to put it</p>",
        "id": 196837505,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588889934
    },
    {
        "content": "<p>(re: MCP, ping me, but it doens't have to be super long or anything...)</p>",
        "id": 196837665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588890043
    },
    {
        "content": "<p>writing it now</p>",
        "id": 196837672,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588890051
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/compiler-team/issues/289\" title=\"https://github.com/rust-lang/compiler-team/issues/289\">https://github.com/rust-lang/compiler-team/issues/289</a></p>",
        "id": 196838738,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588890841
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 196838871,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588890929
    },
    {
        "content": "<p>seconded and r+'d</p>",
        "id": 196840357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588892000
    },
    {
        "content": "<p>I'm so ready</p>",
        "id": 196840406,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588892041
    },
    {
        "content": "<p>Well, it was getting tested with bors and then my mouse spazzed out and I accidentally clicked close PR. So now after reopening I have to wait</p>",
        "id": 196920520,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588956726
    },
    {
        "content": "<p>Ah, rollup anyways</p>",
        "id": 196920669,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588956812
    },
    {
        "content": "<p>PR has landed :)</p>",
        "id": 197012887,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589058428
    },
    {
        "content": "<p>I got the compare mode for chalk working</p>",
        "id": 197345800,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589320960
    },
    {
        "content": "<p>So, I found an interesting problem</p>",
        "id": 197368603,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589345006
    },
    {
        "content": "<p>somewhat related to binders and such</p>",
        "id": 197368604,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589345013
    },
    {
        "content": "<p>So, when we elaborate the environment for a goal, we add clauses in the environment <code>FromEnv(Ty)</code> for all types in the goal</p>",
        "id": 197368649,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589345070
    },
    {
        "content": "<p>But, looking here: <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_trait_selection/traits/chalk_fulfill.rs#L104\">https://github.com/rust-lang/rust/blob/master/src/librustc_trait_selection/traits/chalk_fulfill.rs#L104</a></p>",
        "id": 197368652,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589345086
    },
    {
        "content": "<p>We just skip late bound regions</p>",
        "id": 197368661,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589345105
    },
    {
        "content": "<p>err well</p>",
        "id": 197368674,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589345140
    },
    {
        "content": "<p><code>liberate_late_bound_regions</code></p>",
        "id": 197368684,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589345147
    },
    {
        "content": "<p>According to the docs: \"Replaces any late-bound regions bound in value with free variants attached to all_outlive_scope.\"</p>",
        "id": 197368730,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589345163
    },
    {
        "content": "<p>But...that's not exactly what I'm seeing</p>",
        "id": 197368748,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589345199
    },
    {
        "content": "<p>I'm seeing a <code>ChalkEnvironmentAndGoal</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>ChalkEnvironmentAndGoal {\n    environment: [\n        TypeFromEnv(for&lt;&#39;a, &#39;b&gt; fn(&amp;&#39;a u8, &amp;&#39;b u8) -&gt; &amp;&#39;a u8),\n        TypeFromEnv(&amp;u8),\n        TypeFromEnv(u8),\n        TypeFromEnv(&amp;u8),\n    ],\n    goal: Binder(\n        TraitPredicate(&lt;for&lt;&#39;a, &#39;b&gt; fn(&amp;&#39;a u8, &amp;&#39;b u8) -&gt; &amp;&#39;a u8 as TheTrait&gt;),\n    ),\n}\n</code></pre></div>",
        "id": 197368809,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589345344
    },
    {
        "content": "<p>But those regions are <code>ReLateBound</code> with a <code>BoundRegion::BrNamed</code></p>",
        "id": 197368868,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589345413
    },
    {
        "content": "<p>Haha oh wait</p>",
        "id": 197368952,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589345527
    },
    {
        "content": "<p>The line I referenced isn't right</p>",
        "id": 197368954,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589345538
    },
    {
        "content": "<p>in reality, it's <code>TraitImpl</code></p>",
        "id": 197368958,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589345546
    },
    {
        "content": "<p>So it's using <code>args.walk()</code></p>",
        "id": 197368963,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589345555
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> So, one thing I wanted to talk about was our plans for how we want to handle <code>Param</code>. I.e. do we want to add it to Chalk? Or do we want to try to modify rustc to use bound vars or placeholders</p>",
        "id": 198125570,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589921878
    },
    {
        "content": "<p>ah yeah</p>",
        "id": 198125625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589921890
    },
    {
        "content": "<p>that's a good question</p>",
        "id": 198125630,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589921892
    },
    {
        "content": "<p>I added a bullet around extending how rustc handles late-bound... but I forgot about that mismatch</p>",
        "id": 198125662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589921910
    },
    {
        "content": "<p>I would be in favor of trying to modify rustc, but it's gonna be \"a job\"</p>",
        "id": 198125694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589921925
    },
    {
        "content": "<p>So...theoretically if I wanted to remove Param in rustc...where would I even start</p>",
        "id": 198125695,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589921925
    },
    {
        "content": "<p>That's a tough question obviously</p>",
        "id": 198125720,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589921937
    },
    {
        "content": "<p>lol, exactly</p>",
        "id": 198125723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589921939
    },
    {
        "content": "<p>let me see</p>",
        "id": 198125745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589921947
    },
    {
        "content": "<p>I think what I would do first</p>",
        "id": 198125767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589921958
    },
    {
        "content": "<p>is to try and introduce a new type <em>like</em> <code>Binders</code> but not <code>Binders</code></p>",
        "id": 198125777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589921970
    },
    {
        "content": "<p>something like <code>EarlyBinders</code></p>",
        "id": 198125784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589921973
    },
    {
        "content": "<p>and put it on all the queries that yield types which return values that contain bound values that need substitution</p>",
        "id": 198125822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589921990
    },
    {
        "content": "<p>Ah interesting</p>",
        "id": 198125897,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589922011
    },
    {
        "content": "<p>such that you have to do some kind of <code>.subst_identify()</code> call to access the data</p>",
        "id": 198125907,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922015
    },
    {
        "content": "<p>I'm not sure how important it is to do it first, but it feels we would do it query-by-query</p>",
        "id": 198125976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922051
    },
    {
        "content": "<p>and it would help us to get a feel for what we're getting ourselves into</p>",
        "id": 198125985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922056
    },
    {
        "content": "<p>Hmm. That was sort of what I was wondering. If there was a way to break it up</p>",
        "id": 198126027,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589922082
    },
    {
        "content": "<p>Or if we have to jump in the deep end</p>",
        "id": 198126045,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589922092
    },
    {
        "content": "<p>this is sort of somewhere in between</p>",
        "id": 198126078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922111
    },
    {
        "content": "<p>as this idea doesn't actually <em>change</em> anything</p>",
        "id": 198126087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922117
    },
    {
        "content": "<p>but I think it can be done bit by bit</p>",
        "id": 198126139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922123
    },
    {
        "content": "<p>e.g., we might start with just types or something</p>",
        "id": 198126156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922137
    },
    {
        "content": "<p>like, struct types and enums and that sort of thing</p>",
        "id": 198126172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922147
    },
    {
        "content": "<p>though it may be hard to do actually</p>",
        "id": 198126186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922153
    },
    {
        "content": "<p>because rustc does some amount of \"punning\"</p>",
        "id": 198126201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922161
    },
    {
        "content": "<p>in other words, there are various sorts of things, all of which can have a <code>DefId</code>, and for which you can use <code>generics_of</code>, <code>predicates_of</code>, and <code>type_of</code> query</p>",
        "id": 198126256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922192
    },
    {
        "content": "<p>and they all work in the same way</p>",
        "id": 198126262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922195
    },
    {
        "content": "<p>so I don't know if you can change one \"category of things\"</p>",
        "id": 198126273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922201
    },
    {
        "content": "<p>so yeah I think i'd start by introducing this new type</p>",
        "id": 198126286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922210
    },
    {
        "content": "<p>and this would be my first commit, in part beacuse that you <em>can</em> add bit by bit and do the rote work</p>",
        "id": 198126315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922226
    },
    {
        "content": "<p>then I might go try to change name resolution and see what happens</p>",
        "id": 198126342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922242
    },
    {
        "content": "<p>i.e., figure out how to produce late-bound things</p>",
        "id": 198126394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922249
    },
    {
        "content": "<p>this will probably cause things to break, identifying more areas to introduce \"binders\"</p>",
        "id": 198126422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922263
    },
    {
        "content": "<p>Welp okay</p>",
        "id": 198126448,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589922276
    },
    {
        "content": "<p>iterate until things seem to work :)</p>",
        "id": 198126456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922283
    },
    {
        "content": "<p>one other option might be</p>",
        "id": 198126474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922299
    },
    {
        "content": "<p>So, the idea of <code>EarlyBinders</code> is what exactly?</p>",
        "id": 198126475,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589922299
    },
    {
        "content": "<p>hmm ok maybe this</p>",
        "id": 198126486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922308
    },
    {
        "content": "<p>right so -- I think the \"main bit\" of work we have to do is identify where people are leveraging the \"identify substitution\"</p>",
        "id": 198126521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922334
    },
    {
        "content": "<p>and replace it with some kind of <em>active</em> substitution to use placeholders</p>",
        "id": 198126535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922342
    },
    {
        "content": "<p>btw, there is a chance that this will be a perf regression</p>",
        "id": 198126545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922347
    },
    {
        "content": "<p>I'm not sure whether we care</p>",
        "id": 198126550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922354
    },
    {
        "content": "<p>I mean it does <em>seem</em> like strictly more work</p>",
        "id": 198126557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922360
    },
    {
        "content": "<p>but it's not clear how much that matters</p>",
        "id": 198126600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922365
    },
    {
        "content": "<p>so the idea with <code>EarlyBinders</code> was to help identify those places and introduce some kind of fn call</p>",
        "id": 198126626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922381
    },
    {
        "content": "<p>By \"identify substitution\", do you mean \"identity\"</p>",
        "id": 198126649,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589922394
    },
    {
        "content": "<p>I..do</p>",
        "id": 198126659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922402
    },
    {
        "content": "<p>was I writing identify?</p>",
        "id": 198126677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922414
    },
    {
        "content": "<p>yes</p>",
        "id": 198126684,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589922418
    },
    {
        "content": "<p>looks like I was...</p>",
        "id": 198126686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922419
    },
    {
        "content": "<p>identity</p>",
        "id": 198126703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922427
    },
    {
        "content": "<p>I was a <em>bit</em> confused</p>",
        "id": 198126707,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589922434
    },
    {
        "content": "<p>and wanted to clarify</p>",
        "id": 198126712,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589922438
    },
    {
        "content": "<p>before I converted <code>ty::Param</code> to actual <code>ty::BoundVar</code>, I would probably add some \"intermediate\" step that can be asserted--</p>",
        "id": 198126761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922474
    },
    {
        "content": "<p>like maybe a <code>ty::EarlyBound(usize)</code> or something</p>",
        "id": 198126816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922496
    },
    {
        "content": "<p>and change the substitution to replace <em>that</em></p>",
        "id": 198126824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922500
    },
    {
        "content": "<p>this way we will start to get asserions when we are failing to substitute</p>",
        "id": 198126839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922508
    },
    {
        "content": "<p>then once that is all working, we would drop all these \"early\" types and convert them to use debrujin indices</p>",
        "id": 198126873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922530
    },
    {
        "content": "<p>anyway I'm still not seeing a good \"incremental\" path here tbh</p>",
        "id": 198126884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922537
    },
    {
        "content": "<p>and this is <em>definitely</em> a MCP issue</p>",
        "id": 198126894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922541
    },
    {
        "content": "<p>personally I think it will make the code clearer</p>",
        "id": 198126914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922555
    },
    {
        "content": "<p>but I can imagine others might disagree</p>",
        "id": 198126940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922567
    },
    {
        "content": "<p>but it seems like there is an \"implicit step\" happening that would become explicit</p>",
        "id": 198126960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922575
    },
    {
        "content": "<p>and it will be harder to make certain kinds of errors</p>",
        "id": 198126973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922583
    },
    {
        "content": "<p>in particular it would be hard to forget to substitute</p>",
        "id": 198126993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922591
    },
    {
        "content": "<p>Is it worth trying to do a bit before writing an MCP to get a better gist of what the steps will be</p>",
        "id": 198127056,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589922604
    },
    {
        "content": "<p>possibly</p>",
        "id": 198127144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922635
    },
    {
        "content": "<p>it'd be good to see if <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> has any bright ideas here (or opinions)</p>",
        "id": 198127184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922650
    },
    {
        "content": "<p>I only really say that because...well...I don't really know what I'm doing here at all</p>",
        "id": 198127220,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589922664
    },
    {
        "content": "<p>one thing we could do</p>",
        "id": 198127287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922694
    },
    {
        "content": "<p>something we've rarely done I guess</p>",
        "id": 198127294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922699
    },
    {
        "content": "<p>would be to schedule a 1 hour virtual pairing session</p>",
        "id": 198127301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922707
    },
    {
        "content": "<p>to kind of \"get started\"</p>",
        "id": 198127312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922713
    },
    {
        "content": "<p>that said</p>",
        "id": 198127374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922729
    },
    {
        "content": "<p>I think this is not the refactoring I would do first</p>",
        "id": 198127381,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922733
    },
    {
        "content": "<p>That would be helpful</p>",
        "id": 198127391,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589922741
    },
    {
        "content": "<p>Hmm</p>",
        "id": 198127396,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589922743
    },
    {
        "content": "<p>the one I would do first is trying to change how <em>late-bound</em> stuff works to align better with chalk</p>",
        "id": 198127399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922745
    },
    {
        "content": "<p>because it serves a few purposes</p>",
        "id": 198127416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922755
    },
    {
        "content": "<p>the current <code>Binders</code> for rustc doesn't have any idea of what things it binds</p>",
        "id": 198127462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922779
    },
    {
        "content": "<p>and it also doesn't know their kinds</p>",
        "id": 198127469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922784
    },
    {
        "content": "<p>(i.e., are they constants? regions?)</p>",
        "id": 198127487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922796
    },
    {
        "content": "<p>right</p>",
        "id": 198127499,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589922802
    },
    {
        "content": "<p>I think we need to bridge that gap</p>",
        "id": 198127516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922810
    },
    {
        "content": "<p>hmm, okay</p>",
        "id": 198127524,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589922819
    },
    {
        "content": "<p>I <em>think</em> we probably want to make rustc have a list of things with each binder?</p>",
        "id": 198127529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922821
    },
    {
        "content": "<p>(the other option would be to move chalk to match rustc of course)</p>",
        "id": 198127536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922829
    },
    {
        "content": "<p>I actually don't 100% know which one I think is better</p>",
        "id": 198127614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922862
    },
    {
        "content": "<p>the reason I thought this served multiple purposes</p>",
        "id": 198127673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922884
    },
    {
        "content": "<p>is that if we want to support GATs, we do need to be able to express <code>forall&lt;T&gt; { .. }</code> in rustc</p>",
        "id": 198127801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922944
    },
    {
        "content": "<p>er, <code>for&lt;T&gt; T: Trait</code>, things like that</p>",
        "id": 198127814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922954
    },
    {
        "content": "<p>and that means that we need late-bound types</p>",
        "id": 198127816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922959
    },
    {
        "content": "<p>The other thing that might be potentially useful to refactor is to make <em>all</em> late-bound regions have an index</p>",
        "id": 198127818,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589922961
    },
    {
        "content": "<p>yes that is part of this</p>",
        "id": 198127865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922968
    },
    {
        "content": "<p>i.e., if we had a single vector of kinds, then I think the variables need to have their index into that vector</p>",
        "id": 198127880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922981
    },
    {
        "content": "<p>but I guess I <em>am</em> partly wondering if it's just \"more data structure to keep in sync\"</p>",
        "id": 198127898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589922993
    },
    {
        "content": "<p>the negative of the rustc approach of course is that you must walk the full data structure to get a list of what is bound within it</p>",
        "id": 198127922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589923014
    },
    {
        "content": "<p>and for things like canonicalization it doesn't work as well</p>",
        "id": 198127932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589923021
    },
    {
        "content": "<p>since the ordering is pretty important there</p>",
        "id": 198127958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589923037
    },
    {
        "content": "<p>which is why rustc has a separate <code>ReCanonical</code> or whatever I think</p>",
        "id": 198127973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589923045
    },
    {
        "content": "<p>(i.e., you need the vector there)</p>",
        "id": 198128003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589923059
    },
    {
        "content": "<p>Hmm</p>",
        "id": 198128020,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589923071
    },
    {
        "content": "<p>I guess that giving everything an index might be something we could do somewhat independently</p>",
        "id": 198128026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589923074
    },
    {
        "content": "<p>one other annoying thing is going to be the <code>Debug</code> impls</p>",
        "id": 198128103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589923104
    },
    {
        "content": "<p>How so?</p>",
        "id": 198128188,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589923153
    },
    {
        "content": "<p>well</p>",
        "id": 198128992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589923579
    },
    {
        "content": "<p>whenever you have indices, you have to make a choice</p>",
        "id": 198129001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589923590
    },
    {
        "content": "<p>do you store the name <em>and</em> the index?</p>",
        "id": 198129008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589923596
    },
    {
        "content": "<p>or just the index?</p>",
        "id": 198129012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589923597
    },
    {
        "content": "<p>if you store the name, you can use it in the debug impl</p>",
        "id": 198129032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589923607
    },
    {
        "content": "<p>if you don't, you have to dump the index</p>",
        "id": 198129063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589923624
    },
    {
        "content": "<p>I should not say debug impl</p>",
        "id": 198129073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589923627
    },
    {
        "content": "<p>the problem I'm thinking of in rustc is actually more centered on the <code>Display</code> impl</p>",
        "id": 198129110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589923640
    },
    {
        "content": "<p>i.e., when we print types for error messages</p>",
        "id": 198129116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589923645
    },
    {
        "content": "<p>we do have some special treatment for bound regions but I'm concerned that we'll have to do some work to thread sufficient context down</p>",
        "id": 198129154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589923662
    },
    {
        "content": "<p>esp. if we want to retain the user's names</p>",
        "id": 198129169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589923669
    },
    {
        "content": "<p>unless we embed them as \"extra data\"</p>",
        "id": 198129185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589923676
    },
    {
        "content": "<p>which I guess we can do but I hate it :P</p>",
        "id": 198129187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589923680
    },
    {
        "content": "<p>it is what we do for <code>ty::Param</code>I think tho</p>",
        "id": 198129234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589923686
    },
    {
        "content": "<p>I just don't like it because <em>then</em> you lose the \"canonical\" property of debruijn indices</p>",
        "id": 198129265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589923700
    },
    {
        "content": "<p>and you have to have ideas like \"anonymizing\" them</p>",
        "id": 198129274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589923705
    },
    {
        "content": "<p>Isn't rustc using global storage for some types atm?</p>",
        "id": 198129294,
        "sender_full_name": "lcnr",
        "timestamp": 1589923719
    },
    {
        "content": "<p>yes, all its types</p>",
        "id": 198129301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589923727
    },
    {
        "content": "<p>I mean for the debug impls</p>",
        "id": 198129336,
        "sender_full_name": "lcnr",
        "timestamp": 1589923751
    },
    {
        "content": "<p>I don't really remember</p>",
        "id": 198129731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589923958
    },
    {
        "content": "<p>A lot of debug impls use <a href=\"https://github.com/rust-lang/rust/blob/672b272077561ca7b5027a8aff9ea2957c7d4c21/src/librustc_middle/ty/context.rs#L1708-L1712\">https://github.com/rust-lang/rust/blob/672b272077561ca7b5027a8aff9ea2957c7d4c21/src/librustc_middle/ty/context.rs#L1708-L1712</a></p>",
        "id": 198129888,
        "sender_full_name": "lcnr",
        "timestamp": 1589924044
    },
    {
        "content": "<p>See <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/tls/fn.with.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/tls/fn.with.html</a></p>",
        "id": 198129975,
        "sender_full_name": "lcnr",
        "timestamp": 1589924107
    },
    {
        "content": "<p>I <em>think</em> that is just giving access to the tcx</p>",
        "id": 198131722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589925148
    },
    {
        "content": "<p>Which is a start but not enough</p>",
        "id": 198131738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589925156
    },
    {
        "content": "<p>e.g., if we have <code>for&lt;'a&gt; { .. }</code>, and we represent a reference to <code>'a</code> with <code>^0</code>, and we try to print a type that involves <code>^0</code>, we'd have to know what name to use</p>",
        "id": 198131814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589925206
    },
    {
        "content": "<p>usually though we don't manipulate bound types directly</p>",
        "id": 198131822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589925212
    },
    {
        "content": "<p>so I don't know how much of a problem it is</p>",
        "id": 198131844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589925230
    },
    {
        "content": "<p>Aaah, then I understood this slightly wrong. One could always make the constructor of regions private and automatically update the tcx correctly I guess <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 198132155,
        "sender_full_name": "lcnr",
        "timestamp": 1589925409
    },
    {
        "content": "<p>That's seems quite horrible though</p>",
        "id": 198132195,
        "sender_full_name": "lcnr",
        "timestamp": 1589925438
    },
    {
        "content": "<p>the more I think about it</p>",
        "id": 198132390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589925565
    },
    {
        "content": "<p>the less of a problem I think it is</p>",
        "id": 198132393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589925569
    },
    {
        "content": "<p>but it would be relevant for placeholders</p>",
        "id": 198132406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589925575
    },
    {
        "content": "<p>tbh I think it'd be useful in genreal</p>",
        "id": 198132420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589925590
    },
    {
        "content": "<p>if for our debug routines</p>",
        "id": 198132425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589925593
    },
    {
        "content": "<p>we had some way to push more state</p>",
        "id": 198132430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589925595
    },
    {
        "content": "<p>e.g., \"we are type-checking this def-id\"</p>",
        "id": 198132436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589925600
    },
    {
        "content": "<p>but i'm not 100% sure why I think that anymore</p>",
        "id": 198132487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589925607
    },
    {
        "content": "<p>I want the Lark design :P except that was maybe more annoying in practice than I thought it would be</p>",
        "id": 198132503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589925622
    },
    {
        "content": "<p>(in particular we used a <code>DebugWith</code> trait to let you thread context down very easily)</p>",
        "id": 198132526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589925640
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> PR for Chalk upgrade: <a href=\"https://github.com/rust-lang/rust/pull/72936\">https://github.com/rust-lang/rust/pull/72936</a></p>",
        "id": 199573198,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591149831
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you around? So <code>InternedAdtDef</code> requires it to be <code>Copy</code> but <code>AdtDef</code> is not</p>",
        "id": 199634453,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591198128
    },
    {
        "content": "<p>interesting</p>",
        "id": 199648057,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591204295
    },
    {
        "content": "<p>yeah ok I didn't realize that the <code>AdtDef</code>  was \"owned\" by the type</p>",
        "id": 199648158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591204333
    },
    {
        "content": "<p>leave it as is for now I guess</p>",
        "id": 199648199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591204363
    },
    {
        "content": "<p>Okay</p>",
        "id": 199648555,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591204545
    },
    {
        "content": "<p>Would <code>&amp;'tcx AdtDef</code> work?</p>",
        "id": 199648563,
        "sender_full_name": "lcnr",
        "timestamp": 1591204548
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  I addressed your other changes</p>",
        "id": 199648590,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591204560
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> is there an interned AdtDef?</p>",
        "id": 199648649,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591204570
    },
    {
        "content": "<p>All <code>AdtDef</code>  are interned afaik</p>",
        "id": 199648682,
        "sender_full_name": "lcnr",
        "timestamp": 1591204584
    },
    {
        "content": "<p>yeah so</p>",
        "id": 199648717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591204600
    },
    {
        "content": "<p>I considered that</p>",
        "id": 199648723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591204602
    },
    {
        "content": "<p>you could do it for now</p>",
        "id": 199648743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591204609
    },
    {
        "content": "<p>eventually though we'd either have to change rustc to match</p>",
        "id": 199648759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591204619
    },
    {
        "content": "<p>or else adapt a <code>DefId</code></p>",
        "id": 199648769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591204624
    },
    {
        "content": "<p>the <code>AdtDEf</code> are interned as part of the type today, it seems</p>",
        "id": 199648786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591204634
    },
    {
        "content": "<p>wait maybe I'm confused</p>",
        "id": 199648806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591204643
    },
    {
        "content": "<p>/me double checks</p>",
        "id": 199648811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591204645
    },
    {
        "content": "<p>oh I misunderstood you <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span></p>",
        "id": 199648834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591204661
    },
    {
        "content": "<p>the rustc variant <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/enum.TyKind.html#variant.Adt\">Adt</a> already stores a <code>&amp;'tcx AdtDef</code></p>",
        "id": 199648917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591204685
    },
    {
        "content": "<p>so yeah that's what I would do</p>",
        "id": 199648924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591204689
    },
    {
        "content": "<p>Yeah, I didn't realize that</p>",
        "id": 199648965,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591204712
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">PartialEq</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">AdtDef</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// `AdtDef`s are always interned, and this is part of `TyS` equality.</span>\n<span class=\"w\">    </span><span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">eq</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ptr</span>::<span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 199648995,
        "sender_full_name": "lcnr",
        "timestamp": 1591204728
    },
    {
        "content": "<p>Let me change that real quick</p>",
        "id": 199649085,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591204778
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> okay updated :)</p>",
        "id": 199650881,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591205653
    },
    {
        "content": "<p>So, am I correct that it's only <em>unnamed</em> late bound lifetimes that would be showing up in <code>FnSig</code>, but not the generics?</p>",
        "id": 199678090,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591219159
    },
    {
        "content": "<p>hmm okay no</p>",
        "id": 199678730,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591219474
    },
    {
        "content": "<p>no, the rules are that lifetimes are late bound if they </p>\n<ul>\n<li>appear in the fn arguments, and</li>\n<li>do not appear in where clauses or bounds</li>\n</ul>\n<p>something like that.</p>",
        "id": 199680306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591220325
    },
    {
        "content": "<p>So, is it possible to just concatenate the binders and late-bound lifetimes?</p>",
        "id": 199680796,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591220606
    },
    {
        "content": "<p>Or I guess, it might be better to ask: is that <em>right</em></p>",
        "id": 199681037,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591220746
    },
    {
        "content": "<p>hmm no</p>",
        "id": 199683460,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591222250
    },
    {
        "content": "<p>Because when rustc asks if a fn is WF, it doesn't give the late-bound region as a parameter</p>",
        "id": 199683531,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591222311
    },
    {
        "content": "<p>e.g. <code>WellFormed(FnDefId(DefId(0:19 ~ inherent_impl[317d]::{{impl}}[3]::dummy_bar[0]))&lt;Ty(Int(I32)), Ty(Uint(U32))&gt;)</code></p>",
        "id": 199683614,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591222344
    },
    {
        "content": "<p>So, does Chalk even care about the late bound lifetimes?</p>",
        "id": 199683809,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591222472
    },
    {
        "content": "<p>I mean, of course it has to, since the inputs and outputs can name it</p>",
        "id": 199684265,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591222780
    },
    {
        "content": "<p>I think that the inputs/outputs in the <a href=\"http://rust-lang.github.io/chalk/chalk_solve/rust_ir/struct.FnDefDatumBound.html\"><code>FnDefDatumBound</code></a> should be under a binder</p>",
        "id": 199687042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591224749
    },
    {
        "content": "<p>and it is rustc's job to put the late-bound stuff in that binder</p>",
        "id": 199687049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591224760
    },
    {
        "content": "<p>for our <em>input</em> format I might separate it out for convenience</p>",
        "id": 199687057,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591224767
    },
    {
        "content": "<p>i.e., for our unit tests</p>",
        "id": 199687060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591224770
    },
    {
        "content": "<p>or we could reproduce the logic frm rustc that classifies each region parameter as either early or late</p>",
        "id": 199687082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591224790
    },
    {
        "content": "<p>we've discused how we might eliminate the distinction but I think it's out of scope for this group/effort :)</p>",
        "id": 199687100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591224806
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/199687042\">said</a>:</p>\n<blockquote>\n<p>I think that the inputs/outputs in the <a href=\"http://rust-lang.github.io/chalk/chalk_solve/rust_ir/struct.FnDefDatumBound.html\"><code>FnDefDatumBound</code></a> should be under a binder</p>\n</blockquote>\n<p>I did this locally and everything works as expected</p>",
        "id": 199687912,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591225424
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/199680796\">said</a>:</p>\n<blockquote>\n<p>So, is it possible to just concatenate the binders and late-bound lifetimes?</p>\n</blockquote>\n<p>So, thought a bit more about this. When I tried this, it didn't work because rustc doesn't provide the late-bound regions in the substs. But I think if we did want to do this, it would be possible to add a dummy lifetime(s) when we lower <code>FnDef</code> substs</p>",
        "id": 199786409,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591293947
    },
    {
        "content": "<p>I <em>almost</em> think that's the better way to go. Since it keeps a more clear divide between \"Chalk logic\" and \"rustc logic\", specifically in regards to late-bound regions</p>",
        "id": 199786543,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591294030
    },
    {
        "content": "<p>But on the other hand, it's a little more simpler (in the short run) to just add the <code>Binders</code> around the inputs and output</p>",
        "id": 199786611,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591294071
    },
    {
        "content": "<p>Even though Chalk doesn't use it <em>at all</em></p>",
        "id": 199786634,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591294082
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> around?</p>",
        "id": 199812394,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591307089
    },
    {
        "content": "<p>Anything else you want from <a href=\"https://github.com/rust-lang/rust/pull/72936\">https://github.com/rust-lang/rust/pull/72936</a></p>",
        "id": 199812409,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591307097
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/199786634\">said</a>:</p>\n<blockquote>\n<p>Even though Chalk doesn't use it <em>at all</em></p>\n</blockquote>\n<p>it will</p>",
        "id": 199814456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591308327
    },
    {
        "content": "<p>when it implements the <code>Fn</code> traits</p>",
        "id": 199814461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591308332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/199812409\">said</a>:</p>\n<blockquote>\n<p>Anything else you want from <a href=\"https://github.com/rust-lang/rust/pull/72936\">https://github.com/rust-lang/rust/pull/72936</a></p>\n</blockquote>\n<p>r+'d</p>",
        "id": 199814521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591308363
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/199814461\">said</a>:</p>\n<blockquote>\n<p>when it implements the <code>Fn</code> traits</p>\n</blockquote>\n<p>ah true</p>",
        "id": 199814729,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591308506
    },
    {
        "content": "<p>I guess that is a good next step</p>",
        "id": 199814774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591308533
    },
    {
        "content": "<p>Yeah, I'm working on it in the closures branch</p>",
        "id": 199814864,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591308589
    },
    {
        "content": "<p>Okay I've got basic closures implemented locally</p>",
        "id": 200142297,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591643091
    },
    {
        "content": "<p>But there is a problem</p>",
        "id": 200142309,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591643099
    },
    {
        "content": "<p>So, rustc is giving us this goal: <code>WellFormed(extern \"rust-call\" fn(&amp;[closure@/home/hueyj/temp/rust/rust/src/test/ui/chalkify/closure.rs:31:13: 33:6], (&amp;i32,)) -&gt; ^1_2)</code></p>",
        "id": 200142379,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591643152
    },
    {
        "content": "<p>Which gets lowered to <code>WellFormed(for&lt;0&gt; [Ty(Not&lt;Lifetime('^1.0), Ty({closure:ClosureId(DefId(0:4 ~ closure[317d]::main[0]::{{closure}}[0]))}&lt;Ty(Int(I8)), Ty(for&lt;0&gt; [Ty(1&lt;Ty(Not&lt;Lifetime('^2.1), Ty(Int(I32))&gt;)&gt;), Ty(^2.2)]), Ty(0)&gt;)&gt;), Ty(1&lt;Ty(Not&lt;Lifetime('^1.1), Ty(Int(I32))&gt;)&gt;), Ty(^1.2)])</code></p>",
        "id": 200142438,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591643167
    },
    {
        "content": "<p>Good so far</p>",
        "id": 200142441,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591643171
    },
    {
        "content": "<p>(I know that's really verbose. Don't worry too much about every bit)</p>",
        "id": 200142467,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591643191
    },
    {
        "content": "<p>Now, this goal is provable in rustc</p>",
        "id": 200142511,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591643219
    },
    {
        "content": "<p>Now, the problem comes in when we try to solve this in chalk</p>",
        "id": 200142564,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591643251
    },
    {
        "content": "<p>when we <code>instantiate</code> that goal to get program clauses, we end up with:</p>",
        "id": 200142605,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591643279
    },
    {
        "content": "<p><code>WellFormed(for&lt;0&gt; [Ty(Not&lt;Lifetime('?0), Ty({closure:ClosureId(DefId(0:4 ~ closure[317d]::main[0]::{{closure}}[0]))}&lt;Ty(Int(I8)), Ty(for&lt;0&gt; [Ty(1&lt;Ty(Not&lt;Lifetime('?1), Ty(Int(I32))&gt;)&gt;), Ty(?2)]), Ty(0)&gt;)&gt;), Ty(1&lt;Ty(Not&lt;Lifetime('?1), Ty(Int(I32))&gt;)&gt;), Ty(?2)]), environment=Env([])</code></p>",
        "id": 200142659,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591643288
    },
    {
        "content": "<p>Specifically, those bound vars (<code>'^1.0</code>, <code>'1.1</code>, <code>1.2</code>) gets replaced by inference variables</p>",
        "id": 200142732,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591643331
    },
    {
        "content": "<p>Well, inferenance variables aren't WF</p>",
        "id": 200142754,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591643348
    },
    {
        "content": "<p>so the entire goal isn't provable</p>",
        "id": 200142770,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591643360
    },
    {
        "content": "<p>(we flounder)</p>",
        "id": 200142778,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591643366
    },
    {
        "content": "<p>Side note though, in rustc, bound vars are WF, in chalk they flounder</p>",
        "id": 200142798,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591643387
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> okay, so the general idea of the integration into rustc <em>so far</em> is just get things implemented</p>",
        "id": 200293503,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591738271
    },
    {
        "content": "<p>so</p>",
        "id": 200293508,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591738276
    },
    {
        "content": "<p>there's quite a lot of <code>unimplemented!</code> in the <code>librustc_traits</code> crate</p>",
        "id": 200293537,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591738300
    },
    {
        "content": "<p>And a lot of <code>FIXME(chalk)</code></p>",
        "id": 200293561,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591738312
    },
    {
        "content": "<p>looking for those would be an easy way to get started</p>",
        "id": 200293630,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591738337
    },
    {
        "content": "<p>let me quickly go through and see if there's something in particular worth doing</p>",
        "id": 200293682,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591738369
    },
    {
        "content": "<p>Another thing that somewhat related but not part of the chalk integration itself would be the \"should we track the number of bound vars in <code>Binders</code>\" question</p>",
        "id": 200293779,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591738425
    },
    {
        "content": "<p>I had started a branch to try to convert rustc's <code>Binder</code> to count bound vars</p>",
        "id": 200293848,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591738451
    },
    {
        "content": "<p>but <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> suggested it might be worth trying to refactor <em>Chalk</em> to <em>not</em> count bound vars</p>",
        "id": 200293873,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591738473
    },
    {
        "content": "<p>Hum ok. You also have a pending branch that has a lot of changes in <code>librustc_traits</code>, maybe I should take a look once its merged.</p>",
        "id": 200294057,
        "sender_full_name": "marmeladema",
        "timestamp": 1591738592
    },
    {
        "content": "<p>For avoid counting bound vars in charlk, is there an issue that describes in more detail what should be done?</p>",
        "id": 200294426,
        "sender_full_name": "marmeladema",
        "timestamp": 1591738834
    },
    {
        "content": "<p>Yeah, that PR is still pending. So if you wanted to take a look, it would probably be best to look after merge, or just at the branch itself</p>",
        "id": 200295210,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591739237
    },
    {
        "content": "<p>Hmm, I'm not sure if we ever wrote an issue for the bound var counting</p>",
        "id": 200295233,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591739257
    },
    {
        "content": "<p>But, maybe I can briefly sort of explain the problem</p>",
        "id": 200295381,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591739345
    },
    {
        "content": "<p>So, in Chalk, our <code>Binders</code> looks like: <a href=\"https://github.com/rust-lang/chalk/blob/master/chalk-ir/src/lib.rs#L1486\">https://github.com/rust-lang/chalk/blob/master/chalk-ir/src/lib.rs#L1486</a></p>",
        "id": 200295449,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591739391
    },
    {
        "content": "<p>In rustc, it looks like <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_middle/ty/sty.rs#L842\">https://github.com/rust-lang/rust/blob/master/src/librustc_middle/ty/sty.rs#L842</a></p>",
        "id": 200295553,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591739444
    },
    {
        "content": "<p>Notably, in rustc, we don't store the VariableKinds</p>",
        "id": 200295595,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591739470
    },
    {
        "content": "<p>It's a little bit more nuanced, because in Chalk <em>all</em> bound vars are have a integer index</p>",
        "id": 200295649,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591739511
    },
    {
        "content": "<p>In rustc, only a subset do. But others are named</p>",
        "id": 200295739,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591739547
    },
    {
        "content": "<p>But also, it's a bit different since rustc has the idea of \"late-bound regions\"</p>",
        "id": 200295810,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591739599
    },
    {
        "content": "<p>But anyways</p>",
        "id": 200295829,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591739613
    },
    {
        "content": "<p>Right now, any time we need to convert rustc <code>Binder&lt;T&gt;</code> to chalk's <code>Binders&lt;T&gt;</code>, we have to <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_traits/chalk/lowering.rs#L484\"><code>collect_bound_vars</code></a></p>",
        "id": 200295940,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591739673
    },
    {
        "content": "<p>I am still there, but not really grasping everything^^</p>",
        "id": 200295950,
        "sender_full_name": "marmeladema",
        "timestamp": 1591739677
    },
    {
        "content": "<p>Long term, the goal is for chalk and rustc to share a type library, so this difference needs to be accounted for</p>",
        "id": 200296068,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591739758
    },
    {
        "content": "<p>It's also perhaps worth reading the previous discussion I had with Niko: <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/198125570\">https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/198125570</a></p>",
        "id": 200296269,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591739850
    },
    {
        "content": "<p>This is also my WIP branch <a href=\"https://github.com/jackh726/rust/tree/binder-refactor\">https://github.com/jackh726/rust/tree/binder-refactor</a></p>",
        "id": 200296519,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591739997
    },
    {
        "content": "<p>Ok i'll take a look. If you feel like making progress don't wait for me, it willl probably take me a while to understand all of this.</p>",
        "id": 200296638,
        "sender_full_name": "marmeladema",
        "timestamp": 1591740047
    },
    {
        "content": "<p>Yeah, no worries :)</p>",
        "id": 200297277,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591740449
    },
    {
        "content": "<p>Like I said, you can also just go through and look for <code>unimplemented!()</code>s or <code>FIXME(chalk)</code>s</p>",
        "id": 200297311,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591740474
    },
    {
        "content": "<p>The branch for the PR is here: <a href=\"https://github.com/jackh726/rust/tree/chalk-more\">https://github.com/jackh726/rust/tree/chalk-more</a></p>",
        "id": 200297398,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591740520
    },
    {
        "content": "<p>And feel free to ask questions</p>",
        "id": 200297424,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591740537
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> question</p>",
        "id": 201073948,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592341529
    },
    {
        "content": "<p>related to <code>Fn</code> substitutions</p>",
        "id": 201073983,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592341546
    },
    {
        "content": "<p>So, in rustc, args are stored in a tuple</p>",
        "id": 201074045,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592341566
    },
    {
        "content": "<p>right</p>",
        "id": 201074073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592341579
    },
    {
        "content": "<p>in chalk, we're storing them in the list + output</p>",
        "id": 201074104,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592341598
    },
    {
        "content": "<p>should we move to also storing args in a tuple</p>",
        "id": 201074135,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592341611
    },
    {
        "content": "<p>wait</p>",
        "id": 201074183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592341644
    },
    {
        "content": "<p>ah</p>",
        "id": 201074189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592341647
    },
    {
        "content": "<p>you mean like <code>Fn&lt;(A1, A2)&gt;</code></p>",
        "id": 201074195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592341652
    },
    {
        "content": "<p><em>that</em> tuple?</p>",
        "id": 201074210,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592341661
    },
    {
        "content": "<p>yes</p>",
        "id": 201074276,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592341682
    },
    {
        "content": "<p>err</p>",
        "id": 201074336,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592341717
    },
    {
        "content": "<p>good point :)</p>",
        "id": 201074339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592341718
    },
    {
        "content": "<p>I guess we should</p>",
        "id": 201074352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592341725
    },
    {
        "content": "<p>yeah</p>",
        "id": 201074363,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592341734
    },
    {
        "content": "<p>Okay, so a substitution for a <code>Function</code> will always have two parameters</p>",
        "id": 201074436,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592341787
    },
    {
        "content": "<p>wait</p>",
        "id": 201074456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592341801
    },
    {
        "content": "<p>Err</p>",
        "id": 201074504,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592341812
    },
    {
        "content": "<p>I'm a bit confused</p>",
        "id": 201074510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592341815
    },
    {
        "content": "<p>me too</p>",
        "id": 201074520,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592341819
    },
    {
        "content": "<p>there are I guess two distinct things</p>",
        "id": 201074528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592341823
    },
    {
        "content": "<p>so in rustc at least the set of inputs+outputs are stored in one list,</p>",
        "id": 201074567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592341843
    },
    {
        "content": "<p>but I guess that when we decide what <code>Fn</code> traits it implements,</p>",
        "id": 201074576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592341850
    },
    {
        "content": "<p>we construct the tuple type from that list</p>",
        "id": 201074595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592341859
    },
    {
        "content": "<p>which isn't really the most efficient thing I suppose</p>",
        "id": 201074601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592341865
    },
    {
        "content": "<p>I think I just did this wrong</p>",
        "id": 201074623,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592341883
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/201074576\">said</a>:</p>\n<blockquote>\n<p>but I guess that when we decide what <code>Fn</code> traits it implements,</p>\n</blockquote>\n<p>I did the same thing in the Chalk impl</p>",
        "id": 201074640,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592341899
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/blob/5bf3a51402d26a73b7cff430aafd742cb3a7752a/chalk-solve/src/clauses/builtin_traits/fn_family.rs#L38-L47\">https://github.com/rust-lang/chalk/blob/5bf3a51402d26a73b7cff430aafd742cb3a7752a/chalk-solve/src/clauses/builtin_traits/fn_family.rs#L38-L47</a></p>",
        "id": 201074721,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592341928
    },
    {
        "content": "<p>I'm thinking about <code>FnDef</code></p>",
        "id": 201074852,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592341962
    },
    {
        "content": "<p>the arguments types we get from rustc are a tuple</p>",
        "id": 201074909,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592341981
    },
    {
        "content": "<p>in Chalk, we're storing them as a vec</p>",
        "id": 201074924,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592341990
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc/near/201074909\">said</a>:</p>\n<blockquote>\n<p>the arguments types we get from rustc are a tuple</p>\n</blockquote>\n<p>oh?</p>",
        "id": 201075070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592342063
    },
    {
        "content": "<p>I'm not sure what you mean exactly</p>",
        "id": 201075087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592342072
    },
    {
        "content": "<p>the <code>FnDef</code> has a <code>Substs</code>, which corresponds to the function's type/region parameters</p>",
        "id": 201075104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592342085
    },
    {
        "content": "<p>Wait, am I still confused</p>",
        "id": 201075141,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592342121
    },
    {
        "content": "<p>but you can then get a <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.FnSig.html\"><code>FnSig</code></a> for it</p>",
        "id": 201075147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592342125
    },
    {
        "content": "<p>/me had forgotten about variadic...</p>",
        "id": 201075184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592342145
    },
    {
        "content": "<p>okay so I think it's just closures that are weird</p>",
        "id": 201075258,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592342176
    },
    {
        "content": "<p>closures do store their <em>upvars</em> in a tuple...</p>",
        "id": 201075290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592342207
    },
    {
        "content": "<p>I think that they store their <em>signature</em> if a <code>fn</code> type</p>",
        "id": 201075302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592342218
    },
    {
        "content": "<p>yeah</p>",
        "id": 201075343,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592342253
    },
    {
        "content": "<p>and they store their kind in an integer type (but don't think about that too much)</p>",
        "id": 201075566,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592342398
    },
    {
        "content": "<p>does it store the arguments for the closure signature as a tuple...</p>",
        "id": 201075611,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592342404
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Binder(\n    ([()]; c_variadic: false)-&gt;(),\n)\n</code></pre></div>",
        "id": 201075695,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592342458
    },
    {
        "content": "<p>That's an empty closure <code>|| {}</code></p>",
        "id": 201075712,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592342468
    },
    {
        "content": "<p>or, more precisely, that's the <code>FnSig</code> part of an empty closure</p>",
        "id": 201075837,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592342527
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[src/librustc_traits/chalk/lowering.rs:434] substs = [\n    ^1_0,\n    extern &quot;rust-call&quot; fn(()),\n    (),\n]\n[src/librustc_traits/chalk/lowering.rs:411] &amp;sig = Binder(\n    ([()]; c_variadic: false)-&gt;(),\n)\n[src/librustc_traits/chalk/lowering.rs:414] &amp;inputs_and_outputs = [\n    (),\n    (),\n]\n</code></pre></div>",
        "id": 201075933,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592342597
    },
    {
        "content": "<p>right okay</p>",
        "id": 201076310,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592342806
    },
    {
        "content": "<p>so there is definitely something weird with the fnsig in closures</p>",
        "id": 201076324,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592342819
    },
    {
        "content": "<p>Unless I am still confused, which is completely possible</p>",
        "id": 201076351,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592342831
    },
    {
        "content": "<p>The closure signature (and ABI) is chosen to match <code>FnOnce::call_once</code> but without the self type. So it's going to have the inputs tupled.</p>",
        "id": 201076649,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592343002
    },
    {
        "content": "<p>okay</p>",
        "id": 201076753,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592343040
    },
    {
        "content": "<p>So the FnSig contains a list of a tuple of the parameter types and the return type on its own.</p>",
        "id": 201076768,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592343055
    },
    {
        "content": "<p>the docs in <code>ClosureSubsts</code> should probably mention this :/</p>",
        "id": 201076830,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592343111
    },
    {
        "content": "<p>probably</p>",
        "id": 201076888,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592343124
    },
    {
        "content": "<blockquote>\n<p>CS represents the closure signature, representing as a fn() type. For example, fn(u32, u32) -&gt; u32 would mean that the closure implements CK&lt;(u32, u32), Output = u32&gt;</p>\n</blockquote>",
        "id": 201076924,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592343160
    },
    {
        "content": "<p>That doesn't suggest these are tupled at all</p>",
        "id": 201076938,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592343170
    },
    {
        "content": "<p>I honestly thought I was crazy</p>",
        "id": 201077112,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592343271
    },
    {
        "content": "<p>fwiw <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I didn't realize this, or I'd forgotten about it :)</p>",
        "id": 201077746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592343604
    },
    {
        "content": "<p>I did a poor job explaining</p>",
        "id": 201077854,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592343677
    },
    {
        "content": "<p>but mostly because I didn't even realize <em>that</em> was where the problem was</p>",
        "id": 201077871,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592343691
    },
    {
        "content": "<p>I was so confused</p>",
        "id": 201078213,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592343898
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> closure PR ready</p>",
        "id": 201078565,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592344142
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> have you been testing this against rustc, too?</p>",
        "id": 201079061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592344441
    },
    {
        "content": "<p>indeed</p>",
        "id": 201079112,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592344450
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    let t = || {};\n    t();\n\n    let mut a = 0;\n    let mut b = move || {\n        a = 1;\n    };\n    b();\n\n    let mut c = b;\n\n    c();\n    b();\n\n    let mut a = 0;\n    let mut b = || {\n        a = 1;\n    };\n    b();\n\n    let mut c = b;\n\n    c();\n    b(); //~ ERROR\n</code></pre></div>",
        "id": 201079133,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592344466
    },
    {
        "content": "<p>that's the current tests I'm using</p>",
        "id": 201079146,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592344478
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    let b = |c| {\n        c\n    };\n\n    let a = &amp;32;\n    b(a);\n</code></pre></div>\n\n\n<p>fails right now</p>",
        "id": 201079170,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592344496
    },
    {
        "content": "<p>(not entirely sure why, but I don't think it's related to closures directly)</p>",
        "id": 201079197,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592344513
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> another question</p>",
        "id": 201081960,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592346578
    },
    {
        "content": "<p>In rustc, Bound tys are considered WF</p>",
        "id": 201081980,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592346592
    },
    {
        "content": "<p>in Chalk, they flounder</p>",
        "id": 201081996,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592346599
    },
    {
        "content": "<p>what's the best solution</p>",
        "id": 201082041,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592346605
    },
    {
        "content": "<p>can you give a more concrete example?</p>",
        "id": 201082279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592346733
    },
    {
        "content": "<p>Hmm</p>",
        "id": 201082456,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592346846
    },
    {
        "content": "<p>Well, this is sort of an example</p>",
        "id": 201082471,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592346860
    },
    {
        "content": "<p><code>WellFormed(for&lt;0&gt; [Ty(Not&lt;Lifetime('^1.0), Ty({closure:ClosureId(DefId(0:4 ~ closure[317d]::main[0]::{{closure}}[0]))}&lt;Ty(Int(I8)), Ty(for&lt;0&gt; [Ty(1&lt;Ty(Not&lt;Lifetime('^2.1), Ty(Int(I32))&gt;)&gt;), Ty(^2.2)]), Ty(0)&gt;)&gt;), Ty(1&lt;Ty(Not&lt;Lifetime('^1.1), Ty(Int(I32))&gt;)&gt;), Ty(^1.2)])</code></p>",
        "id": 201082477,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592346864
    },
    {
        "content": "<p>That's very verbose</p>",
        "id": 201082491,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592346874
    },
    {
        "content": "<p>But essentially, those bound vars get instantiated into inference vars, which aren't WF</p>",
        "id": 201082519,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592346901
    },
    {
        "content": "<p>which, isn't the same</p>",
        "id": 201082532,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592346911
    },
    {
        "content": "<p>I'm not 100% sure this is what is causing that last case to fail</p>",
        "id": 201082627,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592346970
    },
    {
        "content": "<p>So chalk upgrade PR is merged</p>",
        "id": 201562145,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592790949
    },
    {
        "content": "<p>Sad thing is I already have enough for probably another</p>",
        "id": 201562186,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592790973
    },
    {
        "content": "<p>Congrats! I would not say its sad though :P</p>",
        "id": 201576771,
        "sender_full_name": "marmeladema",
        "timestamp": 1592812757
    },
    {
        "content": "<p>Oh, I guess sad in that more queue time :)</p>",
        "id": 201608172,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592834059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> would you actually be interesting in the shared type library work?</p>",
        "id": 201780855,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592945361
    },
    {
        "content": "<p>Probably yes, it still a bit fuzzy on the boundaries</p>",
        "id": 201780940,
        "sender_full_name": "marmeladema",
        "timestamp": 1592945398
    },
    {
        "content": "<p>Like what should be in the type library and what should not</p>",
        "id": 201781010,
        "sender_full_name": "marmeladema",
        "timestamp": 1592945413
    },
    {
        "content": "<p>So, you could imagine that like 90% of what's in <code>chalk-ir</code> would eventually be in the shared type library</p>",
        "id": 201781087,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592945456
    },
    {
        "content": "<p>There's a couple possible \"first steps\" that can be taken here</p>",
        "id": 201781182,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592945496
    },
    {
        "content": "<p>One was changing <code>ty.kind</code> to be <code>ty.kind(tcx)</code></p>",
        "id": 201781224,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592945518
    },
    {
        "content": "<p>Another was working on the late-bound region binders</p>",
        "id": 201781305,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592945542
    },
    {
        "content": "<p>And either having rust track bound vars, or chalk <em>not</em></p>",
        "id": 201781335,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592945560
    },
    {
        "content": "<p>Ok, pardon me, but i am not sure i understand what is the late-bound region binders.</p>",
        "id": 201781558,
        "sender_full_name": "marmeladema",
        "timestamp": 1592945649
    },
    {
        "content": "<p>let me get some documentation</p>",
        "id": 201781637,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592945687
    },
    {
        "content": "<p>there are some <a href=\"https://rustc-dev-guide.rust-lang.org/early-late-bound.html?highlight=late-bound#early-and-late-bound-variables\">docs in the rustc-dev-guide</a> (thanks <span class=\"user-mention\" data-user-id=\"198054\">@mark-i-m</span>)</p>",
        "id": 201781648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592945691
    },
    {
        "content": "<p>beat me</p>",
        "id": 201781738,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592945736
    },
    {
        "content": "<p>Yeah i should probably start reading that part of the guide before going further. I've actually only read the part I needed to contribute</p>",
        "id": 201781764,
        "sender_full_name": "marmeladema",
        "timestamp": 1592945745
    },
    {
        "content": "<p>no problem :)</p>",
        "id": 201781892,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592945791
    },
    {
        "content": "<p>I also have branch with some changes for this</p>",
        "id": 201782079,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592945880
    },
    {
        "content": "<p>So i've read <a href=\"https://rustc-dev-guide.rust-lang.org/early-late-bound.html\">https://rustc-dev-guide.rust-lang.org/early-late-bound.html</a> but it doesn't really explain why we _need_ late bounds. Why can't everything be modeled by early bounds?</p>",
        "id": 201788685,
        "sender_full_name": "marmeladema",
        "timestamp": 1592949216
    },
    {
        "content": "<p>Yeah, that's a good question</p>",
        "id": 201788962,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592949384
    },
    {
        "content": "<p>And one I don't really have an answer for</p>",
        "id": 201788973,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592949393
    },
    {
        "content": "<p>Indeed, this is something that we've talked about changing</p>",
        "id": 201788993,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592949407
    },
    {
        "content": "<p>(as part of the shared type library)</p>",
        "id": 201789007,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592949416
    },
    {
        "content": "<p>I don't even want to change anything at this point but rather understand what problems late bounds are solving.</p>",
        "id": 201789038,
        "sender_full_name": "marmeladema",
        "timestamp": 1592949446
    },
    {
        "content": "<p>Problems cannot be solved with early bounds obviously</p>",
        "id": 201789079,
        "sender_full_name": "marmeladema",
        "timestamp": 1592949475
    },
    {
        "content": "<p>so, I think it's a bit of the opposite</p>",
        "id": 201789866,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592949893
    },
    {
        "content": "<p>the <em>early bounds</em> solve a problem</p>",
        "id": 201789877,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592949901
    },
    {
        "content": "<p>at least, the theoretical problem</p>",
        "id": 201789899,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592949907
    },
    {
        "content": "<p>of performance</p>",
        "id": 201789904,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592949911
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Chalk 0.14 upgrade PR: <a href=\"https://github.com/rust-lang/rust/issues/73681\">#73681</a></p>",
        "id": 201811285,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592974063
    },
    {
        "content": "<p>So with the subtype changes locally (and a couple other smaller things), <code>println!(\"hello\")</code> actually compiles :)</p>",
        "id": 202691567,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593698285
    },
    {
        "content": "<p>nice!</p>",
        "id": 202704692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593704108
    }
]