[
    {
        "content": "<p>So the universes PR changed behavior around fn pointers, as described in <a href=\"https://github.com/rust-lang/rust/issues/46989\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46989\">#46989</a> -- <span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> or perhaps <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> / <span class=\"user-mention\" data-user-id=\"117350\">@Sunjay Varma</span>, I was wondering if one of you might like to investigate a bit (I can help but I'm kind of busy today). I'd like to understand <em>why</em> this behavior changed.</p>",
        "id": 158443412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550067661
    },
    {
        "content": "<p>As I wrote in that issue, I'm also contemplating if we can \"partially roll back\" the universe changes temporarily to give us more room to investigate the changed behaviors.</p>",
        "id": 158443442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550067690
    },
    {
        "content": "<p>I plan to start looking into this issue either this afternoon or tomorrow</p>",
        "id": 158478652,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550093255
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> cool, feel free to drop notes here as you progress</p>",
        "id": 158479553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550093999
    },
    {
        "content": "<p>will do!</p>",
        "id": 158479603,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550094009
    },
    {
        "content": "<p>I had opened up and poked at the examples this morning.<br>\nnoticing now that the two examples in the OP still don't compile, but with a different error message now (<a href=\"https://play.rust-lang.org/?version=beta&amp;mode=debug&amp;edition=2015&amp;gist=6314388496351178c9d069451ccd9642\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=beta&amp;mode=debug&amp;edition=2015&amp;gist=6314388496351178c9d069451ccd9642\">playground</a>):</p>\n<div class=\"codehilite\"><pre><span></span>4 |     Bar(fn(&amp;i32)), // Fails\n  |         ^^^^^^^^ one type is more general than the other\n  |\n  = note: expected type `for&lt;&#39;r&gt; fn(&amp;&#39;r i32)`\n             found type `fn(&amp;i32)`\n</pre></div>\n\n\n<p>..so this at least feels like inconsistent behavior between this example and <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span>'s <a href=\"https://github.com/rust-lang/rust/issues/46989#issuecomment-353805481\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46989#issuecomment-353805481\">example</a></p>",
        "id": 158481561,
        "sender_full_name": "tmandry",
        "timestamp": 1550095581
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> feel free to take it from here, just noting that</p>",
        "id": 158482755,
        "sender_full_name": "tmandry",
        "timestamp": 1550096537
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> we could also try to tackle it together! from the looks of it though i won't be able to start until tomorrow</p>",
        "id": 158483039,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550096802
    },
    {
        "content": "<p>okay, well I'm curious enough about it that I want to dig in to different aspects of the issue that I don't understand, but I may not have time to do a full analysis</p>",
        "id": 158483293,
        "sender_full_name": "tmandry",
        "timestamp": 1550097015
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> FYI the playground link is missing the \"Share\" gist id</p>",
        "id": 158483414,
        "sender_full_name": "lqd",
        "timestamp": 1550097154
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> d'oh, fixed, thanks</p>",
        "id": 158483452,
        "sender_full_name": "tmandry",
        "timestamp": 1550097209
    },
    {
        "content": "<p>it reminds me of <a href=\"https://github.com/rust-lang/rust/issues/57875\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57875\">#57875</a>, because of the Fn's error message</p>",
        "id": 158483586,
        "sender_full_name": "lqd",
        "timestamp": 1550097350
    },
    {
        "content": "<p>(and if so, maybe this'll help: my previous investigation on this issue lead to the match in <a href=\"https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src/librustc/infer/error_reporting/nice_region_error/placeholder_error.rs#L17\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src/librustc/infer/error_reporting/nice_region_error/placeholder_error.rs#L17\">try_report_placeholder_conflict</a> it was a <code>SubSupConflict</code> like half of these match arms are about, but with <code>PolyTraitRefs</code> instead of <code>TraitRefs</code> which were causing similar errors in <a href=\"https://github.com/rust-lang/rust/issues/57362\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57362\">#57362</a> â€” but of course it's different here, and only part of the story since the universes PR landed; not very related to <em>why</em> the universes PR changed previous fn pointer behaviour)</p>",
        "id": 158484085,
        "sender_full_name": "lqd",
        "timestamp": 1550097750
    },
    {
        "content": "<p>Interesting example that works on stable but regresses on beta: <a href=\"https://play.rust-lang.org/?version=beta&amp;mode=debug&amp;edition=2015&amp;gist=422c6f97f0066806ef0783a776514cf1\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=beta&amp;mode=debug&amp;edition=2015&amp;gist=422c6f97f0066806ef0783a776514cf1\">playground</a></p>",
        "id": 158485453,
        "sender_full_name": "tmandry",
        "timestamp": 1550099040
    },
    {
        "content": "<p>This is in fact exactly the case that was discussed as part of <a href=\"https://github.com/rust-lang/rust/issues/44224\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/44224\">#44224 regression in method dispatch</a>, where the decision was made to go with the current behavior of stable</p>",
        "id": 158485518,
        "sender_full_name": "tmandry",
        "timestamp": 1550099088
    },
    {
        "content": "<p>@SimonSapin notes in tracking issue for <a href=\"https://github.com/rust-lang/rust/issues/56105\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56105\">#56105 universe transition</a> that this changes back to the \"old\" behavior, before <a href=\"https://github.com/rust-lang/rust/issues/44224\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/44224\">#44224</a>, re-breaking some code in servo</p>",
        "id": 158485726,
        "sender_full_name": "tmandry",
        "timestamp": 1550099312
    },
    {
        "content": "<p>Okay, I left a comment on the issue summarizing this.</p>",
        "id": 158486077,
        "sender_full_name": "tmandry",
        "timestamp": 1550099689
    },
    {
        "content": "<p>I'm planning to stay in the realm of \"what is the right behavior\" rather than \"why does it behave this way\" for now, btw :)</p>",
        "id": 158487302,
        "sender_full_name": "tmandry",
        "timestamp": 1550101125
    },
    {
        "content": "<p>I think at this point it's pretty clearly a regression</p>",
        "id": 158487392,
        "sender_full_name": "tmandry",
        "timestamp": 1550101380
    },
    {
        "content": "<blockquote>\n<p>Interesting example that works on stable but regresses on beta: <a href=\"https://play.rust-lang.org/?version=beta&amp;mode=debug&amp;edition=2015&amp;gist=422c6f97f0066806ef0783a776514cf1\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=beta&amp;mode=debug&amp;edition=2015&amp;gist=422c6f97f0066806ef0783a776514cf1\">playground</a></p>\n</blockquote>\n<p>that was expected breakage, <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span></p>",
        "id": 158547637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550165687
    },
    {
        "content": "<blockquote>\n<p>@SimonSapin notes in tracking issue for <a href=\"https://github.com/rust-lang/rust/issues/56105\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56105\">#56105 universe transition</a> that this changes back to the \"old\" behavior, before <a href=\"https://github.com/rust-lang/rust/issues/44224\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/44224\">#44224</a>, re-breaking some code in servo</p>\n</blockquote>\n<p>and this too was expected</p>",
        "id": 158547658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550165706
    },
    {
        "content": "<p>now, whether that's...ok is a different question</p>",
        "id": 158547665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550165712
    },
    {
        "content": "<p>I should have reached out more aggressively to Simon Sapin, since I knew that was likely to happen</p>",
        "id": 158547685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550165737
    },
    {
        "content": "<p>But indeed breaking that code was part of the <em>point</em> of the PR</p>",
        "id": 158547751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550165766
    },
    {
        "content": "<p>One thing I'm wondering now, though, is whether to do a temporary (or maybe not) change to restore older behavior. I can certainly imagine various changes one could use to do that.</p>",
        "id": 158547784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550165797
    },
    {
        "content": "<p>I think literally backing out the PR would be hard</p>",
        "id": 158547790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550165806
    },
    {
        "content": "<p>Okay, glad that's clear. It still seems like the behavior isn't entirely self-consistent (see <a href=\"https://play.rust-lang.org/?version=beta&amp;mode=debug&amp;edition=2015&amp;gist=0422ada8bb5647d8b9ca13e67b0be2f8\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=beta&amp;mode=debug&amp;edition=2015&amp;gist=0422ada8bb5647d8b9ca13e67b0be2f8\">this playground</a>)</p>",
        "id": 158548354,
        "sender_full_name": "tmandry",
        "timestamp": 1550166224
    },
    {
        "content": "<p>Yes, that is basically the bug I wanted to be investing in <a href=\"https://github.com/rust-lang/rust/issues/57639\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57639\">#57639</a>, right?</p>",
        "id": 158548436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550166269
    },
    {
        "content": "<p>I'm not sure =)</p>",
        "id": 158548691,
        "sender_full_name": "tmandry",
        "timestamp": 1550166458
    },
    {
        "content": "<p>As in I haven't actually looked into that issue</p>",
        "id": 158548761,
        "sender_full_name": "tmandry",
        "timestamp": 1550166486
    },
    {
        "content": "<p>So, I thought that this was maybe going to be fixed by <a href=\"https://github.com/rust-lang/rust/pull/58056\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/58056\">https://github.com/rust-lang/rust/pull/58056</a>, but I just did a build and I might be wrong</p>",
        "id": 158647465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550263198
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span>)</p>",
        "id": 158647505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550263203
    },
    {
        "content": "<p>let me dump out some debug info and see what I see</p>",
        "id": 158647517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550263209
    },
    {
        "content": "<p>I'm going to live-dump some notes here, in case anyone cares</p>",
        "id": 158648985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550264413
    },
    {
        "content": "<p>so I'm going through the logs for this example</p>",
        "id": 158648989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550264421
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">assert_foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_foo</span>::<span class=\"o\">&lt;</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 158649032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550264469
    },
    {
        "content": "<p>I find these lines:</p>\n<div class=\"codehilite\"><pre><span></span>DEBUG 2019-02-15T20:44:53Z: rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(&lt;for&lt;&#39;r&gt; fn(&amp;ReLateBound(DebruijnInde\\\nx(0), BrNamed(crate0:DefIndex(0:0), &#39;r)) i32) as Foo&gt;)),cause=ObligationCause { span: /home/nmatsakis/tmp/issue-46989.rs:1:1: 1:1, body_id: HirId { owner: DefIndex(0:0), local_id: 0 }, code: MiscObligation },param_env=ParamEnv { caller_bounds: [], reveal: UserFacing, def_id: None },depth=0)): [ImplCandidate(DefId(0/0:4 ~ issue_46989[317d]::{{impl}}[0]))]\nDEBUG 2019-02-15T20:44:53Z: rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(&lt;for&lt;&#39;r&gt; fn(&amp;ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), &#39;r)) i32) as Foo&gt;)))=Ok(Some(ImplCandidate(DefId(0/0:4 ~ issue_46989[317d]::{{impl}}[0]))))\n</pre></div>\n\n\n<p>which seem to be the point where we are doing the trait matching. We select the impl candidate. We go to the confirmation step, where we equate the types:</p>\n<div class=\"codehilite\"><pre><span></span> rustc::infer::at: eq(&lt;for&lt;&#39;r&gt; fn(&amp;ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), &#39;r)) i32) as Foo&gt; == &lt;fn(_#0t) as Foo&gt;)\n</pre></div>\n\n\n<p>this <em>ought</em> to fail, but I guess it does't... let me trace <em>that</em> out now</p>",
        "id": 158649152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550264593
    },
    {
        "content": "<p>we come to the point where we equate the types:</p>\n<div class=\"codehilite\"><pre><span></span>rustc::infer::equate: Equate.tys(for&lt;&#39;r&gt; fn(&amp;ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), &#39;r)) i32), fn(_#0t))\n</pre></div>",
        "id": 158649275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550264680
    },
    {
        "content": "<p>to equate fn types, we presently first check that <code>T1 &lt;: T2</code> and <code>T2 &lt;: T1</code></p>",
        "id": 158649427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550264770
    },
    {
        "content": "<p>ha,ok, I think I see what is happening</p>",
        "id": 158649644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550264981
    },
    {
        "content": "<p>actually <span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> this is an interesting example, if I'm not mistaken, and comes back to the question raised by <span class=\"user-mention\" data-user-id=\"117350\">@Sunjay Varma</span>  in our call. Let me try to walk it through. We start out with</p>\n<div class=\"codehilite\"><pre><span></span>for&lt;&#39;a&gt; fn(&amp;&#39;a u32) == fn(?0)\n</pre></div>\n\n\n<p>where <code>?0</code> is a type inference variable. The way our code handles equating two fn types is to convert that into a pair of constraints:</p>\n<div class=\"codehilite\"><pre><span></span>for&lt;&#39;a&gt; fn(&amp;&#39;a u32) &lt;: fn(?0)\nfn(?0) &lt;: for&lt;&#39;b&gt; fn(&amp;&#39;b u32) // `&#39;a` alpha renamed to `&#39;b` for clarity\n</pre></div>\n\n\n<p>when we process the first one, we instantiate the <code>'a</code> with a fresh inference variable (as it appears on the subtype), so we get</p>\n<div class=\"codehilite\"><pre><span></span>fn(&amp;&#39;?1 u32) &lt;: fn(?0) // which is true if...\n?0 &lt;: &amp;&#39;?1 u32\n</pre></div>\n\n\n<p>we then instantiate <code>?0</code> with a value of <code>&amp;'?2 u32</code> and relate those two types:</p>\n<div class=\"codehilite\"><pre><span></span>&amp;&#39;?2 u32 &lt;: &amp;&#39;?1 u32 // which is true if...\n&#39;?2: &#39;?1 // resulting in this region constraint\n</pre></div>\n\n\n<p>Next, we go to process the other direction. But now we know what <code>?0</code> is, so we can expand that:</p>\n<div class=\"codehilite\"><pre><span></span>fn(&amp;&#39;?2 u32) &lt;: for&lt;&#39;b&gt; fn(&amp;&#39;b u32)\n</pre></div>\n\n\n<p>Here, we replace <code>'b</code> with a placeholder:</p>\n<div class=\"codehilite\"><pre><span></span>fn(&amp;&#39;?2 u32) &lt;: fn(&amp;&#39;!b u32)\n&amp;&#39;!b u32 &lt;: &amp;&#39;?2 u32\n&#39;!b: &#39;?2\n</pre></div>\n\n\n<p>Thus we wind up -- ultimately -- with the following region obligations:</p>\n<div class=\"codehilite\"><pre><span></span>&#39;?2: &#39;?1\n&#39;!b: &#39;?2\n</pre></div>\n\n\n<p>Or, in the actual debug output:</p>\n<div class=\"codehilite\"><pre><span></span>DEBUG 2019-02-15T20:44:53Z: rustc::infer::lexical_region_resolve: ----() Start constraint listing (context=DefId(0/0:6 ~ issue_46989[317d]::main[0])) ()----\nDEBUG 2019-02-15T20:44:53Z: rustc::infer::lexical_region_resolve: Constraint 0 =&gt; VarSubVar(&#39;_#0r, &#39;_#1r)\nDEBUG 2019-02-15T20:44:53Z: rustc::infer::lexical_region_resolve: Constraint 1 =&gt; VarSubReg(&#39;_#1r, RePlaceholder(Placeholder { universe: U3, name: BrAnon(0) }))\nDEBUG 2019-02-15T20:44:53Z: rustc::infer::lexical_region_resolve: ----() End constraint listing (context=DefId(0/0:6 ~ issue_46989[317d]::main[0])) ()---\n</pre></div>\n\n\n<p>This, as it happens, is eminently solveable == <code>'0</code> and <code>'1</code> can be inferred to empty regions.</p>",
        "id": 158650559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550265645
    },
    {
        "content": "<p>Now, why is <em>that</em> allowed.. the problem is that these \"temporary\" regions we create during the subtyping never get related to any actual <em>point</em> in the program</p>",
        "id": 158650618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550265699
    },
    {
        "content": "<p>But yeah basically this comes down to</p>\n<div class=\"codehilite\"><pre><span></span>for&lt;&#39;a&gt; fn(&amp;&#39;a u32) == fn(&amp;&#39;empty u32)\n</pre></div>",
        "id": 158650807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550265856
    },
    {
        "content": "<p>and hence we infer <code>A</code> to be <code>&amp;'empty u32</code></p>",
        "id": 158650833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550265891
    },
    {
        "content": "<p>which seems...not obviously wrong, but also like it maybe interacts poorly with other things</p>",
        "id": 158650859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550265928
    },
    {
        "content": "<p>I'm getting nervous if there is some interaction with projection</p>",
        "id": 158650866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550265939
    },
    {
        "content": "<p>but I guess that's not really true, in this particular case at least, as <code>'empty</code> is really the only option</p>",
        "id": 158651183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550266242
    },
    {
        "content": "<p>but this comes back <span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> to <a href=\"#narrow/stream/144729-t-compiler.2Fwg-traits/topic/universes.20and.20.2357639/near/158647914\" title=\"#narrow/stream/144729-t-compiler.2Fwg-traits/topic/universes.20and.20.2357639/near/158647914\">your question here</a>. i.e., I was wrong to limit this to 'lifetime parameters', really we would want to generalize to any parameter.</p>",
        "id": 158651232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550266314
    },
    {
        "content": "<p>This might even be necessary for soundness, if we were to generalize. i.e., if you had some setup such that you could infer to a range of other values?</p>",
        "id": 158651327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550266388
    },
    {
        "content": "<p>I'm getting more and more convinced that we should revert this PR and discuss it more</p>",
        "id": 158651355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550266410
    },
    {
        "content": "<p>hm, ok -- i don't totally follow the last run of comments, but it does seem good to assess reverting</p>",
        "id": 158654473,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550268889
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so i've been trying to see what kinds of problems i can create around the <code>'empty</code> concept. in particular, i'm trying to find a way to force the compiler to infer that some lifetime parameter must be <code>'empty</code> and then use that for nefarious purposes</p>",
        "id": 158930792,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550619877
    },
    {
        "content": "<p>the closest I've come is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">CastTo</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">cast</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">B</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">CastTo</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"na\">&#39;a</span>: <span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">cast</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;z</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;z</span><span class=\"w\"> </span><span class=\"nb\">String</span>: <span class=\"nc\">CastTo</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">cast</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">empty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">&quot;hello&quot;</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">empty</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 158930797,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550619887
    },
    {
        "content": "<p>that doesn't compile in stable <em>or</em> nightly, but the error message is different in the two cases (probably not for any deep reasons)</p>",
        "id": 158930816,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550619907
    },
    {
        "content": "<p>but anyway, perhaps you can see what i was trying to do here, namely to get rustc to infer that <code>'b</code> must in fact be <code>'empty</code></p>",
        "id": 158930832,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550619928
    },
    {
        "content": "<p>then use that to sidestep region checking</p>",
        "id": 158930846,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550619941
    },
    {
        "content": "<p>even if i could get the compiler to make that inference, though, it's not clear to me whether it really would sidestep region checking</p>",
        "id": 158930936,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550620017
    },
    {
        "content": "<p>i'm not sure exactly how <code>'empty</code> is treated</p>",
        "id": 158930951,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550620028
    },
    {
        "content": "<blockquote>\n<p>that doesn't compile in stable <em>or</em> nightly, but the error message is different in the two cases (probably not for any deep reasons)</p>\n</blockquote>\n<p>yeah those errors are basically equivalent</p>",
        "id": 158930965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550620054
    },
    {
        "content": "<p>one is the new version of the other, I think</p>",
        "id": 158930970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550620060
    },
    {
        "content": "<p>I'm not sure I 100% see what you are trying to do</p>",
        "id": 158931028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550620095
    },
    {
        "content": "<p>do you know, if one was ever to get a value of type <code>&amp;'empty T</code>, whether the region checker would instantly complain about it escaping?</p>",
        "id": 158931032,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550620101
    },
    {
        "content": "<p>well, it's not quite like that, it's more like</p>",
        "id": 158931048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550620126
    },
    {
        "content": "<p>well so the only choice of <code>'b</code> for <code>foo</code> is <code>'empty</code></p>",
        "id": 158931050,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550620127
    },
    {
        "content": "<p>the region checker <em>ought</em> to be adding constraints</p>",
        "id": 158931055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550620130
    },
    {
        "content": "<p>such that every value that gets used and/or is stored into a local variable etc</p>",
        "id": 158931060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550620138
    },
    {
        "content": "<p>so i'm trying to make a function which will give you back a <code>&amp;'b String</code>, where <code>'b</code> is known to the compiler to be <code>'empty</code></p>",
        "id": 158931076,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550620147
    },
    {
        "content": "<p>is required to outlive the expressions/scopes/whatever where it appears</p>",
        "id": 158931079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550620147
    },
    {
        "content": "<p>right ok</p>",
        "id": 158931086,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550620157
    },
    {
        "content": "<p>so if you somehow got 'empty it should grow to the scope</p>",
        "id": 158931093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550620166
    },
    {
        "content": "<p>so in some sense there's a safeguard there already</p>",
        "id": 158931096,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550620172
    },
    {
        "content": "<p>which in turn would (presumably) cause an error</p>",
        "id": 158931099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550620174
    },
    {
        "content": "<p>right</p>",
        "id": 158931100,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550620177
    },
    {
        "content": "<blockquote>\n<p>so in some sense there's a safeguard there already</p>\n</blockquote>\n<p>yeah --  and there have definitely been bugs with missing constraints in the past, so there could be more, though those usually show up as bugs in other ways too</p>",
        "id": 158931178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550620212
    },
    {
        "content": "<p>right</p>",
        "id": 158931184,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550620219
    },
    {
        "content": "<p>the more interesting question I think is whether you can prove something in a generic context</p>",
        "id": 158931187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550620226
    },
    {
        "content": "<p>TLDR there's not a fundamental reason to fear <code>'empty</code> being a thing</p>",
        "id": 158931194,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550620235
    },
    {
        "content": "<p>that winds up being unsound post substitution</p>",
        "id": 158931196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550620238
    },
    {
        "content": "<p>and in fact we could expose it in the surface syntax without issue, given what you're saying</p>",
        "id": 158931198,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550620246
    },
    {
        "content": "<p>yeah ok</p>",
        "id": 158931206,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550620260
    },
    {
        "content": "<p>I .. think that is correct, it would just be an error just about everywhere it appeared</p>",
        "id": 158931208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550620263
    },
    {
        "content": "<p>gotta run for now, will keep mulling though</p>",
        "id": 158931217,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550620265
    },
    {
        "content": "<p>at least I would say, that had better be true :)</p>",
        "id": 158931228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550620282
    },
    {
        "content": "<p>Somewhat amusing: As part of the universe transition, I added these tests:</p>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/hrtb/hrtb-exists-forall-trait-covariant.rs#L19-L34\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/hrtb/hrtb-exists-forall-trait-covariant.rs#L19-L34\">hrtb-exists-forall-trait-covariant</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/hrtb/hrtb-exists-forall-trait-contravariant.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/hrtb/hrtb-exists-forall-trait-contravariant.rs\">hrtb-exists-forall-trait-contravariant</a></li>\n</ul>\n<p>in which I deduced all of the above (e.g., the <code>fn(&amp;u8) = fn(&amp;'empty u8)</code> and so on) but I apparently totally forgot about that.</p>",
        "id": 158969392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550664979
    }
]