[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> pulling this into a separate thread, but I looked at many-assoc-items from your PR locally.</p>\n<div class=\"codehilite\"><pre><span></span><code>11,747,008 (103.4%)  ???:rustc_mir::transform::dump_mir::on_mir_pass\n 2,377,384 (20.93%)  /rustc/hash//library/core/src/slice/iter/macros.rs:core::slice::memchr::memrchr\n-1,238,680 (-10.9%)  /rustc/hash//library/core/src/slice/memchr.rs:core::slice::memchr::memrchr\n   839,072 ( 7.39%)  ???:rustc_mir::transform::run_passes::{{closure}}::{{closure}}\n  -451,629 (-3.98%)  /rustc/hash/obj/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/build/tikv-jemalloc-sys-fa3b929ff4c49224/out/build/src/arena.c:_rjem_je_arena_tcache_fill_s&gt;\n  -349,615 (-3.08%)  ???:_ZN9hashbrown3raw21RawTable$LT$T$C$A$GT$4find17ha76a286c4e9bd7cfE.llvm\n  -249,700 (-2.20%)  ???:_ZN21rustc_data_structures17obligation_forest25ObligationForest$LT$O$GT$22register_obligation_at17hc24f724c2b1f2d0dE.llvm\n  -239,744 (-2.11%)  /rustc/hash//library/core/src/slice/index.rs:core::slice::memchr::memrchr\n  -228,320 (-2.01%)  ???:hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert\n   159,954 ( 1.41%)  ???:indexmap::map::IndexMap&lt;K,V,S&gt;::entry\n  -159,828 (-1.41%)  /rustc/hash//library/core/src/num/uint_macros.rs:core::slice::memchr::memrchr\n</code></pre></div>",
        "id": 240826985,
        "sender_full_name": "simulacrum",
        "timestamp": 1622463904
    },
    {
        "content": "<p>that's a diff, so percentages are a bit, uh, unrealistic</p>",
        "id": 240827023,
        "sender_full_name": "simulacrum",
        "timestamp": 1622463918
    },
    {
        "content": "<p>I'll look into it some more after breakfast</p>",
        "id": 240827930,
        "sender_full_name": "simulacrum",
        "timestamp": 1622464436
    },
    {
        "content": "<p>local build diffs (vs. those from CI) suggest we're hashing more often, particularly str</p>",
        "id": 240835620,
        "sender_full_name": "simulacrum",
        "timestamp": 1622468875
    },
    {
        "content": "<p>I suspect the diff between the 'actual' rust builds is either a bit of a lie or at least misleading (in terms of inlining etc)</p>",
        "id": 240838616,
        "sender_full_name": "simulacrum",
        "timestamp": 1622470593
    },
    {
        "content": "<p>the local build diff to me suggests the difference might come from <a href=\"https://github.com/rust-lang/rust/commit/4fc737828e7a2f978c30875c76c93b2f0e5d6562#diff-a762eadbc5da5c5fce9dff3c4a11e4ad720e6580767cc097d49e64264858aa61R311\">https://github.com/rust-lang/rust/commit/4fc737828e7a2f978c30875c76c93b2f0e5d6562#diff-a762eadbc5da5c5fce9dff3c4a11e4ad720e6580767cc097d49e64264858aa61R311</a>, which is causing additional traffic on that hashmap</p>",
        "id": 240838667,
        "sender_full_name": "simulacrum",
        "timestamp": 1622470627
    },
    {
        "content": "<p>I might take a stab at rewriting it to avoid hashing compile-time known strings, that really shouldn't be necessary</p>",
        "id": 240838693,
        "sender_full_name": "simulacrum",
        "timestamp": 1622470652
    },
    {
        "content": "<p>but if I'm right that this is the cause of the slowdown, than it likely doesn't need to block your PR</p>",
        "id": 240838853,
        "sender_full_name": "simulacrum",
        "timestamp": 1622470740
    },
    {
        "content": "<p>Thanks for taking a look, Mark!</p>",
        "id": 240853775,
        "sender_full_name": "scottmcm",
        "timestamp": 1622480132
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/.2385828/near/240838667\">said</a>:</p>\n<blockquote>\n<p>the local build diff to me suggests the difference might come from <a href=\"https://github.com/rust-lang/rust/commit/4fc737828e7a2f978c30875c76c93b2f0e5d6562#diff-a762eadbc5da5c5fce9dff3c4a11e4ad720e6580767cc097d49e64264858aa61R311\">https://github.com/rust-lang/rust/commit/4fc737828e7a2f978c30875c76c93b2f0e5d6562#diff-a762eadbc5da5c5fce9dff3c4a11e4ad720e6580767cc097d49e64264858aa61R311</a>, which is causing additional traffic on that hashmap</p>\n</blockquote>\n<p>I'm not sure I follow this one.  That's only in codegen, so doesn't seem like something that should impact check builds.  To test that out, I put an <code>if 1==1 { bug!() }</code> as the code for generating the intrinsic.  But it never got hit even in</p>\n<div class=\"codehilite\"><pre><span></span><code>collector\\benchmarks\\many-assoc-items&gt; cargo +stage1 build --release\n</code></pre></div>\n<p>(and I confirmed that adding one of the functions from the codegen tests to the <a href=\"http://lib.rs\">lib.rs</a> does trigger the ICE.)</p>\n<p>So maybe it's just the extra traits, making the intrinsic method lookup slower somehow?</p>\n<p>I guess I'll have to figure out how to run a profiler on Windows <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 240877672,
        "sender_full_name": "scottmcm",
        "timestamp": 1622501754
    },
    {
        "content": "<p>Well, the compiler itself as profiled on perf.rlo is built with your patch, so even check builds which internally have some array comparisons could cause slowdown</p>",
        "id": 240879067,
        "sender_full_name": "simulacrum",
        "timestamp": 1622503499
    },
    {
        "content": "<p>But I agree that my local measurements, other than changes in std codegen, wouldn't show that; the profile differences suggest either higher than expected (to me, anyway) noise levels.. or I guess something like it. I might try and repeat what I measured with an opt build, or a different benchmark, or a stage 2 build. I don't think valgrind supports windows but I'm not sure.</p>",
        "id": 240879180,
        "sender_full_name": "simulacrum",
        "timestamp": 1622503649
    },
    {
        "content": "<p>It should work in a VM though FWIW</p>",
        "id": 240879189,
        "sender_full_name": "simulacrum",
        "timestamp": 1622503669
    },
    {
        "content": "<p>it does work under WSL if I remember correctly (while perf doesn’t/didn’t) but there are profilers that work natively of course: vtune, visual studio’s, tracy and so on</p>",
        "id": 240895420,
        "sender_full_name": "lqd",
        "timestamp": 1622524022
    },
    {
        "content": "<p>Interesting -- I tweaked the threshold logic to <code>memcpy</code> more often and <a href=\"https://perf.rust-lang.org/compare.html?start=835150e70288535bc57bb624792229b9dc94991d&amp;end=c85741c0376f23de21373477c28cd8903d7874b9\">now</a> <code>many-assoc-items</code> is negative for all three.</p>",
        "id": 241462920,
        "sender_full_name": "scottmcm",
        "timestamp": 1622758274
    },
    {
        "content": "<p>I wonder if measuring the instructions a memcmp takes with a recent glibc and the instructions the other lowering(s) take would be a good way to establish the tradeoff boundaries and pick the right heuristics. Have you tried doing that? Ideally we'd also look at the cycles those instructions take, perhaps with something like llvm-mca, but that's a little harder.</p>",
        "id": 241464763,
        "sender_full_name": "simulacrum",
        "timestamp": 1622759445
    },
    {
        "content": "<p>erikdesjardins <a href=\"https://github.com/rust-lang/rust/pull/85828#discussion_r643630609\">made</a> a really nice mca demo &lt;<a href=\"https://godbolt.org/z/3PGbcsKEr\">https://godbolt.org/z/3PGbcsKEr</a>&gt; showing that the load+load+icmp way is fewer instructions but also lower RThroughput.</p>\n<p>The thing that's hard is that this is mostly about secondary effects from removing <code>alloca</code>s.  If it's going through memory anyway, then the two approaches are the same: <a href=\"https://godbolt.org/z/e6bYK9qne\">https://godbolt.org/z/e6bYK9qne</a></p>\n<p>But <code>PartialEq::eq</code>, of course, takes <code>&amp;</code>s.  So whether this helps is all about whether it was originally by-immediate further up the chain, like <a href=\"https://github.com/rust-lang/rust/pull/85655/files#r642211114\">https://github.com/rust-lang/rust/pull/85655/files#r642211114</a></p>",
        "id": 241465997,
        "sender_full_name": "scottmcm",
        "timestamp": 1622760331
    },
    {
        "content": "<p>I'm going to learn real profiling on the weekend to get better answers :)</p>",
        "id": 241466072,
        "sender_full_name": "scottmcm",
        "timestamp": 1622760364
    },
    {
        "content": "<p>(Oh, but to my original point, the new threshold hits the <code>get_instrinsic(\"memcmpy\")</code> path <em>more</em>, so I don't think that hashmap is the root of a perf issue.  Though certainly having it store symbols instead of <code>&amp;str</code>s would still be a good change.)</p>",
        "id": 241466176,
        "sender_full_name": "scottmcm",
        "timestamp": 1622760449
    }
]