[
    {
        "content": "<p><a href=\"https://blog.mozilla.org/nnethercote/2020/08/05/how-to-speed-up-the-rust-compiler-some-more-in-2020/\">https://blog.mozilla.org/nnethercote/2020/08/05/how-to-speed-up-the-rust-compiler-some-more-in-2020/</a></p>",
        "id": 205983064,
        "sender_full_name": "njn",
        "timestamp": 1596595783
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> is it you who writes these posts? Fwiw I love them. I always read them til the end, even tho I don't fully understand all the topics x3</p>",
        "id": 205985114,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1596598063
    },
    {
        "content": "<p>yep</p>",
        "id": 205986897,
        "sender_full_name": "njn",
        "timestamp": 1596600771
    },
    {
        "content": "<blockquote>\n<p>Joshua Nelson added support for benchmarking rustdoc. This is good because rustdoc performance has received little attention in the past.</p>\n</blockquote>\n<p>IDK why but that second sentence cracks me up lmao</p>",
        "id": 205988207,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596602952
    },
    {
        "content": "<p>\"things were bad and everyone knew they were bad\"</p>",
        "id": 205988216,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596602969
    },
    {
        "content": "<p>Thanks for the mention :)</p>",
        "id": 205988224,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596602991
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> I see, thank you for making them!</p>",
        "id": 205989848,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1596605616
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> looking at the llvm-lines thing, do we pass <code>-Z symbol-mangling-version=v0</code> to avoid instances of the same generic function coalescing? or do we want instances to coalesce?</p>",
        "id": 206017723,
        "sender_full_name": "eddyb",
        "timestamp": 1596631828
    },
    {
        "content": "<p>not currently afaik</p>",
        "id": 206017747,
        "sender_full_name": "simulacrum",
        "timestamp": 1596631845
    },
    {
        "content": "<p>it would probably be useful to support both</p>",
        "id": 206017772,
        "sender_full_name": "simulacrum",
        "timestamp": 1596631864
    },
    {
        "content": "<p>probably requires changes to <code>cargo-llvm-lines</code> to count both, which might be tricky (I guess it could do a minimal amount of parsing on syntax? but you can't tell apart impls except by the impl disambiguator path in v0 mangling which is never shown in demangling, hmpf)</p>",
        "id": 206017992,
        "sender_full_name": "eddyb",
        "timestamp": 1596632013
    },
    {
        "content": "<p>this is where <span class=\"user-mention\" data-user-id=\"124287\">@mw</span>'s AST-like implementation of the mangling format would be more useful than the <code>rustc-demangle</code> implementation</p>",
        "id": 206018082,
        "sender_full_name": "eddyb",
        "timestamp": 1596632063
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> It invokes <code>cargo rustc</code>with <a href=\"https://github.com/dtolnay/cargo-llvm-lines/blob/master/src/main.rs#L338-L354\">these options</a>. No <code>symbol-mangling-version</code>.</p>",
        "id": 206090382,
        "sender_full_name": "njn",
        "timestamp": 1596670491
    },
    {
        "content": "<p>As for what we want, presumably we want the output to reflect a normal build</p>",
        "id": 206090393,
        "sender_full_name": "njn",
        "timestamp": 1596670507
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> the difference is that you can tell instances apart with v0 because the values for the generic parameters are mangled instead of just hashed</p>",
        "id": 206102009,
        "sender_full_name": "eddyb",
        "timestamp": 1596685556
    },
    {
        "content": "<p>it wouldn't change the amount of LLVM IR or anything like that</p>",
        "id": 206102050,
        "sender_full_name": "eddyb",
        "timestamp": 1596685576
    },
    {
        "content": "<p>@eddyb: so all the instantiations of <code>Vec::push</code>, for example, would show up in the list separately?</p>",
        "id": 206102786,
        "sender_full_name": "njn",
        "timestamp": 1596686743
    },
    {
        "content": "<p>That could be useful. Sometimes I see stuff like there are 100 instantiations of <code>Result::map_err</code> and I want to know \"where are all these coming from?\"</p>",
        "id": 206102839,
        "sender_full_name": "njn",
        "timestamp": 1596686795
    },
    {
        "content": "<p>yupp. the only tricky part if we did that would be if we wanted to see the same thing as today, but I'm not sure which is more useful overall</p>",
        "id": 206104185,
        "sender_full_name": "eddyb",
        "timestamp": 1596688754
    },
    {
        "content": "<p>-Z only works with Nightly, which is a clear limitation</p>",
        "id": 206109636,
        "sender_full_name": "njn",
        "timestamp": 1596696584
    },
    {
        "content": "<p>I was just looking at the output, very interesting. You really need both. The current output gives a good overview, and then you can use the <code>symbol-mangling-version</code> to dig into things.</p>",
        "id": 206113601,
        "sender_full_name": "njn",
        "timestamp": 1596700854
    },
    {
        "content": "<p>E.g. for the <code>cargo</code> benchmark, <code>Option::ok_or_else</code> accounts for 1.6% of LLVM IR generated in a debug build.</p>",
        "id": 206113646,
        "sender_full_name": "njn",
        "timestamp": 1596700891
    },
    {
        "content": "<p>With the detailed output and some detective work, I worked out that 80% of the 381 instances come from three functions in hashbrown: <code>new_uninitialized</code>, <code>reserve_rehash</code>, <code>try_with_capacity</code></p>",
        "id": 206113773,
        "sender_full_name": "njn",
        "timestamp": 1596700977
    },
    {
        "content": "<p>Tomorrow I will try changing those <code>ok_or_else</code> calls to just vanilla <code>match</code>es, see if it makes a measurable improvement in compile time</p>",
        "id": 206113804,
        "sender_full_name": "njn",
        "timestamp": 1596701012
    },
    {
        "content": "<p>you can get both from the mangled data (harder), or even the demangled version (if you don't care about telling apart trait impls), the latter mostly by removing matching &lt;...&gt;</p>",
        "id": 206117099,
        "sender_full_name": "eddyb",
        "timestamp": 1596703737
    },
    {
        "content": "<p>for <a href=\"http://perf.rust-lang.org\">perf.rust-lang.org</a> I doubt <code>-Z</code> flags are a problem but I'll let <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> be the judge of that</p>",
        "id": 206117245,
        "sender_full_name": "eddyb",
        "timestamp": 1596703837
    },
    {
        "content": "<p>cargo-llvm-lines is a general purpose tool used in other places. But an option would be reasonable</p>",
        "id": 206117612,
        "sender_full_name": "njn",
        "timestamp": 1596704089
    },
    {
        "content": "<p>I'd like to print more info from the mono item graph to show such causes of monomorphizations like this (and am slowly working on it)</p>",
        "id": 206118908,
        "sender_full_name": "lqd",
        "timestamp": 1596705084
    },
    {
        "content": "<p>oh and that would solve the problem of matching the LLVM IR to the instantiations</p>",
        "id": 206120058,
        "sender_full_name": "eddyb",
        "timestamp": 1596706059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> tbf I was imagining passing the arguments through, kind of like <code>cargo rustc -- ...</code> but that wouldn't affect code already compiled in dependencies</p>",
        "id": 206120154,
        "sender_full_name": "eddyb",
        "timestamp": 1596706114
    },
    {
        "content": "<p>(i.e. I was imagining we could do this without modifying <code>cargo-llvm-lines</code> at all)</p>",
        "id": 206120184,
        "sender_full_name": "eddyb",
        "timestamp": 1596706141
    }
]