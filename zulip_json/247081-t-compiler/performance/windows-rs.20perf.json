[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I've already done some perf work based on windows-rs, and I'd like to help you figure out what's going on. I believe the <code>finalize_macro_resolutions</code> will be the cause of the majority of the performance hit. Let me see if I can dig up my previous analysis.</p>",
        "id": 223620445,
        "sender_full_name": "rylev",
        "timestamp": 1611308885
    },
    {
        "content": "<p>Hmmm I can't see to find it, but I have a Windows machine which I can run profiling on.</p>",
        "id": 223622288,
        "sender_full_name": "rylev",
        "timestamp": 1611310034
    },
    {
        "content": "<p>that would be awesome!</p>",
        "id": 223646033,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611324893
    },
    {
        "content": "<p>FWIW I believe you that <code>fnialize_macro_resolutions</code> is the main hit when <em>compiling</em>, but <code>resolve_crate</code> is only a third of the time when running <em>rustdoc</em></p>",
        "id": 223646081,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611324921
    },
    {
        "content": "<p><a href=\"https://github.com/microsoft/windows-rs/issues/420#issuecomment-764991646\">https://github.com/microsoft/windows-rs/issues/420#issuecomment-764991646</a></p>",
        "id": 223646208,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611324973
    },
    {
        "content": "<p>need to add timing to <code>render_html</code>, I'm not sure if that time is spent on actual IO or just lots of memory allocations</p>",
        "id": 223646259,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611324999
    },
    {
        "content": "<p>and <a href=\"https://github.com/rust-lang/rust/issues/81251\">https://github.com/rust-lang/rust/issues/81251</a> is just a bug, but I expect it's actually <code>get_blanket_impls</code> taking all the time</p>",
        "id": 223646757,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611325252
    },
    {
        "content": "<p>which ... unfortunate, because I have no idea how to fix it</p>",
        "id": 223646767,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611325260
    },
    {
        "content": "<p>(this would be so much easier with <a href=\"https://github.com/rust-lang/rust/pull/79540\">https://github.com/rust-lang/rust/pull/79540</a>)</p>",
        "id": 223648234,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611325993
    },
    {
        "content": "<p>Is it counter productive to also look into why building the crate itself takes so long? I'm interested in also improving compiling times</p>",
        "id": 223649462,
        "sender_full_name": "rylev",
        "timestamp": 1611326613
    },
    {
        "content": "<p>I think so, yes - this is specifically about the time to build <code>windows-docs-rs</code></p>",
        "id": 223649739,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611326733
    },
    {
        "content": "<p>which no one will ever build as a library, just for the docs</p>",
        "id": 223649764,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611326741
    },
    {
        "content": "<p>(if you want to look into <code>windows-rs</code> be my guest, but that's not what I've been measuring so far)</p>",
        "id": 223649797,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611326760
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/windows-rs.20perf/near/223649764\">said</a>:</p>\n<blockquote>\n<p>which no one will ever build as a library, just for the docs</p>\n</blockquote>\n<p>never be sure of that <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 223649915,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611326792
    },
    {
        "content": "<p>I'm happy to help you. I will continue also looking into perf here of the main crate, but I can also help you</p>",
        "id": 223650001,
        "sender_full_name": "rylev",
        "timestamp": 1611326834
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/windows-rs.20perf/near/223646259\">said</a>:</p>\n<blockquote>\n<p>need to add timing to <code>render_html</code>, I'm not sure if that time is spent on actual IO or just lots of memory allocations</p>\n</blockquote>\n<p>working on this now, it's pretty easy, just time consuming</p>",
        "id": 223650067,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611326861
    },
    {
        "content": "<p>do you know why <code>sess.time</code> only takes &amp;'static str?</p>",
        "id": 223650152,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611326887
    },
    {
        "content": "<p>in particular this gives an error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">format_renderer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">krate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">sess</span><span class=\"p\">.</span><span class=\"n\">time</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"create_{}_renderer\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">descr</span><span class=\"p\">()),</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 223650183,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611326906
    },
    {
        "content": "<p>Aha, I want <code>generic_activity_with_args</code></p>",
        "id": 223650306,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611326968
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/windows-rs.20perf/near/223648234\">said</a>:</p>\n<blockquote>\n<p>(this would be so much easier with <a href=\"https://github.com/rust-lang/rust/pull/79540\">https://github.com/rust-lang/rust/pull/79540</a>)</p>\n</blockquote>\n<p>can confirm, rebasing over this made things amazingly faster</p>",
        "id": 223651564,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611327501
    },
    {
        "content": "<p>so this is interesting - <code>render_html</code> takes almost no time on cargo, which I was using as a \"representative large code base\"</p>",
        "id": 223652441,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611327845
    },
    {
        "content": "<p>it's like .35 seconds out of a 5 second compile</p>",
        "id": 223652464,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611327853
    },
    {
        "content": "<p>Compiling (a part) of the windows-docs-rs crate with the latest nightly, it looks like the biggest chunk of time is spent in <code>late_resolve_crate</code>. Unfortunately, when I build the compiler locally, I get a panic when building the crate so I can't do further testing of what's taking a long amount of time</p>",
        "id": 223926051,
        "sender_full_name": "rylev",
        "timestamp": 1611593531
    },
    {
        "content": "<p>oh interesting, what panic?</p>",
        "id": 223926120,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611593569
    },
    {
        "content": "<blockquote>\n<p>panicked at 'attempt to create unaligned or null slice', C:\\Users\\ryanl\\Code\\rust\\library\\core\\src\\slice\\raw.rs:90:5</p>\n</blockquote>",
        "id": 223926234,
        "sender_full_name": "rylev",
        "timestamp": 1611593624
    },
    {
        "content": "<p>Looks like somewhere we're passing an unaligned or null pointer to <code>slice::from_raw_parts</code>.</p>",
        "id": 223926353,
        "sender_full_name": "rylev",
        "timestamp": 1611593654
    },
    {
        "content": "<p>No idea yet why this is happening locally and not on nightly. I will do a bisect</p>",
        "id": 223926396,
        "sender_full_name": "rylev",
        "timestamp": 1611593676
    },
    {
        "content": "<p>oh huh this must be <a href=\"https://github.com/microsoft/windows-rs/issues/422\">https://github.com/microsoft/windows-rs/issues/422</a></p>",
        "id": 223926444,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611593700
    },
    {
        "content": "<p>Hmm, yes that looks like it.</p>",
        "id": 223926553,
        "sender_full_name": "rylev",
        "timestamp": 1611593747
    },
    {
        "content": "<p>this is probably a bug in windows-rs, but you could ignore it for now with <code>debug-assertions = false</code></p>",
        "id": 223926677,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611593783
    },
    {
        "content": "<p>Ah yes, the point about <code>debug_assert</code> is right.</p>",
        "id": 223926809,
        "sender_full_name": "rylev",
        "timestamp": 1611593842
    },
    {
        "content": "<p>Looks like it's an issue in <code>Blob::read_utf16</code> in the windows metadata parser that windows-rs uses</p>",
        "id": 223927444,
        "sender_full_name": "rylev",
        "timestamp": 1611594074
    },
    {
        "content": "<p>I wonder if that assert should happen even in release mode</p>",
        "id": 223927543,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611594116
    },
    {
        "content": "<p>The performance hit is way too big for that.</p>",
        "id": 223927634,
        "sender_full_name": "bjorn3",
        "timestamp": 1611594140
    },
    {
        "content": "<p>It's an unsafe function, it's part of the contract to only send aligned pointers, so I don't think asserting should happen in release mode</p>",
        "id": 223929019,
        "sender_full_name": "rylev",
        "timestamp": 1611594604
    },
    {
        "content": "<p>it's also part of the standard library, so we would need <code>cargo -Z build-std</code> to have it enabled conditionally</p>",
        "id": 223929059,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1611594622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> in the meantime, do you mind running self-profile with a nightly so the debug assertion doesn't trigger? I'm curious to see where the time is being spent</p>",
        "id": 223929069,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611594625
    },
    {
        "content": "<p>Yep, I'll do that</p>",
        "id": 223929332,
        "sender_full_name": "rylev",
        "timestamp": 1611594741
    },
    {
        "content": "<p>So the LateResolveVisitor takes a bunch of time in the following methods: <a href=\"https://github.com/rust-lang/rust/blob/84864bfea9c00fb90a1fa6e3af1d8ad52ce8f9ec/compiler/rustc_resolve/src/late.rs#L464-L483\"><code>visit_ty</code></a> (10.5% of time), <a href=\"https://github.com/rust-lang/rust/blob/84864bfea9c00fb90a1fa6e3af1d8ad52ce8f9ec/compiler/rustc_resolve/src/late.rs#L512-L550\"><code>visit_function</code></a> (4.7% of time), and <a href=\"https://github.com/rust-lang/rust/blob/84864bfea9c00fb90a1fa6e3af1d8ad52ce8f9ec/compiler/rustc_resolve/src/late.rs#L429-L435\"><code>visit_item</code></a> (3.3% of time).</p>",
        "id": 223935794,
        "sender_full_name": "rylev",
        "timestamp": 1611597558
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> would be the one to ask about that I think</p>",
        "id": 223938083,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611598614
    },
    {
        "content": "<p>Can you post the flamegraph? I'm curious where the other time is spent, 50 minutes is a <em>long</em> time</p>",
        "id": 223938137,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611598637
    },
    {
        "content": "<p>I've not be able to successfully create flamegraphs on Windows unfortunately...</p>",
        "id": 223938174,
        "sender_full_name": "rylev",
        "timestamp": 1611598659
    },
    {
        "content": "<p>Ok, if you can post the .mm_profdata file that works too</p>",
        "id": 223938215,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611598678
    },
    {
        "content": "<p>I can generate the flamegraph and post it</p>",
        "id": 223938272,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611598686
    },
    {
        "content": "<p>In particular it's resolving path's that's taking a long time in <code>visit_ty</code>: <a href=\"https://github.com/rust-lang/rust/blob/84864bfea9c00fb90a1fa6e3af1d8ad52ce8f9ec/compiler/rustc_resolve/src/late.rs#L468\">https://github.com/rust-lang/rust/blob/84864bfea9c00fb90a1fa6e3af1d8ad52ce8f9ec/compiler/rustc_resolve/src/late.rs#L468</a></p>",
        "id": 223938503,
        "sender_full_name": "rylev",
        "timestamp": 1611598785
    },
    {
        "content": "<p>Basically all of the time in <code>visit_ty</code></p>",
        "id": 223938540,
        "sender_full_name": "rylev",
        "timestamp": 1611598802
    },
    {
        "content": "<p>/me  works on uploading the profdata file</p>",
        "id": 223939252,
        "sender_full_name": "rylev",
        "timestamp": 1611599113
    },
    {
        "content": "<p>@kennykerr just put it on onedrive, that worked well</p>",
        "id": 223939306,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611599140
    },
    {
        "content": "<p><a href=\"https://www.dropbox.com/s/6r145l1cvjtc2i3/bindings-7288.mm_profdata?dl=0\">https://www.dropbox.com/s/6r145l1cvjtc2i3/bindings-7288.mm_profdata?dl=0</a></p>",
        "id": 223939731,
        "sender_full_name": "rylev",
        "timestamp": 1611599310
    },
    {
        "content": "<p>/me points it on Dropbox like a bad Microsoft employee</p>",
        "id": 223939755,
        "sender_full_name": "rylev",
        "timestamp": 1611599323
    },
    {
        "content": "<blockquote>\n<p>.mm_profdata files canât be previewed.</p>\n</blockquote>\n<p>shocking</p>",
        "id": 223939791,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611599338
    },
    {
        "content": "<p>WHY NOT?! <span aria-label=\"stuck out tongue closed eyes\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue closed eyes\">:stuck_out_tongue_closed_eyes:</span></p>",
        "id": 223939837,
        "sender_full_name": "rylev",
        "timestamp": 1611599357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> let me know when you have a flame graph to look at. I'm signing off for the evening</p>",
        "id": 223943388,
        "sender_full_name": "rylev",
        "timestamp": 1611601108
    },
    {
        "content": "<p>I ran out of time, sorry, I'll have it up by tomorrow</p>",
        "id": 223943418,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611601124
    },
    {
        "content": "<p>let's see how long it will take</p>",
        "id": 223943923,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611601303
    },
    {
        "content": "<p>actually, I get a 43k flamegraph so I guess that's not a success <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 223944161,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611601386
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/AbJPeRRB8jF8zum7jVwmb1iG/rustc.svg\">rustc.svg</a> just in case this really is the flamegraph I'm supposed to get here</p>",
        "id": 223944366,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611601483
    },
    {
        "content": "<p>I won't try to upload the 1.5G <code>chrome_profiler.json</code> though <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> Loading that actually crashed my chrome, LOL</p>",
        "id": 223944427,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611601509
    },
    {
        "content": "<p>\"robust software\"</p>",
        "id": 223945733,
        "sender_full_name": "Lokathor",
        "timestamp": 1611602113
    },
    {
        "content": "<p>yes, that looks right</p>",
        "id": 223946104,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611602296
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> that looks like timing for building windows-rs, not windows-docs-rs, I see lots of LLVM codegen but no <code>collect_blanket_impls</code></p>",
        "id": 223946146,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611602318
    },
    {
        "content": "<p>(or maybe you ran <code>cargo rustc</code> instead of <code>cargo rustdoc</code>)</p>",
        "id": 223946741,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611602582
    },
    {
        "content": "<p>Ah yes, sorry, this was for compiling. I can also run rustdoc</p>",
        "id": 223946945,
        "sender_full_name": "rylev",
        "timestamp": 1611602674
    },
    {
        "content": "<p>be warned it will likely take a lot longer :/ <code>collect_blanket_impls</code> is <em>really</em> slow</p>",
        "id": 223947005,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611602695
    },
    {
        "content": "<p>Ah I need to build rustdoc locally. How do I do that?</p>",
        "id": 223947344,
        "sender_full_name": "rylev",
        "timestamp": 1611602846
    },
    {
        "content": "<p><code>x.py build</code> should work</p>",
        "id": 223947369,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611602858
    },
    {
        "content": "<p>or if that gives you trouble, <code>x.py build --stage 1 library/std src/tools/rustdoc</code></p>",
        "id": 223947408,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611602874
    },
    {
        "content": "<p><a href=\"https://www.dropbox.com/s/ezcvnhvntj8204s/bindings-18880.mm_profdata?dl=0\">https://www.dropbox.com/s/ezcvnhvntj8204s/bindings-18880.mm_profdata?dl=0</a></p>\n<div class=\"message_inline_ref\"><a href=\"https://www.dropbox.com/s/ezcvnhvntj8204s/bindings-18880.mm_profdata?dl=0\" title=\"bindings-18880.mm_profdata\"><img src=\"https://www.dropbox.com/static/images/spectrum-icons/generated/content/content-unknown-large.png\"></a><div><div class=\"message_inline_image_title\">bindings-18880.mm_profdata</div><desc class=\"message_inline_image_desc\"></desc></div></div>",
        "id": 223954017,
        "sender_full_name": "rylev",
        "timestamp": 1611605840
    },
    {
        "content": "<p>that's perfect, thanks :)</p>",
        "id": 223954237,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611605968
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>+-------------------------------------------------+-----------+-----------------+----------+------------+\n| Item                                            | Self time | % of total time | Time     | Item count |\n+-------------------------------------------------+-----------+-----------------+----------+------------+\n| get_blanket_impls                               | 32.86s    | 21.799          | 38.02s   | 18683      |\n+-------------------------------------------------+-----------+-----------------+----------+------------+\n| late_resolve_visit_ty_path                      | 28.24s    | 18.735          | 28.24s   | 534300     |\n+-------------------------------------------------+-----------+-----------------+----------+------------+\n| render_item                                     | 21.22s    | 14.081          | 21.44s   | 28092      |\n+-------------------------------------------------+-----------+-----------------+----------+------------+\n| late_resolve_visit_function                     | 12.61s    | 8.366           | 20.15s   | 89046      |\n+-------------------------------------------------+-----------+-----------------+----------+------------+\n</code></pre></div>\n<p>yeah that looks about right</p>",
        "id": 223954279,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611606000
    },
    {
        "content": "<p>I'm surprised <code>render_mod_item</code> is so low on the list, that's interesting</p>",
        "id": 223954354,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611606020
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/c1lE8QyXyldIZkJNAZvQDkZt/bindings-18880.svg\">bindings-18880.svg</a></p>",
        "id": 223954804,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611606297
    },
    {
        "content": "<p>hmm, it's really strange this is so much faster on your computer than on kennykerr's</p>",
        "id": 223955056,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611606452
    },
    {
        "content": "<p>it took like 50 minutes for him, it's only like 2.5 minutes for you</p>",
        "id": 223955064,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611606466
    },
    {
        "content": "<p>swapping is a hell of a perf killer, maybe not enough memory?</p>",
        "id": 223955133,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611606487
    },
    {
        "content": "<p>25x though?</p>",
        "id": 223955159,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611606500
    },
    {
        "content": "<p>that's another thing to track though, memory usage</p>",
        "id": 223955191,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611606515
    },
    {
        "content": "<p>self-profile doesn't record it right now <a href=\"https://github.com/rust-lang/rust/issues/81348\">https://github.com/rust-lang/rust/issues/81348</a></p>",
        "id": 223955212,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611606527
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> sorry to keep bugging you - can you record with <code>-Z times-passes</code> and record the output? I think that's the only way to measure memory usage currently</p>",
        "id": 223955539,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611606671
    },
    {
        "content": "<p>times-passes does, does rustdoc print some of that? ah I was too slow</p>",
        "id": 223955561,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611606681
    },
    {
        "content": "<p>(if it's too late there feel free to wait until tomorrow)</p>",
        "id": 223955569,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611606685
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"334260\">DÃ¡niel Buga</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/windows-rs.20perf/near/223955561\">said</a>:</p>\n<blockquote>\n<p>times-passes does, does rustdoc print some of that?</p>\n</blockquote>\n<p>yes, time-passes works fine with rustdoc</p>",
        "id": 223955582,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611606696
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224872\">rylev</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/windows-rs.20perf/near/223938174\">said</a>:</p>\n<blockquote>\n<p>I've not be able to successfully create flamegraphs on Windows unfortunately...</p>\n</blockquote>\n<p>FWIW it works fine for me on WSL on that latest mm_profdata file</p>",
        "id": 223955633,
        "sender_full_name": "lqd",
        "timestamp": 1611606719
    },
    {
        "content": "<p>All right let me try a build \"quick\"</p>\n<p>This will be fun</p>\n<div class=\"codehilite\"><pre><span></span><code>time: 0.000; rss: 17MB  crate_injection\ntime: 23.508; rss: 7036MB       expand_crate\n</code></pre></div>\n<p>time-passes really needs some nesting visualization, though</p>",
        "id": 223956933,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611607311
    },
    {
        "content": "<p>Oh yeah it will go up over 18 GB</p>",
        "id": 223957287,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611607478
    },
    {
        "content": "<p>Well whatever is happening, it's happening on a single thread, which is ... well my PC feels sad</p>",
        "id": 223957791,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611607734
    },
    {
        "content": "<p>well this looks suspicious: <a href=\"https://github.com/rust-lang/rust/blob/7fba12bb1d3877870758a7a53e2fe766bb19bd60/src/librustdoc/formats/renderer.rs#L111\">https://github.com/rust-lang/rust/blob/7fba12bb1d3877870758a7a53e2fe766bb19bd60/src/librustdoc/formats/renderer.rs#L111</a></p>",
        "id": 223957804,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611607746
    },
    {
        "content": "<p>I hope that's an Rc</p>",
        "id": 223957856,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611607774
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 223957897,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611607799
    },
    {
        "content": "<p><code>time: 353.758; rss: 8746MB      late_resolve_crate</code> that took forever</p>",
        "id": 223957980,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611607829
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/windows-rs.20perf/near/223957897\">said</a>:</p>\n<blockquote>\n<p>I don't think so</p>\n</blockquote>\n<p>Most of the fields are, though: <a href=\"https://github.com/rust-lang/rust/blob/7fba12bb1d3877870758a7a53e2fe766bb19bd60/src/librustdoc/html/render/mod.rs#L104L125\">https://github.com/rust-lang/rust/blob/7fba12bb1d3877870758a7a53e2fe766bb19bd60/src/librustdoc/html/render/mod.rs#L104L125</a></p>",
        "id": 223958463,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611608090
    },
    {
        "content": "<p>Looks like the call in <code>visit_ty</code> to <code>smart_resolve_path</code> finishes quickly it just runs a lot of time. 534,500 times. That would put it at .05 ms per invocation.</p>",
        "id": 223960457,
        "sender_full_name": "rylev",
        "timestamp": 1611608916
    },
    {
        "content": "<p>Just like typeck and keccak - a single check is ~100us, but it runs 53k times. Anyhow, I had to restart the collection because my terminal got clogged by <br>\n<code>time: 0.000; rss: 21409MB       build_local_trait_impl</code></p>\n<p>Let's hope redirecting to a file does better.</p>",
        "id": 223960684,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611609019
    },
    {
        "content": "<p>30 minutes later I have a 1.2GB terminal output <span aria-label=\"open mouth\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"open mouth\">:open_mouth:</span> I hope zulip can handle that <a href=\"/user_uploads/4715/Mf4_d_OguVlV56Lvb48zsRcq/log.txt.gz\">log.txt.gz</a></p>",
        "id": 223964244,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611610683
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 223964575,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611610885
    },
    {
        "content": "<p>Trimmed it a bit:</p>\n<div class=\"codehilite\"><pre><span></span><code>time: 0.000; rss: 16MB  parse_crate\ntime: 0.000; rss: 16MB  attributes_injection\ntime: 0.000; rss: 16MB  recursion_limit\ntime: 0.000; rss: 16MB  plugin_loading\ntime: 0.000; rss: 16MB  plugin_registration\ntime: 0.000; rss: 16MB  pre_AST_expansion_lint_checks\ntime: 0.000; rss: 17MB  crate_injection\ntime: 23.541; rss: 7035MB   expand_crate\ntime: 0.000; rss: 7035MB    check_unused_macros\ntime: 23.541; rss: 7035MB   macro_expand_crate\ntime: 0.000; rss: 7035MB    maybe_building_test_harness\ntime: 1.360; rss: 7035MB    AST_validation\ntime: 0.000; rss: 7035MB    maybe_create_a_macro_crate\ntime: 0.002; rss: 7035MB    finalize_imports\ntime: 0.065; rss: 7030MB    finalize_macro_resolutions\ntime: 350.582; rss: 8745MB  late_resolve_crate\ntime: 0.685; rss: 8745MB    resolve_check_unused\ntime: 0.000; rss: 8745MB    resolve_report_errors\ntime: 0.648; rss: 8745MB    resolve_postprocess\ntime: 351.982; rss: 8745MB  resolve_crate\ntime: 1.196; rss: 8745MB    complete_gated_feature_checking\ntime: 378.079; rss: 8745MB  configure_and_expand\ntime: 0.000; rss: 8745MB    load_extern_crates\ntime: 0.000; rss: 8745MB    prepare_outputs\ntime: 14.825; rss: 11835MB  hir_lowering\ntime: 1.792; rss: 11841MB   early_lint_checks\ntime: 0.180; rss: 12089MB   setup_global_ctxt\ntime: 0.181; rss: 12089MB   create_global_ctxt\ntime: 478.438; rss: 15081MB item_types_checking\ntime: 15.630; rss: 15497MB  crate_lints\ntime: 0.000; rss: 15497MB   module_lints\ntime: 15.630; rss: 15497MB  missing_docs\ntime: 1.906; rss: 15550MB   check_mod_attrs\ntime: 4.949; rss: 17158MB   clean_crate\ntime: 0.001; rss: 17158MB   get_auto_trait_impls\ntime: 0.005; rss: 17159MB   get_blanket_impls\ntime: 0.006; rss: 17159MB   get_auto_trait_and_blanket_synthetic_impls\ntime: 0.000; rss: 17159MB   get_auto_trait_impls\ntime: 0.002; rss: 17159MB   get_blanket_impls\ntime: 0.002; rss: 17159MB   get_auto_trait_and_blanket_synthetic_impls\ntime: 0.000; rss: 17159MB   get_auto_trait_impls\ntime: 0.002; rss: 17159MB   get_blanket_impls\ntime: 0.002; rss: 17159MB   get_auto_trait_and_blanket_synthetic_impls\n[.. 135k lines ...]\ntime: 0.000; rss: 20308MB   get_auto_trait_impls\ntime: 0.001; rss: 20308MB   get_blanket_impls\ntime: 0.002; rss: 20308MB   get_auto_trait_and_blanket_synthetic_impls\ntime: 0.000; rss: 20308MB   get_auto_trait_impls\ntime: 0.001; rss: 20308MB   get_blanket_impls\ntime: 0.002; rss: 20308MB   get_auto_trait_and_blanket_synthetic_impls\ntime: 0.000; rss: 20308MB   get_auto_trait_impls\ntime: 0.001; rss: 20308MB   get_blanket_impls\ntime: 0.002; rss: 20308MB   get_auto_trait_and_blanket_synthetic_impls\ntime: 0.000; rss: 20308MB   get_auto_trait_impls\ntime: 0.001; rss: 20308MB   get_blanket_impls\ntime: 0.002; rss: 20308MB   get_auto_trait_and_blanket_synthetic_impls\ntime: 0.000; rss: 20308MB   get_auto_trait_impls\ntime: 0.001; rss: 20308MB   get_blanket_impls\ntime: 0.002; rss: 20308MB   get_auto_trait_and_blanket_synthetic_impls\ntime: 75.814; rss: 20308MB  collect_synthetic_impls\ntime: 0.199; rss: 20394MB   collect_items_for_trait_impls\ntime: 0.000; rss: 20394MB   build_extern_trait_impl\ntime: 0.000; rss: 20394MB   build_extern_trait_impl\ntime: 0.000; rss: 20394MB   build_extern_trait_impl\ntime: 0.000; rss: 20394MB   build_extern_trait_impl\ntime: 0.000; rss: 20394MB   build_extern_trait_impl\ntime: 0.000; rss: 20394MB   build_extern_trait_impl\ntime: 0.000; rss: 20394MB   build_extern_trait_impl\ntime: 0.000; rss: 20394MB   build_extern_trait_impl\ntime: 0.000; rss: 20394MB   build_extern_trait_impl\ntime: 0.000; rss: 20394MB   build_extern_trait_impl\ntime: 0.000; rss: 20394MB   build_extern_trait_impl\ntime: 0.000; rss: 20394MB   build_extern_trait_impl\ntime: 0.000; rss: 20394MB   build_extern_trait_impl\ntime: 0.000; rss: 20394MB   build_extern_trait_impl\ntime: 0.000; rss: 20394MB   build_extern_trait_impl\ntime: 0.000; rss: 20394MB   build_extern_trait_impl\ntime: 0.000; rss: 20394MB   build_extern_trait_impl\ntime: 0.000; rss: 20394MB   build_extern_trait_impl\ntime: 0.000; rss: 20394MB   build_extern_trait_impl\n[... around 15k repetitions ...]\ntime: 0.000; rss: 20394MB   build_extern_trait_impl\ntime: 0.000; rss: 20508MB   get_auto_trait_impls\ntime: 0.002; rss: 20508MB   get_blanket_impls\ntime: 0.006; rss: 20508MB   build_primitive_trait_impl\ntime: 0.000; rss: 20508MB   get_auto_trait_impls\ntime: 0.002; rss: 20508MB   get_blanket_impls\ntime: 0.002; rss: 20508MB   build_primitive_trait_impl\ntime: 0.000; rss: 20508MB   get_auto_trait_impls\ntime: 0.002; rss: 20508MB   get_blanket_impls\ntime: 0.002; rss: 20508MB   build_primitive_trait_impl\ntime: 0.000; rss: 20508MB   get_auto_trait_impls\ntime: 0.002; rss: 20508MB   get_blanket_impls\ntime: 0.002; rss: 20508MB   build_primitive_trait_impl\ntime: 0.000; rss: 20508MB   get_auto_trait_impls\ntime: 0.001; rss: 20508MB   get_blanket_impls\ntime: 0.001; rss: 20508MB   build_primitive_trait_impl\ntime: 0.000; rss: 20509MB   get_auto_trait_impls\ntime: 0.001; rss: 20509MB   get_blanket_impls\ntime: 0.003; rss: 20509MB   build_primitive_trait_impl\ntime: 0.000; rss: 20509MB   get_auto_trait_impls\ntime: 0.002; rss: 20509MB   get_blanket_impls\ntime: 0.005; rss: 20509MB   build_primitive_trait_impl\ntime: 0.000; rss: 20510MB   get_auto_trait_impls\ntime: 0.002; rss: 20510MB   get_blanket_impls\ntime: 0.005; rss: 20510MB   build_primitive_trait_impl\ntime: 0.000; rss: 20511MB   get_auto_trait_impls\ntime: 0.002; rss: 20511MB   get_blanket_impls\ntime: 0.005; rss: 20511MB   build_primitive_trait_impl\ntime: 0.000; rss: 20511MB   get_auto_trait_impls\ntime: 0.002; rss: 20511MB   get_blanket_impls\ntime: 0.005; rss: 20511MB   build_primitive_trait_impl\ntime: 0.000; rss: 20511MB   get_auto_trait_impls\ntime: 0.001; rss: 20511MB   get_blanket_impls\ntime: 0.002; rss: 20511MB   build_primitive_trait_impl\ntime: 0.000; rss: 20511MB   get_auto_trait_impls\ntime: 0.001; rss: 20511MB   get_blanket_impls\ntime: 0.001; rss: 20511MB   build_primitive_trait_impl\ntime: 0.000; rss: 20511MB   get_auto_trait_impls\ntime: 0.002; rss: 20511MB   get_blanket_impls\ntime: 0.002; rss: 20511MB   build_primitive_trait_impl\ntime: 0.000; rss: 20512MB   get_auto_trait_impls\ntime: 0.001; rss: 20512MB   get_blanket_impls\ntime: 0.002; rss: 20512MB   build_primitive_trait_impl\ntime: 0.000; rss: 20512MB   get_auto_trait_impls\ntime: 0.002; rss: 20513MB   get_blanket_impls\ntime: 0.005; rss: 20513MB   build_primitive_trait_impl\ntime: 0.000; rss: 20514MB   get_auto_trait_impls\ntime: 0.002; rss: 20514MB   get_blanket_impls\ntime: 0.005; rss: 20514MB   build_primitive_trait_impl\ntime: 0.000; rss: 20515MB   get_auto_trait_impls\ntime: 0.002; rss: 20515MB   get_blanket_impls\ntime: 0.005; rss: 20515MB   build_primitive_trait_impl\ntime: 0.000; rss: 20515MB   get_auto_trait_impls\ntime: 0.002; rss: 20515MB   get_blanket_impls\ntime: 0.005; rss: 20515MB   build_primitive_trait_impl\ntime: 0.000; rss: 20516MB   get_auto_trait_impls\ntime: 0.002; rss: 20516MB   get_blanket_impls\ntime: 0.002; rss: 20516MB   build_primitive_trait_impl\ntime: 0.000; rss: 20516MB   get_auto_trait_impls\ntime: 0.002; rss: 20516MB   get_blanket_impls\ntime: 0.002; rss: 20516MB   build_primitive_trait_impl\ntime: 0.000; rss: 20516MB   get_auto_trait_impls\ntime: 0.002; rss: 20516MB   get_blanket_impls\ntime: 0.002; rss: 20516MB   build_primitive_trait_impl\ntime: 0.000; rss: 20516MB   get_auto_trait_impls\ntime: 0.002; rss: 20516MB   get_blanket_impls\ntime: 0.002; rss: 20516MB   build_primitive_trait_impl\ntime: 0.000; rss: 20517MB   get_auto_trait_impls\ntime: 0.003; rss: 20517MB   get_blanket_impls\ntime: 0.004; rss: 20517MB   build_primitive_trait_impl\ntime: 0.000; rss: 20517MB   get_auto_trait_impls\ntime: 0.001; rss: 20517MB   get_blanket_impls\ntime: 0.002; rss: 20517MB   build_primitive_trait_impl\ntime: 0.000; rss: 20517MB   get_auto_trait_impls\ntime: 0.002; rss: 20517MB   get_blanket_impls\ntime: 0.002; rss: 20517MB   build_primitive_trait_impl\ntime: 0.000; rss: 20517MB   get_auto_trait_impls\ntime: 0.001; rss: 20517MB   get_blanket_impls\ntime: 0.002; rss: 20517MB   build_primitive_trait_impl\ntime: 0.000; rss: 20518MB   get_auto_trait_impls\ntime: 0.002; rss: 20518MB   get_blanket_impls\ntime: 0.005; rss: 20518MB   build_primitive_trait_impl\ntime: 0.000; rss: 20518MB   get_auto_trait_impls\ntime: 0.002; rss: 20518MB   get_blanket_impls\ntime: 0.005; rss: 20518MB   build_primitive_trait_impl\ntime: 0.000; rss: 20519MB   get_auto_trait_impls\ntime: 0.002; rss: 20519MB   get_blanket_impls\ntime: 0.005; rss: 20519MB   build_primitive_trait_impl\ntime: 0.000; rss: 20519MB   build_local_trait_impl\n[... around 12 million lines ...]\ntime: 0.000; rss: 21548MB   build_local_trait_impl\ntime: 0.000; rss: 21548MB   build_local_trait_impl\ntime: 0.000; rss: 21548MB   build_local_trait_impl\ntime: 0.000; rss: 21548MB   build_local_trait_impl\ntime: 354.213; rss: 21538MB collect-trait-impls\ntime: 0.654; rss: 21538MB   unindent-comments\ntime: 1.507; rss: 21538MB   check-private-items-doc-tests\ntime: 1.824; rss: 21539MB   strip-hidden\ntime: 1.567; rss: 21539MB   strip-private\ntime: 1.466; rss: 21540MB   collect-intra-doc-links\ntime: 0.616; rss: 21540MB   check-code-block-syntax\ntime: 0.657; rss: 21540MB   check-invalid-html-tags\ntime: 0.610; rss: 21540MB   propagate-doc-cfg\ntime: 0.659; rss: 21541MB   check-non-autolinks\ntime: 865.017; rss: 19551MB run_global_ctxt\ntime: 6.120; rss: 21144MB   create_format_cache\ntime: 2.049; rss: 21149MB   create_renderer(html)\ntime: 0.093; rss: 21324MB   renderer_after_krate(html)\ntime: 311.517; rss: 21322MB render_html\ntime: 9.426; rss: 7173MB    free_global_ctxt\n</code></pre></div>",
        "id": 223964891,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611611068
    },
    {
        "content": "<p>oh sorry I forgot that <a href=\"https://github.com/rust-lang/rust/pull/81284\">https://github.com/rust-lang/rust/pull/81284</a> hasn't been merged yet</p>",
        "id": 223965924,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611611599
    },
    {
        "content": "<p>wow, that's 7 GB just from macros expansion</p>",
        "id": 223965957,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611611615
    },
    {
        "content": "<p>another  1.8 GB for resolve, 3 GB for HIR lowering ... wow</p>",
        "id": 223965995,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611611631
    },
    {
        "content": "<p>yeah <em>just</em> rustc, without running <code>clean</code> even, is already 15.5 GB</p>",
        "id": 223966079,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611611667
    },
    {
        "content": "<p>and then clean adds another 1.5 GB on top and get_blanket_impls is 4 GB on top of that</p>",
        "id": 223966105,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611611686
    },
    {
        "content": "<p>jesus</p>",
        "id": 223966110,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611611687
    },
    {
        "content": "<p>I'll spend some time tomorrow and clean out some unnecessary allocations, I bet some of those hurt if done 12 million times</p>",
        "id": 223966250,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611611760
    },
    {
        "content": "<p>But that's like a 100 bytes per build_local_trait_impl or so?</p>",
        "id": 223966403,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611611824
    },
    {
        "content": "<p>yeah, that's about the size of clean::Item</p>",
        "id": 223966432,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611611836
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustdoc/clean/types.rs.html#92\">https://doc.rust-lang.org/nightly/nightly-rustc/src/rustdoc/clean/types.rs.html#92</a></p>",
        "id": 223966454,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611611849
    },
    {
        "content": "<p>It would be 8 bytes smaller if I could ever get <a href=\"https://github.com/rust-lang/rust/pull/80339\">https://github.com/rust-lang/rust/pull/80339</a> to work</p>",
        "id": 223966497,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611611870
    },
    {
        "content": "<p>hmm actually I could make it <em>significantly</em> smaller by using the same Box for all the fields</p>",
        "id": 223966693,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611611956
    },
    {
        "content": "<p>like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Item</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"n\">def_id</span>: <span class=\"nc\">DefId</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"n\">inner</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">ItemInner</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">ItemInner</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Stringified span</span>\n<span class=\"w\">    </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"n\">source</span>: <span class=\"nc\">Span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Not everything has a name. E.g., impls</span>\n<span class=\"w\">    </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"n\">name</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Symbol</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"n\">attrs</span>: <span class=\"nc\">Attributes</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"n\">visibility</span>: <span class=\"nc\">Visibility</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"n\">kind</span>: <span class=\"nc\">ItemKind</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 223966787,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611612000
    },
    {
        "content": "<p>Does that <em>need</em> to be boxed at all?</p>",
        "id": 223967080,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611612049
    },
    {
        "content": "<p>there will be some balancing needed for frequently accessed fields</p>",
        "id": 223967123,
        "sender_full_name": "cuviper",
        "timestamp": 1611612057
    },
    {
        "content": "<p><code>name</code> and <code>kind</code> are probably the most frequently accessed and kind is already boxed</p>",
        "id": 223967334,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611612100
    },
    {
        "content": "<p>and none of the perf-sensitive parts of rustdoc use anything other than the DefId</p>",
        "id": 223967428,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611612121
    },
    {
        "content": "<p>You'll allocate the memory anyway, so technically that box is 8 bytes as well. If inlining the whole struct doesn't hurt, don't add a level of indirection. Are there measurements for that?</p>",
        "id": 223967463,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611612122
    },
    {
        "content": "<p>(perf-sensitive -&gt; collect_blanket_impls)</p>",
        "id": 223967513,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611612132
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"334260\">DÃ¡niel Buga</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/windows-rs.20perf/near/223967463\">said</a>:</p>\n<blockquote>\n<p>You'll allocate the memory anyway, so technically that box is 8 bytes as well. If inlining the whole struct doesn't hurt, don't add a level of indirection. Are there measurements for that?</p>\n</blockquote>\n<p>right, but that way it's not using 3 different boxes like it is now</p>",
        "id": 223967594,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611612158
    },
    {
        "content": "<p>true</p>",
        "id": 223967642,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611612176
    },
    {
        "content": "<p>anyway, I think it would be more helpful to figure out why just expanding macros uses 7 GB of memory (!!)</p>",
        "id": 223967790,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611612219
    },
    {
        "content": "<p>maybe there are a lot? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 223967844,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611612233
    },
    {
        "content": "<p>Those 7GB, how much is in the rustc HIR, and how much in rustdoc's version?</p>",
        "id": 223968043,
        "sender_full_name": "cjgillot",
        "timestamp": 1611612277
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> rustdoc hasn't done anything at all at this point</p>",
        "id": 223968090,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611612288
    },
    {
        "content": "<p>Oh, that bad.</p>",
        "id": 223968146,
        "sender_full_name": "cjgillot",
        "timestamp": 1611612306
    },
    {
        "content": "<p>I think this is in the global_ctxt() call: <a href=\"https://github.com/rust-lang/rust/blob/7fba12bb1d3877870758a7a53e2fe766bb19bd60/src/librustdoc/lib.rs#L551\">https://github.com/rust-lang/rust/blob/7fba12bb1d3877870758a7a53e2fe766bb19bd60/src/librustdoc/lib.rs#L551</a></p>",
        "id": 223968301,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611612356
    },
    {
        "content": "<p>so literally the only thing that's not straight from the compiler is loading extern crates, and I don't think windows-rs has many dependencies</p>",
        "id": 223968425,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611612382
    },
    {
        "content": "<p>certainly not 7 GB worth</p>",
        "id": 223968446,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611612387
    },
    {
        "content": "<p>Calling <code>global_ctxt()</code> ensures everything is done from parsing to HIR lowering. What are those macros oO</p>",
        "id": 223969022,
        "sender_full_name": "cjgillot",
        "timestamp": 1611612558
    },
    {
        "content": "<p>this is <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_expand/expand/struct.MacroExpander.html#method.expand_crate\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_expand/expand/struct.MacroExpander.html#method.expand_crate</a> FYI</p>",
        "id": 223969137,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611612594
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/windows-rs.20perf/near/223969022\">said</a>:</p>\n<blockquote>\n<p>Calling <code>global_ctxt()</code> ensures everything is done from parsing to HIR lowering. What are those macros oO</p>\n</blockquote>\n<p>the whole crate is just a <a href=\"http://build.rs\">build.rs</a> and one line:<br>\n<a href=\"https://github.com/microsoft/windows-docs-rs/blob/c105bd478d8750cb785a8ac8654ed0dee527495c/crates/bindings/build.rs\">https://github.com/microsoft/windows-docs-rs/blob/c105bd478d8750cb785a8ac8654ed0dee527495c/crates/bindings/build.rs</a><br>\n<a href=\"https://github.com/microsoft/windows-docs-rs/blob/c105bd478d8750cb785a8ac8654ed0dee527495c/crates/bindings/src/lib.rs\">https://github.com/microsoft/windows-docs-rs/blob/c105bd478d8750cb785a8ac8654ed0dee527495c/crates/bindings/src/lib.rs</a></p>",
        "id": 223969593,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611612722
    },
    {
        "content": "<p><a href=\"https://github.com/microsoft/windows-rs/blob/256538e85f2f9c860c09c318423b3be79b36b9c3/src/macros.rs#L5\">https://github.com/microsoft/windows-rs/blob/256538e85f2f9c860c09c318423b3be79b36b9c3/src/macros.rs#L5</a></p>",
        "id": 223969789,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611612782
    },
    {
        "content": "<p>the whole crate is \"just\" a giant include</p>",
        "id": 223969928,
        "sender_full_name": "cuviper",
        "timestamp": 1611612830
    },
    {
        "content": "<p>this is <code>build!</code>: <a href=\"https://github.com/microsoft/windows-rs/blob/256538e85f2f9c860c09c318423b3be79b36b9c3/crates/macros/src/lib.rs#L37\">https://github.com/microsoft/windows-rs/blob/256538e85f2f9c860c09c318423b3be79b36b9c3/crates/macros/src/lib.rs#L37</a></p>",
        "id": 223970104,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611612882
    },
    {
        "content": "<p>so I guess the helpful thing to do is find what's in <code>windows.rs</code> that it generates, I would expect compiling that to be platform independent (since rustdoc doesn't try to link it)</p>",
        "id": 223970184,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611612909
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"334260\">@DÃ¡niel Buga</span> can you upload that?</p>",
        "id": 223970250,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611612933
    },
    {
        "content": "<p>Lemme find it</p>",
        "id": 223970478,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611613016
    },
    {
        "content": "<p>it will be in OUT_DIR somewhere, you can find it with <code>fd windows.rs target/</code></p>",
        "id": 223970507,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611613034
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/5pVdMO4NBYzUlGsgD1OJ_F-g/windows.rs\">windows.rs</a> Maybe this one</p>",
        "id": 223970585,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611613059
    },
    {
        "content": "<p>hmm kenny said it was 300 MB <a href=\"https://github.com/microsoft/windows-rs/issues/420#issuecomment-764997878\">https://github.com/microsoft/windows-rs/issues/420#issuecomment-764997878</a></p>",
        "id": 223970794,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611613097
    },
    {
        "content": "<p>Well the timestamp is old as well so maybe not</p>",
        "id": 223970934,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611613139
    },
    {
        "content": "<p>aha, found it</p>",
        "id": 223970955,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611613154
    },
    {
        "content": "<p>similar structure, just a bit longer, sec and I'll upload</p>",
        "id": 223971013,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611613198
    },
    {
        "content": "<p>that would let me test locally :)</p>",
        "id": 223971065,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611613208
    },
    {
        "content": "<p>rustfmt will love that file</p>",
        "id": 223971073,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611613217
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/kpqdUSZgwxDI-CwR_kOFQQ7o/image.png\">image.png</a> yup</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/kpqdUSZgwxDI-CwR_kOFQQ7o/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/kpqdUSZgwxDI-CwR_kOFQQ7o/image.png\"></a></div>",
        "id": 223971163,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611613267
    },
    {
        "content": "<p><a href=\"https://drive.google.com/file/d/1RF_EjyAEWmOeRiFgowxh637iVeehK6TJ/view?usp=sharing\">https://drive.google.com/file/d/1RF_EjyAEWmOeRiFgowxh637iVeehK6TJ/view?usp=sharing</a> I hope that's the link</p>",
        "id": 223971319,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611613340
    },
    {
        "content": "<p>that worked, thanks</p>",
        "id": 223971381,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611613385
    },
    {
        "content": "<p>yw</p>",
        "id": 223971402,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611613403
    },
    {
        "content": "<p>wow that is a 6 million line file lol</p>",
        "id": 223971554,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611613483
    },
    {
        "content": "<p>just removing the <code>\\r</code> endings would making it significantly smaller <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 223971580,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611613507
    },
    {
        "content": "<p>oh shoot I should've gzipped</p>",
        "id": 223971647,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611613549
    },
    {
        "content": "<p>nbd</p>",
        "id": 223971651,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611613554
    },
    {
        "content": "<p>well that's what I do at 11:25pm</p>",
        "id": 223971681,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611613562
    },
    {
        "content": "<p>lol yup removing \\r cuts off 6 megs <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>-rw-rw-r-- 1 joshua joshua 285M Jan 25 17:25 windows-modified.rs\n-rw-rw-r-- 1 joshua joshua 291M Jan 25 17:23 windows.rs\n</code></pre></div>",
        "id": 223971722,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611613578
    },
    {
        "content": "<p>that's ... expected <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 223971730,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611613589
    },
    {
        "content": "<p>So, the gzip is as small as the line endings, lol</p>",
        "id": 223971788,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611613622
    },
    {
        "content": "<p>Uh I guess some memory can be saved if Item::attrs is a <code>Option&lt;Box&lt;Attributes&gt;&gt;</code>, we allocate a few empty ones I think</p>",
        "id": 223972115,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611613804
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"334260\">@DÃ¡niel Buga</span> I think optimizing clean::Item is the wrong approach honestly</p>",
        "id": 223972193,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611613847
    },
    {
        "content": "<p>if rustdoc used <em>zero</em> memory, it would still be using 15 GB from rustc alone</p>",
        "id": 223972215,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611613862
    },
    {
        "content": "<p>which is impossibly large</p>",
        "id": 223972229,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611613870
    },
    {
        "content": "<p>Should we gather a strike team to take down rustdoc's custom tree?</p>",
        "id": 223972253,
        "sender_full_name": "cjgillot",
        "timestamp": 1611613891
    },
    {
        "content": "<p>And in parallel, find how we can compress rustc's representation.</p>",
        "id": 223972370,
        "sender_full_name": "cjgillot",
        "timestamp": 1611613944
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/windows-rs.20perf/near/223972253\">said</a>:</p>\n<blockquote>\n<p>Should we gather a strike team to take down rustdoc's custom tree?</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/76382\">https://github.com/rust-lang/rust/issues/76382</a></p>",
        "id": 223972420,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611613977
    },
    {
        "content": "<p>Using more memory just to parse and desugar a file, that kind of defeats the purpose of data structures.</p>",
        "id": 223972439,
        "sender_full_name": "cjgillot",
        "timestamp": 1611613985
    },
    {
        "content": "<p>yeah I tend to concentrate on the other 6-7GBs usually <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span> I tend to think rustc is complicated enough for me to ignore</p>",
        "id": 223972445,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611613986
    },
    {
        "content": "<p>(I know a couple <code>clean</code> cleanups are waiting on one PR to make it possible to thread TyCtxt places, and I have some ideas along that line but am also waiting on it)</p>",
        "id": 223972551,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611614044
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/windows-rs.20perf/near/223972420\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/windows-rs.20perf/near/223972253\">said</a>:</p>\n<blockquote>\n<p>Should we gather a strike team to take down rustdoc's custom tree?</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/76382\">https://github.com/rust-lang/rust/issues/76382</a></p>\n</blockquote>\n<p>I know. Do you have a strategy to solve it? I don't know rustdoc enough to devise one.</p>",
        "id": 223972605,
        "sender_full_name": "cjgillot",
        "timestamp": 1611614080
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"319144\">CraftSpider</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/windows-rs.20perf/near/223972551\">said</a>:</p>\n<blockquote>\n<p>(I know a couple <code>clean</code> cleanups are waiting on one PR to make it possible to thread TyCtxt places, and I have some ideas along that line but am also waiting on it)</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/pull/80883\">https://github.com/rust-lang/rust/pull/80883</a></p>",
        "id": 223972646,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611614120
    },
    {
        "content": "<p>and there are a bunch of related PRs linked from there that should help a lot</p>",
        "id": 223972659,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611614132
    },
    {
        "content": "<p>Item may not even be the most difficult. The representation of types is very different than rustc's.</p>",
        "id": 223972662,
        "sender_full_name": "cjgillot",
        "timestamp": 1611614135
    },
    {
        "content": "<p>I still think looking at <code>clean</code> is not the best approach, 15 GB or 21 is honestly not that much difference when you only have 8 GB RAM</p>",
        "id": 223972752,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611614174
    },
    {
        "content": "<p>I would rather make expand_crate use less memory</p>",
        "id": 223972762,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611614180
    },
    {
        "content": "<p>The current strategy (If I remember the plan from the tree of PRs Joshua just linked) is a bunch of smaller PRs which individually start to make various <code>clean</code> items look like the equivalent HIR. Once an item is close enough, then it can mass-replaced pretty easily.</p>",
        "id": 223972797,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611614205
    },
    {
        "content": "<p>the harder thing is figuring out how to make <code>get_blanket_impls</code> take less time</p>",
        "id": 223972865,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611614252
    },
    {
        "content": "<blockquote>\n<p>While working on adding more RSS data to the time-passes output, I realized that the RSS increase I spoke of doesn't occur during pre_AST_expansion_lint_checks. That pass is called repeatedly during expand_crate. What looks like an increase during pre_AST_expansion_lint_checks is actually just a reflection of an increase that happened elsewhere during expand_crate.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"306073\">@Tyson Nottingham</span> right, this is what I meant in <a href=\"https://github.com/rust-lang/rust/pull/81284#issuecomment-766363831\">https://github.com/rust-lang/rust/pull/81284#issuecomment-766363831</a>. But I still think this is useful <em>as</em> a measure of how much memory AST expansion is using</p>",
        "id": 223974076,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611614966
    },
    {
        "content": "<p>oh oof, well that's definitely a place to start, ast::Item is 300 bytes</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0308]: mismatched types\n    --&gt; /home/joshua/rustc3/compiler/rustc_data_structures/src/macros.rs:5:32\n     |\n3    | / macro_rules! static_assert_size {\n4    | |     ($ty:ty, $size:expr) =&gt; {\n5    | |         const _: [(); $size] = [(); ::std::mem::size_of::&lt;$ty&gt;()];\n     | |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an array with a fixed size of 100 elements, found one with 296 elements\n6    | |     };\n7    | | }\n     | |_- in this expansion of `rustc_data_structures::static_assert_size!`\n     |\n    ::: compiler/rustc_ast/src/ast.rs:2596:1\n     |\n2596 |   rustc_data_structures::static_assert_size!(Item, 100);\n     |   ------------------------------------------------------ in this macro invocation\n</code></pre></div>",
        "id": 223974946,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611615496
    },
    {
        "content": "<p>with <code>ItemKind</code> boxed it's only 96 bytes</p>",
        "id": 223975028,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611615550
    },
    {
        "content": "<p>margin of error</p>",
        "id": 223975183,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611615616
    },
    {
        "content": "<p>If you box the whole ItemKind, you still need to allocate the whole ItemKind though so you only added a level of indirection?</p>",
        "id": 223975252,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611615665
    },
    {
        "content": "<p>right, but any <code>Vec</code> holding it will be a third the size</p>",
        "id": 223975299,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611615691
    },
    {
        "content": "<p>Uh, won't it be the same size, some of that is just on the heap somewhere else?</p>",
        "id": 223975403,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611615745
    },
    {
        "content": "<p>if you memcpy the vec, you are memcpying a third of the bytes</p>",
        "id": 223975441,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611615782
    },
    {
        "content": "<p>that's true</p>",
        "id": 223975479,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611615798
    },
    {
        "content": "<p>no, that's false, vec is still 12 bytes <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 223975497,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611615810
    },
    {
        "content": "<p>or however much 3 words are nowadays</p>",
        "id": 223975530,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611615825
    },
    {
        "content": "<p>you know what I mean</p>",
        "id": 223975531,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611615829
    },
    {
        "content": "<p>yeah, but do you often bitwise copy something like that?</p>",
        "id": 223975616,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611615859
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> boxing these things worked very well for rustdoc</p>",
        "id": 223975688,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611615901
    },
    {
        "content": "<p>to save memory, you'll need to identify the biggest variants in ItemKind and box those</p>",
        "id": 223975713,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611615915
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/80014#issuecomment-744064926\">https://github.com/rust-lang/rust/pull/80014#issuecomment-744064926</a></p>",
        "id": 223975728,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611615925
    },
    {
        "content": "<p>that's probabyl cache locality or some other black magic I can't possibly comprehend</p>",
        "id": 223975780,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611615960
    },
    {
        "content": "<p>not to discourage you, it's definitely worth a try</p>",
        "id": 223975864,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611615995
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span>  Do you happen to know why <code>inline::build_impl</code> takes an Option&lt;Attrs&gt; instead of plain Attrs?</p>",
        "id": 223976011,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611616096
    },
    {
        "content": "<p>yes, if it's <code>None</code> then we can save a memcpy: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustdoc/clean/inline.rs.html#306\">https://doc.rust-lang.org/nightly/nightly-rustc/src/rustdoc/clean/inline.rs.html#306</a></p>",
        "id": 223976105,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611616159
    },
    {
        "content": "<p>And if it's an empty slice instead?</p>",
        "id": 223976206,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611616206
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> you can combine the representations if you like, I think rustdoc has a logic invariant that it can't be empty though</p>",
        "id": 223976263,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611616250
    },
    {
        "content": "<p>Ah it doesn't matter, 16 bytes both ways... well I guess that's for the better</p>",
        "id": 223976651,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611616565
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Sorry for the confusion with perf differences between Kenny's run and mine. I am testing with a smaller subset so that I don't have to wait the full 30 minutes every time I want to test something.</p>",
        "id": 224032559,
        "sender_full_name": "rylev",
        "timestamp": 1611664803
    },
    {
        "content": "<p>That explains it <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 224034554,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611666014
    },
    {
        "content": "<p>Re: crate compilation  -I've found some interesting things. On my reduced example, we're accessing the file system at least 191,000 times. It seems that every time we see an extern lib we check to see if that file exists even if we've seen it before. That check alone takes 2% of the compilation time</p>",
        "id": 224054109,
        "sender_full_name": "rylev",
        "timestamp": 1611674572
    },
    {
        "content": "<p>It seems like every time we need to load an external library we do so from scratch even if we've already laded that library before.</p>",
        "id": 224055837,
        "sender_full_name": "rylev",
        "timestamp": 1611675250
    },
    {
        "content": "<p>The <a href=\"https://github.com/rust-lang/rust/blob/1483e67addd37d9bd20ba3b4613b678ee9ad4d68/compiler/rustc_metadata/src/locator.rs#L659\"><code>find_commandline_library</code></a> function gets called over 191,000 times. I would think it really only needs to be called once per unique crate. Still not sure why the <a href=\"https://github.com/rust-lang/rust/blob/1483e67addd37d9bd20ba3b4613b678ee9ad4d68/compiler/rustc_metadata/src/creader.rs#L221\"><code>existing_match</code></a> function seems to return <code>None</code> all the time which causes us to go to the load fallback 191,000 times. That doesn't seem right.</p>",
        "id": 224059279,
        "sender_full_name": "rylev",
        "timestamp": 1611676545
    },
    {
        "content": "<p>That's interesting! Sounds like wouldn't be too difficult to fix it either.</p>",
        "id": 224060755,
        "sender_full_name": "nagisa",
        "timestamp": 1611677030
    },
    {
        "content": "<p>Does anyone know why we only check for rlib and dylib sources here and not rmeta? <a href=\"https://github.com/rust-lang/rust/blob/1483e67addd37d9bd20ba3b4613b678ee9ad4d68/compiler/rustc_metadata/src/creader.rs#L256-L257\">https://github.com/rust-lang/rust/blob/1483e67addd37d9bd20ba3b4613b678ee9ad4d68/compiler/rustc_metadata/src/creader.rs#L256-L257</a></p>",
        "id": 224072120,
        "sender_full_name": "rylev",
        "timestamp": 1611681578
    },
    {
        "content": "<p>This code predates addition of rmeta, so I would guess that its just an oversight</p>",
        "id": 224072789,
        "sender_full_name": "nagisa",
        "timestamp": 1611681886
    },
    {
        "content": "<p>but I'm not super familiar with crate loading code to say for sure</p>",
        "id": 224072807,
        "sender_full_name": "nagisa",
        "timestamp": 1611681897
    },
    {
        "content": "<p>Ok I can add it and see what happens</p>",
        "id": 224072904,
        "sender_full_name": "rylev",
        "timestamp": 1611681940
    },
    {
        "content": "<p>That seems to have worked. It caught off 10 seconds from the build (3.5%)</p>",
        "id": 224075719,
        "sender_full_name": "rylev",
        "timestamp": 1611683096
    },
    {
        "content": "<p>Not sure if this is a fluke, but <code>LLVM_module_codegen_emit_obj</code> regressed...</p>",
        "id": 224078074,
        "sender_full_name": "rylev",
        "timestamp": 1611683996
    },
    {
        "content": "<p>I'm in a video chat. Maybe en/decoding is really hurting things</p>",
        "id": 224078355,
        "sender_full_name": "rylev",
        "timestamp": 1611684082
    },
    {
        "content": "<p>I'm quite sure loading something once instead of a multiple times has no effect on codegen.</p>",
        "id": 224078822,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611684248
    },
    {
        "content": "<p>Yea, I think it was my CPU being occupied with video chat. It looks like the change actually leads to a ~13% improvement (nearly 40 seconds improvement in this latest run)</p>",
        "id": 224081264,
        "sender_full_name": "rylev",
        "timestamp": 1611685377
    },
    {
        "content": "<p>13% for one line of code is not too bad <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 224081320,
        "sender_full_name": "rylev",
        "timestamp": 1611685409
    },
    {
        "content": "<p>indeed, congrats <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 224081365,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611685430
    },
    {
        "content": "<p>I'm not sure if there is a test I should be updating</p>",
        "id": 224081661,
        "sender_full_name": "rylev",
        "timestamp": 1611685566
    },
    {
        "content": "<p>I defer to the CI's judgement</p>",
        "id": 224081872,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611685679
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/81414\">https://github.com/rust-lang/rust/pull/81414</a></p>",
        "id": 224083718,
        "sender_full_name": "rylev",
        "timestamp": 1611686489
    },
    {
        "content": "<p>So we're still spending 4.5% percent of time looking into whether we've loaded a crate or not. In particular this is caused by calling <code> std::fs::canonicalize</code> <em>a lot</em> <a href=\"https://github.com/rust-lang/rust/blob/7907345e58b4f4d2c95e5ea9b8e0b3bff8946523/compiler/rustc_metadata/src/creader.rs#L255\">here</a>. In my tests, this is running 191,043 times. Unfortunately, this function does some file system operations which makes it a bit too slow to be called that much. I'll look into pre-cononcalizing these paths.</p>",
        "id": 224094922,
        "sender_full_name": "rylev",
        "timestamp": 1611691539
    },
    {
        "content": "<p>How do you count fs operations?</p>",
        "id": 224096126,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1611692017
    },
    {
        "content": "<p>I'm not specifically. I just was tracking the code path where that is called with a <code>verbose_generic_activity</code></p>",
        "id": 224097836,
        "sender_full_name": "rylev",
        "timestamp": 1611692795
    },
    {
        "content": "<p>I think the canonicalize could be removed if we did it during argument parsing or session construction or somewhere similar.</p>",
        "id": 224097959,
        "sender_full_name": "nagisa",
        "timestamp": 1611692858
    },
    {
        "content": "<p>I don't believe these arguments need to remain non-canon anywhere, really.</p>",
        "id": 224097992,
        "sender_full_name": "nagisa",
        "timestamp": 1611692876
    },
    {
        "content": "<p>We could also consider some cache here too.</p>",
        "id": 224098082,
        "sender_full_name": "nagisa",
        "timestamp": 1611692906
    },
    {
        "content": "<p>I'm working on a change where we canoncalize earlier.</p>",
        "id": 224098989,
        "sender_full_name": "rylev",
        "timestamp": 1611693320
    },
    {
        "content": "<p>Canoncalizing early made that particular code path from 4.56% of compilation to 0.03% of compilation. 11.3 seconds to 75 milliseconds. <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 224103041,
        "sender_full_name": "rylev",
        "timestamp": 1611695140
    },
    {
        "content": "<p><span aria-label=\"crab\" class=\"emoji emoji-1f980\" role=\"img\" title=\"crab\">:crab:</span></p>",
        "id": 224103164,
        "sender_full_name": "Lokathor",
        "timestamp": 1611695179
    },
    {
        "content": "<p>My test is building in 223 seconds an improvement over the 292 seconds it took at the start of the day.</p>",
        "id": 224103859,
        "sender_full_name": "rylev",
        "timestamp": 1611695555
    },
    {
        "content": "<p>at this rate we'll be faster than Jai by the end of the week.</p>",
        "id": 224105156,
        "sender_full_name": "Lokathor",
        "timestamp": 1611696012
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/81419\">https://github.com/rust-lang/rust/pull/81419</a></p>",
        "id": 224106551,
        "sender_full_name": "rylev",
        "timestamp": 1611696669
    },
    {
        "content": "<p>So I'm doing some more perf runs on windows-rs, and I thought I'd take a break to write what I've found so far. So the current state of the world can be seen <a href=\"https://gist.github.com/rylev/c001fafe2010ee401b767f684e3fca2a\">here</a>. This biggest chunk of time is currently <code>specialization_graph_of</code>. </p>\n<p>So I added some tracing in there, and it led me to 99% of that time being taken in <code>traits::overlapping_impls</code> or concretely in <a href=\"https://github.com/rust-lang/rust/blob/6ad11e2e25919b75ebbc36d7910f2a1126a7e873/compiler/rustc_trait_selection/src/traits/coherence.rs#L127\"><code>overlap_within_probe</code></a> which you can find in \"rustc_trait_selection/src/traits/coherence.rs\". Essentially this code is checking whether certain types implement certain traits. </p>\n<p>A large chunk of the time is being spent in <a href=\"https://github.com/rust-lang/rust/blob/6ad11e2e25919b75ebbc36d7910f2a1126a7e873/compiler/rustc_trait_selection/src/traits/coherence.rs#L150\"><code>eq_impl_headers</code></a> which is being called 28127243 times (the same number of times as <code>overlap_within_probe</code>. The implementation seems simple but it's currently taking 2.6% of total compilation time. </p>\n<p>My next step is to figure out why that particular call is taking so long, and then work on more areas of <code>overlap_within_probe</code>.</p>",
        "id": 225031655,
        "sender_full_name": "rylev",
        "timestamp": 1612366301
    },
    {
        "content": "<p>did you try with jonas' quick-early-out PR (if it hasn't landed since then and removed that pain point) for the cases where there's actually no overlap ? I found it helped a lot when we initially were talking about this: this was IIRC all/most of the cases for that crate (my recollection was that it was slightly slower on all but the biggest specialization graphs and that was why it hadn't initially landed; please ignore if this has since been fixed <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span>)</p>",
        "id": 225041849,
        "sender_full_name": "lqd",
        "timestamp": 1612370229
    },
    {
        "content": "<p>No, I hadn't but that's a very good point. Let me do that</p>",
        "id": 225132917,
        "sender_full_name": "rylev",
        "timestamp": 1612428808
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> do you still have a link to those changes? I can't find them</p>",
        "id": 225133214,
        "sender_full_name": "rylev",
        "timestamp": 1612428981
    },
    {
        "content": "<p>Found it: <a href=\"https://github.com/jonas-schievink/rust/commit/d0bbdc3c3253e30f531bf75102a1f64a38a59e49\">https://github.com/jonas-schievink/rust/commit/d0bbdc3c3253e30f531bf75102a1f64a38a59e49</a></p>",
        "id": 225133974,
        "sender_full_name": "rylev",
        "timestamp": 1612429488
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> Do you remember why this code was never merged? I don't believe a PR was even opened.</p>",
        "id": 225135171,
        "sender_full_name": "rylev",
        "timestamp": 1612430243
    },
    {
        "content": "<p>This certainly helps the windows crate! This reduces compilation from 500s to 380s which is pretty huge.</p>",
        "id": 225136962,
        "sender_full_name": "rylev",
        "timestamp": 1612431338
    },
    {
        "content": "<p>Specialization still takes 20s, but it took 137s before.</p>",
        "id": 225137176,
        "sender_full_name": "rylev",
        "timestamp": 1612431461
    },
    {
        "content": "<p>Found <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span>'s original PR for this: <a href=\"https://github.com/rust-lang/rust/pull/69010\">https://github.com/rust-lang/rust/pull/69010</a></p>",
        "id": 225137367,
        "sender_full_name": "rylev",
        "timestamp": 1612431582
    },
    {
        "content": "<p>I'm going to reopen a PR so we can discuss there.</p>",
        "id": 225137385,
        "sender_full_name": "rylev",
        "timestamp": 1612431595
    },
    {
        "content": "<p>New PR: <a href=\"https://github.com/rust-lang/rust/pull/81744\">https://github.com/rust-lang/rust/pull/81744</a></p>",
        "id": 225139153,
        "sender_full_name": "rylev",
        "timestamp": 1612432668
    },
    {
        "content": "<p>sorry I was at work, glad you found it in the meantime</p>",
        "id": 225149976,
        "sender_full_name": "lqd",
        "timestamp": 1612440079
    },
    {
        "content": "<p>our original investigation was in <a href=\"#narrow/stream/187831-t-compiler.2Fwg-self-profile/topic/stress-test/near/205068743\">https://rust-lang.zulipchat.com/#narrow/stream/187831-t-compiler.2Fwg-self-profile/topic/stress-test/near/205068743</a> and this fast reject had a pretty dramatic impact in my tests</p>",
        "id": 225150587,
        "sender_full_name": "lqd",
        "timestamp": 1612440482
    },
    {
        "content": "<p>it would be great if coherence could be improved to make that PR unneeded (nor cause possible slowdowns for smaller crates) but in the meantime it's very effective for cases like windows-rs (which are seemingly not yet tracked in rustc-perf benchmarks)</p>",
        "id": 225152023,
        "sender_full_name": "lqd",
        "timestamp": 1612441545
    },
    {
        "content": "<p>given the huge gains, the small hit looks acceptable to me of course ^^</p>",
        "id": 225153042,
        "sender_full_name": "lqd",
        "timestamp": 1612442190
    },
    {
        "content": "<p>I'm unsure how represenative packed-simd is.</p>",
        "id": 225153872,
        "sender_full_name": "rylev",
        "timestamp": 1612442677
    },
    {
        "content": "<p>I'm not sure either (and it's kind of unfortunate we don't yet have more and deeper stats about the structure of the benchmarked code to answer such questions)</p>",
        "id": 225154632,
        "sender_full_name": "lqd",
        "timestamp": 1612443124
    },
    {
        "content": "<p>I'm confused as to why packed-simd slows down at all, I would've expected it to <em>improve</em></p>",
        "id": 225154689,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612443162
    },
    {
        "content": "<p>Yes, I'm also confused. I'm going to compile it locally with some additional perf items added to my local compiler</p>",
        "id": 225154761,
        "sender_full_name": "rylev",
        "timestamp": 1612443224
    },
    {
        "content": "<p>we may need to see its specialization graph to know why / whether many types may actually unify ?</p>",
        "id": 225154937,
        "sender_full_name": "lqd",
        "timestamp": 1612443331
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> would you be interested in seeing a windows-rs benchmark added given your comments <a href=\"https://github.com/rust-lang/rust/pull/81744#issuecomment-773284576\">here</a>?</p>",
        "id": 225155950,
        "sender_full_name": "rylev",
        "timestamp": 1612443908
    },
    {
        "content": "<p>Interestingly, the packed-simd crate takes much longer for me (on Windows) than it seems to take the perf collector (on Linux). I wonder if this is just differences in machines or if the platform has something to do with it.</p>",
        "id": 225156254,
        "sender_full_name": "rylev",
        "timestamp": 1612444070
    },
    {
        "content": "<p>In theory, yes, but we're quite limited in terms of available time on the machine right now - so we might not be able to afford it. I hope to be able to invest some time in letting perf scale more effectively to multiple machines so that we can more readily accept benchmarks (also tomorrow's discussion may help in identifying which ones are most important).</p>",
        "id": 225156729,
        "sender_full_name": "simulacrum",
        "timestamp": 1612444332
    },
    {
        "content": "<p>We'd actually also need windows support to add a bench as windows-rs does not build (in any meaningful way) on Linux</p>",
        "id": 225156959,
        "sender_full_name": "rylev",
        "timestamp": 1612444474
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I did some local benchmarking and it seems that in the packed-simd case the optimization only catches 13% of the overlapping calls. So we're paying the price on every call only for 13% of the calls to be helped by it.</p>",
        "id": 225158195,
        "sender_full_name": "rylev",
        "timestamp": 1612445126
    },
    {
        "content": "<p>That figure is around 99% in the windows-rs case</p>",
        "id": 225158752,
        "sender_full_name": "rylev",
        "timestamp": 1612445375
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224872\">rylev</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/windows-rs.20perf/near/225156959\">said</a>:</p>\n<blockquote>\n<p>We'd actually also need windows support to add a bench as windows-rs does not build (in any meaningful way) on Linux</p>\n</blockquote>\n<p>Yeah multi-server support would likely help with this. though I imagine in this particular case a cargo check should work? that doesn't even link...</p>",
        "id": 225159046,
        "sender_full_name": "simulacrum",
        "timestamp": 1612445513
    },
    {
        "content": "<p>I've not tried, but you're probably right that cargo check works (though I do think there's still one trivial bug that needs to be fixed for it to actually work)</p>",
        "id": 225159225,
        "sender_full_name": "rylev",
        "timestamp": 1612445583
    },
    {
        "content": "<p>cargo check does not work, the build script tries to link to the windows runtime</p>",
        "id": 225169564,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612450617
    },
    {
        "content": "<p>If it worked I wouldn't have to keep asking <span class=\"user-mention silent\" data-user-id=\"224872\">rylev</span> for help measuring the doc runs :P</p>",
        "id": 225169643,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612450654
    },
    {
        "content": "<p>Ah I thought it was just the path bug (there's an issue where we encode a path using windows path separators which breaks on other platforms)</p>",
        "id": 225169743,
        "sender_full_name": "rylev",
        "timestamp": 1612450688
    },
    {
        "content": "<p>Does it build with <code>windows-gnu</code> target? It'd be fairly easy to cross compile from Linux to Windows with mingw-w64.<br>\nOtherwise <code>stm32h7</code> crate which suffers from similar issue could be used.</p>",
        "id": 225170373,
        "sender_full_name": "mati865",
        "timestamp": 1612450966
    },
    {
        "content": "<p>I've not tried with <code>windows-gnu</code>. We might be relying on some linker defaults that aren't present in <code>windows-gnu</code>.</p>",
        "id": 225170813,
        "sender_full_name": "rylev",
        "timestamp": 1612451086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119581\">@mati865</span> I've had a PR open for stm for ages, <span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> was worried it still takes too much time :/</p>",
        "id": 225171107,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612451182
    },
    {
        "content": "<p>So <code>windows-rs</code> crate would have the same issue. Maybe it'd be possible to extract part of <code>stm32h7</code> that finishes in reasonable time and still reproduces the issue?</p>",
        "id": 225171735,
        "sender_full_name": "mati865",
        "timestamp": 1612451414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> FWIW <code>cargo doc --target x86_64-pc-windows-gnu</code> finishes without errors but it documented only <code>windows_gen</code>, <code>windows_gen_macros</code>, <code>windows_macros</code>, <code>windows_winmd</code>, <code>windows_winmd_macros</code> and their dependencies.</p>",
        "id": 225172878,
        "sender_full_name": "mati865",
        "timestamp": 1612451860
    },
    {
        "content": "<p>Strange that the main crate didn't document..</p>",
        "id": 225173236,
        "sender_full_name": "rylev",
        "timestamp": 1612451999
    },
    {
        "content": "<p>Hmm, generated <code>windows.rs</code> has 50k lines so I'd guess it's fine. Maybe rustdoc doesn't like cross compilation?</p>",
        "id": 225175066,
        "sender_full_name": "mati865",
        "timestamp": 1612452728
    },
    {
        "content": "<p>No, <code>windows-rs</code> running natively on <code>windows-gnu</code> gave the same results. So it must be something inside <code>windows-rs</code>.</p>",
        "id": 225175368,
        "sender_full_name": "mati865",
        "timestamp": 1612452841
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224872\">rylev</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/windows-rs.20perf/near/225158195\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> I did some local benchmarking and it seems that in the packed-simd case the optimization only catches 13% of the overlapping calls. So we're paying the price on every call only for 13% of the calls to be helped by it.</p>\n</blockquote>\n<p>Thanks for the measurements <span aria-label=\"thank you\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"thank you\">:thank_you:</span> this makes sense to me as well, as you said, for these kinds of numbers. Until/if one can redesign this coherence check, it'll only add cost to try to avoid the most expensive part of the coherence check. Maybe that additional fast reject could be even less costly for <code>packed-simd</code>, but I myself am not too worried about this yet without actual data showing that this case is actually representative in the wild (not that my opinion matters much). Last time I looked at this, it seemed like the type simplification was indeed quite fast but I hadn't measured in the aggregate, over the whole coherence check, whether there was e.g. duplicated work here (say, if we're simplifying the same types over and over and that this started to become noticeable) to still reduce the fast reject cost.</p>",
        "id": 225189813,
        "sender_full_name": "lqd",
        "timestamp": 1612458213
    },
    {
        "content": "<p>Yea the issue is that this code gets called _a lot_ so even if it's pretty fast to call it once, small changes in the perf characteristics can make big differences in the aggregate.</p>",
        "id": 225190723,
        "sender_full_name": "rylev",
        "timestamp": 1612458582
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> What's the latest on the rustdoc performance issue?</p>",
        "id": 225196737,
        "sender_full_name": "rylev",
        "timestamp": 1612461287
    },
    {
        "content": "<p>You mean get_blanket_impls? Or windows-docs-rs in general?</p>",
        "id": 225196790,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612461318
    },
    {
        "content": "<p>I don't have a way to measure performance for windows-docs-rs because it doesn't compile on Linux</p>",
        "id": 225196929,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612461370
    },
    {
        "content": "<p>Err well someone sent me the generated source a while back, I don't think I've tried to compile it yet</p>",
        "id": 225196984,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612461401
    },
    {
        "content": "<p>In general. Sorry I should have looked again at the conversations. I thought that you had figured out why memory was ballooning</p>",
        "id": 225197008,
        "sender_full_name": "rylev",
        "timestamp": 1612461413
    },
    {
        "content": "<p>Oh well there's a lot of reasons</p>",
        "id": 225197061,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612461431
    },
    {
        "content": "<p>Just generating the ast is like 7 GB</p>",
        "id": 225197096,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612461448
    },
    {
        "content": "<p>Ok I can look into this next</p>",
        "id": 225197337,
        "sender_full_name": "rylev",
        "timestamp": 1612461545
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224872\">rylev</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/windows-rs.20perf/near/225190723\">said</a>:</p>\n<blockquote>\n<p>Yea the issue is that this code gets called _a lot_ so even if it's pretty fast to call it once, small changes in the perf characteristics can make big differences in the aggregate.</p>\n</blockquote>\n<p>(maybe one can remeasure <code>fast_reject::simplify_type</code> over the whole crate, or see whether the fast reject check is doing duplicated work over all types -- probably not worth it for just <code>packed-simd</code>and we instead eat the &lt;1% hit)</p>",
        "id": 225197464,
        "sender_full_name": "lqd",
        "timestamp": 1612461585
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> here are the perf measurements: <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/windows-rs.20perf/near/223964891\">https://rust-lang.zulipchat.com/#narrow/stream/247081-t-compiler.2Fperformance/topic/windows-rs.20perf/near/223964891</a></p>",
        "id": 225202405,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612463641
    },
    {
        "content": "<p>it would also be super helpful to measure memory usage with self-profile: <a href=\"https://github.com/rust-lang/rust/issues/81348\">https://github.com/rust-lang/rust/issues/81348</a></p>",
        "id": 225202627,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612463736
    },
    {
        "content": "<p>So with the 3rd change meant to help windows-rs perf (<a href=\"https://github.com/rust-lang/rust/pull/81744\">#81744</a> -  simplifying types for fast coherence checking) merged, full builds are showing really good improvement over 1.50. On the full build of all windows metadata (representing the entire Windows API surface), builds go from ~39min on stable to ~18min30s on nightly, an improvement of roughly 53% <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>On a more real world use case, <a href=\"https://github.com/robmikh/minesweeper-rs\">minesweeper-rs</a>, the crate compiles in ~44s on stable and ~34s on nightly a roughly 23% improvement. Most of the gain is already on beta which compiles in ~35s.</p>",
        "id": 226361423,
        "sender_full_name": "rylev",
        "timestamp": 1613381683
    },
    {
        "content": "<p>Here's the latest state of perf data:</p>\n<div class=\"codehilite\"><pre><span></span><code>+--------------------------------------------------+-----------+-----------------+----------+------------+\n| Item                                             | Self time | % of total time | Time     | Item count |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| LLVM_module_codegen_emit_obj                     | 13.58s    | 19.710          | 13.58s   | 151        |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| typeck                                           | 8.57s     | 12.443          | 8.92s    | 53429      |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| mir_borrowck                                     | 5.14s     | 7.463           | 9.59s    | 53429      |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| LLVM_passes                                      | 4.36s     | 6.326           | 4.36s    | 1          |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| codegen_module                                   | 4.05s     | 5.884           | 4.65s    | 151        |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| mir_built                                        | 2.16s     | 3.132           | 2.49s    | 53429      |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| optimized_mir                                    | 1.96s     | 2.850           | 4.05s    | 48984      |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| expand_crate                                     | 1.88s     | 2.722           | 1.88s    | 1          |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| mir_drops_elaborated_and_const_checked           | 1.49s     | 2.167           | 1.59s    | 53429      |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| check_item_well_formed                           | 1.38s     | 1.999           | 2.48s    | 51415      |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| evaluate_obligation                              | 1.21s     | 1.757           | 1.22s    | 94039      |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| check_impl_item_well_formed                      | 1.05s     | 1.528           | 1.65s    | 55461      |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| codegen_fulfill_obligation                       | 925.94ms  | 1.344           | 953.17ms | 20536      |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| hir_lowering                                     | 900.64ms  | 1.307           | 900.64ms | 1          |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| incr_comp_encode_serialized_dep_graph            | 709.61ms  | 1.030           | 709.61ms | 1          |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| link_rlib                                        | 685.19ms  | 0.994           | 685.19ms | 1          |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| generate_crate_metadata                          | 681.29ms  | 0.989           | 7.32s    | 1          |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| specialization_graph_of                          | 667.50ms  | 0.969           | 719.10ms | 20         |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| check_mod_privacy                                | 666.44ms  | 0.967           | 684.08ms | 78         |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| encode_query_results_for                         | 634.50ms  | 0.921           | 634.50ms | 24         |\n</code></pre></div>",
        "id": 226362832,
        "sender_full_name": "rylev",
        "timestamp": 1613382519
    },
    {
        "content": "<p>Besides codegen, it looks like type checking and borrow checking are the biggest culprits. Thought it's interesting to see <code>generate_crate_metadata</code> having a time of 7.32 seconds.</p>",
        "id": 226363111,
        "sender_full_name": "rylev",
        "timestamp": 1613382710
    },
    {
        "content": "<p><code>generate_crate_metadata</code> invokes several queries for the first time that will also be invoked during codegen.</p>",
        "id": 226363253,
        "sender_full_name": "bjorn3",
        "timestamp": 1613382799
    },
    {
        "content": "<p>So checking that items are well formed is fairly expensive, and the code requires we do it often. I'm not sure this is a place we can easily win performance though.</p>",
        "id": 226374235,
        "sender_full_name": "rylev",
        "timestamp": 1613389833
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> good news. Documenting the <code>windows</code> crate is <em>much</em> faster now than it was in the past. I can fully document the entire Windows API surface in ~11 minutes. This was around 40 something minutes before. <a href=\"https://gist.github.com/rylev/700deb0576f655b6f019d05a03fb5099\">Here are the timings when running with <code>-Zself-profile</code></a>. Looks like a vast majority of the time is inside of <code>render_item</code>.</p>",
        "id": 226950539,
        "sender_full_name": "rylev",
        "timestamp": 1613733909
    },
    {
        "content": "<p>I've also added the -Ztime-passes output</p>",
        "id": 226952225,
        "sender_full_name": "rylev",
        "timestamp": 1613735039
    },
    {
        "content": "<p>11 minutes spent writing html, wow.</p>",
        "id": 226954119,
        "sender_full_name": "nagisa",
        "timestamp": 1613736277
    },
    {
        "content": "<p>that sounds like a lot of html.</p>",
        "id": 226954133,
        "sender_full_name": "nagisa",
        "timestamp": 1613736290
    },
    {
        "content": "<p>Itâs a few gigabytes.</p>",
        "id": 226954643,
        "sender_full_name": "rylev",
        "timestamp": 1613736606
    },
    {
        "content": "<p>3.7GB to be more precise</p>",
        "id": 226956832,
        "sender_full_name": "rylev",
        "timestamp": 1613737939
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>Finished dev [unoptimized + debuginfo] target(s) in 9m 55s\n</code></pre></div>\n\n<p>Total cpu time: 604.8735123s</p>\n</blockquote>\n<p>Seems to be entirely single-threaded.</p>",
        "id": 226956917,
        "sender_full_name": "The 8472",
        "timestamp": 1613738000
    },
    {
        "content": "<p>Yep 595s actual time vs 605s cpu time</p>",
        "id": 226957210,
        "sender_full_name": "rylev",
        "timestamp": 1613738192
    },
    {
        "content": "<p>I'd like to see if we can parallelize the main loop of rustdoc: <a href=\"https://github.com/rust-lang/rust/blob/a73c2e555c26ef0c8b98c91c97a7d24b7017267f/src/librustdoc/formats/renderer.rs#L84-L109\">https://github.com/rust-lang/rust/blob/a73c2e555c26ef0c8b98c91c97a7d24b7017267f/src/librustdoc/formats/renderer.rs#L84-L109</a></p>",
        "id": 226957262,
        "sender_full_name": "rylev",
        "timestamp": 1613738234
    },
    {
        "content": "<p>/me does a very quick-n-dirty check</p>",
        "id": 226957401,
        "sender_full_name": "nagisa",
        "timestamp": 1613738323
    },
    {
        "content": "<p>Looking at the code likely the most troublesome thing there is how the main loop discovers new things to render as it renders other things.</p>",
        "id": 226957858,
        "sender_full_name": "nagisa",
        "timestamp": 1613738624
    },
    {
        "content": "<p>rather than figuring this ahead-of-time.</p>",
        "id": 226957869,
        "sender_full_name": "nagisa",
        "timestamp": 1613738632
    },
    {
        "content": "<p>As a very straightforward change you could probably hack something together with MPMC channels?</p>",
        "id": 226958008,
        "sender_full_name": "nagisa",
        "timestamp": 1613738724
    },
    {
        "content": "<p>Yea I think I'll try that</p>",
        "id": 226958143,
        "sender_full_name": "rylev",
        "timestamp": 1613738794
    },
    {
        "content": "<p>Just need to figure out the best way to not spawn thousands of threads.</p>",
        "id": 226958465,
        "sender_full_name": "rylev",
        "timestamp": 1613738936
    },
    {
        "content": "<p>there's a rayon::spawn, and librustdoc already depends on rayon.</p>",
        "id": 226958512,
        "sender_full_name": "nagisa",
        "timestamp": 1613738966
    },
    {
        "content": "<p>Ah great!</p>",
        "id": 226958543,
        "sender_full_name": "rylev",
        "timestamp": 1613738993
    },
    {
        "content": "<p>and it uses mpmc under the hood, so you can just have tasks spawning more tasks</p>",
        "id": 226958595,
        "sender_full_name": "The 8472",
        "timestamp": 1613739007
    },
    {
        "content": "<p>Wow, I'm surprised collect_trait_impls takes so little time. I could have sworn it was taking something ridiculous like 30 minutes before. Is that something you fixed?</p>",
        "id": 226965885,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613743055
    },
    {
        "content": "<p>And yes parallelizing render sounds feasible</p>",
        "id": 226965976,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613743096
    },
    {
        "content": "<p>I also expect <code>fn item</code> to be super inefficient, that might be worth looking into</p>",
        "id": 226966420,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613743289
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I believe <a href=\"https://github.com/rust-lang/rust/pull/81744\">https://github.com/rust-lang/rust/pull/81744</a> would have a big positive impact on <code>collect_trait_impls</code></p>",
        "id": 226967020,
        "sender_full_name": "rylev",
        "timestamp": 1613743564
    },
    {
        "content": "<p>Unfortunately paralellizing the render won't be super easy as a lot of things aren't <code>Send</code> currently.</p>",
        "id": 226967087,
        "sender_full_name": "rylev",
        "timestamp": 1613743597
    },
    {
        "content": "<p>I expect <a href=\"https://github.com/rust-lang/rust/pull/82020\">https://github.com/rust-lang/rust/pull/82020</a> to help with that</p>",
        "id": 226967634,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613743877
    },
    {
        "content": "<p>it's mostly Rcs and RefCells, right?</p>",
        "id": 226967658,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613743883
    },
    {
        "content": "<p>Yea mostly but also Spans</p>",
        "id": 226967810,
        "sender_full_name": "rylev",
        "timestamp": 1613743938
    },
    {
        "content": "<p>You'll need <code>cfg(parallel_compiler)</code>.</p>",
        "id": 226967825,
        "sender_full_name": "nagisa",
        "timestamp": 1613743944
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224872\">rylev</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/windows-rs.20perf/near/226967810\">said</a>:</p>\n<blockquote>\n<p>Yea mostly but also Spans</p>\n</blockquote>\n<p>oh hmm, you mean <code>clean::Span</code>?</p>",
        "id": 226967856,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613743963
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/windows-rs.20perf/near/226967825\">said</a>:</p>\n<blockquote>\n<p>You'll need <code>cfg(parallel_compiler)</code>.</p>\n</blockquote>\n<p>that won't help with rustdoc</p>",
        "id": 226967873,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613743971
    },
    {
        "content": "<p>You need <code>parallel_compiler</code> for spans to become send.</p>",
        "id": 226967928,
        "sender_full_name": "nagisa",
        "timestamp": 1613744001
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_span/lib.rs.html#323\">https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_span/lib.rs.html#323</a></p>",
        "id": 226968025,
        "sender_full_name": "nagisa",
        "timestamp": 1613744044
    },
    {
        "content": "<p>I should likely note that there are (iirc) bugs with the handling of parallelism with that turned on, in particular -j1 doesn't actually work, so we'll want to be cautious about enabling it for rustdoc (and we can't really do so in production without enabling it for the compiler itself too).</p>",
        "id": 226968113,
        "sender_full_name": "simulacrum",
        "timestamp": 1613744085
    },
    {
        "content": "<blockquote>\n<p>there are (iirc) bugs with the handling of parallelism with that turned on</p>\n</blockquote>\n<p>do you mean <a href=\"https://github.com/rust-lang/rust/issues/75760\">https://github.com/rust-lang/rust/issues/75760</a>? That's just different ordering for diagnostics I think, it should be fine for rustdoc</p>",
        "id": 226968315,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613744176
    },
    {
        "content": "<p>but yeah enabling for anything other than testing would be hard</p>",
        "id": 226968370,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613744211
    },
    {
        "content": "<p>No. That's not what I mean; I don't have an issue reference on hand, but I don't think we fixed the problems during the last work on the parallel compiler - we still had bugs around the jobserver token handling. (I am a bit confused why you point at that issue given that I specifically call out -j1 handling).</p>",
        "id": 226968557,
        "sender_full_name": "simulacrum",
        "timestamp": 1613744294
    },
    {
        "content": "<p>I thought -j1 was the default unless you pass -Z threads=n?</p>",
        "id": 226968824,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613744406
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/windows-rs.20perf/near/226966420\">said</a>:</p>\n<blockquote>\n<p>I also expect <code>fn item</code> to be super inefficient, that might be worth looking into</p>\n</blockquote>\n<p>it would be useful to add timings around <a href=\"https://github.com/rust-lang/rust/blob/a73c2e555c26ef0c8b98c91c97a7d24b7017267f/src/librustdoc/html/render/mod.rs#L663\">https://github.com/rust-lang/rust/blob/a73c2e555c26ef0c8b98c91c97a7d24b7017267f/src/librustdoc/html/render/mod.rs#L663</a></p>",
        "id": 226968957,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613744490
    },
    {
        "content": "<p>I don't think I can succinctly explain it beyond what I've already said. When parallel_compiler cfg is enabled, the jobserver integration currently does not work as it should in all cases; I consider this a blocker for turning it on in \"prod\". Fixing it is relatively non-trivial.</p>",
        "id": 226969185,
        "sender_full_name": "simulacrum",
        "timestamp": 1613744578
    },
    {
        "content": "<p>Would it be possible to create a type that represents the information we need from span and which is Send? We could then translate to that type before moving to another thread</p>",
        "id": 226969667,
        "sender_full_name": "rylev",
        "timestamp": 1613744761
    },
    {
        "content": "<p>I think the info needed is \"all of <code>Span</code>\" unfortunately</p>",
        "id": 226969844,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613744821
    },
    {
        "content": "<p>you can look where the <code>rustdoc</code> spans are used, I specifically went from that other type to the new one because it used a ton more memory</p>",
        "id": 226969898,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613744842
    },
    {
        "content": "<p>one sec</p>",
        "id": 226969901,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613744843
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/79957#issuecomment-743912491\">https://github.com/rust-lang/rust/pull/79957#issuecomment-743912491</a></p>",
        "id": 226969960,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613744867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> do you think <a href=\"https://github.com/rust-lang/rust/pull/80339\">https://github.com/rust-lang/rust/pull/80339</a> would help?</p>",
        "id": 226970134,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613744925
    },
    {
        "content": "<p>Looks like it should. Unfortunately I believe <code>Item::attributes</code> also have spans embedded in them</p>",
        "id": 226970291,
        "sender_full_name": "rylev",
        "timestamp": 1613744997
    },
    {
        "content": "<p>it would be nice to calculate those on demand too</p>",
        "id": 226970399,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613745025
    },
    {
        "content": "<p>none of this seems insurmountable, it just needs a lot of work <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 226970428,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613745036
    },
    {
        "content": "<p>I can help work on it if we break it up into smaller pieces</p>",
        "id": 226970499,
        "sender_full_name": "rylev",
        "timestamp": 1613745066
    },
    {
        "content": "<p>I guess getting <a href=\"https://github.com/rust-lang/rust/pull/80339\">https://github.com/rust-lang/rust/pull/80339</a> merged is a good first step</p>",
        "id": 226970543,
        "sender_full_name": "rylev",
        "timestamp": 1613745079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224872\">rylev</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/windows-rs.20perf/near/226970543\">said</a>:</p>\n<blockquote>\n<p>I guess getting <a href=\"https://github.com/rust-lang/rust/pull/80339\">https://github.com/rust-lang/rust/pull/80339</a> merged is a good first step</p>\n</blockquote>\n<p>unfortunately it has regressions and I haven't figured out why</p>",
        "id": 226970578,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613745094
    },
    {
        "content": "<p>something to do with inner vs outer spans</p>",
        "id": 226970596,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613745101
    },
    {
        "content": "<p><a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Get.20inner.20span.2C.20not.20outer.20span\">https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/Get.20inner.20span.2C.20not.20outer.20span</a></p>",
        "id": 226970715,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613745135
    },
    {
        "content": "<p>That's unfortunate...</p>",
        "id": 226971042,
        "sender_full_name": "rylev",
        "timestamp": 1613745264
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> may have taken a crack at attributes at some point, let me try to find it</p>",
        "id": 226971172,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613745332
    },
    {
        "content": "<p>hmm, maybe not</p>",
        "id": 226971290,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613745368
    },
    {
        "content": "<p>let me ask a larger question: why are <code>Spans</code> not <code>Send</code> but <code>TyCtxt</code> is?</p>",
        "id": 226971361,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613745405
    },
    {
        "content": "<p>we'll need a TyCtxt anyway to recompute them where they're needed</p>",
        "id": 226971392,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613745416
    },
    {
        "content": "<p>Is <code>TyCtxt</code> <code>Send</code>? That might be a bigger issue</p>",
        "id": 226971499,
        "sender_full_name": "rylev",
        "timestamp": 1613745466
    },
    {
        "content": "<p>Oh I did, but never opened the PR because I'm not convinced by the current result</p>",
        "id": 226971506,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1613745470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224872\">rylev</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/windows-rs.20perf/near/226971499\">said</a>:</p>\n<blockquote>\n<p>Is <code>TyCtxt</code> <code>Send</code>? That might be a bigger issue</p>\n</blockquote>\n<p>Without <code>cfg(parallel_compiler)</code> probably not</p>",
        "id": 226971973,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613745664
    },
    {
        "content": "<p>yup: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#impl-Send\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#impl-Send</a></p>",
        "id": 226972055,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613745698
    },
    {
        "content": "<p>what you <em>could</em> do though is to move all the IO into worker threads</p>",
        "id": 226972238,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613745784
    },
    {
        "content": "<p>and keep working on the single-threaded stuff while the IO runs in the background</p>",
        "id": 226972263,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613745794
    },
    {
        "content": "<p>yes maybe it's a good idea to see how long the I/O is taking vs the actual rendering</p>",
        "id": 226972293,
        "sender_full_name": "rylev",
        "timestamp": 1613745818
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> should we open an issue about the performance of rendering?  It'd be nice to capture some of this in an issue</p>",
        "id": 226972604,
        "sender_full_name": "rylev",
        "timestamp": 1613745956
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> go for it :)</p>",
        "id": 226972629,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613745963
    },
    {
        "content": "<p>I will be busy this morning fixing <a href=\"https://github.com/rust-lang/rust/issues/82284\">https://github.com/rust-lang/rust/issues/82284</a></p>",
        "id": 226972675,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613745977
    },
    {
        "content": "<p>Hmm looks like we're already writing file contents on another thread on Windows...</p>",
        "id": 226973002,
        "sender_full_name": "rylev",
        "timestamp": 1613746126
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/8599bff5a3556059817503030e248507706e96b4/src/librustdoc/docfs.rs#L64-L77\">https://github.com/rust-lang/rust/blob/8599bff5a3556059817503030e248507706e96b4/src/librustdoc/docfs.rs#L64-L77</a></p>",
        "id": 226973034,
        "sender_full_name": "rylev",
        "timestamp": 1613746149
    },
    {
        "content": "<p>maybe <code>sync_only</code> gets set somewhere?</p>",
        "id": 226973109,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613746194
    },
    {
        "content": "<p>I believe it only gets set in init</p>",
        "id": 226973301,
        "sender_full_name": "rylev",
        "timestamp": 1613746264
    },
    {
        "content": "<p>yeah that looks right</p>",
        "id": 226973417,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613746320
    },
    {
        "content": "<p>I still think the first step is to see what actually takes so long</p>",
        "id": 226973505,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613746350
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/82294\">https://github.com/rust-lang/rust/issues/82294</a></p>",
        "id": 226977787,
        "sender_full_name": "rylev",
        "timestamp": 1613748101
    },
    {
        "content": "<p>If you want to use <code>-Zself-profiler</code>, the easiest thing might be to drop a few calls to <code>tcx.sess.prof.generic_activity()</code> around bits of code to get timing data (<a href=\"https://github.com/rust-lang/rust/blob/8fe989dd768f5dfdb0fc90933f3f74fa4579fefd/src/librustdoc/passes/collect_trait_impls.rs#L42\">example</a>).</p>",
        "id": 226980075,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1613748990
    },
    {
        "content": "<p>Yep, that's what I'm working on now <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 226981196,
        "sender_full_name": "rylev",
        "timestamp": 1613749373
    },
    {
        "content": "<p>It's mostly the Rcs and RefCells, right?</p>",
        "id": 226987322,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613751529
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/82020\">https://github.com/rust-lang/rust/pull/82020</a> should help with that</p>",
        "id": 226987323,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613751529
    },
    {
        "content": "<p>So two places that are taking a bunch of time: <a href=\"https://github.com/rust-lang/rust/blob/8599bff5a3556059817503030e248507706e96b4/src/librustdoc/html/render/mod.rs#L692-L697\"><code>html::render::write_shared</code></a> and <a href=\"https://github.com/rust-lang/rust/blob/8599bff5a3556059817503030e248507706e96b4/src/librustdoc/html/layout.rs#L37\"><code>html::layout::render</code></a></p>",
        "id": 226990558,
        "sender_full_name": "rylev",
        "timestamp": 1613752673
    },
    {
        "content": "<p>The latter is interested because it's just creating strings so just doing heap allocation (and creating temporary collections to hold strings)</p>",
        "id": 226990679,
        "sender_full_name": "rylev",
        "timestamp": 1613752709
    },
    {
        "content": "<p>I did notice that rustdoc allocates about 5x as much memory as it has peak RSS</p>",
        "id": 226991345,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613752962
    },
    {
        "content": "<p>which seems to imply a lot of temporary allocations</p>",
        "id": 226991372,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613752972
    },
    {
        "content": "<p>actually <span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> this explains why the IO isn't parallel: write_shared is called while the single-threaded lock is active</p>",
        "id": 226991499,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613753026
    },
    {
        "content": "<p>The code might be uglier, but I wonder if using <code>write!</code> instead of <code>format!</code> could really help here.</p>",
        "id": 226991500,
        "sender_full_name": "rylev",
        "timestamp": 1613753026
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/8599bff5a3556059817503030e248507706e96b4/src/librustdoc/html/render/mod.rs#L519\">https://github.com/rust-lang/rust/blob/8599bff5a3556059817503030e248507706e96b4/src/librustdoc/html/render/mod.rs#L519</a></p>",
        "id": 226991526,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613753037
    },
    {
        "content": "<p>getting rid of that lock might be a good starting point :)</p>",
        "id": 226991592,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613753059
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/windows-rs.20perf/near/226991499\">said</a>:</p>\n<blockquote>\n<p>actually <span class=\"user-mention silent\" data-user-id=\"224872\">rylev</span> this explains why the IO isn't parallel: write_shared is called while the single-threaded lock is active</p>\n</blockquote>\n<p>Yep but this is just the start of rendering, there's other I/O that doesn't happen when that lock is active</p>",
        "id": 226991617,
        "sender_full_name": "rylev",
        "timestamp": 1613753071
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/windows-rs.20perf/near/226991592\">said</a>:</p>\n<blockquote>\n<p>getting rid of that lock might be a good starting point :)</p>\n</blockquote>\n<p>Yea but then I need to understand why it's there in the first place.</p>",
        "id": 226991655,
        "sender_full_name": "rylev",
        "timestamp": 1613753091
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224872\">rylev</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/windows-rs.20perf/near/226991655\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/windows-rs.20perf/near/226991592\">said</a>:</p>\n<blockquote>\n<p>getting rid of that lock might be a good starting point :)</p>\n</blockquote>\n<p>Yea but then I need to understand why it's there in the first place.</p>\n</blockquote>\n<p>welcome to rustdoc <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 226991698,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613753108
    },
    {
        "content": "<p>It seems like this is preventing multiple instances of rustdoc running at the same time</p>",
        "id": 226991723,
        "sender_full_name": "rylev",
        "timestamp": 1613753116
    },
    {
        "content": "<p>oh yeah running rustdoc in parallel leads to a bad time <a href=\"https://github.com/rust-lang/cargo/pull/4977#issuecomment-360312443\">https://github.com/rust-lang/cargo/pull/4977#issuecomment-360312443</a></p>",
        "id": 226991787,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613753145
    },
    {
        "content": "<p>err actually this was the issue I wanted <a href=\"https://github.com/rust-lang/rust/issues/30220\">https://github.com/rust-lang/rust/issues/30220</a></p>",
        "id": 226992018,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613753233
    },
    {
        "content": "<p>it sounds like speeding up <code>render</code> will be easier, so that seems like a good place to start</p>",
        "id": 226992175,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613753298
    },
    {
        "content": "<p>I'm fine with using <code>write!</code></p>",
        "id": 226992181,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613753302
    },
    {
        "content": "<p>Another possibility is to use a BufWriter directly so it doesn't have to be copied as much. Not sure if that would help much in practice though.</p>",
        "id": 226992931,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613753647
    },
    {
        "content": "<p>You can also just <code>String::with_capacity</code>, if you dont wanna thread file handles in and out of functions and stick to returning strings</p>",
        "id": 226999588,
        "sender_full_name": "Lokathor",
        "timestamp": 1613756351
    },
    {
        "content": "<p>(I'm not familiar with the code ignore me if that's already being done)</p>",
        "id": 226999648,
        "sender_full_name": "Lokathor",
        "timestamp": 1613756385
    },
    {
        "content": "<p>I've changed the rendering code to use <code>write!</code> but I'm now getting a panic...\"thread 'rustc' panicked at 'Deref section without derived id', src\\librustdoc\\html\\render\\mod.rs:4451:22\"</p>",
        "id": 227000877,
        "sender_full_name": "rylev",
        "timestamp": 1613756912
    },
    {
        "content": "<p>No idea why changing how we're generating a rendered strings would cause this. I'll push my code</p>",
        "id": 227000917,
        "sender_full_name": "rylev",
        "timestamp": 1613756930
    },
    {
        "content": "<p>I must have changed a call to a helper function, but I don't see it</p>",
        "id": 227001144,
        "sender_full_name": "rylev",
        "timestamp": 1613757012
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/compare/master...rylev:rustdoc-writeln\">https://github.com/rust-lang/rust/compare/master...rylev:rustdoc-writeln</a></p>",
        "id": 227001169,
        "sender_full_name": "rylev",
        "timestamp": 1613757023
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224872\">rylev</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/windows-rs.20perf/near/227000877\">said</a>:</p>\n<blockquote>\n<p>I've changed the rendering code to use <code>write!</code> but I'm now getting a panic...\"thread 'rustc' panicked at 'Deref section without derived id', src\\librustdoc\\html\\render\\mod.rs:4451:22\"</p>\n</blockquote>\n<p>that sounds like <a href=\"https://github.com/rust-lang/rust/issues/81395\">https://github.com/rust-lang/rust/issues/81395</a></p>",
        "id": 227001724,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613757231
    },
    {
        "content": "<p>Yea but it works fine without my changes</p>",
        "id": 227001967,
        "sender_full_name": "rylev",
        "timestamp": 1613757325
    },
    {
        "content": "<p>right, yeah, just trying to get a feel for what could be going wrong</p>",
        "id": 227001993,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613757338
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>stack backtrace:\n   0: std::panicking::begin_panic_handler\n             at C:\\Users\\ryanl\\Code\\rust\\library\\std\\src\\panicking.rs:493\n   1: core::panicking::panic_fmt\n             at C:\\Users\\ryanl\\Code\\rust\\library\\core\\src\\panicking.rs:92\n   2: core::option::expect_failed\n             at C:\\Users\\ryanl\\Code\\rust\\library\\core\\src\\option.rs:1292\n   3: core::option::Option::expect\n             at C:\\Users\\ryanl\\Code\\rust\\library\\core\\src\\option.rs:349\n   4: rustdoc::html::render::sidebar_deref_methods\n             at C:\\Users\\ryanl\\Code\\rust\\src\\librustdoc\\html\\render\\mod.rs:4449\n   5: rustdoc::html::render::sidebar_assoc_items\n             at C:\\Users\\ryanl\\Code\\rust\\src\\librustdoc\\html\\render\\mod.rs:4333\n   6: rustdoc::html::render::sidebar_struct\n             at C:\\Users\\ryanl\\Code\\rust\\src\\librustdoc\\html\\render\\mod.rs:4503\n   7: rustdoc::html::render::print_sidebar\n             at C:\\Users\\ryanl\\Code\\rust\\src\\librustdoc\\html\\render\\mod.rs:4173\n   8: rustdoc::html::render::{{impl}}::render_item::{{closure}}\n             at C:\\Users\\ryanl\\Code\\rust\\src\\librustdoc\\html\\render\\mod.rs:1583\n   9: core::ops::function::FnOnce::call_once\n             at C:\\Users\\ryanl\\Code\\rust\\library\\core\\src\\ops\\function.rs:227\n  10: rustdoc::html::format::{{impl}}::print\n             at C:\\Users\\ryanl\\Code\\rust\\src\\librustdoc\\html\\format.rs:34\n  11: rustdoc::html::format::Buffer::to_display&lt;closure-1&gt;\n             at C:\\Users\\ryanl\\Code\\rust\\src\\librustdoc\\html\\format.rs:101\n  12: rustdoc::html::layout::render&lt;closure-2,closure-1&gt;\n             at C:\\Users\\ryanl\\Code\\rust\\src\\librustdoc\\html\\layout.rs:197\n  13: rustdoc::html::render::Context::render_item\n             at C:\\Users\\ryanl\\Code\\rust\\src\\librustdoc\\html\\render\\mod.rs:1580\n  14: rustdoc::html::render::{{impl}}::item\n             at C:\\Users\\ryanl\\Code\\rust\\src\\librustdoc\\html\\render\\mod.rs:662\n  15: rustdoc::formats::renderer::run_format::{{closure}}\n             at C:\\Users\\ryanl\\Code\\rust\\src\\librustdoc\\formats\\renderer.rs:71\n  16: rustc_data_structures::profiling::TimingGuard::run\n             at C:\\Users\\ryanl\\Code\\rust\\compiler\\rustc_data_structures\\src\\profiling.rs:552\n  17: rustdoc::formats::renderer::run_format&lt;rustdoc::html::render::Context&gt;\n             at C:\\Users\\ryanl\\Code\\rust\\src\\librustdoc\\formats\\renderer.rs:106\n  18: rustdoc::run_renderer&lt;rustdoc::html::render::Context&gt;\n             at C:\\Users\\ryanl\\Code\\rust\\src\\librustdoc\\lib.rs:488\n  19: rustdoc::main_options::{{closure}}::{{closure}}::{{closure}}::{{closure}}\n             at C:\\Users\\ryanl\\Code\\rust\\src\\librustdoc\\lib.rs:595\n  20: rustc_data_structures::profiling::VerboseTimingGuard::run\n             at C:\\Users\\ryanl\\Code\\rust\\compiler\\rustc_data_structures\\src\\profiling.rs:573\n  21: rustc_session::session::Session::time&lt;core::result::Result&lt;tuple&lt;&gt;, rustc_errors::ErrorReported&gt;,closure-1&gt;\n             at C:\\Users\\ryanl\\Code\\rust\\compiler\\rustc_session\\src\\utils.rs:10\n  22: rustdoc::main_options::{{closure}}::{{closure}}::{{closure}}\n             at C:\\Users\\ryanl\\Code\\rust\\src\\librustdoc\\lib.rs:584\n  23: rustc_interface::passes::{{impl}}::enter::{{closure}}\n             at C:\\Users\\ryanl\\Code\\rust\\compiler\\rustc_interface\\src\\passes.rs:749\n  24: rustc_middle::ty::context::tls::enter_context::{{closure}}\n             at C:\\Users\\ryanl\\Code\\rust\\compiler\\rustc_middle\\src\\ty\\context.rs:1714\n  25: rustc_middle::ty::context::tls::set_tlv\n             at C:\\Users\\ryanl\\Code\\rust\\compiler\\rustc_middle\\src\\ty\\context.rs:1698\n  26: rustc_middle::ty::context::tls::enter_context\n             at C:\\Users\\ryanl\\Code\\rust\\compiler\\rustc_middle\\src\\ty\\context.rs:1714\n  27: rustc_interface::passes::QueryContext::enter&lt;closure-0,core::result::Result&lt;tuple&lt;&gt;, rustc_errors::ErrorReported&gt;&gt;\n             at C:\\Users\\ryanl\\Code\\rust\\compiler\\rustc_interface\\src\\passes.rs:749\n  28: rustdoc::main_options::{{closure}}::{{closure}}\n             at C:\\Users\\ryanl\\Code\\rust\\src\\librustdoc\\lib.rs:556\n  29: rustc_interface::interface::Compiler::enter&lt;closure-0,core::result::Result&lt;tuple&lt;&gt;, rustc_errors::ErrorReported&gt;&gt;\n             at C:\\Users\\ryanl\\Code\\rust\\compiler\\rustc_interface\\src\\queries.rs:418\n  30: rustdoc::main_options::{{closure}}\n             at C:\\Users\\ryanl\\Code\\rust\\src\\librustdoc\\lib.rs:542\n  31: rustc_interface::interface::create_compiler_and_run::{{closure}}\n             at C:\\Users\\ryanl\\Code\\rust\\compiler\\rustc_interface\\src\\interface.rs:197\n  32: rustc_span::with_source_map&lt;core::result::Result&lt;tuple&lt;&gt;, rustc_errors::ErrorReported&gt;,closure-0&gt;\n             at C:\\Users\\ryanl\\Code\\rust\\compiler\\rustc_span\\src\\lib.rs:788\n  33: rustc_interface::interface::create_compiler_and_run&lt;core::result::Result&lt;tuple&lt;&gt;, rustc_errors::ErrorReported&gt;,closure-0&gt;\n             at C:\\Users\\ryanl\\Code\\rust\\compiler\\rustc_interface\\src\\interface.rs:191\n  34: rustdoc::main_options\n             at C:\\Users\\ryanl\\Code\\rust\\src\\librustdoc\\lib.rs:541\n  35: rustdoc::main_args::{{closure}}\n             at C:\\Users\\ryanl\\Code\\rust\\src\\librustdoc\\lib.rs:466\n  36: rustc_interface::util::setup_callbacks_and_run_in_thread_pool_with_globals::{{closure}}::{{closure}}\n             at C:\\Users\\ryanl\\Code\\rust\\compiler\\rustc_interface\\src\\util.rs:152\n  37: scoped_tls::ScopedKey::set&lt;rustc_span::SessionGlobals,closure-0,core::result::Result&lt;tuple&lt;&gt;, rustc_errors::ErrorReported&gt;&gt;\n             at C:\\Users\\ryanl\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\scoped-tls-1.0.0\\src\\lib.rs:137\n  38: rustc_span::with_session_globals&lt;core::result::Result&lt;tuple&lt;&gt;, rustc_errors::ErrorReported&gt;,closure-0&gt;\n             at C:\\Users\\ryanl\\Code\\rust\\compiler\\rustc_span\\src\\lib.rs:105\n  39: rustc_interface::util::setup_callbacks_and_run_in_thread_pool_with_globals::{{closure}}\n             at C:\\Users\\ryanl\\Code\\rust\\compiler\\rustc_interface\\src\\util.rs:150\n  40: rustc_interface::util::scoped_thread::{{closure}}\n             at C:\\Users\\ryanl\\Code\\rust\\compiler\\rustc_interface\\src\\util.rs:125\n</code></pre></div>",
        "id": 227002213,
        "sender_full_name": "rylev",
        "timestamp": 1613757428
    },
    {
        "content": "<p>the bit with style files looks wrong: you now write<code>&lt;script id=default-settings&gt;</code> for each file, but before it was only written once</p>",
        "id": 227002238,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613757438
    },
    {
        "content": "<p>it should be writing <code>link rel=stylesheet</code> each time</p>",
        "id": 227002316,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613757463
    },
    {
        "content": "<p>Unsurprisingly that doesn't help, but I'll push the fix</p>",
        "id": 227002615,
        "sender_full_name": "rylev",
        "timestamp": 1613757582
    },
    {
        "content": "<p>The code in my changes that's in the backtrace from the panic is <code>sidebar = Buffer::html().to_display(sidebar)</code></p>",
        "id": 227002799,
        "sender_full_name": "rylev",
        "timestamp": 1613757648
    },
    {
        "content": "<p>I have to run unfortunately.</p>",
        "id": 227002835,
        "sender_full_name": "rylev",
        "timestamp": 1613757664
    },
    {
        "content": "<p>no problem</p>",
        "id": 227002916,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613757702
    },
    {
        "content": "<p>I expect something is modifying <code>Context</code> with interior mutability somewhere</p>",
        "id": 227002952,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613757714
    },
    {
        "content": "<p>\"somewhere\" is unfortunately most of <code>render</code></p>",
        "id": 227002968,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613757721
    },
    {
        "content": "<p>it looks like <code>deref_id_map</code> is only modified in <code>render_assoc_items</code></p>",
        "id": 227003317,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613757845
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/8599bff5a3556059817503030e248507706e96b4/src/librustdoc/html/render/mod.rs#L3515\">https://github.com/rust-lang/rust/blob/8599bff5a3556059817503030e248507706e96b4/src/librustdoc/html/render/mod.rs#L3515</a></p>",
        "id": 227003369,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613757865
    },
    {
        "content": "<p>which is called from ... lots of places, oof</p>",
        "id": 227003483,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613757916
    },
    {
        "content": "<p>but yeah I suspect the order changed somehow</p>",
        "id": 227003505,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613757933
    },
    {
        "content": "<p>I think itâs because the sidebar and content are now generated in a different order</p>",
        "id": 227006276,
        "sender_full_name": "rylev",
        "timestamp": 1613759234
    },
    {
        "content": "<p>Iâll switch them when Iâm back at a computer</p>",
        "id": 227006302,
        "sender_full_name": "rylev",
        "timestamp": 1613759246
    },
    {
        "content": "<p>Looks like I was right. That fixed the panic. Iâll make a pull request once I have the time to measure the memory and performance impact.</p>",
        "id": 227028199,
        "sender_full_name": "rylev",
        "timestamp": 1613768741
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> so I went down a rabbit hole of rustdoc performance and learned some things. Unfortunately the PR I have open is unlikely to help too much (though it might worth it to keep at least some of it to reduce pressure on the allocator). Unsurprisingly, a bunch chunk of rendering time is inside <a href=\"https://github.com/rust-lang/rust/blob/8a9f7862bcfa5870a34bb54f77a03c73d1db5c37/src/librustdoc/html/render/mod.rs#L1709\"><code>print_item</code></a> specifically in <code>item_struct</code> and more specifically in <a href=\"https://github.com/rust-lang/rust/blob/8a9f7862bcfa5870a34bb54f77a03c73d1db5c37/src/librustdoc/html/render/mod.rs#L3490\"><code>render_assoc_items</code></a>. The things there that take the most time is <a href=\"https://github.com/rust-lang/rust/blob/8a9f7862bcfa5870a34bb54f77a03c73d1db5c37/src/librustdoc/html/render/mod.rs#L3741\">rendering impls</a>. In my test, rendering method's is fairly slow. Still trying to track down what is slow about other then we're just allocating a ton.</p>",
        "id": 227272357,
        "sender_full_name": "rylev",
        "timestamp": 1614003517
    },
    {
        "content": "<p>is it being called a lot? or is it slow in absolute terms?</p>",
        "id": 227272505,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614003571
    },
    {
        "content": "<p>Which \"it\" do you mean?</p>",
        "id": 227272540,
        "sender_full_name": "rylev",
        "timestamp": 1614003588
    },
    {
        "content": "<p><code>render_impl</code></p>",
        "id": 227272560,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614003597
    },
    {
        "content": "<p>It'd being called quite a bit (~60K times) but seems slower than it should be about 0.2 millseconds per call</p>",
        "id": 227273002,
        "sender_full_name": "rylev",
        "timestamp": 1614003744
    },
    {
        "content": "<p>I can get exactl numbers in a second</p>",
        "id": 227273047,
        "sender_full_name": "rylev",
        "timestamp": 1614003762
    },
    {
        "content": "<p>I guess I have no intuition for performance then <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> that seems reasonable to me</p>",
        "id": 227273070,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614003772
    },
    {
        "content": "<p>sure, thanks :)</p>",
        "id": 227273081,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614003778
    },
    {
        "content": "<p>I would be interested to see how much of that is from <code>Markdown::into_string</code></p>",
        "id": 227273159,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614003806
    },
    {
        "content": "<p>everything else looks like \"just\" lots of allocations</p>",
        "id": 227273211,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614003830
    },
    {
        "content": "<p>0.2ms per call to make a string of html does feel quite slow.</p>",
        "id": 227273214,
        "sender_full_name": "nagisa",
        "timestamp": 1614003831
    },
    {
        "content": "<p>I wonder if its gonna have inside of it an invocation of something quadratic over number of items in the crate or something.</p>",
        "id": 227273318,
        "sender_full_name": "nagisa",
        "timestamp": 1614003860
    },
    {
        "content": "<p>So it doesn't seem so far like there's going to be one thing that will make things better.</p>",
        "id": 227273423,
        "sender_full_name": "rylev",
        "timestamp": 1614003901
    },
    {
        "content": "<p>(is <code>render_impl</code> as slow per iteration if you only document a portion of windows-rs?)</p>",
        "id": 227273537,
        "sender_full_name": "nagisa",
        "timestamp": 1614003940
    },
    {
        "content": "<p>In my test <code>render_impl</code> gets called 63231 times and takes 2.45 seconds total. That's pretty slow</p>",
        "id": 227273897,
        "sender_full_name": "rylev",
        "timestamp": 1614004053
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/windows-rs.20perf/near/227273537\">said</a>:</p>\n<blockquote>\n<p>(is <code>render_impl</code> as slow per iteration if you only document a portion of windows-rs?)</p>\n</blockquote>\n<p>I can check if it scales linearly</p>",
        "id": 227273940,
        "sender_full_name": "rylev",
        "timestamp": 1614004073
    },
    {
        "content": "<p>Yes it looks like it scales roughly linerarly (each iteration takes just as long regardless of the number of items)</p>",
        "id": 227274519,
        "sender_full_name": "rylev",
        "timestamp": 1614004272
    },
    {
        "content": "<p>I believe in order to have an impact on rustdoc html rendering performance, we'll need to audit the entire subgraph or calls to allocating functions. It looks like most of the time is taken in allocation (though I've not been able to directly verify this yet). I've made a branch that has a lot of profile calls in it which can help show where time is being taken: <a href=\"https://github.com/rylev/rust/compare/master...rylev:rustdoc-investigation?expand=1\">https://github.com/rylev/rust/compare/master...rylev:rustdoc-investigation?expand=1</a></p>",
        "id": 227307879,
        "sender_full_name": "rylev",
        "timestamp": 1614016032
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 227309460,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614016596
    },
    {
        "content": "<p>That sounds like about what I'd expect, yeah.</p>",
        "id": 227309542,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614016627
    },
    {
        "content": "<p>If you want to make a PR with the timing changes that sounds useful :) I see it depends on the changes to write! but it can get merged after that</p>",
        "id": 227309543,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614016627
    },
    {
        "content": "<p>I'm not sure how useful some of these will be in the general case, but I can clean it up and we can merge a subset at least.</p>",
        "id": 227309838,
        "sender_full_name": "rylev",
        "timestamp": 1614016733
    },
    {
        "content": "<p>Would it be worthwhile to let <code>render_impl</code> and friends write into a <code>Write</code> where the <code>Write</code> is a BufWriter of the File we want rustdoc to generate? I think that would <br>\na) reduce peak memory usage since we can flush to the file in chunks<br>\nb) reduce reallocations that (I think) are occuring a lot especially with huge crates like windows-rs</p>\n<p>From a quick glance at the code, the <code>Buffer</code>abstraction could probably be modified to write into the <code>Write</code>mentioned above, instead of into its own String.</p>\n<p>(I haven't profiled the code, just lurking here)</p>",
        "id": 227312944,
        "sender_full_name": "Simon Vandel Sillesen",
        "timestamp": 1614017983
    },
    {
        "content": "<p>I think this would be interesting to try. I think it'd be especially compelling if we could try to get memory usage down, but I'm not sure anymore that our memory problems are from allocations from the html rendering since these files get handled one at a time.</p>",
        "id": 227453016,
        "sender_full_name": "rylev",
        "timestamp": 1614095820
    },
    {
        "content": "<p>you can see the memory usage with -Z time-passes</p>",
        "id": 227455414,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614096363
    },
    {
        "content": "<p>IIRC something like 17 GB comes from either rustc or <code>core</code>, and render only uses about 3 GB</p>",
        "id": 227455512,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614096381
    },
    {
        "content": "<p>Yea, it's clear that rendering is not the main culprit, but we shouldn't refrain from looking into an issue just because it's not the worse offender. Render uses more memory than it absolutely needs to and therefore we should probably bring that number down, even if it won't fix the largest case of over use of memory in rustdoc.</p>",
        "id": 227456175,
        "sender_full_name": "rylev",
        "timestamp": 1614096569
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> what do you want to do about <a href=\"https://github.com/rust-lang/rust/pull/82397#issuecomment-784325830\">https://github.com/rust-lang/rust/pull/82397#issuecomment-784325830</a> ?</p>",
        "id": 227467989,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614100702
    },
    {
        "content": "<p>I'll be honest, I'm not super experienced with performance work so I'm probably not the best reviewer</p>",
        "id": 227468028,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614100721
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I think the right move is to close for now. We've learned quite a bit, but those changes don't seem to have a material positive impact of the performance.</p>",
        "id": 227468297,
        "sender_full_name": "rylev",
        "timestamp": 1614100821
    },
    {
        "content": "<p>Ok, sounds good. Thank you for working on it :)</p>",
        "id": 227468353,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614100846
    },
    {
        "content": "<p>Yeah rylev this is all very good stuff and I'm super happy someone has had the time to do these things.</p>",
        "id": 227474252,
        "sender_full_name": "Lokathor",
        "timestamp": 1614102973
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> Another thing that might be worth trying: can you benchmark a few allocators on Windows, and see if switching to mimalloc (for instance) is substantially faster?</p>",
        "id": 227889561,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614322561
    },
    {
        "content": "<p>Yes , that's on my list of things to try.</p>",
        "id": 227901197,
        "sender_full_name": "rylev",
        "timestamp": 1614330917
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> fyi <span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> suggested using <a href=\"https://github.com/japaric/ufmt\">https://github.com/japaric/ufmt</a> instead of <code>write!</code> directly as a way to speed up <a href=\"https://github.com/rust-lang/rust/pull/82397\">https://github.com/rust-lang/rust/pull/82397</a>. It avoids panics/result and also optimizes for code size over speed.</p>",
        "id": 229153296,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615089151
    },
    {
        "content": "<p>sorry, it optimizes for speed over compile time and code size. i also mainly mention it because it was mentioned that the reason it was too slow was the <code>write!</code> formatter invocations â which sounds like the exact problem.</p>\n<p>that said, it was a drive by comment, i suspect it's worth looking into if it's as easy of a replacement as it seems like it might be, but it's hare to actually endorse given that i have very little context here at best <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 229153389,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1615089273
    },
    {
        "content": "<p>I should note that <code>write!</code> itself, if it can be avoided via simply using <code>.write()</code>, can have a profound impact: <a href=\"https://github.com/rust-lang/rust/issues/10761\">https://github.com/rust-lang/rust/issues/10761</a></p>",
        "id": 236085535,
        "sender_full_name": "Jubilee",
        "timestamp": 1619376828
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> Wow.</p>",
        "id": 236119234,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619411793
    },
    {
        "content": "<p>I have some code that makes fairly extensive use of <code>write!</code>. It'd definitely be nice to have that special-case the \"no formatting to do\" case and skip the formatting machinery.</p>",
        "id": 236119249,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619411819
    },
    {
        "content": "<p>yeah I tried to PR a start to something like that but I got overwhelmed by \"it's actually harder than it looks\".</p>",
        "id": 236119277,
        "sender_full_name": "Jubilee",
        "timestamp": 1619411860
    },
    {
        "content": "<p>Wasn't there a similar change to the format machinery to do the same thing?</p>",
        "id": 236119339,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619411888
    },
    {
        "content": "<p>Something about making <code>fmt::Arguments</code> special-case the non-formatting case?</p>",
        "id": 236119388,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619411923
    }
]