[
    {
        "content": "<p>From what I can tell <code>rustc_span::Span</code> is very frequently used and has a size of 8 bytes without a niche.</p>\n<p>Considering how many parts of the compiler use <code>Option&lt;Span&gt;</code> this seems like 4 to 8 lost bytes here</p>",
        "id": 205955267,
        "sender_full_name": "lcnr",
        "timestamp": 1596572355
    },
    {
        "content": "<p>Did someone already try to put a <code>NonZeroX</code> in there or is interested to try this while already being more familiar which how it works?</p>",
        "id": 205955396,
        "sender_full_name": "lcnr",
        "timestamp": 1596572416
    },
    {
        "content": "<p>otherwise I might try and look into this in the following weeks</p>",
        "id": 205955455,
        "sender_full_name": "lcnr",
        "timestamp": 1596572463
    },
    {
        "content": "<p>Also, how often do we hash spans, considering that we currently have 3 distinct hasher calls instead of 1 <code>u64</code></p>",
        "id": 205956211,
        "sender_full_name": "lcnr",
        "timestamp": 1596572873
    },
    {
        "content": "<p>which apperently prevents inlining when using the <code>DefaultHasher</code> (which we aren't doing in rustc afaik): <a href=\"https://rust.godbolt.org/z/v1rEqq\">https://rust.godbolt.org/z/v1rEqq</a></p>",
        "id": 205956337,
        "sender_full_name": "lcnr",
        "timestamp": 1596572928
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> I would take a look at how rustc_index does things and see if we can't allocate 256 values at the upper end or so</p>",
        "id": 205956393,
        "sender_full_name": "simulacrum",
        "timestamp": 1596572963
    },
    {
        "content": "<p>Hmm, yeah, from what I can <code>base_or_index</code> can spare 256values</p>",
        "id": 205960392,
        "sender_full_name": "lcnr",
        "timestamp": 1596574975
    },
    {
        "content": "<p>opened <a href=\"https://github.com/rust-lang/rust/issues/75164\">#75164</a> for now which manually implements <code>PartialEq</code> and <code>Hash</code></p>",
        "id": 205960441,
        "sender_full_name": "lcnr",
        "timestamp": 1596575006
    },
    {
        "content": "<p>and pushed <code>Span</code> using a <code>newtype_index</code></p>",
        "id": 205962074,
        "sender_full_name": "lcnr",
        "timestamp": 1596575864
    },
    {
        "content": "<p>Does <code>#[rustc_scalar_valid_range]</code> automatically imply <code>repr(transparent)</code>? I sure hope so</p>",
        "id": 205962153,
        "sender_full_name": "lcnr",
        "timestamp": 1596575894
    },
    {
        "content": "<p>hm not sure</p>",
        "id": 205962386,
        "sender_full_name": "simulacrum",
        "timestamp": 1596576041
    },
    {
        "content": "<p>but regardless we know that tuple structs of a single field aren't going anywhere</p>",
        "id": 205962402,
        "sender_full_name": "simulacrum",
        "timestamp": 1596576058
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> not AFAIK but feel free to add <code>#[repr(transparent)]</code></p>",
        "id": 205963738,
        "sender_full_name": "eddyb",
        "timestamp": 1596576900
    }
]