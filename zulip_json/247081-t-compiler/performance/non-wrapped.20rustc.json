[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I'm trying to import <a href=\"https://github.com/alacritty/vte\">https://github.com/alacritty/vte</a> into rustc-perf (locally) just to benchmark it. I have generated a Cargo.lock for it and put it under <code>collector/benchmarks/</code> but when I run I get an error:</p>\n<div class=\"codehilite\"><pre><span></span><code>stderr=    Checking utf8parse v0.2.0 (/tmp/.tmptORBA8/utf8parse)\n   Compiling vte_generate_state_changes v0.1.1 (/tmp/.tmptORBA8/vte_generate_state_changes)\n&quot;/home/njn/dev/rust3/build/x86_64-unknown-linux-gnu/stage1/bin/rustc&quot; [&quot;--crate-name&quot;, &quot;vte_generate_state_changes&quot;, &quot;--edition=2018&quot;, &quot;vte_generate_state_changes/src/lib.rs&quot;, &quot;--error-format=json&quot;, &quot;--json=diagnostic-rendered-ansi&quot;, &quot;--crate-type&quot;, &quot;proc-macro&quot;, &quot;--emit=dep-info,link&quot;, &quot;-C&quot;, &quot;prefer-dynamic&quot;, &quot;-C&quot;, &quot;embed-bitcode=no&quot;, &quot;-C&quot;, &quot;debuginfo=2&quot;, &quot;-C&quot;, &quot;metadata=23645a7c79635b0e&quot;, &quot;-C&quot;, &quot;extra-filename=-23645a7c79635b0e&quot;, &quot;--out-dir&quot;, &quot;/tmp/.tmptORBA8/target/debug/deps&quot;, &quot;-L&quot;, &quot;dependency=/tmp/.tmptORBA8/target/debug/deps&quot;, &quot;--extern&quot;, &quot;proc_macro2=/tmp/.tmptORBA8/target/debug/deps/libproc_macro2-9ea6a84c35e9561f.rlib&quot;, &quot;--extern&quot;, &quot;quote=/tmp/.tmptORBA8/target/debug/deps/libquote-cd8d7b2b48dc8cf8.rlib&quot;, &quot;--extern&quot;, &quot;proc_macro&quot;, &quot;-C&quot;, &quot;link-arg=-fuse-ld=lld&quot;, &quot;-Adeprecated&quot;, &quot;-Aunknown-lints&quot;, &quot;-Zincremental-verify-ich&quot;]\nexiting -- non-wrapped rustc\n</code></pre></div>",
        "id": 272883332,
        "sender_full_name": "nnethercote",
        "timestamp": 1645573798
    },
    {
        "content": "<p>This \"non-wrapped rustc\" is an error within rustc-perf, which I think has something to do with the way <code>vte</code> is structured, but I don't quite understand. do you?</p>",
        "id": 272883410,
        "sender_full_name": "nnethercote",
        "timestamp": 1645573832
    },
    {
        "content": "<p><code>utf8parse</code> is a crate within <code>vte</code></p>",
        "id": 272883427,
        "sender_full_name": "nnethercote",
        "timestamp": 1645573855
    },
    {
        "content": "<p>Can I solve this with a <code>perf-config.json</code> somehow?</p>",
        "id": 272883452,
        "sender_full_name": "nnethercote",
        "timestamp": 1645573889
    },
    {
        "content": "<p>This perf-config.json just builds the <code>utf8parse</code> crate and works:</p>",
        "id": 272884434,
        "sender_full_name": "nnethercote",
        "timestamp": 1645574497
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>{\n    &quot;cargo_toml&quot;: &quot;utf8parse/Cargo.toml&quot;\n}\n</code></pre></div>",
        "id": 272884439,
        "sender_full_name": "nnethercote",
        "timestamp": 1645574503
    },
    {
        "content": "<p>In general this means there's a build script or something that is getting recompiled spuriously</p>",
        "id": 272885273,
        "sender_full_name": "simulacrum",
        "timestamp": 1645575106
    },
    {
        "content": "<p>You can sometimes try to debug with CARGO_LOG=cargo::core::compiler::fingerprint=info if I'm recalling the path right</p>",
        "id": 272885340,
        "sender_full_name": "simulacrum",
        "timestamp": 1645575146
    },
    {
        "content": "<p>Maybe it's a workspace?</p>",
        "id": 272885372,
        "sender_full_name": "simulacrum",
        "timestamp": 1645575182
    },
    {
        "content": "<p>Hm, utf8parse doesn't depend on that crate at al</p>",
        "id": 272885433,
        "sender_full_name": "simulacrum",
        "timestamp": 1645575239
    },
    {
        "content": "<p>Maybe it can just be deleted?</p>",
        "id": 272885477,
        "sender_full_name": "simulacrum",
        "timestamp": 1645575244
    },
    {
        "content": "<p>But <code>vte</code> itself depends on <code>utf8parse</code>, and I want to measure <code>vte</code></p>",
        "id": 272886226,
        "sender_full_name": "nnethercote",
        "timestamp": 1645575802
    },
    {
        "content": "<p>Ah</p>",
        "id": 272887115,
        "sender_full_name": "simulacrum",
        "timestamp": 1645576494
    },
    {
        "content": "<p>But then why does perf-config specify utf8parse?</p>",
        "id": 272887137,
        "sender_full_name": "simulacrum",
        "timestamp": 1645576519
    },
    {
        "content": "<p>Or was that a different perf-config from the log?</p>",
        "id": 272887258,
        "sender_full_name": "simulacrum",
        "timestamp": 1645576607
    },
    {
        "content": "<p>But yeah, CARGO_LOG is probably the way to go</p>",
        "id": 272887611,
        "sender_full_name": "simulacrum",
        "timestamp": 1645576856
    },
    {
        "content": "<p>Sorry, the <code>perf-config.json</code> with utf8parse in it was me finding a configuration that worked. But it's not what I actually want <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 272894494,
        "sender_full_name": "nnethercote",
        "timestamp": 1645581087
    },
    {
        "content": "<p>So the fingerprint logging is showing an error:</p>\n<div class=\"codehilite\"><pre><span></span><code>stderr=[2022-02-23T01:53:15Z INFO  cargo::core::compiler::fingerprint] stale: changed &quot;/tmp/.tmpvVvVN5/utf8parse/src/lib.rs&quot;\n[2022-02-23T01:53:15Z INFO  cargo::core::compiler::fingerprint]           (vs) &quot;/tmp/.tmpvVvVN5/target/debug/.fingerprint/utf8parse-73c3883ab1a624bf/dep-lib-utf8parse&quot;\n[2022-02-23T01:53:15Z INFO  cargo::core::compiler::fingerprint]                FileTime { seconds: 1645581194, nanos: 381916020 } != FileTime { seconds: 1645581195, nanos: 636030158 }\n[2022-02-23T01:53:15Z INFO  cargo::core::compiler::fingerprint] stale: changed &quot;/tmp/.tmpvVvVN5/vte_generate_state_changes/src/lib.rs&quot;\n[2022-02-23T01:53:15Z INFO  cargo::core::compiler::fingerprint]           (vs) &quot;/tmp/.tmpvVvVN5/target/debug/.fingerprint/vte_generate_state_changes-23645a7c79635b0e/dep-lib-vte_generate_state_changes&quot;\n[2022-02-23T01:53:15Z INFO  cargo::core::compiler::fingerprint]                FileTime { seconds: 1645581195, nanos: 253911774 } != FileTime { seconds: 1645581195, nanos: 636099760 }\n[2022-02-23T01:53:15Z INFO  cargo::core::compiler::fingerprint] fingerprint error for vte v0.10.1 (/tmp/.tmpvVvVN5)/Check { test: false }/TargetInner { ..: lib_target(&quot;vte&quot;, [&quot;lib&quot;], &quot;/tmp/.tmpvVvVN5/src/lib.rs&quot;, Edition2021) }\n[2022-02-23T01:53:15Z INFO  cargo::core::compiler::fingerprint]     err: profile configuration has changed\n</code></pre></div>",
        "id": 272894687,
        "sender_full_name": "nnethercote",
        "timestamp": 1645581248
    },
    {
        "content": "<p>I'll try changing <code>vte</code> to use workspaces</p>",
        "id": 272894880,
        "sender_full_name": "nnethercote",
        "timestamp": 1645581435
    },
    {
        "content": "<p>Yay! that works</p>",
        "id": 272895349,
        "sender_full_name": "nnethercote",
        "timestamp": 1645581738
    },
    {
        "content": "<p>So <code>vte</code> has a top-level Cargo.toml that defines the <code>vte</code> crate, and then the two dependent crates are done via a workspace.</p>",
        "id": 272895381,
        "sender_full_name": "nnethercote",
        "timestamp": 1645581785
    },
    {
        "content": "<p>I changed it so the top-level Cargo.toml is just the workspace definition, with three crates in it, and moved the old top-level crate into <code>vte/vte/</code>, IYSWIM</p>",
        "id": 272895405,
        "sender_full_name": "nnethercote",
        "timestamp": 1645581814
    },
    {
        "content": "<p>Huh, well seems good. Not sure why a workspace would cause problems, maybe we're over eager to touch all the files</p>",
        "id": 272896344,
        "sender_full_name": "simulacrum",
        "timestamp": 1645582725
    },
    {
        "content": "<p>You're right: using <code>touch_files</code> in the <code>perf-config.json</code> fixed the original problem without requiring the workspace restructuring.</p>",
        "id": 273056635,
        "sender_full_name": "nnethercote",
        "timestamp": 1645688935
    },
    {
        "content": "<p>An update: I've been getting the code for these crates by cloning the GH repo, but @lqd told me it's much better to download them directly from <a href=\"http://crates.io\">crates.io</a>, e.g. <code>curl -L https://crates.io/api/v1/crates/$crate/$version/download | tar zxf -</code>. When I do that, I don't have to muck around with the perf-config.json, things just work better.</p>",
        "id": 273164845,
        "sender_full_name": "nnethercote",
        "timestamp": 1645745519
    },
    {
        "content": "<p>FWIW, it may make sense for us to just add a \"bench X crate\" command to wrap the download + untarring away from memory/local scripts</p>",
        "id": 273165890,
        "sender_full_name": "simulacrum",
        "timestamp": 1645746192
    },
    {
        "content": "<p>And run <code>cargo generate-lockfile</code> if necessary - I have just written my own crappy script to do that <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 273170435,
        "sender_full_name": "nnethercote",
        "timestamp": 1645749623
    },
    {
        "content": "<p>That sounds like a great idea! I took the liberty of implementing it <a href=\"https://github.com/rust-lang/rustc-perf/pull/1183\">https://github.com/rust-lang/rustc-perf/pull/1183</a>.</p>",
        "id": 273207535,
        "sender_full_name": "Jakub Beránek",
        "timestamp": 1645782219
    },
    {
        "content": "<p>not strictly related to the wrapped-rustc topic, but similar collector improvements: another local change I have is unconditionally rustfiltering  for the cg local profile commands, is that something that I should upstream ? or not, if doing that will somehow help us randomly notice demangling issues in valgrind/libiberty/etc ?</p>",
        "id": 273209577,
        "sender_full_name": "lqd",
        "timestamp": 1645783460
    },
    {
        "content": "<p>Hm, I assumed we were already running things through rustfilt, might be wrong though. I think we should though.</p>",
        "id": 273222236,
        "sender_full_name": "simulacrum",
        "timestamp": 1645791941
    },
    {
        "content": "<p>we do when we diff 2 rustcs, but IIRC e.g. not for a cg run <a href=\"https://github.com/rust-lang/rustc-perf/blob/17f20a6cea2ed8d5f3b97ec637c4857aeef40f41/collector/src/execute.rs#L1046-L1059\">https://github.com/rust-lang/rustc-perf/blob/17f20a6cea2ed8d5f3b97ec637c4857aeef40f41/collector/src/execute.rs#L1046-L1059</a> </p>\n<p>I also think we should, so I'll open up a PR soon</p>",
        "id": 273222399,
        "sender_full_name": "lqd",
        "timestamp": 1645792050
    },
    {
        "content": "<p>The Valgrind dev version should now demangle all Rust symbols correctly, though I appreciate that running a dev version is a hassle</p>",
        "id": 273289721,
        "sender_full_name": "nnethercote",
        "timestamp": 1645826154
    }
]