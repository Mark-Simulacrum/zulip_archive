[
    {
        "content": "<p>I’ve been watching this talk. Its pretty entertaining, but it also culminates in describing a potentially useful tool for us to investigate using, for correcting for the bias introduced by code layout.</p>",
        "id": 253433063,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631719575
    },
    {
        "content": "<p><a href=\"https://www.youtube.com/watch?v=r-TLSBdHe1A\">https://www.youtube.com/watch?v=r-TLSBdHe1A</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"r-TLSBdHe1A\" href=\"https://www.youtube.com/watch?v=r-TLSBdHe1A\"><img src=\"https://uploads.zulipusercontent.net/06bee759c1dbe2c4354c820cedf34a8b3c178c93/68747470733a2f2f692e7974696d672e636f6d2f76692f722d544c534264486531412f64656661756c742e6a7067\"></a></div>",
        "id": 253433091,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631719584
    },
    {
        "content": "<p>Great talk! We had some discussion of it <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/Num.20iterations.20and.20randomizing.20memory.20layout\">here</a> already.</p>",
        "id": 253433469,
        "sender_full_name": "rylev",
        "timestamp": 1631719720
    },
    {
        "content": "<p>Ah yes, sorry.</p>",
        "id": 253433566,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631719765
    },
    {
        "content": "<p>Unfortunately stabilizer would likely need a massive amount of work in order to get it to work with Rust.</p>",
        "id": 253433600,
        "sender_full_name": "rylev",
        "timestamp": 1631719779
    },
    {
        "content": "<p>Has anyone reached out to Emery Berger to ask if they have any students who might interested in investigating doing such work?</p>",
        "id": 253433726,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631719812
    },
    {
        "content": "<p>I think the more modern successors of this work, though focused on optimization rather than monitoring/stabilization, is stuff like BOLT from facebook</p>",
        "id": 253434134,
        "sender_full_name": "simulacrum",
        "timestamp": 1631719947
    },
    {
        "content": "<p><a href=\"https://github.com/facebookincubator/BOLT\">https://github.com/facebookincubator/BOLT</a></p>",
        "id": 253434146,
        "sender_full_name": "simulacrum",
        "timestamp": 1631719952
    },
    {
        "content": "<p>(The talk also discusses the <code>coz</code> tool, towards the end. It looks like achrichton prototyped support for <code>coz</code> in Rust and got it upstreamed into the main tool. I don’t know if I’ll have time to look at it, but it sure looks interesting.)</p>",
        "id": 253446721,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631724036
    },
    {
        "content": "<p>Coz makes sense when you have a multi-threaded program. Rustc isn't yet.</p>",
        "id": 253446853,
        "sender_full_name": "bjorn3",
        "timestamp": 1631724082
    },
    {
        "content": "<p>Isn’t llvm codegen multithreaded ?</p>",
        "id": 253448124,
        "sender_full_name": "Timothy Maloney",
        "timestamp": 1631724512
    },
    {
        "content": "<p>Yes, but we don't have much influence over llvm codegen.</p>",
        "id": 253448281,
        "sender_full_name": "bjorn3",
        "timestamp": 1631724574
    },
    {
        "content": "<p>Everything before LLVM and translating MIR to LLVM-ir is single threaded. Translating MIR to LLVM-ir can happen concurrently with optimizations and codegen by LLVM of previously translated codegen units though.</p>",
        "id": 253448520,
        "sender_full_name": "bjorn3",
        "timestamp": 1631724658
    },
    {
        "content": "<p>There are no locks used to synchronize between MIR translation and LLVM codegen, which is what coz specializes in.</p>",
        "id": 253448655,
        "sender_full_name": "bjorn3",
        "timestamp": 1631724708
    },
    {
        "content": "<p>Coz basically emulates what happens if a certain section becomes faster by slowing down all other threads at synchronization points like locks.</p>",
        "id": 253448873,
        "sender_full_name": "bjorn3",
        "timestamp": 1631724772
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/Emery.20Berger.20.E2.80.9CPerformance.20Matters.E2.80.9D.20talk/near/253446853\">said</a>:</p>\n<blockquote>\n<p>Coz makes sense when you have a multi-threaded program. Rustc isn't yet.</p>\n</blockquote>\n<p>hmm, true. Premature for <code>rustc</code> itself.</p>",
        "id": 253449031,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631724831
    },
    {
        "content": "<p>(some of the examples of effects they observed seemed like they were excellent changes even outside of a parallel program. I’m thinking specifically of the example they gave of a bad hash function on image segments. But I think making the observations in the first place does indeed rely on having some useful parallel activity in the first place.)</p>",
        "id": 253449371,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631724955
    },
    {
        "content": "<p>:</p>",
        "id": 268611415,
        "sender_full_name": "nnethercote",
        "timestamp": 1642630479
    }
]