[
    {
        "content": "<p>If I compile <code>collector/benchmarks/hyper-2</code> in its directory with <code>cargo build</code> I get lots of lines of output, like so:</p>\n<div class=\"codehilite\"><pre><span></span><code>   Checking cfg-if v0.1.10\n   Compiling libc v0.2.65\n   Compiling proc-macro2 v1.0.6\n   Compiling unicode-xid v0.2.0\n   Compiling semver-parser v0.7.0\n   Compiling syn v1.0.8\n   ...\n   Checking hyper v0.13.0-alpha.4 (/home/njn/moz/rustc-perf/collector/benchmarks/hyper-2)\n   &lt;lots of warnings&gt;\n    Finished check [unoptimized + debuginfo] target(s) in 11.48s\n</code></pre></div>",
        "id": 204872083,
        "sender_full_name": "njn",
        "timestamp": 1595555179
    },
    {
        "content": "<p>When I run it via <code>collector eprintln</code>, it only captures the following output:</p>",
        "id": 204872231,
        "sender_full_name": "njn",
        "timestamp": 1595555467
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>   Compiling proc-macro-nested v0.1.3\n   Compiling futures-util v0.3.1\n   Compiling hyper v0.13.0-alpha.4 (/tmp/.tmpL5PfJH)\n    Finished dev [unoptimized + debuginfo] target(s) in 3.43s\n</code></pre></div>",
        "id": 204872234,
        "sender_full_name": "njn",
        "timestamp": 1595555477
    },
    {
        "content": "<p>The difference is that in the <code>collector eprintln</code> case, it's only capturing output for the final <code>rustc</code> invocation.</p>",
        "id": 204872290,
        "sender_full_name": "njn",
        "timestamp": 1595555536
    },
    {
        "content": "<p>futures-util and proc-macro-nested both have build scripts or something like that which are causing spurious recompiles (possibly will be fixed by <a href=\"https://github.com/rust-lang/cargo/pull/8497\">https://github.com/rust-lang/cargo/pull/8497</a>, otherwise we should investigate, it's a bug in Cargo almost certainly)</p>",
        "id": 204872307,
        "sender_full_name": "simulacrum",
        "timestamp": 1595555600
    },
    {
        "content": "<p>I don't understand in the latter case why there are lines for <code>proc-macro-nested</code> and <code>futures-util</code>, but there aren't warning lines</p>",
        "id": 204872309,
        "sender_full_name": "njn",
        "timestamp": 1595555605
    },
    {
        "content": "<p>What are the warnings specifically? Maybe it's an incremental bug or something</p>",
        "id": 204872351,
        "sender_full_name": "simulacrum",
        "timestamp": 1595555645
    },
    {
        "content": "<p>also possible that warnings are being sent to stdout and not stderr for some reason? would be odd though</p>",
        "id": 204872364,
        "sender_full_name": "simulacrum",
        "timestamp": 1595555698
    },
    {
        "content": "<p>we should probably record stdout and stderr both regardless in the eprintln and llvm-lines cases, just in case it's useful</p>",
        "id": 204872418,
        "sender_full_name": "simulacrum",
        "timestamp": 1595555774
    },
    {
        "content": "<p>(or alternatively dump it to stdout)</p>",
        "id": 204872421,
        "sender_full_name": "simulacrum",
        "timestamp": 1595555781
    },
    {
        "content": "<p>four warnings, all of the form \"warning: use of deprecated item 'std::error::Error::description': use the Display impl or to_string()\"</p>",
        "id": 204872461,
        "sender_full_name": "njn",
        "timestamp": 1595555881
    },
    {
        "content": "<p>For the <code>eprintln</code> runs I'm doing \"Full\" builds, which don't involve incremental</p>",
        "id": 204872637,
        "sender_full_name": "njn",
        "timestamp": 1595556097
    },
    {
        "content": "<p>hm</p>",
        "id": 204872858,
        "sender_full_name": "simulacrum",
        "timestamp": 1595556380
    },
    {
        "content": "<p>oh</p>",
        "id": 204872870,
        "sender_full_name": "simulacrum",
        "timestamp": 1595556399
    },
    {
        "content": "<p>We have <code>-Adeprecated -Aunknown-lints</code> in <a href=\"http://rustc-fake.rs\">rustc-fake.rs</a> for all things</p>",
        "id": 204872875,
        "sender_full_name": "simulacrum",
        "timestamp": 1595556412
    },
    {
        "content": "<p>I think they're mostly just there because they're usually just adding noise and are otherwise unhelpful</p>",
        "id": 204872886,
        "sender_full_name": "simulacrum",
        "timestamp": 1595556428
    },
    {
        "content": "<p>(and rustc, currently, does not to my knowledge do less work depending on lint levels at all)</p>",
        "id": 204872897,
        "sender_full_name": "simulacrum",
        "timestamp": 1595556447
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> ^</p>",
        "id": 204872901,
        "sender_full_name": "simulacrum",
        "timestamp": 1595556455
    },
    {
        "content": "<p>For the other profilers, such as DHAT, the build script invocations are (a) using RUSTC_REAL, but (b) not being run under DHAT</p>",
        "id": 204873424,
        "sender_full_name": "njn",
        "timestamp": 1595557243
    },
    {
        "content": "<p>Wait, no</p>",
        "id": 204873435,
        "sender_full_name": "njn",
        "timestamp": 1595557282
    },
    {
        "content": "<p>Wait, yes</p>",
        "id": 204873438,
        "sender_full_name": "njn",
        "timestamp": 1595557301
    },
    {
        "content": "<p>That should be correct, I think; we do not expect anything but the leaf to use DHAT (or whatever profiler)</p>",
        "id": 204873662,
        "sender_full_name": "simulacrum",
        "timestamp": 1595557622
    },
    {
        "content": "<p>Maybe I'm misunderstanding?</p>",
        "id": 204873670,
        "sender_full_name": "simulacrum",
        "timestamp": 1595557632
    },
    {
        "content": "<p>IOW, at most one rustc invocation for any given benchmark should run under the profiler.</p>",
        "id": 204873684,
        "sender_full_name": "simulacrum",
        "timestamp": 1595557657
    },
    {
        "content": "<p>I'm still digging, but the build script invocations of rustc are <em>not</em> getting a <code>--wrap-rustc-with</code> argument</p>",
        "id": 204873988,
        "sender_full_name": "njn",
        "timestamp": 1595558064
    },
    {
        "content": "<p>which is why they don't get DHATted</p>",
        "id": 204873994,
        "sender_full_name": "njn",
        "timestamp": 1595558081
    },
    {
        "content": "<p>I don't yet understand why the build script invocations don't get wrapped</p>",
        "id": 204874018,
        "sender_full_name": "njn",
        "timestamp": 1595558121
    },
    {
        "content": "<p>My best guess is this: the <code>cargo rustc</code> invocation is like this: <code>RUSTC=fake-rustc RUSTC_REAL=my-rustc cargo rustc -- --wrap-rustc-with=dhat</code></p>",
        "id": 204874161,
        "sender_full_name": "njn",
        "timestamp": 1595558332
    },
    {
        "content": "<p>When cargo does the build script, I guess it ignores the stuff after the <code>--</code>?</p>",
        "id": 204874170,
        "sender_full_name": "njn",
        "timestamp": 1595558351
    },
    {
        "content": "<p>But it preserves the stuff after the <code>--</code> for the leaf crate</p>",
        "id": 204874175,
        "sender_full_name": "njn",
        "timestamp": 1595558368
    },
    {
        "content": "<p>The reason I'm looking at this is that I was seeing some discrepancies in <code>collector dhat</code> and <code>collector eprintln</code>.</p>",
        "id": 204874180,
        "sender_full_name": "njn",
        "timestamp": 1595558395
    },
    {
        "content": "<p>The reason is that <code>collect  eprintln</code> collects output from RUSTC_REAL on the build scripts as well as the leaf crate, while DHAT only collects data from the leaf crate.</p>",
        "id": 204874225,
        "sender_full_name": "njn",
        "timestamp": 1595558433
    },
    {
        "content": "<p>(This is because <code>eprintln</code> doesn't actually require <code>--wrap-rustc-with</code> to work, its wrapping is a no-op, and <code>collector</code> itself captures the stderr output, rather than <code>rustc-fake</code>+wrapping)</p>",
        "id": 204874237,
        "sender_full_name": "njn",
        "timestamp": 1595558483
    },
    {
        "content": "<p>Ah, llvm-lines profiling got busted by the rustdoc change. Should be an easy fix though</p>",
        "id": 204874744,
        "sender_full_name": "njn",
        "timestamp": 1595559302
    },
    {
        "content": "<p>And my decision to only add testing of <code>eprintln</code> profiling has almost immediately been exposed as a bad one :(</p>",
        "id": 204875047,
        "sender_full_name": "njn",
        "timestamp": 1595559817
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/Output.20of.20.60collector.20eprintln.60/near/204872897\">said</a>:</p>\n<blockquote>\n<p>(and rustc, currently, does not to my knowledge do less work depending on lint levels at all)</p>\n</blockquote>\n<p>that sounds like an easy fix and performance improvement</p>",
        "id": 204875468,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595560402
    },
    {
        "content": "<p>you'd just modify the query provider like I did for rustdoc</p>",
        "id": 204875483,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595560412
    },
    {
        "content": "<p>I'll open an issue, I wonder how much that would help compile times since cargo always passes <code>--cap-lints allow</code></p>",
        "id": 204875533,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595560456
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>, this is right up your alley</p>",
        "id": 204875546,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595560498
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/74704\">https://github.com/rust-lang/rust/issues/74704</a></p>",
        "id": 204875890,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595560953
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120989\">njn</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/Output.20of.20.60collector.20eprintln.60/near/204874237\">said</a>:</p>\n<blockquote>\n<p>(This is because <code>eprintln</code> doesn't actually require <code>--wrap-rustc-with</code> to work, its wrapping is a no-op, and <code>collector</code> itself captures the stderr output, rather than <code>rustc-fake</code>+wrapping)</p>\n</blockquote>\n<p>We could capture the stderr of rustc specifically for eprintln instead of cargo, I guess</p>",
        "id": 204915774,
        "sender_full_name": "simulacrum",
        "timestamp": 1595597836
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/Output.20of.20.60collector.20eprintln.60/near/204875468\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/Output.20of.20.60collector.20eprintln.60/near/204872897\">said</a>:</p>\n<blockquote>\n<p>(and rustc, currently, does not to my knowledge do less work depending on lint levels at all)</p>\n</blockquote>\n<p>that sounds like an easy fix and performance improvement</p>\n</blockquote>\n<p>do we currently  measure time to compile including dependencies? Or just the final crate?</p>",
        "id": 204919331,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595599637
    },
    {
        "content": "<p>Just the final crate. I want to add cargo's -Ztiming graphs but haven't gotten around to it yet</p>",
        "id": 204919374,
        "sender_full_name": "simulacrum",
        "timestamp": 1595599660
    },
    {
        "content": "<p>ok, I'll hold off on the lint thing until we measure that</p>",
        "id": 204919423,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595599681
    },
    {
        "content": "<p>I might have time to help this weekend if you ping me</p>",
        "id": 204919478,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595599699
    },
    {
        "content": "<p>I personally suspect you won't see any gains from the lint thing, or at least nothing significant. Most projects don't allow lints at all, and rustc already runs them all in a single pass over the crate (2, maybe? but basically it's not a pass per lint)</p>",
        "id": 204920158,
        "sender_full_name": "simulacrum",
        "timestamp": 1595600015
    },
    {
        "content": "<blockquote>\n<p>Most projects don't allow lints at all</p>\n</blockquote>\n<p>They do though! Cargo passes <code>--cap-lints allow</code> to every dependency</p>",
        "id": 204921357,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595600551
    },
    {
        "content": "<p>imagine not running any lints, then multiply it by 490, that's how much you're speeding up the <a href=\"http://docs.rs\">docs.rs</a> build</p>",
        "id": 204921385,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595600569
    },
    {
        "content": "<p>AFAIK, in at least the leaf crates, we don't see lints on the self-profile charts at all</p>",
        "id": 204921456,
        "sender_full_name": "simulacrum",
        "timestamp": 1595600605
    },
    {
        "content": "<p>compared to things like borrow checking and type checking lints are really cheap</p>",
        "id": 204921472,
        "sender_full_name": "simulacrum",
        "timestamp": 1595600619
    },
    {
        "content": "<p>but I could be wrong!</p>",
        "id": 204921478,
        "sender_full_name": "simulacrum",
        "timestamp": 1595600625
    },
    {
        "content": "<p>well, I guess that makes sense</p>",
        "id": 204921489,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595600632
    },
    {
        "content": "<p>fortunately it's easy to change</p>",
        "id": 204921497,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595600637
    },
    {
        "content": "<p>I would start by just posting a quick PR that comments out / deletes the lint passes, and see what perf says about that</p>",
        "id": 204921564,
        "sender_full_name": "simulacrum",
        "timestamp": 1595600660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> suggested it could speed up clippy a lot more than it would speed up rustc</p>",
        "id": 204921854,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595600808
    },
    {
        "content": "<p>afaik, clippy doesn't do the pass bundling thing</p>",
        "id": 204922431,
        "sender_full_name": "simulacrum",
        "timestamp": 1595601083
    },
    {
        "content": "<p>so that would not surprise me</p>",
        "id": 204922447,
        "sender_full_name": "simulacrum",
        "timestamp": 1595601088
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/74718\">https://github.com/rust-lang/rust/pull/74718</a></p>",
        "id": 204927571,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595603315
    },
    {
        "content": "<p>how do I cancel a try run?</p>",
        "id": 204931404,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595605136
    },
    {
        "content": "<p>wow, only 40 minutes for a try run! I like GHA :)</p>",
        "id": 204932240,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595605652
    },
    {
        "content": "<p>@bors try- IIRC</p>",
        "id": 204932958,
        "sender_full_name": "simulacrum",
        "timestamp": 1595606045
    },
    {
        "content": "<p>well I had trouble getting the late lint passes not to run so it works out</p>",
        "id": 204933115,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595606149
    },
    {
        "content": "<p>not sure how to turn off deny(warnings), it's throwing up a ton from unknown lint names</p>",
        "id": 204933233,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595606198
    },
    {
        "content": "<p>On CI?</p>",
        "id": 204933252,
        "sender_full_name": "simulacrum",
        "timestamp": 1595606213
    },
    {
        "content": "<p>you can probably edit boostrap's default config to turn it off, <a href=\"https://github.com/Mark-Simulacrum/rust/blob/6eaaff4f1f24c8d512ab1d9ecd0295add1683a7e/src/bootstrap/config.rs#L464\">https://github.com/Mark-Simulacrum/rust/blob/6eaaff4f1f24c8d512ab1d9ecd0295add1683a7e/src/bootstrap/config.rs#L464</a></p>",
        "id": 204933287,
        "sender_full_name": "simulacrum",
        "timestamp": 1595606242
    },
    {
        "content": "<p>I have deny-warnings = false so I don't think that's the issue</p>",
        "id": 204933769,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595606505
    },
    {
        "content": "<p>can I pass <code>--cap-lints allow</code> somehow?</p>",
        "id": 204933881,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595606545
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> where are you seeing deny(warnings) take effect then?</p>",
        "id": 204935145,
        "sender_full_name": "simulacrum",
        "timestamp": 1595607240
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Building stage1 std artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu)\n   Compiling core v0.0.0 (/home/joshua/src/rust/src/libcore)\nerror[E0602]: unknown lint: `rust_2018_idioms`\n  |\n  = note: requested on the command line with `-W rust_2018_idioms`\n\nerror[E0602]: unknown lint: `unused_lifetimes`\n  |\n  = note: requested on the command line with `-W unused_lifetimes`\n</code></pre></div>",
        "id": 204935212,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595607262
    },
    {
        "content": "<p>Huh. It doesn't tell you why it's an error?</p>",
        "id": 204935292,
        "sender_full_name": "simulacrum",
        "timestamp": 1595607310
    },
    {
        "content": "<p>nope :(</p>",
        "id": 204935325,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595607332
    },
    {
        "content": "<p>Please file a bug for that, we should indicate that</p>",
        "id": 204935336,
        "sender_full_name": "simulacrum",
        "timestamp": 1595607341
    },
    {
        "content": "<p>you can probably remove those lints from being specified in <a href=\"https://github.com/Mark-Simulacrum/rust/blob/6eaaff4f1f24c8d512ab1d9ecd0295add1683a7e/src/bootstrap/builder.rs#L1140-L1141\">https://github.com/Mark-Simulacrum/rust/blob/6eaaff4f1f24c8d512ab1d9ecd0295add1683a7e/src/bootstrap/builder.rs#L1140-L1141</a></p>",
        "id": 204935403,
        "sender_full_name": "simulacrum",
        "timestamp": 1595607367
    },
    {
        "content": "<p>will do</p>",
        "id": 204935435,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595607389
    },
    {
        "content": "<p>I think it just always errors for unknown lints on the command line</p>",
        "id": 204935549,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595607467
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/74722\">https://github.com/rust-lang/rust/issues/74722</a></p>",
        "id": 204935653,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595607507
    },
    {
        "content": "<p>look at that! <a href=\"https://perf.rust-lang.org/compare.html?start=900869371e13cead086f4f9809419daa6a63cfaf&amp;end=4874c68561d0727f5ff895edef9e1e3473b6e389\">https://perf.rust-lang.org/compare.html?start=900869371e13cead086f4f9809419daa6a63cfaf&amp;end=4874c68561d0727f5ff895edef9e1e3473b6e389</a></p>",
        "id": 204978797,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595636207
    },
    {
        "content": "<p>decrease of at most 3.5%, mostly in the 1% range, no increases at all :D</p>",
        "id": 204978811,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595636238
    },
    {
        "content": "<p>why would changing lints change the number of instructions emitted?? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 204996006,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1595668195
    },
    {
        "content": "<p>That's instructions run I think</p>",
        "id": 204997646,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595671313
    },
    {
        "content": "<p>So since the lints aren't run at all it has better performance :)</p>",
        "id": 204997688,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595671332
    },
    {
        "content": "<p>TBH I expected bigger numbers.</p>",
        "id": 205000054,
        "sender_full_name": "mati865",
        "timestamp": 1595676068
    },
    {
        "content": "<p>well it didn't catch all the lints: <a href=\"https://github.com/rust-lang/rust/pull/74718#issuecomment-663589975\">https://github.com/rust-lang/rust/pull/74718#issuecomment-663589975</a></p>",
        "id": 205001132,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595678400
    },
    {
        "content": "<p>so I could make a follow-up run removing those, I tried to do that yesterday but ran into issues with <a href=\"https://github.com/rust-lang/rust/issues/74722\">https://github.com/rust-lang/rust/issues/74722</a></p>",
        "id": 205001184,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595678419
    }
]