[
    {
        "content": "<p>I just filed an issue on <code>log</code> to remove its build script: <a href=\"https://github.com/rust-lang/log/issues/489\">https://github.com/rust-lang/log/issues/489</a>. Details are in the issue.</p>",
        "id": 274056144,
        "sender_full_name": "nnethercote",
        "timestamp": 1646350056
    },
    {
        "content": "<p>This is an interesting example of an improvement that isn't obvious when looking at crates in isolation, but fell out of the large scale data gathering and analysis.</p>",
        "id": 274056218,
        "sender_full_name": "nnethercote",
        "timestamp": 1646350087
    },
    {
        "content": "<p>It seems like a pretty easy change, could be a good one for <span class=\"user-mention\" data-user-id=\"481680\">@Michael Wigard</span> or <span class=\"user-mention\" data-user-id=\"266526\">@Jakub Ber√°nek</span></p>",
        "id": 274056241,
        "sender_full_name": "nnethercote",
        "timestamp": 1646350106
    },
    {
        "content": "<p>FWIW, it might be worthwhile for them to wait for the stabilization of <code>cfg(target_has_atomic)</code> to show up in stable Rust: <a href=\"https://github.com/rust-lang/rust/issues/32976\">https://github.com/rust-lang/rust/issues/32976</a></p>",
        "id": 274056819,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646350384
    },
    {
        "content": "<p>Hm, it might also be a use case for the load store atomic cfg we discussed in lang</p>",
        "id": 274058339,
        "sender_full_name": "simulacrum",
        "timestamp": 1646351498
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> Would that cover both the <code>has_atomics</code> and <code>atomic_cas</code> cases in <code>log</code>?</p>",
        "id": 274060678,
        "sender_full_name": "nnethercote",
        "timestamp": 1646352992
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@nnethercote</span> <code>cfg(target_has_atomic)</code> would imply both.</p>\n<p>We might potentially add a <code>target_has_atomic_load_store</code> or similar in the future, which would cover the case where <code>has_atomics</code> is true but <code>atomic_cas</code> is false; however, we haven't settled the question of whether we want to do that yet.</p>",
        "id": 274060846,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646353115
    },
    {
        "content": "<p>Ok, sounds like it's probably not worth waiting on</p>",
        "id": 274060904,
        "sender_full_name": "nnethercote",
        "timestamp": 1646353164
    },
    {
        "content": "<p>I'm suggesting that they might want to just replace all of both cfg instances with <code>cfg(target_has_atomic)</code>, which AFAICT will be stable soon.</p>",
        "id": 274060983,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646353206
    },
    {
        "content": "<p>Ok, I've added a note to the issue about it, can be discussed when someone works on it</p>",
        "id": 274061142,
        "sender_full_name": "nnethercote",
        "timestamp": 1646353326
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> Do you know if checking the rustc version in <code>#[cfg(...)]</code> has ever been discussed? That seems to be a common use case for which build scripts are currently used, especially for critical crates like <code>syn</code>.</p>",
        "id": 274065303,
        "sender_full_name": "nnethercote",
        "timestamp": 1646356336
    },
    {
        "content": "<p>I.e. <a href=\"https://github.com/dtolnay/syn/blob/master/build.rs\">https://github.com/dtolnay/syn/blob/master/build.rs</a> just does a few version tests plus one \"is this nightly?\" test</p>",
        "id": 274065368,
        "sender_full_name": "nnethercote",
        "timestamp": 1646356402
    },
    {
        "content": "<p>Likewise <a href=\"https://github.com/serde-rs/serde/blob/master/serde_derive/build.rs\">https://github.com/serde-rs/serde/blob/master/serde_derive/build.rs</a>, which does just two version checks</p>",
        "id": 274065446,
        "sender_full_name": "nnethercote",
        "timestamp": 1646356458
    },
    {
        "content": "<p>Yes, it's been discussed -- in fact, is basically implemented IIRC</p>",
        "id": 274065745,
        "sender_full_name": "simulacrum",
        "timestamp": 1646356745
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/64796\">https://github.com/rust-lang/rust/issues/64796</a></p>",
        "id": 274065758,
        "sender_full_name": "simulacrum",
        "timestamp": 1646356767
    },
    {
        "content": "<p>Lovely, thank you</p>",
        "id": 274069028,
        "sender_full_name": "nnethercote",
        "timestamp": 1646359270
    },
    {
        "content": "<p>@lqd ^^^</p>",
        "id": 274069030,
        "sender_full_name": "nnethercote",
        "timestamp": 1646359273
    },
    {
        "content": "<p>yay</p>",
        "id": 274089928,
        "sender_full_name": "lqd",
        "timestamp": 1646378529
    },
    {
        "content": "<p>ah right right, it's still waiting on some progress for <code>cfg(accessible)</code></p>",
        "id": 274093371,
        "sender_full_name": "lqd",
        "timestamp": 1646381103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> FWIW, unblocking that doesn't require a full impl of <code>cfg(accessible(...))</code>, just an implementation of <code>cfg(accessible(::cratename::...))</code>, which compiler folks have said would be easier.</p>",
        "id": 274104341,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646387199
    },
    {
        "content": "<p>good news indeed, thank you. maybe we could even help there</p>",
        "id": 274104530,
        "sender_full_name": "lqd",
        "timestamp": 1646387301
    },
    {
        "content": "<p>That would be wonderful.</p>",
        "id": 274105478,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646387789
    },
    {
        "content": "<p>I'm quite interested in seeing an implementation of that.</p>",
        "id": 274105523,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646387823
    },
    {
        "content": "<p>I realized something unfortunate: even if <code>cfg(version)</code> shipped in 1.60, <code>syn</code> would be unable to use it until 1.60 is the MSRV, right? And that's likely to be years down the track?</p>",
        "id": 274176561,
        "sender_full_name": "nnethercote",
        "timestamp": 1646421637
    },
    {
        "content": "<p>It's not obvious that <code>syn</code> needs to use a years-old version as its MSRV, but I don't know its MSRV policy.</p>",
        "id": 274176720,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646421731
    },
    {
        "content": "<p>How much slower is compiling the build script as-is vs. an empty stub (fn main() {})? If the latter is even 10-15% faster, it might be worth using cfg(not(version)) or something to detect that version is supported and then almost not compiling the build script (or Cargo support for conditional build scripts).</p>",
        "id": 274176968,
        "sender_full_name": "simulacrum",
        "timestamp": 1646421865
    },
    {
        "content": "<p>I haven't measured that specifically, but I suspect it won't help much, i.e. that the minimal file is not much faster than the existing build script</p>",
        "id": 274180320,
        "sender_full_name": "nnethercote",
        "timestamp": 1646423572
    },
    {
        "content": "<p>Hmm, I'm really having trouble understanding the problem in <a href=\"https://github.com/rust-lang/log/pull/490\">https://github.com/rust-lang/log/pull/490</a></p>",
        "id": 274182160,
        "sender_full_name": "nnethercote",
        "timestamp": 1646424468
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/pull/2991\">https://github.com/rust-lang/rfcs/pull/2991</a> seems relevant, at least</p>",
        "id": 274185821,
        "sender_full_name": "simulacrum",
        "timestamp": 1646426518
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I seem to recall a lang meeting around that RFC where it was felt that the components <em>should</em> always be present in various target_ bits - I'm a little surprised that's not the case here</p>",
        "id": 274185975,
        "sender_full_name": "simulacrum",
        "timestamp": 1646426623
    },
    {
        "content": "<p>I will say that as a tier-3 target there's presumably ~zero usage on actual stable, so IMO it should be fine to rely on the newly-stabilized target_has_atomic family here, if possible</p>",
        "id": 274186053,
        "sender_full_name": "simulacrum",
        "timestamp": 1646426660
    },
    {
        "content": "<p>I guess the fact that those were explicitly unstable (rather than just unknown) prior to 1.60(?) means that they can't actually be used?</p>",
        "id": 274186070,
        "sender_full_name": "simulacrum",
        "timestamp": 1646426680
    },
    {
        "content": "<p>Oh... I thought <code>target</code> was already a thing in <code>cfg</code></p>",
        "id": 274186635,
        "sender_full_name": "nnethercote",
        "timestamp": 1646427107
    },
    {
        "content": "<p>It looks like this is only necessary for the set_logger API</p>",
        "id": 274187431,
        "sender_full_name": "simulacrum",
        "timestamp": 1646427534
    },
    {
        "content": "<p>(Everything else in the crate is fine with just atomics, doesn't need CAS)</p>",
        "id": 274187500,
        "sender_full_name": "simulacrum",
        "timestamp": 1646427570
    },
    {
        "content": "<p>Is thumbv4t the only problem?</p>",
        "id": 274187510,
        "sender_full_name": "simulacrum",
        "timestamp": 1646427578
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/.60log.60.20build.20script.20removal/near/274185975\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> I seem to recall a lang meeting around that RFC where it was felt that the components <em>should</em> always be present in various target_ bits - I'm a little surprised that's not the case here</p>\n</blockquote>\n<p>I'm not sure what you mean by this, can you clarify?</p>",
        "id": 274187811,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646427695
    },
    {
        "content": "<p>Do you mean that there's nothing that you should be able to do with <code>target</code> that you <em>can't</em> do with more specific cfg?</p>",
        "id": 274187848,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646427716
    },
    {
        "content": "<p>I mean that I would expect something like target_arch=thumbv4t to be possible for thumbv4t-none-eabi; right now target_arch=arm for that target</p>",
        "id": 274187919,
        "sender_full_name": "simulacrum",
        "timestamp": 1646427737
    },
    {
        "content": "<p>Yeah</p>",
        "id": 274187920,
        "sender_full_name": "simulacrum",
        "timestamp": 1646427738
    },
    {
        "content": "<p>IIRC, the last state of that RFC was that we want the <code>target(abi = \"...\", os = \"...\", ...)</code> shorthand.</p>",
        "id": 274188014,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646427802
    },
    {
        "content": "<p>Right, but it seems like that implies that is <em>enough</em>, which to differentiate thumbv4t-none-eabi from thumbv6m-none-eabi it isn't</p>",
        "id": 274188105,
        "sender_full_name": "simulacrum",
        "timestamp": 1646427858
    },
    {
        "content": "<p>Hm. It looks like log's <a href=\"http://build.rs\">build.rs</a> is wrong in any case:</p>\n<ul>\n<li>atomic_cas is set for thumbv4t-none-eabi, but rustc claims CAS is not supported for that target: <code>log</code> probably doesn't compile today for thumbv4t-none-eabi</li>\n<li>target_has_atomics is false for thumbv4t-none-eabi, but the target <em>does</em> have atomics, just not CAS</li>\n</ul>",
        "id": 274188293,
        "sender_full_name": "simulacrum",
        "timestamp": 1646427979
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@nnethercote</span> so at least for thumbv4t-none-eabi it seems like making a change here is probably fine without a new major version of log, though someone should double check what I said -- maybe we can just break thumbv4t-none-eabi on older Rust compilers or something like that?</p>",
        "id": 274188371,
        "sender_full_name": "simulacrum",
        "timestamp": 1646428049
    },
    {
        "content": "<p>ldrex/strex are available in ARMv6/thumb2 onwards. IIRC any attempts to utilize atomics would lower down to calls to a runtime/compiler-rt function on earlier revisions, which requires OS support of some sort to implement and will typically be implemented by disabling interrupts (possibly via syscall)</p>",
        "id": 274332503,
        "sender_full_name": "nagisa",
        "timestamp": 1646606446
    },
    {
        "content": "<p>CAS can be implemented in terms of <code>ldrex</code>/<code>strex</code>. So in general as far as Arm architectures are concerned, you either both have atomics and cas support or neither (at least not at an architectural level)</p>",
        "id": 274332592,
        "sender_full_name": "nagisa",
        "timestamp": 1646606583
    },
    {
        "content": "<p>Are build scripts that large of a problem if we switch to <code>lld</code> as planned? Even if enough <code>#[cfg(target)]</code> options are added, <code>log</code> will start using them in three years or so. Hopefully <code>lld</code> will be the default by then.</p>",
        "id": 276156772,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1647938316
    },
    {
        "content": "<p>lld helps a lot for all build dependencies (I have a check run with it that's arguably a close facsimile, but we could hack such a thing in the cargo profile and test it out) but when such a node is in the critical path, it's also the fact that the node is in the schedule in the first place, not only the time it takes (and it's scheduled twice, it needs to be built and then needs to execute) and that can delay the rest of the subgraph. </p>\n<p>The rationale here was that if we could avoid them altogether it would ofc be faster than using lld :) For example, removing the build scripts in syn and proc-macro2 had noticeable improvements (but I can try to compare doing that with using lld if you want).</p>",
        "id": 276164636,
        "sender_full_name": "lqd",
        "timestamp": 1647943298
    },
    {
        "content": "<p>I don't disagree that we should do both, but adding those <code>target</code> attributes and making <code>log</code> use them is a multi-year project.</p>",
        "id": 276179890,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1647951770
    },
    {
        "content": "<p>Build scripts in general are quite a significant of a problem with regards to build times, in my experience, yes.</p>",
        "id": 276252694,
        "sender_full_name": "nagisa",
        "timestamp": 1647982467
    }
]