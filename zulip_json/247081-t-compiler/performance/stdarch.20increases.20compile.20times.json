[
    {
        "content": "<p>Have been there any follow up on +40% core build time regression after changes to stdarch? The primary cause is the fact that it implements intrinsics that require const arguments by instantiating them for all possible values, which unsurprisingly lead to exorbitant compile times (locally for me stdarch alone accounts for 30% of build time of the whole standard library).</p>",
        "id": 218298021,
        "sender_full_name": "tm",
        "timestamp": 1606748620
    },
    {
        "content": "<p>No, I don't think it is fixable</p>",
        "id": 218299320,
        "sender_full_name": "simulacrum",
        "timestamp": 1606749227
    },
    {
        "content": "<p>I am surprised to hear we are doing that though, would expect const generics or <code>#[rustc_required_const]</code> to be used</p>",
        "id": 218299447,
        "sender_full_name": "simulacrum",
        "timestamp": 1606749271
    },
    {
        "content": "<p>(or const_param? whatever the attribute is)</p>",
        "id": 218299468,
        "sender_full_name": "simulacrum",
        "timestamp": 1606749279
    },
    {
        "content": "<p>that said, I will make a mention of it in the portable SIMD stream</p>",
        "id": 218299546,
        "sender_full_name": "simulacrum",
        "timestamp": 1606749315
    },
    {
        "content": "<p>It is <code>#[rustc_arg_required_const]</code>. This is the exact reason the match exists. The <code>simd_insert</code> and <code>simd_extract</code> intrinsics have this argument applied, so <code>constify_*!</code> has to be used.</p>",
        "id": 218299621,
        "sender_full_name": "bjorn3",
        "timestamp": 1606749350
    },
    {
        "content": "<p>Why can we not propagate the required_const up?</p>",
        "id": 218299738,
        "sender_full_name": "simulacrum",
        "timestamp": 1606749386
    },
    {
        "content": "<p>oh yeah these matches look pretty bad</p>",
        "id": 218299885,
        "sender_full_name": "simulacrum",
        "timestamp": 1606749454
    },
    {
        "content": "<p>The wrapper functions do have it too, but to make it work with cg_clif, they would need to be inlined <strong>and</strong> const propagated for the const arguments to be const at codegen time.</p>",
        "id": 218299903,
        "sender_full_name": "bjorn3",
        "timestamp": 1606749463
    },
    {
        "content": "<p>cg_llvm can technically get away with not using the match as LLVM handles non-const indexes for simd insertion and extraction. cg_clif however requires them to be constant when doing codegen.</p>",
        "id": 218300118,
        "sender_full_name": "bjorn3",
        "timestamp": 1606749540
    },
    {
        "content": "<p>Can we not make the call to the intrinsic directly from the first function exposed to user code? I guess I can just grep</p>",
        "id": 218300125,
        "sender_full_name": "simulacrum",
        "timestamp": 1606749543
    },
    {
        "content": "<p>That is what we do. However we for example need to mask the const argument, as we don't have <code>i4</code> and similar small integer types.</p>",
        "id": 218300232,
        "sender_full_name": "bjorn3",
        "timestamp": 1606749586
    },
    {
        "content": "<p>In addition mir inlining is not yet enabled by default, so that won't work with cg_clif either.</p>",
        "id": 218300336,
        "sender_full_name": "bjorn3",
        "timestamp": 1606749614
    },
    {
        "content": "<p>I guess maybe I'm missing something</p>",
        "id": 218300368,
        "sender_full_name": "simulacrum",
        "timestamp": 1606749629
    },
    {
        "content": "<p>but I would expect regular const prop to be sufficient to deal with <a href=\"https://github.com/rust-lang/stdarch/blob/777efaf5644706b36706a7a5c51edb63835e05ca/crates/core_arch/src/x86/avx.rs#L412-L417\">https://github.com/rust-lang/stdarch/blob/777efaf5644706b36706a7a5c51edb63835e05ca/crates/core_arch/src/x86/avx.rs#L412-L417</a> for example without needing a constify! call</p>",
        "id": 218300428,
        "sender_full_name": "simulacrum",
        "timestamp": 1606749653
    },
    {
        "content": "<p>i.e., if that was written <code>roundpd256(a, b as i8)</code> I would expect that to be fine</p>",
        "id": 218300504,
        "sender_full_name": "simulacrum",
        "timestamp": 1606749686
    },
    {
        "content": "<p>There is no inlining at MIR level, so const prop only sees an unknown function parameter.</p>",
        "id": 218300519,
        "sender_full_name": "bjorn3",
        "timestamp": 1606749690
    },
    {
        "content": "<p>it's not a function param though?</p>",
        "id": 218300542,
        "sender_full_name": "simulacrum",
        "timestamp": 1606749699
    },
    {
        "content": "<p>it's a const param?</p>",
        "id": 218300548,
        "sender_full_name": "simulacrum",
        "timestamp": 1606749701
    },
    {
        "content": "<p>Or do we not treat it as such?</p>",
        "id": 218300572,
        "sender_full_name": "simulacrum",
        "timestamp": 1606749712
    },
    {
        "content": "<p>At MIR level it is a regular function param.</p>",
        "id": 218300579,
        "sender_full_name": "bjorn3",
        "timestamp": 1606749716
    },
    {
        "content": "<p>That is ... surprising to me</p>",
        "id": 218300628,
        "sender_full_name": "simulacrum",
        "timestamp": 1606749725
    },
    {
        "content": "<p>I would expect rustc_args_required_const to desugar to a const generic</p>",
        "id": 218300664,
        "sender_full_name": "simulacrum",
        "timestamp": 1606749740
    },
    {
        "content": "<p>There has been talk about making it desugar to a const generic, but that hasn't been done.</p>",
        "id": 218300678,
        "sender_full_name": "bjorn3",
        "timestamp": 1606749742
    },
    {
        "content": "<p>is there a reason it doesn't?</p>",
        "id": 218300680,
        "sender_full_name": "simulacrum",
        "timestamp": 1606749743
    },
    {
        "content": "<p>(do we have a tracking issue?)</p>",
        "id": 218300710,
        "sender_full_name": "simulacrum",
        "timestamp": 1606749753
    },
    {
        "content": "<p>I am pretty sure <code>#[rustc_args_required_const]</code> existed before const generics.</p>",
        "id": 218300776,
        "sender_full_name": "bjorn3",
        "timestamp": 1606749782
    },
    {
        "content": "<p>That sounds right.</p>",
        "id": 218300895,
        "sender_full_name": "simulacrum",
        "timestamp": 1606749842
    },
    {
        "content": "<p><code>#[rustc_*]</code> is for attributes that will never be stable. I couldn't find a tracking issue.</p>",
        "id": 218300991,
        "sender_full_name": "bjorn3",
        "timestamp": 1606749882
    },
    {
        "content": "<p>No, I mean, an issue for the const generic promotion</p>",
        "id": 218301026,
        "sender_full_name": "simulacrum",
        "timestamp": 1606749900
    },
    {
        "content": "<p>I found <a href=\"https://github.com/rust-lang/rust/issues/70271\">#70271</a> about limiting <code>#[rustc_args_required_const]</code> to intrinsics only.</p>",
        "id": 218301218,
        "sender_full_name": "bjorn3",
        "timestamp": 1606749978
    },
    {
        "content": "<p>I didn't find an issue about desugaring to const generics.</p>",
        "id": 218301328,
        "sender_full_name": "bjorn3",
        "timestamp": 1606750026
    },
    {
        "content": "<p>ok</p>",
        "id": 218301532,
        "sender_full_name": "simulacrum",
        "timestamp": 1606750110
    },
    {
        "content": "<p>Implementing <code>#[rustc_required_const]</code> through guaranteed inlining and const propagation of the argument looks quite plausible. Though it conceptually conflicts with <code>#[target_feature]</code>.</p>",
        "id": 218996315,
        "sender_full_name": "tm",
        "timestamp": 1607276407
    },
    {
        "content": "<p>You aren't really supposed to call those intrinsics without using the corresponding <code>#[target_feature]</code> on the current function.</p>",
        "id": 218996400,
        "sender_full_name": "bjorn3",
        "timestamp": 1607276564
    },
    {
        "content": "<p>You can have a call that is not invoked at runtime, but target-feature can be only attached to functions so after inlining boundary between the two is lost.</p>",
        "id": 218996456,
        "sender_full_name": "tm",
        "timestamp": 1607276656
    },
    {
        "content": "<p>Not inlining has enough overhead that calling them while preventing inlining is slower than simply emulating them in your own code. <code>extern \"Rust\"</code> functions always force vector arguments to the stack.</p>",
        "id": 218996523,
        "sender_full_name": "bjorn3",
        "timestamp": 1607276769
    },
    {
        "content": "<p>I mean simply that the information about target-feature is lost and never reaches LLVM if inlining were to be done at MIR (not inlining them at all would be silly).</p>",
        "id": 218996606,
        "sender_full_name": "tm",
        "timestamp": 1607276940
    },
    {
        "content": "<p>or alternatively target-feature leaks to the caller</p>",
        "id": 218996660,
        "sender_full_name": "tm",
        "timestamp": 1607277017
    },
    {
        "content": "<p>If the target-feature doesn't match, no inlining is ever performed by LLVM.</p>",
        "id": 218996662,
        "sender_full_name": "bjorn3",
        "timestamp": 1607277028
    },
    {
        "content": "<p>Forcing inlining leaks the target-features to the callee not the other way around.</p>",
        "id": 218996674,
        "sender_full_name": "bjorn3",
        "timestamp": 1607277075
    },
    {
        "content": "<p>well, currently target-feature is attached to the Rust wrapper not intrinsic itself, so if those wrappers were to be inlined at MIR level, the information would be lost</p>",
        "id": 218996729,
        "sender_full_name": "tm",
        "timestamp": 1607277159
    },
    {
        "content": "<p>Yeah, the target-feature of the caller is used instead of the wrapper. This is not a bad thing IMO as you would get a big overhead if the target-feature doesn't match and inlining isn't forced.</p>",
        "id": 218996746,
        "sender_full_name": "bjorn3",
        "timestamp": 1607277226
    },
    {
        "content": "<p>The inlining is already implemented, so it would be matter of changing the conditions under which it happens. Adding to that const-propagation of the const argument through temporaries doesn't seem particularly challenging.</p>",
        "id": 218996865,
        "sender_full_name": "tm",
        "timestamp": 1607277433
    },
    {
        "content": "<p>Of course implementing this would result in further proliferation of <code>#[rustc_required_const]</code> on non-intrinsics, which seems dubious in the first place.</p>",
        "id": 218996995,
        "sender_full_name": "tm",
        "timestamp": 1607277615
    },
    {
        "content": "<p>There could be a separate <code>#[specialize(0)]</code> to specialize a function on the first argument without requiring the first argument to be const and without forcing it to be inlined. The atomic type methods could especially use this to specialize on the memory ordering even in debug mode and with cg_clif.</p>\n<p>The platform intrinsics could then get something like <code>#[inline] #[specialize(2)] #[rustc_arg_required_const]</code>.</p>",
        "id": 218997167,
        "sender_full_name": "bjorn3",
        "timestamp": 1607277916
    },
    {
        "content": "<p>It would also be nice to have a <code>#[inline(force)]</code> that forces MIR inlining and gives an error when there is an inlining cycle.</p>",
        "id": 218997370,
        "sender_full_name": "bjorn3",
        "timestamp": 1607278242
    },
    {
        "content": "<p>Losing a target-feature is actually more serious, since without it in some cases LLVM is not able to do the codegen</p>",
        "id": 219058833,
        "sender_full_name": "tm",
        "timestamp": 1607334387
    },
    {
        "content": "<p>de-sugaring <code>rustc_required_const</code>  to const generics looks like more viable implementation strategy</p>",
        "id": 219059074,
        "sender_full_name": "tm",
        "timestamp": 1607334553
    }
]