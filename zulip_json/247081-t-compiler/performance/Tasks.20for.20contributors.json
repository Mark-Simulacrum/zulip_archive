[
    {
        "content": "<p>Thanks to documents like <a href=\"https://blog.rust-lang.org/inside-rust/2022/02/22/compiler-team-ambitions-2022.html\">Rust Compiler Ambitions for 2022</a>, <a href=\"https://hackmd.io/YJQSj_nLSZWl2sbI84R1qA\">Compiler performance roadmap for 2022</a>, and <a href=\"https://hackmd.io/mxdn4U58Su-UQXwzOHpHag\">Analysis of rustc-benchmarking-data</a> (based on @lqd's <a href=\"https://github.com/lqd/rustc-benchmarking-data\">large-scale data gathering</a>) we have had an influx of newcomers looking at things related to rustc's performance, which is great.</p>",
        "id": 274741013,
        "sender_full_name": "nnethercote",
        "timestamp": 1646854660
    },
    {
        "content": "<p>People like <span class=\"user-mention\" data-user-id=\"266526\">@Jakub Beránek</span>, <span class=\"user-mention\" data-user-id=\"481680\">@Michael Wigard</span>, and <span class=\"user-mention\" data-user-id=\"482438\">@martingms</span>. Welcome! It's great to have you here.</p>",
        "id": 274741151,
        "sender_full_name": "nnethercote",
        "timestamp": 1646854719
    },
    {
        "content": "<p>The above documents identify lots of tasks to be done, but they tend to be large. I figure it will also be useful to have this thread serve as a place where small tasks can be listed, if someone is looking for something to work on.</p>",
        "id": 274741328,
        "sender_full_name": "nnethercote",
        "timestamp": 1646854803
    },
    {
        "content": "<ul>\n<li><a href=\"https://perf.rust-lang.org/index.html\">https://perf.rust-lang.org/index.html</a> is showing empty graphs for packed-simd, script-servo, and script-servo2. These are benchmarks that were removed in the past. It would be nice if these graphs weren't shown (unless perhaps the time window requested is wide enough to include data for them).</li>\n</ul>",
        "id": 274741436,
        "sender_full_name": "nnethercote",
        "timestamp": 1646854860
    },
    {
        "content": "<ul>\n<li>The lovely new <code>collector download</code> command in rustc-perf has this usage message: <code>USAGE:    collector download crate [OPTIONS] &lt;KRATE&gt; &lt;VERSION&gt;</code>. The <code>KRATE</code> is auto-derived from an identifier called <code>krate</code>, which is named that because <code>crate</code> is a keyword. <code>clap</code> should have some annotation that lets this be labelled as <code>CRATE</code> instead.</li>\n</ul>",
        "id": 274741633,
        "sender_full_name": "nnethercote",
        "timestamp": 1646854952
    },
    {
        "content": "<ul>\n<li>@lqd's <a href=\"https://gist.github.com/lqd/2c92d351ed9eb2b846b3bc2f51cace6f\">thoughts</a> is a brainstorming document with a <em>lot</em> of ideas, which might be of interest. Some of the ideas have been done (especially \"Gathering benchmarks to detect problems and opportunities\") and not all of them will work. If any of them pique your interest, I recommend using profiling data to guide your efforts, most likely via <a href=\"https://github.com/rust-lang/rustc-perf/\">rustc-perf</a>.</li>\n</ul>",
        "id": 274742184,
        "sender_full_name": "nnethercote",
        "timestamp": 1646855214
    },
    {
        "content": "<p>Very cool, I'll definitely be looking for bite-sized tasks to get acquainted with the code base etc :)</p>",
        "id": 274749577,
        "sender_full_name": "martingms",
        "timestamp": 1646858594
    },
    {
        "content": "<p>And yes, your analyis made jumping into looking at stuff approachable enough to do actually do it, so thanks for that!</p>",
        "id": 274749690,
        "sender_full_name": "martingms",
        "timestamp": 1646858647
    },
    {
        "content": "<p>(A note: the up to date and public version of the \"thoughts\" document is at <a href=\"https://hackmd.io/3Dp68rTDSpWvRDfWF6lbMw?view\">https://hackmd.io/3Dp68rTDSpWvRDfWF6lbMw?view</a> and Jakub has at least started on two tasks also present in that list, looking at BOLT and expanding the set of crates used for PGO)</p>",
        "id": 274750409,
        "sender_full_name": "lqd",
        "timestamp": 1646859020
    },
    {
        "content": "<p>I updated the link above</p>",
        "id": 274762645,
        "sender_full_name": "nnethercote",
        "timestamp": 1646865196
    },
    {
        "content": "<ul>\n<li>The compare page looks like this: <a href=\"/user_uploads/4715/9AojmZONgqJAINvRi1ukvNEk/Screen-Shot-2022-03-11-at-1.36.24-pm.png\">Screen-Shot-2022-03-11-at-1.36.24-pm.png</a> (That was a run with no significant changes.)<br>\n  It would be nice if the results of the <code>rustc</code> benchmark had a horizontal separator and a title like the primary and secondary benchmarks do, to make it clearer that it's a third section of the results.<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/9AojmZONgqJAINvRi1ukvNEk/Screen-Shot-2022-03-11-at-1.36.24-pm.png\" title=\"Screen-Shot-2022-03-11-at-1.36.24-pm.png\"><img src=\"/user_uploads/4715/9AojmZONgqJAINvRi1ukvNEk/Screen-Shot-2022-03-11-at-1.36.24-pm.png\"></a></div></li>\n</ul>",
        "id": 274925037,
        "sender_full_name": "nnethercote",
        "timestamp": 1646966343
    },
    {
        "content": "<p>The heading could be \"Bootstrap timings\"</p>",
        "id": 274925053,
        "sender_full_name": "nnethercote",
        "timestamp": 1646966385
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/rgiCCV_2oF-OCIPCvEXYw3T0/image.png\">image.png</a> like this?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/rgiCCV_2oF-OCIPCvEXYw3T0/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/rgiCCV_2oF-OCIPCvEXYw3T0/image.png\"></a></div>",
        "id": 274939197,
        "sender_full_name": "Jakub Beránek",
        "timestamp": 1646983546
    },
    {
        "content": "<p>the \"benchmarks\" in the title of the bootstrap table is a bit unclear, this is about \"smaller crates\" ?</p>",
        "id": 274940876,
        "sender_full_name": "lqd",
        "timestamp": 1646985116
    },
    {
        "content": "<ul>\n<li>cosmetic: did the alignment in the benchmarks table columns change when adding the primary/secondary table ? probably it's just the column headers</li>\n</ul>",
        "id": 274941220,
        "sender_full_name": "lqd",
        "timestamp": 1646985363
    },
    {
        "content": "<ul>\n<li>the rustc-perf collector doesn't run <code>rustfilt</code> in some situations, e.g. it doesn't when running <code>profile_local</code> with cachegrind. We should make it do so, but ensure there's a CLI flag to opt-out and allow for valgrind contributors to test their demangling implementation easily</li>\n</ul>",
        "id": 274941507,
        "sender_full_name": "lqd",
        "timestamp": 1646985587
    },
    {
        "content": "<ul>\n<li>another possibility for the collector: a <code>perf-config.json</code> option to do multiple runs but for a given minimum duration, like \"do as many runs as needed until this crate has been benchmarked for at least 5 seconds\". I don't know how the others feel about this, but it would be useful when benchmarking our bigger dataset: there are a lot of very fast benchmarks and a lot of very slow benchmarks, making it inconvenient to change the default number of rounds or manually compute the correct configuration for hundreds of crates.</li>\n</ul>",
        "id": 274942541,
        "sender_full_name": "lqd",
        "timestamp": 1646986203
    },
    {
        "content": "<ul>\n<li>Something's gone wrong with the headings when you select \"Display raw data\":<br>\n<a href=\"/user_uploads/4715/d4xNuQprijK4Vlb-lMAaBob7/Screenshot-from-2022-03-15-11-19-23.png\">Screenshot-from-2022-03-15-11-19-23.png</a><div class=\"message_inline_image\"><a href=\"/user_uploads/4715/d4xNuQprijK4Vlb-lMAaBob7/Screenshot-from-2022-03-15-11-19-23.png\" title=\"Screenshot-from-2022-03-15-11-19-23.png\"><img src=\"/user_uploads/4715/d4xNuQprijK4Vlb-lMAaBob7/Screenshot-from-2022-03-15-11-19-23.png\"></a></div></li>\n</ul>",
        "id": 275315379,
        "sender_full_name": "nnethercote",
        "timestamp": 1647303614
    },
    {
        "content": "<ul>\n<li>Also, the raw data typically looks like <code>547266713.00</code>. It would be lovely if long numbers like that had separators, and didn't show the fractional part for integer values.</li>\n</ul>",
        "id": 275315649,
        "sender_full_name": "nnethercote",
        "timestamp": 1647303881
    },
    {
        "content": "<ul>\n<li>I'd appreciate help upgrading the benchmarks. <a href=\"https://hackmd.io/d9uE7qgtTWKDLivy0uoVQw?view\">This document</a> has the list of what needs updating. The \"easy\" primary ones are a good place to start. <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>  you volunteered for some, I have put your name next to three, as a start. <span class=\"user-mention\" data-user-id=\"224872\">@rylev</span>, <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> : you might be interested in helping as well? I have put detailed instructions on how to do it <a href=\"https://hackmd.io/d9uE7qgtTWKDLivy0uoVQw?view#Instructions\">here</a>. The list of ones that need converting: cranelift-codegen, diesel, hyper-2, piston-image, regex, ripgrep, serde, stm32f4, syn, unicode_normalization</li>\n</ul>",
        "id": 276002820,
        "sender_full_name": "nnethercote",
        "timestamp": 1647833269
    },
    {
        "content": "<ul>\n<li>could be a fun one: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=989c6eec2327f688f429d7790a7054cb\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=989c6eec2327f688f429d7790a7054cb</a> exercises the privacy checking because of big &amp; deep recursive types. It's usually not a bottleneck, neither in absolute or relative terms, eg <a href=\"https://github.com/lqd/rustc-benchmarking-data/blob/main/summaries/round-14-self-profile-check_top-queries_grouped-abs.txt\">https://github.com/lqd/rustc-benchmarking-data/blob/main/summaries/round-14-self-profile-check_top-queries_grouped-abs.txt</a> but this pattern may be more common in the wild than just these long-time popular crates. I've seen it \"slow\" once before in async code in <a href=\"https://github.com/rust-lang/rust/issues/72837\">#72837</a>. update: checking known issues now, I've stumbled upon <a href=\"https://github.com/rust-lang/rust/issues/81263\">#81263</a> in a diesel-inspired benchmark. Maybe a bit different than the stress-test like example above. Could still be a nice and self-contained fix.</li>\n</ul>",
        "id": 276165863,
        "sender_full_name": "lqd",
        "timestamp": 1647943971
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"435059\">@Ben Reeves</span></p>",
        "id": 276421189,
        "sender_full_name": "Jubilee",
        "timestamp": 1648082655
    },
    {
        "content": "<p>Hi</p>",
        "id": 276421243,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1648082747
    },
    {
        "content": "<p>Was brought over here from this topic: <a href=\"#narrow/stream/122651-general/topic/compiling.20rustc.20with.20LTO\">compiling rustc with LTO</a>. Still trying to figure out where and where not LTO is used in the compilation of rustc.</p>",
        "id": 276422073,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1648083506
    },
    {
        "content": "<p>As noted in <a class=\"stream-topic\" data-stream-id=\"247081\" href=\"/#narrow/stream/247081-t-compiler.2Fperformance/topic/Status.20page.20broken\">#t-compiler/performance &gt; Status page broken</a> <a href=\"https://github.com/rust-lang/triagebot/issues/1483\">https://github.com/rust-lang/triagebot/issues/1483</a> continues to cause us some trouble and should be a relatively straightforward task for someone to take on, though in a different codebase.</p>",
        "id": 276563209,
        "sender_full_name": "simulacrum",
        "timestamp": 1648173666
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120989\">nnethercote</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/Tasks.20for.20contributors/near/275315649\">said</a>:</p>\n<blockquote>\n<ul>\n<li>Also, the raw data typically looks like <code>547266713.00</code>. It would be lovely if long numbers like that had separators, and didn't show the fractional part for integer values.</li>\n</ul>\n</blockquote>\n<p>I'm re-upping this one... comments like <a href=\"https://github.com/rust-lang/rustc-perf/pull/1251#issue-1182463472\">https://github.com/rust-lang/rustc-perf/pull/1251#issue-1182463472</a> are so painful to read without separators <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 276935475,
        "sender_full_name": "nnethercote",
        "timestamp": 1648503983
    },
    {
        "content": "<ul>\n<li>A rustc task: <a href=\"https://github.com/rust-lang/rust/issues/95297\">https://github.com/rust-lang/rust/issues/95297</a>. This is a preliminary step to getting pipelining working for the final crate in a program, which has potential for some sizeable performance wins. Should be fairly easy, the .rlink file format is unstable and can be changed at will.</li>\n</ul>",
        "id": 277259705,
        "sender_full_name": "nnethercote",
        "timestamp": 1648722167
    },
    {
        "content": "<ul>\n<li>Another rustc task: all the primary benchmarks in <a href=\"https://github.com/rust-lang/rustc-perf/tree/master/collector/benchmarks\">rustc-perf</a> have been recently updated (except for <code>helloworld</code>). Simply running profilers over these and seeing if anything sticks out would be a good idea. Because they are fresh, the likelihood of finding stuff is much higher than the old benchmarks, which had been optimized heavily over several years. <code>perf</code>, Cachegrind and/or Callgrind would be a good profiler to start with if you are on Linux.</li>\n</ul>",
        "id": 277481328,
        "sender_full_name": "nnethercote",
        "timestamp": 1648849207
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120989\">nnethercote</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/Tasks.20for.20contributors/near/277259705\">said</a>:</p>\n<blockquote>\n<ul>\n<li>A rustc task: <a href=\"https://github.com/rust-lang/rust/issues/95297\">https://github.com/rust-lang/rust/issues/95297</a>. This is a preliminary step to getting pipelining working for the final crate in a program, which has potential for some sizeable performance wins. Should be fairly easy, the .rlink file format is unstable and can be changed at will.</li>\n</ul>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/pull/95589\">https://github.com/rust-lang/rust/pull/95589</a></p>",
        "id": 277542352,
        "sender_full_name": "Jakub Beránek",
        "timestamp": 1648921919
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120989\">nnethercote</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/Tasks.20for.20contributors/near/277481328\">said</a>:</p>\n<blockquote>\n<ul>\n<li>Another rustc task: all the primary benchmarks in <a href=\"https://github.com/rust-lang/rustc-perf/tree/master/collector/benchmarks\">rustc-perf</a> have been recently updated (except for <code>helloworld</code>). Simply running profilers over these and seeing if anything sticks out would be a good idea. Because they are fresh, the likelihood of finding stuff is much higher than the old benchmarks, which had been optimized heavily over several years. <code>perf</code>, Cachegrind and/or Callgrind would be a good profiler to start with if you are on Linux.</li>\n</ul>\n</blockquote>\n<p>Looking into this</p>",
        "id": 277620620,
        "sender_full_name": "Vikram Pal",
        "timestamp": 1648988027
    },
    {
        "content": "<blockquote>\n<p>Simply running profilers over these and seeing if anything sticks out would be a good idea.</p>\n</blockquote>\n<p>Since there are quite a few benchmarks, it might be nice to coordinate which ones people are looking into so we don't step on each other's toes.</p>",
        "id": 277695064,
        "sender_full_name": "rylev",
        "timestamp": 1649059414
    },
    {
        "content": "<ul>\n<li>As mentioned <a href=\"https://hackmd.io/d9uE7qgtTWKDLivy0uoVQw?both\">here</a>, the <code>ctfe-stress-4</code> benchmark is longer running than necessary. It's quite simple, and its runtime could be shortened (aiming to halve it might be good) by tweaking the numbers within <code>collector/benchmarks/ctfe-stress-4/src/lib.rs</code>. Then it could be renamed <code>ctfe-stress-5</code>.</li>\n</ul>",
        "id": 278085707,
        "sender_full_name": "nnethercote",
        "timestamp": 1649278880
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120989\">nnethercote</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/Tasks.20for.20contributors/near/278085707\">said</a>:</p>\n<blockquote>\n<ul>\n<li>As mentioned <a href=\"https://hackmd.io/d9uE7qgtTWKDLivy0uoVQw?both\">here</a>, the <code>ctfe-stress-4</code> benchmark is longer running than necessary. It's quite simple, and its runtime could be shortened (aiming to halve it might be good) by tweaking the numbers within <code>collector/benchmarks/ctfe-stress-4/src/lib.rs</code>. Then it could be renamed <code>ctfe-stress-5</code>.</li>\n</ul>\n</blockquote>\n<p>Done: <a href=\"https://github.com/rust-lang/rustc-perf/pull/1286\">https://github.com/rust-lang/rustc-perf/pull/1286</a></p>",
        "id": 278273876,
        "sender_full_name": "rylev",
        "timestamp": 1649407758
    },
    {
        "content": "<ul>\n<li>in CI PGO handling, since we're already <a href=\"https://github.com/rust-lang/rust/blob/7af93292c27cd8b4a14f0f35bcb4c7e7ca9c287a/src/ci/pgo.sh#L12-L16\">building libcore in the <code>gather_profiles</code></a> function, it doesn't look like we need to <a href=\"https://github.com/rust-lang/rust/blob/7af93292c27cd8b4a14f0f35bcb4c7e7ca9c287a/src/ci/pgo.sh#L50-L54\">also do it outside the function</a> anymore and can probably remove those 2 lines ?</li>\n</ul>",
        "id": 278470414,
        "sender_full_name": "lqd",
        "timestamp": 1649599978
    },
    {
        "content": "<p>Oh, I probably duplicated that one, good catch. <a href=\"https://github.com/rust-lang/rust/pull/95927\">https://github.com/rust-lang/rust/pull/95927</a></p>",
        "id": 278519743,
        "sender_full_name": "Jakub Beránek",
        "timestamp": 1649664365
    }
]