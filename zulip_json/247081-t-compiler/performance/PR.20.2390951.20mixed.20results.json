[
    {
        "content": "<p>I cannot find what caused <a href=\"https://github.com/rust-lang/rust/issues/90951\">#90951</a> to have mixed results for perf.  The perf regressions are all <code>cargo doc</code> and apparently metadata decoding. I had not done any major changes to rustdoc or metadata decoding at all, so I think it might be spurious.</p>\n<p>Also, when I go to the detailed query page for a benchmark that was improved, it shows a red percentage and a lot of zeros:<br>\n<a href=\"/user_uploads/4715/4sE7dzsZC3GurLOCCbunkZOo/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/4sE7dzsZC3GurLOCCbunkZOo/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/4sE7dzsZC3GurLOCCbunkZOo/image.png\"></a></div><p>That is pretty confusing to me and I have no idea what that means.</p>\n<p>Can anyone take a look? Thanks.</p>",
        "id": 262248302,
        "sender_full_name": "fee1-dead",
        "timestamp": 1637511723
    },
    {
        "content": "<p>The overview page shows the amount of instructions by default, which doesn't have a lot of noise. The detailed query page uses wall time, which is pretty noisy.</p>",
        "id": 262248766,
        "sender_full_name": "bjorn3",
        "timestamp": 1637512323
    },
    {
        "content": "<p>Looks like there's significantly more decoding happening of various things, not clear exactly why. Would need some hefty investigation, I suspect</p>",
        "id": 262248965,
        "sender_full_name": "simulacrum",
        "timestamp": 1637512612
    },
    {
        "content": "<p>It looks like mk_const (which is what interns things) just uses the underlying hash impl though</p>",
        "id": 262249899,
        "sender_full_name": "simulacrum",
        "timestamp": 1637513930
    },
    {
        "content": "<p>so I'm not sure that the change you've made is actually ok</p>",
        "id": 262250228,
        "sender_full_name": "simulacrum",
        "timestamp": 1637514312
    },
    {
        "content": "<p><code>intern_const</code> uses a newtype wrapper <code>CstHash</code> which hashes the fields.</p>",
        "id": 262250396,
        "sender_full_name": "fee1-dead",
        "timestamp": 1637514560
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361356\">@fee1-dead</span> metadata decoding uses the Hash impl you modified, so I'm not super surprised it was affected by this change</p>",
        "id": 262250602,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1637514859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361356\">fee1-dead</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/PR.20.2390951.20mixed.20results/near/262250396\">said</a>:</p>\n<blockquote>\n<p><code>intern_const</code> uses a newtype wrapper <code>CstHash</code> which hashes the fields.</p>\n</blockquote>\n<p>Ah, I see that code now.</p>",
        "id": 262250617,
        "sender_full_name": "simulacrum",
        "timestamp": 1637514911
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/PR.20.2390951.20mixed.20results/near/262250602\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"361356\">fee1-dead</span> metadata decoding uses the Hash impl you modified, so I'm not super surprised it was affected by this change</p>\n</blockquote>\n<p>Hmmm. I assumed that it would use <code>HashStable</code> so modifying the <code>Hash</code> impl would have no effect.</p>",
        "id": 262250629,
        "sender_full_name": "fee1-dead",
        "timestamp": 1637514950
    },
    {
        "content": "<p>Oh uhh good question I'm not sure which it uses</p>",
        "id": 262250674,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1637514992
    },
    {
        "content": "<p>And I limited the implementation of Hash to only <code>&amp;'tcx ty::Const&lt;'tcx&gt;</code> so it restricts to hashing interned references</p>",
        "id": 262286360,
        "sender_full_name": "fee1-dead",
        "timestamp": 1637566019
    },
    {
        "content": "<p>Er, 'tcx there isn't special - it's just a lifetime</p>",
        "id": 262312477,
        "sender_full_name": "simulacrum",
        "timestamp": 1637584497
    },
    {
        "content": "<p>So that impl applies for all &amp;ty::Const</p>",
        "id": 262312546,
        "sender_full_name": "simulacrum",
        "timestamp": 1637584544
    },
    {
        "content": "<p>Just tried to profile locally today and 1. I did not find any meaningful information. 2. I was both surprised and confused because the modified compiler actually ran faster than the original, where the benchmarks were shown as \"regressions\".</p>",
        "id": 262452903,
        "sender_full_name": "fee1-dead",
        "timestamp": 1637673102
    },
    {
        "content": "<p>How did you profile? It's not atypical to see different results with locally built binaries, especially if you're not using the same level of optimization (pgo, LTO, etc)</p>",
        "id": 262453100,
        "sender_full_name": "simulacrum",
        "timestamp": 1637673241
    },
    {
        "content": "<p>I have another folder, basically <code>git checkout</code> the commit before my change, and copied my <code>config.toml</code> and built stage1. Both callgrind and perf record said the modified compiler is faster.</p>",
        "id": 262455067,
        "sender_full_name": "fee1-dead",
        "timestamp": 1637674186
    },
    {
        "content": "<p>What benchmark are you measuring? How big is the improvement?</p>\n<p>It's worth noting that CI can definitely deviate significantly from what you see locally, particularly for hot code.</p>",
        "id": 262455223,
        "sender_full_name": "simulacrum",
        "timestamp": 1637674251
    },
    {
        "content": "<p>Are there instructions somewhere for replicating what CI does? It seems hard to diagnose \"pgo made different decisions\" ... especially if your change would be an improvement without pgo</p>",
        "id": 262456163,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1637674690
    },
    {
        "content": "<p>DEPLOY=1 ./src/ci/docker/run dist-x86_64-linux, basically?</p>",
        "id": 262456210,
        "sender_full_name": "simulacrum",
        "timestamp": 1637674716
    },
    {
        "content": "<p>(and I wonder if it makes sense to disable pgo for benchmarking so we get more accurate comparisons)</p>",
        "id": 262456215,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1637674719
    },
    {
        "content": "<p>disabling PGO for benchmarking but not production builds feels like a pretty odd thing to do</p>",
        "id": 262456257,
        "sender_full_name": "simulacrum",
        "timestamp": 1637674739
    },
    {
        "content": "<p>ultimately we need to measure what we ship</p>",
        "id": 262456290,
        "sender_full_name": "simulacrum",
        "timestamp": 1637674756
    },
    {
        "content": "<p>I worry that will steer us into local minima of \"this is what pgo knows how to optimize well\", when we could see a larger improvement over time from changes that are each individually regressions if you're using pgo</p>",
        "id": 262456488,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1637674846
    },
    {
        "content": "<p>It's possible, but I feel like the reverse side of landing regressions for what we ship in the hope that they're actually going to become improvements in aggregate is... less clear-cut</p>",
        "id": 262456709,
        "sender_full_name": "simulacrum",
        "timestamp": 1637674933
    },
    {
        "content": "<p>like, it's definitely a tradeoff to use PGO</p>",
        "id": 262456727,
        "sender_full_name": "simulacrum",
        "timestamp": 1637674946
    },
    {
        "content": "<p>maybe even the wrong one!</p>",
        "id": 262456743,
        "sender_full_name": "simulacrum",
        "timestamp": 1637674954
    },
    {
        "content": "<p>but right now, at least, I've not yet been convinced the fairly significant wins (on the order of &gt;15%, IIRC, on many benchmarks) are something we should lose because it makes benchmarking less tightly predictable</p>",
        "id": 262456845,
        "sender_full_name": "simulacrum",
        "timestamp": 1637675017
    },
    {
        "content": "<blockquote>\n<p>but right now, at least, I've not yet been convinced the fairly significant wins (on the order of &gt;15%, IIRC, on many benchmarks) are something we should lose because it makes benchmarking less tightly predictable</p>\n</blockquote>\n<p>To be clear, I don't think we should disable pgo for what we ship, only for benchmarks. But I understand that's both hard to implement and means we get a less accurate idea of what the actual perf is</p>",
        "id": 262457473,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1637675360
    },
    {
        "content": "<blockquote>\n<p>It's possible, but I feel like the reverse side of landing regressions for what we ship in the hope that they're actually going to become improvements in aggregate</p>\n</blockquote>\n<p>I guess I don't see how we hope to measure this side of things</p>",
        "id": 262457653,
        "sender_full_name": "simulacrum",
        "timestamp": 1637675444
    },
    {
        "content": "<p>fwiw, I think firefox produces both pgo and non-pgo builds and regularly measures both in their CI</p>",
        "id": 262457680,
        "sender_full_name": "simulacrum",
        "timestamp": 1637675461
    },
    {
        "content": "<p>I think it's a little too much for us -- we already struggle with the amount of data thrown at you from measurement reports -- but it's something to consider once we get better at that.</p>",
        "id": 262457732,
        "sender_full_name": "simulacrum",
        "timestamp": 1637675491
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/PR.20.2390951.20mixed.20results/near/262455223\">said</a>:</p>\n<blockquote>\n<p>What benchmark are you measuring? How big is the improvement?</p>\n<p>It's worth noting that CI can definitely deviate significantly from what you see locally, particularly for hot code.</p>\n</blockquote>\n<p><a href=\"/user_uploads/4715/6H13sXRe7YVhVLnlsby_NnlQ/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/6H13sXRe7YVhVLnlsby_NnlQ/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/6H13sXRe7YVhVLnlsby_NnlQ/image.png\"></a></div><p><a href=\"/user_uploads/4715/tt2ae3mdWb2qe9nvRhvE3gaA/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/tt2ae3mdWb2qe9nvRhvE3gaA/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/tt2ae3mdWb2qe9nvRhvE3gaA/image.png\"></a></div>",
        "id": 262464159,
        "sender_full_name": "fee1-dead",
        "timestamp": 1637678422
    },
    {
        "content": "<p>Left is compiler with change</p>\n<p><a href=\"/user_uploads/4715/fcMKB_SJPxp8PGDvWv2LZXPs/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/fcMKB_SJPxp8PGDvWv2LZXPs/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/fcMKB_SJPxp8PGDvWv2LZXPs/image.png\"></a></div>",
        "id": 262464622,
        "sender_full_name": "fee1-dead",
        "timestamp": 1637678612
    },
    {
        "content": "<p>Both of those benchmarks are typically dominated by pretty \"uninteresting\" code, IIRC, such as code in the dynamic linker.</p>\n<p>I would suggest measuring something potentially larger -- e.g., the ripgrep-doc regression</p>",
        "id": 262464671,
        "sender_full_name": "simulacrum",
        "timestamp": 1637678637
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/fRMEB1-emtQyUAX1kcT46inr/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/fRMEB1-emtQyUAX1kcT46inr/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/fRMEB1-emtQyUAX1kcT46inr/image.png\"></a></div>",
        "id": 262466631,
        "sender_full_name": "fee1-dead",
        "timestamp": 1637679499
    },
    {
        "content": "<p>Yeah. I mean, it's hard to say. Typically I start looking at callgrind reports in kcachegrind, with callgrind adjusted with --dump-instr=yes at least, and start trying to figure out what the difference between builds is</p>",
        "id": 262466784,
        "sender_full_name": "simulacrum",
        "timestamp": 1637679591
    },
    {
        "content": "<p>it's worth noting our current PGO setup doesn't include Doc builds</p>",
        "id": 262466941,
        "sender_full_name": "simulacrum",
        "timestamp": 1637679629
    },
    {
        "content": "<p>so it may be worth working to add those in a separate PR</p>",
        "id": 262466985,
        "sender_full_name": "simulacrum",
        "timestamp": 1637679645
    },
    {
        "content": "<p>BTW can you demangle rust symbols in KCachegrind?</p>",
        "id": 262467035,
        "sender_full_name": "fee1-dead",
        "timestamp": 1637679671
    },
    {
        "content": "<p>I'm not sure what kcachegrind uses for demangling.</p>",
        "id": 262467077,
        "sender_full_name": "simulacrum",
        "timestamp": 1637679702
    },
    {
        "content": "<p>it probably needs to be updated to support the v0 format</p>",
        "id": 262467097,
        "sender_full_name": "simulacrum",
        "timestamp": 1637679715
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/T5qY_ZJq_zyx5DDHLUZZcJjH/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/T5qY_ZJq_zyx5DDHLUZZcJjH/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/T5qY_ZJq_zyx5DDHLUZZcJjH/image.png\"></a></div><p>callgrind results report that modified version runs faster for \"item_children\", but the perf website said it was a regression</p>",
        "id": 262467565,
        "sender_full_name": "fee1-dead",
        "timestamp": 1637679951
    },
    {
        "content": "<p>I've had cases where the optimized method itself was faster but other things became slower due to reasons</p>",
        "id": 262473183,
        "sender_full_name": "The 8472",
        "timestamp": 1637682305
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361356\">@fee1-dead</span> I've done some work recently to make the Valgrind v0 demangling story better. If you do a trunk build of valgrind it will demangle most of the v0 symbols (but not the ones with <code>.llvm.&lt;numbers&gt;</code> suffixes). To get and build Valgrind, it's something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>git clone git://sourceware.org/git/valgrind.git\ncd valgrind\nsh ./autogen.sh\nsh ./configure\nmake --quiet -j 8\n</code></pre></div>\n<p>Then you can run <code>vg-in-place</code> directly, or do <code>make install</code>and run it from the install directory.</p>",
        "id": 262500474,
        "sender_full_name": "nnethercote",
        "timestamp": 1637694829
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> On the question of what builds to benchmark on CI?</p>\n<p><span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span> Benchmark <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span> what <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span> you <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span> ship <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span>.</p>",
        "id": 262500699,
        "sender_full_name": "nnethercote",
        "timestamp": 1637694954
    },
    {
        "content": "<p>literally laughed out loud, my dog perked his head up <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 262500787,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1637694991
    },
    {
        "content": "<p>good dog</p>",
        "id": 262500883,
        "sender_full_name": "nnethercote",
        "timestamp": 1637695041
    },
    {
        "content": "<p>13/10</p>",
        "id": 262500943,
        "sender_full_name": "nnethercote",
        "timestamp": 1637695080
    },
    {
        "content": "<p>(I will say, I think there is value in providing easy ways to generate <em>variations</em> of the shipped build that are more amenable to various kinds of analysis. But I’m totally on board for the <em>minimum</em> of what CI should evaluate.)</p>",
        "id": 262504241,
        "sender_full_name": "pnkfelix",
        "timestamp": 1637696882
    },
    {
        "content": "<p>I suspect that this PR is like <a href=\"https://github.com/rust-lang/rust/pull/87688#issuecomment-940361493\">https://github.com/rust-lang/rust/pull/87688#issuecomment-940361493</a>, so I don't think I can take actions to fix the regression.</p>",
        "id": 262585381,
        "sender_full_name": "fee1-dead",
        "timestamp": 1637759154
    }
]