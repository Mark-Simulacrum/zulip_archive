[
    {
        "content": "<p>in distros, we usually prefer release-with-debuginfo builds, but I've had to disable that for rustc on 32-bit hosts due to OOM</p>",
        "id": 211283827,
        "sender_full_name": "cuviper",
        "timestamp": 1601052671
    },
    {
        "content": "<p>(all builds are native)</p>",
        "id": 211283846,
        "sender_full_name": "cuviper",
        "timestamp": 1601052678
    },
    {
        "content": "<p>isn't that a linker issue?</p>",
        "id": 211283888,
        "sender_full_name": "eddyb",
        "timestamp": 1601052705
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I think it was actually a rustc process that got out of hand, for <code>rustc_middle</code> or the older equivalent IIRC</p>",
        "id": 211283988,
        "sender_full_name": "cuviper",
        "timestamp": 1601052747
    },
    {
        "content": "<p>weird. maybe it's the LLVM encoding of DWARF that's causing that</p>",
        "id": 211284070,
        "sender_full_name": "eddyb",
        "timestamp": 1601052792
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> have you tried lowering the debuginfo from 2 to 1?</p>",
        "id": 211284082,
        "sender_full_name": "eddyb",
        "timestamp": 1601052801
    },
    {
        "content": "<p>I have seen similar problems linking LLVM itself, but that's not part of our distro rustc builds</p>",
        "id": 211284118,
        "sender_full_name": "cuviper",
        "timestamp": 1601052825
    },
    {
        "content": "<p>still useful for backtraces, but shouldn't take as many resources to build</p>",
        "id": 211284120,
        "sender_full_name": "eddyb",
        "timestamp": 1601052827
    },
    {
        "content": "<p>/me never built rustc with full debuginfo on purpose but always enables the line-only aka level 1 debuginfo</p>",
        "id": 211284277,
        "sender_full_name": "eddyb",
        "timestamp": 1601052892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I thought I tried that, but I'm not sure now. to be honest, those 32-bit targets are of much lower concern these days, so I'm kind of OK with just getting a functional compiler at all</p>",
        "id": 211284296,
        "sender_full_name": "cuviper",
        "timestamp": 1601052901
    },
    {
        "content": "<p>actually I think you shouldn't use full debuginfo on 64-bit either</p>",
        "id": 211284344,
        "sender_full_name": "eddyb",
        "timestamp": 1601052921
    },
    {
        "content": "<p>I recall something about libbacktrace bugs when there's more than 2GB of DWARF or so</p>",
        "id": 211284381,
        "sender_full_name": "eddyb",
        "timestamp": 1601052941
    },
    {
        "content": "<p>we prefer full debuginfo as a matter of distro policy</p>",
        "id": 211284389,
        "sender_full_name": "cuviper",
        "timestamp": 1601052948
    },
    {
        "content": "<p>right, but you should test it :P</p>",
        "id": 211284408,
        "sender_full_name": "eddyb",
        "timestamp": 1601052956
    },
    {
        "content": "<p>it's also stripped to a separate package thoguh</p>",
        "id": 211284471,
        "sender_full_name": "cuviper",
        "timestamp": 1601052970
    },
    {
        "content": "<p>sure, but I would install that if I want an accurate backtrace</p>",
        "id": 211284496,
        "sender_full_name": "eddyb",
        "timestamp": 1601052982
    },
    {
        "content": "<p>(and then get a crash if that bug is still there)</p>",
        "id": 211284512,
        "sender_full_name": "eddyb",
        "timestamp": 1601052993
    },
    {
        "content": "<p>you can use any regular rustc error and pass <code>-Z treat-err-as-bug</code> while having <code>RUST_BACKTRACE=1</code> set</p>",
        "id": 211284599,
        "sender_full_name": "eddyb",
        "timestamp": 1601053043
    },
    {
        "content": "<p><a href=\"https://koji.fedoraproject.org/koji/rpminfo?fileOrder=-size&amp;rpmID=23033751&amp;buildrootOrder=-id&amp;buildrootStart=0#filelist\">https://koji.fedoraproject.org/koji/rpminfo?fileOrder=-size&amp;rpmID=23033751&amp;buildrootOrder=-id&amp;buildrootStart=0#filelist</a></p>",
        "id": 211284608,
        "sender_full_name": "cuviper",
        "timestamp": 1601053048
    },
    {
        "content": "<p>biggest is ~900MB</p>",
        "id": 211284626,
        "sender_full_name": "cuviper",
        "timestamp": 1601053059
    },
    {
        "content": "<p>huh</p>",
        "id": 211284642,
        "sender_full_name": "eddyb",
        "timestamp": 1601053074
    },
    {
        "content": "<p>anyway, the bigger concern would be if even release w/ debug=0 starting using too much memory for 32-bit hosts</p>",
        "id": 211284759,
        "sender_full_name": "cuviper",
        "timestamp": 1601053122
    },
    {
        "content": "<p>I wonder what the difference is (i.e. why you have only 900MB)...cc  <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> I think I talked to them a few months ago about the 2GB thing</p>",
        "id": 211284761,
        "sender_full_name": "eddyb",
        "timestamp": 1601053123
    },
    {
        "content": "<p>our builders do have lots of total memory, so it's a matter of per-process address space</p>",
        "id": 211284845,
        "sender_full_name": "cuviper",
        "timestamp": 1601053170
    },
    {
        "content": "<p>...I faintly remember some cursed thing here, yes</p>",
        "id": 211284875,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1601053188
    },
    {
        "content": "<p>but not much more :D</p>",
        "id": 211284883,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1601053192
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> do you know when the last time was when you built rustc with full debuginfo?</p>",
        "id": 211284983,
        "sender_full_name": "eddyb",
        "timestamp": 1601053229
    },
    {
        "content": "<p>and if it was broken still</p>",
        "id": 211284990,
        "sender_full_name": "eddyb",
        "timestamp": 1601053237
    },
    {
        "content": "<p>@eddyb maybe you had full debuginfo including static LLVM and its debuginfo?</p>",
        "id": 211285039,
        "sender_full_name": "cuviper",
        "timestamp": 1601053263
    },
    {
        "content": "<p>Don't remember exactly, no. I don't really do full debuginfo builds anymore.</p>",
        "id": 211285045,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1601053265
    },
    {
        "content": "<p>ours is dynamic LLVM</p>",
        "id": 211285100,
        "sender_full_name": "cuviper",
        "timestamp": 1601053282
    },
    {
        "content": "<p>I never hit this because I don't build rustc with full debuginfo. it's possible the people who did enabled debug LLVM as well</p>",
        "id": 211285131,
        "sender_full_name": "eddyb",
        "timestamp": 1601053294
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> hmm I wonder if the max RSS drops when you reduce codegen units to a small number (or just 1)</p>",
        "id": 211285228,
        "sender_full_name": "eddyb",
        "timestamp": 1601053323
    },
    {
        "content": "<p>there's also a <code>-Z</code> flag to disable multiple LLVM threads</p>",
        "id": 211285288,
        "sender_full_name": "eddyb",
        "timestamp": 1601053349
    },
    {
        "content": "<p>woah, <a href=\"https://koji.fedoraproject.org/koji/rpminfo?rpmID=23322027\">https://koji.fedoraproject.org/koji/rpminfo?rpmID=23322027</a></p>\n<div class=\"codehilite\"><pre><span></span><code>/usr/lib/debug/usr/lib64/libLLVM-11.so-11.0.0-0.2.rc3.fc34.x86_64.debug 2,428,333,752\n</code></pre></div>",
        "id": 211285305,
        "sender_full_name": "cuviper",
        "timestamp": 1601053363
    },
    {
        "content": "<p>ah there you go :P</p>",
        "id": 211285330,
        "sender_full_name": "eddyb",
        "timestamp": 1601053376
    },
    {
        "content": "<p>anyway I'm getting a few ideas for reducing memory usage but... most of them come at some expense in terms of time</p>",
        "id": 211285391,
        "sender_full_name": "eddyb",
        "timestamp": 1601053406
    },
    {
        "content": "<p>it's easier to just throw 64-bit processes at the problem</p>",
        "id": 211285411,
        "sender_full_name": "eddyb",
        "timestamp": 1601053421
    },
    {
        "content": "<p>yeah, I don't really want to spend developer time on 32-bit hosts, as long as it can limp along...</p>",
        "id": 211285507,
        "sender_full_name": "cuviper",
        "timestamp": 1601053458
    },
    {
        "content": "<p>one hilarious thing I just thought of is using tmpfs as a \"manual swap\" backend for a 32-bit process, since it's in RAM (however much the system actually has) and can exceed 4GB, so it should be faster than touching any real disks</p>",
        "id": 211285748,
        "sender_full_name": "eddyb",
        "timestamp": 1601053568
    },
    {
        "content": "<p>On 32 bit Windows with <em>incremental enabled</em> Rust cannot bootstrap on the first try either (every re-run it fails further).</p>",
        "id": 211285910,
        "sender_full_name": "mati865",
        "timestamp": 1601053662
    },
    {
        "content": "<p>love it</p>",
        "id": 211285930,
        "sender_full_name": "eddyb",
        "timestamp": 1601053677
    },
    {
        "content": "<p>I think ARM userspace is strictly limited to 2GB address space, and i686 may be 2/3GB</p>",
        "id": 211286034,
        "sender_full_name": "cuviper",
        "timestamp": 1601053713
    },
    {
        "content": "<p>I vaguely recall i686 allowing all 4GB if you use a 64-bit kernel, but I'm not sure of that</p>",
        "id": 211286061,
        "sender_full_name": "cuviper",
        "timestamp": 1601053735
    },
    {
        "content": "<p>For Windows i686 it's 2 GiB, on Linux I think process can use 3 GiB.</p>",
        "id": 211286095,
        "sender_full_name": "mati865",
        "timestamp": 1601053756
    },
    {
        "content": "<p>(incremental is part of what I was thinking of with the \"manually swapping\", since it already has save &amp; restore, we would just have to be a bit more clever wrt certain aspects)</p>",
        "id": 211286098,
        "sender_full_name": "eddyb",
        "timestamp": 1601053757
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119581\">@mati865</span> Windows has a /3GB switch too</p>",
        "id": 211286278,
        "sender_full_name": "cuviper",
        "timestamp": 1601053849
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> but it's configured at the boot time and breaks some 32-bit applications...</p>",
        "id": 211286407,
        "sender_full_name": "mati865",
        "timestamp": 1601053922
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> sorry that I derailed this topic on the memory tangent...</p>",
        "id": 211286735,
        "sender_full_name": "cuviper",
        "timestamp": 1601054087
    },
    {
        "content": "<p>you can always fork the topic :D</p>",
        "id": 211286774,
        "sender_full_name": "eddyb",
        "timestamp": 1601054105
    },
    {
        "content": "<p>regarding the tmpfs idea, eternaleye pointed out <code>memfd_create</code> to me, which looks really cool</p>",
        "id": 211289813,
        "sender_full_name": "eddyb",
        "timestamp": 1601055681
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> memfd is very much as cool as it looks. :)</p>",
        "id": 211293511,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601057424
    }
]