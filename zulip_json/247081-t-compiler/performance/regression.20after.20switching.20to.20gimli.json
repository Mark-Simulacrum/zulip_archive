[
    {
        "content": "<p>Looks like the libbacktrace -&gt; gimli switch <a href=\"https://github.com/rust-lang/rust/pull/73441\">https://github.com/rust-lang/rust/pull/73441</a> also brought a number of regressions<br>\n<a href=\"https://perf.rust-lang.org/compare.html?start=d3df8512d2c2afc6d2e7d8b5b951dd7f2ad77b02&amp;end=1fa54ad9680cc82e7301f8ed4e9b7402dfd6ce0e&amp;stat=instructions%3Au\">https://perf.rust-lang.org/compare.html?start=d3df8512d2c2afc6d2e7d8b5b951dd7f2ad77b02&amp;end=1fa54ad9680cc82e7301f8ed4e9b7402dfd6ce0e&amp;stat=instructions%3Au</a></p>",
        "id": 204397008,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1595233378
    },
    {
        "content": "<p>me, on the PR (before you edited the Zulip link in):</p>\n<blockquote>\n<p>Could that be from linking all that code into the final executable? Seems like the main thing that would affect incremental runs too.</p>\n<p><strong>EDIT</strong>: seems to be a combination of <code>run_linker</code> and <code>metadata_decode_entry</code>. The latter might be fixable by separating some of the code into a crate, but it's unclear how/if that might help. Not sure what we can do about link times.</p>\n</blockquote>",
        "id": 204397266,
        "sender_full_name": "eddyb",
        "timestamp": 1595233611
    },
    {
        "content": "<p>It's not this PR, I found another one that caused the regression. Looking for the link.</p>",
        "id": 204397769,
        "sender_full_name": "mati865",
        "timestamp": 1595234029
    },
    {
        "content": "<p>the LD one?</p>",
        "id": 204397825,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1595234060
    },
    {
        "content": "<p>Yeah</p>",
        "id": 204397829,
        "sender_full_name": "mati865",
        "timestamp": 1595234068
    },
    {
        "content": "<p>there are two different bumps in the graph  :(</p>",
        "id": 204397831,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1595234074
    },
    {
        "content": "<p>oh I thought the perf run was for this PR, I didn't check</p>",
        "id": 204397838,
        "sender_full_name": "eddyb",
        "timestamp": 1595234085
    },
    {
        "content": "<p>is the gap that big because of the breakage to <code>rust-src</code>?</p>",
        "id": 204397874,
        "sender_full_name": "eddyb",
        "timestamp": 1595234122
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/BqoMXKmYWyAtXbdiv16kzUIj/bump.png\">bump.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/BqoMXKmYWyAtXbdiv16kzUIj/bump.png\" title=\"bump.png\"><img src=\"/user_uploads/4715/BqoMXKmYWyAtXbdiv16kzUIj/bump.png\"></a></div>",
        "id": 204397877,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1595234125
    },
    {
        "content": "<p>the first one is already reverted/mitigated</p>",
        "id": 204397893,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1595234144
    },
    {
        "content": "<p>Oh, sorry.</p>",
        "id": 204397919,
        "sender_full_name": "mati865",
        "timestamp": 1595234158
    },
    {
        "content": "<p>Sounds bad then.</p>",
        "id": 204397960,
        "sender_full_name": "mati865",
        "timestamp": 1595234168
    },
    {
        "content": "<p>the first one was from the rollup, the second one is libbacktrace</p>",
        "id": 204397964,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1595234170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/regression.20after.20switching.20to.20gimli/near/204397874\">said</a>:</p>\n<blockquote>\n<p>is the gap that big because of the breakage to <code>rust-src</code>?</p>\n</blockquote>\n<p>no idea,  there have also been days with only one merge per day recently</p>",
        "id": 204397991,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1595234209
    },
    {
        "content": "<p>In the perf result you linked above regression is again coming from <code>run_linker</code>.</p>",
        "id": 204398082,
        "sender_full_name": "mati865",
        "timestamp": 1595234289
    },
    {
        "content": "<p>oh I was getting confused by everything in <a href=\"https://github.com/rust-lang/rust/compare/d3df8512d2c2afc6d2e7d8b5b951dd7f2ad77b02...1fa54ad9680cc82e7301f8ed4e9b7402dfd6ce0e\">https://github.com/rust-lang/rust/compare/d3df8512d2c2afc6d2e7d8b5b951dd7f2ad77b02...1fa54ad9680cc82e7301f8ed4e9b7402dfd6ce0e</a></p>",
        "id": 204398093,
        "sender_full_name": "eddyb",
        "timestamp": 1595234313
    },
    {
        "content": "<p>it's only two merges,  a rollup and the backtrace-gilmi PR</p>",
        "id": 204398106,
        "sender_full_name": "eddyb",
        "timestamp": 1595234327
    },
    {
        "content": "<p>Or at least big part of it?</p>",
        "id": 204398108,
        "sender_full_name": "mati865",
        "timestamp": 1595234328
    },
    {
        "content": "<p>not seeing anything in the rollup that would increase link times that much</p>",
        "id": 204398166,
        "sender_full_name": "eddyb",
        "timestamp": 1595234386
    },
    {
        "content": "<p>oh and the rollup is in the perf queue, so we'll have further confirmation in a while?</p>",
        "id": 204398240,
        "sender_full_name": "eddyb",
        "timestamp": 1595234428
    },
    {
        "content": "<p>I'll see when I get next to my PC, perf.rlo doesn't work nice on the mobile...</p>",
        "id": 204398442,
        "sender_full_name": "mati865",
        "timestamp": 1595234589
    },
    {
        "content": "<p>I think we should wait until perf.rlo benchmarks rollup so we get separate results. Personally I'd bet <a href=\"https://github.com/rust-lang/rust/pull/74464\">https://github.com/rust-lang/rust/pull/74464</a></p>\n<p>cc <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> perf.rlo queue seems stuck</p>",
        "id": 204401773,
        "sender_full_name": "mati865",
        "timestamp": 1595237003
    },
    {
        "content": "<p>but that's a dependency of <code>rustc</code>, how could it affect link time?</p>",
        "id": 204401838,
        "sender_full_name": "eddyb",
        "timestamp": 1595237046
    },
    {
        "content": "<p>Rust now does more work when linking</p>",
        "id": 204401892,
        "sender_full_name": "mati865",
        "timestamp": 1595237106
    },
    {
        "content": "<p>there's no way a one-time path thing is more expensive than linking an entire DWARF parser</p>",
        "id": 204401914,
        "sender_full_name": "eddyb",
        "timestamp": 1595237130
    },
    {
        "content": "<p>the former should be about the cost of linking for one or two extra functions in libstd</p>",
        "id": 204401972,
        "sender_full_name": "eddyb",
        "timestamp": 1595237164
    },
    {
        "content": "<p>if it's even any different (I'd be very amazed to be proven wrong on this one)</p>",
        "id": 204401996,
        "sender_full_name": "eddyb",
        "timestamp": 1595237188
    },
    {
        "content": "<p>See <a href=\"https://github.com/rust-lang/rust/pull/74478\">https://github.com/rust-lang/rust/pull/74478</a> for some magic numbers ;D</p>",
        "id": 204402001,
        "sender_full_name": "mati865",
        "timestamp": 1595237193
    },
    {
        "content": "<p>yeah but that's affecting everything the linker does with strings</p>",
        "id": 204402031,
        "sender_full_name": "eddyb",
        "timestamp": 1595237220
    },
    {
        "content": "<p>it's multiplied by the number of strings in whatever's being linked</p>",
        "id": 204402049,
        "sender_full_name": "eddyb",
        "timestamp": 1595237232
    },
    {
        "content": "<p>the old <code>path_relative_from(a, b)</code> seems to be roughly linear in <code>max(a.len(), b.len())</code></p>",
        "id": 204402160,
        "sender_full_name": "eddyb",
        "timestamp": 1595237301
    },
    {
        "content": "<p>and how long is a path anyway :P</p>",
        "id": 204402190,
        "sender_full_name": "eddyb",
        "timestamp": 1595237316
    },
    {
        "content": "<p>Well, it's the only change that touched linker code <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 204402226,
        "sender_full_name": "mati865",
        "timestamp": 1595237352
    },
    {
        "content": "<p>(also I think I didn't realize we had something like this, I could've really used it last year when dealing with some absolute paths ending up in Cargo hashes)</p>",
        "id": 204402240,
        "sender_full_name": "eddyb",
        "timestamp": 1595237364
    },
    {
        "content": "<p>I still think the large dependency added to libstd is more likely to increase link times, by the simple factor of there being a lot more to link :P</p>",
        "id": 204402346,
        "sender_full_name": "eddyb",
        "timestamp": 1595237426
    },
    {
        "content": "<p>but I guess we'll see, I don't really have anything to bet on (or any hats to eat)</p>",
        "id": 204402367,
        "sender_full_name": "eddyb",
        "timestamp": 1595237451
    },
    {
        "content": "<p>We replaced <del>libunwind</del> libbacktrace with other code, I don't expect that huge changes because of that.</p>",
        "id": 204402464,
        "sender_full_name": "mati865",
        "timestamp": 1595237522
    },
    {
        "content": "<p>do we really not use libunwind for unwinding panics at all?</p>",
        "id": 204402526,
        "sender_full_name": "eddyb",
        "timestamp": 1595237564
    },
    {
        "content": "<p>(I mean, that'd be cool, but I thought we only did that on the few targets where we don't have much of a choice)</p>",
        "id": 204402551,
        "sender_full_name": "eddyb",
        "timestamp": 1595237588
    },
    {
        "content": "<p>we replaced libbacktrace, not libunwind I think</p>",
        "id": 204402564,
        "sender_full_name": "bjorn3",
        "timestamp": 1595237605
    },
    {
        "content": "<p>Oops, I mean libbacktrace</p>",
        "id": 204402571,
        "sender_full_name": "mati865",
        "timestamp": 1595237611
    },
    {
        "content": "<p>hmm I guess that was statically linked too?</p>",
        "id": 204402587,
        "sender_full_name": "eddyb",
        "timestamp": 1595237623
    },
    {
        "content": "<p>AFAICT yes</p>",
        "id": 204402640,
        "sender_full_name": "mati865",
        "timestamp": 1595237654
    },
    {
        "content": "<p>We can just wait until Mark fixes perf.rlo and then we will know if it was rollup or gimli.</p>",
        "id": 204402703,
        "sender_full_name": "mati865",
        "timestamp": 1595237709
    },
    {
        "content": "<p>I am not aware of any bugs on perf.rlo to be honest</p>",
        "id": 204413918,
        "sender_full_name": "simulacrum",
        "timestamp": 1595246851
    },
    {
        "content": "<p>Queue on the status page looked stuck but it works now, sorry for the noise.</p>",
        "id": 204415313,
        "sender_full_name": "mati865",
        "timestamp": 1595247888
    },
    {
        "content": "<p>hm okay it updates every 2.5 hours roughly so not too surprising</p>",
        "id": 204415371,
        "sender_full_name": "simulacrum",
        "timestamp": 1595247938
    },
    {
        "content": "<p>I'm still thinking of the best way to sync current progress</p>",
        "id": 204415378,
        "sender_full_name": "simulacrum",
        "timestamp": 1595247946
    },
    {
        "content": "<p>Back to the topic, I was sort of right.<br>\nGimli perf result: <a href=\"https://perf.rust-lang.org/compare.html?start=7d31ffc1ac9e9ea356e896e63307168a64501b9d&amp;end=1fa54ad9680cc82e7301f8ed4e9b7402dfd6ce0e&amp;stat=instructions:u\">https://perf.rust-lang.org/compare.html?start=7d31ffc1ac9e9ea356e896e63307168a64501b9d&amp;end=1fa54ad9680cc82e7301f8ed4e9b7402dfd6ce0e&amp;stat=instructions:u</a><br>\nRollup perf result: <a href=\"https://perf.rust-lang.org/compare.html?start=d3df8512d2c2afc6d2e7d8b5b951dd7f2ad77b02&amp;end=7d31ffc1ac9e9ea356e896e63307168a64501b9d&amp;stat=instructions:u\">https://perf.rust-lang.org/compare.html?start=d3df8512d2c2afc6d2e7d8b5b951dd7f2ad77b02&amp;end=7d31ffc1ac9e9ea356e896e63307168a64501b9d&amp;stat=instructions:u</a></p>\n<p>You were right about gimili regression, it's the huge one but we also have serious regression in the rollup of 11 PRs <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 204416081,
        "sender_full_name": "mati865",
        "timestamp": 1595248376
    },
    {
        "content": "<p>Is anyone with <code>bors try</code> permission up to create reverts and benchmark most suspicious PRs in the rollup?</p>",
        "id": 204416153,
        "sender_full_name": "mati865",
        "timestamp": 1595248426
    },
    {
        "content": "<p>gah there's a bunch of perf-sensitive PRs in that rollup</p>",
        "id": 204417021,
        "sender_full_name": "simulacrum",
        "timestamp": 1595248967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> what's the command for testing on perf nowadays?</p>",
        "id": 204426358,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595254088
    },
    {
        "content": "<p>I want to test out <a href=\"https://github.com/rust-lang/rust/pull/74560\">https://github.com/rust-lang/rust/pull/74560</a> to see if it has an affect on link times at all</p>",
        "id": 204426369,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595254097
    },
    {
        "content": "<p>alas :(, mind doing the <code>@rust-timer queue</code> for me?</p>",
        "id": 204426486,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595254180
    },
    {
        "content": "<p>Ok so I believe we have:</p>\n<ul>\n<li><a href=\"https://perf.rust-lang.org/compare.html?start=71384101ea3b030b80f7def80a37f67e148518b0&amp;end=2e7283ac4c3767c9483f82e77119a8794133abea\">perf for #74560</a> - green, but not hugely greent</li>\n<li><a href=\"https://perf.rust-lang.org/compare.html?start=7d31ffc1ac9e9ea356e896e63307168a64501b9d&amp;end=1fa54ad9680cc82e7301f8ed4e9b7402dfd6ce0e&amp;stat=instructions%3Au\">perf of #73411</a> - very red</li>\n<li><a href=\"https://perf.rust-lang.org/compare.html?start=1fa54ad9680cc82e7301f8ed4e9b7402dfd6ce0e&amp;end=2e7283ac4c3767c9483f82e77119a8794133abea\">perf of just after gimli to #74560</a> - pretty green</li>\n<li><a href=\"https://perf.rust-lang.org/compare.html?start=7d31ffc1ac9e9ea356e896e63307168a64501b9d&amp;end=2e7283ac4c3767c9483f82e77119a8794133abea\">perf of just before gimli to #74560</a></li>\n</ul>",
        "id": 204500298,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595290776
    },
    {
        "content": "<p>I was thinking about this though, and this doesn't actually make a ton of sense. The fact that less debuginfo makes things faster at the instruction level for rustc is quite bizarre because the instruction counts of the linker itself aren't counted, and rustc shouldn't do anything differently regardless of whether the upstream libraries have debuginfo.</p>",
        "id": 204500393,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595290887
    },
    {
        "content": "<p>the wall clock of the linker went down by turning down debuginfo, which matches as expected, but how that has any affect on instruction counts is perplexing</p>",
        "id": 204500717,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595291201
    },
    {
        "content": "<p>from what I can tell though it looks like this is slowing things down just because more crates are loaded</p>",
        "id": 204500730,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595291221
    },
    {
        "content": "<p>and it's not exactly news that rust's compilation model isn't scalable</p>",
        "id": 204500744,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595291233
    },
    {
        "content": "<p>it seems like there's a constant slowdown basically from adding more crates, and that's just proportionally a lot of some of the benchmarks' compilation times</p>",
        "id": 204500834,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595291309
    },
    {
        "content": "<blockquote>\n<p>the instruction counts of the linker itself aren't counted</p>\n</blockquote>\n<p>I'm pretty sure this is not true</p>",
        "id": 204503842,
        "sender_full_name": "simulacrum",
        "timestamp": 1595294307
    },
    {
        "content": "<p>We just use <code>perf stat</code> which collects all child processes I think by default, otherwise we'd e.g. expect to see very low instruction counts on something like <code>perf stat make</code> but that's definitely not true afaik</p>",
        "id": 204503883,
        "sender_full_name": "simulacrum",
        "timestamp": 1595294391
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> one thought is that we could presumably recoup some of the costs for the admittedly quite high cost of splitting backtrace into a separate library and treating it like a C library again</p>",
        "id": 204503934,
        "sender_full_name": "simulacrum",
        "timestamp": 1595294443
    },
    {
        "content": "<p>but that seems... bad</p>",
        "id": 204503937,
        "sender_full_name": "simulacrum",
        "timestamp": 1595294450
    },
    {
        "content": "<p>Aha interesting, that would indeed explain more then yeah</p>",
        "id": 204505418,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595296401
    },
    {
        "content": "<p>Yeah I don't think it's worth trying to make gimli a c library, tbh this just looks like \"more.stuff is linked\" which is true...</p>",
        "id": 204505477,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595296473
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> also most of those links that are comparing across time are basically useless unfortunately, we've had a ton of various regressions and improvements over the past week</p>",
        "id": 204505590,
        "sender_full_name": "simulacrum",
        "timestamp": 1595296620
    },
    {
        "content": "<p>looks like it yes</p>",
        "id": 204505605,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595296646
    },
    {
        "content": "<p>the thing that concerns me is less the linking time and more so the 1439 additional metadata entries we're decoding on e.g. helloworld</p>",
        "id": 204505659,
        "sender_full_name": "simulacrum",
        "timestamp": 1595296684
    },
    {
        "content": "<p>which feels very wrong to me personally, like we're e.g. re-codegenning backtrace or something</p>",
        "id": 204505670,
        "sender_full_name": "simulacrum",
        "timestamp": 1595296705
    },
    {
        "content": "<p>My model of the world is that basically backtrace should be compiled into std and we should not need any more time in rustc as a result of it, but that seems untrue</p>",
        "id": 204505689,
        "sender_full_name": "simulacrum",
        "timestamp": 1595296731
    },
    {
        "content": "<p>I doubt it's anything like that, this is just exposing existing perf bugs with linking crates</p>",
        "id": 204505691,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595296734
    },
    {
        "content": "<p>I mean it's not the linker?</p>",
        "id": 204505705,
        "sender_full_name": "simulacrum",
        "timestamp": 1595296752
    },
    {
        "content": "<p>Rusts linking model is it always loads transitive deps, and now there are more of them</p>",
        "id": 204505707,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595296755
    },
    {
        "content": "<p>Right, rustc loads all transitive deps</p>",
        "id": 204505717,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595296769
    },
    {
        "content": "<p>And it's probably not smart enough yet to skip work if nothing is used</p>",
        "id": 204505728,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595296786
    },
    {
        "content": "<p>I thought we were pretty careful about being super lazy about metadata decoding</p>",
        "id": 204505730,
        "sender_full_name": "simulacrum",
        "timestamp": 1595296790
    },
    {
        "content": "<p>maybe I was too optimistic</p>",
        "id": 204505733,
        "sender_full_name": "simulacrum",
        "timestamp": 1595296797
    },
    {
        "content": "<p>Definitely for the body of the crate, maybe not for top level things</p>",
        "id": 204505805,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595296823
    },
    {
        "content": "<p>Or maybe we query more about transitive stuff than we thought</p>",
        "id": 204505812,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595296845
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> how do you feel about reverting this and trying to track down the transitive things separately? tbh I'm not too optimistic about us being able to get the perf impact down</p>",
        "id": 204505908,
        "sender_full_name": "simulacrum",
        "timestamp": 1595296993
    },
    {
        "content": "<p>I'll think more tomorrow, but if this backs out now it seems like it will never land</p>",
        "id": 204505979,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595297068
    },
    {
        "content": "<p>I don't have time to fix bugs in rustc to recover a few ms from this pr</p>",
        "id": 204505992,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595297095
    },
    {
        "content": "<p>Yeah</p>",
        "id": 204505995,
        "sender_full_name": "simulacrum",
        "timestamp": 1595297099
    },
    {
        "content": "<p>This just fixed a giant soundness hole in libstd basically</p>",
        "id": 204506014,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595297122
    },
    {
        "content": "<p>I agree that I'm pretty sure we need to eat the loss -- and really it seems like it's pretty likely this just exposes a potentially really non-optimized case in rustc</p>",
        "id": 204506053,
        "sender_full_name": "simulacrum",
        "timestamp": 1595297162
    },
    {
        "content": "<p>Wait, are you talking about just eating up to 40% perf losses?</p>",
        "id": 204506115,
        "sender_full_name": "njn",
        "timestamp": 1595297266
    },
    {
        "content": "<p>This is the part I need to look more into, if all the losses are just 50ms then that seems much less bad</p>",
        "id": 204506209,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595297382
    },
    {
        "content": "<p>I'll dig more into the perf stuff tomorrow</p>",
        "id": 204506217,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595297397
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> to be clear, we've already recovered a good portion of that by just disabling some debug info</p>",
        "id": 204506353,
        "sender_full_name": "simulacrum",
        "timestamp": 1595297566
    },
    {
        "content": "<p>I personally suspect that we should revert and then start cherry-picking fixes atop a branch so we can better evaluate the holistic perf impact</p>",
        "id": 204506369,
        "sender_full_name": "simulacrum",
        "timestamp": 1595297609
    },
    {
        "content": "<p>I don't even really want to think about what a +40% -10% means especially with stuff in between that</p>",
        "id": 204506383,
        "sender_full_name": "simulacrum",
        "timestamp": 1595297630
    },
    {
        "content": "<p>for example, for helloworld-opt full, after we applied <a href=\"https://github.com/rust-lang/rust/commit/2e7283ac4c3767c9483f82e77119a8794133abea\">https://github.com/rust-lang/rust/commit/2e7283ac4c3767c9483f82e77119a8794133abea</a>, we're down to <em>less</em> than the perf before gimli ever landed</p>",
        "id": 204506453,
        "sender_full_name": "simulacrum",
        "timestamp": 1595297721
    },
    {
        "content": "<p>649,241,147.00 before gimli<br>\n946,943,019.00 w/ gimli<br>\n649,241,147.00 w/ debuginfo (base commit of w/o debuginfo patch)<br>\n589,260,782.00 w/o debuginfo</p>",
        "id": 204506512,
        "sender_full_name": "simulacrum",
        "timestamp": 1595297776
    },
    {
        "content": "<p>hm maybe some of those numbers are wrong</p>",
        "id": 204506623,
        "sender_full_name": "simulacrum",
        "timestamp": 1595297965
    },
    {
        "content": "<p>but regardless, it seems like there's definitely some open questions here that are best answered by fully reverting everything and then bors trying a dedicated PR</p>",
        "id": 204506653,
        "sender_full_name": "simulacrum",
        "timestamp": 1595297988
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> god I hate percentages :P</p>",
        "id": 204507683,
        "sender_full_name": "eddyb",
        "timestamp": 1595299234
    },
    {
        "content": "<p>+40% -10% should technically be +26% but that's with nothing else happening</p>",
        "id": 204507702,
        "sender_full_name": "eddyb",
        "timestamp": 1595299287
    },
    {
        "content": "<p>the confusing thing is that fixing a regression will always have less \"percentage\" than the regression itself</p>",
        "id": 204507757,
        "sender_full_name": "eddyb",
        "timestamp": 1595299327
    },
    {
        "content": "<p>so you pretty much want to just ignore the math and \"measure across\" the regression-&gt;fix (even if partial fix?) gap</p>",
        "id": 204507781,
        "sender_full_name": "eddyb",
        "timestamp": 1595299395
    },
    {
        "content": "<p>oh, that's funny, a lot of the regressions are on <code>-doc</code></p>",
        "id": 204507846,
        "sender_full_name": "eddyb",
        "timestamp": 1595299493
    },
    {
        "content": "<p>presumably <code>rustdoc</code> is stumbling across the backtrace code in libstd? (but it also does full-crate-graph collection of some stuff like traits and impls)</p>",
        "id": 204507867,
        "sender_full_name": "eddyb",
        "timestamp": 1595299547
    },
    {
        "content": "<p><del>@<strong>Alex Crichton</strong> I opened the \"just before/after gimli to <a href=\"https://github.com/rust-lang/rust/issues/74560\"><a href=\"https://github.com/rust-lang/rust/issues/74560\">#74560</a></a>\" links and clicked on \"compare\" and there's way more stuff in there</del> (ignore me, I got turned around)</p>",
        "id": 204508069,
        "sender_full_name": "eddyb",
        "timestamp": 1595299882
    },
    {
        "content": "<p>before gimli</p>",
        "id": 204508075,
        "sender_full_name": "eddyb",
        "timestamp": 1595299900
    },
    {
        "content": "<p>ah dammit I got confused by the branch names</p>",
        "id": 204508082,
        "sender_full_name": "eddyb",
        "timestamp": 1595299920
    },
    {
        "content": "<p>I wish we could see a PR timeline instead of commits, it would be much less confusing</p>",
        "id": 204508152,
        "sender_full_name": "eddyb",
        "timestamp": 1595300029
    },
    {
        "content": "<p>anyway this is what I was trying to get:</p>\n<ul>\n<li><a href=\"https://perf.rust-lang.org/compare.html?start=1fa54ad9680cc82e7301f8ed4e9b7402dfd6ce0e&amp;end=71384101ea3b030b80f7def80a37f67e148518b0\">inner (after regression -&gt; before partial fix)</a></li>\n<li><a href=\"https://perf.rust-lang.org/compare.html?start=7d31ffc1ac9e9ea356e896e63307168a64501b9d&amp;end=2e7283ac4c3767c9483f82e77119a8794133abea\">outer (before regression -&gt; after partial fix)</a></li>\n</ul>",
        "id": 204508269,
        "sender_full_name": "eddyb",
        "timestamp": 1595300192
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I don't think we can be scientific here easily because there was an improvement since the regression landed. the easieast thing in terms of juggling is landing a revert of the regression and re-landing the regression, measuring its impact with and without the debuginfo partial fix within a PR</p>",
        "id": 204508287,
        "sender_full_name": "eddyb",
        "timestamp": 1595300277
    },
    {
        "content": "<p>Why is <code>perf</code>ing a revert not a viable option?</p>",
        "id": 204508338,
        "sender_full_name": "nagisa",
        "timestamp": 1595300352
    },
    {
        "content": "<p>either that or we could add a \"delta of deltas\" mode to <a href=\"http://perf.rust-lang.org\">perf.rust-lang.org</a> :P</p>",
        "id": 204508339,
        "sender_full_name": "eddyb",
        "timestamp": 1595300353
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> ah hmm. yeah that might work. perf a revert of both regression+partial fix, after landing the partial fix?</p>",
        "id": 204508356,
        "sender_full_name": "eddyb",
        "timestamp": 1595300398
    },
    {
        "content": "<p>or just use the try build for the partial fix as the \"before\"</p>",
        "id": 204508400,
        "sender_full_name": "eddyb",
        "timestamp": 1595300416
    },
    {
        "content": "<p>since the data we can't directly get is <code>outer - inner</code>, basically</p>",
        "id": 204508410,
        "sender_full_name": "eddyb",
        "timestamp": 1595300439
    },
    {
        "content": "<p>what about comparing the absolute instruction count values? Or is it that <code>perf</code> cannot compare \"current\" vs arbitrary other selected commit?</p>",
        "id": 204508422,
        "sender_full_name": "nagisa",
        "timestamp": 1595300476
    },
    {
        "content": "<p>and we can swap the two commits if we do the perf revert thing so the values have the right polarity</p>",
        "id": 204508425,
        "sender_full_name": "eddyb",
        "timestamp": 1595300483
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> perf would need to take in 4 commits for it to render all the deltas usefully</p>",
        "id": 204508429,
        "sender_full_name": "eddyb",
        "timestamp": 1595300506
    },
    {
        "content": "<p>because you want \"regression effect + fix effect\" but there's some extra stuff in the middle</p>",
        "id": 204508472,
        "sender_full_name": "eddyb",
        "timestamp": 1595300534
    },
    {
        "content": "<p>you can compare any two commits, but the \"outer\" in my example is \"regression + inner + partial fix\" and \"inner\" has some unrelated improvements</p>",
        "id": 204508483,
        "sender_full_name": "eddyb",
        "timestamp": 1595300586
    },
    {
        "content": "<p>that's why I always grab the \"inner\" range - sometimes it's quite neutral and that means \"outer\" is already correct, but you don't always get lucky</p>",
        "id": 204508487,
        "sender_full_name": "eddyb",
        "timestamp": 1595300627
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> like I can do it by hand for one specific benchmark (<span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> did above for <code>helloworld-opt</code>) but I want the UI so I know I'm not missing anything</p>",
        "id": 204508532,
        "sender_full_name": "eddyb",
        "timestamp": 1595300666
    },
    {
        "content": "<p>oh that's fascinating, the \"inner\" improvements are all on -opt and -debug</p>",
        "id": 204508546,
        "sender_full_name": "eddyb",
        "timestamp": 1595300741
    },
    {
        "content": "<p>ah okay so most of the remaining regression from the gimli thing is on -check, presumably because w/o debuginfo, the link times are now alright?</p>",
        "id": 204508601,
        "sender_full_name": "eddyb",
        "timestamp": 1595300813
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> also it's kind of hilarious what kind of scale these one-time costs are: 20% regression on <code>helloworld-check</code> seems to be mostly 2ms in <code>metadata_register_crate</code></p>",
        "id": 204508660,
        "sender_full_name": "eddyb",
        "timestamp": 1595300916
    },
    {
        "content": "<p>the way <a href=\"http://perf.rust-lang.org\">perf.rust-lang.org</a> renders values, it rounds to tens of miliseconds heh</p>",
        "id": 204508675,
        "sender_full_name": "eddyb",
        "timestamp": 1595300975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> if you look at <a href=\"https://perf.rust-lang.org/detailed-query.html?commit=2e7283ac4c3767c9483f82e77119a8794133abea&amp;base_commit=7d31ffc1ac9e9ea356e896e63307168a64501b9d&amp;benchmark=helloworld-check&amp;run_name=incr-full\"><code>helloworld-check</code> <code>incr-full</code></a>, it's kind of funny that is says 1+2=5 (becasue it's rounding to miliseconds)</p>",
        "id": 204508727,
        "sender_full_name": "eddyb",
        "timestamp": 1595301114
    },
    {
        "content": "<p>If you ignore the <code>-doc</code> benchmarks (should we have a way of toggling them?), the largest regression <em>on a real-world crate</em> in my \"outer\" like above is:</p>\n<blockquote>\n<p>futures-check avg: 4.0%   min: 1.6%   max: 6.0%</p>\n</blockquote>",
        "id": 204508826,
        "sender_full_name": "eddyb",
        "timestamp": 1595301274
    },
    {
        "content": "<p>and it looks like it's the same few miliseconds</p>",
        "id": 204508850,
        "sender_full_name": "eddyb",
        "timestamp": 1595301348
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> so basically percentages are useless at telling you there's a consistent extra startup cost to every compilation of a few ms</p>",
        "id": 204508905,
        "sender_full_name": "eddyb",
        "timestamp": 1595301398
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> oh I just saw you closed the partial fix PR (<a href=\"https://github.com/rust-lang/rust/issues/74560\">#74560</a>) - I was thinking we could land it</p>",
        "id": 204508974,
        "sender_full_name": "eddyb",
        "timestamp": 1595301534
    },
    {
        "content": "<p>I'm happy to land a revert and bundle fixes together so we can get accurate measurements</p>",
        "id": 204509376,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595302107
    },
    {
        "content": "<p>I do not want to be in a situation where if the number is bigger than zero then nothing lands full stop</p>",
        "id": 204509380,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595302126
    },
    {
        "content": "<p>that also works for me, even if <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span>'s idea avoids landing the revert</p>",
        "id": 204509391,
        "sender_full_name": "eddyb",
        "timestamp": 1595302143
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> I think rustc-perf is just badly suited for measuring startup costs</p>",
        "id": 204509403,
        "sender_full_name": "eddyb",
        "timestamp": 1595302161
    },
    {
        "content": "<p>To get an accurate measurement there has been enough noise I think a revert is in order</p>",
        "id": 204509407,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595302170
    },
    {
        "content": "<p>Well this is why we have lots of metrics</p>",
        "id": 204509412,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595302189
    },
    {
        "content": "<p>it's more focused on stuff that's proportional to the input, which is fair but also can get silly sometimes</p>",
        "id": 204509414,
        "sender_full_name": "eddyb",
        "timestamp": 1595302192
    },
    {
        "content": "<p>Aborting if any metric is bad is not the purpose of perf</p>",
        "id": 204509418,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595302201
    },
    {
        "content": "<p>A bad metric is cause for investigation</p>",
        "id": 204509463,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595302210
    },
    {
        "content": "<p>right, we're just not rendering the relevant metric for this PR, which is an extra few ms (at least on <code>-check</code>, after debuginfo has been removed)</p>",
        "id": 204509476,
        "sender_full_name": "eddyb",
        "timestamp": 1595302243
    },
    {
        "content": "<p>Like I legitimately did not expect this change to make anything worse, so I'm glad we have perf to identify it</p>",
        "id": 204509477,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595302243
    },
    {
        "content": "<p>At the same time if the regression is \"the linker does more\" then we either need to eat the regression or decide to never pull another crate into std</p>",
        "id": 204509502,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595302297
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> whacky idea: add something like <code>helloworld</code> but which has an empty <code>lib.rs</code> and produces a <code>staticlib</code> (so we can measure linking costs at <code>-debug</code>/<code>-opt</code> but at <code>-check</code> it would be mostly just \"startup\", i.e. loading <code>std</code>)</p>",
        "id": 204509581,
        "sender_full_name": "eddyb",
        "timestamp": 1595302384
    },
    {
        "content": "<p>so the non-linker regressions on <code>-check</code> (maybe I shouldn't call them \"startup\", idk) look like this:</p>",
        "id": 204509663,
        "sender_full_name": "eddyb",
        "timestamp": 1595302546
    },
    {
        "content": "<blockquote>\n<p>html5ever-check   avg: 1.1%   min: 0.5%   max: 1.6%</p>\n</blockquote>",
        "id": 204509665,
        "sender_full_name": "eddyb",
        "timestamp": 1595302552
    },
    {
        "content": "<p>that's the same as a 20% regression. and even the 0.5% and the 1.6% are the same regression. it just looks smaller because it's an absolute regression</p>",
        "id": 204509712,
        "sender_full_name": "eddyb",
        "timestamp": 1595302582
    },
    {
        "content": "<p>if we go further down, these are again the same regression:</p>\n<blockquote>\n<p>cargo-check   avg: 0.3%   min: 0.2%   max: 0.4%<br>\nstyle-servo-check avg: 0.1%   min: 0.1%   max: 0.1%</p>\n</blockquote>",
        "id": 204509723,
        "sender_full_name": "eddyb",
        "timestamp": 1595302623
    },
    {
        "content": "<p>so from 0.1% to 20%. and I don't think there's an \"absolute delta\" mode on <code>compare.html</code></p>",
        "id": 204509772,
        "sender_full_name": "eddyb",
        "timestamp": 1595302726
    },
    {
        "content": "<p>Wish I could help somehow with recovering perf so we can reland it without that much regression.</p>",
        "id": 204520676,
        "sender_full_name": "mati865",
        "timestamp": 1595318411
    },
    {
        "content": "<p>Is the regression related to the size of the crate? Would it help to add features to gimli so that backtrace-rs can disable things it doesn't need?</p>",
        "id": 204525030,
        "sender_full_name": "Philip Craig",
        "timestamp": 1595321773
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214708\">@Philip Craig</span> so linker-wise: the size of the compiled code + debuginfo. it looked like removing debuginfo pretty much removed most of the linker regression so that's probably it</p>",
        "id": 204525103,
        "sender_full_name": "eddyb",
        "timestamp": 1595321844
    },
    {
        "content": "<p>anything else is arguably a bug in rustc where we're eagerly loading something we shouldn't bother with</p>",
        "id": 204525127,
        "sender_full_name": "eddyb",
        "timestamp": 1595321863
    },
    {
        "content": "<p>I <a href=\"https://github.com/rust-lang/rust/pull/73441#issuecomment-661898402\">followed up on the original PR</a>, but after looking again at the information this morning I would personally say we do not need to revert</p>",
        "id": 204554621,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595342039
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214708\">@Philip Craig</span> the size of the crate matters mostly I believe insofar as the linker itself, otherwise it seems like most of these regressions are appearing simply because there's more crates linked into the standard library</p>",
        "id": 204554717,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595342072
    },
    {
        "content": "<p>the linker has to resolve all the undefined symbols in gimli/addr2line/etc, and only then after it's done that will it realize much of it was for naught and it's all gc-able</p>",
        "id": 204554783,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595342104
    },
    {
        "content": "<p>not to say that wins aren't possible (removing debuginfo was clearly at least some of a win) but it's going to be a lot of whack-a-mole without much guidance to see if anything actually has an effect here</p>",
        "id": 204554853,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595342143
    },
    {
        "content": "<p>we should land the debuginfo win, at least</p>",
        "id": 204555095,
        "sender_full_name": "simulacrum",
        "timestamp": 1595342261
    },
    {
        "content": "<p>I'm happy to do that, but I would push back a little on that because it's drawing a line in the sand saying \"nothing added to libstd in the future is allowed to be as privileged as libstd is now\"</p>",
        "id": 204555289,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595342334
    },
    {
        "content": "<p>like it's obviously faster, but it's not obvious why we would provide debuginfo for just some parts of std and not others</p>",
        "id": 204555324,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595342354
    },
    {
        "content": "<p>If the purpose of debuginfo in libstd is purely for monomorphized code, then that seems fine becuase gimli/etc will not ever be monomorphized</p>",
        "id": 204555457,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595342407
    },
    {
        "content": "<p>I'm not entirely clear that we should be providing debuginfo at all</p>",
        "id": 204555744,
        "sender_full_name": "simulacrum",
        "timestamp": 1595342532
    },
    {
        "content": "<p>I guess split-debuginfo is the way to go in the future which would entirely eliminate debuginfo as a source of regressions</p>",
        "id": 204555792,
        "sender_full_name": "simulacrum",
        "timestamp": 1595342552
    },
    {
        "content": "<p>also to be clear I'm not the one making the decisions here, I think it's fair to overrule me</p>",
        "id": 204557022,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595343098
    },
    {
        "content": "<p>I'd like to make my case but others likely feel different</p>",
        "id": 204557053,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595343113
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> one question I had is why we're not already seeing most of gimli etc gc'd -- are we just linking that much more code in now? Is rust code less prone to gc than libbacktrace?</p>",
        "id": 204557432,
        "sender_full_name": "simulacrum",
        "timestamp": 1595343253
    },
    {
        "content": "<p>(pre-gc'd that is in Rust's CI)</p>",
        "id": 204557468,
        "sender_full_name": "simulacrum",
        "timestamp": 1595343268
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/regression.20after.20switching.20to.20gimli/near/204525127\">said</a>:</p>\n<blockquote>\n<p>anything else is arguably a bug in rustc where we're eagerly loading something we shouldn't bother with</p>\n</blockquote>\n<p>I'd be most interested in fixing this issue</p>",
        "id": 204557539,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595343301
    },
    {
        "content": "<p>since that would benefit crates besides rustc itself</p>",
        "id": 204557561,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595343308
    },
    {
        "content": "<p>a stripped executable is 50kb larger on nightly, so the code-size impact of gimli is larger (which is to be expected, idiomatic Rust is generally larger than C, partly because it exhaustively checks errors but also just idioms, rustc, etc)</p>",
        "id": 204557568,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595343312
    },
    {
        "content": "<p>so in that sense there is factually more code for the linker to chew through, although I would say it has to gc <em>more</em> with Rust code than with libbacktrace</p>",
        "id": 204557637,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595343337
    },
    {
        "content": "<p>okay that makes some sense then</p>",
        "id": 204557678,
        "sender_full_name": "simulacrum",
        "timestamp": 1595343352
    },
    {
        "content": "<p>libbacktrace probably only gc'd a few symbols where with the Rust side it gc's a whole deflate implementation in miniz for example</p>",
        "id": 204557689,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595343357
    },
    {
        "content": "<p>the sum size of all these crates is likely much larger than libbacktrace itself</p>",
        "id": 204557773,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595343376
    },
    {
        "content": "<p>like that's a possibility for backing this out and trying to reland it later, it could be that the dependencies are just too heavyweight right now and not enough analysis has been done about why they're heavyweight and where they could be improved</p>",
        "id": 204557879,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595343420
    },
    {
        "content": "<p>I've opened the debuginfo change for landing at <a href=\"https://github.com/rust-lang/rust/pull/74591\">https://github.com/rust-lang/rust/pull/74591</a></p>",
        "id": 204560099,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595344327
    },
    {
        "content": "<p>Would it be possible to make a thin API (maybe C) over gimli, compiled into a pre-GCed static library?</p>",
        "id": 204565181,
        "sender_full_name": "cuviper",
        "timestamp": 1595346520
    },
    {
        "content": "<p>I'm not sure if the linker can do that, but maybe LTO?</p>",
        "id": 204565228,
        "sender_full_name": "cuviper",
        "timestamp": 1595346543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> My impression is \"yes\" but Alex is saying that if that's the line we're drawing it makes it increasingly hard to land any large-ish changes to std</p>",
        "id": 204565755,
        "sender_full_name": "simulacrum",
        "timestamp": 1595346811
    },
    {
        "content": "<p>I think I agree with <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> that we should definitely fix the bugs in the compiler that are leading to this much more time spent from adding some dependencies -- linker time we can't do much about, but rustc itself shouldn't really get slower.</p>",
        "id": 204565883,
        "sender_full_name": "simulacrum",
        "timestamp": 1595346856
    },
    {
        "content": "<p>I sympathize with that -- <code>std</code> must be allowed to grow</p>",
        "id": 204565920,
        "sender_full_name": "cuviper",
        "timestamp": 1595346876
    },
    {
        "content": "<p>but this is a little special in that it's all runtime support, not user-facing API</p>",
        "id": 204565945,
        "sender_full_name": "cuviper",
        "timestamp": 1595346889
    },
    {
        "content": "<p>sure yeah</p>",
        "id": 204565959,
        "sender_full_name": "simulacrum",
        "timestamp": 1595346899
    },
    {
        "content": "<p>which is why I'm saying it's a compiler bug that we're doing more <em>in the compiler</em> after std is already compiled because of some added rust code</p>",
        "id": 204566009,
        "sender_full_name": "simulacrum",
        "timestamp": 1595346933
    },
    {
        "content": "<p>(and not in e.g. optimizing Backtrace::new or something afaict)</p>",
        "id": 204566032,
        "sender_full_name": "simulacrum",
        "timestamp": 1595346943
    },
    {
        "content": "<p>AFAICT it's mostly when loading up the minimal amount of data it needs about <code>std</code> and transitive dependencies. my guess is that the current set of things we eagerly load isn't minimal enough. although there's always a tradeoff between lazy loading skipping work, and the penalty of actually having to load it later. but most of the time it's better to defer work</p>",
        "id": 204598564,
        "sender_full_name": "eddyb",
        "timestamp": 1595362957
    },
    {
        "content": "<p>@mark-sim</p>",
        "id": 204804494,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595514583
    },
    {
        "content": "<p>er, <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>, can you rust-timer try <a href=\"https://github.com/rust-lang/rust/pull/74682\">https://github.com/rust-lang/rust/pull/74682</a>?</p>",
        "id": 204804514,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595514591
    },
    {
        "content": "<p>yep</p>",
        "id": 204804519,
        "sender_full_name": "simulacrum",
        "timestamp": 1595514595
    },
    {
        "content": "<p>that looks incomplete though?</p>",
        "id": 204804581,
        "sender_full_name": "simulacrum",
        "timestamp": 1595514610
    },
    {
        "content": "<p>we should include the other patches into it (e.g., debuginfo)</p>",
        "id": 204804612,
        "sender_full_name": "simulacrum",
        "timestamp": 1595514624
    },
    {
        "content": "<p>or are you thinking to do multiple trys or so?</p>",
        "id": 204804637,
        "sender_full_name": "simulacrum",
        "timestamp": 1595514636
    },
    {
        "content": "<p>(I'm happy btw to take this on if you want)</p>",
        "id": 204804692,
        "sender_full_name": "simulacrum",
        "timestamp": 1595514661
    },
    {
        "content": "<p>oh I see you squashed the commits okay</p>",
        "id": 204804766,
        "sender_full_name": "simulacrum",
        "timestamp": 1595514689
    },
    {
        "content": "<p>oh sorry yeah I squashed everything into one, and I think it should include all the other various fixes and such</p>",
        "id": 204809116,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595516542
    }
]