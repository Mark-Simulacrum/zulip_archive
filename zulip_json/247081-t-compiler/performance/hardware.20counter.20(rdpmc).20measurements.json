[
    {
        "content": "<p>so I finally got around to making this work: it seems to be relatively stable <a href=\"https://gist.github.com/eddyb/e405cef307a4aebbbda3406e17c42173\">https://gist.github.com/eddyb/e405cef307a4aebbbda3406e17c42173</a></p>",
        "id": 204432110,
        "sender_full_name": "eddyb",
        "timestamp": 1595256774
    },
    {
        "content": "<p>although I did this by hand, I should automate it lol</p>",
        "id": 204432133,
        "sender_full_name": "eddyb",
        "timestamp": 1595256783
    },
    {
        "content": "<p>(I took two runs and manually paired them to the right crate)</p>",
        "id": 204432224,
        "sender_full_name": "eddyb",
        "timestamp": 1595256814
    },
    {
        "content": "<p>ideally I can get just one crate I can keep measuring. <code>core</code> seems like a good low-effort candidate</p>",
        "id": 204432326,
        "sender_full_name": "eddyb",
        "timestamp": 1595256847
    },
    {
        "content": "<p>what's weird is using <code>-j1</code> feels much slower but I still get <code>12785...</code> for core. is that Cargo's pipelining not kicking in? so I guess passing <code>-j1</code> to <code>x.py</code> doesn't make the <code>core</code> compilation itself slower, it's just less visually active</p>",
        "id": 204432719,
        "sender_full_name": "eddyb",
        "timestamp": 1595257028
    },
    {
        "content": "<p>hm I would've expected -j1 to make core compilation slower, unless you've messed with codegen-units-std or something like that</p>",
        "id": 204432951,
        "sender_full_name": "simulacrum",
        "timestamp": 1595257123
    },
    {
        "content": "<p>maybe we're defaulting to codegen-units-std = 1? I forget</p>",
        "id": 204432974,
        "sender_full_name": "simulacrum",
        "timestamp": 1595257134
    },
    {
        "content": "<p>anyway <code>--emit=metadata</code> gives me 93G (as opposed to 127G), and that shouldn't get into multithreaded nonsense</p>",
        "id": 204433225,
        "sender_full_name": "eddyb",
        "timestamp": 1595257232
    },
    {
        "content": "<p>would be interesting to see how that compares to <code>perf stat -e instructions:u</code> for that same crate</p>",
        "id": 204433555,
        "sender_full_name": "simulacrum",
        "timestamp": 1595257381
    },
    {
        "content": "<p>if I'm following you correctly that you're sticking this around the whole compilation or so?</p>",
        "id": 204433593,
        "sender_full_name": "simulacrum",
        "timestamp": 1595257403
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> first sad news: running under <code>perf stat</code>results in <code>index = 0</code> (i.e counter is disabled) in my code. I guess I should check that at the very start, when I make sure it's supported, so I don't crash. but it probably means we can't do both internal and external perf counter collection<br>\n(<strong>EDIT</strong>: see below, it can work for a subset of counters)</p>",
        "id": 204433610,
        "sender_full_name": "eddyb",
        "timestamp": 1595257408
    },
    {
        "content": "<p>yeah it's from <code>rustc_data_structures::profiling::SelfProfiler</code> being created, to it being dropped</p>",
        "id": 204433656,
        "sender_full_name": "eddyb",
        "timestamp": 1595257436
    },
    {
        "content": "<p>we could plausibly \"move in\" perf stat into self-profile infra I guess?</p>",
        "id": 204433664,
        "sender_full_name": "simulacrum",
        "timestamp": 1595257440
    },
    {
        "content": "<p>just do whatever it does ourselves</p>",
        "id": 204433714,
        "sender_full_name": "simulacrum",
        "timestamp": 1595257448
    },
    {
        "content": "<p>not sure how hard that'd be</p>",
        "id": 204433729,
        "sender_full_name": "simulacrum",
        "timestamp": 1595257453
    },
    {
        "content": "<p>well I wanted to validate my results</p>",
        "id": 204433743,
        "sender_full_name": "eddyb",
        "timestamp": 1595257457
    },
    {
        "content": "<p>I guess you can compare separate runs</p>",
        "id": 204433761,
        "sender_full_name": "simulacrum",
        "timestamp": 1595257469
    },
    {
        "content": "<p>good point about <code>-e</code>, I guess maybe it just runs out of hardware registers</p>",
        "id": 204433776,
        "sender_full_name": "eddyb",
        "timestamp": 1595257474
    },
    {
        "content": "<p>well.. <em>both</em> monitoring instructions maybe isn't supported by the kernel? I don't really know</p>",
        "id": 204433825,
        "sender_full_name": "simulacrum",
        "timestamp": 1595257501
    },
    {
        "content": "<p>okay not crashing!</p>",
        "id": 204433864,
        "sender_full_name": "eddyb",
        "timestamp": 1595257517
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>93,352,538,263 (mine)\n93,387,254,621 (perf stat)\n</code></pre></div>",
        "id": 204434027,
        "sender_full_name": "eddyb",
        "timestamp": 1595257583
    },
    {
        "content": "<p>are those separate runs? Or are we just missing ~35M instructions?</p>",
        "id": 204434305,
        "sender_full_name": "simulacrum",
        "timestamp": 1595257712
    },
    {
        "content": "<p>I guess it's not that much</p>",
        "id": 204434315,
        "sender_full_name": "simulacrum",
        "timestamp": 1595257715
    },
    {
        "content": "<p>presumably most of that is before the self profiler starts</p>",
        "id": 204434343,
        "sender_full_name": "eddyb",
        "timestamp": 1595257729
    },
    {
        "content": "<p>or maybe after, idk what kind of teardown we do</p>",
        "id": 204434362,
        "sender_full_name": "eddyb",
        "timestamp": 1595257742
    },
    {
        "content": "<p>ah, interesting. I guess we could move things up into <code>fn main() {}</code> in src/rustc/mod.rs?</p>",
        "id": 204434365,
        "sender_full_name": "simulacrum",
        "timestamp": 1595257745
    },
    {
        "content": "<p>er, <a href=\"http://main.rs\">main.rs</a></p>",
        "id": 204434380,
        "sender_full_name": "simulacrum",
        "timestamp": 1595257752
    },
    {
        "content": "<p>well, the driver I guess, but sure</p>",
        "id": 204434393,
        "sender_full_name": "eddyb",
        "timestamp": 1595257760
    },
    {
        "content": "<p>my setup right now: <a href=\"/user_uploads/4715/Y1zFv8WqbvQLM2zu3o3rDm3T/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/Y1zFv8WqbvQLM2zu3o3rDm3T/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/Y1zFv8WqbvQLM2zu3o3rDm3T/image.png\"></a></div>",
        "id": 204434428,
        "sender_full_name": "eddyb",
        "timestamp": 1595257782
    },
    {
        "content": "<p>Thanks for working on this <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>. This is really slick!</p>",
        "id": 204434611,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1595257884
    },
    {
        "content": "<p>seems \"good enough\" though to land initially at least</p>",
        "id": 204434676,
        "sender_full_name": "simulacrum",
        "timestamp": 1595257914
    },
    {
        "content": "<p>I kinda have to, this is a prerequisite for some data collection that needs to be query-level and the current (timing) data is too noisy :(</p>",
        "id": 204434761,
        "sender_full_name": "eddyb",
        "timestamp": 1595257931
    },
    {
        "content": "<p>/me handwaves away the fact that this is like two months late</p>",
        "id": 204434802,
        "sender_full_name": "eddyb",
        "timestamp": 1595257947
    },
    {
        "content": "<p>anyway the fun part starts now, I want to measure the overhead of sampling this every time we sample the clock</p>",
        "id": 204434864,
        "sender_full_name": "eddyb",
        "timestamp": 1595257981
    },
    {
        "content": "<p>so I'll probably just run, idk, 100 compilations of <code>core</code> to get some solid data then try to do some basic stats on it. the more precision I can get, the better I can estimate the fine-grained sampling overhead</p>",
        "id": 204435043,
        "sender_full_name": "eddyb",
        "timestamp": 1595258074
    },
    {
        "content": "<p>so uhh <a href=\"/user_uploads/4715/fSUKCn3_-emgs_hqRtBzZWLB/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/fSUKCn3_-emgs_hqRtBzZWLB/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/fSUKCn3_-emgs_hqRtBzZWLB/image.png\"></a></div>",
        "id": 204445893,
        "sender_full_name": "eddyb",
        "timestamp": 1595263458
    },
    {
        "content": "<p>I tried to make a really tall window to show how little variance there is</p>",
        "id": 204445933,
        "sender_full_name": "eddyb",
        "timestamp": 1595263477
    },
    {
        "content": "<p>but it doesn't <em>really</em> get across</p>",
        "id": 204445966,
        "sender_full_name": "eddyb",
        "timestamp": 1595263500
    },
    {
        "content": "<p>(blue is some initial data, red is 100 measurements. same metholodogy though)</p>",
        "id": 204446126,
        "sender_full_name": "eddyb",
        "timestamp": 1595263569
    },
    {
        "content": "<p><a href=\"http://perf.rust-lang.org\">perf.rust-lang.org</a> uses an absolute scale, doesn't it? and yet we can often see variance, even in <code>instructions:u</code>?</p>",
        "id": 204446235,
        "sender_full_name": "eddyb",
        "timestamp": 1595263640
    },
    {
        "content": "<p>but I guess using the same exact compiler, and having no dependencies (because libcore) might make it less susceptible to certain effects</p>",
        "id": 204446286,
        "sender_full_name": "eddyb",
        "timestamp": 1595263673
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/0SfERORAyv-bn5QmLX1ptG5x/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/0SfERORAyv-bn5QmLX1ptG5x/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/0SfERORAyv-bn5QmLX1ptG5x/image.png\"></a></div>",
        "id": 204446679,
        "sender_full_name": "eddyb",
        "timestamp": 1595263885
    },
    {
        "content": "<p>this is more representative, but you're only seeing like 1% of the range</p>",
        "id": 204446712,
        "sender_full_name": "eddyb",
        "timestamp": 1595263907
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130111\">@anp</span> ^^ btw if you're on Zulip, you can track my adventures here</p>",
        "id": 204446860,
        "sender_full_name": "eddyb",
        "timestamp": 1595263976
    },
    {
        "content": "<p>so I can observe an overhead (to sample on every timing start/end), but it's only like 0.5%. if I hardcode some of the values (and expect they're not changed after the initial configuration), I can try to lower it. but I think it's acceptable?</p>",
        "id": 204451093,
        "sender_full_name": "eddyb",
        "timestamp": 1595266186
    },
    {
        "content": "<p>I should also be able to measure the overhead of <code>measureme</code> itself (but that's easier done with <code>perf stat</code> on an unmodified <code>rustc</code>, since my code won't run without <code>-Z self-profile</code>)</p>",
        "id": 204451202,
        "sender_full_name": "eddyb",
        "timestamp": 1595266245
    },
    {
        "content": "<p>that seems like reasonably low sampling overhead</p>",
        "id": 204451207,
        "sender_full_name": "anp",
        "timestamp": 1595266247
    },
    {
        "content": "<p>oh and also this is a debug-assertions <code>rustc</code> build, I keep forgetting that :P</p>",
        "id": 204451267,
        "sender_full_name": "eddyb",
        "timestamp": 1595266286
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/ewJm2r4sf3P-RqOeR8s6XAbY/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/ewJm2r4sf3P-RqOeR8s6XAbY/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/ewJm2r4sf3P-RqOeR8s6XAbY/image.png\"></a></div>",
        "id": 204513894,
        "sender_full_name": "eddyb",
        "timestamp": 1595310113
    },
    {
        "content": "<p>so this is the sampling overhead, at the most dynamic configuration it can be, I think, but without writing any of the data out (just using <code>black_box</code>)</p>",
        "id": 204514020,
        "sender_full_name": "eddyb",
        "timestamp": 1595310294
    },
    {
        "content": "<p>so if I remove any of the dynamic reads from the mmap page, and the seqlock loop entirely, I'm left with just a <code>rdpmc</code> instruction and a sign-extension from 48-bit to 64-bit. so that should be \"minimal overhead possible\"</p>",
        "id": 204514259,
        "sender_full_name": "eddyb",
        "timestamp": 1595310612
    },
    {
        "content": "<p>although after I check this, I should also add <code>#[inline]</code> everywhere relevant to make sure I'm not hiding anything behind unoptimizable calls</p>",
        "id": 204514287,
        "sender_full_name": "eddyb",
        "timestamp": 1595310696
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"279335\">@Jim Blandy</span> oh hey any chance you're on Zulip? this is the thread where I'm documenting my adventures in <code>rdpmc</code> :D</p>",
        "id": 204514522,
        "sender_full_name": "eddyb",
        "timestamp": 1595311007
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> btw you may be pleased to hear that AArch64 is the only other architecture that has examples floating around of reading performance counters in userspace for fine-grained profiling (e.g. <a href=\"https://github.com/deater/perf_event_tests/blob/a379ad31192c0780278507b0acefe70d872fb643/tests/rdpmc/rdpmc_inlines.h#L46-L56\">https://github.com/deater/perf_event_tests/blob/a379ad31192c0780278507b0acefe70d872fb643/tests/rdpmc/rdpmc_inlines.h#L46-L56</a>)</p>",
        "id": 204514578,
        "sender_full_name": "eddyb",
        "timestamp": 1595311103
    },
    {
        "content": "<p>I'm not sure what architectures 1. even have such counters 2. have support for reading those counters by the Linux kernel</p>",
        "id": 204514582,
        "sender_full_name": "eddyb",
        "timestamp": 1595311142
    },
    {
        "content": "<p>so this would be like the one thing I could use an AArch64 machine for... ah but it wouldn't even be macOS, I just realized</p>",
        "id": 204514599,
        "sender_full_name": "eddyb",
        "timestamp": 1595311191
    },
    {
        "content": "<p>a quick search suggests macOS doesn't have any kind of official support for enabling measurements from userspace :(</p>",
        "id": 204514658,
        "sender_full_name": "eddyb",
        "timestamp": 1595311262
    },
    {
        "content": "<p>so yeah the relevant hardware here would be one of those \"a lot of 64-bit-only cores\" server CPUs or, uhh, a raspberry pi 4?</p>",
        "id": 204514725,
        "sender_full_name": "eddyb",
        "timestamp": 1595311337
    },
    {
        "content": "<p>sorry, got a bit excited there. we can keep it x86-only for now (I think 32-bit vs 64-bit doesn't even matter? but I haven't tested anything on 32-bit rustc)</p>",
        "id": 204514800,
        "sender_full_name": "eddyb",
        "timestamp": 1595311444
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/n7XjUSD8qwoM_w0ANeGyLDGh/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/n7XjUSD8qwoM_w0ANeGyLDGh/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/n7XjUSD8qwoM_w0ANeGyLDGh/image.png\"></a></div>",
        "id": 204514822,
        "sender_full_name": "eddyb",
        "timestamp": 1595311521
    },
    {
        "content": "<p>this one is the same as above, but I just realized that you can see noise much better if it's less wide</p>",
        "id": 204514835,
        "sender_full_name": "eddyb",
        "timestamp": 1595311543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> <span class=\"user-mention\" data-user-id=\"130111\">@anp</span> okay what keeps weirding me out about this is that it's nothing like the self-profiling graphs I made before where it looks like there's a \"baseline\" and outliers that \"jump up\" from it</p>",
        "id": 204514884,
        "sender_full_name": "eddyb",
        "timestamp": 1595311601
    },
    {
        "content": "<p>but here the noise looks... \"balanced\"?</p>",
        "id": 204514894,
        "sender_full_name": "eddyb",
        "timestamp": 1595311622
    },
    {
        "content": "<p>I wonder how flat it would get if ASLR were disabled, lol</p>",
        "id": 204514906,
        "sender_full_name": "eddyb",
        "timestamp": 1595311638
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rustc-perf/pull/661\">https://github.com/rust-lang/rustc-perf/pull/661</a> is the data I'm thinking of, relying on \"plateaus\" where rustc performance shouldn't really change much</p>",
        "id": 204514982,
        "sender_full_name": "eddyb",
        "timestamp": 1595311723
    },
    {
        "content": "<p>oh right the self-profiling data has the same behavior as wall-time, instruction counts don't have that behavior</p>",
        "id": 204514996,
        "sender_full_name": "eddyb",
        "timestamp": 1595311756
    },
    {
        "content": "<p>it almost seems like we could get higher-quality timings somehow, those \"spikes\" must be some huge events. I wonder what we can cheaply get from the kernel that tries to measure only your userspace activity and cuts out anything else</p>",
        "id": 204515059,
        "sender_full_name": "eddyb",
        "timestamp": 1595311828
    },
    {
        "content": "<p>(I still want instruction counts, but the noise on wall-time seems comically large if you think about it)</p>",
        "id": 204515101,
        "sender_full_name": "eddyb",
        "timestamp": 1595311909
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> oh nice apparently you <em>can</em> disable ASLR for one process :D <a href=\"https://askubuntu.com/a/507954\">https://askubuntu.com/a/507954</a></p>",
        "id": 204515614,
        "sender_full_name": "eddyb",
        "timestamp": 1595312643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> hey if you're bored, can you <code>perf stat -e instructions:u</code> this about a dozen times on the server rustc-perf runs on?<br>\n<code>rustc $(rustc --print=sysroot)/lib/rustlib/src/rust/src/libcore/lib.rs --edition=2018 --crate-type=lib --crate-name=core --emit=metadata -Zself-profile</code></p>",
        "id": 204515804,
        "sender_full_name": "eddyb",
        "timestamp": 1595313001
    },
    {
        "content": "<p>doesn't really matter what version (could even be stable with <code>RUSTC_BOOTSTRAP=1</code>), I'm just interested in general what kind of variance one would get on that server</p>",
        "id": 204515859,
        "sender_full_name": "eddyb",
        "timestamp": 1595313056
    },
    {
        "content": "<p>it's probably the easiest way to filter out differences in the setup (since I can do the same and we can just stare at the data)</p>",
        "id": 204515884,
        "sender_full_name": "eddyb",
        "timestamp": 1595313116
    },
    {
        "content": "<p>hmpf it doesn't look like disabling ASLR impacts the (tiny) instructions:u noise I'm seeing</p>",
        "id": 204516276,
        "sender_full_name": "eddyb",
        "timestamp": 1595313660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130111\">@anp</span> are 1D scatter/density plots a thing? or I guess one of the axes could be \"which test setup this is\" and the other has all 100 values measured with that setup?</p>",
        "id": 204516988,
        "sender_full_name": "eddyb",
        "timestamp": 1595314622
    },
    {
        "content": "<p>maybe I can make plotly give me that</p>",
        "id": 204517005,
        "sender_full_name": "eddyb",
        "timestamp": 1595314656
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/H7QQJSmyg32WGwbSWiArRElS/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/H7QQJSmyg32WGwbSWiArRElS/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/H7QQJSmyg32WGwbSWiArRElS/image.png\"></a></div>",
        "id": 204521997,
        "sender_full_name": "eddyb",
        "timestamp": 1595319451
    },
    {
        "content": "<p>this feels terrible but it's roughly what I want? well, kind of</p>",
        "id": 204522012,
        "sender_full_name": "eddyb",
        "timestamp": 1595319478
    },
    {
        "content": "<p>Criterion has violin plots</p>",
        "id": 204522146,
        "sender_full_name": "bjorn3",
        "timestamp": 1595319585
    },
    {
        "content": "<p>oh I forgot those existed</p>",
        "id": 204522213,
        "sender_full_name": "eddyb",
        "timestamp": 1595319621
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> okay violin works great!</p>",
        "id": 204524419,
        "sender_full_name": "eddyb",
        "timestamp": 1595321369
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/Z5IhmNxbPNVYDLFxdsD3EC3_/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/Z5IhmNxbPNVYDLFxdsD3EC3_/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/Z5IhmNxbPNVYDLFxdsD3EC3_/image.png\"></a></div>",
        "id": 204524753,
        "sender_full_name": "eddyb",
        "timestamp": 1595321596
    },
    {
        "content": "<p>so yeah ASLR isn't an improvement, it would show up as wider and less tall if it were less noisy, wouldn't it?</p>",
        "id": 204524869,
        "sender_full_name": "eddyb",
        "timestamp": 1595321660
    },
    {
        "content": "<p>oh wow, <code>measureme</code> hasn't been updated since January <a href=\"https://github.com/rust-lang/rust/blame/master/src/librustc_data_structures/Cargo.toml#L30\">https://github.com/rust-lang/rust/blame/master/src/librustc_data_structures/Cargo.toml#L30</a></p>",
        "id": 204529531,
        "sender_full_name": "eddyb",
        "timestamp": 1595325353
    },
    {
        "content": "<p>that means it should be easy to do what I need to by patching <code>measureme 0.7.1</code> (since I'm only interested in rustc versions in the past few months)</p>",
        "id": 204529787,
        "sender_full_name": "eddyb",
        "timestamp": 1595325537
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/YpPQhmbtEUptF6LjudhDuWox/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/YpPQhmbtEUptF6LjudhDuWox/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/YpPQhmbtEUptF6LjudhDuWox/image.png\"></a></div>",
        "id": 204530805,
        "sender_full_name": "eddyb",
        "timestamp": 1595326393
    },
    {
        "content": "<p>inlining makes a huge impact, that's nice</p>",
        "id": 204530822,
        "sender_full_name": "eddyb",
        "timestamp": 1595326419
    },
    {
        "content": "<p>the overhead of the newest attempt (i.e. the increase between the bottom two), using the medians is:<br>\n<strong>0.12%</strong></p>",
        "id": 204531065,
        "sender_full_name": "eddyb",
        "timestamp": 1595326648
    },
    {
        "content": "<p>huh maybe these are how we should display things on compare page on perf (at least optionally)</p>",
        "id": 204533378,
        "sender_full_name": "simulacrum",
        "timestamp": 1595328535
    },
    {
        "content": "<p>btw I'm using <a href=\"https://chart-studio.plotly.com/create\">https://chart-studio.plotly.com/create</a> because it's incredibly convenient to just copy-paste some data in</p>",
        "id": 204533920,
        "sender_full_name": "eddyb",
        "timestamp": 1595328946
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/QRTbHw5_PFBLm3sodcjKggrV/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/QRTbHw5_PFBLm3sodcjKggrV/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/QRTbHw5_PFBLm3sodcjKggrV/image.png\"></a></div>",
        "id": 204538382,
        "sender_full_name": "eddyb",
        "timestamp": 1595332625
    },
    {
        "content": "<p>seems like disabling ASLR is a waste of time, although I don't even know if the command I'm using works :P</p>",
        "id": 204538408,
        "sender_full_name": "eddyb",
        "timestamp": 1595332651
    },
    {
        "content": "<p>re arm/aarch if its something trivial that you're running, I can run it on my aarch box.</p>",
        "id": 204538730,
        "sender_full_name": "nagisa",
        "timestamp": 1595332892
    },
    {
        "content": "<p>oh nice</p>",
        "id": 204538736,
        "sender_full_name": "eddyb",
        "timestamp": 1595332900
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> it's a small patch on top of rustc, and then just compiling libcore with that</p>",
        "id": 204538752,
        "sender_full_name": "eddyb",
        "timestamp": 1595332919
    },
    {
        "content": "<p>but it does require an AArch64 build of rustc, which we normally wouldn't get out of a <code>try</code> build</p>",
        "id": 204538827,
        "sender_full_name": "eddyb",
        "timestamp": 1595332964
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> </p>\n<div class=\"codehilite\"><pre><span></span><code> Performance counter stats for &#39;rustc /home/collector/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/lib.rs --edition=2018 --crate-type=lib --crate-name=core --emit=metadata -Zself-profile&#39; (12 runs):\n\n    43,424,730,693      instructions:u                                                                                   ( +-  0.00% )\n\n       7.576909112 seconds time elapsed                                          ( +-  0.12% )\n</code></pre></div>",
        "id": 204571636,
        "sender_full_name": "simulacrum",
        "timestamp": 1595349720
    },
    {
        "content": "<p>that's a nightly rustc of some time ago</p>",
        "id": 204571692,
        "sender_full_name": "simulacrum",
        "timestamp": 1595349729
    },
    {
        "content": "<p>perhaps more useful:</p>\n<div class=\"codehilite\"><pre><span></span><code>collector@perf-collect:~$ for i in `seq 1 12`; do echo $i; perf stat -e instructions:u -B rustc $(rustc --print=sysroot)/lib/rustlib/src/rust/src/libcore/lib.rs --edition=2018 --crate-type=lib --crate-name=core --emit=metadata -Zself-profile; done\n    43,427,141,687      instructions:u\n       7.522372296 seconds time elapsed\n    43,420,553,572      instructions:u\n       7.571120513 seconds time elapsed\n    43,422,220,738      instructions:u\n       7.668403681 seconds time elapsed\n    43,436,800,653      instructions:u\n       7.549231552 seconds time elapsed\n    43,422,366,692      instructions:u\n       7.575593641 seconds time elapsed\n    43,428,013,365      instructions:u\n       7.457968917 seconds time elapsed\n    43,432,935,579      instructions:u\n       7.507432044 seconds time elapsed\n    43,427,934,583      instructions:u\n       7.548457473 seconds time elapsed\n    43,422,266,505      instructions:u\n       7.486037536 seconds time elapsed\n    43,432,800,422      instructions:u\n       7.565062622 seconds time elapsed\n    43,424,821,136      instructions:u\n       7.591561708 seconds time elapsed\n    43,428,555,077      instructions:u\n       7.607044089 seconds time elapsed\n</code></pre></div>",
        "id": 204580437,
        "sender_full_name": "simulacrum",
        "timestamp": 1595354086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> This is really impressive!</p>",
        "id": 204581725,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595354741
    },
    {
        "content": "<p>I look forward to this being one of the standard parts of performance comparison</p>",
        "id": 204581745,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595354758
    },
    {
        "content": "<p>(We'll still need real-time for parallel cases, but this should help reduce noise otherwise.)</p>",
        "id": 204581833,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595354786
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I want us to collect side by side instruction counts and the current timing measurements. it might even be possible to eventually account for parallelism but idk how <code>perf_event_open</code> interacts with threads, I haven't looked into it</p>",
        "id": 204594250,
        "sender_full_name": "eddyb",
        "timestamp": 1595360698
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> without even doing any analysis, looks like it swings about 16M, which is about the same as what I have here. thanks!</p>",
        "id": 204595015,
        "sender_full_name": "eddyb",
        "timestamp": 1595361075
    },
    {
        "content": "<p>so <code>core</code> has very little variance huh</p>",
        "id": 204595054,
        "sender_full_name": "eddyb",
        "timestamp": 1595361101
    },
    {
        "content": "<p>also, absolutely speaking, wow my runs have just over 2x more instructions, I wonder if that's all from debug assertions</p>",
        "id": 204595192,
        "sender_full_name": "eddyb",
        "timestamp": 1595361169
    },
    {
        "content": "<p>if you have debug asserts on std and rustc enabled I know that's a 50% wall time hit during a std build for me and I can believe it's a 2x instruction hit</p>",
        "id": 204595240,
        "sender_full_name": "simulacrum",
        "timestamp": 1595361204
    },
    {
        "content": "<p>50% more time but made up of many smol instructions</p>",
        "id": 204595367,
        "sender_full_name": "eddyb",
        "timestamp": 1595361257
    },
    {
        "content": "<p>presumably a lot of checks that never trip an assert or do <code>debug!</code> logging :P</p>",
        "id": 204595408,
        "sender_full_name": "eddyb",
        "timestamp": 1595361290
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> ohai - thanks for the link</p>",
        "id": 204619425,
        "sender_full_name": "Jim Blandy",
        "timestamp": 1595378435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> Have you seen this paper?<br>\n<a href=\"https://www.hpl.hp.com/techreports/2012/HPL-2012-68.pdf\">https://www.hpl.hp.com/techreports/2012/HPL-2012-68.pdf</a><br>\nRoughly, seqlocks don't get along well with modern language memory models, because the reads between the two sequence checks (deliberately) race with writes, but those races are UB in Rust and C++. The paper looks at a few ways to reconcile things.</p>",
        "id": 204620581,
        "sender_full_name": "Jim Blandy",
        "timestamp": 1595379526
    },
    {
        "content": "<p><del>@<strong>Jim Blandy</strong> it's really not a \"lock\" though</del></p>",
        "id": 204620832,
        "sender_full_name": "eddyb",
        "timestamp": 1595379745
    },
    {
        "content": "<p>wait sorry I misread</p>",
        "id": 204620846,
        "sender_full_name": "eddyb",
        "timestamp": 1595379766
    },
    {
        "content": "<p>upshot, I think the code from the <code>perf_event_open(2)</code> man page is UB</p>",
        "id": 204620850,
        "sender_full_name": "Jim Blandy",
        "timestamp": 1595379770
    },
    {
        "content": "<p>it would help if I read the entire message <em>sigh</em></p>",
        "id": 204620857,
        "sender_full_name": "eddyb",
        "timestamp": 1595379778
    },
    {
        "content": "<p>okay yeah that confirms my suspicions</p>",
        "id": 204620864,
        "sender_full_name": "eddyb",
        "timestamp": 1595379784
    },
    {
        "content": "<p>presumably one needs <em>at least</em> relaxed atomic reads?</p>",
        "id": 204620883,
        "sender_full_name": "eddyb",
        "timestamp": 1595379806
    },
    {
        "content": "<p>I was gonna go full-on atomics then decided to just copy the C code</p>",
        "id": 204620972,
        "sender_full_name": "eddyb",
        "timestamp": 1595379883
    },
    {
        "content": "<p>I don't remember the paper. Clearly, the reads of the data need to be properly ordered with respect to the sequence number reads. What does that entail?</p>",
        "id": 204620978,
        "sender_full_name": "Jim Blandy",
        "timestamp": 1595379892
    },
    {
        "content": "<p>hmm \"Figure 1.Seqlocks: Initial buggy version\" in the paper doesn't have the barriers that the <code>perf_event_open</code> code does</p>",
        "id": 204620988,
        "sender_full_name": "eddyb",
        "timestamp": 1595379904
    },
    {
        "content": "<p>the only UB I can think of is unsynchronized reads when the values can change via preemption</p>",
        "id": 204621009,
        "sender_full_name": "eddyb",
        "timestamp": 1595379958
    },
    {
        "content": "<p>but I wasn't sure if it was UB at all. maybe it's UB in Rust but not C</p>",
        "id": 204621055,
        "sender_full_name": "eddyb",
        "timestamp": 1595379970
    },
    {
        "content": "<p>I had forgotten about the <code>barrier</code> calls. That makes things a lot better.<br>\nOn the man page, it looks like the reads of <code>pc-&gt;lock</code> are not atomic, so those race.</p>",
        "id": 204621075,
        "sender_full_name": "Jim Blandy",
        "timestamp": 1595380020
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"279335\">@Jim Blandy</span> the good news for my usecase is that I can make it sequential consistency and not really pay the cost. because the plan is to not even read any of that when sampling</p>",
        "id": 204621202,
        "sender_full_name": "eddyb",
        "timestamp": 1595380161
    },
    {
        "content": "<p>AFAICT the kernel doesn't communicate anything through the mmap page that varies throughout execution other than maybe the counter being disabled or changing the hardware register it's using</p>",
        "id": 204621230,
        "sender_full_name": "eddyb",
        "timestamp": 1595380200
    },
    {
        "content": "<p>so  my plan is to check before and after for expected values and assume nothing changed in between</p>",
        "id": 204621287,
        "sender_full_name": "eddyb",
        "timestamp": 1595380236
    },
    {
        "content": "<p>and so sampling would be <em>just</em> <code>rdpmc</code> with none of the loop around it</p>",
        "id": 204621317,
        "sender_full_name": "eddyb",
        "timestamp": 1595380280
    },
    {
        "content": "<p>The enabled vs. running time is certainly something you can check at the end. I don't know how often the kernel moves PMC registers around, hopefully not often!</p>",
        "id": 204621338,
        "sender_full_name": "Jim Blandy",
        "timestamp": 1595380307
    },
    {
        "content": "<p>sadly probably a poor fit for a library (except by perhaps providing a lot of control over the details of sampling)</p>",
        "id": 204621341,
        "sender_full_name": "eddyb",
        "timestamp": 1595380312
    },
    {
        "content": "<p>I haven't observed any value for <code>index</code> other than <code>1</code> (i.e. register 0)</p>",
        "id": 204621395,
        "sender_full_name": "eddyb",
        "timestamp": 1595380336
    },
    {
        "content": "<p>I don't think it will move anything around if nothing else in the process isn't using them</p>",
        "id": 204621406,
        "sender_full_name": "eddyb",
        "timestamp": 1595380356
    },
    {
        "content": "<p>It seems like you basically just want the kernel to allocate the PMC register for you, and then you're going to do all the reading of that register yourself.</p>",
        "id": 204621411,
        "sender_full_name": "Jim Blandy",
        "timestamp": 1595380361
    },
    {
        "content": "<p>If you run two programs that are measuring at the same time, do they get assigned separate indices?</p>",
        "id": 204621431,
        "sender_full_name": "Jim Blandy",
        "timestamp": 1595380391
    },
    {
        "content": "<p>I can check but I highly doubt it</p>",
        "id": 204621444,
        "sender_full_name": "eddyb",
        "timestamp": 1595380407
    },
    {
        "content": "<p>also it's suggested that <code>offset</code> tracks some kernel bookkeeping or something but AFAICT that's just patently not true</p>",
        "id": 204621503,
        "sender_full_name": "eddyb",
        "timestamp": 1595380443
    },
    {
        "content": "<p>I've only observed one value so far and it's like <code>(1 &lt;&lt; 47) - 1</code></p>",
        "id": 204621510,
        "sender_full_name": "eddyb",
        "timestamp": 1595380458
    },
    {
        "content": "<p>which is a typical bias representation (<code>pmc_width</code> is <code>48</code>)</p>",
        "id": 204621522,
        "sender_full_name": "eddyb",
        "timestamp": 1595380470
    },
    {
        "content": "<p>maybe <code>offset</code> is used that way when it's a software counter, not a hardware one?</p>",
        "id": 204621534,
        "sender_full_name": "eddyb",
        "timestamp": 1595380492
    },
    {
        "content": "<p>Yeah, I guess it wouldn't make sense for the indices to be something visible between processes, that'd be an avoidable information leak at the least.</p>",
        "id": 204621629,
        "sender_full_name": "Jim Blandy",
        "timestamp": 1595380595
    },
    {
        "content": "<p>yeah I just checked, <code>index</code> is always <code>1</code></p>",
        "id": 204621656,
        "sender_full_name": "eddyb",
        "timestamp": 1595380635
    },
    {
        "content": "<p>let me see if I run it under <code>perf stat</code></p>",
        "id": 204621662,
        "sender_full_name": "eddyb",
        "timestamp": 1595380645
    },
    {
        "content": "<p><code>index</code> becomes <code>0</code> with no <code>-e</code> because presumably <code>perf stat</code> uses all it can (I guess I need to treat <code>index == 0</code> as \"not supported\" on startup)</p>",
        "id": 204621759,
        "sender_full_name": "eddyb",
        "timestamp": 1595380725
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"279335\">@Jim Blandy</span> okay yeah with <code>perf stat -e instructions:u</code> I get <code>index</code> being <code>2</code></p>",
        "id": 204621778,
        "sender_full_name": "eddyb",
        "timestamp": 1595380754
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/204594250\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> I want us to collect side by side instruction counts and the current timing measurements. it might even be possible to eventually account for parallelism but idk how <code>perf_event_open</code> interacts with threads, I haven't looked into it</p>\n</blockquote>\n<p>Perf measures everything run under it (and gives enough information that you can account threads separately), but with threads, it's possible for instruction counts to be higher and real-time to be lower. Also, in addition to instruction counts, you should collect cache misses, and one or two other things, which can help explain why instruction counts might be <em>lower</em> and time <em>higher</em>.</p>",
        "id": 204632371,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595396970
    },
    {
        "content": "<p>so one problem with real-time is that it includes things happening elsewhere in the OS, either waiting for the kernel or just other programs running. but I guess you could use the CPU timestamp thing on x86? or maybe you can just get \"user time\" but idk how much that can vary (I should check what <code>measureme</code> does right now)</p>",
        "id": 204638516,
        "sender_full_name": "eddyb",
        "timestamp": 1595404356
    },
    {
        "content": "<p>but also heh I remember when I suggested using cache misses as an approximation of the \"DRAM bandwidth\" needed (I forgot how I phrased it back then, but I still agree with it)</p>",
        "id": 204638576,
        "sender_full_name": "eddyb",
        "timestamp": 1595404422
    },
    {
        "content": "<p>anyway all of the things I'm interested in at the moment are pretty accurately reflected in <code>instructions:u</code>, so that's why I'm focusing on that, but long-term we do probably want to be measuring several things</p>",
        "id": 204638657,
        "sender_full_name": "eddyb",
        "timestamp": 1595404488
    },
    {
        "content": "<p>sorry, a bit scatter-brained there, just woke up</p>",
        "id": 204638691,
        "sender_full_name": "eddyb",
        "timestamp": 1595404517
    },
    {
        "content": "<p>I'm still interested in adding cache misses but it hasn't been high priority enough. It should now be really simple though, only a couple places to edit</p>",
        "id": 204647358,
        "sender_full_name": "simulacrum",
        "timestamp": 1595411451
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> word of warning, <code>perf stat</code> seems to run out of hardware counters on Zen 1, so we need to do some testing first :P</p>",
        "id": 204649067,
        "sender_full_name": "eddyb",
        "timestamp": 1595412837
    },
    {
        "content": "<p>We're on 3600x which is... Zen 2 I think? Not sure if that's enough</p>",
        "id": 204649130,
        "sender_full_name": "simulacrum",
        "timestamp": 1595412876
    },
    {
        "content": "<p>ah interesting, I wonder if that actually helps</p>",
        "id": 204649165,
        "sender_full_name": "eddyb",
        "timestamp": 1595412914
    },
    {
        "content": "<p>or maybe you're using a filter</p>",
        "id": 204649187,
        "sender_full_name": "eddyb",
        "timestamp": 1595412930
    },
    {
        "content": "<p>(I think two of the values I get are 0 because <code>perf stat</code> runs out of counters? not sure)</p>",
        "id": 204649206,
        "sender_full_name": "eddyb",
        "timestamp": 1595412946
    },
    {
        "content": "<p>doesn't perf multiplex counters if there are too many requested for the hardware?</p>",
        "id": 204710808,
        "sender_full_name": "cuviper",
        "timestamp": 1595445747
    },
    {
        "content": "<p>maybe that's only for sampling</p>",
        "id": 204710814,
        "sender_full_name": "cuviper",
        "timestamp": 1595445752
    },
    {
        "content": "<p>btw this is the setup for measuring <code>instructions:u</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Counter</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">super</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">instructions</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">Self</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">perf_hw_id_PERF_COUNT_HW_INSTRUCTIONS</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">hw_id</span>: <span class=\"nc\">perf_hw_id</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"o\">..</span><span class=\"p\">.}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204778785,
        "sender_full_name": "eddyb",
        "timestamp": 1595498363
    },
    {
        "content": "<p>so it would be really easy to add other counters, code-wise (modulo routing them in <code>measureme</code> to be stored on disk) - there would ofc be doubled overhead</p>",
        "id": 204778922,
        "sender_full_name": "eddyb",
        "timestamp": 1595498408
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/-pe7qVlFhHEdokjwG7WABwd-/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/-pe7qVlFhHEdokjwG7WABwd-/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/-pe7qVlFhHEdokjwG7WABwd-/image.png\"></a></div>",
        "id": 204783118,
        "sender_full_name": "eddyb",
        "timestamp": 1595502077
    },
    {
        "content": "<p>help my names are increasingly longer</p>",
        "id": 204783132,
        "sender_full_name": "eddyb",
        "timestamp": 1595502100
    },
    {
        "content": "<p>but I think I've found the final variation (orange), which <em>should</em> (in theory) be capable of running under <code>perf stat -e instructions:u</code>without reading the wrong counter</p>",
        "id": 204783742,
        "sender_full_name": "eddyb",
        "timestamp": 1595502605
    },
    {
        "content": "<p>it doesn't cost more to use the correct hardware register index, so at least that's nice</p>",
        "id": 204783761,
        "sender_full_name": "eddyb",
        "timestamp": 1595502629
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> good news, a quick look suggests running under <code>perf stat -e instructions:u</code> doesn't impact the measurements (which I guess makes sense since <code>perf</code> isn't running any code inside the userspace of the process)</p>",
        "id": 204784222,
        "sender_full_name": "eddyb",
        "timestamp": 1595503094
    },
    {
        "content": "<p>and running under <code>perf stat</code> (which runs out of hardware registers) is now detected (<code>index == 0</code>) properly instead of panicking</p>",
        "id": 204784244,
        "sender_full_name": "eddyb",
        "timestamp": 1595503136
    },
    {
        "content": "<p>Detected properly - what can we do?</p>\n<p>(Out of interest, can we piggy back on perf stat's allocated register?)</p>\n<p>One thing to note is that there's no reason we can't run perf stat and self profile in separate runs. IIRC, we already basically do this on perf.rlo and that way we're less likely to interfere with each other.</p>",
        "id": 204784375,
        "sender_full_name": "simulacrum",
        "timestamp": 1595503274
    },
    {
        "content": "<p>I don't think there's a way to see what other <code>perf_event_open</code> calls did. not to mention that <code>perf</code> has it in another process so it's probably not even visible as a file description in the <code>rustc</code> process</p>",
        "id": 204784438,
        "sender_full_name": "eddyb",
        "timestamp": 1595503331
    },
    {
        "content": "<p>maybe there's some <code>ptrace</code> support but it seems extreme</p>",
        "id": 204784446,
        "sender_full_name": "eddyb",
        "timestamp": 1595503341
    },
    {
        "content": "<p>and yeah separate runs makes sense - that or maybe the perf hardware can handle it. or we can use filters to pick what to measure etc. etc.</p>",
        "id": 204784474,
        "sender_full_name": "eddyb",
        "timestamp": 1595503396
    },
    {
        "content": "<p>I should organize the data, to make it easy to share later, but other than that I think I need to move to integrating with <code>measureme</code>, there's nothing else I can do in <code>rustc_data_structures</code> with what APIs I have available</p>",
        "id": 204784585,
        "sender_full_name": "eddyb",
        "timestamp": 1595503522
    },
    {
        "content": "<p>(short of encoding the data as strings, which, lol)</p>",
        "id": 204784602,
        "sender_full_name": "eddyb",
        "timestamp": 1595503538
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> hmm looking at <code>measureme</code>, <code>nanos_since_start</code> isn't <code>#[inline]</code>, but everything calling it is, that seems bad</p>",
        "id": 205485223,
        "sender_full_name": "eddyb",
        "timestamp": 1596119328
    },
    {
        "content": "<p>ah nvm it's in an <code>impl&lt;S: SerializationSink&gt; Profiler&lt;S&gt;</code> so it doesn't need the <code>#[inline]</code></p>",
        "id": 205485255,
        "sender_full_name": "eddyb",
        "timestamp": 1596119349
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> so it looks like the overheads are roughly this: (for libcore, out of ~93 billion instructions):</p>\n<ul>\n<li><code>0.64%</code> for measuring time (current measureme implementation, <code>std::time::Instant::elapsed</code>)</li>\n<li><code>0.03%</code> for measuring instructions w/ <code>rdpmc</code> (from <code>measureme</code>)</li>\n<li><code>0.12%</code> for measuring instructions w/ <code>rdpmc</code> (from <code>rustc_data_structures</code>, not sure why it was slower, I hope it was just worse optimized?)</li>\n</ul>",
        "id": 205616928,
        "sender_full_name": "eddyb",
        "timestamp": 1596215934
    },
    {
        "content": "<p>overall, measuring instructions is 5x-20x faster than measuring time</p>",
        "id": 205616967,
        "sender_full_name": "eddyb",
        "timestamp": 1596215967
    },
    {
        "content": "<p>again, assuming I didn't make any mistakes doing all of this</p>",
        "id": 205616982,
        "sender_full_name": "eddyb",
        "timestamp": 1596215981
    },
    {
        "content": "<p>I need to figure out a better data gathering setup, and maybe go down from 100 samples, that takes like 40min lol</p>",
        "id": 205617007,
        "sender_full_name": "eddyb",
        "timestamp": 1596216002
    },
    {
        "content": "<p>Sounds great! I wonder if we could use some low level CPU counter for time measurements - 1% overhead is pretty big.</p>",
        "id": 205617328,
        "sender_full_name": "simulacrum",
        "timestamp": 1596216212
    },
    {
        "content": "<p>I think <code>rdtsc</code> is the equivalent to <code>rdpmc</code> and the perf mmap page works similarly. I wonder if <code>rdtsc</code> is available on non-linux</p>",
        "id": 205623182,
        "sender_full_name": "eddyb",
        "timestamp": 1596219231
    },
    {
        "content": "<p><del>ugh my data has issues, I'm playing around with various combinations of setups and seeing weird things</del></p>",
        "id": 205623637,
        "sender_full_name": "eddyb",
        "timestamp": 1596219487
    },
    {
        "content": "<p><del>@<strong>simulacrum</strong> oh the 0.64% is probably overestimated because I forgot to use <code>black_box</code> in a critical place so it's probably optimizing out a bunch of <code>measureme</code> lol</del></p>",
        "id": 205623970,
        "sender_full_name": "eddyb",
        "timestamp": 1596219705
    },
    {
        "content": "<p>adding a <code>black_box</code> (around the <code>0</code>, with no sampling of any kind) made it... faster??</p>",
        "id": 205625045,
        "sender_full_name": "eddyb",
        "timestamp": 1596220334
    },
    {
        "content": "<p>starting to suspect my methodology here</p>",
        "id": 205625073,
        "sender_full_name": "eddyb",
        "timestamp": 1596220353
    },
    {
        "content": "<p>but if I'm sampling instructions, <code>black_box(0)</code> for the timestamp is as fast as <code>0</code></p>",
        "id": 205628589,
        "sender_full_name": "eddyb",
        "timestamp": 1596221938
    },
    {
        "content": "<p><del>but best guess now is that the overhead of getting the time is like <code>0.30%</code> and I don't know yet what accounts for the other half</del></p>",
        "id": 205628760,
        "sender_full_name": "eddyb",
        "timestamp": 1596222028
    },
    {
        "content": "<p>ahhh I think the <code>0.64%</code> figure is probably right, I was just missing an <code>#[inline]</code>, but it's generic so idk why it makes a difference</p>",
        "id": 205629441,
        "sender_full_name": "eddyb",
        "timestamp": 1596222447
    },
    {
        "content": "<p>like I now have all 4 combinations of <code>(is_sampling_time, is_sampling_instructions)</code> looking like what I expected, I just had to add <code>#[inline]</code> to get that, now I have to redo all 4 with <code>#[inline]</code> to make sure they're not off the mark again</p>",
        "id": 205630019,
        "sender_full_name": "eddyb",
        "timestamp": 1596222799
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/4K45ny8qW1vm5uJZXtDo1gnp/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/4K45ny8qW1vm5uJZXtDo1gnp/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/4K45ny8qW1vm5uJZXtDo1gnp/image.png\"></a></div>",
        "id": 205630131,
        "sender_full_name": "eddyb",
        "timestamp": 1596222853
    },
    {
        "content": "<p>so I still haven't confirmed this data with <code>#[inline]</code> in all 4 cases, but the gap between the two pairs is arguably the cost of sampling time, whereas the gap in each pair is the cost of sampling instructions</p>",
        "id": 205630205,
        "sender_full_name": "eddyb",
        "timestamp": 1596222904
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/CLVIBol90o8KYZCgQLH-35s6/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/CLVIBol90o8KYZCgQLH-35s6/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/CLVIBol90o8KYZCgQLH-35s6/image.png\"></a></div>",
        "id": 205635153,
        "sender_full_name": "eddyb",
        "timestamp": 1596225410
    },
    {
        "content": "<p>I think this is my final dataset</p>",
        "id": 205635181,
        "sender_full_name": "eddyb",
        "timestamp": 1596225437
    },
    {
        "content": "<p>and only 10 data points because collecting 100 for each run was a mistake (the ~40min they take is way longer than the rustc rebuild takes lol)</p>",
        "id": 205635379,
        "sender_full_name": "eddyb",
        "timestamp": 1596225567
    },
    {
        "content": "<p>That's really awesome work <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>!! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 205637427,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1596226859
    },
    {
        "content": "<p>I'm still not saving the instructions counts to disk :P</p>",
        "id": 205637448,
        "sender_full_name": "eddyb",
        "timestamp": 1596226881
    },
    {
        "content": "<p>Who needs that? :P</p>",
        "id": 205637539,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1596226931
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/3T4mesqw5nnR4XQPEcfzPSpc/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/3T4mesqw5nnR4XQPEcfzPSpc/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/3T4mesqw5nnR4XQPEcfzPSpc/image.png\"></a></div>",
        "id": 205638763,
        "sender_full_name": "eddyb",
        "timestamp": 1596227712
    },
    {
        "content": "<p>this is the violin plot version. I should also redo the overhead calculation now</p>",
        "id": 205638804,
        "sender_full_name": "eddyb",
        "timestamp": 1596227740
    },
    {
        "content": "<p>instructions are so low-overhead compared to time that I just want them now :)</p>",
        "id": 205639242,
        "sender_full_name": "simulacrum",
        "timestamp": 1596228011
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> I tried to put the new data into a table (and I also made the plotly charts available) <a href=\"https://gist.github.com/eddyb/7a0a55411441142765db6cfa41504e50#gistcomment-3399834\">https://gist.github.com/eddyb/7a0a55411441142765db6cfa41504e50#gistcomment-3399834</a></p>",
        "id": 205640395,
        "sender_full_name": "eddyb",
        "timestamp": 1596228738
    },
    {
        "content": "<p><code>rdpmc</code> overhead seems to be between <code>0.04%</code> (when on top of time) and <code>0.06%</code>. maybe I should use interval arithmetic but ehhh</p>",
        "id": 205640474,
        "sender_full_name": "eddyb",
        "timestamp": 1596228821
    },
    {
        "content": "<p>sampling time being 10x slower than sampling the instruction counter is good enough for me I think</p>",
        "id": 205640560,
        "sender_full_name": "eddyb",
        "timestamp": 1596228866
    },
    {
        "content": "<p>come on... <a href=\"/user_uploads/4715/_Mi0e0gtpwfBIdAXHEF2LHWy/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/_Mi0e0gtpwfBIdAXHEF2LHWy/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/_Mi0e0gtpwfBIdAXHEF2LHWy/image.png\"></a></div>",
        "id": 205644039,
        "sender_full_name": "eddyb",
        "timestamp": 1596231308
    },
    {
        "content": "<p>it's cheaper to use the sampled instruction counts than <code>black_box(0)</code></p>",
        "id": 205644074,
        "sender_full_name": "eddyb",
        "timestamp": 1596231336
    },
    {
        "content": "<p>er, that seems odd? doesn't black box literally compile to nothing? maybe it's inhibiting optimizations I guess</p>",
        "id": 205644181,
        "sender_full_name": "simulacrum",
        "timestamp": 1596231396
    },
    {
        "content": "<p>do I replace the old \"Sampling instructions:u\" with the new measurement, and redo the screenshots and everything? it is technically more realistic :/</p>",
        "id": 205644376,
        "sender_full_name": "eddyb",
        "timestamp": 1596231547
    },
    {
        "content": "<p>for now, enjoy this:</p>\n<h3>Normal run</h3>\n<table>\n<thead>\n<tr>\n<th>Item</th>\n<th>Self time</th>\n<th>% of total time</th>\n<th>Time</th>\n<th>Item count</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>typeck</td>\n<td>7.58s</td>\n<td>30.921</td>\n<td>7.88s</td>\n<td>11911</td>\n</tr>\n<tr>\n<td>mir_borrowck</td>\n<td>2.86s</td>\n<td>11.665</td>\n<td>5.60s</td>\n<td>11911</td>\n</tr>\n<tr>\n<td>expand_crate</td>\n<td>2.22s</td>\n<td>9.056</td>\n<td>2.24s</td>\n<td>1</td>\n</tr>\n<tr>\n<td>resolve_crate</td>\n<td>1.51s</td>\n<td>6.178</td>\n<td>1.51s</td>\n<td>1</td>\n</tr>\n<tr>\n<td>mir_built</td>\n<td>1.32s</td>\n<td>5.397</td>\n<td>1.53s</td>\n<td>11911</td>\n</tr>\n</tbody>\n</table>\n<h3>Each 1s is 1 billion instructions</h3>\n<table>\n<thead>\n<tr>\n<th>Item</th>\n<th>Self time</th>\n<th>% of total time</th>\n<th>Time</th>\n<th>Item count</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>typeck</td>\n<td>27.30s</td>\n<td>29.426</td>\n<td>27.94s</td>\n<td>11911</td>\n</tr>\n<tr>\n<td>mir_borrowck</td>\n<td>11.50s</td>\n<td>12.393</td>\n<td>20.75s</td>\n<td>11911</td>\n</tr>\n<tr>\n<td>expand_crate</td>\n<td>8.97s</td>\n<td>9.670</td>\n<td>9.08s</td>\n<td>1</td>\n</tr>\n<tr>\n<td>resolve_crate</td>\n<td>8.84s</td>\n<td>9.530</td>\n<td>8.84s</td>\n<td>1</td>\n</tr>\n<tr>\n<td>mir_built</td>\n<td>5.32s</td>\n<td>5.736</td>\n<td>5.69s</td>\n<td>11911</td>\n</tr>\n</tbody>\n</table>",
        "id": 205644395,
        "sender_full_name": "eddyb",
        "timestamp": 1596231579
    },
    {
        "content": "<p>this is not averaged or anything, it's just <code>summarize summarize ... | head -n 13</code> from a couple random runs (I haven't deleted all the files that keep piling up, yet, since a few sets of runs ago)</p>",
        "id": 205644483,
        "sender_full_name": "eddyb",
        "timestamp": 1596231633
    },
    {
        "content": "<p>is % of total time a percent of total instructions ?</p>",
        "id": 205644528,
        "sender_full_name": "simulacrum",
        "timestamp": 1596231678
    },
    {
        "content": "<p>I would expect so, yes</p>",
        "id": 205644541,
        "sender_full_name": "eddyb",
        "timestamp": 1596231695
    },
    {
        "content": "<p>Or -- I guess -- instructions spent in queries?</p>",
        "id": 205644612,
        "sender_full_name": "simulacrum",
        "timestamp": 1596231727
    },
    {
        "content": "<p>Since we can't actually do global and local, right?</p>",
        "id": 205644616,
        "sender_full_name": "simulacrum",
        "timestamp": 1596231734
    },
    {
        "content": "<p>we should test the collection server's hardware for support for this btw</p>",
        "id": 205644639,
        "sender_full_name": "simulacrum",
        "timestamp": 1596231758
    },
    {
        "content": "<p>not sure you mean by \"global and local\". this is the exact same thing <code>perf -e instructions:u</code> measures</p>",
        "id": 205644734,
        "sender_full_name": "eddyb",
        "timestamp": 1596231821
    },
    {
        "content": "<p>except it starts when the <code>Profiler</code> is created and ends when it's dropped, instead of lasting the whole process</p>",
        "id": 205644853,
        "sender_full_name": "eddyb",
        "timestamp": 1596231888
    },
    {
        "content": "<p>right, that's what I meant, I think</p>",
        "id": 205644906,
        "sender_full_name": "simulacrum",
        "timestamp": 1596231925
    },
    {
        "content": "<p>I guess a bit wider than I thought</p>",
        "id": 205644919,
        "sender_full_name": "simulacrum",
        "timestamp": 1596231935
    },
    {
        "content": "<p>but close enough anyway</p>",
        "id": 205644926,
        "sender_full_name": "simulacrum",
        "timestamp": 1596231938
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> btw I looked at two more runs (one of each kind) and the % column looks like it has 2-3 orders of magnitude less variance for instructions than for time</p>",
        "id": 205645134,
        "sender_full_name": "eddyb",
        "timestamp": 1596232080
    },
    {
        "content": "<p>yeah that's what I'd expect I think</p>",
        "id": 205645192,
        "sender_full_name": "simulacrum",
        "timestamp": 1596232093
    },
    {
        "content": "<p>I just checked and blue -&gt; cyan overhead in my last screenshot is very close to the difference between the other pair that includes sampling time</p>",
        "id": 205645706,
        "sender_full_name": "eddyb",
        "timestamp": 1596232449
    },
    {
        "content": "<p>so I'm going to have to replace red with cyan I think. it's more representative of the final product anyway</p>",
        "id": 205645729,
        "sender_full_name": "eddyb",
        "timestamp": 1596232474
    },
    {
        "content": "<p>new plots are: <a href=\"https://user-images.githubusercontent.com/77424/89100856-59837800-d403-11ea-8757-f38e0f467107.png\">https://user-images.githubusercontent.com/77424/89100856-59837800-d403-11ea-8757-f38e0f467107.png</a> <a href=\"https://user-images.githubusercontent.com/77424/89100862-66a06700-d403-11ea-982d-a439d53725ca.png\">https://user-images.githubusercontent.com/77424/89100862-66a06700-d403-11ea-982d-a439d53725ca.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://user-images.githubusercontent.com/77424/89100856-59837800-d403-11ea-8757-f38e0f467107.png\"><img src=\"https://user-images.githubusercontent.com/77424/89100856-59837800-d403-11ea-8757-f38e0f467107.png\"></a></div><div class=\"message_inline_image\"><a href=\"https://user-images.githubusercontent.com/77424/89100862-66a06700-d403-11ea-982d-a439d53725ca.png\"><img src=\"https://user-images.githubusercontent.com/77424/89100862-66a06700-d403-11ea-982d-a439d53725ca.png\"></a></div>",
        "id": 205677474,
        "sender_full_name": "eddyb",
        "timestamp": 1596281453
    },
    {
        "content": "<p>after updating <a href=\"https://gist.github.com/eddyb/7a0a55411441142765db6cfa41504e50#gistcomment-3399834\">https://gist.github.com/eddyb/7a0a55411441142765db6cfa41504e50#gistcomment-3399834</a></p>",
        "id": 205677481,
        "sender_full_name": "eddyb",
        "timestamp": 1596281472
    },
    {
        "content": "<p>overhead of measuring instructions is around 0.04%, now much closer between measuring and not measuring time, which is another reason I'm more confident in this configuration</p>",
        "id": 205677495,
        "sender_full_name": "eddyb",
        "timestamp": 1596281517
    },
    {
        "content": "<p>so 15x faster than measuring time. and I really want to stop messing with it more</p>",
        "id": 205677537,
        "sender_full_name": "eddyb",
        "timestamp": 1596281550
    },
    {
        "content": "<p>sadly dynamic choice between instructions and time brings it right in the middle even if \"instructions\" is always picked dynamically, so we'd need to be more clever than that</p>",
        "id": 205678681,
        "sender_full_name": "eddyb",
        "timestamp": 1596283781
    },
    {
        "content": "<p>(as in, \"return time if the instruction counter wasn't enabled\")</p>",
        "id": 205678736,
        "sender_full_name": "eddyb",
        "timestamp": 1596283826
    },
    {
        "content": "<p><code>summarize summarize --json</code> seems useful, curious if it will give me data that's full-precision</p>",
        "id": 205683021,
        "sender_full_name": "eddyb",
        "timestamp": 1596290838
    },
    {
        "content": "<p>ahhh yeah beautiful :D</p>",
        "id": 205683084,
        "sender_full_name": "eddyb",
        "timestamp": 1596290902
    },
    {
        "content": "<p>and any numbers I need I can just feed to <code> | (.secs*1e9+.nanos)</code></p>",
        "id": 205683112,
        "sender_full_name": "eddyb",
        "timestamp": 1596290968
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/9YluEZrEgzuhR3-uDLsbeoCD/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/9YluEZrEgzuhR3-uDLsbeoCD/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/9YluEZrEgzuhR3-uDLsbeoCD/image.png\"></a></div>",
        "id": 205825780,
        "sender_full_name": "eddyb",
        "timestamp": 1596477401
    },
    {
        "content": "<p>so this the difference in the variance of time vs instructions:u data, as seen by the total counted by <code>summarize summarize --json</code></p>",
        "id": 205826011,
        "sender_full_name": "eddyb",
        "timestamp": 1596477502
    },
    {
        "content": "<p>it's like 600x smaller for instructions:u</p>",
        "id": 205826035,
        "sender_full_name": "eddyb",
        "timestamp": 1596477515
    },
    {
        "content": "<p>so sampling time takes 15x more time and varies 600x more, at least in this configuration</p>",
        "id": 205826150,
        "sender_full_name": "eddyb",
        "timestamp": 1596477572
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> looking at individual queries (with a lot of executions, around 10k), the variance for self time/instructions seems to be somewhat constant for time, but differ more (between queries) for instructions</p>",
        "id": 205835022,
        "sender_full_name": "eddyb",
        "timestamp": 1596481886
    },
    {
        "content": "<p>seems like it reflects the workload. still, the largest one I found so far was still 100x smaller than the time variance, I wonder if I can automate this though</p>",
        "id": 205835077,
        "sender_full_name": "eddyb",
        "timestamp": 1596481922
    },
    {
        "content": "<p>huh, <code>resolve_crate</code>, which is a whole 6% of the compilation, possibly because it has only one execution, ends up with ±324 <em>instructions</em> (around an average of ~8.8 billion) whereas as time it's 1.56s ±0.28s</p>",
        "id": 205839960,
        "sender_full_name": "eddyb",
        "timestamp": 1596484495
    },
    {
        "content": "<p>that's getting to the point where you could hunt down sources of variance</p>",
        "id": 205840032,
        "sender_full_name": "eddyb",
        "timestamp": 1596484546
    },
    {
        "content": "<p>but I never expected to see that kind of thing and it's almost pointless to dig into it (given that there are smaller things with more variance)</p>",
        "id": 205840168,
        "sender_full_name": "eddyb",
        "timestamp": 1596484619
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"120989\">@njn</span> who will probably be very happy to see the self-profile get much more precise</p>",
        "id": 205840181,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1596484627
    },
    {
        "content": "<p>I wonder what the simplest opt-in thing is that we could land. something where it does the (sadly less efficient) dynamic choice between hardware counters and time, and there's one-time cost of setting that up and noting down in the file what kind of measurements are used</p>",
        "id": 205840407,
        "sender_full_name": "eddyb",
        "timestamp": 1596484750
    },
    {
        "content": "<p>at this point measuring both seems silly, unless we also add <code>rdtsc</code> support</p>",
        "id": 205840426,
        "sender_full_name": "eddyb",
        "timestamp": 1596484763
    },
    {
        "content": "<p>IMO it seems like instructions, if available, are almost always a definite win for compiler devs trying to use this</p>",
        "id": 205840653,
        "sender_full_name": "simulacrum",
        "timestamp": 1596484885
    },
    {
        "content": "<p>I'd be in favor of only supporting one or the other just to start</p>",
        "id": 205840690,
        "sender_full_name": "simulacrum",
        "timestamp": 1596484900
    },
    {
        "content": "<p>one problem is backwards-compat, and the fact that measuring instructions requires nightly (locally I integrated it with a <code>feature = \"nightly\"</code>). so we might want to release a <code>measureme</code> breaking change if we want to force a certain default</p>",
        "id": 205841260,
        "sender_full_name": "eddyb",
        "timestamp": 1596485196
    },
    {
        "content": "<p>hm I wouldn't worry about measureme being usable on stable personally</p>",
        "id": 205841346,
        "sender_full_name": "simulacrum",
        "timestamp": 1596485259
    },
    {
        "content": "<p>(we can release a major version though)</p>",
        "id": 205841356,
        "sender_full_name": "simulacrum",
        "timestamp": 1596485268
    },
    {
        "content": "<p>not sure if Cargo features are the best way to control odd toggles like \"force this to only use instruction-counting on supported platforms, so that there is no dynamic cost\"</p>",
        "id": 205841363,
        "sender_full_name": "eddyb",
        "timestamp": 1596485272
    },
    {
        "content": "<p>There might be another breaking change coming soon anyway</p>",
        "id": 205841409,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1596485285
    },
    {
        "content": "<p>aaah okay that's better</p>",
        "id": 205841414,
        "sender_full_name": "eddyb",
        "timestamp": 1596485292
    },
    {
        "content": "<p>(I'll be sure to coordinate the breakage &amp; rustc update with <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> )</p>",
        "id": 205841444,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1596485320
    },
    {
        "content": "<p>so there's sort of 3 possible states:</p>\n<ul>\n<li>platform doesn't support instruction-counting (or not on nightly, so <code>asm!</code> is not available)</li>\n<li>we tried initializing the counter but it didn't work (e.g. <code>perf stat</code> is using up all the counters, or the hardware register isn't 48 bits wide, which I'm currently hardcoding)</li>\n<li>we're counting instructions</li>\n</ul>",
        "id": 205841500,
        "sender_full_name": "eddyb",
        "timestamp": 1596485374
    },
    {
        "content": "<p>and most of the code just sees <code>None</code>, <code>None</code>, and <code>Some(hw_counters)</code> currently</p>",
        "id": 205841586,
        "sender_full_name": "eddyb",
        "timestamp": 1596485408
    },
    {
        "content": "<p>so we should figure out how to handle each of those that's best for everyone</p>",
        "id": 205841630,
        "sender_full_name": "eddyb",
        "timestamp": 1596485432
    },
    {
        "content": "<p><code>-Zself-profile</code> not working outside of x64 Linux is a non-starter, but even on x64 Linux maybe some hardware doesn't support the counters?</p>",
        "id": 205841803,
        "sender_full_name": "eddyb",
        "timestamp": 1596485538
    },
    {
        "content": "<p>btw if we don't want to do a time fallback, it might even be slightly cheaper to measure instructions than on might graphs since we're not checking for <code>Some</code> vs <code>None</code>. but that's getting into the weeds</p>",
        "id": 205842043,
        "sender_full_name": "eddyb",
        "timestamp": 1596485681
    },
    {
        "content": "<p>I would think we'd want to fallback to the current implementation if we can't use rdpmc</p>",
        "id": 205842116,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1596485733
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> so that kind of dynamic feedback results in something around 93B on this graph, right halfway in the middle <a href=\"https://user-images.githubusercontent.com/77424/89100856-59837800-d403-11ea-8757-f38e0f467107.png\">https://user-images.githubusercontent.com/77424/89100856-59837800-d403-11ea-8757-f38e0f467107.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://user-images.githubusercontent.com/77424/89100856-59837800-d403-11ea-8757-f38e0f467107.png\"><img src=\"https://user-images.githubusercontent.com/77424/89100856-59837800-d403-11ea-8757-f38e0f467107.png\"></a></div>",
        "id": 205842249,
        "sender_full_name": "eddyb",
        "timestamp": 1596485803
    },
    {
        "content": "<p>that's the only cost</p>",
        "id": 205842263,
        "sender_full_name": "eddyb",
        "timestamp": 1596485813
    },
    {
        "content": "<p>it's a bit weird that the effect on optimizations is half the overhead of measuring time</p>",
        "id": 205842293,
        "sender_full_name": "eddyb",
        "timestamp": 1596485834
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> is that branching on each query or so? Would it be faster to stash a function pointer or so?</p>",
        "id": 205842459,
        "sender_full_name": "simulacrum",
        "timestamp": 1596485906
    },
    {
        "content": "<p>the data itself would still be low-variance AFAICT, there would just be an extra constant number of instructions for every time we're sampling</p>",
        "id": 205842461,
        "sender_full_name": "eddyb",
        "timestamp": 1596485907
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> this is all inlined and even adding <code>#[inline]</code> on one generic function helped, so I don't see how we could use function pointers</p>",
        "id": 205842575,
        "sender_full_name": "eddyb",
        "timestamp": 1596485990
    },
    {
        "content": "<p>ah :/</p>",
        "id": 205842592,
        "sender_full_name": "simulacrum",
        "timestamp": 1596485998
    },
    {
        "content": "<p>well, I guess the absolute cost isn't <em>too</em> important</p>",
        "id": 205842674,
        "sender_full_name": "simulacrum",
        "timestamp": 1596486019
    },
    {
        "content": "<p>it's really low compared to rustc anyway</p>",
        "id": 205842685,
        "sender_full_name": "simulacrum",
        "timestamp": 1596486024
    },
    {
        "content": "<p>maybe we can explicitly \"outline\" the time collection (i.e., inline(never) it)</p>",
        "id": 205842760,
        "sender_full_name": "simulacrum",
        "timestamp": 1596486073
    },
    {
        "content": "<p>anyway it's not that bad I don't think. maybe I should count how many times we read it so I can count the overhead in instructions</p>",
        "id": 205842764,
        "sender_full_name": "eddyb",
        "timestamp": 1596486075
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> okay I ended up doing some ugly range math to get this, but \"19, 367, 388\" are actually agreed upon by averages as well, so I'm pretty confident about them <a href=\"https://gist.github.com/eddyb/7a0a55411441142765db6cfa41504e50#gistcomment-3399834\">https://gist.github.com/eddyb/7a0a55411441142765db6cfa41504e50#gistcomment-3399834</a></p>",
        "id": 205856504,
        "sender_full_name": "eddyb",
        "timestamp": 1596495159
    },
    {
        "content": "<p>looks like sampling instructions takes about 20 instructions</p>",
        "id": 205856531,
        "sender_full_name": "eddyb",
        "timestamp": 1596495191
    },
    {
        "content": "<p>seems a bit much but I really need to stop looking at the overhead metrics. the per-query variance of time vs instructions data is far more interesting</p>",
        "id": 205856641,
        "sender_full_name": "eddyb",
        "timestamp": 1596495276
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 206803453,
        "sender_full_name": "eddyb",
        "timestamp": 1597317828
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 206803534,
        "sender_full_name": "eddyb",
        "timestamp": 1597317883
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 206803937,
        "sender_full_name": "eddyb",
        "timestamp": 1597318274
    },
    {
        "content": "<p>oops</p>",
        "id": 206805233,
        "sender_full_name": "eddyb",
        "timestamp": 1597319349
    },
    {
        "content": "<p>I wasn't where I thought I was lol</p>",
        "id": 206805238,
        "sender_full_name": "eddyb",
        "timestamp": 1597319353
    },
    {
        "content": "<p>though I'd check what the numbers are like without debug assertions/logging</p>",
        "id": 206815456,
        "sender_full_name": "eddyb",
        "timestamp": 1597325963
    },
    {
        "content": "<p>93 billion -&gt; 43 billion. whoops</p>",
        "id": 206815487,
        "sender_full_name": "eddyb",
        "timestamp": 1597325980
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> so I think I have a plan for measuring arbitrary things instead of just times. not sure what to call it other than \"samples\" or maybe \"stamps\" (as in, \"timestamps\" without the \"time\"), but I think we can store some metadata about what is being sampled (we have an arbitrary JSON object to work with, right?)</p>",
        "id": 206816220,
        "sender_full_name": "eddyb",
        "timestamp": 1597326337
    },
    {
        "content": "<p>I think so, yeah, there's a metadata \"header\"</p>",
        "id": 206816305,
        "sender_full_name": "simulacrum",
        "timestamp": 1597326366
    },
    {
        "content": "<p>I struggled with naming this in perf.r-l.o too</p>",
        "id": 206816332,
        "sender_full_name": "simulacrum",
        "timestamp": 1597326382
    },
    {
        "content": "<p>I ended up with \"statistic\" but I'm not a fan</p>",
        "id": 206816355,
        "sender_full_name": "simulacrum",
        "timestamp": 1597326396
    },
    {
        "content": "<p>Do you mean with the raw on-disk format? Or what we expose to per.rlo?</p>",
        "id": 206816381,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597326407
    },
    {
        "content": "<p>(there it's \"process statistics\" or \"pstats\")</p>",
        "id": 206816384,
        "sender_full_name": "simulacrum",
        "timestamp": 1597326409
    },
    {
        "content": "<p>so I'm imagining something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">sampler</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Sampler</span>::<span class=\"n\">Time</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[(</span><span class=\"s\">&quot;s&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">1e9</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s\">&quot;ms&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">1e6</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s\">&quot;us&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">1e3</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s\">&quot;ns&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Sampler</span>::<span class=\"n\">Instructions</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[(</span><span class=\"s\">&quot;instructions:u&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Sampler</span>::<span class=\"n\">Cycles</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[(</span><span class=\"s\">&quot;cycles:u&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)],</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 206816595,
        "sender_full_name": "eddyb",
        "timestamp": 1597326509
    },
    {
        "content": "<p>the raw event data</p>",
        "id": 206816617,
        "sender_full_name": "eddyb",
        "timestamp": 1597326526
    },
    {
        "content": "<p>this seems reasonable</p>",
        "id": 206816686,
        "sender_full_name": "simulacrum",
        "timestamp": 1597326573
    },
    {
        "content": "<p>not sure exactly where that's intended to be put, though</p>",
        "id": 206816704,
        "sender_full_name": "simulacrum",
        "timestamp": 1597326584
    },
    {
        "content": "<p>We just assume it's \"time\" currently but it would be easy enough to encode that in the metadata.</p>",
        "id": 206816710,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597326588
    },
    {
        "content": "<p>we could theoretically have more than one kind of measurement per profiler but I think we can start without that feature and just think about it for the future</p>",
        "id": 206816720,
        "sender_full_name": "eddyb",
        "timestamp": 1597326600
    },
    {
        "content": "<p>I mostly just want to ship some version :)</p>",
        "id": 206816791,
        "sender_full_name": "simulacrum",
        "timestamp": 1597326613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I would have that in the code and then it's just shoved into the JSON and nothing reading the format has to care what those mean</p>",
        "id": 206816828,
        "sender_full_name": "eddyb",
        "timestamp": 1597326633
    },
    {
        "content": "<p>seems good</p>",
        "id": 206816843,
        "sender_full_name": "simulacrum",
        "timestamp": 1597326641
    },
    {
        "content": "<p>In the demographic data community the preferred term is \"indicator\"</p>",
        "id": 206816851,
        "sender_full_name": "Eh2406",
        "timestamp": 1597326646
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> the problem is that this is a value that increases monotonically over time</p>",
        "id": 206816901,
        "sender_full_name": "eddyb",
        "timestamp": 1597326671
    },
    {
        "content": "<p>and you can reason about quantities, ranges, etc.</p>",
        "id": 206816910,
        "sender_full_name": "eddyb",
        "timestamp": 1597326680
    },
    {
        "content": "<p>\"counter\" is probably the most accurate one word</p>",
        "id": 206816953,
        "sender_full_name": "eddyb",
        "timestamp": 1597326704
    },
    {
        "content": "<p>but that doesn't give you a generic name for what is being counted</p>",
        "id": 206817041,
        "sender_full_name": "eddyb",
        "timestamp": 1597326729
    },
    {
        "content": "<p>I could also see \"unit\" being appropriate but \"counter\" is fine by me.</p>",
        "id": 206817048,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597326733
    },
    {
        "content": "<p>IE \"What are the units on this measurement?\"</p>",
        "id": 206817082,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597326755
    },
    {
        "content": "<p>sure, it's the values of that measurement that I have a hard time with. like \"timestamp\"</p>",
        "id": 206817134,
        "sender_full_name": "eddyb",
        "timestamp": 1597326785
    },
    {
        "content": "<p>hmm. \"count\" might be fine</p>",
        "id": 206817166,
        "sender_full_name": "eddyb",
        "timestamp": 1597326808
    },
    {
        "content": "<p>even if \"count of nanoseconds\" is a weird way to refer to time</p>",
        "id": 206817203,
        "sender_full_name": "eddyb",
        "timestamp": 1597326829
    },
    {
        "content": "<p>count, counter and units (the last one referring to the data in the snippet I pasted above) could work</p>",
        "id": 206817290,
        "sender_full_name": "eddyb",
        "timestamp": 1597326856
    },
    {
        "content": "<p>so that units example: on the <code>.events</code> reader side:</p>\n<ul>\n<li>you use the unit with multiplier of 1 if you <em>have to</em> refer to the integer count</li>\n<li>you use the first unit if you need an uniform thing to present to users</li>\n<li>you can use any of the other units if you can have heterogenous rendering (this allows <code>3ms</code> or <code>50us</code> instead of <code>0.003s</code> and <code>0.00005s</code>)</li>\n</ul>",
        "id": 206817519,
        "sender_full_name": "eddyb",
        "timestamp": 1597326969
    },
    {
        "content": "<p>I think that's good enough of a strategy that it allows the reader side to not hardcode \"unit types\"</p>",
        "id": 206817559,
        "sender_full_name": "eddyb",
        "timestamp": 1597326999
    },
    {
        "content": "<p>the <code>summarize summarize --json</code> output would be changed for time measurements if we don't special-case time</p>",
        "id": 206817599,
        "sender_full_name": "eddyb",
        "timestamp": 1597327028
    },
    {
        "content": "<p>hopefully that's fine. anyway these are my thoughts on actually landing this, as opposed to me using it for measurements</p>",
        "id": 206817643,
        "sender_full_name": "eddyb",
        "timestamp": 1597327052
    },
    {
        "content": "<p>seems good to me</p>",
        "id": 206817722,
        "sender_full_name": "simulacrum",
        "timestamp": 1597327085
    },
    {
        "content": "<p>we might want a \"canonical integer representation\" I guess</p>",
        "id": 206817750,
        "sender_full_name": "simulacrum",
        "timestamp": 1597327103
    },
    {
        "content": "<p>but that can just be the rightmost unit</p>",
        "id": 206817762,
        "sender_full_name": "simulacrum",
        "timestamp": 1597327108
    },
    {
        "content": "<p>(or whichever one has a \"1\")</p>",
        "id": 206817796,
        "sender_full_name": "simulacrum",
        "timestamp": 1597327123
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/206817796\">said</a>:</p>\n<blockquote>\n<p>(or whichever one has a \"1\")</p>\n</blockquote>\n<p>yeah that's what I meant above with \"if you <em>have to</em> refer to the integer count\"</p>",
        "id": 206818280,
        "sender_full_name": "eddyb",
        "timestamp": 1597327354
    },
    {
        "content": "<p>glad I remembered about the JSON blob, that makes this <em>significantly</em> easier than I thought it would be, and probably more backwards-compatible lol</p>",
        "id": 206818339,
        "sender_full_name": "eddyb",
        "timestamp": 1597327391
    },
    {
        "content": "<p>assuming the old code ignores unknown keys in the JSON blob</p>",
        "id": 206818373,
        "sender_full_name": "eddyb",
        "timestamp": 1597327408
    },
    {
        "content": "<p>I think so, it's just serde</p>",
        "id": 206818389,
        "sender_full_name": "simulacrum",
        "timestamp": 1597327415
    },
    {
        "content": "<p>I don't think we would've put a deny on it</p>",
        "id": 206818410,
        "sender_full_name": "simulacrum",
        "timestamp": 1597327426
    },
    {
        "content": "<p>One question might be is whether we want to switch perf.r-l.o to just instruction-counting</p>",
        "id": 206818477,
        "sender_full_name": "simulacrum",
        "timestamp": 1597327449
    },
    {
        "content": "<p>I think that's the right thing to do</p>",
        "id": 206818489,
        "sender_full_name": "simulacrum",
        "timestamp": 1597327454
    },
    {
        "content": "<p>and there might be some question of \"when is time even good to record\"</p>",
        "id": 206818511,
        "sender_full_name": "simulacrum",
        "timestamp": 1597327465
    },
    {
        "content": "<p>at least at query-level</p>",
        "id": 206818529,
        "sender_full_name": "simulacrum",
        "timestamp": 1597327477
    },
    {
        "content": "<p>I think I want flags to control everything and even allow e.g. the cycles:u measurement I alluded to earlier</p>",
        "id": 206818863,
        "sender_full_name": "eddyb",
        "timestamp": 1597327649
    },
    {
        "content": "<p>oh sure, but we're not going to have capacity/budget/whatever on perf.rlo to record everything</p>",
        "id": 206818896,
        "sender_full_name": "simulacrum",
        "timestamp": 1597327670
    },
    {
        "content": "<p>so I think we'll want to pick one thing</p>",
        "id": 206818904,
        "sender_full_name": "simulacrum",
        "timestamp": 1597327675
    },
    {
        "content": "<p>and eat the (minor) cost of the support of that being there</p>",
        "id": 206818909,
        "sender_full_name": "eddyb",
        "timestamp": 1597327677
    },
    {
        "content": "<p>right, on known hardware we can just do that</p>",
        "id": 206818982,
        "sender_full_name": "eddyb",
        "timestamp": 1597327699
    },
    {
        "content": "<p>this would be easy if we could just force it onto everyone but I feel like it's better design anyway to make the implementation flexible and choose at the use site</p>",
        "id": 206819058,
        "sender_full_name": "eddyb",
        "timestamp": 1597327753
    },
    {
        "content": "<p><em>sigh</em> remember how I was complaining about something weird happening and having the dynamically unreachable time sampling somehow adding half of the cost of actually doing the time sampling? well, when building w/o debug assertions, the <code>19 ±4</code> overhead of the simplest possible setup goes down to <code>14 ±2</code> <em>even with</em> the \"dynamically dead time sampling\" code path left in - I suspected this might happen but didn't properly check</p>",
        "id": 206867371,
        "sender_full_name": "eddyb",
        "timestamp": 1597350754
    },
    {
        "content": "<p>this is with the same workload (compiling the same version of libcore in check mode), and the number of samples is the same, I checked, so the only difference should really be debug-assertions-induced overhead. really weird what it does to optimizations though</p>",
        "id": 206869101,
        "sender_full_name": "eddyb",
        "timestamp": 1597351570
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> so the good news is that it's actually both cheaper to measure instructions at all, <em>and</em> less worrying to dynamically make a decision on <em>what</em> to sample, the bad news is I have to do the data gathering all over again ugh</p>",
        "id": 206869193,
        "sender_full_name": "eddyb",
        "timestamp": 1597351624
    },
    {
        "content": "<p>fwiw I don't personally mind landing this without gathering any data on the raw performance impact</p>",
        "id": 206869247,
        "sender_full_name": "simulacrum",
        "timestamp": 1597351655
    },
    {
        "content": "<p>well, re-gathering</p>",
        "id": 206869255,
        "sender_full_name": "simulacrum",
        "timestamp": 1597351660
    },
    {
        "content": "<p>you don't, but I'll have to make a report where having this information will help :P</p>",
        "id": 206869349,
        "sender_full_name": "eddyb",
        "timestamp": 1597351693
    },
    {
        "content": "<p>anyway it doesn't take that long, and I've learned what not to do to avoid wasting time, it's just another hour of work or so</p>",
        "id": 206869432,
        "sender_full_name": "eddyb",
        "timestamp": 1597351741
    },
    {
        "content": "<p>and who knows, maybe I find some other broken assumption or mistake I've made before</p>",
        "id": 206869777,
        "sender_full_name": "eddyb",
        "timestamp": 1597351906
    },
    {
        "content": "<p>okay good thing I checked, it does go down, but merely to <code>8 ±4</code>, if I remove the \"dynamically dead code\". it's nowhere near 150-200 or however many instructions it was before between those two, although maybe measuring time is really cheap too w/o debug assertions?</p>",
        "id": 206872872,
        "sender_full_name": "eddyb",
        "timestamp": 1597353424
    },
    {
        "content": "<p><code>8 ±4</code> is interesting because just off the top of my head, there's no way around 7-8 instructions for the <code>rdpmc</code> measurement (load the counter index, <code>rdpmc</code>, combine two halves into an <code>u64</code>, sext from 48 to 64 bits, subtract the start count)</p>",
        "id": 206874375,
        "sender_full_name": "eddyb",
        "timestamp": 1597354253
    },
    {
        "content": "<p>so this finally <em>feels</em> right</p>",
        "id": 206874403,
        "sender_full_name": "eddyb",
        "timestamp": 1597354272
    },
    {
        "content": "<p>uhh more weirdness: why is <code>Instant::elapsed</code> <em>twice as fast</em> (<code>367 ±4</code> -&gt; <code>189 ±3</code>) now? maybe this isn't from debug assertions, but disabling incremental</p>",
        "id": 206875806,
        "sender_full_name": "eddyb",
        "timestamp": 1597355217
    },
    {
        "content": "<p>oh no. oh dear. could this code stop playing tricks on me</p>",
        "id": 206883889,
        "sender_full_name": "eddyb",
        "timestamp": 1597361520
    },
    {
        "content": "<p>I've somehow gone from \"weirdly large cost from code that doesn't even run\" to \"adding extra code can make it run less instructions\"(??)</p>",
        "id": 206883979,
        "sender_full_name": "eddyb",
        "timestamp": 1597361585
    },
    {
        "content": "<p>I might need to make this <code>#[inline(always)]</code> instead of <code>#[inline]</code> :/</p>",
        "id": 206884071,
        "sender_full_name": "eddyb",
        "timestamp": 1597361691
    },
    {
        "content": "<p>nope, <code>#[inline(never)]</code> was what made it sensible</p>",
        "id": 206891114,
        "sender_full_name": "eddyb",
        "timestamp": 1597369718
    },
    {
        "content": "<p>except <code>#[inline(never)]</code> makes a different thing cheaper than something it shouldn't be cheaper than... (so the most realistic configuration ends up as <code>-1 ±3</code> instead of <code>14 ±2</code>)</p>",
        "id": 206897565,
        "sender_full_name": "eddyb",
        "timestamp": 1597379812
    },
    {
        "content": "<p>one of these days I'll learn not to pick a fight with LLVM</p>",
        "id": 206897572,
        "sender_full_name": "eddyb",
        "timestamp": 1597379828
    },
    {
        "content": "<p>I really just want the table here again but w/o the costs of debug-assertions or incremental, and I keep coming up with numbers that don't match that ordering <a href=\"https://gist.github.com/eddyb/7a0a55411441142765db6cfa41504e50#gistcomment-3399834\">https://gist.github.com/eddyb/7a0a55411441142765db6cfa41504e50#gistcomment-3399834</a></p>",
        "id": 206899615,
        "sender_full_name": "eddyb",
        "timestamp": 1597383013
    },
    {
        "content": "<p>oh, <code>black_box(0)</code> is like 4-5 instructions. and I'm working at a scale at which that matters. I might have to make my own, cheaper, <code>black_box(0)</code> using inline assembly</p>",
        "id": 206900066,
        "sender_full_name": "eddyb",
        "timestamp": 1597383643
    },
    {
        "content": "<p>maybe this helps <a href=\"https://godbolt.org/z/an8avP\">https://godbolt.org/z/an8avP</a></p>",
        "id": 206900465,
        "sender_full_name": "eddyb",
        "timestamp": 1597384135
    },
    {
        "content": "<p>actually, hmm, this is pretty neat (limited to things that fit in a register, sadly) <a href=\"https://godbolt.org/z/eP3ocG\">https://godbolt.org/z/eP3ocG</a></p>",
        "id": 206900663,
        "sender_full_name": "eddyb",
        "timestamp": 1597384418
    },
    {
        "content": "<p>is it possible you could just pass a ptr to the asm call so it works for anything?</p>",
        "id": 206900829,
        "sender_full_name": "jknodt",
        "timestamp": 1597384662
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"326189\">@jknodt</span> that's what <code>std::hint::black_box</code> does and exactly what that snippet shows I can avoid</p>",
        "id": 206900879,
        "sender_full_name": "eddyb",
        "timestamp": 1597384687
    },
    {
        "content": "<p>ah oops, I was unaware</p>",
        "id": 206900890,
        "sender_full_name": "jknodt",
        "timestamp": 1597384717
    },
    {
        "content": "<p>I am trying to reduce as much as possible the overhead of <code>black_box</code> because I'm counting the instructions and when you have literally 4-8 instructions, every instruction <del>counts</del> matters</p>",
        "id": 206900919,
        "sender_full_name": "eddyb",
        "timestamp": 1597384772
    },
    {
        "content": "<p>the only reason I'm using it is so that LLVM doesn't optimize out so much it makes it impossible to determine any other overheads</p>",
        "id": 206900928,
        "sender_full_name": "eddyb",
        "timestamp": 1597384790
    },
    {
        "content": "<p>oh hey it is measurably cheaper :D (by about 3 instructions)</p>",
        "id": 206903558,
        "sender_full_name": "eddyb",
        "timestamp": 1597388199
    },
    {
        "content": "<p>left a note here for anyone who might find this useful <a href=\"https://github.com/rust-lang/rust/issues/64102#issuecomment-673921803\">https://github.com/rust-lang/rust/issues/64102#issuecomment-673921803</a></p>",
        "id": 206903719,
        "sender_full_name": "eddyb",
        "timestamp": 1597388408
    },
    {
        "content": "<p>phew, more code -&gt; more instructions, not less, finally</p>",
        "id": 206905247,
        "sender_full_name": "eddyb",
        "timestamp": 1597390257
    },
    {
        "content": "<p><code>5 ±3</code> instructions to sample only <code>rdpmc</code>, <code>17 ±3</code> with the \"dynamically dead time fallback\", I think that's fine</p>",
        "id": 206906876,
        "sender_full_name": "eddyb",
        "timestamp": 1597392033
    },
    {
        "content": "<p>sampling instructions on top of time (but not using them) is an increase from <code>180 ±4</code> to <code>184 ±4</code>, so I'd be happy to say it's 4-8 instructions</p>",
        "id": 206906964,
        "sender_full_name": "eddyb",
        "timestamp": 1597392126
    },
    {
        "content": "<p>the important thing is that <code>17</code> is 10 times smaller than <code>180</code>, <em>not</em> half</p>",
        "id": 206906985,
        "sender_full_name": "eddyb",
        "timestamp": 1597392158
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/UYdafm3wo0r6JsxF7Q5xjBvn/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/UYdafm3wo0r6JsxF7Q5xjBvn/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/UYdafm3wo0r6JsxF7Q5xjBvn/image.png\"></a></div>",
        "id": 206907408,
        "sender_full_name": "eddyb",
        "timestamp": 1597392694
    },
    {
        "content": "<p>I should've been doing this from the start, it's so much easier to duplicate any analysis for a similar shaped dataset, than all of the stuff I was doing by hand</p>",
        "id": 206907482,
        "sender_full_name": "eddyb",
        "timestamp": 1597392744
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> huh I just checked with tiny test programs and <code>setarch $(uname -m) -R</code> actually works, for both static data and heap pointers o_O</p>",
        "id": 206908626,
        "sender_full_name": "eddyb",
        "timestamp": 1597393991
    },
    {
        "content": "<p>this means I don't actually know what's causing all the noise during rustc runs</p>",
        "id": 206908648,
        "sender_full_name": "eddyb",
        "timestamp": 1597394022
    },
    {
        "content": "<p>ugh could it be that I was going through the <code>rustup</code> wrapper for <code>rustc</code>? I didn't think of that</p>",
        "id": 206908722,
        "sender_full_name": "eddyb",
        "timestamp": 1597394093
    },
    {
        "content": "<p>oh come on</p>",
        "id": 206908752,
        "sender_full_name": "eddyb",
        "timestamp": 1597394132
    },
    {
        "content": "<p>I can already tell it's working</p>",
        "id": 206908754,
        "sender_full_name": "eddyb",
        "timestamp": 1597394137
    },
    {
        "content": "<p>it's not exactly the same value every time but the closest two runs are <em>49</em> instructions apart (out of <em>43 billion</em>)</p>",
        "id": 206908808,
        "sender_full_name": "eddyb",
        "timestamp": 1597394181
    },
    {
        "content": "<p>at least I've stopped gathering 100 each, so I wasn't wasting more than a few minutes (and it's not perfectly identical every run so it's not like I could've cut it down to 1 value)</p>",
        "id": 206908901,
        "sender_full_name": "eddyb",
        "timestamp": 1597394294
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> apologies for all of the information that seemed final at the time but now I have to redo it all one last time, with ASLR disabled <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 206909148,
        "sender_full_name": "eddyb",
        "timestamp": 1597394579
    },
    {
        "content": "<p>just because of how much of a difference it makes</p>",
        "id": 206909162,
        "sender_full_name": "eddyb",
        "timestamp": 1597394598
    },
    {
        "content": "<p>I'm probably throwing away the debug-assertions+incremental data. it's not relevant to builds we want to measure perf on, and I didn't have ASLR disabled, and I'm not redoing <em>those</em></p>",
        "id": 206909233,
        "sender_full_name": "eddyb",
        "timestamp": 1597394647
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> without ASLR the <code>rdpmc</code> overhead seems to be <em>exactly</em> 4 instructions, and in the \"dynamically picking what to sample\" configuration, 18 instructions. the variance is small enough that my conservative math results in \"±0\"</p>",
        "id": 206910473,
        "sender_full_name": "eddyb",
        "timestamp": 1597395958
    },
    {
        "content": "<p>lol I think I'm seeing <a href=\"https://github.com/rust-lang/rust/blob/43bec40138bab10c08ac916bff2f2f81b2b70669/library/std/src/sys/unix/time.rs#L68-L71\">https://github.com/rust-lang/rust/blob/43bec40138bab10c08ac916bff2f2f81b2b70669/library/std/src/sys/unix/time.rs#L68-L71</a> in the data</p>",
        "id": 206913252,
        "sender_full_name": "eddyb",
        "timestamp": 1597398443
    },
    {
        "content": "<p>when time is being sampled, there's variance in the data on the order of the number of samples (1.7 million)</p>",
        "id": 206913335,
        "sender_full_name": "eddyb",
        "timestamp": 1597398511
    },
    {
        "content": "<p>presumably that codepath adds 2 extra instructions or so</p>",
        "id": 206913360,
        "sender_full_name": "eddyb",
        "timestamp": 1597398538
    },
    {
        "content": "<p>the difference ASLR makes: <a href=\"/user_uploads/4715/PGbUXHz3cDMnb_GNB5xZmExO/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/PGbUXHz3cDMnb_GNB5xZmExO/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/PGbUXHz3cDMnb_GNB5xZmExO/image.png\"></a></div>",
        "id": 206913593,
        "sender_full_name": "eddyb",
        "timestamp": 1597398724
    },
    {
        "content": "<p>hmm, actually, are CPU clock cycles measured by <code>rdtsc</code>, not <code>rdpmc</code>? that would make it harder for me to directly use it as another \"hardware counter\" to make the code more realistic - although, at the same time, maybe I can just go and implement <code>rdtsc</code> lol</p>",
        "id": 206955630,
        "sender_full_name": "eddyb",
        "timestamp": 1597426394
    },
    {
        "content": "<p>hmm, 6 instructions after and 1 before <a href=\"https://godbolt.org/z/s4KGMf\">https://godbolt.org/z/s4KGMf</a></p>",
        "id": 206961859,
        "sender_full_name": "eddyb",
        "timestamp": 1597429973
    },
    {
        "content": "<p>a bit odd that they don't show up directly in my measurements. I guess my estimate of 8 was right all along and there's just stuff I can't account for in the codegen</p>",
        "id": 206961919,
        "sender_full_name": "eddyb",
        "timestamp": 1597430005
    },
    {
        "content": "<p>if you replace the <code>i64</code> with <code>u64</code> you get a clever use of <code>movzx</code> instead</p>",
        "id": 206962114,
        "sender_full_name": "eddyb",
        "timestamp": 1597430103
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/206913252\">said</a>:</p>\n<blockquote>\n<p>lol I think I'm seeing <a href=\"https://github.com/rust-lang/rust/blob/43bec40138bab10c08ac916bff2f2f81b2b70669/library/std/src/sys/unix/time.rs#L68-L71\">https://github.com/rust-lang/rust/blob/43bec40138bab10c08ac916bff2f2f81b2b70669/library/std/src/sys/unix/time.rs#L68-L71</a> in the data</p>\n</blockquote>\n<p>oops, no, it's <a href=\"https://github.com/rust-lang/rust/blob/43bec40138bab10c08ac916bff2f2f81b2b70669/library/std/src/sys/unix/time.rs#L23-L33\">https://github.com/rust-lang/rust/blob/43bec40138bab10c08ac916bff2f2f81b2b70669/library/std/src/sys/unix/time.rs#L23-L33</a></p>",
        "id": 206965498,
        "sender_full_name": "eddyb",
        "timestamp": 1597431897
    },
    {
        "content": "<p>I am being informed (by <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span>) that the kernel stores <code>u64</code> nanoseconds, converts that into seconds + nanoseconds to be \"helpful\" then we convert that back... so that's a division by 10⁹ followed by a multiplication by 10⁹</p>",
        "id": 206966739,
        "sender_full_name": "eddyb",
        "timestamp": 1597432585
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> does rustc-perf currently track the variance in the <code>perf stat</code> values it averages or w/e?</p>",
        "id": 206967865,
        "sender_full_name": "eddyb",
        "timestamp": 1597433184
    },
    {
        "content": "<p>also, how do you disable ASLR? is it system-wide?</p>",
        "id": 206967880,
        "sender_full_name": "eddyb",
        "timestamp": 1597433193
    },
    {
        "content": "<p>I'm worried some of our own data is less useful merely because <code>rustc-perf</code> itself doesn't disable ASLR... although no, it doesn't actually seem to be that way now that I think about it again, or at least it's not a big part of it (for time data, anyway)</p>",
        "id": 206968032,
        "sender_full_name": "eddyb",
        "timestamp": 1597433270
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> system wide, but we can do local too if that helps</p>",
        "id": 206968093,
        "sender_full_name": "simulacrum",
        "timestamp": 1597433285
    },
    {
        "content": "<p>the local one might just always work</p>",
        "id": 206968122,
        "sender_full_name": "eddyb",
        "timestamp": 1597433297
    },
    {
        "content": "<p><code>setarch $(uname -m) -R ./build/x86_64-unknown-linux-gnu/stage1/bin/rustc ...</code> is what I'm doing</p>",
        "id": 206968145,
        "sender_full_name": "eddyb",
        "timestamp": 1597433314
    },
    {
        "content": "<p>I didn't want to use sudo if we can avoid it within perf's scripts</p>",
        "id": 206968159,
        "sender_full_name": "simulacrum",
        "timestamp": 1597433324
    },
    {
        "content": "<p>doesn't require it</p>",
        "id": 206968169,
        "sender_full_name": "eddyb",
        "timestamp": 1597433331
    },
    {
        "content": "<p>(we don't have root access on <a href=\"http://build.lyken.rs\">build.lyken.rs</a>)</p>",
        "id": 206968188,
        "sender_full_name": "eddyb",
        "timestamp": 1597433345
    },
    {
        "content": "<p>I also wonder, e.g. if <span class=\"user-mention\" data-user-id=\"120989\">@njn</span> was disabling ASLR when profiling. the difference is big enough IMO to be significant, and with ASLR disabled rustc behaves much better</p>",
        "id": 206968302,
        "sender_full_name": "eddyb",
        "timestamp": 1597433408
    },
    {
        "content": "<p>Ah okay, then sounds great n</p>",
        "id": 206968314,
        "sender_full_name": "simulacrum",
        "timestamp": 1597433417
    },
    {
        "content": "<p>We do not track variance but I have raw data for each run we do</p>",
        "id": 206968337,
        "sender_full_name": "simulacrum",
        "timestamp": 1597433439
    },
    {
        "content": "<p>So we could compute it</p>",
        "id": 206968350,
        "sender_full_name": "simulacrum",
        "timestamp": 1597433445
    },
    {
        "content": "<p>there's still ±8k (in the 43B total) but I suspect it might not show up on most queries, so it might be possible to find where that comes from (it might just be some IO?)</p>",
        "id": 206968378,
        "sender_full_name": "eddyb",
        "timestamp": 1597433464
    },
    {
        "content": "<p>Maybe! I don't know how to isolate variance on these scales though</p>",
        "id": 206968414,
        "sender_full_name": "simulacrum",
        "timestamp": 1597433490
    },
    {
        "content": "<p>what I've been doing is just <code>${(max+min)/2} ±${(max-min)/2}</code> which is probably not the best statistical approach lol</p>",
        "id": 206968511,
        "sender_full_name": "eddyb",
        "timestamp": 1597433535
    },
    {
        "content": "<p>that is, I'm ignoring the probability distribution within the <code>min..=max</code> range</p>",
        "id": 206968563,
        "sender_full_name": "eddyb",
        "timestamp": 1597433575
    },
    {
        "content": "<p>but it does seem to be good enough to tell me how much it jumps around</p>",
        "id": 206968590,
        "sender_full_name": "eddyb",
        "timestamp": 1597433603
    },
    {
        "content": "<p>incredible, moving the <code>- 1</code> here to after the other subtraction is required for LLVM to make this branchless &lt;<a href=\"https://github.com/rust-lang/rust/blob/43bec40138bab10c08ac916bff2f2f81b2b70669/library/std/src/sys/unix/time.rs#L30\">https://github.com/rust-lang/rust/blob/43bec40138bab10c08ac916bff2f2f81b2b70669/library/std/src/sys/unix/time.rs#L30</a>&gt;</p>",
        "id": 206986591,
        "sender_full_name": "eddyb",
        "timestamp": 1597442198
    },
    {
        "content": "<p>(the other requirement is deduplicating the <code>Duration::new</code> call which is something else LLVM should be able to do itself <em>sigh</em>)</p>",
        "id": 206986613,
        "sender_full_name": "eddyb",
        "timestamp": 1597442219
    },
    {
        "content": "<p>there's other optimizations <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> wants to make but I think I can get rid of the instruction variance just by triggering the right LLVM optimizations with minimal changes, <em>and land</em> those changes</p>",
        "id": 206986730,
        "sender_full_name": "eddyb",
        "timestamp": 1597442298
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/206968302\">said</a>:</p>\n<blockquote>\n<p>I also wonder, e.g. if <span class=\"user-mention silent\" data-user-id=\"120989\">njn</span> was disabling ASLR when profiling.</p>\n</blockquote>\n<p>nope</p>",
        "id": 206990719,
        "sender_full_name": "njn",
        "timestamp": 1597445350
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> first PR up <a href=\"https://github.com/rust-lang/rust/pull/75545\">https://github.com/rust-lang/rust/pull/75545</a></p>",
        "id": 206994888,
        "sender_full_name": "eddyb",
        "timestamp": 1597449889
    },
    {
        "content": "<p>(don't get too excited though, it's the <code>Instant::elapsed</code> non-deterministic instruction count thing :P)</p>",
        "id": 206994912,
        "sender_full_name": "eddyb",
        "timestamp": 1597449915
    },
    {
        "content": "<p>this is what it allows me to get: <a href=\"/user_uploads/4715/43jpVXTjepLH60d68OTjrLAu/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/43jpVXTjepLH60d68OTjrLAu/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/43jpVXTjepLH60d68OTjrLAu/image.png\"></a></div>",
        "id": 206994988,
        "sender_full_name": "eddyb",
        "timestamp": 1597449989
    },
    {
        "content": "<p>all the \"total instruction count\" noise is now like 100-200x smaller than the number of <code>measureme</code> events</p>",
        "id": 206995021,
        "sender_full_name": "eddyb",
        "timestamp": 1597450056
    },
    {
        "content": "<p>mostly thanks to disabling ASLR</p>",
        "id": 206995030,
        "sender_full_name": "eddyb",
        "timestamp": 1597450075
    },
    {
        "content": "<p>with some dedication it might be possible to reduce it further</p>",
        "id": 206995093,
        "sender_full_name": "eddyb",
        "timestamp": 1597450106
    },
    {
        "content": "<p>hopefully that is the last time I look at time</p>",
        "id": 206995131,
        "sender_full_name": "eddyb",
        "timestamp": 1597450156
    },
    {
        "content": "<p>this UI is not perfect, but it kinda works :D <a href=\"https://gist.github.com/eddyb/7a0a55411441142765db6cfa41504e50/revisions?short_path=276f278#diff-276f27882e3d5a545404f37b49cbbb4c\">https://gist.github.com/eddyb/7a0a55411441142765db6cfa41504e50/revisions?short_path=276f278#diff-276f27882e3d5a545404f37b49cbbb4c</a></p>",
        "id": 207023378,
        "sender_full_name": "eddyb",
        "timestamp": 1597500310
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> final version, thanks to disabling ASLR I should be able to keep that realistic overhead of 18 instructions no matter what other things I change, I feel <a href=\"https://gist.github.com/eddyb/7a0a55411441142765db6cfa41504e50\">https://gist.github.com/eddyb/7a0a55411441142765db6cfa41504e50</a></p>",
        "id": 207024754,
        "sender_full_name": "eddyb",
        "timestamp": 1597502666
    },
    {
        "content": "<p>the plots are... effectively 1D now :P</p>",
        "id": 207024758,
        "sender_full_name": "eddyb",
        "timestamp": 1597502682
    },
    {
        "content": "<p>fwiw the panic thing might be fixable with a catch_unwind that, on unwinding, hits hint::unreachable_unchecked</p>",
        "id": 207025008,
        "sender_full_name": "simulacrum",
        "timestamp": 1597503124
    },
    {
        "content": "<p>but maybe we shouldn't do that :)</p>",
        "id": 207025010,
        "sender_full_name": "simulacrum",
        "timestamp": 1597503129
    },
    {
        "content": "<p>I doubt it's that simple</p>",
        "id": 207025015,
        "sender_full_name": "eddyb",
        "timestamp": 1597503162
    },
    {
        "content": "<p>perhaps not</p>",
        "id": 207025022,
        "sender_full_name": "simulacrum",
        "timestamp": 1597503190
    },
    {
        "content": "<p>panicking shouldn't cause instructions to run in the happy path</p>",
        "id": 207025023,
        "sender_full_name": "eddyb",
        "timestamp": 1597503190
    },
    {
        "content": "<p>overheads are definitely more than low enough</p>",
        "id": 207025033,
        "sender_full_name": "simulacrum",
        "timestamp": 1597503217
    },
    {
        "content": "<p>yeah I'm happy with it being 18 and not 180 :P</p>",
        "id": 207025035,
        "sender_full_name": "eddyb",
        "timestamp": 1597503238
    },
    {
        "content": "<p>this is what I was working with before I realized how much of an impact my debug-assertions+incremental configuration was hurting things <a href=\"https://gist.github.com/eddyb/7a0a55411441142765db6cfa41504e50/78f97038d768aa355b3767785224a946cb919ef1\">https://gist.github.com/eddyb/7a0a55411441142765db6cfa41504e50/78f97038d768aa355b3767785224a946cb919ef1</a></p>",
        "id": 207025083,
        "sender_full_name": "eddyb",
        "timestamp": 1597503298
    },
    {
        "content": "<p>presumably with ASLR disabled that would just say 180 or 181 :P</p>",
        "id": 207025094,
        "sender_full_name": "eddyb",
        "timestamp": 1597503324
    },
    {
        "content": "<p>but I'm not checking</p>",
        "id": 207025102,
        "sender_full_name": "eddyb",
        "timestamp": 1597503337
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> anyway the good news is that, assuming your disabling of ASLR works, perf.r-l.o will require no changes to get the low-noise  benefits</p>",
        "id": 207025208,
        "sender_full_name": "eddyb",
        "timestamp": 1597503485
    },
    {
        "content": "<p>we did confirm that it disables ASLR by checking that a pointer is at the same location when running, iirc, but didn't do more than that</p>",
        "id": 207025212,
        "sender_full_name": "simulacrum",
        "timestamp": 1597503521
    },
    {
        "content": "<p>and it should be on the cheaper end thanks to the builds being nightly ones</p>",
        "id": 207025214,
        "sender_full_name": "eddyb",
        "timestamp": 1597503523
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> we should actually be able to tell if you render the variance</p>",
        "id": 207025221,
        "sender_full_name": "eddyb",
        "timestamp": 1597503549
    },
    {
        "content": "<p>Wouldn't changing code sizes have an effect similar to ASLR?</p>",
        "id": 207025222,
        "sender_full_name": "bjorn3",
        "timestamp": 1597503550
    },
    {
        "content": "<p>what do you mean by \"code sizes\"?</p>",
        "id": 207025224,
        "sender_full_name": "eddyb",
        "timestamp": 1597503565
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> hm so I'm not really opposed to rendering variance but historically have not done so because we have like at most 3 data points per run</p>",
        "id": 207025225,
        "sender_full_name": "simulacrum",
        "timestamp": 1597503576
    },
    {
        "content": "<p>I wish the data was accessible some other way :(</p>",
        "id": 207025231,
        "sender_full_name": "eddyb",
        "timestamp": 1597503591
    },
    {
        "content": "<p>If the size of the <code>.text</code> or <code>.data</code> sections in the rustc executable changes.</p>",
        "id": 207025233,
        "sender_full_name": "bjorn3",
        "timestamp": 1597503592
    },
    {
        "content": "<p>ah sure but I'm interested in variance within one <code>rustc</code> build, at least for now</p>",
        "id": 207025281,
        "sender_full_name": "eddyb",
        "timestamp": 1597503620
    },
    {
        "content": "<p>although that's a good point when it comes to looking at differences between two rustc versions</p>",
        "id": 207025304,
        "sender_full_name": "eddyb",
        "timestamp": 1597503659
    },
    {
        "content": "<p>data is accessible via sqlite database dumps, I can prepare one that's recent and give it you if you want</p>",
        "id": 207025317,
        "sender_full_name": "simulacrum",
        "timestamp": 1597503686
    },
    {
        "content": "<p>that's what I want to avoid :P</p>",
        "id": 207025324,
        "sender_full_name": "eddyb",
        "timestamp": 1597503695
    },
    {
        "content": "<p>how would you want the data?</p>",
        "id": 207025340,
        "sender_full_name": "simulacrum",
        "timestamp": 1597503706
    },
    {
        "content": "<p>I have the files around so I could extract it with jq myself, it's just... effort to be able to <em>see</em> the differences. but I guess I can pick, say, hello world</p>",
        "id": 207025383,
        "sender_full_name": "eddyb",
        "timestamp": 1597503740
    },
    {
        "content": "<p>I've wanted to do like high/low bands on the graph page for each data point</p>",
        "id": 207025388,
        "sender_full_name": "simulacrum",
        "timestamp": 1597503767
    },
    {
        "content": "<p>I guess we could</p>",
        "id": 207025389,
        "sender_full_name": "simulacrum",
        "timestamp": 1597503770
    },
    {
        "content": "<p>ohhh that'd be nice</p>",
        "id": 207025392,
        "sender_full_name": "eddyb",
        "timestamp": 1597503779
    },
    {
        "content": "<p>probably needs me to pull <a href=\"https://github.com/rust-lang/rustc-perf/pull/744\">https://github.com/rust-lang/rustc-perf/pull/744</a> over the edge</p>",
        "id": 207025403,
        "sender_full_name": "simulacrum",
        "timestamp": 1597503800
    },
    {
        "content": "<p>btw what is perf currently using?</p>",
        "id": 207025538,
        "sender_full_name": "eddyb",
        "timestamp": 1597503967
    },
    {
        "content": "<p>for?</p>",
        "id": 207025539,
        "sender_full_name": "simulacrum",
        "timestamp": 1597503973
    },
    {
        "content": "<p>for plotting</p>",
        "id": 207025541,
        "sender_full_name": "eddyb",
        "timestamp": 1597503979
    },
    {
        "content": "<p>highcharts</p>",
        "id": 207025546,
        "sender_full_name": "simulacrum",
        "timestamp": 1597503991
    },
    {
        "content": "<p>I've stuck with <a href=\"http://plot.ly\">plot.ly</a> for my own personal use and it seems pretty nice but idk how easy it would be to integrate (or how fast etc.)</p>",
        "id": 207025551,
        "sender_full_name": "eddyb",
        "timestamp": 1597504008
    },
    {
        "content": "<p>(it's just very easy to throw some data at it and play around with the settings, in its \"chart studio\")</p>",
        "id": 207025556,
        "sender_full_name": "eddyb",
        "timestamp": 1597504025
    },
    {
        "content": "<p>oh heh that PR lists <a href=\"https://github.com/lampepfl/bench/pull/418\">https://github.com/lampepfl/bench/pull/418</a> as mentioning it</p>",
        "id": 207025561,
        "sender_full_name": "eddyb",
        "timestamp": 1597504050
    },
    {
        "content": "<p>sounds like uPlot is faster than <a href=\"http://plot.ly\">plot.ly</a></p>",
        "id": 207025601,
        "sender_full_name": "eddyb",
        "timestamp": 1597504087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <code>snzip -cd times/commit-d839ad4507180aa47a451a273cb3f1a1ba653c80-x86_64-unknown-linux-gnu.json.sz | jq '.benchmarks.helloworld.Ok.runs[] | select(.check == true) | .stats.stats[4]'</code></p>",
        "id": 207026003,
        "sender_full_name": "eddyb",
        "timestamp": 1597504767
    },
    {
        "content": "<p>uhh, that's <code>111393821 ±12833352</code>, that's worse than I was getting <em>with</em> ASLR</p>",
        "id": 207026067,
        "sender_full_name": "eddyb",
        "timestamp": 1597504843
    },
    {
        "content": "<p>which cache is that?</p>",
        "id": 207026075,
        "sender_full_name": "simulacrum",
        "timestamp": 1597504866
    },
    {
        "content": "<p>it's check mode</p>",
        "id": 207026079,
        "sender_full_name": "eddyb",
        "timestamp": 1597504874
    },
    {
        "content": "<p>no, like, full build?</p>",
        "id": 207026081,
        "sender_full_name": "simulacrum",
        "timestamp": 1597504879
    },
    {
        "content": "<p>oooh sorry</p>",
        "id": 207026082,
        "sender_full_name": "eddyb",
        "timestamp": 1597504879
    },
    {
        "content": "<p>wait what why are there 4 values total</p>",
        "id": 207026085,
        "sender_full_name": "eddyb",
        "timestamp": 1597504891
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> are you sure the data is kept?</p>",
        "id": 207026092,
        "sender_full_name": "eddyb",
        "timestamp": 1597504914
    },
    {
        "content": "<p>only as of recently</p>",
        "id": 207026134,
        "sender_full_name": "simulacrum",
        "timestamp": 1597504932
    },
    {
        "content": "<p>not in the JSON format (which has not been used in like 2 months?)</p>",
        "id": 207026137,
        "sender_full_name": "simulacrum",
        "timestamp": 1597504944
    },
    {
        "content": "<p>aaaaaaah. so not in the old rustc-timing <code>json.sz</code> files</p>",
        "id": 207026138,
        "sender_full_name": "eddyb",
        "timestamp": 1597504947
    },
    {
        "content": "<p>so I just have no access to it. hmpf.</p>",
        "id": 207026144,
        "sender_full_name": "eddyb",
        "timestamp": 1597504967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> anyway just get me some helloworld-check/full values</p>",
        "id": 207026171,
        "sender_full_name": "eddyb",
        "timestamp": 1597504993
    },
    {
        "content": "<p>yeah working on it</p>",
        "id": 207026174,
        "sender_full_name": "simulacrum",
        "timestamp": 1597504998
    },
    {
        "content": "<p>all I'm doing is <code>${(max+min)/2} ±${(max-min)/2}</code>, although for 3 values there's not like you have a lot of options huh</p>",
        "id": 207026219,
        "sender_full_name": "eddyb",
        "timestamp": 1597505050
    },
    {
        "content": "<p>just sorting the values and looking at them will provide just as much insight</p>",
        "id": 207026226,
        "sender_full_name": "eddyb",
        "timestamp": 1597505067
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code> {103307800,101652511,101652367}\n {103300735,101645649,101645480}\n {102959339,101326806,101312198}\n {102960157,101302524,101314247}\n {102965663,101308304,101319839}\n {102965387,101307539,101307578}\n {102968902,101311513,101310930}\n {102967894,101309011,101309172}\n {102965638,101318501,101306774}\n {102976765,101317611,101317512}\n {102493279,100843371,100843371}\n {102496789,100847180,100847154}\n {102492400,100854924,100842823}\n {102492147,100842367,100842369}\n {102488342,100838672,100837924}\n {102488535,100838863,100838846}\n {102750537,101097301,101097162}\n {102758805,101116076,101104402}\n {102751384,101097248,101108144}\n {102505727,100848453,100847845}\n {102495957,100839075,100839826}\n {102503933,100859000,100847284}\n {102496033,100839284,100839285}\n {102499549,100844540,100843935}\n {102498828,100860489,100842486}\n {102504633,100848460,100848496}\n {102760905,101105154,101110976}\n {102548360,100900308,100899683}\n {103315765,101671339,101671371}\n {103317990,101674791,101674792}\n {103290474,101651630,101651444}\n {103294063,101654920,101654943}\n {103533896,101902695,101893341}\n {103536330,101897005,101897234}\n</code></pre></div>",
        "id": 207026234,
        "sender_full_name": "simulacrum",
        "timestamp": 1597505089
    },
    {
        "content": "<p>I guess the first one is self-profile overhead</p>",
        "id": 207026239,
        "sender_full_name": "simulacrum",
        "timestamp": 1597505105
    },
    {
        "content": "<p>so ignore that</p>",
        "id": 207026241,
        "sender_full_name": "simulacrum",
        "timestamp": 1597505108
    },
    {
        "content": "<p>we only have 2</p>",
        "id": 207026242,
        "sender_full_name": "simulacrum",
        "timestamp": 1597505111
    },
    {
        "content": "<p>uhhh thanks I guess</p>",
        "id": 207026878,
        "sender_full_name": "eddyb",
        "timestamp": 1597506149
    },
    {
        "content": "<p>but yeah looks like ASLR is off</p>",
        "id": 207026882,
        "sender_full_name": "eddyb",
        "timestamp": 1597506168
    },
    {
        "content": "<p>just eyeballing it</p>",
        "id": 207026885,
        "sender_full_name": "eddyb",
        "timestamp": 1597506184
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> wait, do we average the last 2, or all 3, when displaying the values?</p>",
        "id": 207026942,
        "sender_full_name": "eddyb",
        "timestamp": 1597506262
    },
    {
        "content": "<p>We take minimum</p>",
        "id": 207026951,
        "sender_full_name": "simulacrum",
        "timestamp": 1597506277
    },
    {
        "content": "<p>oooh</p>",
        "id": 207026953,
        "sender_full_name": "eddyb",
        "timestamp": 1597506282
    },
    {
        "content": "<p>We should add the setarch to perf directly</p>",
        "id": 207026968,
        "sender_full_name": "simulacrum",
        "timestamp": 1597506313
    },
    {
        "content": "<p>yeah that would've prevented e.g. me gathering data (before any of this <code>rdpmc</code> stuff) going back all the way to february, with ASLR enabled. thankfully, it's not too bad and it's mostly there to inform us of where the interesting regressions/improvements are</p>",
        "id": 207027040,
        "sender_full_name": "eddyb",
        "timestamp": 1597506446
    },
    {
        "content": "<p>hmm the \"18 instructions\" figure jumps down to 16 if I compile rustc in a different directory. but I'm guessing the baseline would also be 2 instructions lower, so I just have to use one directory for all measurements I compare together lol</p>",
        "id": 207027226,
        "sender_full_name": "eddyb",
        "timestamp": 1597506729
    },
    {
        "content": "<p>pretty much what <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> was talking about wrt disabling ASLR not being enough</p>",
        "id": 207027229,
        "sender_full_name": "eddyb",
        "timestamp": 1597506756
    },
    {
        "content": "<p>something something allocate arenas at fixed addresses when a flag is passed</p>",
        "id": 207027234,
        "sender_full_name": "eddyb",
        "timestamp": 1597506780
    },
    {
        "content": "<p>I wonder if we shouldn't be using random tmp directories for benchmarking either, and instead going with some well known name</p>",
        "id": 207027297,
        "sender_full_name": "simulacrum",
        "timestamp": 1597506908
    },
    {
        "content": "<p>hopefully that doesn't affect my measurements of overhead, too significantly. oh yeah, looking at the data with ASLR on allows me to confirm that the data with ASLR off isn't complete nonsense</p>",
        "id": 207027302,
        "sender_full_name": "eddyb",
        "timestamp": 1597506924
    },
    {
        "content": "<p>so hmm, looking at \"variance\" (<code>(max-min) / 2</code>) in the average self time <em>per</em> invocation (i.e. of <code>self_time / invocation_count</code>, not doing anything clever with individual events), these are all above ±1000:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">{</span>\n  <span class=\"nt\">&quot;wf_checking&quot;</span><span class=\"p\">:</span> <span class=\"mi\">74755</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;generate_crate_metadata&quot;</span><span class=\"p\">:</span> <span class=\"mf\">44780.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;typeck_item_bodies&quot;</span><span class=\"p\">:</span> <span class=\"mi\">28286</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;match_checking&quot;</span><span class=\"p\">:</span> <span class=\"mi\">14127</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;death_checking&quot;</span><span class=\"p\">:</span> <span class=\"mi\">13407</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;analysis&quot;</span><span class=\"p\">:</span> <span class=\"mf\">8695.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;type_check_crate&quot;</span><span class=\"p\">:</span> <span class=\"mf\">7583.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;crate_inherent_impls_overlap_check&quot;</span><span class=\"p\">:</span> <span class=\"mf\">5398.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;MIR_effect_checking&quot;</span><span class=\"p\">:</span> <span class=\"mi\">5248</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;crate_lints&quot;</span><span class=\"p\">:</span> <span class=\"mf\">5192.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;expand_crate&quot;</span><span class=\"p\">:</span> <span class=\"mf\">3651.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;MIR_borrow_checking&quot;</span><span class=\"p\">:</span> <span class=\"mf\">1960.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;check_private_in_public&quot;</span><span class=\"p\">:</span> <span class=\"mi\">1853</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;inferred_outlives_crate&quot;</span><span class=\"p\">:</span> <span class=\"mf\">1703.5</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 207027972,
        "sender_full_name": "eddyb",
        "timestamp": 1597508012
    },
    {
        "content": "<p>and I don't actually know why <em>these</em> would be affected</p>",
        "id": 207028017,
        "sender_full_name": "eddyb",
        "timestamp": 1597508053
    },
    {
        "content": "<p>the average across all queries is <code>±1018</code> instructions, but a lot of it is in queries that have no business being non-deterministic. for comparison, the same arbitrary metric is <code>0.878ms</code> for time, which is roughly 4000x noisier (but this isn't really indicative of much, even if confirms the general trend)</p>",
        "id": 207028319,
        "sender_full_name": "eddyb",
        "timestamp": 1597508550
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> ahh, adding <code>mfence</code> before and after <code>rdpmc</code> brings the <code>±1018</code> \"average query variance\" down to <code>±53</code> so 1. instruction serialization matters 2. <code>mfence</code> works (at least on AMD hardware)</p>",
        "id": 207029561,
        "sender_full_name": "eddyb",
        "timestamp": 1597510373
    },
    {
        "content": "<p>Seems worthwhile to include if it's not a big perf hit</p>",
        "id": 207029623,
        "sender_full_name": "simulacrum",
        "timestamp": 1597510443
    },
    {
        "content": "<p>Hm does that imply.... 1000+ instructions in flight? I forget what mfence does exactly</p>",
        "id": 207029638,
        "sender_full_name": "simulacrum",
        "timestamp": 1597510480
    },
    {
        "content": "<p>nah the measurement is far too unscientific for the scale to matter</p>",
        "id": 207029653,
        "sender_full_name": "eddyb",
        "timestamp": 1597510520
    },
    {
        "content": "<p>the good news is I have a metric which observes the distinction between serializing and not serializing (none of the \"overhead\" metrics see anything other than the 2 extra instructions), the bad news is... I'd rather not collect the overhead summary data again lol</p>",
        "id": 207029787,
        "sender_full_name": "eddyb",
        "timestamp": 1597510700
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> it's listed in AMD manuals as a \"serializing instruction\", the only other userspace one would be <code>cpuid</code> which I'd rather not use. serialization here I think refers to out-of-order execution</p>",
        "id": 207029816,
        "sender_full_name": "eddyb",
        "timestamp": 1597510748
    },
    {
        "content": "<p>Hm well how large of a percent is 1000? Looks pretty sizeable for the ones you listed</p>",
        "id": 207029906,
        "sender_full_name": "simulacrum",
        "timestamp": 1597510836
    },
    {
        "content": "<p>let me uhh dump the top 14 like I did there, before I try <code>mfence</code> just before, and not after, the <code>rdpmc</code></p>",
        "id": 207029972,
        "sender_full_name": "eddyb",
        "timestamp": 1597510891
    },
    {
        "content": "<p>I just wish I didn't spend the time to write this huge comment:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">        </span><span class=\"c1\">// FIXME(eddyb) the Intel and AMD manuals warn about the need for</span>\n<span class=\"w\">        </span><span class=\"c1\">// &quot;serializing instructions&quot; before/after `rdpmc`, if avoiding any</span>\n<span class=\"w\">        </span><span class=\"c1\">// reordering is desired, but do not agree on the full set of usable</span>\n<span class=\"w\">        </span><span class=\"c1\">// &quot;serializing instructions&quot; (e.g. `mfence` isn&#39;t listed in both).</span>\n<span class=\"w\">        </span><span class=\"c1\">//</span>\n<span class=\"w\">        </span><span class=\"c1\">// The only usable, and guaranteed to work, &quot;serializing instruction&quot;</span>\n<span class=\"w\">        </span><span class=\"c1\">// appears to be `cpuid`, but it doesn&#39;t seem easy to use, especially</span>\n<span class=\"w\">        </span><span class=\"c1\">// due to the overlap in registers with `rdpmc` itself, and it might</span>\n<span class=\"w\">        </span><span class=\"c1\">// have too high of a cost, compared to serialization benefits (if any).</span>\n</code></pre></div>",
        "id": 207030045,
        "sender_full_name": "eddyb",
        "timestamp": 1597510989
    },
    {
        "content": "<p>it was so easy to try, too</p>",
        "id": 207030061,
        "sender_full_name": "eddyb",
        "timestamp": 1597511038
    },
    {
        "content": "<p>very few queries left where the variance per invocation is more than 0.5, and a bunch are just perfectly deterministic now</p>",
        "id": 207030249,
        "sender_full_name": "eddyb",
        "timestamp": 1597511283
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> this is everything above <code>±10</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">{</span>\n  <span class=\"nt\">&quot;expand_crate&quot;</span><span class=\"p\">:</span> <span class=\"mf\">8939.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;free_global_ctxt&quot;</span><span class=\"p\">:</span> <span class=\"mi\">726</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;drop_ast&quot;</span><span class=\"p\">:</span> <span class=\"mf\">409.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;wf_checking&quot;</span><span class=\"p\">:</span> <span class=\"mf\">252.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;hir_lowering&quot;</span><span class=\"p\">:</span> <span class=\"mi\">208</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;generate_crate_metadata&quot;</span><span class=\"p\">:</span> <span class=\"mf\">169.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;resolve_crate&quot;</span><span class=\"p\">:</span> <span class=\"mf\">165.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;setup_global_ctxt&quot;</span><span class=\"p\">:</span> <span class=\"mi\">152</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;build_hir_map&quot;</span><span class=\"p\">:</span> <span class=\"mi\">143</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;crate_lints&quot;</span><span class=\"p\">:</span> <span class=\"mi\">122</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;AST_validation&quot;</span><span class=\"p\">:</span> <span class=\"mf\">86.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;typeck_item_bodies&quot;</span><span class=\"p\">:</span> <span class=\"mi\">68</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;resolve_lifetimes&quot;</span><span class=\"p\">:</span> <span class=\"mi\">58</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;match_checking&quot;</span><span class=\"p\">:</span> <span class=\"mi\">49</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;analysis&quot;</span><span class=\"p\">:</span> <span class=\"mf\">32.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;lint_levels&quot;</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;type_check_crate&quot;</span><span class=\"p\">:</span> <span class=\"mf\">20.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;death_checking&quot;</span><span class=\"p\">:</span> <span class=\"mi\">19</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;MIR_effect_checking&quot;</span><span class=\"p\">:</span> <span class=\"mi\">17</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;drop_compiler&quot;</span><span class=\"p\">:</span> <span class=\"mi\">13</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;MIR_borrow_checking&quot;</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 207030452,
        "sender_full_name": "eddyb",
        "timestamp": 1597511539
    },
    {
        "content": "<p>Is that variance?</p>",
        "id": 207030462,
        "sender_full_name": "simulacrum",
        "timestamp": 1597511572
    },
    {
        "content": "<p>yeah, per invocation</p>",
        "id": 207030467,
        "sender_full_name": "eddyb",
        "timestamp": 1597511587
    },
    {
        "content": "<p>same as the other thing I pasted before</p>",
        "id": 207030474,
        "sender_full_name": "eddyb",
        "timestamp": 1597511598
    },
    {
        "content": "<p>Hm well expand crate has disk reading and such</p>",
        "id": 207030476,
        "sender_full_name": "simulacrum",
        "timestamp": 1597511604
    },
    {
        "content": "<p>Seems like a good start at least</p>",
        "id": 207030482,
        "sender_full_name": "simulacrum",
        "timestamp": 1597511622
    },
    {
        "content": "<p>yeah that's where most of the file IO is isn't it, huh</p>",
        "id": 207030483,
        "sender_full_name": "eddyb",
        "timestamp": 1597511623
    },
    {
        "content": "<p>Though I've never been sure how much IO has userspace non-determinism</p>",
        "id": 207030551,
        "sender_full_name": "simulacrum",
        "timestamp": 1597511684
    },
    {
        "content": "<p>Anyway I'm happy with these variances to start off with</p>",
        "id": 207030563,
        "sender_full_name": "simulacrum",
        "timestamp": 1597511702
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> hmm I would expect partial reads to be the source of IO nondeterminism but actually that doesn't track</p>",
        "id": 207030705,
        "sender_full_name": "eddyb",
        "timestamp": 1597511978
    },
    {
        "content": "<p>heh <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> is suggesting we can look at <code>strace</code> if we want to dig into IO nondeterminism</p>",
        "id": 207030756,
        "sender_full_name": "eddyb",
        "timestamp": 1597512035
    },
    {
        "content": "<p>that's something I didn't think of but it makes sense, alongside disabling ASLR it brings us closer to <code>rr</code></p>",
        "id": 207030764,
        "sender_full_name": "eddyb",
        "timestamp": 1597512053
    },
    {
        "content": "<p>that's funny, <code>mfence</code> only before, not after, is even better</p>",
        "id": 207031379,
        "sender_full_name": "eddyb",
        "timestamp": 1597513127
    },
    {
        "content": "<p>brings <code>expand_crate</code> down to about 1800. I'm not pasting it again because I'm trying <code>lfence</code> next</p>",
        "id": 207031476,
        "sender_full_name": "eddyb",
        "timestamp": 1597513321
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> with <code>lfence</code> it's down to this for queries above <code>±0.5</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">{</span>\n  <span class=\"nt\">&quot;expand_crate&quot;</span><span class=\"p\">:</span> <span class=\"mi\">1068</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;free_global_ctxt&quot;</span><span class=\"p\">:</span> <span class=\"mf\">993.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;drop_ast&quot;</span><span class=\"p\">:</span> <span class=\"mf\">554.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;generate_crate_metadata&quot;</span><span class=\"p\">:</span> <span class=\"mf\">432.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;resolve_crate&quot;</span><span class=\"p\">:</span> <span class=\"mf\">334.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;build_hir_map&quot;</span><span class=\"p\">:</span> <span class=\"mf\">219.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;hir_lowering&quot;</span><span class=\"p\">:</span> <span class=\"mi\">179</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;setup_global_ctxt&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;wf_checking&quot;</span><span class=\"p\">:</span> <span class=\"mi\">95</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;resolve_lifetimes&quot;</span><span class=\"p\">:</span> <span class=\"mi\">87</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;typeck_item_bodies&quot;</span><span class=\"p\">:</span> <span class=\"mf\">53.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;crate_variances&quot;</span><span class=\"p\">:</span> <span class=\"mi\">43</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;AST_validation&quot;</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;privacy_access_levels&quot;</span><span class=\"p\">:</span> <span class=\"mi\">26</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;early_lint_checks&quot;</span><span class=\"p\">:</span> <span class=\"mi\">23</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;check_private_in_public&quot;</span><span class=\"p\">:</span> <span class=\"mf\">21.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;get_lib_features&quot;</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;lint_levels&quot;</span><span class=\"p\">:</span> <span class=\"mf\">19.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;inferred_outlives_crate&quot;</span><span class=\"p\">:</span> <span class=\"mi\">16</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;death_checking&quot;</span><span class=\"p\">:</span> <span class=\"mf\">13.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;analysis&quot;</span><span class=\"p\">:</span> <span class=\"mi\">13</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;crate_lints&quot;</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;MIR_effect_checking&quot;</span><span class=\"p\">:</span> <span class=\"mf\">9.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;MIR_borrow_checking&quot;</span><span class=\"p\">:</span> <span class=\"mf\">5.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;link_binary&quot;</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;write_crate_metadata&quot;</span><span class=\"p\">:</span> <span class=\"mf\">4.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;match_checking&quot;</span><span class=\"p\">:</span> <span class=\"mf\">4.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;unused_lib_feature_checking&quot;</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;complete_gated_feature_checking&quot;</span><span class=\"p\">:</span> <span class=\"mf\">3.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;self_profile_alloc_query_strings&quot;</span><span class=\"p\">:</span> <span class=\"mf\">3.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;check_mod_item_types&quot;</span><span class=\"p\">:</span> <span class=\"mf\">3.432735426002182</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;specialization_graph_of&quot;</span><span class=\"p\">:</span> <span class=\"mf\">2.2374999998137355</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;type_check_crate&quot;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;mir_borrowck_const_arg&quot;</span><span class=\"p\">:</span> <span class=\"mf\">1.2222222222262644</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;get_lang_items&quot;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;misc_checking_1&quot;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;stability_index&quot;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;trait_impls_of&quot;</span><span class=\"p\">:</span> <span class=\"mf\">0.8647540983620274</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;collect_mod_item_types&quot;</span><span class=\"p\">:</span> <span class=\"mf\">0.8004484304983635</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 207033587,
        "sender_full_name": "eddyb",
        "timestamp": 1597516621
    },
    {
        "content": "<p>hmm what I can do now is actually look at the worst offenders, using not 10 but 100 samples, because the distribution now should be more interesting</p>",
        "id": 207036089,
        "sender_full_name": "eddyb",
        "timestamp": 1597520629
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/mZDqcs5sY0yUHx68do5hTYue/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/mZDqcs5sY0yUHx68do5hTYue/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/mZDqcs5sY0yUHx68do5hTYue/image.png\"></a></div>",
        "id": 207037816,
        "sender_full_name": "eddyb",
        "timestamp": 1597523168
    },
    {
        "content": "<p>this is weird...</p>",
        "id": 207037819,
        "sender_full_name": "eddyb",
        "timestamp": 1597523175
    },
    {
        "content": "<p>oh dear, the faint wiggle in a plateau is my \"proclaimed\" variance</p>",
        "id": 207037885,
        "sender_full_name": "eddyb",
        "timestamp": 1597523283
    },
    {
        "content": "<p>which means everything else would show up as huge errors, or something else entirely, if I had it plugged into <a href=\"https://gist.github.com/eddyb/7a0a55411441142765db6cfa41504e50\">https://gist.github.com/eddyb/7a0a55411441142765db6cfa41504e50</a></p>",
        "id": 207037936,
        "sender_full_name": "eddyb",
        "timestamp": 1597523373
    },
    {
        "content": "<p>okay this is super weird but the spike up followed by going down to a plateau, in the right half, correlates to the <em>process ID</em> numbers going 6 digit -&gt; 4 digit -&gt; 5 digit. the plateaus correspond to process IDs staying the same number of digits</p>",
        "id": 207038136,
        "sender_full_name": "eddyb",
        "timestamp": 1597523642
    },
    {
        "content": "<p>I wish I was making this up</p>",
        "id": 207038180,
        "sender_full_name": "eddyb",
        "timestamp": 1597523705
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>core-121108 instructions:u=43369802349\ncore-121645 instructions:u=43369816774\ncore-8520   instructions:u=43372789853\ncore-15678  instructions:u=43372147988\ncore-15890  instructions:u=43372146592\n</code></pre></div>",
        "id": 207038183,
        "sender_full_name": "eddyb",
        "timestamp": 1597523707
    },
    {
        "content": "<p>yupp every single \"level\" corresponds to a PID length, the order is: 3, 6, 5, 4</p>",
        "id": 207038339,
        "sender_full_name": "eddyb",
        "timestamp": 1597523970
    },
    {
        "content": "<p>Could it be the thread id (and not process id) being stringified or something like that?</p>",
        "id": 207038397,
        "sender_full_name": "bjorn3",
        "timestamp": 1597524009
    },
    {
        "content": "<p>again <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> comes to the rescue: it's probably the allocations cascading into moving around all the other allocations that happen after them</p>",
        "id": 207038422,
        "sender_full_name": "eddyb",
        "timestamp": 1597524082
    },
    {
        "content": "<p>Maybe use leading zeros in the measureme profile names?</p>",
        "id": 207038507,
        "sender_full_name": "bjorn3",
        "timestamp": 1597524204
    },
    {
        "content": "<p>that's what <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> also suggested lol. yeah we should do that to avoid <a href=\"http://perf.rust-lang.org\">perf.rust-lang.org</a> seeing this effect at all</p>",
        "id": 207038556,
        "sender_full_name": "eddyb",
        "timestamp": 1597524248
    },
    {
        "content": "<p>welp, so, my overhead measurements have 6-digit PIDs for the first 2 columns but 5-digit PIDs for the remaining 3 columns. but at least I don't have any column with more than one PID length, which means at most the \"overhead\" value may be off, and I'll try figure out by how much, but it shouldn't really be a big problem</p>",
        "id": 207038716,
        "sender_full_name": "eddyb",
        "timestamp": 1597524542
    },
    {
        "content": "<p>hmm I guess the 3, 6, 5, 4 order is just because it probably cascades into pointer-keyed hashmaps which would have one of four possible modes but they do not need to correlate with that one small allocation that caused it</p>",
        "id": 207038791,
        "sender_full_name": "eddyb",
        "timestamp": 1597524650
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> so I think what the pid length difference leads to is one less instruction in each of the last 3 columns (or rows in the gist I guess). I'll cut my losses and not go back to correct that, at the very least it has no impact on the variance</p>",
        "id": 207039047,
        "sender_full_name": "eddyb",
        "timestamp": 1597525146
    },
    {
        "content": "<p><a href=\"https://twitter.com/eddyb_r/status/1294745328739127296\">https://twitter.com/eddyb_r/status/1294745328739127296</a><br>\n<a href=\"user_uploads/4715/5aGihzizuTmaelBhdkKzNBLI/image.png\">image.png</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/eddyb_r/status/1294745328739127296\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1291545948322226178/trAmIAt9_normal.jpg\"></a><p>expectation: disable ASLR, get deterministic pointer hashing\n\nreality: entropy vacuum that will be filled by anything, even something as insignificant as *checks notes* log₁₀(pid)?? <a href=\"https://t.co/4jwCe5snWM\">https://twitter.com/eddyb_r/status/1294745328739127296/photo/1</a></p><span>- eddyb, continuously burning out, (@eddyb_r)</span><div class=\"twitter-image\"><a href=\"https://t.co/4jwCe5snWM\"><img src=\"https://pbs.twimg.com/media/EffbA0sX0AAqfJG.jpg:thumb\"></a></div></div></div><div class=\"message_inline_image\"><a href=\"user_uploads/4715/5aGihzizuTmaelBhdkKzNBLI/image.png\" title=\"image.png\"><img src=\"user_uploads/4715/5aGihzizuTmaelBhdkKzNBLI/image.png\"></a></div>",
        "id": 207039373,
        "sender_full_name": "eddyb",
        "timestamp": 1597525672
    },
    {
        "content": "<p>ugh the tweet doesn't load properly</p>",
        "id": 207040599,
        "sender_full_name": "eddyb",
        "timestamp": 1597527630
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> hmm I wonder if we're running into one of these <a href=\"https://github.com/mozilla/rr/issues/2034#issuecomment-400325608\">https://github.com/mozilla/rr/issues/2034#issuecomment-400325608</a></p>",
        "id": 207041273,
        "sender_full_name": "eddyb",
        "timestamp": 1597528638
    },
    {
        "content": "<p>I've never gotten rr to work on amd cpus</p>",
        "id": 207041280,
        "sender_full_name": "simulacrum",
        "timestamp": 1597528656
    },
    {
        "content": "<p>but I've only tried on 1800x</p>",
        "id": 207041293,
        "sender_full_name": "simulacrum",
        "timestamp": 1597528671
    },
    {
        "content": "<p>specifically, <code>instructions:u</code> might be affected</p>",
        "id": 207041294,
        "sender_full_name": "eddyb",
        "timestamp": 1597528673
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/fyzCmv9qyut954lc6r4frwGr/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/fyzCmv9qyut954lc6r4frwGr/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/fyzCmv9qyut954lc6r4frwGr/image.png\"></a></div>",
        "id": 207041370,
        "sender_full_name": "simulacrum",
        "timestamp": 1597528750
    },
    {
        "content": "<p>if it's just that we can disable c6 easily</p>",
        "id": 207041375,
        "sender_full_name": "simulacrum",
        "timestamp": 1597528758
    },
    {
        "content": "<p><a href=\"https://github.com/jfredrickson/disable-c6\">https://github.com/jfredrickson/disable-c6</a></p>",
        "id": 207041389,
        "sender_full_name": "simulacrum",
        "timestamp": 1597528785
    },
    {
        "content": "<p>will ask our sysadmin if we can try this on <a href=\"http://build.lyken.rs\">build.lyken.rs</a>, and see what it does to the data, thanks!</p>",
        "id": 207041507,
        "sender_full_name": "eddyb",
        "timestamp": 1597528897
    },
    {
        "content": "<p>I know that at least for me that script is necessary for system stability on 1800x, but is not on 3950x</p>",
        "id": 207041562,
        "sender_full_name": "simulacrum",
        "timestamp": 1597528939
    },
    {
        "content": "<p>with iirc 4.x kernels, so maybe fixed in kernel patches or something since then</p>",
        "id": 207041571,
        "sender_full_name": "simulacrum",
        "timestamp": 1597528963
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>vendor_id       : AuthenticAMD\ncpu family      : 23\nmodel           : 1\nmodel name      : AMD EPYC 7401P 24-Core Processor\nstepping        : 2\n</code></pre></div>",
        "id": 207041575,
        "sender_full_name": "eddyb",
        "timestamp": 1597528968
    },
    {
        "content": "<p>hm I don't know what family that processor is</p>",
        "id": 207041587,
        "sender_full_name": "simulacrum",
        "timestamp": 1597528992
    },
    {
        "content": "<p>23 is 0x17 so probably this one</p>",
        "id": 207041598,
        "sender_full_name": "simulacrum",
        "timestamp": 1597529013
    },
    {
        "content": "<p>yeah so that should work</p>",
        "id": 207041601,
        "sender_full_name": "simulacrum",
        "timestamp": 1597529020
    },
    {
        "content": "<p>though the script might be ryzen-specific, not sure</p>",
        "id": 207041606,
        "sender_full_name": "simulacrum",
        "timestamp": 1597529027
    },
    {
        "content": "<p>it's definitely Zen 1</p>",
        "id": 207041644,
        "sender_full_name": "eddyb",
        "timestamp": 1597529044
    },
    {
        "content": "<p>hm 0x17 is Zen 2 afaik</p>",
        "id": 207041653,
        "sender_full_name": "simulacrum",
        "timestamp": 1597529069
    },
    {
        "content": "<p>maybe the epyc versioning is different?</p>",
        "id": 207041655,
        "sender_full_name": "simulacrum",
        "timestamp": 1597529078
    },
    {
        "content": "<p>maybe</p>",
        "id": 207041657,
        "sender_full_name": "eddyb",
        "timestamp": 1597529086
    },
    {
        "content": "<p>locally I see</p>\n<div class=\"codehilite\"><pre><span></span><code>vendor_id       : AuthenticAMD\ncpu family      : 23\nmodel           : 113\nmodel name      : AMD Ryzen 9 3950X 16-Core Processor\n</code></pre></div>",
        "id": 207041667,
        "sender_full_name": "simulacrum",
        "timestamp": 1597529104
    },
    {
        "content": "<p>and that's definitely not a zen 1 chip</p>",
        "id": 207041686,
        "sender_full_name": "simulacrum",
        "timestamp": 1597529126
    },
    {
        "content": "<p>it's the model then</p>",
        "id": 207041696,
        "sender_full_name": "eddyb",
        "timestamp": 1597529146
    },
    {
        "content": "<p>hm the model is hex 0x71</p>",
        "id": 207041744,
        "sender_full_name": "simulacrum",
        "timestamp": 1597529166
    },
    {
        "content": "<p>family 23 must be all Zen</p>",
        "id": 207041745,
        "sender_full_name": "eddyb",
        "timestamp": 1597529166
    },
    {
        "content": "<p>maybe it's... reversed?</p>",
        "id": 207041751,
        "sender_full_name": "simulacrum",
        "timestamp": 1597529175
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <a href=\"https://en.wikichip.org/wiki/amd/cpuid\">https://en.wikichip.org/wiki/amd/cpuid</a></p>",
        "id": 207041760,
        "sender_full_name": "eddyb",
        "timestamp": 1597529204
    },
    {
        "content": "<p>I can't find the PDF for 7401p epycs</p>",
        "id": 207041848,
        "sender_full_name": "simulacrum",
        "timestamp": 1597529317
    },
    {
        "content": "<p>I always struggle on AMDs website though</p>",
        "id": 207041855,
        "sender_full_name": "simulacrum",
        "timestamp": 1597529323
    },
    {
        "content": "<p>do you know if you have revision b1 or b0?</p>",
        "id": 207041883,
        "sender_full_name": "simulacrum",
        "timestamp": 1597529397
    },
    {
        "content": "<p>I found this <a href=\"https://developer.amd.com/resources/epyc-resources/epyc-specifications/\">https://developer.amd.com/resources/epyc-resources/epyc-specifications/</a></p>",
        "id": 207041928,
        "sender_full_name": "simulacrum",
        "timestamp": 1597529418
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> there's one revision per model, no?</p>",
        "id": 207042011,
        "sender_full_name": "eddyb",
        "timestamp": 1597529556
    },
    {
        "content": "<p>hm not sure</p>",
        "id": 207042015,
        "sender_full_name": "simulacrum",
        "timestamp": 1597529566
    },
    {
        "content": "<p>Model 31h is Zen 2 EPYC</p>",
        "id": 207042040,
        "sender_full_name": "eddyb",
        "timestamp": 1597529616
    },
    {
        "content": "<p>this should be the manual for mine <a href=\"http://developer.amd.com/wordpress/media/2017/11/54945_PPR_Family_17h_Models_00h-0Fh.pdf\">http://developer.amd.com/wordpress/media/2017/11/54945_PPR_Family_17h_Models_00h-0Fh.pdf</a></p>",
        "id": 207042042,
        "sender_full_name": "eddyb",
        "timestamp": 1597529630
    },
    {
        "content": "<p>I think you want the revision guide</p>",
        "id": 207042121,
        "sender_full_name": "simulacrum",
        "timestamp": 1597529680
    },
    {
        "content": "<p>wait this lists it as B2 lol <a href=\"https://en.wikichip.org/wiki/amd/epyc/7401p\">https://en.wikichip.org/wiki/amd/epyc/7401p</a></p>",
        "id": 207042123,
        "sender_full_name": "eddyb",
        "timestamp": 1597529682
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> oh wait, \"stepping: 2\" -&gt; B2</p>",
        "id": 207042220,
        "sender_full_name": "eddyb",
        "timestamp": 1597529853
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> 1054 has \"No fix planned\" for all 3 columns <a href=\"https://developer.amd.com/wp-content/resources/55449_1.16.pdf#page=13\">https://developer.amd.com/wp-content/resources/55449_1.16.pdf#page=13</a></p>",
        "id": 207042276,
        "sender_full_name": "eddyb",
        "timestamp": 1597529941
    },
    {
        "content": "<p>yeah, though I imagine disabling c6 would do it</p>",
        "id": 207042401,
        "sender_full_name": "simulacrum",
        "timestamp": 1597530136
    },
    {
        "content": "<p>maybe the script I gave you earlier will do it though, not sure</p>",
        "id": 207042405,
        "sender_full_name": "simulacrum",
        "timestamp": 1597530153
    },
    {
        "content": "<p>so this is <code>expand_crate</code> (the 63 runs I have of it that are all 5-digit PIDs): <a href=\"/user_uploads/4715/nQJADqKSSWG0llmeTALX6lRR/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/nQJADqKSSWG0llmeTALX6lRR/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/nQJADqKSSWG0llmeTALX6lRR/image.png\"></a></div>",
        "id": 207042816,
        "sender_full_name": "eddyb",
        "timestamp": 1597530876
    },
    {
        "content": "<p>I was hoping it would look like this, as opposed to just being uniformly distributed</p>",
        "id": 207042891,
        "sender_full_name": "eddyb",
        "timestamp": 1597530976
    },
    {
        "content": "<p>presumably we can have more functions profiled to get a better idea where in macro expansion the noise is introduced. it shouldn't be a big deal to wrap all IO in profiling etc.</p>",
        "id": 207042918,
        "sender_full_name": "eddyb",
        "timestamp": 1597531062
    },
    {
        "content": "<p>this is <code>is_mir_available</code>, which has one of the lowest non-0 total variance out of all the queries (it's one value, or +1, or even rarer, +2): <a href=\"/user_uploads/4715/y3vffg3omXTASQjvbxRiA6pD/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/y3vffg3omXTASQjvbxRiA6pD/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/y3vffg3omXTASQjvbxRiA6pD/image.png\"></a></div>",
        "id": 207043188,
        "sender_full_name": "eddyb",
        "timestamp": 1597531537
    },
    {
        "content": "<p>I'm finding similar things elsewhere. hmpf. so it definitely looks like there could be hardware issues. I wish <code>summarize</code> told me how many direct child events there are, and total descendent events, because I suspect the variance in many cases is proportional to the number of <code>rdpmc</code> inside. maybe I should look at \"total time\" instead of \"self time\", because it shouldn't have this problem, hmm</p>",
        "id": 207043311,
        "sender_full_name": "eddyb",
        "timestamp": 1597531716
    },
    {
        "content": "<p>per-query \"total time\" is worse than \"self time\", huh. how? this seems like it would imply the \"child/descendant noise\" cancels out? either that or <code>summarize</code> does something I wouldn't expect, with the data</p>",
        "id": 207043468,
        "sender_full_name": "eddyb",
        "timestamp": 1597532039
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> lol no wonder <code>drop_ast</code> is weird <a href=\"https://github.com/rust-lang/rust/commit/8ec687611b070be1e143f8ed038ea9ea871a0935\">https://github.com/rust-lang/rust/commit/8ec687611b070be1e143f8ed038ea9ea871a0935</a></p>",
        "id": 207043681,
        "sender_full_name": "eddyb",
        "timestamp": 1597532365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> you can disable c6 in bios too, as a more permanent solution.</p>",
        "id": 207043691,
        "sender_full_name": "nagisa",
        "timestamp": 1597532386
    },
    {
        "content": "<p>7xx1 is 1st gen ryzen.</p>",
        "id": 207043776,
        "sender_full_name": "nagisa",
        "timestamp": 1597532473
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> not sure if you're around: <a href=\"https://github.com/rust-lang/rust/pull/72882#discussion_r471042204\">https://github.com/rust-lang/rust/pull/72882#discussion_r471042204</a></p>",
        "id": 207043890,
        "sender_full_name": "eddyb",
        "timestamp": 1597532645
    },
    {
        "content": "<p>I probably don't even need to fix it for now, just remember that it will look like <code>analysis</code></p>",
        "id": 207043906,
        "sender_full_name": "eddyb",
        "timestamp": 1597532689
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> okay I might be onto something: there's a lot of variance on queries that execute once, but call a lot of other queries (e.g. a loop over every definition in the crate). this is significant because there's sampling points on every single call from, and return to, that loop, and if either I haven't fully serialized <code>rdpmc</code>, or there's weird hardware issues, that will add up and contribute to the uncertainty of \"loop vs callees\"</p>",
        "id": 207044013,
        "sender_full_name": "eddyb",
        "timestamp": 1597532872
    },
    {
        "content": "<p>overall I think I have more data than I know what to do with, and I should start upstreaming all this work before I get too distracted</p>",
        "id": 207044059,
        "sender_full_name": "eddyb",
        "timestamp": 1597532912
    },
    {
        "content": "<p>wouldn't that just be from variances from the individual queries adding up?</p>",
        "id": 207044068,
        "sender_full_name": "simulacrum",
        "timestamp": 1597532941
    },
    {
        "content": "<p>but big <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> to upstreaming</p>",
        "id": 207044072,
        "sender_full_name": "simulacrum",
        "timestamp": 1597532960
    },
    {
        "content": "<p>but then the self time would not vary at all, since it's doing something very simple</p>",
        "id": 207044073,
        "sender_full_name": "eddyb",
        "timestamp": 1597532965
    },
    {
        "content": "<p>well, not \"time\" , but instruction count</p>",
        "id": 207044083,
        "sender_full_name": "eddyb",
        "timestamp": 1597532983
    },
    {
        "content": "<p>hm but we compute self time by subtracting out, no?</p>",
        "id": 207044122,
        "sender_full_name": "simulacrum",
        "timestamp": 1597533004
    },
    {
        "content": "<p>if sampling is perfect, then you can perfectly subtract something noisy from something that only has the noise from that inner thing and... I need to retry this sentence lol</p>",
        "id": 207044138,
        "sender_full_name": "eddyb",
        "timestamp": 1597533064
    },
    {
        "content": "<p>so if \"true\" total count is, say, 100, and then that consists of 10 queries which are 10 +/- 5 then the total count would have a variance of +/- 50, if I'm recalling my math right</p>",
        "id": 207044141,
        "sender_full_name": "simulacrum",
        "timestamp": 1597533078
    },
    {
        "content": "<p>for two loop elements, <code>a</code> and <code>b</code>, you have <code>x + a + y + b + z</code></p>",
        "id": 207044188,
        "sender_full_name": "eddyb",
        "timestamp": 1597533136
    },
    {
        "content": "<p>with perfect sampling, <code>(x + a + y + b + z) - a - b = (x + y + z)</code></p>",
        "id": 207044193,
        "sender_full_name": "eddyb",
        "timestamp": 1597533151
    },
    {
        "content": "<p>Hello! I'll take a look at your comment asap <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 207044198,
        "sender_full_name": "marmeladema",
        "timestamp": 1597533176
    },
    {
        "content": "<p>(it's not urgent, don't worry!)</p>",
        "id": 207044204,
        "sender_full_name": "eddyb",
        "timestamp": 1597533187
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> if <code>x</code>, <code>y</code> and <code>z</code> are perfectly deterministic (as most loops in rustc should be), we get to eliminate the noise entirely</p>",
        "id": 207044207,
        "sender_full_name": "eddyb",
        "timestamp": 1597533199
    },
    {
        "content": "<p>like it doesn't matter what <code>a</code> an <code>b</code> are, we can just subtract them out</p>",
        "id": 207044213,
        "sender_full_name": "eddyb",
        "timestamp": 1597533216
    },
    {
        "content": "<p>hmm okay yeah that makes sense</p>",
        "id": 207044218,
        "sender_full_name": "simulacrum",
        "timestamp": 1597533224
    },
    {
        "content": "<p>we subtract within each run, not across them, which is why this works at all</p>",
        "id": 207044219,
        "sender_full_name": "eddyb",
        "timestamp": 1597533231
    },
    {
        "content": "<p>It seems relatively easy to add {} around those 2 lines :P I can take care of it</p>",
        "id": 207044222,
        "sender_full_name": "marmeladema",
        "timestamp": 1597533237
    },
    {
        "content": "<p>hmm, you know what, just to satisfy my curiosity, I'll try <code>cpuid</code>, in case neither <code>mfence</code> nor <code>lfence</code> fully serialize (e.g. maybe they only serialize memory instructions but not register-only ones)</p>",
        "id": 207044382,
        "sender_full_name": "eddyb",
        "timestamp": 1597533452
    },
    {
        "content": "<p>I believe none of the x86 fences flush the pipeline.</p>",
        "id": 207044610,
        "sender_full_name": "nagisa",
        "timestamp": 1597533824
    },
    {
        "content": "<p>I think this should fix it: <a href=\"https://github.com/rust-lang/rust/pull/75575\">https://github.com/rust-lang/rust/pull/75575</a></p>",
        "id": 207044663,
        "sender_full_name": "marmeladema",
        "timestamp": 1597533878
    },
    {
        "content": "<p>thanks!</p>",
        "id": 207044677,
        "sender_full_name": "eddyb",
        "timestamp": 1597533908
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> what amount of variation are you dealing with here? in orders of 10?</p>",
        "id": 207044732,
        "sender_full_name": "nagisa",
        "timestamp": 1597534035
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> it could be as low as ±1 instruction per <code>rdpmc</code>, and could still add up to what I'm seeing</p>",
        "id": 207044782,
        "sender_full_name": "eddyb",
        "timestamp": 1597534102
    },
    {
        "content": "<p>IIRC without cpuid the only other way to serialize the pipeline is to load/store certain MSRs that have other side effects (like e.g. storing a different TLB)</p>",
        "id": 207044790,
        "sender_full_name": "nagisa",
        "timestamp": 1597534134
    },
    {
        "content": "<p>I'll attempt with this now: <a href=\"https://godbolt.org/z/aeebT3\">https://godbolt.org/z/aeebT3</a></p>",
        "id": 207044911,
        "sender_full_name": "eddyb",
        "timestamp": 1597534410
    },
    {
        "content": "<p>huh in practice that's 6 extra instructions compared to just a lone <code>rdpmc</code>, presumably the clobbering leads to more instructions around it?</p>",
        "id": 207045416,
        "sender_full_name": "eddyb",
        "timestamp": 1597535419
    },
    {
        "content": "<p><code>cpuid</code> looks like it's similar to <code>mfence</code> (which was worse than <code>lfence</code>), <em>at best</em>, but a lot of the time it's noisier. it even seems to introduce extra variance in the process total which... shouldn't be possible, should it?</p>",
        "id": 207049504,
        "sender_full_name": "eddyb",
        "timestamp": 1597543191
    },
    {
        "content": "<p>either I have more methodology issues or it's worse</p>",
        "id": 207049577,
        "sender_full_name": "eddyb",
        "timestamp": 1597543321
    },
    {
        "content": "<p>huh, 8 of the 10 runs I have collected on my laptop (with the <code>lfence</code> variant) have total instructions vary by ±342 (as opposed to being in the 5000-8000 range)</p>",
        "id": 207051232,
        "sender_full_name": "eddyb",
        "timestamp": 1597545982
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> welp, it has much less variance on my laptop Q_Q</p>",
        "id": 207051562,
        "sender_full_name": "eddyb",
        "timestamp": 1597546758
    },
    {
        "content": "<p>If there's simpleish tests I'd be happy to queue them up manually on the collector</p>",
        "id": 207051612,
        "sender_full_name": "simulacrum",
        "timestamp": 1597546841
    },
    {
        "content": "<p>the problem is getting the exact version of rustc I'm using</p>",
        "id": 207051618,
        "sender_full_name": "eddyb",
        "timestamp": 1597546865
    },
    {
        "content": "<p>without opening a Rust PR :P</p>",
        "id": 207051625,
        "sender_full_name": "eddyb",
        "timestamp": 1597546888
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> wait, what if I gave you a zip?</p>",
        "id": 207051670,
        "sender_full_name": "eddyb",
        "timestamp": 1597546939
    },
    {
        "content": "<p>of a working sysroot</p>",
        "id": 207051672,
        "sender_full_name": "eddyb",
        "timestamp": 1597546951
    },
    {
        "content": "<p>I think I can de-NixOS-ify it in a couple commands</p>",
        "id": 207051676,
        "sender_full_name": "eddyb",
        "timestamp": 1597546971
    },
    {
        "content": "<p>Yeah that seems fine. I won't be able to run things until tomorrow</p>",
        "id": 207051677,
        "sender_full_name": "simulacrum",
        "timestamp": 1597546971
    },
    {
        "content": "<p>ah then I might as well go to sleep then</p>",
        "id": 207051680,
        "sender_full_name": "eddyb",
        "timestamp": 1597546983
    },
    {
        "content": "<p>I should try <code>cpuid</code> again now</p>",
        "id": 207051684,
        "sender_full_name": "eddyb",
        "timestamp": 1597547000
    },
    {
        "content": "<p>and just also gather more runs in case this is a weird fluke</p>",
        "id": 207051687,
        "sender_full_name": "eddyb",
        "timestamp": 1597547019
    },
    {
        "content": "<p>uhh <code>cpuid</code> seems to work great on my X230, better than <code>lfence</code> actually, although I might be accidentally cherry-picking the data, I need to take a closer look at it after I sleep</p>",
        "id": 207054729,
        "sender_full_name": "eddyb",
        "timestamp": 1597552918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> so <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> found this, which is fascinating <a href=\"https://stackoverflow.com/questions/51844886/is-lfence-serializing-on-amd-processors/51848609#51848609\">https://stackoverflow.com/questions/51844886/is-lfence-serializing-on-amd-processors/51848609#51848609</a></p>",
        "id": 207054900,
        "sender_full_name": "eddyb",
        "timestamp": 1597553164
    },
    {
        "content": "<p>the kernel setting that bit must be why it's useful on the server. I suspect my laptop doesn't even need a serializing instruction as much as the server, since I doubt <code>lfence</code> does anything useful here on an Ivy Bridge</p>",
        "id": 207055085,
        "sender_full_name": "eddyb",
        "timestamp": 1597553566
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> oh I promised I'd get you binaries, didn't I?</p>",
        "id": 207091491,
        "sender_full_name": "eddyb",
        "timestamp": 1597614243
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 207091495,
        "sender_full_name": "simulacrum",
        "timestamp": 1597614263
    },
    {
        "content": "<p>sure yeah, I can run some</p>",
        "id": 207091496,
        "sender_full_name": "simulacrum",
        "timestamp": 1597614268
    },
    {
        "content": "<p>I think we're on 18.04 ubuntu fwiw</p>",
        "id": 207091498,
        "sender_full_name": "simulacrum",
        "timestamp": 1597614276
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> what's a normal INTERP on linux? e.g. <code>ldd $(which echo) | tail -n1</code></p>",
        "id": 207091509,
        "sender_full_name": "eddyb",
        "timestamp": 1597614313
    },
    {
        "content": "<p>/lib64/ld-linux-x86-64.so.2</p>",
        "id": 207091580,
        "sender_full_name": "simulacrum",
        "timestamp": 1597614459
    },
    {
        "content": "<p>thanks</p>",
        "id": 207091834,
        "sender_full_name": "eddyb",
        "timestamp": 1597614936
    },
    {
        "content": "<p>ugh, xz compression is incredibly slow</p>",
        "id": 207091838,
        "sender_full_name": "eddyb",
        "timestamp": 1597614943
    },
    {
        "content": "<p>and gzip barely does anything :|</p>",
        "id": 207091899,
        "sender_full_name": "eddyb",
        "timestamp": 1597615078
    },
    {
        "content": "<p>or maybe it wasn't compressing at all</p>",
        "id": 207091949,
        "sender_full_name": "eddyb",
        "timestamp": 1597615148
    },
    {
        "content": "<p>I'm silly, I should be doing this on the server</p>",
        "id": 207092003,
        "sender_full_name": "eddyb",
        "timestamp": 1597615217
    },
    {
        "content": "<p>the smart thing to do would've been to keep copies of the builds there, not on my laptop lol</p>",
        "id": 207092045,
        "sender_full_name": "eddyb",
        "timestamp": 1597615288
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <a href=\"http://build.lyken.rs/~eddy/rdpmc-self-contained.tar.xz\">http://build.lyken.rs/~eddy/rdpmc-self-contained.tar.xz</a></p>",
        "id": 207092500,
        "sender_full_name": "eddyb",
        "timestamp": 1597616112
    },
    {
        "content": "<p>~500MB compressed down to ~100MB courtesy of xz's most extreme settings</p>",
        "id": 207092504,
        "sender_full_name": "eddyb",
        "timestamp": 1597616144
    },
    {
        "content": "<p>downloaded</p>",
        "id": 207092564,
        "sender_full_name": "simulacrum",
        "timestamp": 1597616188
    },
    {
        "content": "<p>what should I run?</p>",
        "id": 207092567,
        "sender_full_name": "simulacrum",
        "timestamp": 1597616202
    },
    {
        "content": "<p>you should be able to run the scripts as many times as you'd like</p>",
        "id": 207092577,
        "sender_full_name": "eddyb",
        "timestamp": 1597616209
    },
    {
        "content": "<p>hmm</p>\n<p>cpuid-sysroot/bin/rustc: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.29' not found (required by /home/simulacrum/rdpmc-self-contained/cpuid-sysroot/bin/../lib/librustc_driver-9d0ee5e443b15ab2.so)</p>",
        "id": 207092584,
        "sender_full_name": "simulacrum",
        "timestamp": 1597616225
    },
    {
        "content": "<p>ten of each is like the minimum I'd normally do</p>",
        "id": 207092587,
        "sender_full_name": "eddyb",
        "timestamp": 1597616226
    },
    {
        "content": "<p>I was afraid of that</p>",
        "id": 207092588,
        "sender_full_name": "simulacrum",
        "timestamp": 1597616230
    },
    {
        "content": "<p>oh goddammit</p>",
        "id": 207092589,
        "sender_full_name": "eddyb",
        "timestamp": 1597616230
    },
    {
        "content": "<p>I think I have 2.30 installed</p>",
        "id": 207092597,
        "sender_full_name": "simulacrum",
        "timestamp": 1597616261
    },
    {
        "content": "<p>wait you have <em>newer</em>? that should work, no?</p>",
        "id": 207092600,
        "sender_full_name": "eddyb",
        "timestamp": 1597616270
    },
    {
        "content": "<p>at least GNU objdump (GNU Binutils for Ubuntu) 2.30</p>",
        "id": 207092601,
        "sender_full_name": "simulacrum",
        "timestamp": 1597616274
    },
    {
        "content": "<p>yeah.</p>",
        "id": 207092604,
        "sender_full_name": "nagisa",
        "timestamp": 1597616277
    },
    {
        "content": "<p>maybe that's not the right way to get that version?</p>",
        "id": 207092606,
        "sender_full_name": "simulacrum",
        "timestamp": 1597616280
    },
    {
        "content": "<p>that's binutils, not glibc</p>",
        "id": 207092644,
        "sender_full_name": "nagisa",
        "timestamp": 1597616284
    },
    {
        "content": "<p>ah gah</p>",
        "id": 207092649,
        "sender_full_name": "simulacrum",
        "timestamp": 1597616290
    },
    {
        "content": "<p>you can execute <code>/lib/x86_64-linux-gnu/libc.so.6</code> to check glibc version</p>",
        "id": 207092651,
        "sender_full_name": "nagisa",
        "timestamp": 1597616300
    },
    {
        "content": "<p>GNU C Library (Ubuntu GLIBC 2.27-3ubuntu1.2) stable release version 2.27.</p>",
        "id": 207092652,
        "sender_full_name": "simulacrum",
        "timestamp": 1597616318
    },
    {
        "content": "<p>thanks!</p>",
        "id": 207092654,
        "sender_full_name": "simulacrum",
        "timestamp": 1597616323
    },
    {
        "content": "<p>I wonder what it'd take to patch that out</p>",
        "id": 207092659,
        "sender_full_name": "eddyb",
        "timestamp": 1597616345
    },
    {
        "content": "<p>fairly difficult, sadly. It'd be easier/take less time for you to compile whatever you did in an older stdenv.</p>",
        "id": 207092665,
        "sender_full_name": "nagisa",
        "timestamp": 1597616376
    },
    {
        "content": "<p>we were trying to avoid that lol</p>",
        "id": 207092716,
        "sender_full_name": "eddyb",
        "timestamp": 1597616414
    },
    {
        "content": "<p>you could _also_ ship the whole nix closure.</p>",
        "id": 207092721,
        "sender_full_name": "nagisa",
        "timestamp": 1597616444
    },
    {
        "content": "<p>I guess maybe I can run in docker or something? seems annoying</p>",
        "id": 207092722,
        "sender_full_name": "simulacrum",
        "timestamp": 1597616445
    },
    {
        "content": "<p>or get nix make, yeah, a docker image</p>",
        "id": 207092724,
        "sender_full_name": "nagisa",
        "timestamp": 1597616460
    },
    {
        "content": "<p>we should just compile rustc against musl</p>",
        "id": 207092735,
        "sender_full_name": "eddyb",
        "timestamp": 1597616505
    },
    {
        "content": "<p>completely self-contained</p>",
        "id": 207092738,
        "sender_full_name": "eddyb",
        "timestamp": 1597616516
    },
    {
        "content": "<p><a href=\"https://nixos.org/nixpkgs/manual/#sec-pkgs-dockerTools\">https://nixos.org/nixpkgs/manual/#sec-pkgs-dockerTools</a> if you wanted to attempt docker image generation</p>",
        "id": 207092780,
        "sender_full_name": "nagisa",
        "timestamp": 1597616546
    },
    {
        "content": "<p>trying docker now</p>",
        "id": 207092782,
        "sender_full_name": "simulacrum",
        "timestamp": 1597616555
    },
    {
        "content": "<p>I mean <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> is not on NixOS and I'm not sending a docker image over lol</p>",
        "id": 207092783,
        "sender_full_name": "eddyb",
        "timestamp": 1597616561
    },
    {
        "content": "<p>err</p>",
        "id": 207092784,
        "sender_full_name": "eddyb",
        "timestamp": 1597616569
    },
    {
        "content": "<p>well I mean I have it installed</p>",
        "id": 207092786,
        "sender_full_name": "simulacrum",
        "timestamp": 1597616576
    },
    {
        "content": "<p>I meant you're not on NixOS and you're the one who has to run docker</p>",
        "id": 207092804,
        "sender_full_name": "eddyb",
        "timestamp": 1597616594
    },
    {
        "content": "<p>managed to run it</p>",
        "id": 207092812,
        "sender_full_name": "simulacrum",
        "timestamp": 1597616603
    },
    {
        "content": "<p>so I can stop looking at ELF headers :P</p>",
        "id": 207092823,
        "sender_full_name": "eddyb",
        "timestamp": 1597616619
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/207092783\">said</a>:</p>\n<blockquote>\n<p>I mean <span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> is not on NixOS and I'm not sending a docker image over lol</p>\n</blockquote>\n<p>eh, I mean it spits out a tarball at you anyway, so you just <code>nix-build &amp;&amp; xz -9 result</code> and upload much the same way you did above.</p>",
        "id": 207092869,
        "sender_full_name": "nagisa",
        "timestamp": 1597616655
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> btw beware that this is still sensitive to the PID length so uhhh keep only runs with the same PID length whoops</p>",
        "id": 207092871,
        "sender_full_name": "eddyb",
        "timestamp": 1597616680
    },
    {
        "content": "<p>hmm</p>",
        "id": 207092874,
        "sender_full_name": "simulacrum",
        "timestamp": 1597616687
    },
    {
        "content": "<p>I could've patched this, but I didn't think much through it</p>",
        "id": 207092875,
        "sender_full_name": "eddyb",
        "timestamp": 1597616692
    },
    {
        "content": "<p>does that get spit out anywhere?</p>",
        "id": 207092876,
        "sender_full_name": "simulacrum",
        "timestamp": 1597616693
    },
    {
        "content": "<p>assuming it actually prints anything</p>",
        "id": 207092877,
        "sender_full_name": "eddyb",
        "timestamp": 1597616700
    },
    {
        "content": "<p>if you don't get any stderr output, it's broken</p>",
        "id": 207092883,
        "sender_full_name": "eddyb",
        "timestamp": 1597616710
    },
    {
        "content": "<p>no I am</p>",
        "id": 207092886,
        "sender_full_name": "simulacrum",
        "timestamp": 1597616717
    },
    {
        "content": "<p>the PID is on that line</p>",
        "id": 207092888,
        "sender_full_name": "eddyb",
        "timestamp": 1597616730
    },
    {
        "content": "<p>so far, with <a href=\"http://cpuid-test.sh\">cpuid-test.sh</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code>core-19 instructions:u=43525734060\ncore-25 instructions:u=43525741970\ncore-31 instructions:u=43525735298\ncore-37 instructions:u=43525737872\ncore-43 instructions:u=43525737524\ncore-49 instructions:u=43525739793\ncore-55 instructions:u=43525739084\n</code></pre></div>",
        "id": 207092889,
        "sender_full_name": "simulacrum",
        "timestamp": 1597616732
    },
    {
        "content": "<p>lmao you have 2-digit PIDs</p>",
        "id": 207092892,
        "sender_full_name": "eddyb",
        "timestamp": 1597616739
    },
    {
        "content": "<p>well it is in docker</p>",
        "id": 207092898,
        "sender_full_name": "simulacrum",
        "timestamp": 1597616745
    },
    {
        "content": "<p>I don't think I've ever come across any. oh that makes sense</p>",
        "id": 207092906,
        "sender_full_name": "eddyb",
        "timestamp": 1597616751
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>core-19 instructions:u=43525734060\ncore-25 instructions:u=43525741970\ncore-31 instructions:u=43525735298\ncore-37 instructions:u=43525737872\ncore-43 instructions:u=43525737524\ncore-49 instructions:u=43525739793\ncore-55 instructions:u=43525739084\ncore-61 instructions:u=43525742087\ncore-67 instructions:u=43525737148\ncore-73 instructions:u=43525735965\n</code></pre></div>",
        "id": 207092909,
        "sender_full_name": "simulacrum",
        "timestamp": 1597616755
    },
    {
        "content": "<p>it probably doesn't matter which length it is as long as we don't compare across different PID lengths</p>",
        "id": 207092962,
        "sender_full_name": "eddyb",
        "timestamp": 1597616805
    },
    {
        "content": "<p>gah I guess we need to redo it in the 100s</p>",
        "id": 207092963,
        "sender_full_name": "simulacrum",
        "timestamp": 1597616812
    },
    {
        "content": "<p>oh you crossed over?</p>",
        "id": 207092968,
        "sender_full_name": "eddyb",
        "timestamp": 1597616823
    },
    {
        "content": "<p>yeah, on lfence</p>",
        "id": 207092971,
        "sender_full_name": "simulacrum",
        "timestamp": 1597616830
    },
    {
        "content": "<p>I use up 6 pids every run</p>",
        "id": 207092976,
        "sender_full_name": "simulacrum",
        "timestamp": 1597616855
    },
    {
        "content": "<p>fascinating</p>",
        "id": 207092978,
        "sender_full_name": "eddyb",
        "timestamp": 1597616862
    },
    {
        "content": "<p>I never saw a proper colleration because this is a multi-purpose server</p>",
        "id": 207092980,
        "sender_full_name": "eddyb",
        "timestamp": 1597616875
    },
    {
        "content": "<p>so actually I need to get into the thousands I guess until I can fit both lfence and cpuid in same length</p>",
        "id": 207092982,
        "sender_full_name": "simulacrum",
        "timestamp": 1597616879
    },
    {
        "content": "<p>*correlation (wtf eddy)</p>",
        "id": 207092988,
        "sender_full_name": "eddyb",
        "timestamp": 1597616882
    },
    {
        "content": "<p>ughhh just run some short thing in a loop</p>",
        "id": 207093025,
        "sender_full_name": "eddyb",
        "timestamp": 1597616908
    },
    {
        "content": "<p>I should've just fixed this</p>",
        "id": 207093027,
        "sender_full_name": "eddyb",
        "timestamp": 1597616917
    },
    {
        "content": "<p>anyway get 10 of each or w/e and then <code>summarize summarize --json *.events</code></p>",
        "id": 207093033,
        "sender_full_name": "eddyb",
        "timestamp": 1597616945
    },
    {
        "content": "<p>I need to run summarize in between, right? Not after 20?</p>",
        "id": 207093085,
        "sender_full_name": "simulacrum",
        "timestamp": 1597617005
    },
    {
        "content": "<p>actually that will take forever so make sure you only run it for relevant files. also you can probably copy the summarize binary instead of building it inside the docker environment</p>",
        "id": 207093092,
        "sender_full_name": "eddyb",
        "timestamp": 1597617026
    },
    {
        "content": "<p>you can run it whenever you want</p>",
        "id": 207093093,
        "sender_full_name": "eddyb",
        "timestamp": 1597617032
    },
    {
        "content": "<p>the files aren't going away</p>",
        "id": 207093094,
        "sender_full_name": "eddyb",
        "timestamp": 1597617037
    },
    {
        "content": "<p>I'm a bit confused tbh what exactly I'm aiming for with the summarze</p>",
        "id": 207093101,
        "sender_full_name": "simulacrum",
        "timestamp": 1597617056
    },
    {
        "content": "<p>getting the JSON output so we can look at it</p>",
        "id": 207093105,
        "sender_full_name": "eddyb",
        "timestamp": 1597617065
    },
    {
        "content": "<p>but I thought it only accepted one event file?</p>",
        "id": 207093108,
        "sender_full_name": "simulacrum",
        "timestamp": 1597617081
    },
    {
        "content": "<p>like I can give you a <code>jq</code> command that will combine 10 files into a report of sorts</p>",
        "id": 207093109,
        "sender_full_name": "eddyb",
        "timestamp": 1597617082
    },
    {
        "content": "<p>aaah sorry</p>",
        "id": 207093113,
        "sender_full_name": "eddyb",
        "timestamp": 1597617088
    },
    {
        "content": "<p><code>echo core-*.events | xargs -n1 summarize summarize --json</code></p>",
        "id": 207093115,
        "sender_full_name": "eddyb",
        "timestamp": 1597617101
    },
    {
        "content": "<p>I forgot I have to do that</p>",
        "id": 207093116,
        "sender_full_name": "eddyb",
        "timestamp": 1597617105
    },
    {
        "content": "<p>(replace the <code>*</code> with <code>{123,456,...}</code> if you have too many files that you don't want to waste time on)</p>",
        "id": 207093159,
        "sender_full_name": "eddyb",
        "timestamp": 1597617126
    },
    {
        "content": "<p>okay well we'll be in the 10000s because my loop was faster than expected (once I fixed the fact that echo is a bash primitive)</p>",
        "id": 207093161,
        "sender_full_name": "simulacrum",
        "timestamp": 1597617140
    },
    {
        "content": "<p>that's fine, 5-digit is my most common</p>",
        "id": 207093167,
        "sender_full_name": "eddyb",
        "timestamp": 1597617159
    },
    {
        "content": "<p>presumably because there are only 27k or so 6-digit PIDs (not sure why they seem to be 17-bit?)</p>",
        "id": 207093172,
        "sender_full_name": "eddyb",
        "timestamp": 1597617192
    },
    {
        "content": "<p>okay, so to double check:</p>\n<ul>\n<li>run <a href=\"http://lfence-test.sh\">lfence-test.sh</a> 10 times</li>\n<li>grab summarize output, with <code>echo core-*.events | xargs -n1 summarize summarize --json</code>, pasting that into some gist or whatever</li>\n<li>run <a href=\"http://cpuid-test.sh\">cpuid-test.sh</a> 10 times</li>\n<li>repeat summarize</li>\n</ul>",
        "id": 207093177,
        "sender_full_name": "simulacrum",
        "timestamp": 1597617234
    },
    {
        "content": "<p>you can do all the summarize and analysis after you run all 20</p>",
        "id": 207093214,
        "sender_full_name": "eddyb",
        "timestamp": 1597617253
    },
    {
        "content": "<p>it's easier that way IME</p>",
        "id": 207093217,
        "sender_full_name": "eddyb",
        "timestamp": 1597617257
    },
    {
        "content": "<p>actually I can just give you the commands to run if you give me each of the 10 outputs</p>",
        "id": 207093221,
        "sender_full_name": "eddyb",
        "timestamp": 1597617269
    },
    {
        "content": "<p>hm but don't we want it for each? I thought we were comparing the two?</p>",
        "id": 207093222,
        "sender_full_name": "simulacrum",
        "timestamp": 1597617270
    },
    {
        "content": "<p>I can just upload another tarball of the raw event files too</p>",
        "id": 207093229,
        "sender_full_name": "simulacrum",
        "timestamp": 1597617289
    },
    {
        "content": "<p>it's a waste of time, I have no way to analyze them beyond what's in the JSONs</p>",
        "id": 207093234,
        "sender_full_name": "eddyb",
        "timestamp": 1597617302
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> okay so maybe I should give you an example of my process</p>",
        "id": 207093242,
        "sender_full_name": "eddyb",
        "timestamp": 1597617328
    },
    {
        "content": "<p>I format the PIDs into the bracket notation, then:<br>\n<code>echo core-{14168,14298,14482,14614,14722,14880,15012,15209,15324,15455} | xargs -n1 summarize summarize --json</code><br>\nafter which I can run a series of jq commands on the JSON files</p>",
        "id": 207093285,
        "sender_full_name": "eddyb",
        "timestamp": 1597617374
    },
    {
        "content": "<p><code>cat core-{14168,14298,14482,14614,14722,14880,15012,15209,15324,15455}.json | jq -Cs 'map(.query_data) | transpose | map({key: .[0].label, count: .[0].invocation_count, values: map(.self_time | (.secs*1e9+.nanos))}) | map(.+{variance: (.count as $count | .values | map(./$count) | ((max-min)/2))}) | sort_by(.variance) | reverse | map(.+{value: .variance}) | from_entries' | less</code></p>",
        "id": 207093305,
        "sender_full_name": "eddyb",
        "timestamp": 1597617447
    },
    {
        "content": "<p>something like this</p>",
        "id": 207093307,
        "sender_full_name": "eddyb",
        "timestamp": 1597617452
    },
    {
        "content": "<p>okay I have jq output, let me stick it in a gist</p>",
        "id": 207093420,
        "sender_full_name": "simulacrum",
        "timestamp": 1597617616
    },
    {
        "content": "<p>hm okay how do I disable color?!</p>",
        "id": 207093425,
        "sender_full_name": "simulacrum",
        "timestamp": 1597617662
    },
    {
        "content": "<p>trying -M</p>",
        "id": 207093428,
        "sender_full_name": "simulacrum",
        "timestamp": 1597617681
    },
    {
        "content": "<p><a href=\"https://gist.github.com/Mark-Simulacrum/51fc69dbd07af72a1d403e3b0d0eabfa\">https://gist.github.com/Mark-Simulacrum/51fc69dbd07af72a1d403e3b0d0eabfa</a></p>",
        "id": 207093481,
        "sender_full_name": "simulacrum",
        "timestamp": 1597617731
    },
    {
        "content": "<p>cpuid:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">{</span>\n  <span class=\"nt\">&quot;expand_crate&quot;</span><span class=\"p\">:</span> <span class=\"mi\">911</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;free_global_ctxt&quot;</span><span class=\"p\">:</span> <span class=\"mf\">696.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;drop_ast&quot;</span><span class=\"p\">:</span> <span class=\"mf\">652.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;hir_lowering&quot;</span><span class=\"p\">:</span> <span class=\"mi\">417</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;build_hir_map&quot;</span><span class=\"p\">:</span> <span class=\"mi\">242</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;generate_crate_metadata&quot;</span><span class=\"p\">:</span> <span class=\"mf\">185.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;AST_validation&quot;</span><span class=\"p\">:</span> <span class=\"mi\">182</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;setup_global_ctxt&quot;</span><span class=\"p\">:</span> <span class=\"mf\">169.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;resolve_crate&quot;</span><span class=\"p\">:</span> <span class=\"mi\">164</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;resolve_lifetimes&quot;</span><span class=\"p\">:</span> <span class=\"mi\">94</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;analysis&quot;</span><span class=\"p\">:</span> <span class=\"mi\">48</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;privacy_access_levels&quot;</span><span class=\"p\">:</span> <span class=\"mf\">21.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;self_profile_alloc_query_strings&quot;</span><span class=\"p\">:</span> <span class=\"mi\">21</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>lfence:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">{</span>\n  <span class=\"nt\">&quot;generate_crate_metadata&quot;</span><span class=\"p\">:</span> <span class=\"mi\">130243</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;death_checking&quot;</span><span class=\"p\">:</span> <span class=\"mi\">51652</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;wf_checking&quot;</span><span class=\"p\">:</span> <span class=\"mf\">29166.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;crate_lints&quot;</span><span class=\"p\">:</span> <span class=\"mi\">27651</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;typeck_item_bodies&quot;</span><span class=\"p\">:</span> <span class=\"mf\">18083.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;match_checking&quot;</span><span class=\"p\">:</span> <span class=\"mf\">13480.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;privacy_access_levels&quot;</span><span class=\"p\">:</span> <span class=\"mf\">10645.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;MIR_effect_checking&quot;</span><span class=\"p\">:</span> <span class=\"mi\">6678</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;type_check_crate&quot;</span><span class=\"p\">:</span> <span class=\"mf\">6337.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;analysis&quot;</span><span class=\"p\">:</span> <span class=\"mf\">6011.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;resolve_lifetimes&quot;</span><span class=\"p\">:</span> <span class=\"mi\">5045</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;check_private_in_public&quot;</span><span class=\"p\">:</span> <span class=\"mf\">3375.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;inferred_outlives_crate&quot;</span><span class=\"p\">:</span> <span class=\"mf\">2848.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;expand_crate&quot;</span><span class=\"p\">:</span> <span class=\"mi\">1087</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;crate_inherent_impls_overlap_check&quot;</span><span class=\"p\">:</span> <span class=\"mf\">899.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;module_lints&quot;</span><span class=\"p\">:</span> <span class=\"mf\">681.5</span><span class=\"p\">,</span>\n</code></pre></div>",
        "id": 207093500,
        "sender_full_name": "simulacrum",
        "timestamp": 1597617796
    },
    {
        "content": "<p>seems like definitely cpuid</p>",
        "id": 207093502,
        "sender_full_name": "simulacrum",
        "timestamp": 1597617806
    },
    {
        "content": "<p>oops the color is from <code>-C</code>, since I view them with less</p>",
        "id": 207093504,
        "sender_full_name": "eddyb",
        "timestamp": 1597617824
    },
    {
        "content": "<p>oh and my <code>$LESS</code> contains <code>R</code>, oops I forgot <code>less</code> has bad defaults</p>",
        "id": 207093516,
        "sender_full_name": "eddyb",
        "timestamp": 1597617836
    },
    {
        "content": "<p>wow that <code>lfence</code> output is much worse than any of mine, can you show me the 10 and 10 printed lines?</p>",
        "id": 207093577,
        "sender_full_name": "eddyb",
        "timestamp": 1597617877
    },
    {
        "content": "<p>I can easy throw them into a spreadsheet etc.</p>",
        "id": 207093580,
        "sender_full_name": "eddyb",
        "timestamp": 1597617884
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>lfence:\ncore-10239 instructions:u=43515148034\ncore-10245 instructions:u=43515151331\ncore-10251 instructions:u=43515155952\ncore-10257 instructions:u=43515149440\ncore-10263 instructions:u=43515150868\ncore-10269 instructions:u=43515160064\ncore-10275 instructions:u=43515155889\ncore-10281 instructions:u=43515154408\ncore-10287 instructions:u=43515163551\ncore-10293 instructions:u=43515155459\n10239,10245,10251,10257,10263,10269,10275,10281,10287,10293\n\ncpuid:\ncore-10303 instructions:u=43523480492\ncore-10309 instructions:u=43523491249\ncore-10315 instructions:u=43523486253\ncore-10321 instructions:u=43523481456\ncore-10327 instructions:u=43523484773\ncore-10333 instructions:u=43523486601\ncore-10339 instructions:u=43523495003\ncore-10345 instructions:u=43523482209\ncore-10351 instructions:u=43523500676\ncore-10357 instructions:u=43523482799\n10303,10309,10315,10321,10327,10333,10339,10345,10351,10357\n</code></pre></div>",
        "id": 207093598,
        "sender_full_name": "simulacrum",
        "timestamp": 1597617942
    },
    {
        "content": "<p>fascinating</p>",
        "id": 207093652,
        "sender_full_name": "eddyb",
        "timestamp": 1597618015
    },
    {
        "content": "<p>the totals have less variance in lfence, but both are acceptable, so you don't have any weird outliers, at least not in the lfence data</p>",
        "id": 207093658,
        "sender_full_name": "eddyb",
        "timestamp": 1597618051
    },
    {
        "content": "<p>I wonder if your kernel doesn't set that bit that makes lfence serializing. but even w/o lfence I had less trouble than it does here, huh</p>",
        "id": 207093707,
        "sender_full_name": "eddyb",
        "timestamp": 1597618120
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> to see the individual values, replace <code>map(.+{value: .variance})</code> with <code>map(.+{value: .values})</code></p>",
        "id": 207093712,
        "sender_full_name": "eddyb",
        "timestamp": 1597618135
    },
    {
        "content": "<p>(that's part of why that command is so long: keep the sorting but extract different aspects)</p>",
        "id": 207093720,
        "sender_full_name": "eddyb",
        "timestamp": 1597618154
    },
    {
        "content": "<p>e.g. the ones from lfence's <code>generate_crate_metadata</code> might be interesting to look at</p>",
        "id": 207093767,
        "sender_full_name": "eddyb",
        "timestamp": 1597618205
    },
    {
        "content": "<p>if they're uniformly distributed, then it's really broken. if not, that might just be an unlucky run that you can exclude to get slightly less noisy data etc.</p>",
        "id": 207093784,
        "sender_full_name": "eddyb",
        "timestamp": 1597618242
    },
    {
        "content": "<p>but it applying to so many queries... ugh</p>",
        "id": 207093788,
        "sender_full_name": "eddyb",
        "timestamp": 1597618254
    },
    {
        "content": "<p>lfence values <a href=\"https://gist.githubusercontent.com/Mark-Simulacrum/6797708b57b0ff5d3bdf10d85ab4c19d/raw/0cb0f6d6e3a8af5cabcc1b29dad05980578c9280/lfence-values.json\">https://gist.githubusercontent.com/Mark-Simulacrum/6797708b57b0ff5d3bdf10d85ab4c19d/raw/0cb0f6d6e3a8af5cabcc1b29dad05980578c9280/lfence-values.json</a></p>",
        "id": 207093800,
        "sender_full_name": "simulacrum",
        "timestamp": 1597618277
    },
    {
        "content": "<p>and cpuid, in case it matters: <a href=\"https://gist.github.com/Mark-Simulacrum/9e84fea85a8e92fbf1894b20aa494f8e\">https://gist.github.com/Mark-Simulacrum/9e84fea85a8e92fbf1894b20aa494f8e</a></p>",
        "id": 207093808,
        "sender_full_name": "simulacrum",
        "timestamp": 1597618307
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I wonder if there is actually a correlation between newer hardware and measurement noise... maybe the IPC increases lead to more instructions being counted on the wrong side of the <code>rdpmc</code>?</p>",
        "id": 207093862,
        "sender_full_name": "eddyb",
        "timestamp": 1597618355
    },
    {
        "content": "<p>hm seems... not implausible</p>",
        "id": 207093875,
        "sender_full_name": "simulacrum",
        "timestamp": 1597618401
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> if you re-run the first jq command, for lfence, but with 10287 (second to last) taken out of the PID list, is is still wild?</p>",
        "id": 207093955,
        "sender_full_name": "eddyb",
        "timestamp": 1597618545
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/p-zNnNmW3267WXypOpTMOZcV/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/p-zNnNmW3267WXypOpTMOZcV/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/p-zNnNmW3267WXypOpTMOZcV/image.png\"></a></div>",
        "id": 207094004,
        "sender_full_name": "eddyb",
        "timestamp": 1597618583
    },
    {
        "content": "<p>this is why I'm saying that</p>",
        "id": 207094007,
        "sender_full_name": "eddyb",
        "timestamp": 1597618591
    },
    {
        "content": "<p>lfence head without that one:</p>\n<p>{<br>\n  \"death_checking\": 51652,<br>\n  \"generate_crate_metadata\": 40165,<br>\n  \"wf_checking\": 29166.5,<br>\n  \"typeck_item_bodies\": 18083.5,<br>\n  \"match_checking\": 13480.5,<br>\n  \"MIR_effect_checking\": 6678,<br>\n  \"type_check_crate\": 6055,<br>\n  \"analysis\": 6011.5,<br>\n  \"resolve_lifetimes\": 5038,<br>\n  \"crate_lints\": 3721.5,</p>",
        "id": 207094010,
        "sender_full_name": "simulacrum",
        "timestamp": 1597618601
    },
    {
        "content": "<p>(the problem is that we haven't accounted for all sources of non-determinism so we could still have \"bad runs\")</p>",
        "id": 207094015,
        "sender_full_name": "eddyb",
        "timestamp": 1597618616
    },
    {
        "content": "<p>okay yeah it's still really bad wow</p>",
        "id": 207094022,
        "sender_full_name": "eddyb",
        "timestamp": 1597618625
    },
    {
        "content": "<p>your cpuid numbers are like my lfence ones, on Zen 1</p>",
        "id": 207094034,
        "sender_full_name": "eddyb",
        "timestamp": 1597618675
    },
    {
        "content": "<p>but nowhere near as good as what I get on Ivy Bridge</p>",
        "id": 207094081,
        "sender_full_name": "eddyb",
        "timestamp": 1597618718
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> btw feel free to get another 10 on lfence and see if the problem persists</p>",
        "id": 207094093,
        "sender_full_name": "eddyb",
        "timestamp": 1597618742
    },
    {
        "content": "<p>that's usually what I do. but it's likely that's more or less what we'll get on that</p>",
        "id": 207094101,
        "sender_full_name": "eddyb",
        "timestamp": 1597618758
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> so is that the hardware <a href=\"http://perf.rust-lang.org\">perf.rust-lang.org</a> collection is done on?</p>",
        "id": 207094109,
        "sender_full_name": "eddyb",
        "timestamp": 1597618772
    },
    {
        "content": "<p>yeah</p>",
        "id": 207094200,
        "sender_full_name": "simulacrum",
        "timestamp": 1597618807
    },
    {
        "content": "<p>getting another 10 on lfence</p>",
        "id": 207094209,
        "sender_full_name": "simulacrum",
        "timestamp": 1597618838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> what's this on, Ryzen 3rd gen (Zen 2)?</p>",
        "id": 207094549,
        "sender_full_name": "eddyb",
        "timestamp": 1597619304
    },
    {
        "content": "<p>AMD Ryzen 5 3600 6-Core Processor so I think so</p>",
        "id": 207094560,
        "sender_full_name": "simulacrum",
        "timestamp": 1597619355
    },
    {
        "content": "<p>errr I meant 3rd gen yeah</p>",
        "id": 207094568,
        "sender_full_name": "eddyb",
        "timestamp": 1597619367
    },
    {
        "content": "<p>thanks. I'll try to find someone with a recent intel</p>",
        "id": 207094571,
        "sender_full_name": "eddyb",
        "timestamp": 1597619396
    },
    {
        "content": "<p>hm no new lfence is still just as bad</p>\n<div class=\"codehilite\"><pre><span></span><code>{\n  &quot;generate_crate_metadata&quot;: 140926.5,\n  &quot;death_checking&quot;: 74773.5,\n  &quot;wf_checking&quot;: 32379.5,\n  &quot;crate_lints&quot;: 27772.5,\n  &quot;typeck_item_bodies&quot;: 19102,\n  &quot;match_checking&quot;: 11496,\n  &quot;type_check_crate&quot;: 9371,\n  &quot;privacy_access_levels&quot;: 8393.5,\n  &quot;resolve_lifetimes&quot;: 6870.5,\n  &quot;analysis&quot;: 6784.5,\n\ncore-10394 instructions:u=43515149852\ncore-10400 instructions:u=43515153805\ncore-10406 instructions:u=43515155901\ncore-10412 instructions:u=43515163472\ncore-10418 instructions:u=43515151332\ncore-10424 instructions:u=43515156056\ncore-10430 instructions:u=43515152366\ncore-10436 instructions:u=43515153840\ncore-10442 instructions:u=43515151231\ncore-10448 instructions:u=43515152978\n</code></pre></div>",
        "id": 207094635,
        "sender_full_name": "simulacrum",
        "timestamp": 1597619494
    },
    {
        "content": "<p>how recent of an intel do you need?</p>",
        "id": 207094701,
        "sender_full_name": "nagisa",
        "timestamp": 1597619641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> closer to today than to 2013 :P</p>",
        "id": 207094759,
        "sender_full_name": "eddyb",
        "timestamp": 1597619739
    },
    {
        "content": "<p>so anything from the past few years</p>",
        "id": 207094761,
        "sender_full_name": "eddyb",
        "timestamp": 1597619749
    },
    {
        "content": "<p>like Zen 1 EPYC is 2017, anything from that era or newer should be relevant</p>",
        "id": 207094807,
        "sender_full_name": "eddyb",
        "timestamp": 1597619770
    },
    {
        "content": "<p>I have physical access to haswell and can spin up a gcloud vm of anything that it has.</p>",
        "id": 207094809,
        "sender_full_name": "nagisa",
        "timestamp": 1597619773
    },
    {
        "content": "<p>I'd expect haswell to be similar to my laptop, but if it has more cores it would be interesting</p>",
        "id": 207094818,
        "sender_full_name": "eddyb",
        "timestamp": 1597619805
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> okay that's good to know so we're pretty much only left with <code>cpuid</code></p>",
        "id": 207094825,
        "sender_full_name": "eddyb",
        "timestamp": 1597619826
    },
    {
        "content": "<p>I can check on ryzen 3950x as well I guess, but that's also a shared machine so probably noisier</p>",
        "id": 207094831,
        "sender_full_name": "simulacrum",
        "timestamp": 1597619853
    },
    {
        "content": "<p>it shouldn't be possible for it to be noisier, though?</p>",
        "id": 207094836,
        "sender_full_name": "eddyb",
        "timestamp": 1597619872
    },
    {
        "content": "<p>except for hardware bugs and the kernel failing to perfectly stop and start the counters etc.</p>",
        "id": 207094880,
        "sender_full_name": "eddyb",
        "timestamp": 1597619906
    },
    {
        "content": "<p>the Ivy Bridge is my laptop running a browser</p>",
        "id": 207094884,
        "sender_full_name": "eddyb",
        "timestamp": 1597619925
    },
    {
        "content": "<p>yeah its counting instructions… this is so mind-bending too… like \"eh maybe its that, no but its counting instructions… maybe its turbo? instructions. Power saving? instructions!\"</p>",
        "id": 207094889,
        "sender_full_name": "nagisa",
        "timestamp": 1597619937
    },
    {
        "content": "<p>heh yeah except for IO I'd expect to have 0 variance with ASLR disabled</p>",
        "id": 207094896,
        "sender_full_name": "eddyb",
        "timestamp": 1597619965
    },
    {
        "content": "<p>gcloud has anything from sandy bridge to cascade lake</p>",
        "id": 207094898,
        "sender_full_name": "nagisa",
        "timestamp": 1597619973
    },
    {
        "content": "<p>if you want to play around with this, cascade lake seems more relevant</p>",
        "id": 207094908,
        "sender_full_name": "eddyb",
        "timestamp": 1597620002
    },
    {
        "content": "<p>like I wonder if Intel has managed to make their CPUs as noisy as AMD, and/or if the AMD hardware bugs are relevant</p>",
        "id": 207094950,
        "sender_full_name": "eddyb",
        "timestamp": 1597620025
    },
    {
        "content": "<p>/me patchelfs the interp and back to nix world</p>",
        "id": 207095307,
        "sender_full_name": "nagisa",
        "timestamp": 1597620741
    },
    {
        "content": "<p>on 3950x:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ head -n11 cpuid\n{\n  &quot;drop_ast&quot;: 530,\n  &quot;free_global_ctxt&quot;: 438.5,\n  &quot;expand_crate&quot;: 408.5,\n  &quot;resolve_crate&quot;: 359,\n  &quot;generate_crate_metadata&quot;: 211.5,\n  &quot;build_hir_map&quot;: 194,\n  &quot;resolve_lifetimes&quot;: 147.5,\n  &quot;hir_lowering&quot;: 128,\n  &quot;wf_checking&quot;: 119,\n  &quot;AST_validation&quot;: 109,\n$ head -n11 lfence\n{\n  &quot;wf_checking&quot;: 89191,\n  &quot;generate_crate_metadata&quot;: 46524.5,\n  &quot;type_check_crate&quot;: 37893,\n  &quot;death_checking&quot;: 20512,\n  &quot;match_checking&quot;: 14341,\n  &quot;typeck_item_bodies&quot;: 13185,\n  &quot;analysis&quot;: 7043,\n  &quot;resolve_lifetimes&quot;: 5680.5,\n  &quot;MIR_borrow_checking&quot;: 5393,\n  &quot;MIR_effect_checking&quot;: 4347.5,\n</code></pre></div>",
        "id": 207095374,
        "sender_full_name": "simulacrum",
        "timestamp": 1597620889
    },
    {
        "content": "<p>on intel from 2017 (Intel(R) Xeon(R) Gold 6130 CPU @ 2.10GHz)</p>\n<div class=\"codehilite\"><pre><span></span><code>[nix-shell:~/nagisa/rdpmc-self-contained]$ for i in $(seq 1 10); do ./cpuid-test.sh ; done\ncore-37077 instructions:u=43387365592\ncore-37084 instructions:u=43387372275\ncore-37090 instructions:u=43387374783\ncore-37096 instructions:u=43387372464\ncore-37102 instructions:u=43387372209\ncore-37108 instructions:u=43387369313\ncore-37602 instructions:u=43387374764\ncore-37608 instructions:u=43387375390\ncore-37614 instructions:u=43387369938\ncore-37620 instructions:u=43387371590\n\n[nix-shell:~/nagisa/rdpmc-self-contained]$ for i in $(seq 1 10); do ./lfence-test.sh ; done\ncore-37627 instructions:u=43374800757\ncore-38121 instructions:u=43374805328\ncore-38127 instructions:u=43374809346\ncore-38133 instructions:u=43374809580\ncore-38139 instructions:u=43374802446\ncore-38145 instructions:u=43374803511\ncore-38151 instructions:u=43374805686\ncore-38520 instructions:u=43374869667\ncore-38692 instructions:u=43374808695\ncore-38698 instructions:u=43374811197\n</code></pre></div>",
        "id": 207095528,
        "sender_full_name": "nagisa",
        "timestamp": 1597621182
    },
    {
        "content": "<p>no idea what else I should run if anything ^^</p>",
        "id": 207095573,
        "sender_full_name": "nagisa",
        "timestamp": 1597621220
    },
    {
        "content": "<p>you need to install measureme tooling, then  <code>echo core-{14168,14298,14482,14614,14722,14880,15012,15209,15324,15455} | xargs -n1 summarize summarize --json</code> with the pid list from each (or just all of the files, doesn't matter) and then <code>cat core-{14168,14298,14482,14614,14722,14880,15012,15209,15324,15455}.json | jq -Cs 'map(.query_data) | transpose | map({key: .[0].label, count: .[0].invocation_count, values: map(.self_time | (.secs*1e9+.nanos))}) | map(.+{variance: (.count as $count | .values | map(./$count) | ((max-min)/2))}) | sort_by(.variance) | reverse | map(.+{value: .variance}) | from_entries' -M | head -n11</code> with pid lists for each</p>",
        "id": 207095634,
        "sender_full_name": "simulacrum",
        "timestamp": 1597621332
    },
    {
        "content": "<p>cpuid:</p>\n<div class=\"codehilite\"><pre><span></span><code>  &quot;hir_lowering&quot;: 22187,\n  &quot;expand_crate&quot;: 11248.5,\n  &quot;analysis&quot;: 10441,\n  &quot;AST_validation&quot;: 10172,\n  &quot;early_lint_checks&quot;: 8434,\n  &quot;build_hir_map&quot;: 4198,\n  &quot;stability_index&quot;: 1677,\n  &quot;resolve_crate&quot;: 1414.5,\n  &quot;type_check_crate&quot;: 1397.5,\n  &quot;proc_macro_decls_static&quot;: 1058.5,\n</code></pre></div>\n\n\n<p>lfence:</p>\n<div class=\"codehilite\"><pre><span></span><code>  &quot;expand_crate&quot;: 17514,\n  &quot;AST_validation&quot;: 16109,\n  &quot;hir_lowering&quot;: 9436,\n  &quot;early_lint_checks&quot;: 5784,\n  &quot;build_hir_map&quot;: 4683.5,\n  &quot;free_global_ctxt&quot;: 3837.5,\n  &quot;privacy_access_levels&quot;: 2545.5,\n  &quot;MIR_effect_checking&quot;: 2448.5,\n  &quot;type_check_crate&quot;: 2144.5,\n  &quot;typeck_item_bodies&quot;: 1713.5,\n</code></pre></div>",
        "id": 207095887,
        "sender_full_name": "nagisa",
        "timestamp": 1597621884
    },
    {
        "content": "<p>both seem equally bad to me ^^</p>",
        "id": 207095930,
        "sender_full_name": "nagisa",
        "timestamp": 1597621934
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> yeah so intel looks... just bad all around?</p>",
        "id": 207096047,
        "sender_full_name": "simulacrum",
        "timestamp": 1597622227
    },
    {
        "content": "<p>in fact on intel cpuid is worse I think?</p>",
        "id": 207096049,
        "sender_full_name": "simulacrum",
        "timestamp": 1597622246
    },
    {
        "content": "<p>only on for hir_lowering at low end lfence is worse than cpuid</p>",
        "id": 207096264,
        "sender_full_name": "nagisa",
        "timestamp": 1597622528
    },
    {
        "content": "<p>might want to aggregate those variances somehow</p>",
        "id": 207096267,
        "sender_full_name": "nagisa",
        "timestamp": 1597622545
    },
    {
        "content": "<p>either into an average or a sum or something.</p>",
        "id": 207096270,
        "sender_full_name": "nagisa",
        "timestamp": 1597622551
    },
    {
        "content": "<p>oh I looked wrong, misplaced the comma in expand_crate on cpuid</p>",
        "id": 207096343,
        "sender_full_name": "simulacrum",
        "timestamp": 1597622707
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I think it's more like \"modern CPUs are worse\"</p>",
        "id": 207096463,
        "sender_full_name": "eddyb",
        "timestamp": 1597622971
    },
    {
        "content": "<p>my Ivy Bridge is better than anything newer so far</p>",
        "id": 207096464,
        "sender_full_name": "eddyb",
        "timestamp": 1597622986
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> you can try looking at lfence again without 38520 if you want, its total is way off</p>",
        "id": 207096539,
        "sender_full_name": "eddyb",
        "timestamp": 1597623065
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  &quot;expand_crate&quot;: 17514,\n  &quot;AST_validation&quot;: 16109,\n  &quot;hir_lowering&quot;: 9436,\n  &quot;early_lint_checks&quot;: 5784,\n  &quot;build_hir_map&quot;: 4683.5,\n  &quot;resolve_crate&quot;: 1523,\n  &quot;type_check_crate&quot;: 501,\n  &quot;crate_variances&quot;: 218.5,\n  &quot;MIR_borrow_checking&quot;: 171.5,\n  &quot;MIR_effect_checking&quot;: 143,\n</code></pre></div>",
        "id": 207096591,
        "sender_full_name": "nagisa",
        "timestamp": 1597623130
    },
    {
        "content": "<p>2017 intel is older than 3950x I think, but those are two different timescales</p>",
        "id": 207096597,
        "sender_full_name": "simulacrum",
        "timestamp": 1597623159
    },
    {
        "content": "<p>isn't 3950x from 2020?</p>",
        "id": 207096605,
        "sender_full_name": "eddyb",
        "timestamp": 1597623181
    },
    {
        "content": "<p>or maybe 2019</p>",
        "id": 207096611,
        "sender_full_name": "eddyb",
        "timestamp": 1597623201
    },
    {
        "content": "<p>June 11, 2019 (announced)<br>\nNovember 25, 2019 (launched)</p>",
        "id": 207096612,
        "sender_full_name": "simulacrum",
        "timestamp": 1597623203
    },
    {
        "content": "<p>I can go ahead and spawn the lake thing on gcp too, just had this broadwell(?) laying around doing nothing, so figured I could just do the test on it first.</p>",
        "id": 207096613,
        "sender_full_name": "nagisa",
        "timestamp": 1597623207
    },
    {
        "content": "<p>sounds good. even this is already really useful, thanks!</p>",
        "id": 207096617,
        "sender_full_name": "eddyb",
        "timestamp": 1597623224
    },
    {
        "content": "<p>it does lend credence to the idea that more modern CPUs are noisier</p>",
        "id": 207096664,
        "sender_full_name": "eddyb",
        "timestamp": 1597623252
    },
    {
        "content": "<p>hm 3950x is less noisy though than the 2017 chip?</p>\n<div class=\"codehilite\"><pre><span></span><code>  &quot;drop_ast&quot;: 530,\n  &quot;free_global_ctxt&quot;: 438.5,\n  &quot;expand_crate&quot;: 408.5,\n  &quot;resolve_crate&quot;: 359,\n  &quot;generate_crate_metadata&quot;: 211.5,\n  &quot;build_hir_map&quot;: 194,\n  &quot;resolve_lifetimes&quot;: 147.5,\n  &quot;hir_lowering&quot;: 128,\n  &quot;wf_checking&quot;: 119,\n  &quot;AST_validation&quot;: 109,\n</code></pre></div>\n\n\n<p>is the cpuid data from 3950x</p>",
        "id": 207096675,
        "sender_full_name": "simulacrum",
        "timestamp": 1597623318
    },
    {
        "content": "<p>and 3600 is similar:</p>\n<div class=\"codehilite\"><pre><span></span><code>  &quot;expand_crate&quot;: 911,\n  &quot;free_global_ctxt&quot;: 696.5,\n  &quot;drop_ast&quot;: 652.5,\n  &quot;hir_lowering&quot;: 417,\n  &quot;build_hir_map&quot;: 242,\n  &quot;generate_crate_metadata&quot;: 185.5,\n  &quot;AST_validation&quot;: 182,\n  &quot;setup_global_ctxt&quot;: 169.5,\n  &quot;resolve_crate&quot;: 164,\n  &quot;resolve_lifetimes&quot;: 94,\n  &quot;analysis&quot;: 48,\n  &quot;privacy_access_levels&quot;: 21.5,\n  &quot;self_profile_alloc_query_strings&quot;: 21\n</code></pre></div>",
        "id": 207096687,
        "sender_full_name": "simulacrum",
        "timestamp": 1597623351
    },
    {
        "content": "<p>I think it's gotten better from Zen 1 to Zen 2 but overall worse from Ivy Bridge</p>",
        "id": 207096736,
        "sender_full_name": "eddyb",
        "timestamp": 1597623399
    },
    {
        "content": "<p>ftr this is Ivy Bridge top 3:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">{</span>\n  <span class=\"nt\">&quot;expand_crate&quot;</span><span class=\"p\">:</span> <span class=\"mf\">118.5</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;resolve_crate&quot;</span><span class=\"p\">:</span> <span class=\"mi\">36</span><span class=\"p\">,</span>\n  <span class=\"nt\">&quot;stability_index&quot;</span><span class=\"p\">:</span> <span class=\"mf\">18.5</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 207096750,
        "sender_full_name": "eddyb",
        "timestamp": 1597623439
    },
    {
        "content": "<p>is that some hardware you have (vs. <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span>'s data?)</p>",
        "id": 207096752,
        "sender_full_name": "simulacrum",
        "timestamp": 1597623455
    },
    {
        "content": "<p>it's my X230 thinkpad from 2013</p>",
        "id": 207096753,
        "sender_full_name": "eddyb",
        "timestamp": 1597623469
    },
    {
        "content": "<p>which I didn't expect would be useful for perf measurement but if we're measuring instructions... it works surprisingly well lol</p>",
        "id": 207096793,
        "sender_full_name": "eddyb",
        "timestamp": 1597623521
    },
    {
        "content": "<p>aha yeah, so it definitely seems like intel got way worse (and maybe better since 2017, though)</p>\n<p>amd has improved from zen 1 to zen 2 and is in the 1k range</p>",
        "id": 207096795,
        "sender_full_name": "simulacrum",
        "timestamp": 1597623522
    },
    {
        "content": "<p>I'm trying to think through what we're not accounting for here. the quality of data should improve with the number of cores, right? less multithreading pressure, less chances for something weird to happen... but maybe not</p>",
        "id": 207096864,
        "sender_full_name": "eddyb",
        "timestamp": 1597623647
    },
    {
        "content": "<p>like my laptop's Ivy Bridge i7 is actually 2C/4T (because it's a mobile part)</p>",
        "id": 207096871,
        "sender_full_name": "eddyb",
        "timestamp": 1597623677
    },
    {
        "content": "<p>and I'm running firefox and VSCode on it</p>",
        "id": 207096874,
        "sender_full_name": "eddyb",
        "timestamp": 1597623696
    },
    {
        "content": "<p>and yet the data is <em>really good</em></p>",
        "id": 207096878,
        "sender_full_name": "eddyb",
        "timestamp": 1597623708
    },
    {
        "content": "<p>3950x has 16C/32T<br>\n3600 has 6C/12T</p>",
        "id": 207096879,
        "sender_full_name": "simulacrum",
        "timestamp": 1597623709
    },
    {
        "content": "<p>maybe mobile parts speculate less or something?</p>",
        "id": 207096921,
        "sender_full_name": "simulacrum",
        "timestamp": 1597623732
    },
    {
        "content": "<p>oh huh I never thought about that. it's not a different uarch tho, it just has less cores to keep the power budget down</p>",
        "id": 207096927,
        "sender_full_name": "eddyb",
        "timestamp": 1597623761
    },
    {
        "content": "<p>like I think it might be branded as i7 because of the cache size?</p>",
        "id": 207096928,
        "sender_full_name": "eddyb",
        "timestamp": 1597623778
    },
    {
        "content": "<p>I don't know much about intel's branding</p>",
        "id": 207096937,
        "sender_full_name": "simulacrum",
        "timestamp": 1597623800
    },
    {
        "content": "<p>but I'm not an expert at this</p>",
        "id": 207096938,
        "sender_full_name": "eddyb",
        "timestamp": 1597623803
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> hang on, Xeon Gold... could that be the redesign that Intel hasn't managed to put into its consumer line yet?</p>",
        "id": 207097013,
        "sender_full_name": "eddyb",
        "timestamp": 1597623845
    },
    {
        "content": "<p>like that might be a newer uarch than the latest i9 or w/e lmao</p>",
        "id": 207097022,
        "sender_full_name": "eddyb",
        "timestamp": 1597623865
    },
    {
        "content": "<p>well, more advanced</p>",
        "id": 207097026,
        "sender_full_name": "eddyb",
        "timestamp": 1597623871
    },
    {
        "content": "<p>doubt it.</p>",
        "id": 207097029,
        "sender_full_name": "nagisa",
        "timestamp": 1597623883
    },
    {
        "content": "<p>I was looking at this like a month or two ago and IIRC because of the fab issues with 10nm or w/e, they haven't been able to ship a major redesign for like half a decade</p>",
        "id": 207097039,
        "sender_full_name": "eddyb",
        "timestamp": 1597623915
    },
    {
        "content": "<p><em>except</em> for some higher-end Xeons</p>",
        "id": 207097045,
        "sender_full_name": "eddyb",
        "timestamp": 1597623929
    },
    {
        "content": "<p>(presumably because they're much lower quantity so the low yields weren't as big of an issue)</p>",
        "id": 207097053,
        "sender_full_name": "eddyb",
        "timestamp": 1597623953
    },
    {
        "content": "<p>this chip is from before 10nm production woes were even a public thing if I remember the events correctly.</p>",
        "id": 207097096,
        "sender_full_name": "nagisa",
        "timestamp": 1597623970
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> it's \"Skylake (server)\" which is a direct predecessor of Cascade Lake</p>",
        "id": 207097110,
        "sender_full_name": "eddyb",
        "timestamp": 1597624032
    },
    {
        "content": "<p>I wish there was a nicer way to view this information because I forgot the exact details</p>",
        "id": 207097161,
        "sender_full_name": "eddyb",
        "timestamp": 1597624097
    },
    {
        "content": "<blockquote>\n<p>Skylake server configuration introduces a number of significant changes from both Intel's previous microarchitecture, Broadwell, as well as the Skylake (client) architecture.</p>\n</blockquote>",
        "id": 207097168,
        "sender_full_name": "eddyb",
        "timestamp": 1597624117
    },
    {
        "content": "<p>oh right it's \"Cove\" that's the keyword I'm looking for</p>",
        "id": 207097224,
        "sender_full_name": "eddyb",
        "timestamp": 1597624214
    },
    {
        "content": "<p>oh nvm that's \"Ice Lake (server)\" that's switching to the \"Cove\" design</p>",
        "id": 207097238,
        "sender_full_name": "eddyb",
        "timestamp": 1597624265
    },
    {
        "content": "<p>but \"Ice Lake (client)\" also switches to \"Cove\". what.</p>",
        "id": 207097280,
        "sender_full_name": "eddyb",
        "timestamp": 1597624329
    },
    {
        "content": "<blockquote>\n<p>Palm Cove is the core microarchitecture that is found in Intel's Cannon Lake SoCs. Although originally intended to be mass manufactured for all client and server markets, due to Intel's prolong 10 nm process problems, Palm Cove is getting skipped with the exception of a single chip.</p>\n</blockquote>",
        "id": 207097300,
        "sender_full_name": "eddyb",
        "timestamp": 1597624395
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> okay I was misremembering Palm Cove as ending up in some Xeon Gold/Platinums</p>",
        "id": 207097301,
        "sender_full_name": "eddyb",
        "timestamp": 1597624409
    },
    {
        "content": "<p>but it's from 2018, I thought it was older</p>",
        "id": 207097304,
        "sender_full_name": "eddyb",
        "timestamp": 1597624422
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> aaaah okay I found the thing that confused me, it's just from last year I guess: \"Ice Lake (client)\" is actually mobile-only. 10th gen desktop is \"Comet Lake\"</p>",
        "id": 207097594,
        "sender_full_name": "eddyb",
        "timestamp": 1597624987
    },
    {
        "content": "<p>intel naming scheme and focused product stack™</p>",
        "id": 207097611,
        "sender_full_name": "nagisa",
        "timestamp": 1597625016
    },
    {
        "content": "<p>so this is the first generation with \"Cove\" cores: <a href=\"https://en.wikichip.org/wiki/intel/microarchitectures/ice_lake_(server)\">https://en.wikichip.org/wiki/intel/microarchitectures/ice_lake_(server)</a></p>",
        "id": 207097612,
        "sender_full_name": "eddyb",
        "timestamp": 1597625023
    },
    {
        "content": "<p>that's desktop or higher-end</p>",
        "id": 207097652,
        "sender_full_name": "eddyb",
        "timestamp": 1597625047
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> okay so I knew that the \"server\" line (higher-end Xeons, not E's, and maybe some i7/i9 X's?) was getting \"Cove\" a few generations earlier, but I guess it is tied to 10nm and the only low-volume 10nm parts were, well, just some mobile SoCs</p>",
        "id": 207097783,
        "sender_full_name": "eddyb",
        "timestamp": 1597625329
    },
    {
        "content": "<p>the Intel codenames are just absurd tbh</p>",
        "id": 207097795,
        "sender_full_name": "eddyb",
        "timestamp": 1597625358
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> so \"Cascade Lake\" is also in the \"highe-end server\" line, but it's only the next generation after \"Skylake (server)\", so the differences should be small</p>",
        "id": 207097854,
        "sender_full_name": "eddyb",
        "timestamp": 1597625454
    },
    {
        "content": "<p>but it does say there's spectre &amp; friends mitigations, so maybe that makes <code>rdpmc</code> more reliable?</p>",
        "id": 207097858,
        "sender_full_name": "eddyb",
        "timestamp": 1597625469
    },
    {
        "content": "<p>lol this looks like an IBM mainframe <a href=\"https://en.wikichip.org/wiki/intel/microarchitectures/cascade_lake#Higher_core-count_multi-chip_processors\">https://en.wikichip.org/wiki/intel/microarchitectures/cascade_lake#Higher_core-count_multi-chip_processors</a></p>",
        "id": 207097911,
        "sender_full_name": "eddyb",
        "timestamp": 1597625557
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> anyway ignoring all that offtopic discussion, I think the conclusion is that a Xeon Gold may behave differently than a desktop/laptop i7/i9</p>",
        "id": 207098035,
        "sender_full_name": "eddyb",
        "timestamp": 1597625797
    },
    {
        "content": "<p>Intel started splitting the codenames after Broadwell</p>",
        "id": 207098037,
        "sender_full_name": "eddyb",
        "timestamp": 1597625822
    },
    {
        "content": "<p>and then the Lake nation attacked</p>",
        "id": 207098045,
        "sender_full_name": "eddyb",
        "timestamp": 1597625838
    },
    {
        "content": "<p>on the AMD side, I don't think people were taking it seriously before Zen, so at least I can pretend the history there doesn't matter</p>",
        "id": 207098091,
        "sender_full_name": "eddyb",
        "timestamp": 1597625886
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> looking at the <code>rdpmc</code> details for your Ryzen 5 3600, well, looks like you have L2 <em>and</em> L3 misses available</p>",
        "id": 207098293,
        "sender_full_name": "eddyb",
        "timestamp": 1597626216
    },
    {
        "content": "<p><em>and</em> micro-ops retired. that might be more accurate than instructions retired</p>",
        "id": 207098296,
        "sender_full_name": "eddyb",
        "timestamp": 1597626230
    },
    {
        "content": "<p>wait till you hear about the chinese x86 implementations and VIA's resurrection.</p>",
        "id": 207098300,
        "sender_full_name": "nagisa",
        "timestamp": 1597626235
    },
    {
        "content": "<p>the 3600 is the perf collector, btw</p>",
        "id": 207098339,
        "sender_full_name": "simulacrum",
        "timestamp": 1597626245
    },
    {
        "content": "<p>so that's the \"important one\"</p>",
        "id": 207098341,
        "sender_full_name": "simulacrum",
        "timestamp": 1597626251
    },
    {
        "content": "<p>yeah that's why I'm looking at it. although I think the 39xx is the same</p>",
        "id": 207098342,
        "sender_full_name": "eddyb",
        "timestamp": 1597626262
    },
    {
        "content": "<p>this is what I'm looking at btw <a href=\"https://developer.amd.com/wp-content/resources/56176_ppr_Family_17h_Model_71h_B0_pub_Rev_3.06.zip\">https://developer.amd.com/wp-content/resources/56176_ppr_Family_17h_Model_71h_B0_pub_Rev_3.06.zip</a></p>",
        "id": 207098348,
        "sender_full_name": "eddyb",
        "timestamp": 1597626286
    },
    {
        "content": "<p>page 172</p>",
        "id": 207098356,
        "sender_full_name": "eddyb",
        "timestamp": 1597626306
    },
    {
        "content": "<p>unfortunately we'd need a kernel upgrade to get <code>perf</code> to know about most of  those on the perf collector, though we could hack it via the raw interface</p>",
        "id": 207098368,
        "sender_full_name": "simulacrum",
        "timestamp": 1597626355
    },
    {
        "content": "<p>mhmm</p>",
        "id": 207098409,
        "sender_full_name": "eddyb",
        "timestamp": 1597626366
    },
    {
        "content": "<p>(It's not impossible to do the kernel upgrade but I'd rather not if we can avoid it)</p>",
        "id": 207098411,
        "sender_full_name": "simulacrum",
        "timestamp": 1597626374
    },
    {
        "content": "<p>I'm looking for any suggestion of anything being broken but I don't see any</p>",
        "id": 207098417,
        "sender_full_name": "eddyb",
        "timestamp": 1597626383
    },
    {
        "content": "<p>I think this PDF doesn't have the errata</p>",
        "id": 207098430,
        "sender_full_name": "simulacrum",
        "timestamp": 1597626424
    },
    {
        "content": "<p>that's a different one</p>",
        "id": 207098434,
        "sender_full_name": "simulacrum",
        "timestamp": 1597626428
    },
    {
        "content": "<p>I don't see it in here for 17h <a href=\"https://developer.amd.com/resources/developer-guides-manuals/\">https://developer.amd.com/resources/developer-guides-manuals/</a></p>",
        "id": 207098438,
        "sender_full_name": "eddyb",
        "timestamp": 1597626440
    },
    {
        "content": "<p>not even a revision guide</p>",
        "id": 207098446,
        "sender_full_name": "eddyb",
        "timestamp": 1597626460
    },
    {
        "content": "<p>hm I had a different url before that worked</p>",
        "id": 207098452,
        "sender_full_name": "simulacrum",
        "timestamp": 1597626472
    },
    {
        "content": "<p>for EPYC it's in the Revision guide</p>",
        "id": 207098495,
        "sender_full_name": "eddyb",
        "timestamp": 1597626507
    },
    {
        "content": "<p>why are all of these zip files?!</p>",
        "id": 207098513,
        "sender_full_name": "simulacrum",
        "timestamp": 1597626578
    },
    {
        "content": "<p>ooooh <code>rpdmc</code> can access one of 3 different kinds of counters, that's how it includes L3:</p>\n<blockquote>\n<p>There are six core performance event counters per thread, six performance events counters per L3 complex and four Data Fabric performance events counters mapped to the RDPMC instruction as follows:</p>\n</blockquote>",
        "id": 207098517,
        "sender_full_name": "eddyb",
        "timestamp": 1597626596
    },
    {
        "content": "<p>this is the one I wanted <a href=\"https://developer.amd.com/wp-content/resources/55449_1.16.pdf#page=13\">https://developer.amd.com/wp-content/resources/55449_1.16.pdf#page=13</a></p>",
        "id": 207098519,
        "sender_full_name": "simulacrum",
        "timestamp": 1597626600
    },
    {
        "content": "<p>which probably means we can't get L3 numbers because the kernel has no easy way of separating them into processes</p>",
        "id": 207098563,
        "sender_full_name": "eddyb",
        "timestamp": 1597626616
    },
    {
        "content": "<p>that would make sense, yeah</p>",
        "id": 207098573,
        "sender_full_name": "simulacrum",
        "timestamp": 1597626666
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> that's all Zen 1, no?</p>",
        "id": 207098574,
        "sender_full_name": "eddyb",
        "timestamp": 1597626668
    },
    {
        "content": "<p>hm 17h is zen 2 I thought?</p>",
        "id": 207098577,
        "sender_full_name": "simulacrum",
        "timestamp": 1597626677
    },
    {
        "content": "<p>no 17h is Zen</p>",
        "id": 207098582,
        "sender_full_name": "eddyb",
        "timestamp": 1597626686
    },
    {
        "content": "<p>oh right</p>",
        "id": 207098584,
        "sender_full_name": "simulacrum",
        "timestamp": 1597626701
    },
    {
        "content": "<p>maybe <a href=\"https://developer.amd.com/wp-content/resources/56323-PUB_0.74.pdf\">https://developer.amd.com/wp-content/resources/56323-PUB_0.74.pdf</a>?</p>",
        "id": 207098585,
        "sender_full_name": "simulacrum",
        "timestamp": 1597626704
    },
    {
        "content": "<p>the \"model\" tells apart the Zen generations and EPYC vs desktop</p>",
        "id": 207098588,
        "sender_full_name": "eddyb",
        "timestamp": 1597626719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> that doesn't include 71h models</p>",
        "id": 207098629,
        "sender_full_name": "eddyb",
        "timestamp": 1597626748
    },
    {
        "content": "<p>you can go to page 8 and see that it's just EPYC 7002</p>",
        "id": 207098635,
        "sender_full_name": "eddyb",
        "timestamp": 1597626768
    },
    {
        "content": "<p>hm well maybe there's just no revision guide :/</p>",
        "id": 207098636,
        "sender_full_name": "simulacrum",
        "timestamp": 1597626772
    },
    {
        "content": "<p>nothing more</p>",
        "id": 207098638,
        "sender_full_name": "eddyb",
        "timestamp": 1597626773
    },
    {
        "content": "<p>wow we can count a lot of nonsense</p>",
        "id": 207098685,
        "sender_full_name": "eddyb",
        "timestamp": 1597626869
    },
    {
        "content": "<p>if we had more than 6 counters we could probably get a lot of data and measure a more accurate performance cost</p>",
        "id": 207098692,
        "sender_full_name": "eddyb",
        "timestamp": 1597626899
    },
    {
        "content": "<p>page 180 in the zip I linked, \"EX (SC) events\" seems to have all the cool retire events</p>",
        "id": 207098755,
        "sender_full_name": "eddyb",
        "timestamp": 1597627041
    },
    {
        "content": "<p>hm I think you mean 181</p>",
        "id": 207098805,
        "sender_full_name": "simulacrum",
        "timestamp": 1597627104
    },
    {
        "content": "<p>oh yeah the section is labelled wrong</p>",
        "id": 207098812,
        "sender_full_name": "eddyb",
        "timestamp": 1597627120
    },
    {
        "content": "<p>but anyone the only insight is that uops might be more useful than just instructions</p>",
        "id": 207098825,
        "sender_full_name": "eddyb",
        "timestamp": 1597627148
    },
    {
        "content": "<p>it starts at the <em>very</em> end of 180</p>",
        "id": 207098826,
        "sender_full_name": "simulacrum",
        "timestamp": 1597627148
    },
    {
        "content": "<p>we haven't learned anything about how broken Zen 2 is</p>",
        "id": 207098830,
        "sender_full_name": "eddyb",
        "timestamp": 1597627162
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> looks like I have <code>uops_retired.all</code> in <code>perf list</code> on my Ivy Bridge, do you have that too?</p>",
        "id": 207099055,
        "sender_full_name": "eddyb",
        "timestamp": 1597627494
    },
    {
        "content": "<p>not in perf list</p>",
        "id": 207099067,
        "sender_full_name": "simulacrum",
        "timestamp": 1597627536
    },
    {
        "content": "<p>I do have ex_ret_cops in core which is labeled as Retired Uops</p>",
        "id": 207099112,
        "sender_full_name": "simulacrum",
        "timestamp": 1597627579
    },
    {
        "content": "<p>Zen has less things to count than Ivy Bridge? hmpf</p>",
        "id": 207099114,
        "sender_full_name": "eddyb",
        "timestamp": 1597627581
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> yeah that must be it</p>",
        "id": 207099118,
        "sender_full_name": "eddyb",
        "timestamp": 1597627602
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>core:\n  ex_div_busy\n       [Div Cycles Busy count]\n  ex_div_count\n       [Div Op Count]\n  ex_ret_brn\n       [Retired Branch Instructions]\n  ex_ret_brn_far\n       [Retired Far Control Transfers]\n  ex_ret_brn_ind_misp\n       [Retired Indirect Branch Instructions Mispredicted]\n  ex_ret_brn_misp\n       [Retired Branch Instructions Mispredicted]\n  ex_ret_brn_resync\n       [Retired Branch Resyncs]\n  ex_ret_brn_tkn\n       [Retired Taken Branch Instructions]\n  ex_ret_brn_tkn_misp\n       [Retired Taken Branch Instructions Mispredicted]\n  ex_ret_cond\n       [Retired Conditional Branch Instructions]\n  ex_ret_cond_misp\n       [Retired Conditional Branch Instructions Mispredicted]\n  ex_ret_cops\n       [Retired Uops]\n  ex_ret_fus_brnch_inst\n       [The number of fused retired branch instructions retired per cycle. The\n        number of events logged per cycle can vary from 0 to 3]\n  ex_ret_instr\n       [Retired Instructions]\n  ex_ret_mmx_fp_instr.mmx_instr\n       [MMX instructions]\n  ex_ret_mmx_fp_instr.sse_instr\n       [SSE instructions (SSE, SSE2, SSE3, SSSE3, SSE4A, SSE41, SSE42, AVX)]\n  ex_ret_mmx_fp_instr.x87_instr\n       [x87 instructions]\n  ex_ret_near_ret\n       [Retired Near Returns]\n  ex_ret_near_ret_mispred\n       [Retired Near Returns Mispredicted]\n  ex_tagged_ibs_ops.ibs_count_rollover\n       [Number of times an op could not be tagged by IBS because of a previous\n        tagged op that has not retired]\n  ex_tagged_ibs_ops.ibs_tagged_ops\n       [Number of Ops tagged by IBS]\n  ex_tagged_ibs_ops.ibs_tagged_ops_ret\n       [Number of Ops tagged by IBS that retired]\n</code></pre></div>",
        "id": 207099120,
        "sender_full_name": "simulacrum",
        "timestamp": 1597627604
    },
    {
        "content": "<p>I see something similar on Zen 1 EPYC</p>",
        "id": 207099123,
        "sender_full_name": "eddyb",
        "timestamp": 1597627622
    },
    {
        "content": "<p>that's on 3950x but I think we concluded that 3600 should have the same (just we need a more recent kernel for perf to know about it with nice names)</p>",
        "id": 207099174,
        "sender_full_name": "simulacrum",
        "timestamp": 1597627701
    },
    {
        "content": "<p>3600 and 3950x are materially the same thing, the only difference is that there's 2 of ccx in the latter.</p>",
        "id": 207099187,
        "sender_full_name": "nagisa",
        "timestamp": 1597627751
    },
    {
        "content": "<p>yeah that's what I thought</p>",
        "id": 207099190,
        "sender_full_name": "simulacrum",
        "timestamp": 1597627762
    },
    {
        "content": "<p>(well and former also has 2 of its cores fused out)</p>",
        "id": 207099195,
        "sender_full_name": "nagisa",
        "timestamp": 1597627782
    },
    {
        "content": "<p>I wasn't sure if they, like, disabled some counters or whatever in the 3600 chip</p>",
        "id": 207099197,
        "sender_full_name": "simulacrum",
        "timestamp": 1597627786
    },
    {
        "content": "<p>I'm increasingly mad/sad that Intel seems like the better option for measurement, except that Xeon Gold did seem to be worse</p>",
        "id": 207099209,
        "sender_full_name": "eddyb",
        "timestamp": 1597627801
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> they're both technically desktop parts so unless hetnzer is virtualizing you, I doubt there could be a difference</p>",
        "id": 207099248,
        "sender_full_name": "eddyb",
        "timestamp": 1597627831
    },
    {
        "content": "<p>maybe if you were comparing a G (integrated GPU) part with a non-G one</p>",
        "id": 207099253,
        "sender_full_name": "eddyb",
        "timestamp": 1597627854
    },
    {
        "content": "<p>iirc we tried to get \"a real machine\" from hetnzer, but I don't know if that's actually true</p>",
        "id": 207099256,
        "sender_full_name": "simulacrum",
        "timestamp": 1597627863
    },
    {
        "content": "<p>I think it is</p>",
        "id": 207099260,
        "sender_full_name": "eddyb",
        "timestamp": 1597627873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> okay this might be silly but what does <code>perf list | wc -l</code> say on your Xeon Gold?</p>",
        "id": 207099270,
        "sender_full_name": "eddyb",
        "timestamp": 1597627903
    },
    {
        "content": "<p>its probably still hypervised.</p>",
        "id": 207099272,
        "sender_full_name": "nagisa",
        "timestamp": 1597627908
    },
    {
        "content": "<p>37</p>",
        "id": 207099343,
        "sender_full_name": "nagisa",
        "timestamp": 1597628029
    },
    {
        "content": "<p>uhh is that an old kernel?</p>",
        "id": 207099381,
        "sender_full_name": "eddyb",
        "timestamp": 1597628044
    },
    {
        "content": "<p>I get 1115</p>",
        "id": 207099387,
        "sender_full_name": "eddyb",
        "timestamp": 1597628054
    },
    {
        "content": "<p>yeah.</p>",
        "id": 207099388,
        "sender_full_name": "nagisa",
        "timestamp": 1597628056
    },
    {
        "content": "<p>blergh so there's no easy way to do that</p>",
        "id": 207099392,
        "sender_full_name": "eddyb",
        "timestamp": 1597628066
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>List of pre-defined events (to be used in -e):\n\n  branch-instructions OR branches                    [Hardware event]\n  branch-misses                                      [Hardware event]\n  bus-cycles                                         [Hardware event]\n  cache-misses                                       [Hardware event]\n  cache-references                                   [Hardware event]\n  cpu-cycles OR cycles                               [Hardware event]\n  instructions                                       [Hardware event]\n  ref-cycles                                         [Hardware event]\n\n  alignment-faults                                   [Software event]\n  bpf-output                                         [Software event]\n  context-switches OR cs                             [Software event]\n  cpu-clock                                          [Software event]\n  cpu-migrations OR migrations                       [Software event]\n  dummy                                              [Software event]\n  emulation-faults                                   [Software event]\n  major-faults                                       [Software event]\n  minor-faults                                       [Software event]\n  page-faults OR faults                              [Software event]\n  task-clock                                         [Software event]\n\n  branch-instructions OR cpu/branch-instructions/    [Kernel PMU event]\n  branch-misses OR cpu/branch-misses/                [Kernel PMU event]\n  bus-cycles OR cpu/bus-cycles/                      [Kernel PMU event]\n  cache-misses OR cpu/cache-misses/                  [Kernel PMU event]\n  cache-references OR cpu/cache-references/          [Kernel PMU event]\n  cpu-cycles OR cpu/cpu-cycles/                      [Kernel PMU event]\n  instructions OR cpu/instructions/                  [Kernel PMU event]\n  intel_bts//                                        [Kernel PMU event]\n  intel_cqm/llc_occupancy/                           [Kernel PMU event]\n  intel_cqm/local_bytes/                             [Kernel PMU event]\n  intel_cqm/total_bytes/                             [Kernel PMU event]\n  intel_pt//                                         [Kernel PMU event]\n  msr/aperf/                                         [Kernel PMU event]\n  msr/mperf/                                         [Kernel PMU event]\n  msr/tsc/                                           [Kernel PMU event]\n\n  rNNN                                               [Raw hardware event descriptor]\n  cpu/t1=v1[,t2=v2,t3 ...]/modifier                  [Raw hardware event descriptor]\n   (see &#39;man perf-list&#39; on how to encode it)\n\n  mem:&lt;addr&gt;[/len][:access]                          [Hardware breakpoint]\n</code></pre></div>",
        "id": 207099393,
        "sender_full_name": "nagisa",
        "timestamp": 1597628071
    },
    {
        "content": "<p>lol</p>",
        "id": 207099397,
        "sender_full_name": "eddyb",
        "timestamp": 1597628083
    },
    {
        "content": "<p>yeah that's basically what the 3600 with 4.15 kernel shows</p>",
        "id": 207099403,
        "sender_full_name": "simulacrum",
        "timestamp": 1597628098
    },
    {
        "content": "<p>I only have 5.4.33 here, that's not <em>that</em> much newer, is it?</p>",
        "id": 207099422,
        "sender_full_name": "eddyb",
        "timestamp": 1597628134
    },
    {
        "content": "<p>1335 on haswell, 380 on zen1</p>",
        "id": 207099483,
        "sender_full_name": "nagisa",
        "timestamp": 1597628172
    },
    {
        "content": "<p>I guess I get kernel updates more regularly than the stable channel hmm</p>",
        "id": 207099484,
        "sender_full_name": "eddyb",
        "timestamp": 1597628173
    },
    {
        "content": "<p>I think they added the counters for ryzen on 5.x series</p>",
        "id": 207099490,
        "sender_full_name": "simulacrum",
        "timestamp": 1597628185
    },
    {
        "content": "<p>I have 453 counters on 3950x and 5.4.0 kernel</p>",
        "id": 207099494,
        "sender_full_name": "simulacrum",
        "timestamp": 1597628208
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> hmmmmm what if you ran the thing (god I'm falling asleep) on the Haskell</p>",
        "id": 207099499,
        "sender_full_name": "eddyb",
        "timestamp": 1597628222
    },
    {
        "content": "<p>the Haswell even</p>",
        "id": 207099505,
        "sender_full_name": "eddyb",
        "timestamp": 1597628234
    },
    {
        "content": "<p>both of those above on 5.6</p>",
        "id": 207099507,
        "sender_full_name": "nagisa",
        "timestamp": 1597628236
    },
    {
        "content": "<p>eh… I could...</p>",
        "id": 207099515,
        "sender_full_name": "nagisa",
        "timestamp": 1597628250
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> wait, if you have an older kernel then <code>lfence</code> does nothing on Zen</p>",
        "id": 207099517,
        "sender_full_name": "eddyb",
        "timestamp": 1597628254
    },
    {
        "content": "<p>that must explain why it's so bad</p>",
        "id": 207099521,
        "sender_full_name": "eddyb",
        "timestamp": 1597628264
    },
    {
        "content": "<p>making it serializing is a Spectre mitigation</p>",
        "id": 207099535,
        "sender_full_name": "eddyb",
        "timestamp": 1597628280
    },
    {
        "content": "<p>hm we tested on 3950x with 5.4 kernel though? I think it was bad there too</p>",
        "id": 207099536,
        "sender_full_name": "simulacrum",
        "timestamp": 1597628281
    },
    {
        "content": "<p>oh huh nvm then</p>",
        "id": 207099578,
        "sender_full_name": "eddyb",
        "timestamp": 1597628288
    },
    {
        "content": "<p>maybe Linux thinks Zen 2 doesn't need that kind of aggressive mitigation</p>",
        "id": 207099585,
        "sender_full_name": "eddyb",
        "timestamp": 1597628307
    },
    {
        "content": "<p>intel/haswell has a ton of counters for i915 (the gpu)</p>",
        "id": 207099587,
        "sender_full_name": "nagisa",
        "timestamp": 1597628315
    },
    {
        "content": "<p>yeah <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20%28rdpmc%29.20measurements/near/207095374\">https://rust-lang.zulipchat.com/#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20%28rdpmc%29.20measurements/near/207095374</a></p>",
        "id": 207099590,
        "sender_full_name": "simulacrum",
        "timestamp": 1597628326
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> what if the older kernel on the Xeon Gold is worse at keeping measurements noiseless?</p>",
        "id": 207099658,
        "sender_full_name": "eddyb",
        "timestamp": 1597628417
    },
    {
        "content": "<p>at this point I feel like we'll all go mad if we keep going</p>",
        "id": 207099661,
        "sender_full_name": "eddyb",
        "timestamp": 1597628439
    },
    {
        "content": "<p>maybe? I mean I can always fire up the vm with recent kernel on most recent intel chip google bothered to buy</p>",
        "id": 207099667,
        "sender_full_name": "nagisa",
        "timestamp": 1597628458
    },
    {
        "content": "<p>too lazy to do it today though</p>",
        "id": 207099671,
        "sender_full_name": "nagisa",
        "timestamp": 1597628466
    },
    {
        "content": "<p>yeah no worries just running through all the things I can think of</p>",
        "id": 207099672,
        "sender_full_name": "eddyb",
        "timestamp": 1597628476
    },
    {
        "content": "<p>overall it looks like <code>lfence</code> doesn't work on every system and <code>cpuid</code> is just better most of the time</p>",
        "id": 207099674,
        "sender_full_name": "eddyb",
        "timestamp": 1597628494
    },
    {
        "content": "<p>it's not on my Zen 1 but I think that's because <code>lfence</code> gets the MSR bit set to become a serializing instruction <em>and</em> <code>cpuid</code> sucks in general</p>",
        "id": 207099678,
        "sender_full_name": "eddyb",
        "timestamp": 1597628519
    },
    {
        "content": "<p>if we were measuring uops retired we could actually see how many uops are wasted on <code>cpuid</code>, lol</p>",
        "id": 207099721,
        "sender_full_name": "eddyb",
        "timestamp": 1597628559
    },
    {
        "content": "<p>wait I can do that tho</p>",
        "id": 207099724,
        "sender_full_name": "eddyb",
        "timestamp": 1597628578
    },
    {
        "content": "<p>huh I'm seeing stuff online that would suggest <code>setarch $(uname -m) -R</code> works around <code>perf stat</code>, which... given my previous experience, I doubt that works? but I can try</p>",
        "id": 207099804,
        "sender_full_name": "eddyb",
        "timestamp": 1597628747
    },
    {
        "content": "<p>even if disabling ASLR doesn't work, I can still compare the results I think</p>",
        "id": 207099853,
        "sender_full_name": "eddyb",
        "timestamp": 1597628832
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> wow, uops retired is only about 1.25x the number of instructions</p>",
        "id": 207099904,
        "sender_full_name": "eddyb",
        "timestamp": 1597628926
    },
    {
        "content": "<p>at least <code>perf stat</code> doesn't seem to need root to do this</p>",
        "id": 207099909,
        "sender_full_name": "eddyb",
        "timestamp": 1597628944
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/207099904\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> wow, uops retired is only about 1.25x the number of instructions</p>\n</blockquote>\n<p>not super surprised, compiler is mostly a pointer chasing algorithm and does not use much of the complicated instructions</p>",
        "id": 207099960,
        "sender_full_name": "nagisa",
        "timestamp": 1597629048
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> btw do you know where <code>time</code> or <code>perf stat</code> gets its \"user\" vs \"sys\" time split from? does libstd's <code>Instant</code> correspond to global time, not \"user\" time? this seems like it may have an opportunity for reduci- nevermind, \"user\" and \"sys\" times are only microsecond precision, compared to total time</p>",
        "id": 207099966,
        "sender_full_name": "eddyb",
        "timestamp": 1597629064
    },
    {
        "content": "<p>I would be willing to bet most of the µops actually come from various avx2 optimised algorithms.</p>",
        "id": 207099970,
        "sender_full_name": "nagisa",
        "timestamp": 1597629080
    },
    {
        "content": "<p>instant is global time almost certainly</p>",
        "id": 207099971,
        "sender_full_name": "simulacrum",
        "timestamp": 1597629082
    },
    {
        "content": "<p>user/sys time is ~100% counted by the kernel itself</p>",
        "id": 207099982,
        "sender_full_name": "nagisa",
        "timestamp": 1597629112
    },
    {
        "content": "<p>there's a per-process counter for both of those in /proc/pid/stats or whatever</p>",
        "id": 207100024,
        "sender_full_name": "nagisa",
        "timestamp": 1597629132
    },
    {
        "content": "<p>I've been told <code>CLOCK_MONOTONIC</code> uses <code>rdtsc</code> and a kernel-updated CPU frequency to get a nanosecond-precision estimate</p>",
        "id": 207100030,
        "sender_full_name": "eddyb",
        "timestamp": 1597629169
    },
    {
        "content": "<p>not sure why \"user time\" couldn't do the same</p>",
        "id": 207100034,
        "sender_full_name": "eddyb",
        "timestamp": 1597629192
    },
    {
        "content": "<p>probably rdtscp nowadays</p>",
        "id": 207100075,
        "sender_full_name": "nagisa",
        "timestamp": 1597629244
    },
    {
        "content": "<p>what SCP number does that have :P</p>",
        "id": 207100082,
        "sender_full_name": "eddyb",
        "timestamp": 1597629265
    },
    {
        "content": "<p>both rdtsc and rdtscp nowadays are agnostic to cpu clock changes though</p>",
        "id": 207100087,
        "sender_full_name": "nagisa",
        "timestamp": 1597629281
    },
    {
        "content": "<p>object class: Intel Inside ^(TM)</p>",
        "id": 207100088,
        "sender_full_name": "eddyb",
        "timestamp": 1597629283
    },
    {
        "content": "<p>huuh, <code>setarch -R</code> did work around perf!</p>",
        "id": 207100329,
        "sender_full_name": "eddyb",
        "timestamp": 1597629697
    },
    {
        "content": "<p>the difference seems to be 64 ±15 uops for 6 instructions</p>",
        "id": 207100332,
        "sender_full_name": "eddyb",
        "timestamp": 1597629708
    },
    {
        "content": "<p>so yeah that's what I'd expected <code>cpuid</code> to be lmao (that one is <code>cpuid(0)</code>, maybe there's a cheaper one?)</p>",
        "id": 207100373,
        "sender_full_name": "eddyb",
        "timestamp": 1597629733
    },
    {
        "content": "<p>oh wait the \"baseline\" has<code>lfence</code>, so it's 7 instructions, not 6</p>",
        "id": 207100388,
        "sender_full_name": "eddyb",
        "timestamp": 1597629799
    },
    {
        "content": "<p>oh but <code>lfence</code> is probably 1 uop? ugh I should've measured with a proper baseline</p>",
        "id": 207100432,
        "sender_full_name": "eddyb",
        "timestamp": 1597629844
    },
    {
        "content": "<p>anyway it's still around 60 uops for <code>cpuid(0)</code></p>",
        "id": 207100445,
        "sender_full_name": "eddyb",
        "timestamp": 1597629879
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> wow, the <code>cpuid</code> runs are on average slower by almost half a second</p>",
        "id": 207100651,
        "sender_full_name": "eddyb",
        "timestamp": 1597630252
    },
    {
        "content": "<p>yeah :/ </p>\n<p>That does mean that we add up to something like ~8 minutes slower, but then again wall-clock collection wasn't cheap either so...</p>",
        "id": 207100664,
        "sender_full_name": "simulacrum",
        "timestamp": 1597630314
    },
    {
        "content": "<p>yeah this is like 3-4x cheaper than wall-clock lol</p>",
        "id": 207100720,
        "sender_full_name": "eddyb",
        "timestamp": 1597630394
    },
    {
        "content": "<p>I guess I can do some math on the uops. they would add up to around 100 million, out of 55 billion. wait why am I doing this. I can just go look at the difference</p>",
        "id": 207100788,
        "sender_full_name": "eddyb",
        "timestamp": 1597630464
    },
    {
        "content": "<p>yeah it's 0.11B out of 55B. so 1/500 or 0.2%</p>",
        "id": 207100814,
        "sender_full_name": "eddyb",
        "timestamp": 1597630549
    },
    {
        "content": "<p>that's 10x smaller than the time difference I'm seeing... so maybe the \"user time\" is still too noisy?</p>",
        "id": 207100865,
        "sender_full_name": "eddyb",
        "timestamp": 1597630633
    },
    {
        "content": "<p>anyway there's definitely a cost <em>sigh</em></p>",
        "id": 207100866,
        "sender_full_name": "eddyb",
        "timestamp": 1597630640
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I wonder if the distro you're using just didn't enable Spectre mitigations o_O</p>",
        "id": 207100915,
        "sender_full_name": "eddyb",
        "timestamp": 1597630695
    },
    {
        "content": "<p>although we can probably defer caring about it until we are actually measuring uops</p>",
        "id": 207100925,
        "sender_full_name": "eddyb",
        "timestamp": 1597630750
    },
    {
        "content": "<p>and just go with <code>cpuid</code> for now</p>",
        "id": 207100926,
        "sender_full_name": "eddyb",
        "timestamp": 1597630755
    },
    {
        "content": "<p>all I've learned today is that we can't have perfectly nice things, we just have to settle for 5 orders of magnitude less noise or however much we're up to now :P</p>",
        "id": 207100957,
        "sender_full_name": "eddyb",
        "timestamp": 1597630790
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> oh I checked again and what you're seeing with <code>lfence</code> on Zen 2 is what I'm seeing unserialized on Zen 1</p>",
        "id": 207101853,
        "sender_full_name": "eddyb",
        "timestamp": 1597632189
    },
    {
        "content": "<p>so that's not actually worse</p>",
        "id": 207101862,
        "sender_full_name": "eddyb",
        "timestamp": 1597632230
    },
    {
        "content": "<p>well, <code>\"generate_crate_metadata\": 140926.5,</code> is double but there might just be large-scale noise</p>",
        "id": 207101907,
        "sender_full_name": "eddyb",
        "timestamp": 1597632266
    },
    {
        "content": "<p>that task might just be querying a gajillion things</p>",
        "id": 207101910,
        "sender_full_name": "eddyb",
        "timestamp": 1597632280
    },
    {
        "content": "<p>again I wish I had a \"child intervals\" metric to just divide the variance by</p>",
        "id": 207101919,
        "sender_full_name": "eddyb",
        "timestamp": 1597632315
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> If you try to get instruction-count variance down to zero, you're definitely going to be chasing things from here to eternity. It's possible to do <em>better</em>, though.</p>",
        "id": 207111650,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597647181
    },
    {
        "content": "<p>Entering the scheduler is going to send uncertainty through the roof. Touching the disk or filesystem, even more so.</p>",
        "id": 207111727,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597647261
    },
    {
        "content": "<p>It's possible to get multiple runs with the same instruction count. Theoretically.</p>",
        "id": 207111984,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597647568
    },
    {
        "content": "<p>curious why scheduling isn't \"free\" - this is user-mode only, can't the kernel pause the counters?</p>",
        "id": 207119605,
        "sender_full_name": "eddyb",
        "timestamp": 1597654031
    },
    {
        "content": "<p>or are they getting ±1 on every context switch?</p>",
        "id": 207119633,
        "sender_full_name": "eddyb",
        "timestamp": 1597654065
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> like I can already get groups of 10 runs that are ±5k, out of ~44B</p>",
        "id": 207120640,
        "sender_full_name": "eddyb",
        "timestamp": 1597654820
    },
    {
        "content": "<p>and it's singlethreaded anyway. hmpf</p>",
        "id": 207121081,
        "sender_full_name": "eddyb",
        "timestamp": 1597655156
    },
    {
        "content": "<p>I wonder if I should wrap my tests in using <code>perf stat</code> to read some of the software events and see if there is a correlation there</p>",
        "id": 207121176,
        "sender_full_name": "eddyb",
        "timestamp": 1597655213
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> someone else who uses the same hetzner box we do, got back to me, and said \"hetzner boxes are bare metal\"</p>",
        "id": 207137534,
        "sender_full_name": "eddyb",
        "timestamp": 1597667869
    },
    {
        "content": "<p>which is what I knew</p>",
        "id": 207137540,
        "sender_full_name": "eddyb",
        "timestamp": 1597667873
    },
    {
        "content": "<p>it really depends on how you define \"bare metal\", I’m 99% confident that if the machine is at a DC and its not your own physical hardware, then it going to be hypervised.</p>",
        "id": 207138535,
        "sender_full_name": "nagisa",
        "timestamp": 1597668527
    },
    {
        "content": "<p>I'm pretty sure Hetzner machines aren't hypervised, it's basically colocation with rented hardware.</p>",
        "id": 207138711,
        "sender_full_name": "davidtwco",
        "timestamp": 1597668633
    },
    {
        "content": "<p>(at least with their dedicated offering, can't speak to any others)</p>",
        "id": 207138792,
        "sender_full_name": "davidtwco",
        "timestamp": 1597668697
    },
    {
        "content": "<p>(turns out there's a way to check this, CPUID(1) bit 31 will be set if hypervised)</p>",
        "id": 207139183,
        "sender_full_name": "nagisa",
        "timestamp": 1597668875
    },
    {
        "content": "<p>yeah this is all dedicated</p>",
        "id": 207144988,
        "sender_full_name": "eddyb",
        "timestamp": 1597671686
    },
    {
        "content": "<p>you're renting the hardware, not just some level of access to it</p>",
        "id": 207145125,
        "sender_full_name": "eddyb",
        "timestamp": 1597671756
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> like I can already get groups of 10 runs that are ±5k, out of ~44B</p>\n</blockquote>\n<p>Yes, you can absolutely get within 5k. I'm saying it gets harder and harder the closer you want to get it.</p>",
        "id": 207146585,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597672540
    },
    {
        "content": "<p>I mean I doubt there's anything happening that's not.... oh I could've build a really simple test /facepalm</p>",
        "id": 207155365,
        "sender_full_name": "eddyb",
        "timestamp": 1597677008
    },
    {
        "content": "<p>I can just execute a known number of instructions for a minute and see how far off <code>rdpmc</code> is</p>",
        "id": 207155416,
        "sender_full_name": "eddyb",
        "timestamp": 1597677051
    },
    {
        "content": "<p>I can also execute <em>a lot</em> of <code>rdpmc</code> in predictable ways. I should've done all this benchmarking ahead of time, oh well</p>",
        "id": 207155609,
        "sender_full_name": "eddyb",
        "timestamp": 1597677137
    },
    {
        "content": "<p>at least now that I know I might not trust some hardware, I can look for certain patterns</p>",
        "id": 207155632,
        "sender_full_name": "eddyb",
        "timestamp": 1597677152
    },
    {
        "content": "<p>anything that gets non-uniformly worse with time probably involves the kernel (or I could invoke some syscalls I guess? yeah I should be able to measure how many instructions get counted on the wrong side. ideally the core itself stops counting past the <code>syscall</code> but maybe the kernal has to manually pause it)</p>",
        "id": 207155818,
        "sender_full_name": "eddyb",
        "timestamp": 1597677243
    },
    {
        "content": "<p>awwwww I can't sketch this in the browser <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=0679cc907f127c73fbcea64b6db6b920\">https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=0679cc907f127c73fbcea64b6db6b920</a>. but I should be able to just do it locally</p>",
        "id": 207170011,
        "sender_full_name": "eddyb",
        "timestamp": 1597684329
    },
    {
        "content": "<p>heh I never looked at this, but on Ivy Bridge I get <code>index=0x40000001</code> (I think that's before subtracting <code>0</code>, so <code>0x40000000</code> is what is passed to <code>rdpmc</code>), that high up bit is not set on Zen</p>",
        "id": 207170472,
        "sender_full_name": "eddyb",
        "timestamp": 1597684619
    },
    {
        "content": "<p>why is Clang not working here like GCC is? <a href=\"https://godbolt.org/z/vTxnYd\">https://godbolt.org/z/vTxnYd</a></p>",
        "id": 207171852,
        "sender_full_name": "eddyb",
        "timestamp": 1597685303
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> if I flip all the 1s and 2s in the second example on &lt;<a href=\"https://blog.rust-lang.org/inside-rust/2020/06/08/new-inline-asm.html\">https://blog.rust-lang.org/inside-rust/2020/06/08/new-inline-asm.html</a>&gt;, it breaks the same way I'm seeing stuff break for me, hwat</p>",
        "id": 207172243,
        "sender_full_name": "eddyb",
        "timestamp": 1597685479
    },
    {
        "content": "<p>2 is a valid temporary backwards label, 1 isn't?!</p>",
        "id": 207172399,
        "sender_full_name": "eddyb",
        "timestamp": 1597685535
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 207172883,
        "sender_full_name": "cuviper",
        "timestamp": 1597685732
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> oh wow with very little effort I already have useful information. the noise is proportional to the duration of a trivial loop, on my old hardware at least, so I think it is from context-switching with imperfect pause/resume</p>",
        "id": 207173524,
        "sender_full_name": "eddyb",
        "timestamp": 1597685961
    },
    {
        "content": "<p>That sounds entirely likely, yes.</p>",
        "id": 207173581,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597685983
    },
    {
        "content": "<p>that's sad... given that this is a solvable problem</p>",
        "id": 207173614,
        "sender_full_name": "eddyb",
        "timestamp": 1597685996
    },
    {
        "content": "<p>I bet there's some kernel config param for this somewhere that's disabled by default because most of the people don't care about perf counters and it would likely have perf impact on the scheduler.</p>",
        "id": 207173752,
        "sender_full_name": "nagisa",
        "timestamp": 1597686045
    },
    {
        "content": "<p>What happens if you run the same process (note: <em>do not run an infinite loop</em>) using <code>chrt -f 99 ./theprocess</code>?</p>",
        "id": 207173836,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597686076
    },
    {
        "content": "<p>if there was a hardware feature to keep the counter per-privilege-level then it shouldn't cost anything</p>",
        "id": 207173873,
        "sender_full_name": "eddyb",
        "timestamp": 1597686087
    },
    {
        "content": "<p>except at the hardware level ofc</p>",
        "id": 207173918,
        "sender_full_name": "eddyb",
        "timestamp": 1597686108
    },
    {
        "content": "<p>There <em>are</em> hardware features for that, as far as I know.</p>",
        "id": 207173919,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597686109
    },
    {
        "content": "<p>I think there is, but it also depends on precise counters</p>",
        "id": 207173940,
        "sender_full_name": "cuviper",
        "timestamp": 1597686115
    },
    {
        "content": "<p>this is \"retired instructions\"</p>",
        "id": 207173976,
        "sender_full_name": "eddyb",
        "timestamp": 1597686123
    },
    {
        "content": "<p>maybe it's just not in Ivy Bridge</p>",
        "id": 207174010,
        "sender_full_name": "eddyb",
        "timestamp": 1597686131
    },
    {
        "content": "<p>anyway I don't think I need to go much further, nor add any analysis, you can literally see the variance</p>",
        "id": 207174063,
        "sender_full_name": "eddyb",
        "timestamp": 1597686159
    },
    {
        "content": "<p>see the \"p\" modifier in \"man perf-list\"</p>",
        "id": 207174266,
        "sender_full_name": "cuviper",
        "timestamp": 1597686240
    },
    {
        "content": "<p>which refers to address sampling, but I <em>think</em> that also affects plain counters for stuff like kernel/user separation</p>",
        "id": 207174428,
        "sender_full_name": "cuviper",
        "timestamp": 1597686288
    },
    {
        "content": "<p>interesting, will look at that in a bit</p>",
        "id": 207174664,
        "sender_full_name": "eddyb",
        "timestamp": 1597686372
    },
    {
        "content": "<p>until then, anyone with nightly and <code>rustc-dev</code> installed can run this:<br>\n<code>rustup component add --toolchain nightly rustc-dev &amp;&amp; curl -sS https://gist.githubusercontent.com/eddyb/269491b0b59605f39f1d0a9dcf535c4a/raw/d003c82d38c3ff0df18764acb8abd2a6e39fe180/rdpmc-bench.rs | rustc +nightly - -o rdpmc-bench -O &amp;&amp; ./rdpmc-bench</code></p>",
        "id": 207174738,
        "sender_full_name": "eddyb",
        "timestamp": 1597686408
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> ^^ wow, my Ivy Bridge (Linux 5.4.33) is 3x worse than the Zen 1 EPYC (Linux 5.4.12). can you try on Zen 2?</p>",
        "id": 207175018,
        "sender_full_name": "eddyb",
        "timestamp": 1597686556
    },
    {
        "content": "<p>I wonder if this is more tied to kernel version, too</p>",
        "id": 207175041,
        "sender_full_name": "eddyb",
        "timestamp": 1597686563
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> hopefully this should be much easier to try out than a whole rustc build (also it only takes a few seconds)</p>",
        "id": 207175188,
        "sender_full_name": "eddyb",
        "timestamp": 1597686631
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0463]: can&#39;t find crate for `memmap`\n --&gt; &lt;anon&gt;:6:1\n  |\n6 | extern crate memmap;\n  | ^^^^^^^^^^^^^^^^^^^^ can&#39;t find crate\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\n</code></pre></div>",
        "id": 207175249,
        "sender_full_name": "simulacrum",
        "timestamp": 1597686666
    },
    {
        "content": "<p>that's <code>rustc-dev</code> missing</p>",
        "id": 207175273,
        "sender_full_name": "eddyb",
        "timestamp": 1597686677
    },
    {
        "content": "<p>ah okay</p>",
        "id": 207175303,
        "sender_full_name": "simulacrum",
        "timestamp": 1597686689
    },
    {
        "content": "<p>I should've shoved that into the command</p>",
        "id": 207175308,
        "sender_full_name": "eddyb",
        "timestamp": 1597686692
    },
    {
        "content": "<p>hm do you want output of that in a gist?</p>",
        "id": 207175360,
        "sender_full_name": "simulacrum",
        "timestamp": 1597686720
    },
    {
        "content": "<p>just give me the rough value from the last set</p>",
        "id": 207175431,
        "sender_full_name": "eddyb",
        "timestamp": 1597686735
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>### `ecx=10000000`\n1\n1\n0\n1\n1\n0\n1\n0\n1\n1\n\n### `ecx=100000000`\n5\n6\n6\n6\n5\n6\n6\n6\n5\n6\n\n### `ecx=1000000000`\n57\n57\n58\n56\n57\n57\n57\n59\n57\n57\n\nrdpmc-bench instructions:u=11111202218\n</code></pre></div>",
        "id": 207175450,
        "sender_full_name": "simulacrum",
        "timestamp": 1597686747
    },
    {
        "content": "<p>for me it's 333 on the EPYC</p>",
        "id": 207175458,
        "sender_full_name": "eddyb",
        "timestamp": 1597686751
    },
    {
        "content": "<p>oh wow nice</p>",
        "id": 207175474,
        "sender_full_name": "eddyb",
        "timestamp": 1597686762
    },
    {
        "content": "<p>that's on 3950x</p>",
        "id": 207175481,
        "sender_full_name": "simulacrum",
        "timestamp": 1597686767
    },
    {
        "content": "<p>but we've established it's more or less identical to 3600 so should be fine</p>",
        "id": 207175511,
        "sender_full_name": "simulacrum",
        "timestamp": 1597686785
    },
    {
        "content": "<p>it'd be good to check in case it's the kernel</p>",
        "id": 207175529,
        "sender_full_name": "eddyb",
        "timestamp": 1597686795
    },
    {
        "content": "<p>I mean, there really is nothing happening here, so the kernel is the one screwing things up :P</p>",
        "id": 207175559,
        "sender_full_name": "eddyb",
        "timestamp": 1597686816
    },
    {
        "content": "<p>I just don't know how the hardware plays into that</p>",
        "id": 207175573,
        "sender_full_name": "eddyb",
        "timestamp": 1597686824
    },
    {
        "content": "<p>I edited the command to be more self-contained</p>",
        "id": 207175698,
        "sender_full_name": "eddyb",
        "timestamp": 1597686893
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> oh <code>:p</code> is not for \"Instructions retired\"</p>",
        "id": 207176473,
        "sender_full_name": "eddyb",
        "timestamp": 1597687304
    },
    {
        "content": "<p>darn</p>",
        "id": 207176562,
        "sender_full_name": "cuviper",
        "timestamp": 1597687332
    },
    {
        "content": "<p>looks like it's mostly for randomized/interval sampling</p>",
        "id": 207176608,
        "sender_full_name": "eddyb",
        "timestamp": 1597687349
    },
    {
        "content": "<p>which is, like, scattershot profiling, not exact counting</p>",
        "id": 207176661,
        "sender_full_name": "eddyb",
        "timestamp": 1597687368
    },
    {
        "content": "<p>on my i7-7700k, I get:</p>\n<div class=\"codehilite\"><pre><span></span><code>### `ecx=1000000000`\n892\n895\n891\n890\n890\n891\n920\n901\n905\n895\n</code></pre></div>",
        "id": 207176682,
        "sender_full_name": "cuviper",
        "timestamp": 1597687382
    },
    {
        "content": "<p>it's also for retired uops, idk what's up with that</p>",
        "id": 207176692,
        "sender_full_name": "eddyb",
        "timestamp": 1597687386
    },
    {
        "content": "<p>on my Ryzen 7 3800X, I get:</p>\n<div class=\"codehilite\"><pre><span></span><code>### `ecx=1000000000`\n222\n223\n222\n223\n225\n223\n223\n226\n235\n225\n</code></pre></div>",
        "id": 207176732,
        "sender_full_name": "cuviper",
        "timestamp": 1597687412
    },
    {
        "content": "<p>I should've aggregated it so ppl don't paste the whole 10 :P</p>",
        "id": 207176761,
        "sender_full_name": "eddyb",
        "timestamp": 1597687434
    },
    {
        "content": "<p>they're only really there so one can eyeball the values and make sure there's no weird outliers</p>",
        "id": 207176816,
        "sender_full_name": "eddyb",
        "timestamp": 1597687446
    },
    {
        "content": "<p>yeah, I know well about sampling -- I used to work on Intel vTune <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> (~12 years ago)</p>",
        "id": 207176857,
        "sender_full_name": "cuviper",
        "timestamp": 1597687471
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> oh hello that last one is 4x worse than <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>'s</p>",
        "id": 207176861,
        "sender_full_name": "eddyb",
        "timestamp": 1597687472
    },
    {
        "content": "<p>ahhh fun times. ever messed around with 100% deterministic nonsense like I'm struggling with here?</p>",
        "id": 207176899,
        "sender_full_name": "eddyb",
        "timestamp": 1597687495
    },
    {
        "content": "<p>I thought precision also affected counters for user/kernel attribution, but I'm not sure anymore</p>",
        "id": 207176926,
        "sender_full_name": "cuviper",
        "timestamp": 1597687510
    },
    {
        "content": "<p>like maybe this is a lost cause, I don't know enough about the actual implementation to be sure, I just know it should theoretically be possible to implement this in a way is 100% exact</p>",
        "id": 207176985,
        "sender_full_name": "eddyb",
        "timestamp": 1597687538
    },
    {
        "content": "<p>the 111 multiples intrigue me, why would there be something divided by 9 anywhere</p>",
        "id": 207177179,
        "sender_full_name": "eddyb",
        "timestamp": 1597687631
    },
    {
        "content": "<p>like it looks like in many cases it's some multiple of <code>1.1111...</code> repeating, aka <code>10/9</code></p>",
        "id": 207177320,
        "sender_full_name": "eddyb",
        "timestamp": 1597687687
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> if I try <code>perf stat -e instructions:p echo</code> I see <code>&lt;not supported&gt;      instructions:pu</code></p>",
        "id": 207177389,
        "sender_full_name": "eddyb",
        "timestamp": 1597687723
    },
    {
        "content": "<p>just in case the man page wasn't accurate</p>",
        "id": 207177410,
        "sender_full_name": "eddyb",
        "timestamp": 1597687733
    },
    {
        "content": "<p>it is really interesting that <span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> and I are seeing radically different (57 vs 220) results on 3800x and 3950x</p>",
        "id": 207177741,
        "sender_full_name": "simulacrum",
        "timestamp": 1597687900
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> out of interest, what kernel do you have? I have 5.4.0-42-generic</p>",
        "id": 207177763,
        "sender_full_name": "simulacrum",
        "timestamp": 1597687917
    },
    {
        "content": "<p>you know why I want to see the 3600 then :)</p>",
        "id": 207177770,
        "sender_full_name": "eddyb",
        "timestamp": 1597687922
    },
    {
        "content": "<p>I could run it on 2700X</p>",
        "id": 207177838,
        "sender_full_name": "mati865",
        "timestamp": 1597687944
    },
    {
        "content": "<p>the basic <code>instructions</code> is just an arch-neutral alias, but I'm not sure exactly what it maps to. on my i7, <code>perf list</code> has 4 different <code>inst_retired.*</code> counters of increasing precision</p>",
        "id": 207177857,
        "sender_full_name": "cuviper",
        "timestamp": 1597687959
    },
    {
        "content": "<p>3600 is also 62</p>",
        "id": 207177864,
        "sender_full_name": "simulacrum",
        "timestamp": 1597687961
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I'm on <code>5.7.14-200.fc32.x86_64</code></p>",
        "id": 207177872,
        "sender_full_name": "cuviper",
        "timestamp": 1597687971
    },
    {
        "content": "<p>so far I guess we have:</p>\n<p>3800x (cuviper): 220 5.7.14-200.fc32.x86_64<br>\n3950x (mark): 57 5.4.0-42-generic<br>\n3600 (perf.rlo): 62 4.15.0-70-generic<br>\n i7-7700k (cuviper): 880</p>",
        "id": 207177937,
        "sender_full_name": "simulacrum",
        "timestamp": 1597688011
    },
    {
        "content": "<blockquote>\n<p><code>inst_retired.prec_dist</code> Precise instruction retired event with HW to reduce effect of PEBS shadow in IP distribution (Must be precise)]</p>\n</blockquote>",
        "id": 207178053,
        "sender_full_name": "eddyb",
        "timestamp": 1597688073
    },
    {
        "content": "<p>this again seems like it's some IP sampling thing. weird that it has this name tho</p>",
        "id": 207178097,
        "sender_full_name": "eddyb",
        "timestamp": 1597688095
    },
    {
        "content": "<p>and Zen 1 only has <code>ex_ret_instr</code> anyway</p>",
        "id": 207178231,
        "sender_full_name": "eddyb",
        "timestamp": 1597688168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> where do you get 67? I saw 56</p>",
        "id": 207178552,
        "sender_full_name": "eddyb",
        "timestamp": 1597688349
    },
    {
        "content": "<p>you can probably take the minimum</p>",
        "id": 207178564,
        "sender_full_name": "eddyb",
        "timestamp": 1597688354
    },
    {
        "content": "<p>perf.rlo being similar is reassuring</p>",
        "id": 207178608,
        "sender_full_name": "eddyb",
        "timestamp": 1597688375
    },
    {
        "content": "<p>er I think I added 11 or something</p>",
        "id": 207178734,
        "sender_full_name": "simulacrum",
        "timestamp": 1597688444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> did you do something to those machines to make them better at this?</p>",
        "id": 207178788,
        "sender_full_name": "eddyb",
        "timestamp": 1597688484
    },
    {
        "content": "<p>or maybe there's less stuff running on them</p>",
        "id": 207178805,
        "sender_full_name": "eddyb",
        "timestamp": 1597688505
    },
    {
        "content": "<p>the 3600 box has:</p>\n<div class=\"codehilite\"><pre><span></span><code>kernel.perf_event_paranoid = -1\nkernel.randomize_va_space = 0\nkernel.nmi_watchdog = 0\n</code></pre></div>",
        "id": 207178901,
        "sender_full_name": "simulacrum",
        "timestamp": 1597688545
    },
    {
        "content": "<p>hm it might be the nmi watchdog, actually</p>",
        "id": 207178939,
        "sender_full_name": "simulacrum",
        "timestamp": 1597688571
    },
    {
        "content": "<p>heh could it be - yeah that</p>",
        "id": 207178944,
        "sender_full_name": "eddyb",
        "timestamp": 1597688575
    },
    {
        "content": "<p>both of my boxes have that off</p>",
        "id": 207178946,
        "sender_full_name": "simulacrum",
        "timestamp": 1597688576
    },
    {
        "content": "<p>ahahahaha</p>",
        "id": 207178952,
        "sender_full_name": "eddyb",
        "timestamp": 1597688580
    },
    {
        "content": "<p>I wonder if the 9 is like the number of uops per instruction or something</p>",
        "id": 207178971,
        "sender_full_name": "eddyb",
        "timestamp": 1597688587
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> could you test 3800 without nmi watchdog?</p>",
        "id": 207178972,
        "sender_full_name": "simulacrum",
        "timestamp": 1597688589
    },
    {
        "content": "<p>oh, I haven't changed any of those</p>",
        "id": 207178976,
        "sender_full_name": "cuviper",
        "timestamp": 1597688592
    },
    {
        "content": "<p>I think only nmi watchdog should have any effect here</p>",
        "id": 207179083,
        "sender_full_name": "simulacrum",
        "timestamp": 1597688651
    },
    {
        "content": "<p>hm turning it back on does not seem to change numbers though</p>",
        "id": 207179229,
        "sender_full_name": "simulacrum",
        "timestamp": 1597688714
    },
    {
        "content": "<p>no change, I'm still at ~222</p>",
        "id": 207179247,
        "sender_full_name": "cuviper",
        "timestamp": 1597688725
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> reports increase from 300 to 325 when setting it to 0</p>",
        "id": 207179281,
        "sender_full_name": "eddyb",
        "timestamp": 1597688744
    },
    {
        "content": "<p>and is that a mostly idle box?</p>",
        "id": 207179282,
        "sender_full_name": "simulacrum",
        "timestamp": 1597688744
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I <em>think</em> what's happening is that it's parsing <code>1b</code> as a binary literal.</p>",
        "id": 207179451,
        "sender_full_name": "Amanieu",
        "timestamp": 1597688849
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> jfc</p>",
        "id": 207179460,
        "sender_full_name": "eddyb",
        "timestamp": 1597688859
    },
    {
        "content": "<p>okay I looked at uops and there's almost exactly 1 per instruction, so the weird 9 isn't coming from there. maybe it's just a factor of 3 and it's something to do with instructions per preemption interval</p>",
        "id": 207179624,
        "sender_full_name": "eddyb",
        "timestamp": 1597688937
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> <code>sudo chrt -f 99 ./rdpmc-bench</code> doesn't make things better on Ivy Bridge</p>",
        "id": 207179954,
        "sender_full_name": "eddyb",
        "timestamp": 1597689110
    },
    {
        "content": "<p>can't test on the server but presumably <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> can</p>",
        "id": 207180001,
        "sender_full_name": "eddyb",
        "timestamp": 1597689123
    },
    {
        "content": "<p>that made things worse</p>",
        "id": 207180083,
        "sender_full_name": "simulacrum",
        "timestamp": 1597689187
    },
    {
        "content": "<p>up to 115</p>",
        "id": 207180086,
        "sender_full_name": "simulacrum",
        "timestamp": 1597689190
    },
    {
        "content": "<p>okay I guess it kinda did for me too, although it was kinda random</p>",
        "id": 207180130,
        "sender_full_name": "eddyb",
        "timestamp": 1597689224
    },
    {
        "content": "<p>none of the other flags decrease it</p>",
        "id": 207180401,
        "sender_full_name": "eddyb",
        "timestamp": 1597689369
    },
    {
        "content": "<p><code>chrt -f 99</code> pushed me up to ~460</p>",
        "id": 207180576,
        "sender_full_name": "cuviper",
        "timestamp": 1597689466
    },
    {
        "content": "<p><a href=\"https://man7.org/linux/man-pages/man1/chrt.1.html\">https://man7.org/linux/man-pages/man1/chrt.1.html</a></p>",
        "id": 207180646,
        "sender_full_name": "eddyb",
        "timestamp": 1597689485
    },
    {
        "content": "<p>wait I think I wanted <code>sudo chrt -f 1 ./rdpmc-bench</code></p>",
        "id": 207180699,
        "sender_full_name": "eddyb",
        "timestamp": 1597689516
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> did you mean the command to add, or remove, scheduling noise?</p>",
        "id": 207180732,
        "sender_full_name": "eddyb",
        "timestamp": 1597689537
    },
    {
        "content": "<p>-f 1 gives me 120</p>",
        "id": 207180735,
        "sender_full_name": "simulacrum",
        "timestamp": 1597689539
    },
    {
        "content": "<p>is there any way to just never schedule anything on that hardware thread until it's done?</p>",
        "id": 207180807,
        "sender_full_name": "eddyb",
        "timestamp": 1597689594
    },
    {
        "content": "<p>hm is there a perf thing to tell us if we did get descheduled?</p>",
        "id": 207180892,
        "sender_full_name": "simulacrum",
        "timestamp": 1597689634
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code> Performance counter stats for &#39;chrt -f 1 ./rdpmc-bench&#39;:\n\n                 1      context-switches\n                 0      cpu-migrations\n\n       5.056706532 seconds time elapsed\n\n       5.056689000 seconds user\n       0.000000000 seconds sys\n</code></pre></div>",
        "id": 207180916,
        "sender_full_name": "simulacrum",
        "timestamp": 1597689647
    },
    {
        "content": "<p>oh right I meant to count context switches</p>",
        "id": 207180918,
        "sender_full_name": "eddyb",
        "timestamp": 1597689647
    },
    {
        "content": "<p><code>sudo perf stat -e context-switches,cpu-migrations chrt -f 1 ./rdpmc-bench</code></p>",
        "id": 207180932,
        "sender_full_name": "simulacrum",
        "timestamp": 1597689660
    },
    {
        "content": "<p>okay so weird, if I remove the chrt I get 57 or so, but I have 233 context switches now</p>",
        "id": 207181009,
        "sender_full_name": "simulacrum",
        "timestamp": 1597689704
    },
    {
        "content": "<p>could we be missing increments <em>because</em> we're switching away?</p>",
        "id": 207181083,
        "sender_full_name": "simulacrum",
        "timestamp": 1597689730
    },
    {
        "content": "<p>(what are we even counting?)</p>",
        "id": 207181105,
        "sender_full_name": "simulacrum",
        "timestamp": 1597689739
    },
    {
        "content": "<p>I'm subtracting the number printed as <code>ecx</code>, and <code>10</code> (which seems to be the constant overhead of <code>rdpmc</code>+surrounding code)</p>",
        "id": 207181248,
        "sender_full_name": "eddyb",
        "timestamp": 1597689802
    },
    {
        "content": "<p>I should've been clearer: all the numbers printed should be 0 if the system isn't buggy</p>",
        "id": 207181280,
        "sender_full_name": "eddyb",
        "timestamp": 1597689823
    },
    {
        "content": "<p>does <code>perf</code> just return <code>0</code> for context switches when not running as root?</p>",
        "id": 207181574,
        "sender_full_name": "eddyb",
        "timestamp": 1597689929
    },
    {
        "content": "<p>not for me</p>",
        "id": 207181666,
        "sender_full_name": "simulacrum",
        "timestamp": 1597689962
    },
    {
        "content": "<p>you have the paranoid setting changed</p>",
        "id": 207181734,
        "sender_full_name": "eddyb",
        "timestamp": 1597689974
    },
    {
        "content": "<p>ah, perhaps that's why</p>",
        "id": 207181751,
        "sender_full_name": "simulacrum",
        "timestamp": 1597689982
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>               232      context-switches\n                 0      cpu-migrations\n                 0      sched:sched_kthread_stop\n                 0      sched:sched_kthread_stop_ret\n               294      sched:sched_waking\n               233      sched:sched_wakeup\n                 0      sched:sched_wakeup_new\n               232      sched:sched_switch\n                 1      sched:sched_migrate_task\n                 0      sched:sched_process_free\n                 1      sched:sched_process_exit\n                 0      sched:sched_wait_task\n                 0      sched:sched_process_wait\n                 0      sched:sched_process_fork\n                 1      sched:sched_process_exec\n                 0      sched:sched_stat_wait\n                 0      sched:sched_stat_sleep\n                 0      sched:sched_stat_iowait\n                 0      sched:sched_stat_blocked\n        2547087692      sched:sched_stat_runtime\n                 0      sched:sched_pi_setprio\n                 0      sched:sched_process_hang\n                 0      sched:sched_move_numa\n                 0      sched:sched_stick_numa\n                 0      sched:sched_swap_numa\n                24      sched:sched_wake_idle_without_ipi\n</code></pre></div>",
        "id": 207181763,
        "sender_full_name": "simulacrum",
        "timestamp": 1597689985
    },
    {
        "content": "<p>that's on a 57 run without any chrt</p>",
        "id": 207181813,
        "sender_full_name": "simulacrum",
        "timestamp": 1597690001
    },
    {
        "content": "<p>do you ever see any negative values for the shorter ones?</p>",
        "id": 207181878,
        "sender_full_name": "eddyb",
        "timestamp": 1597690030
    },
    {
        "content": "<p>if scheduling could steal I would expect that to happen sometimes</p>",
        "id": 207181895,
        "sender_full_name": "eddyb",
        "timestamp": 1597690039
    },
    {
        "content": "<p>no</p>",
        "id": 207181906,
        "sender_full_name": "simulacrum",
        "timestamp": 1597690045
    },
    {
        "content": "<p>zeroes yes, negative no</p>",
        "id": 207181926,
        "sender_full_name": "simulacrum",
        "timestamp": 1597690056
    },
    {
        "content": "<p>this is such a weird problem</p>",
        "id": 207181928,
        "sender_full_name": "eddyb",
        "timestamp": 1597690057
    },
    {
        "content": "<p>yeah 0 is correct, anything else is hardware/software bug :P</p>",
        "id": 207181944,
        "sender_full_name": "eddyb",
        "timestamp": 1597690071
    },
    {
        "content": "<p>/me is mad at CPU manufacturers if you can't tell</p>",
        "id": 207182009,
        "sender_full_name": "eddyb",
        "timestamp": 1597690087
    },
    {
        "content": "<p>with chrt:</p>\n<div class=\"codehilite\"><pre><span></span><code> Performance counter stats for &#39;chrt -f 99 ./rdpmc-bench&#39;:\n\n                 2      context-switches\n                 0      cpu-migrations\n                 0      sched:sched_kthread_stop\n                 0      sched:sched_kthread_stop_ret\n                72      sched:sched_waking\n                26      sched:sched_wakeup\n                 0      sched:sched_wakeup_new\n                 2      sched:sched_switch\n                 1      sched:sched_migrate_task\n                 0      sched:sched_process_free\n                 1      sched:sched_process_exit\n                 0      sched:sched_wait_task\n                 0      sched:sched_process_wait\n                 0      sched:sched_process_fork\n                 2      sched:sched_process_exec\n                 0      sched:sched_stat_wait\n                 0      sched:sched_stat_sleep\n                 0      sched:sched_stat_iowait\n                 0      sched:sched_stat_blocked\n            619517      sched:sched_stat_runtime\n                 0      sched:sched_pi_setprio\n                 0      sched:sched_process_hang\n                 0      sched:sched_move_numa\n                 0      sched:sched_stick_numa\n                 0      sched:sched_swap_numa\n                34      sched:sched_wake_idle_without_ipi\n</code></pre></div>",
        "id": 207182016,
        "sender_full_name": "simulacrum",
        "timestamp": 1597690090
    },
    {
        "content": "<p>(and 115)</p>",
        "id": 207182029,
        "sender_full_name": "simulacrum",
        "timestamp": 1597690103
    },
    {
        "content": "<p>what's the wakeup stuff?</p>",
        "id": 207182037,
        "sender_full_name": "eddyb",
        "timestamp": 1597690109
    },
    {
        "content": "<p>could we get everything down to 0?</p>",
        "id": 207182049,
        "sender_full_name": "eddyb",
        "timestamp": 1597690118
    },
    {
        "content": "<p>it's not described in the docs...</p>",
        "id": 207182065,
        "sender_full_name": "simulacrum",
        "timestamp": 1597690127
    },
    {
        "content": "<p>oh dear</p>",
        "id": 207182088,
        "sender_full_name": "eddyb",
        "timestamp": 1597690141
    },
    {
        "content": "<p>I assume it's a kernel function?</p>",
        "id": 207182114,
        "sender_full_name": "simulacrum",
        "timestamp": 1597690154
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> googling finds this <a href=\"https://perfetto.dev/docs/data-sources/cpu-scheduling\">https://perfetto.dev/docs/data-sources/cpu-scheduling</a></p>",
        "id": 207182239,
        "sender_full_name": "eddyb",
        "timestamp": 1597690204
    },
    {
        "content": "<p>specifically <a href=\"https://perfetto.dev/docs/data-sources/cpu-scheduling#scheduling-wakeups-and-latency-analysis\">https://perfetto.dev/docs/data-sources/cpu-scheduling#scheduling-wakeups-and-latency-analysis</a></p>",
        "id": 207182264,
        "sender_full_name": "eddyb",
        "timestamp": 1597690222
    },
    {
        "content": "<p>getting a timeline might be interesting heh</p>",
        "id": 207182310,
        "sender_full_name": "eddyb",
        "timestamp": 1597690248
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> wait hang on, that can't be all context-switches, we <em>print</em></p>",
        "id": 207182407,
        "sender_full_name": "eddyb",
        "timestamp": 1597690283
    },
    {
        "content": "<p>so syscall context-switches are missing</p>",
        "id": 207182431,
        "sender_full_name": "eddyb",
        "timestamp": 1597690294
    },
    {
        "content": "<p>I wonder what else might be</p>",
        "id": 207182446,
        "sender_full_name": "eddyb",
        "timestamp": 1597690306
    },
    {
        "content": "<p>although there are no syscalls between two <code>rdpmc</code> samples, and that's intentional</p>",
        "id": 207182518,
        "sender_full_name": "eddyb",
        "timestamp": 1597690323
    },
    {
        "content": "<p>if I am interpreting perf sched output correctly, we're on the CPU pretty much full time?</p>",
        "id": 207182677,
        "sender_full_name": "simulacrum",
        "timestamp": 1597690395
    },
    {
        "content": "<p><a href=\"https://gist.githubusercontent.com/Mark-Simulacrum/a6339a2999d766a52289186478b9d76c/raw/3c81671da9171644c98933f6fbd40529a31b5b55/gistfile1.txt\">https://gist.githubusercontent.com/Mark-Simulacrum/a6339a2999d766a52289186478b9d76c/raw/3c81671da9171644c98933f6fbd40529a31b5b55/gistfile1.txt</a></p>",
        "id": 207182862,
        "sender_full_name": "simulacrum",
        "timestamp": 1597690465
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> hmmm, my 333 is \"1 instruction every 3 million\" and I can see it in the <code>ecx=1000000</code> data (twice as many 0s as 1s), I wonder if that's something that happens every milisecond or so? it's only one instruction per milisecond, roughly</p>",
        "id": 207182869,
        "sender_full_name": "eddyb",
        "timestamp": 1597690470
    },
    {
        "content": "<p>you know what would be funny? if this was from the USB frame period</p>",
        "id": 207183079,
        "sender_full_name": "eddyb",
        "timestamp": 1597690566
    },
    {
        "content": "<p>\"1kHz ground loop accidentally increments CPU performance monitoring counter\" sounds like the kind of thing I'd be cursed with</p>",
        "id": 207183175,
        "sender_full_name": "eddyb",
        "timestamp": 1597690614
    },
    {
        "content": "<p>(but I doubt it could do that without breaking other stuff)</p>",
        "id": 207183204,
        "sender_full_name": "eddyb",
        "timestamp": 1597690631
    },
    {
        "content": "<p>here's a timechart svg <a href=\"https://gist.github.com/Mark-Simulacrum/f5ad629a3d3dbc8d9705e98bcd08eb89\">https://gist.github.com/Mark-Simulacrum/f5ad629a3d3dbc8d9705e98bcd08eb89</a></p>",
        "id": 207183278,
        "sender_full_name": "simulacrum",
        "timestamp": 1597690666
    },
    {
        "content": "<p><a href=\"https://gist.githubusercontent.com/Mark-Simulacrum/f5ad629a3d3dbc8d9705e98bcd08eb89/raw/5ed02b00183f60335b372ff04bfede95a0ec0ff9/o.svg\">https://gist.githubusercontent.com/Mark-Simulacrum/f5ad629a3d3dbc8d9705e98bcd08eb89/raw/5ed02b00183f60335b372ff04bfede95a0ec0ff9/o.svg</a></p>",
        "id": 207183352,
        "sender_full_name": "eddyb",
        "timestamp": 1597690686
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> can perf count, like, just hardware interrupts?</p>",
        "id": 207183485,
        "sender_full_name": "eddyb",
        "timestamp": 1597690748
    },
    {
        "content": "<p>no idea</p>",
        "id": 207183500,
        "sender_full_name": "simulacrum",
        "timestamp": 1597690756
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> so uhh <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> found this: <code>CONFIG_HZ=300</code></p>",
        "id": 207183968,
        "sender_full_name": "eddyb",
        "timestamp": 1597690958
    },
    {
        "content": "<p>I'm not rebooting for this</p>",
        "id": 207184015,
        "sender_full_name": "simulacrum",
        "timestamp": 1597690972
    },
    {
        "content": "<p>she changed my code to also measure time (smart, welp) and it seems to match</p>",
        "id": 207184017,
        "sender_full_name": "eddyb",
        "timestamp": 1597690974
    },
    {
        "content": "<p>yeah me neither</p>",
        "id": 207184038,
        "sender_full_name": "eddyb",
        "timestamp": 1597690987
    },
    {
        "content": "<p>but it's an interesting starting point</p>",
        "id": 207184056,
        "sender_full_name": "eddyb",
        "timestamp": 1597690996
    },
    {
        "content": "<p>so, like, the scheduler parameters only affect what it <em>chooses</em> to do, but the preemption interrupt <em>always</em> fires</p>",
        "id": 207184100,
        "sender_full_name": "eddyb",
        "timestamp": 1597691019
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> <code>rustup component add --toolchain nightly rustc-dev &amp;&amp; curl -sS https://gist.githubusercontent.com/m-ou-se/c904c59086e013d548b359912fc26467/raw/ac31ae5f0e02927a0213ebefba5565134d9ff6f7/rdpmc-bench.rs | rustc +nightly - -o rdpmc-bench -O &amp;&amp; ./rdpmc-bench</code></p>",
        "id": 207184545,
        "sender_full_name": "eddyb",
        "timestamp": 1597691230
    },
    {
        "content": "<p>this is <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span>'s variant, which does confirm it's 1kHz on the Zen 1 EPYC I was getting 333 on</p>",
        "id": 207184574,
        "sender_full_name": "eddyb",
        "timestamp": 1597691256
    },
    {
        "content": "<p>also 1kHz on my laptop</p>",
        "id": 207184618,
        "sender_full_name": "eddyb",
        "timestamp": 1597691282
    },
    {
        "content": "<p>54 (213110 μs) = 3946 μs per thing = 253 Hz</p>",
        "id": 207184653,
        "sender_full_name": "simulacrum",
        "timestamp": 1597691284
    },
    {
        "content": "<p>and same-ish on 3600</p>",
        "id": 207184714,
        "sender_full_name": "simulacrum",
        "timestamp": 1597691320
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <code>zgrep HZ /proc/config.gz</code></p>",
        "id": 207184716,
        "sender_full_name": "eddyb",
        "timestamp": 1597691322
    },
    {
        "content": "<p>I don't have that file</p>",
        "id": 207184761,
        "sender_full_name": "simulacrum",
        "timestamp": 1597691346
    },
    {
        "content": "<p>huh</p>",
        "id": 207184769,
        "sender_full_name": "eddyb",
        "timestamp": 1597691355
    },
    {
        "content": "<p>what do you have for <code>/proc/config*</code>?</p>",
        "id": 207184794,
        "sender_full_name": "eddyb",
        "timestamp": 1597691369
    },
    {
        "content": "<p>nothing</p>",
        "id": 207184833,
        "sender_full_name": "simulacrum",
        "timestamp": 1597691389
    },
    {
        "content": "<p>hmpf</p>",
        "id": 207184850,
        "sender_full_name": "eddyb",
        "timestamp": 1597691398
    },
    {
        "content": "<p>ah it's in /boot for me it seems</p>",
        "id": 207184852,
        "sender_full_name": "simulacrum",
        "timestamp": 1597691398
    },
    {
        "content": "<p>3600:</p>\n<div class=\"codehilite\"><pre><span></span><code>CONFIG_NO_HZ_COMMON=y\n# CONFIG_HZ_PERIODIC is not set\nCONFIG_NO_HZ_IDLE=y\n# CONFIG_NO_HZ_FULL is not set\nCONFIG_NO_HZ=y\n# CONFIG_HZ_100 is not set\nCONFIG_HZ_250=y\n# CONFIG_HZ_300 is not set\n# CONFIG_HZ_1000 is not set\nCONFIG_HZ=250\n</code></pre></div>\n\n\n<p>3950x:</p>\n<div class=\"codehilite\"><pre><span></span><code>CONFIG_NO_HZ_COMMON=y\n# CONFIG_HZ_PERIODIC is not set\nCONFIG_NO_HZ_IDLE=y\n# CONFIG_NO_HZ_FULL is not set\nCONFIG_NO_HZ=y\n# CONFIG_HZ_100 is not set\nCONFIG_HZ_250=y\n# CONFIG_HZ_300 is not set\n# CONFIG_HZ_1000 is not set\nCONFIG_HZ=250\n</code></pre></div>",
        "id": 207184986,
        "sender_full_name": "simulacrum",
        "timestamp": 1597691463
    },
    {
        "content": "<p>lol nice, perfect match</p>",
        "id": 207185012,
        "sender_full_name": "eddyb",
        "timestamp": 1597691477
    },
    {
        "content": "<p>so, we literally miscount almost always only one extra instruction per scheduler interrupt, with I guess a few more here and there? so at least most of the noise from this seems like a bug either in the kernel or in the CPU's interrupt handling</p>",
        "id": 207185098,
        "sender_full_name": "eddyb",
        "timestamp": 1597691517
    },
    {
        "content": "<p>I have <code>CONFIG_NO_HZ=y</code> and <code>CONFIG_HZ=1000</code></p>",
        "id": 207185286,
        "sender_full_name": "cuviper",
        "timestamp": 1597691618
    },
    {
        "content": "<p>I think we should just grep for <code>CONFIG_HZ=</code></p>",
        "id": 207185317,
        "sender_full_name": "eddyb",
        "timestamp": 1597691633
    },
    {
        "content": "<p>the other stuff is how it picked the numerical value</p>",
        "id": 207185335,
        "sender_full_name": "eddyb",
        "timestamp": 1597691641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> and you get around 1000 Hz if you run the modified command?</p>",
        "id": 207185401,
        "sender_full_name": "eddyb",
        "timestamp": 1597691662
    },
    {
        "content": "<p>yes</p>",
        "id": 207185415,
        "sender_full_name": "cuviper",
        "timestamp": 1597691675
    },
    {
        "content": "<p>so all the numbers we were looking at before are not that interesting heh</p>",
        "id": 207185453,
        "sender_full_name": "eddyb",
        "timestamp": 1597691701
    },
    {
        "content": "<p>you know what's funny? if we had a software event for this \"every <code>1/CONFIG_HZ</code> seconds\" interrupt or w/e it is, we could just subtract that value from the instruction counter and it would improve the quality of the data</p>",
        "id": 207185673,
        "sender_full_name": "eddyb",
        "timestamp": 1597691831
    },
    {
        "content": "<p>there surely is a tracepoint for that, at least</p>",
        "id": 207185837,
        "sender_full_name": "cuviper",
        "timestamp": 1597691921
    },
    {
        "content": "<p>one of <code>perf list sched_</code></p>",
        "id": 207185983,
        "sender_full_name": "cuviper",
        "timestamp": 1597692021
    },
    {
        "content": "<p>(gotta be root / non-paranoid)</p>",
        "id": 207185992,
        "sender_full_name": "cuviper",
        "timestamp": 1597692031
    },
    {
        "content": "<p>ooooh, <code>perf list</code> needs <code>sudo</code> to even see the full list</p>",
        "id": 207186067,
        "sender_full_name": "eddyb",
        "timestamp": 1597692076
    },
    {
        "content": "<p>(maybe only root)</p>",
        "id": 207186076,
        "sender_full_name": "cuviper",
        "timestamp": 1597692082
    },
    {
        "content": "<p>oh wait aren't these what <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> was looking at before?</p>",
        "id": 207186244,
        "sender_full_name": "eddyb",
        "timestamp": 1597692182
    },
    {
        "content": "<p>yeah didn't seem relevant</p>",
        "id": 207186292,
        "sender_full_name": "simulacrum",
        "timestamp": 1597692217
    },
    {
        "content": "<p>well, correlated</p>",
        "id": 207186315,
        "sender_full_name": "simulacrum",
        "timestamp": 1597692230
    },
    {
        "content": "<p>maybe one of the irq events then?</p>",
        "id": 207186423,
        "sender_full_name": "cuviper",
        "timestamp": 1597692276
    },
    {
        "content": "<p>I'll go looking</p>",
        "id": 207186446,
        "sender_full_name": "eddyb",
        "timestamp": 1597692289
    },
    {
        "content": "<p><code>irq:softirq_entry</code> seems to have a relevant value, not sure yet</p>",
        "id": 207186703,
        "sender_full_name": "eddyb",
        "timestamp": 1597692444
    },
    {
        "content": "<p>I guess it counts more than one thing?</p>",
        "id": 207186721,
        "sender_full_name": "eddyb",
        "timestamp": 1597692463
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> oh I think I found it: <code>timer:hrtimer_expire_entry</code></p>",
        "id": 207186904,
        "sender_full_name": "eddyb",
        "timestamp": 1597692545
    },
    {
        "content": "<blockquote>\n<p>If type is <code>PERF_TYPE_TRACEPOINT</code>, then we are measuring kernel tracepoints.  The value to use in <code>config</code> can be obtained from under debugfs <code>tracing/events/*/*/id</code> if ftrace is enabled in the kernel.</p>\n</blockquote>",
        "id": 207187290,
        "sender_full_name": "eddyb",
        "timestamp": 1597692757
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ sudo cat /sys/kernel/debug/tracing/events/timer/hrtimer_expire_entry/id\n367\n</code></pre></div>",
        "id": 207187375,
        "sender_full_name": "eddyb",
        "timestamp": 1597692828
    },
    {
        "content": "<p>so that's how I'd get a hold of that</p>",
        "id": 207187492,
        "sender_full_name": "eddyb",
        "timestamp": 1597692884
    },
    {
        "content": "<p>oh but can we even tie tracepoint events to the core the process is running on?</p>",
        "id": 207187716,
        "sender_full_name": "eddyb",
        "timestamp": 1597693021
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> so I wonder if the best recourse we have for now is CONFIG_HZ=10 or w/e :P</p>",
        "id": 207187835,
        "sender_full_name": "eddyb",
        "timestamp": 1597693098
    },
    {
        "content": "<p>I am mildly uncomfortable recompiling kernels for this</p>",
        "id": 207187857,
        "sender_full_name": "simulacrum",
        "timestamp": 1597693113
    },
    {
        "content": "<p>I guess we can do it later too</p>",
        "id": 207187866,
        "sender_full_name": "simulacrum",
        "timestamp": 1597693123
    },
    {
        "content": "<p>hmm, is there no way to change this at runtime? I agree, recompiling kernels is unpractical</p>",
        "id": 207187896,
        "sender_full_name": "eddyb",
        "timestamp": 1597693154
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> may know. I suspect no though.</p>",
        "id": 207187927,
        "sender_full_name": "simulacrum",
        "timestamp": 1597693175
    },
    {
        "content": "<p>hmm there's some math I haven't done: <code>44*333</code></p>",
        "id": 207188152,
        "sender_full_name": "eddyb",
        "timestamp": 1597693281
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> You cannot change HZ at runtime. And you can't set it to an unsupported value.</p>",
        "id": 207188161,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597693291
    },
    {
        "content": "<p>oh ugh</p>",
        "id": 207188181,
        "sender_full_name": "eddyb",
        "timestamp": 1597693297
    },
    {
        "content": "<p>You can only set it to 100, 250, 300, or 1000.</p>",
        "id": 207188213,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597693311
    },
    {
        "content": "<p>If you want to avoid the scheduler here, you want <code>CONFIG_NO_HZ_FULL</code>, which has some caveats documented in <code>Documentation</code>.</p>",
        "id": 207188293,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597693338
    },
    {
        "content": "<p>so about 14652 instructions are added just by scheduling alone, to my libcore measurements. and the common ± there, for the total, is ~7000. that probably isn't a coincidence</p>",
        "id": 207188298,
        "sender_full_name": "eddyb",
        "timestamp": 1597693340
    },
    {
        "content": "<p>Full nohz means that if a thread has only one process scheduled on it, it'll never be interrupted for scheduling.</p>",
        "id": 207188410,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597693418
    },
    {
        "content": "<p>cooperative multitasking :D</p>",
        "id": 207188432,
        "sender_full_name": "eddyb",
        "timestamp": 1597693440
    },
    {
        "content": "<p>Single-tasking. ;)</p>",
        "id": 207188486,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597693451
    },
    {
        "content": "<p>oh wait you mean, like, I can pin a hardware thread to a core and have it not be interrupted at all?</p>",
        "id": 207188500,
        "sender_full_name": "eddyb",
        "timestamp": 1597693464
    },
    {
        "content": "<p>Yes!</p>",
        "id": 207188506,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597693469
    },
    {
        "content": "<p>sweet! thank you so much :D</p>",
        "id": 207188520,
        "sender_full_name": "eddyb",
        "timestamp": 1597693479
    },
    {
        "content": "<p>Take a look in the kernel docs for more info about full nohz.</p>",
        "id": 207188560,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597693504
    },
    {
        "content": "<p>There are some other steps you have to take to make that work.</p>",
        "id": 207188569,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597693511
    },
    {
        "content": "<p>(They involve telling the kernel to not do other work on that CPU either.)</p>",
        "id": 207188578,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597693520
    },
    {
        "content": "<p>But yes, this is exactly what you want.</p>",
        "id": 207188599,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597693534
    },
    {
        "content": "<p>It's the way to get the least possible jitter.</p>",
        "id": 207188608,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597693543
    },
    {
        "content": "<blockquote>\n<p>This is important for applications with aggressive real-time response constraints because it allows them to improve their worst-case response times by the maximum duration of a scheduling-clock interrupt.</p>\n</blockquote>",
        "id": 207188710,
        "sender_full_name": "eddyb",
        "timestamp": 1597693601
    },
    {
        "content": "<p>this is all kinda silly because that extra instruction per interrupt should just not be counted <em>sigh</em></p>",
        "id": 207188754,
        "sender_full_name": "eddyb",
        "timestamp": 1597693630
    },
    {
        "content": "<p>oh you specify with a boot parameter which cores get this behavior. so you can limit it to a handful and schedule the measurement stuff on those</p>",
        "id": 207188888,
        "sender_full_name": "eddyb",
        "timestamp": 1597693714
    },
    {
        "content": "<p>Yes, exactly.</p>",
        "id": 207188895,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597693721
    },
    {
        "content": "<p>And then make sure that the measurement bits don't compete with each other.</p>",
        "id": 207188935,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597693752
    },
    {
        "content": "<p>that seems great, we have 48 hardware threads, we could spare 2-4 without affecting most of the system, right?</p>",
        "id": 207188940,
        "sender_full_name": "eddyb",
        "timestamp": 1597693756
    },
    {
        "content": "<p>You need only <em>one</em> process running on a core.</p>",
        "id": 207188943,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597693758
    },
    {
        "content": "<p>Yeah, the only thing that'll care will be large compiles. :)</p>",
        "id": 207188971,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597693783
    },
    {
        "content": "<p>sadly this does seem like it requires a bunch of manual configuration, so you do it to a machine, rather than baking it into a measurement tool</p>",
        "id": 207189074,
        "sender_full_name": "eddyb",
        "timestamp": 1597693821
    },
    {
        "content": "<p>Right.</p>",
        "id": 207189080,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597693826
    },
    {
        "content": "<p>That's the best you're going to get, though.</p>",
        "id": 207189091,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597693834
    },
    {
        "content": "<p>Short of running bare-metal. ;)</p>",
        "id": 207189102,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597693841
    },
    {
        "content": "<p>it doesn't have to be this way, at least not for the 1 instruction per timer interrupt. <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> suggests there might be a hardcoded value that's off by one, <em>somewhere</em> in the kernel</p>",
        "id": 207189162,
        "sender_full_name": "eddyb",
        "timestamp": 1597693871
    },
    {
        "content": "<p>That wouldn't be <em>shocking</em>, such as if one of the save/restore instructions is itself being counted.</p>",
        "id": 207189225,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597693911
    },
    {
        "content": "<p>But in the meantime, you might still try this to confirm your hypothesis.</p>",
        "id": 207189295,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597693934
    },
    {
        "content": "<p>yeah, I'm only barely trying to avoid making this an even bigger rabbit hole than it already is :P</p>",
        "id": 207189366,
        "sender_full_name": "eddyb",
        "timestamp": 1597693975
    },
    {
        "content": "<p>believe it or not, I wanted to optimize the trait system</p>",
        "id": 207189390,
        "sender_full_name": "eddyb",
        "timestamp": 1597693985
    },
    {
        "content": "<p>that's how all of this started</p>",
        "id": 207189404,
        "sender_full_name": "eddyb",
        "timestamp": 1597693991
    },
    {
        "content": "<p>I wonder if it's <code>sysret</code>/equivalent, where <em>technically</em> we're back in usermode when that retires, so it's counted?</p>",
        "id": 207189745,
        "sender_full_name": "cuviper",
        "timestamp": 1597694190
    },
    {
        "content": "<p>heh, I was thinking something like that too</p>",
        "id": 207190249,
        "sender_full_name": "eddyb",
        "timestamp": 1597694486
    },
    {
        "content": "<p>okay so I found this <a href=\"https://github.com/torvalds/linux/blob/00e4db51259a5f936fec1424b884f029479d3981/kernel/time/hrtimer.c#L1521-L1526\">https://github.com/torvalds/linux/blob/00e4db51259a5f936fec1424b884f029479d3981/kernel/time/hrtimer.c#L1521-L1526</a></p>",
        "id": 207190261,
        "sender_full_name": "eddyb",
        "timestamp": 1597694491
    },
    {
        "content": "<p><a href=\"https://github.com/torvalds/linux/blob/00e4db51259a5f936fec1424b884f029479d3981/kernel/time/hrtimer.c#L1730-L1733\">https://github.com/torvalds/linux/blob/00e4db51259a5f936fec1424b884f029479d3981/kernel/time/hrtimer.c#L1730-L1733</a></p>",
        "id": 207190417,
        "sender_full_name": "eddyb",
        "timestamp": 1597694555
    },
    {
        "content": "<p>I guess that would be <code>iret</code> in this case, but same idea</p>",
        "id": 207190419,
        "sender_full_name": "cuviper",
        "timestamp": 1597694556
    },
    {
        "content": "<p>actually hrtimer might not even be it, it could just be this thing here <a href=\"https://github.com/torvalds/linux/blob/b923f1247b72fc100b87792fd2129d026bb10e66/kernel/time/timer.c#L1715\">https://github.com/torvalds/linux/blob/b923f1247b72fc100b87792fd2129d026bb10e66/kernel/time/timer.c#L1715</a></p>",
        "id": 207190540,
        "sender_full_name": "eddyb",
        "timestamp": 1597694615
    },
    {
        "content": "<p>why is x86 not on here <a href=\"https://github.com/torvalds/linux/search?p=1&amp;q=update_process_times&amp;unscoped_q=update_process_times\">https://github.com/torvalds/linux/search?p=1&amp;q=update_process_times&amp;unscoped_q=update_process_times</a></p>",
        "id": 207190984,
        "sender_full_name": "eddyb",
        "timestamp": 1597694830
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> That's for tracking user/system time, not instruction counts, AFAIK.</p>",
        "id": 207191167,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597694914
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I'm looking for the IRQ handler</p>",
        "id": 207191196,
        "sender_full_name": "eddyb",
        "timestamp": 1597694932
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> wait, if I can't find it, then it could be that still</p>",
        "id": 207191884,
        "sender_full_name": "eddyb",
        "timestamp": 1597695353
    },
    {
        "content": "<p>oh all the IRQ stuff is in here <a href=\"https://github.com/torvalds/linux/blob/4da9f3302615f4191814f826054846bf843e24fa/arch/x86/entry/entry_64.S\">https://github.com/torvalds/linux/blob/4da9f3302615f4191814f826054846bf843e24fa/arch/x86/entry/entry_64.S</a></p>",
        "id": 207192074,
        "sender_full_name": "eddyb",
        "timestamp": 1597695441
    },
    {
        "content": "<p>so many levels of indirection <a href=\"https://github.com/torvalds/linux/blob/921d2597abfc05e303f08baa6ead8f9ab8a723e1/arch/x86/include/asm/idtentry.h#L572\">https://github.com/torvalds/linux/blob/921d2597abfc05e303f08baa6ead8f9ab8a723e1/arch/x86/include/asm/idtentry.h#L572</a></p>",
        "id": 207192456,
        "sender_full_name": "eddyb",
        "timestamp": 1597695624
    },
    {
        "content": "<p>you're in a maze of twisty macros, all alike</p>",
        "id": 207192538,
        "sender_full_name": "cuviper",
        "timestamp": 1597695681
    },
    {
        "content": "<p>this feels right <a href=\"https://github.com/torvalds/linux/blob/08bf1a27c4c354b853fd81a79e953525bbcc8506/arch/x86/kernel/irq.c#L226-L263\">https://github.com/torvalds/linux/blob/08bf1a27c4c354b853fd81a79e953525bbcc8506/arch/x86/kernel/irq.c#L226-L263</a></p>",
        "id": 207192585,
        "sender_full_name": "eddyb",
        "timestamp": 1597695713
    },
    {
        "content": "<p>what exactly are you looking for?</p>",
        "id": 207192669,
        "sender_full_name": "cuviper",
        "timestamp": 1597695746
    },
    {
        "content": "<p>something that might be pausing/subtracting the MSRs</p>",
        "id": 207192684,
        "sender_full_name": "eddyb",
        "timestamp": 1597695755
    },
    {
        "content": "<p>I think the kernel/user separation is a pure hardware feature, so perf only needs to bother when context switching</p>",
        "id": 207192768,
        "sender_full_name": "cuviper",
        "timestamp": 1597695809
    },
    {
        "content": "<p>or if you request more counters than you have hw, I guess it will also mux</p>",
        "id": 207192954,
        "sender_full_name": "cuviper",
        "timestamp": 1597695903
    },
    {
        "content": "<p>yeah okay I think there's just no extra code running that I can see. so it must be the damned <code>iret</code> <em>sigh</em></p>",
        "id": 207192960,
        "sender_full_name": "eddyb",
        "timestamp": 1597695908
    },
    {
        "content": "<p>which means any interrupts on that core are relevant, not just the timer</p>",
        "id": 207193023,
        "sender_full_name": "eddyb",
        "timestamp": 1597695951
    },
    {
        "content": "<p>yeah</p>",
        "id": 207193037,
        "sender_full_name": "cuviper",
        "timestamp": 1597695960
    },
    {
        "content": "<p>wait can we just count <code>iret</code>s?</p>",
        "id": 207193251,
        "sender_full_name": "eddyb",
        "timestamp": 1597696075
    },
    {
        "content": "<p>doesn't look like there's a nice <code>rdpmc</code> counter for <code>iret</code>s :/</p>",
        "id": 207193889,
        "sender_full_name": "eddyb",
        "timestamp": 1597696379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> heh at this point it might be easier to just run the process under <code>qemu-user-...</code> or something</p>",
        "id": 207194095,
        "sender_full_name": "eddyb",
        "timestamp": 1597696469
    },
    {
        "content": "<p>we ain't patching the CPUs and modifying the kernel seems like a hassle (and nobody else benefits from it without doing the same)</p>",
        "id": 207194176,
        "sender_full_name": "eddyb",
        "timestamp": 1597696509
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> oh dear, see section 3.1 <a href=\"http://web.eece.maine.edu/~vweaver/projects/deterministic/deterministic_counters.pdf#page=10\">http://web.eece.maine.edu/~vweaver/projects/deterministic/deterministic_counters.pdf#page=10</a></p>",
        "id": 207197780,
        "sender_full_name": "eddyb",
        "timestamp": 1597698550
    },
    {
        "content": "<p>as usual, <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> is finding more things than I am, although I guess I didn't even think too much about searching for it</p>",
        "id": 207197808,
        "sender_full_name": "eddyb",
        "timestamp": 1597698581
    },
    {
        "content": "<p>well, good to find prior art, at least</p>",
        "id": 207198004,
        "sender_full_name": "cuviper",
        "timestamp": 1597698707
    },
    {
        "content": "<blockquote>\n<p>This interrupt behavior was originally undocumented  when  we  first described  it,  but  now  appears  in  some  vendor documentation.   The  number  of  extra events  is  inherently  unpredictable,  but often can be measured with an additional “hardware interrupts” event that can be used to adjust the total aggregate results.</p>\n</blockquote>",
        "id": 207198007,
        "sender_full_name": "eddyb",
        "timestamp": 1597698712
    },
    {
        "content": "<p>section 4 has ideas on how to compensate</p>",
        "id": 207198239,
        "sender_full_name": "eddyb",
        "timestamp": 1597698822
    },
    {
        "content": "<p>I've yet to find a \"hardware interrupt\" event in <code>perf list</code> though</p>",
        "id": 207198365,
        "sender_full_name": "eddyb",
        "timestamp": 1597698875
    },
    {
        "content": "<p>might not be known by the kernel, have to manually pull out the mask from that pdf</p>",
        "id": 207198413,
        "sender_full_name": "simulacrum",
        "timestamp": 1597698911
    },
    {
        "content": "<p>which is a pain :/</p>",
        "id": 207198417,
        "sender_full_name": "simulacrum",
        "timestamp": 1597698913
    },
    {
        "content": "<p>hmm, there's this I guess:</p>\n<blockquote>\n<p>The number of far control transfers retired including far call/jump/return, IRET, SYSCALL and SYSRET, plus exceptions and interrupts. Far control transfers are not subject to branch prediction.</p>\n</blockquote>",
        "id": 207198537,
        "sender_full_name": "eddyb",
        "timestamp": 1597698985
    },
    {
        "content": "<p>why is \"Retired <code>cpuid</code> instructions\" in the Load/Store unit lol</p>",
        "id": 207198617,
        "sender_full_name": "eddyb",
        "timestamp": 1597699075
    },
    {
        "content": "<p>I'll look at Ivy Bridge next</p>",
        "id": 207198761,
        "sender_full_name": "eddyb",
        "timestamp": 1597699159
    },
    {
        "content": "<p>I think that should be <a href=\"https://software.intel.com/sites/default/files/managed/8b/6e/335279_performance_monitoring_events_guide.pdf#page=113\">https://software.intel.com/sites/default/files/managed/8b/6e/335279_performance_monitoring_events_guide.pdf#page=113</a></p>",
        "id": 207198863,
        "sender_full_name": "eddyb",
        "timestamp": 1597699249
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> oh it looks like <code>INST_RETIRED.ANY</code> is just an always-on counter, and <code>INST_RETIRED.ANY_P</code> is what <code>instructions:u</code> uses</p>",
        "id": 207199993,
        "sender_full_name": "eddyb",
        "timestamp": 1597700270
    },
    {
        "content": "<p>the \"p\" stands for \"programmable\"</p>",
        "id": 207200007,
        "sender_full_name": "eddyb",
        "timestamp": 1597700279
    },
    {
        "content": "<p>ah</p>",
        "id": 207200065,
        "sender_full_name": "cuviper",
        "timestamp": 1597700307
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> oooh and \"precise\" means you can presumably tell it to snapshot the instruction pointer after <em>exactly</em> a specific number of events, which is not somethin we need</p>",
        "id": 207200235,
        "sender_full_name": "eddyb",
        "timestamp": 1597700432
    },
    {
        "content": "<p>HARDWARE_INTERRUPTS is limited to... \"Knights Corner\", which is a Phi uarch?!</p>",
        "id": 207200478,
        "sender_full_name": "eddyb",
        "timestamp": 1597700602
    },
    {
        "content": "<p>oh it's called HW_INTERRUPTS on the others</p>",
        "id": 207200580,
        "sender_full_name": "eddyb",
        "timestamp": 1597700674
    },
    {
        "content": "<p>Skylake and Kaby Lake should have <code>HW_INTERRUPTS.RECEIVED</code>, weirdly enough there's more counters on Atoms than that</p>",
        "id": 207200683,
        "sender_full_name": "eddyb",
        "timestamp": 1597700755
    },
    {
        "content": "<p>anyway, yeah, uhh, <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span>'s Xeon Gold could work :P</p>",
        "id": 207200844,
        "sender_full_name": "eddyb",
        "timestamp": 1597700867
    },
    {
        "content": "<p>what do you want me to run.</p>",
        "id": 207200897,
        "sender_full_name": "nagisa",
        "timestamp": 1597700886
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> <code>perf list hw_int</code>, although I'm worried you might've said you have an old kernel on it</p>",
        "id": 207200959,
        "sender_full_name": "eddyb",
        "timestamp": 1597700942
    },
    {
        "content": "<p>I've been looking for ways to count hardware interrupts in the hopes of subtracting them from the number of retired instructions</p>",
        "id": 207201068,
        "sender_full_name": "eddyb",
        "timestamp": 1597701019
    },
    {
        "content": "<p>or at least confirming that they match up</p>",
        "id": 207201111,
        "sender_full_name": "eddyb",
        "timestamp": 1597701054
    },
    {
        "content": "<p>yeah, that command outputs nothing.</p>",
        "id": 207201239,
        "sender_full_name": "nagisa",
        "timestamp": 1597701161
    },
    {
        "content": "<p>oh <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> was able to get it working on a Coffee lake laptop, it's incredibly close :D</p>",
        "id": 207201532,
        "sender_full_name": "eddyb",
        "timestamp": 1597701407
    },
    {
        "content": "<p>(total extra instructions:u=3061. hw_interrupts.received:u=3059)</p>",
        "id": 207201574,
        "sender_full_name": "eddyb",
        "timestamp": 1597701446
    },
    {
        "content": "<p>so the moral of the story is don’t touch touchpad or the spacebar when benchmarking.</p>",
        "id": 207201676,
        "sender_full_name": "nagisa",
        "timestamp": 1597701514
    },
    {
        "content": "<p>lmao</p>",
        "id": 207201678,
        "sender_full_name": "eddyb",
        "timestamp": 1597701519
    },
    {
        "content": "<p>the scheduler timer is like 1kHz for me anyway</p>",
        "id": 207201688,
        "sender_full_name": "eddyb",
        "timestamp": 1597701534
    },
    {
        "content": "<p>most of the modern kernels use tickless, don't they?</p>",
        "id": 207201723,
        "sender_full_name": "nagisa",
        "timestamp": 1597701566
    },
    {
        "content": "<p>I don't know, you'd have to ask <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span></p>",
        "id": 207201752,
        "sender_full_name": "eddyb",
        "timestamp": 1597701601
    },
    {
        "content": "<p>but at least for every machine we've tested on, the extra instructions correlate with <code>CONFIG_HZ</code></p>",
        "id": 207201823,
        "sender_full_name": "eddyb",
        "timestamp": 1597701633
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> if only Zen had a hardware interrupt counter...</p>",
        "id": 207201868,
        "sender_full_name": "eddyb",
        "timestamp": 1597701662
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/207201723\">said</a>:</p>\n<blockquote>\n<p>most of the modern kernels use tickless, don't they?</p>\n</blockquote>\n<p>Most modern kernels use tickless <em>idle</em>. That means they don't wake up if there's no work to do, which makes them sleep in lower power states.</p>",
        "id": 207202028,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597701751
    },
    {
        "content": "<p>Tickless non-idle is much newer, and most distributions don't use it.</p>",
        "id": 207202037,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597701763
    },
    {
        "content": "<p>you could set the kernel to configure interrupt thing to not deliver interrupts to certain cores only.</p>",
        "id": 207202059,
        "sender_full_name": "nagisa",
        "timestamp": 1597701775
    },
    {
        "content": "<p>That's the <code>CONFIG_NO_HZ_FULL</code> I mentioned above.</p>",
        "id": 207202063,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597701777
    },
    {
        "content": "<p>Ah</p>\n<div class=\"codehilite\"><pre><span></span><code>$ cat /proc/config.gz | gzip -d | grep NO_HZ\nCONFIG_NO_HZ_COMMON=y\nCONFIG_NO_HZ_IDLE=y\n# CONFIG_NO_HZ_FULL is not set\nCONFIG_NO_HZ=y\n</code></pre></div>",
        "id": 207202097,
        "sender_full_name": "nagisa",
        "timestamp": 1597701796
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> Yeah, interrupt remediation/mitigation helps as well, and I believe nohz_full does some of that.</p>",
        "id": 207202104,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597701800
    },
    {
        "content": "<p>Yup.</p>",
        "id": 207202112,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597701806
    },
    {
        "content": "<p>Most distribution kernels don't use it.</p>",
        "id": 207202121,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597701813
    },
    {
        "content": "<p>It's an improvement for workloads that run one process per logical CPU, and a slight degradation to context switch performance.</p>",
        "id": 207202139,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597701832
    },
    {
        "content": "<p>oh come on, even <code>perf_event_open</code>'s manpage mentions the problem:</p>\n<blockquote>\n<p><code>PERF_COUNT_HW_INSTRUCTIONS</code> Retired instructions.  Be careful, these can be affected by various issues, most notably hardware interrupt counts.</p>\n</blockquote>",
        "id": 207262956,
        "sender_full_name": "eddyb",
        "timestamp": 1597759487
    },
    {
        "content": "<p>/me should learn to read</p>",
        "id": 207262985,
        "sender_full_name": "eddyb",
        "timestamp": 1597759503
    },
    {
        "content": "<p>okay this is how you'd look up any of the CPU-specific names (basically, might as well use the numbers from the Intel/AMD manuals):</p>\n<blockquote>\n<p>The <code>libpfm4</code> library can be used to translate from the name in the architectural manuals to the raw hex value <code>perf_event_open()</code> expects in this field.</p>\n</blockquote>",
        "id": 207263314,
        "sender_full_name": "eddyb",
        "timestamp": 1597759656
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/eRAU5wMiTOzoAs0xndOOwYqc/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/eRAU5wMiTOzoAs0xndOOwYqc/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/eRAU5wMiTOzoAs0xndOOwYqc/image.png\"></a></div>",
        "id": 207263726,
        "sender_full_name": "eddyb",
        "timestamp": 1597759844
    },
    {
        "content": "<p>presumably <code>USR</code> is how it automatically pauses when the kernel is executing</p>",
        "id": 207263761,
        "sender_full_name": "eddyb",
        "timestamp": 1597759863
    },
    {
        "content": "<p><code>hw_interrupts.received:u=13257</code></p>",
        "id": 207264942,
        "sender_full_name": "eddyb",
        "timestamp": 1597760427
    },
    {
        "content": "<p>wat</p>",
        "id": 207264946,
        "sender_full_name": "eddyb",
        "timestamp": 1597760428
    },
    {
        "content": "<p>is this how people find undocumented hardware features??</p>",
        "id": 207264991,
        "sender_full_name": "eddyb",
        "timestamp": 1597760451
    },
    {
        "content": "<p>this is on Ivy Bridge, which does not have <code>0x01_cb</code> aka <code>hw_interrupts.received</code></p>",
        "id": 207265096,
        "sender_full_name": "eddyb",
        "timestamp": 1597760507
    },
    {
        "content": "<p>(that's the correct number, so it's not just random other counter)</p>",
        "id": 207265289,
        "sender_full_name": "eddyb",
        "timestamp": 1597760602
    },
    {
        "content": "<p>why would Intel not document something that has existed since at least Ivy Bridge, until Skylake?</p>",
        "id": 207265479,
        "sender_full_name": "eddyb",
        "timestamp": 1597760682
    },
    {
        "content": "<p>if you want to check if a certain Intel CPU has this counter: <code>rustup component add --toolchain nightly rustc-dev &amp;&amp; curl -sS https://gist.githubusercontent.com/eddyb/269491b0b59605f39f1d0a9dcf535c4a/raw/b6914ba9b7156f703832737acf9bbc7063001d88/rdpmc-bench.rs | rustc +nightly - -o rdpmc-bench -O &amp;&amp; ./rdpmc-bench</code></p>",
        "id": 207266215,
        "sender_full_name": "eddyb",
        "timestamp": 1597761024
    },
    {
        "content": "<p>sadly, on my Ivy Bridge, either the interrupts counter overcounts, or the instruction counter undercounts. but sometimes everything is just 0 lmao</p>",
        "id": 207266627,
        "sender_full_name": "eddyb",
        "timestamp": 1597761220
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> <span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span>  ^^ feel free to go ham :D</p>",
        "id": 207266720,
        "sender_full_name": "eddyb",
        "timestamp": 1597761254
    },
    {
        "content": "<p>now I'm wondering if Zen has a similarly undocumented counter</p>",
        "id": 207266762,
        "sender_full_name": "eddyb",
        "timestamp": 1597761277
    },
    {
        "content": "<blockquote>\n<p>PMCx02C [Interrupts Taken] (Core::X86::Pmc::Core::LsIntTaken)</p>\n</blockquote>\n<p>Not sure if you've looked at that already</p>",
        "id": 207267080,
        "sender_full_name": "simulacrum",
        "timestamp": 1597761427
    },
    {
        "content": "<p>I guess the name looks like load/store interrupts?</p>",
        "id": 207267098,
        "sender_full_name": "simulacrum",
        "timestamp": 1597761439
    },
    {
        "content": "<p>wait how did I not find that at all?</p>",
        "id": 207267120,
        "sender_full_name": "eddyb",
        "timestamp": 1597761452
    },
    {
        "content": "<p>well, no, it's the LS unit where CPUID retires are also counted</p>",
        "id": 207267150,
        "sender_full_name": "eddyb",
        "timestamp": 1597761469
    },
    {
        "content": "<p>(btw you can tell that it's a real counter if at the end you get a count that's roughly the time it took times <code>COUNT_HZ</code>)</p>",
        "id": 207267160,
        "sender_full_name": "eddyb",
        "timestamp": 1597761475
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> wait, I just realized that \"instructions retired\" uses the \"fixed-function\" \"instructions retired\" counter. I wonder what programmable means then. maybe it's just for the \"do something after N events\" functionality</p>",
        "id": 207267634,
        "sender_full_name": "eddyb",
        "timestamp": 1597761676
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> yeah that works lmfao</p>",
        "id": 207267914,
        "sender_full_name": "eddyb",
        "timestamp": 1597761813
    },
    {
        "content": "<p>Can you write the fixed function counter? I don't remember.</p>",
        "id": 207267968,
        "sender_full_name": "cuviper",
        "timestamp": 1597761841
    },
    {
        "content": "<p><code>perf stat -e r02c:u ./rdpmc-bench</code> on Zen</p>",
        "id": 207268003,
        "sender_full_name": "eddyb",
        "timestamp": 1597761843
    },
    {
        "content": "<p>Because sampling works by writing <code>-N</code> into the counter, then taking your sample in the overflow interrupt</p>",
        "id": 207268102,
        "sender_full_name": "cuviper",
        "timestamp": 1597761903
    },
    {
        "content": "<p>okay so we have something for AMD and something for Intel, we just now have to use <code>cpuid</code> or w/e to pick which</p>",
        "id": 207268106,
        "sender_full_name": "eddyb",
        "timestamp": 1597761906
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> ah!!</p>",
        "id": 207268127,
        "sender_full_name": "eddyb",
        "timestamp": 1597761920
    },
    {
        "content": "<p>that makes a lot of sense heh</p>",
        "id": 207268155,
        "sender_full_name": "eddyb",
        "timestamp": 1597761933
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> okay idk how I missed it, I guess the PDF was too big so I didn't bother searching for \"interrupt\" and I guess at that time I was looking for <code>iret</code> <em>sigh</em></p>",
        "id": 207268419,
        "sender_full_name": "eddyb",
        "timestamp": 1597762054
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> so these should give interesting results w/o needing <code>rustc</code> or even a new kernel/<code>perf</code>:<br>\nIntel: <code>perf stat -e instructions:u,r01cb:u dd if=/dev/zero of=/dev/null bs=1 count=5M</code><br>\nAMD: <code>perf stat -e instructions:u,r02c:u dd if=/dev/zero of=/dev/null bs=1 count=5M</code></p>",
        "id": 207271428,
        "sender_full_name": "eddyb",
        "timestamp": 1597763386
    },
    {
        "content": "<p>ryzen1:        997,037,101      instructions:u                       415      r02c:u                              1.817760669 seconds time elapsed 0.414737000 seconds user<br>\nhaswell (touching touchpad):        997,055,202      instructions:u                     4,168      r01cb:u           5.499130405 seconds time elapsed 3.253139000 seconds user                  <br>\nhaswell (not touching touchpad):        997,054,316      instructions:u                       3,279      r01cb:u            5.480396036 seconds time elapsed 3.270190000 seconds user                 <br>\nxeon:        954,496,549      instructions:u                      221      r01cb:u  (real   0m2.781s user   0m0.888s as reported by time)</p>",
        "id": 207271931,
        "sender_full_name": "nagisa",
        "timestamp": 1597763555
    },
    {
        "content": "<p>3950x:         1028056259      instructions:u, 60      r02c:u<br>\n3600: 1,022,785,182      instructions:u, 241      r02c:u</p>",
        "id": 207271974,
        "sender_full_name": "simulacrum",
        "timestamp": 1597763563
    },
    {
        "content": "<p>oh I should've mentioned, \"seconds user\" are also useful</p>",
        "id": 207272016,
        "sender_full_name": "eddyb",
        "timestamp": 1597763572
    },
    {
        "content": "<p>you sure you want user not total?</p>",
        "id": 207272157,
        "sender_full_name": "nagisa",
        "timestamp": 1597763609
    },
    {
        "content": "<p>since you’re looking at hz ticks</p>",
        "id": 207272174,
        "sender_full_name": "nagisa",
        "timestamp": 1597763619
    },
    {
        "content": "<p>the 4.x kernels don't seem to report seconds user, but total is 1.34 on 3600 and 1.19 on 3950x</p>",
        "id": 207272191,
        "sender_full_name": "simulacrum",
        "timestamp": 1597763630
    },
    {
        "content": "<p>yeah, in my tests, the raw counter maps to <code>CONFIG_HZ</code> times \"seconds user\"</p>",
        "id": 207272193,
        "sender_full_name": "eddyb",
        "timestamp": 1597763630
    },
    {
        "content": "<p>0.316 on 3950x seconds user</p>",
        "id": 207272252,
        "sender_full_name": "simulacrum",
        "timestamp": 1597763643
    },
    {
        "content": "<p>that's why it's only 60?</p>",
        "id": 207272301,
        "sender_full_name": "eddyb",
        "timestamp": 1597763665
    },
    {
        "content": "<p>non-1kHz <code>CONFIG_HZ</code> makes this a bit weird but it seems to work :D</p>",
        "id": 207272410,
        "sender_full_name": "eddyb",
        "timestamp": 1597763706
    },
    {
        "content": "<p>updated my message.</p>",
        "id": 207272442,
        "sender_full_name": "nagisa",
        "timestamp": 1597763720
    },
    {
        "content": "<p>the Xeon is <code>CONFIG_HZ=250</code> I bet</p>",
        "id": 207272600,
        "sender_full_name": "eddyb",
        "timestamp": 1597763781
    },
    {
        "content": "<p>no way to verify, no <code>/proc/config</code> on that machine.</p>",
        "id": 207272631,
        "sender_full_name": "nagisa",
        "timestamp": 1597763797
    },
    {
        "content": "<p>anything in <code>/boot</code>?</p>",
        "id": 207272647,
        "sender_full_name": "eddyb",
        "timestamp": 1597763805
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>CONFIG_HZ_250=y\nCONFIG_HZ=250\n</code></pre></div>\n\n\n<p>yep</p>",
        "id": 207272864,
        "sender_full_name": "nagisa",
        "timestamp": 1597763898
    },
    {
        "content": "<p>so both Ivy Bridge and Haswell work despite this being only documented in Skyake (3 generations later, I guess?). do we have anything older? if not I'll just hardcode it to \"Ivy Bridge or newer\" for Intel and \"any Zen\" for AMD. and thanks again everyone :D</p>",
        "id": 207273088,
        "sender_full_name": "eddyb",
        "timestamp": 1597763995
    },
    {
        "content": "<p>technically I have a Netburst (Pentium 4) at my parents' place but I don't think I ever set up SSH to it properly D:</p>",
        "id": 207273258,
        "sender_full_name": "eddyb",
        "timestamp": 1597764065
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I just realized that if I use <code>debug!</code>, the messages here won't be usable on nightly (and I don't want to panic, but maybe I should use <code>error!</code> if there's an issue turning the counters on?). and/or is there a way to have <code>RUSTC_LOG</code> turn on a log message without it requiring debug-assertions?</p>",
        "id": 207273629,
        "sender_full_name": "eddyb",
        "timestamp": 1597764234
    },
    {
        "content": "<p>info! is always present</p>",
        "id": 207273734,
        "sender_full_name": "simulacrum",
        "timestamp": 1597764266
    },
    {
        "content": "<p>I have at least one message that always shows up in the \"success path\" on supported architectures</p>",
        "id": 207273746,
        "sender_full_name": "eddyb",
        "timestamp": 1597764271
    },
    {
        "content": "<p>oh right <code>info!</code> doesn't output by default (I think <code>error!</code> does?)</p>",
        "id": 207273772,
        "sender_full_name": "eddyb",
        "timestamp": 1597764284
    },
    {
        "content": "<p>thanks, I think I'll use a combination of <code>info!</code> and <code>error!</code>. I especially want people to submit bug reports and have it reach back to the self-profiling WG, ideally all the way back to me, if someone stumbles over a problem with it</p>",
        "id": 207273895,
        "sender_full_name": "eddyb",
        "timestamp": 1597764358
    },
    {
        "content": "<p>i7-7700K: 1,022,970,081 instructions:u; 2,580 r01cb:u; 2.537181000 seconds user; 1.567827000 seconds sys<br>\nR7 3800X: 1,022,975,044 instructions:u; 267 r02c:u; 0.265782000 seconds user; 0.840306000 seconds sys</p>",
        "id": 207274493,
        "sender_full_name": "cuviper",
        "timestamp": 1597764604
    },
    {
        "content": "<p>nice :D</p>",
        "id": 207274523,
        "sender_full_name": "eddyb",
        "timestamp": 1597764620
    },
    {
        "content": "<p>(that user time is shocking -- perhaps cpu vulnerability mitigations?)</p>",
        "id": 207274553,
        "sender_full_name": "cuviper",
        "timestamp": 1597764633
    },
    {
        "content": "<p>it's also architecturally outdated compared to the AMD one :P</p>",
        "id": 207274615,
        "sender_full_name": "eddyb",
        "timestamp": 1597764672
    },
    {
        "content": "<p>it's amazing Intel remains competitive for gaming, I think it's almost entirely in frequency and overclocking, to make up for the gap that AMD has created otherwise</p>",
        "id": 207274762,
        "sender_full_name": "eddyb",
        "timestamp": 1597764729
    },
    {
        "content": "<p>it's a <em>little</em> outdated, but 10x is extreme</p>",
        "id": 207274847,
        "sender_full_name": "cuviper",
        "timestamp": 1597764771
    },
    {
        "content": "<p>full perf stat shows similar IPC, and AMD is much worse on branch misses (3.64% vs. 0.05%)</p>",
        "id": 207275029,
        "sender_full_name": "cuviper",
        "timestamp": 1597764852
    },
    {
        "content": "<p>and I guess since I want to collect all my stats with both <code>cpuid</code> and subtracting the hardware interrupts, I think I'll finally do the smart thing and have it controlled through env vars or something so I don't have to edit the code manually</p>",
        "id": 207275192,
        "sender_full_name": "eddyb",
        "timestamp": 1597764942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> hey you think we could do the same <code>instructions - hw_ints</code> trick on perf.r-l.o, by passing the right <code>rXXXX</code> to <code>perf</code>?</p>",
        "id": 207275497,
        "sender_full_name": "eddyb",
        "timestamp": 1597765084
    },
    {
        "content": "<p>there's only like 6 counters or so though so we have to be careful</p>",
        "id": 207275525,
        "sender_full_name": "eddyb",
        "timestamp": 1597765100
    },
    {
        "content": "<p>I'd be fine with that</p>",
        "id": 207275527,
        "sender_full_name": "simulacrum",
        "timestamp": 1597765102
    },
    {
        "content": "<p>to be honest this is much more worthwhile than the faults counter for example, so I don't mind ditching some of those</p>",
        "id": 207275563,
        "sender_full_name": "simulacrum",
        "timestamp": 1597765128
    },
    {
        "content": "<p>I'm a bit worried about the transition and messaging</p>",
        "id": 207275604,
        "sender_full_name": "eddyb",
        "timestamp": 1597765146
    },
    {
        "content": "<p>calling it <code>instructions:u</code> feels a bit misleading because <code>perf -e instructions:u</code> will not give you this</p>",
        "id": 207275628,
        "sender_full_name": "eddyb",
        "timestamp": 1597765166
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/207274762\">said</a>:</p>\n<blockquote>\n<p>it's amazing Intel remains competitive for gaming, I think it's almost entirely in frequency and overclocking, to make up for the gap that AMD has created otherwise</p>\n</blockquote>\n<p>It's mostly latency of cache and memory , that's why Ryzens 2XXX smashed them in benchmarks but lack in gaming. With Ryzens 3XXX this improved drastically.</p>",
        "id": 207275740,
        "sender_full_name": "mati865",
        "timestamp": 1597765217
    },
    {
        "content": "<p>huh I wonder if compile times are also affected. would love to move <a href=\"http://build.lyken.rs\">build.lyken.rs</a> over to Zen 2</p>",
        "id": 207275819,
        "sender_full_name": "eddyb",
        "timestamp": 1597765267
    },
    {
        "content": "<p>definitely are.</p>",
        "id": 207276024,
        "sender_full_name": "nagisa",
        "timestamp": 1597765376
    },
    {
        "content": "<p><code>precise_instructions</code></p>",
        "id": 207276048,
        "sender_full_name": "nagisa",
        "timestamp": 1597765388
    },
    {
        "content": "<p>oh for the name</p>",
        "id": 207276089,
        "sender_full_name": "eddyb",
        "timestamp": 1597765409
    },
    {
        "content": "<p>zen2 is IIRC ~25% faster at compilation than 1. That’s within core. Core-to-core workloads also add some improvement.</p>",
        "id": 207276143,
        "sender_full_name": "nagisa",
        "timestamp": 1597765440
    },
    {
        "content": "<p><code>instructions_minus_ints</code> is what I'd call them I guess idk. maybe unclear</p>",
        "id": 207276229,
        "sender_full_name": "eddyb",
        "timestamp": 1597765472
    },
    {
        "content": "<p>its clear, but as a metric it seems like… it unnecessarily locks in the implementation</p>",
        "id": 207276300,
        "sender_full_name": "nagisa",
        "timestamp": 1597765511
    },
    {
        "content": "<p>I'm worried about keeping the name while changing the implementation, basically</p>",
        "id": 207276358,
        "sender_full_name": "eddyb",
        "timestamp": 1597765544
    },
    {
        "content": "<p>we should probably collect the two metrics separately and only compute the difference at presentation level</p>",
        "id": 207276432,
        "sender_full_name": "nagisa",
        "timestamp": 1597765564
    },
    {
        "content": "<p>(much like what you’d do with metrics systems like prometheus)</p>",
        "id": 207276445,
        "sender_full_name": "nagisa",
        "timestamp": 1597765574
    },
    {
        "content": "<p>oh right derp</p>",
        "id": 207276448,
        "sender_full_name": "eddyb",
        "timestamp": 1597765574
    },
    {
        "content": "<p>this is only a problem for <code>measureme</code> which doesn't want to store twice the data per event</p>",
        "id": 207276485,
        "sender_full_name": "eddyb",
        "timestamp": 1597765595
    },
    {
        "content": "<p><a href=\"http://perf.rust-lang.org\">perf.rust-lang.org</a> could just start measuring <code>hw-interrupts:u</code> or w/e</p>",
        "id": 207276512,
        "sender_full_name": "eddyb",
        "timestamp": 1597765613
    },
    {
        "content": "<p>and we could name the rendered thing anything we want</p>",
        "id": 207276602,
        "sender_full_name": "eddyb",
        "timestamp": 1597765660
    },
    {
        "content": "<p>wait, for AMD I can just look through all this to find when the counter was added <a href=\"https://developer.amd.com/resources/developer-guides-manuals/\">https://developer.amd.com/resources/developer-guides-manuals/</a></p>",
        "id": 207279435,
        "sender_full_name": "eddyb",
        "timestamp": 1597766950
    },
    {
        "content": "<p>uh oh I found \"interrupts taken\" for AMD going back to \"family 11h\", whenever that was (document is dated 2008)</p>",
        "id": 207280346,
        "sender_full_name": "eddyb",
        "timestamp": 1597767333
    },
    {
        "content": "<p>wait no even 10h has it, and I don't see PDFs for older families</p>",
        "id": 207280691,
        "sender_full_name": "eddyb",
        "timestamp": 1597767494
    },
    {
        "content": "<p>10h is K10 from <em>2007</em></p>",
        "id": 207281075,
        "sender_full_name": "eddyb",
        "timestamp": 1597767675
    },
    {
        "content": "<p>and we have confirmation that works, with <code>r0cf:u</code> (on family 16h, which is the last one before Zen, and it looks like it's never been changed until Zen)</p>",
        "id": 207281853,
        "sender_full_name": "eddyb",
        "timestamp": 1597768096
    },
    {
        "content": "<p>wow even Intel admits 6th gen to today (10th gen) is all Skylake and Skylake derivatives, this hasn't been changed since 2018 <a href=\"https://software.intel.com/content/www/us/en/develop/download/intel-64-and-ia32-architectures-performance-monitoring-events.html\">https://software.intel.com/content/www/us/en/develop/download/intel-64-and-ia32-architectures-performance-monitoring-events.html</a></p>",
        "id": 207282493,
        "sender_full_name": "eddyb",
        "timestamp": 1597768435
    },
    {
        "content": "<p>would love some info on \"Cove\"s tho, guess I should look at that one set of mobile SoCs that got Cove'd</p>",
        "id": 207282623,
        "sender_full_name": "eddyb",
        "timestamp": 1597768491
    },
    {
        "content": "<p>wait, the Intel manuals themselves list the counters too</p>",
        "id": 207283174,
        "sender_full_name": "eddyb",
        "timestamp": 1597768796
    },
    {
        "content": "<p>14nm, 14nm+, 14nm++, ...</p>",
        "id": 207283589,
        "sender_full_name": "cuviper",
        "timestamp": 1597769018
    },
    {
        "content": "<p>so I found this document, and family 0Fh seems to be the first AMD family to implement AMD64 so I think on x86_64 we have counters for any AMD CPU (sadly it changed its index in Zen) <a href=\"https://developer.amd.com/wordpress/media/2012/10/325591.pdf\">https://developer.amd.com/wordpress/media/2012/10/325591.pdf</a></p>",
        "id": 207283799,
        "sender_full_name": "eddyb",
        "timestamp": 1597769156
    },
    {
        "content": "<p>(just confirmed, the old <code>r0cf:u</code> doesn't work in Zen, it's not an alias or anything)</p>",
        "id": 207284007,
        "sender_full_name": "eddyb",
        "timestamp": 1597769259
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> what gcloud with a new CPU did you say you could spin up? can you run this on it?<br>\n<code>perf stat -e instructions:u,r01cb:u dd if=/dev/zero of=/dev/null bs=1 count=5M</code></p>",
        "id": 207285783,
        "sender_full_name": "eddyb",
        "timestamp": 1597770127
    },
    {
        "content": "<p>although I may have heard gcloud blocks access to the counters</p>",
        "id": 207285811,
        "sender_full_name": "eddyb",
        "timestamp": 1597770139
    },
    {
        "content": "<p>I want to set an upper bound on Intel CPUs because I'm worried they might change the counter index</p>",
        "id": 207285858,
        "sender_full_name": "eddyb",
        "timestamp": 1597770169
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> actually, if it's Cascade Lake, that's already documented as being the same as Skylake</p>",
        "id": 207287530,
        "sender_full_name": "eddyb",
        "timestamp": 1597770935
    },
    {
        "content": "<p>Any counter that's not \"architectural\" is subject to change</p>",
        "id": 207288093,
        "sender_full_name": "cuviper",
        "timestamp": 1597771199
    },
    {
        "content": "<p>ah, thanks</p>",
        "id": 207288155,
        "sender_full_name": "eddyb",
        "timestamp": 1597771208
    },
    {
        "content": "<p>I don't think AMD has any equivalent</p>",
        "id": 207288181,
        "sender_full_name": "eddyb",
        "timestamp": 1597771222
    },
    {
        "content": "<p>and yeah this is not architectural</p>",
        "id": 207288579,
        "sender_full_name": "eddyb",
        "timestamp": 1597771420
    },
    {
        "content": "<p>lol, <code>EventSel=CBH,UMask=01H</code> is used as something else on Westmere and Nehalem, so the only one we don't know what it does on is Sandy Bridge</p>",
        "id": 207288830,
        "sender_full_name": "eddyb",
        "timestamp": 1597771533
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/207266215\">said</a>:</p>\n<blockquote>\n<p>if you want to check if a certain Intel CPU has this counter: <code>rustup component add --toolchain nightly rustc-dev &amp;&amp; curl -sS https://gist.githubusercontent.com/eddyb/269491b0b59605f39f1d0a9dcf535c4a/raw/b6914ba9b7156f703832737acf9bbc7063001d88/rdpmc-bench.rs | rustc +nightly - -o rdpmc-bench -O &amp;&amp; ./rdpmc-bench</code></p>\n</blockquote>\n<p>oh wait we forgot about scheduling. <code>sudo chrt -f 1 ./rdpmc-bench</code> is almost perfect (but note that the command above is for Intel)</p>",
        "id": 207289285,
        "sender_full_name": "eddyb",
        "timestamp": 1597771733
    },
    {
        "content": "<p>or maybe that was a fluke</p>",
        "id": 207289366,
        "sender_full_name": "eddyb",
        "timestamp": 1597771788
    },
    {
        "content": "<p>I forget, maybe we want <code>-f 99</code>?</p>",
        "id": 207289441,
        "sender_full_name": "eddyb",
        "timestamp": 1597771804
    },
    {
        "content": "<p>nope that's worse</p>",
        "id": 207289505,
        "sender_full_name": "eddyb",
        "timestamp": 1597771838
    },
    {
        "content": "<p>can look at things in 30 mins</p>",
        "id": 207290018,
        "sender_full_name": "nagisa",
        "timestamp": 1597772073
    },
    {
        "content": "<p>did someone here have a Sandy Bridge? I forget</p>",
        "id": 207290083,
        "sender_full_name": "eddyb",
        "timestamp": 1597772115
    },
    {
        "content": "<p>there's a cascade lake, sandy bridge is also available on gcp</p>",
        "id": 207290101,
        "sender_full_name": "nagisa",
        "timestamp": 1597772126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/207094898\">said</a>:</p>\n<blockquote>\n<p>gcloud has anything from sandy bridge to cascade lake</p>\n</blockquote>\n<p>ah this is what I remembered</p>",
        "id": 207290121,
        "sender_full_name": "eddyb",
        "timestamp": 1597772133
    },
    {
        "content": "<p><a href=\"https://cloud.google.com/compute/docs/cpu-platforms\">https://cloud.google.com/compute/docs/cpu-platforms</a></p>",
        "id": 207290129,
        "sender_full_name": "nagisa",
        "timestamp": 1597772138
    },
    {
        "content": "<p>ty</p>",
        "id": 207290236,
        "sender_full_name": "eddyb",
        "timestamp": 1597772183
    },
    {
        "content": "<p>I suspect they might not work but if it does, we can validate a decent range</p>",
        "id": 207290291,
        "sender_full_name": "eddyb",
        "timestamp": 1597772230
    },
    {
        "content": "<p>ooooh this might explain why intel doesn't even document things past kaby lake: coffee lake even uses the same CPUID family/model numbers as kaby lake: <a href=\"https://en.wikichip.org/wiki/intel/cpuid#Big_Cores_.28Client.29\">https://en.wikichip.org/wiki/intel/cpuid#Big_Cores_.28Client.29</a></p>",
        "id": 207290936,
        "sender_full_name": "eddyb",
        "timestamp": 1597772542
    },
    {
        "content": "<p>somehow I missed that this has a proper categorization which includes telling me which lakes are actually coves (because Intel hates reason): <a href=\"https://en.wikipedia.org/wiki/Template:Intel_processors\">https://en.wikipedia.org/wiki/Template:Intel_processors</a></p>",
        "id": 207291882,
        "sender_full_name": "eddyb",
        "timestamp": 1597773024
    },
    {
        "content": "<p>huh, both report perf counters as <code>&lt;not supported&gt;</code> I wonder if you just can’t use perf counters on gcp?</p>",
        "id": 207291922,
        "sender_full_name": "nagisa",
        "timestamp": 1597773046
    },
    {
        "content": "<p><em>sigh</em> that's what danopia saw too, on GCE, I was hoping it was different here</p>",
        "id": 207291957,
        "sender_full_name": "eddyb",
        "timestamp": 1597773067
    },
    {
        "content": "<p>lemme see if I can spin up actual hardware backed stuff...</p>",
        "id": 207291995,
        "sender_full_name": "nagisa",
        "timestamp": 1597773091
    },
    {
        "content": "<p>found someone with sandy bridge :D</p>",
        "id": 207292200,
        "sender_full_name": "eddyb",
        "timestamp": 1597773188
    },
    {
        "content": "<p>they are probably disabled for security concerns on GCE, for timing attacks and such</p>",
        "id": 207292568,
        "sender_full_name": "cuviper",
        "timestamp": 1597773366
    },
    {
        "content": "<p>and it works! basically Intel has added a hw interrupts counter in Sandy Bridge but didn't tell anyone until Skylake...</p>",
        "id": 207292626,
        "sender_full_name": "eddyb",
        "timestamp": 1597773406
    },
    {
        "content": "<p>should've just looked here, heh, I should be able to get some data out of it: <a href=\"https://github.com/wcohen/libpfm4\">https://github.com/wcohen/libpfm4</a></p>",
        "id": 207296905,
        "sender_full_name": "eddyb",
        "timestamp": 1597775515
    },
    {
        "content": "<p>nice <a href=\"https://github.com/wcohen/libpfm4/tree/master/lib/events\">https://github.com/wcohen/libpfm4/tree/master/lib/events</a></p>",
        "id": 207297243,
        "sender_full_name": "eddyb",
        "timestamp": 1597775651
    },
    {
        "content": "<p>it's missing <code>INTERRUPT_TAKEN</code> on Zen 1 (it has it for Zen 2) but I thought that was documented?</p>",
        "id": 207297624,
        "sender_full_name": "eddyb",
        "timestamp": 1597775847
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> <span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> btw for all Intel CPUs we've confirmed the counter (especially if pre-Skylake, i.e. undocumented), <code>cat /proc/cpuinfo | head -n5</code> would be useful (I decided to track whether we've confirmed through testing that a certain model has the counter)</p>\n<p>i.e. systems we've ran <code>perf stat -e instructions:u,r01cb:u dd if=/dev/zero of=/dev/null bs=1 count=5M</code> on and the second counter roughly matches \"user time\" by some factor</p>",
        "id": 207308901,
        "sender_full_name": "eddyb",
        "timestamp": 1597781067
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>processor       : 0\nvendor_id       : GenuineIntel\ncpu family      : 6\nmodel           : 158\nmodel name      : Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz\n</code></pre></div>",
        "id": 207309176,
        "sender_full_name": "cuviper",
        "timestamp": 1597781211
    },
    {
        "content": "<p>gave you 5 lines to include the name :)</p>",
        "id": 207309198,
        "sender_full_name": "cuviper",
        "timestamp": 1597781222
    },
    {
        "content": "<p>yeah I meant to write 5 oops</p>",
        "id": 207309214,
        "sender_full_name": "eddyb",
        "timestamp": 1597781230
    },
    {
        "content": "<p>here's a haswell xeon: 1,028,004,226 instructions:u; 3,277 r01cb:u; 3.272502000 seconds user; 2.111821000 seconds sys</p>\n<div class=\"codehilite\"><pre><span></span><code>processor       : 0\nvendor_id       : GenuineIntel\ncpu family      : 6\nmodel           : 63\nmodel name      : Intel(R) Xeon(R) CPU E5-2697 v3 @ 2.60GHz\n</code></pre></div>",
        "id": 207309897,
        "sender_full_name": "cuviper",
        "timestamp": 1597781524
    },
    {
        "content": "<p>The counter is a bit higher on my laptop:<br>\n1,038,458,363 instructions:u; 3,426 r01cb:u; 2.986509000 seconds user; 2.400569000 seconds sys</p>\n<div class=\"codehilite\"><pre><span></span><code>processor       : 0\nvendor_id       : GenuineIntel\ncpu family      : 6\nmodel           : 142\nmodel name      : Intel(R) Core(TM) i7-7600U CPU @ 2.80GHz\n</code></pre></div>",
        "id": 207310439,
        "sender_full_name": "cuviper",
        "timestamp": 1597781770
    },
    {
        "content": "<p>the important thing is that it's not 0 or otherwise completely uncorrelated</p>",
        "id": 207310475,
        "sender_full_name": "eddyb",
        "timestamp": 1597781792
    },
    {
        "content": "<p>we're counting interrupts, and if you're unlucky enough you could get almost all hardware interrupts from everything on the system</p>",
        "id": 207310540,
        "sender_full_name": "eddyb",
        "timestamp": 1597781835
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> btw, Fedora and RHEL/CentOS kernels <em>do</em> have <code>CONFIG_NO_HZ_FULL=y</code></p>",
        "id": 207310981,
        "sender_full_name": "cuviper",
        "timestamp": 1597782075
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> Oooh!</p>",
        "id": 207311040,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597782121
    },
    {
        "content": "<p>lol \"Crystal Well\" <a href=\"https://ark.intel.com/content/www/us/en/ark/products/83505/intel-core-i7-4770hq-processor-6m-cache-up-to-3-40-ghz.html\">https://ark.intel.com/content/www/us/en/ark/products/83505/intel-core-i7-4770hq-processor-6m-cache-up-to-3-40-ghz.html</a></p>",
        "id": 207311098,
        "sender_full_name": "eddyb",
        "timestamp": 1597782135
    },
    {
        "content": "<p>(this is one of <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span>'s)</p>",
        "id": 207311110,
        "sender_full_name": "eddyb",
        "timestamp": 1597782141
    },
    {
        "content": "<p>That's a massive endorsement, especially the latter (given how conservative RHEL tends to be).</p>",
        "id": 207311112,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597782143
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> Thanks for letting me know! I need to give that a try myself.</p>",
        "id": 207311150,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597782159
    },
    {
        "content": "<p>I'm trying to find when that changed. there's a feature page for <code>CONFIG_NO_HZ</code> way back in Fedora 8, but not sure about full yet</p>",
        "id": 207311208,
        "sender_full_name": "cuviper",
        "timestamp": 1597782197
    },
    {
        "content": "<p>I'm guessing you don't actually enable <code>nohz_full</code> on the kernel command line by default, so this would mostly just have an effect if people enable it?</p>",
        "id": 207311368,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597782256
    },
    {
        "content": "<p>I'm not sure, I just noticed it in the config file</p>",
        "id": 207311411,
        "sender_full_name": "cuviper",
        "timestamp": 1597782280
    },
    {
        "content": "<p>there's nothing on <code>/proc/cmdline</code></p>",
        "id": 207311446,
        "sender_full_name": "cuviper",
        "timestamp": 1597782295
    },
    {
        "content": "<p>bah, there's an article behind the subscriber paywall... <a href=\"https://access.redhat.com/solutions/2273531\">https://access.redhat.com/solutions/2273531</a></p>",
        "id": 207311803,
        "sender_full_name": "cuviper",
        "timestamp": 1597782476
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span><br>\nhaswell:</p>\n<div class=\"codehilite\"><pre><span></span><code> processor  : 0\nvendor_id   : GenuineIntel\ncpu family  : 6\nmodel       : 70\nmodel name  : Intel(R) Core(TM) i7-4750HQ CPU @ 2.00GHz\n</code></pre></div>\n\n\n<p>xeon:</p>\n<div class=\"codehilite\"><pre><span></span><code>processor   : 0\nvendor_id   : GenuineIntel\ncpu family  : 6\nmodel       : 85\nmodel name  : Intel(R) Xeon(R) Gold 6130 CPU @ 2.10GHz\n</code></pre></div>",
        "id": 207311943,
        "sender_full_name": "nagisa",
        "timestamp": 1597782518
    },
    {
        "content": "<p>well that article is mostly just explaining how to use <code>nohz_full</code></p>",
        "id": 207312389,
        "sender_full_name": "cuviper",
        "timestamp": 1597782719
    },
    {
        "content": "<p>but it seems we've supported this since RHEL 7</p>",
        "id": 207312463,
        "sender_full_name": "cuviper",
        "timestamp": 1597782739
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> thanks, I'll try to put together everything</p>",
        "id": 207312900,
        "sender_full_name": "eddyb",
        "timestamp": 1597782962
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> in Fedora sources, it looks like we enable <code>CONFIG_NO_HZ_FULL=y</code> for all but s390x and i686</p>",
        "id": 207313021,
        "sender_full_name": "cuviper",
        "timestamp": 1597783020
    },
    {
        "content": "<p>not sure why those are excluded, but you might want to find out if you're going explore this for Debian</p>",
        "id": 207313075,
        "sender_full_name": "cuviper",
        "timestamp": 1597783045
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> the good news is that we can combine the two techniques, and avoid scheduling making this worse</p>",
        "id": 207314347,
        "sender_full_name": "eddyb",
        "timestamp": 1597783725
    },
    {
        "content": "<p>I assume that if the timer interrupt schedules a different process, we're overcounting <em>relevant</em> interrupts</p>",
        "id": 207314371,
        "sender_full_name": "eddyb",
        "timestamp": 1597783741
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> <span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> I wonder if I can combine <code>chrt</code> and <code>perf</code></p>",
        "id": 207315029,
        "sender_full_name": "eddyb",
        "timestamp": 1597784073
    },
    {
        "content": "<p>playing around with <code>sudo perf stat -e 'sched:*' ./rdpmc-bench</code> some values look relevant but I'm not sure</p>",
        "id": 207315058,
        "sender_full_name": "eddyb",
        "timestamp": 1597784090
    },
    {
        "content": "<p>I managed to do it by nesting chrt inside perf</p>",
        "id": 207315110,
        "sender_full_name": "simulacrum",
        "timestamp": 1597784122
    },
    {
        "content": "<p>i.e., <code>perf stat -e ... chrt .. rdpmc-bench</code></p>",
        "id": 207315128,
        "sender_full_name": "simulacrum",
        "timestamp": 1597784133
    },
    {
        "content": "<p>looks like it worked</p>",
        "id": 207315340,
        "sender_full_name": "eddyb",
        "timestamp": 1597784231
    },
    {
        "content": "<p>uh oh I broke my wifi with <code>chrt -f 99</code></p>",
        "id": 207315723,
        "sender_full_name": "eddyb",
        "timestamp": 1597784419
    },
    {
        "content": "<p>why did it seem not to work before huh</p>",
        "id": 207315831,
        "sender_full_name": "eddyb",
        "timestamp": 1597784480
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/207315723\">said</a>:</p>\n<blockquote>\n<p>uh oh I broke my wifi with <code>chrt -f 99</code></p>\n</blockquote>\n<p>One of the things real-time systems need to do is move things to other CPUs. Usually you want to dedicate at least 1-2 CPUs for doing non-real-time things, and make sure all the interrupts go there.</p>",
        "id": 207315880,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597784504
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/nYeUe194M5Nb418pEE2jUUWx/IMG_20200819_000226.jpg\">IMG_20200819_000226.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/nYeUe194M5Nb418pEE2jUUWx/IMG_20200819_000226.jpg\" title=\"IMG_20200819_000226.jpg\"><img src=\"/user_uploads/4715/nYeUe194M5Nb418pEE2jUUWx/IMG_20200819_000226.jpg\"></a></div>",
        "id": 207316115,
        "sender_full_name": "eddyb",
        "timestamp": 1597784617
    },
    {
        "content": "<p>totally worth it</p>",
        "id": 207316147,
        "sender_full_name": "eddyb",
        "timestamp": 1597784639
    },
    {
        "content": "<p>I get why it broke but I wish it was smarter than that <em>sigh</em></p>",
        "id": 207316688,
        "sender_full_name": "eddyb",
        "timestamp": 1597784919
    },
    {
        "content": "<p>also it seems to have lost the ability to connect at all?</p>",
        "id": 207316754,
        "sender_full_name": "eddyb",
        "timestamp": 1597784953
    },
    {
        "content": "<p><code>sudo rmmod iwldvm; sudo rmmod iwlwifi; sudo modprobe iwldvm</code> fixed my wifi :D</p>",
        "id": 207317098,
        "sender_full_name": "eddyb",
        "timestamp": 1597785134
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> really surprised it doesn't automatically schedule high-priority stuff on non-device-interrupt cores</p>",
        "id": 207317333,
        "sender_full_name": "eddyb",
        "timestamp": 1597785223
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> It doesn't know what's important to you. You can set the priority of those kernel threads yourself, and many people do. Sometimes those kernel threads are critical for your real-time workload.</p>",
        "id": 207349382,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597789501
    },
    {
        "content": "<p>alright, thanks</p>",
        "id": 207349398,
        "sender_full_name": "eddyb",
        "timestamp": 1597789514
    },
    {
        "content": "<p>There are kernel options that <em>should</em> move all of those threads off the cores you specify.</p>",
        "id": 207349432,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597789550
    },
    {
        "content": "<p>oh hey I finally found where \"Ice Lake (Client)\" is documented</p>",
        "id": 207366777,
        "sender_full_name": "eddyb",
        "timestamp": 1597807579
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/hnN_9kfAN239NSlLSncQfAB-/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/hnN_9kfAN239NSlLSncQfAB-/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/hnN_9kfAN239NSlLSncQfAB-/image.png\"></a></div>",
        "id": 207366785,
        "sender_full_name": "eddyb",
        "timestamp": 1597807597
    },
    {
        "content": "<p>uh oh that's worrying, Intel doesn't list any interrupt-related events for Ice Lake :(</p>",
        "id": 207366920,
        "sender_full_name": "eddyb",
        "timestamp": 1597807827
    },
    {
        "content": "<p>I hope that's just them not documenting it again</p>",
        "id": 207366938,
        "sender_full_name": "eddyb",
        "timestamp": 1597807878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> its such a basic functionality that I'd be surprised if it didn't exist.</p>",
        "id": 207366946,
        "sender_full_name": "nagisa",
        "timestamp": 1597807909
    },
    {
        "content": "<p>yeah Intel are being weird about it. I already don't trust them to document it given it's been around since Sandy Bridge and is undocumented until Skylake</p>",
        "id": 207366991,
        "sender_full_name": "eddyb",
        "timestamp": 1597807941
    },
    {
        "content": "<p>and these are documents that refer to Ice Lake so it's not like they couldn't have updated them :/</p>",
        "id": 207366995,
        "sender_full_name": "eddyb",
        "timestamp": 1597807961
    },
    {
        "content": "<p>interestingly, \"Ice Lake (Server)\" isn't documented in the same way (and the Xeon SP docs only include \"Family 6 Model 85\")</p>",
        "id": 207367024,
        "sender_full_name": "eddyb",
        "timestamp": 1597808029
    },
    {
        "content": "<p>finally found what I was looking for: \"Specification update\" documents here: <a href=\"https://www.intel.com/content/www/us/en/products/docs/processors/core/core-technical-resources.html\">https://www.intel.com/content/www/us/en/products/docs/processors/core/core-technical-resources.html</a></p>",
        "id": 207367809,
        "sender_full_name": "eddyb",
        "timestamp": 1597809314
    },
    {
        "content": "<p>hmm but that doesn't indicate that the manuals need to be updated for the new CPUID models. and neither does this: <a href=\"https://software.intel.com/content/dam/develop/public/us/en/documents/252046-sdm-change-document.pdf\">https://software.intel.com/content/dam/develop/public/us/en/documents/252046-sdm-change-document.pdf</a></p>",
        "id": 207368188,
        "sender_full_name": "eddyb",
        "timestamp": 1597809934
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/iPYpqOK4tkId7HoBNLaQ8KyM/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/iPYpqOK4tkId7HoBNLaQ8KyM/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/iPYpqOK4tkId7HoBNLaQ8KyM/image.png\"></a></div>",
        "id": 207368395,
        "sender_full_name": "eddyb",
        "timestamp": 1597810321
    },
    {
        "content": "<p>well, this is a start :)</p>",
        "id": 207368433,
        "sender_full_name": "eddyb",
        "timestamp": 1597810327
    },
    {
        "content": "<p>they updated that, and a single MSRs table, but nothing else, to include Comet Lake</p>",
        "id": 207368602,
        "sender_full_name": "eddyb",
        "timestamp": 1597810636
    },
    {
        "content": "<p>and ofc it takes me ages to find this: <a href=\"https://download.01.org/perfmon/index/\">https://download.01.org/perfmon/index/</a></p>",
        "id": 207369883,
        "sender_full_name": "eddyb",
        "timestamp": 1597812206
    },
    {
        "content": "<p>... which isn't more updated either</p>",
        "id": 207370057,
        "sender_full_name": "eddyb",
        "timestamp": 1597812451
    },
    {
        "content": "<p>Intel is so lazy with Skylake it doesn't even update the data anymore...</p>",
        "id": 207370234,
        "sender_full_name": "eddyb",
        "timestamp": 1597812642
    },
    {
        "content": "<p><a href=\"https://gist.github.com/eddyb/269491b0b59605f39f1d0a9dcf535c4a/revisions#diff-803b16a97a87f5fb019400650f9f8e64R335-R355\">https://gist.github.com/eddyb/269491b0b59605f39f1d0a9dcf535c4a/revisions#diff-803b16a97a87f5fb019400650f9f8e64R335-R355</a></p>",
        "id": 207372232,
        "sender_full_name": "eddyb",
        "timestamp": 1597815541
    },
    {
        "content": "<p>so I got a perfect run for whatever reason</p>",
        "id": 207372324,
        "sender_full_name": "eddyb",
        "timestamp": 1597815685
    },
    {
        "content": "<p>after which I ran this on the Zen 1 EPYC server which perfectly auto-detected and produced a perfect run too :D <code>rustup component add --toolchain nightly rustc-dev &amp;&amp; curl -sS https://gist.githubusercontent.com/eddyb/269491b0b59605f39f1d0a9dcf535c4a/raw/855f6e0b9b797313c0d767a57981b6bdb84294d4/rdpmc-bench.rs | rustc +nightly - -o rdpmc-bench -O &amp;&amp; ./rdpmc-bench</code></p>",
        "id": 207372327,
        "sender_full_name": "eddyb",
        "timestamp": 1597815689
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I kid you not I can't get the server to output  anything other than 0s <span aria-label=\"shock\" class=\"emoji emoji-1f628\" role=\"img\" title=\"shock\">:shock:</span></p>",
        "id": 207372419,
        "sender_full_name": "eddyb",
        "timestamp": 1597815828
    },
    {
        "content": "<p>I guess I never tested this on there? until now? and my laptop has way more scheduling noise etc.</p>",
        "id": 207372713,
        "sender_full_name": "eddyb",
        "timestamp": 1597816264
    },
    {
        "content": "<p>That doesn't surprise me. Laptops have a lot going on.</p>",
        "id": 207373993,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597818141
    },
    {
        "content": "<p>I'm much more surprised by the server always saying 0</p>",
        "id": 207373998,
        "sender_full_name": "eddyb",
        "timestamp": 1597818156
    },
    {
        "content": "<p>(as opposed to just having lower noise)</p>",
        "id": 207374006,
        "sender_full_name": "eddyb",
        "timestamp": 1597818168
    },
    {
        "content": "<p>Also, yes, spec updates and other notes are much much more up to date than the main manuals, which don't get updated the way you might hope they would.</p>",
        "id": 207374021,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597818189
    },
    {
        "content": "<p>Especially for non-architectural stuff.</p>",
        "id": 207374028,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597818207
    },
    {
        "content": "<p>sadly the spec update is still incomplete, the relevant chapter didn't get updated at all</p>",
        "id": 207374038,
        "sender_full_name": "eddyb",
        "timestamp": 1597818220
    },
    {
        "content": "<p>(Yeah, zero noise surprises me.)</p>",
        "id": 207374039,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597818225
    },
    {
        "content": "<p>like all Intel needs to do is add the codename and the one or two CPUID Family,Model pairs in one place, and it just didn't bother to</p>",
        "id": 207374107,
        "sender_full_name": "eddyb",
        "timestamp": 1597818313
    },
    {
        "content": "<p>just to clarify that nothing has changed. like they've done in the past up-to-and-including Coffee Lake</p>",
        "id": 207374127,
        "sender_full_name": "eddyb",
        "timestamp": 1597818346
    },
    {
        "content": "<p>they just... gave up after that lol</p>",
        "id": 207374134,
        "sender_full_name": "eddyb",
        "timestamp": 1597818353
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> so accounting for hardware interrupts has a fascinating effect on rustc queries: it basically doubles the number of them that have exactly 0 variance. but the worst-case noise is worse</p>",
        "id": 207374601,
        "sender_full_name": "eddyb",
        "timestamp": 1597818954
    },
    {
        "content": "<p>not much worse though I guess</p>",
        "id": 207374854,
        "sender_full_name": "eddyb",
        "timestamp": 1597819306
    },
    {
        "content": "<p>(roughly doubled? I don't remember exactly for the server though)</p>",
        "id": 207374904,
        "sender_full_name": "eddyb",
        "timestamp": 1597819325
    },
    {
        "content": "<p>the total doesn't get denoised by a lot, which I think makes sense, it's impacted mostly by the few large queries.</p>",
        "id": 207375021,
        "sender_full_name": "eddyb",
        "timestamp": 1597819479
    },
    {
        "content": "<p>hmm so on the server I see <code>hw_interrupts:u</code> variance of about ±333, for runs of ±5k to ±8k <code>instructions:u</code></p>",
        "id": 207423377,
        "sender_full_name": "eddyb",
        "timestamp": 1597851208
    },
    {
        "content": "<p>(i.e. my \"<code>rustc</code> compiling libcore in check mode\" runs)</p>",
        "id": 207423399,
        "sender_full_name": "eddyb",
        "timestamp": 1597851227
    },
    {
        "content": "<p>so it can account for some of the smaller queries but not most of the whole process</p>",
        "id": 207423504,
        "sender_full_name": "eddyb",
        "timestamp": 1597851254
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> is there yet some sort of flamegraph (or <code>crox</code>) \"diff\" mode? since the events should be deterministic, I'm curious of the distribution of the variance over the runtime of the process</p>",
        "id": 207423801,
        "sender_full_name": "eddyb",
        "timestamp": 1597851398
    },
    {
        "content": "<p>No, there's not.</p>",
        "id": 207423840,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597851422
    },
    {
        "content": "<p>I get <code>\"analysis\": 36.5,</code> and <code>\"analysis\": 7.5,</code> for two groups of 10 runs that I did with the latest code, let me see what it looks like before</p>",
        "id": 207423942,
        "sender_full_name": "eddyb",
        "timestamp": 1597851478
    },
    {
        "content": "<p>ah not incredibly better, it was already <code>\"analysis\": 13,</code> before (<strong>EDIT</strong>: <code>\"analysis\": 119.5,</code> with <code>cpuid</code>)</p>",
        "id": 207424065,
        "sender_full_name": "eddyb",
        "timestamp": 1597851533
    },
    {
        "content": "<p>oh but that's self time /facepalm. I want to look at total times</p>",
        "id": 207424081,
        "sender_full_name": "eddyb",
        "timestamp": 1597851542
    },
    {
        "content": "<p>Variance of totals (<em>not</em> \"self\" counts)</p>\n<ul>\n<li>before: <code>\"analysis\": 22510.5,</code></li>\n<li>after: <code>\"analysis\": 6729,</code>, <code>\"analysis\": 4325,</code></li>\n</ul>",
        "id": 207424590,
        "sender_full_name": "eddyb",
        "timestamp": 1597851791
    },
    {
        "content": "<p>so it is better, but only around 5x</p>",
        "id": 207424637,
        "sender_full_name": "eddyb",
        "timestamp": 1597851816
    },
    {
        "content": "<p>I wonder if I could \"zip\" the crox output somehow</p>",
        "id": 207424775,
        "sender_full_name": "eddyb",
        "timestamp": 1597851876
    },
    {
        "content": "<p>or actually, can <code>crox</code> take multiple profiles in?</p>",
        "id": 207424806,
        "sender_full_name": "eddyb",
        "timestamp": 1597851893
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>OPTIONS:\n        --dir &lt;dir&gt;\n            all event trace files in dir will be merged to one chrome_profiler.json file\n</code></pre></div>",
        "id": 207424861,
        "sender_full_name": "eddyb",
        "timestamp": 1597851916
    },
    {
        "content": "<p>yes yes yes :D</p>",
        "id": 207424869,
        "sender_full_name": "eddyb",
        "timestamp": 1597851919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I plan to use <a href=\"http://www.brendangregg.com/blog/2014-11-09/differential-flame-graphs.html\">http://www.brendangregg.com/blog/2014-11-09/differential-flame-graphs.html</a> on the website (probably adding a diff mode to measureme's flamegraph tooling)</p>",
        "id": 207431895,
        "sender_full_name": "simulacrum",
        "timestamp": 1597855455
    },
    {
        "content": "<p>inferno already supports it so just need to make use of that</p>",
        "id": 207431930,
        "sender_full_name": "simulacrum",
        "timestamp": 1597855480
    },
    {
        "content": "<p>oh... yeah that'd be great (I'd use variance across a set of runs rather than difference between two runs tho). although I think I don't want a flamegraph, or at least not one that collapses any two events together (i.e. I want all the original call stacks)</p>",
        "id": 207434271,
        "sender_full_name": "eddyb",
        "timestamp": 1597856607
    },
    {
        "content": "<p>yeah that's poorly supported by most tooling, and crox/chromium dev tools is the only thing I've found that will render things</p>",
        "id": 207440990,
        "sender_full_name": "simulacrum",
        "timestamp": 1597860029
    },
    {
        "content": "<p>I failed to find an easy way to just produce html files with bundled JS and such that'll do what the chrome dev tools perf tab does</p>",
        "id": 207441029,
        "sender_full_name": "simulacrum",
        "timestamp": 1597860054
    },
    {
        "content": "<p>eternaleye was telling me you can \"just\" disable collapsing</p>",
        "id": 207441063,
        "sender_full_name": "eddyb",
        "timestamp": 1597860075
    },
    {
        "content": "<p>like that it's mostly a generator side choice</p>",
        "id": 207441111,
        "sender_full_name": "eddyb",
        "timestamp": 1597860096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Have you seen <a href=\"https://github.com/jlfwong/speedscope\">https://github.com/jlfwong/speedscope</a>?</p>",
        "id": 207441129,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597860103
    },
    {
        "content": "<p>I think you can even pass it a url to load</p>",
        "id": 207441155,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597860114
    },
    {
        "content": "<p>you can, but e.g. inferno sort of collapses anyway</p>",
        "id": 207441165,
        "sender_full_name": "simulacrum",
        "timestamp": 1597860116
    },
    {
        "content": "<p><a href=\"https://github.com/jonhoo/inferno/issues/185\">https://github.com/jonhoo/inferno/issues/185</a></p>",
        "id": 207441231,
        "sender_full_name": "simulacrum",
        "timestamp": 1597860132
    },
    {
        "content": "<p>Oh yeah, I meant for the crox data</p>",
        "id": 207441248,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597860139
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> yeah speedscope looks pretty good! I might take a stab at getting urls to that to just happen on perf.rlo</p>",
        "id": 207441376,
        "sender_full_name": "simulacrum",
        "timestamp": 1597860199
    },
    {
        "content": "<p>that said I need to fix the crox stuff to stream JSON to the client rather than buffering in memory :/</p>",
        "id": 207441407,
        "sender_full_name": "simulacrum",
        "timestamp": 1597860218
    },
    {
        "content": "<p>It looks like we need to configure some CORS headers or something so the web app can load the file via ajax</p>",
        "id": 207441590,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597860305
    },
    {
        "content": "<p>that's not a problem, we already do that -- I was playing with firefox profiling tooling <a href=\"https://profiler.firefox.com/\">https://profiler.firefox.com/</a></p>",
        "id": 207441879,
        "sender_full_name": "simulacrum",
        "timestamp": 1597860451
    },
    {
        "content": "<p>(currently though just the <a href=\"https://profiler.firefox.com/\">https://profiler.firefox.com/</a> domain can load from us though)</p>",
        "id": 207441935,
        "sender_full_name": "simulacrum",
        "timestamp": 1597860478
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> so I switched it to do syscalls in a loop: <code>rustup component add --toolchain nightly rustc-dev &amp;&amp; curl -sS https://gist.githubusercontent.com/eddyb/269491b0b59605f39f1d0a9dcf535c4a/raw/bd2a6a125c1e32c515b9bdc1f0997326883ed4fc/rdpmc-bench.rs | rustc +nightly - -o rdpmc-bench -O &amp;&amp; ./rdpmc-bench</code></p>",
        "id": 207445310,
        "sender_full_name": "eddyb",
        "timestamp": 1597862309
    },
    {
        "content": "<p>all zeroes</p>",
        "id": 207445359,
        "sender_full_name": "simulacrum",
        "timestamp": 1597862334
    },
    {
        "content": "<p>did you try the previous one from last night btw?</p>",
        "id": 207445388,
        "sender_full_name": "eddyb",
        "timestamp": 1597862348
    },
    {
        "content": "<p>rdpmc-bench instructions:u=444517581 hw_interrupts.received:u=344</p>",
        "id": 207445389,
        "sender_full_name": "simulacrum",
        "timestamp": 1597862348
    },
    {
        "content": "<p>hm I think no?</p>",
        "id": 207445407,
        "sender_full_name": "simulacrum",
        "timestamp": 1597862354
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/207372327\">said</a>:</p>\n<blockquote>\n<p>after which I ran this on the Zen 1 EPYC server which perfectly auto-detected and produced a perfect run too :D <code>rustup component add --toolchain nightly rustc-dev &amp;&amp; curl -sS https://gist.githubusercontent.com/eddyb/269491b0b59605f39f1d0a9dcf535c4a/raw/855f6e0b9b797313c0d767a57981b6bdb84294d4/rdpmc-bench.rs | rustc +nightly - -o rdpmc-bench -O &amp;&amp; ./rdpmc-bench</code></p>\n</blockquote>\n<p>^^</p>",
        "id": 207445441,
        "sender_full_name": "eddyb",
        "timestamp": 1597862374
    },
    {
        "content": "<p>just did that as well, looks like all zeroes</p>",
        "id": 207445457,
        "sender_full_name": "simulacrum",
        "timestamp": 1597862384
    },
    {
        "content": "<p>trying on perf.rlo collector</p>",
        "id": 207445467,
        "sender_full_name": "simulacrum",
        "timestamp": 1597862389
    },
    {
        "content": "<p>yep all zeroes!</p>",
        "id": 207445601,
        "sender_full_name": "simulacrum",
        "timestamp": 1597862428
    },
    {
        "content": "<p>the syscall version consistently undercounts on my Ivy Bridge, but both a plain loop and a syscall loop produce always all 0s on the Zen 1 EPYC</p>",
        "id": 207445604,
        "sender_full_name": "eddyb",
        "timestamp": 1597862429
    },
    {
        "content": "<p>so even if we enter the kernel, we've accounted for most of the artificial benchmark noise, but the bad news is I still have no idea how we're gathering all that noise during <code>rustc</code> execution. maybe I need a funky metric, like, sorting queries ascending by variance and descending by total (including everything nested in them, i.e. not \"self\") or something, to find the biggest low-variance chunk of work to know to exclude it</p>",
        "id": 207446047,
        "sender_full_name": "eddyb",
        "timestamp": 1597862667
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> Are you looking at a portion of rustc that has already read everything in and done all its memory allocation, and just needs to do computation? Or are you looking at a portion of rustc that's reading things in, allocating memory, and writing things out?</p>",
        "id": 207447394,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597863375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> most of rustc is IO-free except for potentially touching memory-mapped pages (and ofc allocating)</p>",
        "id": 207447462,
        "sender_full_name": "eddyb",
        "timestamp": 1597863417
    },
    {
        "content": "<p>Memory allocation (if it enters the kernel) is going to incur some variance because it touches page tables and has to do invalidations. Touching the filesystem will have inherent variation.</p>",
        "id": 207447465,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597863421
    },
    {
        "content": "<p>but I'm counting userspace instructions?</p>",
        "id": 207447499,
        "sender_full_name": "eddyb",
        "timestamp": 1597863434
    },
    {
        "content": "<p>At this point, are you seeing zero variation on kernel entries/exits/etc?</p>",
        "id": 207447566,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597863471
    },
    {
        "content": "<p>do you mean their count? I'm not counting any software events rn. maybe I should figure out how</p>",
        "id": 207447674,
        "sender_full_name": "eddyb",
        "timestamp": 1597863510
    },
    {
        "content": "<p>one interesting thing is the variation is too small to do any one big thing in, not even every second or so. it's more like taking a slightly different branch a few hundred/thousand times</p>",
        "id": 207447728,
        "sender_full_name": "eddyb",
        "timestamp": 1597863542
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/207447674\">said</a>:</p>\n<blockquote>\n<p>do you mean their count? I'm not counting any software events rn. maybe I should figure out how</p>\n</blockquote>\n<p>That'd be interesting too, but I meant, did you sort out the issue where syscalls and other kernel entries/exits were causing instruction count to vary?</p>",
        "id": 207447854,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597863602
    },
    {
        "content": "<p>no, that was returning from hardware interrupts, I spent a whole day writing auto-detection logic so we can use the right counter for that (and now I can't stand the word \"lake\" etc.)</p>",
        "id": 207448016,
        "sender_full_name": "eddyb",
        "timestamp": 1597863664
    },
    {
        "content": "<p>the synthetic benchmarks run flawlessly on Zen, accounting for every single last instruction</p>",
        "id": 207448078,
        "sender_full_name": "eddyb",
        "timestamp": 1597863691
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I'm glad you've got that \"cove\"-red. ;)</p>",
        "id": 207448083,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597863694
    },
    {
        "content": "<p>i.e. they print only 0</p>",
        "id": 207448092,
        "sender_full_name": "eddyb",
        "timestamp": 1597863697
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I'm actually scared Ice Lake might remove the counter, or leave it undocumented</p>",
        "id": 207448125,
        "sender_full_name": "eddyb",
        "timestamp": 1597863713
    },
    {
        "content": "<p>the most recent SDM + the update doc do not include <code>HW_INTERRUPTS.RECEIVED</code> or anything interrupt-related for Ice Lake</p>",
        "id": 207448221,
        "sender_full_name": "eddyb",
        "timestamp": 1597863741
    },
    {
        "content": "<p>I very much doubt Ice Lake will remove it, and if it isn't documented at all I can help you find someone at Intel who might be able to sort that out.</p>",
        "id": 207448257,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597863760
    },
    {
        "content": "<p>pre-cove it's all good though,going all the way back to Sandy Bridge</p>",
        "id": 207448266,
        "sender_full_name": "eddyb",
        "timestamp": 1597863767
    },
    {
        "content": "<p>well the good news is that there's little enough counters that you could just go digging for them, but I don't (nor know anyone who does) have e.g. anything pre-Sandy Bridge for example</p>",
        "id": 207448324,
        "sender_full_name": "eddyb",
        "timestamp": 1597863802
    },
    {
        "content": "<p>ugh the <code>chrome_profiler.json</code> file is ~1GB</p>",
        "id": 207539050,
        "sender_full_name": "eddyb",
        "timestamp": 1597938887
    },
    {
        "content": "<p>Are you looking for things with \"large\" variance?</p>",
        "id": 207539104,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597938911
    },
    {
        "content": "<p>hmm</p>",
        "id": 207539119,
        "sender_full_name": "eddyb",
        "timestamp": 1597938918
    },
    {
        "content": "<p><code>--minimum-duration 1</code>?</p>",
        "id": 207539141,
        "sender_full_name": "eddyb",
        "timestamp": 1597938927
    },
    {
        "content": "<p>Yeah, that's what I was going to suggest.</p>",
        "id": 207539174,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597938950
    },
    {
        "content": "<p>That often has a pretty big impact.</p>",
        "id": 207539195,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597938960
    },
    {
        "content": "<p>that'd be 1000 instructions</p>",
        "id": 207539197,
        "sender_full_name": "eddyb",
        "timestamp": 1597938961
    },
    {
        "content": "<p>only halves it lol?</p>",
        "id": 207539259,
        "sender_full_name": "eddyb",
        "timestamp": 1597938973
    },
    {
        "content": "<p>oh, 1000 instructions total, not variance</p>",
        "id": 207539279,
        "sender_full_name": "eddyb",
        "timestamp": 1597938982
    },
    {
        "content": "<p>I'll increase it until I'm happy with the size, thanks!</p>",
        "id": 207539310,
        "sender_full_name": "eddyb",
        "timestamp": 1597939004
    },
    {
        "content": "<p>why are they not aligned?</p>",
        "id": 207539492,
        "sender_full_name": "eddyb",
        "timestamp": 1597939087
    },
    {
        "content": "<p>Not aligned?</p>",
        "id": 207539601,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597939148
    },
    {
        "content": "<p>all the counts are relative to the start, in the implementation, but in the viewer, they start around 13 billion</p>",
        "id": 207539686,
        "sender_full_name": "eddyb",
        "timestamp": 1597939194
    },
    {
        "content": "<p>err, 13 billion more with each</p>",
        "id": 207539711,
        "sender_full_name": "eddyb",
        "timestamp": 1597939201
    },
    {
        "content": "<p>lemme just zoom out and screenshot</p>",
        "id": 207539767,
        "sender_full_name": "eddyb",
        "timestamp": 1597939208
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/lA1fZd6P7C24w3LWRjLIchgS/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/lA1fZd6P7C24w3LWRjLIchgS/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/lA1fZd6P7C24w3LWRjLIchgS/image.png\"></a></div>",
        "id": 207539838,
        "sender_full_name": "eddyb",
        "timestamp": 1597939245
    },
    {
        "content": "<p>but also I feel it'd be hard to eyeball this</p>",
        "id": 207539879,
        "sender_full_name": "eddyb",
        "timestamp": 1597939266
    },
    {
        "content": "<p>That's so weird.</p>",
        "id": 207540342,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597939470
    },
    {
        "content": "<p>uh oh there's 2.7 <em>billion</em> that's either in <code>item_bodies_checking</code> or <code>typeck_item_bodies</code>. but I would've seen it as that huge of a variance, and I don't, so I think this is a <code>crox</code> or chromium bug</p>",
        "id": 207540443,
        "sender_full_name": "eddyb",
        "timestamp": 1597939530
    },
    {
        "content": "<p>There's so little processing going on in <code>crox</code>. I can't think off hand how we could be causing this.</p>",
        "id": 207540565,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597939579
    },
    {
        "content": "<p>We basically just translate the measureme events into json and let chromium deal with it.</p>",
        "id": 207540599,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597939602
    },
    {
        "content": "<p>ughh</p>",
        "id": 207540655,
        "sender_full_name": "eddyb",
        "timestamp": 1597939651
    },
    {
        "content": "<p>oh the color correlates with self time, heh</p>",
        "id": 207540670,
        "sender_full_name": "eddyb",
        "timestamp": 1597939661
    },
    {
        "content": "<p>oh could it be the <code>--minimum-duration</code>?</p>",
        "id": 207540691,
        "sender_full_name": "eddyb",
        "timestamp": 1597939681
    },
    {
        "content": "<p>Hmm</p>",
        "id": 207540755,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597939697
    },
    {
        "content": "<p>anyway this looks like a deadend</p>",
        "id": 207540777,
        "sender_full_name": "eddyb",
        "timestamp": 1597939709
    },
    {
        "content": "<p>These are different runs of <code>rustc</code> all merged into the same graph right?</p>",
        "id": 207540814,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597939732
    },
    {
        "content": "<p>yeah, you can see the PIDs on the left</p>",
        "id": 207540831,
        "sender_full_name": "eddyb",
        "timestamp": 1597939743
    },
    {
        "content": "<p>So if you ran <code>mmview {file} | head</code> they should all have <code>timestamp: 0</code> at the beginning right?</p>",
        "id": 207540943,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597939803
    },
    {
        "content": "<p>what's <code>mmview</code>?</p>",
        "id": 207540974,
        "sender_full_name": "eddyb",
        "timestamp": 1597939814
    },
    {
        "content": "<p>It just dumps the data from your trace file in a semi-readable format</p>",
        "id": 207541003,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597939829
    },
    {
        "content": "<p>installing now</p>",
        "id": 207541015,
        "sender_full_name": "eddyb",
        "timestamp": 1597939837
    },
    {
        "content": "<p>I really only use it for debugging stuff</p>",
        "id": 207541039,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597939848
    },
    {
        "content": "<p>wait</p>",
        "id": 207541055,
        "sender_full_name": "eddyb",
        "timestamp": 1597939854
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> this might be one of the few ways I have to avoid writing code, lol</p>",
        "id": 207541082,
        "sender_full_name": "eddyb",
        "timestamp": 1597939869
    },
    {
        "content": "<p>good thing you mentioned it because I'd never heard of it</p>",
        "id": 207541120,
        "sender_full_name": "eddyb",
        "timestamp": 1597939887
    },
    {
        "content": "<p>I should be able to erase the timestamps and check that the event order is identical</p>",
        "id": 207541152,
        "sender_full_name": "eddyb",
        "timestamp": 1597939902
    },
    {
        "content": "<p>Oh, yeah that would probably work</p>",
        "id": 207541191,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597939921
    },
    {
        "content": "<p>and then zip them together</p>",
        "id": 207541241,
        "sender_full_name": "eddyb",
        "timestamp": 1597939927
    },
    {
        "content": "<p>(if I can't I'll try to do this with <code>crox</code>'s output and <code>jq</code>, I guess)</p>",
        "id": 207541299,
        "sender_full_name": "eddyb",
        "timestamp": 1597939950
    },
    {
        "content": "<p>I should add a <code>--json</code> flag to mmview and just give you a raw json dump without any processing.</p>",
        "id": 207541364,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597939991
    },
    {
        "content": "<p>ugh you print it as times</p>",
        "id": 207541377,
        "sender_full_name": "eddyb",
        "timestamp": 1597940001
    },
    {
        "content": "<p>yeah...</p>",
        "id": 207541386,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597940007
    },
    {
        "content": "<p>the problem is you're rounding to microseconds :P</p>",
        "id": 207541418,
        "sender_full_name": "eddyb",
        "timestamp": 1597940036
    },
    {
        "content": "<p>anyway they all start with <code>timestamp: 0 μs - 2216 μs,</code> (<code>parse_crate</code>)</p>",
        "id": 207541546,
        "sender_full_name": "eddyb",
        "timestamp": 1597940095
    },
    {
        "content": "<p>That seems right then.</p>",
        "id": 207541576,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597940112
    },
    {
        "content": "<p>at least the good news is that I won't need to erase the timestamps because you're rounding away almost all of the variance heh</p>",
        "id": 207541590,
        "sender_full_name": "eddyb",
        "timestamp": 1597940123
    },
    {
        "content": "<p>to check that the event order is the same</p>",
        "id": 207541601,
        "sender_full_name": "eddyb",
        "timestamp": 1597940133
    },
    {
        "content": "<p><code>diff -U10 &lt;(mmview core-047003) &lt;(mmview core-047937) | less</code></p>",
        "id": 207541713,
        "sender_full_name": "eddyb",
        "timestamp": 1597940191
    },
    {
        "content": "<p>okay the diff is huge because of tiny changes in the thousands of instructions</p>",
        "id": 207541785,
        "sender_full_name": "eddyb",
        "timestamp": 1597940222
    },
    {
        "content": "<p>so I have to <code> | sed 's/timestamp:.*//'</code> each <code>mmview</code> - and that results in no diff!</p>",
        "id": 207541860,
        "sender_full_name": "eddyb",
        "timestamp": 1597940277
    },
    {
        "content": "<p>trying out a few random old profiles, including with different implementations of instruction counting, and so far I can't find one that differs in event order</p>",
        "id": 207542099,
        "sender_full_name": "eddyb",
        "timestamp": 1597940390
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> I guess one trick I could do is pick a min and a max and do a diff between them</p>",
        "id": 207542454,
        "sender_full_name": "eddyb",
        "timestamp": 1597940535
    },
    {
        "content": "<p>Since the events are in the order, it would probably be easy to write a script to find the event with the largest difference in self-time between runs</p>",
        "id": 207542670,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597940653
    },
    {
        "content": "<p>yeah, I wish I had the mental capacity to go write code without spending a week or two on it</p>",
        "id": 207542752,
        "sender_full_name": "eddyb",
        "timestamp": 1597940707
    },
    {
        "content": "<p><code>summarize diff</code> tells me <code>mir_borrowck</code> and <code>associated_items</code> are interesting</p>",
        "id": 207543153,
        "sender_full_name": "eddyb",
        "timestamp": 1597940903
    },
    {
        "content": "<p>wait, <code>mir_borrowck</code>'s self \"time\" accounts for almost all of the variance, between these two runs</p>",
        "id": 207543713,
        "sender_full_name": "eddyb",
        "timestamp": 1597941194
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> hmpf I need to screw with <code>mmview</code>'s output to make it processable</p>",
        "id": 207543945,
        "sender_full_name": "eddyb",
        "timestamp": 1597941291
    },
    {
        "content": "<p>oh I can JSON-ify it and throw it into <code>jq</code> heh</p>",
        "id": 207544042,
        "sender_full_name": "eddyb",
        "timestamp": 1597941333
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> <code>sed -E 's/(\\w+): (.*),/\"\\1\": \"\\2\",/'</code>, first try :D</p>",
        "id": 207544531,
        "sender_full_name": "eddyb",
        "timestamp": 1597941527
    },
    {
        "content": "<p>Yer a (regex) wizard eddyb</p>",
        "id": 207544776,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597941620
    },
    {
        "content": "<p>/me adds <code>| sed -E 's/(\"thread_id\": .*),/\\1/'</code> to make <code>jq</code> happy</p>",
        "id": 207544927,
        "sender_full_name": "eddyb",
        "timestamp": 1597941703
    },
    {
        "content": "<p>(from there on it's smooth sailing, <code> | jq 'select(.label == \"mir_borrowck\") | .timestamp'</code> - but I'm afraid that will give me total ranges, so I'd have a hard time figuring out self time)</p>",
        "id": 207545753,
        "sender_full_name": "eddyb",
        "timestamp": 1597942083
    },
    {
        "content": "<p>well, needs <code> | split(\" - \") | map(rtrimstr(\" μs\") | tonumber) | (.[1] - .[0])</code> in the <code>jq</code> filter to make things more comparable</p>",
        "id": 207546801,
        "sender_full_name": "eddyb",
        "timestamp": 1597942682
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> so I have this command: <code>jq -s 'transpose | map(.[1] - .[0])' &lt;(mmview core-049351 | sed -E 's/(\\w+): (.*),/\"\\1\": \"\\2\",/' | sed -E 's/(\"thread_id\": .*),/\\1/' | jq -s 'map(select(.label == \"mir_borrowck\") | .timestamp | split(\" - \") | map(rtrimstr(\" μs\") | tonumber) | (.[1] - .[0]))') &lt;(mmview core-030520 | sed -E 's/(\\w+): (.*),/\"\\1\": \"\\2\",/' | sed -E 's/(\"thread_id\": .*),/\\1/' | jq -s 'map(select(.label == \"mir_borrowck\") | .timestamp | split(\" - \") | map(rtrimstr(\" μs\") | tonumber) | (.[1] - .[0]))') | less</code></p>",
        "id": 207547521,
        "sender_full_name": "eddyb",
        "timestamp": 1597943051
    },
    {
        "content": "<p>and the output is a stream of <code>0</code>, <code>+1</code> and <code>-1</code> and... oof</p>",
        "id": 207547720,
        "sender_full_name": "eddyb",
        "timestamp": 1597943161
    },
    {
        "content": "<p>that makes sense since any one range being larger would have a drastic impact</p>",
        "id": 207547887,
        "sender_full_name": "eddyb",
        "timestamp": 1597943238
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> is the <code>crox</code> output similarly rounded?</p>",
        "id": 207548129,
        "sender_full_name": "eddyb",
        "timestamp": 1597943374
    },
    {
        "content": "<p>while it would be harder to use, I think I can filter into two arrays (start and end) and then zip them (with <code>transpose</code>)</p>",
        "id": 207548217,
        "sender_full_name": "eddyb",
        "timestamp": 1597943408
    },
    {
        "content": "<p>Yeah, it's rounded to microseconds <a href=\"https://github.com/rust-lang/measureme/blob/master/crox/src/main.rs#L15\">https://github.com/rust-lang/measureme/blob/master/crox/src/main.rs#L15</a></p>",
        "id": 207548310,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597943473
    },
    {
        "content": "<p>Which was never an issue until we had such accurate timing lol</p>",
        "id": 207548341,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597943492
    },
    {
        "content": "<p><code>Instant::now</code> does return nanosecond precision (I've been informed it does that by interpolating using <code>rdtsc</code> and some factor kept in shared memory</p>",
        "id": 207548480,
        "sender_full_name": "eddyb",
        "timestamp": 1597943563
    },
    {
        "content": "<p>so the best thing right now would actually be a flamegraph diff, maybe?</p>",
        "id": 207548648,
        "sender_full_name": "eddyb",
        "timestamp": 1597943674
    },
    {
        "content": "<p>at least I should be able to just run <code>crox</code> on one profile and see what's up with it</p>",
        "id": 207561394,
        "sender_full_name": "eddyb",
        "timestamp": 1597950282
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> how does <code>summarize</code> compute \"self time\"? does it look only at direct children of the event, or is it weirder? also, is total time computed from the hierarchy somehow, or is it just the range size?</p>",
        "id": 207561961,
        "sender_full_name": "eddyb",
        "timestamp": 1597950586
    },
    {
        "content": "<p>Total time is just the range size</p>",
        "id": 207562049,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597950621
    },
    {
        "content": "<p>Self time is total time - total time for the direct children</p>",
        "id": 207562067,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597950636
    },
    {
        "content": "<p>because I'm not seeing a lot of <code>mir_borrowck</code> direct children (or \"callees\" I could say). not even total descendants. although, there's apparently like 1k bodies?</p>",
        "id": 207562267,
        "sender_full_name": "eddyb",
        "timestamp": 1597950744
    },
    {
        "content": "<p>so actually, every <code>mir_borrowck</code> execution being ±1 instruction could account for everything. welp</p>",
        "id": 207562325,
        "sender_full_name": "eddyb",
        "timestamp": 1597950780
    },
    {
        "content": "<p>let me just patch up <code>mmview</code> to just print instruction counts</p>",
        "id": 207562613,
        "sender_full_name": "eddyb",
        "timestamp": 1597950925
    },
    {
        "content": "<p>or nanoseconds or w/e</p>",
        "id": 207562634,
        "sender_full_name": "eddyb",
        "timestamp": 1597950935
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> oh wow <code>mmview</code> is really simple, I can just modify it to output the JSON I need heh</p>",
        "id": 207563780,
        "sender_full_name": "eddyb",
        "timestamp": 1597951540
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> oh you're using \"global start time\", that's why <code>crox</code> did that weird thing</p>",
        "id": 207563855,
        "sender_full_name": "eddyb",
        "timestamp": 1597951568
    },
    {
        "content": "<p>that's why it was offset by 13 billion instructions</p>",
        "id": 207563879,
        "sender_full_name": "eddyb",
        "timestamp": 1597951580
    },
    {
        "content": "<p>because each run takes 13 seconds</p>",
        "id": 207563901,
        "sender_full_name": "eddyb",
        "timestamp": 1597951593
    },
    {
        "content": "<p>Isn't that only done in mmview?</p>",
        "id": 207564121,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597951714
    },
    {
        "content": "<p>it must be used in <code>crox</code> too. or at least the version I have</p>",
        "id": 207565922,
        "sender_full_name": "eddyb",
        "timestamp": 1597952688
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> so actually, I wish I realized how tiny <code>mmview</code> was, I can do my own thing like it very easily</p>",
        "id": 207566303,
        "sender_full_name": "eddyb",
        "timestamp": 1597952917
    },
    {
        "content": "<p>Yeah, I think the first version was literally just</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">event</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">profiler_data</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">event</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 207566566,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597953056
    },
    {
        "content": "<p>even <code>crox</code> is tiny heh</p>",
        "id": 207569724,
        "sender_full_name": "eddyb",
        "timestamp": 1597954763
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> <code>crox</code> uses <code>data.metadata.start_time.duration_since(UNIX_EPOCH)</code></p>",
        "id": 207570149,
        "sender_full_name": "eddyb",
        "timestamp": 1597955057
    },
    {
        "content": "<p>yes I added the start_time when I crated the merging in crox. my use case was to get something similar to <a href=\"https://doc.rust-lang.org/cargo/reference/unstable.html#timings\">cargo -Z timings</a> to be able to see how all the rustc compilations from a cargo build interacted.<br>\nI had not enough imagination to think of use it as a way to diff the same execution run multiple times :D</p>",
        "id": 207576447,
        "sender_full_name": "andjo403",
        "timestamp": 1597958676
    },
    {
        "content": "<p>and that the times is rounded to micros I think is mostly that that is the default in chrome tracing format.<br>\nto have nanos you will have to write some extra information to the json file to get the time scaling correct in the gui.</p>",
        "id": 207577142,
        "sender_full_name": "andjo403",
        "timestamp": 1597959166
    },
    {
        "content": "<p>well this isn't even nanoseconds, I'm storing an entirely different value (instruction counts) in the timestamps</p>",
        "id": 207577468,
        "sender_full_name": "eddyb",
        "timestamp": 1597959434
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> I've got an idea, along the lines of \"I can enforce that no two «timestamps» are the same, and use a <code>BTreeMap&lt;u64, Event&gt;</code> to do range queries\"</p>",
        "id": 207580327,
        "sender_full_name": "eddyb",
        "timestamp": 1597961414
    },
    {
        "content": "<p>the funny thing about that is re-splitting start/end (which I assume <code>analyzeme</code> combines?)</p>",
        "id": 207580368,
        "sender_full_name": "eddyb",
        "timestamp": 1597961450
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> figured out, <code>analyzeme</code> itself adds the start time, and it needs to be subtracted out</p>",
        "id": 207597074,
        "sender_full_name": "eddyb",
        "timestamp": 1597979861
    },
    {
        "content": "<p>thankfully it looks like a precise operation</p>",
        "id": 207597077,
        "sender_full_name": "eddyb",
        "timestamp": 1597979869
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> theory: having separate tools isn't great, and we want to more have ways to analyze the data, and e.g. the Chromium profiler format would be just one kind of format we'd serialize an event stream to (which could be the result of e.g. diffing two event streams, doing some variance analysis, etc.)</p>",
        "id": 207597257,
        "sender_full_name": "eddyb",
        "timestamp": 1597980222
    },
    {
        "content": "<p>similarly, <code>--json</code> or flamegraphs</p>",
        "id": 207597298,
        "sender_full_name": "eddyb",
        "timestamp": 1597980254
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> but yeah I think I need to reason about the space between every consecutive pair of low-level events (i.e. start/end/instant) because it will have \"inherent variance\" of 2x sampling variance</p>",
        "id": 207598741,
        "sender_full_name": "eddyb",
        "timestamp": 1597982598
    },
    {
        "content": "<p>whereas anything made of more sampling points will amplify that</p>",
        "id": 207598745,
        "sender_full_name": "eddyb",
        "timestamp": 1597982611
    },
    {
        "content": "<p>I wish this was a separate crate I can \"just\" use :( <a href=\"https://github.com/bheisler/criterion.rs/blob/master/src/stats/mod.rs\">https://github.com/bheisler/criterion.rs/blob/master/src/stats/mod.rs</a></p>",
        "id": 207599665,
        "sender_full_name": "eddyb",
        "timestamp": 1597983964
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> actually, hmm, a list of start/end/instant events sorted by timestamp with a \"parent start index/timestamp\" or something in each entry would allow speeding up all analysis and wouldn't be harder to construct than the current <code>Vec&lt;Event&gt;</code></p>",
        "id": 207600394,
        "sender_full_name": "eddyb",
        "timestamp": 1597985388
    },
    {
        "content": "<p>this is exactly what I wanted to avoid though :P (rewriting parts of <code>analyzeme</code>)</p>",
        "id": 207600438,
        "sender_full_name": "eddyb",
        "timestamp": 1597985430
    },
    {
        "content": "<p>oh what I thought is a <code>Vec&lt;Event&gt;</code> is an iterator of <code>LightweightEvent</code>, heh. oh and start/end aren't actually recorded like I thought they are, so I'm reconstructing the sampling points from something more boiled down at recording time oooh</p>",
        "id": 207600775,
        "sender_full_name": "eddyb",
        "timestamp": 1597986034
    },
    {
        "content": "<p>that explains the reverse iteration in <code>summarize</code>, since recording is effectively in postorder (parent range event after all child events)</p>",
        "id": 207600844,
        "sender_full_name": "eddyb",
        "timestamp": 1597986151
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> so an abstraction I think we can build is basically <code>summarize</code>'s <code>analysis</code> module but without <code>query_data</code> or per-thread <code>start</code>/<code>end</code> time. so all it gives you is access to the stack as you iterate through events in reverse</p>",
        "id": 207603030,
        "sender_full_name": "eddyb",
        "timestamp": 1597990005
    },
    {
        "content": "<p>but I think I'll avoid building that, now that I understand how it all works, just because of how straight-forward it seems</p>",
        "id": 207603042,
        "sender_full_name": "eddyb",
        "timestamp": 1597990028
    },
    {
        "content": "<p>(to just copy that code and modify it)</p>",
        "id": 207603049,
        "sender_full_name": "eddyb",
        "timestamp": 1597990058
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> <span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> I might know why the interrupt count helps a lot more on Zen than it does on my Ivy Bridge:</p>\n<blockquote>\n<p>Many implementations include an event which can be used for this purpose; some CPUs do not (such as Atom or Pentium D) and on some the event is unreliable when HyperThreading is enabled (Nehalem) [23].</p>\n</blockquote>\n<p>Nehalem doesn't have this counter, as far as Intel documentation is concerned! so presumably that's still a problem in Ivy Bridge</p>",
        "id": 207686542,
        "sender_full_name": "eddyb",
        "timestamp": 1598045042
    },
    {
        "content": "<p>I had this still open and glanced at it and spotted that <a href=\"http://web.eece.maine.edu/~vweaver/projects/deterministic/deterministic_counters.pdf#page=17\">http://web.eece.maine.edu/~vweaver/projects/deterministic/deterministic_counters.pdf#page=17</a></p>",
        "id": 207686587,
        "sender_full_name": "eddyb",
        "timestamp": 1598045058
    },
    {
        "content": "<p>it also implies there's an older (surely undocumented?) counter and I must've missed something</p>",
        "id": 207686611,
        "sender_full_name": "eddyb",
        "timestamp": 1598045088
    },
    {
        "content": "<blockquote>\n<p>[23]  C. Segulja. Personal Communication, 2012.</p>\n</blockquote>\n<p>oh <em>come on</em></p>",
        "id": 207686630,
        "sender_full_name": "eddyb",
        "timestamp": 1598045107
    },
    {
        "content": "<p>Honestly, if you end up with something that only times reliably on Haswell and newer, that wouldn't be a big deal.</p>",
        "id": 207686668,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598045147
    },
    {
        "content": "<p>Skylake is when Intel started documenting the counter at all AFAICT</p>",
        "id": 207686678,
        "sender_full_name": "eddyb",
        "timestamp": 1598045159
    },
    {
        "content": "<p>but I think the overcounting problem still exists in Coffee Lake?</p>",
        "id": 207686726,
        "sender_full_name": "eddyb",
        "timestamp": 1598045166
    },
    {
        "content": "<p>Documenting it at all, or documenting it in a sensible place to look? :)</p>",
        "id": 207686760,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598045213
    },
    {
        "content": "<p>so far \"always zero\" has only been observed reliably on Zen (which is nice because of all the Zen errata that had us worried)</p>",
        "id": 207686766,
        "sender_full_name": "eddyb",
        "timestamp": 1598045222
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> well, listing it in the list of performance counting events. a list which for some reason doesn't include it for  bridges and wells despite them empirically having the same event with the same EventSel/UMask value to configure it</p>",
        "id": 207686815,
        "sender_full_name": "eddyb",
        "timestamp": 1598045277
    },
    {
        "content": "<p>like they include it for atoms and phis but not older \"Core\" series :/</p>",
        "id": 207686886,
        "sender_full_name": "eddyb",
        "timestamp": 1598045328
    },
    {
        "content": "<p>Given that it isn't architectural, it might have only gotten documented <em>at all</em> because someone needed it to be public.</p>",
        "id": 207686912,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598045351
    },
    {
        "content": "<p>That happened a few times when we needed something disclosed; that was the point at which it got documented in the public documentation.</p>",
        "id": 207686951,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598045377
    },
    {
        "content": "<p>but why not go back and be uniform? it's exactly the same AFAICT, you'd just copy-paste it</p>",
        "id": 207686980,
        "sender_full_name": "eddyb",
        "timestamp": 1598045399
    },
    {
        "content": "<p>anyway, the only reason I didn't bother with anything before Sandy Bridge is the same EventSel/UMask pair maps to <em>something else</em> in Nehalem or whatever is listed just before Sandy Bridge in the Intel docs</p>",
        "id": 207687076,
        "sender_full_name": "eddyb",
        "timestamp": 1598045442
    },
    {
        "content": "<p>so I would have to both find someone with hardware <em>and</em> bruteforce it</p>",
        "id": 207687092,
        "sender_full_name": "eddyb",
        "timestamp": 1598045456
    },
    {
        "content": "<p>Multiple reasons. Primarily, it isn't architectural, so verifying that it's actually \"exactly the same\" isn't trivial. Nobody wants to document/promise something  that isn't true.</p>",
        "id": 207687106,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598045466
    },
    {
        "content": "<p>but, they designed it. they know it's there. it's broken everywhere with HT or w/e so I don't see why they would not document it before</p>",
        "id": 207687164,
        "sender_full_name": "eddyb",
        "timestamp": 1598045509
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> it's so weird. AMD includes it in the <em>K8</em> docs. i.e. the original AMD64. from early 2000s</p>",
        "id": 207687238,
        "sender_full_name": "eddyb",
        "timestamp": 1598045540
    },
    {
        "content": "<p>That's a very very plural \"they\"; the same set of people may not have been involved the whole time, for instance. ;)</p>",
        "id": 207687241,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598045541
    },
    {
        "content": "<p>yeah but, like, surely they have the specs</p>",
        "id": 207687258,
        "sender_full_name": "eddyb",
        "timestamp": 1598045556
    },
    {
        "content": "<p>And secondarily, updating documents for older processors isn't anyone's job specifically, whereas someone clearly had a specific need for it to be documented on Skylake and newer. :)</p>",
        "id": 207687284,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598045576
    },
    {
        "content": "<p>given how they haven't even bothered to include <em>released generations</em> in the docs... I'm not really <em>surprised</em></p>",
        "id": 207687328,
        "sender_full_name": "eddyb",
        "timestamp": 1598045620
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/207687258\">said</a>:</p>\n<blockquote>\n<p>yeah but, like, surely they have the specs</p>\n</blockquote>\n<p>You would be <em>astonished</em> at how many <em>different</em> specs there are, how hard they are to find even internally, and how much work it takes to get the necessary approvals to publicly document something.</p>",
        "id": 207687337,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598045629
    },
    {
        "content": "<p>just <em>disappointed</em></p>",
        "id": 207687338,
        "sender_full_name": "eddyb",
        "timestamp": 1598045630
    },
    {
        "content": "<ul>\n<li>validation is hard.</li>\n</ul>",
        "id": 207687413,
        "sender_full_name": "nagisa",
        "timestamp": 1598045665
    },
    {
        "content": "<p>It's not like there's a single massive internal manual for any given processor that you can get access to if you work there. ;)</p>",
        "id": 207687414,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598045665
    },
    {
        "content": "<p>does intel even validate the more obscure counters? You’ll never know! Does AMD? Same answer ah!</p>",
        "id": 207687439,
        "sender_full_name": "nagisa",
        "timestamp": 1598045685
    },
    {
        "content": "<p>There are absolutely specs; I'm not suggesting there aren't. The problem is that there are <em>many</em> specs. :)</p>",
        "id": 207687443,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598045689
    },
    {
        "content": "<p>I don't mean necessarily a document. I mean the actual HDL that they made the CPUs from</p>",
        "id": 207687479,
        "sender_full_name": "eddyb",
        "timestamp": 1598045718
    },
    {
        "content": "<p>then again, my standards are lowering every minute I pay any attention to all of this</p>",
        "id": 207687514,
        "sender_full_name": "eddyb",
        "timestamp": 1598045753
    },
    {
        "content": "<p>counters are probably a microcode thing (inferred from <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> saying they are not architectural)</p>",
        "id": 207687519,
        "sender_full_name": "nagisa",
        "timestamp": 1598045759
    },
    {
        "content": "<p>/me has absolutely no idea how they're implemented and probably couldn't say if he did.</p>",
        "id": 207687580,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598045778
    },
    {
        "content": "<p>\"architectural\" is Intel speak for \"guaranteed to exist\"</p>",
        "id": 207687583,
        "sender_full_name": "eddyb",
        "timestamp": 1598045780
    },
    {
        "content": "<p>That, yes.</p>",
        "id": 207687587,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598045785
    },
    {
        "content": "<p>like they won't remove it in the next generation. nor change how they're accessed</p>",
        "id": 207687594,
        "sender_full_name": "eddyb",
        "timestamp": 1598045794
    },
    {
        "content": "<p>I see.</p>",
        "id": 207687614,
        "sender_full_name": "nagisa",
        "timestamp": 1598045807
    },
    {
        "content": "<p>\"architectural\" means \"this is part of Intel Architecture, and it isn't going away\". It's part of the eternally growing backwards compatibility.</p>",
        "id": 207687617,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598045807
    },
    {
        "content": "<p>everything else requires you using <code>cpuid</code> + published documents to guess how you might use it</p>",
        "id": 207687622,
        "sender_full_name": "eddyb",
        "timestamp": 1598045811
    },
    {
        "content": "<p>it's interesting that there are claims of a Nehalem counter though. the paper talks as if Intel documented this... but it's not there. I wonder if they just... removed them?</p>",
        "id": 207687637,
        "sender_full_name": "eddyb",
        "timestamp": 1598045833
    },
    {
        "content": "<p>from the SDM and other documents, I mean</p>",
        "id": 207687654,
        "sender_full_name": "eddyb",
        "timestamp": 1598045868
    },
    {
        "content": "<p>hang on</p>",
        "id": 207687706,
        "sender_full_name": "eddyb",
        "timestamp": 1598045887
    },
    {
        "content": "<p>/me goes to get their physical copies circa 2008</p>",
        "id": 207687720,
        "sender_full_name": "eddyb",
        "timestamp": 1598045906
    },
    {
        "content": "<p>Things are almost never removed from the SDM; I'd guess they probably weren't there to begin with.</p>",
        "id": 207687746,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598045940
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> One easy way to see the notion of \"architectural\" to look at documentation of \"model-specific registers\", used with rdmsr/wrmsr. Some of those are \"architectural\", commonly prefixed with <code>IA32_</code> or similar; once those are documented, they'll keep existing past a given generation (or \"as long as this feature is enumerated\" or similar), with the same number, and the same behavior.</p>",
        "id": 207687779,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598045986
    },
    {
        "content": "<p>A non-architectural MSR may have different behavior in the next generation, or not exist at all, or be renumbered and <em>perhaps</em> have the same functionality...</p>",
        "id": 207687860,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598046022
    },
    {
        "content": "<p>so in the SDM, the list of events is Appending A of volume 3. or used to be</p>",
        "id": 207688457,
        "sender_full_name": "eddyb",
        "timestamp": 1598046478
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> they did remove it! I should've read all the fine print lol. see <a href=\"http://web.eece.maine.edu/~vweaver/projects/deterministic/deterministic_counters.pdf#page=5\">http://web.eece.maine.edu/~vweaver/projects/deterministic/deterministic_counters.pdf#page=5</a></p>",
        "id": 207688675,
        "sender_full_name": "eddyb",
        "timestamp": 1598046629
    },
    {
        "content": "<p>so it's <code>11d</code> on Nehalem and Westmere. got it</p>",
        "id": 207688751,
        "sender_full_name": "eddyb",
        "timestamp": 1598046712
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> my physical copy has it too! it's <code>c8</code> for \"Intel Core Microarchitecture\" (I guess this is pre-Nehalem)</p>",
        "id": 207688972,
        "sender_full_name": "eddyb",
        "timestamp": 1598046857
    },
    {
        "content": "<p>thanks Intel, for removing something instead of adding caveats/errata and making me feel insane,</p>",
        "id": 207689073,
        "sender_full_name": "eddyb",
        "timestamp": 1598046934
    },
    {
        "content": "<p>now all that's left is to find that the latest microcode update actually removed/disabled those counters.</p>",
        "id": 207689333,
        "sender_full_name": "nagisa",
        "timestamp": 1598047119
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> no it's literally just the PDFs</p>",
        "id": 207689374,
        "sender_full_name": "eddyb",
        "timestamp": 1598047153
    },
    {
        "content": "<p>I'm not even sure the counters themselves have a mechanism to disable them. but maybe microcode and intercept any MSR write?</p>",
        "id": 207689409,
        "sender_full_name": "eddyb",
        "timestamp": 1598047196
    },
    {
        "content": "<p>if Intel could redact my physical copy they probably would've</p>",
        "id": 207689485,
        "sender_full_name": "eddyb",
        "timestamp": 1598047223
    },
    {
        "content": "<p>oh the first table has the <code>c8</code> that's in my physical copy heh <a href=\"http://web.eece.maine.edu/~vweaver/projects/deterministic/deterministic_counters.pdf#page=4\">http://web.eece.maine.edu/~vweaver/projects/deterministic/deterministic_counters.pdf#page=4</a></p>",
        "id": 207690202,
        "sender_full_name": "eddyb",
        "timestamp": 1598047778
    },
    {
        "content": "<p>so, huh, they kept it on Bonell (an Atom uarch), with the old <code>hW_INT_RCV</code> name and the <code>c8</code> <code>EventSel</code> value, in <a href=\"https://software.intel.com/content/dam/develop/public/us/en/documents/335279-performance-monitoring-events-guide.pdf\">https://software.intel.com/content/dam/develop/public/us/en/documents/335279-performance-monitoring-events-guide.pdf</a>. maybe it's because it doesn't have HT?</p>",
        "id": 207690411,
        "sender_full_name": "eddyb",
        "timestamp": 1598047923
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/207688675\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> they did remove it! I should've read all the fine print lol. see <a href=\"http://web.eece.maine.edu/~vweaver/projects/deterministic/deterministic_counters.pdf#page=5\">http://web.eece.maine.edu/~vweaver/projects/deterministic/deterministic_counters.pdf#page=5</a></p>\n</blockquote>\n<p>Weird.</p>\n<p>In any case, if it potentially breaks with hyperthreading, do you actually want it?</p>",
        "id": 207692249,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598049400
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> the HT interrupt overcounting variance is significantly less than the variance within interrupts themselves (which cause overcounting of instructions because <code>iret</code> counts as retiring in its <em>target</em> mode, not <em>source</em>, which makes sense mechanically but is undesireable)</p>",
        "id": 207692397,
        "sender_full_name": "eddyb",
        "timestamp": 1598049560
    },
    {
        "content": "<p>being able to test something and <em>knowing</em> at least some of the caveats is better than nothing at all</p>",
        "id": 207692426,
        "sender_full_name": "eddyb",
        "timestamp": 1598049593
    },
    {
        "content": "<p>AMD <em>does this right</em>, by producing errata instead, so Intel is just bad at this</p>",
        "id": 207692479,
        "sender_full_name": "eddyb",
        "timestamp": 1598049621
    },
    {
        "content": "<p>sure, they might have their reasons, but I don't have to be happy at the time wasted</p>",
        "id": 207692492,
        "sender_full_name": "eddyb",
        "timestamp": 1598049638
    },
    {
        "content": "<p>anyway I still have noise an order of magnitude larger, that I have to write some low-level analysis of the event data to dig further into</p>",
        "id": 207692552,
        "sender_full_name": "eddyb",
        "timestamp": 1598049719
    },
    {
        "content": "<p>so I could've deferred the whole interrupt counting thing, but there wasn't really a way to know</p>",
        "id": 207692636,
        "sender_full_name": "eddyb",
        "timestamp": 1598049771
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> have you considered making the analysis simpler by storing an event's start time when it starts, and the end time when it ends, but the guard that records the end time does so where the event was originally written, making it preorder rather than postorder, and allowing all analysis to go forwards rather than backwards? (maybe this belongs elsewhere?)</p>",
        "id": 207750109,
        "sender_full_name": "eddyb",
        "timestamp": 1598145974
    },
    {
        "content": "<p>I guess it might be hard to measure how much costlier that is? but we could design for it, maybe? it's less cache-friendly though so maybe we shouldn't care</p>",
        "id": 207750118,
        "sender_full_name": "eddyb",
        "timestamp": 1598146023
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/207750118\">said</a>:</p>\n<blockquote>\n<p>I guess it might be hard to measure how much costlier that is? but we could design for it, maybe? it's less cache-friendly though so maybe we shouldn't care</p>\n</blockquote>\n<p>that seems like it would either require an unbounded cache buffer (as there's no upper bound on how long spans may live for) or seeking around the file (→ randomizing the write patterns)</p>",
        "id": 207750867,
        "sender_full_name": "nagisa",
        "timestamp": 1598147603
    },
    {
        "content": "<p>It might be worthwhile to consider recording the start and end events separately though (which is something I’m experimenting in a tracing subscriber I’m writing)</p>",
        "id": 207750929,
        "sender_full_name": "nagisa",
        "timestamp": 1598147734
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> we use memory-mapping outside of windows, so it'd just be random access (hence cache effects). keeping them separate would probably be better, yeah (it's actually what I have to recover, since I care about individual sampling points, and intervals between consecutive ones, heh)</p>",
        "id": 207752137,
        "sender_full_name": "eddyb",
        "timestamp": 1598150103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> hmm given the way events are read, I think it's actually faster to do one pass per thread (and even do a full pass <em>just</em> to gather the set of thread IDs, although we could encode that in the JSON blob) instead of using a hashmap to store per-thread state and update it as we go</p>",
        "id": 207753476,
        "sender_full_name": "eddyb",
        "timestamp": 1598152683
    },
    {
        "content": "<p>and/or I can just error for now if the <code>thread_id</code> isn't the one I expect, since introducing parallelism probably destroys any chance of making all this deterministic and therefore aggregating a set of runs is meaningless</p>",
        "id": 207753571,
        "sender_full_name": "eddyb",
        "timestamp": 1598152810
    },
    {
        "content": "<p>oh wow cool, <code>summarize summarize</code> and <code>summarize diff</code> can take JSON files <code>--json</code> produced. can this compute a diff of diffs? lol</p>",
        "id": 207754363,
        "sender_full_name": "eddyb",
        "timestamp": 1598154339
    },
    {
        "content": "<p>at the very least it seems like it can <em>show</em> the JSON file without recomputing the data from the original event traces, which is nice</p>",
        "id": 207754381,
        "sender_full_name": "eddyb",
        "timestamp": 1598154362
    },
    {
        "content": "<p>I hope there's a crate for this because I keep writing it heh <a href=\"https://gist.github.com/eddyb/b4c70b2432835c710256d58fd2037575\">https://gist.github.com/eddyb/b4c70b2432835c710256d58fd2037575</a></p>",
        "id": 207758542,
        "sender_full_name": "eddyb",
        "timestamp": 1598163022
    },
    {
        "content": "<p>fascinating, I just finished this and the most common small variances in monotonic timestamp intervals are ±5, ±10 and ±15 (nanoseconds), together accounting for 277547 out of 1708446 consecutive intervals, or 16%</p>",
        "id": 207759261,
        "sender_full_name": "eddyb",
        "timestamp": 1598164575
    },
    {
        "content": "<p>adding <code>cpuid</code> before <code>rdpmc</code> increases the number of ±0 (instructions) intervals from 330833 (19.4%) to 1630224 (95.4%)</p>",
        "id": 207759325,
        "sender_full_name": "eddyb",
        "timestamp": 1598164753
    },
    {
        "content": "<p>that's much starker than what I was able to see when the sampling points were grouped together into the higher-level profiling view</p>",
        "id": 207759369,
        "sender_full_name": "eddyb",
        "timestamp": 1598164809
    },
    {
        "content": "<p>on the Zen 1 EPYC, <code>lfence</code> instead of <code>cpuid</code> results in 1652944 (96.75%) ±0 (instructions) intervals, presumably because it's simpler? and the right bit in the right MSR is enabled by the kernel to make it just as serializing as <code>cpuid</code></p>",
        "id": 207759441,
        "sender_full_name": "eddyb",
        "timestamp": 1598164979
    },
    {
        "content": "<p>with <code>cpuid</code> and subtracting hardware interrupts, it goes up to 1700244 (99.5%)</p>",
        "id": 207759502,
        "sender_full_name": "eddyb",
        "timestamp": 1598165144
    },
    {
        "content": "<p>that's actually <strong>9.5x fewer</strong> non-deterministic intervals, so in a sense, an order of magnitude improvement! even if the total variance doesn't look like it improves much</p>",
        "id": 207759598,
        "sender_full_name": "eddyb",
        "timestamp": 1598165365
    },
    {
        "content": "<p>in my poor approximation from before, this maps to all of those small queries ending up with 0 variance, but now I can actually quantify it</p>",
        "id": 207759663,
        "sender_full_name": "eddyb",
        "timestamp": 1598165503
    },
    {
        "content": "<p>combining two sets of 10 runs brings it down to 1694716 (99.2%), but that's still quite better than 95.4%. although, only \"5.7x fewer\". if I manage to track down the remaining variance, I should be able to do runs of 100 or w/e (maybe even e.g. in groups of 10 with large <code>sleep</code>s in between, to be able to spot weird clustering effects)</p>",
        "id": 207759993,
        "sender_full_name": "eddyb",
        "timestamp": 1598166225
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I guess this is my first PR to <code>measureme</code> <a href=\"https://github.com/rust-lang/measureme/pull/129\">https://github.com/rust-lang/measureme/pull/129</a></p>",
        "id": 207760610,
        "sender_full_name": "eddyb",
        "timestamp": 1598167668
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  ±659 instructions (after entering `free_global_ctxt` and before leaving `free_global_ctxt`)\n</code></pre></div>\n\n\n<p>not sure if I should make a special-case for that (the interval is a whole single query), but I think that means <code>free_global_ctxt</code> <em>on its own</em> is introducing a tenth or so of the variance</p>",
        "id": 207784202,
        "sender_full_name": "eddyb",
        "timestamp": 1598205538
    },
    {
        "content": "<p>oh <code>hir_lowering</code> is doing the same thing, so <em>something</em> they're doing is inherently non-deterministic and it's not just death by a thousand cuts (since it's just two sampling points)</p>",
        "id": 207784307,
        "sender_full_name": "eddyb",
        "timestamp": 1598205701
    },
    {
        "content": "<p>Hm both sound like they're likely generating allocator traffic which is going to be very sensitive I feel to the environment.</p>",
        "id": 207785043,
        "sender_full_name": "simulacrum",
        "timestamp": 1598206824
    },
    {
        "content": "<p>(and potentially uses nondeterministic HashMaps or something? I've never looked at jemalloc internals...)</p>",
        "id": 207785053,
        "sender_full_name": "simulacrum",
        "timestamp": 1598206856
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> there's no room for non-deterministic allocators anymore</p>",
        "id": 207785192,
        "sender_full_name": "eddyb",
        "timestamp": 1598207086
    },
    {
        "content": "<p>like there isn't enough variance left. it's like 2-3 orders of magnitude smaller than with ASLR enabled</p>",
        "id": 207785201,
        "sender_full_name": "eddyb",
        "timestamp": 1598207109
    },
    {
        "content": "<p>No, I mean ASLR isn't everything</p>",
        "id": 207785207,
        "sender_full_name": "simulacrum",
        "timestamp": 1598207126
    },
    {
        "content": "<p>even the PID-length-in-base-10 thing introduces a couple million instructions IIRC</p>",
        "id": 207785218,
        "sender_full_name": "eddyb",
        "timestamp": 1598207150
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I think \"free\" is very misleading and it's containing a <code>Drop</code> impl that does IO</p>",
        "id": 207785276,
        "sender_full_name": "eddyb",
        "timestamp": 1598207224
    },
    {
        "content": "<p>Hm I guess. Have we checked if valgrind cachegrind diffs are perfect (i.e. empty)? That might be a good way to try and track things down more precisely</p>",
        "id": 207785284,
        "sender_full_name": "simulacrum",
        "timestamp": 1598207240
    },
    {
        "content": "<p>Ah IO could I guess cause.. something? Have you tried compiling in memory (e.g. tmpfs?)</p>",
        "id": 207785296,
        "sender_full_name": "simulacrum",
        "timestamp": 1598207282
    },
    {
        "content": "<p>Ideally probably we'd chroot into a ram-only drive, something like that, to hopefully isolate any disk io</p>",
        "id": 207785342,
        "sender_full_name": "simulacrum",
        "timestamp": 1598207315
    },
    {
        "content": "<p>no, but also I don't yet know how IO can cause instruction variance. my best bet, now that I know where it is, is to bisect the code itself</p>",
        "id": 207785345,
        "sender_full_name": "eddyb",
        "timestamp": 1598207318
    },
    {
        "content": "<p>I can just use my regular incremental builds and not even enable <code>-Zself-profile</code>, just do the microbenchmark thing around small pieces of code</p>",
        "id": 207785419,
        "sender_full_name": "eddyb",
        "timestamp": 1598207428
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> anyway this is why I wanted this sort of view of the data, it's very precise about the trouble-makers</p>",
        "id": 207785515,
        "sender_full_name": "eddyb",
        "timestamp": 1598207555
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> wait what, <code>MmapSerializationSink</code> is just in-memory and writes it out to a file in the destructor?</p>",
        "id": 207786305,
        "sender_full_name": "eddyb",
        "timestamp": 1598208928
    },
    {
        "content": "<p>why can't windows do <em>that</em></p>",
        "id": 207786309,
        "sender_full_name": "eddyb",
        "timestamp": 1598208936
    },
    {
        "content": "<p>heh it has a buffer. so it's the same thing but with extra steps? I thought the reason windows couldn't do the mmap thing was because we were using memory-mapped <em>files</em></p>",
        "id": 207786358,
        "sender_full_name": "eddyb",
        "timestamp": 1598208990
    },
    {
        "content": "<p>but this isn't relevant to me because by the time that destructor runs, no more events can be recorded. so it's not what shows up in my data</p>",
        "id": 207786377,
        "sender_full_name": "eddyb",
        "timestamp": 1598209054
    },
    {
        "content": "<p>you can also see borrowck is doing something non-deterministic, and it's <em>not</em> death-by-a-thousand-cuts (from the 11k borrowck queries), because 6 out of the largest 10 variances are from borrowck, and <em>they alone</em> add up to ±1784.5, which is like a third of the variance, lol</p>",
        "id": 207786602,
        "sender_full_name": "eddyb",
        "timestamp": 1598209329
    },
    {
        "content": "<p>I think the differences in descriptions are from different instances of borrowck which have different sub-events. I could probably figure out what is being borrow-checked simply by enabling query keys, doing a set of runs, and running <code>summarize aggregate</code> on those</p>",
        "id": 207786768,
        "sender_full_name": "eddyb",
        "timestamp": 1598209575
    },
    {
        "content": "<p>changed it to \"largest 20\" and 15 of them are borrowck AFAICT. that makes it ±3499. out of ±4865 (variance of totals across this set of runs). so at least 72% of the variance is coming <em>entirely</em> from within borrowck</p>",
        "id": 207787556,
        "sender_full_name": "eddyb",
        "timestamp": 1598210785
    },
    {
        "content": "<p>AFAICT it's <em>something in here</em> that introduces a few hundreds instructions of non-deterministic variance (for several executions of <code>mir_borrowck</code>, out of 11k) <a href=\"https://github.com/rust-lang/rust/blob/05630b06fdf76c25c6ccf2e9ac3567592eae6c67/src/librustc_mir/borrow_check/mod.rs#L110-L188\">https://github.com/rust-lang/rust/blob/05630b06fdf76c25c6ccf2e9ac3567592eae6c67/src/librustc_mir/borrow_check/mod.rs#L110-L188</a></p>",
        "id": 207788176,
        "sender_full_name": "eddyb",
        "timestamp": 1598211796
    },
    {
        "content": "<p>actually, most are after the <code>nll::replace_regions_in_mir</code> call huh, not before, my bad</p>",
        "id": 207789608,
        "sender_full_name": "eddyb",
        "timestamp": 1598214102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> so what you were saying before - heap allocators not taking the exact same number of instructions every time <em>despite</em> producing the exact same sequence of addresses? and we're somehow lucky with arenas? (AFAICT the arena allocations are far less noisy, but I'm not 100% sure yet)</p>",
        "id": 207797293,
        "sender_full_name": "eddyb",
        "timestamp": 1598226734
    },
    {
        "content": "<p>I suppose I can use the <code>tcx</code> TLS to just instrument arbitrary things huh</p>",
        "id": 207797315,
        "sender_full_name": "eddyb",
        "timestamp": 1598226817
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  ±223 ns (after leaving `AFTER report_move_errors` and before leaving `AFTER report_region_errors`)\n</code></pre></div>\n\n\n<p>that's on the destructor side. and there <em>is</em> a variable between those two timers (that owns a bunch of heap allocations)</p>",
        "id": 207797448,
        "sender_full_name": "eddyb",
        "timestamp": 1598227027
    },
    {
        "content": "<p>time to figure out how to write an instrumented <code>GlobalAllocator</code></p>",
        "id": 207797463,
        "sender_full_name": "eddyb",
        "timestamp": 1598227067
    },
    {
        "content": "<p>well, I can start by trying to enable <code>jemalloc</code>. oh huh, nightlies have it enabled, that's something I didn't klnow</p>",
        "id": 207797607,
        "sender_full_name": "eddyb",
        "timestamp": 1598227320
    },
    {
        "content": "<p>I'm seeing about ~400x more noise if I enable <code>jemalloc</code>, which might suggest randomness (at least I think it's about the same as ASLR). but the only (P)RNG I can find in <code>jemalloc</code> has a fixed seed: <a href=\"https://github.com/jemalloc/jemalloc/blob/092fcac0b4b3854c12c51d22174df00303a3fe6a/src/ckh.c#L376\">https://github.com/jemalloc/jemalloc/blob/092fcac0b4b3854c12c51d22174df00303a3fe6a/src/ckh.c#L376</a></p>",
        "id": 207797959,
        "sender_full_name": "eddyb",
        "timestamp": 1598227819
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> so the current hypothesis is that <em>somehow</em> allocating/deallocating AST/HIR/MIR (and maybe the arenas' backing storage?) is responsible for most of the remaining variance, if not all of it. if it is, I'm not sure why it would be, or how we would fix it. <code>jemalloc</code> making it worse is worrying, but we could carry a patched version and/or set some compile-time options?</p>",
        "id": 207798209,
        "sender_full_name": "eddyb",
        "timestamp": 1598228217
    },
    {
        "content": "<p>that's weird, <code>wee_alloc</code> still has more or less the same variances in the same places as the default <code>glibc</code> allocator</p>",
        "id": 207799238,
        "sender_full_name": "eddyb",
        "timestamp": 1598230059
    },
    {
        "content": "<p>allocation in multi-threaded programs will always mirror the fact that there's no real defined order of malloc/realloc/free calls in such programs.</p>",
        "id": 207799311,
        "sender_full_name": "nagisa",
        "timestamp": 1598230197
    },
    {
        "content": "<p>in particular walking freelists is probably where you're seeing the variation.</p>",
        "id": 207799361,
        "sender_full_name": "nagisa",
        "timestamp": 1598230222
    },
    {
        "content": "<p>but the addresses are the same, and there's only one active thread throughout all of this</p>",
        "id": 207799379,
        "sender_full_name": "eddyb",
        "timestamp": 1598230286
    },
    {
        "content": "<p>I'm not letting LLVM run (I'm using <code>--emit=metadata</code>), incremental is not enabled, parallel rustc is not enabled</p>",
        "id": 207799428,
        "sender_full_name": "eddyb",
        "timestamp": 1598230347
    },
    {
        "content": "<p>I know the addresses are the same, because the <code>FxHashMap</code>s go wild when they aren't (whether from ASLR or even just the number of base 10 digits of the pid :P)</p>",
        "id": 207799435,
        "sender_full_name": "eddyb",
        "timestamp": 1598230391
    },
    {
        "content": "<p>hm <em>shrug</em></p>",
        "id": 207799440,
        "sender_full_name": "nagisa",
        "timestamp": 1598230412
    },
    {
        "content": "<p>I did find something weird in <code>glibc</code>, isn't this UB? (unsynchronized access to global state) <a href=\"https://github.com/bminor/glibc/blob/5f72f9800b250410cad3abfeeb09469ef12b2438/sysdeps/unix/sysv/linux/mmap_internal.h#L29-L33\">https://github.com/bminor/glibc/blob/5f72f9800b250410cad3abfeeb09469ef12b2438/sysdeps/unix/sysv/linux/mmap_internal.h#L29-L33</a></p>",
        "id": 207799484,
        "sender_full_name": "eddyb",
        "timestamp": 1598230455
    },
    {
        "content": "<p>eh… its probably \"fine\" given that the call always return the same value.</p>",
        "id": 207799512,
        "sender_full_name": "nagisa",
        "timestamp": 1598230539
    },
    {
        "content": "<p>I guess only the first allocation would hit that, probably inside <code>glibc</code> startup logic, before any threads start. and I think this is more or less just a memory read (bypassing the need for a syscall) <a href=\"https://github.com/bminor/glibc/blob/5f72f9800b250410cad3abfeeb09469ef12b2438/sysdeps/unix/sysv/linux/getpagesize.c#L29\">https://github.com/bminor/glibc/blob/5f72f9800b250410cad3abfeeb09469ef12b2438/sysdeps/unix/sysv/linux/getpagesize.c#L29</a></p>",
        "id": 207799580,
        "sender_full_name": "eddyb",
        "timestamp": 1598230672
    },
    {
        "content": "<p>ah, <code>GLRO</code> accesses <code>rtld</code> internal state, not something like the vDSO, and the value comes from auxv: <a href=\"https://github.com/bminor/glibc/blob/be5c5315b95aaddcef38f1d3f4c526401076bd38/elf/dl-sysdep.c#L129-L131\">https://github.com/bminor/glibc/blob/be5c5315b95aaddcef38f1d3f4c526401076bd38/elf/dl-sysdep.c#L129-L131</a></p>",
        "id": 207799900,
        "sender_full_name": "eddyb",
        "timestamp": 1598231138
    },
    {
        "content": "<p>so <code>mmap</code> is probably fine. the only other thing <code>wee_alloc</code> uses, AFAICT, is <code>pthread_mutex_{lock,unlock}</code> (maybe it should use <code>parking_lot</code>?) <a href=\"https://github.com/rustwasm/wee_alloc/blob/f26c431df6fb6c7df0d6f8e0675471b9c56d8787/wee_alloc/src/imp_unix.rs#L55-L60\">https://github.com/rustwasm/wee_alloc/blob/f26c431df6fb6c7df0d6f8e0675471b9c56d8787/wee_alloc/src/imp_unix.rs#L55-L60</a><br>\nso I guess now I go try out the bump allocator idea instead</p>",
        "id": 207800025,
        "sender_full_name": "eddyb",
        "timestamp": 1598231335
    },
    {
        "content": "<p>ah, here we go, somehow I didn't find this at first <a href=\"https://crates.io/crates/bump_alloc\">https://crates.io/crates/bump_alloc</a></p>",
        "id": 207800096,
        "sender_full_name": "eddyb",
        "timestamp": 1598231481
    },
    {
        "content": "<p>a bump allocator is still noisy. what. how. literally cloning a <code>mir::Body</code> is still around ±200 (although only a small number of them, so maybe I'm thinking about this wrong and something <em>happens</em> halfway through the process? but that wouldn't explain <code>hir_lowering</code>...)</p>",
        "id": 207800658,
        "sender_full_name": "eddyb",
        "timestamp": 1598232471
    },
    {
        "content": "<p>I guess I can go try <code>perf stat -e page-faults:u</code></p>",
        "id": 207802079,
        "sender_full_name": "eddyb",
        "timestamp": 1598235269
    },
    {
        "content": "<p>well, it's 140829 every time so I doubt that's it</p>",
        "id": 207802151,
        "sender_full_name": "eddyb",
        "timestamp": 1598235400
    },
    {
        "content": "<p>yeah okay dropping <code>ast::Crate</code> with noop deallocation still has all of that variance (around ±700 instructions) <span aria-label=\"shock\" class=\"emoji emoji-1f628\" role=\"img\" title=\"shock\">:shock:</span></p>",
        "id": 207802883,
        "sender_full_name": "eddyb",
        "timestamp": 1598236776
    },
    {
        "content": "<p>but overriding <code>free</code> removes that. why would <code>#[global_allocator]</code> not work? is there something broken about dylibs?</p>",
        "id": 207804235,
        "sender_full_name": "eddyb",
        "timestamp": 1598239293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> I just plugged this into <code>src/rustc/rustc.rs</code> and nothing breaks lol <a href=\"https://doc.rust-lang.org/std/alloc/trait.GlobalAlloc.html#example\">https://doc.rust-lang.org/std/alloc/trait.GlobalAlloc.html#example</a></p>",
        "id": 207804597,
        "sender_full_name": "eddyb",
        "timestamp": 1598239982
    },
    {
        "content": "<p>I guess that explains why <code>wee_alloc</code> behaves like glibc... because I <em>was</em> hitting glibc's allocator</p>",
        "id": 207804605,
        "sender_full_name": "eddyb",
        "timestamp": 1598240001
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> wait why do we inject <code>jemalloc</code> in <code>src/rustc/rustc.rs</code>? doesn't that mean e.g. <code>rustdoc</code> doesn't get it?</p>",
        "id": 207804668,
        "sender_full_name": "eddyb",
        "timestamp": 1598240101
    },
    {
        "content": "<p>(without having a copy of that logic. which it doesn't. whereas if it were in <code>librustc_driver</code> it would just apply)</p>",
        "id": 207804675,
        "sender_full_name": "eddyb",
        "timestamp": 1598240123
    },
    {
        "content": "<p><code>librustc_driver</code> <em>also</em> can't override <code>#[global_allocator]</code>, is the feature just broken entirely with dylibs?!</p>",
        "id": 207804736,
        "sender_full_name": "eddyb",
        "timestamp": 1598240279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/207804736\">said</a>:</p>\n<blockquote>\n<p><code>librustc_driver</code> <em>also</em> can't override <code>#[global_allocator]</code>, is the feature just broken entirely with dylibs?!</p>\n</blockquote>\n<p>very likely it is.</p>",
        "id": 207804843,
        "sender_full_name": "nagisa",
        "timestamp": 1598240459
    },
    {
        "content": "<p>but instead of emitting an error, it's just silently a noop</p>",
        "id": 207804861,
        "sender_full_name": "eddyb",
        "timestamp": 1598240510
    },
    {
        "content": "<p>it might even be platform-dependent :(</p>",
        "id": 207804894,
        "sender_full_name": "eddyb",
        "timestamp": 1598240522
    },
    {
        "content": "<p>if anyone else wants to follow along, throw this into <code>src/librustc_driver/lib.rs</code> or <code>src/rustc/rustc.rs</code>, and watch it break nothing:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">MyAllocator</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">alloc</span>::<span class=\"n\">GlobalAlloc</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyAllocator</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">alloc</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">std</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Layout</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ptr</span>::<span class=\"n\">null_mut</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">dealloc</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">std</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Layout</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"cp\">#[global_allocator]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">ALLOC</span>: <span class=\"nc\">MyAllocator</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MyAllocator</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 207804928,
        "sender_full_name": "eddyb",
        "timestamp": 1598240636
    },
    {
        "content": "<p>ftr this is what happens even to an empty program that isn't cursed by dylibs <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=d07c14ed91d3d023edafd8e12f82bbee\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=d07c14ed91d3d023edafd8e12f82bbee</a></p>",
        "id": 207805181,
        "sender_full_name": "eddyb",
        "timestamp": 1598241081
    },
    {
        "content": "<p><code>memory allocation of 4 bytes failed</code> followed by a core-dumping abort</p>",
        "id": 207805228,
        "sender_full_name": "eddyb",
        "timestamp": 1598241142
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/207786305\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> wait what, <code>MmapSerializationSink</code> is just in-memory and writes it out to a file in the destructor?</p>\n</blockquote>\n<p>Wait, what?! The entire point of a memory mapped file is that you do all your work directly in the memory mapped buffer, not a separate buffer which you linearly read/write the entire thing from/to the file!</p>",
        "id": 207858607,
        "sender_full_name": "Peter Rabbit",
        "timestamp": 1598283346
    },
    {
        "content": "<p>I suspect it was like that originally, but then somebody refactored it to not be mmap</p>",
        "id": 207866686,
        "sender_full_name": "nagisa",
        "timestamp": 1598287799
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> it is <code>mmap</code> but it's anon</p>",
        "id": 207866803,
        "sender_full_name": "eddyb",
        "timestamp": 1598287847
    },
    {
        "content": "<p>It was like that from the initial implementation <a href=\"https://github.com/rust-lang/measureme/pull/12/files\">https://github.com/rust-lang/measureme/pull/12/files</a></p>",
        "id": 207886023,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1598297398
    },
    {
        "content": "<p>had to write this, so if anyone needs it: C-&gt;Rust/<code>GlobalAlloc</code> allocator wrapper (w/o <code>aligned_alloc</code> because I'm lazy and neither Rust nor LLVM seem to use it): <a href=\"https://gist.github.com/eddyb/df25e28313b37c8c9519bc503541f4b0\">https://gist.github.com/eddyb/df25e28313b37c8c9519bc503541f4b0</a></p>",
        "id": 209262556,
        "sender_full_name": "eddyb",
        "timestamp": 1599461476
    },
    {
        "content": "<p>hopefully <em>now</em> I can actually test what I was trying to use <code>#[global_allocator]</code> for</p>",
        "id": 209262577,
        "sender_full_name": "eddyb",
        "timestamp": 1599461505
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> glibc allocator non-determinism demo (the two runs will likely produce different instruction counts)</p>\n<p><code>rustup component add --toolchain nightly rustc-dev &amp;&amp; curl -sS https://gist.githubusercontent.com/eddyb/269491b0b59605f39f1d0a9dcf535c4a/raw/0c21da49b86ebd5273a1a31598fcd69c4ac7dcf8/rdpmc-bench.rs | rustc +nightly - -o rdpmc-bench -O &amp;&amp; setarch x86_64 -R ./rdpmc-bench &amp;&amp; sleep 1 &amp;&amp; setarch x86_64 -R ./rdpmc-bench</code></p>",
        "id": 209568207,
        "sender_full_name": "eddyb",
        "timestamp": 1599685303
    },
    {
        "content": "<p>maybe I should give up on this but it was bothering me that I couldn't reproduce the non-isolated rustc non-determinism</p>",
        "id": 209568330,
        "sender_full_name": "eddyb",
        "timestamp": 1599685360
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Counter::new: version=0 compat_version=0 index=0x4\nCpuModel::detect: vendor=&quot;AuthenticAMD&quot; family=23 model=113\nCpuModel::detect: known AMD CPU: Zen 2 (Matisse)\nCounter::new: version=0 compat_version=0 index=0x5\n\n# `rdpmc` benchmarks: `Box::new(0u8)` noise\n\n### `100000` iterations\n-2595320\n-2595305\n-2595305\n-2595467\n-2595269\n-2595305\n-2595467\n-2595305\n-2595304\n-2595467\n\ntotal=-25953514\n\nrdpmc-bench instructions:u=224066205 hw_interrupts.received:u=3\nCounter::new: version=0 compat_version=0 index=0x4\nCpuModel::detect: vendor=&quot;AuthenticAMD&quot; family=23 model=113\nCpuModel::detect: known AMD CPU: Zen 2 (Matisse)\nCounter::new: version=0 compat_version=0 index=0x5\n\n# `rdpmc` benchmarks: `Box::new(0u8)` noise\n\n### `100000` iterations\n-2595320\n-2595305\n-2595305\n-2595467\n-2595304\n-2595305\n-2595467\n-2595305\n-2595304\n-2595467\n\ntotal=-25953549\n\nrdpmc-bench instructions:u=224066171 hw_interrupts.received:u=4\n</code></pre></div>",
        "id": 209568450,
        "sender_full_name": "simulacrum",
        "timestamp": 1599685435
    },
    {
        "content": "<p>aha, got a run with same number of interrupts:</p>\n<div class=\"codehilite\"><pre><span></span><code>### `100000` iterations\n-2595320\n-2595305\n-2595305\n-2595467\n-2595304\n-2595305\n-2595467\n-2595305\n-2595304\n-2595467\n\ntotal=-25953549\n\nrdpmc-bench instructions:u=224066171 hw_interrupts.received:u=4\n\n-2595320\n-2595305\n-2595305\n-2595467\n-2595304\n-2595305\n-2595467\n-2595305\n-2595304\n-2595467\n\ntotal=-25953549\n\nrdpmc-bench instructions:u=224066171 hw_interrupts.received:u=4\n</code></pre></div>",
        "id": 209568563,
        "sender_full_name": "simulacrum",
        "timestamp": 1599685495
    },
    {
        "content": "<p>that one looks identical</p>",
        "id": 209568593,
        "sender_full_name": "simulacrum",
        "timestamp": 1599685511
    },
    {
        "content": "<p>I was able to get the same number of interrupts but different instructions</p>",
        "id": 209568621,
        "sender_full_name": "eddyb",
        "timestamp": 1599685529
    },
    {
        "content": "<p>hm, I'll try running it several times I guess</p>",
        "id": 209568792,
        "sender_full_name": "simulacrum",
        "timestamp": 1599685615
    },
    {
        "content": "<p><code>page-faults:u</code> is always the same if I use <code>setarch x86_64 -R perf stat -e page-faults:u ./rdpmc-bench</code> but maybe that doesn't include everything? also glibc could be doing something weird, maybe I should check what syscalls it uses</p>",
        "id": 209568824,
        "sender_full_name": "eddyb",
        "timestamp": 1599685636
    },
    {
        "content": "<p>so far I <em>always</em> get the same amount of instructions with interrupts being equal, across maybe 5 instances of that happening</p>",
        "id": 209568861,
        "sender_full_name": "simulacrum",
        "timestamp": 1599685664
    },
    {
        "content": "<p>total=-25953549 seems like the number, interestingly I can see that number both with 4 and 5 interrupts</p>",
        "id": 209569153,
        "sender_full_name": "simulacrum",
        "timestamp": 1599685824
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\"><pre><span></span><code>### `100000` iterations\n-2595320\n-2595305\n-2595305\n-2595467\n-2595304\n-2595305\n-2595467\n-2595305\n-2595304\n-2595467\n\ntotal=-25953549\n\nrdpmc-bench instructions:u=224066172 hw_interrupts.received:u=5\n</code></pre></div>",
        "id": 209569168,
        "sender_full_name": "simulacrum",
        "timestamp": 1599685835
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I don't <em>think</em> the interrupts are that important, at least given that everything else I've tried seems to be deterministic once accounting for interrupts (which is already handled in the <code>total</code>). I think I need to try and <code>strace</code> it now (especially with it pretty self-contained. I would not dare <code>strace</code> <code>rustc</code> itself, heh)</p>",
        "id": 209571908,
        "sender_full_name": "eddyb",
        "timestamp": 1599687386
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"gu\">@@ -95 +95 @@</span>\n<span class=\"gd\">-set_tid_address(0x7ffff7dce2d0)         = 19624</span>\n<span class=\"gi\">+set_tid_address(0x7ffff7dce2d0)         = 19630</span>\n<span class=\"gu\">@@ -114 +114 @@</span>\n<span class=\"gd\">-sched_getaffinity(19624, 32, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]) = 32</span>\n<span class=\"gi\">+sched_getaffinity(19630, 32, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]) = 32</span>\n<span class=\"gu\">@@ -126,2 +126,2 @@</span>\n<span class=\"gd\">-clone(child_stack=0x7ffff7dc8ef0, flags=CLONE_VM|CLONE_FS|CLONE_FILES|CLONE_SIGHAND|CLONE_THREAD|CLONE_SYSVSEM|CLONE_SETTLS|CLONE_PARENT_SETTID|CLONE_CHILD_CLEARTID, parent_tid=[19625], tls=0x7ffff7dc9700, child_tidptr=0x7ffff7dc99d0) = 19625</span>\n<span class=\"gd\">-futex(0x7ffff7dc99d0, FUTEX_WAIT, 19625, NULL) = 0</span>\n<span class=\"gi\">+clone(child_stack=0x7ffff7dc8ef0, flags=CLONE_VM|CLONE_FS|CLONE_FILES|CLONE_SIGHAND|CLONE_THREAD|CLONE_SYSVSEM|CLONE_SETTLS|CLONE_PARENT_SETTID|CLONE_CHILD_CLEARTID, parent_tid=[19631], tls=0x7ffff7dc9700, child_tidptr=0x7ffff7dc99d0) = 19631</span>\n<span class=\"gi\">+futex(0x7ffff7dc99d0, FUTEX_WAIT, 19631, NULL) = 0</span>\n<span class=\"gu\">@@ -415 +415 @@</span>\n<span class=\"gd\">-write(1, &quot;-495601\\n&quot;, 8)                = 8</span>\n<span class=\"gi\">+write(1, &quot;-495605\\n&quot;, 8)                = 8</span>\n<span class=\"gu\">@@ -417 +417 @@</span>\n<span class=\"gd\">-write(1, &quot;total=-4954938\\n&quot;, 15)        = 15</span>\n<span class=\"gi\">+write(1, &quot;total=-4954942\\n&quot;, 15)        = 15</span>\n<span class=\"gu\">@@ -421 +421 @@</span>\n<span class=\"gd\">-write(2, &quot;245066655&quot;, 9245066655)                = 9</span>\n<span class=\"gi\">+write(2, &quot;245066656&quot;, 9245066656)                = 9</span>\n<span class=\"gu\">@@ -423 +423 @@</span>\n<span class=\"gd\">-write(2, &quot;28&quot;, 228)                       = 2</span>\n<span class=\"gi\">+write(2, &quot;33&quot;, 233)                       = 2</span>\n</code></pre></div>",
        "id": 209573942,
        "sender_full_name": "eddyb",
        "timestamp": 1599688782
    },
    {
        "content": "<p>there's almost nothing! just the thread ID</p>",
        "id": 209574006,
        "sender_full_name": "eddyb",
        "timestamp": 1599688806
    },
    {
        "content": "<p>not liking this, I'm worried it's effectively a thread ID-keyed hashmap <a href=\"https://github.com/bminor/glibc/blob/e74b61c09a2a2ab52153e731225ccba5078659b1/malloc/malloc.c#L302-L313\">https://github.com/bminor/glibc/blob/e74b61c09a2a2ab52153e731225ccba5078659b1/malloc/malloc.c#L302-L313</a></p>",
        "id": 209575519,
        "sender_full_name": "eddyb",
        "timestamp": 1599689895
    },
    {
        "content": "<p>this seems potentially useful <a href=\"https://people.cs.umass.edu/~emery/pubs/dthreads-sosp11.pdf\">https://people.cs.umass.edu/~emery/pubs/dthreads-sosp11.pdf</a></p>",
        "id": 209575725,
        "sender_full_name": "eddyb",
        "timestamp": 1599690054
    },
    {
        "content": "<p>wait I might be misreading <code>tidx</code> as (tid)x when it's probably t(idx)</p>",
        "id": 209575818,
        "sender_full_name": "eddyb",
        "timestamp": 1599690123
    },
    {
        "content": "<p>I wonder if there's an easy way to \"just\" dump a full instruction trace. like <code>ptrace</code> single-step the entire program and log the instruction pointer or something</p>",
        "id": 209576925,
        "sender_full_name": "eddyb",
        "timestamp": 1599690882
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> You could also run the program in a container where it always gets the same PID.</p>",
        "id": 209577161,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599691071
    },
    {
        "content": "<p>ahhh right I was trying to not forget about looking for some way to do that, but forgot anyway. thanks!</p>",
        "id": 209677611,
        "sender_full_name": "eddyb",
        "timestamp": 1599757365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> however, I'm starting to doubt <code>glibc</code> is at fault at all here. I can reproduce some non-determinism with just a custom bump allocator (copied from the <code>bump_alloc</code> crate) called through <code>Box::new</code>:</p>\n<p><code>rustup component add --toolchain nightly rustc-dev &amp;&amp; curl -sS https://gist.githubusercontent.com/eddyb/269491b0b59605f39f1d0a9dcf535c4a/raw/32cb521017fa593dfe6e6d69cb12d8012c761061/rdpmc-bench.rs | rustc +nightly - -o rdpmc-bench -O &amp;&amp; setarch x86_64 -R ./rdpmc-bench &amp;&amp; sleep 1 &amp;&amp; setarch x86_64 -R ./rdpmc-bench</code></p>",
        "id": 209677813,
        "sender_full_name": "eddyb",
        "timestamp": 1599757449
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/209577161\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> You could also run the program in a container where it always gets the same PID.</p>\n</blockquote>\n<p>maybe even <em>just</em> a new pid namespace, without an entire container</p>",
        "id": 209677950,
        "sender_full_name": "cuviper",
        "timestamp": 1599757499
    },
    {
        "content": "<p><code>systemd-nspawn</code> is what I was going to check if it creates deterministic PIDs</p>",
        "id": 209678244,
        "sender_full_name": "eddyb",
        "timestamp": 1599757600
    },
    {
        "content": "<p>but I'm not sure it matters now. with <code>bump_alloc</code>, I can even turn off the glibc multithreading and still get nondeterminism:</p>\n<p><code>rustup component add --toolchain nightly rustc-dev &amp;&amp; curl -sS https://gist.githubusercontent.com/eddyb/269491b0b59605f39f1d0a9dcf535c4a/raw/a4318c8538707ca160902b770911e46591ea3c2d/rdpmc-bench.rs | rustc +nightly - -o rdpmc-bench -O &amp;&amp; setarch x86_64 -R ./rdpmc-bench &amp;&amp; sleep 1 &amp;&amp; setarch x86_64 -R ./rdpmc-bench</code></p>",
        "id": 209678731,
        "sender_full_name": "eddyb",
        "timestamp": 1599757815
    },
    {
        "content": "<p>(though I really just forgot initially that I had the dummy thread there from last time)</p>",
        "id": 209678769,
        "sender_full_name": "eddyb",
        "timestamp": 1599757834
    },
    {
        "content": "<p>maybe just <code>unshare -fp</code> is enough</p>",
        "id": 209678815,
        "sender_full_name": "cuviper",
        "timestamp": 1599757857
    },
    {
        "content": "<p>interestingly, the \"touch a byte at the start of every page\" inline assembly loop <em>was</em> deterministic, so I must be missing something simple</p>",
        "id": 209678984,
        "sender_full_name": "eddyb",
        "timestamp": 1599757943
    },
    {
        "content": "<p>I'd still try deterministic PIDs to rule out that source of nondeterminism if you can.</p>",
        "id": 209681431,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599759216
    },
    {
        "content": "<p>And yeah, <code>unshare -fp</code> ought to be enough.</p>",
        "id": 209681538,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599759253
    },
    {
        "content": "<p>yeah I need to try it on a whole <code>rustc</code>, but I'm still trying to figure out what this effect is. I must've had some flaw in my \"touch a byte at the start of every page\" artificial benchmark, because this allocator is getting really close to what that was</p>",
        "id": 209684145,
        "sender_full_name": "eddyb",
        "timestamp": 1599760472
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> looks like it's atomics? and since allocators love to use atomics, that's how they factor in?<br>\nthis one is just <code>fetch_add(1)</code> in a loop:</p>\n<p><code>rustup component add --toolchain nightly rustc-dev &amp;&amp; curl -sS https://gist.githubusercontent.com/eddyb/269491b0b59605f39f1d0a9dcf535c4a/raw/36f2960561fe0871c85f7ddf8c2ff560b6f73774/rdpmc-bench.rs | rustc +nightly - -o rdpmc-bench -O &amp;&amp; setarch x86_64 -R ./rdpmc-bench &amp;&amp; sleep 1 &amp;&amp; setarch x86_64 -R ./rdpmc-bench</code></p>",
        "id": 209699161,
        "sender_full_name": "eddyb",
        "timestamp": 1599766982
    },
    {
        "content": "<p>Oh, I guess maybe they're lowering to loops rather than single instructions?</p>",
        "id": 209699238,
        "sender_full_name": "simulacrum",
        "timestamp": 1599767013
    },
    {
        "content": "<p>I thought that was an ARM thing, not an x86 thing, but I could believe it -- if it's not a fetch_add and a CAS instead, in particular</p>",
        "id": 209699300,
        "sender_full_name": "simulacrum",
        "timestamp": 1599767038
    },
    {
        "content": "<p>I doubt that's it. also this is on the stack, there's 0 contention, even a loop would be deterministic :|</p>",
        "id": 209699383,
        "sender_full_name": "eddyb",
        "timestamp": 1599767060
    },
    {
        "content": "<p>hm, compare_exchange_weak is technically allowed to fail spuriously</p>",
        "id": 209699424,
        "sender_full_name": "simulacrum",
        "timestamp": 1599767089
    },
    {
        "content": "<p>but I think no one does that? At least I don't think I was able to trigger that ever on zen but that was zen 1</p>",
        "id": 209699485,
        "sender_full_name": "simulacrum",
        "timestamp": 1599767118
    },
    {
        "content": "<p>it's <code>lock xadd</code> <a href=\"https://godbolt.org/z/7hKnvo\">https://godbolt.org/z/7hKnvo</a></p>",
        "id": 209699557,
        "sender_full_name": "eddyb",
        "timestamp": 1599767160
    },
    {
        "content": "<p>I don't see how that can cause instruction-count differences</p>",
        "id": 209699656,
        "sender_full_name": "simulacrum",
        "timestamp": 1599767192
    },
    {
        "content": "<p>can you check my most recent testcase on Zen 2? and if it doesn't repro at first, run <code>setarch x86_64 -R ./rdpmc-bench</code> a few times</p>",
        "id": 209699807,
        "sender_full_name": "eddyb",
        "timestamp": 1599767267
    },
    {
        "content": "<p>though ASLR shouldn't matter</p>",
        "id": 209699817,
        "sender_full_name": "eddyb",
        "timestamp": 1599767272
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> haha, <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> repro'd the overcounting I'm seeing (on Zen 1), on pre-Zen AMD</p>",
        "id": 209700166,
        "sender_full_name": "eddyb",
        "timestamp": 1599767420
    },
    {
        "content": "<p>whereas Intel seems to only undercount (though I think that's hyperthreading bugs)</p>",
        "id": 209700219,
        "sender_full_name": "eddyb",
        "timestamp": 1599767448
    },
    {
        "content": "<p>what am I looking for on zen 2?</p>",
        "id": 209700318,
        "sender_full_name": "simulacrum",
        "timestamp": 1599767490
    },
    {
        "content": "<p>any values other than 0</p>",
        "id": 209700335,
        "sender_full_name": "eddyb",
        "timestamp": 1599767501
    },
    {
        "content": "<p>aha, I am seeing lots of -2 and one -1 across 4 runs so far</p>",
        "id": 209700350,
        "sender_full_name": "simulacrum",
        "timestamp": 1599767513
    },
    {
        "content": "<p>ughh that's not great</p>",
        "id": 209700364,
        "sender_full_name": "eddyb",
        "timestamp": 1599767520
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code># `rdpmc` benchmarks: `fetch_add(1)` noise\n\n### `100000000` iterations\n-2\n-2\n-2\n-2\n-2\n-2\n-2\n-2\n-2\n-2\n\ntotal=-20\n\nrdpmc-bench instructions:u=5000019999 hw_interrupts.received:u=1000\nCounter::new: version=0 compat_version=0 index=0x4\nCpuModel::detect: vendor=&quot;AuthenticAMD&quot; family=23 model=113\nCpuModel::detect: known AMD CPU: Zen 2 (Matisse)\nCounter::new: version=0 compat_version=0 index=0x5\n\n# `rdpmc` benchmarks: `fetch_add(1)` noise\n\n### `100000000` iterations\n-2\n-2\n-2\n-1\n-2\n-2\n-2\n-2\n-2\n-2\n\ntotal=-19\n\nrdpmc-bench instructions:u=5000019999 hw_interrupts.received:u=999\n</code></pre></div>",
        "id": 209700421,
        "sender_full_name": "simulacrum",
        "timestamp": 1599767537
    },
    {
        "content": "<p>(no idea why we're seeing 1000s of interrupts now)</p>",
        "id": 209700482,
        "sender_full_name": "simulacrum",
        "timestamp": 1599767565
    },
    {
        "content": "<p>well, maybe that's a compiler difference? hmm</p>",
        "id": 209700515,
        "sender_full_name": "eddyb",
        "timestamp": 1599767577
    },
    {
        "content": "<p>actually, wait, did we ever confirm we still have to subtract interrupts from instructions on Zen 2?</p>",
        "id": 209700575,
        "sender_full_name": "eddyb",
        "timestamp": 1599767614
    },
    {
        "content": "<p>not sure. that file has RawVec allocations in it?</p>",
        "id": 209700598,
        "sender_full_name": "simulacrum",
        "timestamp": 1599767628
    },
    {
        "content": "<p>maybe that's before the collection starts, anyway</p>",
        "id": 209700668,
        "sender_full_name": "simulacrum",
        "timestamp": 1599767650
    },
    {
        "content": "<p>maybe Zen 2 is fine but I don't have Zen 2 to develop on :(</p>",
        "id": 209700732,
        "sender_full_name": "eddyb",
        "timestamp": 1599767685
    },
    {
        "content": "<p>I can get you ssh onto the perf collector, but that's not a good place to do sporadic development</p>",
        "id": 209700780,
        "sender_full_name": "simulacrum",
        "timestamp": 1599767710
    },
    {
        "content": "<p>something weird I just noticed is that all of my non-deterministic overcounting comes in multiples of 5 o_O</p>",
        "id": 209700802,
        "sender_full_name": "eddyb",
        "timestamp": 1599767723
    },
    {
        "content": "<p>which is also the number of instructions per iteration</p>",
        "id": 209700835,
        "sender_full_name": "eddyb",
        "timestamp": 1599767737
    },
    {
        "content": "<p>(though not the older AMD <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> got to overcount)</p>",
        "id": 209701247,
        "sender_full_name": "eddyb",
        "timestamp": 1599767887
    },
    {
        "content": "<p>so the errata says exiting C6 causes inaccuracies. can atomics interact with C6?</p>",
        "id": 209701748,
        "sender_full_name": "eddyb",
        "timestamp": 1599768128
    },
    {
        "content": "<p><del>okay <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span>  has confirmed it's not atomics, but maybe something else in my loop. I need to play around with it a bit more I guess.</del> though I should also make sure I'm taking into account mine is Zen 1</p>",
        "id": 209703075,
        "sender_full_name": "eddyb",
        "timestamp": 1599768799
    },
    {
        "content": "<p>ah yeah I can't repro with a non-atomic <code>add</code> or <code>xadd</code>, on Zen 1</p>",
        "id": 209704128,
        "sender_full_name": "eddyb",
        "timestamp": 1599769371
    },
    {
        "content": "<p><del>@<strong>simulacrum</strong> in the process of trying to use inline assembly I stumbled over manual <code>lock xadd</code> being <em>incredibly</em> slow for some reason. this is that testcase if you're curious:</del></p>\n<p><del><code>rustup component add --toolchain nightly rustc-dev &amp;&amp; curl -sS https://gist.githubusercontent.com/eddyb/269491b0b59605f39f1d0a9dcf535c4a/raw/72e2ffca8869e52a866dcb6c4f6352c11976d8c2/rdpmc-bench.rs | rustc +nightly - -o rdpmc-bench -O &amp;&amp; setarch x86_64 -R ./rdpmc-bench &amp;&amp; sleep 1 &amp;&amp; setarch x86_64 -R ./rdpmc-bench</code></del></p>",
        "id": 209706091,
        "sender_full_name": "eddyb",
        "timestamp": 1599770436
    },
    {
        "content": "<p><del>it takes like a minute to print the first <code>0</code>, on Zen 1. works fine on my Ivy Bridge laptop though</del></p>",
        "id": 209706128,
        "sender_full_name": "eddyb",
        "timestamp": 1599770463
    },
    {
        "content": "<p>hm, pretty much instant here</p>",
        "id": 209706143,
        "sender_full_name": "simulacrum",
        "timestamp": 1599770473
    },
    {
        "content": "<p>or at least not appreciably different from the other scripts</p>",
        "id": 209706158,
        "sender_full_name": "simulacrum",
        "timestamp": 1599770481
    },
    {
        "content": "<p>-1s mostly, one 0 here with that</p>",
        "id": 209706169,
        "sender_full_name": "simulacrum",
        "timestamp": 1599770490
    },
    {
        "content": "<p>ftr <code>mov {tmp}, 1; lock xadd qword ptr [{atomic}], {tmp}</code> is what's in the inline assembly</p>",
        "id": 209706260,
        "sender_full_name": "eddyb",
        "timestamp": 1599770526
    },
    {
        "content": "<p>PEBKAC, I wrote <code>0</code> and didn't specify it as <code>usize</code> so I'm trashing the stack...</p>",
        "id": 209706547,
        "sender_full_name": "eddyb",
        "timestamp": 1599770684
    },
    {
        "content": "<p>so: 1. <code>lock xadd</code> overcounts for me, <code>xadd</code> doesn't, and 2. now it's in multiples of 4, but also each loop iteration is 4 instructions, so that's probably connected. will try adding some <code>nop</code>s</p>",
        "id": 209707531,
        "sender_full_name": "eddyb",
        "timestamp": 1599771174
    },
    {
        "content": "<p>I added 3 nops and now it's overcounting in multiples of 7 :P</p>",
        "id": 209707974,
        "sender_full_name": "eddyb",
        "timestamp": 1599771401
    },
    {
        "content": "<p>and now I was able to make it do multiples of 19 (I'm using primes to make the results as distinct as possible)</p>",
        "id": 209708524,
        "sender_full_name": "eddyb",
        "timestamp": 1599771663
    },
    {
        "content": "<p>how can this even happen? it's treating the entire BB as a transaction?</p>",
        "id": 209708627,
        "sender_full_name": "eddyb",
        "timestamp": 1599771712
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> had this idea:</p>\n<blockquote>\n<p>is it speculatively executing until the next <code>lock</code> which then conflicts with the existing <code>lock</code> and throws the whole thing out?</p>\n</blockquote>\n<p>and... my testing seems to confirm it? if I have multiple <code>lock xadd</code>s, the distance between them (including going across the loop backedge) is what is being overcounted</p>",
        "id": 209710226,
        "sender_full_name": "eddyb",
        "timestamp": 1599772503
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> <span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> excuse me?? <a href=\"https://patents.google.com/patent/US20180074977A1/en\">https://patents.google.com/patent/US20180074977A1/en</a></p>",
        "id": 209712244,
        "sender_full_name": "eddyb",
        "timestamp": 1599773516
    },
    {
        "content": "<blockquote>\n<p>In the event that the processor detects a violation of the atomic or fencing properties of the lock instruction prior to committing the value of the lock instruction, the processor rolls back state and executes the lock instruction in a slow mode in which younger instructions are not allowed to retire until the stored value of the lock instruction is committed</p>\n</blockquote>",
        "id": 209712334,
        "sender_full_name": "eddyb",
        "timestamp": 1599773551
    },
    {
        "content": "<p>I don't know if AMD processors actually <em>do</em> that, but that certainly sounds like a thing processors <em>could</em> coordinate to do.</p>",
        "id": 209712415,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599773597
    },
    {
        "content": "<p>I mean, I have no other explanation for the overcounting in <em>exact multiples</em> of whatever number of instructions I put between consecutive <code>lock</code>s</p>",
        "id": 209712488,
        "sender_full_name": "eddyb",
        "timestamp": 1599773638
    },
    {
        "content": "<p>Sure sounds plausible.</p>",
        "id": 209712548,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599773654
    },
    {
        "content": "<p>You could do a speculation-defeating pattern after the locking instruction.</p>",
        "id": 209712589,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599773684
    },
    {
        "content": "<p>retpoline or similar.</p>",
        "id": 209712608,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599773695
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> so I think this is my best testcase so far, thanks to the primes involved:</p>\n<p><code>rustup component add --toolchain nightly rustc-dev &amp;&amp; curl -sS https://gist.githubusercontent.com/eddyb/269491b0b59605f39f1d0a9dcf535c4a/raw/f99379ef009ea955347a2352aa6fb0f7f98bd8e8/rdpmc-bench.rs | rustc +nightly - -o rdpmc-bench -O &amp;&amp; setarch x86_64 -R ./rdpmc-bench &amp;&amp; sleep 1 &amp;&amp; setarch x86_64 -R ./rdpmc-bench</code></p>",
        "id": 209712773,
        "sender_full_name": "eddyb",
        "timestamp": 1599773789
    },
    {
        "content": "<p>mostly -1s, couple zeros snuck in</p>",
        "id": 209712841,
        "sender_full_name": "simulacrum",
        "timestamp": 1599773828
    },
    {
        "content": "<p>so what I'm seeing is values that are 13x+17y (e.g. I got 13, 17, 26, 30, 56)</p>",
        "id": 209712901,
        "sender_full_name": "eddyb",
        "timestamp": 1599773869
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I forget, did you have access to Zen 1 at all?</p>",
        "id": 209713063,
        "sender_full_name": "eddyb",
        "timestamp": 1599773953
    },
    {
        "content": "<p>or was it someone else</p>",
        "id": 209713081,
        "sender_full_name": "eddyb",
        "timestamp": 1599773962
    },
    {
        "content": "<p>I don't readily, but if absolutely necessary can get it</p>",
        "id": 209713097,
        "sender_full_name": "simulacrum",
        "timestamp": 1599773972
    },
    {
        "content": "<p>(it's not a computer I have ssh into, so I need to ask someone else to run things)</p>",
        "id": 209713113,
        "sender_full_name": "simulacrum",
        "timestamp": 1599773987
    },
    {
        "content": "<p>we need to get <a href=\"http://build.lyken.rs\">build.lyken.rs</a> onto Zen 2, but the sysadmin has been p busy</p>",
        "id": 209713190,
        "sender_full_name": "eddyb",
        "timestamp": 1599774017
    },
    {
        "content": "<p>well, give it ~3-4 months and Zen 3 will be along</p>",
        "id": 209713230,
        "sender_full_name": "simulacrum",
        "timestamp": 1599774045
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> someone on Zen 2 confirmed 13x+17y (e.g. <a href=\"https://puck.moe/up/bulig-valod.txt\">https://puck.moe/up/bulig-valod.txt</a>)</p>",
        "id": 209714110,
        "sender_full_name": "eddyb",
        "timestamp": 1599774643
    },
    {
        "content": "<p>hm well my Zen 2 never went above 0</p>",
        "id": 209714150,
        "sender_full_name": "simulacrum",
        "timestamp": 1599774669
    },
    {
        "content": "<p>but maybe I didn't run it enough</p>",
        "id": 209714152,
        "sender_full_name": "simulacrum",
        "timestamp": 1599774673
    },
    {
        "content": "<p>you have to add 1 because of the compiler version thing or w/e, but you can see the 13 (shown as 12)</p>",
        "id": 209714165,
        "sender_full_name": "eddyb",
        "timestamp": 1599774678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I'm actually wondering if you did anything to it :P</p>",
        "id": 209714179,
        "sender_full_name": "eddyb",
        "timestamp": 1599774687
    },
    {
        "content": "<p>that might've fixed this</p>",
        "id": 209714185,
        "sender_full_name": "eddyb",
        "timestamp": 1599774691
    },
    {
        "content": "<p>hm nmi watchdog is on, though perf event paranoid is at -1</p>",
        "id": 209714271,
        "sender_full_name": "simulacrum",
        "timestamp": 1599774735
    },
    {
        "content": "<p>but I don't think so</p>",
        "id": 209714279,
        "sender_full_name": "simulacrum",
        "timestamp": 1599774738
    },
    {
        "content": "<p>I have a 3950x so it's plausible you need the kernel to basically not be on your CPU core? and many cores helps with that?</p>",
        "id": 209714307,
        "sender_full_name": "simulacrum",
        "timestamp": 1599774759
    },
    {
        "content": "<p>do you have that C6 thing?</p>",
        "id": 209714316,
        "sender_full_name": "eddyb",
        "timestamp": 1599774762
    },
    {
        "content": "<p>hm, I'm sure the processor does</p>",
        "id": 209714341,
        "sender_full_name": "simulacrum",
        "timestamp": 1599774780
    },
    {
        "content": "<p>sorry, I mean, the workaround you linked a few weeks ago</p>",
        "id": 209714362,
        "sender_full_name": "eddyb",
        "timestamp": 1599774792
    },
    {
        "content": "<p>no, c6 is enabled</p>",
        "id": 209714396,
        "sender_full_name": "simulacrum",
        "timestamp": 1599774812
    },
    {
        "content": "<p>did you try only on one machine?</p>",
        "id": 209714414,
        "sender_full_name": "eddyb",
        "timestamp": 1599774822
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>P0 - Enabled - FID = 8C - DID = 8 - VID = 48 - Ratio = 35.00 - vCore = 1.10000\nP1 - Enabled - FID = 8C - DID = A - VID = 58 - Ratio = 28.00 - vCore = 1.00000\nP2 - Enabled - FID = 84 - DID = C - VID = 68 - Ratio = 22.00 - vCore = 0.90000\nP3 - Disabled\nP4 - Disabled\nP5 - Disabled\nP6 - Disabled\nP7 - Disabled\nC6 State - Package - Enabled\nC6 State - Core - Enabled\n</code></pre></div>",
        "id": 209714418,
        "sender_full_name": "simulacrum",
        "timestamp": 1599774826
    },
    {
        "content": "<p>I only have one zen 2</p>",
        "id": 209714486,
        "sender_full_name": "simulacrum",
        "timestamp": 1599774857
    },
    {
        "content": "<p>oh, I guess I could do the perf collector</p>",
        "id": 209714495,
        "sender_full_name": "simulacrum",
        "timestamp": 1599774865
    },
    {
        "content": "<p>perf collector is normally 0, and hit one 17</p>",
        "id": 209714568,
        "sender_full_name": "simulacrum",
        "timestamp": 1599774922
    },
    {
        "content": "<p>yes :D. well, it sucks, but at least I'm not crazy</p>",
        "id": 209714593,
        "sender_full_name": "eddyb",
        "timestamp": 1599774938
    },
    {
        "content": "<p>hm now I wonder, perf collector is currently at llvm 10</p>",
        "id": 209714619,
        "sender_full_name": "simulacrum",
        "timestamp": 1599774957
    },
    {
        "content": "<p>okay so llvm 11 gives me -1 and a 25 on perf collector</p>",
        "id": 209714753,
        "sender_full_name": "simulacrum",
        "timestamp": 1599775019
    },
    {
        "content": "<p>that's a 2*13-1</p>",
        "id": 209714768,
        "sender_full_name": "eddyb",
        "timestamp": 1599775029
    },
    {
        "content": "<p>the -1 must be llvm 11 emitting one less instruction in the setup code, nice :P</p>",
        "id": 209714803,
        "sender_full_name": "eddyb",
        "timestamp": 1599775054
    },
    {
        "content": "<p>I have 2700X in my desktop, it's Zen+. So I can help if you need something from it.</p>",
        "id": 209716445,
        "sender_full_name": "mati865",
        "timestamp": 1599776063
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/209712773\">said</a>:</p>\n<blockquote>\n<p><code>rustup component add --toolchain nightly rustc-dev &amp;&amp; curl -sS https://gist.githubusercontent.com/eddyb/269491b0b59605f39f1d0a9dcf535c4a/raw/f99379ef009ea955347a2352aa6fb0f7f98bd8e8/rdpmc-bench.rs | rustc +nightly - -o rdpmc-bench -O &amp;&amp; setarch x86_64 -R ./rdpmc-bench &amp;&amp; sleep 1 &amp;&amp; setarch x86_64 -R ./rdpmc-bench</code></p>\n</blockquote>\n<p>if anyone wants to try it out, this is the thing to run ^^ (what to look for: the individual lines with just a number on them. ideally they're all <code>0</code>, or if you're on LLVM 11, <code>-1</code>. on top of that, deviations of the form 13x+17y is what we're looking for)</p>",
        "id": 209716619,
        "sender_full_name": "eddyb",
        "timestamp": 1599776179
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119581\">@mati865</span> ^^</p>",
        "id": 209716796,
        "sender_full_name": "eddyb",
        "timestamp": 1599776306
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <a href=\"https://gist.github.com/mati865/22336da383dd6738f7ce32a3a4cb2eff\">https://gist.github.com/mati865/22336da383dd6738f7ce32a3a4cb2eff</a></p>",
        "id": 209717499,
        "sender_full_name": "mati865",
        "timestamp": 1599776871
    },
    {
        "content": "<p>yupp, that reproduced. and you're on LLVM 11 :D</p>",
        "id": 209717577,
        "sender_full_name": "eddyb",
        "timestamp": 1599776916
    },
    {
        "content": "<blockquote>\n<p><code>CpuModel::detect: known AMD CPU: Zen+ (Pinnacle Ridge)</code></p>\n</blockquote>\n<p>still really happy with my unnecessarily precise CPU detection logic :P</p>",
        "id": 209717634,
        "sender_full_name": "eddyb",
        "timestamp": 1599776967
    },
    {
        "content": "<p>Well, it's nightly ;)</p>",
        "id": 209717654,
        "sender_full_name": "mati865",
        "timestamp": 1599776978
    },
    {
        "content": "<p>telling on myself by having older nightly on both my laptop and the server,</p>",
        "id": 209717674,
        "sender_full_name": "eddyb",
        "timestamp": 1599776999
    },
    {
        "content": "<p>IMO that logic makes sense.</p>",
        "id": 209717799,
        "sender_full_name": "mati865",
        "timestamp": 1599777077
    },
    {
        "content": "<p>I could access desktop with 1600 (truly Zen 1) tomorrow if you want.</p>",
        "id": 209717845,
        "sender_full_name": "mati865",
        "timestamp": 1599777117
    },
    {
        "content": "<p>only if it's not a hassle. so far I think we've confirmed it across all existing Zen, with the exception of some Zen 2 machines seemingly not being affected (i.e. simulacrum's)</p>",
        "id": 209718009,
        "sender_full_name": "eddyb",
        "timestamp": 1599777237
    },
    {
        "content": "<p>the trickier problem is figuring what, if anything, we can do about it. there's enough atomics in close proximity in <em>at least</em> global allocators, to cause measurable noise</p>",
        "id": 209718110,
        "sender_full_name": "eddyb",
        "timestamp": 1599777308
    },
    {
        "content": "<p>it's not relatively significant at the scale of the whole process, but it can cause differences of hundreds of instructions between different runs, in parts of the compiler which do a lot of allocations</p>",
        "id": 209718348,
        "sender_full_name": "eddyb",
        "timestamp": 1599777514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> theory: this kind of <code>lock</code> speculation is a potential side-channel. potential consequence: maybe there's a microcode update and/or some MSR bit that turns it off</p>",
        "id": 209721276,
        "sender_full_name": "eddyb",
        "timestamp": 1599779875
    },
    {
        "content": "<p>seems not impossible</p>",
        "id": 209721327,
        "sender_full_name": "simulacrum",
        "timestamp": 1599779889
    },
    {
        "content": "<p>what are the kernel versions on the two Zen 2 machines?</p>",
        "id": 209721336,
        "sender_full_name": "eddyb",
        "timestamp": 1599779899
    },
    {
        "content": "<p>the one that doesn't exhibit the behavior has 5.4.0-42-generic and the one that does is 4.15.0-70-generic</p>",
        "id": 209721376,
        "sender_full_name": "simulacrum",
        "timestamp": 1599779930
    },
    {
        "content": "<p>hmpf. I repro'd on Zen 1 on 5.4.12. but maybe this is Zen 1 vs Zen 2</p>",
        "id": 209721435,
        "sender_full_name": "eddyb",
        "timestamp": 1599779995
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> ahh the other Zen 2 repro was 5.6.15. so probably it's not (just) the kernel version</p>",
        "id": 209721540,
        "sender_full_name": "eddyb",
        "timestamp": 1599780060
    },
    {
        "content": "<p>I ran it on Zen 2 and also get lots of different non -1 values: <a href=\"https://gist.github.com/jix/36ee39cc54c734c90f46ba8e4e8f80c1\">https://gist.github.com/jix/36ee39cc54c734c90f46ba8e4e8f80c1</a></p>",
        "id": 209748029,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599808753
    },
    {
        "content": "<p>thanks!</p>",
        "id": 209749695,
        "sender_full_name": "eddyb",
        "timestamp": 1599810073
    },
    {
        "content": "<p>so last night I tried to make an even smaller benchmark, based on a suggestion that a child thread could interfere, but didn't get anywhere. I guess I can try adding it to the existing setup I have</p>",
        "id": 209749813,
        "sender_full_name": "eddyb",
        "timestamp": 1599810210
    },
    {
        "content": "<p>that's interesting, in <code>rdpmc-bench.rs</code>, an interfering thread noticeably slows down the execution on my laptop, which results in a lot more undercounting, but I think that's consistent with the undercounting being proportional to execution time (since it's likely the hyperthreading issue)</p>",
        "id": 209750200,
        "sender_full_name": "eddyb",
        "timestamp": 1599810600
    },
    {
        "content": "<p>and on Zen 1, I can see the additional overcounting from having that other thread interfere, even if it's only e.g. a million instructions out of 3 billion</p>",
        "id": 209750461,
        "sender_full_name": "eddyb",
        "timestamp": 1599810818
    },
    {
        "content": "<p>aha! I can make it much worse with nops:</p>\n<p><code>rustup component add --toolchain nightly rustc-dev &amp;&amp; curl -sS https://gist.githubusercontent.com/eddyb/269491b0b59605f39f1d0a9dcf535c4a/raw/799934eb7e5af03cc0197672945bed51bf76a8d0/rdpmc-bench.rs | rustc +nightly - -o rdpmc-bench -O &amp;&amp; setarch x86_64 -R ./rdpmc-bench &amp;&amp; sleep 1 &amp;&amp; setarch x86_64 -R ./rdpmc-bench</code></p>",
        "id": 209750949,
        "sender_full_name": "eddyb",
        "timestamp": 1599811208
    },
    {
        "content": "<p>(I think I made the overcounting ~100x worse just by giving it more instructions to speculate <em>quickly</em>)</p>",
        "id": 209751266,
        "sender_full_name": "eddyb",
        "timestamp": 1599811460
    },
    {
        "content": "<p>yeah <a href=\"https://gist.github.com/jix/6da90c02b76e06d7ed31a288f544fbac\">https://gist.github.com/jix/6da90c02b76e06d7ed31a288f544fbac</a></p>",
        "id": 209751599,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599811728
    },
    {
        "content": "<p>haha that looks about right</p>",
        "id": 209751617,
        "sender_full_name": "eddyb",
        "timestamp": 1599811743
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> so if you have a Zen machine where that last testcase doesn't go <em>at least</em> into the millions, we need to figure out what makes it special. maybe it's a distro default? like I suspect hardening for spectre/meltdown/etc. might've disabled this too</p>",
        "id": 209751708,
        "sender_full_name": "eddyb",
        "timestamp": 1599811805
    },
    {
        "content": "<p>btw, feel free to ping me if you need anything tested on zen 2 (although mine doesn't seem to be that special)</p>",
        "id": 209754087,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599813594
    },
    {
        "content": "<p>also do you think it'd be useful to test with \"mitigations=off\" (should disable all those hardening stuff)? I need to reboot anyway soonish and could try that</p>",
        "id": 209754498,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599813934
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> this is (literally) patented speculation, I don't think <em>disabling</em> mitigations would improve things, but feel free to try</p>",
        "id": 209755225,
        "sender_full_name": "eddyb",
        "timestamp": 1599814420
    },
    {
        "content": "<p>ideally we could just enable mitigations and have it become deterministic</p>",
        "id": 209755291,
        "sender_full_name": "eddyb",
        "timestamp": 1599814448
    },
    {
        "content": "<p>ah I was referring to \"we need to figure out what makes it special. maybe it's a distro default? like I suspect hardening for spectre/meltdown/etc.\"</p>",
        "id": 209755292,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599814448
    },
    {
        "content": "<p>oh but it would affect it the other way around?</p>",
        "id": 209755322,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599814475
    },
    {
        "content": "<p>right, I guess that's what <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> could try, if rebooting is an option (on the machine we couldn't repro)</p>",
        "id": 209755330,
        "sender_full_name": "eddyb",
        "timestamp": 1599814477
    },
    {
        "content": "<p>whereas for you, if anything it should make it worse :P</p>",
        "id": 209755340,
        "sender_full_name": "eddyb",
        "timestamp": 1599814490
    },
    {
        "content": "<p>well I guess given that I have a quite recent kernel with all mitigations on and AFAIK also the latest microcode updates there is no point in disabling anything of that...</p>",
        "id": 209755486,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599814587
    },
    {
        "content": "<p>okay this is 50 instructions, most of the time speculation goes through all of them (and I've made it easier to tell when it's multiples of the distance i.e. 50 here):</p>\n<p><code>rustup component add --toolchain nightly rustc-dev &amp;&amp; curl -sS https://gist.githubusercontent.com/eddyb/269491b0b59605f39f1d0a9dcf535c4a/raw/72ca37ead3989686643f77a52ff4a49cfacecffd/rdpmc-bench.rs | rustc +nightly - -o rdpmc-bench -O &amp;&amp; setarch x86_64 -R ./rdpmc-bench &amp;&amp; sleep 1 &amp;&amp; setarch x86_64 -R ./rdpmc-bench</code></p>",
        "id": 209756249,
        "sender_full_name": "eddyb",
        "timestamp": 1599815107
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> oof, worried that means there's no way to turn it on. maybe <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> can finally repro with this active interference setup and there wasn't any unaffected Zen 2 to begin with :(</p>",
        "id": 209756313,
        "sender_full_name": "eddyb",
        "timestamp": 1599815159
    },
    {
        "content": "<p><a href=\"https://gist.github.com/jix/092f9358940d75a605414eb1317857a3\">https://gist.github.com/jix/092f9358940d75a605414eb1317857a3</a></p>",
        "id": 209756478,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599815258
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> if you run it a few more times, do you get any exacts? I think you might also be seeing undercounting if this isn't a dedicated server or w/e, so that's making my display less useful :(</p>",
        "id": 209756616,
        "sender_full_name": "eddyb",
        "timestamp": 1599815331
    },
    {
        "content": "<p>it is my desktop, so there are various light loads running in parallel</p>",
        "id": 209756659,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599815358
    },
    {
        "content": "<p>although you might also be on LLVM 11 which means there's that pesky <code>-1</code> getting in the way :(</p>",
        "id": 209756686,
        "sender_full_name": "eddyb",
        "timestamp": 1599815376
    },
    {
        "content": "<p>LLVM 11 version, I guess/hope:<br>\n<code>rustup component add --toolchain nightly rustc-dev &amp;&amp; curl -sS https://gist.githubusercontent.com/eddyb/269491b0b59605f39f1d0a9dcf535c4a/raw/8cf503a943f4defc1cd831e2ad04c8325dff50df/rdpmc-bench.rs | rustc +nightly - -o rdpmc-bench -O &amp;&amp; setarch x86_64 -R ./rdpmc-bench &amp;&amp; sleep 1 &amp;&amp; setarch x86_64 -R ./rdpmc-bench</code></p>",
        "id": 209756785,
        "sender_full_name": "eddyb",
        "timestamp": 1599815439
    },
    {
        "content": "<p>whether it hits a multiple of 50 seems to be random</p>",
        "id": 209756843,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599815505
    },
    {
        "content": "<p>(it's really just <code>s/25/24/</code>, for the setup cost)</p>",
        "id": 209756854,
        "sender_full_name": "eddyb",
        "timestamp": 1599815520
    },
    {
        "content": "<p>for me I can get entire runs that are all perfect multiples</p>",
        "id": 209756903,
        "sender_full_name": "eddyb",
        "timestamp": 1599815538
    },
    {
        "content": "<p>not happening here</p>",
        "id": 209756933,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599815567
    },
    {
        "content": "<p>or I guess 1 in 10 might get an extra lone instruction. but the overall pattern is pretty clear</p>",
        "id": 209756942,
        "sender_full_name": "eddyb",
        "timestamp": 1599815571
    },
    {
        "content": "<p>this is on a 24C/48T Zen 1 EPYC so I think each thread gets its own hardware thread</p>",
        "id": 209757009,
        "sender_full_name": "eddyb",
        "timestamp": 1599815620
    },
    {
        "content": "<p>you know, I should check something...</p>",
        "id": 209757015,
        "sender_full_name": "eddyb",
        "timestamp": 1599815627
    },
    {
        "content": "<p>wait, that's interesting... if I add taskset 2 (to pin it to a single thread) I get mostly 1 for your latest version</p>",
        "id": 209757139,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599815709
    },
    {
        "content": "<p>you may be accidentally starving the interference child thread</p>",
        "id": 209757163,
        "sender_full_name": "eddyb",
        "timestamp": 1599815730
    },
    {
        "content": "<p>ah, ok</p>",
        "id": 209757175,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599815740
    },
    {
        "content": "<p>in which case you get the same as if it weren't spawned at all :P</p>",
        "id": 209757178,
        "sender_full_name": "eddyb",
        "timestamp": 1599815742
    },
    {
        "content": "<p>yeah that makes sense</p>",
        "id": 209757188,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599815749
    },
    {
        "content": "<p>(which, yes, should be all 0 for the appropriate version, depending on whether you have LLVM 10 or 11)</p>",
        "id": 209757264,
        "sender_full_name": "eddyb",
        "timestamp": 1599815778
    },
    {
        "content": "<p>heh, I don't need to even touch the same location (so presumably the values don't matter at all), I just need to be in the same cache line (make the <code>static</code> aligned to 64 bytes then writing to +56 repros but +64 doesn't). maybe I can make it even worse just by constantly writing to it in the child thread, w/o any <code>lock xadd</code> there</p>",
        "id": 209757561,
        "sender_full_name": "eddyb",
        "timestamp": 1599815956
    },
    {
        "content": "<p>yeaaaah, this doesn't even use atomics in the child thread, nor touch the same bytes:<br>\n<code>rustup component add --toolchain nightly rustc-dev &amp;&amp; curl -sS https://gist.githubusercontent.com/eddyb/269491b0b59605f39f1d0a9dcf535c4a/raw/025ee76590ad4e24a7dce9754080fb7c2b30df85/rdpmc-bench.rs | rustc +nightly - -o rdpmc-bench -O &amp;&amp; setarch x86_64 -R ./rdpmc-bench &amp;&amp; sleep 1 &amp;&amp; setarch x86_64 -R ./rdpmc-bench</code></p>",
        "id": 209758170,
        "sender_full_name": "eddyb",
        "timestamp": 1599816363
    },
    {
        "content": "<p>and the value can remain <code>0</code> at all times, it's irrelevant, only the cache line ownership is</p>",
        "id": 209758205,
        "sender_full_name": "eddyb",
        "timestamp": 1599816386
    },
    {
        "content": "<p>still looks the same AFAICT</p>",
        "id": 209758307,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599816481
    },
    {
        "content": "<p>yeah it's getting kind of silly. mostly just wanted to confirm I could really streamline it</p>",
        "id": 209758381,
        "sender_full_name": "eddyb",
        "timestamp": 1599816515
    },
    {
        "content": "<p>now one question could be: can I get a counter that tracks the loss of cache line ownership? it wouldn't be useful in general because I have no idea how many instructions were speculated, but it would be nice to have some more confirmation</p>",
        "id": 209759885,
        "sender_full_name": "eddyb",
        "timestamp": 1599817391
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> moving to per-thread bump allocators resulted in max variance (as per <code>summarize aggregate</code>, <em>not</em> the totals) being down from hundreds/thousands to <code>±29.5 instructions</code> (it's that with or without an outlier of like +8k in terms of totals, which confuses me, I wonder where that went in the data)</p>",
        "id": 209764911,
        "sender_full_name": "eddyb",
        "timestamp": 1599820707
    },
    {
        "content": "<p>too bad we can't ship this :P</p>",
        "id": 209764922,
        "sender_full_name": "eddyb",
        "timestamp": 1599820730
    },
    {
        "content": "<p>I cannot readily reboot no</p>",
        "id": 209773299,
        "sender_full_name": "simulacrum",
        "timestamp": 1599827084
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> no worries. running my most recent command is more useful (since it will tell us for sure whether your Zen 2 is really immune)</p>",
        "id": 209773411,
        "sender_full_name": "eddyb",
        "timestamp": 1599827153
    },
    {
        "content": "<p><a href=\"https://gist.githubusercontent.com/Mark-Simulacrum/c435177905503112cd7c9885b3e16b87/raw/6669acb72596015bfa0a58021459d4b39a90aaf7/gistfile1.txt\">https://gist.githubusercontent.com/Mark-Simulacrum/c435177905503112cd7c9885b3e16b87/raw/6669acb72596015bfa0a58021459d4b39a90aaf7/gistfile1.txt</a></p>",
        "id": 209773541,
        "sender_full_name": "simulacrum",
        "timestamp": 1599827212
    },
    {
        "content": "<p>I wonder if it's speculating shorter distances than Zen 1 hmm, although the noise could just be from the system</p>",
        "id": 209773624,
        "sender_full_name": "eddyb",
        "timestamp": 1599827272
    },
    {
        "content": "<p>it is basically idle</p>",
        "id": 209773680,
        "sender_full_name": "simulacrum",
        "timestamp": 1599827284
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> so that's on the machine that used to give just <code>-1</code>?</p>",
        "id": 209773687,
        "sender_full_name": "eddyb",
        "timestamp": 1599827286
    },
    {
        "content": "<p>yes</p>",
        "id": 209773700,
        "sender_full_name": "simulacrum",
        "timestamp": 1599827292
    },
    {
        "content": "<p>thanks. so it was just getting lucky before</p>",
        "id": 209773716,
        "sender_full_name": "eddyb",
        "timestamp": 1599827299
    },
    {
        "content": "<p>let me rerun that</p>",
        "id": 209773734,
        "sender_full_name": "simulacrum",
        "timestamp": 1599827305
    },
    {
        "content": "<p>rerunning the older script, I still consistently get -1</p>",
        "id": 209773774,
        "sender_full_name": "simulacrum",
        "timestamp": 1599827335
    },
    {
        "content": "<p>there may be an explanation for that, possibly related to the cache hierarchy and everything else running on the CPU</p>",
        "id": 209774205,
        "sender_full_name": "eddyb",
        "timestamp": 1599827602
    },
    {
        "content": "<p>(maybe some false sharing? I don't really know)</p>",
        "id": 209774226,
        "sender_full_name": "eddyb",
        "timestamp": 1599827615
    },
    {
        "content": "<p>but anyway the most recent tests are conclusive, as they force conflicts</p>",
        "id": 209774305,
        "sender_full_name": "eddyb",
        "timestamp": 1599827653
    },
    {
        "content": "<p>okay</p>",
        "id": 209774391,
        "sender_full_name": "simulacrum",
        "timestamp": 1599827717
    },
    {
        "content": "<p>let me know if I should run something else</p>",
        "id": 209774405,
        "sender_full_name": "simulacrum",
        "timestamp": 1599827724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I think I found an msr that disables that speculative retirement feature, at least with that I get consistent all zeros... and it doesn't seem to break stuff otherwise</p>",
        "id": 209802975,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599841492
    },
    {
        "content": "<p>it's setting bit 55 in C001_102C ... that's not documented anywhere though, so it might be a super dangerous thing to do</p>",
        "id": 209803081,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599841538
    },
    {
        "content": "<p>also works if I just do that for the thread that is measured, not the interfering thread (or rather it works 50% of the time when I apply it to one of two hw threads)</p>",
        "id": 209803336,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599841669
    },
    {
        "content": "<p>for older AMD cpus it is documented that C001_102C controls the execution unit, and it's also documented that that unit handles retirement/contains the retirement queue... so I just tried flipping bits from high to low (I started with high because the only documented bit for older cpus was rather high and the value on my CPU was all zeros for the lower bits)</p>",
        "id": 209803758,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599841860
    },
    {
        "content": "<p>If anyone else wants to try this (at their own risk) I'm using this python script to mess with the MSRs <a href=\"https://gist.github.com/jix/0e1f16c1ecd1d56a74f26bfbfa560353\">https://gist.github.com/jix/0e1f16c1ecd1d56a74f26bfbfa560353</a> the bit that works on my machine is hardcoded and it does check that the existing MSR value matches what I find on my machine... it does not check whether you're running it on the same CPU though</p>",
        "id": 209809191,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599844653
    },
    {
        "content": "<p>wow, nice job!</p>",
        "id": 209816155,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1599848118
    },
    {
        "content": "<p>Also did a complete rustc perf run with that MSR bit set (while running other stuff like firefox and vscode etc. in parallel) ... seems to not cause any issues on my machine</p>",
        "id": 209816810,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599848462
    },
    {
        "content": "<p>Does anyone know of any benchmarks or similar that stress atomics/cache coherency stuff?</p>",
        "id": 209816884,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599848505
    },
    {
        "content": "<p>That's incredibly impressive! I would love to see this behavior and the discovery of this undocumented MSR as a post somewhere.</p>",
        "id": 209817637,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599848887
    },
    {
        "content": "<p>Props to <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  for finding the patent on this otherwise undocumented behavior, and <span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> for figuring out the undocumented disable mechanism.</p>",
        "id": 209817783,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599848966
    },
    {
        "content": "<p>that sounds exactly like Christopher Domas' \"god mode unlocked\" talk about uncovering hardware backdoors in old set top box cpus, starting from patents :)</p>",
        "id": 209818740,
        "sender_full_name": "lqd",
        "timestamp": 1599849422
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I literally googled something along the lines of \"lock xadd retired instructions\" or something lol, to get the patent</p>",
        "id": 209822314,
        "sender_full_name": "eddyb",
        "timestamp": 1599851324
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> wow that's awesome!</p>",
        "id": 209822337,
        "sender_full_name": "eddyb",
        "timestamp": 1599851337
    },
    {
        "content": "<p>this is the best thing I've woken up to</p>",
        "id": 209822668,
        "sender_full_name": "eddyb",
        "timestamp": 1599851506
    },
    {
        "content": "<p>\"so I just tried flipping bits\". haha, amazing</p>",
        "id": 209823193,
        "sender_full_name": "Mara",
        "timestamp": 1599851720
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> sand...sifter, I think? and yeah, I was imagining one could set bits but I don't actually own a Zen machine and asking someone else to run <code>wrsmr</code> for <em>any</em> values is terrifying</p>",
        "id": 209823247,
        "sender_full_name": "eddyb",
        "timestamp": 1599851749
    },
    {
        "content": "<p>(also, hello. :) don't think i've said anything here before)</p>",
        "id": 209823317,
        "sender_full_name": "Mara",
        "timestamp": 1599851766
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> do you want to... tweet about it? or maybe we should post to <a href=\"https://github.com/mozilla/rr/issues/2034\">https://github.com/mozilla/rr/issues/2034</a> in case it's relevant?</p>",
        "id": 209823516,
        "sender_full_name": "eddyb",
        "timestamp": 1599851869
    },
    {
        "content": "<p>exactly yeah, using sandsifter, which I don't think he ever released actually ?</p>",
        "id": 209823580,
        "sender_full_name": "lqd",
        "timestamp": 1599851890
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/209817637\">said</a>:</p>\n<blockquote>\n<p>That's incredibly impressive! I would love to see this behavior and the discovery of this undocumented MSR as a post somewhere.</p>\n</blockquote>\n<p>Well, <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> already suggested that there is an MSR bit for this when asking on twitter if anyone knew about this feature... and I've heard many times that in a modern CPU basically every feature has a so-called chicken bit to disable it, either to be able to work around bugs that slip through verification, but also to make it easier to initially verify parts independently... and I guess more recently to mitigate side channels.</p>\n<p>Then for the spec_store_bypass side channel, there is a mitigation that uses an architectural MSR for recent CPUs... but for older ones uses a previously undocumented MSR, so that was a precedent for those bits just sitting around in the MSRs... that one is actually mitigated by an MSR close to the one I'm using.</p>\n<p>Then I looked at what I could find documented about that block of MSRs, and found that from family 15h to 17h the registers in that area themselves seem to affect the same units... and 15h had an errata that was fixed by a bit in  C001_102C, which told me that this is the execution unit.</p>\n<p>Looking at documented architecture diagrams, the execution unit is the unit that has the retire queue... and at that point I decided to not think too hard about the worst case scenario when I start to flip bits ;) and it took only 9 bits, and zero crashes to find it.</p>",
        "id": 209823835,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599852008
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> hmm do you happen to know if it makes running <code>rustc</code> significantly slower?</p>",
        "id": 209823916,
        "sender_full_name": "eddyb",
        "timestamp": 1599852060
    },
    {
        "content": "<p>like I hope it's just that feature and not, say, fully serializing the entire execution and completely destroying IPC</p>",
        "id": 209824000,
        "sender_full_name": "eddyb",
        "timestamp": 1599852110
    },
    {
        "content": "<p>a whole local perf run took 26 minutes, but I think I forgot to disable boost so I can't really compare that to anything</p>",
        "id": 209824109,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599852158
    },
    {
        "content": "<p>but I guess that means it's not too bad</p>",
        "id": 209824130,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599852173
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> and if you want you can tweet about it and just mention me (<code>@jix_</code> on twitter) ... I can also tweet it, but I tend to overthink public tweets so it'd take me some time ^^</p>",
        "id": 209824214,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599852238
    },
    {
        "content": "<p>I was imagining trying with something that takes just seconds :P</p>",
        "id": 209824261,
        "sender_full_name": "eddyb",
        "timestamp": 1599852245
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> do you mind if I link the zulip archive for these messages? since you already presented everything nicely :P</p>",
        "id": 209824319,
        "sender_full_name": "eddyb",
        "timestamp": 1599852276
    },
    {
        "content": "<p>I don't mind :)</p>",
        "id": 209824395,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599852318
    },
    {
        "content": "<p>thanks!</p>",
        "id": 209824589,
        "sender_full_name": "eddyb",
        "timestamp": 1599852418
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/209824261\">said</a>:</p>\n<blockquote>\n<p>I was imagining trying with something that takes just seconds :P</p>\n</blockquote>\n<p>I mostly wanted to make sure things are stable (that's also why I forgot to disable boost, which I usually do whenever I benchmark things)</p>",
        "id": 209824591,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599852419
    },
    {
        "content": "<p>fair, I'm a bit surprised you used that, I would've at most tried a rustc build (but tbh I wouldn't have thought of it)</p>",
        "id": 209824788,
        "sender_full_name": "eddyb",
        "timestamp": 1599852506
    },
    {
        "content": "<p>or in other words, rustc-perf is not the easiest thing to run IME (but maybe I'm months behind)</p>",
        "id": 209824839,
        "sender_full_name": "eddyb",
        "timestamp": 1599852543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> was that with the bit set on all hardware threads?</p>",
        "id": 209824853,
        "sender_full_name": "eddyb",
        "timestamp": 1599852555
    },
    {
        "content": "<p>fwiw the official perf collector does not disable boost</p>",
        "id": 209824869,
        "sender_full_name": "simulacrum",
        "timestamp": 1599852568
    },
    {
        "content": "<p>(we should adopt RISC-V's \"hart\" term universally just so I don't have to type out \"hardware thread\" every time)</p>",
        "id": 209824905,
        "sender_full_name": "eddyb",
        "timestamp": 1599852596
    },
    {
        "content": "<p>I had a local perf run setup already</p>",
        "id": 209824909,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599852599
    },
    {
        "content": "<p>oh that makes a lot of sense <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 209824998,
        "sender_full_name": "eddyb",
        "timestamp": 1599852632
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/209824869\">said</a>:</p>\n<blockquote>\n<p>fwiw the official perf collector does not disable boost</p>\n</blockquote>\n<p>I guess if you're using instructions it doesn't matter at all, for cycles I guess the memory clock not getting a boost might matter... but for my projects I often do wall clock benchmarks because I'm benchmarking my stuff against completely different implementations and for that comparing instructions is no good</p>",
        "id": 209825089,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599852700
    },
    {
        "content": "<p>and AFAICT with boost enabled, it goes into thermal throttling so I'd expect higher wall clock variance</p>",
        "id": 209825215,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599852754
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> have you ever played with counting μops btw?</p>",
        "id": 209825595,
        "sender_full_name": "eddyb",
        "timestamp": 1599852963
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/209824261\">said</a>:</p>\n<blockquote>\n<p>I was imagining trying with something that takes just seconds :P</p>\n</blockquote>\n<p>I ran the regex benchmark with and without the MSR bit set... the instruction count goes down slightly when the bit is set (as we would expect from eliminating overcounting) but the cycle count goes up by  &lt;1% avg and task clock by &lt;2% avg</p>",
        "id": 209825792,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599853083
    },
    {
        "content": "<p>nope I haven't</p>",
        "id": 209825814,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599853095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> it's fun (and usable from userspace), I was able to see that most instructions take only 1μop, whereas something like a simple <code>cpuid</code> takes ~60</p>",
        "id": 209825898,
        "sender_full_name": "eddyb",
        "timestamp": 1599853151
    },
    {
        "content": "<p>AFAICT they might not be as reliable as instructions (which themselves are not perfect because of under/over-counting bugs <em>sigh</em>), but they could still tell you if you're hitting weird microcoded stuff</p>",
        "id": 209825941,
        "sender_full_name": "eddyb",
        "timestamp": 1599853191
    },
    {
        "content": "<p>a lot of stuff I do is affected a lot by memory access patterns, because it works on graphs that don't fit into the cache... I haven't found any good way to get a stable measurement for that that has good correlation to actual run time</p>",
        "id": 209826093,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599853283
    },
    {
        "content": "<p>(I haven't tried too hard either though)</p>",
        "id": 209826118,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599853302
    },
    {
        "content": "<p>I suspect some combination of cache misses at various cache levels could be useful in tracking memory bandwidth usage but... you're limited in how many counters you have at any time so you can't just throw a couple dozen of them into a complex equation</p>",
        "id": 209826293,
        "sender_full_name": "eddyb",
        "timestamp": 1599853391
    },
    {
        "content": "<p>(I'm imagining doing a bit of linear regression to find approximately how much slower than \"an instruction\" a cache miss is. although this may break down if SSE/AVX is used extensively. also, <code>memset</code> is always one instruction thanks to <code>rep stosb</code> aka \"the <code>memset</code> instruction\" existing)</p>",
        "id": 209826572,
        "sender_full_name": "eddyb",
        "timestamp": 1599853540
    },
    {
        "content": "<p>I guess you could capture more counters using multiple runs to get some data and then use some regression with regularization that makes it find a sparse equation (I forgot what you use to get that, but I remember that that's a thing)</p>",
        "id": 209827238,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599853861
    },
    {
        "content": "<blockquote>\n<p>regularization</p>\n</blockquote>\n<p>It is defintly a thing, but I don't know why you would need it here. There is Lasso and Ridge regressions and many more. I can help when it comes to that stats things.</p>",
        "id": 209829288,
        "sender_full_name": "Eh2406",
        "timestamp": 1599855014
    },
    {
        "content": "<p>Ah I miss read. You want sparsity, then you are probably looking for Lasso. But there are stronger things if needed.</p>",
        "id": 209829382,
        "sender_full_name": "Eh2406",
        "timestamp": 1599855113
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/209823516\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"137027\">Jannis Harder</span> do you want to... tweet about it? or maybe we should post to <a href=\"https://github.com/mozilla/rr/issues/2034\">https://github.com/mozilla/rr/issues/2034</a> in case it's relevant?</p>\n</blockquote>\n<p>I'm too tired right now to figure out enough of rr to leave a useful comment there, but it would be good to figure out if this could make rr usable on zen</p>",
        "id": 209833219,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599857281
    },
    {
        "content": "<p>oh yeah I meant to go there and link some of this stuff haha (I'm still waking up, having to deal with some other stuff and getting distracted)</p>",
        "id": 209834533,
        "sender_full_name": "eddyb",
        "timestamp": 1599857961
    },
    {
        "content": "<p>heh, so I found another bit that seems to have the same effect... and unlike the one I found by just trying to flip bits... this one is \"documented\" in a mainboard manual: it's bit 54 of c001_1020 and <a href=\"https://gzhls.at/blob/ldb/6/4/8/a/e30dea919abbc96d15016869591022a12f0e.pdf\">https://gzhls.at/blob/ldb/6/4/8/a/e30dea919abbc96d15016869591022a12f0e.pdf</a> says \"Enables IBS through MSRC001_1005[42] and disables SpecLockMap through MSRC001_1020[54].\" now IBS is some profiling feature I think but I don't find any other hits for SpecLockMap</p>",
        "id": 209836513,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599859209
    },
    {
        "content": "<p>isn't IBS one of the mitigation things?</p>",
        "id": 209836545,
        "sender_full_name": "eddyb",
        "timestamp": 1599859233
    },
    {
        "content": "<p>ah no I'm confusing stuff</p>",
        "id": 209836568,
        "sender_full_name": "eddyb",
        "timestamp": 1599859253
    },
    {
        "content": "<p>\"IBRS\" is what I was remembering, from <a href=\"https://developer.amd.com/wp-content/resources/Architecture_Guidelines_Update_Indirect_Branch_Control.pdf\">https://developer.amd.com/wp-content/resources/Architecture_Guidelines_Update_Indirect_Branch_Control.pdf</a></p>",
        "id": 209836594,
        "sender_full_name": "eddyb",
        "timestamp": 1599859275
    },
    {
        "content": "<p>\"AMD Instruction Based Sampling\" ... but that MSR is the one used for the spec_store_bypass mitigation</p>",
        "id": 209836599,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599859279
    },
    {
        "content": "<p>if I benchmark the two MSR bits against each other with the regex benchmark... they almost don't differ in instructions... but  the \"documented\" one is actually a tiny bit faster</p>",
        "id": 209836655,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599859322
    },
    {
        "content": "<p>might also just be noise though</p>",
        "id": 209836734,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599859364
    },
    {
        "content": "<p>but given that that MSR is part of some mainboard's settings menu... maybe that is set on <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>'s machine?</p>",
        "id": 209836901,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599859466
    },
    {
        "content": "<p>is there an easy way to tell?</p>",
        "id": 209836918,
        "sender_full_name": "simulacrum",
        "timestamp": 1599859478
    },
    {
        "content": "<p>/proc/cpuinfo does have ibs in flags</p>",
        "id": 209836962,
        "sender_full_name": "simulacrum",
        "timestamp": 1599859507
    },
    {
        "content": "<p>but I think that's <em>support</em> not set</p>",
        "id": 209836997,
        "sender_full_name": "simulacrum",
        "timestamp": 1599859532
    },
    {
        "content": "<p>also it's the other bit that is relevant, not the IBS one</p>",
        "id": 209837225,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599859676
    },
    {
        "content": "<p>I guess IBS might have the same issue we have when \"SpecLockMap\" (which I assume is the feature of the patent) is active? but there isn't really anything but that manual that mentions SpecLockMap</p>",
        "id": 209837331,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599859730
    },
    {
        "content": "<p>oh wait I just realized that the \"Lock\" in there means the same thing as our <code>lock</code> lol</p>",
        "id": 209837372,
        "sender_full_name": "eddyb",
        "timestamp": 1599859752
    },
    {
        "content": "<p>yeah... I actually found that manual before I tried flipping bits by searching for MSR register numbers... but I also first didn't realize that spec + lock might be relevant</p>",
        "id": 209837521,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599859844
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"137027\">Jannis Harder</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/209823835\">said</a>:</p>\n<blockquote>\n<p>Looking at documented architecture diagrams, the execution unit is the unit that has the retire queue... and at that point I decided to not think too hard about the worst case scenario when I start to flip bits ;) and it took only 9 bits, and zero crashes to find it.</p>\n</blockquote>\n<p>In general, you can safely assume that flipping MSR bits can't do worse than crash your system. The accessible surface area of the chip should <em>never</em> be able to brick or damage something.</p>",
        "id": 209837550,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599859865
    },
    {
        "content": "<p>that's good to know :D</p>",
        "id": 209837609,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599859900
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>  <code>sudo modprobe msr; sudo dd skip=3221295136 if=/dev/cpu/0/msr bs=8 count=1 iflag=skip_bytes | hexdump</code> this reads the MSR c001_1020</p>",
        "id": 209837692,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599859936
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> what about <code>rdmsr</code> :P?</p>",
        "id": 209837738,
        "sender_full_name": "eddyb",
        "timestamp": 1599859963
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> <code>$((0xC0011020))</code> might be easier; the expression parser understands hex.</p>",
        "id": 209837741,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599859965
    },
    {
        "content": "<p>(the command from <code>msr-tools</code>)</p>",
        "id": 209837756,
        "sender_full_name": "eddyb",
        "timestamp": 1599859976
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> well I didn't have msr-tools installed (and was using python, not dd for my testing)</p>",
        "id": 209837822,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599860025
    },
    {
        "content": "<p>Also, I didn't know about <code>iflag=skip_bytes</code>, that's useful, thanks!</p>",
        "id": 209837881,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599860049
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I'm using zsh and I can never remember what's zsh only and what also works in bash so I thought decimal is the safe but awkward choice</p>",
        "id": 209837894,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599860059
    },
    {
        "content": "<p>but yeah if you have <code>msr-tools</code> that's just <code>sudo rdmsr -x 0xc0011020</code> :D</p>",
        "id": 209837999,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599860131
    },
    {
        "content": "<p>though didn't we confirm <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>'s machine reproduces? I guess it doesn't hurt to check</p>",
        "id": 209838057,
        "sender_full_name": "eddyb",
        "timestamp": 1599860160
    },
    {
        "content": "<p>I didn't keep track</p>",
        "id": 209838150,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599860191
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>1+0 records in\n1+0 records out\n8 bytes copied, 5.4848e-05 s, 146 kB/s\n0000000 0000 0000 4040 0006\n0000008\n</code></pre></div>",
        "id": 209838185,
        "sender_full_name": "simulacrum",
        "timestamp": 1599860217
    },
    {
        "content": "<p>that doesn't have that bit set</p>",
        "id": 209838257,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599860259
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> wait, I know what the PDF is saying!</p>",
        "id": 209838417,
        "sender_full_name": "eddyb",
        "timestamp": 1599860356
    },
    {
        "content": "<p>ahahahaha</p>",
        "id": 209838421,
        "sender_full_name": "eddyb",
        "timestamp": 1599860361
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> if you do \"Enable IBS\" in BIOS it helpfully disables the thing that would mess with IBS</p>",
        "id": 209838535,
        "sender_full_name": "eddyb",
        "timestamp": 1599860416
    },
    {
        "content": "<p>which also cares about not seeing speculation side-effects</p>",
        "id": 209838549,
        "sender_full_name": "eddyb",
        "timestamp": 1599860425
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"137027\">Jannis Harder</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/209837331\">said</a>:</p>\n<blockquote>\n<p>I guess IBS might have the same issue we have when \"SpecLockMap\" (which I assume is the feature of the patent) is active? but there isn't really anything but that manual that mentions SpecLockMap</p>\n</blockquote>\n<p>yeah that's what I meant here :)</p>",
        "id": 209838564,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599860441
    },
    {
        "content": "<p>anything that looks at the stream of retired instructions will hit this same problem, right</p>",
        "id": 209838604,
        "sender_full_name": "eddyb",
        "timestamp": 1599860471
    },
    {
        "content": "<p>Given that the overall performance between the two bits doesn't seem to differ much, and if it differs at all, is better with the \"documented\" bit, I think that's the better choice</p>",
        "id": 209838666,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599860517
    },
    {
        "content": "<p>also I think linux already has infrastructure to set bits in that register per process, as it is used for per process spec_store_bypass mitigation</p>",
        "id": 209838743,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599860549
    },
    {
        "content": "<p>That MSR is \"Load-Store Configuration\", the one I found first is \"Execution Unit Configuration\" (documented for older CPUs) it makes sense that this feature affects both, but I do wonder if there is an observable difference</p>",
        "id": 209838966,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599860693
    },
    {
        "content": "<p>hmm looking at the linux code, it isn't written with more configurable bits in mind... and it will actually mess with the MSRs when there are processes which differ in whether they have the spec_store_bypass active</p>",
        "id": 209839368,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599860948
    },
    {
        "content": "<p>it reads the boot value of that MSR once and caches it to avoid reading it before changing whether \"Speculative Store Bypass\" is enabled or not</p>",
        "id": 209839581,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599861089
    },
    {
        "content": "<p>oh, but only on pre-zen AMD cpus... there's an architectural MSR for the \"Speculative Store Bypass\" on zen and newer</p>",
        "id": 209839764,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599861212
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> btw did you see this? <a href=\"https://www.reddit.com/r/Amd/comments/89vucf/what_does_enable_ibs_and_streaming_stores/\">https://www.reddit.com/r/Amd/comments/89vucf/what_does_enable_ibs_and_streaming_stores/</a></p>",
        "id": 209839905,
        "sender_full_name": "eddyb",
        "timestamp": 1599861299
    },
    {
        "content": "<p>this also mentions \"Stack Buffer\"</p>",
        "id": 209839915,
        "sender_full_name": "eddyb",
        "timestamp": 1599861306
    },
    {
        "content": "<p>yeah, saw that after searching for \"SpecLockMap\", no idea about stack buffer</p>",
        "id": 209840112,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599861458
    },
    {
        "content": "<p>I've read somewhere that zen(2?) is also renaming stuff on the stack (but I haven't really looked at any zen/zen2 microarch docs yet... and might be misremembering things) maybe it's related to that?</p>",
        "id": 209840422,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599861609
    },
    {
        "content": "<p>wait, what if \"Enable IBS\" is common on Zen motherboards' \"BIOS\"es (UEFI setup, really)? we could use that for testing</p>",
        "id": 209840425,
        "sender_full_name": "eddyb",
        "timestamp": 1599861611
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> lmao like SSA-ifying the stack? as a sort of weird cache?</p>",
        "id": 209840449,
        "sender_full_name": "eddyb",
        "timestamp": 1599861634
    },
    {
        "content": "<p>well I guess it brings the same advantages that register renaming does, but also for stuff that's spilled... but again, I might just be confused here</p>",
        "id": 209840594,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599861723
    },
    {
        "content": "<p>ah apparently it's more general memory renaming not limited to the stack?</p>",
        "id": 209840726,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599861821
    },
    {
        "content": "<p><a href=\"https://twitter.com/zwegner/status/1299819987343945733\">https://twitter.com/zwegner/status/1299819987343945733</a> &lt;&lt; this was on my timeline and what I was thinking of</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/zwegner/status/1299819987343945733\"><img class=\"twitter-avatar\" src=\"https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png\"></a><p>With the \"memory renaming\" feature of Zen/Zen 2 getting a lot of attention (and to a lesser extent the same feature on ICL), does anybody know of a compiler that takes it into account?\n\nIt seems spill/fill should now be as local as possible instead of hoisted upwards.</p><span>- Zach Wegner (@zwegner)</span></div></div>",
        "id": 209840841,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599861875
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> so eternaleye linked me this <a href=\"https://en.wikipedia.org/wiki/Stack_register#Stack_engine\">https://en.wikipedia.org/wiki/Stack_register#Stack_engine</a></p>",
        "id": 209840858,
        "sender_full_name": "eddyb",
        "timestamp": 1599861889
    },
    {
        "content": "<p>that's a different thing (and much older AFAIK)</p>",
        "id": 209840907,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599861932
    },
    {
        "content": "<p>reading it that does seem to be less exciting</p>",
        "id": 209840993,
        "sender_full_name": "eddyb",
        "timestamp": 1599861969
    },
    {
        "content": "<p>but given that the renaming thing isn't stack specific, and the stack engine doesn't seem to need a buffer... I still have no idea what \"Stack Buffer\" could be</p>",
        "id": 209841016,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599861990
    },
    {
        "content": "<p>we also don't have the actual MSR bit for that, do we?</p>",
        "id": 209841053,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599862014
    },
    {
        "content": "<p>anyway that doesn't seem to be as important, just noting it</p>",
        "id": 209841067,
        "sender_full_name": "eddyb",
        "timestamp": 1599862027
    },
    {
        "content": "<p>I'm going to reboot now to check whether my \"BIOS\" does have a setting for this, can't find it in the manual, but that isn't exhaustive IIRC</p>",
        "id": 209841354,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599862237
    },
    {
        "content": "<p>No such setting for me</p>",
        "id": 209842200,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599862847
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> lol we raced <a href=\"https://github.com/mozilla/rr/issues/2034#issuecomment-691339680\">https://github.com/mozilla/rr/issues/2034#issuecomment-691339680</a></p>",
        "id": 209843399,
        "sender_full_name": "eddyb",
        "timestamp": 1599863752
    },
    {
        "content": "<p>(and now <code>rr</code> ppl are trying to use that bit to make <code>rr</code> work on Zen :D)</p>",
        "id": 209848077,
        "sender_full_name": "eddyb",
        "timestamp": 1599868058
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> sorry for not asking earlier, but do you have a simple <code>wrmsr</code> command that works?</p>",
        "id": 209849535,
        "sender_full_name": "eddyb",
        "timestamp": 1599869803
    },
    {
        "content": "<p>like, I would expect an \"OR\" operation is necessary?</p>",
        "id": 209849637,
        "sender_full_name": "eddyb",
        "timestamp": 1599869958
    },
    {
        "content": "<p>or are all the other bits in that MSR read-only?</p>",
        "id": 209849721,
        "sender_full_name": "eddyb",
        "timestamp": 1599870073
    },
    {
        "content": "<p>uh oh why didn't I think to look for this in <code>rr</code>'s source... <a href=\"https://github.com/mozilla/rr/blob/685ffeae62ed588cc7eec36f1a61c9456d50d8b8/src/PerfCounters.cc#L118-L121\">https://github.com/mozilla/rr/blob/685ffeae62ed588cc7eec36f1a61c9456d50d8b8/src/PerfCounters.cc#L118-L121</a></p>",
        "id": 209854580,
        "sender_full_name": "eddyb",
        "timestamp": 1599877730
    },
    {
        "content": "<p>(back when I was trying to figure out hardware interrupts counters on the generations Intel redacted it out from)</p>",
        "id": 209854587,
        "sender_full_name": "eddyb",
        "timestamp": 1599877736
    },
    {
        "content": "<p>because it seems like they had to do the same subtraction with that counter</p>",
        "id": 209854607,
        "sender_full_name": "eddyb",
        "timestamp": 1599877793
    },
    {
        "content": "<p>the only one they have that I don't is <code>0x50011d</code> here, but they're missing AMD hw interrupts <a href=\"https://github.com/mozilla/rr/blob/685ffeae62ed588cc7eec36f1a61c9456d50d8b8/src/PerfCounters.cc#L135-L136\">https://github.com/mozilla/rr/blob/685ffeae62ed588cc7eec36f1a61c9456d50d8b8/src/PerfCounters.cc#L135-L136</a></p>",
        "id": 209854716,
        "sender_full_name": "eddyb",
        "timestamp": 1599877987
    },
    {
        "content": "<p>ah I see. left a comment <a href=\"https://github.com/mozilla/rr/issues/2034#issuecomment-691389136\">https://github.com/mozilla/rr/issues/2034#issuecomment-691389136</a></p>",
        "id": 209855151,
        "sender_full_name": "eddyb",
        "timestamp": 1599878832
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> oh hey I found what \"AMD CBS\" stands for heh:</p>\n<blockquote>\n<p>What is AMD CBS?<br>\nCustom settings for your Ryzen CPU's that are provided by AMD, CBS stands for Custom BIOS Settings.</p>\n</blockquote>",
        "id": 209861665,
        "sender_full_name": "eddyb",
        "timestamp": 1599880447
    },
    {
        "content": "<p>also I just remembered that two of my colleagues have Ryzen 3700X or similar, but those are windows machines, welp</p>",
        "id": 209861739,
        "sender_full_name": "eddyb",
        "timestamp": 1599880615
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> They could have called it \"AMD BIOS Configuration\", or \"ABC\". ;)</p>",
        "id": 209864155,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599885424
    },
    {
        "content": "<p>heh. I wonder if anything like that will get sillier than \"Arm's ARM ARM\" (and associated puns like \"Thumb\")</p>",
        "id": 209864269,
        "sender_full_name": "eddyb",
        "timestamp": 1599885614
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/209849535\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"137027\">Jannis Harder</span> sorry for not asking earlier, but do you have a simple <code>wrmsr</code> command that works?</p>\n</blockquote>\n<p>I don't, seems like <code>wrmsr</code> doesn't do read modify write ops?</p>",
        "id": 209868319,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599893900
    },
    {
        "content": "<p>oof</p>",
        "id": 209868320,
        "sender_full_name": "eddyb",
        "timestamp": 1599893915
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> although if all the cores/hardware threads have the same values, it's probably safe to just set them all to that value OR'd with the bit we want to set</p>",
        "id": 209868328,
        "sender_full_name": "eddyb",
        "timestamp": 1599893964
    },
    {
        "content": "<p>just a bit (har) more manual</p>",
        "id": 209868329,
        "sender_full_name": "eddyb",
        "timestamp": 1599893971
    },
    {
        "content": "<p>too bad I don't think there's a way to detect this cheaply when starting up, to warn the user :(</p>",
        "id": 209868383,
        "sender_full_name": "eddyb",
        "timestamp": 1599894100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> hmm so we're looking at changing some kernel state to set the MSR bit without the kernel resetting it back, and I think I have a plan, but I ran into a small problem I can't find an answer for looking around: my <code>/proc/kallsyms</code> seems to only have <code>.text</code> symbols, but no <code>.data</code> ones, is this normal?</p>",
        "id": 209908990,
        "sender_full_name": "eddyb",
        "timestamp": 1599961704
    },
    {
        "content": "<p>even <code>EXPORT_SYMBOL_GPL</code> globals seem to be missing</p>",
        "id": 209908997,
        "sender_full_name": "eddyb",
        "timestamp": 1599961752
    },
    {
        "content": "<p><code>System.map</code> OTOH has them, so that might be useful</p>",
        "id": 209910225,
        "sender_full_name": "eddyb",
        "timestamp": 1599964491
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I'm not sure, but I <em>think</em> that's normal. <code>.data</code> symbols aren't needed for backtraces and similar.</p>",
        "id": 209914608,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599974444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> <span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> I got something working but at least it won't be necessary for anyone on Zen 2 <a href=\"https://gist.github.com/eddyb/b888bb87988ca97ead9abcf96aa49e15\">https://gist.github.com/eddyb/b888bb87988ca97ead9abcf96aa49e15</a></p>",
        "id": 209916061,
        "sender_full_name": "eddyb",
        "timestamp": 1599977643
    },
    {
        "content": "<p>this is mostly for <a href=\"http://build.lyken.rs\">build.lyken.rs</a> (which is Zen 1 EPYC)</p>",
        "id": 209916066,
        "sender_full_name": "eddyb",
        "timestamp": 1599977655
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> actually, should it be considered a vulnerability that I can (relatively easily) work around <code>__ro_after_init</code>? seems a bit wrong that <code>kernel_set_to_readonly</code> itself isn't <code>__ro_after_init</code>, it means I can write to it which removes the \"stickiness\" of <code>__ro_after_init</code> and allows remapping anything as writable</p>",
        "id": 209917207,
        "sender_full_name": "eddyb",
        "timestamp": 1599979984
    },
    {
        "content": "<p>hiding the address of <code>kernel_set_to_readonly</code> from <code>System.map</code> would be pointless btw, since before I realized I can get it from there I was able to pull it out of the disassembly of <code>mark_rodata_ro</code> with this:</p>\n<p><code>sudo gdb /var/run/booted-system/kernel /proc/kcore -ex 'set disassembly-flavor intel' -ex 'x/40i 0x'$(sudo cat /proc/kallsyms | grep mark_rodata_ro | sed 's/ T .*//') -ex q | grep -A3 'call   0x'$(sudo cat /proc/kallsyms | grep set_memory_ro | sed 's/ T .*//')</code></p>",
        "id": 209917276,
        "sender_full_name": "eddyb",
        "timestamp": 1599980132
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> haha I didn't think to Ctrl+F \"SpecLock\" in here before, we might be able to <em>track</em> when it happens <a href=\"http://developer.amd.com/wordpress/media/2017/11/54945_PPR_Family_17h_Models_00h-0Fh.pdf\">http://developer.amd.com/wordpress/media/2017/11/54945_PPR_Family_17h_Models_00h-0Fh.pdf</a></p>",
        "id": 209959426,
        "sender_full_name": "eddyb",
        "timestamp": 1600048890
    },
    {
        "content": "<p>lol this is very weird <a href=\"https://github.com/mozilla/rr/issues/2034#issuecomment-691772998\">https://github.com/mozilla/rr/issues/2034#issuecomment-691772998</a></p>",
        "id": 209960062,
        "sender_full_name": "eddyb",
        "timestamp": 1600049952
    },
    {
        "content": "<p>wait I didn't pay attention, \"bit 3: SpecLockMapCommit. Read-write. Reset: 0.\" literally contains \"SpecLockMap\"</p>",
        "id": 209960362,
        "sender_full_name": "eddyb",
        "timestamp": 1600050433
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code> Performance counter stats for &#39;./rdpmc-bench&#39;:\n       900,923,203      instructions:u\n         4,104,422      r0425:u\n         3,336,967      r0825:u\n\n Performance counter stats for &#39;dd if=/dev/zero of=/dev/null bs=1 count=5M&#39;:\n       997,043,218      instructions:u\n                12      r0425:u\n                34      r0825:u\n</code></pre></div>",
        "id": 209960587,
        "sender_full_name": "eddyb",
        "timestamp": 1600050741
    },
    {
        "content": "<p>sadly I think all it shows is I have a lot of \"lock xadd\"s, I don't see how to correlate with the overcounting</p>",
        "id": 209960710,
        "sender_full_name": "eddyb",
        "timestamp": 1600050964
    },
    {
        "content": "<p>idk what it means but <code>r0225:u</code> has a value in the millions <em>only</em> when that second thread is interfering (while <code>r0425:u</code> and <code>r0825:u</code> remain around the same)</p>",
        "id": 209964507,
        "sender_full_name": "eddyb",
        "timestamp": 1600058072
    },
    {
        "content": "<p>if anyone is bored: <code>perf stat -i -e r0225:u,r0425:u,r0825:u ./rdpmc-bench</code> (I suspect these counters are Zen 1-specific though)</p>",
        "id": 209964523,
        "sender_full_name": "eddyb",
        "timestamp": 1600058116
    },
    {
        "content": "<p>hmm <code>r0225:u</code> is documented as <code>NonSpecLock</code>, maybe it's larger than overcounting (but proportional to it) because... perhaps there's a cache miss <em>before</em> attempting to start the speculative execution? guess I can start looking at L1d misses</p>",
        "id": 209964683,
        "sender_full_name": "eddyb",
        "timestamp": 1600058366
    },
    {
        "content": "<p>ahhh, <code>r0e25:u</code> (the sum of <code>r0225:u,r0425:u,r0825:u</code>) is equal to the <code>total_iterations + 147 + 112*num_powers_of_ten</code> (and there's one <code>lock xadd</code> per iteration) so I <em>think</em> it's the number of <code>lock</code> instructions ever executed</p>",
        "id": 209965834,
        "sender_full_name": "eddyb",
        "timestamp": 1600060294
    },
    {
        "content": "<p>what changes from run to run is in each of the 3 categories, each <code>lock</code> instruction ends up</p>",
        "id": 209965863,
        "sender_full_name": "eddyb",
        "timestamp": 1600060323
    },
    {
        "content": "<p>(to give an example: when the powers of ten are <code>5..=6</code>, I get <code>11,000,371      r0e25:u</code> <em>deterministically</em>)</p>",
        "id": 209965886,
        "sender_full_name": "eddyb",
        "timestamp": 1600060377
    },
    {
        "content": "<p><code>L1-dcache-load-misses:u</code> is pretty large, but I don't see the correlation</p>",
        "id": 209966252,
        "sender_full_name": "eddyb",
        "timestamp": 1600060990
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> heh I just realized <code>measureme</code> uses atomic adds when recording the events, let's try removing that and see what happens to the remaining noise (after it was already drastically lowered by the per-thread bump allocator) :D</p>",
        "id": 209966505,
        "sender_full_name": "eddyb",
        "timestamp": 1600061402
    },
    {
        "content": "<p>hmpf the totals still have a ±5000 instructions. wait what I only removed about a third of all <code>lock</code> instructions, where's the rest coming from?</p>",
        "id": 209967073,
        "sender_full_name": "eddyb",
        "timestamp": 1600062340
    },
    {
        "content": "<p>(I'm still seeing <code>-Zself-profile</code> increase the number of <code>lock</code> instructions by ~25x)</p>",
        "id": 209967259,
        "sender_full_name": "eddyb",
        "timestamp": 1600062682
    },
    {
        "content": "<p>(the number is the same every time so I doubt this is e.g. the kernel's instructions leaking into the userspace)</p>",
        "id": 209967447,
        "sender_full_name": "eddyb",
        "timestamp": 1600063051
    },
    {
        "content": "<p>huuuh I just did another search for the patent (to demonstrate how I found it in a first place) and thought I found the same but... no this one is by Intel?? <a href=\"https://patents.google.com/patent/US20060004998\">https://patents.google.com/patent/US20060004998</a></p>",
        "id": 209971289,
        "sender_full_name": "eddyb",
        "timestamp": 1600067492
    },
    {
        "content": "<p>did AMD do patent infringement lol</p>",
        "id": 209971395,
        "sender_full_name": "eddyb",
        "timestamp": 1600067606
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/209959426\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"137027\">Jannis Harder</span> haha I didn't think to Ctrl+F \"SpecLock\" in here before, we might be able to <em>track</em> when it happens <a href=\"http://developer.amd.com/wordpress/media/2017/11/54945_PPR_Family_17h_Models_00h-0Fh.pdf\">http://developer.amd.com/wordpress/media/2017/11/54945_PPR_Family_17h_Models_00h-0Fh.pdf</a></p>\n</blockquote>\n<p>Not quite sure how to read those tables, but even if we can count how often it happens, to compensate, we would need a way to count how many instructions were speculatively retired and it doesn't look like that's in there to me... or am I missing something?</p>",
        "id": 209972860,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600068880
    },
    {
        "content": "<p>yeah it's useless, except for learning that there are still atomic instructions, heh</p>",
        "id": 209973149,
        "sender_full_name": "eddyb",
        "timestamp": 1600069130
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> haha it's not just motherboards that tie that bit to IBS <a href=\"https://github.com/mozilla/rr/issues/2034#issuecomment-693250265\">https://github.com/mozilla/rr/issues/2034#issuecomment-693250265</a></p>",
        "id": 210234524,
        "sender_full_name": "eddyb",
        "timestamp": 1600245187
    },
    {
        "content": "<p>Yeah, just saw that :) great to have some more confirmation that setting that bit is actually supported</p>",
        "id": 210234577,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600245231
    },
    {
        "content": "<p>AMD should just come out and say it <em>sigh</em></p>",
        "id": 210234629,
        "sender_full_name": "eddyb",
        "timestamp": 1600245246
    },
    {
        "content": "<p>I still wonder about that bit I found first though (just out of curiosity)</p>",
        "id": 210234669,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600245279
    },
    {
        "content": "<p>I wouldn't bet on that happening anytime soon... :/</p>",
        "id": 210234719,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600245333
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> hmmm one thing you could do if you're bored is measure performance effects of each (on atomics-heavy code, maybe even my <code>rdpmc-bench.rs</code> but without the interfering thread?)</p>",
        "id": 210234728,
        "sender_full_name": "eddyb",
        "timestamp": 1600245341
    },
    {
        "content": "<p>as in, total execution time</p>",
        "id": 210234739,
        "sender_full_name": "eddyb",
        "timestamp": 1600245357
    },
    {
        "content": "<p>one of them might be more expensive than the other, which could tell us more about what they do differently</p>",
        "id": 210234792,
        "sender_full_name": "eddyb",
        "timestamp": 1600245379
    },
    {
        "content": "<p>I compared them on the rustc-perf regexp benchmark and IIRC the bit I found first was slightly slower</p>",
        "id": 210234801,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600245393
    },
    {
        "content": "<p>there's also the Zen 1 counters that I don't think you have access to :(</p>",
        "id": 210234807,
        "sender_full_name": "eddyb",
        "timestamp": 1600245395
    },
    {
        "content": "<p>ah fascinating</p>",
        "id": 210234817,
        "sender_full_name": "eddyb",
        "timestamp": 1600245402
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> in that case I would say it turns off more :P</p>",
        "id": 210234831,
        "sender_full_name": "eddyb",
        "timestamp": 1600245418
    },
    {
        "content": "<p>but I wasn't really careful when benchmarking that, so that might have been noise</p>",
        "id": 210234833,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600245420
    },
    {
        "content": "<p>I think it might actually be the other way around... because the bit used for IBS is in the load/store MSR while \"my\" bit is in the execution MSR</p>",
        "id": 210234871,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600245454
    },
    {
        "content": "<p>that <em>could</em> mean it's earlier in the pipeline, no?</p>",
        "id": 210234956,
        "sender_full_name": "eddyb",
        "timestamp": 1600245503
    },
    {
        "content": "<p>which of them?</p>",
        "id": 210234973,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600245519
    },
    {
        "content": "<p>the \"execution\" one</p>",
        "id": 210234983,
        "sender_full_name": "eddyb",
        "timestamp": 1600245528
    },
    {
        "content": "<p>well I think the execution unit handles retirement... let me look at one of the public diagrams again</p>",
        "id": 210235012,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600245551
    },
    {
        "content": "<p>I think the early stuff in the pipeline is called the front-end not the execution unit</p>",
        "id": 210235049,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600245587
    },
    {
        "content": "<p>I guess I'm thinking the word is a bit vague and could just as well refer to something around scheduling or close to writeback</p>",
        "id": 210235057,
        "sender_full_name": "eddyb",
        "timestamp": 1600245593
    },
    {
        "content": "<p>aaah okay then I see</p>",
        "id": 210235061,
        "sender_full_name": "eddyb",
        "timestamp": 1600245598
    },
    {
        "content": "<p><a href=\"https://en.wikichip.org/w/images/f/f2/zen_2_core_diagram.svg\">https://en.wikichip.org/w/images/f/f2/zen_2_core_diagram.svg</a> &lt;&lt; is what I'm going by</p>",
        "id": 210235104,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600245606
    },
    {
        "content": "<p>\"execution unit\" not \"execute stage\"</p>",
        "id": 210235111,
        "sender_full_name": "eddyb",
        "timestamp": 1600245608
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> hmm that still has EX as \"before\" in the pipeline compared to LS</p>",
        "id": 210235152,
        "sender_full_name": "eddyb",
        "timestamp": 1600245649
    },
    {
        "content": "<p>yeah, I just realized... or rather it's not clear to me how they interact</p>",
        "id": 210235168,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600245666
    },
    {
        "content": "<p>or rather, LS is subordinate to EX and handles 3 of the ports</p>",
        "id": 210235173,
        "sender_full_name": "eddyb",
        "timestamp": 1600245670
    },
    {
        "content": "<p>red, cyan and blue are EX-&gt;LS commands and then green is LS-&gt;EX result</p>",
        "id": 210235212,
        "sender_full_name": "eddyb",
        "timestamp": 1600245706
    },
    {
        "content": "<p>AFAICT the speculative lock stuff isn't explicitly anywhere on there</p>",
        "id": 210235323,
        "sender_full_name": "eddyb",
        "timestamp": 1600245785
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> you can't read it easily but the thing between Rename/Allocate and the Physical Register File, is labelled as \"Schedulers\"</p>",
        "id": 210235461,
        "sender_full_name": "eddyb",
        "timestamp": 1600245877
    },
    {
        "content": "<p>the labels aren't broken when embedded in this wiki page: <a href=\"https://en.wikichip.org/wiki/amd/microarchitectures/zen_2\">https://en.wikichip.org/wiki/amd/microarchitectures/zen_2</a></p>",
        "id": 210235525,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600245922
    },
    {
        "content": "<p>\"16 entries\" is interesting, maybe I should've played around with non-<code>nop</code> instructions</p>",
        "id": 210235543,
        "sender_full_name": "eddyb",
        "timestamp": 1600245940
    },
    {
        "content": "<p>since it's possible <code>nop</code>s aren't even dispatched lol</p>",
        "id": 210235551,
        "sender_full_name": "eddyb",
        "timestamp": 1600245948
    },
    {
        "content": "<p>aaah okay <a href=\"https://en.wikichip.org/wiki/amd/microarchitectures/zen_2#Block_Diagram\">https://en.wikichip.org/wiki/amd/microarchitectures/zen_2#Block_Diagram</a></p>",
        "id": 210235562,
        "sender_full_name": "eddyb",
        "timestamp": 1600245961
    },
    {
        "content": "<p>(they joy of text in SVGs)</p>",
        "id": 210235614,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600245977
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> can you check this on Zen 2 btw? <code>perf stat -i -e r0225:u,r0425:u,r0825:u,r0e25:u ./rdpmc-bench</code></p>",
        "id": 210235793,
        "sender_full_name": "eddyb",
        "timestamp": 1600246138
    },
    {
        "content": "<p>assuming you still have the binary around :D</p>",
        "id": 210235801,
        "sender_full_name": "eddyb",
        "timestamp": 1600246143
    },
    {
        "content": "<p>the Zen 1 diagram is even more boring <a href=\"https://en.wikichip.org/w/images/0/02/zen_block_diagram.svg\">https://en.wikichip.org/w/images/0/02/zen_block_diagram.svg</a></p>",
        "id": 210235969,
        "sender_full_name": "eddyb",
        "timestamp": 1600246281
    },
    {
        "content": "<p>that fails with no allocated hardware register, but if I remove one of the ones for perf it does work</p>",
        "id": 210236101,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600246373
    },
    {
        "content": "<p>Zen 2 has just 5 counters??</p>",
        "id": 210236130,
        "sender_full_name": "eddyb",
        "timestamp": 1600246388
    },
    {
        "content": "<p>remove the last one then</p>",
        "id": 210236140,
        "sender_full_name": "eddyb",
        "timestamp": 1600246395
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> specifically, without either of the bits set, I'm curious what those counter do</p>",
        "id": 210236155,
        "sender_full_name": "eddyb",
        "timestamp": 1600246406
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>     6,042,033      r0225:u                                                     \n     2,758,150      r0425:u                                                     \n     2,200,184      r0825:u\n</code></pre></div>",
        "id": 210236157,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600246412
    },
    {
        "content": "<p>you can also look at <code>r0125:u</code> and <code>r0025:u</code> I guess</p>",
        "id": 210236174,
        "sender_full_name": "eddyb",
        "timestamp": 1600246430
    },
    {
        "content": "<p>o_O that looks like the kind of results I get</p>",
        "id": 210236182,
        "sender_full_name": "eddyb",
        "timestamp": 1600246436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> and if you use just <code>r0e25:u</code>, it's always the same ~10 million value?</p>",
        "id": 210236246,
        "sender_full_name": "eddyb",
        "timestamp": 1600246460
    },
    {
        "content": "<p>so they undocumented it but it does the same thing?</p>",
        "id": 210236254,
        "sender_full_name": "eddyb",
        "timestamp": 1600246474
    },
    {
        "content": "<p>r0125 is 0 r0025 is also 0</p>",
        "id": 210236276,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600246490
    },
    {
        "content": "<p>yupp same as Zen 1</p>",
        "id": 210236289,
        "sender_full_name": "eddyb",
        "timestamp": 1600246501
    },
    {
        "content": "<p>r0e25:u is always the same 11 million value</p>",
        "id": 210236293,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600246502
    },
    {
        "content": "<p>perfect</p>",
        "id": 210236301,
        "sender_full_name": "eddyb",
        "timestamp": 1600246507
    },
    {
        "content": "<p>what are those?</p>",
        "id": 210236306,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600246514
    },
    {
        "content": "<p>so you can actually see the effects of either of the bits</p>",
        "id": 210236308,
        "sender_full_name": "eddyb",
        "timestamp": 1600246516
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> they're documented for Zen 1 EPYC but not anything else <a href=\"http://developer.amd.com/wordpress/media/2017/11/54945_PPR_Family_17h_Models_00h-0Fh.pdf#page=160\">developer.amd.com/wordpress/media/2017/11/54945_PPR_Family_17h_Models_00h-0Fh.pdf#page=160</a></p>",
        "id": 210236413,
        "sender_full_name": "eddyb",
        "timestamp": 1600246592
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/0m8iDiLCLbfxxu0YkGlVHCXW/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/0m8iDiLCLbfxxu0YkGlVHCXW/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/0m8iDiLCLbfxxu0YkGlVHCXW/image.png\"></a></div>",
        "id": 210236434,
        "sender_full_name": "eddyb",
        "timestamp": 1600246617
    },
    {
        "content": "<p>BusLock isn't interesting (hence 0) but the other ones are a 3-way classification of every <code>lock</code> instruction</p>",
        "id": 210236462,
        "sender_full_name": "eddyb",
        "timestamp": 1600246646
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> so I'm curious how they get binned once you set each of the MSR bits :D</p>",
        "id": 210236482,
        "sender_full_name": "eddyb",
        "timestamp": 1600246663
    },
    {
        "content": "<p>with the EX bit:</p>\n<div class=\"codehilite\"><pre><span></span><code>     6,784,252      r0225:u                                                     \n     4,215,997      r0425:u                                                     \n           118      r0825:u\n</code></pre></div>",
        "id": 210236621,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600246770
    },
    {
        "content": "<p>with the LS bit:</p>\n<div class=\"codehilite\"><pre><span></span><code>     7,220,023      r0225:u                                                     \n     3,780,344      r0425:u                                                     \n             0      r0825:u\n</code></pre></div>",
        "id": 210236628,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600246784
    },
    {
        "content": "<p>oh also my guess is NonSpecLock happens when the cache line isn't even owned by the current thread, whereas the overcounting happens when it gets stolen some time between starting speculative execution and finishing it</p>",
        "id": 210236637,
        "sender_full_name": "eddyb",
        "timestamp": 1600246798
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> lol what</p>",
        "id": 210236685,
        "sender_full_name": "eddyb",
        "timestamp": 1600246813
    },
    {
        "content": "<p>is the 118 constant? is the 0 constant?</p>",
        "id": 210236697,
        "sender_full_name": "eddyb",
        "timestamp": 1600246823
    },
    {
        "content": "<p>this may indicate the EX bit is less reliable</p>",
        "id": 210236736,
        "sender_full_name": "eddyb",
        "timestamp": 1600246850
    },
    {
        "content": "<p>or not even tied to this feature</p>",
        "id": 210236743,
        "sender_full_name": "eddyb",
        "timestamp": 1600246863
    },
    {
        "content": "<p>the 118 varies a bit around 120 the 0 seems constant</p>",
        "id": 210236746,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600246864
    },
    {
        "content": "<p>also, what's the deal with speclockmap vs speclock?</p>",
        "id": 210236881,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600246948
    },
    {
        "content": "<p>not sure yet</p>",
        "id": 210236952,
        "sender_full_name": "eddyb",
        "timestamp": 1600247023
    },
    {
        "content": "<p>the ~120 value is only slightly lower (~100) if I remove the interfering thread</p>",
        "id": 210237347,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600247309
    },
    {
        "content": "<p>hah I wonder if that's kernel-related</p>",
        "id": 210237654,
        "sender_full_name": "eddyb",
        "timestamp": 1600247516
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> <span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> heh so kernel patch looks likely now, which would be great for UX <a href=\"https://github.com/mozilla/rr/issues/2034#issuecomment-693761247\">https://github.com/mozilla/rr/issues/2034#issuecomment-693761247</a></p>",
        "id": 210349872,
        "sender_full_name": "eddyb",
        "timestamp": 1600320845
    },
    {
        "content": "<p>just realized my use of <code>warn!</code> is an issue (not shown by default, so I need to use <code>error!</code>) and opened <a href=\"https://github.com/rust-lang/rust/issues/76824\">#76824</a></p>",
        "id": 210355853,
        "sender_full_name": "eddyb",
        "timestamp": 1600327638
    },
    {
        "content": "<p>like, I really want to catch every weird little thing that may happen</p>",
        "id": 210355874,
        "sender_full_name": "eddyb",
        "timestamp": 1600327658
    },
    {
        "content": "<p>Oh, I just realized that using those performance counters you can detect (with reasonable accuracy) whether the MSR bit is set without needing the msr module or even root and warn the user when it's not (maybe that's what you're already planning to do, but I was still stuck at thinking that we can't detect it without reading the MSR)</p>",
        "id": 210357569,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600328983
    },
    {
        "content": "<p>whoa</p>",
        "id": 210358313,
        "sender_full_name": "eddyb",
        "timestamp": 1600329379
    },
    {
        "content": "<p>just run an atomic?</p>",
        "id": 210358321,
        "sender_full_name": "eddyb",
        "timestamp": 1600329384
    },
    {
        "content": "<p>(followed by a cache line of nops :P)</p>",
        "id": 210358363,
        "sender_full_name": "eddyb",
        "timestamp": 1600329408
    },
    {
        "content": "<p>yeah, given that it stays at zero with the bit set, I don't think it needs much interference or a long running loop to increment otherwise... (haven't tested that though)</p>",
        "id": 210358436,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600329470
    },
    {
        "content": "<p>and even if not 100% reliable it would only miss warning the user, it wouldn't generate false positives</p>",
        "id": 210358567,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600329526
    },
    {
        "content": "<p>I think I know what to do</p>",
        "id": 210358649,
        "sender_full_name": "eddyb",
        "timestamp": 1600329589
    },
    {
        "content": "<p><em>before</em> even starting the instruction counter, do a mini-benchmark (to avoid increasing the number of total counters) and then drop it, freeing the counter</p>",
        "id": 210358900,
        "sender_full_name": "eddyb",
        "timestamp": 1600329737
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> so this would be fun to run with and without the bit set:</p>\n<p><code>rustup component add --toolchain nightly rustc-dev &amp;&amp; curl -sS https://gist.githubusercontent.com/eddyb/269491b0b59605f39f1d0a9dcf535c4a/raw/84c85b88a751afc04c301ee1795375f50a29793b/rdpmc-bench.rs | rustc +nightly - -o rdpmc-bench -O &amp;&amp; setarch x86_64 -R ./rdpmc-bench &amp;&amp; sleep 1 &amp;&amp; setarch x86_64 -R ./rdpmc-bench</code></p>",
        "id": 210368888,
        "sender_full_name": "eddyb",
        "timestamp": 1600336386
    },
    {
        "content": "<p>I more or less implemented it :D</p>",
        "id": 210368920,
        "sender_full_name": "eddyb",
        "timestamp": 1600336414
    },
    {
        "content": "<p>without the bit set <code>microbenchmark found 13% atomics started speculative execution</code> every time</p>",
        "id": 210369038,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600336529
    },
    {
        "content": "<p>haha</p>",
        "id": 210369049,
        "sender_full_name": "eddyb",
        "timestamp": 1600336535
    },
    {
        "content": "<p>with the bit set no complaints</p>",
        "id": 210369072,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600336554
    },
    {
        "content": "<p>13% is exactly what I see too</p>",
        "id": 210369152,
        "sender_full_name": "eddyb",
        "timestamp": 1600336594
    },
    {
        "content": "<p>anyway posted as <a href=\"https://github.com/mozilla/rr/issues/2034#issuecomment-694127840\">https://github.com/mozilla/rr/issues/2034#issuecomment-694127840</a></p>",
        "id": 210369163,
        "sender_full_name": "eddyb",
        "timestamp": 1600336606
    },
    {
        "content": "<p>oops forgot to say  that <code>rr</code> may want to do this themselves too</p>",
        "id": 210369315,
        "sender_full_name": "eddyb",
        "timestamp": 1600336695
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> feel free to reply with your own Zen 2 stats (I used <code>./rdpmc-bench &gt; dev/null 2&gt;| rg atomics</code> to get some more compact output I can make that table from)</p>",
        "id": 210369405,
        "sender_full_name": "eddyb",
        "timestamp": 1600336792
    },
    {
        "content": "<p>Uh not sure what you want me to post where... that's just the line with the 13%?</p>",
        "id": 210369664,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600336991
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> I mean the fact that you get 13% when the bit is not set and no message when the bit is set</p>",
        "id": 210369803,
        "sender_full_name": "eddyb",
        "timestamp": 1600337098
    },
    {
        "content": "<p>it's almost bizarre that Zen 2 has the same behavior on average, but I suspect there's a μarch detail which causes that number</p>",
        "id": 210369868,
        "sender_full_name": "eddyb",
        "timestamp": 1600337158
    },
    {
        "content": "<p>maybe they're so slow that only every 7-8 <code>lock xadd</code>s gets speculated?</p>",
        "id": 210369946,
        "sender_full_name": "eddyb",
        "timestamp": 1600337205
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> just checked and it shows up correctly when running <code>rustc -Z self-profile</code> on my branch, e.g.:</p>\n<p><code>[ERROR measureme::hw_counters::imp] CpuModel::detect: microbenchmark found 14% atomics started speculative execution, in AMD Zen (Naples/Whitehaven/Summit Ridge/Snowy Owl) CPU; this may add some non-deterministic noise - for more details on this, including possible solutions, see https://github.com/mozilla/rr/issues/2034</code></p>",
        "id": 210371770,
        "sender_full_name": "eddyb",
        "timestamp": 1600338769
    },
    {
        "content": "<p>also if anyone has opinions on phrasing/UX of some of this stuff, feel free to bring it up :D</p>",
        "id": 210371784,
        "sender_full_name": "eddyb",
        "timestamp": 1600338784
    },
    {
        "content": "<p>My brain is saying there's a word or two missing in there but maybe I just need more <span aria-label=\"coffee\" class=\"emoji emoji-2615\" role=\"img\" title=\"coffee\">:coffee:</span> </p>\n<p><code>microbenchmark found 14% of atomics were executed speculatively; this may add some non-deterministic noise for AMD Zen (Naples/Whitehaven/Summit Ridge/Snowy Owl) CPUs; for more details on this, including possible solutions, see https://github.com/mozilla/rr/issues/2034</code></p>",
        "id": 210372056,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1600338973
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> sadly that's not technically true :(</p>",
        "id": 210372367,
        "sender_full_name": "eddyb",
        "timestamp": 1600339230
    },
    {
        "content": "<p>I was wondering about that, it's a bit strange to describe</p>",
        "id": 210372382,
        "sender_full_name": "eddyb",
        "timestamp": 1600339247
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> what gets speculated is instructions <em>after</em> the <code>lock xadd</code></p>",
        "id": 210372397,
        "sender_full_name": "eddyb",
        "timestamp": 1600339259
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I think I need more coffee then</p>",
        "id": 210372405,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1600339266
    },
    {
        "content": "<p>like the CPU enters an almost \"transactional\" mode</p>",
        "id": 210372410,
        "sender_full_name": "eddyb",
        "timestamp": 1600339268
    },
    {
        "content": "<p>my hard to read phrasing is in the sense \"atomic started &lt;CPU machinery&gt;\"</p>",
        "id": 210372451,
        "sender_full_name": "eddyb",
        "timestamp": 1600339312
    },
    {
        "content": "<p>or \"put into motion\"</p>",
        "id": 210372505,
        "sender_full_name": "eddyb",
        "timestamp": 1600339331
    },
    {
        "content": "<p>if anything described this as \"transactions\" I could just say \"entered transactions\" or something</p>",
        "id": 210372531,
        "sender_full_name": "eddyb",
        "timestamp": 1600339371
    },
    {
        "content": "<p>Maybe for the purposes of this message, it's ok to be a bit more vague since we're linking to an issue with the technical details? </p>\n<p><code>a microbenchmark detected non-deterministic noise which may skew results; this is an issue that often affects AMD Zen (...) CPUs; for more details on this, including possible solutions, see https://github.com/...</code></p>",
        "id": 210372548,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1600339387
    },
    {
        "content": "<p>nope we can't detect noise without a lot of effort :P</p>",
        "id": 210372572,
        "sender_full_name": "eddyb",
        "timestamp": 1600339408
    },
    {
        "content": "<p>oh and the CPU is the <em>current</em> CPU's name, not just listing AMD Zen CPUs</p>",
        "id": 210372645,
        "sender_full_name": "eddyb",
        "timestamp": 1600339446
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> like, after having been lied to by so many things, I've become very adverse to saying \"technically untrue\" things</p>",
        "id": 210372677,
        "sender_full_name": "eddyb",
        "timestamp": 1600339475
    },
    {
        "content": "<p>it could be shorter for sure</p>",
        "id": 210372690,
        "sender_full_name": "eddyb",
        "timestamp": 1600339486
    },
    {
        "content": "<p>Is the message generated when we know for sure this is happening or just when we think it could happen?</p>",
        "id": 210372699,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1600339493
    },
    {
        "content": "<p>I could also drop the name <code>SpecLockMap</code> since that's something you can look up</p>",
        "id": 210372709,
        "sender_full_name": "eddyb",
        "timestamp": 1600339503
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> we're 100% sure the thing in the patent exists</p>",
        "id": 210372727,
        "sender_full_name": "eddyb",
        "timestamp": 1600339517
    },
    {
        "content": "<p>and is enabled</p>",
        "id": 210372739,
        "sender_full_name": "eddyb",
        "timestamp": 1600339533
    },
    {
        "content": "<p>which almost guarantees the MSR bit that disables it, isn't set</p>",
        "id": 210372758,
        "sender_full_name": "eddyb",
        "timestamp": 1600339548
    },
    {
        "content": "<p>Ok, so we're not 100% sure but this is much more accurate than just checking what the cpuid is or something?</p>",
        "id": 210372828,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1600339576
    },
    {
        "content": "<p>We're like 90%+ sure</p>",
        "id": 210372850,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1600339595
    },
    {
        "content": "<p>this is post-<code>cpuid</code>. we just can't read the MSR from userspace</p>",
        "id": 210372852,
        "sender_full_name": "eddyb",
        "timestamp": 1600339596
    },
    {
        "content": "<p>the cpuid only tells that the CPU has this feature, not whether it is enabled</p>",
        "id": 210372859,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600339600
    },
    {
        "content": "<p><code>cpuid</code> doesn't tell us anything other than the generation of CPU</p>",
        "id": 210372880,
        "sender_full_name": "eddyb",
        "timestamp": 1600339616
    },
    {
        "content": "<p>(or well it doesn't even tell directly that it has the feature,... yeah what <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> said)</p>",
        "id": 210372898,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600339630
    },
    {
        "content": "<p>Right sorry I'm just trying to figure out if we ran an experiment and that points to you having this issue right now or we're just giving you a warning that it could maybe happen but we have no idea if it actually is.</p>",
        "id": 210372937,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1600339668
    },
    {
        "content": "<p>I'm trying to answer, but I need a bit more to explain it lol</p>",
        "id": 210372994,
        "sender_full_name": "eddyb",
        "timestamp": 1600339686
    },
    {
        "content": "<p>Ok, sorry I'll listen :)</p>",
        "id": 210373002,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1600339693
    },
    {
        "content": "<p>so let's not use percentages, that's silly</p>",
        "id": 210373036,
        "sender_full_name": "eddyb",
        "timestamp": 1600339717
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> we're sure (in the sense of only \"something unreasonably strange only a few people at AMD know about, and which we have seen no signs of\" could negate this) of certain facts</p>",
        "id": 210373099,
        "sender_full_name": "eddyb",
        "timestamp": 1600339778
    },
    {
        "content": "<p>a \"clever\" (and patented) transaction-like machinery exists in Zen CPUs for speculatively executing instructions found <em>after</em> a <code>lock</code> (atomic) instruction</p>",
        "id": 210373179,
        "sender_full_name": "eddyb",
        "timestamp": 1600339823
    },
    {
        "content": "<p>we have a name (via ASRock) for this feature: <code>SpecLockMap</code></p>",
        "id": 210373226,
        "sender_full_name": "eddyb",
        "timestamp": 1600339862
    },
    {
        "content": "<p>this name also shows up in the AMD Zen 1 EPYC manuals, as part of a perf counter named <code>SpecLockMapCommit</code></p>",
        "id": 210373281,
        "sender_full_name": "eddyb",
        "timestamp": 1600339898
    },
    {
        "content": "<p>we're sure that the MSR bit (\"documented\" by ASRock as \"disabling <code>SpecLockMap</code>\") removes all <code>SpecLockMapCommit</code> events, and <em>as far as we can tell</em> it solves the overcounting issue</p>",
        "id": 210373388,
        "sender_full_name": "eddyb",
        "timestamp": 1600339986
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> in other words, I'm detecting that a part of the CPU is enabled, which is the default</p>",
        "id": 210373433,
        "sender_full_name": "eddyb",
        "timestamp": 1600340039
    },
    {
        "content": "<p>on both Zen 1 and Zen 2 it looks like <em>at least</em> 13% of atomics consistently produce <code>SpecLockMapCommit</code> events</p>",
        "id": 210373516,
        "sender_full_name": "eddyb",
        "timestamp": 1600340094
    },
    {
        "content": "<p>(presumably I could get <code>100%</code> if I spaced them out more? let me try)</p>",
        "id": 210373526,
        "sender_full_name": "eddyb",
        "timestamp": 1600340109
    },
    {
        "content": "<p>the overcounting itself is likely under 0.00002%, I'm only looking into this because I want to be able to exactly measure instruction count differences between two different Rust builds</p>",
        "id": 210373746,
        "sender_full_name": "eddyb",
        "timestamp": 1600340197
    },
    {
        "content": "<p>which may be as low as 1 instruction difference, from legitimate sources (e.g. in my <code>rdpmc-bench.rs</code>, if you're on LLVM 11 you'll see <code>-1</code> instead of <code>0</code> for perfect runs, because some of the setup code produces one less instruction than it did under LLVM 10)</p>",
        "id": 210373861,
        "sender_full_name": "eddyb",
        "timestamp": 1600340285
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> so this is only really meaningful to \"perfectly deterministic profiles\" and <code>rr</code></p>",
        "id": 210373914,
        "sender_full_name": "eddyb",
        "timestamp": 1600340337
    },
    {
        "content": "<p>Ok, that makes sense</p>",
        "id": 210374257,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1600340635
    },
    {
        "content": "<p>this shows how much I still have to work on the phrasing welp</p>",
        "id": 210374324,
        "sender_full_name": "eddyb",
        "timestamp": 1600340662
    },
    {
        "content": "<p>I think in your original message I read \"microbenchmark found 14% atomics started speculative execution\" as needing to say \"started in speculative execution mode\"</p>",
        "id": 210374349,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1600340683
    },
    {
        "content": "<p>yeah it's not great</p>",
        "id": 210374364,
        "sender_full_name": "eddyb",
        "timestamp": 1600340695
    },
    {
        "content": "<p>But I think based on your explanation that's wrong</p>",
        "id": 210374366,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1600340697
    },
    {
        "content": "<p>and your original phrasing is correct</p>",
        "id": 210374377,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1600340704
    },
    {
        "content": "<p>I think I'll say <code>SpecLockMap detected</code></p>",
        "id": 210374384,
        "sender_full_name": "eddyb",
        "timestamp": 1600340708
    },
    {
        "content": "<p>in case anyone wants to look it up outside of the <code>rr</code> issue</p>",
        "id": 210374401,
        "sender_full_name": "eddyb",
        "timestamp": 1600340725
    },
    {
        "content": "<p>I think mentioning <code>SpecLockMap</code> somehow would be good</p>",
        "id": 210374420,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1600340750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> okay I got it to 100% almost every time (and 95% one time), I think I can now tweak it so it doesn't take too long :P</p>",
        "id": 210374775,
        "sender_full_name": "eddyb",
        "timestamp": 1600341047
    },
    {
        "content": "<p>oh yeah I was clearly overthinking it lol</p>",
        "id": 210376170,
        "sender_full_name": "eddyb",
        "timestamp": 1600342178
    },
    {
        "content": "<p>it takes a single atomic</p>",
        "id": 210376177,
        "sender_full_name": "eddyb",
        "timestamp": 1600342186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> what do you think of this now?</p>\n<p><code>CpuModel::detect: SpecLockMap detected, in AMD Zen (Naples/Whitehaven/Summit Ridge/Snowy Owl) CPU; this may add some non-deterministic noise - for more details, and possible solutions, see https://github.com/mozilla/rr/issues/2034</code></p>",
        "id": 210379651,
        "sender_full_name": "eddyb",
        "timestamp": 1600344619
    },
    {
        "content": "<p>That's great!</p>",
        "id": 210379680,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1600344644
    },
    {
        "content": "<p>I'm no longer showing any values because I ran a shell loop and couldn't get it to not count</p>",
        "id": 210379684,
        "sender_full_name": "eddyb",
        "timestamp": 1600344645
    },
    {
        "content": "<p>thanks :D</p>",
        "id": 210379689,
        "sender_full_name": "eddyb",
        "timestamp": 1600344648
    },
    {
        "content": "<p>Btw, thanks for posting all this stuff here, it's been super interesting to follow along with</p>",
        "id": 210379712,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1600344679
    },
    {
        "content": "<p>okay left a comment about that part <a href=\"https://github.com/mozilla/rr/issues/2034#issuecomment-694193189\">https://github.com/mozilla/rr/issues/2034#issuecomment-694193189</a></p>",
        "id": 210380942,
        "sender_full_name": "eddyb",
        "timestamp": 1600345482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> this is still reliable, right?</p>\n<p><code>rustup component add --toolchain nightly rustc-dev &amp;&amp; curl -sS https://gist.githubusercontent.com/eddyb/269491b0b59605f39f1d0a9dcf535c4a/raw/73d6a9c55783d52bfbc8cc1ae6b7e8300a9ef7c9/rdpmc-bench.rs | rustc +nightly - -o rdpmc-bench -O &amp;&amp; setarch x86_64 -R ./rdpmc-bench &amp;&amp; sleep 1 &amp;&amp; setarch x86_64 -R ./rdpmc-bench</code></p>",
        "id": 210380970,
        "sender_full_name": "eddyb",
        "timestamp": 1600345514
    },
    {
        "content": "<p>I should maybe make a dedicated benchmark but eh</p>",
        "id": 210381015,
        "sender_full_name": "eddyb",
        "timestamp": 1600345557
    },
    {
        "content": "<p>it is</p>",
        "id": 210381510,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600345825
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> heh more minor complications I can remove <a href=\"https://github.com/mozilla/rr/issues/2034#issuecomment-694511526\">https://github.com/mozilla/rr/issues/2034#issuecomment-694511526</a></p>",
        "id": 210454686,
        "sender_full_name": "eddyb",
        "timestamp": 1600378511
    },
    {
        "content": "<p>and <code>rr</code> is getting the <code>SpecLockMapCommit</code> check, nice <a href=\"https://github.com/mozilla/rr/pull/2671/files#diff-4af56136223ea6f4c389bb52987a6701R265-R294\">https://github.com/mozilla/rr/pull/2671/files#diff-4af56136223ea6f4c389bb52987a6701R265-R294</a></p>",
        "id": 210471773,
        "sender_full_name": "eddyb",
        "timestamp": 1600393965
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> hah there's now a script that does the <code>wrmsr -a</code> thing <a href=\"https://github.com/mozilla/rr/wiki/Zen\">https://github.com/mozilla/rr/wiki/Zen</a></p>",
        "id": 210484075,
        "sender_full_name": "eddyb",
        "timestamp": 1600411869
    },
    {
        "content": "<p>yeah, and since a few minutes ago it also doesn't trip on <code>/dev/cpu/microcode</code> existing :)</p>",
        "id": 210484156,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600411943
    },
    {
        "content": "<p>heh</p>",
        "id": 210484167,
        "sender_full_name": "eddyb",
        "timestamp": 1600411962
    },
    {
        "content": "<p>though that doesn't seem to take into account all the Spectre mitigations stuff on Zen 1 :( <a href=\"https://github.com/mozilla/rr/issues/2034#issuecomment-694692816\">https://github.com/mozilla/rr/issues/2034#issuecomment-694692816</a></p>",
        "id": 210484461,
        "sender_full_name": "eddyb",
        "timestamp": 1600412214
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> did AMD ever document which CPUs actually have the architectural MSR for the ssb mitigation? The only thing I found says \"some models of family 17h have logic that allow loads to bypass older stores but lack the architectural SPEC_CTRL or VIRT_SPEC_CTRL\" which is pretty vague</p>",
        "id": 210492820,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600418741
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> not really, you're supposed to use the <code>cpuid</code> bit</p>",
        "id": 210494504,
        "sender_full_name": "eddyb",
        "timestamp": 1600419877
    },
    {
        "content": "<p>but I doubt it varies within a generation</p>",
        "id": 210494522,
        "sender_full_name": "eddyb",
        "timestamp": 1600419893
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> I don't understand how zeros are possible</p>",
        "id": 210498850,
        "sender_full_name": "eddyb",
        "timestamp": 1600423184
    },
    {
        "content": "<p>because you expect some atomics to be present?</p>",
        "id": 210499031,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600423321
    },
    {
        "content": "<p>because I'm sure there are atomics present</p>",
        "id": 210499082,
        "sender_full_name": "eddyb",
        "timestamp": 1600423338
    },
    {
        "content": "<p>maybe there is some other mechanism that elides atomics?</p>",
        "id": 210499112,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600423369
    },
    {
        "content": "<p>I just need to find something with a lot more</p>",
        "id": 210499117,
        "sender_full_name": "eddyb",
        "timestamp": 1600423373
    },
    {
        "content": "<p>no, I mean, these counters count <code>lock</code> instructions, no matter how they're implemented</p>",
        "id": 210499140,
        "sender_full_name": "eddyb",
        "timestamp": 1600423389
    },
    {
        "content": "<p>and we've shown this :/</p>",
        "id": 210499148,
        "sender_full_name": "eddyb",
        "timestamp": 1600423399
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> what if you replace <code>perf ... echo</code> with <code>echo 'fn main() {}' | perf ... rustc -</code>?</p>",
        "id": 210499258,
        "sender_full_name": "eddyb",
        "timestamp": 1600423486
    },
    {
        "content": "<p>for <code>echo 'fn main() {}' | perf stat -e r002c:u,r0225:u,r0425:u,r0825:u,r0e25:u rustc -</code> I get:</p>\n<div class=\"codehilite\"><pre><span></span><code>               285      r002c:u\n             1,352      r0225:u\n            16,867      r0425:u\n            66,387      r0825:u\n            84,606      r0e25:u\n</code></pre></div>",
        "id": 210499305,
        "sender_full_name": "eddyb",
        "timestamp": 1600423534
    },
    {
        "content": "<p>yeah nonzero for me too</p>",
        "id": 210499319,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600423552
    },
    {
        "content": "<p>but what magnitude?</p>",
        "id": 210499322,
        "sender_full_name": "eddyb",
        "timestamp": 1600423562
    },
    {
        "content": "<p>it should be the same a cross sytems</p>",
        "id": 210499365,
        "sender_full_name": "eddyb",
        "timestamp": 1600423571
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>           105      r002c:u                                                     \n         1,622      r0225:u                                                     \n        17,054      r0425:u                                                     \n        65,330      r0825:u                                                     \n        84,006      r0e25:u\n</code></pre></div>",
        "id": 210499406,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600423607
    },
    {
        "content": "<p>weird, you're missing exactly 600</p>",
        "id": 210499432,
        "sender_full_name": "eddyb",
        "timestamp": 1600423631
    },
    {
        "content": "<p>I'll run <code>rustup update stable</code> and hope we can use that to synchronize</p>",
        "id": 210499462,
        "sender_full_name": "eddyb",
        "timestamp": 1600423666
    },
    {
        "content": "<p>\"rustc 1.46.0 (04488afe3 2020-08-24)\" is my default currently</p>",
        "id": 210499473,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600423682
    },
    {
        "content": "<p>I'm seeing a bunch of variation, this is weird, on ev- oh it's the LLVM threads</p>",
        "id": 210499546,
        "sender_full_name": "eddyb",
        "timestamp": 1600423739
    },
    {
        "content": "<p><code>echo 'fn main() {}' | env RUSTC_BOOTSTRAP=1 perf stat -e r002c:u,r0225:u,r0425:u,r0825:u,r0e25:u rustc +stable - -Z no-parallel-llvm</code> still varies but it's a bit more stable, and the total (r0e25:u) is around 76,250</p>",
        "id": 210499661,
        "sender_full_name": "eddyb",
        "timestamp": 1600423852
    },
    {
        "content": "<p>so, if I have a simple c program that just exits (but is dynamically linked) I get all zeros... if I add a single lock add instruction I see just that single instruction for the counters</p>",
        "id": 210499795,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600423966
    },
    {
        "content": "<p>that's weird</p>",
        "id": 210499810,
        "sender_full_name": "eddyb",
        "timestamp": 1600423987
    },
    {
        "content": "<p>what do you get for my last command btw?</p>",
        "id": 210499826,
        "sender_full_name": "eddyb",
        "timestamp": 1600424002
    },
    {
        "content": "<p>why are you sure that echo should execute atomics?</p>",
        "id": 210499835,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600424007
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>            30      r002c:u                                                     \n           804      r0225:u                                                     \n        13,785      r0425:u                                                     \n        59,915      r0825:u                                                     \n        74,504      r0e25:u\n</code></pre></div>",
        "id": 210499857,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600424030
    },
    {
        "content": "<p>is it consistently around 74.5k?</p>",
        "id": 210499905,
        "sender_full_name": "eddyb",
        "timestamp": 1600424045
    },
    {
        "content": "<p>+/- a few 100</p>",
        "id": 210499914,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600424061
    },
    {
        "content": "<p>because that's 2000 less counted atomics for you. maybe it's the glibc version?</p>",
        "id": 210499921,
        "sender_full_name": "eddyb",
        "timestamp": 1600424064
    },
    {
        "content": "<p>or maybe it's just some instructions aren't considered atomics anymore hah</p>",
        "id": 210499944,
        "sender_full_name": "eddyb",
        "timestamp": 1600424087
    },
    {
        "content": "<p>if I compile my empty c program with <code>-pthread</code> I get 4 atomic instructions</p>",
        "id": 210499981,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600424127
    },
    {
        "content": "<p>if you want you could make sure <code>r001c:u</code> (unchageable bus locks) is zero, I guess, that would....</p>",
        "id": 210499993,
        "sender_full_name": "eddyb",
        "timestamp": 1600424136
    },
    {
        "content": "<p>oh! where is my <code>echo</code> from I wonder</p>",
        "id": 210500010,
        "sender_full_name": "eddyb",
        "timestamp": 1600424143
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> <code>ldd $(which echo)</code></p>",
        "id": 210500084,
        "sender_full_name": "eddyb",
        "timestamp": 1600424181
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>linux-vdso.so.1 (0x00007ffe8e7f5000)\nlibc.so.6 =&gt; /usr/lib/libc.so.6 (0x00007fdbd4c74000)\n/lib64/ld-linux-x86-64.so.2 =&gt; /usr/lib64/ld-linux-x86-64.so.2 (0x00007fdbd4e83000)\n</code></pre></div>",
        "id": 210500110,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600424210
    },
    {
        "content": "<p>mine links against <code>librt.so.1</code>, <code>libacl.so.1</code>, <code>libattr.so.1</code>, <code>libpthread.so.0</code> and <code>libc.so.6</code></p>",
        "id": 210500113,
        "sender_full_name": "eddyb",
        "timestamp": 1600424214
    },
    {
        "content": "<p>okay so this is a distro thing</p>",
        "id": 210500114,
        "sender_full_name": "eddyb",
        "timestamp": 1600424220
    },
    {
        "content": "<p>It can also vary between shells:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ type echo\necho is a shell builtin\n</code></pre></div>",
        "id": 210500140,
        "sender_full_name": "mati865",
        "timestamp": 1600424248
    },
    {
        "content": "<p>that's not what perf will run</p>",
        "id": 210500153,
        "sender_full_name": "eddyb",
        "timestamp": 1600424258
    },
    {
        "content": "<p><code>env echo --version</code> =&gt; <code>echo (GNU coreutils) 8.32</code> here</p>",
        "id": 210500222,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600424301
    },
    {
        "content": "<p>yeah the problem is the distro I think. not sure what NixOS does differently but there's a bunch of things linked by default that you don't have</p>",
        "id": 210500241,
        "sender_full_name": "eddyb",
        "timestamp": 1600424325
    },
    {
        "content": "<p>actually, what if you compile your C program with <code>-lrt -lacl -lattr -lpthread</code>? do you then get exactly my counts?</p>",
        "id": 210500257,
        "sender_full_name": "eddyb",
        "timestamp": 1600424349
    },
    {
        "content": "<p>nope still only 4 total</p>",
        "id": 210500306,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600424399
    },
    {
        "content": "<p>I'll be afk for a bit</p>",
        "id": 210500433,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600424510
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> <span class=\"user-mention\" data-user-id=\"119581\">@mati865</span> if you're bored:</p>\n<div class=\"codehilite\"><pre><span></span><code>find /bin | xargs -n1 bash -c &#39;ldd $0 | grep -C10 libpthread &gt; /dev/null &amp;&amp; echo $0&#39; | wc -l\n</code></pre></div>",
        "id": 210500709,
        "sender_full_name": "eddyb",
        "timestamp": 1600424737
    },
    {
        "content": "<p>lol can we just get @glandium in here so they're not going back &amp; forth on GH?</p>",
        "id": 210500813,
        "sender_full_name": "eddyb",
        "timestamp": 1600424814
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ find /bin | xargs -n1 bash -c &#39;ldd $0 | grep -C10 libpthread &gt; /dev/null &amp;&amp; echo $0&#39; | wc -l\nldd: /bin: not regular file\n0\n</code></pre></div>\n\n\n<p>Huh?</p>",
        "id": 210500848,
        "sender_full_name": "mati865",
        "timestamp": 1600424842
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119581\">@mati865</span> hmm maybe try <code>/usr/bin</code> instead?</p>",
        "id": 210500939,
        "sender_full_name": "eddyb",
        "timestamp": 1600424888
    },
    {
        "content": "<p>wait I should've asked first: are you on NixOS lol</p>",
        "id": 210500954,
        "sender_full_name": "eddyb",
        "timestamp": 1600424903
    },
    {
        "content": "<p>Yeah, just noticed it did not follow the symlink.<br>\nI'm on Arch Linux.</p>",
        "id": 210501010,
        "sender_full_name": "mati865",
        "timestamp": 1600424968
    },
    {
        "content": "<p>oh it needed <code>/</code> after <code>/bin</code>?</p>",
        "id": 210501099,
        "sender_full_name": "eddyb",
        "timestamp": 1600425007
    },
    {
        "content": "<p>Exactly.<br>\nIt prints <code>2298</code> at the end but on Arch <code>/bin</code> is symlinked to <code>/usr/bin</code> so that's every binary on my system.</p>",
        "id": 210501187,
        "sender_full_name": "mati865",
        "timestamp": 1600425092
    },
    {
        "content": "<p><em>grumbles</em></p>",
        "id": 210501214,
        "sender_full_name": "eddyb",
        "timestamp": 1600425116
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119581\">@mati865</span> replace <code>wc -l</code> with <code>less</code> or w/e and then look for something that sounds simple/basic?</p>",
        "id": 210501276,
        "sender_full_name": "eddyb",
        "timestamp": 1600425137
    },
    {
        "content": "<p>maybe it's everything lol</p>",
        "id": 210501283,
        "sender_full_name": "eddyb",
        "timestamp": 1600425143
    },
    {
        "content": "<p>(on NixOS, for <code>/run/current-system/sw/bin/</code> on this server, I get <code>313</code> out of <code>732</code> total files in that directory)</p>",
        "id": 210501312,
        "sender_full_name": "eddyb",
        "timestamp": 1600425170
    },
    {
        "content": "<p>/me scrolls over 2k entries...</p>",
        "id": 210501375,
        "sender_full_name": "mati865",
        "timestamp": 1600425238
    },
    {
        "content": "<p>wait why am I looking for this? I guess I'm hoping for a multithreaded workload <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 210501378,
        "sender_full_name": "eddyb",
        "timestamp": 1600425239
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ ldd /bin/sort\n        linux-vdso.so.1 (0x00007ffdf7be3000)\n        libcrypto.so.1.1 =&gt; /usr/lib/libcrypto.so.1.1 (0x00007f573158d000)\n        libpthread.so.0 =&gt; /usr/lib/libpthread.so.0 (0x00007f573156b000)\n        libc.so.6 =&gt; /usr/lib/libc.so.6 (0x00007f57313a2000)\n        libdl.so.2 =&gt; /usr/lib/libdl.so.2 (0x00007f573139c000)\n        /lib64/ld-linux-x86-64.so.2 =&gt; /usr/lib64/ld-linux-x86-64.so.2 (0x00007f57318de000)\n</code></pre></div>",
        "id": 210501458,
        "sender_full_name": "mati865",
        "timestamp": 1600425289
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> ^</p>",
        "id": 210501461,
        "sender_full_name": "mati865",
        "timestamp": 1600425296
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119581\">@mati865</span> <span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> alright, this saturates at 129 atomics for me (as in, if I increase the <code>seq</code> number, it doesn't go above 129):</p>\n<div class=\"codehilite\"><pre><span></span><code>seq 1000 | perf stat -e r002c:u,r0225:u,r0425:u,r0825:u,r0e25:u sort &gt; /dev/null\n</code></pre></div>",
        "id": 210501881,
        "sender_full_name": "eddyb",
        "timestamp": 1600425630
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>                 1      r002c:u\n                 4      r0225:u\n                54      r0425:u\n                71      r0825:u\n               129      r0e25:u\n</code></pre></div>\n\n\n<p>Zen+</p>",
        "id": 210501928,
        "sender_full_name": "mati865",
        "timestamp": 1600425679
    },
    {
        "content": "<p>Only <code>r0e25:u</code> is totally stable.</p>",
        "id": 210502010,
        "sender_full_name": "mati865",
        "timestamp": 1600425738
    },
    {
        "content": "<p>yeah that's expected. it's the actual count, the rest are the 3 possible ways an atomic can execute</p>",
        "id": 210502027,
        "sender_full_name": "eddyb",
        "timestamp": 1600425766
    },
    {
        "content": "<p>e.g. <code>r0225:u</code> can be hit if the cache line was evicted, IIUC (which might happen non-deterministically through the kernel handling interrupts and whatnot)</p>",
        "id": 210502108,
        "sender_full_name": "eddyb",
        "timestamp": 1600425828
    },
    {
        "content": "<p>FWIW <code>perf stat -e r0225:u,r0425:u,r0825:u,r0e25:u /bin/echo</code> gives all zeros for me. So indeed seems like a distro thing.</p>",
        "id": 210503432,
        "sender_full_name": "mati865",
        "timestamp": 1600426713
    },
    {
        "content": "<p><code>perf stat foo</code> will run <code>which foo</code>, not the shell's <code>foo</code>, if you're referring to that</p>",
        "id": 210504189,
        "sender_full_name": "eddyb",
        "timestamp": 1600427189
    },
    {
        "content": "<p>this holds in general for any command, not just <code>perf</code>, as long as it's not a shell builtin itself :P (<code>time</code> in some shells)</p>",
        "id": 210504211,
        "sender_full_name": "eddyb",
        "timestamp": 1600427216
    },
    {
        "content": "<p>I was referring to <code>assuming there are some distro differences and echo truly executes no atomics for you</code></p>",
        "id": 210504246,
        "sender_full_name": "mati865",
        "timestamp": 1600427246
    },
    {
        "content": "<p>sure, it's just the <code>/bin/echo</code> that I think is redundant</p>",
        "id": 210504333,
        "sender_full_name": "eddyb",
        "timestamp": 1600427291
    },
    {
        "content": "<p>It is, I just wanted to be sure</p>",
        "id": 210504418,
        "sender_full_name": "mati865",
        "timestamp": 1600427378
    },
    {
        "content": "<p>btw at some point I found out about the <code>command</code> command (heh), which (in some shells?) is a built-in that will execute what you pass to it ignoring  builtins. so, like, <code>command time foo</code> will run <code>$(which time) foo</code> not <code>time foo</code> (this only matters is <code>time</code> is a builtin)</p>",
        "id": 210504435,
        "sender_full_name": "eddyb",
        "timestamp": 1600427392
    },
    {
        "content": "<p>it came in handy as <code>fish</code>'s <code>time</code> builtin doesn't print max RSS like the real <code>time</code> tool does</p>",
        "id": 210504512,
        "sender_full_name": "eddyb",
        "timestamp": 1600427431
    },
    {
        "content": "<p>XD</p>\n<div class=\"codehilite\"><pre><span></span><code> mateusz@arch  /tmp/zen_test  time ls\na.out  foo  foo.c  test.c\nls --color=tty  0.00s user 0.00s system 83% cpu 0.001 total\n mateusz@arch  /tmp/zen_test  command time ls\ntime may be found in the following packages:\n  extra/time 1.9-2                      /usr/bin/time\n  community/plan9port 20190619-1        /usr/lib/plan9/bin/time\n</code></pre></div>\n\n\n<p>I was sure I had time installed on my system until now...<br>\nI know my <code>time</code> is ZSH builtin.</p>",
        "id": 210505604,
        "sender_full_name": "mati865",
        "timestamp": 1600428231
    },
    {
        "content": "<p>just noticed this was added o_O <a href=\"https://en.wikichip.org/wiki/amd/cpuid#Family_25_.2819h.29\">https://en.wikichip.org/wiki/amd/cpuid#Family_25_.2819h.29</a></p>",
        "id": 210579967,
        "sender_full_name": "eddyb",
        "timestamp": 1600466405
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> does setting the MSR bit turn off both <code>r0425:u</code> <em>and</em> <code>r0825:u</code> for you, or just the latter?</p>",
        "id": 210580600,
        "sender_full_name": "eddyb",
        "timestamp": 1600466984
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119581\">@mati865</span> could you run <code>head -n6 /proc/cpuinfo</code>?</p>",
        "id": 210581563,
        "sender_full_name": "eddyb",
        "timestamp": 1600467943
    },
    {
        "content": "<p>I just realized I missed something important and we kinda need to catalog Zen further</p>",
        "id": 210581641,
        "sender_full_name": "eddyb",
        "timestamp": 1600468004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> :</p>\n<div class=\"codehilite\"><pre><span></span><code>$ head -n6 /proc/cpuinfo\nprocessor       : 0\nvendor_id       : AuthenticAMD\ncpu family      : 23\nmodel           : 8\nmodel name      : AMD Ryzen 7 2700X Eight-Core Processor\nstepping        : 2\n</code></pre></div>",
        "id": 210581649,
        "sender_full_name": "mati865",
        "timestamp": 1600468017
    },
    {
        "content": "<p>thanks</p>",
        "id": 210581839,
        "sender_full_name": "eddyb",
        "timestamp": 1600468209
    },
    {
        "content": "<p>Sure</p>",
        "id": 210581847,
        "sender_full_name": "mati865",
        "timestamp": 1600468216
    },
    {
        "content": "<p>this is starting to bother me a bit, and I didn't catalog everything we ran my benchmark on :/</p>",
        "id": 210581901,
        "sender_full_name": "eddyb",
        "timestamp": 1600468277
    },
    {
        "content": "<p>oh come on, the page I was looking at doesn't list at least two of these :| <a href=\"https://www.amd.com/en/support/tech-docs?keyword=family+17h+PPR\">https://www.amd.com/en/support/tech-docs?keyword=family+17h+PPR</a></p>",
        "id": 210581997,
        "sender_full_name": "eddyb",
        "timestamp": 1600468376
    },
    {
        "content": "<p>but it's also missing the ones on here <a href=\"https://developer.amd.com/resources/epyc-resources/epyc-specifications/\">https://developer.amd.com/resources/epyc-resources/epyc-specifications/</a></p>",
        "id": 210582544,
        "sender_full_name": "eddyb",
        "timestamp": 1600468960
    },
    {
        "content": "<p>Regarding GitHub comments I'm  on 5.8.9 with <code>CONFIG_KALLSYMS_ALL=y</code>, should I execute something?</p>",
        "id": 210605000,
        "sender_full_name": "mati865",
        "timestamp": 1600505457
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/210580600\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"137027\">Jannis Harder</span> does setting the MSR bit turn off both <code>r0425:u</code> <em>and</em> <code>r0825:u</code> for you, or just the latter?</p>\n</blockquote>\n<p>just the latter, the <code>r0425:u</code> gets larger by what looks like <code>r0825:u</code>has without the MSR bit</p>",
        "id": 210605190,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600505787
    },
    {
        "content": "<p>that's good, so <code>Hi</code>/<code>Lo</code> are just names for two kinds of speculation o_O</p>",
        "id": 210605386,
        "sender_full_name": "eddyb",
        "timestamp": 1600506183
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> just to be sure, what does <code>head -n6 /proc/cpuinfo</code> say?</p>",
        "id": 210605390,
        "sender_full_name": "eddyb",
        "timestamp": 1600506197
    },
    {
        "content": "<p>some of these manuals are weird</p>",
        "id": 210605393,
        "sender_full_name": "eddyb",
        "timestamp": 1600506205
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>processor   : 0\nvendor_id   : AuthenticAMD\ncpu family  : 23\nmodel       : 113\nmodel name  : AMD Ryzen 9 3950X 16-Core Processor\nstepping    : 0\n</code></pre></div>",
        "id": 210605396,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600506232
    },
    {
        "content": "<p>thanks. that's indeed documented as <code>SpecLockLoSpec</code> vs <code>SpecLockHiSpec</code> (for 4 vs 8)</p>",
        "id": 210605502,
        "sender_full_name": "eddyb",
        "timestamp": 1600506384
    },
    {
        "content": "<p>didn't those have different names before?</p>",
        "id": 210605516,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1600506459
    },
    {
        "content": "<p><code>SpecLock</code> and <code>SpecLockMapCommit</code>, yes, but those names only exist in the spec from <a href=\"https://developer.amd.com/resources/epyc-resources/epyc-specifications/\">https://developer.amd.com/resources/epyc-resources/epyc-specifications/</a>, i.e. <a href=\"http://developer.amd.com/wordpress/media/2017/11/54945_PPR_Family_17h_Models_00h-0Fh.pdf\">http://developer.amd.com/wordpress/media/2017/11/54945_PPR_Family_17h_Models_00h-0Fh.pdf</a></p>",
        "id": 210605565,
        "sender_full_name": "eddyb",
        "timestamp": 1600506526
    },
    {
        "content": "<p>but it's not even applicable to EPYC 1 Zen at least according to itself, lol</p>",
        "id": 210605614,
        "sender_full_name": "eddyb",
        "timestamp": 1600506606
    },
    {
        "content": "<p>(it's... confusing)</p>",
        "id": 210605617,
        "sender_full_name": "eddyb",
        "timestamp": 1600506615
    },
    {
        "content": "<p>do we have anyone here with a Ryzen 1xxx series? I can't remember <em>starts searching</em></p>",
        "id": 210642357,
        "sender_full_name": "eddyb",
        "timestamp": 1600562402
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> in <a href=\"#narrow/stream/247081-t-compiler/performance/topic/hardware%20counter%20%28rdpmc%29%20measurements/near/207271931\">https://rust-lang.zulipchat.com/#narrow/stream/247081-t-compiler/performance/topic/hardware%20counter%20%28rdpmc%29%20measurements/near/207271931</a> you said \"ryzen1\" - is that Ryzen 1xxx or EPYC 7xx1?</p>",
        "id": 210642397,
        "sender_full_name": "eddyb",
        "timestamp": 1600562417
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119581\">@mati865</span> oh oh you mentioned you have a desktop with a Ryzen 1600? in <a href=\"#narrow/stream/247081-t-compiler/performance/topic/hardware%20counter%20%28rdpmc%29%20measurements/near/209717845\">https://rust-lang.zulipchat.com/#narrow/stream/247081-t-compiler/performance/topic/hardware%20counter%20%28rdpmc%29%20measurements/near/209717845</a></p>",
        "id": 210642446,
        "sender_full_name": "eddyb",
        "timestamp": 1600562526
    },
    {
        "content": "<p>the test, to be clear, is this (alongside <code>head -n6 /proc/cpuinfo</code> so I don't lose track of it again :D):</p>\n<div class=\"codehilite\"><pre><span></span><code>seq <span class=\"m\">1000</span> <span class=\"p\">|</span> perf stat -e r002c:u,r0225:u,r0425:u,r0825:u,r0e25:u sort &gt; /dev/null\n</code></pre></div>",
        "id": 210642460,
        "sender_full_name": "eddyb",
        "timestamp": 1600562580
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> you brought up \"1800x\" in <a href=\"#narrow/stream/247081-t-compiler/performance/topic/hardware%20counter%20%28rdpmc%29%20measurements/near/207041293\">https://rust-lang.zulipchat.com/#narrow/stream/247081-t-compiler/performance/topic/hardware%20counter%20%28rdpmc%29%20measurements/near/207041293</a> - do you still have access to that system?</p>",
        "id": 210642522,
        "sender_full_name": "eddyb",
        "timestamp": 1600562661
    },
    {
        "content": "<p>I don't</p>",
        "id": 210642582,
        "sender_full_name": "simulacrum",
        "timestamp": 1600562813
    },
    {
        "content": "<p>thanks. so now I'm waiting for <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span>, <span class=\"user-mention\" data-user-id=\"119581\">@mati865</span>, tuxiqae on GItHub, and a couple people on IRC. frankly, any one of them getting non-zero results across the counters is confirmation that it behaves as expected</p>",
        "id": 210642815,
        "sender_full_name": "eddyb",
        "timestamp": 1600563296
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> btw it might be interesting to see what effect applying the script mentioned in <a href=\"https://github.com/mozilla/rr/wiki/Zen\">https://github.com/mozilla/rr/wiki/Zen</a> has on the perf collection variance (presumably you'd want to run it before each run, in case the server became \"too idle\" or something)</p>",
        "id": 210645507,
        "sender_full_name": "eddyb",
        "timestamp": 1600568900
    },
    {
        "content": "<p>I expect the main impact will be on <code>instructions:u</code> in <code>-check</code> benchmarks, otherwise the multithreading will probably introduce its own non-determinism anyway</p>",
        "id": 210645517,
        "sender_full_name": "eddyb",
        "timestamp": 1600568973
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> my brother has 1600 in his desktop but he was quite busy lately.</p>",
        "id": 210655271,
        "sender_full_name": "mati865",
        "timestamp": 1600589219
    },
    {
        "content": "<p>mhmm. well, if you get the chance to run that command quickly, lmk! and thanks either way :D</p>",
        "id": 210655275,
        "sender_full_name": "eddyb",
        "timestamp": 1600589251
    },
    {
        "content": "<p>I'll be there in 2-3 hours, got other things to do first :p</p>",
        "id": 210655338,
        "sender_full_name": "mati865",
        "timestamp": 1600589362
    },
    {
        "content": "<p>heh that's no time, if I solve this mystery in less than a week I'll be happy</p>",
        "id": 210655346,
        "sender_full_name": "eddyb",
        "timestamp": 1600589402
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> are you around and willing to play a game?</p>",
        "id": 210659405,
        "sender_full_name": "eddyb",
        "timestamp": 1600597041
    },
    {
        "content": "<p>(OR your MSR with 0x100. but someone else already confirmed it fully disables <code>lock</code> speculation)</p>",
        "id": 210659901,
        "sender_full_name": "eddyb",
        "timestamp": 1600597885
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> <span class=\"user-mention\" data-user-id=\"119581\">@mati865</span> <a href=\"https://github.com/mozilla/rr/issues/2034#issuecomment-695771458\">https://github.com/mozilla/rr/issues/2034#issuecomment-695771458</a></p>",
        "id": 210660139,
        "sender_full_name": "eddyb",
        "timestamp": 1600598271
    },
    {
        "content": "<p>feel free to turn bits on/off and play around but I think the mystery is solved</p>",
        "id": 210660177,
        "sender_full_name": "eddyb",
        "timestamp": 1600598287
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> Ubuntu 20.04 with 1600:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ seq 1000 | perf stat -e r002c:u,r0225:u,r0425:u,r0825:u,r0e25:u sort &gt; /dev/null\n\n Performance counter stats for &#39;sort&#39;:\n\n                 0      r002c:u\n                 0      r0225:u\n                56      r0425:u\n                73      r0825:u\n               129      r0e25:u\n</code></pre></div>",
        "id": 210660564,
        "sender_full_name": "mati865",
        "timestamp": 1600598913
    },
    {
        "content": "<p>sweet! that's expected. want to post it to <a href=\"https://github.com/mozilla/rr/issues/2034\">https://github.com/mozilla/rr/issues/2034</a>? not sure if you want to run any of the <code>rr</code> stuff itself on that machine</p>",
        "id": 210660574,
        "sender_full_name": "eddyb",
        "timestamp": 1600598951
    },
    {
        "content": "<p>That would be a bit problematic, he has only Android Studio for learning <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 210660731,
        "sender_full_name": "mati865",
        "timestamp": 1600599137
    },
    {
        "content": "<p>haha. no worries! the results are still useful to show that the 0s aren't universal to Zen 1 Ryzen 1st gen etc.</p>",
        "id": 210660756,
        "sender_full_name": "eddyb",
        "timestamp": 1600599177
    },
    {
        "content": "<p>even if we're pretty sure why that person was seeing the 0s</p>",
        "id": 210660766,
        "sender_full_name": "eddyb",
        "timestamp": 1600599193
    },
    {
        "content": "<p>and even if you're not confirming <code>rr</code> works :P</p>",
        "id": 210660771,
        "sender_full_name": "eddyb",
        "timestamp": 1600599210
    },
    {
        "content": "<p>okay maybe I went overkill on this <a href=\"https://github.com/mozilla/rr/issues/2034#issuecomment-695780661\">https://github.com/mozilla/rr/issues/2034#issuecomment-695780661</a></p>",
        "id": 210664278,
        "sender_full_name": "eddyb",
        "timestamp": 1600604261
    },
    {
        "content": "<p>oops, just remembered to add a small note to indicate that this is just documentation weirdness, they're all the same really</p>",
        "id": 210664360,
        "sender_full_name": "eddyb",
        "timestamp": 1600604395
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/210642397\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> in <a href=\"#narrow/stream/247081-t-compiler/performance/topic/hardware%20counter%20%28rdpmc%29%20measurements/near/207271931\">https://rust-lang.zulipchat.com/#narrow/stream/247081-t-compiler/performance/topic/hardware%20counter%20%28rdpmc%29%20measurements/near/207271931</a> you said \"ryzen1\" - is that Ryzen 1xxx or EPYC 7xx1?</p>\n</blockquote>\n<p>ryzen 1700</p>",
        "id": 210693719,
        "sender_full_name": "nagisa",
        "timestamp": 1600649903
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>                 1      r002c:u\n                 3      r0225:u\n                38      r0425:u\n                88      r0825:u\n               129      r0e25:u\n</code></pre></div>",
        "id": 210693737,
        "sender_full_name": "nagisa",
        "timestamp": 1600649976
    },
    {
        "content": "<p>thanks!</p>",
        "id": 210694842,
        "sender_full_name": "eddyb",
        "timestamp": 1600652106
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> btw if you missed it, we found out empirically that <code>MSRC001_1020[8]</code> just turns all lock speculation off :P</p>",
        "id": 210695262,
        "sender_full_name": "eddyb",
        "timestamp": 1600652790
    },
    {
        "content": "<p>not just the more advanced kind (that has the overcounting problem)</p>",
        "id": 210695267,
        "sender_full_name": "eddyb",
        "timestamp": 1600652813
    },
    {
        "content": "<p>oh and yorick on IRC, who confirmed that (on Zen 2, guess they didn't want to accidentally nuke their Zen 1 machine)</p>",
        "id": 210695566,
        "sender_full_name": "eddyb",
        "timestamp": 1600653419
    },
    {
        "content": "<p>well, let's just say they saw some terrible slowdown when accidentally passing decimal to <code>wrmsr</code> which would set some of the lower bits I guess</p>",
        "id": 210695574,
        "sender_full_name": "eddyb",
        "timestamp": 1600653457
    },
    {
        "content": "<blockquote>\n<p>&lt;yorick&gt; <code>sudo wrmsr -a 0xc0011020 0xffffffffffffffff # for the adventurous</code></p>\n</blockquote>",
        "id": 210695630,
        "sender_full_name": "eddyb",
        "timestamp": 1600653563
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119581\">@mati865</span> <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> I bet neither of you has this motherboard <a href=\"https://github.com/mozilla/rr/issues/2034#issuecomment-695870532\">https://github.com/mozilla/rr/issues/2034#issuecomment-695870532</a></p>",
        "id": 210695723,
        "sender_full_name": "eddyb",
        "timestamp": 1600653716
    },
    {
        "content": "<blockquote>\n<p>Gigabyte AX370-Gaming K7 version F31</p>\n</blockquote>",
        "id": 210695965,
        "sender_full_name": "eddyb",
        "timestamp": 1600653971
    },
    {
        "content": "<p>found another motherboard (but that only sets bit 8) <a href=\"https://bugzilla.kernel.org/show_bug.cgi?id=196683#c573\">https://bugzilla.kernel.org/show_bug.cgi?id=196683#c573</a></p>",
        "id": 210696102,
        "sender_full_name": "eddyb",
        "timestamp": 1600654206
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> oh this is much cleaner than mine (uses tracepoints instead, no other changes to kernel state) <a href=\"https://gist.github.com/glandium/01d54cefdb70561b5f6675e08f2990f2\">https://gist.github.com/glandium/01d54cefdb70561b5f6675e08f2990f2</a></p>",
        "id": 210701308,
        "sender_full_name": "eddyb",
        "timestamp": 1600663667
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> the motherboard in  2700X box is Gigabyte X470 Gaming 7 WiFi rev 1.0.<br>\n1600 box has Asus X370 Prime Pro.</p>",
        "id": 210708798,
        "sender_full_name": "mati865",
        "timestamp": 1600673468
    },
    {
        "content": "<p>interesting, heh same chipset but different motherboard manufacturer. so I'm guessing it either requires a BIOS update or AMD never mandated those bits to be turned on (and whoever makes Gigabyte's BIOS just did it because it fixed some issue)</p>",
        "id": 210708990,
        "sender_full_name": "eddyb",
        "timestamp": 1600673599
    },
    {
        "content": "<p>I don't think motherboard matters here. This could be AGESA issue that affects some of the versions.</p>",
        "id": 210709141,
        "sender_full_name": "mati865",
        "timestamp": 1600673696
    },
    {
        "content": "<p>BTW Gigabyte's BIOS (on my X470) is buggy as hell.</p>",
        "id": 210709201,
        "sender_full_name": "mati865",
        "timestamp": 1600673759
    },
    {
        "content": "<p>F31 BIOS for Gigabyte AX370-Gaming K7 was released on 06/05/2019, so it's quite old.</p>",
        "id": 210709334,
        "sender_full_name": "mati865",
        "timestamp": 1600673869
    },
    {
        "content": "<p>there's been a bios release with AGESA ComboAm4PI 1.0.0.6 for my mobo recently</p>",
        "id": 210725715,
        "sender_full_name": "nagisa",
        "timestamp": 1600685452
    },
    {
        "content": "<p>so I could possibly verify the theory</p>",
        "id": 210725726,
        "sender_full_name": "nagisa",
        "timestamp": 1600685462
    },
    {
        "content": "<p>but yeah more likely than not its gonna be an agesa thing, mobo manufacturers don’t have much say in how CPU is set-up at boot.</p>",
        "id": 210725746,
        "sender_full_name": "nagisa",
        "timestamp": 1600685484
    },
    {
        "content": "<p>alright, sysadmin just installed the workaround (glandium's version not mine) in the Zen 1 EPYC (<a href=\"http://build.lyken.rs\">build.lyken.rs</a>)</p>",
        "id": 211025726,
        "sender_full_name": "eddyb",
        "timestamp": 1600877495
    },
    {
        "content": "<p>and results look great, at least in the artificial <code>rdpmc-bench</code>, will find out soon what <code>rustc -Z self-profile</code> is like</p>",
        "id": 211025866,
        "sender_full_name": "eddyb",
        "timestamp": 1600877537
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>43472092838\n43472092580\n43472092571\n43472092571\n43472092571\n43472092571\n43472092580\n43472092580\n43472092580\n43472092571\n</code></pre></div>",
        "id": 211027982,
        "sender_full_name": "eddyb",
        "timestamp": 1600878488
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> welcome to the future :D</p>",
        "id": 211028039,
        "sender_full_name": "eddyb",
        "timestamp": 1600878520
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Largest 7 variances:\n  ±0 instructions: 2064977 occurrences, or 99.96%\n  ±0.5 instructions: 794 occurrences, or 0.04%\n  ±1 instructions: 6 occurrences, or 0.00%\n  ±1.5 instructions: 2 occurrences, or 0.00%\n  ±2 instructions: `adt_dtorck_constraint()`\n  ±4.5 instructions: 2 occurrences, or 0.00%\n  ±73 instructions: `self_profile_alloc_query_strings()`\n</code></pre></div>",
        "id": 211028095,
        "sender_full_name": "eddyb",
        "timestamp": 1600878552
    },
    {
        "content": "<p>just had a cool idea: <code>instructions - uops</code> as a measure of \"microcode is executing\" (or maybe other things that expand but idk what exactly does)</p>",
        "id": 211030616,
        "sender_full_name": "eddyb",
        "timestamp": 1600879829
    },
    {
        "content": "<p>This is really incredible work <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>!</p>",
        "id": 211030891,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1600879955
    },
    {
        "content": "<p>couldn't have done it with all of the people who helped me test, <span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span>'s MSR hackery, glandium's much improved kernel module, etc.</p>",
        "id": 211030985,
        "sender_full_name": "eddyb",
        "timestamp": 1600880004
    },
    {
        "content": "<p>also I'm falling asleep for the day but I really wanted to see this in action</p>",
        "id": 211030999,
        "sender_full_name": "eddyb",
        "timestamp": 1600880015
    },
    {
        "content": "<p>if I look at just the second and third run I see this:</p>\n<div class=\"codehilite\"><pre><span></span><code>Largest 3 variances:\n  ±0 instructions: 2065670 occurrences, or 99.99%\n  ±0.5 instructions: 112 occurrences, or 0.01%\n  ±4.5 instructions: `write_crate_metadata()`\n</code></pre></div>",
        "id": 211082154,
        "sender_full_name": "eddyb",
        "timestamp": 1600912148
    },
    {
        "content": "<p>with regards to <code>write_crate_metadata</code>, my bet is it's writing out data, which might result in a partial <code>write</code> and take more <code>write</code> syscalls sometimes</p>",
        "id": 211082165,
        "sender_full_name": "eddyb",
        "timestamp": 1600912177
    },
    {
        "content": "<p>oh, I want to try <code>jemalloc</code>, since that was much noisier (before applying the workaround)</p>",
        "id": 211083143,
        "sender_full_name": "eddyb",
        "timestamp": 1600913328
    },
    {
        "content": "<p>jemalloc still looks like it introduces ASLR, huh</p>",
        "id": 211084097,
        "sender_full_name": "eddyb",
        "timestamp": 1600914625
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> just to check, do we use <code>jemalloc</code> in nightlies? because  that seems to largely invalidate the benefits of disabling ASLR</p>",
        "id": 211084644,
        "sender_full_name": "eddyb",
        "timestamp": 1600915313
    },
    {
        "content": "<p>or it otherwise introduces noise some other way</p>",
        "id": 211084687,
        "sender_full_name": "eddyb",
        "timestamp": 1600915329
    },
    {
        "content": "<p>On linux, yes</p>",
        "id": 211084696,
        "sender_full_name": "simulacrum",
        "timestamp": 1600915341
    },
    {
        "content": "<p>We've not checked for awhile if that's actually best though FWIW</p>",
        "id": 211084715,
        "sender_full_name": "simulacrum",
        "timestamp": 1600915371
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> oof so <a href=\"http://perf.rust-lang.org\">perf.rust-lang.org</a> has had unnecessary noise this entire time</p>",
        "id": 211084931,
        "sender_full_name": "eddyb",
        "timestamp": 1600915620
    },
    {
        "content": "<p>probably 100x-200x more with jemalloc than without, and that's <em>before</em> disabling <code>SpecLockMap</code></p>",
        "id": 211084956,
        "sender_full_name": "eddyb",
        "timestamp": 1600915659
    },
    {
        "content": "<p>Perf.rlo runs on Ubuntu 20.04?</p>",
        "id": 211095835,
        "sender_full_name": "mati865",
        "timestamp": 1600931304
    },
    {
        "content": "<p>no</p>",
        "id": 211131561,
        "sender_full_name": "simulacrum",
        "timestamp": 1600954487
    },
    {
        "content": "<p>we are on 18.04, though we could upgrade to 20.04 without too much hassle I suspect</p>",
        "id": 211131597,
        "sender_full_name": "simulacrum",
        "timestamp": 1600954511
    },
    {
        "content": "<p>(probably should, just haven't gotten around to it)</p>",
        "id": 211131606,
        "sender_full_name": "simulacrum",
        "timestamp": 1600954518
    },
    {
        "content": "<p>I think last benchmark without jemalloc was made on 18.04 already so I'd not expect big gains when compared to it.</p>",
        "id": 211142363,
        "sender_full_name": "mati865",
        "timestamp": 1600959066
    },
    {
        "content": "<p>I expect recent glibc to be on par for performance, not necessarily faster. But in my experience it's also more stable for things like RSS.</p>",
        "id": 211146503,
        "sender_full_name": "cuviper",
        "timestamp": 1600960710
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> in case you missed it, <code>jemalloc</code> has unpredictable instruction counts even with ASLR disabled and <code>SpecLockMap</code> disabled (the thing that blocked <code>rr</code> on Zen until recently)</p>",
        "id": 211146595,
        "sender_full_name": "eddyb",
        "timestamp": 1600960752
    },
    {
        "content": "<p>and idk if I want to spend time investigating <em>why</em></p>",
        "id": 211146621,
        "sender_full_name": "eddyb",
        "timestamp": 1600960764
    },
    {
        "content": "<p>but it potentially means 100x noise reduction on <a href=\"http://perf.rust-lang.org\">perf.rust-lang.org</a> (for <code>instructions:u</code> specifically) if we stop using jemalloc</p>",
        "id": 211146680,
        "sender_full_name": "eddyb",
        "timestamp": 1600960799
    },
    {
        "content": "<p>last time when I looked I could only find a PRNG with a constant seed</p>",
        "id": 211146809,
        "sender_full_name": "eddyb",
        "timestamp": 1600960836
    },
    {
        "content": "<p>I'll add that to my list of glibc's more stable things <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 211146868,
        "sender_full_name": "cuviper",
        "timestamp": 1600960860
    },
    {
        "content": "<p>if only I knew what was going on</p>",
        "id": 211146962,
        "sender_full_name": "eddyb",
        "timestamp": 1600960895
    },
    {
        "content": "<p>with glibc's or any other thread-safe allocator we found the problem to be atomics which turned into the whole <code>SpecLockMap</code> fiasco and eventually unlocked <code>rr</code> on Zen, lol</p>",
        "id": 211147097,
        "sender_full_name": "eddyb",
        "timestamp": 1600960938
    },
    {
        "content": "<p><span aria-label=\"water buffalo\" class=\"emoji emoji-1f403\" role=\"img\" title=\"water buffalo\">:water_buffalo:</span>🪒 (pretend that's a yak)</p>",
        "id": 211147272,
        "sender_full_name": "cuviper",
        "timestamp": 1600961017
    },
    {
        "content": "<p>but now that's solved and glibc's allocator is 100% deterministic AFAICT, whereas jemalloc is still around ±2 miillion instructions or so, which is about the same thing we get from ASLR</p>",
        "id": 211147278,
        "sender_full_name": "eddyb",
        "timestamp": 1600961019
    },
    {
        "content": "<p>including that thing where the <code>pid.to_string()</code> allocation (through its length) was effectively behaving like low-entropy ASLR</p>",
        "id": 211147448,
        "sender_full_name": "eddyb",
        "timestamp": 1600961093
    },
    {
        "content": "<p>any effect like that will funnel into <code>rustc</code>'s (pointer-keyed) <code>HashMap</code>s and cause the couple million instructions swing</p>",
        "id": 211147527,
        "sender_full_name": "eddyb",
        "timestamp": 1600961130
    },
    {
        "content": "<p>Have you compared syscalls?</p>",
        "id": 211147533,
        "sender_full_name": "cuviper",
        "timestamp": 1600961136
    },
    {
        "content": "<p>I have in the past while investigating the thing that turned out to be atomics</p>",
        "id": 211147573,
        "sender_full_name": "eddyb",
        "timestamp": 1600961154
    },
    {
        "content": "<p>but that was on the artificial microbenchmark</p>",
        "id": 211147651,
        "sender_full_name": "eddyb",
        "timestamp": 1600961166
    },
    {
        "content": "<p>I'm somewhat terrified of <code>strace</code>-ing an entire <code>rustc</code></p>",
        "id": 211147699,
        "sender_full_name": "eddyb",
        "timestamp": 1600961185
    },
    {
        "content": "<p>then again, as long as the output file is not hundreds of GBs, the server can handle it lol</p>",
        "id": 211147742,
        "sender_full_name": "eddyb",
        "timestamp": 1600961206
    },
    {
        "content": "<p>I know jemalloc likes <code>madvise</code> unused pages, which might cause some non-determinism whether the kernel uses that page for other things</p>",
        "id": 211147773,
        "sender_full_name": "cuviper",
        "timestamp": 1600961223
    },
    {
        "content": "<p>wouldn't reach into millions I don't think, if it was just pagefaults or something</p>",
        "id": 211147832,
        "sender_full_name": "eddyb",
        "timestamp": 1600961250
    },
    {
        "content": "<p>You could start with <code>strace -c</code> for an overview, then <code>strace -e foo</code> on interesting differences</p>",
        "id": 211147956,
        "sender_full_name": "cuviper",
        "timestamp": 1600961287
    },
    {
        "content": "<p>True, the work of filling page faults is all in the kernel, out of your counts</p>",
        "id": 211148032,
        "sender_full_name": "cuviper",
        "timestamp": 1600961328
    },
    {
        "content": "<p>nooot exactly</p>",
        "id": 211148075,
        "sender_full_name": "eddyb",
        "timestamp": 1600961355
    },
    {
        "content": "<p>No?</p>",
        "id": 211148099,
        "sender_full_name": "cuviper",
        "timestamp": 1600961371
    },
    {
        "content": "<p>I've empirically measured the <code>iret</code>s from page faults count in userspace, just like any other kernel -&gt; userspace <code>iret</code>s</p>",
        "id": 211148111,
        "sender_full_name": "eddyb",
        "timestamp": 1600961376
    },
    {
        "content": "<p>it's why I'm subtracting hardware interrupts from instructions :D</p>",
        "id": 211148121,
        "sender_full_name": "eddyb",
        "timestamp": 1600961386
    },
    {
        "content": "<p>page faults are just far more deterministic IME, so I haven't bothered yet</p>",
        "id": 211148197,
        "sender_full_name": "eddyb",
        "timestamp": 1600961416
    },
    {
        "content": "<p>Well ok, but you're already dealing with that.</p>",
        "id": 211148221,
        "sender_full_name": "cuviper",
        "timestamp": 1600961432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> the problem is the CPU is being too literal <em>sigh</em></p>",
        "id": 211148243,
        "sender_full_name": "eddyb",
        "timestamp": 1600961445
    },
    {
        "content": "<p><code>iret</code> <em>technically</em> retires in userspace even if the kernel executed it</p>",
        "id": 211148285,
        "sender_full_name": "eddyb",
        "timestamp": 1600961462
    },
    {
        "content": "<p>but I really wish they made an exception</p>",
        "id": 211148332,
        "sender_full_name": "eddyb",
        "timestamp": 1600961487
    },
    {
        "content": "<p>Yeah</p>",
        "id": 211148364,
        "sender_full_name": "cuviper",
        "timestamp": 1600961501
    },
    {
        "content": "<p>anyway I guess I can do a quick <code>perf -e faults</code> or w/e</p>",
        "id": 211148379,
        "sender_full_name": "eddyb",
        "timestamp": 1600961511
    },
    {
        "content": "<p>of course the strace diff is  tiny lol</p>",
        "id": 211148548,
        "sender_full_name": "eddyb",
        "timestamp": 1600961576
    },
    {
        "content": "<p>it's just pids/tids</p>",
        "id": 211148599,
        "sender_full_name": "eddyb",
        "timestamp": 1600961596
    },
    {
        "content": "<p>wait I'm missing <code>-f</code> ain't I /facepalm</p>",
        "id": 211148717,
        "sender_full_name": "eddyb",
        "timestamp": 1600961648
    },
    {
        "content": "<p>I also meant between glibc and jemalloc in <code>strace -c</code> counts, to look for systemic differences that may be your next clue (or red herring)</p>",
        "id": 211148874,
        "sender_full_name": "cuviper",
        "timestamp": 1600961717
    },
    {
        "content": "<p>interesting, I wouldn't have considered comparing across different builds like that</p>",
        "id": 211148935,
        "sender_full_name": "eddyb",
        "timestamp": 1600961741
    },
    {
        "content": "<p>wait what <em>process</em>? I thought this was a thread</p>",
        "id": 211149020,
        "sender_full_name": "eddyb",
        "timestamp": 1600961767
    },
    {
        "content": "<p>does strace call threads \"processes\"?</p>",
        "id": 211149070,
        "sender_full_name": "eddyb",
        "timestamp": 1600961792
    },
    {
        "content": "<p>Not sure, but in the kernel that is fuzzy -- <code>pid</code> is what we'd call a thread, and <code>tgid</code> is really the process</p>",
        "id": 211149409,
        "sender_full_name": "cuviper",
        "timestamp": 1600961946
    },
    {
        "content": "<p>heh</p>",
        "id": 211149438,
        "sender_full_name": "eddyb",
        "timestamp": 1600961959
    },
    {
        "content": "<p>okay this is better:<br>\n<code>delta &lt;(cat rustc-cf65d26e-jemalloc-strace-1 | sed 's/70715/CHILD/') &lt;(cat rustc-cf65d26e-jemalloc-strace-2 | sed 's/71351/CHILD/')</code></p>",
        "id": 211149529,
        "sender_full_name": "eddyb",
        "timestamp": 1600962002
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code> [pid CHILD] madvise(0x7fffdd46d000, 10309632, MADV_DONTNEED) = 0\n<span class=\"gd\">-[pid CHILD] mmap(NULL, 83886080, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x7fffd0900&gt;</span>\n [pid CHILD] madvise(0x7fffdb620000, 12288, MADV_FREE) = 0\n<span class=\"gd\">-[pid CHILD] madvise(0x7fffe30f8000, 65536, MADV_FREE) = 0</span>\n<span class=\"gi\">+[pid CHILD] madvise(0x7fffd70ea000, 172032, MADV_FREE) = 0</span>\n [pid CHILD] madvise(0x7fffea469000, 40960, MADV_FREE) = 0\n</code></pre></div>",
        "id": 211149714,
        "sender_full_name": "eddyb",
        "timestamp": 1600962089
    },
    {
        "content": "<p>hello darkness my old friend,</p>",
        "id": 211149742,
        "sender_full_name": "eddyb",
        "timestamp": 1600962106
    },
    {
        "content": "<p>that's weird, there's a literal <code>getrandom</code> call in <code>rustc</code> that doesn't affect instruction counts, I guess it's fixed length or something</p>",
        "id": 211149880,
        "sender_full_name": "eddyb",
        "timestamp": 1600962181
    },
    {
        "content": "<p>(it's making a temporary dir to write the output file in)</p>",
        "id": 211149921,
        "sender_full_name": "eddyb",
        "timestamp": 1600962202
    },
    {
        "content": "<p>oh no <a href=\"https://github.com/jemalloc/jemalloc/blob/dev/src/background_thread.c\">https://github.com/jemalloc/jemalloc/blob/dev/src/background_thread.c</a></p>",
        "id": 211150339,
        "sender_full_name": "eddyb",
        "timestamp": 1600962400
    },
    {
        "content": "<p>I forgot about the \"asynchronously GC whole slabs\" strategy...</p>",
        "id": 211150392,
        "sender_full_name": "eddyb",
        "timestamp": 1600962428
    },
    {
        "content": "<p>I should've thought about this, but also it's been like a decade lol</p>",
        "id": 211150420,
        "sender_full_name": "eddyb",
        "timestamp": 1600962440
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> if <code>jemalloc</code> is starting helper threads to do GC on, that's free nondeterminism and it might mean <code>jemalloc</code> is at odds with <a href=\"http://perf.rust-lang.org\">perf.rust-lang.org</a> :/</p>",
        "id": 211150619,
        "sender_full_name": "eddyb",
        "timestamp": 1600962536
    },
    {
        "content": "<p>Is there a tunable parameter for that?</p>",
        "id": 211150702,
        "sender_full_name": "cuviper",
        "timestamp": 1600962578
    },
    {
        "content": "<p>just found it heh</p>",
        "id": 211150716,
        "sender_full_name": "eddyb",
        "timestamp": 1600962586
    },
    {
        "content": "<p><a href=\"https://github.com/jemalloc/jemalloc/blob/259c5e3e8f4731f2e32ceac71c66f4bc7d078145/src/jemalloc.c#L1453-L1459\">https://github.com/jemalloc/jemalloc/blob/259c5e3e8f4731f2e32ceac71c66f4bc7d078145/src/jemalloc.c#L1453-L1459</a></p>",
        "id": 211150798,
        "sender_full_name": "eddyb",
        "timestamp": 1600962608
    },
    {
        "content": "<p>oh there's an even earlier difference:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-[pid CHILD] madvise(0x7fffe2569000, 20480, MADV_FREE) = 0</span>\n</code></pre></div>",
        "id": 211151019,
        "sender_full_name": "eddyb",
        "timestamp": 1600962702
    },
    {
        "content": "<p>okay I'm not sure it's starting a thread</p>",
        "id": 211151045,
        "sender_full_name": "eddyb",
        "timestamp": 1600962713
    },
    {
        "content": "<p>lol even in check mode we start a couple thread near the end and create a temp dir... to write nothing in?</p>",
        "id": 211151880,
        "sender_full_name": "eddyb",
        "timestamp": 1600963049
    },
    {
        "content": "<p>fascinating <a href=\"https://github.com/jemalloc/jemalloc/blob/dev/include/jemalloc/internal/pa.h\">https://github.com/jemalloc/jemalloc/blob/dev/include/jemalloc/internal/pa.h</a></p>",
        "id": 211155159,
        "sender_full_name": "eddyb",
        "timestamp": 1600964492
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> not liking the look of this <a href=\"https://github.com/jemalloc/jemalloc/blob/259c5e3e8f4731f2e32ceac71c66f4bc7d078145/src/arena.c#L398-L412\">https://github.com/jemalloc/jemalloc/blob/259c5e3e8f4731f2e32ceac71c66f4bc7d078145/src/arena.c#L398-L412</a></p>",
        "id": 211155424,
        "sender_full_name": "eddyb",
        "timestamp": 1600964607
    },
    {
        "content": "<p>it's either background thread or time-based :/</p>",
        "id": 211155536,
        "sender_full_name": "eddyb",
        "timestamp": 1600964648
    },
    {
        "content": "<p>oof <a href=\"http://jemalloc.net/jemalloc.3.html#opt.dirty_decay_ms\">http://jemalloc.net/jemalloc.3.html#opt.dirty_decay_ms</a></p>",
        "id": 211156119,
        "sender_full_name": "eddyb",
        "timestamp": 1600964906
    },
    {
        "content": "<blockquote>\n<p>A decay time of 0 causes all unused dirty pages to be purged immediately upon creation.</p>\n</blockquote>",
        "id": 211156172,
        "sender_full_name": "eddyb",
        "timestamp": 1600964926
    },
    {
        "content": "<p>oh! that's probably beter</p>",
        "id": 211156182,
        "sender_full_name": "eddyb",
        "timestamp": 1600964933
    },
    {
        "content": "<p><code>MALLOC_CONF=dirty_decay_ms:0</code> maaay have done it :D</p>",
        "id": 211156665,
        "sender_full_name": "eddyb",
        "timestamp": 1600965129
    },
    {
        "content": "<p>down to just ±7825 :D</p>",
        "id": 211157129,
        "sender_full_name": "eddyb",
        "timestamp": 1600965344
    },
    {
        "content": "<p>aaand with both decays turned off (<code>MALLOC_CONF=dirty_decay_ms:0,muzzy_decay_ms:0</code>) we're back to only two common totals differing by 9 instructions!</p>\n<div class=\"codehilite\"><pre><span></span><code>43103897635\n43103897635\n43103897644\n43103897635\n43103897644\n43103897644\n43103897635\n43103897635\n43103897644\n43103897635\n</code></pre></div>",
        "id": 211157666,
        "sender_full_name": "eddyb",
        "timestamp": 1600965605
    },
    {
        "content": "<p>that's it. that's the jemalloc non-determinism <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 211157744,
        "sender_full_name": "eddyb",
        "timestamp": 1600965648
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> thanks a lot for the <code>strace</code> suggestion, knowing that the first difference is <code>madvise(MADV_FREE)</code> helped a lot!</p>",
        "id": 211158008,
        "sender_full_name": "eddyb",
        "timestamp": 1600965789
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> what's the easiest way to gauge variance across the 3 runs or w/e that we get on <a href=\"http://perf.rust-lang.org\">perf.rust-lang.org</a> for a given benchmark?</p>",
        "id": 211158623,
        "sender_full_name": "eddyb",
        "timestamp": 1600966089
    },
    {
        "content": "<p>is the raw data easy to get at?</p>",
        "id": 211158648,
        "sender_full_name": "eddyb",
        "timestamp": 1600966103
    },
    {
        "content": "<p>For me yeah</p>",
        "id": 211158673,
        "sender_full_name": "simulacrum",
        "timestamp": 1600966114
    },
    {
        "content": "<p>I'm asking because I want to test this jemalloc config</p>",
        "id": 211158678,
        "sender_full_name": "eddyb",
        "timestamp": 1600966117
    },
    {
        "content": "<p>okay great that should be enough</p>",
        "id": 211158704,
        "sender_full_name": "eddyb",
        "timestamp": 1600966126
    },
    {
        "content": "<p>But we have at most 2 data points fwiw because of self profile overheads</p>",
        "id": 211158741,
        "sender_full_name": "simulacrum",
        "timestamp": 1600966144
    },
    {
        "content": "<p>oof</p>",
        "id": 211158777,
        "sender_full_name": "eddyb",
        "timestamp": 1600966159
    },
    {
        "content": "<p>I guess I can adjust that manually</p>",
        "id": 211158787,
        "sender_full_name": "simulacrum",
        "timestamp": 1600966163
    },
    {
        "content": "<p>(for a one off longer but more repetitions run)</p>",
        "id": 211158814,
        "sender_full_name": "simulacrum",
        "timestamp": 1600966180
    },
    {
        "content": "<p>we should bump it for smaller benchmarks</p>",
        "id": 211158828,
        "sender_full_name": "eddyb",
        "timestamp": 1600966186
    },
    {
        "content": "<p>It wouldn't be too hard</p>",
        "id": 211158833,
        "sender_full_name": "simulacrum",
        "timestamp": 1600966188
    },
    {
        "content": "<p>alright I'll prepare a PR then</p>",
        "id": 211158856,
        "sender_full_name": "eddyb",
        "timestamp": 1600966196
    },
    {
        "content": "<p>Sounds good, I can do the backend work today I think</p>",
        "id": 211158936,
        "sender_full_name": "simulacrum",
        "timestamp": 1600966214
    },
    {
        "content": "<p>this is not that urgent, I don't think I want to rely on <code>jemalloc</code> locally anyway, the first time I tried it I wanted to check if it fixed the noise I was seeing (which was actually coming from <code>SpecLockMap</code>)</p>",
        "id": 211159106,
        "sender_full_name": "eddyb",
        "timestamp": 1600966302
    },
    {
        "content": "<p>oops forgot to open as draft initially</p>",
        "id": 211172300,
        "sender_full_name": "eddyb",
        "timestamp": 1600972592
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> spent a bunch trying to describe what's going on, not sure how well this \"footnotes\" style works <a href=\"https://github.com/rust-lang/rust/pull/77162\">https://github.com/rust-lang/rust/pull/77162</a></p>",
        "id": 211172484,
        "sender_full_name": "eddyb",
        "timestamp": 1600972681
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> try build done, feel free to start poking at it <a href=\"https://github.com/rust-lang/rust/pull/77162#issuecomment-698541699\">https://github.com/rust-lang/rust/pull/77162#issuecomment-698541699</a></p>",
        "id": 211178652,
        "sender_full_name": "eddyb",
        "timestamp": 1600975643
    },
    {
        "content": "<p>yep will do so shortly</p>",
        "id": 211178664,
        "sender_full_name": "simulacrum",
        "timestamp": 1600975651
    },
    {
        "content": "<p>thanks! I'll probably go to sleep soon anyway, so no hurries</p>",
        "id": 211179319,
        "sender_full_name": "eddyb",
        "timestamp": 1600975982
    },
    {
        "content": "<p>(wait, that's not a word. that's hurry+worries)</p>",
        "id": 211179347,
        "sender_full_name": "eddyb",
        "timestamp": 1600975995
    },
    {
        "content": "<p>oh wow nice command</p>",
        "id": 211213540,
        "sender_full_name": "eddyb",
        "timestamp": 1601002848
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> at least e.g. <code>clap-rs</code> and <code>cranelift-codegen</code> behave similarly to what I saw myself locally</p>",
        "id": 211213763,
        "sender_full_name": "eddyb",
        "timestamp": 1601003119
    },
    {
        "content": "<p>oof, it's a performance regression</p>",
        "id": 211213853,
        "sender_full_name": "eddyb",
        "timestamp": 1601003257
    },
    {
        "content": "<p>hmpf both of those are less than 10 seconds</p>",
        "id": 211213926,
        "sender_full_name": "eddyb",
        "timestamp": 1601003339
    },
    {
        "content": "<p>maybe I'm wrong about that?</p>",
        "id": 211213931,
        "sender_full_name": "eddyb",
        "timestamp": 1601003346
    },
    {
        "content": "<p>10 seconds is a lot</p>",
        "id": 211213936,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601003353
    },
    {
        "content": "<p>maybe it's more probabilistic and I'm not reading the docs correctly?</p>",
        "id": 211213949,
        "sender_full_name": "eddyb",
        "timestamp": 1601003395
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> anyway it might be that <code>SpecLockMap</code> is obscuring the actual changes here (if any)</p>",
        "id": 211213997,
        "sender_full_name": "eddyb",
        "timestamp": 1601003419
    },
    {
        "content": "<p>These are all instruction counts? Not sure what you mean by seconds</p>",
        "id": 211214022,
        "sender_full_name": "simulacrum",
        "timestamp": 1601003470
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> the <code>jemalloc</code> thing we're disabling only kicks in after 10 seconds by default</p>",
        "id": 211214028,
        "sender_full_name": "eddyb",
        "timestamp": 1601003487
    },
    {
        "content": "<p>so for anything shorter, we shouldn't actually see a difference if I'm reading the docs right</p>",
        "id": 211214036,
        "sender_full_name": "eddyb",
        "timestamp": 1601003505
    },
    {
        "content": "<p>Oh yeah that'll affect almost none of the benchmarks</p>",
        "id": 211214037,
        "sender_full_name": "simulacrum",
        "timestamp": 1601003512
    },
    {
        "content": "<p>welp</p>",
        "id": 211214038,
        "sender_full_name": "eddyb",
        "timestamp": 1601003515
    },
    {
        "content": "<p>I can try toggling the msr bits tomorrow</p>",
        "id": 211214081,
        "sender_full_name": "simulacrum",
        "timestamp": 1601003533
    },
    {
        "content": "<p>should be as simple as running the Python script from the rr wiki</p>",
        "id": 211214094,
        "sender_full_name": "eddyb",
        "timestamp": 1601003560
    },
    {
        "content": "<p>so anyway yeah we might not need this workaround in most cases (it would be funny if all of the benchmarks you disabled were exactly the only ones which did need it :P)</p>",
        "id": 211214096,
        "sender_full_name": "eddyb",
        "timestamp": 1601003577
    },
    {
        "content": "<p>sorry I didn't explain this properly last night</p>",
        "id": 211214100,
        "sender_full_name": "eddyb",
        "timestamp": 1601003585
    },
    {
        "content": "<p>my libcore runs took somewhere between 13 and 24 seconds (I think the latter was with debug assertions enabled which I stopped using a while back), so they were seeing this</p>",
        "id": 211214205,
        "sender_full_name": "eddyb",
        "timestamp": 1601003752
    },
    {
        "content": "<p>If you want to kick off a run with exclude switched to include on a new try build that seems like not a bad idea</p>",
        "id": 211214273,
        "sender_full_name": "simulacrum",
        "timestamp": 1601003813
    },
    {
        "content": "<p>Might work on the same try commit, too, not sure</p>",
        "id": 211214305,
        "sender_full_name": "simulacrum",
        "timestamp": 1601003856
    },
    {
        "content": "<p>oooh, cool! does <code>queue</code> take the extra options or do I have to do separate try + <code>build</code>?</p>",
        "id": 211214319,
        "sender_full_name": "eddyb",
        "timestamp": 1601003879
    },
    {
        "content": "<p>I'll also take a look at the 10 second split</p>",
        "id": 211214386,
        "sender_full_name": "eddyb",
        "timestamp": 1601003937
    },
    {
        "content": "<p>on <a href=\"https://perf.rust-lang.org/index.html?absolute=true&amp;stat=wall-time\">https://perf.rust-lang.org/index.html?absolute=true&amp;stat=wall-time</a> probably, since it seems like the easiest place to do it</p>",
        "id": 211214401,
        "sender_full_name": "eddyb",
        "timestamp": 1601003972
    },
    {
        "content": "<p>or, hmm, I have <code>rustc-timing</code> or w/e checked out somewhere, I could also <code>jq</code> some random commit in that</p>",
        "id": 211214457,
        "sender_full_name": "eddyb",
        "timestamp": 1601004006
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> it's... just <code>packed-simd</code> and <code>style-servo</code>, and the former only for <code>incr-full</code> :/</p>",
        "id": 211215031,
        "sender_full_name": "eddyb",
        "timestamp": 1601004895
    },
    {
        "content": "<p>I tried with the existing try build but nothing happened (not even on the status page) <a href=\"https://github.com/rust-lang/rust/pull/77162#issuecomment-698702189\">https://github.com/rust-lang/rust/pull/77162#issuecomment-698702189</a></p>",
        "id": 211215652,
        "sender_full_name": "eddyb",
        "timestamp": 1601005774
    },
    {
        "content": "<p>won't bother, for just one benchmark, before <code>SpecLockMap</code> is disabled, anyway</p>",
        "id": 211215707,
        "sender_full_name": "eddyb",
        "timestamp": 1601005827
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I just had a \"fun\" idea: once my lands, the collector could run the equivalent of<br>\n<code>echo | rustc - --crate-type=lib --emit=dep-info -o /dev/null -Z self-profile -Z self-profile-counters=instructions</code><br>\n(and check stderr for any log messages)</p>",
        "id": 211215979,
        "sender_full_name": "eddyb",
        "timestamp": 1601006269
    },
    {
        "content": "<p>and refuse to run. so that we can tell if the workaround is ever reverted or something</p>",
        "id": 211216040,
        "sender_full_name": "eddyb",
        "timestamp": 1601006309
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I'm being informed <code>setarch -R</code> works without having to pass <code>x86_64</code> or w/e, I could've sworn I tried this, guess I didn't</p>",
        "id": 211218698,
        "sender_full_name": "eddyb",
        "timestamp": 1601010027
    },
    {
        "content": "<p>I tried it too. I think it's a recent addition</p>",
        "id": 211243359,
        "sender_full_name": "simulacrum",
        "timestamp": 1601031534
    },
    {
        "content": "<p>it's on our server from the start of the year (and <code>--version</code> says it's <code>util-linux 2.33.2</code>), but maybe this is unstable NixOS</p>",
        "id": 211245158,
        "sender_full_name": "eddyb",
        "timestamp": 1601032904
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> okay, just ran the rr script, I get \"Zen workaround in place\"</p>",
        "id": 211250775,
        "sender_full_name": "simulacrum",
        "timestamp": 1601036762
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> forgot to mention, I hope no collection is on-going?</p>",
        "id": 211250847,
        "sender_full_name": "eddyb",
        "timestamp": 1601036794
    },
    {
        "content": "<p>otherwise it will be partially denoised</p>",
        "id": 211250856,
        "sender_full_name": "eddyb",
        "timestamp": 1601036801
    },
    {
        "content": "<p>let me kill it and restart it</p>",
        "id": 211250866,
        "sender_full_name": "simulacrum",
        "timestamp": 1601036808
    },
    {
        "content": "<p>so already that run might show some improvements (even with just two data points, they shouldn't be farther apart than the hardware interrupt noise, which is going to be smaller for quicker benchmarks anyway)</p>",
        "id": 211251135,
        "sender_full_name": "eddyb",
        "timestamp": 1601036953
    },
    {
        "content": "<p>eh, it's a try build so might not be perfect</p>",
        "id": 211251334,
        "sender_full_name": "simulacrum",
        "timestamp": 1601037050
    },
    {
        "content": "<p>we don't really have a good way of assigning \"environment\" to commits yet, I've wanted to work on it but just haven't found time</p>",
        "id": 211251384,
        "sender_full_name": "simulacrum",
        "timestamp": 1601037078
    },
    {
        "content": "<p>the other thing we should look into is counting hw interrupts on the collection server, but we have to be careful</p>",
        "id": 211251427,
        "sender_full_name": "eddyb",
        "timestamp": 1601037109
    },
    {
        "content": "<p>I ended up reading about what <code>perf stat</code> does when running out of counters and it's... not great</p>",
        "id": 211251492,
        "sender_full_name": "eddyb",
        "timestamp": 1601037128
    },
    {
        "content": "<p>the multiplexing means it has to rely on time to give you an estimate</p>",
        "id": 211251519,
        "sender_full_name": "eddyb",
        "timestamp": 1601037145
    },
    {
        "content": "<p>which means it would add noise of its own</p>",
        "id": 211251535,
        "sender_full_name": "eddyb",
        "timestamp": 1601037156
    },
    {
        "content": "<p>now thankfully not everything we measure is a PMU counter</p>",
        "id": 211251559,
        "sender_full_name": "eddyb",
        "timestamp": 1601037176
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> hmm is there any way to see if the collections that have happened before/after are different in any way?</p>",
        "id": 211729388,
        "sender_full_name": "eddyb",
        "timestamp": 1601454752
    },
    {
        "content": "<p>before/after running the Zen workaround script I mean</p>",
        "id": 211729402,
        "sender_full_name": "eddyb",
        "timestamp": 1601454767
    },
    {
        "content": "<p>just got an idea... WSL2 might be virtualizing perf counters, right?</p>",
        "id": 211739396,
        "sender_full_name": "eddyb",
        "timestamp": 1601460865
    },
    {
        "content": "<p>because we might be able to support profiling rustc on windows, sort of</p>",
        "id": 211739491,
        "sender_full_name": "eddyb",
        "timestamp": 1601460946
    },
    {
        "content": "<p>I don't think we observed any significant difference, it'll be annoying if even possible to locate it I think</p>",
        "id": 211751332,
        "sender_full_name": "simulacrum",
        "timestamp": 1601468802
    },
    {
        "content": "<p>weeird</p>",
        "id": 211754001,
        "sender_full_name": "eddyb",
        "timestamp": 1601470250
    },
    {
        "content": "<p>though maybe it's hidden behind the interrupts</p>",
        "id": 211754023,
        "sender_full_name": "eddyb",
        "timestamp": 1601470264
    },
    {
        "content": "<p><span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>\n<div class=\"codehilite\"><pre><span></span><code>CpuModel::detect: vendor=&quot;AuthenticAMD&quot; family=15 model=107\nCpuModel::detect: known AMD CPU: K8 (Hammer)\n</code></pre></div>",
        "id": 211828225,
        "sender_full_name": "eddyb",
        "timestamp": 1601500556
    },
    {
        "content": "<p>and the hw interrupt counter looks functional</p>",
        "id": 211828332,
        "sender_full_name": "eddyb",
        "timestamp": 1601500604
    },
    {
        "content": "<p>anyway yeah uhh I can more easily get perfect results on Athlon 64 X2 than modern CPUs, that shouldn't be too surprising :P</p>",
        "id": 211828390,
        "sender_full_name": "eddyb",
        "timestamp": 1601500653
    },
    {
        "content": "<p>idk if it was worth spending an entire day trying to install linux from a windows install and no working boot from USB etc. etc.</p>",
        "id": 211829442,
        "sender_full_name": "eddyb",
        "timestamp": 1601501235
    },
    {
        "content": "<p>but hey if anyone needs to test something on K8</p>",
        "id": 211829546,
        "sender_full_name": "eddyb",
        "timestamp": 1601501289
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> so prepping my code for upstreaming (blergh delays), I think I'm going with <code>instructions-minus-irqs:u</code> for the combined thing that subtracts \"hardware interrupts\" from <code>instructions:u</code> (to account for post-interrupt-handling kernel-&gt;usermode <code>iret</code>s overcounting)</p>",
        "id": 213095459,
        "sender_full_name": "eddyb",
        "timestamp": 1602544660
    },
    {
        "content": "<p>(reasoning is \"irqs\" is shorter than even \"hw_ints\" and probably more easily recognizable without being technically wrong AFAIK)</p>",
        "id": 213095526,
        "sender_full_name": "eddyb",
        "timestamp": 1602544725
    },
    {
        "content": "<p>Ok</p>",
        "id": 213096188,
        "sender_full_name": "simulacrum",
        "timestamp": 1602545509
    },
    {
        "content": "<p>hopefully <code>-Z self-profile-counter=instructions-minus-irqs:u</code> is not too unwieldy</p>",
        "id": 213100139,
        "sender_full_name": "eddyb",
        "timestamp": 1602549910
    },
    {
        "content": "<p>maybe now that it's opt-in I can remove all the graceful fallback and make more things into normal error handling</p>",
        "id": 213100157,
        "sender_full_name": "eddyb",
        "timestamp": 1602549945
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/0n2BEXMWvhXpnjbKrd1EaDym/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/0n2BEXMWvhXpnjbKrd1EaDym/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/0n2BEXMWvhXpnjbKrd1EaDym/image.png\"></a></div>",
        "id": 213101920,
        "sender_full_name": "eddyb",
        "timestamp": 1602551153
    },
    {
        "content": "<p>final automation seems to be working</p>",
        "id": 213101924,
        "sender_full_name": "eddyb",
        "timestamp": 1602551161
    },
    {
        "content": "<p>this is so much better than editing the source for every test configuration <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> (especially since I've given up on measuring the raw 4-instruction <code>rdpmc</code> sequence, and all configurations are now pretty much in line with what one might observe in the final version)</p>",
        "id": 213102191,
        "sender_full_name": "eddyb",
        "timestamp": 1602551414
    },
    {
        "content": "<p>weird effect I keep seeing: the first run after some inactivity has 258 more instructions than the one after it. and this is exactly the same number across days and even different builds with several different changes</p>",
        "id": 213102458,
        "sender_full_name": "eddyb",
        "timestamp": 1602551741
    },
    {
        "content": "<p>maybe something to do with caching?</p>",
        "id": 213102653,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602551974
    },
    {
        "content": "<p>like disk caching I mean</p>",
        "id": 213102658,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602551985
    },
    {
        "content": "<p>maybe <code>write_all</code> for <code>libcore.rmeta</code> hits the retry loop <em>a lot</em> the first time, but then it just writes to the disk cache in RAM?</p>",
        "id": 213103535,
        "sender_full_name": "eddyb",
        "timestamp": 1602553126
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I wonder if you have some data for several consecutive runs that's like <code>x+250</code> followed by several <code>x±10</code>?</p>",
        "id": 213331520,
        "sender_full_name": "eddyb",
        "timestamp": 1602699522
    },
    {
        "content": "<p>like this is the 10 runs after I recompiled, a couple days ago</p>\n<div class=\"codehilite\"><pre><span></span><code>43357151428\n43357151170\n43357151170\n43357151170\n43357151170\n43357151179\n43357151179\n43357151182\n43357151170\n43357151170\n</code></pre></div>",
        "id": 213331615,
        "sender_full_name": "eddyb",
        "timestamp": 1602699579
    },
    {
        "content": "<p>note how uniform they are after the first one</p>",
        "id": 213331641,
        "sender_full_name": "eddyb",
        "timestamp": 1602699593
    },
    {
        "content": "<p>and the differences I'm seeing are <em>weird</em>, they look to be associated with allocating. then again, this isn't <code>jemalloc</code> so idk how relevant it is</p>",
        "id": 213331733,
        "sender_full_name": "eddyb",
        "timestamp": 1602699629
    },
    {
        "content": "<p>oh wait you're not subtracting hardware interrupts yet</p>",
        "id": 213331771,
        "sender_full_name": "eddyb",
        "timestamp": 1602699653
    },
    {
        "content": "<p>I get somewhere between ±500 and ±5000 for the raw <code>interrupts:u</code> counter, so yeah you might not even be able to tell whether <code>SpecLockMap</code> is disabled</p>",
        "id": 213332136,
        "sender_full_name": "eddyb",
        "timestamp": 1602699860
    },
    {
        "content": "<p>and the IO noise might be worse for any crate with dependencies</p>",
        "id": 213332175,
        "sender_full_name": "eddyb",
        "timestamp": 1602699884
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> <span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> haha an AMD person replied (though I missed it for almost two weeks) <a href=\"https://github.com/jlgreathouse/AMD_IBS_Toolkit/issues/5#issuecomment-702828173\">https://github.com/jlgreathouse/AMD_IBS_Toolkit/issues/5#issuecomment-702828173</a></p>",
        "id": 213333060,
        "sender_full_name": "eddyb",
        "timestamp": 1602700385
    },
    {
        "content": "<p>okay I'm done screwing around with the look of this <a href=\"https://gist.github.com/eddyb/7a0a55411441142765db6cfa41504e50\">https://gist.github.com/eddyb/7a0a55411441142765db6cfa41504e50</a></p>",
        "id": 213494037,
        "sender_full_name": "eddyb",
        "timestamp": 1602799597
    },
    {
        "content": "<p>replaced all of the <code>error!</code>s for reporting with proper <code>Result</code>s (I forget why I didn't do that in the first place, works great)</p>",
        "id": 213502225,
        "sender_full_name": "eddyb",
        "timestamp": 1602805928
    },
    {
        "content": "<p>now I can get messages like this from <code>rustc</code> (this one is from running under <code>perf stat</code> which takes up all 6 available perf counters):</p>\n<div class=\"codehilite\"><pre><span></span><code>warning: failed to create profiler: perf_event_mmap_page: no allocated hardware register (ran out?)\n</code></pre></div>",
        "id": 213502258,
        "sender_full_name": "eddyb",
        "timestamp": 1602805977
    },
    {
        "content": "<p>and in that situation it just doesn't profile at all AFAICT, which makes sense</p>",
        "id": 213502276,
        "sender_full_name": "eddyb",
        "timestamp": 1602805994
    },
    {
        "content": "<p>(since it requires a separate flag to turn it on, it seems better to not do any automatic fallback to <code>wall-time</code> or w/e)</p>",
        "id": 213502383,
        "sender_full_name": "eddyb",
        "timestamp": 1602806112
    },
    {
        "content": "<p>so the good news is that I was able to rebase all my stuff and have it \"just work\"</p>",
        "id": 213711043,
        "sender_full_name": "eddyb",
        "timestamp": 1603034455
    },
    {
        "content": "<p>the bad news is that I've spent the past couple days bisecting novel sources of variance</p>",
        "id": 213711050,
        "sender_full_name": "eddyb",
        "timestamp": 1603034469
    },
    {
        "content": "<p>we've got:</p>\n<ol>\n<li><a href=\"https://github.com/rust-lang/rust/issues/75600\">#75600</a> \"Improve codegen for <code>align_offset</code>\" by <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> (~±2, seems to have went away since)</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/75642\">#75642</a> \"Move doc comment parsing to rustc_lexer\" by <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> (~±100, specifically from <a href=\"https://github.com/rust-lang/rust/pull/75642/commits/ccbe94bf77e6a32fc9f31425bc820345be3143c0\">this commit</a>, I was able to work around it using <code>match_indices</code>)</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/73905\">#73905</a> \"Separate projection bounds and predicates\" by <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> (~±100, haven't looked deeper into it, and by far the largest PR)</li>\n</ol>",
        "id": 213711207,
        "sender_full_name": "eddyb",
        "timestamp": 1603034686
    },
    {
        "content": "<p>I have <em>no idea</em> where the variance is actually coming from. for the second PR, <code>memchr</code> is involved but it should be used before that PR, after that PR, and by my version, but the version that PR introduces (i.e. <code>contains</code>) is the only one that has any variance</p>",
        "id": 213711292,
        "sender_full_name": "eddyb",
        "timestamp": 1603034811
    },
    {
        "content": "<p>and I dread trying to minimize it in the third PR</p>",
        "id": 213711301,
        "sender_full_name": "eddyb",
        "timestamp": 1603034840
    },
    {
        "content": "<p>I doubt it's IO/syscall-related in any of the 3 cases, it must be something weirder than that</p>",
        "id": 213711314,
        "sender_full_name": "eddyb",
        "timestamp": 1603034870
    },
    {
        "content": "<p>Does <code>contains</code> work differently depending on the alignment? ie. to process multiple chars at once</p>",
        "id": 213711359,
        "sender_full_name": "Diggsey",
        "timestamp": 1603034894
    },
    {
        "content": "<p>thing is, ASLR is already off and nothing else actually varies</p>",
        "id": 213711363,
        "sender_full_name": "eddyb",
        "timestamp": 1603034911
    },
    {
        "content": "<p>the moment addresses are different, you instantly get ±1million in the total</p>",
        "id": 213711368,
        "sender_full_name": "eddyb",
        "timestamp": 1603034926
    },
    {
        "content": "<p>we've seen this happen with <code>pid.to_string()</code></p>",
        "id": 213711370,
        "sender_full_name": "eddyb",
        "timestamp": 1603034936
    },
    {
        "content": "<p>and <code>contains</code> should be using <code>memchr</code> just like <code>find</code> and <code>match_indices</code>, so it's probably down to how LLVM optimizes our version of <code>memchr</code> in each case</p>",
        "id": 213711389,
        "sender_full_name": "eddyb",
        "timestamp": 1603034982
    },
    {
        "content": "<p>anyway I'm not worried about that for now, since I was able to get rid of the variance, the elephant in the room is the trait system PR</p>",
        "id": 213711448,
        "sender_full_name": "eddyb",
        "timestamp": 1603035043
    },
    {
        "content": "<p>which I don't even think I can split into smaller parts because I can see some \"fix rebase\" commits</p>",
        "id": 213711464,
        "sender_full_name": "eddyb",
        "timestamp": 1603035059
    },
    {
        "content": "<p>this is the only blocker for upstreaming, and frankly given this unexpected development, we should probably track the numbers I've been staring at, on <code>perf.rust-lang.org</code></p>",
        "id": 213711528,
        "sender_full_name": "eddyb",
        "timestamp": 1603035127
    },
    {
        "content": "<p>though I don't know if the problem shows up on a smaller crate, compared to libcore itself. I just think we should have 5-10 runs or more of one crate and try to keep them produce at most 2-3 different values (off by 9 or w/e is the <code>write_all</code> iteration unit)</p>",
        "id": 213711560,
        "sender_full_name": "eddyb",
        "timestamp": 1603035214
    },
    {
        "content": "<p>at this point I've done 29 builds to find all 3 PRs and who knows if there aren't more, I can't exactly revert <a href=\"https://github.com/rust-lang/rust/issues/73905\">#73905</a> to check</p>",
        "id": 213711736,
        "sender_full_name": "eddyb",
        "timestamp": 1603035464
    },
    {
        "content": "<p>oh I wonder if <code>getrandom</code> ever gets called</p>",
        "id": 213716364,
        "sender_full_name": "eddyb",
        "timestamp": 1603042031
    },
    {
        "content": "<p>feel free to look at <a href=\"https://github.com/rust-lang/rust/pull/75728\">https://github.com/rust-lang/rust/pull/75728</a> which has a chance to improve or make things worse ^^</p>",
        "id": 213716613,
        "sender_full_name": "nagisa",
        "timestamp": 1603042382
    },
    {
        "content": "<p>oh, interesting. <em>ideally</em> it shouldn't affect things, but once I'm done with everything else I can try applying it locally</p>",
        "id": 213716635,
        "sender_full_name": "eddyb",
        "timestamp": 1603042420
    },
    {
        "content": "<p>nope, no <code>getrandom</code> syscalls. I guess if I'm playing with <code>strace</code> I might as well grab a few outputs and diff them</p>",
        "id": 213717162,
        "sender_full_name": "eddyb",
        "timestamp": 1603043252
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> Is this single-threaded code?</p>",
        "id": 213717229,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603043340
    },
    {
        "content": "<p>Nothing else running on the system at the same time?</p>",
        "id": 213717235,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603043344
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> it's reliable before <a href=\"https://github.com/rust-lang/rust/issues/73905\">#73905</a> and not after, there is something in that PR which leads into a codepath that runs a different number of instructions</p>",
        "id": 213717295,
        "sender_full_name": "eddyb",
        "timestamp": 1603043405
    },
    {
        "content": "<p>furthermore, it's isolated to the trait system (which I can see with <code>summarize aggregate</code>)</p>",
        "id": 213717310,
        "sender_full_name": "eddyb",
        "timestamp": 1603043422
    },
    {
        "content": "<p>128 instructions difference in <code>evaluate_obligation</code>, for example</p>",
        "id": 213717317,
        "sender_full_name": "eddyb",
        "timestamp": 1603043471
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/ti7EJcALzg922Mwhm_9SiBtN/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/ti7EJcALzg922Mwhm_9SiBtN/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/ti7EJcALzg922Mwhm_9SiBtN/image.png\"></a></div>",
        "id": 213717383,
        "sender_full_name": "eddyb",
        "timestamp": 1603043580
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> this is what I'm staring at (ignore the first entry in each set of 10, that's an unrelated effect I haven't dug into yet, possible some IO since it's the first run after a whole <code>rustc</code> build)</p>",
        "id": 213717392,
        "sender_full_name": "eddyb",
        "timestamp": 1603043615
    },
    {
        "content": "<p>the selected one is the <a href=\"https://github.com/rust-lang/rust/issues/73905\">#73905</a> merge commit</p>",
        "id": 213717400,
        "sender_full_name": "eddyb",
        "timestamp": 1603043633
    },
    {
        "content": "<p>Presumably you encountered a lot of issues like this whilst getting to this point: have all previous sources of non-determinism come from system-calls/IO? Or are there other ways non-determinism can get into the program?</p>",
        "id": 213717453,
        "sender_full_name": "Diggsey",
        "timestamp": 1603043683
    },
    {
        "content": "<p>there's one main source I'm aware of, that's likely <code>write_all</code> taking 1 (or very rarely 2) more iterations</p>",
        "id": 213717470,
        "sender_full_name": "eddyb",
        "timestamp": 1603043713
    },
    {
        "content": "<p>because this is writing a file (<code>libcore.rmeta</code>)</p>",
        "id": 213717473,
        "sender_full_name": "eddyb",
        "timestamp": 1603043722
    },
    {
        "content": "<p>there's been ASLR (including <code>log10(pid)</code> behaving like a source of entropy) and <code>SpecLockMap</code>, both are disabled rn</p>",
        "id": 213717525,
        "sender_full_name": "eddyb",
        "timestamp": 1603043774
    },
    {
        "content": "<p>I'm frankly <em>astonished</em> that you can get determinism across a kernel/user boundary.</p>",
        "id": 213717526,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603043777
    },
    {
        "content": "<p>But you didn't answer my earlier question. Single-threaded code, nothing else running on the system?</p>",
        "id": 213717529,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603043794
    },
    {
        "content": "<p>the entire measurement is on a single thread AFAIK (<code>rustc</code> usually has two threads but the main thread shouldn't be used for anything, we have the split for extra stack space and some TLS shenanigans)</p>",
        "id": 213717542,
        "sender_full_name": "eddyb",
        "timestamp": 1603043858
    },
    {
        "content": "<p>the very strong correlation between the compiler builds and the results tells me the rest of the system doesn't matter, or I somehow got lucky every time</p>",
        "id": 213717589,
        "sender_full_name": "eddyb",
        "timestamp": 1603043894
    },
    {
        "content": "<p>the microbenchmarks that I was using a few weeks ago, never showed any deviation on this server, from the expected exact count (once hardware interrupts were subtracted)</p>",
        "id": 213717603,
        "sender_full_name": "eddyb",
        "timestamp": 1603043937
    },
    {
        "content": "<p>compared to my Ivy Bridge laptop (and other Intel machines I guess) where it undercounts a lot</p>",
        "id": 213717614,
        "sender_full_name": "eddyb",
        "timestamp": 1603043955
    },
    {
        "content": "<p>sadly there is a possibility <a href=\"http://perf.rust-lang.org\">perf.rust-lang.org</a> may never have results this good, but we should try to reproduce them there</p>",
        "id": 213717627,
        "sender_full_name": "eddyb",
        "timestamp": 1603043987
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/213717526\">said</a>:</p>\n<blockquote>\n<p>I'm frankly <em>astonished</em> that you can get determinism across a kernel/user boundary.</p>\n</blockquote>\n<p>not sure what you mean about this. IO is still a consideration, and results in e.g. those extra 9 instructions in some totals</p>",
        "id": 213717708,
        "sender_full_name": "eddyb",
        "timestamp": 1603044088
    },
    {
        "content": "<p>but this is <em>userspace</em> instructions, varying due to a different syscall result</p>",
        "id": 213717713,
        "sender_full_name": "eddyb",
        "timestamp": 1603044111
    },
    {
        "content": "<p>I am not counting kernel instructions, nor can I on this server, as I have no root access<br>\n(ignoring the <code>iret</code>s that are IMO a design mistake in PMUs)</p>",
        "id": 213717766,
        "sender_full_name": "eddyb",
        "timestamp": 1603044158
    },
    {
        "content": "<p>frankly, if the <code>iret</code>s weren't \"broken\", several things would be improved</p>",
        "id": 213717858,
        "sender_full_name": "eddyb",
        "timestamp": 1603044289
    },
    {
        "content": "<p>there's no data on the server to suggest hyperthreads matter. it's possible my processes are <code>nice</code>'d to a point where it doesn't</p>",
        "id": 213717891,
        "sender_full_name": "eddyb",
        "timestamp": 1603044345
    },
    {
        "content": "<p>it's definitely all over the place on more consumer hardware :P</p>",
        "id": 213717933,
        "sender_full_name": "eddyb",
        "timestamp": 1603044374
    },
    {
        "content": "<p>Even if you're not counting kernel instructions, there are definitely cases where the kernel gives non-determinstic results for one process based on what's going on with other processes.</p>",
        "id": 213717940,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603044393
    },
    {
        "content": "<p>and apparently the reason Intel redacted certain perf counters out of their manuals has to do with hyperthreads so I would definitely not trust hyperthreads to be correct on Intel CPUs</p>",
        "id": 213717947,
        "sender_full_name": "eddyb",
        "timestamp": 1603044423
    },
    {
        "content": "<p>I doubt it's just Intel there.</p>",
        "id": 213717952,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603044442
    },
    {
        "content": "<p>/me wonders if it's possible you're ever hitting EINTR or ERESTARTSYS.</p>",
        "id": 213717962,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603044462
    },
    {
        "content": "<p>I mean that's what I assume the 9 instructions are from, <code>write_all</code> looping around once more</p>",
        "id": 213717969,
        "sender_full_name": "eddyb",
        "timestamp": 1603044480
    },
    {
        "content": "<p>(You'd see EINTR in an strace, but I don't remember if strace can handle ERESTARTSYS.)</p>",
        "id": 213718007,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603044485
    },
    {
        "content": "<p>I never bothered tracking it down because of how reliable it is</p>",
        "id": 213718011,
        "sender_full_name": "eddyb",
        "timestamp": 1603044495
    },
    {
        "content": "<p>i.e. I just get two possible totals, that are 9 instructions apart. that's fine</p>",
        "id": 213718015,
        "sender_full_name": "eddyb",
        "timestamp": 1603044515
    },
    {
        "content": "<p>you could always try disabling SMT right? In case it made a difference</p>",
        "id": 213718017,
        "sender_full_name": "Diggsey",
        "timestamp": 1603044519
    },
    {
        "content": "<p>I'm not sure I'm making myself clear enough :P</p>",
        "id": 213718020,
        "sender_full_name": "eddyb",
        "timestamp": 1603044534
    },
    {
        "content": "<p>there's code in 3 PRs which triggers something that doesn't show up before each of them</p>",
        "id": 213718036,
        "sender_full_name": "eddyb",
        "timestamp": 1603044555
    },
    {
        "content": "<p>and this is repeatable even if I go back and forth</p>",
        "id": 213718047,
        "sender_full_name": "eddyb",
        "timestamp": 1603044572
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> You're clear. What I'm trying to narrow down is the degree to which we need to worry about those PRs triggering some non-determinism that was already possible before and just didn't tend to happen.</p>",
        "id": 213718087,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603044604
    },
    {
        "content": "<p><em>shrug</em> I'm mostly complaining that I have to dig into it</p>",
        "id": 213718116,
        "sender_full_name": "eddyb",
        "timestamp": 1603044686
    },
    {
        "content": "<p>/me stares at it a bit himself.</p>",
        "id": 213718120,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603044696
    },
    {
        "content": "<p>in a way, all of these things are going to be like that</p>",
        "id": 213718126,
        "sender_full_name": "eddyb",
        "timestamp": 1603044702
    },
    {
        "content": "<p>/me is not getting sucked down this particular rabbit hole, but is up for staring a bit. :)</p>",
        "id": 213718130,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603044707
    },
    {
        "content": "<p>for example, both <code>contains</code> and <code>find</code>/<code>match_indices</code> call into our implementation of <code>memchr</code></p>",
        "id": 213718179,
        "sender_full_name": "eddyb",
        "timestamp": 1603044735
    },
    {
        "content": "<p>(this is from the second PR in my list of 3)</p>",
        "id": 213718180,
        "sender_full_name": "eddyb",
        "timestamp": 1603044745
    },
    {
        "content": "<p>but only <code>contains</code> causes anything weird</p>",
        "id": 213718182,
        "sender_full_name": "eddyb",
        "timestamp": 1603044755
    },
    {
        "content": "<p>it's possible LLVM optimizes it to some SIMD instruction that has broken PMU support</p>",
        "id": 213718190,
        "sender_full_name": "eddyb",
        "timestamp": 1603044780
    },
    {
        "content": "<p>and which just doesn't happen to be used anywhere else</p>",
        "id": 213718198,
        "sender_full_name": "eddyb",
        "timestamp": 1603044791
    },
    {
        "content": "<p>yeah, although it seems like a big coincidence that a problematic use of SIMD would suddenly be introduced now, having not existed anywhere in the compiler prior. Unless it's an issue that only occurs rarely and so requires a particularly hot code path or something...</p>",
        "id": 213718258,
        "sender_full_name": "Diggsey",
        "timestamp": 1603044865
    },
    {
        "content": "<p>AFAICT since <code>SpecLockMap</code> was disabled, I haven't seen anything weird for consecutive executions, just the 9 instructions difference</p>",
        "id": 213718260,
        "sender_full_name": "eddyb",
        "timestamp": 1603044867
    },
    {
        "content": "<p>and I've stared at dozens of runs already</p>",
        "id": 213718264,
        "sender_full_name": "eddyb",
        "timestamp": 1603044890
    },
    {
        "content": "<p>oh right there is <code>getrandom</code>, I just forgot to pass <code>-f</code> to <code>strace</code>. shouldn't matter though, it's just used for the name of a temp dir</p>",
        "id": 213718718,
        "sender_full_name": "eddyb",
        "timestamp": 1603045613
    },
    {
        "content": "<p>the only obvious difference I can see is <code>lseek(2, 0, SEEK_CUR)</code> because I was piping stderr into a file, but that's just under <code>strace</code></p>",
        "id": 213719365,
        "sender_full_name": "eddyb",
        "timestamp": 1603046653
    },
    {
        "content": "<p>oh ughh wasted some time because I didn't realize I was on the merge commit just before the noisy one (i.e. I didn't rebuild after finishing bisecting), so ofc the results weren't showing anything weird</p>",
        "id": 213719896,
        "sender_full_name": "eddyb",
        "timestamp": 1603047398
    },
    {
        "content": "<p>oh maybe the 9 instructions aren't from <code>write_all</code> but rather than the temporary directory it creates, since it has to take the raw <code>getrandom</code> output and produce <code>[a-zA-Z0-9}{6}</code> from it. very boring (and not what I'm after) but maybe I can also remove the variance from that entirely</p>",
        "id": 213721823,
        "sender_full_name": "eddyb",
        "timestamp": 1603049942
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/73905/files#diff-34d5893dd95fe09f9a0fd3341efacd1c21853bb34ba29d9d79bb9af26bb8a0a0R1170\">https://github.com/rust-lang/rust/pull/73905/files#diff-34d5893dd95fe09f9a0fd3341efacd1c21853bb34ba29d9d79bb9af26bb8a0a0R1170</a></p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-    ) -&gt; bool {</span>\n<span class=\"gi\">+    ) -&gt; smallvec::SmallVec&lt;[usize; 2]&gt; {</span>\n</code></pre></div>",
        "id": 213734805,
        "sender_full_name": "eddyb",
        "timestamp": 1603069536
    },
    {
        "content": "<p>so I just had a hunch and changed that to <code>Vec&lt;usize&gt;</code> and it seems less noisy</p>",
        "id": 213734810,
        "sender_full_name": "eddyb",
        "timestamp": 1603069556
    },
    {
        "content": "<p>with <code>SmallVec&lt;[usize; 2]&gt;</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>  ±64 instructions: `evaluate_obligation()`\n</code></pre></div>\n\n\n<p>with <code>Vec&lt;usize&gt;</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>  ±6.5 instructions: `evaluate_obligation()`\n  ±10 instructions: `evaluate_obligation()`\n</code></pre></div>",
        "id": 213735028,
        "sender_full_name": "eddyb",
        "timestamp": 1603069913
    },
    {
        "content": "<p>though that's not the best metric, it looks like it's almost 3 times better in the total. <code>SmallVec&lt;[usize; 4]&gt;</code> is in between. curious what <code>SmallVec&lt;[usize; 1]&gt;</code> does</p>",
        "id": 213735619,
        "sender_full_name": "eddyb",
        "timestamp": 1603070942
    },
    {
        "content": "<p><code>SmallVec&lt;[usize; 1]&gt;</code> seems to be on par with <code>SmallVec&lt;[usize; 2]&gt;</code>, or worse, so I'm guessing the problem is perhaps in the code that upgrades a <code>SmallVec</code> from inline to using the heap?</p>",
        "id": 213736593,
        "sender_full_name": "eddyb",
        "timestamp": 1603072414
    },
    {
        "content": "<p>heh, I just realized I can use <code>-Zself-profile-events=default,query-keys</code> to <em>see</em> which invocations exactly are adding noise (and then trace through the code)</p>",
        "id": 213777402,
        "sender_full_name": "eddyb",
        "timestamp": 1603110567
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/MIwcxFmE9YyOntvh7RXGh8FZ/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/MIwcxFmE9YyOntvh7RXGh8FZ/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/MIwcxFmE9YyOntvh7RXGh8FZ/image.png\"></a></div>",
        "id": 213780089,
        "sender_full_name": "eddyb",
        "timestamp": 1603112039
    },
    {
        "content": "<p>fun for the whole family</p>",
        "id": 213780151,
        "sender_full_name": "eddyb",
        "timestamp": 1603112050
    },
    {
        "content": "<p>OOI, do you rebuild between runs, or is it the same binary each time?</p>",
        "id": 213780520,
        "sender_full_name": "Diggsey",
        "timestamp": 1603112237
    },
    {
        "content": "<p>the variance is measured across the self-profile outputs of identical <code>rustc</code> commands with nothing else running in between</p>",
        "id": 213780576,
        "sender_full_name": "eddyb",
        "timestamp": 1603112275
    },
    {
        "content": "<p>lemme grab what it's supposed to look like</p>",
        "id": 213780647,
        "sender_full_name": "eddyb",
        "timestamp": 1603112296
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"295632\">@Diggory Blake</span> like, the frustrating thing is that I was able to get very reliable results before I rebased</p>",
        "id": 213780791,
        "sender_full_name": "eddyb",
        "timestamp": 1603112369
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Largest 3 variances:\n  ±0 instructions: 1851868 occurrences, or 99.98%\n  ±0.5 instructions: 400 occurrences, or 0.02%\n  ±4.5 instructions: `write_crate_metadata()`\n</code></pre></div>",
        "id": 213780803,
        "sender_full_name": "eddyb",
        "timestamp": 1603112380
    },
    {
        "content": "<p>some variation from this is what I would basically see every time</p>",
        "id": 213780822,
        "sender_full_name": "eddyb",
        "timestamp": 1603112389
    },
    {
        "content": "<p>the ±0.5 stuff I think I have no way of removing, but also it doesn't show up in the totals (AFAICT it's because I have to read two counters and if an interrupt comes in between, it will subtract 1 from one interval and add 1 to another)</p>",
        "id": 213780967,
        "sender_full_name": "eddyb",
        "timestamp": 1603112457
    },
    {
        "content": "<p>You mentioned that addresses changing would have a much bigger effect - but it it possible that there's one allocation whose size differs slightly between runs that is having a knock-on affect on a small number of later allocations?</p>",
        "id": 213780987,
        "sender_full_name": "Diggsey",
        "timestamp": 1603112464
    },
    {
        "content": "<p>the ±4.5 I used to think it's <code>write_all</code> but now I'm thinking it's the <code>getrandom</code> for the tempdir (it's very late in the compilation so it couldn't affect the trait system anyway)</p>",
        "id": 213781093,
        "sender_full_name": "eddyb",
        "timestamp": 1603112505
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"295632\">@Diggory Blake</span> if there's a difference it doesn't show up in <code>mmap</code> syscalls</p>",
        "id": 213781161,
        "sender_full_name": "eddyb",
        "timestamp": 1603112524
    },
    {
        "content": "<p>but that is a good point, I wonder if I can reliably trace <code>malloc</code></p>",
        "id": 213781206,
        "sender_full_name": "eddyb",
        "timestamp": 1603112543
    },
    {
        "content": "<p>right, I was thinking of a small allocation, eg. allocating 3 bytes instead of 4 where the alignment requirements mean that the impact is very limited</p>",
        "id": 213781259,
        "sender_full_name": "Diggsey",
        "timestamp": 1603112577
    },
    {
        "content": "<p>yeah that's a great point, gonna grab <code>ltrace</code> and try with that</p>",
        "id": 213781324,
        "sender_full_name": "eddyb",
        "timestamp": 1603112618
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"295632\">@Diggory Blake</span> then again there's this whole thing, I wonder what size classes that was touching, because that one was really visible in the total instructions (since it behaved like having ASLR enabled) <a href=\"https://twitter.com/eddyb_r/status/1294745328739127296\">https://twitter.com/eddyb_r/status/1294745328739127296</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/eddyb_r/status/1294745328739127296\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1291545948322226178/trAmIAt9_normal.jpg\"></a><p>expectation: disable ASLR, get deterministic pointer hashing\n\nreality: entropy vacuum that will be filled by anything, even something as insignificant as *checks notes* log₁₀(pid)?? <a href=\"https://t.co/4jwCe5snWM\">https://twitter.com/eddyb_r/status/1294745328739127296/photo/1</a></p><span>- 🇪dith 🅱️inch (@eddyb_r)</span><div class=\"twitter-image\"><a href=\"https://t.co/4jwCe5snWM\"><img src=\"https://pbs.twimg.com/media/EffbA0sX0AAqfJG.jpg:thumb\"></a></div></div></div>",
        "id": 213781729,
        "sender_full_name": "eddyb",
        "timestamp": 1603112815
    },
    {
        "content": "<p>maybe in that case the only reason it cascaded like that is because it was fed into a larger allocation (it was building up a file path)</p>",
        "id": 213781790,
        "sender_full_name": "eddyb",
        "timestamp": 1603112853
    },
    {
        "content": "<p>Yeah I have no idea, I'm just throwing ideas out there :P</p>",
        "id": 213781919,
        "sender_full_name": "Diggsey",
        "timestamp": 1603112906
    },
    {
        "content": "<p>no it's a great idea, usually with the big stuff it shows up in <code>strace</code> output but if it doesn't need to grow the size class that would make sense</p>",
        "id": 213781977,
        "sender_full_name": "eddyb",
        "timestamp": 1603112938
    },
    {
        "content": "<p>Another crazy idea: you could try dumping the process memory at various points, and bisect the issue that way</p>",
        "id": 213815865,
        "sender_full_name": "Diggsey",
        "timestamp": 1603127064
    },
    {
        "content": "<p>since dumps from separate runs should be identical AIUI</p>",
        "id": 213815930,
        "sender_full_name": "Diggsey",
        "timestamp": 1603127094
    },
    {
        "content": "<p>Another idea is running the whole thing under an application-level simulator (e.g. qemu).<br>\nIt gives maximum tracing/debugging capabilities, and if the variance comes from OS then app-level simulator should in theory still reproduce it.</p>\n<p>I'm not sure how is reading of perf counters implemented in app-level qemu, they will likely include the simulator instructions as well.<br>\nI'm also not sure the simulator itself doesn't use some randomized hash tables or something else introducing variance, this needs checking.</p>",
        "id": 213820053,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1603129095
    },
    {
        "content": "<p>Also, wouldn't it be more useful to ship the thing into production first and <em>then</em> hunt for these variances that are already vanishingly small? <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 213820267,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1603129207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> the problem is I already had it perfect</p>",
        "id": 213820430,
        "sender_full_name": "eddyb",
        "timestamp": 1603129300
    },
    {
        "content": "<p>and then I rebased :(</p>",
        "id": 213820439,
        "sender_full_name": "eddyb",
        "timestamp": 1603129306
    },
    {
        "content": "<p>and now the data I collected before rebasing looks like lies</p>",
        "id": 213820479,
        "sender_full_name": "eddyb",
        "timestamp": 1603129323
    },
    {
        "content": "<p>huh managed to use <code>ltrace</code> with <code>rustc</code>, I guess there's maybe just too many functions?</p>",
        "id": 213847892,
        "sender_full_name": "eddyb",
        "timestamp": 1603142469
    },
    {
        "content": "<p>I had to add <code>-l libc.so.6</code> (<code>-e malloc</code> also works)</p>",
        "id": 213847904,
        "sender_full_name": "eddyb",
        "timestamp": 1603142476
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"295632\">@Diggory Blake</span> so previously, and even now before I found what flags to pass, <code>ltrace -f ./.../rustc</code> wouldn't show anything (well, other than threads exiting) while <code>ltrace echo</code> worked just fine</p>",
        "id": 213851501,
        "sender_full_name": "eddyb",
        "timestamp": 1603144595
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> so this is unlikely to be in the initial implementation (unless necessary to remove some noise, but based on what I'm reading, it shouldn't be relevant), but it looks like we can handle per-thread instruction counting</p>",
        "id": 213852709,
        "sender_full_name": "eddyb",
        "timestamp": 1603145391
    },
    {
        "content": "<p>it will require more refactoring on the <code>rustc</code> side, because each thread will need its own counter</p>",
        "id": 213852769,
        "sender_full_name": "eddyb",
        "timestamp": 1603145407
    },
    {
        "content": "<p>(as opposed to just sharing a handle to one profiler)</p>",
        "id": 213852784,
        "sender_full_name": "eddyb",
        "timestamp": 1603145417
    },
    {
        "content": "<p>I missed the \"thread\" in \"measures the calling process/thread\" - so what I'm doing only applies to the \"main\" (well, second)<code>rustc</code> thread, meaning we can't just switch to this for <code>perf.rust-lang.org</code> right away (though it would be nice to start collecting <em>some</em> data. maybe only for <code>-check</code> runs?)</p>",
        "id": 213852994,
        "sender_full_name": "eddyb",
        "timestamp": 1603145559
    },
    {
        "content": "<p>there's some \"inherit\" functionality but I'm not sure how much I trust it to do something useful for us</p>",
        "id": 213853078,
        "sender_full_name": "eddyb",
        "timestamp": 1603145630
    },
    {
        "content": "<p>heh, for \"check\" runs I can confirm that they are recording <code>measureme</code> events from only one thread because my <code>summarize aggregate</code> refuses to work if that isn't the case</p>",
        "id": 213853273,
        "sender_full_name": "eddyb",
        "timestamp": 1603145757
    },
    {
        "content": "<p>heh <code>-l '*'</code> works just fine, why is that not the default?</p>",
        "id": 213853523,
        "sender_full_name": "eddyb",
        "timestamp": 1603145937
    },
    {
        "content": "<p>by \"works just fine\" I mean it's taking forever, this better be worth it</p>",
        "id": 213854500,
        "sender_full_name": "eddyb",
        "timestamp": 1603146592
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"295632\">@Diggory Blake</span> FWIW for <code>-l libc.so.6</code> I couldn't see any differences :/</p>",
        "id": 213854575,
        "sender_full_name": "eddyb",
        "timestamp": 1603146618
    },
    {
        "content": "<p>hence trying with <code>-l '*'</code> now</p>",
        "id": 213854628,
        "sender_full_name": "eddyb",
        "timestamp": 1603146657
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> <span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> I'm pretty sure I found a pagefault (or related) undocumented counter on Zen: <code>perf stat -e r0420:u,page-faults:u</code> seems to show slightly higher <code>r0420:u</code> than <code>page-faults:u</code> (which is a \"software\" event, i.e. the kernel tracks only what it wants to), no matter where I stop the process</p>",
        "id": 213861177,
        "sender_full_name": "eddyb",
        "timestamp": 1603151777
    },
    {
        "content": "<p>that event number... are you trolling?</p>",
        "id": 213861239,
        "sender_full_name": "cuviper",
        "timestamp": 1603151842
    },
    {
        "content": "<p>no! I literally tried <code>rffXX:u</code> for a bunch of undocumented values of XX and then replaced <code>ff</code> with individual bits to find the supported \"mask bits\"</p>",
        "id": 213861319,
        "sender_full_name": "eddyb",
        "timestamp": 1603151889
    },
    {
        "content": "<p>and this is the only one even close to the magnitude of <code>page-faults:u</code>, out of the ones I've tried</p>",
        "id": 213861352,
        "sender_full_name": "eddyb",
        "timestamp": 1603151939
    },
    {
        "content": "<p>I wonder if it's exactly that, or something correlated like ring transitions</p>",
        "id": 213861462,
        "sender_full_name": "cuviper",
        "timestamp": 1603152007
    },
    {
        "content": "<p>So... when your memory usage is too high, you'll get a lot of 420s</p>",
        "id": 213861467,
        "sender_full_name": "Diggsey",
        "timestamp": 1603152010
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> hmm good point, that would actually be perfect for subtracting <code>iret</code>s :D</p>",
        "id": 213861515,
        "sender_full_name": "eddyb",
        "timestamp": 1603152047
    },
    {
        "content": "<p>better than \"hardware interrupts\"</p>",
        "id": 213861525,
        "sender_full_name": "eddyb",
        "timestamp": 1603152058
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> ding ding ding! I got lucky with 40k instead of the usual 18k hardware interrupts and <code>r0420</code> also went up</p>",
        "id": 213861722,
        "sender_full_name": "eddyb",
        "timestamp": 1603152213
    },
    {
        "content": "<p>that is, I think I've got an outlier result that confirms <code>r0420:u</code> includes <code>r002c:u</code> (interrupts taken). maybe it's <code>iret</code>s because that would be amazing, I've been using \"interrupts taken\" as a proxy for a subset of the <code>iret</code>s</p>",
        "id": 213861881,
        "sender_full_name": "eddyb",
        "timestamp": 1603152354
    },
    {
        "content": "<p>I'm trying to think what else would be correlated, that makes sense to have some counter.</p>",
        "id": 213862271,
        "sender_full_name": "cuviper",
        "timestamp": 1603152648
    },
    {
        "content": "<p>like PTI, but I think that mitigation is only used on Intel</p>",
        "id": 213862286,
        "sender_full_name": "cuviper",
        "timestamp": 1603152666
    },
    {
        "content": "<p><code>r0420:u = r002c:u + page-faults:u + x</code> where <code>x</code> is <code>5</code> for a full execution of this <code>rustc</code> invocation but <code>1</code> if I stop it mid-way</p>",
        "id": 213862307,
        "sender_full_name": "eddyb",
        "timestamp": 1603152683
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> I want to test if subtracting <code>r0420:u</code> instead of <code>r002c:u</code> from <code>instructions:u</code> produces more reliable results, but I have <code>ltrace -l '*'</code> that's been running for over 2h now and I think I want to go to sleep and hope that it finishes <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 213864746,
        "sender_full_name": "eddyb",
        "timestamp": 1603154850
    },
    {
        "content": "<p>could always review a few rust-lang/rust PRs to pass the time :P</p>",
        "id": 213864838,
        "sender_full_name": "Diggsey",
        "timestamp": 1603154933
    },
    {
        "content": "<p><code>ltrace -l '*'</code> didn't finish and it's already up at 13GB of output</p>",
        "id": 213929676,
        "sender_full_name": "eddyb",
        "timestamp": 1603205139
    },
    {
        "content": "<p>oh and it just died because the SSH connection randomly decided to end</p>",
        "id": 213929827,
        "sender_full_name": "eddyb",
        "timestamp": 1603205187
    },
    {
        "content": "<p>it's okay, I went to it to stop it anyway, guess it didn't want to let me</p>",
        "id": 213930224,
        "sender_full_name": "eddyb",
        "timestamp": 1603205384
    },
    {
        "content": "<p>oh no did it disconnect because it finished and decided to actually print something, lol</p>",
        "id": 213930436,
        "sender_full_name": "eddyb",
        "timestamp": 1603205486
    },
    {
        "content": "<p>I guess even if that was the case, you'd have to do another whole run to compare? maybe not worth it</p>",
        "id": 213930685,
        "sender_full_name": "Diggsey",
        "timestamp": 1603205574
    },
    {
        "content": "<p>so yeah it finished and took 16h30m to do so</p>",
        "id": 213930896,
        "sender_full_name": "eddyb",
        "timestamp": 1603205649
    },
    {
        "content": "<p>oh well, if I want to do a second run, I've made copies of <code>rustc</code>, <code>librustc_driver-*.so</code> and <code>libstd-*.so</code>, so that I can just put them back to go back to that point, and do something else in the meanwhile <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 213932044,
        "sender_full_name": "eddyb",
        "timestamp": 1603206169
    },
    {
        "content": "<p>hmm subtracting the 420 counter removed the extra ~230 instructions from the first run after building a new <code>rustc</code>, so maybe those <em>were</em> page faults? I guess I never got to check with <code>perf stat -e page-faults:u</code></p>",
        "id": 213934163,
        "sender_full_name": "eddyb",
        "timestamp": 1603206927
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> if you have the time, could you run this a few times (including Ctrl+C-ing halfway through) on Zen 2?<br>\n<code>setarch -R perf stat -e r0420:u,r002c:u,page-faults:u ~/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rustc --edition=2018 --crate-type=lib --crate-name=core --emit=metadata ~/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/lib.rs</code></p>",
        "id": 213938396,
        "sender_full_name": "eddyb",
        "timestamp": 1603208830
    },
    {
        "content": "<p>hm what do you mean ctrl+cing halfway through?</p>",
        "id": 213938438,
        "sender_full_name": "simulacrum",
        "timestamp": 1603208852
    },
    {
        "content": "<p>just killing it</p>",
        "id": 213938449,
        "sender_full_name": "eddyb",
        "timestamp": 1603208858
    },
    {
        "content": "<p>there is a relationship that should remain no matter where you stop it</p>",
        "id": 213938474,
        "sender_full_name": "eddyb",
        "timestamp": 1603208872
    },
    {
        "content": "<p>what we're looking for is <code>r0420:u</code> being the sum of the other two counters, plus a very small extra count</p>",
        "id": 213938600,
        "sender_full_name": "eddyb",
        "timestamp": 1603208917
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> it doesn't even matter what you're compiling, really, or whether it's <code>rustc</code> at all, just needs to do enough varied work to be conclusive</p>",
        "id": 213938673,
        "sender_full_name": "eddyb",
        "timestamp": 1603208962
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/213862307\">said</a>:</p>\n<blockquote>\n<p><code>r0420:u = r002c:u + page-faults:u + x</code> where <code>x</code> is <code>5</code> for a full execution of this <code>rustc</code> invocation but <code>1</code> if I stop it mid-way</p>\n</blockquote>\n<p>^^ this is what I see on Zen 1</p>",
        "id": 213938724,
        "sender_full_name": "eddyb",
        "timestamp": 1603208987
    },
    {
        "content": "<p><a href=\"https://gist.github.com/Mark-Simulacrum/954400111cc9cbadcc0121a02e1da40e\">https://gist.github.com/Mark-Simulacrum/954400111cc9cbadcc0121a02e1da40e</a></p>",
        "id": 213938738,
        "sender_full_name": "simulacrum",
        "timestamp": 1603208993
    },
    {
        "content": "<p>nice, that first one is doable with the naked eye :P</p>",
        "id": 213938809,
        "sender_full_name": "eddyb",
        "timestamp": 1603209019
    },
    {
        "content": "<p>I don't even have to do the math, it's working :D</p>",
        "id": 213938833,
        "sender_full_name": "eddyb",
        "timestamp": 1603209035
    },
    {
        "content": "<p>but <code>x</code> is 2 <span aria-label=\"surprise\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"surprise\">:surprise:</span></p>",
        "id": 213938961,
        "sender_full_name": "Diggsey",
        "timestamp": 1603209109
    },
    {
        "content": "<p>it's just some count. I have no idea of what</p>",
        "id": 213938990,
        "sender_full_name": "eddyb",
        "timestamp": 1603209121
    },
    {
        "content": "<p>I wouldn't be surprised if it e.g. varies with kernel version. but it also doesn't matter</p>",
        "id": 213939140,
        "sender_full_name": "eddyb",
        "timestamp": 1603209176
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> so this counter is even more reliable than the documented \"interrupts taken\" (<code>r002c:u</code>), it removed one oddity I hadn't investigated (but was starting to suspect was related to pagefaults or something similar)</p>",
        "id": 213939171,
        "sender_full_name": "eddyb",
        "timestamp": 1603209191
    },
    {
        "content": "<p>That was from 3950x, I have a 3600x to test on if you'd like with a more recent kernel fwiw</p>",
        "id": 213939227,
        "sender_full_name": "simulacrum",
        "timestamp": 1603209221
    },
    {
        "content": "<p>so yeah uhh great I've <em>already</em> obsoleted my \"IRQs\" naming choice <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 213939240,
        "sender_full_name": "eddyb",
        "timestamp": 1603209227
    },
    {
        "content": "<p>5.4.0-42-generic on 3950x, 5.8.0-21-generic on my 3600x</p>",
        "id": 213939264,
        "sender_full_name": "simulacrum",
        "timestamp": 1603209239
    },
    {
        "content": "<p>it doesn't really matter, but feel free to if you're not doing anything else. at the end of the day, I trust the hardware to be reporting a useful value no matter what the kernel is doing</p>",
        "id": 213939369,
        "sender_full_name": "eddyb",
        "timestamp": 1603209264
    },
    {
        "content": "<p>I can also test on the perf collector 3600x which has a 4.15.0-70-generic</p>",
        "id": 213939370,
        "sender_full_name": "simulacrum",
        "timestamp": 1603209264
    },
    {
        "content": "<p>ok, yeah, then I'll move on to my next task :)</p>",
        "id": 213939396,
        "sender_full_name": "simulacrum",
        "timestamp": 1603209277
    },
    {
        "content": "<p>ah the perf collector would be better just in case that kernel does anything very weird</p>",
        "id": 213939408,
        "sender_full_name": "eddyb",
        "timestamp": 1603209283
    },
    {
        "content": "<p>but I doubt the hardware itself varies</p>",
        "id": 213939443,
        "sender_full_name": "eddyb",
        "timestamp": 1603209296
    },
    {
        "content": "<p>counts seem way higher fwiw</p>",
        "id": 213939628,
        "sender_full_name": "simulacrum",
        "timestamp": 1603209370
    },
    {
        "content": "<p><a href=\"https://gist.github.com/Mark-Simulacrum/e34a16bd675ec4746149b9bdc6ce0319\">https://gist.github.com/Mark-Simulacrum/e34a16bd675ec4746149b9bdc6ce0319</a></p>",
        "id": 213939657,
        "sender_full_name": "simulacrum",
        "timestamp": 1603209385
    },
    {
        "content": "<p>it is going to vary with the nightly version too</p>",
        "id": 213939662,
        "sender_full_name": "eddyb",
        "timestamp": 1603209387
    },
    {
        "content": "<p>oh, that was a different nightly, for sure</p>",
        "id": 213939681,
        "sender_full_name": "simulacrum",
        "timestamp": 1603209399
    },
    {
        "content": "<p>this one behaves like the machine I tested on heh</p>",
        "id": 213939731,
        "sender_full_name": "eddyb",
        "timestamp": 1603209431
    },
    {
        "content": "<p>or the rustc version. whichever affects it more</p>",
        "id": 213939766,
        "sender_full_name": "eddyb",
        "timestamp": 1603209448
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> thanks a lot, I'll try to see how to integrate it!</p>",
        "id": 213939833,
        "sender_full_name": "eddyb",
        "timestamp": 1603209478
    },
    {
        "content": "<p>kind of mad that I didn't go looking for an undocumented \"all interrupts\" or \"all <code>iret</code>s\" or w/e it is, earlier</p>",
        "id": 213939932,
        "sender_full_name": "eddyb",
        "timestamp": 1603209506
    },
    {
        "content": "<p>recap:<br>\ngood news: found a counter that works on both Zen 1 and Zen 2, and which removes the ~230 extra instructions from \"initial runs\"<br>\nbad news: it's undocumented, I already decided to call the documented one \"IRQs\" (whereas this one includes \"exceptions\" like page faults, and may even be all <code>iret</code>s or something), no idea if there's an equivalent on Intel or older AMD, <em>and</em> it doesn't solve the noise I'm seeing introduced by the big trait system PR (which was my main concern)</p>",
        "id": 213940959,
        "sender_full_name": "eddyb",
        "timestamp": 1603209857
    },
    {
        "content": "<p>I notice that PR adds some calls to <code>ensure_sufficient_stack</code> - do you think segmented stacks could cause weirdness?</p>",
        "id": 213942962,
        "sender_full_name": "Diggsey",
        "timestamp": 1603210734
    },
    {
        "content": "<p>hmm, given that page faults are very reliable most of the time I might defer the 420 stuff for later, and/or put it under a counter named <code>instructions-minus-r0420:u</code> and not bother giving it a name (I could probably even make this parse the number at runtime heh. probably not worth it though)</p>",
        "id": 213943566,
        "sender_full_name": "eddyb",
        "timestamp": 1603211006
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"295632\">@Diggory Blake</span> oh huh, that's an interesting point. they shouldn't, but who knows. at least I could try adding just those calls and nothing else</p>",
        "id": 213943682,
        "sender_full_name": "eddyb",
        "timestamp": 1603211057
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/213929827\">said</a>:</p>\n<blockquote>\n<p>oh and it just died because the SSH connection randomly decided to end</p>\n</blockquote>\n<p>consider using <code>mosh</code> and/or <code>tmux</code></p>",
        "id": 213960515,
        "sender_full_name": "cuviper",
        "timestamp": 1603218463
    },
    {
        "content": "<p>+1 to mosh, although it breaks terminal scrollback :(</p>",
        "id": 213960664,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603218513
    },
    {
        "content": "<p>yeah if <code>mosh</code> supported scrollback I would've switched to it ages ago</p>",
        "id": 213960710,
        "sender_full_name": "eddyb",
        "timestamp": 1603218540
    },
    {
        "content": "<p>in this case I didn't lose anything, and I've seen this before lol, with 4h-long commands that don't output anything during that 4h</p>",
        "id": 213960748,
        "sender_full_name": "eddyb",
        "timestamp": 1603218569
    },
    {
        "content": "<p>can probably prevent it by typing something (or just pressing enter) periodically while the command is running</p>",
        "id": 213960785,
        "sender_full_name": "eddyb",
        "timestamp": 1603218592
    },
    {
        "content": "<p>that's why I use <code>mosh</code> and <code>tmux</code> together</p>",
        "id": 213960867,
        "sender_full_name": "cuviper",
        "timestamp": 1603218619
    },
    {
        "content": "<p>thankfully it's rare that I do this and it's usually pointless anyway <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 213960950,
        "sender_full_name": "eddyb",
        "timestamp": 1603218670
    },
    {
        "content": "<p>last time I had to cut up the output into much smaller chunks to even diff it</p>",
        "id": 213960998,
        "sender_full_name": "eddyb",
        "timestamp": 1603218699
    },
    {
        "content": "<p>(split the <code>__tls_get_addr</code> discussion into its own topic)</p>",
        "id": 213974639,
        "sender_full_name": "eddyb",
        "timestamp": 1603225374
    },
    {
        "content": "<p>the important takeaway is I just need to avoid tracing <code>__tls_get_addr</code> if I use <code>ltrace</code> again</p>",
        "id": 213974678,
        "sender_full_name": "eddyb",
        "timestamp": 1603225394
    },
    {
        "content": "<p>oh wait, <code>ltrace</code> defaults to <code>-e @MAIN</code> so maybe because everything is in <code>libstd-*.so</code> and <code>librustc_driver-*.so</code>, not in <code>rustc</code> itself, that's why it can't trace <code>rustc</code> with no filters specified?</p>",
        "id": 213979536,
        "sender_full_name": "eddyb",
        "timestamp": 1603228046
    },
    {
        "content": "<p>and I can pass <code>-L</code> to remove the <code>-e @MAIN</code></p>",
        "id": 213980070,
        "sender_full_name": "eddyb",
        "timestamp": 1603228320
    },
    {
        "content": "<p>oh, I can't have both <code>-l '*'</code> and <code>-e '-__tls_get_addr'</code>, nor do I need them I don't think, looks like I only need the second one</p>",
        "id": 213980723,
        "sender_full_name": "eddyb",
        "timestamp": 1603228677
    },
    {
        "content": "<p>making far more progress with manual \"timers\" than I did with <code>ltrace</code> (i.e. I'm narrowing down where the noise is, and it does seem to be coming from one small area of the trait system, somewhere during winnowing, i.e. deduplicating/merging candidates to avoid ambiguity)</p>",
        "id": 214005986,
        "sender_full_name": "eddyb",
        "timestamp": 1603252654
    },
    {
        "content": "<p>oh no adding a \"timer\" to <code>candidate_should_be_dropped_in_favor_of</code> makes the results noiseless again, that's not what I want to see while tracking down the noise</p>",
        "id": 214006981,
        "sender_full_name": "eddyb",
        "timestamp": 1603254018
    },
    {
        "content": "<p>so possibly part of the problem is that the function I added a \"timer\" for is nested in two loops (it's called for every possible pair of two elements in a <code>Vec&lt;Candidate&gt;</code> to try and deduplicate them), trying with just around the loop now</p>",
        "id": 214046482,
        "sender_full_name": "eddyb",
        "timestamp": 1603285617
    },
    {
        "content": "<p>yeah it's entirely within this <a href=\"https://github.com/rust-lang/rust/blame/08e2d4616613716362b4b49980ff303f2b9ae654/compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs#L174-L197\">https://github.com/rust-lang/rust/blame/08e2d4616613716362b4b49980ff303f2b9ae654/compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs#L174-L197</a></p>",
        "id": 214048005,
        "sender_full_name": "eddyb",
        "timestamp": 1603286438
    },
    {
        "content": "<p>okay I see <code>candidate_should_be_dropped_in_favor_of</code> was modified a bunch in <a href=\"https://github.com/rust-lang/rust/issues/73905\">#73905</a>, and it looks to be mostly isolated from other changes, so it's plausible I could try reverting most of the changes in that function on top of current master</p>",
        "id": 214073731,
        "sender_full_name": "eddyb",
        "timestamp": 1603296572
    },
    {
        "content": "<p>\"every possible pair of two elements\" to try to dedup sounds like an algorithmic problem. Could that use a hash set?</p>",
        "id": 214075491,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603297209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> likely not worth it, it bails the moment it stops finding duplicates, and these are usually a small number</p>",
        "id": 214075721,
        "sender_full_name": "eddyb",
        "timestamp": 1603297306
    },
    {
        "content": "<p>Is this a case where the code is assuming that there's only two or three possibilities, so it would be faster to just check them by hand?</p>",
        "id": 214075736,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603297309
    },
    {
        "content": "<p>Ah.</p>",
        "id": 214075745,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603297313
    },
    {
        "content": "<p><del>huh I made a mistake the other day using <code>#[inline(always)]</code> where <code>#[inline(never)]</code> would've done what I wanted (I should've tried both)</del></p>",
        "id": 214134160,
        "sender_full_name": "eddyb",
        "timestamp": 1603329337
    },
    {
        "content": "<p><del>as in, it's inlining that was removing the noise, <em>not</em> not inlining</del></p>",
        "id": 214134208,
        "sender_full_name": "eddyb",
        "timestamp": 1603329373
    },
    {
        "content": "<p>and it tricked me again, none of the relevant timers show up in the result <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 214134309,
        "sender_full_name": "eddyb",
        "timestamp": 1603329568
    },
    {
        "content": "<p>wrapping the noise-removing timer in <code>if black_box(false) {...}</code> (which I should've done earlier) removes the effect so I'm now pretty sure it's the actual instructions that do something, not (just) LLVM optimizations</p>",
        "id": 214136737,
        "sender_full_name": "eddyb",
        "timestamp": 1603332583
    },
    {
        "content": "<p>a dummy <code>﻿cpuid(0)﻿</code> seems to be causing consistent results now</p>",
        "id": 214137407,
        "sender_full_name": "eddyb",
        "timestamp": 1603333393
    },
    {
        "content": "<p>the funny thing is that I could even check whether profiling is enabled and only then run <code>cpuid(0)</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 214137695,
        "sender_full_name": "eddyb",
        "timestamp": 1603333731
    },
    {
        "content": "<p>wow even just <code>mfence</code> works, that's... weird</p>",
        "id": 214140857,
        "sender_full_name": "eddyb",
        "timestamp": 1603338381
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> <span class=\"user-mention\" data-user-id=\"295632\">@Diggory Blake</span> so yeah idk what it is but I'm pretty sure it has nothing to do with the rest of the system, all the <code>ltrace</code>-ing was a waste of time sadly, just a very weird interaction and <code>mfence</code> seems to be enough to block it (there's still a difference of 2 instructions sometimes but it's only in one execution so I'll take that over the mess I was seeing before)</p>",
        "id": 214141693,
        "sender_full_name": "eddyb",
        "timestamp": 1603339746
    },
    {
        "content": "<p>Huh, the fact that <code>mfence</code> fixes it suggests that it's related to concurrency. I wonder if we have a compare-exchange loop somewhere in the compiler? That could easily be non-deterministic, and an mfence could help synchronize stuff and avoid that being a problem...</p>",
        "id": 214167790,
        "sender_full_name": "Diggsey",
        "timestamp": 1603362308
    },
    {
        "content": "<p>rustc uses parking_lot for  some mutexes, but when using <code>-Ccodegen-units=1</code> there should not be contention on any lock when not using parallel rustc. It is possible that there is a bit of overlap between <code>std::thread::spawn</code> and <code>join</code> for the main compiler thread where a lock is acquired.</p>",
        "id": 214179292,
        "sender_full_name": "bjorn3",
        "timestamp": 1603369759
    },
    {
        "content": "<p>lol. this is in the trait system, there's no multithreading going on</p>",
        "id": 214203032,
        "sender_full_name": "eddyb",
        "timestamp": 1603380290
    },
    {
        "content": "<p>the trait system doesn't access any data protected by a mutex or use anything like <code>lazy_static</code>? Even with <code>-Ccodegen-units=1</code> and therefore no contention, I think compare/exchange is allowed to fail spuriously right?</p>",
        "id": 214205077,
        "sender_full_name": "Diggsey",
        "timestamp": 1603381108
    },
    {
        "content": "<p>In non-parallel rustc the trait system doesn't support multithreading.</p>",
        "id": 214205194,
        "sender_full_name": "bjorn3",
        "timestamp": 1603381166
    },
    {
        "content": "<p>There doesn't seem to be any use of <code>lazy_static</code> in rustc. Everything uses <code>thread_local!</code> or the <code>Session</code>.</p>",
        "id": 214205462,
        "sender_full_name": "bjorn3",
        "timestamp": 1603381271
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"295632\">@Diggory Blake</span> keep in mind that before that PR, which doesn't touch any kind of synchronization primitives I can see, <em>this problem did not exist</em></p>",
        "id": 214229958,
        "sender_full_name": "eddyb",
        "timestamp": 1603391925
    },
    {
        "content": "<p>there's the original main thread that is doing nothing except waiting for the child thread (the actual compiler thread), and that second thread is the only one getting measured</p>",
        "id": 214230051,
        "sender_full_name": "eddyb",
        "timestamp": 1603391978
    },
    {
        "content": "<p>there's some stuff protected by atomics and rwlocks but there is 0 contention and they behave fully deterministically</p>",
        "id": 214230161,
        "sender_full_name": "eddyb",
        "timestamp": 1603392011
    },
    {
        "content": "<p>at least for what I'm measuring</p>",
        "id": 214230197,
        "sender_full_name": "eddyb",
        "timestamp": 1603392028
    },
    {
        "content": "<p>not to mention that I don't see any of those locks being anywhere near this code (and if they were a problem, I would've seen it before)</p>",
        "id": 214230259,
        "sender_full_name": "eddyb",
        "timestamp": 1603392062
    },
    {
        "content": "<p>I doubt uncontended CAS can spuriously fail, but if it did, I'm pretty sure I'd see it somewhere</p>",
        "id": 214230432,
        "sender_full_name": "eddyb",
        "timestamp": 1603392149
    },
    {
        "content": "<p>I have a suspicion this might be another thing like <code>SpecLockMap</code> but even more obscure</p>",
        "id": 214230580,
        "sender_full_name": "eddyb",
        "timestamp": 1603392235
    },
    {
        "content": "<p>and that LLVM optimizations perhaps result in some instructions being used which cause this to happen</p>",
        "id": 214230677,
        "sender_full_name": "eddyb",
        "timestamp": 1603392270
    },
    {
        "content": "<p>What happens when you use rr? If it is something like <code>SpecLockMap</code> it should crash, right? If it isn't the differing instruction count should be reproducable in it.</p>",
        "id": 214230782,
        "sender_full_name": "bjorn3",
        "timestamp": 1603392325
    },
    {
        "content": "<p>oh hmm good point, I'll have to note that down</p>",
        "id": 214230961,
        "sender_full_name": "eddyb",
        "timestamp": 1603392399
    },
    {
        "content": "<p>for now I want to focus on summarizing the important stuff that happened and the MVP</p>",
        "id": 214230986,
        "sender_full_name": "eddyb",
        "timestamp": 1603392412
    },
    {
        "content": "<p>open the PRs, etc. - I want to be done with the initial version at least, so that any work can happen async from the contract that's paying for this</p>",
        "id": 214231141,
        "sender_full_name": "eddyb",
        "timestamp": 1603392480
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> huh the new paged <code>measureme</code> serialization is really cool, when did that happen?</p>",
        "id": 214266547,
        "sender_full_name": "eddyb",
        "timestamp": 1603417817
    },
    {
        "content": "<p>also has <code>rustc</code> been updated to use it?</p>",
        "id": 214266554,
        "sender_full_name": "eddyb",
        "timestamp": 1603417827
    },
    {
        "content": "<p>oh wow <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> is back?</p>",
        "id": 214266900,
        "sender_full_name": "eddyb",
        "timestamp": 1603418285
    },
    {
        "content": "<p>oh no I'll be blocked on <a href=\"https://github.com/rust-lang/rust/issues/77398\">#77398</a></p>",
        "id": 214266935,
        "sender_full_name": "eddyb",
        "timestamp": 1603418398
    },
    {
        "content": "<p>though it looks like <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> has got that down now</p>",
        "id": 214267034,
        "sender_full_name": "eddyb",
        "timestamp": 1603418501
    },
    {
        "content": "<p>I guess it means even if I had a <code>measureme</code> PR ready in the past few weeks I wouldn't have been able to land the <code>rust-lang/rust</code> side of it</p>",
        "id": 214267108,
        "sender_full_name": "eddyb",
        "timestamp": 1603418611
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> this looks like it worked <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>, is anything else blocking the PR? <a href=\"https://github.com/rust-lang/rust/pull/77398#issuecomment-714869011\">https://github.com/rust-lang/rust/pull/77398#issuecomment-714869011</a></p>",
        "id": 214268458,
        "sender_full_name": "eddyb",
        "timestamp": 1603420930
    },
    {
        "content": "<p>I want to check on the self profile visualization which is almost certainly broken</p>",
        "id": 214268464,
        "sender_full_name": "simulacrum",
        "timestamp": 1603420963
    },
    {
        "content": "<p>But that should be an easy fix</p>",
        "id": 214268467,
        "sender_full_name": "simulacrum",
        "timestamp": 1603420980
    },
    {
        "content": "<p>aww</p>",
        "id": 214268468,
        "sender_full_name": "eddyb",
        "timestamp": 1603420981
    },
    {
        "content": "<p>I expect to r+ tomorrow</p>",
        "id": 214268472,
        "sender_full_name": "simulacrum",
        "timestamp": 1603420990
    },
    {
        "content": "<p>wait, do you mean the table? because that works</p>",
        "id": 214268474,
        "sender_full_name": "eddyb",
        "timestamp": 1603420996
    },
    {
        "content": "<p>No, the flamegraph</p>",
        "id": 214268479,
        "sender_full_name": "simulacrum",
        "timestamp": 1603421007
    },
    {
        "content": "<p>403 yeah :(</p>",
        "id": 214268485,
        "sender_full_name": "eddyb",
        "timestamp": 1603421031
    },
    {
        "content": "<p>I mostly want the file upload to work, I don't care about the ui as much. I should be able to verify or fix that tomorrow morning no problem</p>",
        "id": 214268543,
        "sender_full_name": "simulacrum",
        "timestamp": 1603421107
    },
    {
        "content": "<p>thankfully I should be able to rebase on top of the PR to do my testing, and presumably the <code>measureme</code>PR I'll open first will take some time to land anyway</p>",
        "id": 214268551,
        "sender_full_name": "eddyb",
        "timestamp": 1603421155
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> so presumably I'm not really blocked on it landing, the fact that it works at all should be good enough <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 214268597,
        "sender_full_name": "eddyb",
        "timestamp": 1603421185
    },
    {
        "content": "<p>fingers crossed etc.</p>",
        "id": 214268599,
        "sender_full_name": "eddyb",
        "timestamp": 1603421198
    },
    {
        "content": "<p>Yeah. And the perf support should work fwiw for any pr</p>",
        "id": 214268611,
        "sender_full_name": "simulacrum",
        "timestamp": 1603421251
    },
    {
        "content": "<p>So if you emit compatible profiles with 9.0 summarize, you can just try that now</p>",
        "id": 214268655,
        "sender_full_name": "simulacrum",
        "timestamp": 1603421286
    },
    {
        "content": "<p>(not sure how feasible that is)</p>",
        "id": 214268659,
        "sender_full_name": "simulacrum",
        "timestamp": 1603421300
    },
    {
        "content": "<p>I didn't even plan for a breaking change happening at any point FWIW, so all my changes are non-breaking</p>",
        "id": 214268665,
        "sender_full_name": "eddyb",
        "timestamp": 1603421323
    },
    {
        "content": "<p>in that even the counter descriptions are designed so that anything reading profiles that counted instructions will show them as nanoseconds if they haven't been updated to parse the counter names/units</p>",
        "id": 214268750,
        "sender_full_name": "eddyb",
        "timestamp": 1603421488
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/214266900\">said</a>:</p>\n<blockquote>\n<p>oh wow <span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> is back?</p>\n</blockquote>\n<p>only in a minimal form <code>:)</code></p>",
        "id": 214293678,
        "sender_full_name": "mw",
        "timestamp": 1603446994
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/214268750\">said</a>:</p>\n<blockquote>\n<p>in that even the counter descriptions are designed so that anything reading profiles that counted instructions will show them as nanoseconds if they haven't been updated to parse the counter names/units</p>\n</blockquote>\n<p>That's really great work <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>!</p>",
        "id": 214314773,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1603460682
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> well, kind of unnecessary, given the breaking changes made to the format :P</p>",
        "id": 214320557,
        "sender_full_name": "eddyb",
        "timestamp": 1603463415
    },
    {
        "content": "<p>but AFAICT there is no reason to make a breaking change here, other than renaming things like \"time\" and \"timestamp\"</p>",
        "id": 214320602,
        "sender_full_name": "eddyb",
        "timestamp": 1603463444
    },
    {
        "content": "<p>as in, I've only added to the public API, not changed any of the existing interfaces</p>",
        "id": 214323772,
        "sender_full_name": "eddyb",
        "timestamp": 1603464936
    },
    {
        "content": "<p>huh I was randomly browsing the RISC-V Privileged spec and I spotted some guaranteed perf counter support</p>",
        "id": 214469223,
        "sender_full_name": "eddyb",
        "timestamp": 1603602308
    },
    {
        "content": "<p>now I wish I had one of those incredibly expensive SiFive boards to play with</p>",
        "id": 214469227,
        "sender_full_name": "eddyb",
        "timestamp": 1603602321
    },
    {
        "content": "<blockquote>\n<p>The hardware performance monitor includes 29 additional 64-bit event counters</p>\n</blockquote>\n<p>meanwhile x86 is up to like 6 48-bit counters :/</p>",
        "id": 214469291,
        "sender_full_name": "eddyb",
        "timestamp": 1603602376
    },
    {
        "content": "<p>oh no, do they not have automatic pause when in a different privilege mode :/</p>",
        "id": 214469463,
        "sender_full_name": "eddyb",
        "timestamp": 1603602628
    },
    {
        "content": "<p>I guess individual implementations can do it with custom event settings, but not mandating it (especially for <code>instret</code>) sucks :(</p>",
        "id": 214469685,
        "sender_full_name": "eddyb",
        "timestamp": 1603602955
    },
    {
        "content": "<p>this <em>feels</em> like it would be a RISC-V thing, given how much they try to make the privilege modes orthogonal</p>",
        "id": 214469791,
        "sender_full_name": "eddyb",
        "timestamp": 1603603083
    },
    {
        "content": "<p>oh nice this is a linkable version of the spec <a href=\"http://www.five-embeddev.com/riscv-isa-manual/latest/machine.html#hardware-performance-monitor\">http://www.five-embeddev.com/riscv-isa-manual/latest/machine.html#hardware-performance-monitor</a></p>",
        "id": 214471091,
        "sender_full_name": "eddyb",
        "timestamp": 1603605087
    },
    {
        "content": "<p>found this (Ctrl+F \"Hardware Performance Monitor\", page 16) <a href=\"https://www.microsemi.com/document-portal/doc_download/1244570-ug0880-polarfire-soc-fpga-microprocessor-subsystem-mss-user-guide\">https://www.microsemi.com/document-portal/doc_download/1244570-ug0880-polarfire-soc-fpga-microprocessor-subsystem-mss-user-guide</a><br>\nso yupp, I was right, because the spec doesn't require it nor offer a general mechanism, they didn't bother implementing any way to limit the counter to counting in user mode only :(</p>",
        "id": 214472135,
        "sender_full_name": "eddyb",
        "timestamp": 1603606485
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> nice, <a href=\"https://github.com/rust-lang/rust/issues/77398\">#77398</a> landed! time to do some final measurements :3</p>",
        "id": 214478307,
        "sender_full_name": "eddyb",
        "timestamp": 1603616142
    },
    {
        "content": "<p><code>final-final-final.md</code> vibes <a href=\"https://gist.github.com/eddyb/7a0a55411441142765db6cfa41504e50\">https://gist.github.com/eddyb/7a0a55411441142765db6cfa41504e50</a></p>",
        "id": 214479908,
        "sender_full_name": "eddyb",
        "timestamp": 1603618486
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> lol just spotted your comments, see <a href=\"https://github.com/rust-lang/measureme/pull/129#issuecomment-716861967\">https://github.com/rust-lang/measureme/pull/129#issuecomment-716861967</a></p>",
        "id": 214642005,
        "sender_full_name": "eddyb",
        "timestamp": 1603751941
    },
    {
        "content": "<p>I've hidden them all as off-topic for now, but I'm glad you seem to be eager to review all that code :P</p>",
        "id": 214642148,
        "sender_full_name": "eddyb",
        "timestamp": 1603752061
    },
    {
        "content": "<p>(I agree more documentation is needed, I'm currently in the process of writing up what will be the PR description, and that effectively includes roughly the same information that I should also put in doc comments, but I want to have the PR open before I touch the code at all)</p>",
        "id": 214642190,
        "sender_full_name": "eddyb",
        "timestamp": 1603752107
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  I just wanted to make sure you weren't blocked on waiting for reviews from me. Feel free to ping me when you're ready for the reviews. :)</p>",
        "id": 214652990,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1603762477
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> so I just remembered the threading issue, and while what I was assuming would be the ideal solution (per-thread <code>!Sync</code>/<code>!Send</code> handles to the profiler, which include a counter) would require some refactors on the <code>rustc</code> side, I just realized I could have a <code>per_thread_counter: Vec&lt;Option&lt;Counter&gt;&gt;</code> in <code>measureme</code> and index it by <code>ThreadId</code></p>\n<p>should I try to add this to the initial PR, or should we aim to merge the version that mostly only works for the single-thread case (so mostly check-mode only)?</p>",
        "id": 214693218,
        "sender_full_name": "eddyb",
        "timestamp": 1603802422
    },
    {
        "content": "<p>I guess I can keep going under the assumption it's the former and list it under caveats, the write-up is more important than any code changes at this point</p>",
        "id": 214694800,
        "sender_full_name": "eddyb",
        "timestamp": 1603803410
    },
    {
        "content": "<p>I would be happy to see the basic version land first and then we can land improvements to it as we go along.</p>",
        "id": 214700618,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1603806271
    },
    {
        "content": "<p>That makes sense to me too</p>",
        "id": 214708047,
        "sender_full_name": "simulacrum",
        "timestamp": 1603809465
    },
    {
        "content": "<p>oh right the other alternative is all that <code>inherit</code> stuff but I have doubts about how well it would work hmpf. like it sounds hard for it to be exactly the same counter index (though I guess it could get cloned when the child thread is spawned, leaving gaps for non-<code>inherit</code> counters). I also don't know if the values read start out relative to the parent or from scratch etc.<br>\nmay be possible to find out by creating a mix of inherited and non-inherited counters on a thread and then seeing what is observed on child threads</p>",
        "id": 214744286,
        "sender_full_name": "eddyb",
        "timestamp": 1603823700
    },
    {
        "content": "<p>okay whew I've just:</p>\n<ol>\n<li>confirmed (via google activity history) that my original search query which found the AMD patent was <code>instructions retired lock</code></li>\n<li>the AMD patent is nowhere to be found in the results now</li>\n<li>came across this instead <a href=\"https://www.realworldtech.com/forum/?threadid=195249\">https://www.realworldtech.com/forum/?threadid=195249</a></li>\n</ol>",
        "id": 215048226,
        "sender_full_name": "eddyb",
        "timestamp": 1604021526
    },
    {
        "content": "<p>say hello to <em>Linus Torvalds</em></p>",
        "id": 215048231,
        "sender_full_name": "eddyb",
        "timestamp": 1604021536
    },
    {
        "content": "<p>some of the out-of-order execution discussions are way deeper than I ever bothered to think about <code>SpecLockMap</code> heh</p>",
        "id": 215048454,
        "sender_full_name": "eddyb",
        "timestamp": 1604021849
    },
    {
        "content": "<p>Heh, that's actually surprisingly close to my wild guess about CMPXCHG loops :P - atomic stores are being retired multiple times</p>",
        "id": 215048792,
        "sender_full_name": "Diggsey",
        "timestamp": 1604022331
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"295632\">@Diggory Blake</span> note that the entire saga happened last month and the Zen 1 EPYC server I test on has had <code>SpecLockMap</code> disabled the entire time I was struggling with post-rebase noise</p>",
        "id": 215048887,
        "sender_full_name": "eddyb",
        "timestamp": 1604022478
    },
    {
        "content": "<p>with <code>SpecLockMap</code> disabled the noise went from (up to) ±10k to <em>zero</em></p>",
        "id": 215048937,
        "sender_full_name": "eddyb",
        "timestamp": 1604022500
    },
    {
        "content": "<p>ah, I thought you were saying this was the cause of the later variance</p>",
        "id": 215048946,
        "sender_full_name": "Diggsey",
        "timestamp": 1604022521
    },
    {
        "content": "<p>the only variation was when writing the output file</p>",
        "id": 215048948,
        "sender_full_name": "eddyb",
        "timestamp": 1604022525
    },
    {
        "content": "<p>no, uhh, I'm about to write the write-up of the entire thing, but I guess I can link you to the <code>rr</code> comment <a href=\"https://github.com/mozilla/rr/issues/2034#issuecomment-691339758\">https://github.com/mozilla/rr/issues/2034#issuecomment-691339758</a></p>",
        "id": 215048965,
        "sender_full_name": "eddyb",
        "timestamp": 1604022566
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"295632\">@Diggory Blake</span> the connection btw is that the method <span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> found for disabling <code>SpecLockMap</code> ended up unlocking <code>rr</code> on Zen :D</p>",
        "id": 215049036,
        "sender_full_name": "eddyb",
        "timestamp": 1604022648
    },
    {
        "content": "<p>we later found a detection method (from userspace, using a perf counter) and so both <code>rr</code> and my <code>measureme</code> code (PR soon! I mean you can read it on the <code>rdpmc</code> branch if you're curious :P) tell you to go to <a href=\"https://github.com/mozilla/rr/wiki/Zen\">https://github.com/mozilla/rr/wiki/Zen</a> to learn how to turn <code>SpecLockMap</code> off</p>",
        "id": 215049115,
        "sender_full_name": "eddyb",
        "timestamp": 1604022766
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <br>\nSo, I thought about ways to debug these variations in program runs.<br>\nIf rustc run leaves a trace that contains addresses and instruction counts of all executed basic blocks, then it would be simple to compare such traces and find differences, right?<br>\nThe differences can then be mapped to specific symbols or instructions using the traced address.</p>",
        "id": 215079433,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1604055425
    },
    {
        "content": "<p>I previously suggested qemu for this, but there is a much more light-weight alternative - dynamic binary instrumentation (e.g. Pin or <a href=\"https://github.com/DynamoRIO/dynamorio\">DynamoRIO</a>).<br>\nI have some experience writing clients performing specific tracing, and dumping instruction counts and basic block addresses requires amounts to a very simple client.</p>",
        "id": 215079668,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1604055573
    },
    {
        "content": "<p>(Syscalls, signals and other similar things can be easily traced as well, if necessary.)</p>",
        "id": 215079981,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1604055771
    },
    {
        "content": "<p>Actually, if the only thing we need for benchmarking rustc is to count user-mode instructions, then it can be done by a ~0%-overhead DBI client too <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 215080387,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1604056068
    },
    {
        "content": "<p>This of course is not a replacement for hardware counters, because it would be <em>very</em> nice to count retired uops in addition to (or instead of) retired instructions + memory-related events etc are important too.</p>",
        "id": 215080540,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1604056180
    },
    {
        "content": "<p>heh uops are a good suggestion, IIRC when I last messed with that, <code>rustc</code> uops were somewhere above 1uop/instruction, maybe around 1.2</p>",
        "id": 215163483,
        "sender_full_name": "eddyb",
        "timestamp": 1604101772
    },
    {
        "content": "<p>I need to remember to note it down somewhere for future work (like a few other things)</p>",
        "id": 215163553,
        "sender_full_name": "eddyb",
        "timestamp": 1604101838
    },
    {
        "content": "<p>also, traces are great, ideally we could get something like <code>rr</code> to automatically detect the cause, or at least localize it, without needing special builds etc. - <code>qemu</code> is also good, it's not like I don't have the hardware to run a bunch of VMs on, it just... could lead to another month spent tracking down some other weirdness and I want to ship <em>something</em> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 215163611,
        "sender_full_name": "eddyb",
        "timestamp": 1604101923
    },
    {
        "content": "<p>long-term I really want to have some kind of framework for measuring and detecting weird hardware quirks</p>",
        "id": 215163755,
        "sender_full_name": "eddyb",
        "timestamp": 1604102122
    },
    {
        "content": "<p>both by asking the hardware to tell us about itself, <em>and</em> by observing it misbehave</p>",
        "id": 215163767,
        "sender_full_name": "eddyb",
        "timestamp": 1604102149
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> heh, <a href=\"https://download.asrock.com/Manual/B450M%20Pro4.pdf\">https://download.asrock.com/Manual/B450M%20Pro4.pdf</a> names <code>SpecLockMap</code>, idk why we had to rely on random reuploads</p>",
        "id": 215262026,
        "sender_full_name": "eddyb",
        "timestamp": 1604264359
    },
    {
        "content": "<p>maybe it blocks google from indexing it</p>",
        "id": 215262028,
        "sender_full_name": "eddyb",
        "timestamp": 1604264367
    },
    {
        "content": "<p><span aria-label=\"alert\" class=\"emoji emoji-1f6a8\" role=\"img\" title=\"alert\">:alert:</span> <a href=\"https://github.com/rust-lang/measureme/pull/143\">https://github.com/rust-lang/measureme/pull/143</a></p>",
        "id": 215433104,
        "sender_full_name": "eddyb",
        "timestamp": 1604398220
    },
    {
        "content": "<p>the bulk of the write-up is on <a href=\"https://hackmd.io/sH315lO2RuicY-SEt7ynGA?view\">https://hackmd.io/sH315lO2RuicY-SEt7ynGA?view</a> because uhhh it big</p>",
        "id": 215433144,
        "sender_full_name": "eddyb",
        "timestamp": 1604398250
    },
    {
        "content": "<p>can't believe it's done, even just the write-up took a whole week</p>",
        "id": 215433647,
        "sender_full_name": "eddyb",
        "timestamp": 1604398580
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> time to move those review comments to the right PR :P</p>",
        "id": 215434128,
        "sender_full_name": "eddyb",
        "timestamp": 1604398875
    },
    {
        "content": "<p>that write-up is fantastic, everything about this effort is just incredibly impressive</p>",
        "id": 215438283,
        "sender_full_name": "davidtwco",
        "timestamp": 1604401326
    },
    {
        "content": "<p>blame hardware vendors for not making it trivial to get perfect results out of the box :P</p>",
        "id": 215438503,
        "sender_full_name": "eddyb",
        "timestamp": 1604401444
    },
    {
        "content": "<p>(place your bets on whether Zen 3 has fixed the <code>SpecLockMap</code> overcounting, or made everything worse in the name of IPC)</p>",
        "id": 215438593,
        "sender_full_name": "eddyb",
        "timestamp": 1604401497
    },
    {
        "content": "<p>oh speaking of which, feel free to play around with undocumented counters haha, lots of fun stuff left to be found in there</p>",
        "id": 215438730,
        "sender_full_name": "eddyb",
        "timestamp": 1604401568
    },
    {
        "content": "<p>I'd bet against it being fixed on zen 3... I don't have the impression that they consider that overcounting to be a big issue (given the comments from the person at AMD who mentioned that there was a different undisclosed reason for setting that bit for IBS, IIRC) and adding rollback logic to the performance counter sounds like a lot of extra engineering and verification effort</p>",
        "id": 215439966,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1604402382
    },
    {
        "content": "<p>I mean they already have to roll back registers, no? these are just 6 more registers</p>",
        "id": 215440830,
        "sender_full_name": "eddyb",
        "timestamp": 1604402891
    },
    {
        "content": "<p>(48-bit even :P)</p>",
        "id": 215440867,
        "sender_full_name": "eddyb",
        "timestamp": 1604402915
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> I wonder if they speculate and roll back AVX2 instructions, that seems like a lot more effort than perf counters :P</p>",
        "id": 215440906,
        "sender_full_name": "eddyb",
        "timestamp": 1604402945
    },
    {
        "content": "<p>Not saying that rolling back performance counters is more difficult than rolling back other state... but it's still a thing they'd have to implement that they don't do currently</p>",
        "id": 215441010,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1604403009
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> this is an awesome story, do you mind if I post it around reddit?</p>",
        "id": 215442898,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604404229
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> fair</p>",
        "id": 215443164,
        "sender_full_name": "eddyb",
        "timestamp": 1604404378
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> haha I forgot about reddit. sure thing :D</p>",
        "id": 215443206,
        "sender_full_name": "eddyb",
        "timestamp": 1604404400
    },
    {
        "content": "<p>wow almost 20 ppl on the hackmd o_O</p>",
        "id": 215443243,
        "sender_full_name": "eddyb",
        "timestamp": 1604404428
    },
    {
        "content": "<p>I did have it open in 3 tabs because I got distracted multiple times while reading it ^^ (not sure how it counts that)</p>",
        "id": 215444294,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1604405061
    },
    {
        "content": "<p>haha</p>",
        "id": 215444344,
        "sender_full_name": "eddyb",
        "timestamp": 1604405095
    },
    {
        "content": "<p><a href=\"https://www.reddit.com/r/rust/comments/jn9892/hardware_performance_counters_for_the_rust/\">https://www.reddit.com/r/rust/comments/jn9892/hardware_performance_counters_for_the_rust/</a></p>",
        "id": 215445473,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604405778
    },
    {
        "content": "<p>I see Reddit has arrived on Hackmd <a href=\"/user_uploads/4715/p3u-KI8qyuR_KgLm5T28iMLW/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/p3u-KI8qyuR_KgLm5T28iMLW/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/p3u-KI8qyuR_KgLm5T28iMLW/image.png\"></a></div>",
        "id": 215457561,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1604412585
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> oh no I found a way to make <code>SpecLockMapCommit</code> count with <code>SpecLockMap</code> (supposedly) disabled &gt;:(</p>",
        "id": 215488372,
        "sender_full_name": "eddyb",
        "timestamp": 1604425879
    },
    {
        "content": "<p>tiny values but still not great. it should be 0</p>",
        "id": 215488424,
        "sender_full_name": "eddyb",
        "timestamp": 1604425908
    },
    {
        "content": "<p>huh, that's quite strange</p>",
        "id": 215488486,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1604425924
    },
    {
        "content": "<p>too late now, time to pretend I never saw anything <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 215488520,
        "sender_full_name": "eddyb",
        "timestamp": 1604425942
    },
    {
        "content": "<p>does it matter as long as it doesn't make the SpecLockMap detection unreliable? (or does it do that?)</p>",
        "id": 215488617,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1604425987
    },
    {
        "content": "<p>no idea, this is for over a million <code>lock</code>s executed</p>",
        "id": 215488732,
        "sender_full_name": "eddyb",
        "timestamp": 1604426042
    },
    {
        "content": "<p>maybe it's a specific <code>lock</code> instruction that <code>rustc</code> doesn't use</p>",
        "id": 215488813,
        "sender_full_name": "eddyb",
        "timestamp": 1604426057
    },
    {
        "content": "<p>(I'm trying to make a counter example that's as simple as possible, C++ templates were my first attempt, now I'm testing with <code>xz</code>)</p>",
        "id": 215488951,
        "sender_full_name": "eddyb",
        "timestamp": 1604426126
    },
    {
        "content": "<p>Also on which CPU are you testing?</p>",
        "id": 215489841,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1604426528
    },
    {
        "content": "<p>During what query/activity does this <code>SpecLockMapCommit</code> counting happen?</p>",
        "id": 215489988,
        "sender_full_name": "bjorn3",
        "timestamp": 1604426595
    },
    {
        "content": "<p><code>dd status=none if=/dev/zero count=1M | perf stat -e r002c:u,r0225:u,r0425:u,r0825:u,r0e25:u xz -e9 -T2 &gt; /dev/null</code><br>\n(increase <code>count</code> to make it do more)</p>",
        "id": 215490228,
        "sender_full_name": "eddyb",
        "timestamp": 1604426701
    },
    {
        "content": "<p>Whoa, I finally read the whole thread today. Great read.<br>\n(I had a few comments to messages from months ago, but that's probably all irrelevant now.)</p>",
        "id": 215659228,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1604536664
    },
    {
        "content": "<p>I didn't expect anyone would, haha</p>",
        "id": 215659260,
        "sender_full_name": "eddyb",
        "timestamp": 1604536684
    },
    {
        "content": "<p>(hence trying to put as much as possible into the write-up)</p>",
        "id": 215659291,
        "sender_full_name": "eddyb",
        "timestamp": 1604536694
    },
    {
        "content": "<p>oh no... <code>proc_macro</code> uses non-<code>Fx</code> <code>HashMap</code>s</p>",
        "id": 215714245,
        "sender_full_name": "eddyb",
        "timestamp": 1604584666
    },
    {
        "content": "<p><code>core</code> doesn't use proc macros so this didn't show up before</p>",
        "id": 215715180,
        "sender_full_name": "eddyb",
        "timestamp": 1604585075
    },
    {
        "content": "<p>would you want to add <code>rustc_hash</code> as a user library dependency?</p>",
        "id": 215741614,
        "sender_full_name": "cuviper",
        "timestamp": 1604595567
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> nah, can just use <code>DefaultHasher</code> but with <code>::new()</code> instead of what <code>RandomState</code> does</p>",
        "id": 215745056,
        "sender_full_name": "eddyb",
        "timestamp": 1604596967
    },
    {
        "content": "<p>glad that exists <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 215745078,
        "sender_full_name": "eddyb",
        "timestamp": 1604596976
    },
    {
        "content": "<p>oh, just for defeating random state -- ok, yeah</p>",
        "id": 215745162,
        "sender_full_name": "cuviper",
        "timestamp": 1604597015
    },
    {
        "content": "<p>but it's worse than that because <code>serde_derive</code> and the <code>toml</code> crate (used by some other proc macros) use <code>HashMap</code>/<code>HashSet</code>, so there's no easy fix (had to resort to making <code>RandomState</code> actually deterministic to get some data)</p>",
        "id": 215745168,
        "sender_full_name": "eddyb",
        "timestamp": 1604597018
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> see the second and third paragraph here <a href=\"https://hackmd.io/sH315lO2RuicY-SEt7ynGA?view#Results-for-polkadot-runtime-common\">https://hackmd.io/sH315lO2RuicY-SEt7ynGA?view#Results-for-polkadot-runtime-common</a></p>",
        "id": 215745394,
        "sender_full_name": "eddyb",
        "timestamp": 1604597104
    },
    {
        "content": "<p>yeah, makes sense, I just had raw perf in mind instead of measurement stability</p>",
        "id": 215745565,
        "sender_full_name": "cuviper",
        "timestamp": 1604597168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  did you want someone to get std using libc getrandom? I could give that a shot...</p>",
        "id": 215747076,
        "sender_full_name": "cuviper",
        "timestamp": 1604597748
    },
    {
        "content": "<p>it would make hooking it much easier (not having to deal with intercepting syscalls) :D</p>",
        "id": 215747200,
        "sender_full_name": "eddyb",
        "timestamp": 1604597785
    },
    {
        "content": "<p>sadly there would need to be some runtime detection because older <code>glibc</code> just doesn't have it (at least AIUI)</p>",
        "id": 215747242,
        "sender_full_name": "eddyb",
        "timestamp": 1604597804
    },
    {
        "content": "<p>yeah, there's a <code>weak!</code> macro for that</p>",
        "id": 215747275,
        "sender_full_name": "cuviper",
        "timestamp": 1604597819
    },
    {
        "content": "<p>it was added in glibc 2.25</p>",
        "id": 215747527,
        "sender_full_name": "cuviper",
        "timestamp": 1604597915
    },
    {
        "content": "<p>oh, nice, I forgot about weak symbols. not having to <code>dlsym</code> is great :D (inb4 I'm wrong and <code>weak!</code> literally uses <code>dlsym</code>)</p>",
        "id": 215748640,
        "sender_full_name": "eddyb",
        "timestamp": 1604598359
    },
    {
        "content": "<p><span aria-label=\"alert\" class=\"emoji emoji-1f6a8\" role=\"img\" title=\"alert\">:alert:</span> just opened <a href=\"https://github.com/rust-lang/rust/issues/78781\">#78781</a> (pretty boring tho, just a bit of integration)</p>",
        "id": 215748713,
        "sender_full_name": "eddyb",
        "timestamp": 1604598379
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hardware.20counter.20(rdpmc).20measurements/near/215748640\">said</a>:</p>\n<blockquote>\n<p>oh, nice, I forgot about weak symbols. not having to <code>dlsym</code> is great :D (inb4 I'm wrong and <code>weak!</code> literally uses <code>dlsym</code>)</p>\n</blockquote>\n<p>unfortunately, yes it does use <code>dlsym</code> -- there's some justification for this at the top of <a href=\"https://github.com/rust-lang/rust/blob/master/library/std/src/sys/unix/weak.rs\"><code>weak.rs</code></a></p>",
        "id": 215755646,
        "sender_full_name": "cuviper",
        "timestamp": 1604601470
    },
    {
        "content": "<p>quick sketch: </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nb\">echo</span> <span class=\"s1\">'#[no_mangle] pub extern fn getrandom(_: *const u8, len: usize, _: u32) -&gt; usize { len }'</span> <span class=\"p\">|</span>\n    rustc --crate-type<span class=\"o\">=</span>cdylib - -O -o ~/.local/lib/unrand.so\n</code></pre></div>\n<p>followed by using <code>LD_PRELOAD=$HOME/.local/lib/unrand.so</code></p>",
        "id": 215802998,
        "sender_full_name": "eddyb",
        "timestamp": 1604633598
    },
    {
        "content": "<p>should probably zero tho:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nb\">echo</span> <span class=\"s1\">'#[no_mangle] pub unsafe extern fn getrandom(p: *mut u8, n: usize, _: u32) -&gt; usize { p.write_bytes(0, n); n }'</span> <span class=\"p\">|</span>\n    rustc --crate-type<span class=\"o\">=</span>cdylib - -O -o ~/.local/lib/unrand.so\n</code></pre></div>",
        "id": 215803190,
        "sender_full_name": "eddyb",
        "timestamp": 1604633884
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> <span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> lol, Zen 3 PPR was leaked around the time we were looking at <code>SpecLockMap</code> back in September <a href=\"https://www.google.com/search?q=%22Processor+Programming+Reference+(PPR)+for+AMD+Family+19h%22\">https://www.google.com/search?q=%22Processor+Programming+Reference+(PPR)+for+AMD+Family+19h%22</a></p>",
        "id": 215812194,
        "sender_full_name": "eddyb",
        "timestamp": 1604646874
    },
    {
        "content": "<p>oh is it just one screenshot :(</p>",
        "id": 215812307,
        "sender_full_name": "eddyb",
        "timestamp": 1604646981
    },
    {
        "content": "<p>Agner Fog has a Windows driver which enables rdpmc / MSR access in user mode, <a href=\"https://agner.org/optimize/#testp\">https://agner.org/optimize/#testp</a></p>\n<p>We may be able to modify that and possibly get Microsoft folks to help with signing</p>",
        "id": 215994561,
        "sender_full_name": "Zoxc",
        "timestamp": 1604821348
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> so the person reviewing the report (for the grant it's part of) had a good point that I didn't think/forgot about: some of the details should go into <code>measureme</code>/<code>rustc</code> docummentation</p>",
        "id": 216451409,
        "sender_full_name": "eddyb",
        "timestamp": 1605177404
    },
    {
        "content": "<p>but I'm not super sure where. rustc-dev-guide?</p>",
        "id": 216451430,
        "sender_full_name": "eddyb",
        "timestamp": 1605177423
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> rustc dev guide seems like the best option to me.</p>",
        "id": 216455853,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1605180313
    },
    {
        "content": "<p>hmm he also wants <code>measureme</code> docs, I'm guessing those go into doc comments</p>",
        "id": 216515898,
        "sender_full_name": "eddyb",
        "timestamp": 1605209237
    },
    {
        "content": "<p>Ok or if you think it makes more sense, making a <code>measureme/docs</code> folder and adding markdown files there is fine too.</p>",
        "id": 216516340,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1605209453
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> just pushed to the PR, and you can see it here: <a href=\"http://build.lyken.rs/~eddy/measureme-rdpmc-doc/measureme/\">http://build.lyken.rs/~eddy/measureme-rdpmc-doc/measureme/</a></p>",
        "id": 217118186,
        "sender_full_name": "eddyb",
        "timestamp": 1605695764
    },
    {
        "content": "<p>maybe it's too dense, idk, but I won't be able to mess with it again too soon, since I'm starting a different thing today</p>",
        "id": 217118255,
        "sender_full_name": "eddyb",
        "timestamp": 1605695799
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> Merged! This is excellent. I pushed a small change to one of the doc comments to fix the CI error.</p>",
        "id": 217353967,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1605837727
    },
    {
        "content": "<p>wait, already?</p>",
        "id": 217396076,
        "sender_full_name": "eddyb",
        "timestamp": 1605876434
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> the <code>[...]</code> syntax was working for me, didn't know about <code>&lt;...&gt;</code> hmmm</p>",
        "id": 217396206,
        "sender_full_name": "eddyb",
        "timestamp": 1605876513
    },
    {
        "content": "<p>oh wait it wasn't working</p>",
        "id": 217396368,
        "sender_full_name": "eddyb",
        "timestamp": 1605876615
    },
    {
        "content": "<p>/me must've forgotten to check <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 217396384,
        "sender_full_name": "eddyb",
        "timestamp": 1605876624
    },
    {
        "content": "<p>I wasn't aware of it either but it looks like rustdoc nightly has started complaining about the <code>[...]</code> syntax</p>",
        "id": 217396385,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1605876624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> have you published yet? if not, could you hold off a bit on that?</p>",
        "id": 217396487,
        "sender_full_name": "eddyb",
        "timestamp": 1605876691
    },
    {
        "content": "<p>No I haven't published yet</p>",
        "id": 217396568,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1605876734
    },
    {
        "content": "<p>Will do!</p>",
        "id": 217396571,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1605876737
    },
    {
        "content": "<p>there might be a couple small things to fix</p>",
        "id": 217396597,
        "sender_full_name": "eddyb",
        "timestamp": 1605876757
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> just got a crazy idea for <a href=\"https://github.com/rust-lang/rust/issues/78785\">#78785</a> - could <code>librustc_driver</code> <em>define</em> <code>getrandom</code> now? it would have to invoke <code>syscall</code> directly and I would probably override it via a new <code>-Z getrandom-seed</code> flag or w/e, buuut it would be easier to use than a separate <code>LD_PRELOAD</code> hack</p>",
        "id": 217397496,
        "sender_full_name": "eddyb",
        "timestamp": 1605877333
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> sure, that sounds reasonable</p>",
        "id": 217431800,
        "sender_full_name": "cuviper",
        "timestamp": 1605892791
    },
    {
        "content": "<p>You may have to define it in the main executable. If libc happens to be included before rustc_driver, it wouldn't get overridden I think. It is basically first come first serve.</p>",
        "id": 217454159,
        "sender_full_name": "bjorn3",
        "timestamp": 1605903701
    },
    {
        "content": "<p>I think that will still obey the order of <code>NEEDED</code> entries, e.g. <code>readelf -d /usr/bin/rustc</code> shows me:</p>\n<div class=\"codehilite\"><pre><span></span><code>(NEEDED)             Shared library: [librustc_driver-a72897dcafce5996.so]\n(NEEDED)             Shared library: [libstd-b2663731bc9f22d7.so]\n(NEEDED)             Shared library: [libc.so.6]\n</code></pre></div>",
        "id": 217475265,
        "sender_full_name": "cuviper",
        "timestamp": 1605918389
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> <a href=\"https://github.com/rust-lang/measureme/pull/129#issuecomment-731878205\">https://github.com/rust-lang/measureme/pull/129#issuecomment-731878205</a></p>",
        "id": 217579276,
        "sender_full_name": "eddyb",
        "timestamp": 1606092417
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> Let me take another look. I've pretty much paged this out of memory since it was WIP.</p>",
        "id": 217581530,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1606095732
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/measureme/pull/147\">https://github.com/rust-lang/measureme/pull/147</a> is more important but also not sure yet if that's final</p>",
        "id": 217581540,
        "sender_full_name": "eddyb",
        "timestamp": 1606095754
    },
    {
        "content": "<p>(getting out-of-band review comments, effectively)</p>",
        "id": 217581547,
        "sender_full_name": "eddyb",
        "timestamp": 1606095774
    },
    {
        "content": "<p>(deleted: sorry, I chimed in replying to a wildly out-of-date comment)</p>",
        "id": 217821994,
        "sender_full_name": "pnkfelix",
        "timestamp": 1606256736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> Is there anything else you want to do in <a href=\"https://github.com/rust-lang/measureme/pull/129\">https://github.com/rust-lang/measureme/pull/129</a>? If not, I'll merge tomorrow.</p>",
        "id": 217957947,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1606354632
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> I think it's all settled, but I won't be able to look at it closer until the weekend</p>",
        "id": 218021980,
        "sender_full_name": "eddyb",
        "timestamp": 1606409746
    },
    {
        "content": "<p>No rush :)</p>",
        "id": 218021993,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1606409759
    }
]