[
    {
        "content": "<p>I’ve posted this around, but haven’t gotten any responses so I’ll try my luck here. No worries if I don’t get any here either.</p>\n<p>I’m working on <a href=\"https://github.com/rust-lang/rust/issues/86431\">#86431</a> and have a question about the uniqueness of TyKinds.</p>\n<p>My idea is to add a <code>hashmap&lt;TyKind, String&gt;</code> field to The <code>Codegencx&lt;'ll, 'tcx&gt;</code> struct; and then use this hashmap in the various metadata functions in <code>rustc_codegen_llvm/src/debuginfo/metadata.rs</code> that call <code>compute_debuginfo_name()</code>.</p>\n<p>Every time we compute a string for a type kind, we map the string to that kind, and cache the string. This avoids us to avoid recomputing repeat strings.</p>\n<p>My only concern is that I don’t know enough about the compiler in general to know if there will be a 1:1 relationship between a given <code>TyKind</code> and and it’s “debuginfo type name”.</p>\n<p>Also, as for how to analyze redundant work, my only solution is to profile the compiler before and after I’ve made changes, and observe differences. Is there a better way to go about this?</p>",
        "id": 252641006,
        "sender_full_name": "Timothy Maloney",
        "timestamp": 1631199652
    },
    {
        "content": "<p>I don't know this code well enough to really be of help, but it would be useful to know how often repeat debuginfo names are computed. That might start giving an small idea of how much make this change could help. Also is computing the name expensive or is this just an attempt to save allocations?</p>",
        "id": 252643015,
        "sender_full_name": "rylev",
        "timestamp": 1631200386
    },
    {
        "content": "<p>Computing the name _can_ be expensive,  I think? Not sure how to define expensive.</p>\n<p>Type names can get pretty long, and since the main method that does the work is recursive, caching repeat names would also eliminate redundant stack frames. This is what I mean by I think it’s expensive.</p>",
        "id": 252645385,
        "sender_full_name": "Timothy Maloney",
        "timestamp": 1631201283
    },
    {
        "content": "<p>I’m going to try and count how many times we add to the cache vs find something from it and then just take a ratio of those numbers.</p>",
        "id": 252645593,
        "sender_full_name": "Timothy Maloney",
        "timestamp": 1631201384
    },
    {
        "content": "<p>It might also be interesting to guestimate how often we're allocating during this process - for each string we find in the cache calculate how many allocations it takes to create that string (which I believe we can guess to be around the square root of the length of the string)</p>",
        "id": 252645981,
        "sender_full_name": "rylev",
        "timestamp": 1631201549
    },
    {
        "content": "<p>Oooo that’s a good one. Gonna use that.</p>",
        "id": 252646040,
        "sender_full_name": "Timothy Maloney",
        "timestamp": 1631201578
    },
    {
        "content": "<p>Could you clarify what you mean by “allocations”?</p>",
        "id": 252646173,
        "sender_full_name": "Timothy Maloney",
        "timestamp": 1631201642
    },
    {
        "content": "<p>I mean the number of memory allocations we do to build the string debug info names</p>",
        "id": 252646376,
        "sender_full_name": "rylev",
        "timestamp": 1631201716
    },
    {
        "content": "<p>Since a <code>TyKind</code> contains the substitutions \"substs\" which are the actual types, lifetimes and const values the type is instantiated with, it should be 1:1 with the type name.</p>",
        "id": 252661297,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1631207492
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> do you know if the relationship between a UniqueTypeId and its type name is also 1:1?</p>",
        "id": 252787105,
        "sender_full_name": "Timothy Maloney",
        "timestamp": 1631280737
    },
    {
        "content": "<p>Based on this line, I believe that is true <a href=\"https://github.com/rust-lang/rust/blob/497ee321af3b8496eaccd7af7b437f18bab81abf/compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs#L103-L104\">https://github.com/rust-lang/rust/blob/497ee321af3b8496eaccd7af7b437f18bab81abf/compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs#L103-L104</a></p>",
        "id": 252787959,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1631281078
    },
    {
        "content": "<p>That’s what I assumed, just wanted to make sure I understand correctly. Thank you!</p>",
        "id": 252789315,
        "sender_full_name": "Timothy Maloney",
        "timestamp": 1631281673
    },
    {
        "content": "<p>Is there an ideal approach for tracking how many times we are accessing an arbitrary map using the profiler?</p>",
        "id": 253177914,
        "sender_full_name": "Timothy Maloney",
        "timestamp": 1631577004
    }
]