[
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> and <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> . I’ll be starting this weeks perf triage soon-ish</p>",
        "id": 244286003,
        "sender_full_name": "pnkfelix",
        "timestamp": 1624975535
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 244286068,
        "sender_full_name": "simulacrum",
        "timestamp": 1624975559
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> can you try using the endpoint instead of the python script? I'd like to move to using that exclusively if we can </p>\n<div class=\"codehilite\"><pre><span></span><code>curl https://perf.rust-lang.org/perf/triage -X POST -d &#39;{&quot;start&quot;: &quot;$COMMIT&quot;}&#39;\n</code></pre></div>",
        "id": 244286228,
        "sender_full_name": "rylev",
        "timestamp": 1624975606
    },
    {
        "content": "<p>Oh sure, I can give that a shot</p>",
        "id": 244286288,
        "sender_full_name": "pnkfelix",
        "timestamp": 1624975628
    },
    {
        "content": "<p>Perhaps we can consider removing the python script. It's not harmful, but it is slower.</p>",
        "id": 244286441,
        "sender_full_name": "rylev",
        "timestamp": 1624975679
    },
    {
        "content": "<p>I think we should get the triage endpoint to be a GET request with ?start= parameter -- so we can use it from the browser too</p>",
        "id": 244286613,
        "sender_full_name": "simulacrum",
        "timestamp": 1624975744
    },
    {
        "content": "<p>Yea that's a good point. There's no reason for it to be a POST</p>",
        "id": 244286684,
        "sender_full_name": "rylev",
        "timestamp": 1624975772
    },
    {
        "content": "<p>I'll make an issue</p>",
        "id": 244286717,
        "sender_full_name": "rylev",
        "timestamp": 1624975786
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rustc-perf/issues/888\">https://github.com/rust-lang/rustc-perf/issues/888</a></p>",
        "id": 244286854,
        "sender_full_name": "rylev",
        "timestamp": 1624975832
    },
    {
        "content": "<p>(got pulled into a mtg so I’ll be delayed starting for ~1 hr)</p>",
        "id": 244287337,
        "sender_full_name": "pnkfelix",
        "timestamp": 1624976006
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> so if I understand correctly: The benefit of using the endpoint is that it will produce results faster? While the benefit of the python script is that someone can modify it locally if they want to experiment with the format/analysis?</p>",
        "id": 244296728,
        "sender_full_name": "pnkfelix",
        "timestamp": 1624979236
    },
    {
        "content": "<p>Yes, though if we want to keep the script around we’ll need to keep the script and endpoint in sync. This doesn’t sound that great to me. I’d prefer to make it easier to change the API endpoint and simply get rid of the script. But that’s just my preference</p>",
        "id": 244297114,
        "sender_full_name": "rylev",
        "timestamp": 1624979360
    },
    {
        "content": "<p>The real reason we moved the script to an endpoint was so that we could share that logic with other parts of perf.rlo - which for now is just with bot <span aria-label=\"robot\" class=\"emoji emoji-1f916\" role=\"img\" title=\"robot\">:robot:</span> that posts perf run results to pull requests</p>",
        "id": 244297334,
        "sender_full_name": "rylev",
        "timestamp": 1624979424
    },
    {
        "content": "<p>I’m getting a 502 Bad Gateway when I try to use that curl command</p>",
        "id": 244297354,
        "sender_full_name": "pnkfelix",
        "timestamp": 1624979432
    },
    {
        "content": "<p><span aria-label=\"stuck out tongue closed eyes\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue closed eyes\">:stuck_out_tongue_closed_eyes:</span> oh no!</p>",
        "id": 244297381,
        "sender_full_name": "rylev",
        "timestamp": 1624979444
    },
    {
        "content": "<p>specifically <code>curl https://perf.rust-lang.org/perf/triage -X POST -d '{\"start\": \"3912083821c5072f700a75589c8af6a9d3e20a21”}'</code></p>",
        "id": 244297472,
        "sender_full_name": "pnkfelix",
        "timestamp": 1624979473
    },
    {
        "content": "<p>is this something that I’m doing wrong, or something that needs to be fixed server-side? Should I just move ahead using the python script for now?</p>",
        "id": 244297700,
        "sender_full_name": "pnkfelix",
        "timestamp": 1624979542
    },
    {
        "content": "<p>Go ahead and move on with the script. I'm not sure what the issue is</p>",
        "id": 244297794,
        "sender_full_name": "rylev",
        "timestamp": 1624979584
    },
    {
        "content": "<p>FYI: <code>curl https://perf.rust-lang.org/perf/triage -X POST -d '{\"start\": \"d192c80d2284ba6b5146bb3da586354c3762c72b\"}'</code> which can be used to generate last week's triage report works fine</p>",
        "id": 244298180,
        "sender_full_name": "rylev",
        "timestamp": 1624979715
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> is there a way to view logs? I'd like to help figure out the issue here ^^</p>",
        "id": 244298649,
        "sender_full_name": "rylev",
        "timestamp": 1624979895
    },
    {
        "content": "<p>hmm</p>",
        "id": 244298678,
        "sender_full_name": "simulacrum",
        "timestamp": 1624979908
    },
    {
        "content": "<p>(I’m also seeing “Failed to get first commit” with the script, so maybe I’m feeding in the wrong commit.)</p>",
        "id": 244298699,
        "sender_full_name": "pnkfelix",
        "timestamp": 1624979916
    },
    {
        "content": "<p>I'll look into it</p>",
        "id": 244298839,
        "sender_full_name": "simulacrum",
        "timestamp": 1624979975
    },
    {
        "content": "<p>not right this moment though</p>",
        "id": 244298856,
        "sender_full_name": "simulacrum",
        "timestamp": 1624979982
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224872\">rylev</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/Triage.202021.2006.2029/near/244298180\">said</a>:</p>\n<blockquote>\n<p>FYI: <code>curl https://perf.rust-lang.org/perf/triage -X POST -d '{\"start\": \"d192c80d2284ba6b5146bb3da586354c3762c72b\"}'</code> which can be used to generate last week's triage report works fine</p>\n</blockquote>\n<p>Inspired by the experiment you did, <span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> , I fed <a href=\"https://github.com/rust-lang/rust/commit/d192c80d2284ba6b5146bb3da586354c3762c72b\">d192c80d2284ba6b5146bb3da586354c3762c72b</a> into weekly-report.py . It ran successfully, but only up to </p>\n<div class=\"codehilite\"><pre><span></span><code>Comparing 3912083821c5072f700a75589c8af6a9d3e20a21 to 9d93819fa7ae40376ac1f563a858d2ba5f3b0277\nReached pair start: 3912083821c5072f700a75589c8af6a9d3e20a21 to next: None whose perf run is not yet complete\n</code></pre></div>",
        "id": 244299763,
        "sender_full_name": "pnkfelix",
        "timestamp": 1624980289
    },
    {
        "content": "<p>notably, that end point is the <em>same</em> as what 2021-06-22.md ended on. Is this a sign of something wrong?</p>",
        "id": 244299852,
        "sender_full_name": "pnkfelix",
        "timestamp": 1624980319
    },
    {
        "content": "<p>Hmm that very well could be</p>",
        "id": 244300561,
        "sender_full_name": "rylev",
        "timestamp": 1624980598
    },
    {
        "content": "<p>(I can't take a closer look right now, but I will soonish)</p>",
        "id": 244301574,
        "sender_full_name": "rylev",
        "timestamp": 1624981007
    },
    {
        "content": "<p>we may have missed a commit due to webhook not firing or something</p>",
        "id": 244304133,
        "sender_full_name": "simulacrum",
        "timestamp": 1624982121
    },
    {
        "content": "<p>that sometimes happens</p>",
        "id": 244304137,
        "sender_full_name": "simulacrum",
        "timestamp": 1624982123
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/commit/3912083821c5072f700a75589c8af6a9d3e20a21\">https://github.com/rust-lang/rust/commit/3912083821c5072f700a75589c8af6a9d3e20a21</a> is claimed by github as not being on master</p>",
        "id": 244304304,
        "sender_full_name": "simulacrum",
        "timestamp": 1624982199
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/commit/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48\">406d4a9cc3b9601cf98a07c6c83e0227d64f5d48</a> seems to be the actual commit</p>",
        "id": 244304374,
        "sender_full_name": "simulacrum",
        "timestamp": 1624982227
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/86515#issuecomment-865255078\">https://github.com/rust-lang/rust/pull/86515#issuecomment-865255078</a></p>",
        "id": 244304392,
        "sender_full_name": "simulacrum",
        "timestamp": 1624982240
    },
    {
        "content": "<p>fixing now</p>",
        "id": 244304395,
        "sender_full_name": "simulacrum",
        "timestamp": 1624982242
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> ok I think there were two 422 fast foward failures</p>",
        "id": 244305273,
        "sender_full_name": "simulacrum",
        "timestamp": 1624982551
    },
    {
        "content": "<p>but I think it should be working now</p>",
        "id": 244305284,
        "sender_full_name": "simulacrum",
        "timestamp": 1624982556
    },
    {
        "content": "<p>502 comes from <a href=\"https://github.com/rust-lang/rustc-perf/blob/7b533400e4c594bf15997b3b4484676858abc8fb/site/src/comparison.rs#L37\">https://github.com/rust-lang/rustc-perf/blob/7b533400e4c594bf15997b3b4484676858abc8fb/site/src/comparison.rs#L37</a></p>",
        "id": 244305618,
        "sender_full_name": "simulacrum",
        "timestamp": 1624982675
    },
    {
        "content": "<p>(it's None)</p>",
        "id": 244305628,
        "sender_full_name": "simulacrum",
        "timestamp": 1624982681
    },
    {
        "content": "<p>Reached pair start: <a href=\"https://github.com/rust-lang/rust/commit/b6f3cb9502b1910f6af32f426fdb78e813b390ef\">b6f3cb9502b1910f6af32f426fdb78e813b390ef</a> to next: None whose perf run is not yet complete</p>",
        "id": 244306032,
        "sender_full_name": "simulacrum",
        "timestamp": 1624982875
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/commit/5a7834050f3a0ebcd117b4ddf0bc1e8459594309\">5a7834050f3a0ebcd117b4ddf0bc1e8459594309</a> wasn't benchmarked because it wasn't inserted into the commit list</p>",
        "id": 244306400,
        "sender_full_name": "simulacrum",
        "timestamp": 1624983047
    },
    {
        "content": "<p>I've fixed that manually now</p>",
        "id": 244306416,
        "sender_full_name": "simulacrum",
        "timestamp": 1624983055
    },
    {
        "content": "<p>hopefully once it's done we'll have full results, not sure</p>",
        "id": 244306450,
        "sender_full_name": "simulacrum",
        "timestamp": 1624983072
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> . I may have followup questions later when I get a chance to tease apart your observations! :)</p>",
        "id": 244307618,
        "sender_full_name": "pnkfelix",
        "timestamp": 1624983575
    },
    {
        "content": "<p>You may need to wait for it to finish benchmarking the missing commit (in 2-3 hours looks like)</p>",
        "id": 244307736,
        "sender_full_name": "simulacrum",
        "timestamp": 1624983618
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> is there a reason panics result in 502s and 500s? I would have expected such errors to be 500s - not a big deal, but would have made me think \"something panicked\" much sooner</p>",
        "id": 244309905,
        "sender_full_name": "rylev",
        "timestamp": 1624984505
    },
    {
        "content": "<p>hm</p>",
        "id": 244309918,
        "sender_full_name": "simulacrum",
        "timestamp": 1624984516
    },
    {
        "content": "<p>I don't really know</p>",
        "id": 244310084,
        "sender_full_name": "simulacrum",
        "timestamp": 1624984578
    },
    {
        "content": "<p>I just always assume panicks</p>",
        "id": 244310093,
        "sender_full_name": "simulacrum",
        "timestamp": 1624984584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/Triage.202021.2006.2029/near/244306416\">said</a>:</p>\n<blockquote>\n<p>I've fixed that manually now</p>\n</blockquote>\n<p>what form did this manual fix take?</p>",
        "id": 244310946,
        "sender_full_name": "pnkfelix",
        "timestamp": 1624984955
    },
    {
        "content": "<p>(I ask to try to figure out whether I can try to resolve this on my own in the future, if we see future similar problems.)</p>",
        "id": 244310979,
        "sender_full_name": "pnkfelix",
        "timestamp": 1624984978
    },
    {
        "content": "<p>logging into the database and inserting a row manually</p>",
        "id": 244311234,
        "sender_full_name": "simulacrum",
        "timestamp": 1624985093
    },
    {
        "content": "<p>so, no</p>",
        "id": 244311238,
        "sender_full_name": "simulacrum",
        "timestamp": 1624985096
    },
    {
        "content": "<p>it's necessary whenever there's a 422 fast forward failure I think currently</p>",
        "id": 244311278,
        "sender_full_name": "simulacrum",
        "timestamp": 1624985113
    },
    {
        "content": "<p>Okay.</p>",
        "id": 244421127,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625058846
    },
    {
        "content": "<p>(I didn’t get a chance to resume this yesterday, but I will be doing so this morning.)</p>",
        "id": 244421167,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625058866
    },
    {
        "content": "<p>So maybe I’m misreading <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> ’s messages from up above, but neither <code>./weekly_report.py 5a7834050f3a0ebcd117b4ddf0bc1e8459594309</code> nor <code>./weekly_report.py 3912083821c5072f700a75589c8af6a9d3e20a21</code> works for me (they both report “Failed to get first commit”).</p>",
        "id": 244427913,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625061806
    },
    {
        "content": "<p>hm</p>",
        "id": 244427924,
        "sender_full_name": "simulacrum",
        "timestamp": 1625061812
    },
    {
        "content": "<p>Oh but I haven’t tried <a href=\"https://github.com/rust-lang/rust/commit/406d4a9cc3b9601cf98a07c6c83e0227d64f5d48\">406d4a9cc3b9601cf98a07c6c83e0227d64f5d48</a> yet</p>",
        "id": 244427980,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625061834
    },
    {
        "content": "<p>let me try that now</p>",
        "id": 244427986,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625061837
    },
    {
        "content": "<p>that seems to be working. Sorry, I misread the text above and for some reason thought 5a7340 was an endpoint of interest</p>",
        "id": 244428070,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625061864
    },
    {
        "content": "<p>hm, we do seem to still be at least a little broken - <a href=\"https://github.com/rust-lang/rust/commit/5a7834050f3a0ebcd117b4ddf0bc1e8459594309\">5a7834050f3a0ebcd117b4ddf0bc1e8459594309</a> should have successor commits already</p>",
        "id": 244428180,
        "sender_full_name": "simulacrum",
        "timestamp": 1625061917
    },
    {
        "content": "<p>let me look into it</p>",
        "id": 244428184,
        "sender_full_name": "simulacrum",
        "timestamp": 1625061920
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/commit/f1e691da2e640bb45fe18f8a5bd8f7afa65ce21d\">f1e691da2e640bb45fe18f8a5bd8f7afa65ce21d</a> should follow it</p>",
        "id": 244428316,
        "sender_full_name": "simulacrum",
        "timestamp": 1625061965
    },
    {
        "content": "<p>anyway I'll try to fix that -- looks like we're missing some more commits and I missed it earlier</p>",
        "id": 244428660,
        "sender_full_name": "simulacrum",
        "timestamp": 1625062105
    },
    {
        "content": "<p>I find it interesting, the divergence here. In other words: perf.rlo is reporting the history correctly, right? Or at least is reporting data up to last night</p>",
        "id": 244428744,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625062140
    },
    {
        "content": "<p>which in my gut I would attribute to divergence between weekly_report.py vs the server, but from what you and <span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> were saying above, it seems like this problem is also present if one tries to query the endpoint?</p>",
        "id": 244428831,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625062188
    },
    {
        "content": "<p>(and so there is some <em>other</em> divergence, between the endpoint vs what the web interface to perf.rlo queries?)</p>",
        "id": 244428906,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625062208
    },
    {
        "content": "<p>I'm pretty sure we missed some commits</p>",
        "id": 244428948,
        "sender_full_name": "simulacrum",
        "timestamp": 1625062226
    },
    {
        "content": "<p>but who is “we” here? You mean even perf.rlo missed commits?</p>",
        "id": 244428975,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625062240
    },
    {
        "content": "<p>we're reporting history correctly because I think when there's a try commit we automatically pick up its parent or so?</p>",
        "id": 244428980,
        "sender_full_name": "simulacrum",
        "timestamp": 1625062241
    },
    {
        "content": "<p>yes, perf.rlo</p>",
        "id": 244428986,
        "sender_full_name": "simulacrum",
        "timestamp": 1625062248
    },
    {
        "content": "<p>(well, triagebot. perf.rlo gets its commit list from there)</p>",
        "id": 244429023,
        "sender_full_name": "simulacrum",
        "timestamp": 1625062264
    },
    {
        "content": "<p>so its the extreme divergence is in part an artifact of different traversal strategies?</p>",
        "id": 244429044,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625062277
    },
    {
        "content": "<p>i.e. the way that perf.rlo renders its graphs is totally different from how weekly_report.py tries to extract a series of commit-pairs ?</p>",
        "id": 244429091,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625062303
    },
    {
        "content": "<p>the graph is just rendered by looking at dates from commits we <em>did</em> collect</p>",
        "id": 244429169,
        "sender_full_name": "simulacrum",
        "timestamp": 1625062326
    },
    {
        "content": "<p>weekly report ensures that it goes forward to the \"next\" commit in the chain</p>",
        "id": 244429195,
        "sender_full_name": "simulacrum",
        "timestamp": 1625062338
    },
    {
        "content": "<p>let me rephrase my POV. I’m just noting that I find it interesting that the graph looks more useful right now than the output of weekly_report.py</p>",
        "id": 244429215,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625062349
    },
    {
        "content": "<p>so it sounds like weekly_report.py is effectively “failing fast”, as soon as it cannot find a next commit, it says “I must be done\"</p>",
        "id": 244429296,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625062382
    },
    {
        "content": "<p>right</p>",
        "id": 244429311,
        "sender_full_name": "simulacrum",
        "timestamp": 1625062386
    },
    {
        "content": "<p>because you don't want to compare across a gap, generally</p>",
        "id": 244429325,
        "sender_full_name": "simulacrum",
        "timestamp": 1625062393
    },
    {
        "content": "<p>but the graph is happy to present the timings even if there is a gap</p>",
        "id": 244429346,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625062406
    },
    {
        "content": "<p>sure, because it doesn't know about it -- we could stop it too, I guess</p>",
        "id": 244429388,
        "sender_full_name": "simulacrum",
        "timestamp": 1625062426
    },
    {
        "content": "<p>maybe the way to go is to have weekly_report.py (or the endpoint, if that’s preferable) jump over any gaps?</p>",
        "id": 244429417,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625062437
    },
    {
        "content": "<p>i.e. don’t report it as comparison; be honest that there’s a hiccup in the data that was collected</p>",
        "id": 244429491,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625062457
    },
    {
        "content": "<p>hm, I'd rather we fail out and just skip a week of triage or something</p>",
        "id": 244429505,
        "sender_full_name": "simulacrum",
        "timestamp": 1625062463
    },
    {
        "content": "<p>like, we want to recollect these commits ultimatley</p>",
        "id": 244429519,
        "sender_full_name": "simulacrum",
        "timestamp": 1625062473
    },
    {
        "content": "<p>hmm. I do tend to fall in the “bugs are not faults. bug-tolerance is bad because bugs that are tolerated don’t get fixed.” camp</p>",
        "id": 244429685,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625062535
    },
    {
        "content": "<p>but I also worry about being realistic here. I don’t have a good instinct for how often these problems come up</p>",
        "id": 244429810,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625062575
    },
    {
        "content": "<p>my current plan is to try to include both sides of any gap in the report. We’ll see if I can manage.</p>",
        "id": 244429961,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625062634
    },
    {
        "content": "<p>this has been the first time we've missed lots of commits in a row</p>",
        "id": 244430017,
        "sender_full_name": "simulacrum",
        "timestamp": 1625062664
    },
    {
        "content": "<p>my guess is it's related to triagebot being down for a good bit, due to accidental breakage landed in it</p>",
        "id": 244430040,
        "sender_full_name": "simulacrum",
        "timestamp": 1625062678
    },
    {
        "content": "<p>it's likely our recovery should be a little better -- there's ways for us to re-find missing commits in triagebot instead of relying on perfect webhook delivery</p>",
        "id": 244430151,
        "sender_full_name": "simulacrum",
        "timestamp": 1625062704
    },
    {
        "content": "<p>Also, I’m not clear why we can’t have both things. I.e.: A weekly_report.py script that handles gaps, <em>and</em> also spits out a loud message saying “Please look into why these commits are missing from the data.\"</p>",
        "id": 244430186,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625062728
    },
    {
        "content": "<p>Maybe -- I'm not sure we can readily find the next commit with the current API in such a case</p>",
        "id": 244430255,
        "sender_full_name": "simulacrum",
        "timestamp": 1625062761
    },
    {
        "content": "<p>you figure its a search that requires a human?</p>",
        "id": 244430294,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625062775
    },
    {
        "content": "<p>maybe a decent first step would be a warning if the final commit in the analysis is older than 48 hours</p>",
        "id": 244430406,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625062810
    },
    {
        "content": "<p>currently the search for the next commit is via essentially a linked list</p>",
        "id": 244430439,
        "sender_full_name": "simulacrum",
        "timestamp": 1625062825
    },
    {
        "content": "<p>so if you have a gap in that it's not readily possible to skip to the next one</p>",
        "id": 244430453,
        "sender_full_name": "simulacrum",
        "timestamp": 1625062835
    },
    {
        "content": "<p>(or 72 hours? What’s a good threshold here for “something seems wrong”)</p>",
        "id": 244430460,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625062839
    },
    {
        "content": "<p>that warning seems like an excellent idea -- even &gt;6 hours should be enough</p>",
        "id": 244430489,
        "sender_full_name": "simulacrum",
        "timestamp": 1625062850
    },
    {
        "content": "<p>Okay. I can look into adding that.</p>",
        "id": 244430530,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625062863
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/Triage.202021.2006.2029/near/244430453\">said</a>:</p>\n<blockquote>\n<p>so if you have a gap in that it's not readily possible to skip to the next one</p>\n</blockquote>\n<p>Can we not use Github API to search for candidates?</p>",
        "id": 244430571,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625062882
    },
    {
        "content": "<p>I think ... maybe? there's not really a notion of next commit in github, but you can go from the tip of master and walk backwards</p>",
        "id": 244430638,
        "sender_full_name": "simulacrum",
        "timestamp": 1625062909
    },
    {
        "content": "<p>I would think that if cargo-bisect-rustc can do this, then the weekly_report.py should be able to do so as well</p>",
        "id": 244430658,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625062919
    },
    {
        "content": "<p>ultimately once you have that code you want to add it to triagebot itself on the webhook and it'll just permanently fix this</p>",
        "id": 244430705,
        "sender_full_name": "simulacrum",
        "timestamp": 1625062925
    },
    {
        "content": "<p>bisect has essentially the right code, yes, just not quite as strict about being ordered in git history -- it just uses the date</p>",
        "id": 244430871,
        "sender_full_name": "simulacrum",
        "timestamp": 1625063010
    },
    {
        "content": "<p>true</p>",
        "id": 244430905,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625063025
    },
    {
        "content": "<p>and if something is missing won't really notice, though in practice that doesn't typically happen</p>",
        "id": 244430915,
        "sender_full_name": "simulacrum",
        "timestamp": 1625063028
    },
    {
        "content": "<p>The missing commits are enqueued for benchmarking -  <a href=\"https://perf.rust-lang.org/status.html\">https://perf.rust-lang.org/status.html</a>  -- it'll be a good bit. I think if you wanted to restart triage after the gap going to the latest one in that set and then finding the next commit (<a href=\"https://github.com/rust-lang/rust/commit/7c3872e6bfd555d2ad753ac1f871db3bd7f2a547\">7c3872e6bfd555d2ad753ac1f871db3bd7f2a547</a> I believe) and running perf with that should work</p>",
        "id": 244431337,
        "sender_full_name": "simulacrum",
        "timestamp": 1625063211
    },
    {
        "content": "<p>thanks! I was just about to ask you how to figure out which commit to start with</p>",
        "id": 244431610,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625063329
    },
    {
        "content": "<p>(I was manually walking through the list of bors merges and had gotten to <a href=\"https://github.com/rust-lang/rust/commit/456a03227e3c81a51631f87ec80cac301e5fa6d7\">456a03227e3c81a51631f87ec80cac301e5fa6d7</a> before I decided to check over here.)</p>",
        "id": 244431665,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625063351
    },
    {
        "content": "<p>Okay, done! Thanks for your help, <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> !</p>",
        "id": 244443481,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625067501
    },
    {
        "content": "<p>Should we try the endpoint again once the missing commits have been benchmarked?</p>",
        "id": 244452025,
        "sender_full_name": "rylev",
        "timestamp": 1625070966
    },
    {
        "content": "<p>Probably -- I imagine we should fix it to give partial results instead of aborting too</p>",
        "id": 244455603,
        "sender_full_name": "simulacrum",
        "timestamp": 1625072510
    }
]