[
    {
        "content": "<p>meanwhile I was taking a look at the meeting I've tried to reproduce the ripgrep issue and I wasn't able</p>",
        "id": 230046268,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1615562500
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[santiago@galago rg_test]$ time ./rg-stable_1.50  -c --no-mmap -a &#39;[a-z]&#39; subtitles2016-sample.en\n31813587\n\nreal    0m1.432s\nuser    0m1.237s\nsys 0m0.161s\n[santiago@galago rg_test]$ time ./rg-beta_1.51 -c --no-mmap -a &#39;[a-z]&#39; subtitles2016-sample.en\n31813587\n\nreal    0m1.497s\nuser    0m1.396s\nsys 0m0.100s\n</code></pre></div>",
        "id": 230046295,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1615562513
    },
    {
        "content": "<p>as <span class=\"user-mention\" data-user-id=\"352985\">@tm</span> said, I was not able to reproduce</p>",
        "id": 230046367,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1615562526
    },
    {
        "content": "<p>compiled on Linux using <code>cargo build --release</code></p>",
        "id": 230046396,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1615562533
    },
    {
        "content": "<p>unsure what have you tried <span class=\"user-mention\" data-user-id=\"352985\">@tm</span></p>",
        "id": 230046428,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1615562546
    },
    {
        "content": "<p>gonna try debug mode just in case</p>",
        "id": 230046554,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1615562595
    },
    {
        "content": "<p>Another thing that might be relevant is:<code>--features=simd-accel</code> / <code>RUSTFLAGS=-C target-cpu=native</code>, let me ask in the issue.</p>",
        "id": 230046823,
        "sender_full_name": "tm",
        "timestamp": 1615562693
    },
    {
        "content": "<p>right, I'm assuming that <span class=\"user-mention\" data-user-id=\"222471\">@BurntSushi</span> is using some feature or some flag when compiling rg</p>",
        "id": 230047178,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1615562830
    },
    {
        "content": "<p>in debug mode ...</p>",
        "id": 230047218,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1615562851
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[santiago@galago rg_test]$ time ./rg-stable_1.50  -c --no-mmap -a &#39;[a-z]&#39; subtitles2016-sample.en\n31813587\n\nreal    0m50.915s\nuser    0m50.684s\nsys 0m0.184s\n[santiago@galago rg_test]$ time ./rg-beta_1.51  -c --no-mmap -a &#39;[a-z]&#39; subtitles2016-sample.en\n31813587\n\nreal    0m53.960s\nuser    0m53.670s\nsys 0m0.214s\n</code></pre></div>",
        "id": 230047226,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1615562854
    },
    {
        "content": "<p>they advice that so I guess they're using that</p>",
        "id": 230047448,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1615562924
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ git clone https://github.com/BurntSushi/ripgrep\n$ cd ripgrep\n$ cargo build --release\n$ ./target/release/rg --version\n0.1.3\n</code></pre></div>",
        "id": 230047455,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1615562927
    },
    {
        "content": "<p>and</p>",
        "id": 230047457,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1615562928
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>RUSTFLAGS=&quot;-C target-cpu=native&quot; cargo build --release --features &#39;simd-accel&#39;\n</code></pre></div>",
        "id": 230047486,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1615562939
    },
    {
        "content": "<p>it doesn't even compile on stable :/</p>",
        "id": 230047729,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1615563020
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0554]: `#![feature]` may not be used on the stable release channel\n   --&gt; /home/santiago/.cargo/registry/src/github.com-1ecc6299db9ec823/packed_simd_2-0.3.4/src/lib.rs:202:1\n    |\n202 | / #![feature(\n203 | |     repr_simd,\n204 | |     rustc_attrs,\n205 | |     const_fn,\n...   |\n215 | |     llvm_asm\n216 | | )]\n    | |__^\n</code></pre></div>",
        "id": 230047732,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1615563023
    },
    {
        "content": "<p>I was compiling master, they may also be compiling some other branch maybe?</p>",
        "id": 230047960,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1615563107
    },
    {
        "content": "<p>Definitely make sure to match up the nightly versions.</p>",
        "id": 230054751,
        "sender_full_name": "nagisa",
        "timestamp": 1615565229
    },
    {
        "content": "<p>there has been a _ton_ of movement in backend lately due to the LLVM12 bump.</p>",
        "id": 230054804,
        "sender_full_name": "nagisa",
        "timestamp": 1615565243
    },
    {
        "content": "<p>it reproduced on beta for <span class=\"user-mention\" data-user-id=\"222471\">@BurntSushi</span> though, so presumably unrelated to llvm 12</p>",
        "id": 230054868,
        "sender_full_name": "simulacrum",
        "timestamp": 1615565262
    },
    {
        "content": "<p>thanks for looking into this! i posted an update: <a href=\"https://github.com/rust-lang/rust/issues/83027#issuecomment-797598711\">https://github.com/rust-lang/rust/issues/83027#issuecomment-797598711</a></p>\n<p>TL;DR - i was indeed setting <code>target-cpu=native</code> and that appears to be required to reproduce the regression. realizing that, i tried my smaller example and was able to reproduce it there as well. so we no longer need to worry about ripgrep for the reproduction specifically. but note that i used beta! not nightly.</p>",
        "id": 230058203,
        "sender_full_name": "BurntSushi",
        "timestamp": 1615566380
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/major.20performance.20regression.20between.20Rust.201.2E50.20and.20.2383027/near/230047729\">said</a>:</p>\n<blockquote>\n<p>it doesn't even compile on stable :/</p>\n</blockquote>\n<p>yeah the <code>simd-accel</code> feature never has. the README notes that you need nightly. these days, it only enables a bit of extra SIMD support for UTF-16 transcoding. everything else converted to <code>std::arch</code> once that became stable and uses dynamic CPU feature detection. so it no longer needs extra features enabled (or even <code>target-cpu=native</code>) to work.</p>",
        "id": 230058492,
        "sender_full_name": "BurntSushi",
        "timestamp": 1615566486
    },
    {
        "content": "<p>re: <a href=\"https://github.com/rust-lang/rust/issues/83027#issuecomment-797623039\">https://github.com/rust-lang/rust/issues/83027#issuecomment-797623039</a> build-std is a cargo flag not a rustc one <a href=\"https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#build-std\">https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#build-std</a></p>",
        "id": 230064171,
        "sender_full_name": "lqd",
        "timestamp": 1615568596
    },
    {
        "content": "<p>(I can repro on skylake, -Zbuild-std does not seem to fix it for me)</p>",
        "id": 230065560,
        "sender_full_name": "lqd",
        "timestamp": 1615569161
    },
    {
        "content": "<p>Hm, does the called function that's not being inlined anymore have anything of the <code>#[target_feature(enable=\"...\")]</code> sort on it?</p>",
        "id": 230065641,
        "sender_full_name": "nagisa",
        "timestamp": 1615569204
    },
    {
        "content": "<p>was it this ? <a href=\"https://github.com/rust-lang/stdarch/blob/a06cb4ca550935349f662f7711a2ae46dca796c7/crates/core_arch/src/x86/mod.rs#L458\">https://github.com/rust-lang/stdarch/blob/a06cb4ca550935349f662f7711a2ae46dca796c7/crates/core_arch/src/x86/mod.rs#L458</a></p>",
        "id": 230065931,
        "sender_full_name": "lqd",
        "timestamp": 1615569323
    },
    {
        "content": "<p>Do you reproduce it with <code>-Ctarget-cpu=native</code>? Does it reproduce with <code>-Ctarget-cpu=skylake</code> as well?</p>",
        "id": 230066107,
        "sender_full_name": "tm",
        "timestamp": 1615569408
    },
    {
        "content": "<p>I reproduce with <code>native</code>, I'll try with <code>skylake</code> explicitly</p>",
        "id": 230066170,
        "sender_full_name": "lqd",
        "timestamp": 1615569442
    },
    {
        "content": "<p>doesn't repro with <code>skylake</code></p>",
        "id": 230066346,
        "sender_full_name": "lqd",
        "timestamp": 1615569532
    },
    {
        "content": "<p>makes <a href=\"https://github.com/rust-lang/rust/issues/80749\">#80749</a> more likely right ?</p>",
        "id": 230066548,
        "sender_full_name": "lqd",
        "timestamp": 1615569615
    },
    {
        "content": "<p>yes.</p>",
        "id": 230066708,
        "sender_full_name": "nagisa",
        "timestamp": 1615569691
    },
    {
        "content": "<p>Could you check what features it detects?</p>\n<div class=\"codehilite\"><pre><span></span><code>gdb --args rustc -Ctarget-cpu=native a.rs\n(gdb) b LLVMRustCreateTargetMachine\n(gdb) run\n(gdb) set print elements 0\n(gdb) x/s $rdx\n</code></pre></div>",
        "id": 230067904,
        "sender_full_name": "tm",
        "timestamp": 1615570234
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>0x7ffff3454300: &quot;+sse2,-tsxldtrk,+cx16,+sahf,-tbm,-avx512ifma,-sha,-gfni,-fma4,-vpclmulqdq,+prfchw,+bmi2,-cldemote,+fsgsbase,-ptwrite,-amx-tile,-avx512bf16,+popcnt,+aes,-avx512bitalg,-movdiri,+xsaves,-avx512er,+xsavec,-avx512vnni,-amx-bf16,-avx512vpopcntdq,-pconfig,-clwb,-avx512f,-clzero,-pku,+mmx,-lwp,-rdpid,-xop,+rdseed,-waitpkg,-movdir64b,-sse4a,-avx512bw,+clflushopt,+xsave,-avx512vbmi2,+64bit,-avx512vl,-serialize,+invpcid,-avx512cd,+avx,-vaes,+cx8,+fma,+rtm,+bmi,-enqcmd,+rdrnd,-mwaitx,+sse4.1,+sse4.2,+avx2,+fxsr,-wbnoinvd,+sse,+lzcnt,+pclmul,-prefetchwt1,+f16c,+ssse3,-sgx,-shstk,+cmov,-avx512vbmi,-amx-int8,+movbe,-avx512vp2intersect,+xsaveopt,-avx512dq,+adx,-avx512pf,+sse3&quot;\n</code></pre></div>",
        "id": 230068309,
        "sender_full_name": "lqd",
        "timestamp": 1615570407
    },
    {
        "content": "<p>which _seems_ acceptable for AVX __m256i ?</p>",
        "id": 230068816,
        "sender_full_name": "lqd",
        "timestamp": 1615570600
    },
    {
        "content": "<p>Hmm, settings those manually still doesn't seem to be sufficient to reproduce the issue.</p>",
        "id": 230069521,
        "sender_full_name": "tm",
        "timestamp": 1615570914
    },
    {
        "content": "<p>if somebody could bisect this that would be useful too.</p>",
        "id": 230073236,
        "sender_full_name": "nagisa",
        "timestamp": 1615572317
    },
    {
        "content": "<p>a more minimal repro would be useful for that as well, and just inspecting whether the offending functions are inlined or not</p>",
        "id": 230073380,
        "sender_full_name": "lqd",
        "timestamp": 1615572379
    },
    {
        "content": "<p>since <code>m256iExt</code> is a private trait it's a bit tricky, but I think this will do: using one of the other intrinsics using one of the private trait's functions which are not inlined</p>",
        "id": 230076331,
        "sender_full_name": "lqd",
        "timestamp": 1615573757
    },
    {
        "content": "<p>github gist (and therefore the playground sharing) are not working ATM so: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[cfg(target_arch = </span><span class=\"s\">\"x86\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">arch</span>::<span class=\"n\">x86</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[cfg(target_arch = </span><span class=\"s\">\"x86_64\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">arch</span>::<span class=\"n\">x86_64</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">intrinsics</span>::<span class=\"n\">transmute</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[target_feature(enable = </span><span class=\"s\">\"avx2\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_mm256_set_epi32</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_mm256_set_epi32</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_mm256_set_epi32</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_mm256_add_epi32</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">assert_eq_m256i</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"fm\">is_x86_feature_detected!</span><span class=\"p\">(</span><span class=\"s\">\"avx2\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"avx2 feature not detected\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[target_feature(enable = </span><span class=\"s\">\"avx\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">assert_eq_m256i</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">__m256i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">__m256i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">transmute</span>::<span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u64</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">transmute</span>::<span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u64</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 230076621,
        "sender_full_name": "lqd",
        "timestamp": 1615573887
    },
    {
        "content": "<p>as expected, not inlined with the native target-cpu:</p>\n<div class=\"codehilite\"><pre><span></span><code>lqd@oxygen:memchr-perf-regression$ rm regress*\nlqd@oxygen:memchr-perf-regression$ cargo build --release &amp;&amp; cp target/release/memchr-perf-regression ./regress\n   Compiling memchr-perf-regression v0.1.0 (/mnt/d/work/rust/youpi/tmp/memchr-perf-regression)\n    Finished release [optimized] target(s) in 0.77s\nlqd@oxygen:memchr-perf-regression$ RUSTFLAGS=&quot;-C target-cpu=skylake&quot; cargo build --release &amp;&amp; cp target/release/memchr-perf-regression ./regress-skylake\n   Compiling memchr-perf-regression v0.1.0 (/mnt/d/work/rust/youpi/tmp/memchr-perf-regression)\n    Finished release [optimized] target(s) in 0.55s\nlqd@oxygen:memchr-perf-regression$ RUSTFLAGS=&quot;-C target-cpu=native&quot; cargo build --release &amp;&amp; cp target/release/memchr-perf-regression ./regress-native\n   Compiling memchr-perf-regression v0.1.0 (/mnt/d/work/rust/youpi/tmp/memchr-perf-regression)\n    Finished release [optimized] target(s) in 0.56s\nlqd@oxygen:memchr-perf-regression$ objdump -d regress| grep as_i32x8\nlqd@oxygen:memchr-perf-regression$ objdump -d regress-skylake| grep as_i32x8\nlqd@oxygen:memchr-perf-regression$ objdump -d regress-native| grep as_i32x8\n0000000000006960 &lt;_ZN4core9core_arch3x868m256iExt8as_i32x817h6f0a02a3bdc3d3e7E&gt;:\n    6ade:       e8 7d fe ff ff          callq  6960 &lt;_ZN4core9core_arch3x868m256iExt8as_i32x817h6f0a02a3bdc3d3e7E&gt;\n    6b0a:       e8 51 fe ff ff          callq  6960 &lt;_ZN4core9core_arch3x868m256iExt8as_i32x817h6f0a02a3bdc3d3e7E&gt;\n</code></pre></div>",
        "id": 230076803,
        "sender_full_name": "lqd",
        "timestamp": 1615573973
    },
    {
        "content": "<p>That's still pretty hard to reason about since the meat of the issue is inside core (it's one of those set or add functions that's calling the as_i32x8 right?</p>",
        "id": 230084711,
        "sender_full_name": "nagisa",
        "timestamp": 1615577490
    },
    {
        "content": "<p>I do have a hunch in what would be necessary to fix it tho.</p>",
        "id": 230084742,
        "sender_full_name": "nagisa",
        "timestamp": 1615577508
    },
    {
        "content": "<p>I think what's happening is that that as_i32x8 is getting a _wider_ feature set than the functions that call it.</p>",
        "id": 230084866,
        "sender_full_name": "nagisa",
        "timestamp": 1615577557
    },
    {
        "content": "<p>(add/set being just avx2 and the other functions being \"everything native cpu supports\")</p>",
        "id": 230084997,
        "sender_full_name": "nagisa",
        "timestamp": 1615577604
    },
    {
        "content": "<p>ah interesting yeah</p>",
        "id": 230086250,
        "sender_full_name": "lqd",
        "timestamp": 1615578183
    },
    {
        "content": "<p>indeed stdarch's <code>_mm256_add_epi32</code> calls <code>as_i32x8</code> on the two m256i</p>",
        "id": 230086342,
        "sender_full_name": "lqd",
        "timestamp": 1615578235
    },
    {
        "content": "<p>here <a href=\"https://github.com/rust-lang/stdarch/blob/35595690d7881b20bd419875c2b64f284534d237/crates/core_arch/src/x86/avx2.rs#L80-L82\">https://github.com/rust-lang/stdarch/blob/35595690d7881b20bd419875c2b64f284534d237/crates/core_arch/src/x86/avx2.rs#L80-L82</a></p>",
        "id": 230086456,
        "sender_full_name": "lqd",
        "timestamp": 1615578284
    },
    {
        "content": "<p>modulo the actual revision of stdarch used in the tested rustcs/libcore (3 months ago or so)</p>",
        "id": 230086504,
        "sender_full_name": "lqd",
        "timestamp": 1615578313
    },
    {
        "content": "<p>at least I can bisect with that, but it's currently downloading CI artifacts at 30kb/s so that'll take a while</p>",
        "id": 230086575,
        "sender_full_name": "lqd",
        "timestamp": 1615578353
    },
    {
        "content": "<p>it's in nightly-2021-01-10 which is the first with <a href=\"https://github.com/rust-lang/rust/issues/80749\">#80749</a> though</p>",
        "id": 230086650,
        "sender_full_name": "lqd",
        "timestamp": 1615578376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> do you think we have to minimize stdarch for this ?</p>",
        "id": 230088834,
        "sender_full_name": "lqd",
        "timestamp": 1615579325
    },
    {
        "content": "<p>(if we don't need to minimize it, you can have a direct stdarch dependency, say at rev <a href=\"https://github.com/rust-lang/rust/commit/9c732a56f67f54d12a0b4fd99993154906c95ea6\">9c732a56f67f54d12a0b4fd99993154906c95ea6</a> which is the one in libcore, and the same function will work equally:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">core_arch</span>::<span class=\"n\">arch</span>::<span class=\"n\">x86_64</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_mm256_set_epi32</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_mm256_set_epi32</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_mm256_add_epi32</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"r: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>)</p>",
        "id": 230090612,
        "sender_full_name": "lqd",
        "timestamp": 1615580047
    },
    {
        "content": "<p>Could you share optimized LLVM IR, where those functions are still not inlined?</p>",
        "id": 230091172,
        "sender_full_name": "tm",
        "timestamp": 1615580327
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"352985\">@tm</span> something like <a href=\"https://gist.github.com/lqd/62f8590c4c0449ab9b7bdee09e0ecfb3\">https://gist.github.com/lqd/62f8590c4c0449ab9b7bdee09e0ecfb3</a> ?</p>",
        "id": 230091979,
        "sender_full_name": "lqd",
        "timestamp": 1615580722
    },
    {
        "content": "<p>Yes, thanks!</p>",
        "id": 230092483,
        "sender_full_name": "tm",
        "timestamp": 1615580844
    },
    {
        "content": "<p>sure, no problem :)</p>",
        "id": 230092537,
        "sender_full_name": "lqd",
        "timestamp": 1615580868
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/6\">#6</a> is the one of interest IIUC, and it doesn't have the target-feature that the other two intrinsics have</p>",
        "id": 230093053,
        "sender_full_name": "lqd",
        "timestamp": 1615581064
    },
    {
        "content": "<p>that shouldn't be problematic, right ?</p>",
        "id": 230093127,
        "sender_full_name": "lqd",
        "timestamp": 1615581098
    },
    {
        "content": "<p>No it shouldn't. Running opt on that inlines everything.</p>",
        "id": 230093700,
        "sender_full_name": "tm",
        "timestamp": 1615581351
    },
    {
        "content": "<p>I think we can just copy over some functions from there to make a self-container repro.</p>",
        "id": 230094068,
        "sender_full_name": "nagisa",
        "timestamp": 1615581521
    },
    {
        "content": "<p><code>opt</code> can't really be used here as a way of reproducing, because the \"default\" target-features get set on the targetmachine and are not reflected in the IR.</p>",
        "id": 230094124,
        "sender_full_name": "nagisa",
        "timestamp": 1615581556
    },
    {
        "content": "<p>I think you may need to set <code>-mattr=...</code> of all of the features?</p>",
        "id": 230094143,
        "sender_full_name": "nagisa",
        "timestamp": 1615581572
    },
    {
        "content": "<p>I'm hacking on this, will have something easier to work with soonish I think</p>",
        "id": 230094187,
        "sender_full_name": "nagisa",
        "timestamp": 1615581599
    },
    {
        "content": "<p>I can try minimizing stdarch more if you want; but mostly x86/mod with macros, sse, sse2, avx, avx2 are used in this case</p>",
        "id": 230094506,
        "sender_full_name": "lqd",
        "timestamp": 1615581745
    },
    {
        "content": "<p>the rest can be commented out wholesale</p>",
        "id": 230094528,
        "sender_full_name": "lqd",
        "timestamp": 1615581758
    },
    {
        "content": "<p><a href=\"https://godbolt.org/z/6fvoTP\">https://godbolt.org/z/6fvoTP</a> here's a self-contained sample.</p>",
        "id": 230095477,
        "sender_full_name": "nagisa",
        "timestamp": 1615582264
    },
    {
        "content": "<p>you're too fast :)</p>",
        "id": 230095665,
        "sender_full_name": "lqd",
        "timestamp": 1615582360
    },
    {
        "content": "<p>if we <code>#[target_feature]</code> everything, it's all inlined. same if we <code>#[inline(always)]</code> <code>as_i32x8</code> ...</p>",
        "id": 230096616,
        "sender_full_name": "lqd",
        "timestamp": 1615582777
    },
    {
        "content": "<p>What confuses me the most is that <code>as_i32x8</code> does get inlined if you <code>#[inline(never)]</code> the <code>add</code> function.</p>",
        "id": 230096779,
        "sender_full_name": "nagisa",
        "timestamp": 1615582822
    },
    {
        "content": "<p><a href=\"https://godbolt.org/z/3vTv3s\">https://godbolt.org/z/3vTv3s</a></p>",
        "id": 230096875,
        "sender_full_name": "nagisa",
        "timestamp": 1615582850
    },
    {
        "content": "<p>...</p>",
        "id": 230097407,
        "sender_full_name": "lqd",
        "timestamp": 1615583102
    },
    {
        "content": "<p>everything's also inlined if we do <em>not</em> target_feature <code>test</code> ?</p>",
        "id": 230098045,
        "sender_full_name": "lqd",
        "timestamp": 1615583403
    },
    {
        "content": "<p>Well, yeah, but we cannot do that in actuality.</p>",
        "id": 230099264,
        "sender_full_name": "nagisa",
        "timestamp": 1615583963
    },
    {
        "content": "<p>if we remove all of the <code>#[inline]</code> annotations everything works great too.</p>",
        "id": 230099296,
        "sender_full_name": "nagisa",
        "timestamp": 1615583981
    },
    {
        "content": "<p>yeah I know we can't remove it, but I didn't expect it would get inlined <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>",
        "id": 230099510,
        "sender_full_name": "lqd",
        "timestamp": 1615584062
    },
    {
        "content": "<p>this is all pretty weird :)</p>",
        "id": 230099567,
        "sender_full_name": "lqd",
        "timestamp": 1615584089
    },
    {
        "content": "<p>I suspect that's the other reverse inline thing in action.</p>",
        "id": 230101007,
        "sender_full_name": "nagisa",
        "timestamp": 1615584702
    },
    {
        "content": "<p>The godbolt output seems random. I am adding newlines and seeing different results ...</p>",
        "id": 230108763,
        "sender_full_name": "tm",
        "timestamp": 1615587459
    },
    {
        "content": "<p>HA!</p>",
        "id": 230111947,
        "sender_full_name": "nagisa",
        "timestamp": 1615589144
    }
]