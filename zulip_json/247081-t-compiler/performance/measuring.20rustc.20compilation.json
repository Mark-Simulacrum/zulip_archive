[
    {
        "content": "<p>The good news is that I've pushed up commits which should <em>start</em> us down the road of being able to collect data from rust-lang/rust stage0 builds (but with the latest master rustc, i.e., self-bootstrapping). No rendering or really access to that data publicly yet, and it looks like it'll be pretty high variance initially at least, but I'm hopeful that we can make progress on those over time.</p>\n<p>Currently we just collecting the raw timing data (in seconds) that's printed by bootstrap in the RUSTC-TIMING comments; we also don't prevent the natural parallelism (-j12 on collection server, I believe). Depending on how high the variance ends up being with that we'll fine-tune things over time I expect.</p>",
        "id": 211282603,
        "sender_full_name": "simulacrum",
        "timestamp": 1601052103
    },
    {
        "content": "<p>I am particularly interested in adding \"compilation max-rss\" with an interest of driving that down, since we know that contributors on relatively weaker hardware (really, anything &lt;=8 GB) are currently mostly unable to compile rustc without heroics locally.</p>",
        "id": 211282717,
        "sender_full_name": "simulacrum",
        "timestamp": 1601052150
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/76680\">#76680</a> was a recent effort from a (new?) contibutor to reduce the amount of generated LLVM IR within <code>rustc</code>. It seems to have sped up a few benchmarks as well. I'm sure they would appreciate this, since they ran into a problem that I've also hit before:</p>\n<blockquote>\n<p>Watching YouTube while compiling added to much noise...</p>\n</blockquote>",
        "id": 211301978,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1601061178
    },
    {
        "content": "<p>Haha, same</p>",
        "id": 211316586,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1601067145
    },
    {
        "content": "<p>Literally the reason why I don't like running perf locally.</p>",
        "id": 211316701,
        "sender_full_name": "mati865",
        "timestamp": 1601067210
    },
    {
        "content": "<p>initial results on a try build (no two master commits have been rustc benchmarked yet): <a href=\"https://perf.rust-lang.org/compare.html?start=b984ef6797ff17faa2b1e0ebb54b78de1491e5fd&amp;end=da15df4c276090851136ca9a686285f76cbaaf98\">https://perf.rust-lang.org/compare.html?start=b984ef6797ff17faa2b1e0ebb54b78de1491e5fd&amp;end=da15df4c276090851136ca9a686285f76cbaaf98</a>, scroll down for bootstrap timings</p>",
        "id": 211320037,
        "sender_full_name": "simulacrum",
        "timestamp": 1601069325
    },
    {
        "content": "<p>(currently we hide anything less than 10 seconds)</p>",
        "id": 211320047,
        "sender_full_name": "simulacrum",
        "timestamp": 1601069332
    },
    {
        "content": "<p>I'm guessing a lot of that variance is scheduler luck?</p>",
        "id": 211320644,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1601069679
    },
    {
        "content": "<p>(That's a low confidence guess BTW)</p>",
        "id": 211321420,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1601070142
    },
    {
        "content": "<p>hm, I don't think scheduler here is quite the right word</p>",
        "id": 211322007,
        "sender_full_name": "simulacrum",
        "timestamp": 1601070486
    },
    {
        "content": "<p>I guess at some level it is</p>",
        "id": 211322029,
        "sender_full_name": "simulacrum",
        "timestamp": 1601070508
    },
    {
        "content": "<p>but it's basically that the jobserver is entirely random essentially in terms of who gets the next token</p>",
        "id": 211322049,
        "sender_full_name": "simulacrum",
        "timestamp": 1601070529
    },
    {
        "content": "<p>well, jobserver is deterministic, but enqueuing into jobserver queue can easily be swapped by small differences in timing, yielding outsized effects on total time as you either serialize or not cgus I suspect</p>",
        "id": 211322128,
        "sender_full_name": "simulacrum",
        "timestamp": 1601070587
    },
    {
        "content": "<p>I've pushed up a commit that runs the build twice and we'll take the min for each crate, hopefully that'll be enough -- I don't know that we can afford three runs</p>",
        "id": 211322192,
        "sender_full_name": "simulacrum",
        "timestamp": 1601070609
    },
    {
        "content": "<p>I'm actually quite happy to see that on recent, but not too expensive hardware ($250-300 CPU, without discounts -- 3600x), you can get a stage1 build in roughly ~7 minutes these days from scratch</p>",
        "id": 211322302,
        "sender_full_name": "simulacrum",
        "timestamp": 1601070713
    },
    {
        "content": "<p>I guess it really does help to have those 12 threads</p>",
        "id": 211322354,
        "sender_full_name": "simulacrum",
        "timestamp": 1601070728
    },
    {
        "content": "<p>How did you speed up building the compiler this time? ryzen.</p>",
        "id": 211359930,
        "sender_full_name": "Eh2406",
        "timestamp": 1601126702
    }
]