[
    {
        "content": "<p>One of the benchmarks is not building.  <a href=\"https://github.com/rust-lang/rustc-perf/runs/3102225289\">https://github.com/rust-lang/rustc-perf/runs/3102225289</a> There seems to be lots of fingerprint errors, but I'm not sure if those are expected when the cache is not populated. There's a lot of logs (43K lines) so it's a bit hard to tell. <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> have you seen this before?</p>",
        "id": 246435270,
        "sender_full_name": "rylev",
        "timestamp": 1626688179
    },
    {
        "content": "<p>Yeah the logs aren't the best</p>",
        "id": 246438651,
        "sender_full_name": "simulacrum",
        "timestamp": 1626690606
    },
    {
        "content": "<p>But the actual error is an ice</p>",
        "id": 246438677,
        "sender_full_name": "simulacrum",
        "timestamp": 1626690618
    },
    {
        "content": "<p>thread 'rustc' panicked at 'no errors encountered even though <code>delay_span_bug</code> issued', compiler/rustc_errors/src/lib.rs:1050:13</p>",
        "id": 246438684,
        "sender_full_name": "simulacrum",
        "timestamp": 1626690622
    },
    {
        "content": "<p>Easier to get from <a href=\"https://perf.rust-lang.org/status.html\">https://perf.rust-lang.org/status.html</a></p>",
        "id": 246438708,
        "sender_full_name": "simulacrum",
        "timestamp": 1626690649
    },
    {
        "content": "<p>(we currently expect everything to build in CI on rustc-perf, so if rustc has a regression that can cause CI to start failing)</p>",
        "id": 246438786,
        "sender_full_name": "simulacrum",
        "timestamp": 1626690704
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> usually I file an issue (or raise priority on an existing one)</p>",
        "id": 246438858,
        "sender_full_name": "simulacrum",
        "timestamp": 1626690739
    },
    {
        "content": "<p>Ok I can do that</p>",
        "id": 246440528,
        "sender_full_name": "rylev",
        "timestamp": 1626692106
    },
    {
        "content": "<p>probably a regression from <a href=\"https://github.com/rust-lang/rust/issues/87146\">#87146</a></p>",
        "id": 246440667,
        "sender_full_name": "lqd",
        "timestamp": 1626692236
    },
    {
        "content": "<p>Going to do a bisect</p>",
        "id": 246440914,
        "sender_full_name": "rylev",
        "timestamp": 1626692417
    },
    {
        "content": "<p>no need, its parent doesn't ice</p>",
        "id": 246441145,
        "sender_full_name": "lqd",
        "timestamp": 1626692606
    },
    {
        "content": "<p>Yea ok, I can reproduce the issue</p>",
        "id": 246441166,
        "sender_full_name": "rylev",
        "timestamp": 1626692635
    },
    {
        "content": "<p>Let me see if I can wittle it down a bit</p>",
        "id": 246441231,
        "sender_full_name": "rylev",
        "timestamp": 1626692667
    },
    {
        "content": "<p>maybe the perf bot should post a comment on a PR when <em>handwave</em>  it fails with a new error while trying to benchmark it ?</p>",
        "id": 246441540,
        "sender_full_name": "lqd",
        "timestamp": 1626692930
    },
    {
        "content": "<p>We don't detect that today but it wouldn't be too hard to manage, I think</p>",
        "id": 246441821,
        "sender_full_name": "simulacrum",
        "timestamp": 1626693175
    },
    {
        "content": "<p>Made an issue with that idea: <a href=\"https://github.com/rust-lang/rustc-perf/issues/918\">https://github.com/rust-lang/rustc-perf/issues/918</a></p>",
        "id": 246443016,
        "sender_full_name": "rylev",
        "timestamp": 1626694099
    },
    {
        "content": "<p>Made an issue for the ICE: <a href=\"https://github.com/rust-lang/rust/issues/87274\">https://github.com/rust-lang/rust/issues/87274</a></p>",
        "id": 246443885,
        "sender_full_name": "rylev",
        "timestamp": 1626694768
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Value</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">as_u32_vec</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">unimplemented!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">TIFFDecoder</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">TIFFDecoder</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">get_tag</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">unimplemented!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">get_tag_u32_vec</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kr\">try</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">get_tag</span><span class=\"p\">())).</span><span class=\"n\">as_u32_vec</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(note: <code>rustc +0ecff8c623fa29cccad6f946c657e81dacd85847 --crate-name image src/lib.rs --crate-type lib</code>)</p>",
        "id": 246447888,
        "sender_full_name": "lqd",
        "timestamp": 1626697661
    }
]