[
    {
        "content": "<p>As far as I can tell:</p>\n<ul>\n<li>By default rustc is not built with jemalloc.</li>\n<li>But if you specify <code>[rust] jemalloc = true</code> in <code>config.toml</code> jemalloc is used</li>\n<li>The compiler uses the <code>tikv-jemallocator</code> crate, which is \"is a simplified fork of jemallocator focus on server\", according to its docs. (What does that mean?)</li>\n</ul>",
        "id": 263958722,
        "sender_full_name": "nnethercote",
        "timestamp": 1638853123
    },
    {
        "content": "<p>I just tried turning it on, I get widespread perf improvements of up to 10% instruction counts, and even more for cycles.</p>",
        "id": 263958758,
        "sender_full_name": "nnethercote",
        "timestamp": 1638853194
    },
    {
        "content": "<p>IIRC it was the default in the past, why did this change?</p>",
        "id": 263958810,
        "sender_full_name": "nnethercote",
        "timestamp": 1638853207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@nnethercote</span> Almost all of the prebuilt rustc distributions enable jemalloc.   The default used to be that all rust programs used jemalloc, but that was changed in <a href=\"https://github.com/rust-lang/rust/issues/55238\">#55238</a> (because it was huge IIRC).</p>",
        "id": 263960276,
        "sender_full_name": "Eric Huss",
        "timestamp": 1638854779
    },
    {
        "content": "<p>(at least the pre-built rustc distributed by rust-lang, I don't know what distros do)</p>",
        "id": 263960292,
        "sender_full_name": "Eric Huss",
        "timestamp": 1638854805
    },
    {
        "content": "<p>Yes, I think that was a reasonable decision as the default for all Rust programs.</p>",
        "id": 263960316,
        "sender_full_name": "nnethercote",
        "timestamp": 1638854842
    },
    {
        "content": "<p>But for the compiler itself, which is already big...</p>",
        "id": 263960326,
        "sender_full_name": "nnethercote",
        "timestamp": 1638854854
    },
    {
        "content": "<p>What does \"prebuilt rustc distributions\" mean?</p>",
        "id": 263960334,
        "sender_full_name": "nnethercote",
        "timestamp": 1638854865
    },
    {
        "content": "<p>I mean the rustc distributed by rustup.</p>",
        "id": 263960414,
        "sender_full_name": "Eric Huss",
        "timestamp": 1638854940
    },
    {
        "content": "<p>I guess I shouldn't say most of them.  x86 linux and macos use jemalloc.</p>",
        "id": 263960425,
        "sender_full_name": "Eric Huss",
        "timestamp": 1638854957
    },
    {
        "content": "<p>Do you know about the builds for CI perf runs, do they use jemalloc?</p>",
        "id": 263960452,
        "sender_full_name": "nnethercote",
        "timestamp": 1638854993
    },
    {
        "content": "<p>I would assume they do, but I don't know much about perf.  IIRC, it uses a normal linux dist build, so it should.</p>",
        "id": 263960603,
        "sender_full_name": "Eric Huss",
        "timestamp": 1638855126
    },
    {
        "content": "<p>Hmm, I don't see any jemalloc symbols in my installed <code>rustc</code> on Linux</p>",
        "id": 263960734,
        "sender_full_name": "nnethercote",
        "timestamp": 1638855266
    },
    {
        "content": "<p>If you're investingating allocators, it's perhaps worth noting: not too long ago there was some experimentation about using mimalloc, and it looked very promising over jemalloc (perf numbers are in here: <a href=\"https://github.com/rust-lang/rust/pull/81782\">https://github.com/rust-lang/rust/pull/81782</a> ).</p>\n<p>People who know more about jemalloc than I were arguing that this is because using jemalloc to override system malloc/free is not ideal (jemalloc really wants to know size in the deallocator), but when I looked it seemed ...difficult to change, given how many allocations come from inside llvm.</p>\n<p>I don't know exactly what happened here, but if you're looking at this, it's possibly worth figuring out if this change is worth it. My Those numbers are relatively close to my own experience with mimalloc vs jemalloc (switching to mimalloc often gave boosts on the order of ~5-10% across the whole application — but it was a while ago and was with jemallocator (not tikv's) so maybe that helps explain).</p>",
        "id": 263960745,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1638855284
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@nnethercote</span> The jemalloc symbols are prefixed on linux with rjem.  <code>nm $(rustup which rustc) | grep rjem</code> should show a bunch</p>",
        "id": 263961835,
        "sender_full_name": "Eric Huss",
        "timestamp": 1638856490
    },
    {
        "content": "<p>I see, thanks! I had tried <code>nm $(which rustc) | grep jem</code> and that gave me nothing</p>",
        "id": 263964197,
        "sender_full_name": "nnethercote",
        "timestamp": 1638859108
    },
    {
        "content": "<p>To sum it up, Linux dist builds still use jemalloc through tikv-jemallocator as that was found to give nice improvements across the board: <a href=\"https://perf.rust-lang.org/compare.html?start=36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d&amp;end=33fa9f15639c420e2e76b65192553337d67a7e0a\">https://perf.rust-lang.org/compare.html?start=36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d&amp;end=33fa9f15639c420e2e76b65192553337d67a7e0a</a> <br>\nThis implementaion uses sized deallocation as one of the key changes.</p>",
        "id": 263987978,
        "sender_full_name": "mati865",
        "timestamp": 1638876614
    },
    {
        "content": "<p>Thanks! I was wondering how tikv-jemallocator differed from jemallocator, good to have the explanation.</p>",
        "id": 263988412,
        "sender_full_name": "nnethercote",
        "timestamp": 1638876857
    },
    {
        "content": "<p>If you want more details on how that was achieved you can look at my comment at <a href=\"https://github.com/rust-lang/rust/pull/83152#issuecomment-804717951\">https://github.com/rust-lang/rust/pull/83152#issuecomment-804717951</a></p>\n<blockquote>\n<p>Those 2 lines <a href=\"https://github.com/rust-lang/rust/pull/83152/files#diff-43914724af6e464c1da2171e4a9b6c7e607d5bc1203fa95c0ab85be4122605efR3-R4\">https://github.com/rust-lang/rust/pull/83152/files#diff-43914724af6e464c1da2171e4a9b6c7e607d5bc1203fa95c0ab85be4122605efR3-R4</a> lead to <a href=\"https://docs.rs/tikv-jemallocator/0.4.1/src/tikv_jemallocator/lib.rs.html#125\">https://docs.rs/tikv-jemallocator/0.4.1/src/tikv_jemallocator/lib.rs.html#125</a>. sdallocx is sized deallocation.</p>\n</blockquote>",
        "id": 263988667,
        "sender_full_name": "mati865",
        "timestamp": 1638877049
    },
    {
        "content": "<p>Hmm, this made me wonder what happened to jemalloc. There are n new releases since mid 2019.</p>",
        "id": 263988870,
        "sender_full_name": "mati865",
        "timestamp": 1638877192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120989\">nnethercote</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/jemalloc/near/263960452\">said</a>:</p>\n<blockquote>\n<p>Do you know about the builds for CI perf runs, do they use jemalloc?</p>\n</blockquote>",
        "id": 264024683,
        "sender_full_name": "Jack Huey",
        "timestamp": 1638893957
    },
    {
        "content": "<p>Perf uses try builds, which are built the same  way artifacts that get distributed are</p>",
        "id": 264025076,
        "sender_full_name": "Jack Huey",
        "timestamp": 1638894097
    },
    {
        "content": "<p>Revisiting this: so how is the configuration for try/distributed builds specified?</p>",
        "id": 268620282,
        "sender_full_name": "nnethercote",
        "timestamp": 1642635611
    },
    {
        "content": "<p>And why isn't jemalloc=true on by default for local builds of rustc, given that it makes things much faster?</p>",
        "id": 268620289,
        "sender_full_name": "nnethercote",
        "timestamp": 1642635627
    },
    {
        "content": "<p>most of it starts here <a href=\"https://github.com/rust-lang/rust/blob/5e57faa78aa7661c6000204591558f6665f11abc/src/ci/run.sh#L46\">https://github.com/rust-lang/rust/blob/5e57faa78aa7661c6000204591558f6665f11abc/src/ci/run.sh#L46</a></p>",
        "id": 268620707,
        "sender_full_name": "simulacrum",
        "timestamp": 1642636007
    },
    {
        "content": "<p>Q1: <a href=\"https://github.com/rust-lang/rust/blob/master/src/ci/docker/host-x86_64/dist-x86_64-linux/Dockerfile#L124\">https://github.com/rust-lang/rust/blob/master/src/ci/docker/host-x86_64/dist-x86_64-linux/Dockerfile#L124</a><br>\nQ2: I guess because it's not the default on all platforms and config.toml hasn't had platform-specific defaults, I think.</p>",
        "id": 268620715,
        "sender_full_name": "The 8472",
        "timestamp": 1642636011
    },
    {
        "content": "<p>I'd personally have no objections to a PR which turns it on locally by default on the platforms it works on (linux + macOS, I guess, to start)</p>",
        "id": 268620756,
        "sender_full_name": "simulacrum",
        "timestamp": 1642636065
    },
    {
        "content": "<p>Is that benefit still true against current glibc? I thought that gap was mostly closed</p>",
        "id": 268623466,
        "sender_full_name": "cuviper",
        "timestamp": 1642637799
    },
    {
        "content": "<p>It may depend on what \"current glibc\" means, but on my Ubuntu 21.10 box jemalloc is still much better, e.g. makes rustc 5-10% faster</p>",
        "id": 268626033,
        "sender_full_name": "nnethercote",
        "timestamp": 1642639702
    },
    {
        "content": "<p>Maybe I should be setting <code>llvm.thin-lto=true</code> locally. (I build my own LLVM because I increase the debuginfo to get line numbers)</p>",
        "id": 268626188,
        "sender_full_name": "nnethercote",
        "timestamp": 1642639824
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code># Indicates whether LLVM should be built with ThinLTO. Note that this will\n# only succeed if you use clang, lld, llvm-ar, and llvm-ranlib in your C/C++\n# toolchain (see the `cc`, `cxx`, `linker`, `ar`, and `ranlib` options below).\n# More info at: https://clang.llvm.org/docs/ThinLTO.html#clang-bootstrap\n#thin-lto = false\n</code></pre></div>",
        "id": 268626221,
        "sender_full_name": "nnethercote",
        "timestamp": 1642639876
    },
    {
        "content": "<p>But that Dockerfile only sets <code>linker</code>, <code>ar</code>, and <code>ranlib</code>,hmm</p>",
        "id": 268626269,
        "sender_full_name": "nnethercote",
        "timestamp": 1642639921
    },
    {
        "content": "<p>I think we set CC/CXX to clang independently</p>",
        "id": 268628793,
        "sender_full_name": "simulacrum",
        "timestamp": 1642641992
    },
    {
        "content": "<p>ENV CC=clang CXX=clang++</p>",
        "id": 268628812,
        "sender_full_name": "simulacrum",
        "timestamp": 1642642014
    },
    {
        "content": "<p>not sure on lld not being used, though.</p>",
        "id": 268628830,
        "sender_full_name": "simulacrum",
        "timestamp": 1642642034
    },
    {
        "content": "<p>Other possible allocators to look into are mimalloc, rpmalloc, snmalloc. Source: <a href=\"https://lists.llvm.org/pipermail/llvm-dev/2020-July/143015.html\">https://lists.llvm.org/pipermail/llvm-dev/2020-July/143015.html</a></p>",
        "id": 268631283,
        "sender_full_name": "Amanieu",
        "timestamp": 1642644369
    },
    {
        "content": "<p>mimalloc seems to perform better on our benchmarks but still is a sizable max-rss regression (although one would expect it could improve things on windows ?). I have been trying snmalloc recently and it looks promising over jemalloc (but have not tested on macOS). Maybe tcmalloc is also worth trying.</p>",
        "id": 268648880,
        "sender_full_name": "lqd",
        "timestamp": 1642661168
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120989\">nnethercote</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/jemalloc/near/268626033\">said</a>:</p>\n<blockquote>\n<p>It may depend on what \"current glibc\" means, but on my Ubuntu 21.10 box jemalloc is still much better, e.g. makes rustc 5-10% faster</p>\n</blockquote>\n<p>And maybe the allocator settings?</p>",
        "id": 268683526,
        "sender_full_name": "The 8472",
        "timestamp": 1642681432
    },
    {
        "content": "<p>Is it currently possible for us to ship a rustc built with jemalloc (or mimalloc) while shipping std built with the system allocator, or is that not supported today?</p>",
        "id": 268743204,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1642706167
    },
    {
        "content": "<p>Because building rustc with an alternate allocator seems fine, but std needs to use the system allocator by default and let users decide what allocator they want for their programs.</p>",
        "id": 268743278,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1642706216
    },
    {
        "content": "<p>std is always using the default system allocator today</p>",
        "id": 268743306,
        "sender_full_name": "simulacrum",
        "timestamp": 1642706232
    },
    {
        "content": "<p>(unless otherwise configured with global_allocator)</p>",
        "id": 268743326,
        "sender_full_name": "simulacrum",
        "timestamp": 1642706244
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Even in a jemalloc=true build? That's great.</p>",
        "id": 268743355,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1642706263
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 268743385,
        "sender_full_name": "simulacrum",
        "timestamp": 1642706280
    }
]