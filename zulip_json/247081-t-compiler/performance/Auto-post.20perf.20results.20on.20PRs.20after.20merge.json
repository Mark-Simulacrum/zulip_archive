[
    {
        "content": "<p>I'm going to start looking into auto posting perf results after PRs are merged. This will significantly reduce the role of triage reports which can then focus more on ensuring that performance regressions are being addressed and potentially helping with investigations. Our heuristics are good enough that when we detect a definitely relevant performance regression it's almost always legitimate.</p>",
        "id": 251848770,
        "sender_full_name": "rylev",
        "timestamp": 1630660710
    },
    {
        "content": "<p>Here's the issue tracking this work: <a href=\"https://github.com/rust-lang/rustc-perf/issues/711\">https://github.com/rust-lang/rustc-perf/issues/711</a></p>",
        "id": 251848789,
        "sender_full_name": "rylev",
        "timestamp": 1630660720
    },
    {
        "content": "<p>Taking some notes on this. </p>\n<p>The first thing we need in order to make progress on this is to know when we're doing a performance run against a commit into the master branch (vs a try run). Master commits make their way into the perf queue in a bit of a round-about way. </p>\n<p>The collector knows which commit to test next by calling the <a href=\"https://github.com/rust-lang/rustc-perf/blob/c17ff4b23f8511497fae9d7f6fabb182274aecfd/collector/src/main.rs#L642-L647\"><code>/next_commit</code> endpoint</a>. This endpoint calls the <a href=\"https://github.com/rust-lang/rustc-perf/blob/08677aa6f5a16dc66f904a688cdc9fe031da19aa/site/src/request_handlers/next_commit.rs#L8\"><code>missing_commits</code> function</a>.  This in turn gets the <a href=\"https://github.com/rust-lang/rustc-perf/blob/08677aa6f5a16dc66f904a688cdc9fe031da19aa/site/src/load.rs#L151\"><code>master_commits</code></a> from <a href=\"http://triage.rust-lang.org\">triage.rust-lang.org</a> and removes any commits which have <a href=\"https://github.com/rust-lang/rustc-perf/blob/08677aa6f5a16dc66f904a688cdc9fe031da19aa/site/src/load.rs#L239-L248\">already been tested</a>. </p>\n<p>Once the collector has finished running the next commit it <a href=\"https://github.com/rust-lang/rustc-perf/blob/master/collector/src/main.rs#L678\">posts to <code>/perf/onpush</code></a>. In the handler for this endpoint, eventually the github API <a href=\"https://github.com/rust-lang/rustc-perf/blob/08677aa6f5a16dc66f904a688cdc9fe031da19aa/site/src/server.rs#L250\">is called</a> to post a message to a the PR.</p>\n<p>I'm not quite sure yet why only try commits get posted to GitHub. On first glance it looks like all finished runs should cause a comment to be posted to the relevant PR.</p>",
        "id": 251853500,
        "sender_full_name": "rylev",
        "timestamp": 1630662941
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> it needs further investigation but my operating theory would be that the PR column is not populated for master commits</p>",
        "id": 251867588,
        "sender_full_name": "simulacrum",
        "timestamp": 1630669833
    },
    {
        "content": "<p>(in the database)</p>",
        "id": 251867600,
        "sender_full_name": "simulacrum",
        "timestamp": 1630669838
    },
    {
        "content": "<p>And I think the posting code sort of inadvertently depends on it? Not confident.</p>",
        "id": 251867648,
        "sender_full_name": "simulacrum",
        "timestamp": 1630669864
    },
    {
        "content": "<p>Actually, I think pull_request_build might just be only used for try commits?</p>",
        "id": 251868091,
        "sender_full_name": "simulacrum",
        "timestamp": 1630670093
    },
    {
        "content": "<p>Yep it looks like that's the case. We only insert into that table when we are handling a try build request</p>",
        "id": 251873665,
        "sender_full_name": "rylev",
        "timestamp": 1630673006
    },
    {
        "content": "<p>Ok I have things almost working, but I've run into the real issue.</p>\n<p>We don't react to individual runs being completed. Instead, on server startup and whenever someone posts to <code>/perf/onpush</code> we look to see if there are any try commits which have not yet been marked as completed. Then we mark them as completed and post to github. The completed flag is a convenient way to tell whether we have to post to GitHub or not. </p>\n<p>For master commits, we don't have a database field for indicating whether we should post to GitHub, so we have no way of knowing whether a master commit has had its comparison result posted before or if we should do it.</p>",
        "id": 251899623,
        "sender_full_name": "rylev",
        "timestamp": 1630683465
    },
    {
        "content": "<p>We could make a call to GitHub every time and look for comments that look like the comment we want to post, but this is very wasteful as we'd have to make a GitHub API call for every master commit (at least within the last 2 weeks or so).</p>",
        "id": 251899874,
        "sender_full_name": "rylev",
        "timestamp": 1630683559
    },
    {
        "content": "<p>Or we could add a flag to the database to tell whether the comment has been posted, but this seems like a lot more work than we'd want to do for this change.</p>",
        "id": 251899959,
        "sender_full_name": "rylev",
        "timestamp": 1630683597
    },
    {
        "content": "<p>I guess adding something to the database is probably the only way to make this bug free. We could put it on collector_progress as a \"reported\" flag</p>",
        "id": 251901550,
        "sender_full_name": "rylev",
        "timestamp": 1630684245
    },
    {
        "content": "<p>I think putting all commits into the pull_request_builds table is a good way to go?</p>",
        "id": 251901602,
        "sender_full_name": "simulacrum",
        "timestamp": 1630684262
    },
    {
        "content": "<p>We can do so on /perf/next_commit endpoint</p>",
        "id": 251901626,
        "sender_full_name": "simulacrum",
        "timestamp": 1630684270
    },
    {
        "content": "<p>(obviously that can get hit multiple times, but that seems fine)</p>",
        "id": 251901649,
        "sender_full_name": "simulacrum",
        "timestamp": 1630684283
    },
    {
        "content": "<p>I imagine that the general interface to do so should be pretty easy -- we basically just need to do the equivalent command to what we do today when seeing the 'bors finished try' message</p>",
        "id": 251901792,
        "sender_full_name": "simulacrum",
        "timestamp": 1630684327
    },
    {
        "content": "<p>am I missing something there?</p>",
        "id": 251901809,
        "sender_full_name": "simulacrum",
        "timestamp": 1630684339
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224872\">rylev</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/Auto-post.20perf.20results.20on.20PRs.20after.20merge/near/251901550\">said</a>:</p>\n<blockquote>\n<p>I guess adding something to the database is probably the only way to make this bug free. We could put it on collector_progress as a \"reported\" flag</p>\n</blockquote>\n<p>Nevermind this doesn't make sense. This table is used to track which step in collection we're on</p>",
        "id": 251901824,
        "sender_full_name": "rylev",
        "timestamp": 1630684343
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/Auto-post.20perf.20results.20on.20PRs.20after.20merge/near/251901809\">said</a>:</p>\n<blockquote>\n<p>am I missing something there?</p>\n</blockquote>\n<p>Not sure yet. I need to check that the pull_request_builds table (which with this change would be poorly named) is not being used for something that assumes only try builds</p>",
        "id": 251902000,
        "sender_full_name": "rylev",
        "timestamp": 1630684388
    },
    {
        "content": "<p>Yeah, we'll want to be a bit careful, but I think it should work well. It still seems appropriate, in some sense, since we're tying a commit to a PR and posting to it</p>",
        "id": 251902113,
        "sender_full_name": "simulacrum",
        "timestamp": 1630684437
    },
    {
        "content": "<p>Yea, it's definitely a little messy, but it'll probably work. I might sit on it for the weekend just to see if something else pops into my head</p>",
        "id": 251904757,
        "sender_full_name": "rylev",
        "timestamp": 1630685459
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I decided to push a PR anyway (<a href=\"https://github.com/rust-lang/rustc-perf/pull/992\">https://github.com/rust-lang/rustc-perf/pull/992</a>). It should be complete, but it's still messy and of course 100% untested.</p>",
        "id": 251909641,
        "sender_full_name": "rylev",
        "timestamp": 1630687624
    },
    {
        "content": "<p>No pressure to review. We can also chat about it next week.</p>",
        "id": 251909668,
        "sender_full_name": "rylev",
        "timestamp": 1630687639
    },
    {
        "content": "<p>(I'm off for the day)</p>",
        "id": 251909683,
        "sender_full_name": "rylev",
        "timestamp": 1630687649
    },
    {
        "content": "<p>Yeah I'll maybe take a look</p>",
        "id": 251916107,
        "sender_full_name": "simulacrum",
        "timestamp": 1630690384
    },
    {
        "content": "<p>Going to merge this now. I'll keep an eye on things.</p>",
        "id": 252152508,
        "sender_full_name": "rylev",
        "timestamp": 1630922011
    },
    {
        "content": "<p>Looks like things are working! <a href=\"https://github.com/rust-lang/rust/pull/88631#issuecomment-913603899\">https://github.com/rust-lang/rust/pull/88631#issuecomment-913603899</a></p>",
        "id": 252177249,
        "sender_full_name": "rylev",
        "timestamp": 1630935611
    },
    {
        "content": "<p>It looks like we should probably adjust the message text for post-merge comments, too</p>",
        "id": 252179038,
        "sender_full_name": "simulacrum",
        "timestamp": 1630936521
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> we already do change the text. What else would you like to see?</p>",
        "id": 252179696,
        "sender_full_name": "rylev",
        "timestamp": 1630936830
    },
    {
        "content": "<p>e.g., the waiting on review thing you noticed</p>",
        "id": 252179728,
        "sender_full_name": "simulacrum",
        "timestamp": 1630936850
    },
    {
        "content": "<p>also</p>\n<blockquote>\n<p>Next Steps: If you can justify the regressions found in this perf run, please indicate this with @rustbot label: +perf-regression-triaged along with sufficient written justification. If you cannot justify the regressions please fix the regressions (either in this PR if it's not yet merged or in another PR), and then add the perf-regression-triaged label to this PR.</p>\n</blockquote>\n<p>Just editing this to be clearer that it's a future PR, but we should also likely say something like \"consider reverting if it regression seems major and fix is unclear\"</p>",
        "id": 252179767,
        "sender_full_name": "simulacrum",
        "timestamp": 1630936877
    },
    {
        "content": "<p>Sounds good. I tried sharing as much of the comment we post after try runs, but it's probably easier to just have completely different messages.</p>",
        "id": 252180183,
        "sender_full_name": "rylev",
        "timestamp": 1630937054
    },
    {
        "content": "<p>Here's a PR improving things: <a href=\"https://github.com/rust-lang/rustc-perf/pull/993\">https://github.com/rust-lang/rustc-perf/pull/993</a></p>",
        "id": 252184457,
        "sender_full_name": "rylev",
        "timestamp": 1630939061
    },
    {
        "content": "<p>I'm going to merge this</p>",
        "id": 252185238,
        "sender_full_name": "rylev",
        "timestamp": 1630939407
    }
]