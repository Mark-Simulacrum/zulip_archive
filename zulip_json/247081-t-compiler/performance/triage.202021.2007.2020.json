[
    {
        "content": "<p>(Deleted content.)</p>",
        "id": 246601934,
        "sender_full_name": "pnkfelix",
        "timestamp": 1626792953
    },
    {
        "content": "<p>Oh, wait</p>",
        "id": 246602035,
        "sender_full_name": "pnkfelix",
        "timestamp": 1626792988
    },
    {
        "content": "<p>Let me try again, this time <em>defining</em> <code>$PARENT</code></p>",
        "id": 246602118,
        "sender_full_name": "pnkfelix",
        "timestamp": 1626793023
    },
    {
        "content": "<p>okay, still not working:</p>\n<div class=\"codehilite\"><pre><span></span><code>% ( PARENT=5aff6dd07a562a2cba3c57fc3460a72acb6bef46 ; export PARENT; curl https://perf.rust-lang.org/perf/triage &quot;{&quot;start&quot;:&quot;$PARENT&quot;,&quot;stat&quot;:&quot;instructions:u&quot;}&quot; &gt; 2021-07-20.md )\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n\n[1/2]: start:5aff6dd07a562a2cba3c57fc3460a72acb6bef46 --&gt; &lt;stdout&gt;\ncurl: (3) URL using bad/illegal format or missing URL\n\n[2/2]: stat:instructions:u --&gt; &lt;stdout&gt;\ncurl: (3) URL using bad/illegal format or missing URL\n</code></pre></div>",
        "id": 246602643,
        "sender_full_name": "pnkfelix",
        "timestamp": 1626793219
    },
    {
        "content": "<p>hmm, maybe that command line still needs work. (I’ll admit, my handling of variables in shell is not as fine-tuned as it used to be…)</p>",
        "id": 246603204,
        "sender_full_name": "pnkfelix",
        "timestamp": 1626793333
    },
    {
        "content": "<p>Nope, direct adaptation from readme gets same result:</p>\n<div class=\"codehilite\"><pre><span></span><code>% curl https://perf.rust-lang.org/perf/triage &#39;{&quot;start&quot;:&quot;5aff6dd07a562a2cba3c57fc3460a72acb6bef46&quot;,&quot;stat&quot;:&quot;instructions:u&quot;}&#39;\n\n[1/2]: &quot;start&quot;:&quot;5aff6dd07a562a2cba3c57fc3460a72acb6bef46&quot; --&gt; &lt;stdout&gt;\n--_curl_--&quot;start&quot;:&quot;5aff6dd07a562a2cba3c57fc3460a72acb6bef46&quot;\ncurl: (3) URL using bad/illegal format or missing URL\n\n[2/2]: &quot;stat&quot;:&quot;instructions:u&quot; --&gt; &lt;stdout&gt;\n--_curl_--&quot;stat&quot;:&quot;instructions:u&quot;\ncurl: (3) URL using bad/illegal format or missing URL\n</code></pre></div>",
        "id": 246603574,
        "sender_full_name": "pnkfelix",
        "timestamp": 1626793504
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> any hints for how to resolve above ?</p>",
        "id": 246605188,
        "sender_full_name": "pnkfelix",
        "timestamp": 1626794127
    },
    {
        "content": "<p>I’m currently assuming there must be something wrong in my command line invocation, where <code>curl</code> is interpreting the input as two distinct queries to send to the website, (and where neither of the two queries is syntactically valid)</p>",
        "id": 246606535,
        "sender_full_name": "pnkfelix",
        "timestamp": 1626794754
    },
    {
        "content": "<p>Went back to weekly_report.py script, as threatened. :)</p>",
        "id": 246607282,
        "sender_full_name": "pnkfelix",
        "timestamp": 1626795079
    },
    {
        "content": "<p>That <em>looks</em> like curl is yelling at you, not the server</p>",
        "id": 246608116,
        "sender_full_name": "simulacrum",
        "timestamp": 1626795400
    },
    {
        "content": "<p><code>curl https://perf.rust-lang.org/perf/triage -X POST -d '{\"start\": \"9a27044f42ace9eb652781b53f598e25d4e7e918\"}' &gt; triage/2021-07-13.md</code></p>",
        "id": 246608157,
        "sender_full_name": "simulacrum",
        "timestamp": 1626795418
    },
    {
        "content": "<p>that's what I did last week I think</p>",
        "id": 246608171,
        "sender_full_name": "simulacrum",
        "timestamp": 1626795423
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> ^</p>",
        "id": 246608182,
        "sender_full_name": "simulacrum",
        "timestamp": 1626795426
    },
    {
        "content": "<p>(maybe you could update readme once you get it working)</p>",
        "id": 246608202,
        "sender_full_name": "simulacrum",
        "timestamp": 1626795436
    },
    {
        "content": "<p>Okay so the README is just wrong then. If I can confirm that, I’ll update the readme.</p>",
        "id": 246608317,
        "sender_full_name": "pnkfelix",
        "timestamp": 1626795482
    },
    {
        "content": "<p>hmmm. I thought I submitted a PR to fix that...</p>",
        "id": 246608492,
        "sender_full_name": "rylev",
        "timestamp": 1626795546
    },
    {
        "content": "<p>I guess it got lost along the way. So sorry!</p>",
        "id": 246608508,
        "sender_full_name": "rylev",
        "timestamp": 1626795556
    },
    {
        "content": "<p>You actually don't need <code>-X POST</code> that's implied by <code>-d</code></p>",
        "id": 246608699,
        "sender_full_name": "rylev",
        "timestamp": 1626795649
    },
    {
        "content": "<p><code>curl https://perf.rust-lang.org/perf/triage -d '{\"start\":\"5aff6dd07a562a2cba3c57fc3460a72acb6bef46\",\"stat\":\"instructions:u\"}'</code> works for me</p>",
        "id": 246608966,
        "sender_full_name": "rylev",
        "timestamp": 1626795769
    },
    {
        "content": "<p>The other thing I’ll just mention: The <code>weekly_report.py</code> script gave feedback to stderr as it ran, about which commits it was comparing. The endpoint approach is just a black box as it runs. I suspect that is just something we fundamentally have to give up, if we’re using the endpoint approach. But it is something we do lose.</p>",
        "id": 246611937,
        "sender_full_name": "pnkfelix",
        "timestamp": 1626797034
    },
    {
        "content": "<p>(also, it might be nice to be able to include my username in the POST request, as another field, so that it will get automatically injected into the writeup. But that’s definitely a niche request.)</p>",
        "id": 246612183,
        "sender_full_name": "pnkfelix",
        "timestamp": 1626797144
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/triage.202021.2007.2020/near/246611937\">said</a>:</p>\n<blockquote>\n<p>The other thing I’ll just mention: The <code>weekly_report.py</code> script gave feedback to stderr as it ran, about which commits it was comparing. The endpoint approach is just a black box as it runs. I suspect that is just something we fundamentally have to give up, if we’re using the endpoint approach. But it is something we do lose.</p>\n</blockquote>\n<p>Yea the hope here was that the report would run much faster and that it's fine to not get feedback. It was originally running quite fast (less than a second), but it seems to have slowed. I'd like to investigate why.</p>",
        "id": 246612677,
        "sender_full_name": "rylev",
        "timestamp": 1626797357
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/triage.202021.2007.2020/near/246612183\">said</a>:</p>\n<blockquote>\n<p>(also, it might be nice to be able to include my username in the POST request, as another field, so that it will get automatically injected into the writeup. But that’s definitely a niche request.)</p>\n</blockquote>\n<p>just sed it with your curl command: <code>sed 's/by \\*\\*@???\\*\\*/by **@your_name**/'</code></p>",
        "id": 246615172,
        "sender_full_name": "lqd",
        "timestamp": 1626798376
    },
    {
        "content": "<p>I guess that works too. Not 100% robust as what I pictured, but its hard to imagine the template output changing in a way that would cause that to fail. (Maybe if PR titles include a <code>by \\*\\*@???\\*\\*</code>…). And, as a plus, it would be completely independent of the endpoint internal implementation. Decoupling is good.</p>",
        "id": 246617224,
        "sender_full_name": "pnkfelix",
        "timestamp": 1626799341
    },
    {
        "content": "<p>Though to be honest, if I were to do that, I’d probably invest effort in a <em>new</em> driver script still used the endpoint, but automatically looked up the PARENT commit id (and post-processed output to inject my username, <em>et cetera</em>)</p>",
        "id": 246617330,
        "sender_full_name": "pnkfelix",
        "timestamp": 1626799393
    },
    {
        "content": "<p>we should be able to auto compute endpoint from the previous run (querying the file via github or so)</p>",
        "id": 246619932,
        "sender_full_name": "simulacrum",
        "timestamp": 1626800642
    },
    {
        "content": "<p>We could do this in the endpoint itself.</p>",
        "id": 246620371,
        "sender_full_name": "rylev",
        "timestamp": 1626800829
    },
    {
        "content": "<p>right, that was what I wanted to say</p>",
        "id": 246620412,
        "sender_full_name": "simulacrum",
        "timestamp": 1626800851
    },
    {
        "content": "<p>What is the section entitled \" Untriaged Pull Requests” ?</p>",
        "id": 246636838,
        "sender_full_name": "pnkfelix",
        "timestamp": 1626809043
    },
    {
        "content": "<p>Are those PR’s that couldn’t have performance comparisons done on them?</p>",
        "id": 246636892,
        "sender_full_name": "pnkfelix",
        "timestamp": 1626809058
    },
    {
        "content": "<p>filed as PR <a href=\"https://github.com/rust-lang/rustc-perf/pull/930\">https://github.com/rust-lang/rustc-perf/pull/930</a></p>",
        "id": 246670937,
        "sender_full_name": "pnkfelix",
        "timestamp": 1626831928
    },
    {
        "content": "<p>(Note: I didn’t do <em>anything</em> about the “untriaged pull requests” section.)</p>",
        "id": 246670949,
        "sender_full_name": "pnkfelix",
        "timestamp": 1626831942
    },
    {
        "content": "<p>(I just want to be done with this task.)</p>",
        "id": 246670960,
        "sender_full_name": "pnkfelix",
        "timestamp": 1626831957
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  IIUC the untriaged PRs are the ones where a perf run was done before it landed, came back as a regression and was marked as such by the bot, but was not then triaged and marked as a \"justified regression\" by the authors/reviewers (using the perf-regression-triaged label)</p>",
        "id": 246685647,
        "sender_full_name": "lqd",
        "timestamp": 1626850761
    },
    {
        "content": "<p>(just like we see good perf runs that don’t always end up being wins after the PR lands, the perf runs marked as regressions can end up regressing less or not at all when landing — maybe in these latter cases the bot could automatically mark the PR triaged when the final results differ from the expectation ? And/or comment with the final perf results, on all PRs after they land)</p>",
        "id": 246687192,
        "sender_full_name": "lqd",
        "timestamp": 1626852142
    },
    {
        "content": "<p>What <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> said is mostly right though, it's the expectation that we also add perf-regression to any PRs where the regression was found _after_ merging as well.</p>",
        "id": 246693515,
        "sender_full_name": "rylev",
        "timestamp": 1626857239
    },
    {
        "content": "<p>Essentially the <code>perf-regression</code> label is used to indicate that the latest known performance state of the PR is a regression. <code>perf-regression-triaged</code> is the label applied when _something_ has been done to address the performance issue. This can be one of several things:</p>\n<ul>\n<li>An issue has been created to address the performance issue (linking to the original PR)</li>\n<li>The author and reviewer have determined that the change in the PR is worth the regression (e.g., a correctness fix - better to be slow and correct than fast and wrong)</li>\n<li>The regression isn't actually a regression (i.e., there's something wrong with perf.rlo) - this should be accompanied by an issue on rustc-perf</li>\n<li>Another PR has been opened that fixes the perf regression (with a link)</li>\n</ul>",
        "id": 246693833,
        "sender_full_name": "rylev",
        "timestamp": 1626857472
    },
    {
        "content": "<p>(sorry <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  for the confusion here - we've been discussion this in Zulip but I don't believe I explicitly pinged you on this). This needs to be documented somewhere. We could put it in the triage README, but this goes beyond the triage process and is really just the perf process in general. Perhaps a dedicated README for the process as a whole is warranted...</p>",
        "id": 246693967,
        "sender_full_name": "rylev",
        "timestamp": 1626857581
    },
    {
        "content": "<p>As for what to do about the untriaged PRs - we're unsure. <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> wanted to wait a bit to see what happens with them. I imagine the list will continue growing, and we'll need a process for pinging the author/reviewer to address the perf-regression in some way (one of the ways listed above)</p>",
        "id": 246694082,
        "sender_full_name": "rylev",
        "timestamp": 1626857671
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> also I think you may have missed that we now mark noisy benchmarks with \"?\" based on historical data. It's a good thing to eyeball the data yourself to make sure you agree with that assessment, but the idea is that we want to be able to make automated decisions based on perf results and having an accurate way to label benchmarks as noisy is essential for that.</p>",
        "id": 246694977,
        "sender_full_name": "rylev",
        "timestamp": 1626858316
    },
    {
        "content": "<p>I did see that a PR landed to do marking “?” based on historical data. Do we still have “??” vs “?”, or is there just “?” now?</p>",
        "id": 246706760,
        "sender_full_name": "pnkfelix",
        "timestamp": 1626867162
    },
    {
        "content": "<p>(I don't think \"??\" still exists)</p>",
        "id": 246708806,
        "sender_full_name": "lqd",
        "timestamp": 1626868603
    },
    {
        "content": "<p>\"??\" no longer exists. I'd like to continue to evolve how we handle noisy data as it's a bit too much of a simplification to just mark a benchmark as noisy and be done with it.</p>",
        "id": 246709446,
        "sender_full_name": "rylev",
        "timestamp": 1626869031
    },
    {
        "content": "<p>maybe we could show the variance info (say on a tooltip) on a result with \"?\" with a similar message as before ? it was something like \"this benchmark is highly variable, don't trust it\"; like \"coercions-debug incr-patched: println\" is marked as \"highly variable\" and there are a handful of \"noisy\" ones, and it would be nice to at least see this categorization on the page</p>",
        "id": 246709843,
        "sender_full_name": "lqd",
        "timestamp": 1626869257
    },
    {
        "content": "<p>I realized that I failed to follow through on some of the steps here, namely the TWIR update. I’m looking into it now.</p>",
        "id": 246802789,
        "sender_full_name": "pnkfelix",
        "timestamp": 1626920787
    },
    {
        "content": "<p>okay, TWIR and T-compiler agenda are both updated. Thanks y’all!</p>",
        "id": 246803427,
        "sender_full_name": "pnkfelix",
        "timestamp": 1626921792
    }
]