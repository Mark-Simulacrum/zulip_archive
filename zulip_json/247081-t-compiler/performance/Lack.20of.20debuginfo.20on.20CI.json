[
    {
        "content": "<p>I just tried downloading some compilers built on CI and running Cachegrind on them and I see they aren't built with debuginfo, so they don't have filenames and line numbers, which greatly reduces the usefulness of the Cachegrind profiles.</p>",
        "id": 270672909,
        "sender_full_name": "nnethercote",
        "timestamp": 1643955777
    },
    {
        "content": "<p>I think we need to add <code>[rust] debuginfo.level = 1</code> somewhere, maybe <a href=\"https://github.com/rust-lang/rust/blob/5e57faa78aa7661c6000204591558f6665f11abc/src/ci/run.sh#L46\">here</a>?</p>",
        "id": 270672921,
        "sender_full_name": "nnethercote",
        "timestamp": 1643955799
    },
    {
        "content": "<p>I'd love to see this, but I think it needs to wait until we have split debug info support (which I think is actually nearly ready) so we avoid a greatly larger binary/library for everyone - but I haven't actually measured this recently.</p>\n<p>I think librustc_driver today is roughly 50% debug info by size, even without having really enabled it. (I might be misremembering though).</p>",
        "id": 270707832,
        "sender_full_name": "simulacrum",
        "timestamp": 1643978041
    },
    {
        "content": "<p>Any chace split debuginfo will let us go to <code>[rust] debuginfo.level = 2</code>, <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> ?</p>",
        "id": 270726116,
        "sender_full_name": "pnkfelix",
        "timestamp": 1643986917
    },
    {
        "content": "<p>Hm, well, I mean <em>maybe</em>?</p>",
        "id": 270726176,
        "sender_full_name": "simulacrum",
        "timestamp": 1643986928
    },
    {
        "content": "<p>I'm not sure if you can effectively subset (e.g., dropping a section from your binary or something)</p>",
        "id": 270726252,
        "sender_full_name": "simulacrum",
        "timestamp": 1643986958
    },
    {
        "content": "<p>I'd want to avoid a multi-GB .so file being distributed</p>",
        "id": 270726285,
        "sender_full_name": "simulacrum",
        "timestamp": 1643986973
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ du -ah *.so\n97M     libLLVM-13-rust-1.60.0-nightly.so\n114M    librustc_driver-90a6e5ec2da8350e.so\n8.6M    libstd-a734ee5340eb75e5.so\n2.7M    libtest-c40098a0cd66f731.so\n$ strip *.so\n$ du -ah *.so\n77M     libLLVM-13-rust-1.60.0-nightly.so\n59M     librustc_driver-90a6e5ec2da8350e.so\n5.1M    libstd-a734ee5340eb75e5.so\n920K    libtest-c40098a0cd66f731.so\n</code></pre></div>\n<p>So a pretty big chunk already in debuginfo (this is the libraries rustc links to, so modulo ICE backtraces it's entirely useless I think)</p>",
        "id": 270726856,
        "sender_full_name": "simulacrum",
        "timestamp": 1643987195
    },
    {
        "content": "<p>FWIW, I have heard complaints about Rust's install size, and shipping stripped binaries could help with that. We'd presumably need some kind of separate debuginfo copy like what Firefox does to recover symbols, I guess</p>",
        "id": 270727025,
        "sender_full_name": "simulacrum",
        "timestamp": 1643987266
    },
    {
        "content": "<p>(to deal with in the wild ICEs)</p>",
        "id": 270727051,
        "sender_full_name": "simulacrum",
        "timestamp": 1643987278
    },
    {
        "content": "<p>41% of the size of <a href=\"http://librustc_driver.so\">librustc_driver.so</a> is <code>.strtab</code> which contains symbol names. While probably not strictly abi conforming, maybe it would be possible to compress this section the same way debuginfo sections can be compressed and then have backtrace-rs decompress it on the fly if a panic happens? Or alternatively move the symbols to a separate elf file that is gzip compressed and can be manually decompressed when trying to use a debugger.</p>",
        "id": 270729601,
        "sender_full_name": "bjorn3",
        "timestamp": 1643988386
    },
    {
        "content": "<p>Could compress symbols like Fedora does: <a href=\"https://fedoraproject.org/wiki/Features/MiniDebugInfo\">https://fedoraproject.org/wiki/Features/MiniDebugInfo</a></p>",
        "id": 270729943,
        "sender_full_name": "cuviper",
        "timestamp": 1643988565
    },
    {
        "content": "<p><a href=\"https://sourceware.org/gdb/onlinedocs/gdb/MiniDebugInfo.html\">https://sourceware.org/gdb/onlinedocs/gdb/MiniDebugInfo.html</a></p>",
        "id": 270729980,
        "sender_full_name": "cuviper",
        "timestamp": 1643988582
    },
    {
        "content": "<p>Also, if we split debuginfo in a post-processing step like rpms do, they could be served for download by elfutils-debuginfod</p>",
        "id": 270730391,
        "sender_full_name": "cuviper",
        "timestamp": 1643988760
    },
    {
        "content": "<p>I presume many people will not be happy if an ICE will suddenly result in downloading debuginfo from the internet though.</p>",
        "id": 270730667,
        "sender_full_name": "bjorn3",
        "timestamp": 1643988900
    },
    {
        "content": "<p>Sure, probably not by default, but the server setting can be suggested as an environment variable, just like we do for <code>RUST_BACKTRACE</code>.</p>",
        "id": 270730918,
        "sender_full_name": "cuviper",
        "timestamp": 1643988999
    },
    {
        "content": "<p>I am afraid that will significantly reduce the quality of the <em>average</em> ICE reported.</p>",
        "id": 270731034,
        "sender_full_name": "bjorn3",
        "timestamp": 1643989064
    },
    {
        "content": "<p>well, my hope would be that we'd report the addresses and symbolicate on a server or something we run</p>",
        "id": 270731243,
        "sender_full_name": "simulacrum",
        "timestamp": 1643989153
    },
    {
        "content": "<p>I'm suggesting both: mini-debuginfo for compressed symbols to keep the status quo, and full debuginfo as a download.</p>",
        "id": 270731261,
        "sender_full_name": "cuviper",
        "timestamp": 1643989163
    },
    {
        "content": "<blockquote>\n<p>well, my hope would be that we'd report the addresses and symbolicate on a server or something we run</p>\n</blockquote>\n<p>I would be fine with this provided we get a bot automatically symbolicating reported ice's and posting the results on the respective issue.</p>",
        "id": 270731400,
        "sender_full_name": "bjorn3",
        "timestamp": 1643989233
    },
    {
        "content": "<p>We'd need this though: <a href=\"https://github.com/rust-lang/backtrace-rs/issues/430\">https://github.com/rust-lang/backtrace-rs/issues/430</a></p>",
        "id": 270731525,
        "sender_full_name": "cuviper",
        "timestamp": 1643989297
    },
    {
        "content": "<p>could debug info be distributed as a separate rustup component?</p>",
        "id": 270734672,
        "sender_full_name": "The 8472",
        "timestamp": 1643990538
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/Lack.20of.20debuginfo.20on.20CI/near/270707832\">said</a>:</p>\n<blockquote>\n<p>I'd love to see this, but I think it needs to wait until we have split debug info support (which I think is actually nearly ready) so we avoid a greatly larger binary/library for everyone - but I haven't actually measured this recently.</p>\n<p>I think librustc_driver today is roughly 50% debug info by size, even without having really enabled it. (I might be misremembering though).</p>\n</blockquote>\n<p>Split debug info support lets us natively generate split debug info directly, but even without that support, we can split debug info <em>after</em> the fact, using <code>objcopy</code>.</p>",
        "id": 270745344,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643995271
    },
    {
        "content": "<p>There also is <code>unstrip</code> to merge them back in</p>",
        "id": 270746314,
        "sender_full_name": "The 8472",
        "timestamp": 1643995772
    },
    {
        "content": "<p>Well, when I say support I also mean in our backtrace generation and such.</p>\n<p>I agree objcopy or similar are fine for our purposes (and may even work better given our need to split out debug info from c/c++ compilation too)</p>",
        "id": 270746425,
        "sender_full_name": "simulacrum",
        "timestamp": 1643995821
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/Lack.20of.20debuginfo.20on.20CI/near/270746425\">said</a>:</p>\n<blockquote>\n<p>Well, when I say support I also mean in our backtrace generation and such.</p>\n</blockquote>\n<p>Ah, right.</p>",
        "id": 270748377,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643996709
    },
    {
        "content": "<p>Also, objcopy has a <code>--compress-debug-section</code> option that uses zlib.</p>",
        "id": 270748514,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643996770
    },
    {
        "content": "<p>So if we can add support for that in our backtraces, we could ship something smaller.</p>",
        "id": 270748547,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643996785
    }
]