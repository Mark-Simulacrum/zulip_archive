[
    {
        "content": "<p>With <a href=\"https://github.com/rust-lang/rustc-perf/pull/881\">rustc-perf#881</a> we are now categorizing performance runs when they happen. Should we label performance regressions so that they can be tracked and triaged in the issue system? Something like <code>c-perf-regressions</code>?</p>",
        "id": 243515794,
        "sender_full_name": "rylev",
        "timestamp": 1624368597
    },
    {
        "content": "<p>Seems like a good idea, I don't know about \"c\" -- maybe just perf-regressed/perf-improved/perf-neutral?</p>",
        "id": 243516460,
        "sender_full_name": "simulacrum",
        "timestamp": 1624368867
    },
    {
        "content": "<p>I'm not sure what the logic behind the labeling system in rust-lang/rust is so I'll differ to you on that. I do wonder if the perf-improved and perf-neutral are useful or not.</p>",
        "id": 243519972,
        "sender_full_name": "rylev",
        "timestamp": 1624370262
    },
    {
        "content": "<p>yeah, I don't know</p>",
        "id": 243520832,
        "sender_full_name": "simulacrum",
        "timestamp": 1624370553
    },
    {
        "content": "<p>I'm not sure how much we'd get out of the labels</p>",
        "id": 243520843,
        "sender_full_name": "simulacrum",
        "timestamp": 1624370559
    },
    {
        "content": "<p>do we have some goal with looking back using those labels?</p>",
        "id": 243520865,
        "sender_full_name": "simulacrum",
        "timestamp": 1624370570
    },
    {
        "content": "<p>I'd like to use this as a way to triage performance regressions. Currently we rely on the triage report to remember which previous PRs caused regressions. This is a manual process that requires triage generators to check previous triage reports and follow up. It's _very_ easy for performance regressions to just be forgotten. With the labeling system we could easily do automated triaging sweeps where we check on unresolved performance regressions that have not been solved (or at the very least explicitly labeled as \"won't fix\").</p>",
        "id": 243522817,
        "sender_full_name": "rylev",
        "timestamp": 1624371353
    },
    {
        "content": "<p>I imagine eventually we could have a process similar to <a class=\"stream\" data-stream-id=\"242269\" href=\"/#narrow/stream/242269-t-release.2Ftriage\">#t-release/triage</a> for ensuring that performance issues are always addressed in some way (either by fixing the issue or by deciding the regression is acceptable).</p>",
        "id": 243522965,
        "sender_full_name": "rylev",
        "timestamp": 1624371407
    },
    {
        "content": "<p>By the way, this was explicitly discussed in the \"short-term performance process review\" we had. The proposal explicitly laid out this vision above ^^ - so this isn't something we haven't discussed before . Of course, it's fine if we decide that it's not useful after all <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 243523319,
        "sender_full_name": "rylev",
        "timestamp": 1624371550
    },
    {
        "content": "<p>Yeah, I recall something to this effect -- I didn't quite recall whether that was labels or some other method</p>",
        "id": 243524026,
        "sender_full_name": "simulacrum",
        "timestamp": 1624371807
    },
    {
        "content": "<p>but labels seem to make sense</p>",
        "id": 243524062,
        "sender_full_name": "simulacrum",
        "timestamp": 1624371818
    },
    {
        "content": "<p>I think not looking at neutral or improvements is necessary, then</p>",
        "id": 243524322,
        "sender_full_name": "simulacrum",
        "timestamp": 1624371914
    },
    {
        "content": "<p>Do we think this needs an FCP? Or how should we go about doing this?</p>",
        "id": 243527735,
        "sender_full_name": "rylev",
        "timestamp": 1624373320
    },
    {
        "content": "<p>I think just making it happen in the rustc-perf repo makes sense</p>",
        "id": 243528063,
        "sender_full_name": "simulacrum",
        "timestamp": 1624373435
    },
    {
        "content": "<p>I assume the label needs to be added first to the repo right? (or does the bot create the label if it doesn't exist?)</p>",
        "id": 243528437,
        "sender_full_name": "rylev",
        "timestamp": 1624373589
    },
    {
        "content": "<p>I think github's api just implicitly creates it</p>",
        "id": 243529492,
        "sender_full_name": "simulacrum",
        "timestamp": 1624373987
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> it turns out the that the bot doesn't have permission to make the labels: <a href=\"https://github.com/rust-lang/rust/pull/86525#issuecomment-868593482\">https://github.com/rust-lang/rust/pull/86525#issuecomment-868593482</a>. Would you be able to fix that?</p>",
        "id": 244021341,
        "sender_full_name": "rylev",
        "timestamp": 1624722718
    },
    {
        "content": "<p>The label should get added to triagebot.toml I suspect in the root - anyone should be able to set it</p>",
        "id": 244021438,
        "sender_full_name": "simulacrum",
        "timestamp": 1624722815
    },
    {
        "content": "<p>Do we want anyone to be able to set it? I'm unsure if we've had issues with abuse before.</p>",
        "id": 244118274,
        "sender_full_name": "rylev",
        "timestamp": 1624871053
    },
    {
        "content": "<p>Here's a pr for that: <a href=\"https://github.com/rust-lang/triagebot/pull/1409\">https://github.com/rust-lang/triagebot/pull/1409</a></p>",
        "id": 244118511,
        "sender_full_name": "rylev",
        "timestamp": 1624871259
    },
    {
        "content": "<p>It needs to go on rust-lang/rust, each repository has it's own config</p>",
        "id": 244131794,
        "sender_full_name": "simulacrum",
        "timestamp": 1624880348
    },
    {
        "content": "<p>I don't think we've seen abuse really of labels quite yet</p>",
        "id": 244131824,
        "sender_full_name": "simulacrum",
        "timestamp": 1624880377
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/86687\">https://github.com/rust-lang/rust/pull/86687</a> should do it</p>",
        "id": 244131987,
        "sender_full_name": "simulacrum",
        "timestamp": 1624880470
    },
    {
        "content": "<p>Ah ok thanks! Should the pr on triagebot itself be closed?</p>",
        "id": 244132430,
        "sender_full_name": "rylev",
        "timestamp": 1624880766
    },
    {
        "content": "<p>Yeah</p>",
        "id": 244138241,
        "sender_full_name": "simulacrum",
        "timestamp": 1624884178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I think we should make an announcement during the compiler meeting about the new performance categorization and labeling so make sure everyone is on the same page. I'll work on that.</p>",
        "id": 244255536,
        "sender_full_name": "rylev",
        "timestamp": 1624959688
    },
    {
        "content": "<p>Great idea!</p>",
        "id": 244265300,
        "sender_full_name": "simulacrum",
        "timestamp": 1624965836
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> thoughts on this as the announcement?<br>\nThe perf team is changing the compiler perf process to help make tracking compiler performance regressions easier. These are the changes made so far, and how they might impact you:</p>\n<ul>\n<li>The perf bot now attempts to categorize perf runs as \"improvement\", \"regression\", \"mixed\", or no category at all (i.e., perf did not significantly change), and it includes this in the summary section of the comment posted to the PR. <ul>\n<li><strong>What you should do</strong>: This is meant as an _aid_ when analyzing perf runs. Please continue to check the perf output and see if your interpretation matches the categorization. If it does not, file an issue in rust-lang/rustc-perf.</li>\n</ul>\n</li>\n<li>The perf bot also adds the GitHub label <code>perf-regression</code> if the run is categorized as a regression or mixed. It removes this label if the performance run yields no changes or perf improvements. This means if you make changes that improve the perf of your PR, it will automatically remove the regression label.<ul>\n<li><strong>What you should do</strong>: Not all PRs labeled as <code>perf-regressions</code> need to have their performance regressions fixed. Regressions can be acceptable (e.g., for bug fixes). However, if you believe the regression is justified, please leave a short comment as to why and add the label <code>perf-regression-justified</code>. (note: <a href=\"https://github.com/rust-lang/rust/pull/86779\">https://github.com/rust-lang/rust/pull/86779</a> must land first before this is possible for everyone)</li>\n</ul>\n</li>\n<li>Soon the perf team will change the perf triage process to include tracking of these labels to ensure that every performance regression is either fixed or has a written justification. </li>\n</ul>\n<p>This is just the beginning of perf process improvements. If you'd like to discuss the future of the compiler performance process, drop by <a class=\"stream\" data-stream-id=\"247081\" href=\"/#narrow/stream/247081-t-compiler.2Fperformance\">#t-compiler/performance</a> .</p>",
        "id": 244539126,
        "sender_full_name": "rylev",
        "timestamp": 1625131297
    },
    {
        "content": "<p>I'm starting to think that labeling perf improvements could also be helpful for tracking purposes but only somewhat. Is adding a new label associated with any cost (maintenance or cognitive overhead wise)?</p>",
        "id": 244539409,
        "sender_full_name": "rylev",
        "timestamp": 1625131437
    },
    {
        "content": "<p>No, labels are essentially free</p>",
        "id": 244551313,
        "sender_full_name": "simulacrum",
        "timestamp": 1625138777
    },
    {
        "content": "<p>We should make sure that the justified label exists and can be set by anyone, updating triagebot.toml to blanket allow perf-* is probably a good idea</p>",
        "id": 244551375,
        "sender_full_name": "simulacrum",
        "timestamp": 1625138836
    },
    {
        "content": "<p>I'll do that</p>",
        "id": 244559457,
        "sender_full_name": "rylev",
        "timestamp": 1625143628
    },
    {
        "content": "<p>Random question: do we have any oversight on changed labels? Making it open to anyone is the right move, but it might be nice to have a bot that watches certain labels and simply tracks if a label is changed by someone unexpected. We could define an \"unexpected person\" as anyone not in a rust team or the author of the PR/issue. This could allow for casual, low-cost oversight.</p>",
        "id": 244560087,
        "sender_full_name": "rylev",
        "timestamp": 1625143907
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/86779\">https://github.com/rust-lang/rust/pull/86779</a></p>",
        "id": 244561101,
        "sender_full_name": "rylev",
        "timestamp": 1625144353
    },
    {
        "content": "<p>Hm, I don't think we track that at all today -- not really clear where we'd put that information if we did</p>",
        "id": 244569137,
        "sender_full_name": "simulacrum",
        "timestamp": 1625147542
    },
    {
        "content": "<p>I've not really seen any issues for the most part.</p>",
        "id": 244569174,
        "sender_full_name": "simulacrum",
        "timestamp": 1625147555
    },
    {
        "content": "<p>Yea, just more of a curiosity at this point. Should be easy to set up if ever became an issue.</p>",
        "id": 244569780,
        "sender_full_name": "rylev",
        "timestamp": 1625147765
    },
    {
        "content": "<p>Does it only categorize instruction counts or does it look at the other statistics too? E.g. compiler build time?</p>",
        "id": 244617560,
        "sender_full_name": "The 8472",
        "timestamp": 1625168957
    },
    {
        "content": "<p>just instruction counts today</p>",
        "id": 244617976,
        "sender_full_name": "simulacrum",
        "timestamp": 1625169198
    }
]