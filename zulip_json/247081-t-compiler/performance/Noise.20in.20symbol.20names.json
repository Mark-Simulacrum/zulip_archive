[
    {
        "content": "<p>Quick question (continuing the <code>cg_diff</code> discussion):</p>\n<p>Does anybody know what causes differences like this in symbol names</p>\n<div class=\"codehilite\"><pre><span></span><code>-1,091,056  /home/we/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs:_RINvXs0_NtNtCshJKh12GrzIx_4core4hash5implseNtB8_4Hash4hashNtCs3ZmDe2HJv4f_10rustc_hash8FxHasherECs9J0VgQh6xgN_10rustc_span.llvm.5193847260293977479\n 1,090,956  /home/we/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs:_RINvXs0_NtNtCshJKh12GrzIx_4core4hash5implseNtB8_4Hash4hashNtCs3ZmDe2HJv4f_10rustc_hash8FxHasherECs9J0VgQh6xgN_10rustc_span.llvm.8995515151883743931\n</code></pre></div>\n<p>(the hash-like suffix after <code>.llvm</code>)?</p>",
        "id": 266172827,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1640611936
    },
    {
        "content": "<p>That is caused by ThinLTO. When inlining a function into a different codegen unit LLVM appends a hash to all local functions the inlined function uses before making them public to prevent symbol conflicts. This hash needs to be unique for each CGU.</p>",
        "id": 266173408,
        "sender_full_name": "bjorn3",
        "timestamp": 1640612605
    },
    {
        "content": "<p>I see, thanks.<br>\nI guess it'll be more reasonable to just normalize them away with <code>cg_diff</code> than rebuild the compiler without Thin LTO.</p>",
        "id": 266174305,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1640613526
    },
    {
        "content": "<p>It could be built with fat lto instead?</p>",
        "id": 266174649,
        "sender_full_name": "The 8472",
        "timestamp": 1640613796
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/Noise.20in.20symbol.20names/near/266174649\">said</a>:</p>\n<blockquote>\n<p>It could be built with fat lto instead?</p>\n</blockquote>\n<p>I'm afraid my laptop will refuse to cooperate if I try that <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 266221759,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1640654386
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@nnethercote</span></p>",
        "id": 266231918,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1640668376
    },
    {
        "content": "<p>By the way, valgrind doesn't correctly demangle these symbols with <code>.llvm.HASH</code> in the end.</p>",
        "id": 266231940,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1640668424
    },
    {
        "content": "<p>(valgrind on master)</p>",
        "id": 266231991,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1640668457
    },
    {
        "content": "<p>Actually maybe it's a rustc's problem?<br>\nIf the compiler is producing symbols that don't match our own format, then something is wrong either with the format or with the compiler.</p>",
        "id": 266232127,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1640668675
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> There's progress being made on the gcc/libiberty/Valgrind side for this, see <a href=\"https://bugs.kde.org/show_bug.cgi?id=445916\">https://bugs.kde.org/show_bug.cgi?id=445916</a> for details</p>",
        "id": 266232535,
        "sender_full_name": "nnethercote",
        "timestamp": 1640669273
    },
    {
        "content": "<p>Thanks, applied <a href=\"https://gcc.gnu.org/pipermail/gcc-patches/2021-December/586058.html\">https://gcc.gnu.org/pipermail/gcc-patches/2021-December/586058.html</a> locally and it helped.</p>",
        "id": 266233328,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1640670482
    },
    {
        "content": "<p>FWIW, my personal conclusion from the linked threads is that the <code>. &lt;vendor-specific suffix&gt;</code> thing should officially be a part of v0 spec, similarly to itanium abi.</p>",
        "id": 266233420,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1640670614
    }
]