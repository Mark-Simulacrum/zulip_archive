[
    {
        "content": "<p>OMG, take a look at this: <a href=\"https://github.com/rust-lang/rust/pull/77051#issuecomment-696779458\">https://github.com/rust-lang/rust/pull/77051#issuecomment-696779458</a></p>",
        "id": 210883426,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600787088
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I don't think we want to merge this?</p>",
        "id": 210888353,
        "sender_full_name": "eddyb",
        "timestamp": 1600788914
    },
    {
        "content": "<p>why not?</p>",
        "id": 210888538,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600788980
    },
    {
        "content": "<p>this is just disabling a feature</p>",
        "id": 210888585,
        "sender_full_name": "eddyb",
        "timestamp": 1600789004
    },
    {
        "content": "<p>to measure the cost of it</p>",
        "id": 210888597,
        "sender_full_name": "eddyb",
        "timestamp": 1600789008
    },
    {
        "content": "<p>we have it because it makes binaries smaller (at the cost of longer compile times, apparently, but that sounds like a linker problem?)</p>",
        "id": 210888677,
        "sender_full_name": "eddyb",
        "timestamp": 1600789044
    },
    {
        "content": "<p>oh I see, it increases binary sizes</p>",
        "id": 210888699,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600789054
    },
    {
        "content": "<p>wait why do we count linker instructions? or are these LLVM instructions?</p>",
        "id": 210888704,
        "sender_full_name": "eddyb",
        "timestamp": 1600789056
    },
    {
        "content": "<p>maybe it could be off by default in debug mode? compile times matter more there</p>",
        "id": 210888736,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600789071
    },
    {
        "content": "<p>well it won't help in debug mode at all anyway I don't think? except cross-crate, maybe</p>",
        "id": 210888820,
        "sender_full_name": "eddyb",
        "timestamp": 1600789096
    },
    {
        "content": "<p>what it allows is the linker to GC unused functions</p>",
        "id": 210888841,
        "sender_full_name": "eddyb",
        "timestamp": 1600789105
    },
    {
        "content": "<p>the problem is the only way to get this working is one section per function which I guess is where the linker or LLVM doesn't scale properly</p>",
        "id": 210888890,
        "sender_full_name": "eddyb",
        "timestamp": 1600789128
    },
    {
        "content": "<p>there are some <em>significant</em> improvements in debug mode on perf.rlo</p>",
        "id": 210888892,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600789128
    },
    {
        "content": "<p>I mean having the GC on won't help debug-mode as much, so you're right about us being able to maybe do that</p>",
        "id": 210888962,
        "sender_full_name": "eddyb",
        "timestamp": 1600789165
    },
    {
        "content": "<p>In debug mode executable size is less important than in release mode I think.</p>",
        "id": 210889012,
        "sender_full_name": "bjorn3",
        "timestamp": 1600789194
    },
    {
        "content": "<p>what I was thinking about is when optimizations aren't enabled, LLVM isn't removing as many uses of functions</p>",
        "id": 210889101,
        "sender_full_name": "eddyb",
        "timestamp": 1600789220
    },
    {
        "content": "<p>so it <em>also</em> is less impactful in debug mode</p>",
        "id": 210889116,
        "sender_full_name": "eddyb",
        "timestamp": 1600789231
    },
    {
        "content": "<p>perf stat I think by default collects all child processes</p>",
        "id": 210889125,
        "sender_full_name": "simulacrum",
        "timestamp": 1600789236
    },
    {
        "content": "<p>I would gladly give up 10x the binary size for a 25% compile time decrease in debug mode</p>",
        "id": 210889154,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600789247
    },
    {
        "content": "<p>oh is that why it works when nesting <code>setarch</code> and whatnot huh</p>",
        "id": 210889169,
        "sender_full_name": "eddyb",
        "timestamp": 1600789254
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> okay I feel like I'm not explaining myself properly lol</p>",
        "id": 210889209,
        "sender_full_name": "eddyb",
        "timestamp": 1600789271
    },
    {
        "content": "<p>I got 26MB -&gt; 15MB without any optimizations when enabling per function sections in cg_clif, so even when \"LLVM isn't removing as many uses of functions\" it can have a big effect on executable size.</p>",
        "id": 210889280,
        "sender_full_name": "bjorn3",
        "timestamp": 1600789302
    },
    {
        "content": "<p>being able to  GC functions is a worse tradeoff for debug mode <em>on top of</em> you not caring about binary size</p>",
        "id": 210889283,
        "sender_full_name": "eddyb",
        "timestamp": 1600789304
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> oh is that cross-crate?</p>",
        "id": 210889303,
        "sender_full_name": "eddyb",
        "timestamp": 1600789318
    },
    {
        "content": "<p>correct, I'm saying we should <em>disable</em> <code>-ffunction-sections</code> for debug mode</p>",
        "id": 210889306,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600789319
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> and I'm giving you a second reason than just \"I don't care about binary sizes\" though it might be invalid given what <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> has measured</p>",
        "id": 210889414,
        "sender_full_name": "eddyb",
        "timestamp": 1600789359
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> what about at <code>-C opt-level=3</code>?</p>",
        "id": 210889447,
        "sender_full_name": "eddyb",
        "timestamp": 1600789376
    },
    {
        "content": "<p>The executable decrease in that case is probably caused by removing big chunks of unused parts of libstd.</p>",
        "id": 210889473,
        "sender_full_name": "bjorn3",
        "timestamp": 1600789387
    },
    {
        "content": "<p>that would make sense I guess</p>",
        "id": 210889493,
        "sender_full_name": "eddyb",
        "timestamp": 1600789397
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/General/near/210889447\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> what about at <code>-C opt-level=3</code>?</p>\n</blockquote>\n<p>I have only measured executable sizes with cg_clif for which enabling optimizations doesn't do much at all.</p>",
        "id": 210889584,
        "sender_full_name": "bjorn3",
        "timestamp": 1600789442
    },
    {
        "content": "<p>heh</p>",
        "id": 210889635,
        "sender_full_name": "eddyb",
        "timestamp": 1600789454
    },
    {
        "content": "<p>okay so this is mostly just cutting libstd in half or w/e</p>",
        "id": 210889677,
        "sender_full_name": "eddyb",
        "timestamp": 1600789472
    },
    {
        "content": "<p>wait!</p>",
        "id": 210889690,
        "sender_full_name": "eddyb",
        "timestamp": 1600789480
    },
    {
        "content": "<p>what if we compile <em>only</em> libstd with <code>-ffunction-sections</code>?</p>",
        "id": 210889715,
        "sender_full_name": "eddyb",
        "timestamp": 1600789491
    },
    {
        "content": "<p>I can try that. Give me a minute.</p>",
        "id": 210889765,
        "sender_full_name": "bjorn3",
        "timestamp": 1600789513
    },
    {
        "content": "<p>there's also the fact that we might be doing <code>-ffunction-sections</code> on private functions</p>",
        "id": 210889812,
        "sender_full_name": "eddyb",
        "timestamp": 1600789532
    },
    {
        "content": "<p>instead of putting private functions in their own section</p>",
        "id": 210889845,
        "sender_full_name": "eddyb",
        "timestamp": 1600789548
    },
    {
        "content": "<p>it looks like rustc treats <code>-ffunction-sections</code> the same as <code>-fdata-sections</code> too</p>",
        "id": 210889854,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600789552
    },
    {
        "content": "<p>so we might get different results by enabling one but not the other</p>",
        "id": 210889918,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600789567
    },
    {
        "content": "<p>right we should also measure that</p>",
        "id": 210889935,
        "sender_full_name": "eddyb",
        "timestamp": 1600789575
    },
    {
        "content": "<p>So far I haven't tried <code>-fdata-sections</code> in cg_clif at all.</p>",
        "id": 210889986,
        "sender_full_name": "bjorn3",
        "timestamp": 1600789602
    },
    {
        "content": "<p>I was literally pressing \"Edit topic\" to do this and the message jumped from under me</p>",
        "id": 210890002,
        "sender_full_name": "eddyb",
        "timestamp": 1600789610
    },
    {
        "content": "<p>anyway yeah so what I'm thinking is: we have special CGU logic for private instantiations</p>",
        "id": 210890045,
        "sender_full_name": "eddyb",
        "timestamp": 1600789636
    },
    {
        "content": "<p>and I'm wondering if those account for most of the slowdown while offering little to no GC opportunity</p>",
        "id": 210890073,
        "sender_full_name": "eddyb",
        "timestamp": 1600789653
    },
    {
        "content": "<p>it's also possible the linkers are just bad at this</p>",
        "id": 210890091,
        "sender_full_name": "eddyb",
        "timestamp": 1600789662
    },
    {
        "content": "<p>have we compared <code>ld.bfd</code> vs <code>ld.gold</code> vs <code>lld</code>?</p>",
        "id": 210890110,
        "sender_full_name": "eddyb",
        "timestamp": 1600789673
    },
    {
        "content": "<p>(I bet you each gets faster in turn)</p>",
        "id": 210890137,
        "sender_full_name": "eddyb",
        "timestamp": 1600789684
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/-ffunction-sections/near/210889715\">said</a>:</p>\n<blockquote>\n<p>what if we compile <em>only</em> libstd with <code>-ffunction-sections</code>?</p>\n</blockquote>\n<p>that would still have a compile time cost, right? because we call the linker on libstd every time rustc runs?</p>",
        "id": 210890368,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600789783
    },
    {
        "content": "<p>I only tried the default linker. <code>lld</code> is a bit picky about what it accepts. In fact I found this optimization opportunity after noticing that cg_llvm used <code>-ffunction-sections</code> when I was trying to fix cg_clif to work with <code>lld</code>.</p>",
        "id": 210890369,
        "sender_full_name": "bjorn3",
        "timestamp": 1600789784
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/-ffunction-sections/near/210890368\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/-ffunction-sections/near/210889715\">said</a>:</p>\n<blockquote>\n<p>what if we compile <em>only</em> libstd with <code>-ffunction-sections</code>?</p>\n</blockquote>\n<p>that would still have a compile time cost, right? because we call the linker on libstd every time rustc runs?</p>\n</blockquote>\n<p>I want us to validate that tbh</p>",
        "id": 210890453,
        "sender_full_name": "eddyb",
        "timestamp": 1600789809
    },
    {
        "content": "<p>Gotta rewrite all the linkers in Rust, obvi.</p>",
        "id": 210890454,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600789809
    },
    {
        "content": "<p>because we don't actually know what's going on</p>",
        "id": 210890467,
        "sender_full_name": "eddyb",
        "timestamp": 1600789814
    },
    {
        "content": "<p>sure, more data is always good</p>",
        "id": 210890495,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600789829
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> gimme that fully parallelized linking</p>",
        "id": 210890499,
        "sender_full_name": "eddyb",
        "timestamp": 1600789832
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/-ffunction-sections/near/210889715\">said</a>:</p>\n<blockquote>\n<p>what if we compile <em>only</em> libstd with <code>-ffunction-sections</code>?</p>\n</blockquote>\n<p>23MB executable, ~0.55s linker time</p>",
        "id": 210890564,
        "sender_full_name": "bjorn3",
        "timestamp": 1600789861
    },
    {
        "content": "<p>huh</p>",
        "id": 210890622,
        "sender_full_name": "eddyb",
        "timestamp": 1600789893
    },
    {
        "content": "<p>is it libstd or libcore that actually has most of the unused MBs?</p>",
        "id": 210890668,
        "sender_full_name": "eddyb",
        "timestamp": 1600789913
    },
    {
        "content": "<p>For comparison these are the results for cg_llvm and cg_clif with and without everything <code>-ffunction-sections</code>: <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/762#issuecomment-696690733\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/762#issuecomment-696690733</a></p>",
        "id": 210890672,
        "sender_full_name": "bjorn3",
        "timestamp": 1600789916
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/-ffunction-sections/near/210890668\">said</a>:</p>\n<blockquote>\n<p>is it libstd or libcore that actually has most of the unused MBs?</p>\n</blockquote>\n<p>How do I measure that?</p>",
        "id": 210890794,
        "sender_full_name": "bjorn3",
        "timestamp": 1600789963
    },
    {
        "content": "<p>uhhh</p>",
        "id": 210891441,
        "sender_full_name": "eddyb",
        "timestamp": 1600790243
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> do what you did for libstd but for libcore instead?</p>",
        "id": 210891470,
        "sender_full_name": "eddyb",
        "timestamp": 1600790251
    },
    {
        "content": "<p>compile a program with <code>#![no_std]</code>?</p>",
        "id": 210891489,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600790262
    },
    {
        "content": "<p>assuming you limited to literally only <code>library/std</code> and not the entirety of <code>library/</code></p>",
        "id": 210891509,
        "sender_full_name": "eddyb",
        "timestamp": 1600790269
    },
    {
        "content": "<p>and also <code>#![no_core]</code> for sanity maybe</p>",
        "id": 210891515,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600790270
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I mean at that point you can just measure <code>libcore.rlib</code>'s size</p>",
        "id": 210891602,
        "sender_full_name": "eddyb",
        "timestamp": 1600790289
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/-ffunction-sections/near/210891509\">said</a>:</p>\n<blockquote>\n<p>assuming you limited to literally only <code>library/std</code> and not the entirety of <code>library/</code></p>\n</blockquote>\n<p>I used it for all of <code>library/</code>.</p>",
        "id": 210891608,
        "sender_full_name": "bjorn3",
        "timestamp": 1600790294
    },
    {
        "content": "<p>ah wow what</p>",
        "id": 210891620,
        "sender_full_name": "eddyb",
        "timestamp": 1600790299
    },
    {
        "content": "<p>and that only resulted in a 3MB reduction?</p>",
        "id": 210891670,
        "sender_full_name": "eddyb",
        "timestamp": 1600790322
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> is it still set to GC sections?</p>",
        "id": 210891690,
        "sender_full_name": "eddyb",
        "timestamp": 1600790330
    },
    {
        "content": "<p>even if it doesn't use <code>-ffunction-sections</code> for later crates?</p>",
        "id": 210891732,
        "sender_full_name": "eddyb",
        "timestamp": 1600790347
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/-ffunction-sections/near/210891602\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> I mean at that point you can just measure <code>libcore.rlib</code>'s size</p>\n</blockquote>\n<p>rlibs are not created using the linker.</p>",
        "id": 210891746,
        "sender_full_name": "bjorn3",
        "timestamp": 1600790351
    },
    {
        "content": "<p>I mean the size of an un-GC'd executable is going to be roughly the size of all the <code>.o</code> files in dependencies' <code>rlib</code>s, added together</p>",
        "id": 210891816,
        "sender_full_name": "eddyb",
        "timestamp": 1600790378
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/-ffunction-sections/near/210891732\">said</a>:</p>\n<blockquote>\n<p>even if it doesn't use <code>-ffunction-sections</code> for later crates?</p>\n</blockquote>\n<p>I only changed the object write code of cg_clif. I didn't change the linker code, so <code>--gc-sections</code> is still passed.</p>",
        "id": 210891830,
        "sender_full_name": "bjorn3",
        "timestamp": 1600790386
    },
    {
        "content": "<p>they're almost entirely concatenated (well, the contents of sections are)</p>",
        "id": 210891918,
        "sender_full_name": "eddyb",
        "timestamp": 1600790407
    },
    {
        "content": "<p>I have disabled <code>--gc-sections</code> for none of the measurements. The only variable was what object files used per function sections and which used a single <code>.text</code> section.</p>",
        "id": 210892097,
        "sender_full_name": "bjorn3",
        "timestamp": 1600790477
    },
    {
        "content": "<p>mkay. I'm not sure exactly how to measure where  the reduction all the way down to 15MB is coming from</p>",
        "id": 210892258,
        "sender_full_name": "eddyb",
        "timestamp": 1600790524
    },
    {
        "content": "<p>I guess you could use <code>-ffunction-sections</code> and compare the list of symbols between <code>--gc-sections</code> on and off (or the list of sections?)</p>",
        "id": 210892328,
        "sender_full_name": "eddyb",
        "timestamp": 1600790553
    },
    {
        "content": "<p>I will try that.</p>",
        "id": 210892439,
        "sender_full_name": "bjorn3",
        "timestamp": 1600790603
    },
    {
        "content": "<p>you might want to use <code>-Z symbol-mangling-version=v0</code> because it includes the instantiating crate for generics/<code>#[inline]</code></p>",
        "id": 210892494,
        "sender_full_name": "eddyb",
        "timestamp": 1600790632
    },
    {
        "content": "<p>at least I think it should in relevant cases</p>",
        "id": 210892559,
        "sender_full_name": "eddyb",
        "timestamp": 1600790645
    },
    {
        "content": "<p>LLD can use multiple threads for some of the operations. I imagine it would regress instructions but improve real time.</p>",
        "id": 210892571,
        "sender_full_name": "mati865",
        "timestamp": 1600790651
    },
    {
        "content": "<p>(whereas the legacy mangling just hashes it in)</p>",
        "id": 210892594,
        "sender_full_name": "eddyb",
        "timestamp": 1600790659
    },
    {
        "content": "<p>Longer symbol names lead to worse linker times. I had to hash some of the symbols I produced for better linker times.</p>",
        "id": 210892697,
        "sender_full_name": "bjorn3",
        "timestamp": 1600790708
    },
    {
        "content": "<p>that reminds me we should have a mode for that lol, I keep forgetting that's a problem</p>",
        "id": 210892835,
        "sender_full_name": "eddyb",
        "timestamp": 1600790764
    },
    {
        "content": "<p>26788 functions are GC'ed<br>\nof these<br>\n7891 start with _ZN4core<br>\n1796 start with _ZN5alloc<br>\n1528 start with _ZN3std</p>",
        "id": 210893562,
        "sender_full_name": "bjorn3",
        "timestamp": 1600791077
    },
    {
        "content": "<p>trait implementations are not included in the core, alloc and std numbers.</p>",
        "id": 210893625,
        "sender_full_name": "bjorn3",
        "timestamp": 1600791109
    },
    {
        "content": "<p>for the trait implementations<br>\n4860 contain \"core..\"<br>\n1051 contain \"alloc..\"<br>\n830 contain \"std..\"<br>\nthis included trait implementations of traits in those crates by other crates</p>",
        "id": 210893891,
        "sender_full_name": "bjorn3",
        "timestamp": 1600791213
    },
    {
        "content": "<p>(I used <code>diff &lt;(objdump -t ./raytracer_cg_clif | cut -c62- ) &lt;(objdump -t target/debug/main | cut -c62- ) | grep \"&lt;\" | cut -c3- | sort | ...</code> as diff command. <code>./raytracer_cg_clif</code> doesn't use <code>-ffunction-sections</code>, <code>target/debug/main</code> does)</p>",
        "id": 210894071,
        "sender_full_name": "bjorn3",
        "timestamp": 1600791273
    },
    {
        "content": "<p>Can I mix enabling and disabling <code>-Z symbol-mangling-version=v0</code>? Edit: never mind. I just recompiled everything.</p>",
        "id": 210894293,
        "sender_full_name": "bjorn3",
        "timestamp": 1600791365
    },
    {
        "content": "<p>you can mix it but it's gonna be less useful</p>",
        "id": 210897668,
        "sender_full_name": "eddyb",
        "timestamp": 1600792854
    },
    {
        "content": "<p>(the value of the flag from the \"defining crate\" is used, in order for linking to succeed no matter how you combine them)</p>",
        "id": 210897731,
        "sender_full_name": "eddyb",
        "timestamp": 1600792884
    },
    {
        "content": "<p>Here is the full diff produced using <code>diff &lt;(objdump -t ./raytracer_cg_clif_mangle_v0 | cut -c62- ) &lt;(objdump -t target/debug/main | cut -c62- ) | grep \"&lt;\" | cut -c3- | grep -v \"\\.o\" | sed \"s/\\.hidden //\" | sed \"s/^ *//\" | sort</code>: <a href=\"https://gist.github.com/bjorn3/d65282d3b32894e62ecc7ea071b2e368\">https://gist.github.com/bjorn3/d65282d3b32894e62ecc7ea071b2e368</a></p>",
        "id": 210899027,
        "sender_full_name": "bjorn3",
        "timestamp": 1600793481
    },
    {
        "content": "<p>heh all the <code>__alloc_...</code>, are those miri allocs? cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 210899982,
        "sender_full_name": "eddyb",
        "timestamp": 1600793920
    },
    {
        "content": "<p>Yes, that is how cg_clif represents miri allocs that are not statics. The number after <code>__alloc_</code> is identical to the <code>AllocId</code>.</p>",
        "id": 210901649,
        "sender_full_name": "bjorn3",
        "timestamp": 1600794671
    },
    {
        "content": "<p>I wonder what LLVM unnamed globals turn into. maybe just no symbols?</p>",
        "id": 210903778,
        "sender_full_name": "eddyb",
        "timestamp": 1600795519
    },
    {
        "content": "<p>LLVM uses <code>str.0</code>, <code>str.1</code>, ... for that I think. At least those are part of a random executable I tested.</p>",
        "id": 210904665,
        "sender_full_name": "bjorn3",
        "timestamp": 1600795923
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> did you try string literals, or other things? it's a private label here <a href=\"https://godbolt.org/z/qzaocr\">https://godbolt.org/z/qzaocr</a></p>",
        "id": 210910381,
        "sender_full_name": "eddyb",
        "timestamp": 1600798400
    },
    {
        "content": "<p>with all the filters disabled: <a href=\"https://godbolt.org/z/h7ov6x\">https://godbolt.org/z/h7ov6x</a></p>",
        "id": 210910494,
        "sender_full_name": "eddyb",
        "timestamp": 1600798444
    },
    {
        "content": "<p>I just picked a random executable. Private labels are not supported by object, so I can't use them in cg_clif.</p>",
        "id": 210911767,
        "sender_full_name": "bjorn3",
        "timestamp": 1600799056
    },
    {
        "content": "<p>I mean, they're an assembler abstraction, aren't they?</p>",
        "id": 210911802,
        "sender_full_name": "eddyb",
        "timestamp": 1600799075
    },
    {
        "content": "<p>you just put data into a section and refer to its offset relative to the object, no?</p>",
        "id": 210911829,
        "sender_full_name": "eddyb",
        "timestamp": 1600799096
    },
    {
        "content": "<p>cranelift-object doesn't allow that. it basically has define/declare_func/data combined with a few methods for interoperability with cranelift-codegen.</p>",
        "id": 210912894,
        "sender_full_name": "bjorn3",
        "timestamp": 1600799606
    },
    {
        "content": "<p>cranelift-object and cranelift-simplejit have the exact same exposed api surface before finalizing. after finalizing you can't add new functions generated by cranelift anymore without basically duplicating them.</p>",
        "id": 210913058,
        "sender_full_name": "bjorn3",
        "timestamp": 1600799692
    },
    {
        "content": "<p>Created <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2220\">https://github.com/bytecodealliance/wasmtime/issues/2220</a></p>",
        "id": 210914753,
        "sender_full_name": "bjorn3",
        "timestamp": 1600800565
    },
    {
        "content": "<p>FWIW, using function sections only for std in debug sounds great.</p>",
        "id": 210935043,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600810995
    },
    {
        "content": "<p>That would allow throwing away unused parts of std.</p>",
        "id": 210935074,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600811011
    },
    {
        "content": "<p>\"only for std in debug\", but not in release?</p>",
        "id": 210958497,
        "sender_full_name": "Lokathor",
        "timestamp": 1600835414
    },
    {
        "content": "<p>I meant always using it for std, but in debug not using it for anything else.</p>",
        "id": 210958506,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600835459
    },
    {
        "content": "<p>would that be determined by a particular profile flag or just the literal names of the profiles?</p>",
        "id": 210959437,
        "sender_full_name": "Lokathor",
        "timestamp": 1600837039
    },
    {
        "content": "<p>Using it only for std is almost as bad as always using it. ~0.55s when using -ffunction-sections for the sysroot only.  ~0.6s when using -ffunction-sections for everything. ~0.4s when never using -ffunction-sections.</p>",
        "id": 210967421,
        "sender_full_name": "bjorn3",
        "timestamp": 1600846426
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> are you measuring the LLVM backend's output or the cranelift backend? is there any chance there's a difference between the two?</p>",
        "id": 210970975,
        "sender_full_name": "eddyb",
        "timestamp": 1600848826
    },
    {
        "content": "<p>I have been measuring cg_clif. There could be a difference between the two. At least for cg_clif there is no -fdata-sections support yet, while cg_llvm enables/disables -ffunction-sections and -fdata-sections at the same time.</p>",
        "id": 210971126,
        "sender_full_name": "bjorn3",
        "timestamp": 1600848931
    },
    {
        "content": "<p>c113030 is the parent. 8a4aabc is my commit.</p>\n<div class=\"codehilite\"><pre><span></span><code>-rwxr-xr-x 1 bjorn bjorn 7819000 sep 22 10:52 /home/bjorn/.rustup/toolchains/c113030f6b7d10cd27ac7091718e6f48ecf56a63/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-edfba68bd3501617.so\n-rwxr-xr-x 1 bjorn bjorn 7712688 sep 22 14:30 /home/bjorn/.rustup/toolchains/8a4aabcca5f2e9187df7a96c20f8cba616c0be39/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-edfba68bd3501617.so\n</code></pre></div>\n\n\n<p><a href=\"http://libstd.so\">libstd.so</a> got a bit smaller without -ffunction-sections for cg_llvm.</p>",
        "id": 210971783,
        "sender_full_name": "bjorn3",
        "timestamp": 1600849400
    },
    {
        "content": "<p>I think because <code>--gc-sections</code> can't remove anything and sections have a bit of size overhead.</p>",
        "id": 210971904,
        "sender_full_name": "bjorn3",
        "timestamp": 1600849478
    },
    {
        "content": "<p>Here are the full cg_llvm results for the benchmark I used with cg_clif in my previous messages:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ git remote get-url origin\nhttps://github.com/ebobby/simple-raytracer\n$ git rev-parse HEAD\n804a7a21b9e673a482797aa289a18ed480e4d813\n</code></pre></div>\n\n\n<h1><a href=\"https://github.com/rust-lang/rust/commit/c113030f6b7d10cd27ac7091718e6f48ecf56a63\">c113030f6b7d10cd27ac7091718e6f48ecf56a63</a> (before my PR)</h1>\n<div class=\"codehilite\"><pre><span></span><code>$ du -s target/debug/deps\n108832  target/debug/deps\n$ du -s target/debug/main\n14692   target/debug/main\n$ for i in $(seq 0 10); do rm target/debug/deps/main-*; RUSTFLAGS=&quot;-Ztime-passes&quot; cargo +c113030f6b7d10cd27ac7091718e6f48ecf56a63 build |&amp; grep run_linker; done\ntime: 0.735; rss: 127MB run_linker\ntime: 0.731; rss: 126MB run_linker\ntime: 0.729; rss: 126MB run_linker\ntime: 0.739; rss: 128MB run_linker\ntime: 0.729; rss: 127MB run_linker\ntime: 0.724; rss: 126MB run_linker\ntime: 0.726; rss: 128MB run_linker\ntime: 0.725; rss: 127MB run_linker\ntime: 0.738; rss: 127MB run_linker\ntime: 0.736; rss: 128MB run_linker\ntime: 0.732; rss: 126MB run_linker\n</code></pre></div>\n\n\n<h1><a href=\"https://github.com/rust-lang/rust/commit/8a4aabcca5f2e9187df7a96c20f8cba616c0be39\">8a4aabcca5f2e9187df7a96c20f8cba616c0be39</a> (after my PR)</h1>\n<div class=\"codehilite\"><pre><span></span><code>$ du -s target/debug/deps\n104800  target/debug/deps\n$ du -s target/debug/main\n20552   target/debug/main\n$ for i in $(seq 0 10); do rm target/debug/deps/main-*; RUSTFLAGS=&quot;-Ztime-passes&quot; cargo +8a4aabcca5f2e9187df7a96c20f8cba616c0be39 build |&amp; grep run_linker; done\ntime: 0.457; rss: 126MB run_linker\ntime: 0.454; rss: 126MB run_linker\ntime: 0.457; rss: 127MB run_linker\ntime: 0.452; rss: 127MB run_linker\ntime: 0.457; rss: 126MB run_linker\ntime: 0.454; rss: 126MB run_linker\ntime: 0.460; rss: 126MB run_linker\ntime: 0.457; rss: 125MB run_linker\ntime: 0.455; rss: 127MB run_linker\ntime: 0.472; rss: 126MB run_linker\ntime: 0.459; rss: 127MB run_linker\n</code></pre></div>",
        "id": 210972524,
        "sender_full_name": "bjorn3",
        "timestamp": 1600849877
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> ^</p>",
        "id": 210972551,
        "sender_full_name": "bjorn3",
        "timestamp": 1600849898
    },
    {
        "content": "<p>hmm 20MB is better than 26MB</p>",
        "id": 210972667,
        "sender_full_name": "eddyb",
        "timestamp": 1600849960
    },
    {
        "content": "<p>oh but we should compare relatively, since cranelift doesn't have the same machine code output d'oh</p>",
        "id": 210972717,
        "sender_full_name": "eddyb",
        "timestamp": 1600850000
    },
    {
        "content": "<p>cg_llvm uses a release build sysroot even during a debug build. cg_clif also uses a \"release\" build sysroot, but cg_clif doesn't perform inlining and things like that.</p>",
        "id": 210972886,
        "sender_full_name": "bjorn3",
        "timestamp": 1600850088
    },
    {
        "content": "<p>To come back to what symbols are gced. 14372 symbols start with <code>_RN</code>. Of those 4300 come from core, alloc or std.</p>",
        "id": 210981870,
        "sender_full_name": "bjorn3",
        "timestamp": 1600855482
    },
    {
        "content": "<p>I made a jupyter notebook using evcxr for the analysis of which symbols are gced.</p>",
        "id": 210981969,
        "sender_full_name": "bjorn3",
        "timestamp": 1600855550
    },
    {
        "content": "<p>Exact symbol origin numbers:</p>\n<div class=\"codehilite\"><pre><span></span><code>core: 1257\nalloc: 341\nstd: 3042\n</code></pre></div>",
        "id": 210983160,
        "sender_full_name": "bjorn3",
        "timestamp": 1600856272
    },
    {
        "content": "<p><a href=\"https://gist.github.com/bjorn3/df27609cd6193a2545c5460027afa0bd\">https://gist.github.com/bjorn3/df27609cd6193a2545c5460027afa0bd</a></p>",
        "id": 210986488,
        "sender_full_name": "bjorn3",
        "timestamp": 1600858827
    },
    {
        "content": "<p>I have pushed a new version that disables <code>--gc-sections</code> instead of <code>-ffunction-sections</code>. This can be done in debug mode without hurting release mode sizes, while hopefully preserving most of the link time benefit.</p>",
        "id": 211734830,
        "sender_full_name": "bjorn3",
        "timestamp": 1601458022
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> Nice. And that seems like something that could potentially be turned back on with an option.</p>",
        "id": 211800885,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601490344
    },
    {
        "content": "<p>(perf results <a href=\"https://perf.rust-lang.org/compare.html?start=511ed9f2356af365ad8affe046b3dd33f7ac3c98&amp;end=62ede63726a44d18001f60e2a93b55965b9ca2d8\">are in</a>)</p>",
        "id": 211801819,
        "sender_full_name": "lqd",
        "timestamp": 1601490802
    },
    {
        "content": "<p>They are, but they don't look good. :(</p>",
        "id": 211802042,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601490898
    },
    {
        "content": "<p>a bit surprising</p>",
        "id": 211802197,
        "sender_full_name": "lqd",
        "timestamp": 1601490969
    },
    {
        "content": "<p>I could also try to not use <code>-ffunction-sections</code> only in debug mode. That won't give as much savings as also compiling the sysroot without <code>-ffunction-sections</code> but it should be shippable.</p>",
        "id": 211802542,
        "sender_full_name": "bjorn3",
        "timestamp": 1601491145
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> I'd love to see the numbers on that.</p>",
        "id": 211802772,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601491245
    },
    {
        "content": "<p>I seem to remember you already tried that in some of your local tests, right ?</p>",
        "id": 211805213,
        "sender_full_name": "lqd",
        "timestamp": 1601492459
    },
    {
        "content": "<p>Yes, the conclusion was still an improvement, just less that when building everything without -ffunction-sections.</p>",
        "id": 211805650,
        "sender_full_name": "bjorn3",
        "timestamp": 1601492663
    },
    {
        "content": "<p>I pushed a new version to only use -ffunction-sections when the opt level is not 0. Can I get a new perf run?</p>",
        "id": 211805709,
        "sender_full_name": "bjorn3",
        "timestamp": 1601492702
    },
    {
        "content": "<p>done</p>",
        "id": 211805734,
        "sender_full_name": "lqd",
        "timestamp": 1601492715
    }
]