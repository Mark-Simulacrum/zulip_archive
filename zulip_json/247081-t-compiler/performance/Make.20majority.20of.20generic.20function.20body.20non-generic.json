[
    {
        "content": "<p>What do you think of <a href=\"https://github.com/rust-lang/rust/issues/77960\">https://github.com/rust-lang/rust/issues/77960</a> ?</p>",
        "id": 213377455,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602733256
    },
    {
        "content": "<p>I remember some compiler team members mentioning they'd want to implement transformation like this. It was discussed on internals, too, I believe.</p>",
        "id": 213384306,
        "sender_full_name": "panstromek",
        "timestamp": 1602743335
    },
    {
        "content": "<p>As I understand it, those styles of tranformations are also a goal of polymorphization</p>",
        "id": 213384340,
        "sender_full_name": "panstromek",
        "timestamp": 1602743378
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> do you know if polymorphization would help with this?</p>",
        "id": 213414742,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602764054
    },
    {
        "content": "<p>I don't think so. This would need outlining.</p>",
        "id": 213414800,
        "sender_full_name": "bjorn3",
        "timestamp": 1602764089
    },
    {
        "content": "<p>Outlining is where the compiler moves parts of a function to the calling function? Is there a tracking issue/write-up of that somewhere?</p>",
        "id": 213415007,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602764195
    },
    {
        "content": "<p>No, outlining is moving part of a function into a separate function.</p>",
        "id": 213415072,
        "sender_full_name": "bjorn3",
        "timestamp": 1602764240
    },
    {
        "content": "<p>In this case you would outline the non-generic part into a non-generic function and then possibly inline the generic part into the caller.</p>",
        "id": 213415113,
        "sender_full_name": "bjorn3",
        "timestamp": 1602764277
    },
    {
        "content": "<p>I don't think there is any tracking issue/write-up for this.</p>",
        "id": 213415177,
        "sender_full_name": "bjorn3",
        "timestamp": 1602764295
    },
    {
        "content": "<p>Ok, that does sound like basically what I'm suggesting. Maybe this can be the tracking issue <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 213415402,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602764415
    },
    {
        "content": "<p>What <span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> said seems right to me.</p>",
        "id": 213416269,
        "sender_full_name": "davidtwco",
        "timestamp": 1602764855
    },
    {
        "content": "<p>am I mistaken in thinking that while the specific transformation described wouldn't be handled by polymorphization, the <em>goals</em> of the transformation would be ? (less monomorphizations, less LLVM IR, less code in the instruction cache)</p>",
        "id": 213417722,
        "sender_full_name": "lqd",
        "timestamp": 1602765548
    },
    {
        "content": "<p>I think so, yeah</p>",
        "id": 213418537,
        "sender_full_name": "davidtwco",
        "timestamp": 1602765948
    },
    {
        "content": "<p>I played with this idea a while ago, but it seems hard to pull off and I'm not certain it would be enough of an improvement to be worth the complexity</p>",
        "id": 213422010,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1602767493
    },
    {
        "content": "<p>You'd have to compute a cut of the CFG so that all generics-dependent operations are on one side, and all independent ones on the other side</p>",
        "id": 213422177,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1602767550
    },
    {
        "content": "<p>and then you get N outline candidates from that cut and have to figure out which ones are worth pursuing</p>",
        "id": 213422295,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1602767612
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/Make.20majority.20of.20generic.20function.20body.20non-generic/near/213422010\">said</a>:</p>\n<blockquote>\n<p>I played with this idea a while ago, but it seems hard to pull off and I'm not certain it would be enough of an improvement to be worth the complexity</p>\n</blockquote>\n<p>there's a proc-macro that does this already, it could measure how much of an improvement this is: <a href=\"https://llogiq.github.io/2019/05/18/momo.html\">https://llogiq.github.io/2019/05/18/momo.html</a></p>",
        "id": 213422314,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602767621
    },
    {
        "content": "<p>That only handles trivial cases</p>",
        "id": 213422429,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1602767653
    },
    {
        "content": "<p>sure, the compiler could only do trivial cases to start</p>",
        "id": 213422463,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602767666
    },
    {
        "content": "<p>I'm not saying we need to do it <em>perfectly</em></p>",
        "id": 213422488,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602767674
    },
    {
        "content": "<p>Not saying it's not going to work :P</p>",
        "id": 213423264,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1602767940
    },
    {
        "content": "<p>But doing it well quickly seems to run into a complexity nightmare</p>",
        "id": 213423306,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1602767960
    },
    {
        "content": "<p>I see it sort of the same as mir-opts: they don't need to cover everything, small improvements will have large impacts</p>",
        "id": 213423494,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602768032
    },
    {
        "content": "<p>I expect that we'll also run into insufficient-inlining-problems if we do this</p>",
        "id": 213423986,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1602768211
    },
    {
        "content": "<p>IIRC SalSSA was effective at pursuing function merging opportunities among arbitrary candidate pairs and seemed to have interesting results, but since it was implemented within LLVM those interesting results were mostly on code size (with slightly worse compile times) and wouldn't help <em>our</em> compile times</p>",
        "id": 213424067,
        "sender_full_name": "lqd",
        "timestamp": 1602768234
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/Make.20majority.20of.20generic.20function.20body.20non-generic/near/213423986\">said</a>:</p>\n<blockquote>\n<p>I expect that we'll also run into insufficient-inlining-problems if we do this</p>\n</blockquote>\n<p>LLVM would be able to inline again, no? since this is happening before we pass it to the codegen backend</p>",
        "id": 213424253,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602768291
    },
    {
        "content": "<p>Yeah it would, but only if a) the outlined function is in the same CGU as the callers (which we should ensure) and b) its heuristic says yes</p>",
        "id": 213424934,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1602768501
    },
    {
        "content": "<p>that seems doable :)</p>",
        "id": 213424983,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602768517
    },
    {
        "content": "<p>easy for me to say I know :P</p>",
        "id": 213425011,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602768530
    },
    {
        "content": "<p>Even if runtime perf degrades, we could run it at opt-level=0 only (but that won't help rustc_middle)</p>",
        "id": 213425036,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1602768542
    },
    {
        "content": "<p>Even if we <em>only</em> handled the case where the generic parts of the function consist of <code>let thing = thing.trait_method()</code>, that seems like it'd be worthwhile.</p>",
        "id": 213482456,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602793451
    },
    {
        "content": "<p>That'd handle common cases like <code>AsRef</code>, for instance.</p>",
        "id": 213482470,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602793461
    },
    {
        "content": "<p>We wouldn't have to do reordering, initially. We could just see if the MIR that was <em>naturally</em> generated for the function has a natural cut-point after which there are no more live generics.</p>",
        "id": 213482816,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602793646
    }
]