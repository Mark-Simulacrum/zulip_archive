[
    {
        "content": "<p>This is very strange. <a href=\"https://github.com/rust-lang/rust/issues/77058\">https://github.com/rust-lang/rust/issues/77058</a></p>",
        "id": 210891410,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600790229
    },
    {
        "content": "<p>This is absolutely fantastic</p>",
        "id": 210892298,
        "sender_full_name": "lcnr",
        "timestamp": 1600790539
    },
    {
        "content": "<p>I just thought about this and have a guess about why this is happening</p>",
        "id": 210892733,
        "sender_full_name": "lcnr",
        "timestamp": 1600790728
    },
    {
        "content": "<p>removing the <code>Option&lt;DefId&gt;</code> means that <code>PredicateObligation</code> now only has a niche of size 1 (in <code>Predicate</code> instead of a niche of size 254 (edit: no 4 bytes + 254)</p>",
        "id": 210892877,
        "sender_full_name": "lcnr",
        "timestamp": 1600790785
    },
    {
        "content": "<blockquote>\n<p>This is very strange. </p>\n<p>This is absolutely fantastic</p>\n</blockquote>\n<p>I enjoy the juxtaposition</p>",
        "id": 210892921,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600790805
    },
    {
        "content": "<p>I think 'fantastic' as in 'it seems like fantasy' ;)</p>",
        "id": 210892961,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600790830
    },
    {
        "content": "<p>which might cause some enums using <code>PredicateObligation</code> to have worse codegen in patternmatching</p>",
        "id": 210892974,
        "sender_full_name": "lcnr",
        "timestamp": 1600790838
    },
    {
        "content": "<p>or there is a cutoff at 32 bytes which actually hurts performance</p>",
        "id": 210893423,
        "sender_full_name": "lcnr",
        "timestamp": 1600791012
    },
    {
        "content": "<p><code>Flavor::Fastcall</code> uses this to decide on if to use a register afaict</p>",
        "id": 210893464,
        "sender_full_name": "lcnr",
        "timestamp": 1600791031
    },
    {
        "content": "<p>maybe <code>pub enum ImplSource&lt;'tcx, N&gt; {</code></p>",
        "id": 210893793,
        "sender_full_name": "lcnr",
        "timestamp": 1600791167
    },
    {
        "content": "<blockquote>\n<p>I just thought about this and have a guess about why this is happening</p>\n</blockquote>\n<p>I don't think my first guess was correct, so probably it's \"or there is a cutoff at 32 bytes which actually hurts performance [in this case]\"</p>",
        "id": 210896559,
        "sender_full_name": "lcnr",
        "timestamp": 1600792358
    },
    {
        "content": "<p>Can you get profiling data to see where the cost goes?</p>",
        "id": 210955106,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600830149
    },
    {
        "content": "<p>Also, random question: does instruction count count <code>rep movs</code> or similar as one instruction or one per rep count?</p>",
        "id": 210955142,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600830206
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 210955146,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600830212
    },
    {
        "content": "<p>hilariously, one</p>",
        "id": 210955196,
        "sender_full_name": "eddyb",
        "timestamp": 1600830245
    },
    {
        "content": "<p>(I was testing <code>iret</code>s from pagefaults and at some point I was using some primitive that was turning into that kind of memset)</p>",
        "id": 210955211,
        "sender_full_name": "eddyb",
        "timestamp": 1600830277
    },
    {
        "content": "<p>to be fair, it is <em>the</em> <code>memset</code> instruction and it might as well send a special command to the DRAM to set entire rows to the bitpattern at ridiculous throughputs :P</p>",
        "id": 210955262,
        "sender_full_name": "eddyb",
        "timestamp": 1600830352
    },
    {
        "content": "<p>(but I doubt it actually does that)</p>",
        "id": 210955264,
        "sender_full_name": "eddyb",
        "timestamp": 1600830360
    },
    {
        "content": "<p>that should be a thing for zeroing, it'd be great</p>",
        "id": 210955316,
        "sender_full_name": "eddyb",
        "timestamp": 1600830388
    },
    {
        "content": "<p>anyway yeah it's a shame memory bandwidth is hard to measure, and for cache misses you have too many different counters to look at in terms of the cache hierarchy, but we should at least try (especially if we can get, like, 6 counters total or something, we only need 2 for counting instructions, the rest could be from the cache hierarchy)</p>",
        "id": 210955343,
        "sender_full_name": "eddyb",
        "timestamp": 1600830444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I'm wondering if it's possible that, when the size shrinks below a certain threshold, code generation switches from <code>rep movs</code> to \"move via fixed set of instructions/registers\", which might make the instruction count go up but the time go down.</p>",
        "id": 210958582,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600835610
    },
    {
        "content": "<p>Ah, but the issue says wall-clock goes up even more. Nevermind.</p>",
        "id": 210958593,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600835639
    },
    {
        "content": "<p>Yeah, we were <em>okay</em> with the 2-3% increase in instruction counts for unicode_normalization, since several other tests had &gt;1% decrease in instruction counts. But we didn't notice the 25% increase in wall time <span aria-label=\"cold sweat\" class=\"emoji emoji-1f630\" role=\"img\" title=\"cold sweat\">:cold_sweat:</span></p>",
        "id": 211024567,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600876999
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/Making.20ParamEnv.20smaller.20makes.20rustc.20slower.20instead.20of.20faster/near/210955264\">said</a>:</p>\n<blockquote>\n<p>(but I doubt it actually does that)</p>\n</blockquote>\n<p>intel does something similar afaik and does recommend this pattern for memset</p>",
        "id": 211078105,
        "sender_full_name": "nagisa",
        "timestamp": 1600907632
    },
    {
        "content": "<p>(at the very least IIRC it saturates the memory bus throughput)</p>",
        "id": 211078185,
        "sender_full_name": "nagisa",
        "timestamp": 1600907721
    }
]