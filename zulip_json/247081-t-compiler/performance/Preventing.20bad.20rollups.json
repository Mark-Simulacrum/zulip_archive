[
    {
        "content": "<p>Recently, <a href=\"https://github.com/rust-lang/rust/pull/95512\">https://github.com/rust-lang/rust/pull/95512</a> was merged through a rollup. This is despite the fact that it changes 101 files and adds new dependencies. Unsurprisingly, it resulted in performance regressions but because it was rolled up it's very hard to look at the change in isolation. We've talked before about heuristics about what can and cannot be rolled up. Perhaps we can start by deny listing anything that adds dependencies to the compiler. This seems like an obvious heuristic for when not to roll a PR up.</p>",
        "id": 278527937,
        "sender_full_name": "rylev",
        "timestamp": 1649669213
    },
    {
        "content": "<p>I can think of a few other good heuristics as well to disable roll-up by default. But also, difficulty of rolling back in isolation aside, I do think the amount of performance loss there is worth a roll back.</p>",
        "id": 278529774,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1649670277
    },
    {
        "content": "<p>Maybe we can just be a bit more careful with the rollups? :)<br>\nIf a pr already gets p=1 due to high bitrot chance and changes several thousand lines, just don't roll it up?  <br>\ncc <span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> do you check the prs in particular before adding them to a rollup or do you just tick a couple of boxes and launch the rollup ('cuz that could as well be automated).<br>\nIf there's something that looks risky by just touching a ton of different areas or having several thousand linechanges, it is usually better to just let it go through on its own.<br>\nIf there were prs that seemed risky I would usually just rollup=never them to eliminate the danger and make them jump up in the queue a bit.</p>",
        "id": 278531431,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1649671309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/Preventing.20bad.20rollups/near/278529774\">said</a>:</p>\n<blockquote>\n<p>But also, difficulty of rolling back in isolation aside, I do think the amount of performance loss there is worth a roll back.</p>\n</blockquote>\n<p>I created a <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/Reverting.20.2395512\">new topic</a> to discuss this.</p>",
        "id": 278531616,
        "sender_full_name": "rylev",
        "timestamp": 1649671414
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"217864\">matthiaskrgr</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/Preventing.20bad.20rollups/near/278531431\">said</a>:</p>\n<blockquote>\n<p>Maybe we can just be a bit more careful with the rollups? :)</p>\n</blockquote>\n<p>While I'm happy to have discussions on how we can all learn to be better at rollups, if we can automate something, we should.</p>",
        "id": 278531716,
        "sender_full_name": "rylev",
        "timestamp": 1649671452
    },
    {
        "content": "<p>we could probably automate rollup=always rollups in batches of X or something.<br>\nBUT when doing manual rollups, it can be nice to actually have a mix \"might fail\" and \"rollup=always\" because if the prs fails, it is usually easier to check 3 rollup=maybe prs for the failure than 7 or 10 <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 278532230,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1649671783
    },
    {
        "content": "<p>I do check the PRs as much as I can, not all depending on the situation</p>",
        "id": 278535732,
        "sender_full_name": "DPC",
        "timestamp": 1649674100
    },
    {
        "content": "<p>I wouldn't automate rollup=always pr since generally those prs are small and shouldn't get more priority than ones in the queue</p>",
        "id": 278536045,
        "sender_full_name": "DPC",
        "timestamp": 1649674352
    },
    {
        "content": "<p>FYI: talking in <a class=\"stream\" data-stream-id=\"242791\" href=\"/#narrow/stream/242791-t-infra\">#t-infra</a>  about ways to address this <a href=\"#narrow/stream/242791-t-infra/topic/Reactive.20rustbot\">here</a>.</p>",
        "id": 278664817,
        "sender_full_name": "rylev",
        "timestamp": 1649753739
    }
]