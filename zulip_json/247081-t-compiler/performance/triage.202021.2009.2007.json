[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I believe you're on triage duty this week correct? One thing you might not have seen is that we're now (since yesterday) automatically posting perf results to PRs after bors merges the PR. So for later PRs you won't need to ping the PR authors manually when they have a perf regression. We still need to figure out a good process for how we handle perf regressions, but at least we're at the point now where author and reviewer are notified when there is one.</p>",
        "id": 252314020,
        "sender_full_name": "rylev",
        "timestamp": 1631024925
    },
    {
        "content": "<p>I am indeed on triage duty this week</p>",
        "id": 252335102,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631033271
    },
    {
        "content": "<p>I just got back from vacation, so I’m playing catch up on many fronts, but I will be starting on this soon</p>",
        "id": 252335176,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631033293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> how many entries are normal for the “Probably changed” section? I’m seeing twenty</p>",
        "id": 252352381,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631040264
    },
    {
        "content": "<p>I think that's about what I saw</p>",
        "id": 252352453,
        "sender_full_name": "simulacrum",
        "timestamp": 1631040294
    },
    {
        "content": "<p>how many total entries (there should be a note at the top, I think?)</p>",
        "id": 252352473,
        "sender_full_name": "simulacrum",
        "timestamp": 1631040303
    },
    {
        "content": "<p>And you filed an issue for each one?</p>",
        "id": 252352479,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631040305
    },
    {
        "content": "<p>No, I think the intent is to only file if you think it <em>should</em> be \"definitely changed\"</p>",
        "id": 252352514,
        "sender_full_name": "simulacrum",
        "timestamp": 1631040323
    },
    {
        "content": "<p>i.e., if we missed a relevant change</p>",
        "id": 252352531,
        "sender_full_name": "simulacrum",
        "timestamp": 1631040331
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> \"57 comparisons made in total\"</p>",
        "id": 252352545,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631040336
    },
    {
        "content": "<p>yeah that sounds like the right number (i.e., you didn't use the wrong start or something)</p>",
        "id": 252352584,
        "sender_full_name": "simulacrum",
        "timestamp": 1631040351
    },
    {
        "content": "<p>Okay, I was reading the intent as being about improving the heuristics in <em>both</em> directions</p>",
        "id": 252352587,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631040354
    },
    {
        "content": "<p>(i.e. raising true positives and <em>reducing</em> false positives)</p>",
        "id": 252352666,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631040372
    },
    {
        "content": "<p>Yes we'd like to do both</p>",
        "id": 252352714,
        "sender_full_name": "rylev",
        "timestamp": 1631040393
    },
    {
        "content": "<p>I think we should focus on the ones that should be definitely changed</p>",
        "id": 252352759,
        "sender_full_name": "simulacrum",
        "timestamp": 1631040408
    },
    {
        "content": "<p>but filing twenty issues seems extreme</p>",
        "id": 252352760,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631040409
    },
    {
        "content": "<p>I don't see why you'd have to file twenty issues?</p>",
        "id": 252352796,
        "sender_full_name": "rylev",
        "timestamp": 1631040422
    },
    {
        "content": "<p>once we eliminate those, then the rest will be just false positives, and we can ignore the probably changed category (basically make it \"not changed\")</p>",
        "id": 252352806,
        "sender_full_name": "simulacrum",
        "timestamp": 1631040425
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224872\">rylev</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/triage.202021.2009.2007/near/252352796\">said</a>:</p>\n<blockquote>\n<p>I don't see why you'd have to file twenty issues?</p>\n</blockquote>\n<p>because each of these is presumably to be categorized as a true positive or a false positive</p>",
        "id": 252352865,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631040450
    },
    {
        "content": "<p>The goal is not to get rid completely of \"probably changed\"</p>",
        "id": 252352873,
        "sender_full_name": "rylev",
        "timestamp": 1631040453
    },
    {
        "content": "<p>so just file issues for true positivies, and also if I notice any false positive that seems like it has an obvious fix to the heuristics?</p>",
        "id": 252353016,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631040500
    },
    {
        "content": "<p>Yes</p>",
        "id": 252353029,
        "sender_full_name": "rylev",
        "timestamp": 1631040506
    },
    {
        "content": "<p>In general, we're still at a point where there are a handful of tests run results where we cannot be sure if the results are legit or not. Luckily we're pretty good now to where if we can't tell for sure the stakes are usually pretty low (i.e., the changes are at most 0.5% off the baseline).</p>",
        "id": 252355406,
        "sender_full_name": "rylev",
        "timestamp": 1631041303
    },
    {
        "content": "<p>I also was just idly wondering: I know we have already said we do not want to automatically do perf runs on every PR that is filed. But should we consider doing it automatically on “just” all <em>rollup</em> PRs (or as a policy, saying people should request one as a matter of protocol)?</p>",
        "id": 252355528,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631041333
    },
    {
        "content": "<p>Rollups should not be perf sensitive so it seems like maybe that's attacking the issue from the wrong side.</p>",
        "id": 252355640,
        "sender_full_name": "rylev",
        "timestamp": 1631041383
    },
    {
        "content": "<p>right now, as part of triage, I’m seeing several rollup PR’s that are flagged as “maybe regression”</p>",
        "id": 252355654,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631041388
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> they're flagged as \"maybe\" or \"probably\"</p>",
        "id": 252355766,
        "sender_full_name": "rylev",
        "timestamp": 1631041441
    },
    {
        "content": "<p>the bar for maybe is pretty low.</p>",
        "id": 252355826,
        "sender_full_name": "rylev",
        "timestamp": 1631041451
    },
    {
        "content": "<p>Oh, Probably</p>",
        "id": 252355833,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631041455
    },
    {
        "content": "<p>Perhaps our bar for probably is too low. Do they strike you as being potential legit perf issues?</p>",
        "id": 252355928,
        "sender_full_name": "rylev",
        "timestamp": 1631041495
    },
    {
        "content": "<p>(I only had 1 rollup last week labeled as probably so I don't think this is an issue happening regularly)</p>",
        "id": 252356019,
        "sender_full_name": "rylev",
        "timestamp": 1631041535
    },
    {
        "content": "<p>You can see here where things are labeled as \"probably relevant\": <a href=\"https://github.com/rust-lang/rustc-perf/blob/d7f85aa72b2c648233e8513f1af85e697e32e726/site/src/comparison.rs#L282-L283\">https://github.com/rust-lang/rustc-perf/blob/d7f85aa72b2c648233e8513f1af85e697e32e726/site/src/comparison.rs#L282-L283</a></p>",
        "id": 252356244,
        "sender_full_name": "rylev",
        "timestamp": 1631041600
    },
    {
        "content": "<p>I have five Rollups marked as Probably</p>",
        "id": 252356335,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631041640
    },
    {
        "content": "<p>I haven’t delved too deeply into all of them yet</p>",
        "id": 252356362,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631041654
    },
    {
        "content": "<p>I was debating about whether to add a comment to each with a link to the performance comparison page</p>",
        "id": 252356399,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631041670
    },
    {
        "content": "<p>(regardless of whether it was actually relevant or not. Just to have the metadata there, easy to follow. But I was concerned that people might misinterpret the comment.)</p>",
        "id": 252356500,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631041701
    },
    {
        "content": "<p>FWIW I didn't leave any comments on \"probably relevant\" changes last week because most of them seemed to not actually be relevant in a triage setting (where we're letting people know after their PR has already merged)</p>",
        "id": 252356648,
        "sender_full_name": "rylev",
        "timestamp": 1631041764
    },
    {
        "content": "<p>I've long wanted (and we can pretty easily do this) to make <a href=\"http://perf.rust-lang.org/compare.html?pr=434343\">perf.rust-lang.org/compare.html?pr=434343</a> to just work, so then the metadata leaving is less useful</p>",
        "id": 252356689,
        "sender_full_name": "simulacrum",
        "timestamp": 1631041783
    },
    {
        "content": "<p>/me looks at some of the rollups</p>",
        "id": 252357292,
        "sender_full_name": "rylev",
        "timestamp": 1631042023
    },
    {
        "content": "<p>This is an example of where I think we're being too eager to call something probably relevant: <a href=\"https://perf.rust-lang.org/compare.html?start=fe37929e4cba2c5c21e6805805769630c736bc3d&amp;end=76d18cfb8945f824c8777e04981e930d2037954e&amp;stat=instructions:u\">https://perf.rust-lang.org/compare.html?start=fe37929e4cba2c5c21e6805805769630c736bc3d&amp;end=76d18cfb8945f824c8777e04981e930d2037954e&amp;stat=instructions:u</a></p>",
        "id": 252357372,
        "sender_full_name": "rylev",
        "timestamp": 1631042045
    },
    {
        "content": "<p>Only one of the changes is not \"very small\" (defined as greater than or equal to 1.5% our significance threshold of 0.2%)</p>",
        "id": 252357472,
        "sender_full_name": "rylev",
        "timestamp": 1631042091
    },
    {
        "content": "<p>I've seen runs produce that amount of noise. It's still \"maybe relevant\" but I think it's a problem that we label that as \"probably relevant\"</p>",
        "id": 252357555,
        "sender_full_name": "rylev",
        "timestamp": 1631042132
    },
    {
        "content": "<p>On the other hand <a href=\"https://perf.rust-lang.org/compare.html?start=76d18cfb8945f824c8777e04981e930d2037954e&amp;end=0a84708edca7c275cb99ad080317fbc7637516d8&amp;stat=instructions:u\">https://perf.rust-lang.org/compare.html?start=76d18cfb8945f824c8777e04981e930d2037954e&amp;end=0a84708edca7c275cb99ad080317fbc7637516d8&amp;stat=instructions:u</a> looks much more likely to be relevant. It has changes that reach above 0.5%</p>",
        "id": 252357799,
        "sender_full_name": "rylev",
        "timestamp": 1631042253
    },
    {
        "content": "<p>This change <a href=\"https://perf.rust-lang.org/compare.html?start=0a84708edca7c275cb99ad080317fbc7637516d8&amp;end=29ef6cf1637aa8317f8911f93f14e18d404c1b0e&amp;stat=instructions:u\">here</a> seems like a bug that we should only be considering \"maybe relevant\"</p>",
        "id": 252358052,
        "sender_full_name": "rylev",
        "timestamp": 1631042372
    },
    {
        "content": "<p>I'd personally be in favor of bumping our definition of what constitutes \"probably relevant\" to be more strict</p>",
        "id": 252358361,
        "sender_full_name": "rylev",
        "timestamp": 1631042519
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224872\">rylev</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/triage.202021.2009.2007/near/252357472\">said</a>:</p>\n<blockquote>\n<p>Only one of the changes is not \"very small\" (defined as greater than or equal to 1.5% our significance threshold of 0.2%)</p>\n</blockquote>\n<p>sorry I didn’t understand how to parse this. 1.5% of 0.2% ?</p>",
        "id": 252358508,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631042568
    },
    {
        "content": "<p>Sorry (getting late here) 1.5 <em>times</em> of our significance threshold of 0.2%</p>",
        "id": 252358656,
        "sender_full_name": "rylev",
        "timestamp": 1631042637
    },
    {
        "content": "<p>AKA 0.3%</p>",
        "id": 252358706,
        "sender_full_name": "rylev",
        "timestamp": 1631042649
    },
    {
        "content": "<p>ah okay</p>",
        "id": 252358724,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631042660
    },
    {
        "content": "<p>Unfortunately these numbers are pretty arbitrary as we don't (yet) have a good way to establish statistical significance</p>",
        "id": 252358807,
        "sender_full_name": "rylev",
        "timestamp": 1631042701
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224872\">rylev</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/triage.202021.2009.2007/near/252357799\">said</a>:</p>\n<blockquote>\n<p>On the other hand <a href=\"https://perf.rust-lang.org/compare.html?start=76d18cfb8945f824c8777e04981e930d2037954e&amp;end=0a84708edca7c275cb99ad080317fbc7637516d8&amp;stat=instructions:u\">this</a> looks much more likely to be relevant. It has changes that reach above 0.5%</p>\n</blockquote>\n<p>Something interesting here: the summary produced by the performance triage script only says here: </p>\n<div class=\"codehilite\"><pre><span></span><code>Rollup of 10 pull requests [#88535](https://github.com/rust-lang/rust/issues/88535)\n- Small improvement in [instruction counts](https://perf.rust-lang.org/compare.html?start=76d18cfb8945f824c8777e04981e930d2037954e&amp;end=0a84708edca7c275cb99ad080317fbc7637516d8&amp;stat=instructions:u) (up to -0\\\n.4% on `incr-patched: dummy fn` builds of `unify-linearly`)\n- Small regression in [instruction counts](https://perf.rust-lang.org/compare.html?start=76d18cfb8945f824c8777e04981e930d2037954e&amp;end=0a84708edca7c275cb99ad080317fbc7637516d8&amp;stat=instructions:u) (up to 0.4\\\n% on `incr-unchanged` builds of `helloworld`)\n</code></pre></div>\n<p>while when I look at it manually, the max improvement is reported to be -0.57%, nowhere near -0.4%. Is there something going wonky with the rounding off to one significant figure there?</p>",
        "id": 252361223,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631043846
    },
    {
        "content": "<p>or some other reason its not picking up on the changes to webrender-doc and match-stress-exhaustive_patterns-doc ?</p>",
        "id": 252361312,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631043887
    },
    {
        "content": "<p>(perhaps we deliberately do not include the <code>-doc</code> benchmarks in our decisions re relevance?)</p>",
        "id": 252361701,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631044044
    },
    {
        "content": "<p>-doc benchmarks aren't currently considered for relevance, though perhaps they should be</p>",
        "id": 252361917,
        "sender_full_name": "simulacrum",
        "timestamp": 1631044131
    },
    {
        "content": "<p>(at least, I believe so)</p>",
        "id": 252361953,
        "sender_full_name": "simulacrum",
        "timestamp": 1631044147
    },
    {
        "content": "<p>okay. So I presumably should filter them out from my eyeball analysis too, at least for now. I cannot tell if <span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> was doing so in their analysis above. “Changes that reach above 0.5%” sounds like they were including *-doc  cases</p>",
        "id": 252362274,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631044303
    },
    {
        "content": "<p>That is correct that doc is being filtered out. I wanted to add an issue to remove that because I usually use it in my “eyeball” analysis</p>",
        "id": 252362735,
        "sender_full_name": "rylev",
        "timestamp": 1631044504
    },
    {
        "content": "<blockquote>\n<p>Rollups should not be perf sensitive so it seems like maybe that's attacking the issue from the wrong side.</p>\n</blockquote>\n<p>Hmm, I disagree - I think the purpose of rollups is to land PRs faster. We happen to need them to be perf-insensitive today because otherwise it's hard to track regressions, but I think if we had infinite CPU time there's no reason we couldn't rollup PRs affecting perf and benchmark them after the fact.</p>",
        "id": 252385444,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1631057172
    },
    {
        "content": "<p>And I agree -doc PRs should definitely not be filtered out, it's very common for things that don't impact the compiler to affect rustdoc and vice versa</p>",
        "id": 252385544,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1631057265
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/triage.202021.2009.2007/near/252385444\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Rollups should not be perf sensitive so it seems like maybe that's attacking the issue from the wrong side.</p>\n</blockquote>\n<p>Hmm, I disagree - I think the purpose of rollups is to land PRs faster. We happen to need them to be perf-insensitive today because otherwise it's hard to track regressions, but I think if we had infinite CPU time there's no reason we couldn't rollup PRs affecting perf and benchmark them after the fact.</p>\n</blockquote>\n<p>Are you suggesting that we could do this in a world where we would do perf runs for the individual commits that make up a rollup PR, i.e. at a finer grain than just the rollup PR as a whole?</p>",
        "id": 252388980,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631059961
    },
    {
        "content": "<p>because, sure, in that world we could ignore performance concerns during rollups, because we would be more likely to identify which commit in a rollup was the injection point (assuming that it wasn’t due to some interaction between multiple PRs in the rollup).</p>",
        "id": 252389051,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631060040
    },
    {
        "content": "<p>but I don’t see us trying to establish such functionality in the near term</p>",
        "id": 252389095,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631060052
    },
    {
        "content": "<p>Yes, that's what I'm suggesting. Hmm, this doesn't seem hard from a technical perspective, I would be more worried we don't have enough CPU time available</p>",
        "id": 252391251,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1631061997
    },
    {
        "content": "<p>Okay. Like <span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> last week, I am going to record here the list of entries that were first marked as “Probably Changed” that I have decided are not significant or at least not worth noting in the weekly triage report. In hindsight, I wish I had written down my reasoning as I went along on each one, but I don’t have that recorded now. (I only recorded my reasoning for the cases where I decided to mark them as significant and include them in the report.)</p>",
        "id": 252398785,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631069581
    },
    {
        "content": "<p>Rollup of 14 pull requests <a href=\"https://github.com/rust-lang/rust/issues/88527\">#88527</a></p>\n<ul>\n<li>Small regression in <a href=\"https://perf.rust-lang.org/compare.html?start=fe37929e4cba2c5c21e6805805769630c736bc3d&amp;end=76d18cfb8945f824c8777e04981e930d2037954e&amp;stat=instructions:u\">instruction counts</a> (up to 0.3% on <code>full</code> builds of <code>html5ever</code>)</li>\n</ul>\n<p>Rollup of 10 pull requests <a href=\"https://github.com/rust-lang/rust/issues/88535\">#88535</a></p>\n<ul>\n<li>Small improvement in <a href=\"https://perf.rust-lang.org/compare.html?start=76d18cfb8945f824c8777e04981e930d2037954e&amp;end=0a84708edca7c275cb99ad080317fbc7637516d8&amp;stat=instructions:u\">instruction counts</a> (up to -0.4% on <code>incr-patched: dummy fn</code> builds of <code>unify-linearly</code>)</li>\n<li>Small regression in <a href=\"https://perf.rust-lang.org/compare.html?start=76d18cfb8945f824c8777e04981e930d2037954e&amp;end=0a84708edca7c275cb99ad080317fbc7637516d8&amp;stat=instructions:u\">instruction counts</a> (up to 0.4% on <code>incr-unchanged</code> builds of <code>helloworld</code>)</li>\n</ul>\n<p>Fix loading large rlibs <a href=\"https://github.com/rust-lang/rust/issues/88506\">#88506</a></p>\n<ul>\n<li>Very small improvement in <a href=\"https://perf.rust-lang.org/compare.html?start=0a84708edca7c275cb99ad080317fbc7637516d8&amp;end=29ef6cf1637aa8317f8911f93f14e18d404c1b0e&amp;stat=instructions:u\">instruction counts</a> (up to -0.3% on <code>incr-patched: Job</code> builds of <code>regex</code>)</li>\n<li>Moderate regression in <a href=\"https://perf.rust-lang.org/compare.html?start=0a84708edca7c275cb99ad080317fbc7637516d8&amp;end=29ef6cf1637aa8317f8911f93f14e18d404c1b0e&amp;stat=instructions:u\">instruction counts</a> (up to 0.7% on <code>full</code> builds of <code>deeply-nested</code>)</li>\n</ul>\n<p>Rollup of 9 pull requests <a href=\"https://github.com/rust-lang/rust/issues/88556\">#88556</a></p>\n<ul>\n<li>Small improvement in <a href=\"https://perf.rust-lang.org/compare.html?start=608b5e1c209ffb4d6d0cf83817c823b12bbb7659&amp;end=3ed6c1d23fd40f4367259a531465e809eb00ec27&amp;stat=instructions:u\">instruction counts</a> (up to -0.5% on <code>full</code> builds of <code>deeply-nested</code>)</li>\n<li>\n<p>Small regression in <a href=\"https://perf.rust-lang.org/compare.html?start=608b5e1c209ffb4d6d0cf83817c823b12bbb7659&amp;end=3ed6c1d23fd40f4367259a531465e809eb00ec27&amp;stat=instructions:u\">instruction counts</a> (up to 0.4% on <code>incr-patched: dummy fn</code> builds of <code>unify-linearly</code>)<br>\nUpdate LLVM submodule <a href=\"https://github.com/rust-lang/rust/issues/88395\">#88395</a></p>\n</li>\n<li>\n<p>Small improvement in <a href=\"https://perf.rust-lang.org/compare.html?start=3ed6c1d23fd40f4367259a531465e809eb00ec27&amp;end=00ce1665c9f859813d4e9c5fdbf44d881e1fb64c&amp;stat=instructions:u\">instruction counts</a> (up to -0.4% on <code>incr-patched: Job</code> builds of <code>regex</code>)</p>\n</li>\n</ul>\n<p>Allow writing of incomplete UTF-8 sequences to the Windows console via stdout/stderr <a href=\"https://github.com/rust-lang/rust/issues/83342\">#83342</a></p>\n<ul>\n<li>Small improvement in <a href=\"https://perf.rust-lang.org/compare.html?start=e3c71f1e33b026dea7c9ca7c1c4554e63f56a0da&amp;end=cc9bb1522e357a4a11e7b0bfbbb7eddbd880a44f&amp;stat=instructions:u\">instruction counts</a> (up to -0.5% on <code>full</code> builds of <code>inflate</code>)</li>\n</ul>\n<p>Rollup of 12 pull requests <a href=\"https://github.com/rust-lang/rust/issues/88596\">#88596</a></p>\n<ul>\n<li>Small improvement in <a href=\"https://perf.rust-lang.org/compare.html?start=1cf8fdd4f0be26bcfa9e3b1e10d4bf80107ba492&amp;end=b834c4c1bad7521af47f38f44a4048be0a1fe2ee&amp;stat=instructions:u\">instruction counts</a> (up to -0.5% on <code>incr-patched: println</code> builds of <code>helloworld</code>)</li>\n<li>Small regression in <a href=\"https://perf.rust-lang.org/compare.html?start=1cf8fdd4f0be26bcfa9e3b1e10d4bf80107ba492&amp;end=b834c4c1bad7521af47f38f44a4048be0a1fe2ee&amp;stat=instructions:u\">instruction counts</a> (up to 0.5% on <code>full</code> builds of <code>inflate</code>)</li>\n</ul>\n<p>Path remapping: Make behavior of diagnostics output dependent on presence of --remap-path-prefix. <a href=\"https://github.com/rust-lang/rust/issues/88363\">#88363</a></p>\n<ul>\n<li>Small improvement in <a href=\"https://perf.rust-lang.org/compare.html?start=371f3cd3fe523d0b398ed1db1620667c53ba7d02&amp;end=97f2698484c2d668b2f356a6c2252e5f08472234&amp;stat=instructions:u\">instruction counts</a> (up to -0.3% on <code>incr-patched: println</code> builds of <code>regression-31157</code>)</li>\n<li>Small regression in <a href=\"https://perf.rust-lang.org/compare.html?start=371f3cd3fe523d0b398ed1db1620667c53ba7d02&amp;end=97f2698484c2d668b2f356a6c2252e5f08472234&amp;stat=instructions:u\">instruction counts</a> (up to 0.5% on <code>incr-unchanged</code> builds of <code>helloworld</code>)</li>\n</ul>\n<p>expand: Treat more macro calls as statement macro calls <a href=\"https://github.com/rust-lang/rust/issues/88428\">#88428</a></p>\n<ul>\n<li>Very small improvement in <a href=\"https://perf.rust-lang.org/compare.html?start=29d8fb746d3c7c0364f123e3efde90700b93aed3&amp;end=fbdff7fae941bce21fd3047f87777c84b866850e&amp;stat=instructions:u\">instruction counts</a> (up to -1.0% on <code>incr-patched: add static arr item</code> builds of <code>coercions</code>)</li>\n<li>\n<p>Very small regression in <a href=\"https://perf.rust-lang.org/compare.html?start=29d8fb746d3c7c0364f123e3efde90700b93aed3&amp;end=fbdff7fae941bce21fd3047f87777c84b866850e&amp;stat=instructions:u\">instruction counts</a> (up to 1.0% on <code>incr-full</code> builds of <code>coercions</code>)<br>\nRollup of 7 pull requests <a href=\"https://github.com/rust-lang/rust/issues/88618\">#88618</a></p>\n</li>\n<li>\n<p>Small regression in <a href=\"https://perf.rust-lang.org/compare.html?start=e4e417953920e198f4bc1421ce9e38fd8a85fbca&amp;end=c5799b2a73bd03d1d7b4a432fa0a0cb93e7288db&amp;stat=instructions:u\">instruction counts</a> (up to 0.3% on <code>incr-patched: println</code> builds of <code>helloworld</code>)</p>\n</li>\n</ul>\n<p>Fix drop handling for <code>if let</code> expressions <a href=\"https://github.com/rust-lang/rust/issues/88572\">#88572</a></p>\n<ul>\n<li>Small improvement in <a href=\"https://perf.rust-lang.org/compare.html?start=4878034c000a0404a4c83e77eddf493deab550d6&amp;end=b7404c898a1a6933b71c72428a6dce551bcc1be7&amp;stat=instructions:u\">instruction counts</a> (up to -0.3% on <code>incr-unchanged</code> builds of <code>webrender-wrench</code>)</li>\n<li>Moderate regression in <a href=\"https://perf.rust-lang.org/compare.html?start=4878034c000a0404a4c83e77eddf493deab550d6&amp;end=b7404c898a1a6933b71c72428a6dce551bcc1be7&amp;stat=instructions:u\">instruction counts</a> (up to 0.7% on <code>full</code> builds of <code>webrender-wrench</code>)</li>\n</ul>\n<p>Move add_rlib and add_native_library to cg_ssa <a href=\"https://github.com/rust-lang/rust/issues/88559\">#88559</a></p>\n<ul>\n<li>Small improvement in <a href=\"https://perf.rust-lang.org/compare.html?start=0961e688fda35a664b5869dcfe1295b00538c7ae&amp;end=d32dc80bb6dbe850b424d2cb60214bbbce8ddf01&amp;stat=instructions:u\">instruction counts</a> (up to -0.4% on <code>incr-patched: println</code> builds of <code>cargo</code>)</li>\n<li>Very small regression in <a href=\"https://perf.rust-lang.org/compare.html?start=0961e688fda35a664b5869dcfe1295b00538c7ae&amp;end=d32dc80bb6dbe850b424d2cb60214bbbce8ddf01&amp;stat=instructions:u\">instruction counts</a> (up to 0.2% on <code>incr-unchanged</code> builds of <code>helloworld</code>)</li>\n</ul>\n<p>Stop allocating vtable entries for non-object-safe methods <a href=\"https://github.com/rust-lang/rust/issues/88552\">#88552</a></p>\n<ul>\n<li>Small improvement in <a href=\"https://perf.rust-lang.org/compare.html?start=e2750baf53aaa60db95f10759f6cf9463dc5a6bd&amp;end=e30b68353fe22b00f40d021e7914eeb78473b3c1&amp;stat=instructions:u\">instruction counts</a> (up to -0.5% on <code>incr-unchanged</code> builds of <code>helloworld</code>)</li>\n<li>Very small regression in <a href=\"https://perf.rust-lang.org/compare.html?start=e2750baf53aaa60db95f10759f6cf9463dc5a6bd&amp;end=e30b68353fe22b00f40d021e7914eeb78473b3c1&amp;stat=instructions:u\">instruction counts</a> (up to 1.0% on <code>incr-patched: add static arr item</code> builds of <code>coercions</code>)</li>\n</ul>\n<p>Fix <a href=\"https://github.com/rust-lang/rust/issues/88256\">#88256</a> remove duplicated diagnostics <a href=\"https://github.com/rust-lang/rust/issues/88493\">#88493</a></p>\n<ul>\n<li>Small improvement in <a href=\"https://perf.rust-lang.org/compare.html?start=7849e3e9dda60e8ec826ee245c6b180e73911b37&amp;end=8f3aa5e8b9e176e8a5fff81a681eba1805366e3d&amp;stat=instructions:u\">instruction counts</a> (up to -0.4% on <code>incr-unchanged</code> builds of <code>helloworld</code>)</li>\n<li>Small regression in <a href=\"https://perf.rust-lang.org/compare.html?start=7849e3e9dda60e8ec826ee245c6b180e73911b37&amp;end=8f3aa5e8b9e176e8a5fff81a681eba1805366e3d&amp;stat=instructions:u\">instruction counts</a> (up to 0.3% on <code>full</code> builds of <code>regression-31157</code>)</li>\n</ul>\n<p>Change return type for T::{log,log2,log10} to u32. <a href=\"https://github.com/rust-lang/rust/issues/88665\">#88665</a></p>\n<ul>\n<li>Very small improvement in <a href=\"https://perf.rust-lang.org/compare.html?start=0e0ce8364c076171417626246f046018da83942a&amp;end=b2d9bcda7ec267dbabfaef67f7af344ef71e002c&amp;stat=instructions:u\">instruction counts</a> (up to -0.3% on <code>incr-unchanged</code> builds of <code>webrender-wrench</code>)</li>\n<li>Small regression in <a href=\"https://perf.rust-lang.org/compare.html?start=0e0ce8364c076171417626246f046018da83942a&amp;end=b2d9bcda7ec267dbabfaef67f7af344ef71e002c&amp;stat=instructions:u\">instruction counts</a> (up to 1.3% on <code>incr-patched: add static arr item</code> builds of <code>coercions</code>)</li>\n</ul>\n<p>Improve structured tuple struct suggestion <a href=\"https://github.com/rust-lang/rust/issues/88631\">#88631</a></p>\n<ul>\n<li>Very small improvement in <a href=\"https://perf.rust-lang.org/compare.html?start=b2d9bcda7ec267dbabfaef67f7af344ef71e002c&amp;end=d19d864e79531ad702e4f44b2635da6c50cc5eb0&amp;stat=instructions:u\">instruction counts</a> (up to -1.1% on <code>incr-patched: add static arr item</code> builds of <code>coercions</code>)</li>\n<li>Small regression in <a href=\"https://perf.rust-lang.org/compare.html?start=b2d9bcda7ec267dbabfaef67f7af344ef71e002c&amp;end=d19d864e79531ad702e4f44b2635da6c50cc5eb0&amp;stat=instructions:u\">instruction counts</a> (up to 0.3% on <code>incr-full</code> builds of <code>clap-rs</code>)</li>\n</ul>\n<p>Change scope of temporaries in match guards <a href=\"https://github.com/rust-lang/rust/issues/88678\">#88678</a></p>\n<ul>\n<li>Very small improvement in <a href=\"https://perf.rust-lang.org/compare.html?start=d19d864e79531ad702e4f44b2635da6c50cc5eb0&amp;end=1c858ba5bf7bd06c1a970efbf77053c8380b3151&amp;stat=instructions:u\">instruction counts</a> (up to -0.3% on <code>incr-full</code> builds of <code>clap-rs</code>)</li>\n</ul>\n<p>Mmap the incremental data instead of reading it. <a href=\"https://github.com/rust-lang/rust/issues/83214\">#83214</a></p>\n<ul>\n<li>Small regression in <a href=\"https://perf.rust-lang.org/compare.html?start=1698e3cac54aa8691d4e9e207567672af8231cb6&amp;end=11bbb5231349a0a144d86d5c0c21061a06d1969d&amp;stat=instructions:u\">instruction counts</a> (up to 0.4% on <code>full</code> builds of <code>html5ever</code>)</li>\n</ul>",
        "id": 252398866,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631069645
    },
    {
        "content": "<p>This was a much larger list of PRs than I had expected to have to manually review</p>",
        "id": 252398879,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631069674
    },
    {
        "content": "<p>and I think <span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> had a similar reaction last week</p>",
        "id": 252398886,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631069687
    },
    {
        "content": "<p>I’m hoping that the changes <span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> is talking about putting in will ease the burden on this front somewhat.</p>",
        "id": 252398906,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631069704
    },
    {
        "content": "<p>PR is up: <a href=\"https://github.com/rust-lang/rustc-perf/pull/995\">https://github.com/rust-lang/rustc-perf/pull/995</a></p>",
        "id": 252399362,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631070122
    },
    {
        "content": "<p>(and I merged the aforementioned PR. I don’t recall what our protocol here is, in terms of whether we wait a while or not. I saw the last two perf triage reports were also self-merged by the author, so I feel like I’m in good company here.)</p>",
        "id": 252399881,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631070646
    },
    {
        "content": "<p>TWIR PR is up: <a href=\"https://github.com/rust-lang/this-week-in-rust/pull/2394\">https://github.com/rust-lang/this-week-in-rust/pull/2394</a></p>",
        "id": 252399885,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631070651
    },
    {
        "content": "<p>For information, <a href=\"https://github.com/rust-lang/rust/issues/83214\">#83214</a>'s perf result is mostly a reduction of max-rss.</p>",
        "id": 252439943,
        "sender_full_name": "cjgillot",
        "timestamp": 1631098628
    },
    {
        "content": "<p>Oh that reminds me, do I need to add comments on the PR’s flagged as performance changes? I didn’t do so last night, let me look at it now.</p>",
        "id": 252474951,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631112946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/triage.202021.2009.2007/near/252474951\">said</a>:</p>\n<blockquote>\n<p>Oh that reminds me, do I need to add comments on the PR’s flagged as performance changes? I didn’t do so last night, let me look at it now.</p>\n</blockquote>\n<p>Yes though hopefully this is the last time we need to do this since they are now posted automatically.</p>",
        "id": 252475101,
        "sender_full_name": "rylev",
        "timestamp": 1631112985
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/88724#issuecomment-914695903\">Here's</a> an example in a very recent PR.</p>",
        "id": 252475453,
        "sender_full_name": "rylev",
        "timestamp": 1631113088
    },
    {
        "content": "<p>And we add comments on both (significant) improvements as well as regressions, right? I like to try to give people cause to celebrate. :)</p>",
        "id": 252476030,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631113251
    },
    {
        "content": "<p>I think we leave comments all the time</p>",
        "id": 252476219,
        "sender_full_name": "simulacrum",
        "timestamp": 1631113317
    },
    {
        "content": "<p>Thanks for confirming. There’s enough weeks between my triage cycles that I forget.</p>",
        "id": 252476481,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631113378
    },
    {
        "content": "<p>Slash I have little ones that wake us up from 3am to 5am. <span aria-label=\"sleeping\" class=\"emoji emoji-1f634\" role=\"img\" title=\"sleeping\">:sleeping:</span></p>",
        "id": 252476539,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631113396
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/triage.202021.2009.2007/near/252476219\">said</a>:</p>\n<blockquote>\n<p>I think we leave comments all the time</p>\n</blockquote>\n<p>correct</p>",
        "id": 252477457,
        "sender_full_name": "rylev",
        "timestamp": 1631113711
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/triage.202021.2009.2007/near/252385444\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Rollups should not be perf sensitive so it seems like maybe that's attacking the issue from the wrong side.</p>\n</blockquote>\n<p>Hmm, I disagree - I think the purpose of rollups is to land PRs faster. We happen to need them to be perf-insensitive today because otherwise it's hard to track regressions, but I think if we had infinite CPU time there's no reason we couldn't rollup PRs affecting perf and benchmark them after the fact.</p>\n</blockquote>\n<p>If we had infinite CPU time I don't think we'd need rollups in the first place.</p>",
        "id": 252503862,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1631123527
    },
    {
        "content": "<p>Well if the infinite CPU time is only available in the form of parallel runs, and assuming in this hypothetical world we continue to fail to infinitely-parallelize the bootstrap process, I can imagine still having rollups. (Namely, to reduce latency of the initial landing of features, and then filling in the performance results at a fine-grained level only after the fact…)</p>",
        "id": 252508537,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631125237
    },
    {
        "content": "<p>But it would be a heck of a lot harder to justify rollups in that world.</p>",
        "id": 252508814,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631125331
    },
    {
        "content": "<p>with enough CPU time you could stack multiple in-flight merge commits and test and bench each of them and just collapse the jenga tower if one of the lower ones fails. most of the time you'd still get several commits in</p>",
        "id": 252510210,
        "sender_full_name": "The 8472",
        "timestamp": 1631125832
    },
    {
        "content": "<p>and PR CI would also run for all platforms every time, making merge failures less likely</p>",
        "id": 252510498,
        "sender_full_name": "The 8472",
        "timestamp": 1631125955
    },
    {
        "content": "<p>that’s true, speculative execution remains an option</p>",
        "id": 252511196,
        "sender_full_name": "pnkfelix",
        "timestamp": 1631126265
    },
    {
        "content": "<p>That's something like what Google does for Chrome, I think.</p>",
        "id": 252513949,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1631127490
    },
    {
        "content": "<p>Commits go in in something like a roll-up, but they're tested in sequence, and I <em>think</em> anything that went in before a breaking commit still goes in, and it just stops on breakage.</p>",
        "id": 252514012,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1631127521
    },
    {
        "content": "<p>heh, this reminds me of a danluu blog post I read recently: <a href=\"https://danluu.com/essential-complexity/\">https://danluu.com/essential-complexity/</a></p>\n<blockquote>\n<p>Here we see one fatal flaw in the concept of accidental essential complexity providing an upper bound on productivity improvements: tasks with too much accidental complexity wouldn't have even been considered possible.</p>\n</blockquote>",
        "id": 252560831,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1631153504
    },
    {
        "content": "<p>my other favorite quote from that is</p>\n<blockquote>\n<p>Thinking that the tools you personally use are as good as it gets is an easy trap to fall into.</p>\n</blockquote>",
        "id": 252561042,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1631153652
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/triage.202021.2009.2007/near/252514012\">said</a>:</p>\n<blockquote>\n<p>Commits go in in something like a roll-up, but they're tested in sequence, and I <em>think</em> anything that went in before a breaking commit still goes in, and it just stops on breakage.</p>\n</blockquote>\n<p>e.g. a friend at work was telling me how Facebook has a fork of Phabricator that lets you merge <em>individual commits</em> in a PR if you think they look good, without having to merge the whole PR at once</p>",
        "id": 252561107,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1631153711
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span>, could you talk to github about that? <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 252561136,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1631153744
    }
]