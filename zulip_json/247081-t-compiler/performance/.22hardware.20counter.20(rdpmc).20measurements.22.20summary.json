[
    {
        "content": "<p>Could someone give a TLDR on what happens in that thread?<br>\nIt looks like something interesting, but there are thousands of messages spanned over weeks.<br>\nDoesn't perf <em>already</em> use hardware counters from perf monitor?</p>",
        "id": 211050795,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1600889040
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span>eddyb is adding the ability to read the hardware counters from the <code>-Zself-profile</code> feature so that instead of using deltas between <code>std::time::Instant</code> to calculate elapsed time for queries and other activities, we can use instruction counts. This should make it much easier to figure out where instruction count regressions are coming from in the detailed diff view for a perf.rlo run. </p>\n<p>A lot of the work over the past few weeks has been figuring out where variance between deterministic runs of the compiler have been coming from. The main contributors I recall were from ASLR causing pointers to be different which caused  <code>HashMap/HashSet</code> to put the same items in different buckets leading to differences in instruction counts and a nearly undocumented speculative execution feature on some AMD cpus. The work to fix that has lead to some patches upstream on the kernel (or maybe just a kernel module?). Co-incidentally that feature was also responsible for <code>rr</code> not working on those same CPUs so <code>rr</code> support for Ryzen has also come out of this.</p>",
        "id": 211057208,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1600892506
    },
    {
        "content": "<p>I'm sure I'm missing stuff but I think that's the gist of it.</p>",
        "id": 211057283,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1600892527
    },
    {
        "content": "<p>Thanks!<br>\n(I think I'm going to read the whole thread during weekend.)</p>",
        "id": 211058816,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1600893352
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> I'll do an write-up when I open the PRs for all of this work</p>",
        "id": 211082623,
        "sender_full_name": "eddyb",
        "timestamp": 1600912786
    },
    {
        "content": "<p>ASLR was easy to figure (once I realized the <code>rustup</code> wrapper was interacting poorly with <code>setarch x86_64 -R</code>)</p>",
        "id": 211082752,
        "sender_full_name": "eddyb",
        "timestamp": 1600912865
    },
    {
        "content": "<p>the hard to figure out stuff was:</p>\n<ul>\n<li>hardware interrupts (which you have to subtract because a kernel <code>iret</code> to userspace will count as an userspace instruction)</li>\n<li><code>SpecLockMap</code> (AMD's \"clever\" atomics-related speculation feature, which <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> mentioned)</li>\n</ul>",
        "id": 211082834,
        "sender_full_name": "eddyb",
        "timestamp": 1600912930
    },
    {
        "content": "<p>no upstream kernel patches yet, just <a href=\"https://github.com/mozilla/rr/wiki/Zen\">https://github.com/mozilla/rr/wiki/Zen</a></p>",
        "id": 211082843,
        "sender_full_name": "eddyb",
        "timestamp": 1600912945
    },
    {
        "content": "<p><code>SpecLockMap</code> affects <code>rr</code> in the same way it affects instruction-counting <code>-Z self-profile</code>, or even perf.rust-lang.org's <code>perf stat</code> results: every atomic instruction has a small chance of having to roll back the instructions after it, if speculation fails for some reason. this shows up a lot when interacting with a heap allocator because of the atomic bookkeeping (so in <code>rustc</code> it looked as if glibc's allocator was non-deterministic, for example)</p>",
        "id": 211082990,
        "sender_full_name": "eddyb",
        "timestamp": 1600913147
    },
    {
        "content": "<p>oh and for that there's a bit of a write-up here: <a href=\"https://github.com/mozilla/rr/issues/2034#issuecomment-691339758\">https://github.com/mozilla/rr/issues/2034#issuecomment-691339758</a></p>",
        "id": 211085384,
        "sender_full_name": "eddyb",
        "timestamp": 1600916227
    },
    {
        "content": "<p>... followed by over 100 GitHub comments, most of them just people passing test results back and forth</p>",
        "id": 211085393,
        "sender_full_name": "eddyb",
        "timestamp": 1600916264
    },
    {
        "content": "<p>(so yeah I have a lot of reasons to gather all the relevant pats together in a complete write-up - not to mention that the grant this is now part of will require something like that anyway)</p>",
        "id": 211085440,
        "sender_full_name": "eddyb",
        "timestamp": 1600916296
    }
]