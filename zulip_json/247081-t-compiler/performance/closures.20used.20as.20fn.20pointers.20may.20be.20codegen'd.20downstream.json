[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> oh dear god I think I found the problem. I was right about a cursed thing happening</p>",
        "id": 203704113,
        "sender_full_name": "eddyb",
        "timestamp": 1594640229
    },
    {
        "content": "<p>are all the fields directly written at installation time?</p>",
        "id": 203704387,
        "sender_full_name": "oli",
        "timestamp": 1594640446
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> nah it's not about any of the <code>Providers</code> value itself I don't think</p>",
        "id": 203704408,
        "sender_full_name": "eddyb",
        "timestamp": 1594640470
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <a href=\"https://github.com/rust-lang/rust/pull/74283#issuecomment-657510352\">https://github.com/rust-lang/rust/pull/74283#issuecomment-657510352</a></p>",
        "id": 203704423,
        "sender_full_name": "eddyb",
        "timestamp": 1594640496
    },
    {
        "content": "<p>I have a file with 0.76 million lines of LLVM IR</p>",
        "id": 203704480,
        "sender_full_name": "eddyb",
        "timestamp": 1594640525
    },
    {
        "content": "<p>and almost 15k <code>define</code>s</p>",
        "id": 203704484,
        "sender_full_name": "eddyb",
        "timestamp": 1594640533
    },
    {
        "content": "<p>uhm</p>",
        "id": 203704485,
        "sender_full_name": "oli",
        "timestamp": 1594640533
    },
    {
        "content": "<p>just from mentioning <code>DEFAULT_QUERY_PROVIDERS</code> at runtime</p>",
        "id": 203704514,
        "sender_full_name": "eddyb",
        "timestamp": 1594640546
    },
    {
        "content": "<p>ofc if you just extract one function pointer out, all of the other stuff not actually needed can optimize out, so in my tests I didn't actually realize what the unoptimized IR had in it</p>",
        "id": 203704539,
        "sender_full_name": "eddyb",
        "timestamp": 1594640589
    },
    {
        "content": "<p>so yeah something very cursed happens with <code>fn</code> pointers obtained through CTFE, sadly</p>",
        "id": 203704549,
        "sender_full_name": "eddyb",
        "timestamp": 1594640608
    },
    {
        "content": "<p>are you sure you're getting new copies in <code>rustc_interface</code> and the defines aren't just some weird way to specify functions from remote crates?</p>",
        "id": 203704556,
        "sender_full_name": "oli",
        "timestamp": 1594640630
    },
    {
        "content": "<p>those would be <code>declare</code>s</p>",
        "id": 203704562,
        "sender_full_name": "eddyb",
        "timestamp": 1594640639
    },
    {
        "content": "<p>ah</p>",
        "id": 203704564,
        "sender_full_name": "oli",
        "timestamp": 1594640641
    },
    {
        "content": "<p>15k <code>declare</code>s would be 15k of LLVM IR</p>",
        "id": 203704606,
        "sender_full_name": "eddyb",
        "timestamp": 1594640650
    },
    {
        "content": "<p>or maybe 30k to 45k, there might be comments or empty lines</p>",
        "id": 203704614,
        "sender_full_name": "eddyb",
        "timestamp": 1594640664
    },
    {
        "content": "<p>and I saw some, there's definitely code in there</p>",
        "id": 203704629,
        "sender_full_name": "eddyb",
        "timestamp": 1594640674
    },
    {
        "content": "<p>kk</p>",
        "id": 203704634,
        "sender_full_name": "oli",
        "timestamp": 1594640677
    },
    {
        "content": "<p>so maybe I screwed up collecting function pointers in consts?</p>",
        "id": 203704647,
        "sender_full_name": "oli",
        "timestamp": 1594640691
    },
    {
        "content": "<p>oh, yea I may not be visiting them in the \"do we need a local instance\" way</p>",
        "id": 203704689,
        "sender_full_name": "oli",
        "timestamp": 1594640740
    },
    {
        "content": "<p>lalalala</p>",
        "id": 203704694,
        "sender_full_name": "oli",
        "timestamp": 1594640749
    },
    {
        "content": "<p>/me totally knows what he's doing</p>",
        "id": 203704700,
        "sender_full_name": "oli",
        "timestamp": 1594640753
    },
    {
        "content": "<p>wondering if I can make this work with <code>lazy_static!</code> instead</p>",
        "id": 203704705,
        "sender_full_name": "eddyb",
        "timestamp": 1594640756
    },
    {
        "content": "<p>kinda sad but useful for comparison</p>",
        "id": 203704758,
        "sender_full_name": "eddyb",
        "timestamp": 1594640766
    },
    {
        "content": "<p>and useful for custom drivers just fine tbh (as long as they access a field)</p>",
        "id": 203704815,
        "sender_full_name": "eddyb",
        "timestamp": 1594640814
    },
    {
        "content": "<p>nope, looks alright: <a href=\"https://github.com/rust-lang/rust/blob/0c04344d86f9598f20d9ec86fe87ea2a5d6ff8e6/src/librustc_mir/monomorphize/collector.rs#L1203\">https://github.com/rust-lang/rust/blob/0c04344d86f9598f20d9ec86fe87ea2a5d6ff8e6/src/librustc_mir/monomorphize/collector.rs#L1203</a></p>",
        "id": 203704841,
        "sender_full_name": "oli",
        "timestamp": 1594640844
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>; &lt;rustc_middle::middle::resolve_lifetime::Set1&lt;T&gt; as rustc_serialize::serialize::Decodable&gt;::decode::{{closure}}\n</code></pre></div>",
        "id": 203704852,
        "sender_full_name": "eddyb",
        "timestamp": 1594640862
    },
    {
        "content": "<p>random example of a function I have in here :P</p>",
        "id": 203704859,
        "sender_full_name": "eddyb",
        "timestamp": 1594640871
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> it's possible these might be closures, i.e. <code>providers.foo = |tcx, id| {...};</code> :/</p>",
        "id": 203704938,
        "sender_full_name": "eddyb",
        "timestamp": 1594640928
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> okay looking at the declare, it looks like most of them are correct</p>",
        "id": 203705073,
        "sender_full_name": "eddyb",
        "timestamp": 1594641042
    },
    {
        "content": "<p>I'll confirm they're closures then we can see what we can do</p>",
        "id": 203705302,
        "sender_full_name": "eddyb",
        "timestamp": 1594641242
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> slowly realizing we always serialize all closures' MIR because I doubt there's anything preventing every single closure from looking like a generic function</p>",
        "id": 203705528,
        "sender_full_name": "eddyb",
        "timestamp": 1594641430
    },
    {
        "content": "<p>/me stares at <code>i64* align 8 dereferenceable(25640) %_2</code></p>",
        "id": 203705660,
        "sender_full_name": "eddyb",
        "timestamp": 1594641548
    },
    {
        "content": "<p>hmm... that may be a low hanging fruit to look into for speedups</p>",
        "id": 203705668,
        "sender_full_name": "oli",
        "timestamp": 1594641553
    },
    {
        "content": "<p>that's how big <code>TyCtxt</code> is?</p>",
        "id": 203705669,
        "sender_full_name": "eddyb",
        "timestamp": 1594641555
    },
    {
        "content": "<p>anyway if I make the <code>Providers::EMPTY</code> functions into closures, they do indeed get codegen'd (well, 25 of them, those are the extern-only queries I believe)</p>",
        "id": 203705694,
        "sender_full_name": "eddyb",
        "timestamp": 1594641595
    },
    {
        "content": "<p>sorry, I mean the closure serialization</p>",
        "id": 203705759,
        "sender_full_name": "oli",
        "timestamp": 1594641622
    },
    {
        "content": "<p>but yea, 25kb is... <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 203705769,
        "sender_full_name": "oli",
        "timestamp": 1594641641
    },
    {
        "content": "<p>that was a rhetorical question from my part, sorry</p>",
        "id": 203705777,
        "sender_full_name": "eddyb",
        "timestamp": 1594641650
    },
    {
        "content": "<p><a href=\"http://perf.rust-lang.org\">perf.rust-lang.org</a> measures stage2, right? so if I fix this <em>now</em>, we won't need to wait for beta?</p>",
        "id": 203705929,
        "sender_full_name": "eddyb",
        "timestamp": 1594641746
    },
    {
        "content": "<p>wow there's 42 matches for <code>providers\\.\\w+ = \\|</code></p>",
        "id": 203705993,
        "sender_full_name": "eddyb",
        "timestamp": 1594641799
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/inlining.2Fconstifying.20all.20.22fn.20provide.22/near/203705929\">said</a>:</p>\n<blockquote>\n<p><a href=\"http://perf.rust-lang.org\">perf.rust-lang.org</a> measures stage2, right? so if I fix this <em>now</em>, we won't need to wait for beta?</p>\n</blockquote>\n<p>yes</p>",
        "id": 203706094,
        "sender_full_name": "mati865",
        "timestamp": 1594641874
    },
    {
        "content": "<p>and 14 more that use the <code>field: |...| {...}</code> pattern</p>",
        "id": 203706111,
        "sender_full_name": "eddyb",
        "timestamp": 1594641893
    },
    {
        "content": "<p>so 56 queries are provided with closures</p>",
        "id": 203706154,
        "sender_full_name": "eddyb",
        "timestamp": 1594641931
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> okay so closures are not actually \"linkable\" unless <code>-Z share-generics</code> was enabled</p>",
        "id": 203707316,
        "sender_full_name": "eddyb",
        "timestamp": 1594642643
    },
    {
        "content": "<p>but, what if we made them non-generic?</p>",
        "id": 203707344,
        "sender_full_name": "oli",
        "timestamp": 1594642665
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I think they hit other snags</p>",
        "id": 203707417,
        "sender_full_name": "eddyb",
        "timestamp": 1594642691
    },
    {
        "content": "<p><span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 203707427,
        "sender_full_name": "oli",
        "timestamp": 1594642696
    },
    {
        "content": "<p>like, they're not linkable at all I don't think, without that flag, which makes all sorts of things... idk</p>",
        "id": 203707483,
        "sender_full_name": "eddyb",
        "timestamp": 1594642731
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> but we can try to fix <code>substs.non_erasable_generics()</code> kind of logic to ignore the \"<code>ClosureSubsts</code>\" part of the equation and see if that changes anything?</p>",
        "id": 203707517,
        "sender_full_name": "eddyb",
        "timestamp": 1594642763
    },
    {
        "content": "<p>there's 9 callsites for <code>non_erasable_generics</code></p>",
        "id": 203707566,
        "sender_full_name": "eddyb",
        "timestamp": 1594642795
    },
    {
        "content": "<p>anyway I think I need some sleep</p>",
        "id": 203707582,
        "sender_full_name": "eddyb",
        "timestamp": 1594642802
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> that thing that worries me is something about \"reachable\" but maybe we can just treat closures like private functions</p>",
        "id": 203707759,
        "sender_full_name": "eddyb",
        "timestamp": 1594642906
    },
    {
        "content": "<p>so maybe it is just this generics nonsense</p>",
        "id": 203707815,
        "sender_full_name": "eddyb",
        "timestamp": 1594642923
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> us: splitting <del>hairs</del> <code>memcpy</code>s<br>\nrustc: haha cross-crate closure monomorphizer goes brrrrrrrr</p>",
        "id": 203708952,
        "sender_full_name": "eddyb",
        "timestamp": 1594643688
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> okay I'm not going to sleep, I just had an idea... (what if we don't keep the <code>{Closure,Generator}Substs</code> extra stuff in the <code>Instance</code>? and limit it to <code>ty::{Closure,Generator}</code> instead?)</p>",
        "id": 203710194,
        "sender_full_name": "eddyb",
        "timestamp": 1594644485
    },
    {
        "content": "<p>it's not like anything in the body should refer to those \"\"\"type parameters\"\"\"</p>",
        "id": 203710282,
        "sender_full_name": "eddyb",
        "timestamp": 1594644545
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> it seems I can compile the standard library :)</p>",
        "id": 203716913,
        "sender_full_name": "eddyb",
        "timestamp": 1594648284
    },
    {
        "content": "<blockquote>\n<p>test result: FAILED. 10358 passed; 29 failed; 63 ignored; 0 measured; 0 filtered out</p>\n</blockquote>",
        "id": 203717790,
        "sender_full_name": "eddyb",
        "timestamp": 1594648731
    },
    {
        "content": "<p>(I suspect I broke generators)</p>",
        "id": 203717851,
        "sender_full_name": "eddyb",
        "timestamp": 1594648763
    },
    {
        "content": "<p>although there's something weird happening with some error messages, it's almost like a fixed a long-standing issue??</p>",
        "id": 203718007,
        "sender_full_name": "eddyb",
        "timestamp": 1594648829
    },
    {
        "content": "<p>oh, I removed some inference, let me add that back in</p>",
        "id": 203718100,
        "sender_full_name": "eddyb",
        "timestamp": 1594648875
    },
    {
        "content": "<p>nope, doesn't help :/</p>",
        "id": 203719126,
        "sender_full_name": "eddyb",
        "timestamp": 1594649417
    },
    {
        "content": "<p>made some lunch, back now</p>",
        "id": 203721017,
        "sender_full_name": "oli",
        "timestamp": 1594650276
    },
    {
        "content": "<p>O_o you threw out the substs?</p>",
        "id": 203721077,
        "sender_full_name": "oli",
        "timestamp": 1594650308
    },
    {
        "content": "<p>(and fell asleep, back at it now)</p>",
        "id": 203779169,
        "sender_full_name": "eddyb",
        "timestamp": 1594679250
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/inlining.2Fconstifying.20all.20.22fn.20provide.22/near/203779169\">said</a>:</p>\n<blockquote>\n<p>(and fell asleep, back at it now)</p>\n</blockquote>\n<p>You know what they say, night brings counsel <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 203780702,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1594680332
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> ugh it didn't actually make anything work, despite some closure instances definitely having empty substs now</p>",
        "id": 203781566,
        "sender_full_name": "eddyb",
        "timestamp": 1594681036
    },
    {
        "content": "<p>but maybe I can expose closures in <code>reachable_non_generics</code></p>",
        "id": 203781720,
        "sender_full_name": "eddyb",
        "timestamp": 1594681184
    },
    {
        "content": "<p>the \"reachable\" part worries me</p>",
        "id": 203781807,
        "sender_full_name": "eddyb",
        "timestamp": 1594681228
    },
    {
        "content": "<p>wat <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_passes/reachable.rs#L101-L103\">https://github.com/rust-lang/rust/blob/master/src/librustc_passes/reachable.rs#L101-L103</a></p>",
        "id": 203782075,
        "sender_full_name": "eddyb",
        "timestamp": 1594681444
    },
    {
        "content": "<p>I wonder who did that... <a href=\"https://github.com/rust-lang/rust/commit/da0a47a081a5beed3b2e638bd728fb0797f61561#diff-896d2c044f21cf78ca23be2b4b6a52a1R119-R121\">https://github.com/rust-lang/rust/commit/da0a47a081a5beed3b2e638bd728fb0797f61561#diff-896d2c044f21cf78ca23be2b4b6a52a1R119-R121</a></p>",
        "id": 203782249,
        "sender_full_name": "eddyb",
        "timestamp": 1594681591
    },
    {
        "content": "<p>lol</p>",
        "id": 203782399,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594681708
    },
    {
        "content": "<p>Does that do anything though?</p>",
        "id": 203782425,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594681726
    },
    {
        "content": "<p>(I actually understand why I did that, it's preserving behavior even when the behavior was pointless and wasteful AFAICT now)</p>",
        "id": 203782428,
        "sender_full_name": "eddyb",
        "timestamp": 1594681731
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> \"oh I'll just make all <code>fn provide</code> <code>#[inline]</code> so <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> can remove one <code>thread_local!</code>/<code>lazy_static!</code> in their PR\" is turning into \"closure monomorphization model is broken and I will fix it\" and now this just because I went with <code>const fn</code> instead of <code>#[inline]</code> (although I suspect now that <code>#[inline]</code> would have the same issue)</p>",
        "id": 203782561,
        "sender_full_name": "eddyb",
        "timestamp": 1594681861
    },
    {
        "content": "<p>Good times!</p>",
        "id": 203782593,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594681919
    },
    {
        "content": "<p>\"rabbit holes to visit while taking turns with <span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> doing <code>@bors retry</code> until it works\"</p>",
        "id": 203782683,
        "sender_full_name": "eddyb",
        "timestamp": 1594682000
    },
    {
        "content": "<p>Or as I like to call it, \"tuesday\"</p>",
        "id": 203782704,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594682035
    },
    {
        "content": "<p>huh, I didn't realize that building stage1 rustc was just a couple minutes, maybe something weird is happening:</p>\n<div class=\"codehilite\"><pre><span></span><code>    Finished release [optimized + debuginfo] target(s) in 2m 00s\n</code></pre></div>",
        "id": 203783013,
        "sender_full_name": "eddyb",
        "timestamp": 1594682321
    },
    {
        "content": "<p>maybe some of my stuff is stale and that contributes to the new behavior, time to nuke everything again</p>",
        "id": 203783072,
        "sender_full_name": "eddyb",
        "timestamp": 1594682375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> is it normal that some stale rlibs aren't removed from <code>stage1-rustc</code> anymore? I can get weird crashes due to the data not being valid for a newer <code>stage1/bin/rustc</code></p>",
        "id": 203783151,
        "sender_full_name": "eddyb",
        "timestamp": 1594682430
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    Finished release [optimized + debuginfo] target(s) in 6m 41s\n</code></pre></div>",
        "id": 203785448,
        "sender_full_name": "eddyb",
        "timestamp": 1594684616
    },
    {
        "content": "<p>yeah the 2m one is broken, I wonder what happened there</p>",
        "id": 203785465,
        "sender_full_name": "eddyb",
        "timestamp": 1594684625
    },
    {
        "content": "<p>anyway, I'm trying to figure out what to do. <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> doesn't need more than some <code>lazy_static!</code> with default providers but that wouldn't change startup performance or put any restrictions on anything</p>",
        "id": 203787082,
        "sender_full_name": "eddyb",
        "timestamp": 1594686112
    },
    {
        "content": "<p>I can change how queries are provided, introducing a macro which uses functions instead of closures, and see where that gets me</p>",
        "id": 203787141,
        "sender_full_name": "eddyb",
        "timestamp": 1594686166
    },
    {
        "content": "<p>personally I'm ok with the current lazy_static</p>",
        "id": 203787145,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594686179
    },
    {
        "content": "<p>so any performance things you do on top are just gravy ;)</p>",
        "id": 203787150,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594686188
    },
    {
        "content": "<p>I can change closures to be more like functions, or maybe special-case coercing a closure to a fn pointer?</p>",
        "id": 203787161,
        "sender_full_name": "eddyb",
        "timestamp": 1594686217
    },
    {
        "content": "<p>since that seems like the operation where you don't want to cause cross-crate codegen</p>",
        "id": 203787211,
        "sender_full_name": "eddyb",
        "timestamp": 1594686252
    },
    {
        "content": "<p>I guess I can look into what reachability does in that case and replicate it for closure coercion to fn ptr</p>",
        "id": 203787231,
        "sender_full_name": "eddyb",
        "timestamp": 1594686298
    },
    {
        "content": "<p>I can hack it in to see if it helps, and then make like 4 more PRs for the various bits and bobs</p>",
        "id": 203787303,
        "sender_full_name": "eddyb",
        "timestamp": 1594686368
    },
    {
        "content": "<p>I feel like reachability approximates some aspects of monomorphization collection, but it's also different?</p>",
        "id": 203787431,
        "sender_full_name": "eddyb",
        "timestamp": 1594686594
    },
    {
        "content": "<p>it's handling <em>both</em> things that will be codegen'd locally, and things that require downstream monomorphizations, so they need serialized MIR (but do we use reachability to determine whether we serialize MIR? I thought we did not)</p>",
        "id": 203787507,
        "sender_full_name": "eddyb",
        "timestamp": 1594686684
    },
    {
        "content": "<p>oh <em>come on</em>, <code>InstanceDef::requires_inline</code> always returns <code>true</code> for closures</p>",
        "id": 203791978,
        "sender_full_name": "eddyb",
        "timestamp": 1594691859
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> ... success? I did something. I made a linker error</p>",
        "id": 203792199,
        "sender_full_name": "eddyb",
        "timestamp": 1594692180
    },
    {
        "content": "<p>presumably broke some assumptions and generated either duplicate instances of closures or they have the wrong export levels</p>",
        "id": 203792264,
        "sender_full_name": "eddyb",
        "timestamp": 1594692283
    },
    {
        "content": "<p>limiting it to monomorphic closures, at least the number of failures drops down</p>",
        "id": 203792426,
        "sender_full_name": "eddyb",
        "timestamp": 1594692582
    },
    {
        "content": "<p>heh it looks like <code>InstantiationMode::GloballyShared { may_conflict: false }</code> is responsible</p>",
        "id": 203793371,
        "sender_full_name": "eddyb",
        "timestamp": 1594693919
    },
    {
        "content": "<p>okay, I see, I couldn't actually use upstream closures <em>unless</em> they were compiled to allow it</p>",
        "id": 203793522,
        "sender_full_name": "eddyb",
        "timestamp": 1594694080
    },
    {
        "content": "<p>simplest thing I can do is set <code>may_conflict</code> to <code>true</code> and hope that, uhh, does something</p>",
        "id": 203793629,
        "sender_full_name": "eddyb",
        "timestamp": 1594694204
    },
    {
        "content": "<p>haha yeah that gets rid of the linker errors</p>",
        "id": 203793754,
        "sender_full_name": "eddyb",
        "timestamp": 1594694380
    },
    {
        "content": "<p>I wonder how expensive it would be to say that \"reachable\" closures behave like regular functions. and my definition of \"reachable\" is limited to closures which are coerced to a <code>fn</code> pointer</p>",
        "id": 203793923,
        "sender_full_name": "eddyb",
        "timestamp": 1594694585
    },
    {
        "content": "<p>4 more tests fail with my current approach, nice</p>",
        "id": 203793943,
        "sender_full_name": "eddyb",
        "timestamp": 1594694636
    },
    {
        "content": "<p>you know what, I'll fork the topic</p>",
        "id": 203793991,
        "sender_full_name": "eddyb",
        "timestamp": 1594694671
    },
    {
        "content": "<p>so yeah, current status:</p>\n<ul>\n<li><code>ty::Closure</code> keeps base substs + extra synthetics, <code>Instance</code> for closures <em>does not</em></li>\n<li><code>reachable</code> pass treats closure-&gt;<code>fn</code> ptr coercions as \"using\" the closure, in the same way naming a function \"uses\" it</li>\n<li><code>InstanceDef::generates_cgu_internal_copy</code> no longer always returns <code>true</code> for closures<ul>\n<li>this is the only part of all of this that can ruin performance in non-<code>fn</code>-ptr cases, so we probably want to gate it on the <code>reachable</code> thing</li>\n</ul>\n</li>\n</ul>",
        "id": 203794219,
        "sender_full_name": "eddyb",
        "timestamp": 1594695076
    },
    {
        "content": "<p>who's familiar with the intricacies of what we monomorphize and in which conditions? cc <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> I guess</p>",
        "id": 203794681,
        "sender_full_name": "eddyb",
        "timestamp": 1594695788
    },
    {
        "content": "<p>wdym in which conditions? The collector will go through the items in a crate and monomorphize everything as things become concrete.</p>",
        "id": 203794700,
        "sender_full_name": "nagisa",
        "timestamp": 1594695835
    },
    {
        "content": "<p>ah heh I can't link <code>stage2/bin/rustc</code></p>",
        "id": 203794701,
        "sender_full_name": "eddyb",
        "timestamp": 1594695840
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> I mean the weirder stuff like export levels</p>",
        "id": 203794741,
        "sender_full_name": "eddyb",
        "timestamp": 1594695849
    },
    {
        "content": "<p>oh /me shrugs, the implementation of the collector is the source of truth, sadly.</p>",
        "id": 203794751,
        "sender_full_name": "nagisa",
        "timestamp": 1594695876
    },
    {
        "content": "<p>okay so instead of duplicates, I now I get closures not being found, so I'm still not causing them to be properly exported or something</p>",
        "id": 203794753,
        "sender_full_name": "eddyb",
        "timestamp": 1594695884
    },
    {
        "content": "<p>I don’t actually know where the symbol visibility is decided, though.</p>",
        "id": 203794771,
        "sender_full_name": "nagisa",
        "timestamp": 1594695937
    },
    {
        "content": "<p>I feel like somewhere inside codegen_llvm but maybe not.</p>",
        "id": 203794774,
        "sender_full_name": "nagisa",
        "timestamp": 1594695948
    },
    {
        "content": "<p>okay back to it, thinking of trying <code>is_reachable_non_generic</code>, although I suspect recent successes were because of non-interesting cross-crate behavior</p>",
        "id": 203799807,
        "sender_full_name": "eddyb",
        "timestamp": 1594704120
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> so I don't think removing the closure/generator synthetics from <code>Instance</code> actually has a practical effect, so I can open a PR with that at least without worrying</p>",
        "id": 203800336,
        "sender_full_name": "eddyb",
        "timestamp": 1594704923
    },
    {
        "content": "<p>the reachability-based stuff looks like a huge hack and I still don't have it working, but I might still open a PR for it</p>",
        "id": 203800346,
        "sender_full_name": "eddyb",
        "timestamp": 1594704948
    },
    {
        "content": "<p>oh, right, what's broken now is <code>-&gt; impl Iterator</code> because that one also marks closures as reachable</p>",
        "id": 203800978,
        "sender_full_name": "eddyb",
        "timestamp": 1594705955
    },
    {
        "content": "<p>so I can't abuse reachability for that, fun</p>",
        "id": 203800983,
        "sender_full_name": "eddyb",
        "timestamp": 1594705965
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I think the solution might just be to make a <code>provide!</code> macro that uses functions instead (like <code>rustc_metadata</code> does it, but more general), since we can do that without requiring the user to write the types for the arguments/return (as they are available globally based on the query name)</p>",
        "id": 203801122,
        "sender_full_name": "eddyb",
        "timestamp": 1594706213
    },
    {
        "content": "<p>it's not worth it to mess with the closure codegen and cause who knows what, even if limited to closures reified to <code>fn</code> pointers</p>",
        "id": 203801191,
        "sender_full_name": "eddyb",
        "timestamp": 1594706314
    },
    {
        "content": "<p>and in most cases the devirtualization through <code>fn</code> pointers in CTFE is cool</p>",
        "id": 203801193,
        "sender_full_name": "eddyb",
        "timestamp": 1594706328
    },
    {
        "content": "<p>so <em>shrug</em></p>",
        "id": 203801195,
        "sender_full_name": "eddyb",
        "timestamp": 1594706337
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> so yeah I give up lol <a href=\"https://github.com/rust-lang/rust/pull/74283\">https://github.com/rust-lang/rust/pull/74283</a></p>",
        "id": 203801585,
        "sender_full_name": "eddyb",
        "timestamp": 1594706944
    },
    {
        "content": "<p>I think I know how to make it work but I'd need to add a query or change <code>reachable_set</code> to return two things, and it's just not worth it</p>",
        "id": 203801598,
        "sender_full_name": "eddyb",
        "timestamp": 1594706978
    },
    {
        "content": "<p>I'm also terrified of what bugs might arise (other than the ones that I'm tripping over locally lol) when changing some of these things</p>",
        "id": 203801661,
        "sender_full_name": "eddyb",
        "timestamp": 1594707038
    },
    {
        "content": "<p>that was a rollercoaster to read</p>",
        "id": 203808177,
        "sender_full_name": "oli",
        "timestamp": 1594714073
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> remember the 29 failures? that I never bothered fixing? I think they were just because of what I changed about <code>type_of</code> for closures/generators and \"abort if errors\" checkpoints in the compiler</p>",
        "id": 203875241,
        "sender_full_name": "eddyb",
        "timestamp": 1594754377
    },
    {
        "content": "<p>about to find out if removing that one.... yeah it fixes it lol</p>",
        "id": 203875264,
        "sender_full_name": "eddyb",
        "timestamp": 1594754394
    },
    {
        "content": "<p>anyway that goes into <a href=\"https://github.com/rust-lang/rust/pull/74341\">https://github.com/rust-lang/rust/pull/74341</a></p>",
        "id": 203876740,
        "sender_full_name": "eddyb",
        "timestamp": 1594755125
    }
]