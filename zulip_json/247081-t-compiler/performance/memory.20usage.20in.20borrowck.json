[
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span>, <code>Body</code> is really expensive to clone, right? I see it happening a lot in <a href=\"https://github.com/rust-lang/rust/blob/7d3818152d8ab5649d2e5cc6d7851ed7c03055fe/compiler/rustc_mir/src/borrow_check/mod.rs#L191\">https://github.com/rust-lang/rust/blob/7d3818152d8ab5649d2e5cc6d7851ed7c03055fe/compiler/rustc_mir/src/borrow_check/mod.rs#L191</a>. Is there a way to avoid that?</p>\n<p>context: <a href=\"https://github.com/rust-lang/rust/issues/81124\">https://github.com/rust-lang/rust/issues/81124</a></p>",
        "id": 223052916,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610903180
    },
    {
        "content": "<blockquote>\n<p>I see it happening a lot </p>\n</blockquote>\n<p>once per query call? or am i missing something here</p>",
        "id": 223053007,
        "sender_full_name": "lcnr",
        "timestamp": 1610903323
    },
    {
        "content": "<p>once per function body I think</p>",
        "id": 223053012,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610903336
    },
    {
        "content": "<p>yeah</p>",
        "id": 223053018,
        "sender_full_name": "lcnr",
        "timestamp": 1610903341
    },
    {
        "content": "<p>exactly</p>",
        "id": 223053022,
        "sender_full_name": "lcnr",
        "timestamp": 1610903346
    },
    {
        "content": "<p>which seems like a lot, that's double the memory, right?</p>",
        "id": 223053026,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610903356
    },
    {
        "content": "<p>(I'm trying to hack things with <code>steal()</code> rn but I doubt they'll work)</p>",
        "id": 223053077,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610903419
    },
    {
        "content": "<p>steal won't work</p>",
        "id": 223053081,
        "sender_full_name": "lcnr",
        "timestamp": 1610903433
    },
    {
        "content": "<p>at least i don't see how it should</p>",
        "id": 223053084,
        "sender_full_name": "lcnr",
        "timestamp": 1610903440
    },
    {
        "content": "<p>well, this might be on the wrong track anyway, -Z time-passes shows the memory being held all the way through linking and I think the clone should be dropped after borrow checking finishes</p>",
        "id": 223053143,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610903535
    },
    {
        "content": "<p>is there a way to see what uses so much memory?</p>",
        "id": 223053148,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610903547
    },
    {
        "content": "<p>we could probably avoid cloning the mir body here but it would be difficult i think</p>",
        "id": 223053157,
        "sender_full_name": "lcnr",
        "timestamp": 1610903576
    },
    {
        "content": "<p>maybe it's because we create a lot of new types there?</p>",
        "id": 223053168,
        "sender_full_name": "lcnr",
        "timestamp": 1610903595
    },
    {
        "content": "<p>i don't know too much about profiling the compiler</p>",
        "id": 223053182,
        "sender_full_name": "lcnr",
        "timestamp": 1610903640
    },
    {
        "content": "<p>so i can't help you much here</p>",
        "id": 223053219,
        "sender_full_name": "lcnr",
        "timestamp": 1610903645
    },
    {
        "content": "<p>I'll try heaptrack maybe</p>",
        "id": 223053224,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610903658
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/memory.20usage.20in.20borrowck/near/223053081\">said</a>:</p>\n<blockquote>\n<p>steal won't work</p>\n</blockquote>\n<p>indeed you are correct</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;rustc&#39; panicked at &#39;attempt to read from stolen value&#39;, /home/joshua/rustc/compiler/rustc_data_structures/src/steal.rs:43:15\n</code></pre></div>",
        "id": 223053320,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610903822
    },
    {
        "content": "<p>I'll go add track_caller to that</p>",
        "id": 223053328,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610903831
    },
    {
        "content": "<p>I think I've seen ConstProp to also clone the MIR body, but only part of it. Maybe borrowck could go that way if it doesn't need <em>everything</em>?</p>",
        "id": 223053419,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1610903991
    },
    {
        "content": "<p>heaptrack is hanging so I don't have better numbers unfortunately :(</p>",
        "id": 223053692,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610904366
    },
    {
        "content": "<p>opened <a href=\"https://github.com/rust-lang/rust/pull/81125/\">https://github.com/rust-lang/rust/pull/81125/</a></p>",
        "id": 223053773,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610904507
    },
    {
        "content": "<p>ugh this was working last release</p>",
        "id": 223053927,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610904761
    },
    {
        "content": "<p>I don't know what changed</p>",
        "id": 223053930,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610904765
    },
    {
        "content": "<p>I tried installing the latest version of heaptrack without success</p>",
        "id": 223054594,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610905782
    },
    {
        "content": "<p>why is all software buggy <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span></p>",
        "id": 223054600,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610905787
    },
    {
        "content": "<p>opened <a href=\"https://bugs.kde.org/show_bug.cgi?id=431746\">https://bugs.kde.org/show_bug.cgi?id=431746</a></p>",
        "id": 223055067,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610906435
    },
    {
        "content": "<p>I wonder if we could use jemalloc's profiler?</p>",
        "id": 223056063,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1610907878
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/memory.20usage.20in.20borrowck/near/223053026\">said</a>:</p>\n<blockquote>\n<p>which seems like a lot, that's double the memory, right?</p>\n</blockquote>\n<p>The second copy shouldn't be retained, at least. It's local to the MIR borrow-checker.</p>",
        "id": 223056673,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610908917
    },
    {
        "content": "<p>It does show up in profiles, though, which is why I've briefly looked into that</p>",
        "id": 223056726,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610908968
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"334260\">Dániel Buga</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/memory.20usage.20in.20borrowck/near/223056063\">said</a>:</p>\n<blockquote>\n<p>I wonder if we could use jemalloc's profiler?</p>\n</blockquote>\n<p>do you know how to do that?</p>",
        "id": 223057953,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610910599
    },
    {
        "content": "<p>found why I thought heaptrack used to work: <a href=\"https://bugs.kde.org/show_bug.cgi?id=431746#c3\">https://bugs.kde.org/show_bug.cgi?id=431746#c3</a></p>",
        "id": 223058025,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610910655
    },
    {
        "content": "<p>The compiler needs to be recompiled agains jemalloct, with jemalloc-sys's profile feature enabled, and then it <em>should</em> be as simple as writing an env var... but I never tried, it's just what I gathered from the webz</p>",
        "id": 223058098,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1610910747
    },
    {
        "content": "<p>oh nice, <code>jemalloc</code> is an option in config.toml</p>",
        "id": 223058109,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610910783
    },
    {
        "content": "<p>yup, I think it's there anyway, because the compiler reacts to the env vars it just doesn't recognize them as valid</p>",
        "id": 223058118,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1610910817
    },
    {
        "content": "<p>(these: <a href=\"https://github.com/jemalloc/jemalloc/wiki/Use-Case%3A-Heap-Profiling\">https://github.com/jemalloc/jemalloc/wiki/Use-Case%3A-Heap-Profiling</a>)</p>",
        "id": 223058121,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1610910834
    },
    {
        "content": "<p>I tried the wiki but it broke:</p>\n<div class=\"codehilite\"><pre><span></span><code>&gt; MALLOC_CONF=prof_leak:true,lg_prof_sample:0,prof_final:true /home/joshua/.local/lib/rustup/toolchains/stage1/bin/rustc --version\n&lt;jemalloc&gt;: Invalid conf pair: prof_leak:true\n&lt;jemalloc&gt;: Invalid conf pair: lg_prof_sample:0\n&lt;jemalloc&gt;: Invalid conf pair: prof_final:true\n</code></pre></div>",
        "id": 223059419,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610912562
    },
    {
        "content": "<p>Did you enable the profile feature for jemalloc-sys? it's not on by default</p>",
        "id": 223059491,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1610912648
    },
    {
        "content": "<p>I think it's in rustc's Cargo.toml</p>",
        "id": 223059500,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1610912676
    },
    {
        "content": "<p>oh hmm I did not</p>",
        "id": 223059509,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610912694
    },
    {
        "content": "<p>I do not see a 'profile' feature</p>",
        "id": 223059517,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610912709
    },
    {
        "content": "<p>do you mean jemalloc in general? I did enable that</p>",
        "id": 223059523,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610912716
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">- jemalloc = ['jemalloc-sys']</span>\n<span class=\"gi\">+ jemalloc = ['jemalloc-sys/profiling']</span>\n</code></pre></div>",
        "id": 223059545,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1610912745
    },
    {
        "content": "<p>oh I see it's not in cargo.toml at all</p>",
        "id": 223059587,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610912765
    },
    {
        "content": "<p>that's silly</p>",
        "id": 223059590,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610912767
    },
    {
        "content": "<p><del>https://github.com/gnzlbg/jemallocator/blob/master/Cargo.toml#L49</del> <a href=\"https://github.com/gnzlbg/jemallocator/blob/master/jemalloc-sys/Cargo.toml#L42\">https://github.com/gnzlbg/jemallocator/blob/master/jemalloc-sys/Cargo.toml#L42</a> sorry it's profiling</p>",
        "id": 223059598,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1610912786
    },
    {
        "content": "<p>ayyy that did it, thanks :)</p>",
        "id": 223059677,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610912893
    },
    {
        "content": "<p>oh lol I did leak checking, not heap profiling</p>",
        "id": 223059989,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610913356
    },
    {
        "content": "<p>found leaks in LLVM</p>",
        "id": 223059994,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610913361
    },
    {
        "content": "<p>... it looks like <code> MALLOC_CONF=prof:true,prof_prefix:jeprof.out,prof_final:true </code> didn't actually generate a file?</p>",
        "id": 223060124,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610913544
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>&gt;  MALLOC_CONF=lg_prof_interval:1024,prof_prefix:jeprof.out,prof_final:true rustc\n&lt;jemalloc&gt;: Out-of-range conf value: lg_prof_interval:1024\n</code></pre></div>",
        "id": 223060203,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610913696
    },
    {
        "content": "<p>damn it people I just want to generate a heap profile</p>",
        "id": 223060217,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610913711
    },
    {
        "content": "<p>gotta love feature flags... I'm not sure about the output file</p>",
        "id": 223060270,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1610913766
    },
    {
        "content": "<p>well <code> MALLOC_CONF=prof_leak:true,lg_prof_sample:0,prof_final:true </code> did actually work so I'm confused why profiling doesn't</p>",
        "id": 223060293,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610913795
    },
    {
        "content": "<p>oh hold on, the interval is log base 2, it was trying to record the heap every 2^1024 bytes lol</p>",
        "id": 223060456,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610913998
    },
    {
        "content": "<p>nope, still not generating a file</p>",
        "id": 223060555,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610914138
    },
    {
        "content": "<p>well anyway, I've spent enough time on this</p>",
        "id": 223060654,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610914266
    },
    {
        "content": "<blockquote>\n<p>It looks like the high memory usage is being driven by the MIR for the TRANSITIONS static: <a href=\"https://github.com/wez/wezterm/blob/fa4bbbd077837d4eafe26805079f95a51054c4d7/vtparse/src/transitions.rs#L300-L315\">https://github.com/wez/wezterm/blob/fa4bbbd077837d4eafe26805079f95a51054c4d7/vtparse/src/transitions.rs#L300-L315</a></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> how did you find that out?</p>",
        "id": 223061222,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610915109
    },
    {
        "content": "<p>I first ran the compiler under massif</p>",
        "id": 223061228,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610915129
    },
    {
        "content": "<p>massif, ok</p>",
        "id": 223061233,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610915136
    },
    {
        "content": "<p>everything else I tried has been buggy</p>",
        "id": 223061235,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610915140
    },
    {
        "content": "<p>confusingly, that changed the <code>rss</code> values printed out by the compiler</p>",
        "id": 223061238,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610915142
    },
    {
        "content": "<p>yeah, heaptrack hung with zero cpu usage at the end of compilation</p>",
        "id": 223061252,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610915153
    },
    {
        "content": "<p>yup, I reported that bug: <a href=\"https://bugs.kde.org/show_bug.cgi?id=431746\">https://bugs.kde.org/show_bug.cgi?id=431746</a></p>",
        "id": 223061298,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610915173
    },
    {
        "content": "<p>anyway, that showed high memory usage in the dataflow <code>Engine</code>, due to allocating a large IndexVec</p>",
        "id": 223061299,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610915176
    },
    {
        "content": "<p>I added in some printlns, and discovered the MIR body with a huge number of basic blocks</p>",
        "id": 223061314,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610915205
    },
    {
        "content": "<p>Here's the output of <code>cargo expand</code>: <a href=\"https://gist.github.com/Aaron1011/73c3f35c6aa1b07bf5a5d2240bc71b19\">https://gist.github.com/Aaron1011/73c3f35c6aa1b07bf5a5d2240bc71b19</a></p>",
        "id": 223061425,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610915344
    },
    {
        "content": "<p>this is just an enormous initializer</p>",
        "id": 223061434,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610915364
    },
    {
        "content": "<p>wow, that is indeed a ludicrous number of basic blocks</p>",
        "id": 223061439,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610915373
    },
    {
        "content": "<p>I don't think we can possibly do better than one basic block per function call</p>",
        "id": 223061454,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610915394
    },
    {
        "content": "<p>is there a way to reduce the amount of memory each block uses?</p>",
        "id": 223061455,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610915397
    },
    {
        "content": "<p>since we need to handle unwinding</p>",
        "id": 223061456,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610915398
    },
    {
        "content": "<p>so I think that's going to limit how much we can improve memory usage</p>",
        "id": 223061503,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610915410
    },
    {
        "content": "<p>this might be a good benchmark to add, if rustc-timer has the time budget</p>",
        "id": 223061609,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610915533
    },
    {
        "content": "<p>if we just add the initializer I think it wouldn't take too much time</p>",
        "id": 223061614,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610915550
    },
    {
        "content": "<p>I don't know where in the optimization pipeline we do const-prop</p>",
        "id": 223061820,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610915823
    },
    {
        "content": "<p>but there could be some benefit to trying to identify and collapse things like 'litint + lintint * lintint' very early on</p>",
        "id": 223061849,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610915877
    },
    {
        "content": "<p>as I know that's a common pattern for macro_rules macros to build up an index value</p>",
        "id": 223061896,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610915912
    },
    {
        "content": "<p>Well this is no solution but probably didn't help either: <a href=\"https://github.com/rust-lang/rust/pull/81132\">https://github.com/rust-lang/rust/pull/81132</a> ~50k allocations one by one? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> (to clarify, it's a lot less allocations because of the growth algo)</p>",
        "id": 223062653,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1610916983
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"334260\">@Dániel Buga</span> the time to execute is actually not bad, it's the peak RSS that's off the charts</p>",
        "id": 223062670,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610917038
    },
    {
        "content": "<p>so pre-allocating wouldn't help much</p>",
        "id": 223062676,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610917043
    },
    {
        "content": "<p>Depends on what happens on growth</p>",
        "id": 223062685,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1610917065
    },
    {
        "content": "<p>Anyway, may not even get to this point, but still, since we know the upper bound of the hash map we need, why not reserve it?</p>",
        "id": 223062726,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1610917094
    },
    {
        "content": "<p>right, it's a good change, I just don't think it will help in this case</p>",
        "id": 223062827,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610917270
    },
    {
        "content": "<p>Just like I said <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 223062842,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1610917298
    },
    {
        "content": "<p>Well, a BasicBlockData is 144 bytes, out of which Terminator is 112 bytes - so I guess the Terminator can be annoying here. But for 30k basic blocks in that expansion, this is only 4MB of memory or so. We could cut that down by boxing the larger variants, but there might be a runtime price for that</p>",
        "id": 223064592,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1610919365
    },
    {
        "content": "<p>But in this case it's a series of Asserts and Calls, both of which are rather fat, so just by boxing, we wouldn't even win much here, if anything.</p>",
        "id": 223064844,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1610919654
    },
    {
        "content": "<p>opened <a href=\"https://github.com/rust-lang/rust/pull/81140\">https://github.com/rust-lang/rust/pull/81140</a> just in case it helps (and if it works, lol)</p>",
        "id": 223069682,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1610926542
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"334260\">@Dániel Buga</span> can you run that on vtparse and see if it helps memory usage at all?</p>",
        "id": 223069741,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610926640
    },
    {
        "content": "<p>sorry its 0:40, I'm done for yesterday <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 223069871,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1610926848
    },
    {
        "content": "<p>my guess is no, though</p>",
        "id": 223069879,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1610926864
    },
    {
        "content": "<p>fair enough lol</p>",
        "id": 223070080,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610927236
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/memory.20usage.20in.20borrowck/near/223053328\">said</a>:</p>\n<blockquote>\n<p>I'll go add track_caller to that</p>\n</blockquote>\n<p>Do we know how often is it used? (And do we have an intuition for what the cost of <code>#[track_caller]</code> is for that matter?)</p>",
        "id": 223073547,
        "sender_full_name": "nagisa",
        "timestamp": 1610933001
    },
    {
        "content": "<p>the way <code>#[track_caller]</code> codegens smells like it is likely to cause runtime regressions, but <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 223073593,
        "sender_full_name": "nagisa",
        "timestamp": 1610933049
    },
    {
        "content": "<p>why does track_caller cause runtime regressions?</p>",
        "id": 223073597,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610933073
    },
    {
        "content": "<p>steal is not used much at all:</p>\n<div class=\"codehilite\"><pre><span></span><code>compiler/rustc_typeck/src/collect/type_of.rs\n651:    match tcx.sess.diagnostic().steal_diagnostic(span, StashKey::ItemNoType) {\n\ncompiler/rustc_mir/src/transform/mod.rs\n262:    let mut body = tcx.mir_built(def).steal();\n297:    let mut body = tcx.mir_const(def).steal();\n423:    let mut body = body.steal();\n568:        tcx.mir_drops_elaborated_and_const_checked(ty::WithOptConstParam::unknown(did)).steal();\n592:    let mut promoted = promoted.steal();\n\ncompiler/rustc_interface/src/queries.rs\n218:            let resolver = peeked.1.steal();\n265:                resolver_outputs.steal(),\n</code></pre></div>",
        "id": 223073599,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610933092
    },
    {
        "content": "<p>I did not say it does, I said it smells like it would. That's because it unconditionally passes of location data to a function (+register/stack pressure).</p>",
        "id": 223073608,
        "sender_full_name": "nagisa",
        "timestamp": 1610933131
    },
    {
        "content": "<p>borrow is used a lot more:</p>\n<div class=\"codehilite\"><pre><span></span><code>&gt; rg &#39;\\.borrow\\(&#39; compiler/ | wc -l\n227\n</code></pre></div>",
        "id": 223073618,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610933157
    },
    {
        "content": "<p>do you want me to run perf on that PR before merging it?</p>",
        "id": 223073656,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610933169
    },
    {
        "content": "<p>nah, I think the uses of <code>steal</code> are rare and reasonably cold enough that it wouldn't be necessary.</p>",
        "id": 223073662,
        "sender_full_name": "nagisa",
        "timestamp": 1610933193
    },
    {
        "content": "<p>oh well I added <code>track_caller</code> to <code>borrow</code> too <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 223073666,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610933211
    },
    {
        "content": "<p>Might be worth it at some point down the line to remove all #[track_caller] and perf to quantify.</p>",
        "id": 223073678,
        "sender_full_name": "nagisa",
        "timestamp": 1610933245
    },
    {
        "content": "<p>if it's a big regression it will come up in the weekly triage report in any case</p>",
        "id": 223073680,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610933266
    },
    {
        "content": "<p>so I can revert it then if necessary</p>",
        "id": 223073681,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610933271
    },
    {
        "content": "<p>This crate looks like something that would encounter similar issues like those described in <a href=\"https://github.com/rust-lang/rust/issues/54208#issuecomment-421188735\">https://github.com/rust-lang/rust/issues/54208#issuecomment-421188735</a></p>",
        "id": 223084520,
        "sender_full_name": "tm",
        "timestamp": 1610950980
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 223352467,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1611137177
    },
    {
        "content": "<p>Fun fact: I tried to skip the borrow checking dataflow pass because the code in question doesn't have a single borrow and that pass allocates a 33k x size_of(empty BitSet) array. Turns out, by doing that, I managed somehow to increase max rss by 200MB. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 223407422,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1611164304
    },
    {
        "content": "<p>There are 124559 move paths in this particular piece of code. That, with the 33k basic blocks means that each dataflow pass (MaybeUninitializedPlaces, MaybeInitializedPlaces, EverInitializedPlaces) allocates like 500MB (I think) of memory if I'm not completely wrong. I guess, maybe in this particular case a sparse representation of the dataflow state would help?</p>",
        "id": 223408963,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1611164989
    },
    {
        "content": "<p>I think we have a sparse bitset introduced for borrowck already?</p>",
        "id": 223409717,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611165283
    },
    {
        "content": "<p>we have a number of sparse bitset data structures, yes</p>",
        "id": 223410226,
        "sender_full_name": "simulacrum",
        "timestamp": 1611165506
    },
    {
        "content": "<p>There is also a hybrid one that combines the two.</p>",
        "id": 223410297,
        "sender_full_name": "tm",
        "timestamp": 1611165539
    },
    {
        "content": "<p>Yes, GenKillSet is implemented in terms of the HybridBitSet, and it is used when the DFG is cyclic as well.</p>",
        "id": 223410325,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1611165553
    },
    {
        "content": "<p>At some point in the computation those sets become quite dense or even start as such, so that's probably not that easy to improve.</p>",
        "id": 223411969,
        "sender_full_name": "tm",
        "timestamp": 1611166217
    },
    {
        "content": "<p>Why are there so many move paths in the first place?</p>",
        "id": 223414812,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611167462
    },
    {
        "content": "<p>hopefully not for every single basic block of a humongous static initializer <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 223414833,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1611167469
    },
    {
        "content": "<p>the mir looks like this: <a href=\"https://rust.godbolt.org/z/hPdGrK\">https://rust.godbolt.org/z/hPdGrK</a></p>",
        "id": 223414913,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1611167507
    },
    {
        "content": "<p>(the example is reduced to 1/14 of the original)</p>",
        "id": 223415035,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1611167554
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/memory.20usage.20in.20borrowck/near/223053692\">said</a>:</p>\n<blockquote>\n<p>heaptrack is hanging so I don't have better numbers unfortunately :(</p>\n</blockquote>\n<p>oh hey, they got back on this <a href=\"https://bugs.kde.org/show_bug.cgi?id=431746#c4\">https://bugs.kde.org/show_bug.cgi?id=431746#c4</a></p>",
        "id": 223545812,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611251605
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 223552413,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1611254508
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 223553431,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1611254968
    }
]