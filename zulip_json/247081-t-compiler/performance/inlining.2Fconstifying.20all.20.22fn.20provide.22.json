[
    {
        "content": "<p>I want to try <code>#[inline(always)]</code> on <code>fn provide</code> functions and see if that has any perf effects</p>",
        "id": 203490923,
        "sender_full_name": "eddyb",
        "timestamp": 1594376415
    },
    {
        "content": "<p>(noting it down in case I forget)</p>",
        "id": 203491087,
        "sender_full_name": "eddyb",
        "timestamp": 1594376546
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> so the result is that:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">default_type_of</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"n\">TyCtxt</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">DefId</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Ty</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">providers</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Providers</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">rustc_typeck</span>::<span class=\"n\">provide</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">providers</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">providers</span><span class=\"p\">.</span><span class=\"n\">type_of</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>optimizes down to:</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"k\">ret</span> <span class=\"nv\">%&quot;rustc_middle::ty::TyS&quot;</span><span class=\"p\">*</span> <span class=\"p\">(</span><span class=\"k\">i64</span><span class=\"p\">*,</span> <span class=\"k\">i32</span><span class=\"p\">,</span> <span class=\"k\">i32</span><span class=\"p\">)*</span> <span class=\"vg\">@_ZN12rustc_typeck7collect7type_of7type_of17h576de94756ddadc8E</span>\n</code></pre></div>",
        "id": 203623446,
        "sender_full_name": "eddyb",
        "timestamp": 1594520112
    },
    {
        "content": "<p>however I just realized that I can do much better: make all <code>fn provide</code> be <code>const fn</code></p>",
        "id": 203623448,
        "sender_full_name": "eddyb",
        "timestamp": 1594520128
    },
    {
        "content": "<p>much stronger guarantees... in fact, a struct of functions is very close to a <code>trait</code> vtable :P</p>",
        "id": 203623565,
        "sender_full_name": "eddyb",
        "timestamp": 1594520343
    },
    {
        "content": "<p>Ooh <code>provide</code> could be a trait where every function has a default implementation!</p>",
        "id": 203624357,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594522197
    },
    {
        "content": "<p>And then we don't need to hack around with thread locals, just override the functions we care about :D</p>",
        "id": 203624400,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594522216
    },
    {
        "content": "<p>not really, the problem is is combining them</p>",
        "id": 203624401,
        "sender_full_name": "eddyb",
        "timestamp": 1594522219
    },
    {
        "content": "<p>you won't need thread-locals once I finish this PR</p>",
        "id": 203624405,
        "sender_full_name": "eddyb",
        "timestamp": 1594522240
    },
    {
        "content": "<blockquote>\n<p>not really, the problem is is combining them</p>\n</blockquote>\n<p>Not sure I follow but I'll wait to see what your PR is doing</p>",
        "id": 203624508,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594522511
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> specifically you don't want <code>rustc_interface</code> to have to refer to every single provider ever</p>",
        "id": 203624510,
        "sender_full_name": "eddyb",
        "timestamp": 1594522540
    },
    {
        "content": "<p>the current system works because each <code>fn provide</code> can write whichever subset of the fields it wants to</p>",
        "id": 203624512,
        "sender_full_name": "eddyb",
        "timestamp": 1594522557
    },
    {
        "content": "<p>Right</p>",
        "id": 203624552,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594522591
    },
    {
        "content": "<p>There's a default <code>provide</code> and then you can override individual queries</p>",
        "id": 203624554,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594522605
    },
    {
        "content": "<p>Which sounds a lot like a trait to me</p>",
        "id": 203624555,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594522613
    },
    {
        "content": "<p>there's over 50 different <code>fn provide</code></p>",
        "id": 203624558,
        "sender_full_name": "eddyb",
        "timestamp": 1594522632
    },
    {
        "content": "<p>and like 200 queries</p>",
        "id": 203624561,
        "sender_full_name": "eddyb",
        "timestamp": 1594522645
    },
    {
        "content": "<p>Sure, each trait implementation only has to override the queries it cares about</p>",
        "id": 203624565,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594522653
    },
    {
        "content": "<p>And the rest stay as the default</p>",
        "id": 203624567,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594522658
    },
    {
        "content": "<p>but you can't combine traits</p>",
        "id": 203624568,
        "sender_full_name": "eddyb",
        "timestamp": 1594522660
    },
    {
        "content": "<p>if you have one trait with 50 impls, how do you combine those (presumably implemented on 50 <code>struct Foo;</code>) into one impl?</p>",
        "id": 203624607,
        "sender_full_name": "eddyb",
        "timestamp": 1594522695
    },
    {
        "content": "<p>(I actually came up with 1 or 2 ways of doing it but it's an absolute mess and/or might require specialization)</p>",
        "id": 203624613,
        "sender_full_name": "eddyb",
        "timestamp": 1594522763
    },
    {
        "content": "<p>you're saying there's no default that makes sense? I'm not sure I follow what you mean by 'combine those into one impl'</p>",
        "id": 203624659,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594522810
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> this is the kind of thing I mean <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_interface/passes.rs#L723-L740\">https://github.com/rust-lang/rust/blob/master/src/librustc_interface/passes.rs#L723-L740</a></p>",
        "id": 203624661,
        "sender_full_name": "eddyb",
        "timestamp": 1594522811
    },
    {
        "content": "<p>hmm</p>",
        "id": 203624665,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594522841
    },
    {
        "content": "<p>each call can do arbitrary mutations on the <code>Providers</code>, but you can't \"mutate\" a trait impl</p>",
        "id": 203624668,
        "sender_full_name": "eddyb",
        "timestamp": 1594522847
    },
    {
        "content": "<p>overriding queries in custom drivers isn't as interesting, because it's a small finite number, there's a few ways in which you can do it but you could just as well still mutate a struct of <code>fn</code> pointers</p>",
        "id": 203624673,
        "sender_full_name": "eddyb",
        "timestamp": 1594522890
    },
    {
        "content": "<p>How about <code>trait Provide: Analysis + ProcMacroDecls + Plugin ...</code>? It's super ugly but you could override any specific inner trait</p>",
        "id": 203624675,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594522898
    },
    {
        "content": "<p>I guess at that point it's not really better than the current situation</p>",
        "id": 203624676,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594522909
    },
    {
        "content": "<p>alright but that requires splitting the queries into traits</p>",
        "id": 203624677,
        "sender_full_name": "eddyb",
        "timestamp": 1594522916
    },
    {
        "content": "<p>and consider the fact that <code>rustc_metadata</code> overrides a bunch of queries that all over the place</p>",
        "id": 203624715,
        "sender_full_name": "eddyb",
        "timestamp": 1594522929
    },
    {
        "content": "<p>IMO splitting the queries makes sense but only in terms of the data types they refer to and what code should be allowed to <em>call</em> them</p>",
        "id": 203624718,
        "sender_full_name": "eddyb",
        "timestamp": 1594522960
    },
    {
        "content": "<p>not where they're implemented</p>",
        "id": 203624724,
        "sender_full_name": "eddyb",
        "timestamp": 1594522972
    },
    {
        "content": "<p>(so you could have crates that only know about a subset of the queries, even if they might be implemented somewhere else entirely etc.)</p>",
        "id": 203624730,
        "sender_full_name": "eddyb",
        "timestamp": 1594523000
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> anyway the one way which I believe can work is a trick that I first came up with for ObjectiveC modelling, I believe</p>",
        "id": 203624736,
        "sender_full_name": "eddyb",
        "timestamp": 1594523025
    },
    {
        "content": "<p>so you know how you can use <code>Deref</code> to emulate single inheritance?</p>",
        "id": 203624739,
        "sender_full_name": "eddyb",
        "timestamp": 1594523034
    },
    {
        "content": "<p>you can emulate multiple inheritance with it too, you just have to be sneaky :P</p>",
        "id": 203624779,
        "sender_full_name": "eddyb",
        "timestamp": 1594523065
    },
    {
        "content": "<p>you can represent <code>A + B + C</code> as <code>A&lt;B&lt;C&lt;()&gt;&gt;&gt;</code>. so you could imagine <code>A&lt;B&lt;C&lt;()&gt;&gt;&gt;</code> representing \"an object that implements interfaces A, B and C\"</p>",
        "id": 203624795,
        "sender_full_name": "eddyb",
        "timestamp": 1594523143
    },
    {
        "content": "<p>and then,</p>",
        "id": 203624836,
        "sender_full_name": "eddyb",
        "timestamp": 1594523166
    },
    {
        "content": "<p>wait, you can do it even cleaner than that heh</p>",
        "id": 203624838,
        "sender_full_name": "eddyb",
        "timestamp": 1594523172
    },
    {
        "content": "<p>okay let's keep it simple: each of those wrappers derefs to what's inside. so a method on any of them will be callable on the whole thing</p>",
        "id": 203624847,
        "sender_full_name": "eddyb",
        "timestamp": 1594523226
    },
    {
        "content": "<p>anyway what I realized just saying that is that <code>Foo&lt;(A, (B, (C, ())))&gt;</code> can also work, if you admit either some associated type nonsense, or just unsafe code in the <code>Deref</code> impl</p>",
        "id": 203624852,
        "sender_full_name": "eddyb",
        "timestamp": 1594523272
    },
    {
        "content": "<p>I'm imagining like 50 levels of types lol</p>",
        "id": 203624854,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594523279
    },
    {
        "content": "<p>since you can have that type derefing to <code>Foo&lt;(B, (C, ()))&gt;</code> or even removing <code>C</code> from the other end (but that'd be harder)</p>",
        "id": 203624895,
        "sender_full_name": "eddyb",
        "timestamp": 1594523302
    },
    {
        "content": "<p>and instead of tuples you can use the hlist crate etc.</p>",
        "id": 203624897,
        "sender_full_name": "eddyb",
        "timestamp": 1594523309
    },
    {
        "content": "<p>sounds like you need to make a crate for multiple inheritance :P</p>",
        "id": 203624908,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594523348
    },
    {
        "content": "<p>anyway, something like that could be used for queries where by default it just goes to the next level down, but you can override it</p>",
        "id": 203624909,
        "sender_full_name": "eddyb",
        "timestamp": 1594523351
    },
    {
        "content": "<p>might even be doable with just a trait, no macros (other than to generate the trait in the first place)</p>",
        "id": 203624911,
        "sender_full_name": "eddyb",
        "timestamp": 1594523382
    },
    {
        "content": "<p>anyway it's kind of a mess</p>",
        "id": 203624950,
        "sender_full_name": "eddyb",
        "timestamp": 1594523405
    },
    {
        "content": "<p>it looks like hlist does something like this already actually <a href=\"https://docs.rs/hlist/0.1.2/hlist/trait.Find.html\">https://docs.rs/hlist/0.1.2/hlist/trait.Find.html</a></p>",
        "id": 203624952,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594523413
    },
    {
        "content": "<p>you say <code>.get()</code> and the compiler performs deref arbitrarily many times</p>",
        "id": 203624957,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594523432
    },
    {
        "content": "<p><em>shudders</em></p>",
        "id": 203624958,
        "sender_full_name": "eddyb",
        "timestamp": 1594523433
    },
    {
        "content": "<p>no this is not deref-based</p>",
        "id": 203624961,
        "sender_full_name": "eddyb",
        "timestamp": 1594523448
    },
    {
        "content": "<p>the deref-based stuff allows you to customize method lookup</p>",
        "id": 203624963,
        "sender_full_name": "eddyb",
        "timestamp": 1594523455
    },
    {
        "content": "<p>since the compiler will stop deref-ing when it finds something with that name</p>",
        "id": 203624970,
        "sender_full_name": "eddyb",
        "timestamp": 1594523478
    },
    {
        "content": "<p>whereas here it's just using a trait to recurse</p>",
        "id": 203624971,
        "sender_full_name": "eddyb",
        "timestamp": 1594523491
    },
    {
        "content": "<p>lol @ <code>.push(...)</code>, that's cute</p>",
        "id": 203624973,
        "sender_full_name": "eddyb",
        "timestamp": 1594523511
    },
    {
        "content": "<p>anyway yeah, there are ways to do this but they're not simple, that's for sure</p>",
        "id": 203625012,
        "sender_full_name": "eddyb",
        "timestamp": 1594523530
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> and they're not guaranteed to optimize as well as CTFE.... unless we use associated consts with <code>fn</code> pointer types lol</p>",
        "id": 203625183,
        "sender_full_name": "eddyb",
        "timestamp": 1594523917
    },
    {
        "content": "<p>which is very much a struct</p>",
        "id": 203625190,
        "sender_full_name": "eddyb",
        "timestamp": 1594523936
    },
    {
        "content": "<p>either way it might still require specialization or a macro to have defaults that vary between impls</p>",
        "id": 203625242,
        "sender_full_name": "eddyb",
        "timestamp": 1594524051
    },
    {
        "content": "<p>(just realized I can edit the topic by pressing the pencil button next to the topic name, not messing with messages)</p>",
        "id": 203661914,
        "sender_full_name": "eddyb",
        "timestamp": 1594589202
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> so yeah I have <code>const DEFAULT_PROVIDERS: Providers</code> now :)</p>",
        "id": 203661925,
        "sender_full_name": "eddyb",
        "timestamp": 1594589227
    },
    {
        "content": "<p>okay that's really weird, <code>const fn</code> doesn't behave as if it's <code>#[inline]</code></p>",
        "id": 203661992,
        "sender_full_name": "eddyb",
        "timestamp": 1594589301
    },
    {
        "content": "<p>even though it could be codegen'd across crates</p>",
        "id": 203662001,
        "sender_full_name": "eddyb",
        "timestamp": 1594589314
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>, is this intentional?</p>",
        "id": 203662009,
        "sender_full_name": "eddyb",
        "timestamp": 1594589326
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> <code>rustc_interface::DEFAULT_PROVIDERS.type_of</code> optimizes to a constant <code>fn</code> pointer :)</p>",
        "id": 203662281,
        "sender_full_name": "eddyb",
        "timestamp": 1594589714
    },
    {
        "content": "<p>and a <code>static</code> requires no optimization to get there :D</p>",
        "id": 203662334,
        "sender_full_name": "eddyb",
        "timestamp": 1594589774
    },
    {
        "content": "<p>or a function using a <code>const</code> that was initialized from <code>DEFAULT_PROVIDERS.type_of</code></p>",
        "id": 203662369,
        "sender_full_name": "eddyb",
        "timestamp": 1594589872
    },
    {
        "content": "<p>I'll rename those to have QUERY in their name I think</p>",
        "id": 203662408,
        "sender_full_name": "eddyb",
        "timestamp": 1594589883
    },
    {
        "content": "<p>That sounds awesome!</p>",
        "id": 203663038,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594590993
    },
    {
        "content": "<p>yeah I just need to write a PR description now</p>",
        "id": 203663611,
        "sender_full_name": "eddyb",
        "timestamp": 1594591970
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> in case you didn't see it: <a href=\"https://github.com/rust-lang/rust/pull/74283\">https://github.com/rust-lang/rust/pull/74283</a></p>",
        "id": 203669693,
        "sender_full_name": "eddyb",
        "timestamp": 1594602484
    },
    {
        "content": "<p>looks much nicer :)</p>",
        "id": 203669698,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594602512
    },
    {
        "content": "<p>also I'm getting a far more scary stage1 rustc failure locally, where it looks like the wrong providers are used. but it's different from the CI failure</p>",
        "id": 203669699,
        "sender_full_name": "eddyb",
        "timestamp": 1594602527
    },
    {
        "content": "<p>I might just need to nuke stage1*</p>",
        "id": 203669705,
        "sender_full_name": "eddyb",
        "timestamp": 1594602555
    },
    {
        "content": "<p>yeah, must've been some stale rlibs</p>",
        "id": 203669775,
        "sender_full_name": "eddyb",
        "timestamp": 1594602683
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/inlining.2Fconstifying.20all.20.22fn.20provide.22/near/203662009\">said</a>:</p>\n<blockquote>\n<p>cc <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span>, is this intentional?</p>\n</blockquote>\n<p>no, I would have thought this would work since I thought the part that checks whether you can cross crate inline is <code>is_mir_availabe</code></p>",
        "id": 203684824,
        "sender_full_name": "oli",
        "timestamp": 1594625225
    },
    {
        "content": "<p>heh</p>",
        "id": 203684965,
        "sender_full_name": "eddyb",
        "timestamp": 1594625330
    },
    {
        "content": "<p>I think there's also a predicate for \"was this codegen'd upstream\"</p>",
        "id": 203684974,
        "sender_full_name": "eddyb",
        "timestamp": 1594625343
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I feel like something is pulling a prank on me <a href=\"https://github.com/rust-lang/rust/pull/74283#issuecomment-657486053\">https://github.com/rust-lang/rust/pull/74283#issuecomment-657486053</a></p>",
        "id": 203701639,
        "sender_full_name": "eddyb",
        "timestamp": 1594638255
    },
    {
        "content": "<p>surely moving something from runtime to CTFE should at least not change the performance</p>",
        "id": 203701654,
        "sender_full_name": "eddyb",
        "timestamp": 1594638273
    },
    {
        "content": "<p>I think you lost all your perf in metadata_register_crate</p>",
        "id": 203702088,
        "sender_full_name": "oli",
        "timestamp": 1594638618
    },
    {
        "content": "<p>only noticable for super super fast compiler runs (less than 10ms)</p>",
        "id": 203702112,
        "sender_full_name": "oli",
        "timestamp": 1594638652
    },
    {
        "content": "<p>huh that does track. but why?</p>",
        "id": 203702134,
        "sender_full_name": "eddyb",
        "timestamp": 1594638666
    },
    {
        "content": "<p>copying large things instead of just assigning a few fields?</p>",
        "id": 203702161,
        "sender_full_name": "oli",
        "timestamp": 1594638696
    },
    {
        "content": "<p>it's not like the copies could've been removed before</p>",
        "id": 203702168,
        "sender_full_name": "eddyb",
        "timestamp": 1594638706
    },
    {
        "content": "<p>it's all across non-<code>#[inline]</code> non-generic call boundaries</p>",
        "id": 203702220,
        "sender_full_name": "eddyb",
        "timestamp": 1594638724
    },
    {
        "content": "<p>and, like, by the time a crate is... wait</p>",
        "id": 203702237,
        "sender_full_name": "eddyb",
        "timestamp": 1594638745
    },
    {
        "content": "<p><span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 203702241,
        "sender_full_name": "oli",
        "timestamp": 1594638748
    },
    {
        "content": "<p>crates are already known when creating the <code>TyCtxt</code></p>",
        "id": 203702244,
        "sender_full_name": "eddyb",
        "timestamp": 1594638755
    },
    {
        "content": "<p>just do a mir dump of before/after I guess?</p>",
        "id": 203702378,
        "sender_full_name": "oli",
        "timestamp": 1594638860
    },
    {
        "content": "<p>you're joking, right :P?</p>",
        "id": 203702433,
        "sender_full_name": "eddyb",
        "timestamp": 1594638918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <code>TyCtxt::create_global_ctxt</code> is not <code>#[inline]</code> nor generic</p>",
        "id": 203702451,
        "sender_full_name": "eddyb",
        "timestamp": 1594638934
    },
    {
        "content": "<p>llvm lto doesn't care about that though, but even without inlining, I think it can be just within one of the provider functions</p>",
        "id": 203702526,
        "sender_full_name": "oli",
        "timestamp": 1594638984
    },
    {
        "content": "<p>so there's no way its replicating of the providers to per-crate (which might be a waste of time <em>shrug</em>) would be impacted by whatever is on the other side of the call</p>",
        "id": 203702590,
        "sender_full_name": "eddyb",
        "timestamp": 1594639023
    },
    {
        "content": "<p>but we don't run LTO, do we?</p>",
        "id": 203702598,
        "sender_full_name": "eddyb",
        "timestamp": 1594639030
    },
    {
        "content": "<p>and ThinLTO is between the CGUs of one crate</p>",
        "id": 203702622,
        "sender_full_name": "eddyb",
        "timestamp": 1594639042
    },
    {
        "content": "<p>am I missing something?</p>",
        "id": 203702630,
        "sender_full_name": "eddyb",
        "timestamp": 1594639050
    },
    {
        "content": "<p>lol <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_middle/ty/context.rs#L1084-L1085\">https://github.com/rust-lang/rust/blob/master/src/librustc_middle/ty/context.rs#L1084-L1085</a></p>",
        "id": 203702706,
        "sender_full_name": "eddyb",
        "timestamp": 1594639093
    },
    {
        "content": "<p>I just noticed how inefficient that is</p>",
        "id": 203702722,
        "sender_full_name": "eddyb",
        "timestamp": 1594639108
    },
    {
        "content": "<p>that's what I mean, even without cross crate inlining, the provider functions themselves will now be copying around large things</p>",
        "id": 203702725,
        "sender_full_name": "oli",
        "timestamp": 1594639110
    },
    {
        "content": "<p>why would you say that?</p>",
        "id": 203702751,
        "sender_full_name": "eddyb",
        "timestamp": 1594639130
    },
    {
        "content": "<p>there were no optimizations before</p>",
        "id": 203702774,
        "sender_full_name": "eddyb",
        "timestamp": 1594639154
    },
    {
        "content": "<p>which is why I made this PR in the first place</p>",
        "id": 203702792,
        "sender_full_name": "eddyb",
        "timestamp": 1594639163
    },
    {
        "content": "<p>everything was just bulk copies and field writes</p>",
        "id": 203702807,
        "sender_full_name": "eddyb",
        "timestamp": 1594639178
    },
    {
        "content": "<p>completely isolated between crates</p>",
        "id": 203702818,
        "sender_full_name": "eddyb",
        "timestamp": 1594639187
    },
    {
        "content": "<p>oh... wait, I thought you were creating loads and loads of constants</p>",
        "id": 203702881,
        "sender_full_name": "oli",
        "timestamp": 1594639209
    },
    {
        "content": "<p>I removed all the overhead of <code>fn provide</code></p>",
        "id": 203702886,
        "sender_full_name": "eddyb",
        "timestamp": 1594639214
    },
    {
        "content": "<p>but it's just one constant at the end</p>",
        "id": 203702893,
        "sender_full_name": "oli",
        "timestamp": 1594639222
    },
    {
        "content": "<p>ofc</p>",
        "id": 203702899,
        "sender_full_name": "eddyb",
        "timestamp": 1594639227
    },
    {
        "content": "<p>it's the same thing as before, just CTFE instead of at runtime</p>",
        "id": 203702910,
        "sender_full_name": "eddyb",
        "timestamp": 1594639237
    },
    {
        "content": "<p>so it should just get copied from <code>.rodata</code> or w/e onto the stack</p>",
        "id": 203702921,
        "sender_full_name": "eddyb",
        "timestamp": 1594639254
    },
    {
        "content": "<p>ah yes, so the difference is indeed that we now copy the entire thing from rodata to the stack in <a href=\"https://github.com/rust-lang/rust/pull/74283/files#diff-24c5c945888bb0d041e769bfb852de6cR802\">https://github.com/rust-lang/rust/pull/74283/files#diff-24c5c945888bb0d041e769bfb852de6cR802</a></p>",
        "id": 203702968,
        "sender_full_name": "oli",
        "timestamp": 1594639294
    },
    {
        "content": "<p>instead of assigning each field on its own</p>",
        "id": 203702974,
        "sender_full_name": "oli",
        "timestamp": 1594639302
    },
    {
        "content": "<p>whereas before we were probably doing ~50 copies</p>",
        "id": 203702978,
        "sender_full_name": "eddyb",
        "timestamp": 1594639308
    },
    {
        "content": "<p>although it's possible LLVM is smart enough to remove some of them from FRU, idk</p>",
        "id": 203703013,
        "sender_full_name": "eddyb",
        "timestamp": 1594639323
    },
    {
        "content": "<p>I could check I guess?</p>",
        "id": 203703044,
        "sender_full_name": "eddyb",
        "timestamp": 1594639338
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/query/struct.Providers.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/query/struct.Providers.html</a> is huuge</p>",
        "id": 203703054,
        "sender_full_name": "oli",
        "timestamp": 1594639346
    },
    {
        "content": "<p>yes</p>",
        "id": 203703058,
        "sender_full_name": "eddyb",
        "timestamp": 1594639352
    },
    {
        "content": "<p>I <em>removed</em> copies</p>",
        "id": 203703063,
        "sender_full_name": "eddyb",
        "timestamp": 1594639361
    },
    {
        "content": "<p>none of the field writes you're thinking of were getting inlined</p>",
        "id": 203703073,
        "sender_full_name": "eddyb",
        "timestamp": 1594639373
    },
    {
        "content": "<p>idk what you mean, all the provide functions take mutable references</p>",
        "id": 203703114,
        "sender_full_name": "oli",
        "timestamp": 1594639412
    },
    {
        "content": "<p>even with 0 copies (which I doubt is possible), there would be more  field writes than there are fields copied after my PR</p>",
        "id": 203703119,
        "sender_full_name": "eddyb",
        "timestamp": 1594639413
    },
    {
        "content": "<p>yes and then do <code>*providers = Providers { foo, ..*providers };</code></p>",
        "id": 203703132,
        "sender_full_name": "eddyb",
        "timestamp": 1594639427
    },
    {
        "content": "<p>I'm trusting llvm there to get rid of that</p>",
        "id": 203703143,
        "sender_full_name": "oli",
        "timestamp": 1594639442
    },
    {
        "content": "<p>which is the main reason <code>Providers</code> is <code>Copy</code></p>",
        "id": 203703181,
        "sender_full_name": "eddyb",
        "timestamp": 1594639450
    },
    {
        "content": "<p>I don't, so we should tie-breake by checking :P</p>",
        "id": 203703196,
        "sender_full_name": "eddyb",
        "timestamp": 1594639461
    },
    {
        "content": "<p>why do we even do that and not just assign to fields?</p>",
        "id": 203703220,
        "sender_full_name": "oli",
        "timestamp": 1594639476
    },
    {
        "content": "<p>ergonomics lol</p>",
        "id": 203703228,
        "sender_full_name": "eddyb",
        "timestamp": 1594639485
    },
    {
        "content": "<p>oh, because names of functions fit the names of fields</p>",
        "id": 203703239,
        "sender_full_name": "oli",
        "timestamp": 1594639495
    },
    {
        "content": "<p>yeah</p>",
        "id": 203703245,
        "sender_full_name": "eddyb",
        "timestamp": 1594639500
    },
    {
        "content": "<p>okay huh LLVM does optimize that</p>",
        "id": 203703363,
        "sender_full_name": "eddyb",
        "timestamp": 1594639582
    },
    {
        "content": "<p>do we not generate a memcpy at all I wonder?</p>",
        "id": 203703389,
        "sender_full_name": "eddyb",
        "timestamp": 1594639607
    },
    {
        "content": "<p>haha</p>",
        "id": 203703419,
        "sender_full_name": "eddyb",
        "timestamp": 1594639640
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> yeah it's not LLVM lmao</p>",
        "id": 203703425,
        "sender_full_name": "eddyb",
        "timestamp": 1594639646
    },
    {
        "content": "<p>let me try to force us to generate a <code>memcpy</code>, I again doubt that LLVM can optimize anything involving indirection</p>",
        "id": 203703450,
        "sender_full_name": "eddyb",
        "timestamp": 1594639667
    },
    {
        "content": "<p>wait. I literally have a field assignment</p>",
        "id": 203703466,
        "sender_full_name": "eddyb",
        "timestamp": 1594639681
    },
    {
        "content": "<p>/me should not do this sort of thing this tired</p>",
        "id": 203703519,
        "sender_full_name": "eddyb",
        "timestamp": 1594639693
    },
    {
        "content": "<p>okay LLVM does optimize it :/</p>",
        "id": 203703559,
        "sender_full_name": "eddyb",
        "timestamp": 1594639760
    },
    {
        "content": "<p>I wonder if it's the dereferenceable or the unsynchronized accesses</p>",
        "id": 203703588,
        "sender_full_name": "eddyb",
        "timestamp": 1594639794
    },
    {
        "content": "<p>LLVM can barely optimize <code>memcpy</code>s between two <code>alloca</code>s</p>",
        "id": 203703642,
        "sender_full_name": "eddyb",
        "timestamp": 1594639819
    },
    {
        "content": "<p><span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 203703651,
        "sender_full_name": "oli",
        "timestamp": 1594639830
    },
    {
        "content": "<p>idk, this is out of my territory</p>",
        "id": 203703658,
        "sender_full_name": "oli",
        "timestamp": 1594639842
    },
    {
        "content": "<p>anyway so now that we've settled that you were right about LLVM optimizations</p>",
        "id": 203703670,
        "sender_full_name": "eddyb",
        "timestamp": 1594639851
    },
    {
        "content": "<p>why would writing all fields effectively twice (once for the default and once again when installing the provider) be faster than one <code>memcpy</code>?</p>",
        "id": 203703701,
        "sender_full_name": "eddyb",
        "timestamp": 1594639889
    },
    {
        "content": "<p><em>discussion (on the cursed behavior I managed to trigger) continues in <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/closures.20used.20as.20fn.20pointers.20may.20be.20codegen'd.20downstream\">in another topic</a></em></p>",
        "id": 203794082,
        "sender_full_name": "eddyb",
        "timestamp": 1594694807
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> at some point I remember you mentioning having a single <code>lazy_static</code> in rustc_interface so that each crate that wants to use the defaults doesn't need their own. Is that still planned? Writing some docs around queries for rustc_dev_guide now, if things are still up in the air I can wait for this section though</p>",
        "id": 203902893,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594771177
    },
    {
        "content": "<p>do you want to make a PR for it?</p>",
        "id": 203902916,
        "sender_full_name": "eddyb",
        "timestamp": 1594771199
    },
    {
        "content": "<p>if not I will</p>",
        "id": 203902959,
        "sender_full_name": "eddyb",
        "timestamp": 1594771203
    },
    {
        "content": "<p>I can, where would it go?</p>",
        "id": 203902965,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594771212
    },
    {
        "content": "<p>I'm done with the 3 PRs that were fallout from my experiment</p>",
        "id": 203902982,
        "sender_full_name": "eddyb",
        "timestamp": 1594771221
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> see the <code>const</code>s in my PR, you can do the same but with <code>lazy_static!</code></p>",
        "id": 203903005,
        "sender_full_name": "eddyb",
        "timestamp": 1594771252
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <a href=\"https://github.com/rust-lang/rust/pull/74347\">https://github.com/rust-lang/rust/pull/74347</a></p>",
        "id": 203904794,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594772843
    },
    {
        "content": "<p>(the PR description isn't great but everything relevant is already in your PR, which I linked)</p>",
        "id": 203904843,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594772882
    },
    {
        "content": "<p>lol @ using <code>Lazy</code></p>",
        "id": 203904878,
        "sender_full_name": "eddyb",
        "timestamp": 1594772897
    },
    {
        "content": "<p>what's wrong with lazy?</p>",
        "id": 203904909,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594772939
    },
    {
        "content": "<p>I'm not used to seeing it, that's all</p>",
        "id": 203904921,
        "sender_full_name": "eddyb",
        "timestamp": 1594772951
    },
    {
        "content": "<p>over <code>lazy_static!</code></p>",
        "id": 203904925,
        "sender_full_name": "eddyb",
        "timestamp": 1594772958
    },
    {
        "content": "<p>funny enough rustc_interface used <code>once_cell</code> but not lazy_static at all</p>",
        "id": 203904932,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594772967
    },
    {
        "content": "<p>maybe it switched recently</p>",
        "id": 203904939,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594772971
    },
    {
        "content": "<p>personally I like it better just because it doesn't make me indent twice lol</p>",
        "id": 203904958,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594772989
    },
    {
        "content": "<p>btw I'm outraged no one noticed my branch name</p>",
        "id": 203997902,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594839546
    },
    {
        "content": "<p><code>ive-got-a-small-query-for-you</code></p>",
        "id": 203997930,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594839561
    }
]