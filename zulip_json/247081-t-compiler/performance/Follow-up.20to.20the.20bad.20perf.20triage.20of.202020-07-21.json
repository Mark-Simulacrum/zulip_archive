[
    {
        "content": "<p>The triage is <a href=\"https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-07-21.md\">here</a>. Very bad, lots of bad regressions, lots of difficulty assigning responsibility because many regressions landed in rollups.</p>",
        "id": 204517173,
        "sender_full_name": "njn",
        "timestamp": 1595314894
    },
    {
        "content": "<p>I have some suggestions on how to improve things.</p>",
        "id": 204517175,
        "sender_full_name": "njn",
        "timestamp": 1595314902
    },
    {
        "content": "<ul>\n<li>We need documentation for how to do rollups. <span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> has volunteered.<ul>\n<li>In particular, PRs known to affect perf should always be landed by themselves. This includes reversions of regressing PRs. Even though their perf effect is known in advance, if they land in a rollup their effects could mask effects of other PRs in the rollup.</li>\n</ul>\n</li>\n<li>We need tools for doing perf CI runs of PRs within rollups, after they have landed. <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> has volunteered.</li>\n<li>A request for a perf CI run in a PR should auto-mark that PR as \"rollup=never\". (This should be overridable, for cases where the perf effect was found to be negligible.) <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> is that also something you could do?</li>\n</ul>",
        "id": 204517252,
        "sender_full_name": "njn",
        "timestamp": 1595315004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> you asked for a list of PRs within rollups that might have caused regressions, that would be worth benchmarking individually. Here's my best attempt:</p>",
        "id": 204518087,
        "sender_full_name": "njn",
        "timestamp": 1595316056
    },
    {
        "content": "<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues/74461\"><a href=\"https://github.com/rust-lang/rust/issues/74461\"><a href=\"https://github.com/rust-lang/rust/issues/74461\">#74461</a></a></a> (18 PRs)<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues/74056\">#74056</a> (Add Arguments::as_str().)</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/74169\">#74169</a> (Stop processing unreachable blocks when solving dataflow)</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/74411\">#74411</a> (Don't assign () to ! MIR locals)</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/74424\">#74424</a> (Move hir::Place to librustc_middle/hir)</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/74438\">#74438</a> (warn about uninitialized multi-variant enums)</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/74468\"><a href=\"https://github.com/rust-lang/rust/issues/74468\"><a href=\"https://github.com/rust-lang/rust/issues/74468\">#74468</a></a></a> (11 PRs)<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues/74464\">#74464</a> (Use pathdiff crate)</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/74069\">#74069</a> (Compare tagged/niche-filling layout and pick the best one)</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/72414\">#72414</a> (Add lazy initialization primitives to std)</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/74493\"><a href=\"https://github.com/rust-lang/rust/issues/74493\"><a href=\"https://github.com/rust-lang/rust/issues/74493\">#74493</a></a></a> (7 PRs)<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues/74071\">#74071</a> (rustc_metadata: Make crate loading fully speculative)</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/74201\">#74201</a> (impl Index&lt;RangeFrom&gt; for CStr)</li>\n</ul>\n</li>\n</ul>",
        "id": 204518092,
        "sender_full_name": "njn",
        "timestamp": 1595316060
    },
    {
        "content": "<p>oh huh I would've expected <a href=\"https://github.com/rust-lang/rust/issues/74071\">#74071</a> (even just from the title) to be a perf win, surprised it wasn't benchmarked - but that's with the hindsight of the the whole gimli situation</p>",
        "id": 204518608,
        "sender_full_name": "eddyb",
        "timestamp": 1595316574
    },
    {
        "content": "<p>hmm <a href=\"https://github.com/rust-lang/rust/issues/74069\">#74069</a> probably should've been benchmarked, but only because of second-order effects, not the cost of the analysis</p>",
        "id": 204518712,
        "sender_full_name": "eddyb",
        "timestamp": 1595316674
    },
    {
        "content": "<p>(since we already benchmarked computing both layouts previously, and it seemed to be under 1%)</p>",
        "id": 204518752,
        "sender_full_name": "eddyb",
        "timestamp": 1595316722
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> isn't <a href=\"https://github.com/rust-lang/rust/issues/74461\">#74461</a> entirely the UTF-8 linker thing?</p>",
        "id": 204519057,
        "sender_full_name": "eddyb",
        "timestamp": 1595316997
    },
    {
        "content": "<p>which was already fixed</p>",
        "id": 204519066,
        "sender_full_name": "eddyb",
        "timestamp": 1595317008
    },
    {
        "content": "<p>I guess we can't easily tell if there was anything else?</p>",
        "id": 204519167,
        "sender_full_name": "eddyb",
        "timestamp": 1595317096
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/74468\">#74468</a> is <em>also</em> a linker regression. we should really have a libstd size comparison on <a href=\"http://perf.rust-lang.org\">perf.rust-lang.org</a> :(</p>",
        "id": 204519606,
        "sender_full_name": "eddyb",
        "timestamp": 1595317479
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/Follow-up.20to.20the.20bad.20perf.20triage.20of.202020-07-21/near/204519057\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120989\">njn</span> isn't <a href=\"https://github.com/rust-lang/rust/issues/74461\">#74461</a> entirely the UTF-8 linker thing?</p>\n</blockquote>\n<p>The improvements from the landing weren't as high as the improvements from the pre-landing CI run, so it's possible that a regression landed with it</p>",
        "id": 204522156,
        "sender_full_name": "njn",
        "timestamp": 1595319597
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> absolute or relative?</p>",
        "id": 204522222,
        "sender_full_name": "eddyb",
        "timestamp": 1595319635
    },
    {
        "content": "<p>I only looked at the percentages</p>",
        "id": 204522249,
        "sender_full_name": "njn",
        "timestamp": 1595319664
    },
    {
        "content": "<p>improvements for a perfect fix are always going to show up as less, in relative terms, because it's relative to the wrong thing</p>",
        "id": 204522254,
        "sender_full_name": "eddyb",
        "timestamp": 1595319670
    },
    {
        "content": "<p>e.g. a 100% regression will have a 50% perfect fix</p>",
        "id": 204522269,
        "sender_full_name": "eddyb",
        "timestamp": 1595319689
    },
    {
        "content": "<p>that's not the comparison</p>",
        "id": 204522279,
        "sender_full_name": "njn",
        "timestamp": 1595319704
    },
    {
        "content": "<p>then inner vs outer?</p>",
        "id": 204522337,
        "sender_full_name": "eddyb",
        "timestamp": 1595319731
    },
    {
        "content": "<p>although that's hard to do cleanly here because the fix also landed in a rollup</p>",
        "id": 204522350,
        "sender_full_name": "eddyb",
        "timestamp": 1595319744
    },
    {
        "content": "<p>pre-landing: <a href=\"https://perf.rust-lang.org/compare.html?start=d3df8512d2c2afc6d2e7d8b5b951dd7f2ad77b02&amp;end=556b0eb41b4273f0dcde2cbc2bc9f53e2c09d688\">https://perf.rust-lang.org/compare.html?start=d3df8512d2c2afc6d2e7d8b5b951dd7f2ad77b02&amp;end=556b0eb41b4273f0dcde2cbc2bc9f53e2c09d688</a><br>\nlanding: <a href=\"https://perf.rust-lang.org/compare.html?start=1fa54ad9680cc82e7301f8ed4e9b7402dfd6ce0e&amp;end=0701419e96d94e5493c7ebfcecb66511ab0aa778&amp;stat=instructions:u\">https://perf.rust-lang.org/compare.html?start=1fa54ad9680cc82e7301f8ed4e9b7402dfd6ce0e&amp;end=0701419e96d94e5493c7ebfcecb66511ab0aa778&amp;stat=instructions:u</a></p>",
        "id": 204522423,
        "sender_full_name": "njn",
        "timestamp": 1595319816
    },
    {
        "content": "<p>The absolute values are sufficiently different due to other changes landing that it's really hard to compare them direclty. That's why it would be good to check for possible regressions. I hope you are right and there weren't any</p>",
        "id": 204522486,
        "sender_full_name": "njn",
        "timestamp": 1595319852
    },
    {
        "content": "<p>It's such a mess I'd rather over-measure than under-measure, once we have the tools to do so</p>",
        "id": 204522514,
        "sender_full_name": "njn",
        "timestamp": 1595319883
    },
    {
        "content": "<blockquote>\n<p>rust-lang:revert-74416-linker-locale-utf8</p>\n</blockquote>\n<p>huh, a <code>rust-lang</code> branch, that's a rare occurrence</p>",
        "id": 204522524,
        "sender_full_name": "eddyb",
        "timestamp": 1595319892
    },
    {
        "content": "<p>okay, I see, so that's the rollup the fix landed in</p>",
        "id": 204522556,
        "sender_full_name": "eddyb",
        "timestamp": 1595319911
    },
    {
        "content": "<p>but if we have numbers for the fix we can compare with the regressing rollup</p>",
        "id": 204522575,
        "sender_full_name": "eddyb",
        "timestamp": 1595319929
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> oh wow the UTF-8 revert try build is based on exactly the rollup that included the UTF-8 linker regression. so effectively we have numbers for <a href=\"https://github.com/rust-lang/rust/issues/74461\">#74461</a> without the regression</p>",
        "id": 204522772,
        "sender_full_name": "eddyb",
        "timestamp": 1595320110
    },
    {
        "content": "<p>or rather, without the largest perf change in it</p>",
        "id": 204522790,
        "sender_full_name": "eddyb",
        "timestamp": 1595320121
    },
    {
        "content": "<p>I was surprised to see identical numbers and it ended up because the commits were identical</p>",
        "id": 204522821,
        "sender_full_name": "eddyb",
        "timestamp": 1595320143
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> <a href=\"https://perf.rust-lang.org/compare.html?start=39d5a61f2e4e237123837f5162cc275c2fd7e625&amp;end=556b0eb41b4273f0dcde2cbc2bc9f53e2c09d688\">https://perf.rust-lang.org/compare.html?start=39d5a61f2e4e237123837f5162cc275c2fd7e625&amp;end=556b0eb41b4273f0dcde2cbc2bc9f53e2c09d688</a></p>",
        "id": 204522849,
        "sender_full_name": "eddyb",
        "timestamp": 1595320170
    },
    {
        "content": "<p>so yeah there's a huge regression hiding in there lol</p>",
        "id": 204522860,
        "sender_full_name": "eddyb",
        "timestamp": 1595320186
    },
    {
        "content": "<p>but only on one benchmark, weird</p>",
        "id": 204522867,
        "sender_full_name": "eddyb",
        "timestamp": 1595320195
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> did we change anything on <a href=\"http://perf.rust-lang.org\">perf.rust-lang.org</a> in terms of how std is built?</p>",
        "id": 204523080,
        "sender_full_name": "eddyb",
        "timestamp": 1595320342
    },
    {
        "content": "<p>I remember seeing something but I'm not sure</p>",
        "id": 204523087,
        "sender_full_name": "eddyb",
        "timestamp": 1595320349
    },
    {
        "content": "<p>the non-determinism might be back, is why I'm asking</p>",
        "id": 204523115,
        "sender_full_name": "eddyb",
        "timestamp": 1595320370
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> to summarize a bit, I think these are my suggestions to prioritize (of the ones listed above, I didn't look for other suspects in the rollups):</p>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues/74461\"><a href=\"https://github.com/rust-lang/rust/issues/74461\"><a href=\"https://github.com/rust-lang/rust/issues/74461\">#74461</a></a></a> (18 PRs)<ul>\n<li>(none, there's only 1 incremental-only regression if we ignore the UTF-8 linker one, and it's weird) </li>\n</ul>\n</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/74468\"><a href=\"https://github.com/rust-lang/rust/issues/74468\"><a href=\"https://github.com/rust-lang/rust/issues/74468\">#74468</a></a></a> (11 PRs)<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues/74069\">#74069</a> (Compare tagged/niche-filling layout and pick the best one)</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/74493\"><a href=\"https://github.com/rust-lang/rust/issues/74493\"><a href=\"https://github.com/rust-lang/rust/issues/74493\">#74493</a></a></a> (7 PRs)<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues/74071\">#74071</a> (rustc_metadata: Make crate loading fully speculative)</li>\n</ul>\n</li>\n</ul>",
        "id": 204523453,
        "sender_full_name": "eddyb",
        "timestamp": 1595320591
    },
    {
        "content": "<p>I guess it's just two, lol</p>",
        "id": 204523458,
        "sender_full_name": "eddyb",
        "timestamp": 1595320595
    },
    {
        "content": "<p>based on how much these account for their respective rollups, we can figure out what to do with the rest (or in what order). idk what the procedure for getting try builds for these is though</p>",
        "id": 204523536,
        "sender_full_name": "eddyb",
        "timestamp": 1595320663
    },
    {
        "content": "<p>oh the third rollup is the one with the UTF-8 linker revert in it, I should look more closely at it</p>",
        "id": 204523795,
        "sender_full_name": "eddyb",
        "timestamp": 1595320858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> okay just checked (using the last two links from you) and <a href=\"https://github.com/rust-lang/rust/issues/74493\">#74493</a> (rollup w/ the UTF-8 linker revert in it) has a <em>larger</em> absolute win on <code>helloworld-debug</code> than the try build. so we're likely looking at another win in the rollup, not another regression - <em>or</em> the UTF-8 linker thing is proportional to what's being linked, which the gimli change increased</p>",
        "id": 204524086,
        "sender_full_name": "eddyb",
        "timestamp": 1595321085
    },
    {
        "content": "<p>we probably want to revert, or at least make a try build with a revert, of the gimli change, to be able to measure the whole effect of the rollups overall</p>",
        "id": 204524248,
        "sender_full_name": "eddyb",
        "timestamp": 1595321231
    },
    {
        "content": "<p>to make sure that we found everything</p>",
        "id": 204524256,
        "sender_full_name": "eddyb",
        "timestamp": 1595321244
    },
    {
        "content": "<p>std is no longer built on perf itself because that broke when gimli landed</p>",
        "id": 204530136,
        "sender_full_name": "simulacrum",
        "timestamp": 1595325837
    },
    {
        "content": "<p>I can take on the tasks you suggested for me</p>",
        "id": 204530285,
        "sender_full_name": "simulacrum",
        "timestamp": 1595325961
    },
    {
        "content": "<p>okay, we should keep an eye out for non-determinism, maybe it's not back</p>",
        "id": 204530493,
        "sender_full_name": "eddyb",
        "timestamp": 1595326105
    },
    {
        "content": "<p>can we bench the same commit twice and compare? or is that too expensive?</p>",
        "id": 204534967,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1595329909
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"217864\">@matthiaskrgr</span> the problem that we had fixed was between rustc versions, due to how core/std was built. it's technically no longer a problem, but if <code>rustc-perf</code> doesn't build its own core/std there's a risk of something we're not aware of bringing it back</p>",
        "id": 204535810,
        "sender_full_name": "eddyb",
        "timestamp": 1595330541
    },
    {
        "content": "<p>Okay I've landed the auto rollup=never posting</p>\n<p>I'm working on the \"get me a try build for a rollup merge\" now</p>",
        "id": 204536271,
        "sender_full_name": "simulacrum",
        "timestamp": 1595330968
    },
    {
        "content": "<p>would that amount to trying to merge one of the PRs in a rollup on top of the parent of the whole rollup, and pushing that to the <code>try</code> branch?</p>",
        "id": 204536380,
        "sender_full_name": "eddyb",
        "timestamp": 1595331052
    },
    {
        "content": "<p>after which @bors does its thing on its own?</p>",
        "id": 204536389,
        "sender_full_name": "eddyb",
        "timestamp": 1595331059
    },
    {
        "content": "<p>/me remembers having to push manually to <code>try</code></p>",
        "id": 204536417,
        "sender_full_name": "eddyb",
        "timestamp": 1595331075
    },
    {
        "content": "<p>yeah except the current plan is to have bors take care of pushing to try</p>",
        "id": 204542310,
        "sender_full_name": "simulacrum",
        "timestamp": 1595335553
    },
    {
        "content": "<p>i.e., we'd just automatically open a new PR, and run the normal commands on that</p>",
        "id": 204542360,
        "sender_full_name": "simulacrum",
        "timestamp": 1595335569
    },
    {
        "content": "<p>I've not yet thought about a way to avoid the implicit race with bors merging something to master but we can at least detect it and abort if it happens, so not too worried</p>",
        "id": 204542394,
        "sender_full_name": "simulacrum",
        "timestamp": 1595335599
    },
    {
        "content": "<p>(probably initial draft will just ignore such races)</p>",
        "id": 204542412,
        "sender_full_name": "simulacrum",
        "timestamp": 1595335615
    },
    {
        "content": "<p>Ignore random code-blocks and such, but <a href=\"https://github.com/rust-lang/rust/pull/74592\">https://github.com/rust-lang/rust/pull/74592</a> is the first trial run of the tool</p>",
        "id": 204568371,
        "sender_full_name": "simulacrum",
        "timestamp": 1595347998
    },
    {
        "content": "<p>(I've fixed most of the bugs I think that were identified in that PR)</p>",
        "id": 204568394,
        "sender_full_name": "simulacrum",
        "timestamp": 1595348011
    },
    {
        "content": "<p>I've kicked off two of these in <a href=\"https://github.com/rust-lang/rust/pull/74592\">https://github.com/rust-lang/rust/pull/74592</a> and <a href=\"https://github.com/rust-lang/rust/pull/74596\">https://github.com/rust-lang/rust/pull/74596</a> but going to hold off on more until those come back with some numbers.</p>",
        "id": 204570278,
        "sender_full_name": "simulacrum",
        "timestamp": 1595348981
    },
    {
        "content": "<p>I've asked in <a class=\"stream\" data-stream-id=\"242791\" href=\"/#narrow/stream/242791-t-infra\">#t-infra</a> about thoughts on better approaches to generating these artifacts, I'm not really a fan of these PRs -- we start rapidly accumulating noise and just generally it seems not great.</p>\n<p>I think maybe looking at <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>'s idea for a \"perf dashboard\" which logs all landed PRs on it would be a good way to do this, with something like dropdowns for rollups so these post-landing tests can slot in</p>",
        "id": 204570464,
        "sender_full_name": "simulacrum",
        "timestamp": 1595349087
    },
    {
        "content": "<p>I'll look into the tagging of artifacts with metadata as well that we can display on the site soon</p>",
        "id": 204570506,
        "sender_full_name": "simulacrum",
        "timestamp": 1595349111
    },
    {
        "content": "<p>I think seeing all PRs for a rollup from the dashboard would be helpful</p>",
        "id": 204570964,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595349344
    },
    {
        "content": "<p>(but I'm also not in charge of triage so you should take my opinion with a grain of salt :P)</p>",
        "id": 204571030,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595349380
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> okay so the try-build tooling seems to be working, though is a bit manual right now still</p>\n<p>e.g., see <a href=\"https://github.com/rust-lang/rust/pull/74596\">https://github.com/rust-lang/rust/pull/74596</a> which is fully complete</p>\n<p>Basically you run the initial command (wherever), <code>@rust-timer make-pr-for 43ba8409d7c7f93d6f0b3c22fe1b193788ff6162</code>, like <a href=\"https://github.com/rust-lang/rust/pull/74071#issuecomment-661957211\">here</a>, then wait a while, then once the bot says it's done you click on the link as usual.</p>\n<p>That link is wrong though, what you want is to pull the \"reverted to $base\" commit from the generated PR (e.g., 1fa54ad from <a href=\"https://github.com/rust-lang/rust/issues/74596\">#74596</a>).</p>\n<p>If you put that as the start commit in the comparison URL then you get a correct URL, e.g., <a href=\"https://perf.rust-lang.org/compare.html?start=1fa54ad9680cc82e7301f8ed4e9b7402dfd6ce0e&amp;end=fc4fbd1d24fb634a895e2f39f495cb3d0a2472d6\">https://perf.rust-lang.org/compare.html?start=1fa54ad9680cc82e7301f8ed4e9b7402dfd6ce0e&amp;end=fc4fbd1d24fb634a895e2f39f495cb3d0a2472d6</a> for <a href=\"https://github.com/rust-lang/rust/pull/74596\">https://github.com/rust-lang/rust/pull/74596</a>.</p>\n<p>I talked with Pietro today and I think we can cut this down to a much smoother process, that'll look something like this:</p>\n<ul>\n<li>find a roll-up that regressed/improved things</li>\n<li>choose PRs you'd like to benchmark from it</li>\n<li>go to each of those PRs, run <code>@rust-timer post-merge-test</code> or so</li>\n<li>that'll kick off a build automatically and post on that PR when it's finished with the results link</li>\n</ul>\n<p>Suggestions to that process appreciated.</p>",
        "id": 204607136,
        "sender_full_name": "simulacrum",
        "timestamp": 1595368375
    },
    {
        "content": "<p>For now generally speaking we can kick off 1-2 builds at a time with the current impl and it should work, and I hope to implement the new design this weekend (or sooner).</p>",
        "id": 204607185,
        "sender_full_name": "simulacrum",
        "timestamp": 1595368410
    },
    {
        "content": "<p>btw those results, if you disable all \"cache states\" other than <code>full</code>, it's like a 0.4% win</p>",
        "id": 204607252,
        "sender_full_name": "eddyb",
        "timestamp": 1595368447
    },
    {
        "content": "<p>at least on <code>ucd</code> and <code>regex</code>. I wish we had a better way to visualize this, but it seems hard</p>",
        "id": 204607289,
        "sender_full_name": "eddyb",
        "timestamp": 1595368480
    },
    {
        "content": "<p>then again, could be noise, hard to tell without instruction count measurements in <code>-Z self-profile</code> (which is what I should be working on instead of opining on perf results randomly :P)</p>",
        "id": 204607348,
        "sender_full_name": "eddyb",
        "timestamp": 1595368542
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> All that seems reasonable, so long as it's documented. The <code>collector</code> README currently has some info on doing CI runs, perhaps info should be added there?</p>",
        "id": 204607408,
        "sender_full_name": "njn",
        "timestamp": 1595368564
    },
    {
        "content": "<p>This will also need mentioning in the triaging README, but I can do that once this has settled down a bit</p>",
        "id": 204607435,
        "sender_full_name": "njn",
        "timestamp": 1595368583
    },
    {
        "content": "<p>yeah so I've been holding off until it's fully implemented and tested :)</p>",
        "id": 204607438,
        "sender_full_name": "simulacrum",
        "timestamp": 1595368585
    },
    {
        "content": "<p>Thank you so much for this, it will make this kind of situation so much more tractable</p>",
        "id": 204607476,
        "sender_full_name": "njn",
        "timestamp": 1595368616
    },
    {
        "content": "<p>feel free to trial the make-pr-for functionality as well on a few SHAs at a time, though up to you if you think it's \"important enough\" to do now or rather wait a bit</p>",
        "id": 204607531,
        "sender_full_name": "simulacrum",
        "timestamp": 1595368659
    },
    {
        "content": "<p>I'm happy to let you drive this, I'll probably get one of the steps wrong</p>",
        "id": 204608592,
        "sender_full_name": "njn",
        "timestamp": 1595369309
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> you were correct that <a href=\"https://github.com/rust-lang/rust/pull/74069#issuecomment-662166827\">https://github.com/rust-lang/rust/pull/74069#issuecomment-662166827</a> was a regression and was masked by something else in <a href=\"https://github.com/rust-lang/rust/pull/74468\">https://github.com/rust-lang/rust/pull/74468</a></p>",
        "id": 204617718,
        "sender_full_name": "simulacrum",
        "timestamp": 1595376596
    },
    {
        "content": "<p>I posted a revert <a href=\"https://github.com/rust-lang/rust/pull/74611\">https://github.com/rust-lang/rust/pull/74611</a></p>",
        "id": 204617765,
        "sender_full_name": "simulacrum",
        "timestamp": 1595376608
    },
    {
        "content": "<p>updated triage log with that info</p>",
        "id": 204618003,
        "sender_full_name": "simulacrum",
        "timestamp": 1595376883
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> That was in a rollup with 11 PRs, and we hadn't identified any regressions prior to now. So perhaps <a href=\"https://github.com/rust-lang/rust/issues/74069\">#74069</a> was the only regression out of the 11?</p>",
        "id": 204620359,
        "sender_full_name": "njn",
        "timestamp": 1595379324
    },
    {
        "content": "<p>I'm a bit confused, what do you mean we didn't identify any regressions?</p>",
        "id": 204620432,
        "sender_full_name": "simulacrum",
        "timestamp": 1595379366
    },
    {
        "content": "<p>(you mean that we did not know the culprit?)</p>",
        "id": 204620441,
        "sender_full_name": "simulacrum",
        "timestamp": 1595379376
    },
    {
        "content": "<p>prior to now, we didn't</p>",
        "id": 204620470,
        "sender_full_name": "njn",
        "timestamp": 1595379419
    },
    {
        "content": "<p>You said \"masked by something else\" above...</p>",
        "id": 204620484,
        "sender_full_name": "njn",
        "timestamp": 1595379429
    },
    {
        "content": "<p>Which sounds to me like you were saying that two perf-affecting PRs landed in a single rollup</p>",
        "id": 204620498,
        "sender_full_name": "njn",
        "timestamp": 1595379452
    },
    {
        "content": "<p>oh yeah</p>",
        "id": 204620620,
        "sender_full_name": "simulacrum",
        "timestamp": 1595379577
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> so I'm looking at the timing from this morning <a href=\"https://perf.rust-lang.org/compare.html?start=d3df8512d2c2afc6d2e7d8b5b951dd7f2ad77b02&amp;end=cfade73820883adf654fe34fd6b0b03a99458a51\">here</a></p>",
        "id": 204620622,
        "sender_full_name": "njn",
        "timestamp": 1595379585
    },
    {
        "content": "<p>I think I was thinking of other rollups</p>",
        "id": 204620623,
        "sender_full_name": "simulacrum",
        "timestamp": 1595379589
    },
    {
        "content": "<p>and I click on the \"compare\" link, and I get lots of commits in the range</p>",
        "id": 204620630,
        "sender_full_name": "njn",
        "timestamp": 1595379600
    },
    {
        "content": "<p>yeah that's \"fine\"</p>",
        "id": 204620698,
        "sender_full_name": "simulacrum",
        "timestamp": 1595379634
    },
    {
        "content": "<p>if you look at the second to last commit, it represents a revert back to the start of the range</p>",
        "id": 204620709,
        "sender_full_name": "simulacrum",
        "timestamp": 1595379647
    },
    {
        "content": "<p>we can't avoid this with the current setup because it'll always rebase us atop <em>current</em> master</p>",
        "id": 204620730,
        "sender_full_name": "simulacrum",
        "timestamp": 1595379670
    },
    {
        "content": "<p>once we start pushing directly to a branch ourselves then that problem will go away</p>",
        "id": 204620746,
        "sender_full_name": "simulacrum",
        "timestamp": 1595379685
    },
    {
        "content": "<p>but the compare there is just of that PR</p>",
        "id": 204620763,
        "sender_full_name": "simulacrum",
        "timestamp": 1595379702
    },
    {
        "content": "<p>Ok, I trust you if you say it's expected.</p>",
        "id": 204620771,
        "sender_full_name": "njn",
        "timestamp": 1595379713
    },
    {
        "content": "<p>the good news is that these results are basically identical to the regression from the original 11-PR-rollup, <a href=\"https://perf.rust-lang.org/compare.html?start=d3df8512d2c2afc6d2e7d8b5b951dd7f2ad77b02&amp;end=7d31ffc1ac9e9ea356e896e63307168a64501b9d&amp;stat=instructions:u\">here</a></p>",
        "id": 204620819,
        "sender_full_name": "njn",
        "timestamp": 1595379733
    },
    {
        "content": "<p>Which is good evidence that there was only one regression in that rollup</p>",
        "id": 204620831,
        "sender_full_name": "njn",
        "timestamp": 1595379742
    },
    {
        "content": "<p>yep that was my conclusion as well</p>",
        "id": 204620852,
        "sender_full_name": "simulacrum",
        "timestamp": 1595379771
    },
    {
        "content": "<p>Ok, so we still have to determine if <a href=\"https://github.com/rust-lang/rust/issues/74461\">#74461</a>, which had 18 PRs, had any regressions other than <a href=\"https://github.com/rust-lang/rust/issues/74416\">#74416</a>, which has been reverted. I guess we're still waiting on some perf runs for that?</p>",
        "id": 204621051,
        "sender_full_name": "njn",
        "timestamp": 1595379966
    },
    {
        "content": "<p>And the other significant one is libbacktrace in <a href=\"https://github.com/rust-lang/rust/issues/73441\">#73441</a>. The perf effects there are clear because it didn't land in a rollup; it's more of an \"evaluate tradeoffs and make decisions\" situation.</p>",
        "id": 204621085,
        "sender_full_name": "njn",
        "timestamp": 1595380034
    },
    {
        "content": "<p>the easiest way to find out what the remaining rollup fallout is to run perf on a revert of gimli</p>",
        "id": 204621105,
        "sender_full_name": "eddyb",
        "timestamp": 1595380060
    },
    {
        "content": "<p>on top of all the other reverts we want to make (which may be just 1?)</p>",
        "id": 204621157,
        "sender_full_name": "eddyb",
        "timestamp": 1595380085
    },
    {
        "content": "<p>I haven't kicked off anything for <a href=\"https://github.com/rust-lang/rust/issues/74461\">#74461</a></p>",
        "id": 204621294,
        "sender_full_name": "simulacrum",
        "timestamp": 1595380246
    },
    {
        "content": "<p>IOW, we (or at least I) want to see what would've happened, had the libbacktrace/gimli PR never landed</p>",
        "id": 204621878,
        "sender_full_name": "eddyb",
        "timestamp": 1595380863
    },
    {
        "content": "<p>after accounting for the UTF-8 linker regression and the enum layout one, being reverted</p>",
        "id": 204621893,
        "sender_full_name": "eddyb",
        "timestamp": 1595380895
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"120989\">@njn</span> oh, also, I keep forgetting, but we already have results for that rollup <a href=\"https://github.com/rust-lang/rust/pull/74461#issuecomment-661715468\">https://github.com/rust-lang/rust/pull/74461#issuecomment-661715468</a></p>",
        "id": 204621961,
        "sender_full_name": "eddyb",
        "timestamp": 1595380959
    },
    {
        "content": "<p>and they're <em>weird</em></p>",
        "id": 204621966,
        "sender_full_name": "eddyb",
        "timestamp": 1595380972
    },
    {
        "content": "<p>that's the combined effect of the rollup itself + the revert of  \"<a href=\"https://github.com/rust-lang/rust/issues/74416\">#74416</a> (Use an UTF-8 locale for the linker.)\"</p>",
        "id": 204621990,
        "sender_full_name": "eddyb",
        "timestamp": 1595381024
    },
    {
        "content": "<p>so we could look for what might've caused <em>that</em></p>",
        "id": 204622039,
        "sender_full_name": "eddyb",
        "timestamp": 1595381048
    },
    {
        "content": "<p>I think last I looked at that comment it seemed to point at random commits or something, i.e., lots included in between too</p>",
        "id": 204622044,
        "sender_full_name": "simulacrum",
        "timestamp": 1595381052
    },
    {
        "content": "<p>that's not just \"a freak accident\"</p>",
        "id": 204622047,
        "sender_full_name": "eddyb",
        "timestamp": 1595381056
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Ctrl+F \"auto merge\" - only 2 results</p>",
        "id": 204622063,
        "sender_full_name": "eddyb",
        "timestamp": 1595381082
    },
    {
        "content": "<p>(in <a href=\"https://github.com/rust-lang/rust/compare/39d5a61f2e4e237123837f5162cc275c2fd7e625...556b0eb41b4273f0dcde2cbc2bc9f53e2c09d688\">https://github.com/rust-lang/rust/compare/39d5a61f2e4e237123837f5162cc275c2fd7e625...556b0eb41b4273f0dcde2cbc2bc9f53e2c09d688</a>)</p>",
        "id": 204622071,
        "sender_full_name": "eddyb",
        "timestamp": 1595381097
    },
    {
        "content": "<p>those rustdoc results look just like <a href=\"https://perf.rust-lang.org/compare.html?start=48036804d2bc461b243c5d291b850e44bcca68ef&amp;end=d7f94516345a36ddfcd68cbdf1df835d356795c3&amp;stat=instructions:u\">https://perf.rust-lang.org/compare.html?start=48036804d2bc461b243c5d291b850e44bcca68ef&amp;end=d7f94516345a36ddfcd68cbdf1df835d356795c3&amp;stat=instructions:u</a>, from <a href=\"https://github.com/rust-lang/rust/issues/74518\">#74518</a></p>",
        "id": 204622085,
        "sender_full_name": "njn",
        "timestamp": 1595381116
    },
    {
        "content": "<p>yeah I'm not worried about rustdoc, the weird thing is the <code>script-servo-2-opt</code> one</p>",
        "id": 204622096,
        "sender_full_name": "eddyb",
        "timestamp": 1595381146
    },
    {
        "content": "<p>also there's some sort of trait system improvement</p>",
        "id": 204622098,
        "sender_full_name": "eddyb",
        "timestamp": 1595381158
    },
    {
        "content": "<p>as witnessed by my still-has-a-really-long-name-lol-we-never-fixed-that benchmark</p>",
        "id": 204622142,
        "sender_full_name": "eddyb",
        "timestamp": 1595381180
    },
    {
        "content": "<p>Ok, but if we've concluded that other effects in that 18-PR-rollup are almost entirely &lt; 1%, that's a good thing</p>",
        "id": 204622164,
        "sender_full_name": "njn",
        "timestamp": 1595381240
    },
    {
        "content": "<p>oh hey actually renaming the benchmark is something anyone can do now I think</p>",
        "id": 204622170,
        "sender_full_name": "simulacrum",
        "timestamp": 1595381263
    },
    {
        "content": "<p>yeah I'm glad the revert happened right away. it's the largest rollup of the 3, too, so that's nice</p>",
        "id": 204622209,
        "sender_full_name": "eddyb",
        "timestamp": 1595381282
    },
    {
        "content": "<p>just a PR with a rename of the folder and a migration on both sqlite and postgres dbs and it should automatically just happen</p>",
        "id": 204622218,
        "sender_full_name": "simulacrum",
        "timestamp": 1595381284
    },
    {
        "content": "<p>I almost missed it because I wasn't paying attention to what was landing at the time</p>",
        "id": 204622221,
        "sender_full_name": "eddyb",
        "timestamp": 1595381293
    },
    {
        "content": "<p>I basically ignore <code>script-servo-2-opt</code> incremental results now, they jump around like crazy, seemingly due to CGU partitioning</p>",
        "id": 204622224,
        "sender_full_name": "njn",
        "timestamp": 1595381301
    },
    {
        "content": "<p>ooof</p>",
        "id": 204622227,
        "sender_full_name": "eddyb",
        "timestamp": 1595381310
    },
    {
        "content": "<p>so the rollup + 1 revert is case closed?</p>",
        "id": 204622235,
        "sender_full_name": "eddyb",
        "timestamp": 1595381328
    },
    {
        "content": "<p>like +/-25% isn't uncommon</p>",
        "id": 204622236,
        "sender_full_name": "njn",
        "timestamp": 1595381330
    },
    {
        "content": "<p>The 18-PR one? Sounds like it</p>",
        "id": 204622246,
        "sender_full_name": "njn",
        "timestamp": 1595381345
    },
    {
        "content": "<p>sweet! I think we've found everything. so we can do the gimli revert perf run to confirm</p>",
        "id": 204622260,
        "sender_full_name": "eddyb",
        "timestamp": 1595381380
    },
    {
        "content": "<p>Just to clarify: I think these results show that the linker problem was all of the regression. Excluding that, the remaining 17 PRs were actually a slight speedup, except for one serde doc result, and the one script-servo-opt incremental result. Right?</p>",
        "id": 204622266,
        "sender_full_name": "njn",
        "timestamp": 1595381398
    },
    {
        "content": "<p>indeed</p>",
        "id": 204622310,
        "sender_full_name": "eddyb",
        "timestamp": 1595381409
    },
    {
        "content": "<p>we should update <a href=\"https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-07-21.md\">https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-07-21.md</a></p>",
        "id": 204622344,
        "sender_full_name": "simulacrum",
        "timestamp": 1595381469
    },
    {
        "content": "<p>I think we should just straight up land a gimli revert PR and immediately open a new PR with it plus related fixes (debuginfo reduction, notably)</p>",
        "id": 204622397,
        "sender_full_name": "simulacrum",
        "timestamp": 1595381548
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> does that seems reasonable? I think that's the last change we're not sure of</p>",
        "id": 204622402,
        "sender_full_name": "simulacrum",
        "timestamp": 1595381565
    },
    {
        "content": "<p>Yes please!</p>",
        "id": 204622428,
        "sender_full_name": "njn",
        "timestamp": 1595381611
    },
    {
        "content": "<p>I can update the triage log</p>",
        "id": 204622430,
        "sender_full_name": "njn",
        "timestamp": 1595381615
    },
    {
        "content": "<p>okay I can take on doing the revert and posting a \"re-land it\" PR immediately thereafter</p>",
        "id": 204622490,
        "sender_full_name": "simulacrum",
        "timestamp": 1595381687
    },
    {
        "content": "<p>I do really agree with alex's point though:</p>\n<blockquote>\n<p>These regressions are all defined by how rustc works with loading external crates and what it means to add more dependencies to a crate.</p>\n</blockquote>",
        "id": 204622495,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595381700
    },
    {
        "content": "<p>so while it makes sense to remove debuginfo in the near term, I think we should try to figure out why this had such an impact in the first place</p>",
        "id": 204622506,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595381723
    },
    {
        "content": "<p>oh for sure, I think there's definitely a world in which we look at the results with the (partial) perf fixes and say \"okay this is enough of a win on its merits that the perf loss is acceptable\"</p>",
        "id": 204622507,
        "sender_full_name": "simulacrum",
        "timestamp": 1595381727
    },
    {
        "content": "<p>but right now we just can't even make that evaluation realistically because of the amount of PRs and regressions etc flying around</p>",
        "id": 204622516,
        "sender_full_name": "simulacrum",
        "timestamp": 1595381759
    },
    {
        "content": "<p>gotcha, I just don't want this to be lost becuase we're busy putting out fires</p>",
        "id": 204622556,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595381777
    },
    {
        "content": "<p>nice, you should update TWiR as it just went out :)</p>",
        "id": 204622558,
        "sender_full_name": "Diggsey",
        "timestamp": 1595381795
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"295632\">@Diggory Blake</span> are we including the raw triage log or a link to it?</p>",
        "id": 204622578,
        "sender_full_name": "simulacrum",
        "timestamp": 1595381856
    },
    {
        "content": "<p>atm it says</p>\n<blockquote>\n<p>2020-07-21. A disastrous week. At least 7 regressions. 3 improvements. Lots of murkiness due to rollups.</p>\n</blockquote>",
        "id": 204622584,
        "sender_full_name": "Diggsey",
        "timestamp": 1595381880
    },
    {
        "content": "<p>ah okay</p>",
        "id": 204622623,
        "sender_full_name": "simulacrum",
        "timestamp": 1595381887
    },
    {
        "content": "<p>sounds like it can be qualified with some good news now</p>",
        "id": 204622627,
        "sender_full_name": "Diggsey",
        "timestamp": 1595381895
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> \"such an impact\" is actually mostly <a href=\"http://perf.rust-lang.org\">perf.rust-lang.org</a> not being tuned for absolute differences</p>",
        "id": 204622793,
        "sender_full_name": "eddyb",
        "timestamp": 1595382159
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> actually, hm, do we need to land the revert of gimli? Now that we've tracked everything down it might be enough to just use the revert PR and run try builds on it until we get to \"cancelling\" out the effects of the original PR</p>",
        "id": 204622802,
        "sender_full_name": "simulacrum",
        "timestamp": 1595382177
    },
    {
        "content": "<p>a few miliseconds looks huge</p>",
        "id": 204622804,
        "sender_full_name": "eddyb",
        "timestamp": 1595382179
    },
    {
        "content": "<p>or does that not make sense</p>",
        "id": 204622807,
        "sender_full_name": "simulacrum",
        "timestamp": 1595382184
    },
    {
        "content": "<p>I'm trying to see</p>",
        "id": 204622814,
        "sender_full_name": "simulacrum",
        "timestamp": 1595382187
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> that's what I had in mind earlier, just in case I wasn't super clear</p>",
        "id": 204622820,
        "sender_full_name": "eddyb",
        "timestamp": 1595382198
    },
    {
        "content": "<p>I am advocating for backing out the gimli change for now anyway</p>",
        "id": 204622827,
        "sender_full_name": "njn",
        "timestamp": 1595382213
    },
    {
        "content": "<p>not too particularly concerned about landing the revert vs doing something else, just the data from it</p>",
        "id": 204622828,
        "sender_full_name": "eddyb",
        "timestamp": 1595382214
    },
    {
        "content": "<p>basically the reason I ask is that there's like 3-4 other PRs that have been fixing things up since then</p>",
        "id": 204622841,
        "sender_full_name": "simulacrum",
        "timestamp": 1595382238
    },
    {
        "content": "<p>(as in, either way seems fine to me, landing the revert being the safer route I guess, especially if we're still landing other PRs)</p>",
        "id": 204622844,
        "sender_full_name": "eddyb",
        "timestamp": 1595382241
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/73441#issuecomment-662150293\">https://github.com/rust-lang/rust/pull/73441#issuecomment-662150293</a></p>",
        "id": 204622888,
        "sender_full_name": "njn",
        "timestamp": 1595382252
    },
    {
        "content": "<p>yeah you know let's just land the revert</p>",
        "id": 204622897,
        "sender_full_name": "simulacrum",
        "timestamp": 1595382277
    },
    {
        "content": "<p>I'm confident that's not the <em>wrong</em> decision</p>",
        "id": 204622900,
        "sender_full_name": "simulacrum",
        "timestamp": 1595382285
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> you say \"check regressed a lot\" but it's only a few miliseconds</p>",
        "id": 204622909,
        "sender_full_name": "eddyb",
        "timestamp": 1595382305
    },
    {
        "content": "<p>the UI is just really bad at showing that aspect of it</p>",
        "id": 204622916,
        "sender_full_name": "eddyb",
        "timestamp": 1595382328
    },
    {
        "content": "<p>A lot in relative terms</p>",
        "id": 204622918,
        "sender_full_name": "njn",
        "timestamp": 1595382335
    },
    {
        "content": "<p>since we've focused on proportional effects</p>",
        "id": 204622919,
        "sender_full_name": "eddyb",
        "timestamp": 1595382341
    },
    {
        "content": "<p>sure but that doesn't quantify the regression correctly</p>",
        "id": 204622922,
        "sender_full_name": "eddyb",
        "timestamp": 1595382350
    },
    {
        "content": "<p>\"everyone's compile times are one frame duration longer\" is different from \"20% regression\"</p>",
        "id": 204622969,
        "sender_full_name": "eddyb",
        "timestamp": 1595382400
    },
    {
        "content": "<p>and the relative presentation hides any differences in the absolute regression, too, if there were any</p>",
        "id": 204622980,
        "sender_full_name": "eddyb",
        "timestamp": 1595382428
    },
    {
        "content": "<p>if we know what the absolute regression is, we can try to track it down, break it apart, add more measurement points, etc.</p>",
        "id": 204623028,
        "sender_full_name": "eddyb",
        "timestamp": 1595382494
    },
    {
        "content": "<p>(I think we really need instruction counts on self-profile data to be able to quantify this better, personally)</p>",
        "id": 204623044,
        "sender_full_name": "simulacrum",
        "timestamp": 1595382529
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/74613\">https://github.com/rust-lang/rust/pull/74613</a> is the revert PR for gimli</p>",
        "id": 204623046,
        "sender_full_name": "simulacrum",
        "timestamp": 1595382534
    },
    {
        "content": "<p>I mean we could still have an absolute difference mode for rustc-perf</p>",
        "id": 204623054,
        "sender_full_name": "eddyb",
        "timestamp": 1595382555
    },
    {
        "content": "<p>and use other tools, like <code>perf record</code> to dig into it even if <code>-Z self-profile</code> isn't ready for this</p>",
        "id": 204623058,
        "sender_full_name": "eddyb",
        "timestamp": 1595382577
    },
    {
        "content": "<p>sure yes, and e.g. cachegrind</p>",
        "id": 204623060,
        "sender_full_name": "simulacrum",
        "timestamp": 1595382588
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/Follow-up.20to.20the.20bad.20perf.20triage.20of.202020-07-21/near/204623028\">said</a>:</p>\n<blockquote>\n<p>if we know what the absolute regression is, we can try to track it down, break it apart, add more measurement points, etc.</p>\n</blockquote>\n<p>I agree. And I want that done after a revert, so things are clear.</p>",
        "id": 204623062,
        "sender_full_name": "njn",
        "timestamp": 1595382592
    },
    {
        "content": "<p>my expectation is that <span class=\"user-mention\" data-user-id=\"120989\">@njn</span> or myself or whoever will checkout the revert PR and do some cachgrind diffing and such to try and figure out the source of the regression and, hopefully, pull some improvements out</p>",
        "id": 204623115,
        "sender_full_name": "simulacrum",
        "timestamp": 1595382636
    },
    {
        "content": "<p>er, the re-land PR</p>",
        "id": 204623118,
        "sender_full_name": "simulacrum",
        "timestamp": 1595382642
    },
    {
        "content": "<p>so the question is, do I drop everything and join on this? or is there enough time between the two of you to handle this?</p>",
        "id": 204623134,
        "sender_full_name": "eddyb",
        "timestamp": 1595382678
    },
    {
        "content": "<p>trying to prioritize and I'm not sure how soon we want to land this if we're doing a revert</p>",
        "id": 204623139,
        "sender_full_name": "eddyb",
        "timestamp": 1595382708
    },
    {
        "content": "<p>I think we should be able to handle it, though I imagine we'll pull in <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> or you on the crate-loading stuff for review purposes and such</p>",
        "id": 204623186,
        "sender_full_name": "simulacrum",
        "timestamp": 1595382737
    },
    {
        "content": "<p>in that case feel free to ping me when there is new data, and I'll try to see if I can find/remember anything relevant</p>",
        "id": 204623200,
        "sender_full_name": "eddyb",
        "timestamp": 1595382769
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> why does the revert have four commits, when the original landing only had one?</p>",
        "id": 204623201,
        "sender_full_name": "njn",
        "timestamp": 1595382775
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> because we've landed other PRs that depended on the landing since then</p>",
        "id": 204623211,
        "sender_full_name": "simulacrum",
        "timestamp": 1595382789
    },
    {
        "content": "<p>if you look at them there's a bump to the crate dep, some bootstrap fixes, etc</p>",
        "id": 204623213,
        "sender_full_name": "simulacrum",
        "timestamp": 1595382802
    },
    {
        "content": "<p>the landing introduced regressions unrelated to perf, too</p>",
        "id": 204623215,
        "sender_full_name": "simulacrum",
        "timestamp": 1595382815
    },
    {
        "content": "<p>something that might be useful btw is having one compiler that can use either version of libstd, because then you know you've accounted for the compiler itself not being different, but idk how much that helps</p>",
        "id": 204623224,
        "sender_full_name": "eddyb",
        "timestamp": 1595382840
    },
    {
        "content": "<p>presumably it would allow diff-ing profiles accurately?</p>",
        "id": 204623271,
        "sender_full_name": "eddyb",
        "timestamp": 1595382858
    },
    {
        "content": "<p>I personally expect that none of the regression comes from the compiler itself linking to backtrace-rs rather than libbacktrace</p>",
        "id": 204623304,
        "sender_full_name": "simulacrum",
        "timestamp": 1595382942
    },
    {
        "content": "<p>oh right I'm more thinking about it being the exact same executable</p>",
        "id": 204623362,
        "sender_full_name": "eddyb",
        "timestamp": 1595382988
    },
    {
        "content": "<p>(for low-level profiling)</p>",
        "id": 204623379,
        "sender_full_name": "eddyb",
        "timestamp": 1595383010
    },
    {
        "content": "<p>I think it won't matter for most tools that I know of</p>",
        "id": 204623411,
        "sender_full_name": "simulacrum",
        "timestamp": 1595383082
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> oh a fun way to repro the startup costs is just to add the dependencies without using them</p>",
        "id": 204623458,
        "sender_full_name": "eddyb",
        "timestamp": 1595383116
    },
    {
        "content": "<p>one of my plans was to add 1000 dependencies to std which are all basically just empty crates and see the perf effect of that</p>",
        "id": 204623467,
        "sender_full_name": "simulacrum",
        "timestamp": 1595383141
    },
    {
        "content": "<p>ahahaha</p>",
        "id": 204623471,
        "sender_full_name": "eddyb",
        "timestamp": 1595383146
    },
    {
        "content": "<p>frankly you should be able to do it without them being libstd dependencies, just dependencies of a single crate that then is used by a single empty crate</p>",
        "id": 204623485,
        "sender_full_name": "eddyb",
        "timestamp": 1595383180
    },
    {
        "content": "<p>yeah maybe we can just add that to perf.rlo as a benchmark</p>",
        "id": 204623555,
        "sender_full_name": "simulacrum",
        "timestamp": 1595383222
    },
    {
        "content": "<p>ideally the cost will just be that of <code>mmap</code>-ing each of the rlibs into memory and reading a few basic details</p>",
        "id": 204623566,
        "sender_full_name": "eddyb",
        "timestamp": 1595383242
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> oooh and we can make it ignore std changes by having it be <code>#![no_std]</code> - or even <code>#![no_core]</code></p>",
        "id": 204623578,
        "sender_full_name": "eddyb",
        "timestamp": 1595383266
    },
    {
        "content": "<p>I guess there's two scenarios -- there's the \"linear dependency chain 1000 crates deep\" and the \"I directly depend on 1000 crates\"</p>",
        "id": 204623579,
        "sender_full_name": "simulacrum",
        "timestamp": 1595383270
    },
    {
        "content": "<p>AFAIK the implementation doesn't distinguish</p>",
        "id": 204623583,
        "sender_full_name": "eddyb",
        "timestamp": 1595383281
    },
    {
        "content": "<p>that... seems broken, I shouldn't have to care about deps of my dep?</p>",
        "id": 204623587,
        "sender_full_name": "simulacrum",
        "timestamp": 1595383296
    },
    {
        "content": "<p>other than maybe blowing the stack?</p>",
        "id": 204623592,
        "sender_full_name": "eddyb",
        "timestamp": 1595383300
    },
    {
        "content": "<p>are we loading them for like spans or something?</p>",
        "id": 204623595,
        "sender_full_name": "simulacrum",
        "timestamp": 1595383310
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> your dep can freely refer to stuff in there</p>",
        "id": 204623599,
        "sender_full_name": "eddyb",
        "timestamp": 1595383317
    },
    {
        "content": "<p>oh, we don't inline?</p>",
        "id": 204623641,
        "sender_full_name": "simulacrum",
        "timestamp": 1595383327
    },
    {
        "content": "<p>I guess that makes sense but is a pain</p>",
        "id": 204623643,
        "sender_full_name": "simulacrum",
        "timestamp": 1595383335
    },
    {
        "content": "<p>I mean I expect it would be more expensive in the common case if we did inline entire crates' metadata :P</p>",
        "id": 204623655,
        "sender_full_name": "eddyb",
        "timestamp": 1595383360
    },
    {
        "content": "<p>but still the cost of finding each of them and confirming it's the right crate should be small. I suspect we're actually eagerly loading something like a list or a map</p>",
        "id": 204623696,
        "sender_full_name": "eddyb",
        "timestamp": 1595383413
    },
    {
        "content": "<p>that we might just never need</p>",
        "id": 204623702,
        "sender_full_name": "eddyb",
        "timestamp": 1595383420
    },
    {
        "content": "<p>this also means you might not see the problem for an empty dependency crate</p>",
        "id": 204623754,
        "sender_full_name": "eddyb",
        "timestamp": 1595383469
    },
    {
        "content": "<p>well not <em>entire</em> metadata</p>",
        "id": 204623784,
        "sender_full_name": "simulacrum",
        "timestamp": 1595383528
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> btw \"private deps\" could theoretically solve this if they're integrated well-enough</p>",
        "id": 204623838,
        "sender_full_name": "eddyb",
        "timestamp": 1595383572
    },
    {
        "content": "<p>that's basically what I was thinking of</p>",
        "id": 204623842,
        "sender_full_name": "simulacrum",
        "timestamp": 1595383582
    },
    {
        "content": "<p>we do need to ensure that nothing actually refers to that crate, outside of maybe encoded MIR. but maybe not even that?</p>",
        "id": 204623854,
        "sender_full_name": "eddyb",
        "timestamp": 1595383607
    },
    {
        "content": "<p>we should able to tell in rustc when serializing metadata or somewhere along those lines that crate B was a private dep so we need not tell consumers of crate A that they need to load its metadata (I guess unless they're linking in stuff? not sure, maybe linkers are already good enough)</p>",
        "id": 204623869,
        "sender_full_name": "simulacrum",
        "timestamp": 1595383632
    },
    {
        "content": "<p>that does imply no cross-crate codegen. so no generics that use the private dep, for example</p>",
        "id": 204623885,
        "sender_full_name": "eddyb",
        "timestamp": 1595383665
    },
    {
        "content": "<p>there's various levels of this you can do, but they all boil down to <em>deferring</em> even looking for the dependency on disk</p>",
        "id": 204623939,
        "sender_full_name": "eddyb",
        "timestamp": 1595383705
    },
    {
        "content": "<p>yeah</p>",
        "id": 204623954,
        "sender_full_name": "simulacrum",
        "timestamp": 1595383734
    },
    {
        "content": "<p>I suspect it would be too expensive to defer to the first time you have to translate a <code>CrateNum</code> to that dependency, but I don't know if we've ever measured it. <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> might've, though</p>",
        "id": 204623973,
        "sender_full_name": "eddyb",
        "timestamp": 1595383790
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> , <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> : did we reach a conclusion about <a href=\"https://github.com/rust-lang/rust/issues/74493\">#74493</a>, which reverted the linker regression? I was <a href=\"https://github.com/rust-lang/rust/pull/74493#issuecomment-661521298\">concerned</a> that another regression may have landed in that rollup and been masked by the linker reversion.</p>",
        "id": 204730054,
        "sender_full_name": "njn",
        "timestamp": 1595456941
    },
    {
        "content": "<p>no</p>",
        "id": 204730202,
        "sender_full_name": "simulacrum",
        "timestamp": 1595457022
    },
    {
        "content": "<p>we checked that it wasn't <a href=\"https://github.com/rust-lang/rust/issues/74071\">#74071</a> (rustc_metadata: Make crate loading fully speculative) though</p>",
        "id": 204730211,
        "sender_full_name": "simulacrum",
        "timestamp": 1595457027
    },
    {
        "content": "<p>not sure if the conclusion then is \"it wasn't anything\"</p>",
        "id": 204730226,
        "sender_full_name": "simulacrum",
        "timestamp": 1595457039
    },
    {
        "content": "<p>at the top of this thread I suggested checking <a href=\"https://github.com/rust-lang/rust/issues/74071\">#74071</a> and <a href=\"https://github.com/rust-lang/rust/issues/74201\">#74201</a></p>",
        "id": 204730383,
        "sender_full_name": "njn",
        "timestamp": 1595457138
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/74201\">https://github.com/rust-lang/rust/issues/74201</a> is an issue?</p>",
        "id": 204730601,
        "sender_full_name": "simulacrum",
        "timestamp": 1595457317
    },
    {
        "content": "<p>ah you meant <a href=\"https://github.com/rust-lang/rust/issues/74201\">#74201</a> (impl Index&lt;RangeFrom&gt; for CStr)</p>",
        "id": 204730636,
        "sender_full_name": "simulacrum",
        "timestamp": 1595457344
    },
    {
        "content": "<p>seems unlikely but I can kick off a build</p>",
        "id": 204730645,
        "sender_full_name": "simulacrum",
        "timestamp": 1595457351
    },
    {
        "content": "<p>er <a href=\"https://github.com/rust-lang/rust/pull/74021\">https://github.com/rust-lang/rust/pull/74021</a></p>",
        "id": 204730706,
        "sender_full_name": "simulacrum",
        "timestamp": 1595457372
    },
    {
        "content": "<p>kicked off <a href=\"https://github.com/rust-lang/rust/pull/74660\">https://github.com/rust-lang/rust/pull/74660</a></p>",
        "id": 204730792,
        "sender_full_name": "simulacrum",
        "timestamp": 1595457442
    },
    {
        "content": "<p>sorry, yes, <a href=\"https://github.com/rust-lang/rust/issues/74021\">#74021</a></p>",
        "id": 204730912,
        "sender_full_name": "njn",
        "timestamp": 1595457502
    },
    {
        "content": "<p>thanks</p>",
        "id": 204730929,
        "sender_full_name": "njn",
        "timestamp": 1595457516
    },
    {
        "content": "<p>I was hoping we'd use the gimli revert to confirm we've found everything in the \"bad range\"</p>",
        "id": 204759672,
        "sender_full_name": "eddyb",
        "timestamp": 1595478404
    },
    {
        "content": "<blockquote>\n<p>oh a fun way to repro the startup costs is just to add the dependencies without using them</p>\n</blockquote>\n<p>Well, now I’m interested from the playground’s perspective.</p>",
        "id": 204790023,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595507536
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> it's possible nothing gets loaded (and treated as a dependency, if you're building an rlib) until you name those crates</p>",
        "id": 204790282,
        "sender_full_name": "eddyb",
        "timestamp": 1595507707
    },
    {
        "content": "<p>generate a file full of <code>extern crate ...;</code> for every crate you're listing in <code>Cargo.toml</code>, and compare with an empty file :P</p>",
        "id": 204790307,
        "sender_full_name": "eddyb",
        "timestamp": 1595507729
    },
    {
        "content": "<p>(make sure to use <code>cargo check</code> or equivalent to not measure linking time too)</p>",
        "id": 204790970,
        "sender_full_name": "eddyb",
        "timestamp": 1595508100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> <a href=\"https://github.com/rust-lang/rust/pull/74493#issuecomment-663197255\">https://github.com/rust-lang/rust/pull/74493#issuecomment-663197255</a> -- I think that closes the investigation there.</p>",
        "id": 204845018,
        "sender_full_name": "simulacrum",
        "timestamp": 1595533468
    },
    {
        "content": "<p>I am concerned that I think we've already landed all planned reverts but performance has not yet gone to zero.</p>",
        "id": 204859235,
        "sender_full_name": "simulacrum",
        "timestamp": 1595542194
    },
    {
        "content": "<p>So presumably something snuck through.</p>",
        "id": 204859292,
        "sender_full_name": "simulacrum",
        "timestamp": 1595542216
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"120989\">@njn</span></p>",
        "id": 204859300,
        "sender_full_name": "simulacrum",
        "timestamp": 1595542223
    },
    {
        "content": "<p>Maybe I'm forgetting something though?</p>",
        "id": 204859463,
        "sender_full_name": "simulacrum",
        "timestamp": 1595542374
    },
    {
        "content": "<p>Have all the reversions been measured?</p>",
        "id": 204863398,
        "sender_full_name": "njn",
        "timestamp": 1595545463
    },
    {
        "content": "<p>I <em>think</em> so?</p>",
        "id": 204863438,
        "sender_full_name": "simulacrum",
        "timestamp": 1595545488
    },
    {
        "content": "<p>Or at least we have essentially latest master measured which would then include their effects</p>",
        "id": 204863453,
        "sender_full_name": "simulacrum",
        "timestamp": 1595545502
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/KyKk3HfNVKDFFxuTvP0fly_F/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/KyKk3HfNVKDFFxuTvP0fly_F/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/KyKk3HfNVKDFFxuTvP0fly_F/image.png\"></a></div>",
        "id": 204863656,
        "sender_full_name": "simulacrum",
        "timestamp": 1595545671
    },
    {
        "content": "<p>I think we had three clear regressions: the gimli one, the utf8 linker one, and the niche-filling one</p>",
        "id": 204864050,
        "sender_full_name": "njn",
        "timestamp": 1595546031
    },
    {
        "content": "<p>yes the latest commit includes reverts for all 3</p>",
        "id": 204864098,
        "sender_full_name": "simulacrum",
        "timestamp": 1595546050
    },
    {
        "content": "<p>(niche-filling is not individually benchmarked, though)</p>",
        "id": 204864102,
        "sender_full_name": "simulacrum",
        "timestamp": 1595546058
    },
    {
        "content": "<p>I'll take a close look, try to work out the situation</p>",
        "id": 204864106,
        "sender_full_name": "njn",
        "timestamp": 1595546063
    },
    {
        "content": "<p>I guess it's possible that something in <a href=\"https://github.com/rust-lang/rust/commit/2bbfa02b1b15974d5772b520aa027bf79f8c248e\">2bbfa02b1b15974d5772b520aa027bf79f8c248e</a> made things slower</p>",
        "id": 204864143,
        "sender_full_name": "simulacrum",
        "timestamp": 1595546124
    },
    {
        "content": "<p>(that landed between the niche-fill revert and gimli revert)</p>",
        "id": 204864156,
        "sender_full_name": "simulacrum",
        "timestamp": 1595546141
    },
    {
        "content": "<p>oh no we do have data on that</p>",
        "id": 204864217,
        "sender_full_name": "simulacrum",
        "timestamp": 1595546186
    },
    {
        "content": "<p>hm actually</p>",
        "id": 204864224,
        "sender_full_name": "simulacrum",
        "timestamp": 1595546207
    },
    {
        "content": "<p>okay, so <a href=\"https://perf.rust-lang.org/compare.html?start=e8b55a4ad230ebec762fdfc4f241ba98a98560af&amp;end=2bbfa02b1b15974d5772b520aa027bf79f8c248e&amp;stat=instructions:u\">https://perf.rust-lang.org/compare.html?start=e8b55a4ad230ebec762fdfc4f241ba98a98560af&amp;end=2bbfa02b1b15974d5772b520aa027bf79f8c248e&amp;stat=instructions:u</a> shows zero diff</p>",
        "id": 204864232,
        "sender_full_name": "simulacrum",
        "timestamp": 1595546218
    },
    {
        "content": "<p>which implies that either:</p>\n<ul>\n<li>the niche-filling wasn't the actual cause, and the revert as such had no effect</li>\n<li><a href=\"https://github.com/rust-lang/rust/commit/2bbfa02b1b15974d5772b520aa027bf79f8c248e\">2bbfa02b1b15974d5772b520aa027bf79f8c248e</a> undid the revert's gains perfectly</li>\n</ul>",
        "id": 204864325,
        "sender_full_name": "simulacrum",
        "timestamp": 1595546318
    },
    {
        "content": "<p>I guess maybe we should wait for niche filling revert to get benchmarked</p>",
        "id": 204864345,
        "sender_full_name": "simulacrum",
        "timestamp": 1595546343
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/lvk4x7IELP1rmsU6NxFYGqqA/Screen-Shot-2020-07-24-at-9.29.07-am.png\">Screen-Shot-2020-07-24-at-9.29.07-am.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/lvk4x7IELP1rmsU6NxFYGqqA/Screen-Shot-2020-07-24-at-9.29.07-am.png\" title=\"Screen-Shot-2020-07-24-at-9.29.07-am.png\"><img src=\"/user_uploads/4715/lvk4x7IELP1rmsU6NxFYGqqA/Screen-Shot-2020-07-24-at-9.29.07-am.png\"></a></div>",
        "id": 204864948,
        "sender_full_name": "njn",
        "timestamp": 1595546969
    },
    {
        "content": "<p>This is from <a href=\"https://perf.rust-lang.org/?start=9d09331e00b02f81c714b0c41ce3a38380dd36a2&amp;end=371917ab218de72a625227ba6eed7e84e610a058&amp;absolute=false&amp;stat=instructions%3Au\">here</a></p>",
        "id": 204864955,
        "sender_full_name": "njn",
        "timestamp": 1595546985
    },
    {
        "content": "<ul>\n<li>1st increase: d3df, rollup with the utf8 linker</li>\n<li>2nd increase: 7d31, rollup with niche filling</li>\n<li>3rd increase: 1fa5, gimli</li>\n<li>1st decrease: 0701, rollup with utf8 linker reversion</li>\n<li>2nd decrease: 3719, gimli reversion</li>\n</ul>",
        "id": 204864962,
        "sender_full_name": "njn",
        "timestamp": 1595546995
    },
    {
        "content": "<p>So I don't see the niche-filling reversion yet</p>",
        "id": 204865039,
        "sender_full_name": "njn",
        "timestamp": 1595547055
    },
    {
        "content": "<p>the gimli reversion is after the niche filling revert though</p>",
        "id": 204865273,
        "sender_full_name": "simulacrum",
        "timestamp": 1595547262
    },
    {
        "content": "<p>the niche filling revert should be seen as part of <a href=\"https://github.com/rust-lang/rust/commit/2bbfa02b1b15974d5772b520aa027bf79f8c248e\">2bbfa02b1b15974d5772b520aa027bf79f8c248e</a> right now afaict</p>",
        "id": 204865297,
        "sender_full_name": "simulacrum",
        "timestamp": 1595547293
    },
    {
        "content": "<p>niche-filling landed in revision fcac, but I don't see that on the graph</p>",
        "id": 204865427,
        "sender_full_name": "njn",
        "timestamp": 1595547432
    },
    {
        "content": "<p>right because we haven't benchmarked</p>",
        "id": 204865442,
        "sender_full_name": "simulacrum",
        "timestamp": 1595547456
    },
    {
        "content": "<p>but fcac is the parent of 2bbfa</p>",
        "id": 204865445,
        "sender_full_name": "simulacrum",
        "timestamp": 1595547460
    },
    {
        "content": "<p>so any changes that fcac caused, presuming that 2bbfa is perf neutral, should be visible in 2bbfa</p>",
        "id": 204865455,
        "sender_full_name": "simulacrum",
        "timestamp": 1595547476
    },
    {
        "content": "<p>Why is fcac not benchmarked?</p>",
        "id": 204865501,
        "sender_full_name": "njn",
        "timestamp": 1595547490
    },
    {
        "content": "<p>just haven't gotten to it yet</p>",
        "id": 204865537,
        "sender_full_name": "simulacrum",
        "timestamp": 1595547544
    },
    {
        "content": "<p>bors is faster than perf right now by around half an hour, on average, plus we have try builds</p>",
        "id": 204865547,
        "sender_full_name": "simulacrum",
        "timestamp": 1595547559
    },
    {
        "content": "<p>we can wait</p>",
        "id": 204865553,
        "sender_full_name": "simulacrum",
        "timestamp": 1595547569
    },
    {
        "content": "<p>Ugh, we should have done a CI run on the niche-filling reversion, to be sure</p>",
        "id": 204865561,
        "sender_full_name": "njn",
        "timestamp": 1595547580
    },
    {
        "content": "<p>Hm yeah probably</p>",
        "id": 204865724,
        "sender_full_name": "simulacrum",
        "timestamp": 1595547723
    },
    {
        "content": "<p>Though I am fairly confident in our tooling for checking</p>",
        "id": 204865750,
        "sender_full_name": "simulacrum",
        "timestamp": 1595547742
    },
    {
        "content": "<p>my guess right now is that something else is wrong</p>",
        "id": 204865781,
        "sender_full_name": "simulacrum",
        "timestamp": 1595547777
    },
    {
        "content": "<p>something else caused a regression, you mean?</p>",
        "id": 204865796,
        "sender_full_name": "njn",
        "timestamp": 1595547789
    },
    {
        "content": "<p>either that or 2bbfa contains a regression or something like that</p>",
        "id": 204865808,
        "sender_full_name": "simulacrum",
        "timestamp": 1595547801
    },
    {
        "content": "<p>for example, niche filling might've been fixed by some unrelated changes, so the revert had no effect, but the unrelated changes were masked as a perf improvement by other changes</p>",
        "id": 204865847,
        "sender_full_name": "simulacrum",
        "timestamp": 1595547842
    },
    {
        "content": "<p>conclusion: rollups are very bad</p>",
        "id": 204865888,
        "sender_full_name": "simulacrum",
        "timestamp": 1595547857
    },
    {
        "content": "<p>for perf analysis, indeed</p>",
        "id": 204865917,
        "sender_full_name": "njn",
        "timestamp": 1595547892
    },
    {
        "content": "<p>3 bad regressions in 3 consecutive merges is also a nightmare</p>",
        "id": 204866012,
        "sender_full_name": "njn",
        "timestamp": 1595547976
    },
    {
        "content": "<p>Actually... for Firefox, if a change has a sufficiently large effect on perf, a comment is auto-posted into the bug</p>",
        "id": 204866074,
        "sender_full_name": "njn",
        "timestamp": 1595548050
    },
    {
        "content": "<p>Could we do that for PRs?</p>",
        "id": 204866079,
        "sender_full_name": "njn",
        "timestamp": 1595548056
    },
    {
        "content": "<p>That way we'd get faster feedback, and a better chance of a reversion before more regressions can occur</p>",
        "id": 204866116,
        "sender_full_name": "njn",
        "timestamp": 1595548082
    },
    {
        "content": "<p>probably wouldn't have helped for this week's perfect storm, but might help in many cases</p>",
        "id": 204866147,
        "sender_full_name": "njn",
        "timestamp": 1595548097
    },
    {
        "content": "<p>What do you mean? Posting the results if at least one benchmark differs by &gt;5% or something like that into the (merged) PR?</p>",
        "id": 204866150,
        "sender_full_name": "simulacrum",
        "timestamp": 1595548101
    },
    {
        "content": "<p>yes</p>",
        "id": 204866156,
        "sender_full_name": "njn",
        "timestamp": 1595548106
    },
    {
        "content": "<p>yeah that's definitely possible</p>",
        "id": 204866168,
        "sender_full_name": "simulacrum",
        "timestamp": 1595548114
    },
    {
        "content": "<p>open an issue? I think we might have one already</p>",
        "id": 204866225,
        "sender_full_name": "simulacrum",
        "timestamp": 1595548176
    },
    {
        "content": "<p>It would also be quite possible for us to post a revert to make people more likely to notice</p>",
        "id": 204866447,
        "sender_full_name": "simulacrum",
        "timestamp": 1595548360
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I couldn't find an existing issue about this, so I made <a href=\"https://github.com/rust-lang/rustc-perf/issues/711\">https://github.com/rust-lang/rustc-perf/issues/711</a></p>",
        "id": 204867013,
        "sender_full_name": "njn",
        "timestamp": 1595548918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> Should I open a GitHub issue about documenting rollup procedure? What repository would that be part of?</p>",
        "id": 204870691,
        "sender_full_name": "njn",
        "timestamp": 1595553174
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> forge. It's on my to-do list, just not now, and I don't consider it high priority since I'm currently the only person doing rollups</p>",
        "id": 204871715,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1595554636
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> Okay so we/I were wrong about <a href=\"https://github.com/rust-lang/rust/pull/74468\">https://github.com/rust-lang/rust/pull/74468</a> but I'm not yet sure exactly what that means. See <a href=\"https://github.com/rust-lang/rust/pull/74716#issuecomment-663735771\">https://github.com/rust-lang/rust/pull/74716#issuecomment-663735771</a></p>",
        "id": 204967419,
        "sender_full_name": "simulacrum",
        "timestamp": 1595625102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I'm going to do some local runs to investigate <a href=\"https://github.com/rust-lang/rust/issues/74468\">#74468</a></p>",
        "id": 205070665,
        "sender_full_name": "njn",
        "timestamp": 1595803956
    },
    {
        "content": "<p>The perf results from the landing are missing, though :(  (<a href=\"https://perf.rust-lang.org/compare.html?start=d3df8512d2c2afc6d2e7d8b5b951dd7f2ad77b02&amp;end=7d31ffc1ac9e9ea356e896e63307168a64501b9d&amp;stat=instructions:u\">here</a>)</p>",
        "id": 205070669,
        "sender_full_name": "njn",
        "timestamp": 1595803977
    },
    {
        "content": "<p>I know the worst result was 10%</p>",
        "id": 205070739,
        "sender_full_name": "njn",
        "timestamp": 1595804122
    },
    {
        "content": "<p>But it would be really helpful to have those results so I know which benchmarks/runs regressed, and only have to measure a subset :(</p>",
        "id": 205070743,
        "sender_full_name": "njn",
        "timestamp": 1595804144
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> oh they're not missing just moved</p>",
        "id": 205071005,
        "sender_full_name": "simulacrum",
        "timestamp": 1595804574
    },
    {
        "content": "<p><a href=\"https://perf.rust-lang.org/compare.html?start=d3df8512d2c2afc6d2e7d8b5b951dd7f2ad77b02-v1&amp;end=7d31ffc1ac9e9ea356e896e63307168a64501b9d&amp;stat=instructions:u\">https://perf.rust-lang.org/compare.html?start=d3df8512d2c2afc6d2e7d8b5b951dd7f2ad77b02-v1&amp;end=7d31ffc1ac9e9ea356e896e63307168a64501b9d&amp;stat=instructions:u</a></p>",
        "id": 205071009,
        "sender_full_name": "simulacrum",
        "timestamp": 1595804600
    },
    {
        "content": "<p>I'm trying to recollect the base commit</p>",
        "id": 205071014,
        "sender_full_name": "simulacrum",
        "timestamp": 1595804618
    },
    {
        "content": "<p>(but our 2.5 hour build time on the server is making that hard, though I'm hopeful about the changes I landed today)</p>",
        "id": 205071057,
        "sender_full_name": "simulacrum",
        "timestamp": 1595804658
    },
    {
        "content": "<p>got it, thanks</p>",
        "id": 205071059,
        "sender_full_name": "njn",
        "timestamp": 1595804675
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span>  fwiw I expect that you'll find no difference between the two as I noted in my latest comment</p>",
        "id": 205071113,
        "sender_full_name": "simulacrum",
        "timestamp": 1595804783
    },
    {
        "content": "<p>I admit I don't quite understand all of your conclusions, and the stuff about std</p>",
        "id": 205071117,
        "sender_full_name": "njn",
        "timestamp": 1595804815
    },
    {
        "content": "<p>I can try to explain?</p>",
        "id": 205071121,
        "sender_full_name": "simulacrum",
        "timestamp": 1595804835
    },
    {
        "content": "<p>Not sure what in particular was confusing</p>",
        "id": 205071127,
        "sender_full_name": "simulacrum",
        "timestamp": 1595804852
    },
    {
        "content": "<p>maybe just re-explain :)</p>",
        "id": 205071132,
        "sender_full_name": "njn",
        "timestamp": 1595804875
    },
    {
        "content": "<p>But the setup on the collector was different when we benchmarked d3df and 7d31 - the latter was benchmarked with a bors-produced std while d3df was benchmarked with a locally built std</p>",
        "id": 205071176,
        "sender_full_name": "simulacrum",
        "timestamp": 1595804922
    },
    {
        "content": "<p>(the reason for the change is that the gimli backtrace stuff broke being able to build std off of the artifacts)</p>",
        "id": 205071188,
        "sender_full_name": "simulacrum",
        "timestamp": 1595804959
    },
    {
        "content": "<p>We've also benchmarked reverts of the rollup with neutral perf results (and I tested hello world and one other benchmark locally with neutral results too)</p>",
        "id": 205071237,
        "sender_full_name": "simulacrum",
        "timestamp": 1595805061
    },
    {
        "content": "<p>All this leads me to believe the rollup was neutral performance wise and the bump on our graphs is purely a result of the change in no longer building std</p>",
        "id": 205071242,
        "sender_full_name": "simulacrum",
        "timestamp": 1595805095
    },
    {
        "content": "<p>so it's actually fallout from the gimli change?</p>",
        "id": 205071277,
        "sender_full_name": "njn",
        "timestamp": 1595805123
    },
    {
        "content": "<p>Well only indirectly, in the sense that we changed how std was obtained, but I would expect a similar diff regardless of gimli having landed in that time</p>",
        "id": 205071293,
        "sender_full_name": "simulacrum",
        "timestamp": 1595805227
    },
    {
        "content": "<p>e.g. if we were to start building std locally again I expect that would be faster again, despite having reverted gimli already</p>",
        "id": 205071391,
        "sender_full_name": "simulacrum",
        "timestamp": 1595805385
    },
    {
        "content": "<p>Can we start building std locally again, then?</p>",
        "id": 205071395,
        "sender_full_name": "njn",
        "timestamp": 1595805410
    },
    {
        "content": "<p>We can, yeah. I want to finish this investigation and we need to land it in a way that doesn't hide a regression</p>",
        "id": 205071404,
        "sender_full_name": "simulacrum",
        "timestamp": 1595805462
    },
    {
        "content": "<p>(if our collector was faster I would want to double collect any change that we intend to deploy a benchmark change in, but we can't really afford that right now)</p>",
        "id": 205071450,
        "sender_full_name": "simulacrum",
        "timestamp": 1595805519
    },
    {
        "content": "<p>need to get rid of script-servo :)  Or at least have a way to skip it for CI runs?</p>",
        "id": 205071667,
        "sender_full_name": "njn",
        "timestamp": 1595805969
    },
    {
        "content": "<p>Yeah we could do either, I think we're actually in pretty good shape to start adding options to builds (e.g. skipping script servo, at least opt)</p>",
        "id": 205071678,
        "sender_full_name": "simulacrum",
        "timestamp": 1595806050
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Ok, I just confirmed that <a href=\"https://github.com/rust-lang/rust/issues/74468\">#74468</a> is perf-neutral on my machine</p>",
        "id": 205071840,
        "sender_full_name": "njn",
        "timestamp": 1595806359
    },
    {
        "content": "<p>Okay, I think both of us confirming that is probably enough for me</p>",
        "id": 205071885,
        "sender_full_name": "simulacrum",
        "timestamp": 1595806444
    },
    {
        "content": "<p>I don't yet understand why gimli affected the building of std, and why that affects perf</p>",
        "id": 205071893,
        "sender_full_name": "njn",
        "timestamp": 1595806453
    },
    {
        "content": "<p>gimli added src/backtrace as a path dep to std, and that wasn't included in the rust-src component</p>",
        "id": 205071898,
        "sender_full_name": "simulacrum",
        "timestamp": 1595806501
    },
    {
        "content": "<p>This meant that we couldn't build std using that component (which used to be what we did on the collection machine)</p>",
        "id": 205071905,
        "sender_full_name": "simulacrum",
        "timestamp": 1595806532
    },
    {
        "content": "<p>We started doing this a while back to mitigate a cargo bug (since fixed) which introduced non-determinism in std's hash, affecting in particular syn-opt variability</p>",
        "id": 205071946,
        "sender_full_name": "simulacrum",
        "timestamp": 1595806583
    },
    {
        "content": "<p>(this was a bug in rust-lang/rust, but not one currently caught by ci there)</p>",
        "id": 205071953,
        "sender_full_name": "simulacrum",
        "timestamp": 1595806625
    },
    {
        "content": "<p>what is the path forward?</p>",
        "id": 205071963,
        "sender_full_name": "njn",
        "timestamp": 1595806652
    },
    {
        "content": "<p>With what, exactly?</p>",
        "id": 205072018,
        "sender_full_name": "simulacrum",
        "timestamp": 1595806754
    },
    {
        "content": "<p>We should be able to go back to building std locally, though I would like to determine what the difference between the two is. Last I talked to <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> out belief was that we shouldn't be different from the std built by ci</p>",
        "id": 205072082,
        "sender_full_name": "simulacrum",
        "timestamp": 1595806862
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>  <a href=\"https://github.com/rust-lang/rust/issues/74468\">#74468</a> and <a href=\"https://github.com/rust-lang/rust/issues/74069\">#74069</a> should have comments added to explain that they weren't actually the cause of the regression. I could add them, but I suspect you might explain it better than me :)</p>",
        "id": 205072510,
        "sender_full_name": "njn",
        "timestamp": 1595807678
    },
    {
        "content": "<p>I can do that.</p>",
        "id": 205072518,
        "sender_full_name": "simulacrum",
        "timestamp": 1595807697
    },
    {
        "content": "<p>I will also update the triage report</p>",
        "id": 205072522,
        "sender_full_name": "simulacrum",
        "timestamp": 1595807704
    },
    {
        "content": "<p>Thank you. If any of the links are broken and you could fix them, that would be lovely</p>",
        "id": 205072527,
        "sender_full_name": "njn",
        "timestamp": 1595807723
    }
]