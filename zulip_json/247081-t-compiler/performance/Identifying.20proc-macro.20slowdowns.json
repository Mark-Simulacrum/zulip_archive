[
    {
        "content": "<p>In one of my work projects I've found that incremental cargo check is spending 96% of its time in expand_crate</p>",
        "id": 276545117,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1648159289
    },
    {
        "content": "<p>are there any good ways of digging into where that time is going?</p>",
        "id": 276545139,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1648159310
    },
    {
        "content": "<p>Not any <em>good</em> ways. It's quite likely that it's a declarative macro rather than a proc macro causing the slowness, I've been working on a bunch of these lately.</p>",
        "id": 276549804,
        "sender_full_name": "nnethercote",
        "timestamp": 1648162547
    },
    {
        "content": "<p>If you are comfortable building rustc from source, applying this diff will be informative:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"n\">d8071bf159a</span><span class=\"o\">..</span><span class=\"mf\">7e8</span><span class=\"n\">fe2b1e1c</span><span class=\"w\"> </span><span class=\"mi\">100644</span><span class=\"w\"></span>\n<span class=\"o\">---</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_expand</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">mbe</span><span class=\"o\">/</span><span class=\"n\">macro_parser</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"o\">+++</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_expand</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">mbe</span><span class=\"o\">/</span><span class=\"n\">macro_parser</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">436</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">436</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">parse_tt_inner</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">ms</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">TokenTree</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">token</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Token</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">NamedParseResult</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">        </span><span class=\"fm\">eprintln!</span><span class=\"p\">(</span><span class=\"s\">\"macro {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">macro_name</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"c1\">// Matcher positions that would be valid if the macro invocation was over now. Only</span>\n<span class=\"w\">         </span><span class=\"c1\">// modified if `token == Eof`.</span>\n<span class=\"w\">         </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">eof_items</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">EofItems</span>::<span class=\"nb\">None</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276549936,
        "sender_full_name": "nnethercote",
        "timestamp": 1648162654
    },
    {
        "content": "<p>I've learned that \"tt muncher\" and \"push-down accumulation\" macros (both described in <a href=\"https://veykril.github.io/tlborm/\">https://veykril.github.io/tlborm/</a>) are inherently quadratic relative to their input length. So if you have any such macros, they might be the cause. Alternatively, you might be using such a macro from another crate.</p>",
        "id": 276550052,
        "sender_full_name": "nnethercote",
        "timestamp": 1648162722
    },
    {
        "content": "<p>Better diagnosis of this stuff is an open question.</p>",
        "id": 276550066,
        "sender_full_name": "nnethercote",
        "timestamp": 1648162738
    },
    {
        "content": "<p>do you have a link to the repo that we could try ?</p>\n<p>if not, maybe try something like this for a cargo check: <code>[profile.dev.build-override] opt-level = 3</code></p>\n<p>it will ask for build scripts, proc-macros, and their dependencies to be optimized: it will slow down from-scratch compile times but if then <code>expand_crate</code> is noticeably faster, that should mean the slowness is coming from the proc-macros compared to the macro_rules macros</p>",
        "id": 276594302,
        "sender_full_name": "lqd",
        "timestamp": 1648200762
    },
    {
        "content": "<p>No, the repo is private</p>",
        "id": 276594485,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1648200896
    },
    {
        "content": "<p>I suspect async-graphql</p>",
        "id": 276594504,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1648200908
    },
    {
        "content": "<p>But we’re also using sqlx::query and query_as a bunch</p>",
        "id": 276594524,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1648200928
    },
    {
        "content": "<p>and it's not the case where sqlx is making db queries during expansion, right ?</p>",
        "id": 276594666,
        "sender_full_name": "lqd",
        "timestamp": 1648201020
    },
    {
        "content": "<p>I’ve set the offline feature for sqlx and provide a sqlx-data.json</p>",
        "id": 276594706,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1648201050
    },
    {
        "content": "<p>So at least theoretically it should not be waiting for the database</p>",
        "id": 276594724,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1648201067
    },
    {
        "content": "<p>Oh, trace_macros! might also be useful</p>",
        "id": 276594785,
        "sender_full_name": "nnethercote",
        "timestamp": 1648201087
    },
    {
        "content": "<p>yes!</p>",
        "id": 276594804,
        "sender_full_name": "lqd",
        "timestamp": 1648201106
    },
    {
        "content": "<p>Oh yeah, I just lexically surround stuff with those calls right?</p>",
        "id": 276594849,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1648201146
    },
    {
        "content": "<p>yeah</p>",
        "id": 276594871,
        "sender_full_name": "lqd",
        "timestamp": 1648201169
    },
    {
        "content": "<p>if that's not enough, adding debug output to rustc if you're able or otherwise bisecting proc-macros by overriding the opt-level of select ones in your cargo.toml, until we do add better diagnostics :/</p>",
        "id": 276594984,
        "sender_full_name": "lqd",
        "timestamp": 1648201229
    },
    {
        "content": "<p>(and complicated graphql queries sounds like a promising candidate, <a href=\"https://github.com/async-graphql/async-graphql/issues/783\">https://github.com/async-graphql/async-graphql/issues/783</a> shows some possible workarounds if that's the source)</p>",
        "id": 276595584,
        "sender_full_name": "lqd",
        "timestamp": 1648201678
    },
    {
        "content": "<p>I tried <code>trace_macros!()</code> on my graphql module and it seems like it doesn't take effect for attribute macros?</p>",
        "id": 277019473,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1648566633
    },
    {
        "content": "<p>I see a bunch of expansions for declarative macros and for function macros, but none for the attribute macros</p>",
        "id": 277019537,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1648566661
    },
    {
        "content": "<p>that's quite unfortunate, we're going to really need better diagnosis of such issues ...</p>",
        "id": 277036143,
        "sender_full_name": "lqd",
        "timestamp": 1648573478
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/95473\">#95473</a> should hopefully help, and you should be able to try it easily with <a href=\"https://github.com/kennytm/rustup-toolchain-install-master/\">rustup-toolchain-install-master</a> like so <code>rustup-toolchain-install-master a121de4a30502064e6d60b71f035e0b005beeaff</code> once the try build completes.</p>\n<p>Individual <code>expand_proc_macro</code> events will show up in the self-profiler, to e.g. <br>\n1) find out whether these proc-macro expansions are slow in general: by comparing the aggregate duration to the other activities via <code>summarize</code><br>\n2) diagnose which ones are taking a long time: you can ask to record the proc-macro name as an argument when capturing self-profiling event arguments with <code>-Zself-profile -Zself-profile-events=default,args</code>.</p>\n<p>For example, for these 3 types of slow proc-macros</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[proc_macro]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">macro_function_like</span><span class=\"p\">(</span><span class=\"n\">_item</span>: <span class=\"nc\">TokenStream</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TokenStream</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">thread</span>::<span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">Duration</span>::<span class=\"n\">from_secs</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">TokenStream</span>::<span class=\"n\">new</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[proc_macro_derive(MacroDerive)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">macro_derive</span><span class=\"p\">(</span><span class=\"n\">_item</span>: <span class=\"nc\">TokenStream</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TokenStream</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">thread</span>::<span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">Duration</span>::<span class=\"n\">from_secs</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">TokenStream</span>::<span class=\"n\">new</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[proc_macro_attribute]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">macro_attribute</span><span class=\"p\">(</span><span class=\"n\">_attr</span>: <span class=\"nc\">TokenStream</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_item</span>: <span class=\"nc\">TokenStream</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TokenStream</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">thread</span>::<span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">Duration</span>::<span class=\"n\">from_secs</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">TokenStream</span>::<span class=\"n\">new</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The raw <code>.mm_profdata</code> data for <code>measureme</code> for the 1st use-case will look this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">expand_proc_macro</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span>: <span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"n\">duration</span>: <span class=\"mf\">2.000253166</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">GenericActivity</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">expand_proc_macro</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span>: <span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"n\">duration</span>: <span class=\"mf\">1.000153694</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">GenericActivity</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">expand_proc_macro</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span>: <span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"n\">duration</span>: <span class=\"mf\">3.000153118</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">GenericActivity</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and in <code>summarize</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">+-----------------------------+-----------+-----------------+----------+------------+---------------------------------+</span><span class=\"w\"></span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Item</span><span class=\"w\">                        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">total</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Time</span><span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Incremental</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"n\">hashing</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"o\">+-----------------------------+-----------+-----------------+----------+------------+---------------------------------+</span><span class=\"w\"></span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">expand_proc_macro</span><span class=\"w\">           </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mf\">6.00</span><span class=\"n\">s</span><span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mf\">94.153</span><span class=\"w\">          </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mf\">6.00</span><span class=\"n\">s</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\">          </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mf\">0.00</span><span class=\"n\">ns</span><span class=\"w\">                          </span><span class=\"o\">|</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The 2nd use-case will look like this with event arguments turned on:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">expand_proc_macro</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span>: <span class=\"p\">[</span><span class=\"s\">\"MacroDerive\"</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">duration</span>: <span class=\"mf\">2.000263228</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">GenericActivity</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">expand_proc_macro</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span>: <span class=\"p\">[</span><span class=\"s\">\"macro_function_like\"</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">duration</span>: <span class=\"mf\">1.000145736</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">GenericActivity</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">expand_proc_macro</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span>: <span class=\"p\">[</span><span class=\"s\">\"macro_attribute\"</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">duration</span>: <span class=\"mf\">3.000157216</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">GenericActivity</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The latter being more commonly readable processed with <code>crox</code> and visualized in Chrome's profiler: after clicking on the first <code>expand_proc_macro</code> event, the name is visible in the properties panel at the bottom.</p>\n<p><a href=\"/user_uploads/4715/UHz4JVxfm5hDINTqdRlFWWrR/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/UHz4JVxfm5hDINTqdRlFWWrR/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/UHz4JVxfm5hDINTqdRlFWWrR/image.png\"></a></div>",
        "id": 277151330,
        "sender_full_name": "lqd",
        "timestamp": 1648649828
    },
    {
        "content": "<p>Thanks, going to try that tomorrow!</p>",
        "id": 277209305,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1648677645
    },
    {
        "content": "<p>it seems likely that it's going to point at the graphql proc-macro you mentioned; so maybe in the future we should also add a separate flag to track where each expansion happens, to separate the multiple calls to the same proc-macro</p>",
        "id": 277209661,
        "sender_full_name": "lqd",
        "timestamp": 1648677876
    },
    {
        "content": "<p>argh, got bitten again by Apple Silicon being tier 2 :(</p>",
        "id": 277266712,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1648726457
    },
    {
        "content": "<p>Okay, I built a compiler from source</p>",
        "id": 277274332,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1648730677
    },
    {
        "content": "<p>what's the easiest way to get Cargo to call it?</p>",
        "id": 277274368,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1648730695
    },
    {
        "content": "<p>currently I have not installed it in anyway, but I could install it to some prefix if that helps</p>",
        "id": 277274394,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1648730709
    },
    {
        "content": "<p><code>rustup toolchain link stage1 build/$TRIPLE/stage1; cargo +stage1 b</code></p>",
        "id": 277274539,
        "sender_full_name": "rylev",
        "timestamp": 1648730777
    },
    {
        "content": "<p>should I get the stage1 or the stage2? why?</p>",
        "id": 277274648,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1648730834
    },
    {
        "content": "<p>I believe from a performance perspective stage1 and stage2 are the same (i.e., will have the same optimizations applied to both).</p>",
        "id": 277275177,
        "sender_full_name": "rylev",
        "timestamp": 1648731093
    },
    {
        "content": "<p>Theoretically stage1 could run slower but it will generate exactly the same code as stage2. The difference is mostly important for the ABI of rustc_private.</p>",
        "id": 277275836,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648731409
    },
    {
        "content": "<p>stage1 should be good enough yeah</p>",
        "id": 277278380,
        "sender_full_name": "lqd",
        "timestamp": 1648732524
    },
    {
        "content": "<p>but at least locally building will allow you to add more precise logging, compared to trying the PR on linux on CI or something</p>",
        "id": 277278606,
        "sender_full_name": "lqd",
        "timestamp": 1648732613
    },
    {
        "content": "<p>in particular, with the timing already there in the PR: adding a debug print of the span where the proc macros are invoked eg <a href=\"https://github.com/rust-lang/rust/blob/f47f3f35ba9738b9101cc7ef6f62ae2908dd8404/compiler/rustc_expand/src/proc_macro.rs#L25\">https://github.com/rust-lang/rust/blob/f47f3f35ba9738b9101cc7ef6f62ae2908dd8404/compiler/rustc_expand/src/proc_macro.rs#L25</a> should be telling you the culprits</p>",
        "id": 277280628,
        "sender_full_name": "lqd",
        "timestamp": 1648733489
    },
    {
        "content": "<p>just to ensure that there's no allocation here when event arguments are not recorded by the self-profiler, and to always add the span as another arg, maybe we could add an API to the self-profiler with a closure à la <code>prof.generic_activity_with(\"expand_proc_macro\", || format!(\"{} from {:?}\", self.name, span))</code> </p>\n<p>otherwise I'm not sure how to make sure of this with the self-profiler ? cc <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> </p>\n<p>sometimes <code>generic_activity_with_arg</code> is used with <a href=\"https://github.com/rust-lang/rust/blob/03314912f1361af6b39383958b5aa1b4aed61c26/compiler/rustc_codegen_llvm/src/back/write.rs#L724-L725\">a <code>format!</code> arg</a> directly but the string will be ignored most of the time</p>",
        "id": 277304909,
        "sender_full_name": "lqd",
        "timestamp": 1648743010
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> that seems totally reasonable. I think as of right now, we aren't using <code>generic_activity_with_arg</code> in any places that are sufficently hot for the allocation to matter but it would be great to support capturing more data in those kind of contexts.</p>",
        "id": 277338868,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1648760227
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/95473\">#95473</a> has landed btw and should be available in tomorrow's nightly. <a href=\"https://github.com/rust-lang/rust/issues/95689\">#95689</a> should add some infrastructure to also record proc-macro expansion spans.</p>\n<p>and maybe we'll do the actual span recording changes in another PR, depending on whether wesley would prefer these changes to be included in 95689 or not</p>",
        "id": 277987000,
        "sender_full_name": "lqd",
        "timestamp": 1649231652
    },
    {
        "content": "<p>Yeah, I did try this last week but wasn't able to as clearly reproduce the slow cargo check runs</p>",
        "id": 278036004,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1649257061
    },
    {
        "content": "<p>Will take another swing at trying this soon when I'm working on that part of the code again</p>",
        "id": 278036048,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1649257079
    },
    {
        "content": "<p>Also when I tried I didn't actually see/find the expanded lines in the summarize output</p>",
        "id": 278036182,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1649257113
    },
    {
        "content": "<p>I think there may be some expansions for ... dependencies maybe ? ... that don't go through these paths, or something that I don't fully understand yet. I was able to get the expansion events for local lib and bin, but not from dependencies even when recording over the whole crate graph...</p>",
        "id": 278039310,
        "sender_full_name": "lqd",
        "timestamp": 1649258205
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/Identifying.20proc-macro.20slowdowns/near/277987000\">said</a>:</p>\n<blockquote>\n<p>and maybe we'll do the actual span recording changes in another PR, depending on whether wesley would prefer these changes to be included in 95689 or not</p>\n</blockquote>\n<p>we indeed did that, and I opened <a href=\"https://github.com/rust-lang/rust/issues/95739\">#95739</a> as draft until <a href=\"https://github.com/rust-lang/rust/issues/95689\">#95689</a> lands (since it contains its commits) to also record expansion spans in the event arguments (and in case people would like a <code>try</code> build in the meantime)</p>",
        "id": 278074557,
        "sender_full_name": "lqd",
        "timestamp": 1649273558
    }
]