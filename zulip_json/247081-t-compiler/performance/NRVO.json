[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> The perf improvements from <a href=\"https://github.com/rust-lang/rust/pull/72205\">dumb NRVO</a> were quite nice. Are there any plans for making it smarter?</p>",
        "id": 203670357,
        "sender_full_name": "njn",
        "timestamp": 1594603574
    },
    {
        "content": "<p>The conditions for MIR to be eligible for the simple NRVO transform are listed <a href=\"https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src/librustc_mir/transform/nrvo.rs#L76-L82\">here</a>.</p>\n<p>I don't think we really generate MIR where the return place is read; the first condition is more of a sanity check. To relax the second condition, you could do a full reaching definitions analysis to see what assignments to <code>_0</code> reach the return terminator. It's possible that this will catch some cases where the return place is assigned the same local across multiple branches, or there are intervening basic blocks between the assignment to the return place and the return terminator. I'm mildly skeptical that there's enough functions that satisfy those criteria to make a difference. I could be wrong though. In case several locals are assigned to <code>_0</code> along different control-flow paths, we could simply pick one to make the return place and eliminate one set of copies. However, doing this would have a lot of the same soundness pitfalls as a general version of MIR copy propagation.</p>\n<p>As a result, time would probably be better spent working on general copy propagation, which <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> is doing now. I believe it has proved more difficult than initially expected. Maybe due to the risk of source/dest aliasing in assignment statements which is why we generate so many copies in the first place? Perhaps they could tell you more. I would be really happy if we could get the general version merged and remove my \"dumb\" version. However, I've found that it's actually pretty tough to write sound MIR optimizations since MIR semantics are not yet well-defined, and I suspect that even once they're finished it will have to live behind a non-default <code>mir-opt-level</code> for some time.</p>\n<p>It's also worth noting that I don't know the mechanism by which <code>check</code> builds were improved for <a href=\"https://github.com/rust-lang/rust/issues/72205\">#72205</a>. The dumb NRVO pass occurs late enough in the optimization pipeline and the query-level perf improvements were sufficiently spread out that I am assuming it represented a real run-time performance improvement, although it would be nice to have library benchmarks that confirmed this. <span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> did a perf run for an early version of their copy propagation pass and found no run-time improvements, but they didn't run it on the standard library, only <code>rustc</code>. This was surprising, since the standard library doesn't (to my knowledge) have much code that matches the canonical NRVO example: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">init</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">1024</span><span class=\"p\">]))</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">1024</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">1024</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">buf</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>My hunch is that the standard library has many very short functions that are frequently monomorphized, and the savings from propagating into the return place can be significant when there are only a few locals/statements. Once again, I don't know exactly why<code>check</code> builds benefited from this. Perhaps this pushed some things below the inlining threshold? (this is quickly becoming my <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> explanation for perf changes). Perhaps answering this question would give us a better idea of where to focus next? </p>\n<p>Hopefully some of that information was useful to you. I'm not confident that the reaching definitions idea will be fruitful, but I'm available to answer questions if anyone wants to give it a shot. I probably won't get to it anytime soon. Partly this is because I don't have much free time but also because because I was explicitly advised not to do a simplified version of NRVO by a compiler team member. I was not happy about this, and I still don't know the reason behind it. It resulted in me sitting on <a href=\"https://github.com/rust-lang/rust/issues/72205\">#72205</a> for about a month until it became clear that general copy propagation was still a ways off.</p>",
        "id": 203761633,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1594669517
    },
    {
        "content": "<blockquote>\n<p>Once again, I don't know exactly whycheck builds benefited from this.</p>\n</blockquote>\n<p>Maybe less MIR -&gt; less time spent reading/writing metadata?</p>",
        "id": 203762879,
        "sender_full_name": "bjorn3",
        "timestamp": 1594670121
    },
    {
        "content": "<blockquote>\n<p>Once again, I don't know exactly whycheck builds benefited from this.</p>\n</blockquote>\n<p>Another possible explanation would be that this results in the CTFE engine doing less work for constants and promoted items which take a bigger portion of time in <code>check</code> builds vs non-<code>check</code> builds.</p>",
        "id": 203763159,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594670272
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/NRVO/near/203762879\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Once again, I don't know exactly whycheck builds benefited from this.</p>\n</blockquote>\n<p>Maybe less MIR -&gt; less time spent reading/writing metadata?</p>\n</blockquote>\n<p>If this  were true, I would have expected most of the savings to come from the <code>metadata</code> queries. Some do, but stuff like <code>mir_borrowck</code> is also consistently faster, which runs before the NRVO transform.</p>",
        "id": 203763553,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1594670457
    },
    {
        "content": "<blockquote>\n<p>I believe it has proved more difficult than initially expected.</p>\n</blockquote>\n<p>Most issues were due to dumb oversights on my part, the current version should be sound (famous last words)</p>",
        "id": 203764019,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594670680
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/NRVO/near/203763159\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Once again, I don't know exactly whycheck builds benefited from this.</p>\n</blockquote>\n<p>Another possible explanation would be that this results in the CTFE engine doing less work for constants and promoted items which take a bigger portion of time in <code>check</code> builds vs non-<code>check</code> builds.**</p>\n</blockquote>\n<p>I think this is plausible, but I'm not sold given that the speedup wasn't concentrated in one particular query (<code>mir_optimized</code> for const propagation and <code>const_eval_raw</code> are the obvious candidates). Savings on <code>check</code> builds were 0.5%-1% of total instructions, which seems a bit high, and the const-eval heavy benchmarks weren't affected any more than the others.</p>",
        "id": 203764504,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1594670924
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> I'm following <a href=\"https://github.com/rust-lang/rust/issues/72632\">#72632</a>. I wonder if <span class=\"user-mention\" data-user-id=\"120989\">@njn</span> has seen the latest perf results in <a href=\"https://github.com/rust-lang/rust/issues/72635\">#72635</a>? They're pretty exciting once you look past the pathological cases.</p>",
        "id": 203766565,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1594672045
    },
    {
        "content": "<p>Those results seem very mixed...</p>",
        "id": 203780385,
        "sender_full_name": "njn",
        "timestamp": 1594680132
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> Is there an easy way to turn off NRVO? E.g. a command line option, or by changing a constant in the code, or commenting out a line? I could do a Cachegrind diff with NRVO on and off, see what I find. (Other people could also do that...)</p>",
        "id": 203781017,
        "sender_full_name": "njn",
        "timestamp": 1594680589
    },
    {
        "content": "<p>Maybe I just change <code>local_eligible_for_nrvo</code> to always return <code>None</code>?</p>",
        "id": 203781080,
        "sender_full_name": "njn",
        "timestamp": 1594680619
    },
    {
        "content": "<p>Although that still runs the pass...</p>",
        "id": 203781129,
        "sender_full_name": "njn",
        "timestamp": 1594680670
    },
    {
        "content": "<p>There's mir-opt-level=0, but to isolate it just return early from <code>run_pass</code></p>",
        "id": 203781432,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1594680924
    },
    {
        "content": "<p>You need to look at the query breakdown. It's a big speedup except when <code>optimized_mir</code> is 100x slower.</p>",
        "id": 203781676,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1594681120
    },
    {
        "content": "<p>Are you talking about dumb NRVO or general copy propagation?</p>",
        "id": 203782805,
        "sender_full_name": "njn",
        "timestamp": 1594682137
    },
    {
        "content": "<p>The ones for Jonas's PR general version</p>",
        "id": 203783480,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1594682769
    },
    {
        "content": "<p>Ideas for how to make it less than 100x slower are appreciated :)</p>",
        "id": 203783553,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594682873
    },
    {
        "content": "<p>are you getting into \"me 2 years ago\" territory :P?</p>",
        "id": 203783737,
        "sender_full_name": "eddyb",
        "timestamp": 1594683070
    },
    {
        "content": "<p>because I had some ideas on how to make the conflict matrix computation much cheaper</p>",
        "id": 203783747,
        "sender_full_name": "eddyb",
        "timestamp": 1594683084
    },
    {
        "content": "<p>well, maybe not the analysis leading up to it, but the quadratic stuff</p>",
        "id": 203783762,
        "sender_full_name": "eddyb",
        "timestamp": 1594683106
    },
    {
        "content": "<p>(compute a \"best-case\" set of optimizations, as in locals to unify, and union-find them into disjoint groups, before doing any work, so that you never consider interactions between those groups - as conflicts are non-transitive, that should be enough I believe)</p>",
        "id": 203783876,
        "sender_full_name": "eddyb",
        "timestamp": 1594683209
    },
    {
        "content": "<p>Don't nerd-snipe me again it's 1:30 am :D</p>",
        "id": 203783932,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594683245
    },
    {
        "content": "<p>02:34am here</p>",
        "id": 203783942,
        "sender_full_name": "eddyb",
        "timestamp": 1594683259
    },
    {
        "content": "<p>hmm, so you'd do union-find on the to-be-merged locals <em>first</em>? interesting</p>",
        "id": 203784013,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594683354
    },
    {
        "content": "<p>also, you can completely ignore locals you can decide early to not optimize assignments from/into</p>",
        "id": 203784015,
        "sender_full_name": "eddyb",
        "timestamp": 1594683355
    },
    {
        "content": "<p>since there's just nothing they contribute to any analysis, they're \"scenery\"</p>",
        "id": 203784067,
        "sender_full_name": "eddyb",
        "timestamp": 1594683381
    },
    {
        "content": "<p>like this? <a href=\"https://github.com/rust-lang/rust/blob/b7600237ce3b0121871cc7fb39f6c685410bbd8b/src/librustc_mir/transform/dest_prop.rs#L141\">https://github.com/rust-lang/rust/blob/b7600237ce3b0121871cc7fb39f6c685410bbd8b/src/librustc_mir/transform/dest_prop.rs#L141</a></p>",
        "id": 203784086,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594683404
    },
    {
        "content": "<p>oh heh nice</p>",
        "id": 203784105,
        "sender_full_name": "eddyb",
        "timestamp": 1594683421
    },
    {
        "content": "<p>yeah then split them into groups where you care about conflicts within groups, but would never unify locals between groups</p>",
        "id": 203784132,
        "sender_full_name": "eddyb",
        "timestamp": 1594683451
    },
    {
        "content": "<p>all of your matrix-like stuff should now become several disjoint smaller matrices (I guess they're sparse but eh you can deal with that)</p>",
        "id": 203784211,
        "sender_full_name": "eddyb",
        "timestamp": 1594683502
    },
    {
        "content": "<p>btw I made some types back then for sparse matrices, which <span class=\"user-mention\" data-user-id=\"120989\">@njn</span> later removed, I think?</p>",
        "id": 203784223,
        "sender_full_name": "eddyb",
        "timestamp": 1594683519
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_index/bit_set/struct.SparseBitMatrix.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_index/bit_set/struct.SparseBitMatrix.html</a></p>",
        "id": 203784243,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594683542
    },
    {
        "content": "<p>they were much faster because I could skip entire stretches of entries that were all empty</p>",
        "id": 203784253,
        "sender_full_name": "eddyb",
        "timestamp": 1594683556
    },
    {
        "content": "<p>huh</p>",
        "id": 203784255,
        "sender_full_name": "eddyb",
        "timestamp": 1594683557
    },
    {
        "content": "<p>that's not what I had (I flattened it into a sparse bitset) but it does look useful</p>",
        "id": 203784283,
        "sender_full_name": "eddyb",
        "timestamp": 1594683592
    },
    {
        "content": "<p>mir borrowck uses it</p>",
        "id": 203784285,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594683593
    },
    {
        "content": "<p>oh this is not a sparse bit set :| <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_index/bit_set/struct.SparseBitSet.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_index/bit_set/struct.SparseBitSet.html</a></p>",
        "id": 203784338,
        "sender_full_name": "eddyb",
        "timestamp": 1594683607
    },
    {
        "content": "<p>this is a <em>small</em> bit set</p>",
        "id": 203784348,
        "sender_full_name": "eddyb",
        "timestamp": 1594683614
    },
    {
        "content": "<p>don't tell me it got added, removed, and reimplemented :D</p>",
        "id": 203784349,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594683614
    },
    {
        "content": "<p>yes, and reimplemented in a way which is less useful at my scale</p>",
        "id": 203784357,
        "sender_full_name": "eddyb",
        "timestamp": 1594683627
    },
    {
        "content": "<p>but I'd need benchmarking to prove it</p>",
        "id": 203784361,
        "sender_full_name": "eddyb",
        "timestamp": 1594683636
    },
    {
        "content": "<p>oh yeah that's not sparse at all</p>",
        "id": 203784390,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594683669
    },
    {
        "content": "<blockquote>\n<p>although <code>SmallVec</code> can spill its elements to the heap, that never happens within this type because of the <code>SPARSE_MAX</code> limit.</p>\n</blockquote>",
        "id": 203784397,
        "sender_full_name": "eddyb",
        "timestamp": 1594683678
    },
    {
        "content": "<p>why not use an <code>ArrayVec</code>? that's what it's for</p>",
        "id": 203784403,
        "sender_full_name": "eddyb",
        "timestamp": 1594683686
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> my approach is basically a map from \"chunk address\" to \"chunk bits\" which can be any number of them (<code>u128</code> if you feel generous, but it's probably slower that way :P), and I was hoping that <code>BTreeMap</code> would be flat enough to make things go extremely well</p>",
        "id": 203784485,
        "sender_full_name": "eddyb",
        "timestamp": 1594683751
    },
    {
        "content": "<p>but <span class=\"user-mention\" data-user-id=\"120989\">@njn</span> found that btrees actually are slower than I thought, so for other usecases they were worse :(</p>",
        "id": 203784498,
        "sender_full_name": "eddyb",
        "timestamp": 1594683766
    },
    {
        "content": "<p>anyway you can spend years tuning foo-trees and tries and all sorts of data structures</p>",
        "id": 203784516,
        "sender_full_name": "eddyb",
        "timestamp": 1594683798
    },
    {
        "content": "<p>in the end the important bit is to skip most of the work :P</p>",
        "id": 203784527,
        "sender_full_name": "eddyb",
        "timestamp": 1594683807
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> anyway I'd suggest computing disjoint groups, asserting that you never optimize locals between groups, only within (just to validate that the reasoning makes sense), and then gata data about the full set of locals, how many groups it's split into, and how big they are</p>",
        "id": 203784596,
        "sender_full_name": "eddyb",
        "timestamp": 1594683866
    },
    {
        "content": "<p>and you can do it on <code>inflate</code> if you'd like :P</p>",
        "id": 203784600,
        "sender_full_name": "eddyb",
        "timestamp": 1594683874
    },
    {
        "content": "<p>yeah I'm not too worried about micro-optimizing data structures yet, my main concern is performance in O-notation</p>",
        "id": 203784601,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594683876
    },
    {
        "content": "<p><a href=\"https://blog.mozilla.org/nnethercote/2018/11/06/how-to-speed-up-the-rust-compiler-in-2018-nll-edition/\">https://blog.mozilla.org/nnethercote/2018/11/06/how-to-speed-up-the-rust-compiler-in-2018-nll-edition/</a> is relevant here, see the entries for <a href=\"https://github.com/rust-lang/rust/issues/52250\">#52250</a> and <a href=\"https://github.com/rust-lang/rust/issues/53383\">#53383</a></p>",
        "id": 203784637,
        "sender_full_name": "njn",
        "timestamp": 1594683922
    },
    {
        "content": "<p>the reason I thought this would help is that <code>inflate</code> (well, the old copy on <a href=\"http://perf.rust-lang.org\">perf.rust-lang.org</a>, I wish it was named <code>inflate-bloated</code> or something) has one function with <em>a lot</em> of macro-generated code, that would normally be separate functions</p>",
        "id": 203784638,
        "sender_full_name": "eddyb",
        "timestamp": 1594683925
    },
    {
        "content": "<p>oh I have another nemesis already, <a href=\"https://raw.githubusercontent.com/rust-lang/rustc-perf/master/collector/benchmarks/tuple-stress/src/main.rs\">tuple-stress</a></p>",
        "id": 203784643,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594683935
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> I recommend printing out the contents of your large structures in some way to get a sense of how the data is distributed, to see if there are any patterns you can exploit</p>",
        "id": 203784697,
        "sender_full_name": "njn",
        "timestamp": 1594683965
    },
    {
        "content": "<p>and so splitting locals into disjoint groups would make the optimization behave more as if it was ran on separate functions</p>",
        "id": 203784698,
        "sender_full_name": "eddyb",
        "timestamp": 1594683966
    },
    {
        "content": "<blockquote>\n<p>This reduces the runtime of Check Nll builds of inflate by 32%</p>\n</blockquote>\n<p>wow</p>",
        "id": 203784700,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594683967
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/53383\">#53383</a> was an example where doing that gave big improvements</p>",
        "id": 203784724,
        "sender_full_name": "njn",
        "timestamp": 1594683982
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> yeah but we don't take stress tests seriously for this sort of situation :P</p>",
        "id": 203784738,
        "sender_full_name": "eddyb",
        "timestamp": 1594684007
    },
    {
        "content": "<p><code>inflate</code> is the big daddy of \"huge macro generated function that actually does something useful\"</p>",
        "id": 203784759,
        "sender_full_name": "eddyb",
        "timestamp": 1594684039
    },
    {
        "content": "<p>Oh, <a href=\"https://github.com/rust-lang/rust/issues/54318\">#54318</a> was also relevant in that post</p>",
        "id": 203784760,
        "sender_full_name": "njn",
        "timestamp": 1594684040
    },
    {
        "content": "<p>I had a bigger one back when I started with Rust and quadratic behavior in borrowck or w/e led to a 700TB allocation attempt</p>",
        "id": 203784825,
        "sender_full_name": "eddyb",
        "timestamp": 1594684090
    },
    {
        "content": "<p>that's kind of why I got into optimizing stuff, really. kind of sad that I've never gone back to stuff like that</p>",
        "id": 203784840,
        "sender_full_name": "eddyb",
        "timestamp": 1594684117
    },
    {
        "content": "<p>IMO stress tests help with this because they show very clearly what's wrong</p>",
        "id": 203784843,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594684120
    },
    {
        "content": "<p>sure but they can also be unrealistic sometimes</p>",
        "id": 203784854,
        "sender_full_name": "eddyb",
        "timestamp": 1594684139
    },
    {
        "content": "<p>also I'm cheating because I wrote <code>inflate</code> so I know what it does</p>",
        "id": 203784865,
        "sender_full_name": "eddyb",
        "timestamp": 1594684148
    },
    {
        "content": "<p>and specifically, how it stresses the compiler: lots of largely-independent chunks of almost-identical code</p>",
        "id": 203784884,
        "sender_full_name": "eddyb",
        "timestamp": 1594684171
    },
    {
        "content": "<p>anything worse than linear in the number of locals, or blocks, will have a hard time, even if you split it into separate functions, it would be fine</p>",
        "id": 203784910,
        "sender_full_name": "eddyb",
        "timestamp": 1594684198
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/NRVO/near/203784596\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> anyway I'd suggest computing disjoint groups, asserting that you never optimize locals between groups, only within (just to validate that the reasoning makes sense), and then gata data about the full set of locals, how many groups it's split into, and how big they are</p>\n</blockquote>\n<p>anyway this remains my suggestion for how to proceed</p>",
        "id": 203784984,
        "sender_full_name": "eddyb",
        "timestamp": 1594684219
    },
    {
        "content": "<p>yeah, will look into that at some point</p>",
        "id": 203784999,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594684245
    },
    {
        "content": "<p>would be great to get the current state merged though</p>",
        "id": 203785006,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594684254
    },
    {
        "content": "<p>and frankly besides \"ask around for graph coloring resources\", it's the only idea I've had in years to make progress on it</p>",
        "id": 203785015,
        "sender_full_name": "eddyb",
        "timestamp": 1594684261
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> how bad is it on <code>inflate</code>?</p>",
        "id": 203785029,
        "sender_full_name": "eddyb",
        "timestamp": 1594684277
    },
    {
        "content": "<p>or <code>clap-rs</code>, I think that was the other macro-generated bloat benchmark</p>",
        "id": 203785077,
        "sender_full_name": "eddyb",
        "timestamp": 1594684309
    },
    {
        "content": "<p>inflate looks like 3% slower</p>",
        "id": 203785161,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594684353
    },
    {
        "content": "<p>clap is faster</p>",
        "id": 203785165,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594684357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> btw did you see my comment above about using <code>ArrayVec</code> instead of <code>SmallVec</code> when you never intend to do heap allocations?</p>",
        "id": 203785176,
        "sender_full_name": "eddyb",
        "timestamp": 1594684363
    },
    {
        "content": "<p>not sure if it hits the bailout limit though</p>",
        "id": 203785180,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594684369
    },
    {
        "content": "<p>3% is suspiciously little</p>",
        "id": 203785191,
        "sender_full_name": "eddyb",
        "timestamp": 1594684385
    },
    {
        "content": "<p>IMO you should try with that limit disabled</p>",
        "id": 203785221,
        "sender_full_name": "eddyb",
        "timestamp": 1594684423
    },
    {
        "content": "<p>I'd be impressed with below 10x, but I don't know the details too well (so much to catch up with <em>sigh</em>)</p>",
        "id": 203785294,
        "sender_full_name": "eddyb",
        "timestamp": 1594684475
    },
    {
        "content": "<p>(900% aka 9x might've been my best, but maybe I'm misremembering)</p>",
        "id": 203785325,
        "sender_full_name": "eddyb",
        "timestamp": 1594684508
    },
    {
        "content": "<p>hmm, maybe conflicts can be computed incrementally too</p>",
        "id": 203785606,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594684718
    },
    {
        "content": "<p>eh, something to look into later in any case. I want to get <em>something</em> in rustc first.</p>",
        "id": 203785662,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594684768
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> can you get me un-bailout-limited numbers first?</p>",
        "id": 203785826,
        "sender_full_name": "eddyb",
        "timestamp": 1594684902
    },
    {
        "content": "<p>I'd like to understand what's happening, if it truly is 3% on the big function in <code>inflate</code></p>",
        "id": 203785859,
        "sender_full_name": "eddyb",
        "timestamp": 1594684922
    },
    {
        "content": "<p>maybe tomorrow, but I don't really trust this machine to do benchmarks</p>",
        "id": 203785955,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594685004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> oh, interesting about <code>ArrayVec</code>, I'll take a look</p>",
        "id": 203786777,
        "sender_full_name": "njn",
        "timestamp": 1594685764
    },
    {
        "content": "<p>@eddyb: you mean <a href=\"https://docs.rs/arrayvec/0.5.1/arrayvec/\">https://docs.rs/arrayvec/0.5.1/arrayvec/</a>, right?</p>",
        "id": 203786850,
        "sender_full_name": "njn",
        "timestamp": 1594685867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> yeah. looks like we already have it in <code>Cargo.lock</code>, but only as an indirect dependency</p>",
        "id": 203787346,
        "sender_full_name": "eddyb",
        "timestamp": 1594686468
    },
    {
        "content": "<p>(not sure if an audit is in order of all the <code>SmallVec</code> uses)</p>",
        "id": 203787393,
        "sender_full_name": "eddyb",
        "timestamp": 1594686501
    },
    {
        "content": "<p>heh:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ rg ArrayVec\nRELEASES.md\n4521:* [Add `ArrayVec` and `AccumulateVec` to reduce heap allocations\n</code></pre></div>",
        "id": 203787398,
        "sender_full_name": "eddyb",
        "timestamp": 1594686515
    },
    {
        "content": "<p>I wonder if it'll actually effect perf. <code>SparseBitSet</code> is hot for some benchmarks.</p>",
        "id": 203787692,
        "sender_full_name": "njn",
        "timestamp": 1594686859
    },
    {
        "content": "<p>/me will test</p>",
        "id": 203787695,
        "sender_full_name": "njn",
        "timestamp": 1594686863
    },
    {
        "content": "<p>I cannot for the life of me figure out how to actually use rustc-perf, so no data I guess</p>",
        "id": 203890754,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594762060
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> that was me for the longest time. or do you mean the official instance?</p>",
        "id": 203891029,
        "sender_full_name": "eddyb",
        "timestamp": 1594762241
    },
    {
        "content": "<p>nah that's easy, but I don't want to occupy the server for everything I want to measure (and produce notification spam)</p>",
        "id": 203891080,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594762278
    },
    {
        "content": "<p>like I'd expect pushing a commit that takes the limits off, a <code>@bors try @rust-timer queue</code>, and nothing more</p>",
        "id": 203891081,
        "sender_full_name": "eddyb",
        "timestamp": 1594762279
    },
    {
        "content": "<p>I'd have to rebase then</p>",
        "id": 203891129,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594762317
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> or you can just be shameless</p>",
        "id": 203891134,
        "sender_full_name": "eddyb",
        "timestamp": 1594762318
    },
    {
        "content": "<p>oh huh</p>",
        "id": 203891180,
        "sender_full_name": "eddyb",
        "timestamp": 1594762326
    },
    {
        "content": "<p>hmm, looks like inflate only gets slower by a few percent when disabling the limit (unless I'm measuring wrongly)</p>",
        "id": 203891880,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594762800
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> can you log the sizes (in locals and BBs) of the functions the optimization runs on? maybe time them using the <code>-Z time-passes</code> functionality or w/e</p>",
        "id": 203892404,
        "sender_full_name": "eddyb",
        "timestamp": 1594763161
    },
    {
        "content": "<p>(assuming there's no way to use <code>-Z self-profile</code> for this currently, presumably we want to integrate MIR passes as non-query profiled functions)</p>",
        "id": 203892471,
        "sender_full_name": "eddyb",
        "timestamp": 1594763189
    },
    {
        "content": "<p><del>@<strong>Joshua Nelson</strong></del> <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> you should see a function that is orders of magnitude worse than the orders (I forget the exact numbers)</p>",
        "id": 203892497,
        "sender_full_name": "eddyb",
        "timestamp": 1594763211
    },
    {
        "content": "<p>(you meant to tag <span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> I think)</p>",
        "id": 203892544,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594763252
    },
    {
        "content": "<p>you might be getting lucky with the local filtering, even when it doesn't remove quadratic behavior, which makes me worried  that someone out there was more optimizable bloat than <code>inflate</code></p>",
        "id": 203892545,
        "sender_full_name": "eddyb",
        "timestamp": 1594763253
    },
    {
        "content": "<p>argh I didn't look and the Jo fit</p>",
        "id": 203892563,
        "sender_full_name": "eddyb",
        "timestamp": 1594763266
    },
    {
        "content": "<p><code>DefId(0:114 ~ inflate[4216]::{{impl}}[3]::next_state[0]): 10858 locals (4741 relevant), 5555 blocks</code></p>\n<p><em>what</em> have you done <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>?! :D</p>",
        "id": 203893928,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594764138
    },
    {
        "content": "<p>wow that feels tiny</p>",
        "id": 203893944,
        "sender_full_name": "eddyb",
        "timestamp": 1594764152
    },
    {
        "content": "<p>I would've expected like maybe an order of magnitude more</p>",
        "id": 203893953,
        "sender_full_name": "eddyb",
        "timestamp": 1594764164
    },
    {
        "content": "<p>it optimizes a bunch of stuff in that monster of a function but it doesn't impact compile times much</p>",
        "id": 203893964,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594764173
    },
    {
        "content": "<p>any chance it's an unbloated version of inflate?</p>",
        "id": 203893965,
        "sender_full_name": "eddyb",
        "timestamp": 1594764174
    },
    {
        "content": "<p>don't tell me the benchmark is broken</p>",
        "id": 203893972,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594764180
    },
    {
        "content": "<p>link me to a copy of the code :P</p>",
        "id": 203893989,
        "sender_full_name": "eddyb",
        "timestamp": 1594764194
    },
    {
        "content": "<p>it's just called \"inflate\" in <code>collector/benchmarks</code></p>",
        "id": 203893999,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594764203
    },
    {
        "content": "<p>sure, but</p>",
        "id": 203894004,
        "sender_full_name": "eddyb",
        "timestamp": 1594764211
    },
    {
        "content": "<p>I want to make sure we are looking at the same version</p>",
        "id": 203894007,
        "sender_full_name": "eddyb",
        "timestamp": 1594764218
    },
    {
        "content": "<p><code>3294414276f297c99d061fcc7fac44690fcde279</code></p>",
        "id": 203894032,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594764234
    },
    {
        "content": "<p>so <a href=\"https://github.com/rust-lang/rustc-perf/tree/3294414276f297c99d061fcc7fac44690fcde279/collector/benchmarks/inflate\">https://github.com/rust-lang/rustc-perf/tree/3294414276f297c99d061fcc7fac44690fcde279/collector/benchmarks/inflate</a></p>",
        "id": 203894094,
        "sender_full_name": "eddyb",
        "timestamp": 1594764252
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rustc-perf/commit/3294414276f297c99d061fcc7fac44690fcde279\">https://github.com/rust-lang/rustc-perf/commit/3294414276f297c99d061fcc7fac44690fcde279</a></p>",
        "id": 203894099,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594764256
    },
    {
        "content": "<p>yeah?</p>",
        "id": 203894116,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594764263
    },
    {
        "content": "<p>yeah it's the bloated one <a href=\"https://github.com/rust-lang/rustc-perf/blob/3294414276f297c99d061fcc7fac44690fcde279/collector/benchmarks/inflate/src/lib.rs#L672-L700\">https://github.com/rust-lang/rustc-perf/blob/3294414276f297c99d061fcc7fac44690fcde279/collector/benchmarks/inflate/src/lib.rs#L672-L700</a></p>",
        "id": 203894152,
        "sender_full_name": "eddyb",
        "timestamp": 1594764279
    },
    {
        "content": "<p>(that's the bit of code that replaced all the macro generated code. it used to be slower but at some point it became faster)</p>",
        "id": 203894165,
        "sender_full_name": "eddyb",
        "timestamp": 1594764297
    },
    {
        "content": "<p>I only wrote it down for testing, when I first wrote all this lol</p>",
        "id": 203894188,
        "sender_full_name": "eddyb",
        "timestamp": 1594764316
    },
    {
        "content": "<p>this is one of the more egregious macros in all this <a href=\"https://github.com/rust-lang/rustc-perf/blob/3294414276f297c99d061fcc7fac44690fcde279/collector/benchmarks/inflate/src/lib.rs#L722\">https://github.com/rust-lang/rustc-perf/blob/3294414276f297c99d061fcc7fac44690fcde279/collector/benchmarks/inflate/src/lib.rs#L722</a></p>",
        "id": 203894230,
        "sender_full_name": "eddyb",
        "timestamp": 1594764354
    },
    {
        "content": "<p>I see</p>",
        "id": 203894278,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594764374
    },
    {
        "content": "<p>But that function I found clearly looks like <code>next_state</code> (although I'm not printing the right thing, the same defid text shows up ~a dozen times due to promoteds)</p>",
        "id": 203894464,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594764519
    },
    {
        "content": "<p>then why is it so much smaller than you remember, and why is dest prop not slow? the limit would kick in for way smaller functions normally</p>",
        "id": 203894499,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594764557
    },
    {
        "content": "<p>not that I'm complaining though</p>",
        "id": 203894581,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594764605
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> how many of those locals are you actually optimizing?</p>",
        "id": 203894610,
        "sender_full_name": "eddyb",
        "timestamp": 1594764629
    },
    {
        "content": "<p>oh I see</p>",
        "id": 203894619,
        "sender_full_name": "eddyb",
        "timestamp": 1594764635
    },
    {
        "content": "<p>50% doesn't feel small enough to be relevant</p>",
        "id": 203894644,
        "sender_full_name": "eddyb",
        "timestamp": 1594764649
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> and there are matrices involved?</p>",
        "id": 203894649,
        "sender_full_name": "eddyb",
        "timestamp": 1594764657
    },
    {
        "content": "<p>matrices and unification tables</p>",
        "id": 203894663,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594764673
    },
    {
        "content": "<p>not sure how many replacements remain, I only log the entire map not its length</p>",
        "id": 203894711,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594764712
    },
    {
        "content": "<p>sure, in my case the cost was definitely on the \"domain size\" of the matrices involved and whatnot. I managed to optimize it by using a spare bit set/matrix API that exposed \"chunked iteration\" so that I wouldn't do work per bit, but rather in chunks, and I wouldn't get the missing chunks at all</p>",
        "id": 203894818,
        "sender_full_name": "eddyb",
        "timestamp": 1594764799
    },
    {
        "content": "<p>anyway sounds like your approach is less costly. congrats etc.</p>",
        "id": 203894830,
        "sender_full_name": "eddyb",
        "timestamp": 1594764818
    },
    {
        "content": "<p>lol</p>",
        "id": 203894846,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594764835
    },
    {
        "content": "<p>now if it only was <em>always</em> cheap to run</p>",
        "id": 203894896,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594764850
    },
    {
        "content": "<p>but for real, this only happened because you landed the prerequisites and nerd-sniped me</p>",
        "id": 203894921,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594764878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> low-key wondering if we'll find out down the line it's only faster because it doesn't check all the preconditions but also kind of choosing to ignore that because I want to sleep at night</p>",
        "id": 203895765,
        "sender_full_name": "eddyb",
        "timestamp": 1594765533
    },
    {
        "content": "<p>there isn't much it <em>isn't</em> checking at this point</p>",
        "id": 203895941,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594765641
    },
    {
        "content": "<p>but yeah, that's why I'd love to have a better way to write tests for this sort of stuff</p>",
        "id": 203896032,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594765686
    },
    {
        "content": "<p>would be much easier if I could just write down a few lines of MIR and record the diff it produces on it</p>",
        "id": 203896086,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594765735
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> btw have you tried to bootstrap with it fully enabled, no limits applied?</p>",
        "id": 203896319,
        "sender_full_name": "eddyb",
        "timestamp": 1594765866
    },
    {
        "content": "<p>that's one of the cheapest tests, per coverage offered, IME</p>",
        "id": 203896359,
        "sender_full_name": "eddyb",
        "timestamp": 1594765908
    },
    {
        "content": "<p>I kept finding exciting new edge cases that way, and even had to rethink how I was computing conflcits at one point</p>",
        "id": 203896444,
        "sender_full_name": "eddyb",
        "timestamp": 1594765953
    },
    {
        "content": "<p>I feel like I did do that a couple of times, including running the full test suite</p>",
        "id": 203896874,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594766322
    },
    {
        "content": "<p>and the limit doesn't kick in very often on usual code</p>",
        "id": 203896890,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594766333
    },
    {
        "content": "<p>eh you don't want to trust it, especially as you want unusual code if possible :P</p>",
        "id": 203896951,
        "sender_full_name": "eddyb",
        "timestamp": 1594766399
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> full test suite with a compiler that was NRVO-optimized throughout, right?</p>",
        "id": 203897030,
        "sender_full_name": "eddyb",
        "timestamp": 1594766435
    },
    {
        "content": "<p>should be, yeah</p>",
        "id": 203897052,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594766459
    },
    {
        "content": "<p>(I'm doing it again)</p>",
        "id": 203897066,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594766466
    },
    {
        "content": "<p>ugh, can't bless codegen tests</p>",
        "id": 203897263,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594766615
    },
    {
        "content": "<p>anyways bootstrap works and all but one UI tests pass</p>",
        "id": 203897281,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594766629
    },
    {
        "content": "<p>the single failing one only changes a span due to the optimization</p>",
        "id": 203897333,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594766650
    },
    {
        "content": "<p>like a warning from codegen?</p>",
        "id": 203897366,
        "sender_full_name": "eddyb",
        "timestamp": 1594766688
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"gd\">--- a/src/test/ui/lint/issue-69485-var-size-diffs-too-large.stderr</span>\n<span class=\"gi\">+++ b/src/test/ui/lint/issue-69485-var-size-diffs-too-large.stderr</span>\n<span class=\"gu\">@@ -1,8 +1,8 @@</span>\n error: the type `[u8; 18446744073709551615]` is too big for the current architecture\n<span class=\"gd\">-  --&gt; $DIR/issue-69485-var-size-diffs-too-large.rs:5:12</span>\n<span class=\"gi\">+  --&gt; $DIR/issue-69485-var-size-diffs-too-large.rs:5:5</span>\n    |\n LL |     Bug::V([0; !0]);\n<span class=\"gd\">-   |            ^^^^^^^</span>\n<span class=\"gi\">+   |     ^^^^^^^^^^^^^^^</span>\n\n error: aborting due to previous error\n</code></pre></div>",
        "id": 203897524,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594766788
    },
    {
        "content": "<p>or an error from codegen :P</p>",
        "id": 203897552,
        "sender_full_name": "eddyb",
        "timestamp": 1594766816
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> I have tried to make the <a href=\"https://github.com/rust-lang/rustc-perf/blob/master/collector/README.md\">rustc-perf instructions</a> usable. Have you gone through them carefully? I'm happy to hear suggestions to make them clearer. Having capable people try and fail to use rustc-perf is a concern.</p>",
        "id": 203897561,
        "sender_full_name": "njn",
        "timestamp": 1594766834
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> one thing that tripped me up is collector depends on <code>rustc-fake</code>, but that's not communicated to cargo</p>",
        "id": 203897590,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594766872
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> thanks, I think there might have been recent changes that made them go out of sync?</p>",
        "id": 203897597,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594766875
    },
    {
        "content": "<p>so you need to explicitly use <code>cargo build --release</code>, <code>cargo run --bin collector</code> will not work (and will silently use old versions of rustc-fake if they exist)</p>",
        "id": 203897651,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594766897
    },
    {
        "content": "<p>ie. it complains that I haven't passed <code>--rustdoc</code> but requested <code>Rustdoc</code> runs (I didn't)</p>",
        "id": 203897652,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594766898
    },
    {
        "content": "<p>oh <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> made rustdoc optional but may not have caught everything</p>",
        "id": 203897670,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594766915
    },
    {
        "content": "<p>also the ordering requirements of command line args is thoroughly confusing</p>",
        "id": 203897682,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594766927
    },
    {
        "content": "<p>my fault, sorry</p>",
        "id": 203897683,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594766927
    },
    {
        "content": "<p>The instructions got out of sync a couple of weeks ago but I think I fixed that. Did the rustdoc profiling changes land? I haven't updated since then.</p>",
        "id": 203897764,
        "sender_full_name": "njn",
        "timestamp": 1594766999
    },
    {
        "content": "<p>yes, just today</p>",
        "id": 203897823,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594767018
    },
    {
        "content": "<p>but rustdoc was meant to be optional</p>",
        "id": 203897827,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594767023
    },
    {
        "content": "<p>ok</p>",
        "id": 203897828,
        "sender_full_name": "njn",
        "timestamp": 1594767023
    },
    {
        "content": "<p>ah, then that part was just bad luck</p>",
        "id": 203897843,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594767035
    },
    {
        "content": "<p>A big problem is that we don't have decent testing for rustc-perf</p>",
        "id": 203897847,
        "sender_full_name": "njn",
        "timestamp": 1594767041
    },
    {
        "content": "<p>the CI part gets executed frequently, but the local benchmarking/profiling stuff gets broken periodically</p>",
        "id": 203897873,
        "sender_full_name": "njn",
        "timestamp": 1594767061
    },
    {
        "content": "<p>:(</p>",
        "id": 203897875,
        "sender_full_name": "njn",
        "timestamp": 1594767063
    },
    {
        "content": "<p>We should fix that</p>",
        "id": 203897895,
        "sender_full_name": "njn",
        "timestamp": 1594767083
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> <code>bench_local</code> works for me without --rustdoc, what command are you using?</p>",
        "id": 203897922,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594767109
    },
    {
        "content": "<p><code>target/release/collector --db db --self-profile --filter inflate bench_local --runs Full,IncrFull,IncrPatched --rustc ../rust/build/x86_64-unknown-linux-gnu/stage1/bin/rustc --cargo (which cargo) dest-prop-limited</code></p>",
        "id": 203898012,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594767162
    },
    {
        "content": "<p>The <code>--runs</code> was a failed attempt at making it not require rustdoc</p>",
        "id": 203898029,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594767179
    },
    {
        "content": "<p>/me files <a href=\"https://github.com/rust-lang/rustc-perf/issues/681\">https://github.com/rust-lang/rustc-perf/issues/681</a></p>",
        "id": 203898078,
        "sender_full_name": "njn",
        "timestamp": 1594767228
    },
    {
        "content": "<p>where do I get <code>summarize</code> from?</p>",
        "id": 203898088,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594767237
    },
    {
        "content": "<p>install <a href=\"https://github.com/rust-lang/measureme\">https://github.com/rust-lang/measureme</a></p>",
        "id": 203898141,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594767252
    },
    {
        "content": "<p>(without --self-profile it works btw)</p>",
        "id": 203898172,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594767281
    },
    {
        "content": "<p>(That should be better documented.)</p>",
        "id": 203898174,
        "sender_full_name": "njn",
        "timestamp": 1594767283
    },
    {
        "content": "<p>huh</p>",
        "id": 203898198,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594767300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> what does the <code>dest-prop-limited</code> do?</p>",
        "id": 203898221,
        "sender_full_name": "njn",
        "timestamp": 1594767315
    },
    {
        "content": "<p>Just tried to set this:</p>\n<blockquote>\n<p>$ID is an identifier which will be used to identify the results in the collected data.</p>\n</blockquote>",
        "id": 203898257,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594767356
    },
    {
        "content": "<p>Ah, yep</p>",
        "id": 203898337,
        "sender_full_name": "njn",
        "timestamp": 1594767401
    },
    {
        "content": "<p>works for me with --self-profile too :/</p>",
        "id": 203898345,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594767410
    },
    {
        "content": "<p>I have some bash functions that I use to run the commands, the arguments are different, so I'm not used to seeing the normal commands...</p>",
        "id": 203898355,
        "sender_full_name": "njn",
        "timestamp": 1594767421
    },
    {
        "content": "<p>oh wait I'm on an old master, sorry</p>",
        "id": 203898363,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594767426
    },
    {
        "content": "<p>it works neither with nor without <code>--self-profile</code> for me :P</p>",
        "id": 203898375,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594767437
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> rustdoc is a build, not a run</p>",
        "id": 203898414,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594767479
    },
    {
        "content": "<p>so as a workaround <code>--builds Check,Opt,Debug</code> should work</p>",
        "id": 203898463,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594767494
    },
    {
        "content": "<p>that gets me a bit further</p>\n<div class=\"codehilite\"><pre><span></span><code>Benchmarking dest-prop-limited for triple x86_64-unknown-linux-gnu\n1 benchmark remaining\nPreparing inflate (with Debug)\nthread &#39;main&#39; panicked at &#39;failed to obtain pkgid in &quot;/tmp/.tmpXTrBUp&quot;: expected success, got exit code: 1\n\nstderr=error: error: Found argument &#39;--manifest-path&#39; which wasn&#39;t expected, or isn&#39;t valid in this context\n\nUSAGE:\n    rustup [FLAGS] [+toolchain] &lt;SUBCOMMAND&gt;\n\nFor more information try --help\n\n\n\n stdout=&#39;, collector/src/bin/rustc-perf-collector/execute.rs:248:17\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 203898506,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594767534
    },
    {
        "content": "<p>these sorts of issues often pop up when using rustc-perf, so I avoid using it</p>",
        "id": 203898569,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594767597
    },
    {
        "content": "<p>I think you might be missing a $ on your which cargo?</p>",
        "id": 203898662,
        "sender_full_name": "simulacrum",
        "timestamp": 1594767617
    },
    {
        "content": "<p>it works fine for me with an explicit <code>--builds</code> <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 203898713,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594767662
    },
    {
        "content": "<p>Would be helpful to get the exact command you are running and the output</p>",
        "id": 203898733,
        "sender_full_name": "simulacrum",
        "timestamp": 1594767675
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/NRVO/near/203898662\">said</a>:</p>\n<blockquote>\n<p>I think you might be missing a $ on your which cargo?</p>\n</blockquote>\n<p>No, but it looks like passing the rustup wrapper causes that issue</p>",
        "id": 203898748,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594767685
    },
    {
        "content": "<p>If I use <code>rustup which cargo</code> and pass that path it works</p>",
        "id": 203898760,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594767698
    },
    {
        "content": "<p>(fish uses <code>(cmd)</code> syntax instead of <code>$(cmd)</code>)</p>",
        "id": 203898789,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594767717
    },
    {
        "content": "<p>(working on a fix)</p>",
        "id": 203898935,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594767828
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rustc-perf/pull/682\">https://github.com/rust-lang/rustc-perf/pull/682</a></p>",
        "id": 203899145,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594767994
    },
    {
        "content": "<p>thanks!</p>",
        "id": 203899154,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594768005
    },
    {
        "content": "<p>weird that <code>$(which cargo)</code> doesn't work for you, it works for me locally</p>",
        "id": 203899192,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594768039
    },
    {
        "content": "<p>don't spend time on rustc-perf for my sake though, I will always use the dumbest tooling available to me, if i can't use it with my brain completely turned off then I won't use it :P</p>",
        "id": 203899207,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594768055
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ which cargo\n/home/joshua/.local/lib/cargo/bin/cargo\n</code></pre></div>",
        "id": 203899216,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594768063
    },
    {
        "content": "<p>yeah I agree rustc_perf is not very user friendly</p>",
        "id": 203899283,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594768091
    },
    {
        "content": "<p>(I only use it because I want to get rustdoc up on <a href=\"http://perf.rust-lang.org\">perf.rust-lang.org</a> :P)</p>",
        "id": 203899330,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594768137
    },
    {
        "content": "<p>my current workflow would be:</p>\n<ul>\n<li><code>cd</code> into <code>collector/benchmarks/&lt;bench&gt;</code></li>\n<li><code>cargo build -v</code> and copy the rustc invocation</li>\n<li>insert <code>+custom-stage1</code> after <code>rustc</code></li>\n<li>remove incremental-related args</li>\n<li>prefix <code>time</code></li>\n</ul>\n<p>it's awful but sufficiently dumb for me to do it</p>",
        "id": 203899448,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594768221
    },
    {
        "content": "<p>If following the docs doesn't work, that's a problem that needs fixing</p>",
        "id": 203899695,
        "sender_full_name": "njn",
        "timestamp": 1594768444
    },
    {
        "content": "<p>And the commands are awfully complicated, I wonder if they could be improved</p>",
        "id": 203899706,
        "sender_full_name": "njn",
        "timestamp": 1594768458
    },
    {
        "content": "<p>as a simple change, it would be great if <code>--bin</code> worked for subcommands</p>",
        "id": 203899743,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594768493
    },
    {
        "content": "<p>right now I have to use <code>cargo run --bin collector -- --db</code> which is very frustrating when I want to change the db, I have to go all the way to the start of the line</p>",
        "id": 203899775,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594768519
    },
    {
        "content": "<p>and another possible change is to look for other tools next to rustc and use the ones in path if they're not there</p>",
        "id": 203899849,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594768566
    },
    {
        "content": "<p>so instead of <code>--rustc ../rust/build/x86_64-unknown-linux-gnu/stage1/bin/rustc --cargo $(which cargo)</code> you have <code>--exe-dir ../rust/build/x86_64-unknown-linux-gnu/stage1/bin</code> and it looks for both in there</p>",
        "id": 203899869,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594768590
    },
    {
        "content": "<p>(maybe print a warning if using the one in PATH)</p>",
        "id": 203899889,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594768607
    },
    {
        "content": "<p>and it would be _amazing_ if it could use a rustup toolchain</p>",
        "id": 203899957,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594768681
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> the docs suggest <code>target/release/collector ...</code>, is that not good for you?</p>",
        "id": 203900289,
        "sender_full_name": "njn",
        "timestamp": 1594768957
    },
    {
        "content": "<p>then I have to remember to recompile after I make a change :/</p>",
        "id": 203900308,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594768971
    },
    {
        "content": "<p>it's really easy to use an old version of the code without realizing it</p>",
        "id": 203900317,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594768981
    },
    {
        "content": "<p>ok</p>",
        "id": 203900318,
        "sender_full_name": "njn",
        "timestamp": 1594768981
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> by \"looks for both\" do you mean <code>rustc</code> and <code>cargo</code>?</p>",
        "id": 203900471,
        "sender_full_name": "njn",
        "timestamp": 1594769088
    },
    {
        "content": "<p>yes, and now rustdoc</p>",
        "id": 203900482,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594769095
    },
    {
        "content": "<p>So my dirs like that only contain <code>rustc</code></p>",
        "id": 203900519,
        "sender_full_name": "njn",
        "timestamp": 1594769124
    },
    {
        "content": "<p>This is for local rustc builds</p>",
        "id": 203900522,
        "sender_full_name": "njn",
        "timestamp": 1594769128
    },
    {
        "content": "<p>I build with <code>./x.py build --stage 2 src/rustc</code>, I wonder if that's relevant</p>",
        "id": 203900544,
        "sender_full_name": "njn",
        "timestamp": 1594769150
    },
    {
        "content": "<p>yeah that only builds rustc, not the tools</p>",
        "id": 203900627,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594769190
    },
    {
        "content": "<p>if you use <code>build --stage 1 src/rustc src/tools/rustdoc src/tools/cargo</code> it would build all of them</p>",
        "id": 203900653,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594769211
    },
    {
        "content": "<p>(not sure if it's the same for --stage 2 but I assume so)</p>",
        "id": 203900658,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594769219
    },
    {
        "content": "<p>Thanks! Specifying a single dir for all tools would definitely be nicer</p>",
        "id": 203900786,
        "sender_full_name": "njn",
        "timestamp": 1594769324
    },
    {
        "content": "<p>Also, we have a bunch of options that aren't really options. E.g. you have to specify <code>--output</code> with <code>profile</code>. So perhaps it should just be a positional argument?</p>",
        "id": 203900842,
        "sender_full_name": "njn",
        "timestamp": 1594769372
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> That command you suggested built <code>rustdoc</code>, but not <code>cargo</code></p>",
        "id": 203900998,
        "sender_full_name": "njn",
        "timestamp": 1594769513
    },
    {
        "content": "<p>can you pass multiple targets? I thought that just failed silently</p>",
        "id": 203901055,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594769544
    },
    {
        "content": "<p>I know it does for tests</p>",
        "id": 203901061,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594769554
    },
    {
        "content": "<p>I just tried several variations, I can't get it to build Cargo</p>",
        "id": 203901187,
        "sender_full_name": "njn",
        "timestamp": 1594769647
    },
    {
        "content": "<p>I can get <code>rustc</code> and <code>rustdoc</code> to both build in a single invocation</p>",
        "id": 203901201,
        "sender_full_name": "njn",
        "timestamp": 1594769662
    },
    {
        "content": "<p>just <code>./x.py build</code> builds <code>rustc</code> and <code>rustdoc</code>, but not <code>cargo</code></p>",
        "id": 203901321,
        "sender_full_name": "njn",
        "timestamp": 1594769771
    },
    {
        "content": "<p>you need <code>tools = [\"cargo\"]</code> in config.toml, sorry <span class=\"user-mention\" data-user-id=\"120989\">@njn</span></p>",
        "id": 203901805,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594770200
    },
    {
        "content": "<p>or actually just <code>extended = true</code></p>",
        "id": 203901824,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594770220
    },
    {
        "content": "<p>not sure who decided to make that config.toml instead of a CLI arg <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 203901881,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594770246
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/NRVO/near/203901055\">said</a>:</p>\n<blockquote>\n<p>can you pass multiple targets? I thought that just failed silently</p>\n</blockquote>\n<p>yes, you can, I use <code>build src/tools/rustdoc src/libstd</code> a lot</p>",
        "id": 203901941,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594770295
    },
    {
        "content": "<p>I'm looking closely at all the <code>collector</code> commands and options, it's such a mess</p>",
        "id": 203902011,
        "sender_full_name": "njn",
        "timestamp": 1594770359
    },
    {
        "content": "<p>global options that only apply to some commands; options that are mandatory; etc.</p>",
        "id": 203902061,
        "sender_full_name": "njn",
        "timestamp": 1594770382
    },
    {
        "content": "<p>/me will clean this up</p>",
        "id": 203902067,
        "sender_full_name": "njn",
        "timestamp": 1594770388
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> <code>extended = true</code> alone gives me trouble, because <code>rustfmt</code> doesn't build. The suggested full line is  <code>tools = [\"cargo\", \"rls\", \"clippy\", \"rustfmt\", \"analysis\", \"src\"]</code>. What does the <code>\"src\"</code> do? Also, I think clippy is now built by default anyway...</p>",
        "id": 203903928,
        "sender_full_name": "njn",
        "timestamp": 1594772126
    },
    {
        "content": "<p>I'm not actually sure ... maybe it's related to the <code>rustc-src</code> component of rustup?</p>",
        "id": 203903954,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594772155
    },
    {
        "content": "<p>but I think <code>tools = [\"cargo\"]</code> should be good enough for perf</p>",
        "id": 203904016,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594772175
    },
    {
        "content": "<p>Even with that, I still can't get <code>cargo</code> to be built</p>",
        "id": 203904030,
        "sender_full_name": "njn",
        "timestamp": 1594772201
    },
    {
        "content": "<p>maybe <span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> has ideas?</p>",
        "id": 203904037,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594772217
    },
    {
        "content": "<p>At least, it doesn't end up in the same dir as <code>rustc</code> and <code>rustdoc</code></p>",
        "id": 203904072,
        "sender_full_name": "njn",
        "timestamp": 1594772257
    },
    {
        "content": "<p>I do get this line \"Building stage2 tool cargo (x86_64-unknown-linux-gnu)\"</p>",
        "id": 203904089,
        "sender_full_name": "njn",
        "timestamp": 1594772276
    },
    {
        "content": "<p>oh in that case you want <code>stage2-tools</code> I think</p>",
        "id": 203904141,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594772294
    },
    {
        "content": "<p>hmm maybe it doesn't make sense to look for cargo with the others ...</p>",
        "id": 203904153,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594772309
    },
    {
        "content": "<p>That's a shame, I was hoping to merge <code>--rustc</code> and <code>--cargo</code> options</p>",
        "id": 203904218,
        "sender_full_name": "njn",
        "timestamp": 1594772379
    },
    {
        "content": "<p>I guess we could make the code a bit clever, look for <code>cargo</code> next to <code>rustc</code>, if it's not found, then look in <code>../../stage-2-tools-bin/</code>?</p>",
        "id": 203904611,
        "sender_full_name": "njn",
        "timestamp": 1594772689
    },
    {
        "content": "<p>before you implement that, can you check it's actually in stage2-tools? I don't have cargo built right now haha</p>",
        "id": 203904650,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594772726
    },
    {
        "content": "<p>It is</p>",
        "id": 203904659,
        "sender_full_name": "njn",
        "timestamp": 1594772732
    },
    {
        "content": "<p>Don't worry, I test the code I write :)</p>",
        "id": 203904676,
        "sender_full_name": "njn",
        "timestamp": 1594772750
    },
    {
        "content": "<p>how common is it to build cargo from scratch?</p>",
        "id": 203904683,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594772754
    },
    {
        "content": "<p>Not common, but we could make it a pre-requisite of doing local profiling?</p>",
        "id": 203904754,
        "sender_full_name": "njn",
        "timestamp": 1594772798
    },
    {
        "content": "<p>Maybe I'll just stick with two options for now</p>",
        "id": 203904772,
        "sender_full_name": "njn",
        "timestamp": 1594772813
    },
    {
        "content": "<p><code>x.py build src/tools/cargo</code> will place cargo in the <code>stage2-tools</code> directory.  I think <code>dist</code> or <code>install</code> will package everything together.  But why do you need cargo at all?</p>",
        "id": 203904774,
        "sender_full_name": "Eric Huss",
        "timestamp": 1594772815
    },
    {
        "content": "<p>rustc-perf uses cargo</p>",
        "id": 203904789,
        "sender_full_name": "njn",
        "timestamp": 1594772833
    },
    {
        "content": "<p>to build each benchmark</p>",
        "id": 203904804,
        "sender_full_name": "njn",
        "timestamp": 1594772849
    },
    {
        "content": "<p>Usually it should be fine to use nightly cargo.</p>",
        "id": 203904884,
        "sender_full_name": "Eric Huss",
        "timestamp": 1594772908
    },
    {
        "content": "<p>I'm not sure what your setup is (if you use rustup or even have nightly installed)</p>",
        "id": 203904891,
        "sender_full_name": "Eric Huss",
        "timestamp": 1594772924
    },
    {
        "content": "<p>Usually nightly cargo is fine. Currently for local profiling you have to specify both a rustc executable and a cargo executable, which is just a bit of a pain</p>",
        "id": 203904947,
        "sender_full_name": "njn",
        "timestamp": 1594772977
    },
    {
        "content": "<p>It would be nice if we could specify a single dir, and have it find both <code>rustc</code> and <code>cargo</code> from that</p>",
        "id": 203904963,
        "sender_full_name": "njn",
        "timestamp": 1594772992
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> whenever I see this used people use <code>--cargo $(which cargo)</code></p>",
        "id": 203905040,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594773058
    },
    {
        "content": "<p>can we do that inside collector?</p>",
        "id": 203905054,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594773065
    },
    {
        "content": "<p>i guess we could</p>",
        "id": 203905061,
        "sender_full_name": "njn",
        "timestamp": 1594773076
    },
    {
        "content": "<p>technically you probably want something like rustup which cargo --toolchain nightly ideally</p>",
        "id": 203906039,
        "sender_full_name": "simulacrum",
        "timestamp": 1594774007
    }
]