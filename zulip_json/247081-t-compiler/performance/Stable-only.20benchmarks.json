[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> About <a href=\"https://github.com/rust-lang/rustc-perf/pull/1206\">https://github.com/rust-lang/rustc-perf/pull/1206</a>: I could add two additional categories: <code>Stable</code> and <code>PrimaryAndStable</code>, use them in perf-config.json when appropriate, and eliminate <code>supports_stable</code> from perf-config.json. If I don't also change the DB structure (which I don't) then we'd end up with two different meanings of \"category\", one for perf-config.json and one for the DB.</p>",
        "id": 275429857,
        "sender_full_name": "nnethercote",
        "timestamp": 1647375532
    },
    {
        "content": "<p><code>PrimaryAndStable</code> would likely go away once the transition is done.</p>",
        "id": 275429872,
        "sender_full_name": "nnethercote",
        "timestamp": 1647375548
    },
    {
        "content": "<p>Yeah having re-read I'm fine with the db changes as is</p>",
        "id": 275429883,
        "sender_full_name": "simulacrum",
        "timestamp": 1647375552
    },
    {
        "content": "<p>(i.e., no changes, really)</p>",
        "id": 275429892,
        "sender_full_name": "simulacrum",
        "timestamp": 1647375558
    },
    {
        "content": "<p>but your suggestion would also work for me.</p>",
        "id": 275429907,
        "sender_full_name": "simulacrum",
        "timestamp": 1647375572
    },
    {
        "content": "<p>Do you think it's an active improvement? It makes the \"front-end\" nicer, esp. the perf-config.json, at the cost of bifurcating the meaning of \"category\"</p>",
        "id": 275429940,
        "sender_full_name": "nnethercote",
        "timestamp": 1647375597
    },
    {
        "content": "<p>hmmm</p>",
        "id": 275430040,
        "sender_full_name": "simulacrum",
        "timestamp": 1647375645
    },
    {
        "content": "<p>I think I would probably change supports-stable to be an enum</p>",
        "id": 275430067,
        "sender_full_name": "simulacrum",
        "timestamp": 1647375664
    },
    {
        "content": "<p>instead of modifying category</p>",
        "id": 275430074,
        "sender_full_name": "simulacrum",
        "timestamp": 1647375669
    },
    {
        "content": "<p>(OnlyStable, AlsoStable, No)</p>",
        "id": 275430125,
        "sender_full_name": "simulacrum",
        "timestamp": 1647375703
    },
    {
        "content": "<p>bikeshed on names, of course</p>",
        "id": 275430129,
        "sender_full_name": "simulacrum",
        "timestamp": 1647375711
    },
    {
        "content": "<p>(and then leave the category itself as non-optional)</p>",
        "id": 275430222,
        "sender_full_name": "simulacrum",
        "timestamp": 1647375751
    },
    {
        "content": "<p>I think the eventual destination is three distinct categories: primary, secondary, stable(only)</p>",
        "id": 275430279,
        "sender_full_name": "nnethercote",
        "timestamp": 1647375784
    },
    {
        "content": "<p>So augmenting <code>supports_stable</code> feels like the wrong direction</p>",
        "id": 275430315,
        "sender_full_name": "nnethercote",
        "timestamp": 1647375809
    },
    {
        "content": "<p>Hm</p>",
        "id": 275430539,
        "sender_full_name": "simulacrum",
        "timestamp": 1647375928
    },
    {
        "content": "<p>I guess, yes</p>",
        "id": 275430546,
        "sender_full_name": "simulacrum",
        "timestamp": 1647375934
    },
    {
        "content": "<p>We could migrate category to 4 variants (as you suggested), too, no strong feelings there -- just slightly more edits to various benchmarks</p>",
        "id": 275430568,
        "sender_full_name": "simulacrum",
        "timestamp": 1647375955
    },
    {
        "content": "<p>I think the thing I'm most reluctant about is the 'missing category' implying 'supports-only-stable'</p>",
        "id": 275430632,
        "sender_full_name": "simulacrum",
        "timestamp": 1647375971
    },
    {
        "content": "<p>but it's also ok, not really critical</p>",
        "id": 275430646,
        "sender_full_name": "simulacrum",
        "timestamp": 1647375984
    },
    {
        "content": "<p>I'll try adding the extra categories to the front-end, see how it feels</p>",
        "id": 275430677,
        "sender_full_name": "nnethercote",
        "timestamp": 1647376002
    },
    {
        "content": "<p>thanks</p>",
        "id": 275430685,
        "sender_full_name": "nnethercote",
        "timestamp": 1647376006
    },
    {
        "content": "<p>by frontend do you mean the compare.html listing?</p>",
        "id": 275430700,
        "sender_full_name": "simulacrum",
        "timestamp": 1647376018
    },
    {
        "content": "<p>I don't think we should mention stable there, it'll confuse people</p>",
        "id": 275430715,
        "sender_full_name": "simulacrum",
        "timestamp": 1647376030
    },
    {
        "content": "<p>listing it in the 'raw' category enum seems ok/good, though</p>",
        "id": 275430733,
        "sender_full_name": "simulacrum",
        "timestamp": 1647376050
    },
    {
        "content": "<p>Sorry, by \"front-end\" I meant perf-config.json and the code that runs the benchmarks</p>",
        "id": 275432125,
        "sender_full_name": "nnethercote",
        "timestamp": 1647376724
    },
    {
        "content": "<p>I will avoid using that term, it's horrible imprecise <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 275432146,
        "sender_full_name": "nnethercote",
        "timestamp": 1647376743
    },
    {
        "content": "<p>yeah, that code seems good</p>",
        "id": 275432162,
        "sender_full_name": "simulacrum",
        "timestamp": 1647376755
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> How important is this distinction between <code>None</code> and <code>Some(false)</code> in the DB code? <a href=\"https://github.com/rust-lang/rustc-perf/blob/5abe11bbaf47aab4861b87ac6fa0225adc53c5c1/database/src/pool/sqlite.rs#L895-L911\">https://github.com/rust-lang/rustc-perf/blob/5abe11bbaf47aab4861b87ac6fa0225adc53c5c1/database/src/pool/sqlite.rs#L895-L911</a></p>",
        "id": 275445555,
        "sender_full_name": "nnethercote",
        "timestamp": 1647384181
    },
    {
        "content": "<p>With this change I'm working on it will be more natural to end up with just <code>true</code> or <code>false</code> for <code>supports_stable</code>. Is it ok if we always do the <code>if</code> behaviour from that snippet?</p>",
        "id": 275445627,
        "sender_full_name": "nnethercote",
        "timestamp": 1647384242
    },
    {
        "content": "<p>Actually, never mind, the <code>None</code> case is only for SQLite importing which doesn't affect me</p>",
        "id": 275447318,
        "sender_full_name": "nnethercote",
        "timestamp": 1647385267
    },
    {
        "content": "<p>It's fine to always update both columns</p>",
        "id": 275447696,
        "sender_full_name": "simulacrum",
        "timestamp": 1647385469
    },
    {
        "content": "<p>(presuming we have data to do so)</p>",
        "id": 275447706,
        "sender_full_name": "simulacrum",
        "timestamp": 1647385480
    },
    {
        "content": "<p>Ok, I'm happy with the new approach, code in the PR</p>",
        "id": 275452501,
        "sender_full_name": "nnethercote",
        "timestamp": 1647388825
    },
    {
        "content": "<p>Left a couple of comments on <a href=\"https://hackmd.io/d9uE7qgtTWKDLivy0uoVQw\">https://hackmd.io/d9uE7qgtTWKDLivy0uoVQw</a></p>",
        "id": 275493794,
        "sender_full_name": "bjorn3",
        "timestamp": 1647427985
    },
    {
        "content": "<p>Oh, interesting: I just went to do the <code>futures</code> update to <code>futures-0.3.21</code>. I discovered that <code>futures-0.3.21</code> is now just a facade crates to a bunch of sub-crates: <code>futures-core</code>, <code>futures-channel</code>, <code>futures-executor</code>, etc. There's basically no code in the <code>futures</code> leaf crate, and given that's all we measure, there's no point having <code>futures-0.3.21</code> in the suite... it's not that different to <code>helloworld</code>.</p>",
        "id": 276001291,
        "sender_full_name": "nnethercote",
        "timestamp": 1647831187
    },
    {
        "content": "<p>The old <code>futures</code> crate <em>did</em> have actual code in it, and no sub-crates.</p>",
        "id": 276001303,
        "sender_full_name": "nnethercote",
        "timestamp": 1647831220
    },
    {
        "content": "<p>So I'll just move the existing <code>futures</code> benchmark to stable-only, and not import <code>futures-0.3.21</code></p>",
        "id": 276001333,
        "sender_full_name": "nnethercote",
        "timestamp": 1647831243
    },
    {
        "content": "<p>Have we ever discussed the term \"stable\" - I find it confusing.. Should we just call them \"dashboard\" instead?</p>",
        "id": 276337363,
        "sender_full_name": "rylev",
        "timestamp": 1648044140
    },
    {
        "content": "<p>The old field in <code>perf-config.json</code> to identify them was called <code>supports_stable</code>, so I took it from that. It got mentioned in some of the recent threads briefly, and in the PR that made it official, but there wasn't a big discussion.</p>",
        "id": 276393987,
        "sender_full_name": "nnethercote",
        "timestamp": 1648066732
    }
]