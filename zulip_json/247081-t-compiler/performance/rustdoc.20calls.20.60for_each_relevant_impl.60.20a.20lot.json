[
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/78761#issuecomment-722150923\">https://github.com/rust-lang/rust/issues/78761#issuecomment-722150923</a></p>\n<p>any ideas how to make this faster? <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> blanket impls are like <code>impl&lt;T&gt; MyTrait for T</code>, right? is there any way to speed that up other than by looking at all traits and impls?</p>",
        "id": 215672877,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604554439
    },
    {
        "content": "<p>the other thing that's really weird is that <code>get_blanket_impls</code> takes 2-3x as long for intra-doc links as for <code>clean</code>, but it should be doing exactly the same thing</p>",
        "id": 215672946,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604554539
    },
    {
        "content": "<p>maybe it's just calling it more</p>",
        "id": 215672949,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604554544
    },
    {
        "content": "<p>ok yes I found the issue was that rustdoc isn't short-circuiting when it could be</p>",
        "id": 215675267,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604558039
    },
    {
        "content": "<p>probably there are more isues that will crop up after</p>",
        "id": 215675308,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604558046
    },
    {
        "content": "<p>this is not entirely fixed but is <em>astoundingly</em> better after <a href=\"https://github.com/rust-lang/rust/pull/77700#issuecomment-735995025\">https://github.com/rust-lang/rust/pull/77700#issuecomment-735995025</a></p>",
        "id": 218334345,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606764843
    },
    {
        "content": "<p>would love to have thoughts on <a href=\"https://github.com/rust-lang/rustc-perf/pull/802\">https://github.com/rust-lang/rustc-perf/pull/802</a></p>",
        "id": 218337761,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606766488
    },
    {
        "content": "<p>If it's not a huge time sink it seems reasonable</p>",
        "id": 218338083,
        "sender_full_name": "simulacrum",
        "timestamp": 1606766618
    },
    {
        "content": "<p>let me bench it locally</p>",
        "id": 218338177,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606766646
    },
    {
        "content": "<p>I am not sure about the cargo config with a custom target though</p>",
        "id": 218338194,
        "sender_full_name": "simulacrum",
        "timestamp": 1606766653
    },
    {
        "content": "<p>I guess we can prebuild std for that target too</p>",
        "id": 218338216,
        "sender_full_name": "simulacrum",
        "timestamp": 1606766664
    },
    {
        "content": "<p>we can probably remove that and still get good benchmarks</p>",
        "id": 218338219,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606766665
    },
    {
        "content": "<p>IIRC it's not actually needed</p>",
        "id": 218338228,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606766673
    },
    {
        "content": "<p>well, that's annoying, we removed that support</p>",
        "id": 218338230,
        "sender_full_name": "simulacrum",
        "timestamp": 1606766674
    },
    {
        "content": "<p>ok, if we can drop the target then it should work</p>",
        "id": 218338244,
        "sender_full_name": "simulacrum",
        "timestamp": 1606766682
    },
    {
        "content": "<p>I imagine CI might not pass with the custom target, not sure what we use for that right now</p>",
        "id": 218338267,
        "sender_full_name": "simulacrum",
        "timestamp": 1606766695
    },
    {
        "content": "<p>oh it does need custom features, how do I add those?</p>",
        "id": 218338302,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606766715
    },
    {
        "content": "<p>I've been testing with <code>--features stm32h742</code></p>",
        "id": 218338330,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606766724
    },
    {
        "content": "<p>I guess I could change the code to turn it on by default? Are these benchmarks ever updated once added?</p>",
        "id": 218338368,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606766746
    },
    {
        "content": "<p>There's support for perf-config.json</p>",
        "id": 218338646,
        "sender_full_name": "simulacrum",
        "timestamp": 1606766881
    },
    {
        "content": "<p>They are not updated unless breakage occurs</p>",
        "id": 218338694,
        "sender_full_name": "simulacrum",
        "timestamp": 1606766890
    },
    {
        "content": "<p>ok, I could add it to cargo_opts</p>",
        "id": 218338722,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606766910
    },
    {
        "content": "<p>yep that should work</p>",
        "id": 218338748,
        "sender_full_name": "simulacrum",
        "timestamp": 1606766920
    },
    {
        "content": "<p>lol this takes so much memory I'm having trouble running it locally <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 218339344,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606767238
    },
    {
        "content": "<p>it keeps getting OOM killed</p>",
        "id": 218339392,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606767244
    },
    {
        "content": "<p>is there a way to get more info about this error? The <code>/tmp</code> file it mentiosn doesn't exist.</p>\n<div class=\"codehilite\"><pre><span></span><code>Benchmarking stm32 for triple x86_64-unknown-linux-gnu\n1 benchmark remaining\nPreparing stm32h7xx-hal\nRunning stm32h7xx-hal: Check + [Full]\ncollector error: Failed to benchmark &#39;stm32h7xx-hal&#39;, recorded: touching &quot;src/cargo/lib.rs&quot; in &quot;/tmp/.tmpEsclMn&quot;\ncollection took 163.282169148s with 1 failed benchmarks\ncollector error: 1 benchmarks failed\n</code></pre></div>",
        "id": 218339554,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606767337
    },
    {
        "content": "<p>It's a directory</p>",
        "id": 218339663,
        "sender_full_name": "simulacrum",
        "timestamp": 1606767378
    },
    {
        "content": "<p>Try running with RUST_LOG=trace or so?</p>",
        "id": 218339680,
        "sender_full_name": "simulacrum",
        "timestamp": 1606767385
    },
    {
        "content": "<p>(well, it should be a tmpdir)</p>",
        "id": 218339713,
        "sender_full_name": "simulacrum",
        "timestamp": 1606767399
    },
    {
        "content": "<p><code>ls: cannot access '/tmp/.tmpEsclMn': No such file or directory</code></p>",
        "id": 218339765,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606767431
    },
    {
        "content": "<p>I'll try RUST_LOG</p>",
        "id": 218339770,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606767434
    },
    {
        "content": "<p>ok, in a meeting can help debug later</p>",
        "id": 218339791,
        "sender_full_name": "simulacrum",
        "timestamp": 1606767449
    },
    {
        "content": "<p>yeah, this isn't urgent</p>",
        "id": 218339816,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606767462
    },
    {
        "content": "<p>oh lol I set <code>touch_file</code> to <code>src/cargo/lib.rs</code></p>",
        "id": 218340043,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606767561
    },
    {
        "content": "<p>which of course fails because the file doesn't exist</p>",
        "id": 218340057,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606767567
    },
    {
        "content": "<p>hmm, now it's failing with 'non-wrapped rustc'</p>\n<div class=\"codehilite\"><pre><span></span><code>    Checking typenum v1.12.0\n&quot;/home/joshua/.local/lib/rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rustc&quot; [&quot;--crate-name&quot;, &quot;typenum&quot;, &quot;/home/joshua/.local/lib/cargo/registry/src/github.com-1ecc6299db9ec823/typenum-1.12.0/src/lib.rs&quot;, &quot;--error-format=json&quot;, &quot;--json=diagnostic-rendered-ansi&quot;, &quot;--crate-type&quot;, &quot;lib&quot;, &quot;--emit=dep-info,metadata&quot;, &quot;-C&quot;, &quot;embed-bitcode=no&quot;, &quot;-C&quot;, &quot;codegen-units=1&quot;, &quot;-C&quot;, &quot;debuginfo=2&quot;, &quot;-C&quot;, &quot;metadata=55abf5df980f67b0&quot;, &quot;-C&quot;, &quot;extra-filename=-55abf5df980f67b0&quot;, &quot;--out-dir&quot;, &quot;/tmp/.tmpKb7nkT/target/debug/deps&quot;, &quot;-L&quot;, &quot;dependency=/tmp/.tmpKb7nkT/target/debug/deps&quot;, &quot;--cap-lints&quot;, &quot;allow&quot;, &quot;-C&quot;, &quot;link-arg=-fuse-ld=lld&quot;, &quot;-Adeprecated&quot;, &quot;-Aunknown-lints&quot;]\nexiting -- non-wrapped rustc\nerror: could not compile `typenum`\n\nTo learn more, run the command again with --verbose.\ncollector error: Failed to benchmark &#39;stm32h7xx-hal&#39;, recorded: expected success, got exit code: 101\n</code></pre></div>",
        "id": 218364848,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606781492
    },
    {
        "content": "<p>I remember this working a while ago :/</p>",
        "id": 218364860,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606781499
    },
    {
        "content": "<p>hmm, this does work for other benchmarks though</p>",
        "id": 218365196,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606781680
    },
    {
        "content": "<p>do I need to get rid of all the dependencies or something?</p>",
        "id": 218365401,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606781794
    },
    {
        "content": "<p><code>clap</code> seems to have dependencies so I wouldn't expect that to be it</p>",
        "id": 218365472,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606781848
    },
    {
        "content": "<p>this is <em>really</em> strange, <code>EXPECT_ONLY_WRAPPED_RUSTC</code> and <code>--wrap-rustc-with</code> are set in the same place, but this command line doesn't show <code>--wrap-rustc-with</code></p>",
        "id": 218366394,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606782482
    },
    {
        "content": "<p>maybe rustc is calling itself recursively or something ??</p>",
        "id": 218366441,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606782491
    },
    {
        "content": "<p>ok, so I <em>think</em> what's going on is that <code>cargo rustc</code> only passes through the arguments to the last invocation of rustc</p>",
        "id": 218370017,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606785565
    },
    {
        "content": "<p>but the environment variable EXPECT_ONLY_WRAPPED_RUSTC is set for each</p>",
        "id": 218370028,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606785577
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> is it ok if I just don't set that variable? I don't know a way to set env variables for only one invocation of rustc while still going through cargo</p>",
        "id": 218370046,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606785596
    },
    {
        "content": "<p>What are you trying to do?</p>",
        "id": 218370130,
        "sender_full_name": "simulacrum",
        "timestamp": 1606785655
    },
    {
        "content": "<p>compile <code>stm32</code> as a benchmark</p>",
        "id": 218370143,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606785675
    },
    {
        "content": "<p>but apparently some of the dependencies are getting rebuilt</p>",
        "id": 218370155,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606785689
    },
    {
        "content": "<p>and rustc-fake doesn't know what to do so it exits with an error</p>",
        "id": 218370166,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606785701
    },
    {
        "content": "<p>Right, you need to figure out why</p>",
        "id": 218370167,
        "sender_full_name": "simulacrum",
        "timestamp": 1606785703
    },
    {
        "content": "<p>hmm, this seems like a cargo question</p>",
        "id": 218370182,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606785721
    },
    {
        "content": "<p>There's the fingerprint log that CI uses and it should tell you enough</p>",
        "id": 218370239,
        "sender_full_name": "simulacrum",
        "timestamp": 1606785774
    },
    {
        "content": "<p>(you can also set it locally)</p>",
        "id": 218370262,
        "sender_full_name": "simulacrum",
        "timestamp": 1606785815
    },
    {
        "content": "<p>yeah this has some local changes</p>",
        "id": 218370270,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606785827
    },
    {
        "content": "<p>I agree that we should add this kind of benchmark, though so I will make time to take a look over the next week or so</p>",
        "id": 218370331,
        "sender_full_name": "simulacrum",
        "timestamp": 1606785860
    },
    {
        "content": "<p>I'll push my local changes tonight so you don't have to figure them out again</p>",
        "id": 218370352,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606785887
    },
    {
        "content": "<p>It's likely a matter of patching a build script or something</p>",
        "id": 218370380,
        "sender_full_name": "simulacrum",
        "timestamp": 1606785924
    },
    {
        "content": "<p>ok I found the issue, it was running <code>touch</code> on the output of a build script</p>\n<div class=\"codehilite\"><pre><span></span><code>./target/debug/build/typenum-39c640dcd10f7ddf/out/op.rs\n./target/debug/build/typenum-39c640dcd10f7ddf/out/consts.rs\n./target/debug/build/typenum-39c640dcd10f7ddf/out/tests.rs\n</code></pre></div>",
        "id": 218370717,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606786238
    },
    {
        "content": "<p>Is there a way to tell <code>collector</code> 'touch all rust files not in <code>target/</code>'?</p>",
        "id": 218370734,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606786262
    },
    {
        "content": "<p>maybe I'll just patch it to always do that</p>",
        "id": 218370817,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606786332
    },
    {
        "content": "<p>wow <code>find</code> has such ugly syntax</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/collector/src/execute.rs b/collector/src/execute.rs</span>\n<span class=\"gh\">index ccde0eb2..414e2df4 100644</span>\n<span class=\"gd\">--- a/collector/src/execute.rs</span>\n<span class=\"gi\">+++ b/collector/src/execute.rs</span>\n<span class=\"gu\">@@ -52,8 +52,9 @@ fn touch(root: &amp;Path, path: &amp;Path) -&gt; anyhow::Result&lt;()&gt; {</span>\n\n fn touch_all(path: &amp;Path) -&gt; anyhow::Result&lt;()&gt; {\n     let mut cmd = Command::new(\"bash\");\n<span class=\"gi\">+    // Don't touch files in `target/`, since they're likely generated by build scripts and might be from a dependency.</span>\n     cmd.current_dir(path)\n<span class=\"gd\">-        .args(&amp;[\"-c\", \"find . -name '*.rs' | xargs touch\"]);</span>\n<span class=\"gi\">+        .args(&amp;[\"-c\", \"find . -path ./target -prune -false -o -name '*.rs' | xargs touch\"]);</span>\n     command_output(&amp;mut cmd).with_context(|| format!(\"touching all .rs in {:?}\", path))?;\n     // We also delete the cmake caches to avoid errors when moving directories around.\n     // This might be a bit slower but at least things build\n</code></pre></div>",
        "id": 218370960,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606786463
    },
    {
        "content": "<p>yay it's working <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> just needed a couple more patches to stm32</p>",
        "id": 218371340,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606786889
    },
    {
        "content": "<p>Huh, good find.</p>",
        "id": 218374794,
        "sender_full_name": "simulacrum",
        "timestamp": 1606790762
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/rustdoc.20calls.20.60for_each_relevant_impl.60.20a.20lot/near/215672877\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/78761#issuecomment-722150923\">https://github.com/rust-lang/rust/issues/78761#issuecomment-722150923</a></p>\n<p>any ideas how to make this faster? <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> blanket impls are like <code>impl&lt;T&gt; MyTrait for T</code>, right? is there any way to speed that up other than by looking at all traits and impls?</p>\n</blockquote>\n<p>OMG THIS WAS STARING ME IN THE FACE THE WHOLE TIME <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#method.trait_impls_of\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#method.trait_impls_of</a></p>",
        "id": 220454622,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608354986
    },
    {
        "content": "<p>won't finish this tonight but I bet doing this would make it O(n^2) instead of n^3</p>",
        "id": 220454629,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608355019
    },
    {
        "content": "<p>does anyone know how to get in contact with <code>@michaelwoerister</code>? I want to know if it's ok to make <code>TraitImpls::blanket_impls</code> public</p>",
        "id": 220489330,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608415236
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/rustdoc.20calls.20.60for_each_relevant_impl.60.20a.20lot/near/220454629\">said</a>:</p>\n<blockquote>\n<p>won't finish this tonight but I bet doing this would make it O(n^2) instead of n^3</p>\n</blockquote>\n<p>btw I was wrong, this would make it linear :)</p>",
        "id": 220489831,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608415992
    },
    {
        "content": "<p>it's <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> i think, isn't it?</p>",
        "id": 220490020,
        "sender_full_name": "lcnr",
        "timestamp": 1608416224
    },
    {
        "content": "<p>summarizing my thoughts in the meantime: <code>for_each_relevant_impl</code> is the wrong abstraction for rustdoc. I think it's intended for finding if a given impl applies to an item? In that case you'd only call it once, or at least have only a few traits that you consider. But rustdoc wants to find <em>all</em> impls for <em>every</em> trait, which gives it really bad polynomial time:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">crate</span><span class=\"p\">:</span>\n  <span class=\"k\">for</span> <span class=\"n\">trait</span> <span class=\"ow\">in</span> <span class=\"n\">all_traits</span><span class=\"p\">():</span>\n    <span class=\"k\">for</span> <span class=\"n\">impl</span> <span class=\"ow\">in</span> <span class=\"n\">relevant_impls</span><span class=\"p\">(</span><span class=\"n\">trait</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n      <span class=\"k\">if</span> <span class=\"nb\">all</span> <span class=\"n\">obligations</span> <span class=\"ow\">in</span> <span class=\"n\">impl</span> <span class=\"n\">apply</span> <span class=\"n\">to</span> <span class=\"n\">item</span><span class=\"p\">:</span>\n         <span class=\"c1\"># do some things with `Clean`</span>\n</code></pre></div>\n<p>The <code>for item in crate</code> bit can't be avoided, but it can avoid the triple nested inner loop by only considering the impls that match in the first place:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">crate</span><span class=\"p\">:</span>\n  <span class=\"k\">for</span> <span class=\"n\">impl</span> <span class=\"ow\">in</span> <span class=\"n\">blanket_impls</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">):</span>\n    <span class=\"c1\"># do some things with clean</span>\n</code></pre></div>",
        "id": 220490766,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608417256
    },
    {
        "content": "<p>in particular, this no longer looks at <code>non_blanket_impls</code> at all, nor tries to simplify the type, and it doesn't require running for each trait</p>",
        "id": 220490798,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608417341
    },
    {
        "content": "<p>although actually I think I'm doing this wrong - the <code>DefId</code> is the id of the <em>trait</em>, not the item</p>",
        "id": 220490868,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608417418
    },
    {
        "content": "<p>so this still has the same complexity :(</p>",
        "id": 220490879,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608417443
    },
    {
        "content": "<p>is there some way to look up what blanket impls apply directly?</p>",
        "id": 220490896,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608417472
    },
    {
        "content": "<p>i don't think so</p>",
        "id": 220490940,
        "sender_full_name": "lcnr",
        "timestamp": 1608417498
    },
    {
        "content": "<p>ok, is there a way to look up only the impls that apply to a given item?</p>",
        "id": 220490971,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608417556
    },
    {
        "content": "<p>rather than having to go through a random trait first</p>",
        "id": 220490976,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608417561
    },
    {
        "content": "<p>hmm maybe <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TyCtxt.html#method.all_impls\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TyCtxt.html#method.all_impls</a></p>",
        "id": 220491076,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608417704
    },
    {
        "content": "<p>err actually I think I want <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TyCtxt.html#method.all_trait_implementations\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TyCtxt.html#method.all_trait_implementations</a></p>",
        "id": 220491088,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608417722
    },
    {
        "content": "<p>could you walk all trait impls once</p>",
        "id": 220491220,
        "sender_full_name": "lcnr",
        "timestamp": 1608417914
    },
    {
        "content": "<p>sort them into three buckets:</p>",
        "id": 220491222,
        "sender_full_name": "lcnr",
        "timestamp": 1608417922
    },
    {
        "content": "<ul>\n<li>applying for all <code>T: ?Sized</code></li>\n</ul>",
        "id": 220491225,
        "sender_full_name": "lcnr",
        "timestamp": 1608417931
    },
    {
        "content": "<ul>\n<li>applying for <code>T: Sized</code></li>\n</ul>",
        "id": 220491226,
        "sender_full_name": "lcnr",
        "timestamp": 1608417938
    },
    {
        "content": "<p>what does Sized have to do with it?</p>",
        "id": 220491230,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608417950
    },
    {
        "content": "<ul>\n<li>applying for <code>T: TraitA + TraitB</code></li>\n</ul>",
        "id": 220491231,
        "sender_full_name": "lcnr",
        "timestamp": 1608417957
    },
    {
        "content": "<p><code>Sized</code> is the default, so I expect that to happen the most often and it's easier to check for</p>",
        "id": 220491282,
        "sender_full_name": "lcnr",
        "timestamp": 1608417993
    },
    {
        "content": "<p>what is the bucket for?</p>",
        "id": 220491289,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608418012
    },
    {
        "content": "<p>so looking a <code>T: Sized</code> separately from <code>T: OtherBounds</code> seems <del>easiest</del>worth it</p>",
        "id": 220491293,
        "sender_full_name": "lcnr",
        "timestamp": 1608418023
    },
    {
        "content": "<p>this has a runtime of <code>O(nTraits)</code></p>",
        "id": 220491299,
        "sender_full_name": "lcnr",
        "timestamp": 1608418043
    },
    {
        "content": "<p>now we know that all traits from the first bucket always apply</p>",
        "id": 220491303,
        "sender_full_name": "lcnr",
        "timestamp": 1608418057
    },
    {
        "content": "<p>from the second bucket if the adt is sized which we only have to check once</p>",
        "id": 220491309,
        "sender_full_name": "lcnr",
        "timestamp": 1608418074
    },
    {
        "content": "<p>and for the third one, which is probably fairly small we actually check if it can apply by using the current system</p>",
        "id": 220491360,
        "sender_full_name": "lcnr",
        "timestamp": 1608418108
    },
    {
        "content": "<p>the idea is to reduce the number of trait we have to check in the first place</p>",
        "id": 220491371,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608418132
    },
    {
        "content": "<p>ok, that makes sense</p>",
        "id": 220491378,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608418137
    },
    {
        "content": "<p>yeah, exactly</p>",
        "id": 220491381,
        "sender_full_name": "lcnr",
        "timestamp": 1608418140
    },
    {
        "content": "<p>the hard part I don't know how to do is how to go from</p>\n<div class=\"codehilite\"><pre><span></span><code>for item in crate:\n  for trait in crate:\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\"><pre><span></span><code>for trait in crate:\n  for item in crate:\n</code></pre></div>",
        "id": 220491399,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608418180
    },
    {
        "content": "<p>it's not a loop, it's some weird thing with <code>DocFolder</code></p>",
        "id": 220491405,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608418196
    },
    {
        "content": "<p>plus it gets called for all primitives</p>",
        "id": 220491450,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608418211
    },
    {
        "content": "<p>so my idea was a new rustdoc exclusive query which computes this</p>",
        "id": 220491456,
        "sender_full_name": "lcnr",
        "timestamp": 1608418234
    },
    {
        "content": "<p>or a function called when creating the <code>DocContext</code> and adding a field to <code>DocContext</code></p>",
        "id": 220491475,
        "sender_full_name": "lcnr",
        "timestamp": 1608418266
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/rustdoc.20calls.20.60for_each_relevant_impl.60.20a.20lot/near/220491299\">said</a>:</p>\n<blockquote>\n<p>this has a runtime of <code>O(nTraitI)</code></p>\n</blockquote>\n<p>and we only do it once at the start - it's actually O(nTraitImpls)</p>",
        "id": 220491491,
        "sender_full_name": "lcnr",
        "timestamp": 1608418319
    },
    {
        "content": "<p>ok, and get rid of DocFolder altogether</p>",
        "id": 220491505,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608418322
    },
    {
        "content": "<p>at least for this part of rustdoc</p>",
        "id": 220491532,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608418332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/rustdoc.20calls.20.60for_each_relevant_impl.60.20a.20lot/near/220491505\">said</a>:</p>\n<blockquote>\n<p>ok, and get rid of DocFolder altogether</p>\n</blockquote>\n<p>maybe, don't know what it's used for myself</p>",
        "id": 220491540,
        "sender_full_name": "lcnr",
        "timestamp": 1608418368
    },
    {
        "content": "<p>nothing useful lol</p>",
        "id": 220491545,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608418376
    },
    {
        "content": "<p>mostly just ignoring stripped items</p>",
        "id": 220491550,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608418387
    },
    {
        "content": "<p>which we could probably check some other way</p>",
        "id": 220491554,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608418399
    },
    {
        "content": "<p>hmm ok <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 220491561,
        "sender_full_name": "lcnr",
        "timestamp": 1608418413
    },
    {
        "content": "<p>does my idea make sense to you?</p>",
        "id": 220491566,
        "sender_full_name": "lcnr",
        "timestamp": 1608418426
    },
    {
        "content": "<p>sort of? the idea is we do this up-front computation, and then instead of looping over all_traits(), we loop over the items in the third bucket?</p>",
        "id": 220491613,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608418457
    },
    {
        "content": "<p>yeah</p>",
        "id": 220491618,
        "sender_full_name": "lcnr",
        "timestamp": 1608418471
    },
    {
        "content": "<p>I'm not sure how to actually do that lol but I can maybe try after dinner</p>",
        "id": 220491639,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608418509
    },
    {
        "content": "<p>seems good, will sleep now. If you need help feel free to ping me</p>",
        "id": 220491692,
        "sender_full_name": "lcnr",
        "timestamp": 1608418567
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Hey, did you get your question answered? If not, let me know what information you need from me exactly.</p>",
        "id": 220676227,
        "sender_full_name": "mw",
        "timestamp": 1608632760
    },
    {
        "content": "<p>well, my question didn't make much sense as written <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 220692535,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608646273
    },
    {
        "content": "<p>I didn't realize there's no way to look up an impl without going through a trait first</p>",
        "id": 220692561,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608646296
    },
    {
        "content": "<p>but if you have time my real question is 'can I make the algorithmic complexity of <code>get_blanket_impls</code> simpler?'</p>",
        "id": 220692638,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608646330
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> suggested one approach that I haven't tried yet</p>",
        "id": 220692656,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608646344
    },
    {
        "content": "<p>Hm, I'm not really the right person to ask about the trait system implementation, I think. Sorry.</p>",
        "id": 220793937,
        "sender_full_name": "mw",
        "timestamp": 1608734356
    }
]