[
    {
        "content": "<p>heads up for the next perf triage, it may be surprising: </p>\n<ul>\n<li>rollup <a href=\"https://github.com/rust-lang/rust/issues/93138\">#93138</a> had a big impact on the <code>deeply-nested-async</code> benchmark (up to -89%), due to <a href=\"https://github.com/rust-lang/rust/issues/91032\">#91032</a> being in there</li>\n<li>because of ICEs on nightly, the same PR <a href=\"https://github.com/rust-lang/rust/issues/91032\">#91032</a> was soft reverted by <a href=\"https://github.com/rust-lang/rust/issues/93165\">#93165</a> (apparently only partially so, but that seems to manifest as ICEs rather than perf changes per se), which of course has the opposite +879% results on that benchmark</li>\n</ul>",
        "id": 269007809,
        "sender_full_name": "lqd",
        "timestamp": 1642930074
    },
    {
        "content": "<p>oh, right, the reverse of -89.5% is +879% (approximately…). (At first I thought you had a typo somewhere there.)</p>",
        "id": 269160851,
        "sender_full_name": "pnkfelix",
        "timestamp": 1643052897
    },
    {
        "content": "<p>Maybe the numbers should be log scale?</p>",
        "id": 269161041,
        "sender_full_name": "The 8472",
        "timestamp": 1643052978
    },
    {
        "content": "<p>well, I think my preference would be for scale factors</p>",
        "id": 269161091,
        "sender_full_name": "pnkfelix",
        "timestamp": 1643053007
    },
    {
        "content": "<p>(but I’m guessing <span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span> is making a joke? The numbers aren’t usually this enormous…)</p>",
        "id": 269161167,
        "sender_full_name": "pnkfelix",
        "timestamp": 1643053033
    },
    {
        "content": "<p>Not exactly a joke, but not meant very seriously either. The nice part about log scale is that it's symmetric. I guess with scale factors you get the same symmetry when you express improvements as x&lt;sup&gt;-1&lt;/sup&gt;</p>",
        "id": 269161481,
        "sender_full_name": "The 8472",
        "timestamp": 1643053167
    },
    {
        "content": "<p>I've seen log-scale done reasonably well in a context like this, in terms of \"bits\": -1 bit == 50 %, +1 bit == 200%.</p>",
        "id": 269170790,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643057424
    },
    {
        "content": "<p>It'd still confuse people though.</p>",
        "id": 269170841,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643057449
    },
    {
        "content": "<p>And as <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> said, the numbers aren't usually this big. :)</p>",
        "id": 269170870,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643057464
    },
    {
        "content": "<p>I'm surprised that the change was included in a rollup. Search a large feature change like that seems like the exact case where we would <em>not</em> want to rollup. Another way to look at it is also why was a perf run not done on the original PR?</p>",
        "id": 269250482,
        "sender_full_name": "rylev",
        "timestamp": 1643114418
    },
    {
        "content": "<p>the risks here extended beyond perf, such as the ICE it injected (the reason it was reverted). But your points still stand.</p>",
        "id": 269252570,
        "sender_full_name": "pnkfelix",
        "timestamp": 1643115517
    },
    {
        "content": "<p>yeah, should not have rolled that one up, that was my mistake <span aria-label=\"oh no\" class=\"emoji emoji-1f615\" role=\"img\" title=\"oh no\">:oh_no:</span></p>",
        "id": 269259333,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1643118875
    },
    {
        "content": "<p>there were a lot of oversights, this isn’t on just one person. I’m more curious to consider: What further structure <em>can</em> we put in place to try to catch this? Maybe a bot that automatically rollup-’s PRs based on certain criteria? (What criteria are good? Raw size of diff for PR?)</p>",
        "id": 269261847,
        "sender_full_name": "pnkfelix",
        "timestamp": 1643119964
    },
    {
        "content": "<p>Maybe we shouldn't rollup rollup=maybe PRs directly and instead signal intent-to-rollup (e.g. by rollup+ each PR) so someone can nope it if necessary? It adds more work though.</p>",
        "id": 269262762,
        "sender_full_name": "The 8472",
        "timestamp": 1643120334
    },
    {
        "content": "<p>Or homu could generate a reminder to review PRs that weren't already explicitly marked when assembling the rollup.</p>",
        "id": 269263046,
        "sender_full_name": "The 8472",
        "timestamp": 1643120462
    },
    {
        "content": "<p>Yea the fact that we rely on each individual reviewers own criteria for whether something shouldn't be rolled up, combined with the fact that the default is effectively to roll something up makes it more likely than it should be IMO that a rollup fails.</p>",
        "id": 269265945,
        "sender_full_name": "rylev",
        "timestamp": 1643121777
    },
    {
        "content": "<p>We still don't have good statistics on how often a roll up should not have been rolled up, but I would imagine it's probably a decent percentage</p>",
        "id": 269266054,
        "sender_full_name": "rylev",
        "timestamp": 1643121822
    },
    {
        "content": "<p>Also, those making rollups have very little tools for understanding the nature of the risk of their roll up. It would be nice if we could provide some sort of statistics to give a better sense of how risky a potential roll up is (i.e., how many files are changed, how many .rs files are changed in compiler or in the std lib, are those changes to code or to code comments, etc.)</p>",
        "id": 269266325,
        "sender_full_name": "rylev",
        "timestamp": 1643121925
    },
    {
        "content": "<p>is rollup=maybe actually displayed on <a href=\"https://bors.rust-lang.org/queue/rust\">https://bors.rust-lang.org/queue/rust</a> or does it only show iffy?</p>",
        "id": 269274109,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1643125016
    },
    {
        "content": "<p>if it is not shown it is practically useless</p>",
        "id": 269274128,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1643125025
    },
    {
        "content": "<p>Imo, rollup=maybe should only be for PRs that could break a rollup, if something could have a perf impact it should be marked rollup=never right away or get a perf run and if it does not show any change, maybe we can remove the rollup=never again.</p>",
        "id": 269274291,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1643125083
    },
    {
        "content": "<p>maybe is the \"default\" -- there's only {always, iffy, never, maybe} in the possible state list, right?</p>\n<blockquote>\n<p>rollup=maybe|always|iffy|never: Mark the PR as \"always\", \"maybe\", \"iffy\", and \"never\" rollup-able.</p>\n</blockquote>",
        "id": 269274317,
        "sender_full_name": "simulacrum",
        "timestamp": 1643125093
    },
    {
        "content": "<p>also I think rollup=None made sense perhaps 3-4 years ago, but right now we just have so many prs that we rarely ever get to the rollup=never layer on top of the queue</p>",
        "id": 269274608,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1643125193
    },
    {
        "content": "<p>so basically a pr is merged in 24-48 hours if its ok to rollup, or maybe in a 2-7 days if it's rollup=never, at least that was the case for thae last  ~30 days</p>",
        "id": 269274851,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1643125286
    },
    {
        "content": "<p>perhaps we could have a list of files where when they are changed, bors pings the reviewer to check if the PR should be marked as rollup=never since these files contain a lot of performance-sensitive code?</p>",
        "id": 269275127,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1643125385
    },
    {
        "content": "<p>(of course if someone just changes a comment doesn't make sense to auto-rollup=never the pr)</p>",
        "id": 269275201,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1643125417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"217864\">matthiaskrgr</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/next.20perf.20triage/near/269274851\">said</a>:</p>\n<blockquote>\n<p>so basically a pr is merged in 24-48 hours if its ok to rollup, or maybe in a 2-7 days if it's rollup=never, at least that was the case for thae last  ~30 days</p>\n</blockquote>\n<p>hmm. 2 (or even 2-4) days might be okay. but that upper <del>bound</del> estimate of 7 is more worrisome to me. I should go try to get stats on queue length over time</p>",
        "id": 269279738,
        "sender_full_name": "pnkfelix",
        "timestamp": 1643127076
    },
    {
        "content": "<p>(in other words, I don’t want us to get rid of rollup=never. its important to support it.)</p>",
        "id": 269279915,
        "sender_full_name": "pnkfelix",
        "timestamp": 1643127134
    },
    {
        "content": "<p>Conversely, if rollups fail is that a problem? As long as they fail fast enough it doesn't eat up too much of our daily CI throughput.</p>",
        "id": 269284675,
        "sender_full_name": "The 8472",
        "timestamp": 1643128999
    },
    {
        "content": "<p>So if increasing CI capacity is too hard or too expensive maybe making things fail sooner could also help.</p>",
        "id": 269284735,
        "sender_full_name": "The 8472",
        "timestamp": 1643129024
    },
    {
        "content": "<p>E.g. the running stage1 tests MCP should help</p>",
        "id": 269284999,
        "sender_full_name": "The 8472",
        "timestamp": 1643129107
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/next.20perf.20triage/near/269284675\">said</a>:</p>\n<blockquote>\n<p>Conversely, if rollups fail is that a problem? As long as they fail fast enough it doesn't eat up too much of our daily CI throughput.</p>\n</blockquote>\n<p>\"failure\" here doesn't only mean fails CI. It can also mean introducing performance regressions or causing some sort of bug not caught by CI</p>",
        "id": 269285445,
        "sender_full_name": "rylev",
        "timestamp": 1643129294
    },
    {
        "content": "<p>Well so far I think most rollups already save us time. if you rollup 5prs that means you could essentially retry it 5 times before \"losing time\", and if it lands you \"save\" maybe around 17 hours of ci time already. <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n<p>As for performance \"failures\" the problem is that you never know before the pr has landed. We don't gate on performance regressions (although that might be an interesting project..)<br>\nWe're always gonna have some new crashes or regressions slip through but crater and the nightly/beta/stable staging helps mitigate that in the long run :)</p>",
        "id": 269314067,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1643140307
    },
    {
        "content": "<blockquote>\n<p>I should go try to get stats on queue length over time</p>\n</blockquote>\n<p>Since everyone came back from new years holidays, we had an average of 20-40 PRs being approved and waiting for merge WHILE merging 5-20 approved prs a day<br>\n<a href=\"https://rust-lang.github.io/rustc-pr-tracking/\">https://rust-lang.github.io/rustc-pr-tracking/</a></p>",
        "id": 269314579,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1643140500
    },
    {
        "content": "<p>ah such pretty pictures, I should look at this every week</p>",
        "id": 269353651,
        "sender_full_name": "pnkfelix",
        "timestamp": 1643162669
    }
]