[
    {
        "content": "<p>I had noticed that the stacks produced by DHAT weren't as good as they used to be. I tried bisecting rustc but couldn't find an old version that showed the good behaviour I expected. Then I bisected Valgrind and found it to be at fault: <a href=\"https://bugs.kde.org/show_bug.cgi?id=445668\">https://bugs.kde.org/show_bug.cgi?id=445668</a></p>",
        "id": 261872800,
        "sender_full_name": "nnethercote",
        "timestamp": 1637196868
    },
    {
        "content": "<p>It probably affects Massif too.</p>",
        "id": 261873556,
        "sender_full_name": "nnethercote",
        "timestamp": 1637197439
    },
    {
        "content": "<p>But I may be the only person running those tools <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 261873603,
        "sender_full_name": "nnethercote",
        "timestamp": 1637197450
    },
    {
        "content": "<p>I didn't notice they got worse, but improvement seems excellent - I had to manually add instrumentation a couple times to \"de-inline\" things</p>",
        "id": 261874678,
        "sender_full_name": "simulacrum",
        "timestamp": 1637198320
    },
    {
        "content": "<p>You are definitely not the only one running Valgrind</p>",
        "id": 261950502,
        "sender_full_name": "pnkfelix",
        "timestamp": 1637252410
    },
    {
        "content": "<p>but I guess you mean DHAT+Massif specifically.</p>",
        "id": 261950547,
        "sender_full_name": "pnkfelix",
        "timestamp": 1637252430
    },
    {
        "content": "<p>yeah</p>",
        "id": 261983013,
        "sender_full_name": "nnethercote",
        "timestamp": 1637265955
    },
    {
        "content": "<p>I found two bad bugs in Valgrind affecting its ability to profile rustc within 2 weeks of starting work again, it's suggestive <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 261983170,
        "sender_full_name": "nnethercote",
        "timestamp": 1637266014
    },
    {
        "content": "<p>I think we might have a gap in that few nightly+beta users are using Valgrind (despite the fact that our test suite â€¦ used to include running object code under valgrind during CI, IIRC), but there are definitely stable users employing Valgrind, and that can lead to us discovering Valgrind bugs later than I would like.</p>",
        "id": 261983602,
        "sender_full_name": "pnkfelix",
        "timestamp": 1637266219
    },
    {
        "content": "<p>Good news: the fix for the missing inline stack frames has been merged into Valgrind: <a href=\"https://bugs.kde.org/show_bug.cgi?id=445668\">https://bugs.kde.org/show_bug.cgi?id=445668</a></p>",
        "id": 262383241,
        "sender_full_name": "nnethercote",
        "timestamp": 1637618385
    },
    {
        "content": "<p>I wonder if I can convince Julian to do a 3.18.2 release in the not-too-distant future</p>",
        "id": 262383416,
        "sender_full_name": "nnethercote",
        "timestamp": 1637618436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@nnethercote</span> if you do so, it would be great to also do something about symbol name verbosity with the new mangling scheme. As you've seen, all fully qualified paths start with crate name and crate disambiguator (e.g. <code>core[1888027d9e9c7885]</code>). The disambiguator part (<code>[1888027d9e9c7885]</code>) is necessary in the mangled form to avoid symbol name conflicts but for a use case like valgrind it is not so important and could just be omitted. That is something that is under the control of the program doing the demangling, so it does not need changes in the compiler or the mangling scheme.</p>",
        "id": 262679387,
        "sender_full_name": "mw",
        "timestamp": 1637830050
    },
    {
        "content": "<p>Just to be clear: the inline stack frame is orthogonal to demangling.</p>",
        "id": 262679517,
        "sender_full_name": "nnethercote",
        "timestamp": 1637830125
    },
    {
        "content": "<p>Valgrind uses an import of the libiberty demangler, so any demangling changes (such as handling <code>.llvm.&lt;numbers&gt;</code> suffixes, and stripping junk like <code>core[1888027d9e9c7885]</code>) would have to be put into libiberty and then imported into Valgrind.</p>",
        "id": 262679577,
        "sender_full_name": "nnethercote",
        "timestamp": 1637830178
    },
    {
        "content": "<p>Yes, demangling is separate. But it would be good to get it into better shape before a new release :)</p>",
        "id": 262680232,
        "sender_full_name": "mw",
        "timestamp": 1637830538
    },
    {
        "content": "<p>If looks like the current code already has a verbosity flag that does the right thing here:<br>\n<a href=\"https://github.com/sailfishos-mirror/valgrind/blob/49fe0dc74a07ea4c5077867e44127eb68466eded/coregrind/m_demangle/rust-demangle.c#L708-L713\">https://github.com/sailfishos-mirror/valgrind/blob/49fe0dc74a07ea4c5077867e44127eb68466eded/coregrind/m_demangle/rust-demangle.c#L708-L713</a></p>",
        "id": 262680315,
        "sender_full_name": "mw",
        "timestamp": 1637830567
    },
    {
        "content": "<p>but I don't know if valgrind can control that</p>",
        "id": 262680342,
        "sender_full_name": "mw",
        "timestamp": 1637830588
    },
    {
        "content": "<p>anyway, sorry for hijacking the thread :)</p>",
        "id": 262680580,
        "sender_full_name": "mw",
        "timestamp": 1637830709
    },
    {
        "content": "<p>Controlling verbosity should be doable, but I don't understand exactly what \"verbose\" means in this context...</p>",
        "id": 262699877,
        "sender_full_name": "nnethercote",
        "timestamp": 1637843333
    },
    {
        "content": "<p>Judging from the code linked to above it seems to control if</p>\n<ul>\n<li>the crate disambiguator is emitted (<code>std[123456789]::cmp::min</code> vs <code>std::cmp::min</code>),</li>\n<li>const generic args are annotated with their type (<code>foo&lt;[u32; 123]&gt;</code> vs <code>foo&lt;[u32; 123: usize]&gt;</code>), and</li>\n<li>if legacy scheme symbols have their hash attached (<code>std::cmp::min::h12345678</code> vs <code>std::cmp::min</code>)</li>\n</ul>\n<p>So it looks like switching to <code>verbose = false</code> is feasible.</p>",
        "id": 262701348,
        "sender_full_name": "mw",
        "timestamp": 1637844430
    }
]