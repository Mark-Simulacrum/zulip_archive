[
    {
        "content": "<p>Hi everyone, I've written an alternative to FxHash that avoids FxHash's poor distribution of lower hash bits, but is essentially as fast to compute.</p>\n<p>In my microbenchmarks it either matches FxHash's performance or beats it, sometimes by a lot. I also ran the rustc-perf benchmarks locally, once as is using FxHash and once replacing it with ZwoHash (not 100% sure I did everything right when benchmarking, I couldn't get the web interface to run locally so I manually dumped the sqlite database) and there I found no difference beyond a bit of noise going either way.</p>\n<p>Still I figured that might be a useful datapoint for people working on rustc's performance. My conclusion would be that a) either rustc doesn't hit the cases where FxHash's output causes collisions or b) the resulting slowdown when searching entries in a hash table is small enough to not register.</p>\n<p>This is the crate for my hash <a href=\"https://crates.io/crates/zwohash\">https://crates.io/crates/zwohash</a> and <a href=\"https://github.com/jix/zwohash/blob/master/src/lib.rs\">https://github.com/jix/zwohash/blob/master/src/lib.rs</a> contains comments explaining the difference to FxHash.</p>",
        "id": 207296226,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1597775163
    },
    {
        "content": "<p>poor distribution in the low bits is bad for the initial search bucket, but hashbrown also does SIMD comparisons on the high 7 bits, so that may be enough to still avoid full comparisons from those low collisions.</p>",
        "id": 207302991,
        "sender_full_name": "cuviper",
        "timestamp": 1597778203
    },
    {
        "content": "<p>I have long wanted to get hashbrown to dump collision statistics</p>",
        "id": 207303291,
        "sender_full_name": "simulacrum",
        "timestamp": 1597778362
    },
    {
        "content": "<p>wow:</p>\n<div class=\"codehilite\"><pre><span></span><code>building int sets/u64 bits 16..32/ZwoHash\n                        time:   [61.265 us 61.346 us 61.438 us]\nbuilding int sets/u64 bits 16..32/FxHash\n                        time:   [1.8995 ms 1.9007 ms 1.9022 ms]\n</code></pre></div>",
        "id": 207303937,
        "sender_full_name": "cuviper",
        "timestamp": 1597778740
    },
    {
        "content": "<p>Maybe worth swapping them out and running main test suite? It's not impossible that e.g. cycles are lower even if instructions are neutral</p>",
        "id": 207304567,
        "sender_full_name": "simulacrum",
        "timestamp": 1597779067
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> you mean like a draft PR for a perf run?</p>",
        "id": 207307311,
        "sender_full_name": "cuviper",
        "timestamp": 1597780359
    },
    {
        "content": "<p>yeah</p>",
        "id": 207307325,
        "sender_full_name": "simulacrum",
        "timestamp": 1597780363
    },
    {
        "content": "<p>I can do that</p>",
        "id": 207307348,
        "sender_full_name": "cuviper",
        "timestamp": 1597780375
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 207307371,
        "sender_full_name": "simulacrum",
        "timestamp": 1597780386
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/Testing.20another.20alternative.20to.20FxHash/near/207307311\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> you mean like a draft PR for a perf run?</p>\n</blockquote>\n<p>I used this for a local perf run, but I haven't worked on rustc before, so I didn't really know what I was doing: <a href=\"https://github.com/jix/rust/commit/3f627f19300c955b96f10bc72a89919409dba354\">https://github.com/jix/rust/commit/3f627f19300c955b96f10bc72a89919409dba354</a></p>",
        "id": 207307828,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1597780588
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> ok sure -- you probably need to add to <code>src/tools/tidy/src/deps.rs</code> <code>PERMITTED_DEPENDENCIES</code> too, so tidy passes it, but then would you like to open a PR? I can queue up the perf run for you.</p>",
        "id": 207308151,
        "sender_full_name": "cuviper",
        "timestamp": 1597780721
    },
    {
        "content": "<p>I can do that if the changes look OK otherwise. I've seen some things depend indirectly on rustc_hash like the ra_* stuff and salsa, but AFAICT that's all not used by default in rustc... I guess an alternative would be to replace the rustc_hash crate workspace wide.</p>",
        "id": 207308481,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1597780867
    },
    {
        "content": "<p>Also, is there some canonical way to indicate that a PR is just for a pref run?</p>",
        "id": 207308576,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1597780919
    },
    {
        "content": "<p>yeah, <code>rustc_data_structures</code> won't cover everything, but it will get a lot</p>",
        "id": 207308645,
        "sender_full_name": "cuviper",
        "timestamp": 1597780935
    },
    {
        "content": "<p>set GitHub to a draft when you open the PR, and then just state your intent in the description.</p>",
        "id": 207308698,
        "sender_full_name": "cuviper",
        "timestamp": 1597780960
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> tidy shouldn't run on the try builder so likely fine to skip that</p>",
        "id": 207308763,
        "sender_full_name": "simulacrum",
        "timestamp": 1597781000
    },
    {
        "content": "<p>ok</p>",
        "id": 207308772,
        "sender_full_name": "cuviper",
        "timestamp": 1597781007
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/75679\">https://github.com/rust-lang/rust/pull/75679</a></p>",
        "id": 207310387,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1597781761
    },
    {
        "content": "<p>whoops, I forgot to run ./x.py fmt</p>",
        "id": 207312064,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1597782568
    },
    {
        "content": "<p>won't matter for try build</p>",
        "id": 207312307,
        "sender_full_name": "simulacrum",
        "timestamp": 1597782668
    },
    {
        "content": "<p>but if you push to the pr I think that kills bors, so we'll need to manually queue perf  build</p>",
        "id": 207312374,
        "sender_full_name": "simulacrum",
        "timestamp": 1597782710
    },
    {
        "content": "<p>I didn't push anything</p>",
        "id": 207312446,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1597782732
    },
    {
        "content": "<p>From what I can see on github, it does look like it failed because of not passing tidy and that cancelled all the jobs in the workflow, but I might be looking at the wrong things of course...</p>",
        "id": 207312744,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1597782883
    },
    {
        "content": "<p>Ah, never mind, there is another workflow running on a merge commit, so I guess I am looking at the wrong thing, I was just worried because I got an email for a failed PR run</p>",
        "id": 207313070,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1597783044
    },
    {
        "content": "<p>yeah, rust CI is kind of funny like that</p>",
        "id": 207313172,
        "sender_full_name": "cuviper",
        "timestamp": 1597783087
    },
    {
        "content": "<p>bors runs over here: <a href=\"https://github.com/rust-lang-ci/rust/actions\">https://github.com/rust-lang-ci/rust/actions</a></p>",
        "id": 207313241,
        "sender_full_name": "cuviper",
        "timestamp": 1597783125
    },
    {
        "content": "<p>I left a comment on the PR with my take on the perf run results: <a href=\"https://github.com/rust-lang/rust/pull/75679#issuecomment-675897456\">https://github.com/rust-lang/rust/pull/75679#issuecomment-675897456</a></p>",
        "id": 207377055,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1597821459
    },
    {
        "content": "<p>We tried something similar with ahash in the past: <a href=\"https://github.com/rust-lang/rust/issues/59592\">#59592</a> <a href=\"https://github.com/rust-lang/rust/issues/59598\">#59598</a></p>",
        "id": 207422985,
        "sender_full_name": "Amanieu",
        "timestamp": 1597851023
    },
    {
        "content": "<p>Hmm no perf results there. I seem to remember trying that and getting regressions overall.</p>",
        "id": 207423104,
        "sender_full_name": "Amanieu",
        "timestamp": 1597851085
    },
    {
        "content": "<p>It seems that rustc doesn't really care about collisions with identical low bits, so it can get away with a poor hash function like FxHash.</p>",
        "id": 207423153,
        "sender_full_name": "Amanieu",
        "timestamp": 1597851111
    },
    {
        "content": "<p>Yeah I looked at ahash before deciding to work on zwohash. ahash tries to provide much stronger guarantees with protecting against HashDoS, which comes with more overhead I think (maybe not for the AES instruction variant, but I'd want to use the portable ahash fallback anyway)</p>",
        "id": 207424643,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1597851819
    },
    {
        "content": "<p>I haven't run my benchmarks against ahash though. I'm not a fan of it making it really difficult to get reproducible hashes, which for my use cases is even more important than performance</p>",
        "id": 207424815,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1597851897
    }
]