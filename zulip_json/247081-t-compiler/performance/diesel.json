[
    {
        "content": "<p>I've been looking at compilation of <code>diesel</code>, because its profiles look a bit different to normal. I think I've worked out at least part of the reason why.</p>",
        "id": 271052300,
        "sender_full_name": "nnethercote",
        "timestamp": 1644272827
    },
    {
        "content": "<p>Check out this ridiculous file: <a href=\"https://github.com/rust-lang/rustc-perf/blob/master/collector/benchmarks/diesel/diesel/src/macros/tuples.rs\">https://github.com/rust-lang/rustc-perf/blob/master/collector/benchmarks/diesel/diesel/src/macros/tuples.rs</a></p>",
        "id": 271052413,
        "sender_full_name": "nnethercote",
        "timestamp": 1644272878
    },
    {
        "content": "<p><code>TypeFoldable</code> related stuff is quite hot when compiling diesel</p>",
        "id": 271052558,
        "sender_full_name": "nnethercote",
        "timestamp": 1644272934
    },
    {
        "content": "<p>We have <code>List&lt;Predicate&gt;</code>s with 100s of entries, things like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>Binder(TraitPredicate(&lt;impl Row&lt;&#39;a, __DB&gt; as row::Row&lt;&#39;a, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;impl Row&lt;&#39;a, __DB&gt; as row::RowIndex&lt;&amp;&#39;b str&gt;&gt;, polarity:Positive), [Region(BrNamed(DefId(0:5763 ~ diesel[8a10]::row::Row::&#39;b), &#39;b))]), Binder(TraitPredicate(&lt;impl Row&lt;&#39;a, __DB&gt; as row::RowIndex&lt;usize&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;impl Row&lt;&#39;a, __DB&gt; as std::marker::Sized&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;AF as deserialize::StaticallySizedRow&lt;SAF, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;AF as deserialize::FromSqlRow&lt;SAF, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;AE as deserialize::StaticallySizedRow&lt;SAE, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;AE as deserialize::FromSqlRow&lt;SAE, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;AD as deserialize::StaticallySizedRow&lt;SAD, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;AD as deserialize::FromSqlRow&lt;SAD, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;AC as deserialize::StaticallySizedRow&lt;SAC, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;AC as deserialize::FromSqlRow&lt;SAC, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;AB as deserialize::StaticallySizedRow&lt;SAB, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;AB as deserialize::FromSqlRow&lt;SAB, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;AA as deserialize::StaticallySizedRow&lt;SAA, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;AA as deserialize::FromSqlRow&lt;SAA, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;Z as deserialize::StaticallySizedRow&lt;SZ, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;Z as deserialize::FromSqlRow&lt;SZ, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;Y as deserialize::StaticallySizedRow&lt;SY, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;Y as deserialize::FromSqlRow&lt;SY, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;X as deserialize::StaticallySizedRow&lt;SX, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;X as deserialize::FromSqlRow&lt;SX, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;W as deserialize::StaticallySizedRow&lt;SW, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;W as deserialize::FromSqlRow&lt;SW, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;V as deserialize::StaticallySizedRow&lt;SV, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;V as deserialize::FromSqlRow&lt;SV, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;U as deserialize::StaticallySizedRow&lt;SU, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;U as deserialize::FromSqlRow&lt;SU, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;T as deserialize::StaticallySizedRow&lt;ST, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;T as deserialize::FromSqlRow&lt;ST, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;S as deserialize::StaticallySizedRow&lt;SS, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;S as deserialize::FromSqlRow&lt;SS, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;R as deserialize::StaticallySizedRow&lt;SR, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;R as deserialize::FromSqlRow&lt;SR, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;Q as deserialize::StaticallySizedRow&lt;SQ, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;Q as deserialize::FromSqlRow&lt;SQ, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;P as deserialize::StaticallySizedRow&lt;SP, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;P as deserialize::FromSqlRow&lt;SP, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;O as deserialize::StaticallySizedRow&lt;SO, __DB&gt;&gt;, polarity:Positive), []), Binder(TraitPredicate(&lt;O as deserialize::FromSqlRow&lt;SO, __DB&gt;&gt;, polarity:Positive), []),  ...\n</code></pre></div>",
        "id": 271052598,
        "sender_full_name": "nnethercote",
        "timestamp": 1644272954
    },
    {
        "content": "<p>So, variadic tuples FTW? :)</p>",
        "id": 271052639,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644272976
    },
    {
        "content": "<p>I'm not sure if what this macro is doing is more complex than that</p>",
        "id": 271052778,
        "sender_full_name": "nnethercote",
        "timestamp": 1644273020
    },
    {
        "content": "<p>Having said that, <a href=\"https://github.com/diesel-rs/diesel/tree/master/diesel/src/macros\">https://github.com/diesel-rs/diesel/tree/master/diesel/src/macros</a> is the latest version and that file isn't present</p>",
        "id": 271052880,
        "sender_full_name": "nnethercote",
        "timestamp": 1644273075
    },
    {
        "content": "<p>Oh, it's now a proc macro: <a href=\"https://github.com/diesel-rs/diesel/blob/0e49ce0e22803c3b8f4141e4abe10d8b73a2c31f/diesel_derives/src/lib.rs#L1235\">https://github.com/diesel-rs/diesel/blob/0e49ce0e22803c3b8f4141e4abe10d8b73a2c31f/diesel_derives/src/lib.rs#L1235</a></p>",
        "id": 271053284,
        "sender_full_name": "nnethercote",
        "timestamp": 1644273244
    },
    {
        "content": "<p>with features to limit the max length:<br>\n<a href=\"https://github.com/diesel-rs/diesel/blob/0e49ce0e22803c3b8f4141e4abe10d8b73a2c31f/diesel_derives/src/diesel_for_each_tuple.rs\">https://github.com/diesel-rs/diesel/blob/0e49ce0e22803c3b8f4141e4abe10d8b73a2c31f/diesel_derives/src/diesel_for_each_tuple.rs</a></p>",
        "id": 271054667,
        "sender_full_name": "cuviper",
        "timestamp": 1644273998
    },
    {
        "content": "<p>I wonder if they'd be better off with bespoke tuple structs where they are actually used</p>",
        "id": 271054731,
        "sender_full_name": "cuviper",
        "timestamp": 1644274059
    }
]