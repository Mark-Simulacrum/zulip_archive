[
    {
        "content": "<p>I know for times/instruction counts I can use <code>-Z self-profile</code> and various other flags. Is there a flag to measure memory usage?</p>",
        "id": 216741376,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605376342
    },
    {
        "content": "<p>Memory usage is not yet tracked. I've heard good things about heaptrack (<a href=\"https://github.com/KDE/heaptrack\">https://github.com/KDE/heaptrack</a>) but haven't really used it myself. dhat and similar tooling from valgrind can also be useful.</p>",
        "id": 216741591,
        "sender_full_name": "simulacrum",
        "timestamp": 1605376574
    },
    {
        "content": "<p>context: rustdoc uses 3.5 GB (!!) to document stm32f3 <a href=\"https://github.com/rust-lang/docs.rs/issues/1179\">https://github.com/rust-lang/docs.rs/issues/1179</a></p>",
        "id": 216742024,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605377321
    },
    {
        "content": "<p>I saw :)</p>",
        "id": 216742088,
        "sender_full_name": "simulacrum",
        "timestamp": 1605377449
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ heaptrack $(rustup which rustdoc) src/lib.rs\nfree(): invalid pointer\n</code></pre></div>\n<p>well that's exciting</p>",
        "id": 216742107,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605377518
    },
    {
        "content": "<p>is that a nightly rustdoc?</p>",
        "id": 216742145,
        "sender_full_name": "simulacrum",
        "timestamp": 1605377529
    },
    {
        "content": "<p>you might want to build one in stage1, which won't use valgrind</p>",
        "id": 216742151,
        "sender_full_name": "simulacrum",
        "timestamp": 1605377537
    },
    {
        "content": "<p>yes, rustdoc 1.50.0-nightly (74f7e32f4 2020-11-13)</p>",
        "id": 216742152,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605377543
    },
    {
        "content": "<p>er, not valgrind</p>",
        "id": 216742155,
        "sender_full_name": "simulacrum",
        "timestamp": 1605377550
    },
    {
        "content": "<p>jemalloc</p>",
        "id": 216742156,
        "sender_full_name": "simulacrum",
        "timestamp": 1605377552
    },
    {
        "content": "<p>(stage 2 should be fine as well. the point is, not a nightly build)</p>",
        "id": 216742160,
        "sender_full_name": "simulacrum",
        "timestamp": 1605377569
    },
    {
        "content": "<p>I'll give it a try, thanks!</p>",
        "id": 216742170,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605377591
    },
    {
        "content": "<p>hmm, same error there</p>",
        "id": 216742180,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605377629
    },
    {
        "content": "<p>huh. well.</p>",
        "id": 216742185,
        "sender_full_name": "simulacrum",
        "timestamp": 1605377636
    },
    {
        "content": "<p>and another error about <code>core</code> not being built for the cross-compiled target, but I don't think that's relevant</p>",
        "id": 216742226,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605377647
    },
    {
        "content": "<p>I know that I have made heaptrack work before</p>",
        "id": 216742227,
        "sender_full_name": "simulacrum",
        "timestamp": 1605377656
    },
    {
        "content": "<p>are you on linux?</p>",
        "id": 216742228,
        "sender_full_name": "simulacrum",
        "timestamp": 1605377659
    },
    {
        "content": "<p>yeah, this is debian 10</p>",
        "id": 216742230,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605377670
    },
    {
        "content": "<p>it does emit a file, it just also has an invalid free along the way</p>",
        "id": 216742233,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605377680
    },
    {
        "content": "<p>and it has peak usage of 3.30 GB which seems about right, so maybe I can just ignore the double free for now</p>",
        "id": 216742245,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605377706
    },
    {
        "content": "<p>You will have to built rust from source, without jemalloc.</p>",
        "id": 216742247,
        "sender_full_name": "mati865",
        "timestamp": 1605377709
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119581\">@mati865</span> right, I did</p>",
        "id": 216742250,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605377726
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>total runtime: 129.21s.\nbytes allocated in total (ignoring deallocations): 33.72GB (260.99MB/s)\ncalls to allocation functions: 117908219 (912559/s)\ntemporary memory allocations: 27242434 (210844/s)\npeak heap memory consumption: 3.30GB\npeak RSS (including heaptrack overhead): 35.85GB\ntotal memory leaked: 562.85KB\n</code></pre></div>\n<p>wow that is just so much <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 216742256,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605377749
    },
    {
        "content": "<p>I had no issues with heaptrack and Rust, wonder what it could cause it.</p>",
        "id": 216742334,
        "sender_full_name": "mati865",
        "timestamp": 1605377868
    },
    {
        "content": "<p>ok, a full gigabyte of this is coming from <code>get_auto_trait_and_blanket_impls</code></p>",
        "id": 216742506,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605378132
    },
    {
        "content": "<p>hmm that sounds like <a href=\"https://github.com/rust-lang/rust/issues/78761\">https://github.com/rust-lang/rust/issues/78761</a></p>",
        "id": 216742512,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605378154
    },
    {
        "content": "<p>fwiw I am also seeing this free invalid ptr on 20.04 ubuntu</p>",
        "id": 216742515,
        "sender_full_name": "simulacrum",
        "timestamp": 1605378171
    },
    {
        "content": "<p>seems to come from libheaptrack_preload</p>",
        "id": 216742560,
        "sender_full_name": "simulacrum",
        "timestamp": 1605378244
    },
    {
        "content": "<p>possibly trying to unload dynamic libraries?</p>",
        "id": 216742573,
        "sender_full_name": "simulacrum",
        "timestamp": 1605378261
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>#0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50\n#1  0x00007fcf23298859 in __GI_abort () at abort.c:79\n#2  0x00007fcf233033ee in __libc_message (action=action@entry=do_abort, fmt=fmt@entry=0x7fcf2342d285 &quot;%s\\n&quot;)\n    at ../sysdeps/posix/libc_fatal.c:155\n#3  0x00007fcf2330b47c in malloc_printerr (str=str@entry=0x7fcf2342b4ae &quot;free(): invalid pointer&quot;) at malloc.c:5347\n#4  0x00007fcf2330ccac in _int_free (av=&lt;optimized out&gt;, p=&lt;optimized out&gt;, have_lock=0) at malloc.c:4173\n#5  0x00007fcf27b6ff53 in free () from /usr/lib/heaptrack/libheaptrack_preload.so\n#6  0x00007fcf2326ecfd in free_key_mem (mem=0x7fcf27b79280) at dlerror.c:230\n#7  __dlerror_main_freeres () at dlerror.c:251\n#8  0x00007fcf2326f179 in __libdl_freeres () at dlfreeres.c:28\n#9  0x00007fcf2340eada in __GI___libc_freeres () at set-freeres.c:52\n#10 0x00007fcf27b71c31 in ?? () from /usr/lib/heaptrack/libheaptrack_preload.so\n#11 0x00007fcf232bd15e in __cxa_finalize (d=0x7fcf27b79218) at cxa_finalize.c:83\n#12 0x00007fcf27b6faf7 in ?? () from /usr/lib/heaptrack/libheaptrack_preload.so\n#13 0x00007ffd14d744c0 in ?? ()\nBacktrace stopped: previous frame identical to this frame (corrupt stack?)\n</code></pre></div>",
        "id": 216742574,
        "sender_full_name": "simulacrum",
        "timestamp": 1605378271
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> ok, maybe I'm breaking something, but I'm seeing radically different memory usage</p>",
        "id": 216742659,
        "sender_full_name": "simulacrum",
        "timestamp": 1605378460
    },
    {
        "content": "<p>like 100MB</p>",
        "id": 216742661,
        "sender_full_name": "simulacrum",
        "timestamp": 1605378462
    },
    {
        "content": "<p>This is on stm32f3 from the nightlies thing</p>",
        "id": 216742694,
        "sender_full_name": "simulacrum",
        "timestamp": 1605378483
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> you need to enable all the features</p>\n<div class=\"codehilite\"><pre><span></span><code>$ cargo doc --features &quot;rt stm32f303 stm32f373 stm32f3x8&quot; --target thumbv7em-none-eabihf\n</code></pre></div>",
        "id": 216742710,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605378492
    },
    {
        "content": "<p>ah, I see</p>",
        "id": 216742711,
        "sender_full_name": "simulacrum",
        "timestamp": 1605378498
    },
    {
        "content": "<p>without those the crate is almost empty</p>",
        "id": 216742712,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605378501
    },
    {
        "content": "<p>here let me post my profile somewhere</p>",
        "id": 216742734,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605378584
    },
    {
        "content": "<p>it's about 90 MB so if you have slow internet it may be faster just to collect the profile yourself: <a href=\"https://drive.google.com/file/d/150bpmBp7F7G87Wuue70D_edSOFgUn1Gu/view?usp=sharing\">https://drive.google.com/file/d/150bpmBp7F7G87Wuue70D_edSOFgUn1Gu/view?usp=sharing</a></p>",
        "id": 216742800,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605378677
    },
    {
        "content": "<p>oh yeah I'm recollecting now, it's pretty fast to do so</p>",
        "id": 216742819,
        "sender_full_name": "simulacrum",
        "timestamp": 1605378696
    },
    {
        "content": "<p>so one thing that pops out is that this has <em>terrible</em> time complexity</p>",
        "id": 216743214,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605379094
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>for every item in the crate:\n  for every trait in the crate:\n    for every impl for the trait:\n        do a heavy computation with `infer_ctxt`\n</code></pre></div>",
        "id": 216743221,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605379120
    },
    {
        "content": "<p>an easy improvement could be for <code>get_all_types</code> to return a HashMap instead of constantly calling <code>into_iter().collect()</code></p>",
        "id": 216743548,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605379457
    },
    {
        "content": "<p>that's more performance than memory usage though</p>",
        "id": 216743554,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605379464
    },
    {
        "content": "<p>I don't see <code>all_types</code> actually being used anywhere (??)</p>",
        "id": 216743686,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605379614
    },
    {
        "content": "<p>At the very least flipping the top two for loops seems like a likely benefit</p>",
        "id": 216743725,
        "sender_full_name": "simulacrum",
        "timestamp": 1605379665
    },
    {
        "content": "<p>oh it's used for the search index</p>",
        "id": 216743736,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605379681
    },
    {
        "content": "<p>In most cases crates have way more items than traits</p>",
        "id": 216743737,
        "sender_full_name": "simulacrum",
        "timestamp": 1605379682
    },
    {
        "content": "<p>Though I guess maybe the current setup is good for that</p>",
        "id": 216743795,
        "sender_full_name": "simulacrum",
        "timestamp": 1605379723
    },
    {
        "content": "<p>so right now the callgraph looks like this: <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustdoc/passes/collect_trait_impls.rs#L124\"><code>SyntheticImplCollector</code></a> calls <code>get_auto_trait_and_blanket_impls</code> for each item in the crate, which then does the trait/impl loop</p>",
        "id": 216744046,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605379972
    },
    {
        "content": "<p>I wonder if I could change that around to do the trait/impl loop for every trait in the crate</p>",
        "id": 216744068,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605380013
    },
    {
        "content": "<p>I guess I wouldn't know where to get the def_id of the item from?</p>",
        "id": 216744079,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605380026
    },
    {
        "content": "<p>So memory usage wise, the question I think is: do we need to keep all this around? Like, are we perhaps caching the results of the query but should instead be dropping it?</p>",
        "id": 216744145,
        "sender_full_name": "simulacrum",
        "timestamp": 1605380077
    },
    {
        "content": "<p>well in general rustdoc shouldn't be storing these at all <a href=\"https://github.com/rust-lang/rust/issues/76382\">https://github.com/rust-lang/rust/issues/76382</a></p>",
        "id": 216744159,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605380100
    },
    {
        "content": "<p>it should be using them only once when they're needed</p>",
        "id": 216744166,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605380109
    },
    {
        "content": "<p>doing that is another big refactor on top of my existing big refactors though:</p>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/pull/77820\">https://github.com/rust-lang/rust/pull/77820</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/pull/78082\">https://github.com/rust-lang/rust/pull/78082</a></li>\n</ul>",
        "id": 216744244,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605380177
    },
    {
        "content": "<p>maybe I should finish up <a href=\"https://github.com/rust-lang/rust/pull/77820\">https://github.com/rust-lang/rust/pull/77820</a> before working on this</p>",
        "id": 216744338,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605380325
    },
    {
        "content": "<p>ok I spent most of the night on this without progress <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 220076204,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608092836
    },
    {
        "content": "<p>mostly I found that get_blanket_impls takes a truly astronomical amount of time <a href=\"https://github.com/rust-lang/rust/issues/79103#issuecomment-745737864\">https://github.com/rust-lang/rust/issues/79103#issuecomment-745737864</a></p>",
        "id": 220076209,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608092857
    },
    {
        "content": "<p>which I kind of already knew</p>",
        "id": 220076211,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608092864
    },
    {
        "content": "<p>sorry if someone's already mentioned this: Has anyone pointed you at <span class=\"user-mention\" data-user-id=\"120989\">@njn</span> 's latest tool here?</p>",
        "id": 220076635,
        "sender_full_name": "pnkfelix",
        "timestamp": 1608093412
    },
    {
        "content": "<p>namely dhat-rs : <a href=\"https://twitter.com/nnethercote/status/1336458477934239744\">https://twitter.com/nnethercote/status/1336458477934239744</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/nnethercote/status/1336458477934239744\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1296625446885314560/HvSi39Xi_normal.png\"></a><p>I tweeted yesterday about dhat-rs, a crate for doing DHAT-style heap profiling in Rust programs.\n<a href=\"https://t.co/oUloMdNJwK\">https://twitter.com/nnethercote/status/1336132646020104193</a></p><span>- Nicholas Nethercote (@nnethercote)</span></div></div>",
        "id": 220076702,
        "sender_full_name": "pnkfelix",
        "timestamp": 1608093484
    },
    {
        "content": "<p>I guess that may not give you the fine grain detail of the compiler internals that you want, though?</p>",
        "id": 220076724,
        "sender_full_name": "pnkfelix",
        "timestamp": 1608093534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I ran that last week, that's been where most of the recent PRs came from: <a href=\"#narrow/stream/122651-general/topic/DHAT.20and.20rustdoc\">https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/DHAT.20and.20rustdoc</a>, <a href=\"https://github.com/rust-lang/rust/pulls?q=is%3Apr+label%3AI-compilemem+author%3Ajyn514+\">https://github.com/rust-lang/rust/pulls?q=is%3Apr+label%3AI-compilemem+author%3Ajyn514+</a></p>",
        "id": 220076753,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608093601
    },
    {
        "content": "<p>unfortunately it takes almost an hour to run :(</p>",
        "id": 220076792,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608093608
    },
    {
        "content": "<p>so I haven't tried to use it again</p>",
        "id": 220076794,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608093615
    },
    {
        "content": "<p>oh okay, sorry for missing that</p>",
        "id": 220076796,
        "sender_full_name": "pnkfelix",
        "timestamp": 1608093621
    },
    {
        "content": "<p>no problem, I know I have a tendency to spew information everywhere without collecting it in one place <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 220076803,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608093648
    },
    {
        "content": "<p>also, surprisingly, <code>heaptrack</code> reports that although most of the <em>time</em> comes from <code>get_blanket_impls</code>, the big <em>spike</em> in memory comes from <code>print_evaluated_const</code></p>",
        "id": 220076876,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608093748
    },
    {
        "content": "<p>oh wait I might be reading that wrong</p>",
        "id": 220076900,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608093796
    },
    {
        "content": "<p>I think that's just the call depth</p>",
        "id": 220076903,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608093800
    },
    {
        "content": "<p>ok I take it back it is actually get_blanket_impls lol, and <code>try_inline</code> apparently</p>",
        "id": 220076962,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608093853
    },
    {
        "content": "<p>I think this is from Item just being really big</p>",
        "id": 220077048,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608093972
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[src/librustdoc/lib.rs:103] std::mem::size_of::&lt;Item&gt;() = 656\n</code></pre></div>",
        "id": 220077250,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608094215
    },
    {
        "content": "<p>so yeah, I'll try this again after <a href=\"https://github.com/rust-lang/rust/pull/80014\">https://github.com/rust-lang/rust/pull/80014</a> is merged</p>",
        "id": 220077267,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608094232
    }
]