[
    {
        "content": "<p>Just got performance numbers back on <a href=\"https://github.com/rust-lang/rust/pull/75754\">https://github.com/rust-lang/rust/pull/75754</a> - looks like it's a performance win across the board. It adds one new dependency to rustc, but it's a pure-Rust dependency.</p>",
        "id": 207594259,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597975084
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"131828\" href=\"/#narrow/stream/131828-t-compiler/topic/using.20snappy.20for.20metadata\">#t-compiler &gt; using snappy for metadata</a> by <span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span></p>",
        "id": 207594278,
        "sender_full_name": "Notification Bot",
        "timestamp": 1597975154
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> not sure how stable this is, but: <a href=\"https://perf.rust-lang.org/compare.html?start=e15510ca33ea15c893b78710101c962b11459963&amp;end=50541435b8c0b771394cb492b0b2fbdbc3c3ddd9&amp;stat=cycles%3Au\">https://perf.rust-lang.org/compare.html?start=e15510ca33ea15c893b78710101c962b11459963&amp;end=50541435b8c0b771394cb492b0b2fbdbc3c3ddd9&amp;stat=cycles%3Au</a></p>",
        "id": 207595881,
        "sender_full_name": "eddyb",
        "timestamp": 1597977798
    },
    {
        "content": "<p>it's too close to neutral on instructions in many cases for me to consider it \"across the board\", hence looking at other measurements. I wish we had a good way to tell when they're consistent enough to be telling and automatically warn us about them</p>",
        "id": 207595938,
        "sender_full_name": "eddyb",
        "timestamp": 1597977873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> If I were to take a wild guess, I would <em>guess</em> that's because snappy is much faster but then generates more data that has to be written out, and it takes extra instructions to write the data out, but those instructions don't actually add to wall-clock time.</p>",
        "id": 207596009,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597977966
    },
    {
        "content": "<p>That's absolutely a guess, though.</p>",
        "id": 207596020,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597978002
    },
    {
        "content": "<p>it's the other way around though? you're neutral/winning on instructions but increase on cycles, which means some of the instructions now take more cycles, i.e. are slower</p>",
        "id": 207596031,
        "sender_full_name": "eddyb",
        "timestamp": 1597978029
    },
    {
        "content": "<p>sadly none of the time metrics look obviously useful</p>",
        "id": 207596035,
        "sender_full_name": "eddyb",
        "timestamp": 1597978054
    },
    {
        "content": "<p>Ah, sorry, I thought what you were linking to was instructions.</p>",
        "id": 207596036,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597978059
    },
    {
        "content": "<p>Also, something else worth noticing:</p>",
        "id": 207596038,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597978067
    },
    {
        "content": "<p>no, instructions:u is the default</p>",
        "id": 207596039,
        "sender_full_name": "eddyb",
        "timestamp": 1597978068
    },
    {
        "content": "<p>I didn't realize that had become the default.</p>",
        "id": 207596044,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597978076
    },
    {
        "content": "<p>Every one of the cases that shows a regression is a -doc case.</p>",
        "id": 207596083,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597978089
    },
    {
        "content": "<p>it's the only thing we look at most of the time. it's been the default for years I thought</p>",
        "id": 207596084,
        "sender_full_name": "eddyb",
        "timestamp": 1597978089
    },
    {
        "content": "<p>oh we can ignore <code>-doc</code>, but that's not my worry. let me look again</p>",
        "id": 207596089,
        "sender_full_name": "eddyb",
        "timestamp": 1597978115
    },
    {
        "content": "<p>okay I missed that, thank you</p>",
        "id": 207596092,
        "sender_full_name": "eddyb",
        "timestamp": 1597978128
    },
    {
        "content": "<p>Why can we ignore -doc?</p>",
        "id": 207596094,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597978129
    },
    {
        "content": "<p><code>rustdoc</code> is not yet tuned to be \"measurable\"</p>",
        "id": 207596098,
        "sender_full_name": "eddyb",
        "timestamp": 1597978150
    },
    {
        "content": "<p>Ah.</p>",
        "id": 207596104,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597978162
    },
    {
        "content": "<p>In that case, yeah: everything \"measurable\" gets faster. ;)</p>",
        "id": 207596109,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597978179
    },
    {
        "content": "<p>I forget how much variance it has but the results are all over the place IIRC. <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> might have more recent updates</p>",
        "id": 207596110,
        "sender_full_name": "eddyb",
        "timestamp": 1597978181
    },
    {
        "content": "<p>rustdoc shouldn't be counted until it stops loading all extern crates at startup</p>",
        "id": 207596154,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597978206
    },
    {
        "content": "<p>we should've added a <code>-doc</code> toggle but I guess we haven't yet</p>",
        "id": 207596155,
        "sender_full_name": "eddyb",
        "timestamp": 1597978210
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> lol</p>",
        "id": 207596157,
        "sender_full_name": "eddyb",
        "timestamp": 1597978214
    },
    {
        "content": "<p>If that's the case, would it make sense for performance runs to exclude the -doc test cases for now?</p>",
        "id": 207596160,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597978216
    },
    {
        "content": "<p>Nevermind, yeah, exactly. :)</p>",
        "id": 207596164,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597978227
    },
    {
        "content": "<p>we want the data but not to show it by default, I think</p>",
        "id": 207596165,
        "sender_full_name": "eddyb",
        "timestamp": 1597978229
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustdoc/core.rs#L423\">https://github.com/rust-lang/rust/blob/master/src/librustdoc/core.rs#L423</a></p>",
        "id": 207596169,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597978241
    },
    {
        "content": "<p>it's mostly useful if you change <code>rustdoc</code> itself, I guess</p>",
        "id": 207596171,
        "sender_full_name": "eddyb",
        "timestamp": 1597978249
    },
    {
        "content": "<p>yeah</p>",
        "id": 207596172,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597978252
    },
    {
        "content": "<p>it had -68% for the everybody_loops PR lol</p>",
        "id": 207596174,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597978263
    },
    {
        "content": "<p>admittedly that was for the wf_traits stress test but still</p>",
        "id": 207596181,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597978274
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I'm actually surprised metadata compression isn't way worse, since we lose a crucial benefit: memory-mapping the <code>.rmeta</code> file inside an <code>.rlib</code> (assuming LLVM isn't pulling our leg here I guess) or a whole <code>.rmeta</code> file from an <code>--emit=metadata</code> build</p>",
        "id": 207596191,
        "sender_full_name": "eddyb",
        "timestamp": 1597978318
    },
    {
        "content": "<p>errr</p>",
        "id": 207596230,
        "sender_full_name": "eddyb",
        "timestamp": 1597978336
    },
    {
        "content": "<p>not sure I follow what that has to do with rustdoc</p>",
        "id": 207596235,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597978351
    },
    {
        "content": "<p>Zulip's tab complete is broken if you're not properly awake</p>",
        "id": 207596236,
        "sender_full_name": "eddyb",
        "timestamp": 1597978353
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> oh you're changing the algorithm, not compressing metadata in real-world scenarios heh</p>",
        "id": 207596247,
        "sender_full_name": "eddyb",
        "timestamp": 1597978392
    },
    {
        "content": "<p>We're already compressing metadata; this change just switches from deflate to snappy.</p>",
        "id": 207596249,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597978397
    },
    {
        "content": "<p>this should actually be entirely perf-neutral</p>",
        "id": 207596251,
        "sender_full_name": "eddyb",
        "timestamp": 1597978408
    },
    {
        "content": "<p>since AFAIK we don't track <code>dylib</code>s on perf</p>",
        "id": 207596253,
        "sender_full_name": "eddyb",
        "timestamp": 1597978422
    },
    {
        "content": "<p>well, \"real-world modulo <code>rustc</code> itself which we don't measure\"</p>",
        "id": 207596297,
        "sender_full_name": "eddyb",
        "timestamp": 1597978445
    },
    {
        "content": "<p>Seems like we must be doing <em>something</em> with metadata here to get this much variation.</p>",
        "id": 207596298,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597978447
    },
    {
        "content": "<p><del>sometimes I wonder what we _do_ track on perf</del></p>",
        "id": 207596300,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597978455
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Yeah, I feel like we ought to shove a version of <code>rustc_middle</code> into the perf testsuite. ;)</p>",
        "id": 207596304,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597978473
    },
    {
        "content": "<p>much easier said than done, the compiler loves to rely on unstable features and move with the tides</p>",
        "id": 207596310,
        "sender_full_name": "eddyb",
        "timestamp": 1597978500
    },
    {
        "content": "<p>but I do miss irsy :(</p>",
        "id": 207596319,
        "sender_full_name": "eddyb",
        "timestamp": 1597978516
    },
    {
        "content": "<p>a bygone era, I suppose. a simpler time :P</p>",
        "id": 207596327,
        "sender_full_name": "eddyb",
        "timestamp": 1597978536
    },
    {
        "content": "<p>Well, in any case...</p>",
        "id": 207596332,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597978546
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> do you happen to know by any chance how long stage 1 takes before/after?</p>",
        "id": 207596334,
        "sender_full_name": "eddyb",
        "timestamp": 1597978554
    },
    {
        "content": "<p>you might be able to see a win there :D</p>",
        "id": 207596374,
        "sender_full_name": "eddyb",
        "timestamp": 1597978567
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I don't have that handy, but it'd be easy for me to test it, if you can suggest the right approach for timing it.</p>",
        "id": 207596377,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597978579
    },
    {
        "content": "<p>sadly it probably requires a full build</p>",
        "id": 207596378,
        "sender_full_name": "eddyb",
        "timestamp": 1597978581
    },
    {
        "content": "<p>/me build-tested on a 96-way, and would be happy to take another 10 minutes for two full builds. ;)</p>",
        "id": 207596383,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597978603
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> just uhh <code>rm -rf build/*/stage1*</code> and <code>./x.py build</code></p>",
        "id": 207596386,
        "sender_full_name": "eddyb",
        "timestamp": 1597978607
    },
    {
        "content": "<p>it should print the relevant times as it goes</p>",
        "id": 207596393,
        "sender_full_name": "eddyb",
        "timestamp": 1597978630
    },
    {
        "content": "<p>Also, I'm all for trying uncompressed metadata too. I feel like I saw that tried at some point.</p>",
        "id": 207596404,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597978645
    },
    {
        "content": "<p>That'd take a little more work, to actually mmap rather than reading into memory.</p>",
        "id": 207596407,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597978660
    },
    {
        "content": "<p>I think what you're decompressing is from a <code>mmap</code>'d <code>.so</code></p>",
        "id": 207596454,
        "sender_full_name": "eddyb",
        "timestamp": 1597978692
    },
    {
        "content": "<p>Ah, interesting. So we'd just need to stop copying, and reference in-place?</p>",
        "id": 207596459,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597978714
    },
    {
        "content": "<p>I guess you might need to keep the ownership of the LLVM object accessing the dylib (assuming it's still that), around somehow, for longer, but that shouldn't be too hard</p>",
        "id": 207596474,
        "sender_full_name": "eddyb",
        "timestamp": 1597978780
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> It looks like doing that rm and then build just built std, not the compiler.</p>",
        "id": 207596479,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597978799
    },
    {
        "content": "<p>hmpf</p>",
        "id": 207596525,
        "sender_full_name": "eddyb",
        "timestamp": 1597978810
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> add <code>--stage 2</code> I guess</p>",
        "id": 207596530,
        "sender_full_name": "eddyb",
        "timestamp": 1597978826
    },
    {
        "content": "<p>or add <code>build src/rustc</code></p>",
        "id": 207596535,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597978856
    },
    {
        "content": "<p>I'd rather avoid that if possible</p>",
        "id": 207596538,
        "sender_full_name": "eddyb",
        "timestamp": 1597978864
    },
    {
        "content": "<p>just so we know it roughly matches what we'd see e.g. on CI</p>",
        "id": 207596545,
        "sender_full_name": "eddyb",
        "timestamp": 1597978883
    },
    {
        "content": "<p>CI does <code>build --stage 2 src/rustc</code></p>",
        "id": 207596553,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597978894
    },
    {
        "content": "<p>that's why I originally added the flag</p>",
        "id": 207596554,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597978899
    },
    {
        "content": "<p>but that's building rustc thrice</p>",
        "id": 207596562,
        "sender_full_name": "eddyb",
        "timestamp": 1597978921
    },
    {
        "content": "<p>yes</p>",
        "id": 207596599,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597978925
    },
    {
        "content": "<p>that used to be the default lol</p>",
        "id": 207596600,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597978929
    },
    {
        "content": "<p>no? you have to opt into it in <code>config.toml</code> for that to be the case</p>",
        "id": 207596606,
        "sender_full_name": "eddyb",
        "timestamp": 1597978945
    },
    {
        "content": "<p>oh I see</p>",
        "id": 207596610,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597978956
    },
    {
        "content": "<p>since almost nobody wants that heh</p>",
        "id": 207596616,
        "sender_full_name": "eddyb",
        "timestamp": 1597978967
    },
    {
        "content": "<p>Waiting on rustc_middle...</p>",
        "id": 207596619,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597978981
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> anyway, you want the first <code>Finished release ...</code> after:</p>\n<div class=\"codehilite\"><pre><span></span><code>Building stage1 compiler artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu)\n</code></pre></div>",
        "id": 207596626,
        "sender_full_name": "eddyb",
        "timestamp": 1597979011
    },
    {
        "content": "<p>make sure to run the <code>rm</code> command before builds if you change the source, I think there's some bug in <code>x.py</code></p>",
        "id": 207596673,
        "sender_full_name": "eddyb",
        "timestamp": 1597979054
    },
    {
        "content": "<p>I did. I'll do so again after reverting the patch.</p>",
        "id": 207596676,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597979070
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Finished release [optimized] target(s) in 3m 17s\n</code></pre></div>",
        "id": 207596738,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597979201
    },
    {
        "content": "<p>That's with the patch. One moment, checking without...</p>",
        "id": 207596741,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597979211
    },
    {
        "content": "<p>ah that's quick enough that you can do several runs, nice</p>",
        "id": 207596745,
        "sender_full_name": "eddyb",
        "timestamp": 1597979224
    },
    {
        "content": "<p>Because of the change I reverted, it's rebuilding part of stage0 before building stage 1.</p>",
        "id": 207596852,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597979439
    },
    {
        "content": "<p>that shouldn't impact the stage1 time</p>",
        "id": 207596911,
        "sender_full_name": "eddyb",
        "timestamp": 1597979524
    },
    {
        "content": "<p>It doesn't, it just means I'm waiting longer. ;)</p>",
        "id": 207596934,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597979625
    },
    {
        "content": "<p>Worked though.</p>",
        "id": 207596937,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597979641
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Finished release [optimized] target(s) in 3m 15s\n</code></pre></div>",
        "id": 207596962,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597979643
    },
    {
        "content": "<p>Looks like a wash.</p>",
        "id": 207596978,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597979652
    },
    {
        "content": "<p>Can't spend much time waiting on compression if you're doing it on 96 CPUs in parallel. ;)</p>",
        "id": 207596983,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597979670
    },
    {
        "content": "<p>was about to say, yeah. you might need to do it a few times and see if there's a pattern, I was hoping it'd be faster tbh</p>",
        "id": 207596993,
        "sender_full_name": "eddyb",
        "timestamp": 1597979703
    },
    {
        "content": "<p>you could try <code>./x.py build; rm -rf build/*/stage1*; ./x.py build --stage 2 -j 8</code> to build slower but likely get more interesting numbers, too</p>",
        "id": 207597057,
        "sender_full_name": "eddyb",
        "timestamp": 1597979772
    },
    {
        "content": "<p>First I'm getting a second set of numbers.</p>",
        "id": 207597061,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597979805
    },
    {
        "content": "<p>Want to make sure that, for instance, the first build wasn't disadvantaged by being the first thing I did after booting up the system.</p>",
        "id": 207597068,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597979836
    },
    {
        "content": "<p>Another build without the patch:     Finished release [optimized] target(s) in 3m 17s</p>",
        "id": 207597201,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597980089
    },
    {
        "content": "<p>And another with the patch:     Finished release [optimized] target(s) in 3m 15s</p>",
        "id": 207597377,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597980449
    },
    {
        "content": "<p>So yeah, definitely a wash on a 96-way rustc build, since the times switched. ;)</p>",
        "id": 207597379,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597980467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> Thoughts?</p>",
        "id": 207597492,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597980681
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I'd look into why you get any non-<code>-doc</code> perf changes, maybe <code>perf</code> builds some <code>dylib</code>s</p>",
        "id": 207598677,
        "sender_full_name": "eddyb",
        "timestamp": 1597982512
    },
    {
        "content": "<p>/me is a little confused. Isn't this metadata we produce for every crate?</p>",
        "id": 207598722,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597982553
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> we don't compress it normally, only when building a <code>dylib</code>. which is only used for rustc itself in practice</p>",
        "id": 207598791,
        "sender_full_name": "eddyb",
        "timestamp": 1597982644
    },
    {
        "content": "<p>oh we switched that to only one crate, didn't we. so yeah my bad it shouldn't matter in practice</p>",
        "id": 207598802,
        "sender_full_name": "eddyb",
        "timestamp": 1597982667
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> e.g. <code>ls ~/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/*.so</code></p>",
        "id": 207598811,
        "sender_full_name": "eddyb",
        "timestamp": 1597982693
    },
    {
        "content": "<p>all of those (except <code>libLLVM</code> since that's not Rust) are runtime dependencies of <code>rustc</code> and only <code>librustc_driver-*.so</code> is really used as a Rust dependency in <code>dylib</code> form. so yeah</p>",
        "id": 207598879,
        "sender_full_name": "eddyb",
        "timestamp": 1597982768
    },
    {
        "content": "<p>Interesting. How easy would it be to switch to compressing it for everything (again), and see if that gives a bigger performance win?</p>",
        "id": 207598889,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597982822
    },
    {
        "content": "<p>I can almost guarantee it's a performance loss, since you're strictly doing more work. it'd be less space on disk, but I don't think anything we measure is proportional to that</p>",
        "id": 207598910,
        "sender_full_name": "eddyb",
        "timestamp": 1597982866
    },
    {
        "content": "<p>as for how hard it would be: shouldn't be much harder than decompression is in the dylib path</p>",
        "id": 207598963,
        "sender_full_name": "eddyb",
        "timestamp": 1597982910
    },
    {
        "content": "<p>presumably once you decompress it doesn't even matter where the compressed data came from</p>",
        "id": 207598971,
        "sender_full_name": "eddyb",
        "timestamp": 1597982930
    },
    {
        "content": "<p>the existing <code>rlib</code> codepath should be called something with \"archive\" in the name (since it's just an <code>.a</code> file)</p>",
        "id": 207598996,
        "sender_full_name": "eddyb",
        "timestamp": 1597982997
    },
    {
        "content": "<p>Nevermind then, I won't poke at that if you're saying it's almost certainly not going to help.</p>",
        "id": 207599041,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597983051
    },
    {
        "content": "<p>As for the rest, though, it's giving a rather visible performance improvement for non-doc builds.</p>",
        "id": 207599052,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597983079
    },
    {
        "content": "<p>/me ponders.</p>",
        "id": 207599055,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597983085
    },
    {
        "content": "<p>I don't see how they would, maybe proc macros relying on <code>dylib</code> metadata?</p>",
        "id": 207599105,
        "sender_full_name": "eddyb",
        "timestamp": 1597983143
    },
    {
        "content": "<p>in which case we probably just want to not compress at all</p>",
        "id": 207599106,
        "sender_full_name": "eddyb",
        "timestamp": 1597983156
    },
    {
        "content": "<p>(I think the only reason we compress the <code>dylib</code> case is making the rustc we ship smaller)</p>",
        "id": 207599115,
        "sender_full_name": "eddyb",
        "timestamp": 1597983207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> btw my intuition regarding \"doing less work up-front is better\": we've consistently shaved off \"startup time\" by making metadata reading more on-demand/random-access, and I don't think we can ever go back to anything proportional to the number of bytes in the metadata. if we ever compress again, it will have to at a much smaller scale, where we know we don't decompress most of the file most of the time</p>",
        "id": 207599354,
        "sender_full_name": "eddyb",
        "timestamp": 1597983573
    },
    {
        "content": "<p>the more something is used, the more it helps to match what it needs to be used as, etc.</p>",
        "id": 207599423,
        "sender_full_name": "eddyb",
        "timestamp": 1597983609
    },
    {
        "content": "<p>which reminds me, we use LEB128 still I think, and it might help to not do that in several places, depending on the kind of integer encoded. or we could have <code>u16</code> units instead of <code>u8</code> units</p>",
        "id": 207599454,
        "sender_full_name": "eddyb",
        "timestamp": 1597983670
    },
    {
        "content": "<p>classic time-space tradeoff though :P</p>",
        "id": 207599468,
        "sender_full_name": "eddyb",
        "timestamp": 1597983696
    },
    {
        "content": "<p>Should I be getting anything of value out of <a href=\"https://perf.rust-lang.org/detailed-query.html?commit=50541435b8c0b771394cb492b0b2fbdbc3c3ddd9&amp;base_commit=e15510ca33ea15c893b78710101c962b11459963&amp;benchmark=webrender-wrench-check&amp;run_name=incr-unchanged\">https://perf.rust-lang.org/detailed-query.html?commit=50541435b8c0b771394cb492b0b2fbdbc3c3ddd9&amp;base_commit=e15510ca33ea15c893b78710101c962b11459963&amp;benchmark=webrender-wrench-check&amp;run_name=incr-unchanged</a> , or is it all noise?</p>",
        "id": 207599552,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597983841
    },
    {
        "content": "<p>all of the positive and negative differences make me doubt this is useful. although, <code>expand_crate</code> could be relevant? but isn't this for a run that got <em>faster</em>?</p>",
        "id": 207599614,
        "sender_full_name": "eddyb",
        "timestamp": 1597983930
    },
    {
        "content": "<p>It is, yeah. The queries don't seem to reflect that, though.</p>",
        "id": 207599629,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597983959
    },
    {
        "content": "<p>Is the performance here all <em>outside</em> of queries somehow?</p>",
        "id": 207599669,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597983967
    },
    {
        "content": "<p>Here's a performance delta for a \"full\" run: <a href=\"https://perf.rust-lang.org/detailed-query.html?commit=50541435b8c0b771394cb492b0b2fbdbc3c3ddd9&amp;base_commit=e15510ca33ea15c893b78710101c962b11459963&amp;benchmark=tokio-webpush-simple-check&amp;run_name=full\">https://perf.rust-lang.org/detailed-query.html?commit=50541435b8c0b771394cb492b0b2fbdbc3c3ddd9&amp;base_commit=e15510ca33ea15c893b78710101c962b11459963&amp;benchmark=tokio-webpush-simple-check&amp;run_name=full</a></p>",
        "id": 207599674,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597983986
    },
    {
        "content": "<p>I think this is just time being near-useless</p>",
        "id": 207599675,
        "sender_full_name": "eddyb",
        "timestamp": 1597983988
    },
    {
        "content": "<p>hence all my obsession with <code>rdpmc</code></p>",
        "id": 207599678,
        "sender_full_name": "eddyb",
        "timestamp": 1597983997
    },
    {
        "content": "<p>Fair.</p>",
        "id": 207599694,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597984051
    },
    {
        "content": "<p>Any hypotheses on why this might be showing as faster across the board (other than -doc)? That doesn't seem like it'd be noise.</p>",
        "id": 207599744,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597984137
    },
    {
        "content": "<p>my best guess is proc macros (which are a hybrid of <code>cdylib</code> and <code>dylib</code>)</p>",
        "id": 207599758,
        "sender_full_name": "eddyb",
        "timestamp": 1597984185
    },
    {
        "content": "<p>wait I can go check</p>",
        "id": 207599764,
        "sender_full_name": "eddyb",
        "timestamp": 1597984197
    },
    {
        "content": "<p>Oh?</p>",
        "id": 207599796,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597984203
    },
    {
        "content": "<p><code>readelf -x .rustc ~/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/libchalk_derive-*.so | less</code></p>",
        "id": 207599831,
        "sender_full_name": "eddyb",
        "timestamp": 1597984264
    },
    {
        "content": "<p>yeah it's compressed</p>",
        "id": 207599841,
        "sender_full_name": "eddyb",
        "timestamp": 1597984297
    },
    {
        "content": "<p>so my suggestion would be disabling compression for at least proc macros</p>",
        "id": 207599844,
        "sender_full_name": "eddyb",
        "timestamp": 1597984315
    },
    {
        "content": "<p>So, you think it's providing a win to switch to faster compression, but you think it'd provide an even better win to stop compressing?</p>",
        "id": 207599945,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597984463
    },
    {
        "content": "<p>right, I think proc macros are collateral damage from something we only really want to do to <code>librustc_driver-*.so</code></p>",
        "id": 207600134,
        "sender_full_name": "eddyb",
        "timestamp": 1597984869
    },
    {
        "content": "<p>Q: do any other filesystems other than zfs compress data, or have ability to, by default?</p>",
        "id": 207656084,
        "sender_full_name": "nagisa",
        "timestamp": 1598028062
    },
    {
        "content": "<p>According to <a href=\"https://en.wikipedia.org/wiki/Comparison_of_file_systems\">wikipedia</a>: BeeGFS, APFS, NTFS, F2FS, Reiser4, NSS, NWFS, Fossil, ZFS, Btrfs, SquashFS</p>",
        "id": 207656656,
        "sender_full_name": "bjorn3",
        "timestamp": 1598028386
    },
    {
        "content": "<p>Btrfs and Reiser4 definitely, they attempt a similar conceptual model as ZFS though I believe they differ on several points.</p>",
        "id": 207671964,
        "sender_full_name": "Jubilee",
        "timestamp": 1598036748
    },
    {
        "content": "<p>Also worth noting: there are two main reasons for a filesystem to support compression. Some filesystems support compression to save space; they might sacrifice performance to do so. Some filesystems support compression to improve performance, using a compression format like lz4 or similar that's pretty much doable at the speed of memory.</p>",
        "id": 207674543,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598038127
    },
    {
        "content": "<p>Sort of related, Fedora is enabling swap-on-zram soon:<br>\n<a href=\"https://fedoraproject.org/wiki/Changes/SwapOnZRAM\">https://fedoraproject.org/wiki/Changes/SwapOnZRAM</a></p>",
        "id": 207675249,
        "sender_full_name": "cuviper",
        "timestamp": 1598038473
    },
    {
        "content": "<p>(and <a href=\"https://github.com/systemd/zram-generator\">systemd/zram-generator</a> is written in Rust!)</p>",
        "id": 207675562,
        "sender_full_name": "cuviper",
        "timestamp": 1598038637
    },
    {
        "content": "<p>Yeah, ZFS as I understand it is about filesystem integrity above all else, compression simply is something ZFS can slot in automagically as part of how it works, along with deduplication and etc.</p>\n<p>\"We basically built this to have a spot for middleware because we wanted to be able to apply our own middleware and then it was mostly adding a few extra logic slots for middleware.\"</p>",
        "id": 207706243,
        "sender_full_name": "Jubilee",
        "timestamp": 1598069101
    }
]