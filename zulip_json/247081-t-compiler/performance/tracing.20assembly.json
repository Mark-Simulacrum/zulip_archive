[
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/75391#issuecomment-672897272\">https://github.com/rust-lang/rust/pull/75391#issuecomment-672897272</a> has before/after diffs on enabling debug! calls -- that diff looks pretty bad, to be honest, lots of jumping and such. Is that expected? Should we be editing upstream tracing code perhaps (or trying to)?</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"307286\">@Eliza Weisman</span></p>",
        "id": 206699842,
        "sender_full_name": "simulacrum",
        "timestamp": 1597241874
    },
    {
        "content": "<p>to summarize this assembly there's a bunch of formatting code behind a conditional check as to whether this should be done at all.</p>",
        "id": 206702169,
        "sender_full_name": "nagisa",
        "timestamp": 1597242910
    },
    {
        "content": "<p>probably most of the cost in a typical case comes from the stack setup code to be honest.</p>",
        "id": 206702214,
        "sender_full_name": "nagisa",
        "timestamp": 1597242935
    },
    {
        "content": "<p>yeah it's possible it's expected, but it seems like more than I would hope for</p>",
        "id": 206702235,
        "sender_full_name": "simulacrum",
        "timestamp": 1597242941
    },
    {
        "content": "<p>(maybe we can outline the code somehow?)</p>",
        "id": 206702260,
        "sender_full_name": "simulacrum",
        "timestamp": 1597242951
    },
    {
        "content": "<p>and maybe some effect from instruction cache being evicted more.</p>",
        "id": 206702263,
        "sender_full_name": "nagisa",
        "timestamp": 1597242953
    },
    {
        "content": "<p>I guess it's being forcibly inlined because it's a macro :/</p>",
        "id": 206703310,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597243460
    },
    {
        "content": "<blockquote>\n<p>(maybe we can outline the code somehow?)</p>\n</blockquote>\n<p>That would still have the stack setup to pass the arguments, right? That seems like the most expensive part</p>",
        "id": 206703359,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597243494
    },
    {
        "content": "<p>(but my assembly is really bad so take my word with a grain of salt)</p>",
        "id": 206703423,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597243524
    },
    {
        "content": "<p>not necessarily, the cost in preamble is all coming from spilling registers that are latter used in formatting.</p>",
        "id": 206703906,
        "sender_full_name": "nagisa",
        "timestamp": 1597243748
    },
    {
        "content": "<p>outlining is not strictly necessary either, but I donâ€™t know of llvm is capable enough to push register spilling to within a conditional if its considered cold or something.</p>",
        "id": 206703964,
        "sender_full_name": "nagisa",
        "timestamp": 1597243784
    },
    {
        "content": "<p>I seem to recall no</p>",
        "id": 206704044,
        "sender_full_name": "simulacrum",
        "timestamp": 1597243806
    },
    {
        "content": "<p>but at least part of the cost should be removable -- it looks like there's panicking due to an expect involved</p>",
        "id": 206704080,
        "sender_full_name": "simulacrum",
        "timestamp": 1597243832
    },
    {
        "content": "<p>basically instead of</p>\n<div class=\"codehilite\"><pre><span></span><code>spill_registers()\nif log { format and log }\nactual_code()\nreload_registers()\n</code></pre></div>\n\n\n<p>we probably want</p>\n<div class=\"codehilite\"><pre><span></span><code>if log { spill_registers(); format and log; reload_registers() }\nactual_code()\n</code></pre></div>",
        "id": 206704120,
        "sender_full_name": "nagisa",
        "timestamp": 1597243856
    },
    {
        "content": "<p>outlining can be achieved even when expanding a macro (by expanding into an insta-called closure with <code>#[inline(never)]</code>)</p>",
        "id": 206704300,
        "sender_full_name": "nagisa",
        "timestamp": 1597243935
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> hi everyone</p>",
        "id": 206758048,
        "sender_full_name": "Eliza Weisman",
        "timestamp": 1597269684
    },
    {
        "content": "<p>I didn't spend any more time looking at this today, really, though locally reproducing seemed to look even worse with a trivial debug! call, getting a bunch of panic machinery inlined</p>",
        "id": 206758190,
        "sender_full_name": "simulacrum",
        "timestamp": 1597269755
    },
    {
        "content": "<p>i think there's definitely a lot we can do upstream to simplify the macro-generated code. we could move all of the code that constructs the key-value field set into a closure that's passed into a function, instead of generating it inline in the place where the macro is expanded.</p>",
        "id": 206758204,
        "sender_full_name": "Eliza Weisman",
        "timestamp": 1597269766
    },
    {
        "content": "<p>i thought about doing this earlier while talking to oli about this stuff</p>",
        "id": 206758244,
        "sender_full_name": "Eliza Weisman",
        "timestamp": 1597269796
    },
    {
        "content": "<p>the reason we didn't do that earlier is that we recently _removed_ a closure from the macros, because some folks were seeing a build time hit from the <code>tracing</code> API function that the closure was passed to getting monomorphized repeatedly</p>",
        "id": 206758355,
        "sender_full_name": "Eliza Weisman",
        "timestamp": 1597269851
    },
    {
        "content": "<p>yeah, closures have the currently annoying property of inheriting the generics from the caller's environment which forces monomorphization -- maybe we can get the same benefits by sticking most everything into a <code>fn foo() {}</code> defined locally, though</p>",
        "id": 206758401,
        "sender_full_name": "simulacrum",
        "timestamp": 1597269896
    },
    {
        "content": "<p>(this is the <code>tracing</code> issue for that: <a href=\"https://github.com/tokio-rs/tracing/issues/783\">https://github.com/tokio-rs/tracing/issues/783</a>)</p>",
        "id": 206758409,
        "sender_full_name": "Eliza Weisman",
        "timestamp": 1597269903
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/tracing.20assembly/near/206758401\">said</a>:</p>\n<blockquote>\n<p>yeah, closures have the currently annoying property of inheriting the generics from the caller's environment which forces monomorphization -- maybe we can get the same benefits by sticking most everything into a <code>fn foo() {}</code> defined locally, though</p>\n</blockquote>\n<p>hmm., that's possible, we could definitely do that</p>",
        "id": 206758468,
        "sender_full_name": "Eliza Weisman",
        "timestamp": 1597269948
    },
    {
        "content": "<p>we would then just need the macro to expand a function call that borrows all the arguments that go into the valueset.</p>",
        "id": 206758556,
        "sender_full_name": "Eliza Weisman",
        "timestamp": 1597269982
    },
    {
        "content": "<p>we could stick the whole slow path (actually recording something) behind that</p>",
        "id": 206758608,
        "sender_full_name": "Eliza Weisman",
        "timestamp": 1597270022
    },
    {
        "content": "<p>the other thing I noted is that tracing currently generates two separate statics for every call-site which <em>feels</em> like it's got to be worse than just one, since I believe that on ELF(?) we need to load the address of each static separately, there's no notion of \"adjacent statics\" or whatever</p>",
        "id": 206758644,
        "sender_full_name": "simulacrum",
        "timestamp": 1597270067
    },
    {
        "content": "<p>that _should_ put all the register spilling and panic setup code in a more reasonable place</p>",
        "id": 206758648,
        "sender_full_name": "Eliza Weisman",
        "timestamp": 1597270072
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/tracing.20assembly/near/206758644\">said</a>:</p>\n<blockquote>\n<p>the other thing I noted is that tracing currently generates two separate statics for every call-site which <em>feels</em> like it's got to be worse than just one, since I believe that on ELF(?) we need to load the address of each static separately, there's no notion of \"adjacent statics\" or whatever</p>\n</blockquote>\n<p>huh, i thought we changed that recently</p>",
        "id": 206758702,
        "sender_full_name": "Eliza Weisman",
        "timestamp": 1597270089
    },
    {
        "content": "<p>hm I was seeing both a META and a CALLSITE static</p>",
        "id": 206758709,
        "sender_full_name": "simulacrum",
        "timestamp": 1597270102
    },
    {
        "content": "<p>yeah that seems to be the case on tracing master right now</p>",
        "id": 206758737,
        "sender_full_name": "simulacrum",
        "timestamp": 1597270129
    },
    {
        "content": "<p>oh, for the metadata. yeah. this one is a little hairier to disentangle on the tracing side.</p>",
        "id": 206758746,
        "sender_full_name": "Eliza Weisman",
        "timestamp": 1597270143
    },
    {
        "content": "<p>there used to be _more_ statics, now they're all in a struct besides the metadata and callsite</p>",
        "id": 206758760,
        "sender_full_name": "Eliza Weisman",
        "timestamp": 1597270163
    },
    {
        "content": "<p>that...might not be fixable until <code>tracing-core</code> 0.2</p>",
        "id": 206758768,
        "sender_full_name": "Eliza Weisman",
        "timestamp": 1597270172
    },
    {
        "content": "<p>yeah, I also have no actual sense of how important it is :)</p>",
        "id": 206758776,
        "sender_full_name": "simulacrum",
        "timestamp": 1597270185
    },
    {
        "content": "<p>probably not very</p>",
        "id": 206758778,
        "sender_full_name": "simulacrum",
        "timestamp": 1597270190
    },
    {
        "content": "<p>it would be nice to have an issue for \"maybe don't generate two statics rather than one\", so i can remember to look at it when we're breaking stuff</p>",
        "id": 206758832,
        "sender_full_name": "Eliza Weisman",
        "timestamp": 1597270206
    },
    {
        "content": "<p>I can file that if you'd like?</p>",
        "id": 206758874,
        "sender_full_name": "simulacrum",
        "timestamp": 1597270253
    },
    {
        "content": "<p>filed <a href=\"https://github.com/tokio-rs/tracing/issues/921\">https://github.com/tokio-rs/tracing/issues/921</a> but feel free to close if that's the wrong place or whatever :)</p>",
        "id": 206759173,
        "sender_full_name": "simulacrum",
        "timestamp": 1597270497
    },
    {
        "content": "<p>that looks good to me</p>",
        "id": 206759219,
        "sender_full_name": "Eliza Weisman",
        "timestamp": 1597270532
    },
    {
        "content": "<p>i hadn't thought of the tuple thing, we might be able to do that without waiting for a breaking change...</p>",
        "id": 206759256,
        "sender_full_name": "Eliza Weisman",
        "timestamp": 1597270558
    },
    {
        "content": "<p>thanks for all your work on this, btw --- getting tracing into the compiler has been super interesting and honestly more than a little bit humbling for me :)</p>",
        "id": 206759340,
        "sender_full_name": "Eliza Weisman",
        "timestamp": 1597270619
    },
    {
        "content": "<p>it seems like rustc is sensitive to a pretty different set of performance concerns than the other use cases where i've looked at tracing perf</p>",
        "id": 206759362,
        "sender_full_name": "Eliza Weisman",
        "timestamp": 1597270647
    },
    {
        "content": "<p>anyway, if either of you are interested in writing a patch to  move that stuff into a function, i would happily give pointers, otherwise i will put it on my todo list!</p>",
        "id": 206761377,
        "sender_full_name": "Eliza Weisman",
        "timestamp": 1597272184
    },
    {
        "content": "<p>well, i have some good news, and some less good news</p>",
        "id": 207346977,
        "sender_full_name": "Eliza Weisman",
        "timestamp": 1597787601
    },
    {
        "content": "<p>this is the good news: <a href=\"https://gist.github.com/hawkw/94793f590d2f9fcf3b96fd18c71e8f3c\">https://gist.github.com/hawkw/94793f590d2f9fcf3b96fd18c71e8f3c</a></p>",
        "id": 207347970,
        "sender_full_name": "Eliza Weisman",
        "timestamp": 1597788346
    },
    {
        "content": "<p>(i managed to get the disassembly of an <code>event!</code> macro invocation down by about 10x instructions!)</p>",
        "id": 207348073,
        "sender_full_name": "Eliza Weisman",
        "timestamp": 1597788407
    },
    {
        "content": "<p>can someone move this to <a class=\"stream\" data-stream-id=\"247081\" href=\"/#narrow/stream/247081-t-compiler.2Fperformance\">#t-compiler/performance</a> btw?</p>",
        "id": 207348123,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597788449
    },
    {
        "content": "<p>and, could shrink it more, but i felt like it was probably better to leave a second fast path inline.</p>",
        "id": 207348130,
        "sender_full_name": "Eliza Weisman",
        "timestamp": 1597788456
    },
    {
        "content": "<p>the less good news is i am not sure if we can make this change before <code>tracing</code> 0.2, because AFAICT it breaks a (fairly obscure) bit of API (which is being removed in 0.2 regardless)</p>",
        "id": 207348195,
        "sender_full_name": "Eliza Weisman",
        "timestamp": 1597788488
    },
    {
        "content": "<p>and then there's some more good news, which is that 0.2 shouldnt be <em>too</em> far away</p>",
        "id": 207348270,
        "sender_full_name": "Eliza Weisman",
        "timestamp": 1597788570
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"131828\" href=\"/#narrow/stream/131828-t-compiler/topic/tracing.20assembly\">#t-compiler &gt; tracing assembly</a> by <span class=\"user-mention silent\" data-user-id=\"116107\">davidtwco</span></p>",
        "id": 207355313,
        "sender_full_name": "Notification Bot",
        "timestamp": 1597793670
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307286\">@Eliza Weisman</span> That's awesome!</p>",
        "id": 207358988,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597797227
    },
    {
        "content": "<p><a href=\"https://github.com/tokio-rs/tracing/pull/943\">https://github.com/tokio-rs/tracing/pull/943</a></p>",
        "id": 207480327,
        "sender_full_name": "Eliza Weisman",
        "timestamp": 1597886621
    },
    {
        "content": "<p>so that seems better</p>",
        "id": 207480329,
        "sender_full_name": "Eliza Weisman",
        "timestamp": 1597886626
    },
    {
        "content": "<p>(and, we can ship it now!)</p>",
        "id": 207480333,
        "sender_full_name": "Eliza Weisman",
        "timestamp": 1597886640
    },
    {
        "content": "<p><a href=\"https://crates.io/crates/tracing/0.1.20\">https://crates.io/crates/tracing/0.1.20</a> if y'all want to try it out</p>",
        "id": 207908730,
        "sender_full_name": "Eliza Weisman",
        "timestamp": 1598311290
    }
]