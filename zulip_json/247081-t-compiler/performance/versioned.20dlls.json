[
    {
        "content": "<p>It seems like some of the compile time issues are because everything including the kitchen sink is being shoved into the executable...</p>\n<p>Would it be possible to have, even in just development environments, a versioned dll like ecosystem...</p>\n<p>Prebuilt crates would exist and be callable. Different versions, and possibly debug and release versions of the crates could all be available. </p>\n<p>Back in the day, dll's worked great at keeping existing code modules at arms length, but...  things got completely out of hand trying to deal with dll hell, or keeping different versions of a dll from causing all sorts of trouble as one binary required a newer one, and another an older.</p>\n<p>Furthermore, would it be worthwhile to have an installer/updater create the same thing on end-user machines so a user machine would need just 1 copy of each version of a popular crate, instead of a copy inside most every rust binary...</p>",
        "id": 203558558,
        "sender_full_name": "drcarrybit",
        "timestamp": 1594415700
    },
    {
        "content": "<p>That is not really true, only <code>#[inline]</code> and generic functions are codegen'd in downstream crates</p>",
        "id": 203558962,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594415943
    },
    {
        "content": "<p>also I'm not sure this is the best place to discuss that tbh</p>",
        "id": 203558970,
        "sender_full_name": "eddyb",
        "timestamp": 1594415953
    },
    {
        "content": "<p>also Rust technically has \"versioned\" libraries, but all of the relevant information is condensed into a hash instead</p>",
        "id": 203559002,
        "sender_full_name": "eddyb",
        "timestamp": 1594415989
    },
    {
        "content": "<p>like the Rust compiler is shipped as <code>librustc_driver-SOMEHASH.so</code></p>",
        "id": 203559083,
        "sender_full_name": "eddyb",
        "timestamp": 1594416017
    },
    {
        "content": "<p>the <code>rustc</code> executable is a very tiny wrapper that just calls into that</p>",
        "id": 203559096,
        "sender_full_name": "eddyb",
        "timestamp": 1594416035
    },
    {
        "content": "<p>(this allows e.g. <code>rustdoc</code> or clippy to not duplicate the entirety of that)</p>",
        "id": 203559117,
        "sender_full_name": "eddyb",
        "timestamp": 1594416056
    },
    {
        "content": "<p>Thanks... I'm basing the idea on some thoughts after reading:</p>\n<p><a href=\"https://raphlinus.github.io/rust/2019/08/21/rust-bloat.html\">https://raphlinus.github.io/rust/2019/08/21/rust-bloat.html</a></p>\n<p>but that's a pretty old article...</p>",
        "id": 203561183,
        "sender_full_name": "drcarrybit",
        "timestamp": 1594417547
    },
    {
        "content": "<p>it's not that old <em>shrug</em></p>",
        "id": 203561226,
        "sender_full_name": "eddyb",
        "timestamp": 1594417562
    },
    {
        "content": "<p>what would be nice is an user-wide compiler cache (with a mechanism that distros could maybe use for system-wide deps) but I don't know why that's not happening</p>",
        "id": 203561272,
        "sender_full_name": "eddyb",
        "timestamp": 1594417604
    },
    {
        "content": "<p>there's <code>sccache</code> but that feels like a bandaid more than a fix</p>",
        "id": 203561288,
        "sender_full_name": "eddyb",
        "timestamp": 1594417627
    },
    {
        "content": "<p>Yeah, I was going to suggest a shared build cache too, that seems way easier to implement (though not easy)</p>",
        "id": 203561296,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594417638
    },
    {
        "content": "<p>anyway none of this is relevant to compile times IMO</p>",
        "id": 203561304,
        "sender_full_name": "eddyb",
        "timestamp": 1594417649
    },
    {
        "content": "<p>it only affects size on disk</p>",
        "id": 203561311,
        "sender_full_name": "eddyb",
        "timestamp": 1594417655
    },
    {
        "content": "<p>Well it affects the time from-scratch builds take, which are fairly common</p>",
        "id": 203561381,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594417702
    },
    {
        "content": "<p>and while there might be something to discuss, I don't think it's on-topic (but I can't move the topic to a more general stream, a mod would have to do it)</p>",
        "id": 203561385,
        "sender_full_name": "eddyb",
        "timestamp": 1594417706
    },
    {
        "content": "<p>a shared build cache would, but it's not because of the linking model</p>",
        "id": 203561412,
        "sender_full_name": "eddyb",
        "timestamp": 1594417732
    },
    {
        "content": "<p>you can deduplicate build times with static linking, but the static vs dynamic linking difference is mainly in how big the build artifacts are</p>",
        "id": 203561479,
        "sender_full_name": "eddyb",
        "timestamp": 1594417796
    },
    {
        "content": "<p>true</p>",
        "id": 203561548,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594417828
    },
    {
        "content": "<p>the way we put hashes in library names would be perfect for a shared build cache but eh I'm not the one working full-time on Cargo</p>",
        "id": 203561630,
        "sender_full_name": "eddyb",
        "timestamp": 1594417894
    },
    {
        "content": "<p>Is anyone?</p>",
        "id": 203561770,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594417971
    },
    {
        "content": "<p>Should this idea be suggested in a larger forum?  Which one?</p>\n<p>Would it be better to private message some experts first?  If so, which one or ones?</p>",
        "id": 203564943,
        "sender_full_name": "drcarrybit",
        "timestamp": 1594420435
    },
    {
        "content": "<p>I'd suggest starting the discussion as focused on the problem, not a specific solution</p>",
        "id": 203565134,
        "sender_full_name": "eddyb",
        "timestamp": 1594420603
    },
    {
        "content": "<p>otherwise the discussion may hit dead-ends due to overfocusing on that one solution</p>",
        "id": 203565173,
        "sender_full_name": "eddyb",
        "timestamp": 1594420647
    },
    {
        "content": "<p>e.g. \"version number\" doesn't encapsulate anywhere nearly enough information to uniquely identify a possible build artifact for a Cargo package</p>",
        "id": 203565247,
        "sender_full_name": "eddyb",
        "timestamp": 1594420703
    },
    {
        "content": "<p>nor is dynamic linking particularly relevant to build times</p>",
        "id": 203565259,
        "sender_full_name": "eddyb",
        "timestamp": 1594420731
    },
    {
        "content": "<p>so you'll likely get people commenting on those aspects</p>",
        "id": 203565268,
        "sender_full_name": "eddyb",
        "timestamp": 1594420744
    },
    {
        "content": "<p>but anyway, just moving to <a class=\"stream\" data-stream-id=\"122651\" href=\"/#narrow/stream/122651-general\">#general</a> or w/e should be fine</p>",
        "id": 203565276,
        "sender_full_name": "eddyb",
        "timestamp": 1594420754
    },
    {
        "content": "<p>Where can I find out more about the time spent in each of the following main aspects of compiling/linking:</p>\n<div class=\"codehilite\"><pre><span></span><code>Parsing input\n\nName resolution, macro expansion, and configuration\n\nLowering to HIR\n\nType-checking and subsequent analyses\n\nLowering to MIR and post-processing\n\nTranslation to LLVM and LLVM optimizations\n\nLinking\n</code></pre></div>",
        "id": 203565621,
        "sender_full_name": "drcarrybit",
        "timestamp": 1594421060
    },
    {
        "content": "<p>I don't think there is someone working full time on cargo. And the big blocker to moving where target is for some libraries is, that it breaks all kinds of  users that expect the current locations.  Like we have not managed to land <a href=\"https://github.com/rust-lang/cargo/pull/6668\">https://github.com/rust-lang/cargo/pull/6668</a></p>",
        "id": 203646711,
        "sender_full_name": "Eh2406",
        "timestamp": 1594565376
    },
    {
        "content": "<p><em>oof</em></p>",
        "id": 203654377,
        "sender_full_name": "eddyb",
        "timestamp": 1594577517
    }
]