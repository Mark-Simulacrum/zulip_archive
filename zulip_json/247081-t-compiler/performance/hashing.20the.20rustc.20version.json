[
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/89836\">#89836</a> introduced a hash of the rustc version (including the git commit) into the stable crate ID generated by rustc -- this is causing some pain with perf, since there's a natural noise addition due to the added effectively random variable being part of the build. I haven't thoroughly checked but I also suspect that every single symbol now has a different mangled name from rustc binary to the next version, which also seems kinda unfortunate -- makes binary comparisons and such harder.</p>",
        "id": 265678764,
        "sender_full_name": "simulacrum",
        "timestamp": 1640089236
    },
    {
        "content": "<p>I'm increasingly feeling like it should be reverted, since it's rather a pain to work around and the benefits seem quite minor to me</p>",
        "id": 265678816,
        "sender_full_name": "simulacrum",
        "timestamp": 1640089274
    },
    {
        "content": "<p>I filed <a href=\"https://github.com/rust-lang/rustc-perf/issues/1126\">https://github.com/rust-lang/rustc-perf/issues/1126</a> to track this on the perf side</p>",
        "id": 265678845,
        "sender_full_name": "simulacrum",
        "timestamp": 1640089303
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> I think it's your triage day? This is likely to cause a bunch of noise in the results over the last week, just a heads up</p>",
        "id": 265678917,
        "sender_full_name": "simulacrum",
        "timestamp": 1640089327
    },
    {
        "content": "<p><del>Just generated the triage report, and it looks relatively normal in terms of number of PRs with performance changes. I'll let you know if I see anything suspicious when I take a closer look.</del></p>",
        "id": 265680301,
        "sender_full_name": "rylev",
        "timestamp": 1640090295
    },
    {
        "content": "<p>Nevermind, I was looking at the wrong date. There are 23 mixed performance regressions...</p>",
        "id": 265680363,
        "sender_full_name": "rylev",
        "timestamp": 1640090343
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> taking a closer look: 27 out of 38 comparisons show as performance changes. Things definitely look shakier too. The significance factors on changes are very large even on changes we wouldn't expect (e.g., updating clippy)</p>",
        "id": 265680653,
        "sender_full_name": "rylev",
        "timestamp": 1640090525
    },
    {
        "content": "<p>I'm not sure if doing a triage report is really useful given this behavior</p>",
        "id": 265680668,
        "sender_full_name": "rylev",
        "timestamp": 1640090543
    },
    {
        "content": "<p>Yeah, not sure</p>",
        "id": 265680752,
        "sender_full_name": "simulacrum",
        "timestamp": 1640090640
    },
    {
        "content": "<p>Here's the raw report for you to take a look at: <a href=\"https://gist.github.com/rylev/37dec1fa900ccdd212d61ea995bfb931\">https://gist.github.com/rylev/37dec1fa900ccdd212d61ea995bfb931</a></p>",
        "id": 265680818,
        "sender_full_name": "rylev",
        "timestamp": 1640090670
    },
    {
        "content": "<p>I think most of that looks like noise to me</p>",
        "id": 265680908,
        "sender_full_name": "simulacrum",
        "timestamp": 1640090732
    },
    {
        "content": "<p>maybe write up a short summary explaining the problem and just leave all the rest like that?</p>",
        "id": 265680927,
        "sender_full_name": "simulacrum",
        "timestamp": 1640090754
    },
    {
        "content": "<p>(feel free to steal language from the rustc-perf issue or pr)</p>",
        "id": 265680979,
        "sender_full_name": "simulacrum",
        "timestamp": 1640090770
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> how much of this is also related to <a href=\"https://github.com/rust-lang/rustc-perf/pull/1123\">https://github.com/rust-lang/rustc-perf/pull/1123</a>?</p>",
        "id": 265680988,
        "sender_full_name": "rylev",
        "timestamp": 1640090782
    },
    {
        "content": "<p>that should only have reduced noise -- and made a single PR worse</p>",
        "id": 265681009,
        "sender_full_name": "simulacrum",
        "timestamp": 1640090804
    },
    {
        "content": "<p>specifically <a href=\"https://github.com/rust-lang/rust/pull/92036\">https://github.com/rust-lang/rust/pull/92036</a></p>",
        "id": 265681023,
        "sender_full_name": "simulacrum",
        "timestamp": 1640090817
    },
    {
        "content": "<p>Ok and that PR does show up in the regressions. I can make note of that</p>",
        "id": 265681167,
        "sender_full_name": "rylev",
        "timestamp": 1640090912
    },
    {
        "content": "<p>And then I'll make a note in the summary of why things look so bad</p>",
        "id": 265681187,
        "sender_full_name": "rylev",
        "timestamp": 1640090928
    },
    {
        "content": "<p>hm, I think the failure on my PR is actually not caused by it, presumably a recent regression</p>\n<blockquote>\n<p>thread 'rustc' panicked at 'failed to lookup <code>SourceFile</code> in new context', compiler/rustc_query_impl/src/on_disk_cache.rs:500:22</p>\n</blockquote>",
        "id": 265681384,
        "sender_full_name": "simulacrum",
        "timestamp": 1640091087
    },
    {
        "content": "<p>We'll need to go through and comment on all the PRs to make sure the authors know that any performance change might not have anything to do with their PR</p>",
        "id": 265681658,
        "sender_full_name": "rylev",
        "timestamp": 1640091246
    },
    {
        "content": "<p>yeah, that's a good idea</p>",
        "id": 265681683,
        "sender_full_name": "simulacrum",
        "timestamp": 1640091280
    },
    {
        "content": "<p>and probably drop the perf-regression label or add triaged with \"likely noise\"</p>",
        "id": 265681698,
        "sender_full_name": "simulacrum",
        "timestamp": 1640091293
    },
    {
        "content": "<p>I guess we're just going to eat any real performance regressions in this PRs then, right?</p>",
        "id": 265681848,
        "sender_full_name": "rylev",
        "timestamp": 1640091382
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> should we create an issue for this on rust-lang/rust? I this is only being tracking in rust-lang/rustc-perf, but if we want to push for this being reverted we should probably bring attention to it, no?</p>",
        "id": 265682146,
        "sender_full_name": "rylev",
        "timestamp": 1640091589
    },
    {
        "content": "<p>yeah, I'm not yet sure a revert is precisely right</p>",
        "id": 265682233,
        "sender_full_name": "simulacrum",
        "timestamp": 1640091617
    },
    {
        "content": "<p>Is it possible to not use the git hash in the compiler version? I guess this would mean that <a href=\"https://github.com/rust-lang/rust/issues/85142\">the original issue</a> would not be solved for two compiler artifacts built from source but it would still fix it for official compiler artifacts</p>",
        "id": 265682584,
        "sender_full_name": "rylev",
        "timestamp": 1640091862
    },
    {
        "content": "<p>You mean hash just the version (i.e., 1.59.0)?</p>",
        "id": 265682724,
        "sender_full_name": "simulacrum",
        "timestamp": 1640091971
    },
    {
        "content": "<p>in general it's possible but it's not clear to me that there's much advantage</p>",
        "id": 265682747,
        "sender_full_name": "simulacrum",
        "timestamp": 1640091986
    },
    {
        "content": "<p>Yea (and nightly-2021-12-21)</p>",
        "id": 265682756,
        "sender_full_name": "rylev",
        "timestamp": 1640091993
    },
    {
        "content": "<p>well, nightly-2021-22-11 is not known to rustc</p>",
        "id": 265682772,
        "sender_full_name": "simulacrum",
        "timestamp": 1640092005
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>rustc 1.59.0-nightly (928783de6 2021-12-11)\nbinary: rustc\ncommit-hash: 928783de663bd855a96f14b2d38c1061603587c6\ncommit-date: 2021-12-11\nhost: x86_64-unknown-linux-gnu\nrelease: 1.59.0-nightly\nLLVM version: 13.0.0\n</code></pre></div>",
        "id": 265682797,
        "sender_full_name": "simulacrum",
        "timestamp": 1640092020
    },
    {
        "content": "<p>you can draw from that data only</p>",
        "id": 265682813,
        "sender_full_name": "simulacrum",
        "timestamp": 1640092036
    },
    {
        "content": "<p>but in theory it's possible, yes</p>",
        "id": 265682828,
        "sender_full_name": "simulacrum",
        "timestamp": 1640092047
    },
    {
        "content": "<p>I'm not sure it's really <em>better</em></p>",
        "id": 265682833,
        "sender_full_name": "simulacrum",
        "timestamp": 1640092052
    },
    {
        "content": "<p>the only thing adding this hash gets you is hard linker errors if you try to link together different rustc version'd libraries, but that's not really that big a win imo</p>",
        "id": 265682950,
        "sender_full_name": "simulacrum",
        "timestamp": 1640092120
    },
    {
        "content": "<p>and we'd still have a randomized spike/win in perf every cycle, or every day if we include the date</p>",
        "id": 265682974,
        "sender_full_name": "simulacrum",
        "timestamp": 1640092147
    },
    {
        "content": "<p>Perhaps a we need a flag to turn this off? So by default the symbols have embedded version info but not in perf runs?</p>",
        "id": 265682999,
        "sender_full_name": "rylev",
        "timestamp": 1640092173
    },
    {
        "content": "<p>This would make perf testing with official releases not really possible...</p>",
        "id": 265683013,
        "sender_full_name": "rylev",
        "timestamp": 1640092187
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hashing.20the.20rustc.20version/near/265682950\">said</a>:</p>\n<blockquote>\n<p>the only thing adding this hash gets you is hard linker errors if you try to link together different rustc version'd libraries, but that's not really that big a win imo</p>\n</blockquote>\n<p>I guess I don't have an appreciation for how obvious the error is without the linker error. If there's an abi mismatch when does the user first see an error?</p>",
        "id": 265683108,
        "sender_full_name": "rylev",
        "timestamp": 1640092248
    },
    {
        "content": "<p>When running the binary?</p>",
        "id": 265683117,
        "sender_full_name": "rylev",
        "timestamp": 1640092252
    },
    {
        "content": "<p>no, it's just ub</p>",
        "id": 265683142,
        "sender_full_name": "simulacrum",
        "timestamp": 1640092268
    },
    {
        "content": "<p>Yea so while it might not be a super common case, it's not necessarily super easy to catch when it does happen.</p>",
        "id": 265683177,
        "sender_full_name": "rylev",
        "timestamp": 1640092304
    },
    {
        "content": "<p>Especially if the symbol in question isn't used very often</p>",
        "id": 265683196,
        "sender_full_name": "rylev",
        "timestamp": 1640092318
    },
    {
        "content": "<p>sure, yeah</p>",
        "id": 265683248,
        "sender_full_name": "simulacrum",
        "timestamp": 1640092327
    },
    {
        "content": "<p>the PR added the RUSTC_FORCE_INCR_COMP_ARTIFACT_HEADER env variable which I'm working on setting in rustc-perf (going to land that PR shortly)</p>",
        "id": 265683271,
        "sender_full_name": "simulacrum",
        "timestamp": 1640092351
    },
    {
        "content": "<p>which is confusingly referencing incr comp, but really is just for any build.</p>",
        "id": 265683283,
        "sender_full_name": "simulacrum",
        "timestamp": 1640092365
    },
    {
        "content": "<p>Ah. Ok that can help, but it has the same issue as what I pointed out above: you can't really perf test official releases against each other since they will have version info in their symbols.</p>",
        "id": 265683476,
        "sender_full_name": "rylev",
        "timestamp": 1640092510
    },
    {
        "content": "<p>I'm not sure how often people test two adjacent nightly versions, but that becomes harder (impossible?) now</p>",
        "id": 265683490,
        "sender_full_name": "rylev",
        "timestamp": 1640092531
    },
    {
        "content": "<p>well, mangled symbols being different is somewhat ok</p>",
        "id": 265683495,
        "sender_full_name": "simulacrum",
        "timestamp": 1640092536
    },
    {
        "content": "<p>it's not <em>ideal</em> but e.g. valgrind diffs will use demangled symbols for comparison, iirc</p>",
        "id": 265683522,
        "sender_full_name": "simulacrum",
        "timestamp": 1640092558
    },
    {
        "content": "<p>that said, I wouldn't be surprised if it causes noise at the PGO/LLVM level due to hash table ordering and such</p>",
        "id": 265683589,
        "sender_full_name": "simulacrum",
        "timestamp": 1640092579
    },
    {
        "content": "<p>Well I guess I've said my piece, and we shouldn't really be deciding this here. This obviously needs discussion in an issue and/or in <a class=\"stream\" data-stream-id=\"131828\" href=\"/#narrow/stream/131828-t-compiler\">#t-compiler</a> .</p>",
        "id": 265683659,
        "sender_full_name": "rylev",
        "timestamp": 1640092649
    },
    {
        "content": "<p>yeah</p>",
        "id": 265683742,
        "sender_full_name": "simulacrum",
        "timestamp": 1640092689
    },
    {
        "content": "<p>I'll do some more investigation to confirm impact on symbols</p>",
        "id": 265683761,
        "sender_full_name": "simulacrum",
        "timestamp": 1640092712
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hashing.20the.20rustc.20version/near/265683761\">said</a>:</p>\n<blockquote>\n<p>I'll do some more investigation to confirm impact on symbols</p>\n</blockquote>\n<p>Out of curiosity, what do you mean by this?</p>",
        "id": 265683786,
        "sender_full_name": "rylev",
        "timestamp": 1640092740
    },
    {
        "content": "<p>I'm going to try to check some of the noisy results from the triage report locally to see if setting that env variable just when running rustc is enough to eliminate the noise</p>",
        "id": 265683820,
        "sender_full_name": "simulacrum",
        "timestamp": 1640092771
    },
    {
        "content": "<p>(i.e., in cachegrind)</p>",
        "id": 265683829,
        "sender_full_name": "simulacrum",
        "timestamp": 1640092776
    },
    {
        "content": "<p>that'll give a pretty good approximation of whether this is a \"definitely not acceptable for perf work\" or \"not necessarily great, but not a blocker either\"</p>",
        "id": 265683912,
        "sender_full_name": "simulacrum",
        "timestamp": 1640092822
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> <span class=\"user-mention\" data-user-id=\"316352\">@pierwill</span></p>",
        "id": 265695123,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1640099444
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/hashing.20the.20rustc.20version/near/265683283\">said</a>:</p>\n<blockquote>\n<p>which is confusingly referencing incr comp, but really is just for any build.</p>\n</blockquote>\n<p>the env var already existed for the incremental compilation artifact header: <a href=\"https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/compiler/rustc_incremental/src/persist/file_format.rs#L193\">https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/compiler/rustc_incremental/src/persist/file_format.rs#L193</a> It probably makes sense to rename both uses of the env var.</p>",
        "id": 265698110,
        "sender_full_name": "bjorn3",
        "timestamp": 1640100738
    },
    {
        "content": "<p>Using this env var to reduce perf noise makes sense to me.</p>",
        "id": 265698166,
        "sender_full_name": "bjorn3",
        "timestamp": 1640100766
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rustc-perf/pull/1129\">https://github.com/rust-lang/rustc-perf/pull/1129</a></p>",
        "id": 265726988,
        "sender_full_name": "rylev",
        "timestamp": 1640116076
    },
    {
        "content": "<p>The change also adds an 8% overhead to the UI testsuite because it compiles a dozen regular expressions for each test which adds up to ~160000 regexps being compiled.<br>\nCould <code>RUSTC_FORCE_INCR_COMP_ARTIFACT_HEADER</code> help here too?</p>",
        "id": 266276134,
        "sender_full_name": "The 8472",
        "timestamp": 1640712040
    },
    {
        "content": "<p>It does.</p>",
        "id": 266277935,
        "sender_full_name": "The 8472",
        "timestamp": 1640713726
    },
    {
        "content": "<p>Shall we rename <code>RUSTC_FORCE_INCR_COMP_ARTIFACT_HEADER</code> -&gt; <code>RUSTC_FORCE_RUSTC_VERSION</code>?</p>",
        "id": 267787963,
        "sender_full_name": "pierwill",
        "timestamp": 1642022521
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/92825\">https://github.com/rust-lang/rust/pull/92825</a></p>",
        "id": 267789270,
        "sender_full_name": "pierwill",
        "timestamp": 1642023241
    }
]