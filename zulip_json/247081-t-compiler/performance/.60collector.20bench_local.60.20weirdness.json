[
    {
        "content": "<p>I'm following the benchmarking instructions at <a href=\"https://github.com/rust-lang/rustc-perf/tree/master/collector\">https://github.com/rust-lang/rustc-perf/tree/master/collector</a>. It mostly works fine, but something strange happens in the middle. Just before the strangeness is this output:</p>\n<div class=\"codehilite\"><pre><span></span><code>18 benchmarks remaining\nPreparing regression-31157\nRunning regression-31157: Check + [Full, IncrFull, IncrUnchanged, IncrPatched]\nRunning regression-31157: Debug + [Full, IncrFull, IncrUnchanged, IncrPatched]\nRunning regression-31157: Opt + [Full, IncrFull, IncrUnchanged, IncrPatched]\n17 benchmarks remaining\nPreparing ripgrep\nRunning ripgrep: Check + [Full, IncrFull, IncrUnchanged, IncrPatched]\nRunning ripgrep: Debug + [Full, IncrFull, IncrUnchanged, IncrPatched]\nRunning ripgrep: Opt + [Full, IncrFull, IncrUnchanged, IncrPatched]\n</code></pre></div>\n<p>Then things get weird:</p>\n<div class=\"codehilite\" data-code-language=\"16\"><pre><span></span><code>Cloning into 'rust'...\nremote: Enumerating objects: 1597398, done.\nremote: Counting objects: 100% (21/21), done.\nremote: Compressing objects: 100% (19/19), done.\nremote: Total 1597398 (delta 2), reused 10 (delta 2), pack-reused 1597377\nReceiving objects: 100% (1597398/1597398), 696.23 MiB | 9.04 MiB/s, done.\nResolving deltas: 100% (1278107/1278107), done.\nfatal: ambiguous argument 'MyId': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git &lt;command&gt; [&lt;revision&gt;...] -- [&lt;file&gt;...]'\nHEAD is now at 3d29b680774 Auto merge of #90648 - matthewjasper:assoc-item-cleanup, r=cjgillot\nconfigure: processing command line\nconfigure:\nconfigure: llvm.download-ci-llvm := True\nconfigure: build.print-step-timings := True\nconfigure: rust.deny-warnings   := False\nconfigure: build.rustc          := /home/njn/dev/rustc-perf-tmp/target/release/bo ...\nconfigure: build.cargo          := /home/njn/.rustup/toolchains/nightly-x86_64-un ...\nconfigure: build.configure-args := ['--set', 'llvm.download-ci-llvm=true', '--set ...\nconfigure:\nconfigure: writing `config.toml` in current directory\nconfigure:\nconfigure: run `python /home/njn/dev/rustc-perf-tmp/rust/x.py --help`\nconfigure:\ncollector error: Failed to benchmark 'rustc', recorded: measure rustc: building rustc: expected success, got exit status: 1\n</code></pre></div>\n<p>It has cloned <code>rust</code>? It then tries to build it, but gets lots of errors, here's the first one:</p>\n<div class=\"codehilite\"><pre><span></span><code>[RUSTC-TIMING] build_script_build test:false 0.507\n   Compiling core v0.0.0 (/home/njn/dev/rustc-perf-tmp/rust/library/core)\nerror: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n    --&gt; library/core/src/intrinsics.rs:2262:3\n     |\n2262 | #[rustc_do_not_const_check]\n     |   ^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre></div>",
        "id": 261185674,
        "sender_full_name": "nnethercote",
        "timestamp": 1636665601
    },
    {
        "content": "<p>Then more weirdness, before going back to normal benchmarking:</p>\n<div class=\"codehilite\"><pre><span></span><code>downloading https://static.rust-lang.org/dist/2021-10-23/rustfmt-nightly-x86_64-unknown-linux-gnu.tar.xz\nextracting /home/njn/dev/rustc-perf-tmp/rust/build/cache/2021-10-23/rustfmt-nightly-x86_64-unknown-linux-gnu.tar.xz\ndownloading https://ci-artifacts.rust-lang.org/rustc-builds/68ca579406f2fa9ec62710e4a4d5d3e07a168d3c/rust-dev-nightly-x86_64-unknown-linux-gnu.tar.xz\nextracting /home/njn/dev/rustc-perf-tmp/rust/build/cache/llvm-68ca579406f2fa9ec62710e4a4d5d3e07a168d3c-False/rust-dev-nightly-x86_64-unknown-linux-gnu.tar.xz\n[TIMING] Assemble { target_compiler: Compiler { stage: 0, host: TargetSelection { triple: &quot;x86_64-unknown-linux-gnu&quot;, file: None } } } -- 0.000\n[TIMING] StartupObjects { compiler: Compiler { stage: 0, host: TargetSelection { triple: &quot;x86_64-unknown-linux-gnu&quot;, file: None } }, target: TargetSelection { triple: &quot;x86_64-unknown-linux-gnu&quot;, file: None } } -- 0.000\n[TIMING] Sysroot { compiler: Compiler { stage: 0, host: TargetSelection { triple: &quot;x86_64-unknown-linux-gnu&quot;, file: None } } } -- 0.000\n[TIMING] Libdir { compiler: Compiler { stage: 0, host: TargetSelection { triple: &quot;x86_64-unknown-linux-gnu&quot;, file: None } }, target: TargetSelection { triple: &quot;x86_64-unknown-linux-gnu&quot;, file: None } } -- 0.000\nBuilding stage0 std artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu)\nBuild completed unsuccessfully in 0:01:05\n\n\n15 benchmarks remaining\nPreparing serde\nRunning serde: Check + [Full, IncrFull, IncrUnchanged, IncrPatched]\nRunning serde: Debug + [Full, IncrFull, IncrUnchanged, IncrPatched]\nRunning serde: Opt + [Full, IncrFull, IncrUnchanged, IncrPatched]\n</code></pre></div>",
        "id": 261185814,
        "sender_full_name": "nnethercote",
        "timestamp": 1636665668
    },
    {
        "content": "<p>I end up with a <code>rust</code> dir within <code>rustc-perf</code>.</p>",
        "id": 261185834,
        "sender_full_name": "nnethercote",
        "timestamp": 1636665688
    },
    {
        "content": "<p>I don't know what's going on. The weirdness occurs between <code>ripgrep</code> and <code>serde</code>, which makes me wonder if it's somehow related to <code>rust-mozjs</code>'s presence.</p>",
        "id": 261185952,
        "sender_full_name": "nnethercote",
        "timestamp": 1636665764
    },
    {
        "content": "<p>I think that's the step where it tries to get timing information for rustc bootstrap.</p>",
        "id": 261186080,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1636665854
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rustc-perf/blob/master/collector/src/execute/rustc.rs#L25\">https://github.com/rust-lang/rustc-perf/blob/master/collector/src/execute/rustc.rs#L25</a></p>",
        "id": 261186081,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1636665855
    },
    {
        "content": "<p>Yeah, looks like we have a \"rustc\" benchmark that calls that code. <a href=\"https://github.com/rust-lang/rustc-perf/blob/de39bd2e01e95897e3e314de1ee10e6f0aa9019e/collector/src/execute.rs#L1349\">https://github.com/rust-lang/rustc-perf/blob/de39bd2e01e95897e3e314de1ee10e6f0aa9019e/collector/src/execute.rs#L1349</a></p>",
        "id": 261186365,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1636666040
    },
    {
        "content": "<p>Aha, so I can use <code>--exclude rustc</code> locally</p>",
        "id": 261186394,
        "sender_full_name": "nnethercote",
        "timestamp": 1636666065
    },
    {
        "content": "<p>Perhaps this should be cleaned up, but thanks for the pointer!</p>",
        "id": 261186422,
        "sender_full_name": "nnethercote",
        "timestamp": 1636666083
    },
    {
        "content": "<p>So I'm guessing this is somehow a special benchmark that's different to the others. I'll take a look, try to work out the mechanism</p>",
        "id": 261186517,
        "sender_full_name": "nnethercote",
        "timestamp": 1636666157
    },
    {
        "content": "<p>Right, so the second link from <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> is where it's run, and here is where it gets added to the list of benchmarks: <a href=\"https://github.com/rust-lang/rustc-perf/blob/de39bd2e01e95897e3e314de1ee10e6f0aa9019e/collector/src/main.rs#L369\">https://github.com/rust-lang/rustc-perf/blob/de39bd2e01e95897e3e314de1ee10e6f0aa9019e/collector/src/main.rs#L369</a></p>",
        "id": 261186711,
        "sender_full_name": "nnethercote",
        "timestamp": 1636666319
    },
    {
        "content": "<p>Back on this topic: am I right to think that <code>bench_next</code> is the only subcommand where we actually want to run the \"rustc\" benchmark? <code>bench_local</code> is for local benchmarking and I don't think \"rustc\" should run there. <code>bench_published</code> is for <a href=\"https://perf.rust-lang.org/dashboard.html\">https://perf.rust-lang.org/dashboard.html</a> and \"rustc\" also isn't relevant there.</p>",
        "id": 261744558,
        "sender_full_name": "nnethercote",
        "timestamp": 1637125826
    },
    {
        "content": "<p>bumping up <code>RUST_LOG</code> makes the execution of collector a lot more understandable. I did make some changes there a while back that should stop this <code>ID</code> issue from failing the whole collector run (it should default to <code>origin/HEAD</code> now)</p>",
        "id": 261767256,
        "sender_full_name": "Adam Gemmell",
        "timestamp": 1637145527
    },
    {
        "content": "<p><a href=\"https://perf.rust-lang.org/bootstrap.html\">https://perf.rust-lang.org/bootstrap.html</a> is where the bootstrap timings go - they're definitely published</p>",
        "id": 261767281,
        "sender_full_name": "Adam Gemmell",
        "timestamp": 1637145553
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120989\">nnethercote</span> <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/.60collector.20bench_local.60.20weirdness/near/261744558\">said</a>:</p>\n<blockquote>\n<p><code>bench_local</code> is for local benchmarking and I don't think \"rustc\" should run there.</p>\n</blockquote>\n<p>why? It's still a valid data point. perhaps the README should be updated to explain this benchmark and explain how it can be skipped for quicker local runs</p>",
        "id": 261767942,
        "sender_full_name": "Adam Gemmell",
        "timestamp": 1637145995
    },
    {
        "content": "<p>The rustc benchmark was broken with <code>bench_local</code> when I last tried it a few days ago. And it confused the heck out of me, because I had no idea that this benchmark had been added, and it's kind of magical. If it's not broken now that's an improvement. But I still think for local profiling it's probably something that should be opted into.</p>",
        "id": 261991800,
        "sender_full_name": "nnethercote",
        "timestamp": 1637270128
    },
    {
        "content": "<p>It would be great if it were less special in general. It only reports wall-times on perf.rlo instead of the different perf-stat results for example.</p>",
        "id": 261992159,
        "sender_full_name": "The 8472",
        "timestamp": 1637270292
    },
    {
        "content": "<p>I’m glad I’m not the only one who finds that benchmark hard to work with. I spent some idle time over some number of weeks (months?) trying to figure out how to generalize the rustc benchmark to also cover incremental bootstrapping time (e.g. how much does editing a comment in rustc_xxx cost? How much does adding a <code>debug!</code> statement cost?). I eventually gave up. I probably should have been asking questions in here along the way.</p>",
        "id": 261992973,
        "sender_full_name": "pnkfelix",
        "timestamp": 1637270655
    },
    {
        "content": "<p>It's a unique benchmark kind in the sense that it collects for a bunch of different crates in one go, but yeah, it probably makes sense to invest in fine-tuning the collection to include other stats and such. It's mostly not done because of the rustc wrapper bootstrap requires (and since perf.rlo has its own, you can't as easily stack those).</p>",
        "id": 261997975,
        "sender_full_name": "simulacrum",
        "timestamp": 1637273055
    },
    {
        "content": "<p>I just tried bench_local again, the <code>rustc</code> benchmark is still busted.</p>",
        "id": 267151357,
        "sender_full_name": "nnethercote",
        "timestamp": 1641531294
    },
    {
        "content": "<p>Compile errors:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0557]: feature has been removed\n   --&gt; library/core/src/lib.rs:164:12\n    |\n164 | #![feature(doc_primitive)]\n    |            ^^^^^^^^^^^^^ feature has been removed\n    |\n    = note: merged into `#![feature(rustdoc_internals)]`\n\nerror[E0277]: the trait bound `[u8; 768]: Clone` is not satisfied\n   --&gt; library/core/src/num/dec2flt/decimal.rs:23:5\n    |\n14  |   #[derive(Clone)]\n    |            ----- in this derive macro expansion\n...\n23  |       pub digits: [u8; Self::MAX_DIGITS],\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `[u8; 768]`\n    |\n   ::: library/core/src/clone.rs:139:1\n    |\n139 | / pub macro Clone($item:item) {\n140 | |     /* compiler built-in */\n141 | | }\n    | |_- in this expansion of `#[derive(Clone)]`\n</code></pre></div>\n<p>plus a few more like that second <code>Clone</code> one</p>",
        "id": 267151463,
        "sender_full_name": "nnethercote",
        "timestamp": 1641531443
    },
    {
        "content": "<p>I created a PR to restrict the <code>rustc</code> benchmark to the <code>bench_next</code> subcommand: <a href=\"https://github.com/rust-lang/rustc-perf/pull/1139\">https://github.com/rust-lang/rustc-perf/pull/1139</a></p>",
        "id": 267153467,
        "sender_full_name": "nnethercote",
        "timestamp": 1641533788
    },
    {
        "content": "<p>fwiw, I've been running bootstrap performances on every nightly via <code>bench_local</code> and haven't seen this issue, so it doesn't seem to be fundamentally broken.</p>\n<p>couple potential ideas:</p>\n<ul>\n<li>Delete the <code>rust/</code> checkout the collector makes. Maybe it's stale and not being updated correctly.</li>\n<li>Maybe the rustc under test can't compile the <code>rust-lang/rust</code> ref given as the run ID. You could rebase your branch or provide a ref close to the base of your branch</li>\n</ul>",
        "id": 267194581,
        "sender_full_name": "Adam Gemmell",
        "timestamp": 1641565572
    },
    {
        "content": "<p>Deleting the <code>rust</code> directory fixed it, thanks!</p>",
        "id": 267374277,
        "sender_full_name": "nnethercote",
        "timestamp": 1641757909
    },
    {
        "content": "<p>Good to know you run this often. I have what I think is a better idea: to exclude <code>rustc</code> from the normal list of benchmarks, but add a <code>--bench-rustc</code> option to <code>bench_local</code> and <code>bench_next</code> that opts into it.</p>",
        "id": 267374328,
        "sender_full_name": "nnethercote",
        "timestamp": 1641757962
    },
    {
        "content": "<p>I like this because the rustc benchmark is very different from the others, so it's good to treat it differently. E.g. it would be excluded from <code>--include</code>/<code>--exclude</code> handling</p>",
        "id": 267374353,
        "sender_full_name": "nnethercote",
        "timestamp": 1641758000
    },
    {
        "content": "<p>I've done this in <a href=\"https://github.com/rust-lang/rustc-perf/pull/1140\">https://github.com/rust-lang/rustc-perf/pull/1140</a></p>",
        "id": 267385685,
        "sender_full_name": "nnethercote",
        "timestamp": 1641774277
    }
]