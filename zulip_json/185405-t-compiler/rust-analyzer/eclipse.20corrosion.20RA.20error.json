[
    {
        "content": "<p>Hi, I'm trying to use rust-analyzer with eclipse corrosion and I'm getting a panic in rust-analyzer after typing a few characters. I was able to activate logging within rust-analyzer (using <code>RA_LOG_FILE=/tmp/ra_log.log RA_LOG=lsp_server=debug</code>), but the message isn't really helpful:<br>\n<code>[DEBUG lsp_server::msg] &gt; {\"jsonrpc\":\"2.0\",\"id\":\"21\",\"error\":{\"code\":-32603,\"message\":\"server panicked: called 'Option::unwrap()' on a 'None' value\"}}</code><br>\nHow can I get more info on where the panic is happening? I don't know whether I can access stdout/stderr somehow as rust-analyzer is handled by the eclipse plugin. Can I get more logging somehow or should I try to debugging? What's the recommended approach to work on an issue like this?<br>\nThanks in advance!</p>",
        "id": 251867327,
        "sender_full_name": "Felix Kohlgrüber",
        "timestamp": 1630669702
    },
    {
        "content": "<p>Oh wow, that's seems bad. Yeah, getting <code>stderr</code> would help a lot here</p>",
        "id": 251867429,
        "sender_full_name": "matklad",
        "timestamp": 1630669768
    },
    {
        "content": "<p>if you have <code>RA_LOG_FILE</code>, shouldn't all the relevant logs be in that file?</p>",
        "id": 251867643,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1630669860
    },
    {
        "content": "<p>I think our panic handler prints to stderr. We probably should override it to tee to the log file as well</p>",
        "id": 251867906,
        "sender_full_name": "matklad",
        "timestamp": 1630670005
    },
    {
        "content": "<p>I was able to get the stderr of RA, see here: <a href=\"https://gist.github.com/fkohlgrueber/9eed1568d0ae01cfff8d9a1993886fba\">https://gist.github.com/fkohlgrueber/9eed1568d0ae01cfff8d9a1993886fba</a><br>\nCrash happens here: <code>crates/rust-analyzer/src/from_proto.rs:88</code><br>\nIs that a RA bug or a \"user error\" that needs to be handled by the corrosion plugin?</p>",
        "id": 251878462,
        "sender_full_name": "Felix Kohlgrüber",
        "timestamp": 1630675196
    },
    {
        "content": "<p>So the <code>CodeLensResolveData</code> is missing and we crash on that. I think that's a value that the LSP client needs to pass back to the server?</p>",
        "id": 251879054,
        "sender_full_name": "Laurențiu",
        "timestamp": 1630675457
    },
    {
        "content": "<p>I think it's a bug in Corrosion that it's calling codelens/resolve for that codelens</p>",
        "id": 251879362,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1630675579
    },
    {
        "content": "<p>the \"Run\" code lens has a command, so it's already resolved, so codelens/resolve shouldn't be called for it</p>",
        "id": 251879428,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1630675614
    },
    {
        "content": "<p>Yeah</p>",
        "id": 251879543,
        "sender_full_name": "Laurențiu",
        "timestamp": 1630675661
    },
    {
        "content": "<p>We probably still shouldn't panic on protocol violation (we used to do that, but changed that approach). </p>\n<p>It's an interesting question of what should we do if the client is buggy.  If we just return an <code>Error</code>, then the end user will be bother with an error dialog. So we should swallow the errors, but then client developers won't know that their client is buggy (and <strong>we</strong> won't know when the client is actually correct and it's the server that's buggy)</p>",
        "id": 251880206,
        "sender_full_name": "matklad",
        "timestamp": 1630675924
    },
    {
        "content": "<p>I think it's fine to return an error.</p>",
        "id": 251980135,
        "sender_full_name": "Laurențiu",
        "timestamp": 1630739686
    },
    {
        "content": "<blockquote>\n<p>it's fine to return an error.</p>\n</blockquote>\n<p>I hate programming -- wanted to quickly do this while catching up on salsa, and now I am rewriting my Julia scripts to Rust</p>",
        "id": 251989412,
        "sender_full_name": "matklad",
        "timestamp": 1630750137
    },
    {
        "content": "<p>current depth of the rabbit hole: <a href=\"https://github.com/rust-lang/rust/commit/3cc84efcdd5727c0749d766d8abd79d8077f9cec\">https://github.com/rust-lang/rust/commit/3cc84efcdd5727c0749d766d8abd79d8077f9cec</a></p>",
        "id": 251995203,
        "sender_full_name": "matklad",
        "timestamp": 1630756525
    }
]