[
    {
        "content": "<p>Continued from <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Steering.20meeting/near/255069770\">https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Steering.20meeting/near/255069770</a></p>",
        "id": 255087355,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632763835
    },
    {
        "content": "<p>I started another topic for this</p>",
        "id": 255087421,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632763869
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Steering.20meeting/near/255073418\">said</a>:</p>\n<blockquote>\n<p>curions!</p>\n<p>here's what I see</p>\n<p><div class=\"codehilite\"><pre><span></span><code>   77ms - handle_inlay_hints\n       77ms - inlay_hints\n           56ms - descend_into_macros\n               56ms - Semantics::analyze_impl\n                   21ms - SourceBinder::to_module_def\n                       21ms - crate_def_map:wait\n                        0   - crate_def_map:wait (1 calls)\n                        0   - relevant_crates (1 calls)\n                   34ms - infer:wait @ ALL_COSTS\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Heh I just realized this one was for inlay hints, not syntax highlighting</p>",
        "id": 255219601,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632837145
    },
    {
        "content": "<p>Interestingly enough for me the profiling times for highlighting of vary a lot, every few of them I get around 400-500ms but a lot of them are just 40-100ms</p>",
        "id": 255219710,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632837190
    },
    {
        "content": "<p><code>highlight</code> stayed pretty consistently around 400 ms in my tests</p>",
        "id": 255219936,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632837259
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 255220006,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632837288
    },
    {
        "content": "<p>Are you testing on RA? It's faster (unsurprisingly?) on an empty project</p>",
        "id": 255220073,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632837316
    },
    {
        "content": "<p>I am testing in the config file after the macro invocation as you did</p>",
        "id": 255220116,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632837333
    },
    {
        "content": "<p>Hmm, there's a macro invocation there?</p>",
        "id": 255220152,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632837349
    },
    {
        "content": "<p>Oh didn;t you mean after the <code>config_data!</code> invocation?</p>",
        "id": 255220230,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632837364
    },
    {
        "content": "<p>Am I testing in the wrong file? <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 255220258,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632837373
    },
    {
        "content": "<p>oh right i misremembered I guess</p>",
        "id": 255220309,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632837396
    },
    {
        "content": "<p>Oh, there's indeed a couple of them</p>",
        "id": 255220316,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632837399
    },
    {
        "content": "<p>ye just reread the issue</p>",
        "id": 255220332,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632837405
    },
    {
        "content": "<p>will try at the same spot this time</p>",
        "id": 255220345,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632837409
    },
    {
        "content": "<p>I was typing in <code>Config::update</code> and <code>Config::json_schema</code></p>",
        "id": 255220409,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632837436
    },
    {
        "content": "<p>typing <code>Config::json_schema</code> is very fast for me a lot of times</p>",
        "id": 255220594,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632837503
    },
    {
        "content": "<p><a href=\"https://gist.github.com/Veykril/d368039e9b1b4226f33bf0ef8a418400\">https://gist.github.com/Veykril/d368039e9b1b4226f33bf0ef8a418400</a></p>",
        "id": 255220595,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632837503
    },
    {
        "content": "<p>but i do get 500ms occasionally</p>",
        "id": 255220609,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632837509
    },
    {
        "content": "<p>Oh those might be cancelled requests?</p>",
        "id": 255220699,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632837544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span> try forming the thread pool to use 1 thread, it should make the output esier to undrestand</p>",
        "id": 255220730,
        "sender_full_name": "matklad",
        "timestamp": 1632837554
    },
    {
        "content": "<p>typing a single char send like 5 calls</p>",
        "id": 255220735,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632837556
    },
    {
        "content": "<p>will do</p>",
        "id": 255220754,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632837565
    },
    {
        "content": "<p>(force -- submit a PR to add a config value for this :) )</p>",
        "id": 255220764,
        "sender_full_name": "matklad",
        "timestamp": 1632837568
    },
    {
        "content": "<p>Change <code>ConfigData::json_schema()</code> to <code>ConfigData::json_schema2()</code> in <code>json_schema</code> and see how long it takes for it to be colored as <code>unresolved</code></p>",
        "id": 255221077,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632837671
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>   52ms - handle_semantic_tokens_full_delta\n       51ms - highlight\n           10ms - parse_query @ FileId(176)\n            1ms - Semantics::analyze_impl (879 calls)\n            0   - SourceBinder::to_module_def (293 calls)\n            0   - classify_lifetime (34 calls)\n            0   - classify_lifetime_ref (27 calls)\n            1ms - classify_name (619 calls)\n           12ms - classify_name_ref (1796 calls)\n            0   - crate_def_map:wait (3186 calls)\n           10ms - descend_into_macros_impl (588 calls)\n            0   - infer:wait (1254 calls)\n            0   - module_to_def (1 calls)\n            0   - source_file_to_def (1 calls)\n            1ms - trait_solve::wait (1364 calls)\n           11ms - ???\n        1ms - ???\n  268ms - handle_semantic_tokens_full_delta\n      267ms - highlight\n            1ms - descend_into_macros_impl\n                0   - Semantics::analyze_impl (1 calls)\n                0   - SourceBinder::to_module_def (13 calls)\n                0   - crate_def_map:wait (4 calls)\n                0   - parse_macro_expansion (3 calls)\n                1ms - ???\n            1ms - descend_into_macros_impl\n                0   - Semantics::analyze_impl (1 calls)\n                0   - SourceBinder::to_module_def (13 calls)\n                0   - crate_def_map:wait (4 calls)\n                0   - parse_macro_expansion (3 calls)\n                0   - ???\n            1ms - descend_into_macros_impl\n                0   - Semantics::analyze_impl (1 calls)\n                0   - SourceBinder::to_module_def (13 calls)\n                0   - crate_def_map:wait (4 calls)\n                0   - parse_macro_expansion (3 calls)\n                1ms - ???\n            1ms - descend_into_macros_impl\n                0   - Semantics::analyze_impl (1 calls)\n                0   - SourceBinder::to_module_def (13 calls)\n                0   - crate_def_map:wait (4 calls)\n                0   - parse_macro_expansion (3 calls)\n                0   - ???\n            1ms - descend_into_macros_impl\n                0   - Semantics::analyze_impl (1 calls)\n                0   - SourceBinder::to_module_def (19 calls)\n                0   - crate_def_map:wait (55 calls)\n                0   - parse_macro_expansion (12 calls)\n                0   - ???\n            1ms - descend_into_macros_impl\n                0   - Semantics::analyze_impl (1 calls)\n                0   - SourceBinder::to_module_def (19 calls)\n                0   - crate_def_map:wait (55 calls)\n                0   - parse_macro_expansion (12 calls)\n                0   - ???\n            1ms - Semantics::analyze_impl (463 calls)\n            0   - SourceBinder::to_module_def (250 calls)\n            0   - classify_lifetime (7 calls)\n            0   - classify_lifetime_ref (7 calls)\n            1ms - classify_name (370 calls)\n           35ms - classify_name_ref (1157 calls)\n            0   - crate_def_map:wait (1725 calls)\n          211ms - descend_into_macros_impl (2132 calls)\n            0   - infer:wait (410 calls)\n            0   - module_to_def (10 calls)\n            0   - parse_macro_expansion (1 calls)\n            0   - source_file_to_def (1 calls)\n            0   - trait_solve::wait (454 calls)\n            9ms - ???\n        0   - ???\n</code></pre></div>",
        "id": 255221269,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632837740
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/0B1uBbjakMrMXiv73Z9KGeLp/slow.mp4\">slow.mp4</a></p>",
        "id": 255221407,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632837804
    },
    {
        "content": "<p>Oh, that came up awful</p>",
        "id": 255221593,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632837866
    },
    {
        "content": "<p>Seems to consistently take ~250ms for me</p>",
        "id": 255221797,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632837942
    },
    {
        "content": "<p>And judging from the hprof output it looks like thats due to the sheer amount of calls to <code>descend_into_macros</code></p>",
        "id": 255222054,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632838021
    },
    {
        "content": "<p>Okay something seems odd though, I am getting around 2130 calls to that function in most files which doesnt really make sense since source files usually differ right? <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 255222317,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632838108
    },
    {
        "content": "<p>Then again <code>handle_semantic_tokens_full_delta</code> is getting triggered around 5 times for a single char change which I don't quite understand why that's the case</p>",
        "id": 255222673,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632838230
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300586\">Lukas Wirth</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/.60descend_into_macros.60.20seems.20slow/near/255222317\">said</a>:</p>\n<blockquote>\n<p>Okay something seems odd though, I am getting around 2130 calls to that function in most files which doesnt really make sense since source files usually differ right? <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>\n</blockquote>\n<p>okay that seems to be a client bug, when typing in <a href=\"http://config.rs\">config.rs</a> once, then typing in another filer it resends a highlight request for <a href=\"http://config.rs\">config.rs</a> ...</p>",
        "id": 255224350,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632838824
    },
    {
        "content": "<p>Actually, its probably not a bug, its just doing this for all files that it already has highlighting for so it updates the highlighting of all files(up to some maximum number probably) on each keystroke</p>",
        "id": 255224531,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632838893
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/GM6V7xYDeNlEyByib2wn1Ynk/slow2.mp4\">slow2.mp4</a></p>",
        "id": 255224594,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632838915
    },
    {
        "content": "<p><code>body_with_source_map_query</code> also seems to take a lot of time</p>",
        "id": 255224688,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632838938
    },
    {
        "content": "<p>Funnily enough my highlighting feels slower than yours even though it only takes 270ms for me apparently</p>",
        "id": 255225158,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632839091
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  280ms - handle_semantic_tokens_full_delta @ TextDocumentIdentifier { uri: Url { scheme: &quot;file&quot;, cannot_be_a_base: false, username: &quot;&quot;, password: None, host: None, port: None, path: &quot;/c%3A/Workspace/Rust/rust-analyzer/crates/rust-analyzer/src/config.rs&quot;, query: None, fragment: None } } &quot;37&quot;\n      279ms - highlight\n            1ms - descend_into_macros_impl\n                0   - Semantics::analyze_impl (1 calls)\n                0   - SourceBinder::to_module_def (13 calls)\n                0   - crate_def_map:wait (4 calls)\n                0   - parse_macro_expansion (3 calls)\n                1ms - ???\n            1ms - descend_into_macros_impl\n                0   - Semantics::analyze_impl (1 calls)\n                0   - SourceBinder::to_module_def (13 calls)\n                0   - crate_def_map:wait (4 calls)\n                0   - parse_macro_expansion (3 calls)\n                1ms - ???\n            1ms - descend_into_macros_impl\n                0   - Semantics::analyze_impl (1 calls)\n                0   - SourceBinder::to_module_def (8 calls)\n                0   - crate_def_map:wait (3 calls)\n                0   - parse_macro_expansion (2 calls)\n                1ms - ???\n            1ms - descend_into_macros_impl\n                0   - Semantics::analyze_impl (1 calls)\n                0   - SourceBinder::to_module_def (8 calls)\n                0   - crate_def_map:wait (3 calls)\n                1ms - ???\n            1ms - descend_into_macros_impl\n                0   - Semantics::analyze_impl (1 calls)\n                0   - SourceBinder::to_module_def (19 calls)\n                0   - crate_def_map:wait (55 calls)\n                0   - parse_macro_expansion (12 calls)\n                0   - ???\n            1ms - descend_into_macros_impl\n                0   - Semantics::analyze_impl (1 calls)\n                0   - SourceBinder::to_module_def (19 calls)\n                0   - crate_def_map:wait (55 calls)\n                0   - parse_macro_expansion (12 calls)\n                0   - ???\n            2ms - trait_solve::wait\n            1ms - Semantics::analyze_impl (463 calls)\n            0   - SourceBinder::to_module_def (250 calls)\n            0   - classify_lifetime (7 calls)\n            0   - classify_lifetime_ref (7 calls)\n            1ms - classify_name (370 calls)\n           36ms - classify_name_ref (1157 calls)\n            0   - crate_def_map:wait (1726 calls)\n          220ms - descend_into_macros_impl (2132 calls)\n            0   - infer:wait (410 calls)\n            0   - module_to_def (10 calls)\n            0   - source_file_to_def (1 calls)\n            0   - trait_solve::wait (453 calls)\n            8ms - ???\n        0   - ???\n</code></pre></div>\n<p>This is all I see now though, no <code>body_with_source_map_query</code> anymore</p>",
        "id": 255225272,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632839131
    },
    {
        "content": "<p>i cant get it above 300ms either anymore</p>",
        "id": 255225300,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632839139
    },
    {
        "content": "<p>Maybe it's highlighting more on my tall screen :D</p>",
        "id": 255225451,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632839193
    },
    {
        "content": "<p>We generate the entire files highlighting every time since this is a full request</p>",
        "id": 255225572,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632839240
    },
    {
        "content": "<p>so i dont think that matters <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 255225593,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632839248
    },
    {
        "content": "<p>So I guess we need to come up with some way to reduce the number of calls to <code>descend_into_macros_impl</code> as that function has a lot of overhead for calling from what I can tell here</p>",
        "id": 255226532,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632839566
    },
    {
        "content": "<p>Could it also be the <code>SourceAnalyzer</code> we're making on every call?</p>",
        "id": 255226811,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632839664
    },
    {
        "content": "<p>Doesn't seem so</p>",
        "id": 255228893,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632840451
    },
    {
        "content": "<p>made a very simple cache for those calls and that shaved of ~10ms</p>",
        "id": 255228947,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632840475
    },
    {
        "content": "<p>Actually I just realized by when looking up the range of a token_id in the expansion map we just linearly filter through all the tokens in the expansion</p>",
        "id": 255232392,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632841651
    },
    {
        "content": "<p>Got a feeling that might be the problem here?</p>",
        "id": 255232416,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632841659
    },
    {
        "content": "<p>yep</p>",
        "id": 255232761,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632841763
    },
    {
        "content": "<p>that is the problem it seems</p>",
        "id": 255232768,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632841766
    },
    {
        "content": "<p>Uh, can we avoid that?</p>",
        "id": 255232913,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632841813
    },
    {
        "content": "<p>we would have to change how we store the token mapping</p>",
        "id": 255232951,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632841824
    },
    {
        "content": "<p>currently we store TokenId TextRange pairs in a vec</p>",
        "id": 255233000,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632841845
    },
    {
        "content": "<p>huh, are there large macro invocations in the test file?</p>",
        "id": 255233010,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1632841848
    },
    {
        "content": "<p>yes</p>",
        "id": 255233037,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632841858
    },
    {
        "content": "<p>I didn't expect that particular O(n²) to become a practical issue so quickly</p>",
        "id": 255233052,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1632841862
    },
    {
        "content": "<p>well it becomes one now</p>",
        "id": 255233064,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632841869
    },
    {
        "content": "<p>due to my changes</p>",
        "id": 255233069,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632841870
    },
    {
        "content": "<p>because now we map a token down to all its expansions</p>",
        "id": 255233090,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632841878
    },
    {
        "content": "<p>which means we <strong><em>always</em></strong> go through the entire vec</p>",
        "id": 255233111,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632841885
    },
    {
        "content": "<p>There's <code>config_data!</code> at some 200 LOC</p>",
        "id": 255233112,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632841885
    },
    {
        "content": "<p>instead of stopping at the first found mapping</p>",
        "id": 255233155,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632841901
    },
    {
        "content": "<p>ah, yeah that'll do it</p>",
        "id": 255233195,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1632841915
    },
    {
        "content": "<p>Not that it's faster above it, but..</p>",
        "id": 255233286,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632841935
    },
    {
        "content": "<p>And are we really supposed to spend so much time in <code>body_with_source_map_query</code>?</p>",
        "id": 255233343,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632841958
    },
    {
        "content": "<p>unfortunately <code>TokenMap</code> is pretty space-sensitive, so just making it a bidirectional <code>HashMap</code> or something like that might use a lot more memory</p>",
        "id": 255233353,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1632841962
    },
    {
        "content": "<p>Down to 100ms if I make it stop after the first find</p>",
        "id": 255233363,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632841966
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/.60descend_into_macros.60.20seems.20slow/near/255233353\">said</a>:</p>\n<blockquote>\n<p>unfortunately <code>TokenMap</code> is pretty space-sensitive, so just making it a bidirectional <code>HashMap</code> or something like that might use a lot more memory</p>\n</blockquote>\n<p>Ye that's why I didn't change that either and I just thought it might be fine</p>",
        "id": 255233417,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632841985
    },
    {
        "content": "<p>but I missed that we are blowing through the entire vec every time now</p>",
        "id": 255233445,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632841998
    },
    {
        "content": "<p>I guess we can sort the vec and do a binary search for the token id for now?</p>",
        "id": 255234593,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632842387
    },
    {
        "content": "<p>to get the range of the token id in the vec that is and the just iterate all the ones in that batch</p>",
        "id": 255234696,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632842410
    },
    {
        "content": "<p>Interesting, this doesn't actually seem to be the problem, I just got better numbers because i only got one result instead of many it seems</p>",
        "id": 255240535,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632844517
    },
    {
        "content": "<p>Well I'm out of ideas, spent 3 hours on this now, tried caching everything I can as well as replacing the token map iteration and nothing seems to affect the timing, except for just forcibly reducing the number of iterations of the loop in <code>descend_into_macros_impl</code>, I don't see what could possibly cause this to be so slow <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 255261526,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632849623
    }
]