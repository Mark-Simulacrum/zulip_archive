[
    {
        "content": "<p>Hello, apologies if this is not the right place to ask, but I know people in here would know the answer. I am looking to programatically generate a crate based on another crate. Is there an API available in rust-analyzer or something rust-analyzer uses to get type information? This must be possible since the crate documentation on <a href=\"http://crates.io\">crates.io</a> seems to be able to resolve all the information I would need... I just have no idea how easily possible. Thanks!</p>",
        "id": 218338068,
        "sender_full_name": "David Sherret",
        "timestamp": 1606766612
    },
    {
        "content": "<p>You can use rust-analyzer for this, with a caveat that:</p>\n<ul>\n<li>there are zero backwards compatibility guarantees</li>\n<li>there are next to zero docs</li>\n</ul>",
        "id": 218427714,
        "sender_full_name": "matklad",
        "timestamp": 1606832564
    },
    {
        "content": "<p>A good place to start would be <code>rust-analyzer analysis-stats .</code> command</p>\n<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/bb697727a2e43d734a1bf3aae7644a9249aee11e/crates/rust-analyzer/src/cli/analysis_stats.rs#L149\">https://github.com/rust-analyzer/rust-analyzer/blob/bb697727a2e43d734a1bf3aae7644a9249aee11e/crates/rust-analyzer/src/cli/analysis_stats.rs#L149</a></p>\n<p>It traverses the crate and infers types of all of the functions defined therein.</p>",
        "id": 218427824,
        "sender_full_name": "matklad",
        "timestamp": 1606832625
    },
    {
        "content": "<p>The rustdoc JSON backend will hopefully land this week and have the information you want.</p>",
        "id": 218429294,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606833279
    },
    {
        "content": "<p>The format is likely to change significantly before being stabilized.<br>\n<a href=\"https://github.com/rust-lang/rust/pull/79539#pullrequestreview-541878688\">https://github.com/rust-lang/rust/pull/79539#pullrequestreview-541878688</a></p>",
        "id": 218429361,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606833313
    },
    {
        "content": "<p>I'm still slightly nervous about how this interacts with --document-private-items, but since it's unstable I'm ok with it for now.</p>",
        "id": 218429855,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606833554
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> thanks! I'm interested in inspecting the structs. I don't mind too much depending on unstable api. On a sidenote, it would be great if Rust had something like TypeScript does with ts-morph (<a href=\"https://github.com/dsherret/ts-morph/tree/latest/packages/ts-morph#example\">https://github.com/dsherret/ts-morph/tree/latest/packages/ts-morph#example</a>) and some wrapper around rust-analyzer in the future might make that possible. Huge amount of work to implement though!</p>\n<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> oh, that is awesome! It's a little strange for me to rely on something like that, but it also means I could get the output and quickly write up something in a scripting language to do the code generation. My use case is also quite simple. Thanks for bringing that to my attention! I think I'm going to go with that.</p>",
        "id": 218498296,
        "sender_full_name": "David Sherret",
        "timestamp": 1606866398
    },
    {
        "content": "<p>I have visitor over the rust ast from rust-analyzer at <a href=\"https://github.com/pksunkara/cargo-up/tree/master/cargo-up/rust-visitor\">https://github.com/pksunkara/cargo-up/tree/master/cargo-up/rust-visitor</a>. And then I also have a little bit of code like tsmorph at <a href=\"https://github.com/pksunkara/cargo-up/blob/master/cargo-up/src/lib/runner.rs#L277\">https://github.com/pksunkara/cargo-up/blob/master/cargo-up/src/lib/runner.rs#L277</a>. The linked function renames a struct</p>",
        "id": 218734761,
        "sender_full_name": "pksunkara",
        "timestamp": 1607020036
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"368518\">@David Sherret</span> ^^</p>",
        "id": 218734788,
        "sender_full_name": "pksunkara",
        "timestamp": 1607020048
    },
    {
        "content": "<p>The JSON backend landed btw, it should be in the next nightly :)</p>",
        "id": 218737743,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607021513
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> thanks once again for the great tip about using rustdoc's JSON backend! It worked out very well. I was able to code generate this library using the rustdoc output <a href=\"https://github.com/dsherret/dprint-swc-ecma-ast-view\">https://github.com/dsherret/dprint-swc-ecma-ast-view</a> (still working on it to sort out some minor details, but it's basically done)</p>",
        "id": 220043033,
        "sender_full_name": "David Sherret",
        "timestamp": 1608066737
    },
    {
        "content": "<p>that's awesome! Glad it helped :D</p>",
        "id": 220046852,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608068591
    }
]