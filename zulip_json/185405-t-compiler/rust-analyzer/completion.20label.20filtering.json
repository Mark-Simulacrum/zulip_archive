[
    {
        "content": "<p>This could be an issue, but I wanted to try out Zulip.</p>\n<p><code>rust-analyzer</code> filters out comments in the function body for the completion detail area, but it keeps the attributes, and I'm not sure how useful they are, see below:</p>\n<p><a href=\"/user_uploads/4715/l-HrK5ZEJpSGT5_d2taOnpJx/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/l-HrK5ZEJpSGT5_d2taOnpJx/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/l-HrK5ZEJpSGT5_d2taOnpJx/pasted_image.png\"></a></div><p>Would it be a good idea to filter them out?</p>",
        "id": 158137272,
        "sender_full_name": "Laurențiu",
        "timestamp": 1549993931
    },
    {
        "content": "<p>Yeah, I think it's a good idea to remove the attributes.</p>",
        "id": 158137373,
        "sender_full_name": "matklad",
        "timestamp": 1549994039
    },
    {
        "content": "<p>In general, I think we'll soon need to create a \"more enterpriesy\" module for rendering <code>defs</code> as completion items. Currently, completion code contains way to many \"rendering\" logic</p>",
        "id": 158137470,
        "sender_full_name": "matklad",
        "timestamp": 1549994096
    },
    {
        "content": "<p>there's already a body range check, but it doesn't seem to work (or maybe it's doing something else)</p>",
        "id": 158137498,
        "sender_full_name": "Laurențiu",
        "timestamp": 1549994117
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>info: caused by: No space left on device (os error 28)\ntest check_code_formatting ... FAILED\n</pre></div>\n\n\n<p>Well, I didn't expect that one...</p>",
        "id": 158138310,
        "sender_full_name": "Laurențiu",
        "timestamp": 1549994752
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>thread &#39;completion::complete_dot::tests::test_method_body_filtering&#39; panicked at &#39;byte index 14 is out of bounds of ``&#39;, src/libcore/str/mod.rs:2026:9\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\nstack backtrace:\n   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace\n             at src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:39\n   1: std::sys_common::backtrace::_print\n             at src/libstd/sys_common/backtrace.rs:70\n   2: std::panicking::default_hook::{{closure}}\n             at src/libstd/sys_common/backtrace.rs:58\n             at src/libstd/panicking.rs:200\n   3: std::panicking::default_hook\n             at src/libstd/panicking.rs:209\n   4: std::panicking::rust_panic_with_hook\n             at src/libstd/panicking.rs:478\n   5: std::panicking::continue_panic_fmt\n             at src/libstd/panicking.rs:385\n   6: rust_begin_unwind\n             at src/libstd/panicking.rs:312\n   7: core::panicking::panic_fmt\n             at src/libcore/panicking.rs:85\n   8: core::str::slice_error_fail\n             at src/libcore/str/mod.rs:0\n   9: core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index::{{closure}}\n             at /rustc/4b1e39b7b36d677803e40130ea29ee6d300abf6e/src/libcore/str/mod.rs:1893\n  10: &lt;core::option::Option&lt;T&gt;&gt;::unwrap_or_else\n             at /rustc/4b1e39b7b36d677803e40130ea29ee6d300abf6e/src/libcore/option.rs:386\n  11: core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index\n             at /rustc/4b1e39b7b36d677803e40130ea29ee6d300abf6e/src/libcore/str/mod.rs:1893\n  12: core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index\n             at /rustc/4b1e39b7b36d677803e40130ea29ee6d300abf6e/src/libcore/str/mod.rs:1632\n  13: &lt;alloc::string::String as core::ops::index::Index&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::index\n             at /rustc/4b1e39b7b36d677803e40130ea29ee6d300abf6e/src/liballoc/string.rs:1973\n  14: insta::runtime::format_rust_expression\n             at /home/grayshade/.cargo/registry/src/github.com-1ecc6299db9ec823/insta-0.6.2/src/runtime.rs:62\n  15: insta::runtime::print_changeset\n             at /home/grayshade/.cargo/registry/src/github.com-1ecc6299db9ec823/insta-0.6.2/src/runtime.rs:174\n  16: insta::runtime::print_snapshot_diff\n             at /home/grayshade/.cargo/registry/src/github.com-1ecc6299db9ec823/insta-0.6.2/src/runtime.rs:298\n  17: insta::runtime::print_snapshot_diff_with_title\n             at /home/grayshade/.cargo/registry/src/github.com-1ecc6299db9ec823/insta-0.6.2/src/runtime.rs:317\n  18: insta::runtime::assert_snapshot\n             at /home/grayshade/.cargo/registry/src/github.com-1ecc6299db9ec823/insta-0.6.2/src/runtime.rs:404\n  19: ra_ide_api::completion::completion_item::check_completion\n             at crates/ra_ide_api/src/completion/completion_item.rs:363\n  20: ra_ide_api::completion::complete_dot::tests::check_ref_completion\n             at crates/ra_ide_api/src/completion/complete_dot.rs:88\n  21: ra_ide_api::completion::complete_dot::tests::test_method_body_filtering\n             at crates/ra_ide_api/src/completion/complete_dot.rs:184\n  22: ra_ide_api::completion::complete_dot::tests::test_method_body_filtering::{{closure}}\n             at crates/ra_ide_api/src/completion/complete_dot.rs:183\n  23: core::ops::function::FnOnce::call_once\n             at /rustc/4b1e39b7b36d677803e40130ea29ee6d300abf6e/src/libcore/ops/function.rs:231\n  24: &lt;F as alloc::boxed::FnBox&lt;A&gt;&gt;::call_box\n             at src/libtest/lib.rs:1474\n             at /rustc/4b1e39b7b36d677803e40130ea29ee6d300abf6e/src/libcore/ops/function.rs:231\n             at /rustc/4b1e39b7b36d677803e40130ea29ee6d300abf6e/src/liballoc/boxed.rs:734\n  25: __rust_maybe_catch_panic\n             at src/libpanic_unwind/lib.rs:92\n  26: test::run_test::run_test_inner::{{closure}}\n             at /rustc/4b1e39b7b36d677803e40130ea29ee6d300abf6e/src/libstd/panicking.rs:276\n             at /rustc/4b1e39b7b36d677803e40130ea29ee6d300abf6e/src/libstd/panic.rs:388\n             at src/libtest/lib.rs:1429\n</pre></div>\n\n\n<p>Is <code>insta</code> crashing?</p>",
        "id": 158138668,
        "sender_full_name": "Laurențiu",
        "timestamp": 1549995060
    },
    {
        "content": "<p>seems like this, yeah</p>",
        "id": 158138712,
        "sender_full_name": "matklad",
        "timestamp": 1549995106
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">test_method_body_filtering</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">check_ref_completion</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">&quot;method_body_filtering&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">r</span><span class=\"s\">&quot;</span>\n<span class=\"s\">            struct A {}</span>\n<span class=\"s\">            impl A {</span>\n<span class=\"s\">                fn the_method() {</span>\n<span class=\"s\">                    let x = 1;</span>\n<span class=\"s\">                    let x = 2;</span>\n<span class=\"s\">                }</span>\n<span class=\"s\">            }</span>\n<span class=\"s\">            fn foo(a: A) {</span>\n<span class=\"s\">               a.&lt;|&gt;</span>\n<span class=\"s\">            }</span>\n<span class=\"s\">            &quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I wonder if I'm doing something wrong..</p>",
        "id": 158138807,
        "sender_full_name": "Laurențiu",
        "timestamp": 1549995174
    },
    {
        "content": "<p>I'd say this is a bug in insta. Perhaps removing existing snapshot would work?</p>",
        "id": 158138955,
        "sender_full_name": "matklad",
        "timestamp": 1549995287
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[pid  9365] write(2, &quot;Unrecognized option: &#39;edition&#39;&quot;, 30Unrecognized option: &#39;edition&#39;) = 30\n</pre></div>\n\n\n<p>wat</p>\n<p>Maybe my toolchain is screwed up. Yeah.</p>",
        "id": 158139100,
        "sender_full_name": "Laurențiu",
        "timestamp": 1549995415
    },
    {
        "content": "<p>Yeah the comments filtering was for a quick and dirty solution. There's a lot of room for improvement. There are other items like that too</p>",
        "id": 158376682,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1549997262
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/811\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/811\">https://github.com/rust-analyzer/rust-analyzer/pull/811</a> should fix this particular instance</p>",
        "id": 158376830,
        "sender_full_name": "Laurențiu",
        "timestamp": 1549997377
    },
    {
        "content": "<p>though maybe it should check for <code>ast::FnDef</code> instead?</p>",
        "id": 158377135,
        "sender_full_name": "Laurențiu",
        "timestamp": 1549997611
    },
    {
        "content": "<p>An alternative may be to reconstruct the signature based on it's visibility, name and param list. iirc that's what rls does</p>",
        "id": 158377884,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1549998167
    },
    {
        "content": "<p>but the signature is already available somewhere else (it gets passed to <code>CompletionItem::new</code>), so I'm not sure what's supposed to happen here</p>",
        "id": 158378020,
        "sender_full_name": "Laurențiu",
        "timestamp": 1549998270
    },
    {
        "content": "<p>That way we could also format type parameters or something so that they always use the <code>where</code> syntax (or not). sort of a normalized presentation format.</p>",
        "id": 158378028,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1549998277
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">CompletionItem</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">completion_kind</span>: <span class=\"nc\">CompletionKind</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">replace_range</span>: <span class=\"nc\">TextRange</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">label</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Into</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Builder</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">label</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">label</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 158378053,
        "sender_full_name": "Laurențiu",
        "timestamp": 1549998315
    },
    {
        "content": "<p>oh..</p>",
        "id": 158378055,
        "sender_full_name": "Laurențiu",
        "timestamp": 1549998319
    },
    {
        "content": "<p>so the signature is stored as the label, then it gets overwritten</p>",
        "id": 158378078,
        "sender_full_name": "Laurențiu",
        "timestamp": 1549998350
    },
    {
        "content": "<p>never mind, one is <code>label</code>, and the other one is <code>detail</code></p>",
        "id": 158378220,
        "sender_full_name": "Laurențiu",
        "timestamp": 1549998465
    },
    {
        "content": "<p>yeah detail is the fn sig</p>",
        "id": 158378231,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1549998477
    },
    {
        "content": "<p>label is the function name iirc</p>",
        "id": 158378280,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1549998488
    },
    {
        "content": "<p>right</p>",
        "id": 158378362,
        "sender_full_name": "Laurențiu",
        "timestamp": 1549998552
    },
    {
        "content": "<p>so the function that fills in detail also fills in the signature when you're autocompleting a function call</p>",
        "id": 158378367,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1549998554
    },
    {
        "content": "<p>(see <a href=\"http://call_info.rs\" target=\"_blank\" title=\"http://call_info.rs\">call_info.rs</a>)</p>",
        "id": 158378378,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1549998566
    },
    {
        "content": "<p>I guess this is because <code>FnSignature</code> isn't <code>Display</code>?</p>",
        "id": 158378570,
        "sender_full_name": "Laurențiu",
        "timestamp": 1549998695
    },
    {
        "content": "<p>I don't know if that's quite where we would put it. for instance the function signature help also wants access to either a substring or a range  of offsets representing each parameter in the list so that it can underline when typing out a call (though there is no reason that whatever does that + <code>Display</code> wouldn't use the same code to figure that out</p>",
        "id": 158379194,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1549999117
    },
    {
        "content": "<p>good point</p>",
        "id": 158379295,
        "sender_full_name": "Laurențiu",
        "timestamp": 1549999197
    }
]