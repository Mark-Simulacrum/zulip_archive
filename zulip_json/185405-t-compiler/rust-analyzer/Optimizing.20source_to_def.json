[
    {
        "content": "<p>Hey, <span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span> , <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink  [he/him]</span>, <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/9919\">https://github.com/rust-analyzer/rust-analyzer/issues/9919</a> sounds like a fun issue. I think I <em>can</em> fix it myself, but I am wondering if it makes sense for me to mentor one of you on this one? That's a relatively more cursed part of the code base, so I'd love someone else to learn more about it</p>",
        "id": 249584895,
        "sender_full_name": "matklad",
        "timestamp": 1629118754
    },
    {
        "content": "<p>That's definitely a part I know very little about(next to nothing honestly). I wouldn't mind trying to learn about it.</p>",
        "id": 249585196,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629118880
    },
    {
        "content": "<p>Feel free to self-assign then!</p>",
        "id": 249585718,
        "sender_full_name": "matklad",
        "timestamp": 1629119180
    },
    {
        "content": "<p>So if I get this right, we want to only populate the DynMap with <code>impl</code>s coming from the same macro file if what we search comes from a macrofile?</p>",
        "id": 249594918,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629123740
    },
    {
        "content": "<p>I also don't see where we even expand macros in <code>source_to_def</code>(or the call-chains from there)</p>",
        "id": 249595327,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629123935
    },
    {
        "content": "<p>I think we probably want to compute a DynMap per HirFileId</p>",
        "id": 249595545,
        "sender_full_name": "matklad",
        "timestamp": 1629124032
    },
    {
        "content": "<p>Probably adding a file_id to <code>fn child_by_source(self, db: &amp;dyn HirDatabase)</code> with the semantics: \"child by source from this file\"</p>",
        "id": 249595629,
        "sender_full_name": "matklad",
        "timestamp": 1629124080
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/785bc57a3dc87527dc97a747298ccf566ff20da4/crates/hir_def/src/child_by_source.rs#L34\">https://github.com/rust-analyzer/rust-analyzer/blob/785bc57a3dc87527dc97a747298ccf566ff20da4/crates/hir_def/src/child_by_source.rs#L34</a></p>",
        "id": 249595709,
        "sender_full_name": "matklad",
        "timestamp": 1629124103
    },
    {
        "content": "<p>and this is the place where macro expansion happens -- the <code>.source</code> will expand. I think we want something along these lines there:</p>\n<div class=\"codehilite\"><pre><span></span><code>                    let loc = func.lookup(db);\n                    if loc.id.file_id() == current_id {\n                        let src = loc.source(db);\n                        res[keys::FUNCTION].insert(src, func)\n                    }\n</code></pre></div>",
        "id": 249595918,
        "sender_full_name": "matklad",
        "timestamp": 1629124200
    },
    {
        "content": "<p>So for the cache we currently have</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">super</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">SourceToDefCache</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FxHashMap</span><span class=\"o\">&lt;</span><span class=\"n\">ChildContainer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">DynMap</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This should be a double hashmap then if I see this right? Would the order matter here, that is</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">super</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">SourceToDefCache</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FxHashMap</span><span class=\"o\">&lt;</span><span class=\"n\">ChildContainer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FxHashMap</span><span class=\"o\">&lt;</span><span class=\"n\">HirFileId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">DynMap</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>vs</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">super</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">SourceToDefCache</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FxHashMap</span><span class=\"o\">&lt;</span><span class=\"n\">HirFileId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FxHashMap</span><span class=\"o\">&lt;</span><span class=\"n\">ChildContainer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">DynMap</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 249597579,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629125004
    },
    {
        "content": "<p>I think we want the first one</p>",
        "id": 249598688,
        "sender_full_name": "matklad",
        "timestamp": 1629125465
    },
    {
        "content": "<p>we also can do <code>Map&lt;(ChildContainer, HirFlieId), DynMap&gt;</code></p>",
        "id": 249598743,
        "sender_full_name": "matklad",
        "timestamp": 1629125493
    },
    {
        "content": "<p>(never internalized the tradeoffs between nested hashmaps vs pair-keyed hashmaps)</p>",
        "id": 249598785,
        "sender_full_name": "matklad",
        "timestamp": 1629125522
    },
    {
        "content": "<p>Oh that's also an interesting thought <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 249598864,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629125548
    },
    {
        "content": "<p>it also might be that the overal infra doesn't make a lot of sense -- the dynmap stuff is too complicated for the job it does</p>",
        "id": 249598915,
        "sender_full_name": "matklad",
        "timestamp": 1629125579
    }
]