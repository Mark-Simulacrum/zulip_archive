[
    {
        "content": "<p>After <code>ItemTree</code>, I am happy to announce another hugely wasteful salsa query:</p>\n<div class=\"codehilite\"><pre><span></span><code>   223mb ItemTreeQuery\n   167mb BlockDefMapQuery\n</code></pre></div>",
        "id": 224369933,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611858088
    },
    {
        "content": "<p>What are their relative counts? <code>RA_COUNT=1</code></p>",
        "id": 224372184,
        "sender_full_name": "matklad",
        "timestamp": 1611859028
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>hir_def::item_tree::ItemTree            46_713       46_713       46_713\nhir_def::nameres::DefMap                22_539       22_539       22_539\n</code></pre></div>",
        "id": 224372368,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611859106
    },
    {
        "content": "<p>and this only does the groundwork for inner items, nothing user-facing yet</p>",
        "id": 224372694,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611859249
    },
    {
        "content": "<p>(this uses <code>block_def_map</code> during body lowering)</p>",
        "id": 224372728,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611859264
    },
    {
        "content": "<p>ah, we don't get different counts for block vs non-block defmaps</p>\n<p>But, there are about 600 def maps</p>",
        "id": 224373119,
        "sender_full_name": "matklad",
        "timestamp": 1611859446
    },
    {
        "content": "<p>Why do we get so many block maps?</p>",
        "id": 224373176,
        "sender_full_name": "matklad",
        "timestamp": 1611859476
    },
    {
        "content": "<p>because we compute one for <em>every single block</em> during body lowering now :D</p>",
        "id": 224373209,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611859500
    },
    {
        "content": "<p>Like there are two oodles of magnitude...</p>",
        "id": 224373226,
        "sender_full_name": "matklad",
        "timestamp": 1611859510
    },
    {
        "content": "<p>aaah</p>",
        "id": 224373232,
        "sender_full_name": "matklad",
        "timestamp": 1611859513
    },
    {
        "content": "<p>yeah, that explains things )</p>",
        "id": 224373278,
        "sender_full_name": "matklad",
        "timestamp": 1611859534
    },
    {
        "content": "<p>we really should create this only for interesting blocks</p>",
        "id": 224373381,
        "sender_full_name": "matklad",
        "timestamp": 1611859565
    },
    {
        "content": "<p>yeah</p>",
        "id": 224373535,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611859629
    },
    {
        "content": "<p>last time I tried that it broke macro resolution in weird ways</p>",
        "id": 224373565,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611859642
    },
    {
        "content": "<p>I am somewhat surprised than this ends up smaller than item tree</p>",
        "id": 224373607,
        "sender_full_name": "matklad",
        "timestamp": 1611859661
    },
    {
        "content": "<p>okay, after only computing the DefMap for blocks that actually contain inner items, this brings the size down to 39 MB, which still seems way too high, but much more reasonable</p>",
        "id": 224719207,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612183102
    },
    {
        "content": "<p>I think we treat every macro in expression position as a potential item, which is wrong</p>",
        "id": 224719240,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612183121
    },
    {
        "content": "<p>but we do have to treat every macro in statement position as a potential item, so that might explain the remaining memory</p>",
        "id": 224719270,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612183146
    },
    {
        "content": "<p>I think we could check if the DefMap <em>after</em> nameres is empty and dispose of it</p>",
        "id": 224719587,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612183381
    },
    {
        "content": "<p>A macro in expression position can expand to a block containing an item.</p>",
        "id": 224719758,
        "sender_full_name": "bjorn3",
        "timestamp": 1612183492
    },
    {
        "content": "<p>yeah, that's fine</p>",
        "id": 224719813,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612183524
    },
    {
        "content": "<p>it's contained in a different DefMap</p>",
        "id": 224719832,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612183536
    },
    {
        "content": "<blockquote>\n<p>but we do have to treat every macro in statement position as a potential item, so that might explain the remaining memory</p>\n</blockquote>\n<p>uh, this is less than ideal.... Makes sense to at least access how costly would it be to make this more lazy</p>",
        "id": 224720580,
        "sender_full_name": "matklad",
        "timestamp": 1612183937
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/BlockDefMap/near/224719587\">said</a>:</p>\n<blockquote>\n<p>I think we could check if the DefMap <em>after</em> nameres is empty and dispose of it</p>\n</blockquote>\n<p>this doesn't seem to change memory usage</p>",
        "id": 224720618,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612183963
    },
    {
        "content": "<p>this is already as lazy as body lowering fwiw</p>",
        "id": 224720682,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612184012
    },
    {
        "content": "<p>Ah, right, that's for analysis stats, which looks into every body</p>",
        "id": 224720760,
        "sender_full_name": "matklad",
        "timestamp": 1612184043
    },
    {
        "content": "<p>yeah</p>",
        "id": 224720805,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612184071
    },
    {
        "content": "<p>so, its +39 in the inference phase, not the item map phaes. Then its ok I think</p>",
        "id": 224720811,
        "sender_full_name": "matklad",
        "timestamp": 1612184074
    },
    {
        "content": "<p>mhmm, BodyQuery itself already uses 73 MB there, and inference data is another 49 MB</p>",
        "id": 224720867,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612184105
    },
    {
        "content": "<p>welp, I broke macros :)</p>",
        "id": 224746034,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612194886
    },
    {
        "content": "<p>hmm, I don't understand what's going on here. This code fails to resolve the macro:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">m</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>...but when I make this a body lowering test, the only diagnostic it emits is \"leftover tokens\", which is correct</p>",
        "id": 224748768,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612195709
    },
    {
        "content": "<p>maybe it's a nameres problem</p>",
        "id": 224748836,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612195747
    },
    {
        "content": "<p>Maybe <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/2d9bb69990b866bad0b4300972f1706d38329ad3/crates/hir_expand/src/db.rs#L380\">https://github.com/rust-analyzer/rust-analyzer/blob/2d9bb69990b866bad0b4300972f1706d38329ad3/crates/hir_expand/src/db.rs#L380</a> ?</p>",
        "id": 224750891,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1612196521
    },
    {
        "content": "<p>hmm, what do you mean?</p>",
        "id": 224751016,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612196550
    },
    {
        "content": "<p>I am not sure, but maybe it is used a wrong fragment kind to resolve the macro ?</p>",
        "id": 224751204,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1612196626
    },
    {
        "content": "<p>could that affect resolution of the macro?</p>",
        "id": 224751315,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612196655
    },
    {
        "content": "<p>this started happening because of the changes for inner items</p>",
        "id": 224751349,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612196665
    },
    {
        "content": "<blockquote>\n<p>this started happening because of the changes for inner items</p>\n</blockquote>\n<p>Oh... nvm :)</p>",
        "id": 224751487,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1612196727
    },
    {
        "content": "<p>we seem to resolve an invocation like <code>name![x]</code> as <code>self::name</code></p>",
        "id": 224756622,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612198709
    },
    {
        "content": "<p>this confused note I wrote down last week might be relevant:</p>\n<blockquote>\n<p><code>PathKind::Super(0)</code> resolves to the containing module, but for block modules, the containing module is also relevant</p>\n</blockquote>",
        "id": 224756731,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612198751
    },
    {
        "content": "<p>I think what I meant was that <code>Super(0)</code> resolves to the <em>current</em> module, but the containing one is relevant</p>",
        "id": 224756790,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612198773
    },
    {
        "content": "<p>this does not explain why I can't manage to repro in a test though...</p>",
        "id": 224756828,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612198790
    },
    {
        "content": "<p>This test takes <em>really</em> long in analysis-stats, presumably because of the macros: <a href=\"https://github.com/rust-lang/rust/blob/b814b639836aa76b5c6deaa585367150bb2debf4/library/std/src/net/ip/tests.rs#L464\">https://github.com/rust-lang/rust/blob/b814b639836aa76b5c6deaa585367150bb2debf4/library/std/src/net/ip/tests.rs#L464</a></p>",
        "id": 224858379,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612265190
    },
    {
        "content": "<p>I'm not sure why. I extracted that function to a new project and it's fast (more or less) there</p>",
        "id": 224858643,
        "sender_full_name": "Laurențiu",
        "timestamp": 1612265399
    },
    {
        "content": "<p>Ah, it's not because of block_def_map, it was always slow</p>",
        "id": 224858732,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612265444
    },
    {
        "content": "<p>I thought it regressed because I remember testing when it was added to CI, but even on that commit it still seems slow and also crashes in <code>chalk</code></p>",
        "id": 224858792,
        "sender_full_name": "Laurențiu",
        "timestamp": 1612265490
    },
    {
        "content": "<p><a href=\"https://bpa.st/FJ7LK\">https://bpa.st/FJ7LK</a> if you want to give that test a try</p>",
        "id": 224858869,
        "sender_full_name": "Laurențiu",
        "timestamp": 1612265543
    },
    {
        "content": "<p>And I think type inference is slow, not parsing</p>",
        "id": 224858889,
        "sender_full_name": "Laurențiu",
        "timestamp": 1612265564
    },
    {
        "content": "<p>yeah, that could also be it</p>",
        "id": 224858973,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612265618
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/BlockDefMap/near/224748768\">said</a>:</p>\n<blockquote>\n<p>hmm, I don't understand what's going on here. This code fails to resolve the macro:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">m</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>...but when I make this a body lowering test, the only diagnostic it emits is \"leftover tokens\", which is correct</p>\n</blockquote>\n<p>Apparently this does <em>not</em> happen inside <code>lib.rs</code>, which would explain this behavior. Wow.</p>",
        "id": 224912184,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612289611
    },
    {
        "content": "<p>This reproduces it inside a test:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">//- /lib.rs</span>\n<span class=\"k\">mod</span> <span class=\"nn\">module</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"c1\">//- /module.rs</span>\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">struct</span> <span class=\"nc\">Def</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">m</span><span class=\"o\">!</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">$</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 224912462,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612289716
    },
    {
        "content": "<p>oh I think I know why</p>",
        "id": 224912589,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612289765
    },
    {
        "content": "<p>It is done.</p>\n<p><a href=\"/user_uploads/4715/awUQt69nFW9jXbi2dOuV2XXV/Peek-2021-02-09-17-30.gif\">Peek-2021-02-09-17-30.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/awUQt69nFW9jXbi2dOuV2XXV/Peek-2021-02-09-17-30.gif\" title=\"Peek-2021-02-09-17-30.gif\"><img src=\"/user_uploads/4715/awUQt69nFW9jXbi2dOuV2XXV/Peek-2021-02-09-17-30.gif\"></a></div>",
        "id": 225717526,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612888618
    },
    {
        "content": "<p>Exciting!</p>",
        "id": 225721714,
        "sender_full_name": "matklad",
        "timestamp": 1612890188
    },
    {
        "content": "<p>(don't forget to post this gif to the gifs issue, to have it ready for fhe next changelog)</p>",
        "id": 225721850,
        "sender_full_name": "matklad",
        "timestamp": 1612890227
    },
    {
        "content": "<p>oh, does it matter where I post it?</p>",
        "id": 225721961,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612890253
    },
    {
        "content": "<p>I posted a couple of them to the PRs, to keep them together. Probably not. The GIFs issue seems especially useful when there's no PR to post in.</p>",
        "id": 225722063,
        "sender_full_name": "Laurențiu",
        "timestamp": 1612890284
    },
    {
        "content": "<p>As long as it is somewhere where it's easy to find!</p>",
        "id": 225723457,
        "sender_full_name": "matklad",
        "timestamp": 1612890804
    },
    {
        "content": "<p>Also .... are local import the last big language feature we were missing? Are we Rust-complete now (modulo bugs)?</p>",
        "id": 225723619,
        "sender_full_name": "matklad",
        "timestamp": 1612890859
    },
    {
        "content": "<p>Ah, I guess we have attr-like proc macros left, and const-generics (</p>",
        "id": 225723722,
        "sender_full_name": "matklad",
        "timestamp": 1612890897
    },
    {
        "content": "<p>macros in type position are still unsupported too</p>",
        "id": 225724070,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612891017
    },
    {
        "content": "<p>and maybe in pattern position? not sure</p>",
        "id": 225724098,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612891029
    },
    {
        "content": "<p>Yes, pattern position macros aren't handled yet either</p>",
        "id": 225724427,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1612891184
    },
    {
        "content": "<p>hmm does this already work with name resolution in inference? if so, I'm a bit confused how</p>",
        "id": 225737080,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1612896182
    },
    {
        "content": "<p>or maybe it only works for the top-level block in a function</p>",
        "id": 225737176,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1612896220
    },
    {
        "content": "<p>probably that?</p>",
        "id": 225737208,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1612896233
    },
    {
        "content": "<p>(since inference currently just uses one resolver everywhere)</p>",
        "id": 225737296,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1612896254
    },
    {
        "content": "<p>Not always: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/7614#issuecomment-776105995\">https://github.com/rust-analyzer/rust-analyzer/pull/7614#issuecomment-776105995</a></p>",
        "id": 225737537,
        "sender_full_name": "Laurențiu",
        "timestamp": 1612896345
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/96a9ab725093b5f6501ed086973906ebb77805ff/crates/hir_def/src/nameres.rs#L363\">This call</a> is also not yet resolved correctly, and there's a few other known bugs</p>",
        "id": 225738805,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612896832
    },
    {
        "content": "<p>maybe that's what \"name resolution in inference\" would fix here</p>",
        "id": 225738907,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612896860
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/96a9ab725093b5f6501ed086973906ebb77805ff/crates/hir_ty/src/infer/expr.rs#L330-L331\">This</a> seems to use the right resolver though</p>",
        "id": 225739106,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612896961
    },
    {
        "content": "<p>oh, right.<br>\nprobably something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">field</span>: <span class=\"kt\">u32</span> <span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span>: <span class=\"nc\">S</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">s</span><span class=\"p\">.</span><span class=\"n\">field</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>will not work correctly (infer the type of <code>f</code>) yet though, I expect?</p>",
        "id": 225739529,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1612897131
    },
    {
        "content": "<p>also getting traits in scope like Laurențiu's case. we'll have to review all usages of the <code>resolver</code> in <code>InferenceContext</code>, basically</p>",
        "id": 225739761,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1612897217
    },
    {
        "content": "<p>yeah, that doesn't infer the type yet</p>",
        "id": 225740045,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612897329
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/BlockDefMap/near/225739529\">said</a>:</p>\n<blockquote>\n<p>oh, right.<br>\nprobably something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">field</span>: <span class=\"kt\">u32</span> <span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span>: <span class=\"nc\">S</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">s</span><span class=\"p\">.</span><span class=\"n\">field</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>will not work correctly (infer the type of <code>f</code>) yet though, I expect?</p>\n</blockquote>\n<p>turns out this one's trivial to fix :)</p>",
        "id": 225836792,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612964532
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/7627\">https://github.com/rust-analyzer/rust-analyzer/pull/7627</a></p>",
        "id": 225837804,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612965025
    },
    {
        "content": "<p>Wow, even the PR from yesterday apparently halved the number of unknown types in ripgrep</p>",
        "id": 225838058,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612965149
    },
    {
        "content": "<p>(and doubled the type mismatches, but sssshhhhh)</p>",
        "id": 225838096,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612965170
    },
    {
        "content": "<p>progress!</p>",
        "id": 225838123,
        "sender_full_name": "detrumi",
        "timestamp": 1612965182
    }
]