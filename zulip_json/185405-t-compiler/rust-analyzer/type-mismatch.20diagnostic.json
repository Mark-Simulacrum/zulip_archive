[
    {
        "content": "<p>making a note now already that we should probably mention how to disable the new diagnostic in the changelog</p>",
        "id": 276349014,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1648048700
    },
    {
        "content": "<p>Yeah, I was planning to do that</p>",
        "id": 276349611,
        "sender_full_name": "Laurențiu",
        "timestamp": 1648048928
    },
    {
        "content": "<p>perhaps we should flip the default for <code>rust-analyzer.diagnostics.enableExperimental</code>? it's still on by default</p>",
        "id": 276349627,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1648048934
    },
    {
        "content": "<p>e.g. something like</p>\n<blockquote>\n<p>This release adds a new <code>type-mismatch</code> error that was not reported before. It will still have some false positives, so you can disable it either by disabling <code>rust-analyzer.diagnostics.enableExperimental</code> or adding it to <code>rust-analyzer.diagnostics.disabled</code>. Please report any false positives you encounter though!</p>\n</blockquote>",
        "id": 276349651,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1648048946
    },
    {
        "content": "<p>By the way, there's a recent regression in the type mismatches on <code>self</code>, but I haven't tracked it down.</p>",
        "id": 276349654,
        "sender_full_name": "Laurențiu",
        "timestamp": 1648048946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/type-mismatch.20diagnostic/near/276349627\">said</a>:</p>\n<blockquote>\n<p>perhaps we should flip the default for <code>rust-analyzer.diagnostics.enableExperimental</code>? it's still on by default</p>\n</blockquote>\n<p>yeah, I was wondering about that</p>",
        "id": 276349691,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1648048962
    },
    {
        "content": "<p>would be interesting if we could disable it for weekly releases, but keep it enabled for nightlies or dev builds or something like that</p>",
        "id": 276349775,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1648048999
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/type-mismatch.20diagnostic/near/276349654\">said</a>:</p>\n<blockquote>\n<p>By the way, there's a recent regression in the type mismatches on <code>self</code>, but I haven't tracked it down.</p>\n</blockquote>\n<p>hmm I didn't see that in my manual tests</p>",
        "id": 276349825,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1648049026
    },
    {
        "content": "<p>The <code>Expected bool, got TokenStream</code> in <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8961#issuecomment-899742289\">https://github.com/rust-analyzer/rust-analyzer/issues/8961#issuecomment-899742289</a>. These are in the proc macro ABI implementations, on <del>a generic struct with a function pointer</del> some weird code.</p>",
        "id": 276349839,
        "sender_full_name": "Laurențiu",
        "timestamp": 1648049030
    },
    {
        "content": "<p>that one is <a href=\"https://github.com/rust-lang/chalk/issues/759\">chalk#759</a> :)</p>",
        "id": 276349975,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1648049072
    },
    {
        "content": "<p>so ok, that one I saw in my manual tests ;)</p>",
        "id": 276350053,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1648049101
    },
    {
        "content": "<p>Ooh, nice..</p>",
        "id": 276350063,
        "sender_full_name": "Laurențiu",
        "timestamp": 1648049105
    },
    {
        "content": "<p><code>Client&lt;F&gt;::run</code>, right? <code>pub(super) run: extern \"C\" fn(Bridge&lt;'_&gt;, F) -&gt; Buffer&lt;u8&gt;</code></p>",
        "id": 276350109,
        "sender_full_name": "Laurențiu",
        "timestamp": 1648049128
    },
    {
        "content": "<p>Ah that was me bumping dependencies then</p>",
        "id": 276350146,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1648049144
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span> no, it was introduced by my previous method resolution fix, and gets fixed by that Chalk commit</p>",
        "id": 276350331,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1648049225
    },
    {
        "content": "<p>Ah okay</p>",
        "id": 276350379,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1648049248
    },
    {
        "content": "<p>there's an <code>impl Client&lt;fn(TokenStream)&gt;</code> and an <code>impl Client&lt;fn(TokenStream, TokenStream)&gt;</code> so we select the wrong one basically</p>",
        "id": 276350388,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1648049255
    },
    {
        "content": "<p>apart from that, I saw two others in hir_def/src/resolver.rs:773 and hir_def/src/path.rs:102 that seem to be <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/5514\">rust-analyzer#5514</a>, but I'm not sure why we didn't see them before</p>",
        "id": 276350639,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1648049353
    },
    {
        "content": "<p>Why is it expecting a reference to something there <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 276350897,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1648049460
    },
    {
        "content": "<p>yeah, I haven't looked into it in detail yet. I guess somehow method resolution for the <code>.into()</code> adds an autoref?</p>",
        "id": 276350974,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1648049497
    },
    {
        "content": "<p>oh no, it's the <code>assert_eq!(path.len(), generic_args.len())</code> that adds the ref <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 276369464,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1648055853
    },
    {
        "content": "<p>Due to the derefs in the macro expansion I guess, so is the issue that we try to infer the type from the local's usages in a different order than rustc?</p>",
        "id": 276371881,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1648056829
    },
    {
        "content": "<p>no, it's also happening with just the <code>.len()</code> call. I can't reproduce it in a test yet though <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 276373592,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1648057573
    },
    {
        "content": "<p>which is really weird, like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Thingy</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">leen</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">leen</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">generic_args</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">generic_args</span><span class=\"p\">.</span><span class=\"n\">leen</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">generic_args</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>reproduces the error in a real project but not in a test</p>",
        "id": 276373674,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1648057612
    },
    {
        "content": "<p>Might need <code>Sized</code> to be defined?</p>",
        "id": 276374120,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1648057794
    },
    {
        "content": "<p>doesn't seem so</p>",
        "id": 276375172,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1648058211
    },
    {
        "content": "<p>oh, it's autoderef... an unknown type derefing to another unknown type <span aria-label=\"weary\" class=\"emoji emoji-1f629\" role=\"img\" title=\"weary\">:weary:</span></p>",
        "id": 276376616,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1648058827
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> </p>\n<p>I was actually thinking that, if we are going to start implementing diagnostics for real, we might want to roll with somewhat significant amount of false positives. Ie, I feel “zero FP”s is not really compatible with “having most diagnostics”, seems better to start with all diagnostics, and push zero fp <em>after</em> that.</p>\n<p>Soooooo. Perhaps we need a ”diagnostics: cargo-check|clippy|rust-analyzer” setting?</p>",
        "id": 276387974,
        "sender_full_name": "matklad",
        "timestamp": 1648063857
    },
    {
        "content": "<p>Would be good to brainstorm these settings things now before we do the pass over the configs described in <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/11790\">https://github.com/rust-analyzer/rust-analyzer/issues/11790</a> (which I also realized we should ideally do when we republish the extension, to minimize future breakages)</p>",
        "id": 276388648,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1648064218
    },
    {
        "content": "<p>I feel like the number one diagnostic I'd be missing from cargo check would be unused imports, btw <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> in the sense that it's really annoying to fix those by hand. Maybe it's time someone implements organize imports? ;)</p>",
        "id": 276398975,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1648068925
    },
    {
        "content": "<p>regarding allowing more false positives, maybe we should just turn off experimental diagnostics by default as Jonas suggested</p>",
        "id": 276399178,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1648069012
    },
    {
        "content": "<p>I feel that'd probably be good enough</p>",
        "id": 276399189,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1648069019
    },
    {
        "content": "<p>Ye organize import seems like something so fundamental that people dearly want, but surprisingly we had no one attempt to implement that yet <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 276400064,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1648069350
    },
    {
        "content": "<p>Ye I think people with async code won't have fun with r-a if we leave type-mismatches on by default right now <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> Been seeing a few errors in some of my projects, but mostly its async related <a href=\"/user_uploads/4715/mrDfWw--R623EjSpxAGP33ZA/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/mrDfWw--R623EjSpxAGP33ZA/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/mrDfWw--R623EjSpxAGP33ZA/image.png\"></a></div>",
        "id": 276407488,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1648073274
    },
    {
        "content": "<p>Our diagnostics are lazy, I think like project-wide ones are something I'd miss most after disabling check on save. But I don't know if we can make them eager.</p>",
        "id": 276436346,
        "sender_full_name": "Laurențiu",
        "timestamp": 1648102532
    },
    {
        "content": "<p>with the Chalk PR, we are now actually at 1 remaining type mismatch (the hygiene one)</p>",
        "id": 276515661,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1648144452
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 276516051,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1648144608
    },
    {
        "content": "<p>Did it get merged? Ah, no :(.</p>",
        "id": 276516078,
        "sender_full_name": "Laurențiu",
        "timestamp": 1648144616
    },
    {
        "content": "<p>fwiw we should maybe add something to the metrics that uses async</p>",
        "id": 276516146,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1648144653
    },
    {
        "content": "<p>until yesterday we were incorrectly inferring types for a lot of async blocks if not all with early returns</p>",
        "id": 276516302,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1648144698
    },
    {
        "content": "<p>Another async one <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/11815\">https://github.com/rust-analyzer/rust-analyzer/issues/11815</a></p>",
        "id": 276607273,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1648208813
    }
]