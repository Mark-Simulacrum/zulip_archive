[
    {
        "content": "<p>I frequently work on high performance programs, and it would really help knowing if something autovectorized or not, i was wondering if it would be in-scope to have RA be able to (through cargo asm maybe if installed?) show a function's assembly in a separate window on demand. It gets really hard to find the asm of something quickly if you have a big project like i do, so this would be incredibly helpful.</p>",
        "id": 243698306,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624475233
    },
    {
        "content": "<p>It’s in scope eventually, but not in the near term. That said, if someone submits a PR which a simple implementation which just shells out to cargo asm, I don’t see a reason to not merge it.</p>",
        "id": 243712303,
        "sender_full_name": "matklad",
        "timestamp": 1624482042
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> by \"in scope\" do you mean a more elegant way of doing it by interfacing with rustc internals/rustc itself? doing it with cargo asm would prob just be with a <code>Command</code> right?</p>",
        "id": 243718806,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624485652
    },
    {
        "content": "<p>Yeah, long term, ra should just call into backend to compile one single funciton. Short-term, Command::new(\"cargo\").arg(\"asm\") is the way to go</p>",
        "id": 243756413,
        "sender_full_name": "matklad",
        "timestamp": 1624524100
    },
    {
        "content": "<p>Hmmm, i thought RA did not \"communicate\" with rustc at all other than running cargo check, does it actually use parts of rustc as a library?</p>",
        "id": 243824791,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624558247
    },
    {
        "content": "<p>only a select few parts of rustc that build on stable like the lexer and the (likely) future trait solver chalk.</p>",
        "id": 243832804,
        "sender_full_name": "bjorn3",
        "timestamp": 1624561896
    },
    {
        "content": "<p>We are not at the moment, but long term we'll assimilate rustc</p>",
        "id": 243833602,
        "sender_full_name": "matklad",
        "timestamp": 1624562284
    },
    {
        "content": "<p>is long term plans to become another \"rustc tool\" that updates along with rustc similar to rustdoc?</p>",
        "id": 243844637,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624567841
    },
    {
        "content": "<p>On the very highest-level -- yes. But this is so long term that its impossible to predict how this'll pay out.</p>",
        "id": 243845051,
        "sender_full_name": "matklad",
        "timestamp": 1624568018
    },
    {
        "content": "<p>rust-analyzer is already available as rustup component on nightly.</p>",
        "id": 243845087,
        "sender_full_name": "bjorn3",
        "timestamp": 1624568038
    },
    {
        "content": "<p>i dont get how anyone can coordinate issues/prs across like 20 different things in the rust repository lol</p>",
        "id": 243845174,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624568073
    },
    {
        "content": "<p>there is a reason we have &gt;50k issues on gh :)</p>",
        "id": 243845372,
        "sender_full_name": "bjorn3",
        "timestamp": 1624568163
    }
]