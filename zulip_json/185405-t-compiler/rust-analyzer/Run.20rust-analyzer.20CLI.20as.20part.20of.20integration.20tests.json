[
    {
        "content": "<p>Hi folks! Quick question about rust-analyzer: is there/what's the best CLI command to run if i'm trying to figure out if a <code>rust-project.json</code> is valid? it'd be nice if it could do something like \"return 0 on success, any other error code if the <code>rust-project.json</code> is invalid\"</p>\n<p>full context: I have a CLI tool that converts a buck build graph into a <code>rust-project.json</code> and I want to ensure that the project files i'm generating are valid without needing to spin up an emacs/vim instance.</p>",
        "id": 272020084,
        "sender_full_name": "David Barsky",
        "timestamp": 1644950947
    },
    {
        "content": "<p>We don't have anything that allows you to validate a project json no. You can check for available flags here <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/95db3c147684ced6b5ddfd4612b21b90d6903b30\\crates\\rust-analyzer\\src\\cli\\flags.rs#L19\">https://github.com/rust-analyzer/rust-analyzer/blob/95db3c147684ced6b5ddfd4612b21b90d6903b30\\crates\\rust-analyzer\\src\\cli\\flags.rs#L19</a> and invoke one that doesn't do much work to check I suppose?</p>",
        "id": 272020894,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1644951332
    },
    {
        "content": "<p>gotcha. two questions:</p>\n<ul>\n<li>it seems like the <code>diagnostics</code> command is close to this, or does it try to spit out rust-analyzer's diagnostics?</li>\n<li>would it be helpful to open an issue describing the subcommand that I want, where it tries to launch the language server, but doesn't actually... function as a language server? e.g., it can (optionally) load the <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/rust-analyzer/src/config.rs#L3\">config</a> from a JSON file</li>\n</ul>",
        "id": 272022441,
        "sender_full_name": "David Barsky",
        "timestamp": 1644951908
    },
    {
        "content": "<p>yes, try to spit out rust-analyzer's diagnostics is exactly what it does ;)</p>",
        "id": 272022538,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1644951947
    },
    {
        "content": "<p>I think adding a subcommand that just tries to load the project would probably be fine</p>",
        "id": 272022643,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1644951981
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Run.20rust-analyzer.20CLI.20as.20part.20of.20integration.20tests/near/272022643\">said</a>:</p>\n<blockquote>\n<p>I think adding a subcommand that just tries to load the project would probably be fine</p>\n</blockquote>\n<p>gotcha, i'll skip writing up the issue unless you tell me otherwise</p>",
        "id": 272022998,
        "sender_full_name": "David Barsky",
        "timestamp": 1644952152
    },
    {
        "content": "<p>got portions of this working by copying portions of the LSIF command. is there a way to get errors from <code>StaticIndex::compute</code> if, for instance, the data i'm feeding it is garbage? For instance, I fed it non-existent project paths, but the command just completed more quickly.</p>",
        "id": 272446686,
        "sender_full_name": "David Barsky",
        "timestamp": 1645212786
    },
    {
        "content": "<p>i guess what i want is the exact opposite of what rust-analzyer is structured around during normal usage: I want it to be fragile and break if there's anything wrong with the project, not trucking on!</p>",
        "id": 272447823,
        "sender_full_name": "David Barsky",
        "timestamp": 1645213443
    },
    {
        "content": "<p>hmm I don't know, but I do think that if there are misconfigurations like non-existent paths, we do also want to surface that to the user during normal usage, even if we then try to continue as best as possible</p>",
        "id": 272450011,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1645214373
    },
    {
        "content": "<p>some non-existent paths did result in an error (e.g., sysroot) during project loading, i'm starting to realize that given the incremental nature of salsa/chalk and r-a by extension, it sorta makes sense there isn't a single \"force load\" everything</p>",
        "id": 272451197,
        "sender_full_name": "David Barsky",
        "timestamp": 1645214898
    },
    {
        "content": "<p>Is there a reason why you can't use <code>diagnostics</code>?</p>",
        "id": 272460516,
        "sender_full_name": "Laurențiu",
        "timestamp": 1645220063
    },
    {
        "content": "<p>no reason! i just don’t know the full API surface of Rust Analyzer’s internals, that’s all!</p>",
        "id": 272562432,
        "sender_full_name": "David Barsky",
        "timestamp": 1645328110
    }
]