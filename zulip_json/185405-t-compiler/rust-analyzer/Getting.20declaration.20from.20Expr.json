[
    {
        "content": "<p>I'm playing around with this issue: <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/10034\">https://github.com/rust-analyzer/rust-analyzer/issues/10034</a></p>\n<p>To get the info I want, I was thinking to get the <code>Type</code> of the expression's declaration and check <code>is_mutable_reference()</code>. I know <code>to_extract</code> here (<a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ide_assists/src/handlers/extract_variable.rs\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ide_assists/src/handlers/extract_variable.rs</a>) will contain the expression we're trying to move, how do I know whether it is a parameter with &amp;mut applied to it?</p>",
        "id": 266878015,
        "sender_full_name": "Jeroen Vannevel",
        "timestamp": 1641338449
    },
    {
        "content": "<p>You will have to check whether the expression is a field access, then get the receiver expression of the field and query the type of that expression</p>",
        "id": 266879297,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1641339345
    },
    {
        "content": "<p>note that you have to keep in mind cases like <code>foo.field.field</code> where you want to do this for <code>foo</code> and not an intermediate field</p>",
        "id": 266879351,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1641339366
    },
    {
        "content": "<p>Do you happen to have an example of </p>\n<ol>\n<li>how I might check for a field access expression, and</li>\n<li>get the receiver expression?</li>\n</ol>\n<p>I've been looking through a bunch of existing assists but haven't managed to connect the dots in the lingo used.</p>",
        "id": 266879731,
        "sender_full_name": "Jeroen Vannevel",
        "timestamp": 1641339657
    },
    {
        "content": "<p><code>ast::Expr</code>is an enum so you can just check the variant and then check the receiver there and check again etc until you find the last receiver</p>",
        "id": 266880141,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1641339951
    },
    {
        "content": "<p>so </p>\n<div class=\"codehilite\"><pre><span></span><code>match expr {\n    ast::Expr::FieldExpr(field_expr) =&gt; field_expr,\n   ...\n}\n</code></pre></div>\n<p>and <code>field_expr.expr()</code> to fetch the receiver</p>",
        "id": 266880288,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1641340076
    },
    {
        "content": "<p>That definitely is getting me further. A rough version is as follows:</p>\n<div class=\"codehilite\"><pre><span></span><code>if let ast::Expr::FieldExpr(field) = &amp;to_extract {\n        let f = field.expr().unwrap();\n        let ty = ctx.sema.type_of_expr(&amp;f).unwrap();\n        println!(&quot;{:?}&quot;, f.syntax().to_string());\n        println!(&quot;{:?}&quot;, ty.adjusted().is_mutable_reference());\n    }\n</code></pre></div>\n<p>I can see that the first <code>println()</code> prints the correct part of the field expression (i.e. <code>s.vec.push()</code> gives me <code>s</code>). However the line below claims it isn't a mutable reference, despite it being declared as <code>fn foo(s: &amp;mut S)</code>. Am I missing a piece of the puzzle here?</p>",
        "id": 266881286,
        "sender_full_name": "Jeroen Vannevel",
        "timestamp": 1641340876
    },
    {
        "content": "<p>That might be because you are using <code>adjusted</code>, try <code>original</code>(or whatever it is called)</p>",
        "id": 266882067,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1641341406
    },
    {
        "content": "<p>Oh, that one gives me the correct value! What is the difference between these two? I looked at some code samples and felt like <code>adjusted</code> was used most of the time so I just went along with that</p>",
        "id": 266882139,
        "sender_full_name": "Jeroen Vannevel",
        "timestamp": 1641341495
    },
    {
        "content": "<p><code>adjusted</code> is the type of the expression with coercions and such applied to it</p>",
        "id": 266884064,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1641343165
    },
    {
        "content": "<p>Thanks for all the help Lukas! I've put up a PR with my results: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/11195\">https://github.com/rust-analyzer/rust-analyzer/pull/11195</a></p>",
        "id": 266888137,
        "sender_full_name": "Jeroen Vannevel",
        "timestamp": 1641347152
    }
]