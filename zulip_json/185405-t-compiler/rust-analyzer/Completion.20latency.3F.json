[
    {
        "content": "<p>Hello! I'm trying rust-analyzer again now that cargo-watch is built-in (finally! can't live without this one). It looks like the completion takes about 1.5 seconds to pop up after I input <code>something.</code>, which is just long enough to be annoying. RLS is almost instantâ€”after it's done building its database, that is. Is it supposed to take this long? I'm on neovim with LanguageClient-neovim.</p>",
        "id": 184904102,
        "sender_full_name": "Ivan Molodetskikh",
        "timestamp": 1578315970
    },
    {
        "content": "<p>1.5 seconds seems excessive! Our completion is not as speedy as I would like yet, but it should fit into hundreds of milliseconds. Does it happen every time or only for specific projects?</p>",
        "id": 184904262,
        "sender_full_name": "matklad",
        "timestamp": 1578316144
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/_R_rdcQp47A5LxP3kcYUyTmT/Peek-2020-01-06-14-09.gif\" target=\"_blank\" title=\"Peek-2020-01-06-14-09.gif\">Peek-2020-01-06-14-09.gif</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/_R_rdcQp47A5LxP3kcYUyTmT/Peek-2020-01-06-14-09.gif\" target=\"_blank\" title=\"Peek-2020-01-06-14-09.gif\"><img src=\"/user_uploads/4715/_R_rdcQp47A5LxP3kcYUyTmT/Peek-2020-01-06-14-09.gif\"></a></div><p>This is how completion works in rust-analyzer itself</p>",
        "id": 184904366,
        "sender_full_name": "matklad",
        "timestamp": 1578316233
    },
    {
        "content": "<p>Hmm, looks like it's generally fast, but on this small 1-file project using vulkano it takes around 1 second.</p>",
        "id": 184904634,
        "sender_full_name": "Ivan Molodetskikh",
        "timestamp": 1578316503
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"212263\">@Ivan Molodetskikh</span> that's wonderful! Could you publish this 1-line project with Cargo.lock to github?</p>",
        "id": 184904742,
        "sender_full_name": "matklad",
        "timestamp": 1578316588
    },
    {
        "content": "<p><a href=\"https://github.com/YaLTeR/rust-analyzer-long-completion\" target=\"_blank\" title=\"https://github.com/YaLTeR/rust-analyzer-long-completion\">https://github.com/YaLTeR/rust-analyzer-long-completion</a></p>",
        "id": 184904978,
        "sender_full_name": "Ivan Molodetskikh",
        "timestamp": 1578316830
    },
    {
        "content": "<p>Both completing something from existing variables (e.g. pipeline) and just doing a <code>let temp = \"asd\"; temp.</code> has about 1 second of latency for me.</p>",
        "id": 184905016,
        "sender_full_name": "Ivan Molodetskikh",
        "timestamp": 1578316861
    },
    {
        "content": "<p>yup, reproduced!</p>",
        "id": 184905407,
        "sender_full_name": "matklad",
        "timestamp": 1578317196
    },
    {
        "content": "<p>it might be related to the \"profiling rust-analyzer\" topic (especially considering vulkano produces lots of items with macros, I think)</p>",
        "id": 184905738,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1578317446
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> I think that's a different problem, here's profile: <a href=\"https://gist.github.com/matklad/7e4e0ffcd6c2e8965dcf5a2da61fb149\" target=\"_blank\" title=\"https://gist.github.com/matklad/7e4e0ffcd6c2e8965dcf5a2da61fb149\">https://gist.github.com/matklad/7e4e0ffcd6c2e8965dcf5a2da61fb149</a> (I <strong>love</strong> our profiling infra).</p>\n<p>The crate_def_map takes 0ms, which is expected: it is a const external crate. </p>\n<p>OTOH, the <code>infer</code> query takes quite a while. Which... is expected, give Tomaka's <a href=\"https://github.com/libp2p/rust-libp2p/blob/2c4b52a545ca051147b03154525aa0e99d36fa2b/swarm/src/lib.rs#L175-L207\" target=\"_blank\" title=\"https://github.com/libp2p/rust-libp2p/blob/2c4b52a545ca051147b03154525aa0e99d36fa2b/swarm/src/lib.rs#L175-L207\">code style</a> :D, and which makes this an interesting test case</p>",
        "id": 184906243,
        "sender_full_name": "matklad",
        "timestamp": 1578317927
    },
    {
        "content": "<p>wow</p>",
        "id": 184906379,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1578318062
    },
    {
        "content": "<p>I don't quite understand why infer would take so long though</p>",
        "id": 184906417,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1578318107
    },
    {
        "content": "<p>it might lead to lots of trait queries, but I don't see any in the profile</p>",
        "id": 184906431,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1578318121
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>                          380ms - trait_solve_query\n                          219ms - trait_solve_query (213 calls)\n</pre></div>",
        "id": 184906493,
        "sender_full_name": "matklad",
        "timestamp": 1578318142
    },
    {
        "content": "<p>Hahaha wow, that's a lot of traits! Maybe it's this thing killing it? <a href=\"https://docs.rs/vulkano/0.16.0/vulkano/pipeline/struct.GraphicsPipelineBuilder.html\" target=\"_blank\" title=\"https://docs.rs/vulkano/0.16.0/vulkano/pipeline/struct.GraphicsPipelineBuilder.html\">https://docs.rs/vulkano/0.16.0/vulkano/pipeline/struct.GraphicsPipelineBuilder.html</a></p>",
        "id": 184906495,
        "sender_full_name": "Ivan Molodetskikh",
        "timestamp": 1578318144
    },
    {
        "content": "<p>ah wait, that's just <code>infer</code> and no <code>do_infer</code> in the end, so it's apparently again salsa revalidation taking so long?</p>",
        "id": 184906517,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1578318167
    },
    {
        "content": "<p>They are kicked by diagnostics query (the <code>infer</code> in completion basically waits for those complete)</p>",
        "id": 184906520,
        "sender_full_name": "matklad",
        "timestamp": 1578318171
    },
    {
        "content": "<p>and probably again because of all the trait queries <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 184906537,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1578318179
    },
    {
        "content": "<p>I don't think this is re-validation. Rather, one thread blocks while the other computes the result</p>",
        "id": 184906576,
        "sender_full_name": "matklad",
        "timestamp": 1578318221
    },
    {
        "content": "<p>ah, that could be it</p>",
        "id": 184906634,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1578318250
    },
    {
        "content": "<p>This can't be revalidation, b/c infer is a volatile query, and is just thrown away without revalidation. </p>\n<p>However, I wonder if adding that caching to <code>that_sovler</code> query we talked about the other day might help here as well</p>",
        "id": 184906699,
        "sender_full_name": "matklad",
        "timestamp": 1578318318
    },
    {
        "content": "<blockquote>\n<p>This can't be revalidation, b/c infer is a volatile query, and is just thrown away without revalidation. </p>\n</blockquote>\n<p>It is? I don't see that here <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/1953ac17fd8c93d2145ec3103fd39dd9d6c8fd30/crates/ra_hir_ty/src/db.rs#L26\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/1953ac17fd8c93d2145ec3103fd39dd9d6c8fd30/crates/ra_hir_ty/src/db.rs#L26\">https://github.com/rust-analyzer/rust-analyzer/blob/1953ac17fd8c93d2145ec3103fd39dd9d6c8fd30/crates/ra_hir_ty/src/db.rs#L26</a> (and I don't think that'd be a good idea, when we're calling it for every function in a file for diagnostics?)</p>",
        "id": 184906926,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1578318512
    },
    {
        "content": "<p>the <code>trait_solver_query</code> is volatile, so, once we try validate first of <code>trait_solve_query</code>, we immediately thrown the result awway</p>",
        "id": 184906999,
        "sender_full_name": "matklad",
        "timestamp": 1578318581
    },
    {
        "content": "<p>Yeah, caching trait_solver gives a more reasonable <code>  216ms - handle_completion</code></p>",
        "id": 184907119,
        "sender_full_name": "matklad",
        "timestamp": 1578318668
    },
    {
        "content": "<p>(of which 150ms seem to be revalidation)</p>",
        "id": 184907139,
        "sender_full_name": "matklad",
        "timestamp": 1578318698
    },
    {
        "content": "<p>(also, to give some scale, I think we should aim at 16ms for completion latency. Shouldn't be that hard: it's just text processing of low-megabytes of text after all :) )</p>",
        "id": 184907255,
        "sender_full_name": "matklad",
        "timestamp": 1578318782
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> submitted a PR with caching: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/2752\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/2752\">https://github.com/rust-analyzer/rust-analyzer/pull/2752</a>.</p>",
        "id": 184907719,
        "sender_full_name": "matklad",
        "timestamp": 1578319163
    },
    {
        "content": "<p>this reminds me that figuring out how to integrate trait solver caching with salsa is on my list of \"open problems\"</p>",
        "id": 184917120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578325345
    },
    {
        "content": "<p>So, any issue I could subscribe to to track this?</p>",
        "id": 185311552,
        "sender_full_name": "Ivan Molodetskikh",
        "timestamp": 1578664797
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"212263\">@Ivan Molodetskikh</span> I think this might be a good proxy for \"chalk is slow\": <a href=\"https://github.com/rust-lang/chalk/issues/298\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/298\">https://github.com/rust-lang/chalk/issues/298</a>. There's no a dedicated issue for chalk caching yet</p>",
        "id": 185311954,
        "sender_full_name": "matklad",
        "timestamp": 1578665057
    },
    {
        "content": "<p>Alright, thanks</p>",
        "id": 185313466,
        "sender_full_name": "Ivan Molodetskikh",
        "timestamp": 1578666126
    }
]