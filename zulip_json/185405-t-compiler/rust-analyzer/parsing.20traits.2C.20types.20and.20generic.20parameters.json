[
    {
        "content": "<p>Attempting to figure out where types &amp; traits are actually allowed in rust, and figuring out how we are currently parsing things.</p>\n<p>For example in <code>Box&lt;T + 'f&gt;</code>, is there a reason the parsed <code>PathType</code> contains the lifetime, rather than it being another separate item.</p>\n<p>Currently this looks like:</p>\n<div class=\"codehilite\"><pre><span></span>PATH_TYPE@[12; 23)\n  PATH@[12; 23)\n    PATH_SEGMENT@[12; 23)\n      NAME_REF@[12; 15)\n        IDENT@[12; 15) &quot;Box&quot;\n      TYPE_ARG_LIST@[15; 23)\n        L_ANGLE@[15; 16)\n        TYPE_ARG@[16; 22)\n          PATH_TYPE@[16; 22)\n            PATH@[16; 17)\n              PATH_SEGMENT@[16; 17)\n                NAME_REF@[16; 17)\n                  IDENT@[16; 17) &quot;T&quot;\n            WHITESPACE@[17; 18)\n            PLUS@[18; 19)\n            WHITESPACE@[19; 20)\n            LIFETIME@[20; 22) &quot;&#39;f&quot;\n        R_ANGLE@[22; 23)\n</pre></div>\n\n\n<p>I would expect it probably to be something like:</p>\n<div class=\"codehilite\"><pre><span></span>    ...\n        TYPE_ARG@[16; 22)\n          PATH_TYPE@[16; 22)\n            PATH@[16; 17)\n              PATH_SEGMENT@[16; 17)\n                NAME_REF@[16; 17)\n                  IDENT@[16; 17) &quot;T&quot;\n        WHITESPACE@[17; 18)\n        PLUS@[18; 19)\n        WHITESPACE@[19; 20)\n        TYPE_ARG@...:\n          LIFETIME@[20; 22) &quot;&#39;f&quot;\n        R_ANGLE@[22; 23)\n</pre></div>\n\n\n<p>With the <code>LIFETIME</code> being outside the <code>PATH_TYPE</code>.</p>\n<p>Once I figure out where things are actually allowed, I'd like to attempt to fix the parser and maybe add some additional grammar for types/traits if it makes sense.parsing traits, types and generic parameters</p>",
        "id": 161629779,
        "sender_full_name": "vipentti",
        "timestamp": 1553509299
    },
    {
        "content": "<p>So this is the confusing example. This is actually <code>Box&lt;dyn T + 'f&gt;</code>, and <code>+'f</code> is a part of a <code>dyn</code> type</p>",
        "id": 161630796,
        "sender_full_name": "matklad",
        "timestamp": 1553510176
    },
    {
        "content": "<p>in <code>dyn</code>, the first component is restricted to be a path, referring to the trait</p>",
        "id": 161630812,
        "sender_full_name": "matklad",
        "timestamp": 1553510213
    },
    {
        "content": "<p>aha!</p>",
        "id": 161630818,
        "sender_full_name": "vipentti",
        "timestamp": 1553510223
    },
    {
        "content": "<p>and <code>dyn</code> being optional is what creates confustion here</p>",
        "id": 161630836,
        "sender_full_name": "matklad",
        "timestamp": 1553510239
    },
    {
        "content": "<p>That makes sense</p>",
        "id": 161630850,
        "sender_full_name": "vipentti",
        "timestamp": 1553510272
    },
    {
        "content": "<p>A similar case of type-trait confustion happens in impls</p>",
        "id": 161630966,
        "sender_full_name": "matklad",
        "timestamp": 1553510381
    },
    {
        "content": "<p>In <code>impl X for Y</code> and <code>impl X</code>, the <code>X</code> can be either a trait or a type</p>",
        "id": 161630995,
        "sender_full_name": "matklad",
        "timestamp": 1553510402
    },
    {
        "content": "<p>I wish we could make this separation precise on the grammar level</p>",
        "id": 161631046,
        "sender_full_name": "matklad",
        "timestamp": 1553510423
    },
    {
        "content": "<p>and .... this is probably the first time I myself uderstand what's going on here. The<code> dyn</code> is the key</p>",
        "id": 161631156,
        "sender_full_name": "matklad",
        "timestamp": 1553510525
    },
    {
        "content": "<p>hmm, what about <code>struct S&lt;T: 'a + ?Sized + (Copy)&gt;</code> I imagine here the bounds should be flattened, currently the <code>PathTypes</code> are nested</p>",
        "id": 161631370,
        "sender_full_name": "vipentti",
        "timestamp": 1553510758
    },
    {
        "content": "<p>It gets even more confusing when you change where the lifetime is</p>",
        "id": 161631445,
        "sender_full_name": "vipentti",
        "timestamp": 1553510813
    },
    {
        "content": "<p>or if you add more bounds</p>",
        "id": 161631531,
        "sender_full_name": "vipentti",
        "timestamp": 1553510903
    },
    {
        "content": "<p>So, <code>Trait1 + Trait2 + lifetime1 + lifetime2</code> is a <code>TraitGroup</code></p>",
        "id": 161631552,
        "sender_full_name": "matklad",
        "timestamp": 1553510943
    },
    {
        "content": "<p>the syntax for <code>dyn</code> types is <code>dyn: TraitGroup</code></p>",
        "id": 161631566,
        "sender_full_name": "matklad",
        "timestamp": 1553510956
    },
    {
        "content": "<p><code>dyn TraitGroup</code></p>",
        "id": 161631569,
        "sender_full_name": "matklad",
        "timestamp": 1553510969
    },
    {
        "content": "<p>the syntax for bound is <code>Type: TraitGroup</code></p>",
        "id": 161631573,
        "sender_full_name": "matklad",
        "timestamp": 1553510980
    },
    {
        "content": "<p>and yeah, the <code>TraitGroup</code> should be flat</p>",
        "id": 161631627,
        "sender_full_name": "matklad",
        "timestamp": 1553511009
    },
    {
        "content": "<p>I'll see about fixing it, after that where clauses should kinda work</p>",
        "id": 161631650,
        "sender_full_name": "vipentti",
        "timestamp": 1553511048
    },
    {
        "content": "<p>hmm, <code>TraitGroup</code> can contain <code>Lifetime</code> and <code>TypeRef</code> ?</p>",
        "id": 161631695,
        "sender_full_name": "vipentti",
        "timestamp": 1553511118
    },
    {
        "content": "<p>yeah</p>",
        "id": 161632675,
        "sender_full_name": "matklad",
        "timestamp": 1553512123
    },
    {
        "content": "<p>In  <code>trait T&lt;U&gt;: Hash + Clone where U: Copy {}</code>, is <code>Hash + Clone</code> a <code>TraitGroup</code> as well ?</p>",
        "id": 161736249,
        "sender_full_name": "vipentti",
        "timestamp": 1553582763
    },
    {
        "content": "<p>I think so!</p>",
        "id": 161736501,
        "sender_full_name": "matklad",
        "timestamp": 1553583170
    },
    {
        "content": "<p>hmm, in <code>trait X&lt;U: Debug + Display&gt;</code> should the <code>&lt;U: Debug + Display&gt;</code> be parsed as:</p>\n<div class=\"codehilite\"><pre><span></span>TYPE_PARAM_LIST@[49; 69)\n  L_ANGLE@[49; 50)\n  TYPE_PARAM@[50; 68)\n    NAME@[50; 51)\n      IDENT@[50; 51) &quot;U&quot;\n    COLON@[51; 52)\n    WHITESPACE@[52; 53)\n  TRAIT_GROUP.. // new\n    PATH_TYPE@[53; 68)\n      PATH@[53; 58)\n        PATH_SEGMENT@[53; 58)\n          NAME_REF@[53; 58)\n            IDENT@[53; 58) &quot;Debug&quot;\n    WHITESPACE@[58; 59)\n    PLUS@[59; 60)\n    WHITESPACE@[60; 61)\n    PATH_TYPE@[61; 68)\n      PATH@[61; 68)\n          PATH_SEGMENT@[61; 68)\n          NAME_REF@[61; 68)\n              IDENT@[61; 68) &quot;Display&quot;\n</pre></div>\n\n\n<p>basically the typeparam list can contain the typeparam + optional trait group</p>",
        "id": 161736759,
        "sender_full_name": "vipentti",
        "timestamp": 1553583602
    },
    {
        "content": "<p>I think <code>: TraitGroup</code> might be grouped under a <code>Bound</code> as well</p>",
        "id": 161736803,
        "sender_full_name": "matklad",
        "timestamp": 1553583654
    },
    {
        "content": "<p>It might also be a good idea to ping grammar WG on discord about naming and general structure in this area</p>",
        "id": 161736834,
        "sender_full_name": "matklad",
        "timestamp": 1553583715
    },
    {
        "content": "<p>IIRC, currently the gramamr closely mirrors what is implemented in rustc</p>",
        "id": 161736886,
        "sender_full_name": "matklad",
        "timestamp": 1553583732
    },
    {
        "content": "<p>but I think we can do much better here</p>",
        "id": 161736889,
        "sender_full_name": "matklad",
        "timestamp": 1553583740
    },
    {
        "content": "<p>Yeah I think there is room for improvement</p>",
        "id": 161736896,
        "sender_full_name": "vipentti",
        "timestamp": 1553583781
    },
    {
        "content": "<p>Added a draft pr regarding this: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/1077\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/1077\">https://github.com/rust-analyzer/rust-analyzer/pull/1077</a></p>",
        "id": 162123914,
        "sender_full_name": "vipentti",
        "timestamp": 1553957111
    },
    {
        "content": "<p>I am trying to implement default param in GenericParam, something like <code>struct Foo&lt;T=u8&gt; {_v: T}</code>. Currently it is parsed as :</p>\n<div class=\"codehilite\"><pre><span></span>STRUCT_DEF@[14; 45)\n    STRUCT_KW@[14; 20) &quot;struct&quot;\n    WHITESPACE@[20; 21) &quot; &quot;\n    NAME@[21; 24)\n      IDENT@[21; 24) &quot;Foo&quot;\n    TYPE_PARAM_LIST@[24; 30)\n      L_ANGLE@[24; 25) &quot;&lt;&quot;\n      TYPE_PARAM@[25; 29)\n        NAME@[25; 26)\n          IDENT@[25; 26) &quot;T&quot;\n        EQ@[26; 27) &quot;=&quot;\n        PATH_TYPE@[27; 29)\n          PATH@[27; 29)\n            PATH_SEGMENT@[27; 29)\n              NAME_REF@[27; 29)\n                IDENT@[27; 29) &quot;u8&quot;\n      R_ANGLE@[29; 30) &quot;&gt;&quot;\n</pre></div>\n\n\n<p>Do we want to introduce another syntax node (something like <code>DEFAULT_TYPE_PARAM</code>) for that ? Or we can use that PATH_TYPE directly?</p>",
        "id": 164372200,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1556432011
    },
    {
        "content": "<p>I think we don't need an extra node here</p>",
        "id": 164384856,
        "sender_full_name": "matklad",
        "timestamp": 1556454487
    },
    {
        "content": "<p>But we should definitelly add an <code>default</code> method to <code>TypeParam</code></p>",
        "id": 164384859,
        "sender_full_name": "matklad",
        "timestamp": 1556454506
    },
    {
        "content": "<p>My concern is that if we use PATH_TYPE, it will be confused with other syntax. If not, then it’s good. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 164387892,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1556459018
    },
    {
        "content": "<p>As long as we have well-typed accessor methods on <code>TypeParam</code>, I think there won't be any confustion</p>",
        "id": 164388068,
        "sender_full_name": "matklad",
        "timestamp": 1556459183
    }
]