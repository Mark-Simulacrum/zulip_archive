[
    {
        "content": "<p>is the rust-project.json format documented anywhere?</p>",
        "id": 188118314,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581608635
    },
    {
        "content": "<p>also, is it possible to use rust-project.json to describe hundreds of various binary/library targets? or would there need to be one per crate like Cargo.toml files?</p>",
        "id": 188118479,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581608725
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"217516\">@Benjamin Brittain</span> it's not docummented, there's only a test. You need one project.json file which descibes the whole web of crates you are compiling</p>",
        "id": 188118617,
        "sender_full_name": "matklad",
        "timestamp": 1581608804
    },
    {
        "content": "<p>What are your use-case for project.json ?</p>",
        "id": 188118664,
        "sender_full_name": "matklad",
        "timestamp": 1581608835
    },
    {
        "content": "<p>The problem with it is that I really want to support non-CArgo based proejcts (mostly to make sure that the abstraction is right), but, as almost everyone uses Cargo, this functionality is not really well tested at all</p>",
        "id": 188118776,
        "sender_full_name": "matklad",
        "timestamp": 1581608882
    },
    {
        "content": "<p>I'm reworking the Rust rules in Fuchsia, and I'm <em>so tired</em> of our Cargo.toml hacks</p>",
        "id": 188118826,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581608916
    },
    {
        "content": "<p>I'm probably like the only person who needs this :P</p>",
        "id": 188118867,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581608945
    },
    {
        "content": "<p>Oh yeah, this is exactly use-case for project.json</p>",
        "id": 188118868,
        "sender_full_name": "matklad",
        "timestamp": 1581608945
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"217516\">@Benjamin Brittain</span> I think you are rougthly 50% off the audience, the other half should be Facebook :D</p>",
        "id": 188118906,
        "sender_full_name": "matklad",
        "timestamp": 1581608974
    },
    {
        "content": "<p>sounds about right <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 188118937,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581608995
    },
    {
        "content": "<p>ok, I might have questions then. Can you point me to the test?</p>",
        "id": 188119013,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581609020
    },
    {
        "content": "<p>If it's not straightforward I'll try to write up some docs in parallel</p>",
        "id": 188119038,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581609037
    },
    {
        "content": "<p>So, rust-analyzer works with a set of crates at a time (in contrast with rustc, which works crate at a time).</p>\n<p>So what project.json does is it describes the graph of crates.</p>\n<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/4444192b05c107a40a5a05ea3c9091ad8f8cbbcc/crates/ra_lsp_server/tests/heavy_tests/main.rs#L380\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/4444192b05c107a40a5a05ea3c9091ad8f8cbbcc/crates/ra_lsp_server/tests/heavy_tests/main.rs#L380\">https://github.com/rust-analyzer/rust-analyzer/blob/4444192b05c107a40a5a05ea3c9091ad8f8cbbcc/crates/ra_lsp_server/tests/heavy_tests/main.rs#L380</a></p>",
        "id": 188119130,
        "sender_full_name": "matklad",
        "timestamp": 1581609103
    },
    {
        "content": "<p>can rust-analyzer handle ~2000 crates?</p>",
        "id": 188119154,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581609121
    },
    {
        "content": "<p>In particular, the nodes in graph are anonymous (names that you see in <code>extern crate foo</code> are written on edges), and you can \"instantiate\" sevetal crates from a single file.</p>",
        "id": 188119216,
        "sender_full_name": "matklad",
        "timestamp": 1581609148
    },
    {
        "content": "<blockquote>\n<p>can rust-analyzer handle ~2000 crates?</p>\n</blockquote>\n<p>In theory, yes, in practice, I hanve't tried that big projects</p>",
        "id": 188119267,
        "sender_full_name": "matklad",
        "timestamp": 1581609190
    },
    {
        "content": "<p>cool, I'm ready to be a stress test</p>",
        "id": 188119276,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581609200
    },
    {
        "content": "<p>but it can handle rustc, for examle</p>",
        "id": 188119282,
        "sender_full_name": "matklad",
        "timestamp": 1581609205
    },
    {
        "content": "<p>In general, the processing of rust-analyzer should be sublinear, so in theory we should scale pretty well.</p>",
        "id": 188119318,
        "sender_full_name": "matklad",
        "timestamp": 1581609227
    },
    {
        "content": "<p><em>fancy</em></p>",
        "id": 188119334,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581609238
    },
    {
        "content": "<p>A major limitation in practice is that we do keep all the data in memory at the moment, so several gig for rust-analyzer is not unheard of</p>",
        "id": 188119410,
        "sender_full_name": "matklad",
        "timestamp": 1581609266
    },
    {
        "content": "<p>my workstation has 196Gb of RAM. I think I'll be Ok</p>",
        "id": 188119447,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581609288
    },
    {
        "content": "<p>yup, that should be fine</p>",
        "id": 188119463,
        "sender_full_name": "matklad",
        "timestamp": 1581609299
    },
    {
        "content": "<p>but I'd like people who do OSS work (who usually don't have as powerful machines) to be able to use this too :(</p>\n<p>are there plans to move some things to disk?</p>",
        "id": 188119538,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581609344
    },
    {
        "content": "<p>Eventual plans, not immediate plans</p>",
        "id": 188119569,
        "sender_full_name": "matklad",
        "timestamp": 1581609362
    },
    {
        "content": "<p>and it might make more sense to just optimize data structures though</p>",
        "id": 188119620,
        "sender_full_name": "matklad",
        "timestamp": 1581609377
    },
    {
        "content": "<p>sounds good! Thanks for the super rapid answers to all my questions :D</p>",
        "id": 188119650,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581609405
    },
    {
        "content": "<p>basically, we are roughtly 30% into \"make it work\" phase, we haven't started on \"make it fast/make it smol\" yet :)</p>",
        "id": 188119656,
        "sender_full_name": "matklad",
        "timestamp": 1581609407
    },
    {
        "content": "<p>unfortunately, I still need to generate Cargo.toml files for people using RLS :(<br>\nbut this should be a superior workflow</p>",
        "id": 188119811,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581609487
    },
    {
        "content": "<p>That's not officially decided, but we might want to deprecate RLS soon</p>",
        "id": 188120151,
        "sender_full_name": "matklad",
        "timestamp": 1581609668
    },
    {
        "content": "<p>I would like you to come and tell people here that their workflow is broken. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 188120226,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581609722
    },
    {
        "content": "<p>but yeah, that totally makes sense</p>",
        "id": 188120272,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581609731
    },
    {
        "content": "<p>the people using intelij are not gonna be happy when I remove Cargo.toml support though</p>",
        "id": 188120311,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581609757
    },
    {
        "content": "<p>It should be not that hard to add rust-project.json support to IntelliJ </p>\n<p>cc <span class=\"user-mention\" data-user-id=\"200750\">@Vlad</span> , wdyt about quasi-standard Cargo-independent way to describe rust-projects?</p>",
        "id": 188120428,
        "sender_full_name": "matklad",
        "timestamp": 1581609837
    },
    {
        "content": "<p>Just as a sidenote: I would suggest not using <code>.json</code> format for such config files, <code>.toml</code> or as a last resort <code>.yaml</code> are much better for this ...</p>",
        "id": 188121708,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581610551
    },
    {
        "content": "<p>why?</p>",
        "id": 188121858,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581610623
    },
    {
        "content": "<p>This is intended to be a machine-generated files, and it's usually easier to produce and consume JSON than human readable format.</p>",
        "id": 188121868,
        "sender_full_name": "matklad",
        "timestamp": 1581610631
    },
    {
        "content": "<p>I actively war against yaml :P</p>",
        "id": 188121938,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581610659
    },
    {
        "content": "<p>even for human readable</p>",
        "id": 188121942,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581610664
    },
    {
        "content": "<p>Though, we probably could use TOML, as the nesting is shallow</p>",
        "id": 188121947,
        "sender_full_name": "matklad",
        "timestamp": 1581610669
    },
    {
        "content": "<p>I'd really prefer json tbh. Most build system tooling already has a way to consume JSON</p>",
        "id": 188122023,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581610699
    },
    {
        "content": "<p>TOML is very rust ecosystem centric</p>",
        "id": 188122036,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581610709
    },
    {
        "content": "<p>and yeah, yaml is not my cup of tea. At least 30% of my \"fix CI\" commits are about fixing yaml syntax</p>",
        "id": 188122043,
        "sender_full_name": "matklad",
        "timestamp": 1581610713
    },
    {
        "content": "<blockquote>\n<p>TOML is very rust ecosystem centric</p>\n</blockquote>\n<p>I think Go uses Toml as well though?</p>",
        "id": 188122077,
        "sender_full_name": "matklad",
        "timestamp": 1581610737
    },
    {
        "content": "<p>but yeah, agree that JSON is less weird  option</p>",
        "id": 188122108,
        "sender_full_name": "matklad",
        "timestamp": 1581610755
    },
    {
        "content": "<p>I just turned around and asked someone who works on Go</p>\n<p>\"It does not\"</p>",
        "id": 188122174,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581610797
    },
    {
        "content": "<p>If this is machine-generated and nothing more, than alright...<br>\nIt's just <code>.json</code> doesn't natively support comments, may be quite verbose and it's just my gory experience of <code>.json</code> programming (i.e. imitating function call syntax and in fact writing programs with logic in <code>.json</code> files...)</p>",
        "id": 188122271,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581610830
    },
    {
        "content": "<p>back to the quasi-standard, that would make me very happy</p>",
        "id": 188122360,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581610876
    },
    {
        "content": "<p>ah, that was <code>go dep</code>, which was subsumed by go mod: <a href=\"https://github.com/golang/dep/blob/master/Gopkg.toml\" target=\"_blank\" title=\"https://github.com/golang/dep/blob/master/Gopkg.toml\">https://github.com/golang/dep/blob/master/Gopkg.toml</a></p>",
        "id": 188122361,
        "sender_full_name": "matklad",
        "timestamp": 1581610879
    },
    {
        "content": "<p>I've basically removed Cargo usage from our project with the exception of vendoring</p>",
        "id": 188122396,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581610902
    },
    {
        "content": "<p>and needing any form of the files makes my life very frustrating</p>",
        "id": 188122421,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581610917
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"217516\">@Benjamin Brittain</span> , might I ask why do you drop cargo?</p>",
        "id": 188122499,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581610940
    },
    {
        "content": "<p>because we have a lot of cross-language dependencies and a large amount of infrastructure dedicated to other build systems</p>",
        "id": 188122585,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581610999
    },
    {
        "content": "<p>Cargo also has many pain points once you grow to be a large project</p>",
        "id": 188122610,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581611014
    },
    {
        "content": "<p>where large means 10k+ individual targets</p>",
        "id": 188122699,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581611051
    },
    {
        "content": "<p>And what do you do you to replace cargo?</p>",
        "id": 188122953,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581611194
    },
    {
        "content": "<p>I thought cargo was supposed to simplify all that build systems configuration stuff</p>",
        "id": 188123017,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581611238
    },
    {
        "content": "<p>most people aren't building operating systems</p>",
        "id": 188123044,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581611252
    },
    {
        "content": "<p>in this case, GN</p>",
        "id": 188123053,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581611257
    },
    {
        "content": "<p><a href=\"https://gn.googlesource.com/gn\" target=\"_blank\" title=\"https://gn.googlesource.com/gn\">https://gn.googlesource.com/gn</a></p>",
        "id": 188123054,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581611258
    },
    {
        "content": "<p>See also <a href=\"https://rust-lang.github.io/rfcs/2136-build-systems.html\" target=\"_blank\" title=\"https://rust-lang.github.io/rfcs/2136-build-systems.html\">https://rust-lang.github.io/rfcs/2136-build-systems.html</a></p>",
        "id": 188123087,
        "sender_full_name": "matklad",
        "timestamp": 1581611277
    },
    {
        "content": "<p>Basically, \"integration with other build system\" is a problem on which Cargo team spend a couple of years on and off, and which wasn't resolved in a satisfactory way.</p>",
        "id": 188123186,
        "sender_full_name": "matklad",
        "timestamp": 1581611317
    },
    {
        "content": "<p>It's also really hard to justify working on</p>",
        "id": 188123218,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581611330
    },
    {
        "content": "<p>like, we can just throw people at the problem to make it go away</p>",
        "id": 188123255,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581611351
    },
    {
        "content": "<p>and most people using their own build system can do that</p>",
        "id": 188123279,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581611361
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>    let project = json!({\n        &quot;roots&quot;: [path],\n        &quot;crates&quot;: [ {\n            &quot;root_module&quot;: path.join(&quot;src/lib.rs&quot;),\n            &quot;deps&quot;: [],\n            &quot;edition&quot;: &quot;2015&quot;,\n            &quot;atom_cfgs&quot;: [],\n            &quot;key_value_cfgs&quot;: {}\n        } ]\n    });\n</pre></div>",
        "id": 188126747,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581613435
    },
    {
        "content": "<p>ok, some of that is obvious</p>",
        "id": 188126820,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581613465
    },
    {
        "content": "<p>what is <code>atom_cfgs</code> &amp; <code>key_value_cfgs</code></p>",
        "id": 188126848,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581613479
    },
    {
        "content": "<p>that's <code>--cfg</code> flags you pass on the command line</p>",
        "id": 188126870,
        "sender_full_name": "matklad",
        "timestamp": 1581613497
    },
    {
        "content": "<p>NICE</p>",
        "id": 188126881,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581613504
    },
    {
        "content": "<p>which are either <code>--cfg=foo</code>, or <code>--cfg=foo=bar</code></p>",
        "id": 188126898,
        "sender_full_name": "matklad",
        "timestamp": 1581613514
    },
    {
        "content": "<p>yeah, that makes total sense now</p>",
        "id": 188126922,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581613535
    },
    {
        "content": "<p>So, in theory, you can instantiate the same crate with two sets of different cfgs</p>",
        "id": 188126929,
        "sender_full_name": "matklad",
        "timestamp": 1581613537
    },
    {
        "content": "<p>uh, I do need to do that <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 188126956,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581613553
    },
    {
        "content": "<p>host side &amp; target side compilation is very common</p>",
        "id": 188127012,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581613565
    },
    {
        "content": "<p>Yeah, in theory you should be able to have diffrent target-trippled crates in the same graph</p>",
        "id": 188127104,
        "sender_full_name": "matklad",
        "timestamp": 1581613654
    },
    {
        "content": "<p>Though i am not sure if that would <em>just</em> work in practice. We do some sniffing of <code>rustc --print cfg</code>, whcih just uses HOST, but I think rust-project.json should override that</p>",
        "id": 188127221,
        "sender_full_name": "matklad",
        "timestamp": 1581613711
    },
    {
        "content": "<p>ok, about to take a crack at this.</p>\n<p>deps are just the crate_name and r-a handles the resolution?</p>",
        "id": 188137362,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581619929
    },
    {
        "content": "<p>and <code>roots</code> is a scratch space?</p>",
        "id": 188137448,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581619996
    },
    {
        "content": "<p>each dep is something like <code>{\"crate\": 0, \"name\": \"crate_name\"}</code>, where the <code>0</code> is the index of the crate in the crates array, and the <code>\"crate_name\"</code> is the name of the dependency (think <code>rename</code> in cargo)</p>",
        "id": 188139395,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581621006
    },
    {
        "content": "<p>so no, you have to resolve it</p>",
        "id": 188139409,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581621013
    },
    {
        "content": "<p>interesting. so hypothetically It can handle crates with the same name?</p>",
        "id": 188139616,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581621156
    },
    {
        "content": "<p><code>roots</code> are the directories containing rust crates; RA will watch all rust code in each of these. All the crates must be in one of these, I think. I don't know if this affects anything else; RA has a notion of library roots, but I don't know how that maps to this</p>",
        "id": 188139619,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581621157
    },
    {
        "content": "<blockquote>\n<p>interesting. so hypothetically It can handle crates with the same name?</p>\n</blockquote>\n<p>well, basically crates just have no name in this model. the name is a property of the dependency edge</p>",
        "id": 188139666,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581621186
    },
    {
        "content": "<blockquote>\n<p>RA has a notion of library roots</p>\n</blockquote>\n<p>(the effect of this is that certain optimizations are activated that assume that the code in that root usually won't change)</p>",
        "id": 188139829,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581621258
    },
    {
        "content": "<p>I'll write a small test rust-project.json and see if it works the way I think</p>",
        "id": 188139848,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581621274
    },
    {
        "content": "<p>I'm very excited</p>",
        "id": 188139899,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581621304
    },
    {
        "content": "<p>ok, from reading the code it looks like we just consider all roots non-library for json projects, which is probably fair</p>",
        "id": 188139938,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581621348
    },
    {
        "content": "<p>note that you need to include the sysroot crates as well (i.e. <code>std</code> and so on), they aren't automatically added</p>",
        "id": 188140013,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581621380
    },
    {
        "content": "<p>yeah, that's fine</p>",
        "id": 188140020,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581621389
    },
    {
        "content": "<p>makes sense</p>",
        "id": 188140026,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581621394
    },
    {
        "content": "<p>how do I see R-A logs and whatnot?</p>",
        "id": 188141639,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581622347
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 188141658,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581622358
    },
    {
        "content": "<p>I started writting out a simple one by hand</p>\n<div class=\"codehilite\"><pre><span></span>    &quot;roots&quot;: [&quot;/usr/local/google/home/bwb/fuchsia/src/lib/zircon/rust/fuchsia-zircon-status/&quot;, &quot;/usr/local/google/home/bwb/fuchsia/out/default.zircon/user.vdso-x64-clang.shlib/gen/zircon/syscalls/&quot;],\n    &quot;crates&quot;: [\n      {\n        &quot;root_module&quot;: &quot;/usr/local/google/home/bwb/fuchsia/out/default.zircon/user.vdso-x64-clang.shlib/gen/zircon/syscalls/definitions.rs&quot;,\n        &quot;deps&quot;: [],\n        &quot;edition&quot;: &quot;2018&quot;,\n        &quot;atom_cfgs&quot;: [],\n        &quot;key_value_cfgs&quot;: {}\n      },\n      {\n        &quot;root_module&quot;: &quot;/usr/local/google/home/bwb/fuchsia/src/lib/zircon/rust/fuchsia-zircon-status/src/lib.rs&quot;,\n        &quot;deps&quot;: [ {&quot;crate&quot;: 0, &quot;name&quot;: &quot;fuchsia_zircon_sys&quot;} ],\n        &quot;edition&quot;: &quot;2018&quot;,\n        &quot;atom_cfgs&quot;: [],\n        &quot;key_value_cfgs&quot;: {}\n      }\n   ]\n}\n</pre></div>",
        "id": 188152985,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581628851
    },
    {
        "content": "<p>but it doesn't seem to pick up sys</p>",
        "id": 188153013,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581628866
    },
    {
        "content": "<p>also if you say <code>fuchsia-zircon-sys</code> r-a is _not happy_ <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 188153074,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581628899
    },
    {
        "content": "<p>anything I should fix before I go digging through the source code?</p>",
        "id": 188153174,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581628932
    },
    {
        "content": "<p>oh wait, I think it does work!</p>",
        "id": 188153436,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581629070
    },
    {
        "content": "<p>I just had a silly typo and it didn't surface the error</p>",
        "id": 188153448,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581629079
    },
    {
        "content": "<p>this is gonna be really slick</p>",
        "id": 188154228,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581629519
    },
    {
        "content": "<p>I'm very happy with this format</p>",
        "id": 188154272,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581629525
    },
    {
        "content": "<blockquote>\n<p>also if you say fuchsia-zircon-sys r-a is _not happy_ <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>\n</blockquote>\n<p>Because that's not a valid identifier. The name in the dep is literarly the identifier you'll use in an <code>.rs</code> file.</p>",
        "id": 188158640,
        "sender_full_name": "matklad",
        "timestamp": 1581632409
    },
    {
        "content": "<p>oh yeah, I know that</p>",
        "id": 188158691,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581632447
    },
    {
        "content": "<p>but we use dashes everywhere so I typed it in reflexivly</p>",
        "id": 188158708,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581632460
    },
    {
        "content": "<p>our build rules convert - to _</p>",
        "id": 188158736,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581632480
    },
    {
        "content": "<p>AND IT WORKS \\o/</p>",
        "id": 188165610,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581638343
    },
    {
        "content": "<p>it's amazing</p>",
        "id": 188165613,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581638346
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> thank you so much</p>",
        "id": 188165627,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581638355
    },
    {
        "content": "<p>I am extremely glad to receive the first report about rust-project.json actually working about a year after the feature was implemented :D</p>",
        "id": 188165955,
        "sender_full_name": "matklad",
        "timestamp": 1581638585
    },
    {
        "content": "<p>It's a little slow on startup, not sure how long r-a usually takes</p>",
        "id": 188166550,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581639193
    },
    {
        "content": "<p>only ~2k targets right now</p>",
        "id": 188166557,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581639205
    },
    {
        "content": "<p>we have more, but I've been using a subset</p>",
        "id": 188166619,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581639245
    },
    {
        "content": "<p>Yeah, as we don't save anything to disk, we need to run some analyzis on the startup</p>",
        "id": 188166641,
        "sender_full_name": "matklad",
        "timestamp": 1581639271
    },
    {
        "content": "<p>Though, it still should be significanlty faster than compiling the code</p>",
        "id": 188166653,
        "sender_full_name": "matklad",
        "timestamp": 1581639285
    },
    {
        "content": "<p>several orders of magnitude faster :)</p>",
        "id": 188166881,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581639597
    },
    {
        "content": "<p>Is there an easy way to convert Cargo.toml output into this format?</p>",
        "id": 188168522,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581641306
    },
    {
        "content": "<p>although I'm about to remove it, our third_party code builds with Cargo right now</p>",
        "id": 188168558,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581641384
    },
    {
        "content": "<p>I have a plan that will almost work, but it'd be nice to leverage cargo to do the work for me</p>",
        "id": 188168612,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581641414
    },
    {
        "content": "<p>Nope, there isn't such a way</p>",
        "id": 188168751,
        "sender_full_name": "matklad",
        "timestamp": 1581641636
    },
    {
        "content": "<p>that's fine. that's _very niche_</p>",
        "id": 188168796,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581641650
    },
    {
        "content": "<p>even more than using this format at all</p>",
        "id": 188168806,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581641664
    },
    {
        "content": "<p>ok, it was surprisingly easy to walk a vendored cargo.toml setup and generate this</p>",
        "id": 188172184,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581645825
    },
    {
        "content": "<p>So it <em>looks</em> like everything is working, but it debug prints unresolved imports. Any way to get access to that so I can figure out how to make this perfct?</p>",
        "id": 188242265,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581711361
    },
    {
        "content": "<blockquote>\n<p>but it debug prints unresolved imports</p>\n</blockquote>\n<p>Hm, not sure I understad what happes</p>",
        "id": 188242327,
        "sender_full_name": "matklad",
        "timestamp": 1581711396
    },
    {
        "content": "<p>Could you show what exactly is printed where?</p>",
        "id": 188242337,
        "sender_full_name": "matklad",
        "timestamp": 1581711410
    },
    {
        "content": "<p>\"name resolution is stuck\"</p>",
        "id": 188242358,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581711436
    },
    {
        "content": "<p>which looks like it happens when resolving imports<br>\n<code>[ERROR ra_hir_def::nameres::collector] name resolution is stuck</code></p>",
        "id": 188242394,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581711469
    },
    {
        "content": "<p>oh, interesting</p>",
        "id": 188242488,
        "sender_full_name": "matklad",
        "timestamp": 1581711533
    },
    {
        "content": "<p>It tried resolving imports 1000 times (any reason for this constant?) , then gave up</p>",
        "id": 188242495,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581711543
    },
    {
        "content": "<p>THat's basically a rust-analyzer requivalent of ICE</p>",
        "id": 188242502,
        "sender_full_name": "matklad",
        "timestamp": 1581711552
    },
    {
        "content": "<p>This should not be happening</p>",
        "id": 188242509,
        "sender_full_name": "matklad",
        "timestamp": 1581711559
    },
    {
        "content": "<p>hahaha</p>",
        "id": 188242515,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581711563
    },
    {
        "content": "<p>I make rustc ICE regularly. this doesn't seem atypical to me :P</p>",
        "id": 188242533,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581711582
    },
    {
        "content": "<blockquote>\n<p>It tried resolving imports 1000 times (any reason for this constant?) , then gave up</p>\n</blockquote>\n<p>That's just a safeguard: we can not afford to spin indefinitelly even in the case of bugs.</p>",
        "id": 188242543,
        "sender_full_name": "matklad",
        "timestamp": 1581711594
    },
    {
        "content": "<p>how many times is this loop usually called?</p>",
        "id": 188242617,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581711625
    },
    {
        "content": "<p>is this just because of the 2k+ crates?</p>",
        "id": 188242623,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581711633
    },
    {
        "content": "<p>I don't know anything about how this is architected, sorry for the potentially silly questions</p>",
        "id": 188242659,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581711664
    },
    {
        "content": "<p>IDE sees all kinds of wired incomplete code code, so it tends to crash more often than a compiler. Moreover, the cost of IDE crash is much higher, because it's a long-lived process, and not a batch one. For this reason, we embrace the existance of bugs and try to mitigate their consequences</p>",
        "id": 188242698,
        "sender_full_name": "matklad",
        "timestamp": 1581711697
    },
    {
        "content": "<p>this might just be that I don't have CFGs wired properly then and it thinks a lot of code is perpetually incomplete</p>",
        "id": 188242800,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581711743
    },
    {
        "content": "<blockquote>\n<p>21:20</p>\n</blockquote>\n<p>how many times is this loop usually called?</p>\n<p>I haen't measured, but I'd expect less than a dozen calls for typical usecases. I don't think this relates to the number of crates. Rather, it's more likely that, among all that code, there's  a particular code pattern that exposes a buggy behavior in our name resolution</p>",
        "id": 188242833,
        "sender_full_name": "matklad",
        "timestamp": 1581711779
    },
    {
        "content": "<blockquote>\n<p>this might just be that I don't have CFGs wired properly then and it thinks a lot of code is perpetually incomplete</p>\n</blockquote>\n<p>Even if the code is completely broken, this loop should terminated</p>",
        "id": 188242877,
        "sender_full_name": "matklad",
        "timestamp": 1581711815
    },
    {
        "content": "<p>any guidance on gathering a repro?</p>",
        "id": 188242906,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581711842
    },
    {
        "content": "<p>Unfortunatelly we don't have infra for automatic minimization of such problems yet :(</p>",
        "id": 188242938,
        "sender_full_name": "matklad",
        "timestamp": 1581711845
    },
    {
        "content": "<p>aw :(</p>",
        "id": 188242950,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581711853
    },
    {
        "content": "<p>so yeah, at the moment we just manually minize such bugs, which is a huge time sink</p>",
        "id": 188242977,
        "sender_full_name": "matklad",
        "timestamp": 1581711878
    },
    {
        "content": "<p><a href=\"http://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\" target=\"_blank\" title=\"http://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\">http://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/</a></p>",
        "id": 188243029,
        "sender_full_name": "bjorn3",
        "timestamp": 1581711915
    },
    {
        "content": "<p>that doesn't seem relevant to logic level errors like this, that seems more targeted at compilation failures</p>",
        "id": 188243180,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581712017
    },
    {
        "content": "<p>I also remember a program that does the first step of minimizing rust code, but I can't remember it's name.</p>",
        "id": 188243200,
        "sender_full_name": "bjorn3",
        "timestamp": 1581712033
    },
    {
        "content": "<p>I have written no rust code to generate this behaviour</p>",
        "id": 188243305,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581712084
    },
    {
        "content": "<p>Csmith is supposedly also useful, even though it is technically made for C, not Rust.</p>\n<p>Edit: wrong name, meant creduce</p>",
        "id": 188243578,
        "sender_full_name": "bjorn3",
        "timestamp": 1581712252
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/rust-project.2Ejson/near/188243200\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/rust-project.2Ejson/near/188243200\">said</a>:</p>\n<blockquote>\n<p>I also remember a program that does the first step of minimizing rust code, but I can't remember it's name.</p>\n</blockquote>\n<p>Found it: <a href=\"https://github.com/jethrogb/rust-reduce\" target=\"_blank\" title=\"https://github.com/jethrogb/rust-reduce\">https://github.com/jethrogb/rust-reduce</a></p>",
        "id": 188243710,
        "sender_full_name": "bjorn3",
        "timestamp": 1581712340
    },
    {
        "content": "<p>Another thing that helps here is batch mode for rust-analyzer:  <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/6711335173f138d444049357495fb2785c2bdd0b/crates/ra_cli/src/main.rs#L83\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/6711335173f138d444049357495fb2785c2bdd0b/crates/ra_cli/src/main.rs#L83\">https://github.com/rust-analyzer/rust-analyzer/blob/6711335173f138d444049357495fb2785c2bdd0b/crates/ra_cli/src/main.rs#L83</a></p>",
        "id": 188243758,
        "sender_full_name": "matklad",
        "timestamp": 1581712383
    },
    {
        "content": "<p>Basically, it asks ra to fully type-check the crate, so it's easy to check if things are broken without restarting LSP server</p>",
        "id": 188243803,
        "sender_full_name": "matklad",
        "timestamp": 1581712428
    },
    {
        "content": "<p>But it is hard-coded for cargo atm: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/6fb36dfdcb91f67c28f51e51514ebe420ec3aa22/crates/ra_cli/src/analysis_stats.rs#L24\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/6fb36dfdcb91f67c28f51e51514ebe420ec3aa22/crates/ra_cli/src/analysis_stats.rs#L24\">https://github.com/rust-analyzer/rust-analyzer/blob/6fb36dfdcb91f67c28f51e51514ebe420ec3aa22/crates/ra_cli/src/analysis_stats.rs#L24</a></p>",
        "id": 188243871,
        "sender_full_name": "matklad",
        "timestamp": 1581712464
    },
    {
        "content": "<p>cool. I'll give that a try shortly, want to land a few things first</p>",
        "id": 188244041,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581712589
    },
    {
        "content": "<p>should also be straightforward to break this down to subsections of our build graph programatically</p>",
        "id": 188244214,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581712712
    },
    {
        "content": "<p>that could be helpful</p>",
        "id": 188244219,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581712716
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/3149\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/3149\">https://github.com/rust-analyzer/rust-analyzer/issues/3149</a></p>",
        "id": 188245888,
        "sender_full_name": "matklad",
        "timestamp": 1581713863
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"217516\">@Benjamin Brittain</span> one thing I would try first is probably just bumping that limit to 10k. Like, my understanding of the code is that this loop should be really really shallow, but it <em>might</em> be the case that my understanding is wrong, and you ineed hit the limit due to share size. I think this is unlikely, but it is much cheaper to check than doing actual minimization.</p>",
        "id": 188246001,
        "sender_full_name": "matklad",
        "timestamp": 1581713951
    },
    {
        "content": "<p>very true <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 188246037,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581713983
    },
    {
        "content": "<p>I bumped it up to 10k and the error hasn't show up yet</p>",
        "id": 188247340,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581714697
    },
    {
        "content": "<p>Wow, that means that my understanding is waaaay offf. We need to completely rewrite that bit of code anyway....</p>",
        "id": 188247434,
        "sender_full_name": "matklad",
        "timestamp": 1581714752
    },
    {
        "content": "<p>as a temporary workaround: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/3150\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/3150\">https://github.com/rust-analyzer/rust-analyzer/pull/3150</a></p>",
        "id": 188247768,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581715030
    },
    {
        "content": "<p>I look forward to submitting repros in the future though :)</p>",
        "id": 188248247,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1581715324
    },
    {
        "content": "<p>IIRC，that loop also handle recursive macro expansion in item scopes</p>",
        "id": 188268053,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1581739594
    },
    {
        "content": "<p>Ok! So people are actually using it now</p>",
        "id": 191029361,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584559244
    },
    {
        "content": "<p>and are pretty happy</p>",
        "id": 191029368,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584559249
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span></p>",
        "id": 191029391,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584559259
    },
    {
        "content": "<p>Only the early adopters though, so let's see what people say when I force their workflows to change <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 191029502,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584559316
    },
    {
        "content": "<p>actually, I'm personally attempting to use LSP for the first time.</p>\n<p>Is there a way to make <code>rust-analyzer</code> hang around? I use vim and I open and close all the time</p>",
        "id": 191030259,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584559675
    },
    {
        "content": "<p>I'd rather not have it reindex every single time, it takes a while</p>",
        "id": 191030327,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584559696
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"217516\">@Benjamin Brittain</span> I think this needs to be fixed on the editor side: rust-analyzer is indeed designed to stick around, vim should somehow persist it.</p>",
        "id": 191030478,
        "sender_full_name": "matklad",
        "timestamp": 1584559794
    },
    {
        "content": "<p>makes perfect sense! I'll write some horrible vimscript then</p>",
        "id": 191030622,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584559835
    },
    {
        "content": "<p>I resent having any knowledge of vimscript</p>",
        "id": 191030670,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584559857
    },
    {
        "content": "<p>I <em>think</em> ideally it should be handled by the LSP plugin on the vim's side... Don't know whom to cc for vim+rust-analyzer expertise though, I can only give advice about VS Code and Emacs :Ь</p>",
        "id": 191030896,
        "sender_full_name": "matklad",
        "timestamp": 1584559972
    },
    {
        "content": "<p>honestly, all the vim lsp options are pretty horrible looking</p>",
        "id": 191030953,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584560008
    },
    {
        "content": "<p>I've heard good things about coc.rust-analyzer</p>",
        "id": 191030985,
        "sender_full_name": "matklad",
        "timestamp": 1584560028
    },
    {
        "content": "<p><a href=\"https://github.com/fannheyward/coc-rust-analyzer\" target=\"_blank\" title=\"https://github.com/fannheyward/coc-rust-analyzer\">https://github.com/fannheyward/coc-rust-analyzer</a></p>",
        "id": 191030999,
        "sender_full_name": "matklad",
        "timestamp": 1584560040
    },
    {
        "content": "<p>I'm not willing to let it shell out to <code>node</code> unfortunately</p>",
        "id": 191031109,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584560087
    },
    {
        "content": "<p>I've tried switching to  the pre-release version of<code>nvim</code> 0.5 since it has built-in lsp. It seems to be working well actually</p>",
        "id": 191031186,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584560134
    },
    {
        "content": "<p>Yeah, totally understandable. This actually is I think a problem with LSP adoption across editors different from VS Code. </p>\n<p>Microsoft are doing something very far-sighted here. They provide high-level API to VS Code for plugins for things like completion and goto definition. They maintain <code>lsp-vscode</code> library, which is a, well, <em>library</em> to bind VS Code API to LSP processes.  For each language, community maintains a language-specific plugin which uses the library. So, the maintenance is distributed, for each language you need to install a separate plugin, which can be pretty high-quality and specialized. </p>\n<p>Other editors in contrast try to do a single universal things: an LSP plugin which simultaneously supports all languages and maps LSP concepts directly to low-level editor's UI elements.</p>",
        "id": 191031974,
        "sender_full_name": "matklad",
        "timestamp": 1584560530
    },
    {
        "content": "<p>Yeah, I've been using coc.vim but I really resent the node server running in the background</p>",
        "id": 191032477,
        "sender_full_name": "mark-i-m",
        "timestamp": 1584560795
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"217516\">@Benjamin Brittain</span> how did you get the nvim 0.5 lsp to work? I never figured it out</p>",
        "id": 191032523,
        "sender_full_name": "mark-i-m",
        "timestamp": 1584560819
    },
    {
        "content": "<p>Also, I agree with everything you said</p>",
        "id": 191032552,
        "sender_full_name": "mark-i-m",
        "timestamp": 1584560831
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>&quot; lsp support\nlua &lt;&lt; EOF\n\nlocal nvim_lsp = require&#39;nvim_lsp&#39;\nlocal util = require &#39;nvim_lsp/util&#39;\n\nrequire&#39;nvim_lsp&#39;.rust_analyzer.setup({\n  root_dir = util.root_pattern(&quot;rust-project.json&quot;);\n  log_level = vim.lsp.protocol.MessageType.Log;\n  message_level = vim.lsp.protocol.MessageType.Log;\n})\nEOF\nautocmd Filetype rust setlocal omnifunc=v:lua.vim.lsp.omnifunc\n\nnnoremap &lt;silent&gt; K     &lt;cmd&gt;lua vim.lsp.buf.hover()&lt;CR&gt;\n</pre></div>",
        "id": 191032731,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584560933
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198054\">@mark-i-m</span> That's what's in my config right now</p>",
        "id": 191032793,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584560962
    },
    {
        "content": "<p>although, you don't want that <code>root_dir</code> line</p>",
        "id": 191032808,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584560969
    },
    {
        "content": "<p>I'm trying to figure out what the other <code>vim.lsp.buf.*</code> commands do. Basically nothing is documented</p>",
        "id": 191032949,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584561025
    },
    {
        "content": "<p>Thanks I will try that out</p>",
        "id": 191033487,
        "sender_full_name": "mark-i-m",
        "timestamp": 1584561292
    },
    {
        "content": "<p>This is what I currently use for coc.vim: <a href=\"https://github.com/mark-i-m/dotfiles/blob/464b7f46e52a72896dd485ea2bf63d5b94881cc8/vim/.vimrc#L24-L59\" target=\"_blank\" title=\"https://github.com/mark-i-m/dotfiles/blob/464b7f46e52a72896dd485ea2bf63d5b94881cc8/vim/.vimrc#L24-L59\">https://github.com/mark-i-m/dotfiles/blob/464b7f46e52a72896dd485ea2bf63d5b94881cc8/vim/.vimrc#L24-L59</a></p>",
        "id": 191033499,
        "sender_full_name": "mark-i-m",
        "timestamp": 1584561301
    },
    {
        "content": "<p>I'm sure you've seen it by now, but <code>:help lsp</code> contains some info</p>",
        "id": 191033996,
        "sender_full_name": "mark-i-m",
        "timestamp": 1584561531
    },
    {
        "content": "<p>yeah, it's helpful</p>",
        "id": 191034106,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584561592
    },
    {
        "content": "<p>what's a good heuristic for shutting down rust-analyzer <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 191034192,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584561609
    },
    {
        "content": "<p>running it in the background is great, but I'd like it to turn itself off it's not used for a while</p>",
        "id": 191034241,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584561634
    },
    {
        "content": "<p>especially since it's a bit of a RAM hog</p>",
        "id": 191034301,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584561663
    },
    {
        "content": "<p>Perhaps just do something simple... no commands in N min -&gt; shut down</p>",
        "id": 191034378,
        "sender_full_name": "mark-i-m",
        "timestamp": 1584561704
    },
    {
        "content": "<p>It's a starting point</p>",
        "id": 191034393,
        "sender_full_name": "mark-i-m",
        "timestamp": 1584561710
    },
    {
        "content": "<p><a href=\"https://github.com/neovim/nvim-lsp/pull/175\" target=\"_blank\" title=\"https://github.com/neovim/nvim-lsp/pull/175\">https://github.com/neovim/nvim-lsp/pull/175</a></p>",
        "id": 191038661,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584563855
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"217516\">@Benjamin Brittain</span>  I just came across this <a href=\"https://github.com/neovim/neovim/issues/11389\" target=\"_blank\" title=\"https://github.com/neovim/neovim/issues/11389\">https://github.com/neovim/neovim/issues/11389</a>... still looking through but perhaps there are some useful examples</p>",
        "id": 191043565,
        "sender_full_name": "mark-i-m",
        "timestamp": 1584566333
    },
    {
        "content": "<p>oh my, I'm excited to figure out rename :D</p>",
        "id": 191044023,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584566590
    },
    {
        "content": "<p>does rust-analyzer have a singleton pattern? If you launch it twice what happens?</p>",
        "id": 191044145,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584566644
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>bwb@bwb ~ $ rust-analyzer --help\nError: Invalid flags: --help\n\n   0: core::result::Result&lt;T,E&gt;::or_else\n   1: rust_analyzer::args::Args::parse\n   2: rust_analyzer::main\n   3: std::rt::lang_start::{{closure}}\n   4: std::rt::lang_start_internal::{{closure}}\n             at src/libstd/rt.rs:52\n      std::panicking::try::do_call\n             at src/libstd/panicking.rs:303\n   5: __rust_maybe_catch_panic\n             at src/libpanic_unwind/lib.rs:86\n   6: std::panicking::try\n             at src/libstd/panicking.rs:281\n      std::panic::catch_unwind\n             at src/libstd/panic.rs:394\n      std::rt::lang_start_internal\n             at src/libstd/rt.rs:51\n   7: main\n   8: __libc_start_main\n   9: _start\n</pre></div>",
        "id": 191044200,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584566676
    },
    {
        "content": "<p>:(</p>",
        "id": 191044204,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584566679
    },
    {
        "content": "<p><code>rust-analyzer help</code></p>",
        "id": 191044708,
        "sender_full_name": "Laurențiu",
        "timestamp": 1584567005
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>bwb@bwb ~ $ rust-analyzer help\nra-cli\n\nUSAGE:\n    rust-analyzer &lt;SUBCOMMAND&gt;\n\nFLAGS:\n    -h, --help        Prints help information\n</pre></div>\n\n\n<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 191044811,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584567072
    },
    {
        "content": "<p>Yeah, small bug. And it says <code>ra-cli</code> instead of <code>rust-analyzer</code></p>",
        "id": 191044916,
        "sender_full_name": "Laurențiu",
        "timestamp": 1584567126
    },
    {
        "content": "<p>what happens if two rust-analyzers are running at the same time?</p>",
        "id": 191045021,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584567202
    },
    {
        "content": "<p>They don't interact. With LSP the client talks to the server via the standard input and output, and <code>rust-analyzer</code> doesn't fork to the background or anything like that.</p>",
        "id": 191045172,
        "sender_full_name": "Laurențiu",
        "timestamp": 1584567262
    },
    {
        "content": "<p>oh, that's somewhat upsetting</p>",
        "id": 191045201,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584567279
    },
    {
        "content": "<p>good to know though</p>",
        "id": 191045215,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584567285
    },
    {
        "content": "<p>I didn't realize LSP used stdin/stdout. That makes sense for the behavior I've seen though</p>",
        "id": 191045264,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584567317
    },
    {
        "content": "<p>You _could_ write a wrapper that keeps one running instance and forwards requests to it, but it would probably be easy to end up with inconsistencies</p>",
        "id": 191045506,
        "sender_full_name": "Laurențiu",
        "timestamp": 1584567459
    },
    {
        "content": "<p>There isn't really another option right now. Using <code>vim</code> frequently involves opening and closing buffers rapidly. rust-analyzer can take up to 30 seconds to be responsive on our codebase</p>",
        "id": 191045663,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584567538
    },
    {
        "content": "<p>E.g. the server can send notifications to the editor (there's one for \"workspace loaded\") and if you start a second client at a later time there will be no workspace loaded notification for it.</p>",
        "id": 191045692,
        "sender_full_name": "Laurențiu",
        "timestamp": 1584567552
    },
    {
        "content": "<p>Does that still happen in nvim 0.5?</p>",
        "id": 191045748,
        "sender_full_name": "Laurențiu",
        "timestamp": 1584567597
    },
    {
        "content": "<p>the speed is related to r-a, not nvim</p>",
        "id": 191045804,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584567612
    },
    {
        "content": "<p>I meant restarting the server when you open a file</p>",
        "id": 191045910,
        "sender_full_name": "Laurențiu",
        "timestamp": 1584567669
    },
    {
        "content": "<p>sorry, using vim, at least how I do, frequently involves closing <em>all of vim</em>, running some commands, then loading it again</p>",
        "id": 191046068,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584567738
    },
    {
        "content": "<p>not just buffer manipulation</p>",
        "id": 191046081,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584567748
    },
    {
        "content": "<p>Can you.. suspend it? <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 191046144,
        "sender_full_name": "Laurențiu",
        "timestamp": 1584567786
    },
    {
        "content": "<p>haaa</p>",
        "id": 191046174,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584567800
    },
    {
        "content": "<p>I guess, but what if I'm opening a different file? :)</p>",
        "id": 191046204,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584567818
    },
    {
        "content": "<p>Or use one of those fancy file pickers?</p>",
        "id": 191046284,
        "sender_full_name": "Laurențiu",
        "timestamp": 1584567850
    },
    {
        "content": "<p>oh noes. stop trying to turn my vim into an ide <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 191046307,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584567864
    },
    {
        "content": "<p>I recognize lsp was very much designed for an IDE experience though</p>",
        "id": 191046346,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584567884
    },
    {
        "content": "<p>I hope we'll be able to either dump the database on exit or always keep it on disk, but it hasn't been a priority</p>",
        "id": 191046550,
        "sender_full_name": "Laurențiu",
        "timestamp": 1584567976
    },
    {
        "content": "<p>It's a bit of a can of worms and other features might be more important in the long run, like making it faster even during the initial analysis</p>",
        "id": 191046712,
        "sender_full_name": "Laurențiu",
        "timestamp": 1584568081
    },
    {
        "content": "<p>yeah, it seems like a bad idea to commit to right now</p>",
        "id": 191046786,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584568105
    },
    {
        "content": "<p>eventually, for sure</p>",
        "id": 191046812,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584568120
    },
    {
        "content": "<p>oh no. I crashed rust-analyzer :(</p>",
        "id": 191046906,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584568190
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[ ERROR ] 2020-03-18T14:47:57Z-0700 ] /usr/local/share/nvim/runtime/lua/vim/lsp/rpc.lua:308 ]   &quot;rpc&quot;   &quot;rust-analyzer&quot;&quot;stderr&quot;        &quot;thread &#39;main&#39; panicked at &#39;Invalid request\\nMethod: textDocument/rename\\n error: missing field `newName`&#39;, crates/rust-analyzer/src/lib.rs&quot;\n</pre></div>",
        "id": 191046970,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584568211
    },
    {
        "content": "<p>to be fair, I did not give it a \"NewName\"</p>",
        "id": 191047006,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584568239
    },
    {
        "content": "<p>yeah, we don't expect people to violate the lsp protocol ;D</p>",
        "id": 191047064,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584568278
    },
    {
        "content": "<p>Does it really crash, or does it panic and carry on?</p>",
        "id": 191047097,
        "sender_full_name": "Laurențiu",
        "timestamp": 1584568301
    },
    {
        "content": "<p>nope, really crashes</p>",
        "id": 191047168,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584568330
    },
    {
        "content": "<p>panic and carry on seems ok to me</p>",
        "id": 191047193,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584568349
    },
    {
        "content": "<p>Yeah, we deliberately assume trusted client which sends correct requests at<br>\nus. This is to create more pressure to actually fix clients/servers.</p>",
        "id": 191047607,
        "sender_full_name": "matklad",
        "timestamp": 1584568570
    },
    {
        "content": "<p>to be clear, when you say \"trusted client\" you don't mean a security boundary, you mean a protocol trust boundary?</p>",
        "id": 191047732,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584568633
    },
    {
        "content": "<p>He means the human trust...</p>",
        "id": 191047884,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584568699
    },
    {
        "content": "<p>there's more to think about than humans when clients provide arbitrary buffers to the lsp server</p>",
        "id": 191047983,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584568751
    },
    {
        "content": "<p>But in some clients you can pretty much manually type the LSP requests. Crashing is a bit harsh then :-)</p>",
        "id": 191047991,
        "sender_full_name": "Laurențiu",
        "timestamp": 1584568754
    },
    {
        "content": "<p>E.g. if you mess up the <code>settings.json</code> with inappropriate configuration type value, we are going to crash very loudly and in some weird place</p>",
        "id": 191047996,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584568757
    },
    {
        "content": "<p>Its about vscode*</p>",
        "id": 191048050,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584568787
    },
    {
        "content": "<p>however, to recap, my concern is with the words \"trusted client\"</p>\n<p>Input is still validated, right?</p>",
        "id": 191048164,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584568814
    },
    {
        "content": "<p>I think it means \"non-buggy client\". I'm not sure if there are any security implications. If you can run <code>vim</code> and run <code>rust-analyzer</code>, even if you trick the latter into doing something bad, it's nothing you couldn't have done in <code>vim</code> already. It's the same argument as <a href=\"https://devblogs.microsoft.com/oldnewthing/20060508-22/?p=31283\" target=\"_blank\" title=\"https://devblogs.microsoft.com/oldnewthing/20060508-22/?p=31283\">https://devblogs.microsoft.com/oldnewthing/20060508-22/?p=31283</a>.</p>",
        "id": 191048421,
        "sender_full_name": "Laurențiu",
        "timestamp": 1584568944
    },
    {
        "content": "<p>I hate that article with a burning passion</p>",
        "id": 191048815,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584569161
    },
    {
        "content": "<p>software is composed with other bits of software in arbitrary and complex ways. Saying that it's not exploitable now is short-sighted</p>",
        "id": 191048902,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584569195
    },
    {
        "content": "<p>I'm not super worried about the security of the LSP engine in my life</p>",
        "id": 191048999,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584569256
    },
    {
        "content": "<p>but \"trusted client\" means something quite specific to me, which causes concern</p>",
        "id": 191049077,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584569290
    },
    {
        "content": "<p>So, we validate that requests confirm to the protocol and “crash<br>\ngracefully” (via assert and stack unwinding) if it is not the case. We can<br>\nreplace those asserts with error bubbling and reporting, but it doesn’t<br>\nreally make sense to me. “Typing requests by hand” is a use case where it<br>\nactually might make sense to not terminate outright, but this is pretty<br>\nniche.</p>\n<p>Security-wise, we also assume that everything is trusted. We don’t directly<br>\nexecute code today, but we, eg, run cargo check, which can run <a href=\"http://build.rs\" target=\"_blank\" title=\"http://build.rs\">build.rs</a>. At<br>\nsome point we’ll start executing proc macros, which are also arbitrary<br>\ncode. Memory-safety wise, rust-analyzer has very little unsafe in general,<br>\nexcept for syntax trees. Syntax trees are 100% cursed crazy unsafe code<br>\ninternally though, and, while safe interface should be fine, we haven’t<br>\ndone security oriented testing to make sure that everything is <strong>really</strong><br>\nas memory safe as we think.</p>\n<p>TL;DR it’s probably not a good idea to expose rust-analyzer via an<br>\nInternet-visible port.</p>",
        "id": 191049840,
        "sender_full_name": "matklad",
        "timestamp": 1584569799
    },
    {
        "content": "<blockquote>\n<p>but this is pretty niche.</p>\n</blockquote>\n<p>is it? I'm not doing anything atypical right now I think, just setting up vim</p>",
        "id": 191049968,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584569894
    },
    {
        "content": "<p>I disabled <code>cargo check</code> immediately :) but mostly because we don't have cargo</p>",
        "id": 191050061,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584569967
    },
    {
        "content": "<p>my point is that text editors are increasingly becoming \"internet-visible\" things</p>",
        "id": 191050161,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584570038
    },
    {
        "content": "<p>Yeah, that’s true, but we need to <strong>support</strong> arbitrary code execution for<br>\nproc macros, and that restricts the threat model to “everything should be<br>\nfine”. <strong>If</strong> proc macros move to some kind of wasm sandbox, rust-analyzer<br>\nwill be able to provide good security, as it’ll guarantee no I/O except for<br>\nstdin/stdout/stderr and memory safety, but for the time being we are not<br>\nexplicitly testing for that.</p>",
        "id": 191050792,
        "sender_full_name": "matklad",
        "timestamp": 1584570523
    },
    {
        "content": "<p>ugh, <a href=\"http://build.rs\" target=\"_blank\" title=\"http://build.rs\">build.rs</a> and proc-macros. The banes of my existence</p>",
        "id": 191051093,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584570691
    },
    {
        "content": "<p>yup, that makes sense to me</p>",
        "id": 191051114,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584570709
    },
    {
        "content": "<p>I wouldn't say trusted client though, compliant client doesn't set the same alarm bells off</p>",
        "id": 191051174,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584570736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"217516\">@Benjamin Brittain</span> I've given up on nvim-lsp again for now... but I would love to hear if you make progress on stuff!</p>",
        "id": 191051369,
        "sender_full_name": "mark-i-m",
        "timestamp": 1584570871
    },
    {
        "content": "<p>It's working fantastic for me! I'm trying to figure out how to send arbitrary stuff right now</p>",
        "id": 191051408,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584570900
    },
    {
        "content": "<p>but I haven't touched lua in years and I don't know the lsp protocol :)</p>",
        "id": 191051439,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584570916
    },
    {
        "content": "<p>I'll post my config here when I'm all done</p>",
        "id": 191051491,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584570960
    },
    {
        "content": "<p>every time I open a file now my fans goes crazy <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 191055374,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1584573625
    },
    {
        "content": "<p>This seems interesting. I have been wanting to try and automatically toml -&gt; json but add on json-ld schema in the conversion process, I wonder how open you are to having a json-ld schema for rust-project.json?</p>",
        "id": 191421612,
        "sender_full_name": "matt rice",
        "timestamp": 1584918984
    },
    {
        "content": "<p>I'd start with just documenting rust-project.json. I don't think its stable or complex enough to really benefit from a formal schema</p>",
        "id": 191446583,
        "sender_full_name": "matklad",
        "timestamp": 1584954292
    },
    {
        "content": "<p>Not heard about json-ld, but making a <a href=\"https://json-schema.org/\" target=\"_blank\" title=\"https://json-schema.org/\"><code>json-schema</code></a> will be beneficial for the user experience. VSCode provides a <a href=\"https://code.visualstudio.com/api/references/contribution-points#contributes.jsonValidation\" target=\"_blank\" title=\"https://code.visualstudio.com/api/references/contribution-points#contributes.jsonValidation\">json schema validation contribution point</a>. By supplying that, the editor will be able to give the users IntelliSense in the <code>rust-project.json</code> file similarly to how it does in <code>settings.json</code></p>",
        "id": 191457870,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584961391
    },
    {
        "content": "<p>Glad I asked first then.  Not really familiar with json-schema, what I like about json-ld, is the ability to avoid fields like cargo's package.metadata, because its validating the contents rather than the file as a whole thing, so you can tell this field belongs to this schema and some other field another.  I don't really see that from the few json-schema examples i've seen.  Anyhow I don't want to press the issue really.</p>",
        "id": 191480898,
        "sender_full_name": "matt rice",
        "timestamp": 1584973925
    }
]