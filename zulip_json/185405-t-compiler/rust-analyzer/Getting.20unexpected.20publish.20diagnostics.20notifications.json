[
    {
        "content": "<p>Hello again! I noticed something in my workflow that I'm not sure if it's a client issue or server issue, but for one it seems like it doesn't happen with for example the Go language server.</p>\n<p>The issue I'm seeing is something like this: if I enter insert mode in vim and say I add 10 lines all of which have a diagnostic to be reported, then I leave insert mode, everything is fine at this point. When I save that file though, and the client sends the did_save notification, the server eventually ends up sending 10 publish diagnostics notifications to the client, and it seems like they are incrementally reporting the diagnostics. So for example, the first  notification has one the first diagnostic, the second notification has the first two diagnostics, the third notification has the first three, etc. Is this a known issue? Or is this some sort of incremental approach that is expected?</p>",
        "id": 218129295,
        "sender_full_name": "Martin Asquino",
        "timestamp": 1606511378
    },
    {
        "content": "<p>Yeah, this does look like the expected behavior from looking at the code</p>",
        "id": 218129590,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606511681
    },
    {
        "content": "<p>Does it cause problems? Aside from being inefficient, of course</p>",
        "id": 218129598,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606511695
    },
    {
        "content": "<p>Not really causing issues no, I was just confused about it. I don't suppose you know why that is the case, but now I'm curious and I have to ask <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 218130021,
        "sender_full_name": "Martin Asquino",
        "timestamp": 1606512096
    },
    {
        "content": "<p>Each rustc diagnostics is received as a <code>flycheck::Message::AddDiagnostic</code> <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/rust-analyzer/src/main_loop.rs#L293\">here</a>. A <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/rust-analyzer/src/main_loop.rs#L360\">bit later</a> we check for file whose diagnostics changed, and send all diagnostics of that file to the client.</p>\n<p>Since both happens once per loop turn we'll resend all diagnostics of a file for every new rustc diagnostic.</p>",
        "id": 218130220,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606512287
    },
    {
        "content": "<p>The fix is to do the same thing we already do for VFS and PrimeCaches: Coalesce as many messages as possible from the flycheck receiver into a single loop turn.</p>",
        "id": 218130365,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606512455
    },
    {
        "content": "<p>oh ok so this is something that would be ideally fixed then, it's not a design decision that's set in stone</p>",
        "id": 218130484,
        "sender_full_name": "Martin Asquino",
        "timestamp": 1606512576
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246514\">@Martin Asquino</span> <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/6656\">https://github.com/rust-analyzer/rust-analyzer/pull/6656</a> should fix the issue, could you try that?</p>",
        "id": 218131696,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606513982
    },
    {
        "content": "<p>hm I pretty much made the same modification in my local copy of ra and it didn't seem to fix, but I'll try yours just in case</p>",
        "id": 218131820,
        "sender_full_name": "Martin Asquino",
        "timestamp": 1606514159
    },
    {
        "content": "<p>but I reckon that's the best we can do in any case</p>",
        "id": 218131876,
        "sender_full_name": "Martin Asquino",
        "timestamp": 1606514192
    },
    {
        "content": "<p>If diagnostics are coming in too slowly from rustc, it might not have an effect</p>",
        "id": 218131922,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606514237
    },
    {
        "content": "<p>For example, the PrimeCaches coalescing code still results in a few dozen messages, even though they arrive so quickly that I never see the progress indicator show up</p>",
        "id": 218131999,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606514288
    },
    {
        "content": "<p>Maybe what we need is to actually delay for a couple milliseconds before sending these sorts of incremental updates to the client</p>",
        "id": 218132026,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606514326
    },
    {
        "content": "<blockquote>\n<p>Maybe what we need is to actually delay for a couple milliseconds before sending these sorts of incremental updates to the client</p>\n</blockquote>\n<p>Yeah, this seems like a good idea.</p>",
        "id": 218167491,
        "sender_full_name": "matklad",
        "timestamp": 1606575382
    },
    {
        "content": "<p>The problem here though, is that I don't know how ti implement this logic in a simple and composable way.</p>",
        "id": 218167504,
        "sender_full_name": "matklad",
        "timestamp": 1606575402
    },
    {
        "content": "<p>The ideal debouncing behavior is this:</p>\n<ul>\n<li>when the first event comes, emit it immediatelly.</li>\n<li>then, emit the next event not sooner than after <em>delay</em> ms</li>\n<li>if there's no new events and there's a delayed event, emit it after <em>delay</em> ms</li>\n</ul>",
        "id": 218167604,
        "sender_full_name": "matklad",
        "timestamp": 1606575548
    },
    {
        "content": "<p>And the last bit requries support for timers</p>",
        "id": 218167610,
        "sender_full_name": "matklad",
        "timestamp": 1606575558
    },
    {
        "content": "<p>it almost feels like we should make the <code>main_loop</code> async <span aria-label=\"fear\" class=\"emoji emoji-1f628\" role=\"img\" title=\"fear\">:fear:</span></p>",
        "id": 218167806,
        "sender_full_name": "matklad",
        "timestamp": 1606575789
    }
]