[
    {
        "content": "<p>I've been reading <a href=\"https://v8.dev/blog/preparser\" target=\"_blank\" title=\"https://v8.dev/blog/preparser\">https://v8.dev/blog/preparser</a> which mentions a useful trick for speedy parsing: not parsing function bodies at all.</p>\n<p>It's a shame that we can't do this in Rust, because impls inside function bodies are globally visible. See <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/1152\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/1152\">https://github.com/rust-analyzer/rust-analyzer/issues/1152</a> for details.</p>\n<p>I wonder if we can deprecate local impls for global types in the next edition. Alternatively, maybe I am missing a simple heuristic for determining if the function has to be parsed lazily?</p>",
        "id": 163448767,
        "sender_full_name": "matklad",
        "timestamp": 1555401538
    },
    {
        "content": "<p>It's very unintuitive that nested impls are visible globally. But maybe it's problematic for the compiler to track impls at multiple levels?</p>",
        "id": 163449005,
        "sender_full_name": "detrumi",
        "timestamp": 1555401817
    },
    {
        "content": "<p>its definitely easier to just track impls globally, per crate, but it doesn't have that much harder to add some restrictions a-la coherence here</p>",
        "id": 163449324,
        "sender_full_name": "matklad",
        "timestamp": 1555402121
    },
    {
        "content": "<p>I agree that it's not useful at all to allow local impls for global types. But i think it's ok to skip function bodies that have neither <code>impl</code> keyword nor macro invocation items in it?</p>",
        "id": 163451559,
        "sender_full_name": "Charles Lew",
        "timestamp": 1555404604
    },
    {
        "content": "<p>Hm, that indeed looks like a heuristic I've overlooked!</p>\n<p>I wonder which proportion of functions invoke macros though...</p>",
        "id": 163451681,
        "sender_full_name": "matklad",
        "timestamp": 1555404759
    },
    {
        "content": "<p>treat any ! that doesn't look like a unary ! or never type as maybe  a macro?  The guess doesn't have to be accurate at all.</p>",
        "id": 163451792,
        "sender_full_name": "Charles Lew",
        "timestamp": 1555404867
    },
    {
        "content": "<p>cc <a href=\"https://github.com/rust-lang/rfcs/issues/1355\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/issues/1355\">https://github.com/rust-lang/rfcs/issues/1355</a></p>",
        "id": 163452434,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1555405513
    },
    {
        "content": "<p>I assume this can't be prohibited backwards-compatibly, but if the compiler emitted a warning in such cases we could maybe just assume no one does it and go ahead with lazy parsing?</p>",
        "id": 163461024,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1555414730
    },
    {
        "content": "<p>Yeah, that's my plan: emit deprecation warning, proceed with lazy parsing. Maaaaybe switch to deny by default warning after crater and some time.  So perhaps I've closed the issue on rust-analyzer prematurely? Lazy parsing should save <strong>a ton</strong> of memory</p>",
        "id": 163461154,
        "sender_full_name": "matklad",
        "timestamp": 1555414844
    },
    {
        "content": "<p>and we sort-of have all the necessary infra for it already, for incremental block reparsign</p>",
        "id": 163461171,
        "sender_full_name": "matklad",
        "timestamp": 1555414869
    },
    {
        "content": "<p>this means though that I need to re-do rowan's API once again :D</p>",
        "id": 163461187,
        "sender_full_name": "matklad",
        "timestamp": 1555414894
    },
    {
        "content": "<p>So to just add a point to no one implements traits inside of functions: We are doing this in <a href=\"https://github.com/diesel-rs/diesel/blob/master/diesel_derives/src/util.rs#L10\" target=\"_blank\" title=\"https://github.com/diesel-rs/diesel/blob/master/diesel_derives/src/util.rs#L10\">diesel_derives</a> as part of our code gen. We use functions to provide a new scope to don't pollute the outer namespace with imported/generated items. We've used mods at some point of time, but that was already disallowed (Or better, that only worked because of an bug that allowed to accessing items from the parent scope in proc macro generated modules.)</p>",
        "id": 163463117,
        "sender_full_name": "weiznich",
        "timestamp": 1555416669
    },
    {
        "content": "<p>why can't that be <code>fn #mod_name { use super::*;  use diesel; use std; }</code> ?</p>",
        "id": 163463934,
        "sender_full_name": "matklad",
        "timestamp": 1555417447
    },
    {
        "content": "<p>You mean <code>mod #mod_name { use super::*; â€¦}</code>?</p>",
        "id": 163467012,
        "sender_full_name": "weiznich",
        "timestamp": 1555420007
    },
    {
        "content": "<p>Because <code>use super::*</code> does not import things that are imported into the parent scope. (At least it worked that way when we switched to using functions there.)</p>",
        "id": 163467076,
        "sender_full_name": "weiznich",
        "timestamp": 1555420063
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"215423\">@weiznich</span> <code>use super::*</code> does import (privatly) used stuff from the parent scope now!</p>",
        "id": 163467437,
        "sender_full_name": "matklad",
        "timestamp": 1555420315
    },
    {
        "content": "<p>But yeah, this example is convincing enough that deny_by_default is not going to happen in the foreseeable future, thanks!</p>",
        "id": 163467520,
        "sender_full_name": "matklad",
        "timestamp": 1555420357
    },
    {
        "content": "<p>Oh, good to know that <code>use super::*</code> now also imports the privately imported stuff. That wouldn't make it to hard for us to change it back <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 163468201,
        "sender_full_name": "weiznich",
        "timestamp": 1555420841
    }
]