[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"201857\">@Brendan Zabarauskas</span> , <span class=\"user-mention\" data-user-id=\"132829\">@Christopher Durham</span> let's move the codespan, text_unit conversation here :-)</p>",
        "id": 177589866,
        "sender_full_name": "matklad",
        "timestamp": 1570519489
    },
    {
        "content": "<p>I have been wanting to make a breaking change to <code>text_unit</code> for some time (to get rid of inconsistent by-ref/by-value methods on <code>TextRange</code>, and of <code>of_str</code> ocamlism). I'll be totally up to replacing it with a new crate, if that crate has more than one designer (and I am totally willing to help out).</p>\n<p>As I've written in discord:</p>\n<ul>\n<li>I suggest using <code>StrIndex</code>, <code>StrRange</code> terminology: it's short, it's about \"how do you use it\" and not \"how do you implement it\", and it's more <em>orthogonal</em>.</li>\n<li>I am not sure if having a separate <code>StrOffset</code> makes sense. I would just trust <span class=\"user-mention\" data-user-id=\"201857\">@Brendan Zabarauskas</span> opinion here</li>\n</ul>",
        "id": 177590113,
        "sender_full_name": "matklad",
        "timestamp": 1570519789
    },
    {
        "content": "<p>Also, <span class=\"user-mention\" data-user-id=\"201857\">@Brendan Zabarauskas</span> what are your thoughts in general about splitting <code>codespan</code> into a indexin bit, and printing &amp; filemap bit?</p>\n<p>The indexing part seems to be a micro crate, which is bad. However, at the same time it's also a \"vocabulary type\" and sits at the interface, and this seems like a good reason to keep it separate</p>",
        "id": 177606660,
        "sender_full_name": "matklad",
        "timestamp": 1570536543
    },
    {
        "content": "<p>The purpose of the <code>Index</code>/<code>Offset</code> split IIUC is that <code>Offset</code> is a signed type (<code>i64</code>) suitable for arbitrary offsets</p>",
        "id": 177619450,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1570544357
    },
    {
        "content": "<p>I guess the TL;DR of it <span class=\"user-mention\" data-user-id=\"201857\">@Brendan Zabarauskas</span> is that I'd love to help with the move to merge annotate-snippets / codespan-reporting / langauge-reporting / text_unit</p>",
        "id": 177642187,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1570558049
    },
    {
        "content": "<p>Especially if the end result manages to nicely be bring-your-own DB and pluggable formatting engine</p>",
        "id": 177642282,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1570558087
    },
    {
        "content": "<p>(and, to clarify, <em>my</em> interest here is to extract a non-generic super-stupid crate with two types for better-than-usize indexing of strings)</p>",
        "id": 177642345,
        "sender_full_name": "matklad",
        "timestamp": 1570558137
    },
    {
        "content": "<p>Which is definitely part of doing said merging</p>",
        "id": 177642387,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1570558168
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=beta&amp;mode=debug&amp;edition=2018&amp;gist=2d85dc44aec79acedcc0cdf4073895c8\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=beta&amp;mode=debug&amp;edition=2018&amp;gist=2d85dc44aec79acedcc0cdf4073895c8\">I did a play.rust-lang sketch of a unified API for StrIndex</a></p>",
        "id": 177642481,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1570558210
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132829\">@Christopher Durham</span> could you push that to a repo? I'd like to add a couple of comments :D</p>",
        "id": 177642688,
        "sender_full_name": "matklad",
        "timestamp": 1570558351
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> &lt;<a href=\"https://github.com/CAD97/str-index/commit/b8fbc103fe8b0fadda08d5af94bf36a6603ef04d\" target=\"_blank\" title=\"https://github.com/CAD97/str-index/commit/b8fbc103fe8b0fadda08d5af94bf36a6603ef04d\">https://github.com/CAD97/str-index/commit/b8fbc103fe8b0fadda08d5af94bf36a6603ef04d</a>&gt;</p>",
        "id": 177642932,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1570558524
    },
    {
        "content": "<p>OK, a decent baseline to review: <a href=\"https://github.com/CAD97/str-index/pull/1\" target=\"_blank\" title=\"https://github.com/CAD97/str-index/pull/1\">https://github.com/CAD97/str-index/pull/1</a></p>",
        "id": 177655760,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1570566552
    },
    {
        "content": "<p>Sorry about the billion <code>force-with-lease</code> pushes, I'm trying (maybe too hard) to keep the commit history clean, and having branches PRing to a branch being adjusted is a recipe for a lot of rebasing.</p>",
        "id": 177757821,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1570656429
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132829\">@Christopher Durham</span>  yeah, I've been curious about annotate-snippets too. I like how they completely remove the need for a file DB+indexing type</p>",
        "id": 177767364,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1570665739
    },
    {
        "content": "<p>That was the direction I was actually hoping to move in with codespan.</p>",
        "id": 177767380,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1570665776
    },
    {
        "content": "<p>The thing that has been preventing me from going all-in with <code>annotate-snippets</code> is:</p>\n<p>- their use of <code>ansi_term</code> - which doesn't allow for injecting a custom coloured writer and relies on global state<br>\n- how they try to stick close to rustc's error reporting style - I think we can make better use of box drawing characters, while also gracefully derading to ascii for those who need it</p>",
        "id": 177767624,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1570666031
    },
    {
        "content": "<p>We _have_ been in discussions to see if we can get agreement for simplifying the ecosystem around <code>codespan</code>/<code>language-reporting</code>/<code>annotate-snippets</code>. So at least that's something!</p>",
        "id": 177767823,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1570666236
    },
    {
        "content": "<p>rustc is moving towards using <code>annotate-snippets</code> IIRC (reminder: <a href=\"https://github.com/wycats/language-reporting/issues/6\" target=\"_blank\" title=\"https://github.com/wycats/language-reporting/issues/6\">merge intension issue</a>)</p>",
        "id": 177767827,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1570666243
    },
    {
        "content": "<p>Ohhh nice</p>",
        "id": 177767832,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1570666253
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/59346\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59346\">rustc issue</a></p>",
        "id": 177767917,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1570666328
    },
    {
        "content": "<p>Yeah Zibi, Yehuda, and I had a DM discussion on twitter about it a few months ago</p>",
        "id": 177767934,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1570666360
    },
    {
        "content": "<p>So now's definitely the best time to consolidate efforts</p>",
        "id": 177767966,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1570666412
    },
    {
        "content": "<p>Yeah, tbh I would rather not have to maintain codespan if I don't need to</p>",
        "id": 177767982,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1570666435
    },
    {
        "content": "<p>From the outside looking in it seems like building a new one by taking the good ideas from all three might be the best way forward (but I have I bias towards building things I'll admit)</p>",
        "id": 177768054,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1570666499
    },
    {
        "content": "<p>Do you like anything about <code>codespan</code>? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 177768078,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1570666526
    },
    {
        "content": "<p>The name :P</p>",
        "id": 177768157,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1570666587
    },
    {
        "content": "<p>hehehehe</p>",
        "id": 177768161,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1570666593
    },
    {
        "content": "<p>I thought <code>language-reporting</code> was a nice name for the reporting side of things</p>",
        "id": 177768190,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1570666642
    },
    {
        "content": "<p>The other thing I'd like some help on is how to integrate domain-specific diagnostics, like those in LALRPOP</p>",
        "id": 177768202,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1570666661
    },
    {
        "content": "<p>And also allowing stuff like coloured type diffs and pretty printing, eg. <a href=\"https://github.com/Marwes/pretty.rs/\" target=\"_blank\" title=\"https://github.com/Marwes/pretty.rs/\">https://github.com/Marwes/pretty.rs/</a></p>",
        "id": 177768259,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1570666698
    },
    {
        "content": "<p>I think there's lots of cool scope to push beyond what rustc does. But perhaps if we joined forces we could improve rustc too.</p>",
        "id": 177768303,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1570666759
    },
    {
        "content": "<p>I had some ideas showing example output from different languages/tools: <a href=\"https://github.com/brendanzab/codespan/issues/1\" target=\"_blank\" title=\"https://github.com/brendanzab/codespan/issues/1\">https://github.com/brendanzab/codespan/issues/1</a></p>",
        "id": 177768489,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1570667005
    },
    {
        "content": "<p>Note that <code>annotate_snippet</code> uses <code>usize</code> for indexing, and I think that's the <em>right</em> approach there. This is purely an <em>sink</em> layer, so optimizing storage with u32 does not makes sense, <em>and</em> because the user only feeds these types in, newtype wrapper benefits are also not that important. </p>\n<p>This is in contrast to rowan, which both stores text unites, and is a <em>source</em> of text unites.</p>",
        "id": 177782158,
        "sender_full_name": "matklad",
        "timestamp": 1570687802
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> Yes, I agree. In hindsight I think the sink approach is a better design.</p>",
        "id": 177858085,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1570745100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132829\">@Christopher Durham</span> what are your goals here? I feel that, if the lodestar is \"unifying error reporting\" crates, then <code>StrIndex</code> might not be on the right path then</p>",
        "id": 177880660,
        "sender_full_name": "matklad",
        "timestamp": 1570773851
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> I think that my end goal is in fact \"unifying error reporting\", that said error reporting framework \"seamlessly\" translates from the \"major\" libraries for managing code span references, and that it can \"render\" to LSP (and no functionality of LSP is lost).</p>",
        "id": 177919924,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1570808566
    },
    {
        "content": "<p>Still, I think the experimentation done with <code>StrIndex</code> here can definitely serve to improve <code>text_unit</code></p>",
        "id": 177920181,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1570808742
    },
    {
        "content": "<p>Having played with annotate-snippets' <code>cleanup</code> branch a little, I think the \"best\" way forward seems to be building from there and bridging <code>codespan</code>/<code>language-reporting</code> to <code>annotate-snippets</code>.</p>",
        "id": 177920428,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1570808893
    },
    {
        "content": "<p>The exact point of concretizing spans for snippet annotation though is an interesting question</p>",
        "id": 177920471,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1570808945
    },
    {
        "content": "<p>In a \"fork\" of annotate-snippets I've delayed <code>Span</code> resolution all the way to printing with a <code>FnMut(Span, &amp;mut dyn WriteColor) -&gt; io::Result&lt;()&gt;</code> such that printing could include syntax highlighting</p>",
        "id": 177920651,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1570809055
    },
    {
        "content": "<p>I'm actually drafting an issue to propose the API surface I discovered with experimentation in said fork to <code>annotate-snippets</code></p>",
        "id": 177923713,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1570811124
    }
]