[
    {
        "content": "<p>I'd say \"running\" runnables should be left to the client</p>",
        "id": 199484008,
        "sender_full_name": "matklad",
        "timestamp": 1591101328
    },
    {
        "content": "<p>Which could draw test results in a smart way, or start a debug session or what not</p>",
        "id": 199484050,
        "sender_full_name": "matklad",
        "timestamp": 1591101352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/199484008\">said</a>:</p>\n<blockquote>\n<p>I'd say \"running\" runnables should be left to the client</p>\n</blockquote>\n<p>to run a runnable we need a compilation artifact, i.e. we need to know how to build it. And this is a main problem. I think a client should not know how to build the artifact, just be able to run it.</p>",
        "id": 199484574,
        "sender_full_name": "vsrs",
        "timestamp": 1591101605
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203366\">Jeremy Kolb</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/199483159\">said</a>:</p>\n<blockquote>\n<p>@vsrs I think there's some truth to that. It would be nice if we could provide some sort of standard \"debugger engine hooks\" or conform to some standard \"test adapter api\" for those types of things.</p>\n</blockquote>\n<p>There is <a href=\"https://build-server-protocol.github.io/\">https://build-server-protocol.github.io/</a>, but I do not like how it works.</p>",
        "id": 199484613,
        "sender_full_name": "vsrs",
        "timestamp": 1591101639
    },
    {
        "content": "<p>Not sure, I think building artifact should also be a responsibility of the client. I think we shouldn't really assume any specific build system</p>",
        "id": 199484632,
        "sender_full_name": "matklad",
        "timestamp": 1591101654
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298653\">@vsrs</span> <span class=\"user-mention\" data-user-id=\"203366\">@Jeremy Kolb</span> splited the topic here</p>",
        "id": 199484701,
        "sender_full_name": "matklad",
        "timestamp": 1591101700
    },
    {
        "content": "<blockquote>\n<p>Not sure, I think building artifact should also be a responsibility of the client</p>\n</blockquote>\n<p>The reasoning is that the user should have direct access to the processes being run (ie, they should see stdout/stderrr and a button to kill a runaway process). It seems this is best handled by the client</p>",
        "id": 199484814,
        "sender_full_name": "matklad",
        "timestamp": 1591101758
    },
    {
        "content": "<p>Than much more logic will be on the client side. And each client should implement it from scratch.</p>",
        "id": 199484832,
        "sender_full_name": "vsrs",
        "timestamp": 1591101769
    },
    {
        "content": "<p>That's true, but I also think that this is how it should work, sadly. Different clients have different UXes for runnning external processes, and I think an ideal language plugin should leverage those uxes,</p>",
        "id": 199485008,
        "sender_full_name": "matklad",
        "timestamp": 1591101845
    },
    {
        "content": "<p>Well, I can also imagine some generic \"process handler\" on the protocl level, but that goes beyond just running...</p>",
        "id": 199485090,
        "sender_full_name": "matklad",
        "timestamp": 1591101892
    },
    {
        "content": "<p>Make sense. Maybe then it worth to have a set of commands implemented on the client side (build, run, debug) and a way the client can let server know about this commands, so the server can use them?</p>",
        "id": 199485244,
        "sender_full_name": "vsrs",
        "timestamp": 1591101968
    },
    {
        "content": "<p>The two specific problems I am thinking about are:</p>\n<ul>\n<li>For debugging, when we run <code>cargo build --message-format=json</code>, the user should see the stderr of this process</li>\n<li>When the code is build with, eg, Buck, and not Cargo, we should still draw a <code>Run</code> button on a <code>#[test]</code> function, but let the actual executing to somethng else</li>\n</ul>",
        "id": 199485338,
        "sender_full_name": "matklad",
        "timestamp": 1591102012
    },
    {
        "content": "<p>Ideally,  there should be second-order client plugins. For example, one can imagine a plugin to run a <code>test</code> under <code>miri</code> or under some code coverage tracking tool. These plugins should be implementable without changing code inside rust-analyze</p>",
        "id": 199485547,
        "sender_full_name": "matklad",
        "timestamp": 1591102096
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298653\">vsrs</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Runnables/near/199484613\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"203366\">Jeremy Kolb</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/199483159\">said</a>:</p>\n<blockquote>\n<p>@vsrs I think there's some truth to that. It would be nice if we could provide some sort of standard \"debugger engine hooks\" or conform to some standard \"test adapter api\" for those types of things.</p>\n</blockquote>\n<p>There is <a href=\"https://build-server-protocol.github.io/\">https://build-server-protocol.github.io/</a>, but I do not like how it works.</p>\n</blockquote>\n<p>FYI I kind of asked about this: <a href=\"https://github.com/build-server-protocol/build-server-protocol/issues/120\">https://github.com/build-server-protocol/build-server-protocol/issues/120</a></p>",
        "id": 199486065,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1591102327
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298653\">@vsrs</span> do you know if it would be possible to provide extension API on the VS Code side?</p>",
        "id": 199486359,
        "sender_full_name": "matklad",
        "timestamp": 1591102476
    },
    {
        "content": "<p>May be then we should replace Runnable <code>bin</code> field with something like <code>type</code>?  So the client can interpret it and do the appropriate actions. Not just merely pass it to a shell.</p>",
        "id": 199486396,
        "sender_full_name": "vsrs",
        "timestamp": 1591102495
    },
    {
        "content": "<p>Like, to maybe move debugger integrations outside ?</p>",
        "id": 199486404,
        "sender_full_name": "matklad",
        "timestamp": 1591102498
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298653\">@vsrs</span> that's exactly what I want to do yeah</p>",
        "id": 199486427,
        "sender_full_name": "matklad",
        "timestamp": 1591102513
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Runnables/near/199486359\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"298653\">vsrs</span> do you know if it would be possible to provide extension API on the VS Code side?</p>\n</blockquote>\n<p>I'm not sure what are you talking about.</p>",
        "id": 199486435,
        "sender_full_name": "vsrs",
        "timestamp": 1591102516
    },
    {
        "content": "<p>More specifically, I want to provide two views of runnable on the LSP layer:</p>\n<div class=\"codehilite\"><pre><span></span><code>runnable {\n   &quot;cargo&quot;: { &quot;package&quot;: &quot;foo&quot;, &quot;target&quot;: &quot;bar&quot; ... }\n    &quot;process&quot;: {&quot;bin&quot;: &quot;cargo&quot;, &quot;args&quot;: []}\n}\n</code></pre></div>",
        "id": 199486565,
        "sender_full_name": "matklad",
        "timestamp": 1591102576
    },
    {
        "content": "<p>So that smart clients can intercept cargo and plugin debugging inside</p>",
        "id": 199486605,
        "sender_full_name": "matklad",
        "timestamp": 1591102597
    },
    {
        "content": "<p>And dumb clients can just run a preconfigured process</p>",
        "id": 199486625,
        "sender_full_name": "matklad",
        "timestamp": 1591102609
    },
    {
        "content": "<blockquote>\n<p>I'm not sure what are you talking about.</p>\n</blockquote>\n<p>Yeah, bad wording on my side. I guess, I am asking this: can someone write a VS Code extension, which would depend on <code>rust-analyzer</code> extensions, and would be able to use rust-analzyer's runnables?</p>",
        "id": 199486722,
        "sender_full_name": "matklad",
        "timestamp": 1591102658
    },
    {
        "content": "<p>Basically, can one extension call functions from another extensions?</p>",
        "id": 199486744,
        "sender_full_name": "matklad",
        "timestamp": 1591102675
    },
    {
        "content": "<blockquote>\n<p>And dumb clients can just run a preconfigured process</p>\n</blockquote>\n<p>Anyway a client have to support LSP extention, so why not to support <code>cargo</code>... too. Not sure that we need <code>process</code>.</p>",
        "id": 199487023,
        "sender_full_name": "vsrs",
        "timestamp": 1591102793
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Runnables/near/199486722\">said</a>:</p>\n<blockquote>\n<p>I guess, I am asking this: can someone write a VS Code extension, which would depend on <code>rust-analyzer</code> extensions, and would be able to use rust-analzyer's runnables?</p>\n</blockquote>\n<p>Yes, I think it is possible. Just not sure it is the best way to go.</p>",
        "id": 199487249,
        "sender_full_name": "vsrs",
        "timestamp": 1591102888
    },
    {
        "content": "<p>A side question. Is it possible to run several tests with cargo?<br>\nsomething like <code>cargo pkg::test1_explicit_name pkg::test2_explicit_name</code>, etc..</p>",
        "id": 199487775,
        "sender_full_name": "vsrs",
        "timestamp": 1591103145
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298653\">@vsrs</span> not at the moment I think</p>",
        "id": 199488023,
        "sender_full_name": "matklad",
        "timestamp": 1591103275
    },
    {
        "content": "<p>You can filter by test name prefix, but not by arbitrary set of tests</p>",
        "id": 199488102,
        "sender_full_name": "matklad",
        "timestamp": 1591103292
    },
    {
        "content": "<p>There's a long-standing issue on Cargo to allow that (from IntelliJ days)</p>",
        "id": 199488132,
        "sender_full_name": "matklad",
        "timestamp": 1591103307
    },
    {
        "content": "<p>:(</p>",
        "id": 199488141,
        "sender_full_name": "vsrs",
        "timestamp": 1591103310
    },
    {
        "content": "<p>Hm, yeah, this is really tough :(</p>",
        "id": 199488206,
        "sender_full_name": "matklad",
        "timestamp": 1591103349
    },
    {
        "content": "<p>Who should do <code> m.insert(\"RUST_BACKTRACE\".to_string(), \"short\".to_string());</code> ? Client? Or the Server?</p>",
        "id": 199488238,
        "sender_full_name": "matklad",
        "timestamp": 1591103362
    },
    {
        "content": "<p>Thanks.</p>\n<p>I need this to implement <code>Run all tests</code> <a href=\"/user_uploads/4715/zJ4VygjV1nofNk6DfCVkN80_/test_lens.gif\">test_lens.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/zJ4VygjV1nofNk6DfCVkN80_/test_lens.gif\" title=\"test_lens.gif\"><img src=\"/user_uploads/4715/zJ4VygjV1nofNk6DfCVkN80_/test_lens.gif\"></a></div>",
        "id": 199488388,
        "sender_full_name": "vsrs",
        "timestamp": 1591103420
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Runnables/near/199488238\">said</a>:</p>\n<blockquote>\n<p>Who should do <code> m.insert(\"RUST_BACKTRACE\".to_string(), \"short\".to_string());</code> ? Client? Or the Server?</p>\n</blockquote>\n<p>I thinks someone who knows the build context. So looks like it should be client (if he is responsible for building)</p>",
        "id": 199488625,
        "sender_full_name": "vsrs",
        "timestamp": 1591103529
    },
    {
        "content": "<p>Yeah, I think this probably makes sense</p>",
        "id": 199488817,
        "sender_full_name": "matklad",
        "timestamp": 1591103642
    },
    {
        "content": "<p>And what if supply RA as an extension bundle: rust-analyzer itself and a cargo-based additional extension responsible for lenses, build targets, etc. I've just checked there no problem using ra commands from withing another extension.</p>",
        "id": 199489133,
        "sender_full_name": "vsrs",
        "timestamp": 1591103833
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298653\">@vsrs</span> how does the following look to you?</p>\n<div class=\"codehilite\"><pre><span></span><code>#[derive(Deserialize, Serialize, Debug)]\n#[serde(rename_all = &quot;camelCase&quot;)]\npub struct Runnable {\n    pub range: Range,\n    pub label: String,\n    pub kind: RunnableKind,\n    pub args: CargoRunnable,\n}\n\n#[derive(Serialize, Deserialize, Debug)]\n#[serde(rename_all = &quot;lowercase&quot;)]\npub enum RunnableKind {\n    Cargo,\n}\n\nstruct CargoRunnable {\n    cargo_toml: PathBuf,\n    command: String,\n    // --package and --lib stuff\n    cargo_args: Vec&lt;String&gt;,\n    // stuff after --\n    executable_args: Vec&lt;String&gt;,\n}\n</code></pre></div>",
        "id": 199489317,
        "sender_full_name": "matklad",
        "timestamp": 1591103931
    },
    {
        "content": "<p>I would add <code>pub name_range: TextRange</code> to Runnable. To reference a test in UI, for example. or maybe 'navigation_range'</p>",
        "id": 199489810,
        "sender_full_name": "vsrs",
        "timestamp": 1591104187
    },
    {
        "content": "<p>I think that should be <code>target_range</code> (with possible addion of <code>target_selection_range</code> later)</p>",
        "id": 199490143,
        "sender_full_name": "matklad",
        "timestamp": 1591104336
    },
    {
        "content": "<p>Maybe we should just use <code>LocationLink</code> here even...</p>",
        "id": 199490177,
        "sender_full_name": "matklad",
        "timestamp": 1591104351
    },
    {
        "content": "<p>Sorry, I messed up the types. Of course in LSP it is Range or (better) Location.</p>",
        "id": 199490799,
        "sender_full_name": "vsrs",
        "timestamp": 1591104648
    },
    {
        "content": "<p>Ah, so you think its importrant that we have <em>both</em> the full range and name range?</p>",
        "id": 199491370,
        "sender_full_name": "matklad",
        "timestamp": 1591104921
    },
    {
        "content": "<p>That seams reasonable, should just plug LocationLink in there then</p>",
        "id": 199491408,
        "sender_full_name": "matklad",
        "timestamp": 1591104938
    },
    {
        "content": "<p>Yes, definitely. You can look at the gif above. When I hit <code>5 tests</code> I need name range to show references to tests</p>",
        "id": 199491675,
        "sender_full_name": "vsrs",
        "timestamp": 1591105077
    },
    {
        "content": "<p>LocationLink may not be necessary. There is no origin in this case. Simple Location looks better for me.</p>",
        "id": 199492099,
        "sender_full_name": "vsrs",
        "timestamp": 1591105278
    },
    {
        "content": "<p>But <code>Location</code> has only one range</p>",
        "id": 199492170,
        "sender_full_name": "matklad",
        "timestamp": 1591105321
    },
    {
        "content": "<p>I think we need range of the whole function, as well as the range of identifier</p>",
        "id": 199492233,
        "sender_full_name": "matklad",
        "timestamp": 1591105340
    },
    {
        "content": "<p>Ups, I thought you want to leave existing range field and <strong>add</strong> LocationLink to a name.</p>\n<p>Yes, I'm +1 for the single LocationLink :)</p>",
        "id": 199492637,
        "sender_full_name": "vsrs",
        "timestamp": 1591105552
    },
    {
        "content": "<p>Hm, one wrinkle here is that code-lens are implemented on the server...</p>",
        "id": 199506433,
        "sender_full_name": "matklad",
        "timestamp": 1591110554
    },
    {
        "content": "<p>I wonder if we should move them to the client-side instead... They need custom commands anyway...</p>",
        "id": 199506575,
        "sender_full_name": "matklad",
        "timestamp": 1591110608
    },
    {
        "content": "<p>Why not pass the list of supported commands to the server during initialization? As sort of client capabilities.</p>",
        "id": 199510498,
        "sender_full_name": "vsrs",
        "timestamp": 1591112003
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/4710/files\">https://github.com/rust-analyzer/rust-analyzer/pull/4710/files</a></p>",
        "id": 199510762,
        "sender_full_name": "matklad",
        "timestamp": 1591112111
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298653\">vsrs</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Runnables/near/199510498\">said</a>:</p>\n<blockquote>\n<p>Why not pass the list of supported commands to the server during initialization? As sort of client capabilities.</p>\n</blockquote>\n<p>Though.. it's not a good idea. It's better to leave all the logic on one side. The client - ok let it be.</p>",
        "id": 199512421,
        "sender_full_name": "vsrs",
        "timestamp": 1591112834
    }
]