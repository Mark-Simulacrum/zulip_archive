[
    {
        "content": "<p>I have an example where <code>textDocument/references</code> is taking about a minute with rust-analyzer pegged at 100% CPU , whereas IntelliJ \"Find Usages\" takes low single-digit seconds on the same piece of code. What is the best way to debug or report this issue?</p>",
        "id": 195590564,
        "sender_full_name": "Brennan Vincent",
        "timestamp": 1588091633
    },
    {
        "content": "<p>Does this only happen only on the first request(s), or every time?</p>",
        "id": 195591048,
        "sender_full_name": "Laurențiu",
        "timestamp": 1588091832
    },
    {
        "content": "<p>first request.</p>",
        "id": 195591140,
        "sender_full_name": "Brennan Vincent",
        "timestamp": 1588091874
    },
    {
        "content": "<p>(It is also the first request in IntelliJ)</p>",
        "id": 195591198,
        "sender_full_name": "Brennan Vincent",
        "timestamp": 1588091884
    },
    {
        "content": "<p>See <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/1650\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/1650\">https://github.com/rust-analyzer/rust-analyzer/issues/1650</a> for the backstory. There's no persistence support, so the server has to analyze the whole project. <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/4133\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/4133\">https://github.com/rust-analyzer/rust-analyzer/pull/4133</a> should have helped a little.</p>",
        "id": 195591388,
        "sender_full_name": "Laurențiu",
        "timestamp": 1588091973
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> It doesn't seem like persistence would account for the difference. In IntelliJ I invalidated the cache before trying, so I don't think it was benefiting from persistence.</p>",
        "id": 195591557,
        "sender_full_name": "Brennan Vincent",
        "timestamp": 1588092036
    },
    {
        "content": "<p>I am using master from git, updated and built today, so I should already have <a href=\"https://github.com/rust-lang/rust/issues/4133\" title=\"https://github.com/rust-lang/rust/issues/4133\">#4133</a> applied.</p>",
        "id": 195591685,
        "sender_full_name": "Brennan Vincent",
        "timestamp": 1588092094
    },
    {
        "content": "<p>Ah, okay, then we're just slower. <a href=\"https://github.com/rust-lang/rust/issues/4133\" title=\"https://github.com/rust-lang/rust/issues/4133\">#4133</a> just hides the problem under the rug by pre-computing more things when you load a project, but doesn't help if you do the test immediately.</p>",
        "id": 195591815,
        "sender_full_name": "Laurențiu",
        "timestamp": 1588092139
    },
    {
        "content": "<p>yes, also, I waited until the initial CPU spike from <code>rust-analyzer</code> ended before trying. So it should have been done building whatever indices it does on startup. BTW, this is about find references, not jump to definition.</p>",
        "id": 195592066,
        "sender_full_name": "Brennan Vincent",
        "timestamp": 1588092270
    },
    {
        "content": "<p>For high-level profiling, maybe see <a href=\"https://github.com/rust-analyzer/rust-analyzer/tree/master/docs/dev#profiling\" title=\"https://github.com/rust-analyzer/rust-analyzer/tree/master/docs/dev#profiling\">https://github.com/rust-analyzer/rust-analyzer/tree/master/docs/dev#profiling</a>. Generally, code profilers that work with C also work with Rust, but it might help to bump up the debug info level in <code>Cargo.toml</code>. I was looking at a profile <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/4186#issuecomment-620576892\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/4186#issuecomment-620576892\">earlier today</a>, most of it seems to be trait solving.</p>",
        "id": 195592082,
        "sender_full_name": "Laurențiu",
        "timestamp": 1588092279
    },
    {
        "content": "<p>How large is your project?</p>",
        "id": 195592258,
        "sender_full_name": "Laurențiu",
        "timestamp": 1588092351
    },
    {
        "content": "<p>According to <code>perf</code>, the time is spent in <code>chalk_solve::recursive::Solver&lt;I&gt;::solve_goal</code></p>",
        "id": 195592265,
        "sender_full_name": "Brennan Vincent",
        "timestamp": 1588092353
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232844\">Brennan Vincent</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/perf.20issues/near/195592265\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/perf.20issues/near/195592265\">said</a>:</p>\n<blockquote>\n<p>According to <code>perf</code>, the time is spent in <code>chalk_solve::recursive::Solver&lt;I&gt;::solve_goal</code></p>\n</blockquote>\n<p>Yup, trait solving</p>",
        "id": 195592457,
        "sender_full_name": "Laurențiu",
        "timestamp": 1588092431
    },
    {
        "content": "<p>The repo is <a href=\"https://github.com/MaterializeInc/materialize\" title=\"https://github.com/MaterializeInc/materialize\">https://github.com/MaterializeInc/materialize</a></p>\n<div class=\"codehilite\"><pre><span></span><code>~/c/materialize ❯❯❯ find src -name &#39;*.rs&#39; | xargs wc -l | grep total\n  92434 total\n</code></pre></div>\n\n\n<p>So, 92kloc including whitespace. I've also added differnetial-dataflow to my workspace which is ~15kloc</p>",
        "id": 195592663,
        "sender_full_name": "Brennan Vincent",
        "timestamp": 1588092510
    },
    {
        "content": "<p>the code is somewhat heavy on traits/generics.</p>",
        "id": 195593033,
        "sender_full_name": "Brennan Vincent",
        "timestamp": 1588092662
    },
    {
        "content": "<p>What symbol are you using calling find all references on? I tried with a random one <code>pgwire::Codec::encode_error_notice_response</code> and it finished instantly, but that was a poor choice.</p>",
        "id": 195593561,
        "sender_full_name": "Laurențiu",
        "timestamp": 1588092851
    },
    {
        "content": "<p><code>pub struct Context</code> in <code>src/dataflow/render/context.rs</code></p>",
        "id": 195593668,
        "sender_full_name": "Brennan Vincent",
        "timestamp": 1588092904
    },
    {
        "content": "<p>Oh, yeah, that's slow</p>",
        "id": 195593900,
        "sender_full_name": "Laurențiu",
        "timestamp": 1588093009
    },
    {
        "content": "<p>Yeah, to be clear, <code>rust-analyzer</code> is mostly working fine on this codebase.</p>",
        "id": 195594200,
        "sender_full_name": "Brennan Vincent",
        "timestamp": 1588093125
    },
    {
        "content": "<p>I'm not sure how actionable this is today. <code>chalk</code> is still mostly unoptimized, and we don't have a way to extract a <code>chalk</code> input from a Rust project. <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> might chime in, though.</p>",
        "id": 195594679,
        "sender_full_name": "Laurențiu",
        "timestamp": 1588093297
    },
    {
        "content": "<p>Thanks for looking anyway. I was wondering if there is anything simple I could do to help like provide logs, etc., but it sounds like you were able to repro.</p>",
        "id": 195594858,
        "sender_full_name": "Brennan Vincent",
        "timestamp": 1588093351
    },
    {
        "content": "<p>last time I tried rust-analyzer was summer 2019; I gave up and switched to IntelliJ. But this time around it seems much more usable :) So congrats on all the hard work / progress, despite these random minor issues.</p>",
        "id": 195594999,
        "sender_full_name": "Brennan Vincent",
        "timestamp": 1588093421
    },
    {
        "content": "<p>I think we already have a couple of recent issues for \"chalk is slow\", but it wouldn't hurt if youfiled one.</p>",
        "id": 195595009,
        "sender_full_name": "Laurențiu",
        "timestamp": 1588093427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu Nicola</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/perf.20issues/near/195594679\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/perf.20issues/near/195594679\">said</a>:</p>\n<blockquote>\n<p>I'm not sure how actionable this is today. <code>chalk</code> is still mostly unoptimized, and we don't have a way to extract a <code>chalk</code> input from a Rust project. <span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> might chime in, though.</p>\n</blockquote>\n<p>That is being worked on :)</p>",
        "id": 195595188,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588093488
    },
    {
        "content": "<p>Specific data about Chalk performance is helpful</p>",
        "id": 195595301,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588093534
    },
    {
        "content": "<p>Issue filed: <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/4194\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/4194\">https://github.com/rust-analyzer/rust-analyzer/issues/4194</a></p>",
        "id": 195596571,
        "sender_full_name": "Brennan Vincent",
        "timestamp": 1588094044
    },
    {
        "content": "<p><code>render::build_dataflow</code>, <code>render::render_join</code> and friends also take a lot of time to analyze</p>",
        "id": 195597203,
        "sender_full_name": "Laurențiu",
        "timestamp": 1588094332
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> Those are some pretty complicated functions, so it doesn't surprise me. Did you find that out by looking at some profiling data? Or just by clicking around random stuff and trying it out</p>",
        "id": 195599848,
        "sender_full_name": "Brennan Vincent",
        "timestamp": 1588095442
    },
    {
        "content": "<p>Ran <code>rust-analyzer analysis-stats</code> and eyeballed it spending 30-60 seconds on those</p>",
        "id": 195599908,
        "sender_full_name": "Laurențiu",
        "timestamp": 1588095471
    }
]