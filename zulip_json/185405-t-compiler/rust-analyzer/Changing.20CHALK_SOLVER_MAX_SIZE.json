[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> So, I know it's been discussed already a few times, but I really think the SLG <code>max_size</code> should be changed from 4 to probably 10. (Relevant line here <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/ce07a2daa9e53aa86a769f8641b14c2878444fbc/crates/ra_hir_ty/src/traits.rs#L59\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/ce07a2daa9e53aa86a769f8641b14c2878444fbc/crates/ra_hir_ty/src/traits.rs#L59\">https://github.com/rust-analyzer/rust-analyzer/blob/ce07a2daa9e53aa86a769f8641b14c2878444fbc/crates/ra_hir_ty/src/traits.rs#L59</a>)</p>",
        "id": 184862092,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578253878
    },
    {
        "content": "<p>But, thinking about this made me think about how we would profile this</p>",
        "id": 184862146,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578253949
    },
    {
        "content": "<p>Like, it would be simple enough to make the change. But the question is about those \"edge cases\" mentioned in the comment for that const</p>",
        "id": 184862163,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578253997
    },
    {
        "content": "<p>However, I think changing it to 10 may mask/fix some errors, such as <a href=\"https://github.com/rust-lang/chalk/issues/302\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/302\">https://github.com/rust-lang/chalk/issues/302</a> and <a href=\"https://github.com/rust-lang/chalk/issues/301\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/301\">https://github.com/rust-lang/chalk/issues/301</a></p>",
        "id": 184862217,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578254073
    },
    {
        "content": "<p>I think last time I tried to change it back to 10, it still lead to analysis hanging seemingly forever when running RA on itself</p>",
        "id": 184862694,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1578254906
    },
    {
        "content": "<p>How long ago was that?</p>",
        "id": 184862840,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578255167
    },
    {
        "content": "<p>Also, changing it to 5 or 6 might also solve some problems too</p>",
        "id": 184862849,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578255188
    },
    {
        "content": "<p>(this is probably more of a discussion for a wg-traits topic, but) I think <code>max_size</code> is probably <em>not</em> the right way of limiting run time</p>",
        "id": 184862902,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578255271
    },
    {
        "content": "<p>(obviously, this has been thought about before with the idea of fuel)</p>",
        "id": 184862910,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578255287
    },
    {
        "content": "<p>Right now, as long as everything is \"making progress\" in terms of finding answers to strands, Chalk will keep going and won't yield with <code>QuantumExceeded</code> (except for <code>PositiveCycle</code>s, which sort of have to continue currently). But once a table flounders, or there are no more solutions to a strand, it should yield with <code>QuantumExceeded</code>. The problem though right now, is that actually doesn't do anything, since <code>ForestSolver</code> just loops</p>",
        "id": 184862989,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578255459
    },
    {
        "content": "<p>Probably want to think about allowing the caller to stop solving on <code>QuantumExceeded</code>, and if so, give some sort of \"best guess\" for an answer</p>",
        "id": 184863032,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578255507
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/2290\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/2290\">https://github.com/rust-analyzer/rust-analyzer/pull/2290</a></p>",
        "id": 184863474,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1578256234
    },
    {
        "content": "<p>I can try out what happens</p>",
        "id": 184863500,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1578256302
    },
    {
        "content": "<p>I don't think we've done anything since then that should make it not hang if it hung with 5 then</p>",
        "id": 184863658,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578256552
    },
    {
        "content": "<p>I'm definitely interested to know if Chalk is yielding with <code>QuantumExceeded</code> during those hangs at any more</p>",
        "id": 184863709,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578256612
    },
    {
        "content": "<p>Oh wait, maybe the hang for that issue is the old bug?</p>",
        "id": 184863717,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578256638
    },
    {
        "content": "<p>maybe, maybe not</p>",
        "id": 184863721,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578256650
    },
    {
        "content": "<p>currently, with 4 it crashes with \"New answer was not ambiguous whereas previous answer was\", with 5 it goes through, with 6-8 it crashes, with 9-10 it hangs</p>",
        "id": 184864153,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1578257360
    },
    {
        "content": "<p>('it hangs' doesn't necessarily mean it hangs forever, I only waited a few minutes)</p>",
        "id": 184864242,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1578257515
    },
    {
        "content": "<p>you can try this yourself (and see the Chalk debug logs) by setting the solver size to 9 or 10 and doing <code>cargo build --release -p ra_cli; CHALK_DEBUG=1 ./target/release/ra_cli analysis-stats . -o trait_solve_query</code></p>",
        "id": 184864306,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1578257608
    },
    {
        "content": "<p>(kind of ironically, <code>trait_solve_query</code> is the function where the analysis hangs)</p>",
        "id": 184864320,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1578257639
    },
    {
        "content": "<p>It's actually kind of interesting that 5 is fine but 6-8 crashes</p>",
        "id": 184864447,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578257773
    },
    {
        "content": "<p>interesting</p>",
        "id": 184913784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578323376
    },
    {
        "content": "<p>I agree that upping the limit is good; I've been contemplating whether we should consider an alternative design for the chalk engine itself, or at least experiment with a few more. But I guess we have to first identify where the problems arise. I see a lot of chatter in <a class=\"stream\" data-stream-id=\"144729\" href=\"/#narrow/stream/144729-wg-traits\">#wg-traits</a> so probably best to take it to a topic over there</p>",
        "id": 184913924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578323444
    },
    {
        "content": "<blockquote>\n<p>Right now, as long as everything is \"making progress\" in terms of finding answers to strands, Chalk will keep going and won't yield with <code>QuantumExceeded</code> (except for <code>PositiveCycle</code>s, which sort of have to continue currently). But once a table flounders, or there are no more solutions to a strand, it should yield with <code>QuantumExceeded</code>. The problem though right now, is that actually doesn't do anything, since <code>ForestSolver</code> just loops</p>\n</blockquote>\n<p>btw what I had expected to do was to propagate <code>QunatumExceeded</code> back out through <code>ForestSolver</code>, I think, so that rust-analyzer could choose how much to loop</p>",
        "id": 184939188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578340073
    },
    {
        "content": "<p>not sure <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> if this is what you were thinking</p>",
        "id": 184939242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578340084
    },
    {
        "content": "<p>Yep, basically. Just right now that's not what is done</p>",
        "id": 184939543,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578340297
    }
]