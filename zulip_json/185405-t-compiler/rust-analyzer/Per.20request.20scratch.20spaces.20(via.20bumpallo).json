[
    {
        "content": "<p>Discussion thread for <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8663\">https://github.com/rust-analyzer/rust-analyzer/issues/8663</a></p>",
        "id": 236154071,
        "sender_full_name": "matklad",
        "timestamp": 1619434844
    },
    {
        "content": "<p>what kind of thing would get put into the scratch space? I'd think the biggest parts of the work happen behind salsa queries. Maybe that's not true for things like highlighting</p>",
        "id": 236157994,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1619436969
    },
    {
        "content": "<p>Nothing in particular, but it feels like we might be doing some allocs:</p>\n<p>Î» rg collect crates/ide/ | wc -l<br>\n40</p>",
        "id": 236158346,
        "sender_full_name": "matklad",
        "timestamp": 1619437158
    },
    {
        "content": "<p>assists often allocate a buch for the final edit</p>",
        "id": 236158391,
        "sender_full_name": "matklad",
        "timestamp": 1619437180
    },
    {
        "content": "<p>but yeah, threading this to the salsa would be nice. Although it's unclear how to best to that</p>",
        "id": 236158588,
        "sender_full_name": "matklad",
        "timestamp": 1619437269
    },
    {
        "content": "<p>a naive apporach is to use one scratch space for the whole end-to-end query, but I fear that that might be too much</p>",
        "id": 236158636,
        "sender_full_name": "matklad",
        "timestamp": 1619437303
    },
    {
        "content": "<p>like, the root query might be \"typecheck the world\", and, in that situation, not freeing anything at all until the very end seems to be excessive.</p>",
        "id": 236158718,
        "sender_full_name": "matklad",
        "timestamp": 1619437339
    },
    {
        "content": "<p>I guess, in an ideal world this should look like this:</p>\n<ul>\n<li>when invoking salsa, the caller can provide a  stack allocator -- a bump allocator, which also track frames obeying as tack disciplin</li>\n<li>query impl function get access to the this stack allocator. They can allocate temporary objects into it but (unlike scratch space in the issue), they can not return data stored in this alloc</li>\n<li>when executing a query, salsa runtime pushes a new frame on the stack allocator, and then pops the whole frame once the query fn finishes. </li>\n</ul>\n<p>In this scheme, unlike \"a scratch space for top-level query\", we only keep scrats space for the stack of active queries, and that's bounded</p>",
        "id": 236159358,
        "sender_full_name": "matklad",
        "timestamp": 1619437715
    },
    {
        "content": "<p>So, eg, this Vec looks like it could ideally be allocated onto some arena: <a href=\"https://github.com/matklad/rust-analyzer/blob/7bb9c147c0e4815ff8ed48dfee1d8267133bbef7/crates/hir_ty/src/method_resolution.rs#L904\">https://github.com/matklad/rust-analyzer/blob/7bb9c147c0e4815ff8ed48dfee1d8267133bbef7/crates/hir_ty/src/method_resolution.rs#L904</a></p>",
        "id": 236159603,
        "sender_full_name": "matklad",
        "timestamp": 1619437839
    },
    {
        "content": "<p>Although maybe what we need here is just <code>alloca</code> and huge stacks?</p>",
        "id": 236159654,
        "sender_full_name": "matklad",
        "timestamp": 1619437871
    },
    {
        "content": "<p>I was about to ask, why not just create a new arena owned by the query function? (or maybe those arenas could be pooled)</p>",
        "id": 236159726,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1619437919
    },
    {
        "content": "<p>Oh, does this show up in profiles?</p>",
        "id": 236160063,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1619438100
    },
    {
        "content": "<p>Yeah, that's a better way to do that :)</p>",
        "id": 236160934,
        "sender_full_name": "matklad",
        "timestamp": 1619438495
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink  [he/him]</span> this = allocations?</p>",
        "id": 236160953,
        "sender_full_name": "matklad",
        "timestamp": 1619438508
    },
    {
        "content": "<p>yeah</p>",
        "id": 236160964,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1619438516
    },
    {
        "content": "<p>Not really, and that's why I am conflicted here</p>",
        "id": 236160977,
        "sender_full_name": "matklad",
        "timestamp": 1619438523
    },
    {
        "content": "<p>Doing per-request arena is obviously the right way to approach this on the one hand, and it has significant architectural implications (retro-fitting arenas is painful).</p>",
        "id": 236161096,
        "sender_full_name": "matklad",
        "timestamp": 1619438570
    },
    {
        "content": "<p>But it is probably not the biggest perf sink at the moment for us</p>",
        "id": 236161182,
        "sender_full_name": "matklad",
        "timestamp": 1619438602
    },
    {
        "content": "<p>I wonder if you could hide this with TLS or something for each request.</p>",
        "id": 236203583,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1619454310
    },
    {
        "content": "<p>No borrows of anything inside of a thread local can escape the <code>MY_TLS_VAR.with(|my_tls_var| /*...*/)</code> closure without unsafe code. That includes anything allocated inside the arena. I think it won't be easy to make the unsafe code sound.</p>",
        "id": 236204391,
        "sender_full_name": "bjorn3",
        "timestamp": 1619454657
    }
]