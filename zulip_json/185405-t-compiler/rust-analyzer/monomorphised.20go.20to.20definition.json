[
    {
        "content": "<p>Please hold: Got hit by enter to submit</p>",
        "id": 233304800,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1617709821
    },
    {
        "content": "<p>I often find myself trying to work out what code gets called in a specific instantiation of a generic function, e.g. in</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Flob</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">              </span><span class=\"k\">fn</span> <span class=\"nf\">flobulate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">){</span><span class=\"o\">..</span><span class=\"p\">.}</span><span class=\"w\"> </span><span class=\"c1\">//&lt;-E</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Flob</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">              </span><span class=\"k\">fn</span> <span class=\"nf\">flobulate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">){</span><span class=\"o\">..</span><span class=\"p\">.}</span><span class=\"w\"> </span><span class=\"c1\">//&lt;- D</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">exec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Flob</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">val</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"c1\">// &lt;-B</span>\n<span class=\"w\">    </span><span class=\"n\">val</span><span class=\"p\">.</span><span class=\"n\">flobulate</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// &lt;-C</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">(){</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">exec</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"k\">u32</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"n\">A</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I would click go to definition on <code>exec</code> at A, which would take me to B. I'd then click go to definition of <code>flobulate</code> at C, which I would want to take me to D, but instead takes me to E, which doesn't actually show me the code which is run. This means that I have to drop what I'm trying to find out, and manually track which types are used in the instantiation I am interest with, trace them though (following associated types manually, for example) and then track down the specific trait implementation which is actually used.<br>\nThis is not fun, and feels like something rust-analyzer could help with.</p>",
        "id": 233305582,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1617710269
    },
    {
        "content": "<p>I mostly want to confirm that this is an issue that other people are having and think solutions could exist for. I suppose really <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/4558\">rust-analyzer#4558</a> would be a necessary prerequisite.</p>",
        "id": 233305845,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1617710411
    },
    {
        "content": "<p>My proposed user experience would be that when you follow a go to definition on a generic function, if specific type information is available (either from this procedure or because the call does not use the current context's generics), the generics the function is used with are pushed onto a stack somewhere. Ideally, going back using mouse 4 or alt-left would pop this stack. These generics would then be used to get the specific type information for the first step as far as possible. These types could also be displayed as inlay hints next to the generics, i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">exec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Flob</span><span class=\"p\">{</span><span class=\"n\">inlay</span><span class=\"w\"> </span><span class=\"n\">hint</span>: <span class=\"o\">=</span><span class=\"kt\">u32</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">val</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"c1\">// &lt;-B</span>\n<span class=\"w\">    </span><span class=\"n\">val</span><span class=\"p\">.</span><span class=\"n\">flobulate</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// &lt;-C</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>in my example</p>",
        "id": 233306587,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1617710745
    },
    {
        "content": "<p>Oh, I think this is exactly &lt;<a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/2541#issuecomment-565199436\">https://github.com/rust-analyzer/rust-analyzer/issues/2541#issuecomment-565199436</a>&gt;, so it's already on the radar.</p>",
        "id": 233306763,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1617710825
    },
    {
        "content": "<p>Yes, I'd love to see this. E-hard + E-fun though.</p>",
        "id": 233306927,
        "sender_full_name": "matklad",
        "timestamp": 1617710897
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"200146\">@Daniel Mcnab</span> could you post this as an issue? The existing issue is all other the place, we need something more specific here.</p>",
        "id": 233307036,
        "sender_full_name": "matklad",
        "timestamp": 1617710938
    },
    {
        "content": "<p>Should also link to the issue about goto definition going to an impl (one of the most voted for)</p>",
        "id": 233307109,
        "sender_full_name": "matklad",
        "timestamp": 1617710976
    },
    {
        "content": "<p>E-herculean</p>",
        "id": 233307323,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1617711062
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> in your example in <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/2541#issuecomment-565199436\">https://github.com/rust-analyzer/rust-analyzer/issues/2541#issuecomment-565199436</a>, where would you press go to definition the second time? On the <code>{}</code> in the format string?</p>",
        "id": 233309709,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1617712248
    },
    {
        "content": "<p>uh, indeed that's a bad example, as it doesn't literarly call <code>fmt</code></p>",
        "id": 233310188,
        "sender_full_name": "matklad",
        "timestamp": 1617712451
    },
    {
        "content": "<p>Added a <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/3419#issuecomment-814083408\">comment to #3419</a></p>",
        "id": 233310249,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1617712475
    },
    {
        "content": "<p>Right, made <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8373\">rust-analyzer#8373</a></p>",
        "id": 233310502,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1617712600
    },
    {
        "content": "<p>doing this properly will require LSP support, right? at least so the substitution stack can be pushed/popped in the right moments</p>",
        "id": 233335835,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1617721645
    },
    {
        "content": "<p>Maybe? If we add some special short-cut here, like \"goto def with subst\", then we need support. If we somehow piggy back that on top of usual goto def, then we don't need extra support</p>",
        "id": 233338064,
        "sender_full_name": "matklad",
        "timestamp": 1617722156
    },
    {
        "content": "<p>Pushing the stack should be easy enough to track, although we do have to think about the unbounded memory use it implies (since ideally you'd be able to have an infinite sidetrack somewhere else without losing your place, although that might be unreasonable.<br>\nPopping would be more difficult, we'd have to intercept <code>workbench.action.navigateBack</code>, which might not be possible in vscode; then make a custom protocol for it.</p>",
        "id": 233341696,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1617723337
    },
    {
        "content": "<p>another possibility ux-wise comes from vs, which lets you pick the type arguments from a dropdown based on find-all-references: <a href=\"https://devblogs.microsoft.com/cppblog/visual-studio-c-template-intellisense-populates-based-on-instantiations-in-your-code/\">https://devblogs.microsoft.com/cppblog/visual-studio-c-template-intellisense-populates-based-on-instantiations-in-your-code/</a></p>",
        "id": 233541640,
        "sender_full_name": "rpjohnst",
        "timestamp": 1617821254
    },
    {
        "content": "<p>no idea if that kind of extra ui is possible with lsp though</p>",
        "id": 233541695,
        "sender_full_name": "rpjohnst",
        "timestamp": 1617821276
    },
    {
        "content": "<p>that looks sick! but also not possible without extra client support</p>",
        "id": 233542068,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617821424
    },
    {
        "content": "<p>That seems like kind of the reverse - I almost commented that kind of idea, but I hadn't seen the Visual studio implementation of it</p>",
        "id": 233549987,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1617824830
    },
    {
        "content": "<p>Maybe you could get around it with a code action or custom command but I think this is worth an issue on <a href=\"https://github.com/microsoft/language-server-protocol/\">https://github.com/microsoft/language-server-protocol/</a> for the protocol support for goto def UI changes</p>",
        "id": 233568454,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1617832048
    }
]