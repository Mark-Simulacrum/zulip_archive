[
    {
        "content": "<p>Hey, I am slowly reading/digging more into <code>hir_def</code> to figure out an approach to support macro expansion at type alias positions:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Ty</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">U32</span><span class=\"o\">!</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">type</span> <span class=\"nc\">TayTo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">U32</span><span class=\"o\">!</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">testy</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Mom</span><span class=\"o\">&gt;</span>::<span class=\"n\">M</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// currently: {unknown}</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">TayTo</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// currently: {unknown}</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I think the first step might be to modify <code>TypeAlias</code>' ast (therefor <code>rust.ungrammar</code>) to also include an optional <code>MacroCall</code>. I was then looking into the <code>ItemTree</code> lowering code, which  should \"lower\" the <code>MacroCall</code> besides storing the type. At this point I am quite unsure, whether we would want to expand the <code>MacroCall</code> eagerly here (and the implications of doing so), but this wouldn't fit into the current \"model\", whereas just like current <code>MacroCalls</code>  are expanded later in <code>nameres::Collector</code>.</p>\n<p>I was wondering what approach/direction would be the \"best\" here.</p>",
        "id": 233227469,
        "sender_full_name": "cynecx",
        "timestamp": 1617655956
    },
    {
        "content": "<p>They cannot be expanded by the item tree, since that's crate-independent</p>",
        "id": 233229910,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617656771
    },
    {
        "content": "<p>I think <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/4bc8a018302d53951ae855ba57d07095a16ef182/crates/hir_def/src/type_ref.rs#L180\">here</a> would be a good place to start? it seems to me the syntax tree already supports macro calls in types, we just have to lower them there</p>",
        "id": 233232012,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1617657325
    },
    {
        "content": "<p>Thanks, I'll dig more into it!</p>",
        "id": 233233219,
        "sender_full_name": "cynecx",
        "timestamp": 1617657710
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> Is it actually possible to expand the macrocall at that point? (since that TypeRef will be constructed at ItemTree lowering)</p>",
        "id": 233861457,
        "sender_full_name": "cynecx",
        "timestamp": 1617989496
    },
    {
        "content": "<p>no, it needs to be expanded later</p>",
        "id": 233861724,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617989596
    },
    {
        "content": "<p>hmm true</p>",
        "id": 233861947,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1617989701
    },
    {
        "content": "<p>is there some part at this stage that also does this (delayed expansion)?</p>",
        "id": 233861987,
        "sender_full_name": "cynecx",
        "timestamp": 1617989718
    },
    {
        "content": "<p>you can either add a <code>Macro</code> variant to reflect this, or split <code>TypeRef</code> into pre- and post-expansion</p>",
        "id": 233862463,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617989944
    },
    {
        "content": "<p>the expansion would happen in the <code>struct_data</code> (etc.) queries, as well as during body lowering (for types in <code>let</code> statements and expressions)</p>",
        "id": 233862542,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617989991
    },
    {
        "content": "<p>I actually thought about your first suggestion,  however I wasn't quite sure how exactly that would work. But I think I might give this a go first! Thanks.</p>",
        "id": 233862910,
        "sender_full_name": "cynecx",
        "timestamp": 1617990128
    },
    {
        "content": "<p>I am getting the following macro expansion with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">expander</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Expander</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">file_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">module_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">match</span><span class=\"w\"> </span><span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"n\">expander</span><span class=\"p\">.</span><span class=\"n\">enter_expand</span>::<span class=\"o\">&lt;</span><span class=\"n\">ast</span>::<span class=\"n\">Type</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"c1\">// doesn't work because see below</span>\n</code></pre></div>\n<p>on</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">U32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Ty</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">U32</span><span class=\"o\">!</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>:</p>\n<div class=\"codehilite\"><pre><span></span><code>[crates/hir_def/src/body.rs:136] db.parse_or_expand(file_id) = Some(\n    MACRO_ITEMS@0..3\n      MACRO_CALL@0..3\n        PATH@0..3\n          PATH_SEGMENT@0..3\n            NAME_REF@0..3\n              IDENT@0..3 &quot;u32&quot;\n    ,\n)\n[crates/hir_def/src/data.rs:139] expander.enter_expand::&lt;ast::Type&gt;(db, call) = Ok(\n    ExpandResult {\n        value: None,\n        err: None,\n    },\n)\n</code></pre></div>\n<p>I didn't expect that the expansion would have a <code>MACRO_CALL</code> or <code>MACRO_ITEMS</code>. Am I doing something wrong?</p>",
        "id": 233885406,
        "sender_full_name": "cynecx",
        "timestamp": 1617999983
    },
    {
        "content": "<p>Ah  <code>hir_expand::db::to_fragment_kind</code> doesn't seem to cover this.</p>",
        "id": 233893579,
        "sender_full_name": "cynecx",
        "timestamp": 1618003140
    },
    {
        "content": "<p>Nice, extending the match with <code>MACRO_TYPE =&gt; FragmentKind::Type,</code> fixes the macro expansion.</p>",
        "id": 233894286,
        "sender_full_name": "cynecx",
        "timestamp": 1618003344
    },
    {
        "content": "<p>Now that I think about this, it might be easier to start with macro expansion in pattern position – that only has to happen inside item bodies, which happens in a single place in rust-analyzer</p>",
        "id": 233979071,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618081633
    },
    {
        "content": "<p>I might look into that</p>",
        "id": 233979461,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618081934
    },
    {
        "content": "<p>I actually do have a working implementation at type alias position. I am currently working on cleaning up stuff. My hopes were that fixing this would get <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/4774\">https://github.com/rust-analyzer/rust-analyzer/issues/4774</a> to work, however it seems that there is some issue with the complex trait bounds somewhere.</p>",
        "id": 233980956,
        "sender_full_name": "cynecx",
        "timestamp": 1618083276
    },
    {
        "content": "<p>However I might wanna open a WIP PR, I am absolutely not sure about the general ideal ive taken.</p>",
        "id": 233981228,
        "sender_full_name": "cynecx",
        "timestamp": 1618083528
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/8462\">https://github.com/rust-analyzer/rust-analyzer/pull/8462</a></p>",
        "id": 233981535,
        "sender_full_name": "cynecx",
        "timestamp": 1618083852
    },
    {
        "content": "<p>opened <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/8463\">https://github.com/rust-analyzer/rust-analyzer/pull/8463</a> for macros in pattern position</p>",
        "id": 233991191,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618090571
    },
    {
        "content": "<p>I am currently looking into \"expanding\" a <code>TypeRef</code>, which now has Macro variant. My first attempt would be to walk the <code>TypeRef</code> and mutably <code>mem::replace</code> all nested<code>Macro</code> variants.  I am not sure if this is a good idea since we might <code>mem::replace</code> an interned TypeRef, which I think might cause other issues because of, well interning?</p>",
        "id": 233998006,
        "sender_full_name": "cynecx",
        "timestamp": 1618097396
    },
    {
        "content": "<p>Interned TypeRefs are immutable, so you can only get immutable refs to the interior</p>",
        "id": 233998124,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618097490
    },
    {
        "content": "<p>the expansion will have to allocate and intern a new typeref</p>",
        "id": 233998179,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618097532
    },
    {
        "content": "<p>Uff, that's kind of cumbersome xD.</p>",
        "id": 233998204,
        "sender_full_name": "cynecx",
        "timestamp": 1618097564
    },
    {
        "content": "<p>okay it's 1am. lets go</p>",
        "id": 233998343,
        "sender_full_name": "cynecx",
        "timestamp": 1618097677
    },
    {
        "content": "<p>yeah, it's basically a type fold but without having type folding infra</p>",
        "id": 233998472,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618097819
    },
    {
        "content": "<p>I am currently using the following helper:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">panic</span>::<span class=\"p\">{</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">UnwindSafe</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[inline(always)]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">replace_with</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">UnwindSafe</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">UnwindSafe</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">dest</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">dest_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dest</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dest_ptr</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">panic</span>::<span class=\"n\">catch_unwind</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">old</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"fm\">eprintln!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">std</span>::<span class=\"n\">process</span>::<span class=\"n\">abort</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">dest_ptr</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Is that sound? (I am using that helper in my hacky type folding code). If so, would it be okay if i could add that to stdx?</p>",
        "id": 234056538,
        "sender_full_name": "cynecx",
        "timestamp": 1618156574
    },
    {
        "content": "<p>The catch with that helper is that an inner panic causes an abort. But I'd say that's okay?</p>",
        "id": 234056575,
        "sender_full_name": "cynecx",
        "timestamp": 1618156626
    },
    {
        "content": "<p>It's probably better to use <a href=\"https://docs.rs/replace_with/0.1.7/replace_with/\">https://docs.rs/replace_with/0.1.7/replace_with/</a> directly?</p>",
        "id": 234058432,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1618158537
    },
    {
        "content": "<p>It seems weird to me that you need this in general</p>",
        "id": 234058652,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618158760
    },
    {
        "content": "<p>Well, I am currently trying to transform/map each vec entry (<code>Vec&lt;TypeRef&gt;</code>) without allocating another vec . Afaik my options are replace_with or two <code>mem::replace</code>s with a dummy (<code>TypeRef::Error</code>?).</p>",
        "id": 234061280,
        "sender_full_name": "cynecx",
        "timestamp": 1618161309
    },
    {
        "content": "<p>Or is this premature optimization, idk.</p>",
        "id": 234061308,
        "sender_full_name": "cynecx",
        "timestamp": 1618161342
    },
    {
        "content": "<p>whats preventing you from borrowing from the vec and writing to the reference directly? I'm not sure I understand why this function here would be required</p>",
        "id": 234061406,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618161450
    },
    {
        "content": "<p>I would prefer replacing with <code>TypeRef::Error</code>, but I'm not sure you need to avoid the allocation? won't you need a copy in the end anyway?</p>",
        "id": 234061479,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1618161521
    },
    {
        "content": "<p>I was following the following pattern:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">fold_type_ref</span><span class=\"p\">(</span><span class=\"n\">type_ref</span>: <span class=\"nc\">TypeRef</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">TypeRef</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">TypeRef</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TypeRef</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"o\">..</span><span class=\"p\">.}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">fold_path</span><span class=\"p\">(</span><span class=\"n\">path</span>: <span class=\"nc\">Path</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">TypeRef</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">TypeRef</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Path</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 234061512,
        "sender_full_name": "cynecx",
        "timestamp": 1618161576
    },
    {
        "content": "<p>My attempt before was based on mutable borrows however that didn't work well for some reason.</p>",
        "id": 234061571,
        "sender_full_name": "cynecx",
        "timestamp": 1618161620
    },
    {
        "content": "<p>the item tree will contain unexpanded <code>TypeRef</code>s, right? so you can't expand in place anyway. I'd probably make it <code>&amp;TypeRef -&gt; TypeRef</code>?</p>",
        "id": 234061722,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1618161748
    },
    {
        "content": "<p>btw <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink  [he/him]</span> I just realized that <code>TypeRef</code> still uses boxes instead of <code>Interned</code>, did you try interning the insides of typerefs as well?</p>",
        "id": 234061760,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1618161809
    },
    {
        "content": "<p>It's kind of hard to explain. Here is my current attempt: <a href=\"https://gist.github.com/cynecx/3f406413e7c57e233d43a32abbbfcee8\">https://gist.github.com/cynecx/3f406413e7c57e233d43a32abbbfcee8</a></p>",
        "id": 234061821,
        "sender_full_name": "cynecx",
        "timestamp": 1618161853
    },
    {
        "content": "<p>I think I would first try to write the expansion code specifically, without building a whole <code>fold</code> infrastructure, and make it clone as it goes</p>",
        "id": 234061947,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1618162007
    },
    {
        "content": "<p>I actually doubt that we will have many more uses for such an infrastructure, because mostly that happens with lowered <code>Ty</code>s</p>",
        "id": 234061978,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1618162056
    },
    {
        "content": "<p>maybe we could even do the expansion during lowering? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> I hesitate to make type lowering more complicated, but it might fit in there</p>",
        "id": 234062060,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1618162173
    },
    {
        "content": "<p>(I'm talking about <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/7be06139b632ee615fc18af04dd67947e2c794b2/crates/hir_ty/src/lower.rs#L151\">this</a>)</p>",
        "id": 234062120,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1618162217
    },
    {
        "content": "<p>What kind of lowering are you talking about?</p>",
        "id": 234062135,
        "sender_full_name": "cynecx",
        "timestamp": 1618162227
    },
    {
        "content": "<p>oh didnt see your recent message yet</p>",
        "id": 234062149,
        "sender_full_name": "cynecx",
        "timestamp": 1618162241
    },
    {
        "content": "<p>that's going from <code>TypeRef</code> to <code>Ty</code>, it could probably macroexpand as it goes</p>",
        "id": 234062178,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1618162287
    },
    {
        "content": "<p>Oh</p>",
        "id": 234062184,
        "sender_full_name": "cynecx",
        "timestamp": 1618162300
    },
    {
        "content": "<p>I'm not sure it's a good idea though</p>",
        "id": 234062186,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1618162310
    },
    {
        "content": "<p>Didn't <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink  [he/him]</span>  actually mentioned this on GH?:</p>\n<p>He wrote: </p>\n<blockquote>\n<p>Yeah, I currently think the best way to do this is to add another variant to the existing TypeRef. It should then be replaced by the expanded type during lowering, or left as-is if the macro fails to resolve/expand.</p>\n</blockquote>\n<p>I was wondering what lowering he was talking about.</p>",
        "id": 234062244,
        "sender_full_name": "cynecx",
        "timestamp": 1618162354
    },
    {
        "content": "<p>maybe <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 234062253,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1618162380
    },
    {
        "content": "<p>That would be even easier actually, without type folding.</p>",
        "id": 234062377,
        "sender_full_name": "cynecx",
        "timestamp": 1618162454
    },
    {
        "content": "<p>I was actually thinking about <code>TypeRef -&gt; TypeRef</code> lowering in <code>data.rs</code>, <code>adt.rs</code>, and body lowering, but doing it when lowering to <code>Ty</code> might be easier, yeah</p>",
        "id": 234062740,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618162833
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/macro.20expansion.20at.20type.20alias.20position/near/234061760\">said</a>:</p>\n<blockquote>\n<p>btw <span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> I just realized that <code>TypeRef</code> still uses boxes instead of <code>Interned</code>, did you try interning the insides of typerefs as well?</p>\n</blockquote>\n<p>No, but that's probably something we should do</p>",
        "id": 234062950,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618163061
    },
    {
        "content": "<blockquote>\n<p>I was actually thinking about TypeRef -&gt; TypeRef lowering in <a href=\"http://data.rs\">data.rs</a>, <a href=\"http://adt.rs\">adt.rs</a>, and body lowering, </p>\n</blockquote>\n<p>That's partially how my local branch works right now. Does it have any implications when TypeRef expansion is moved to the TypeRef -&gt; Ty lowering code? Besides being easier to implement? (Also that would include inserting TypeRef expansion calls everytime a TypeRef is referenced in <a href=\"http://data.rs\">data.rs</a>, <a href=\"http://adt.rs\">adt.rs</a>, ...)</p>",
        "id": 234062953,
        "sender_full_name": "cynecx",
        "timestamp": 1618163065
    },
    {
        "content": "<p>it slightly changes what's recomputed in which cases when code changes, ... but probably not enough to matter <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 234064454,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1618164413
    }
]