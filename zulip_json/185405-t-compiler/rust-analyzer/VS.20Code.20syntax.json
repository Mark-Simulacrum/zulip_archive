[
    {
        "content": "<p>Hello! Do you have any plans regarding the syntax highlighting support for Code? Right now it seems a bit worse than the default TextMate syntax</p>",
        "id": 166157751,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558432382
    },
    {
        "content": "<p>I do have a WIP patch that improves things a little, but it won't be enough</p>",
        "id": 166157785,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558432422
    },
    {
        "content": "<p>I've opened <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/1294\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/1294\">https://github.com/rust-analyzer/rust-analyzer/issues/1294</a> just now :-)</p>",
        "id": 166157859,
        "sender_full_name": "matklad",
        "timestamp": 1558432467
    },
    {
        "content": "<p>Yeah, I added the ThemeColor thing</p>",
        "id": 166157871,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558432494
    },
    {
        "content": "<p>and a light theme that more or less matches the default one</p>",
        "id": 166157881,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558432504
    },
    {
        "content": "<p>We should improve highlighintg quite a bit, both in terms of how we interract with VS Code and what the user sees, as well as internally, in terms of how syntax highlighting is implemented</p>",
        "id": 166157894,
        "sender_full_name": "matklad",
        "timestamp": 1558432517
    },
    {
        "content": "<p>one remaining issue is that it doesn't highlight types</p>",
        "id": 166157897,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558432521
    },
    {
        "content": "<blockquote>\n<p>one remaining issue is that it doesn't highlight types</p>\n</blockquote>\n<p>There's so many things we can highlight better</p>",
        "id": 166157969,
        "sender_full_name": "matklad",
        "timestamp": 1558432567
    },
    {
        "content": "<p>the top one for me would be to underlying <code>mut</code> variables and variables with <code>&amp;mut</code> type</p>",
        "id": 166157988,
        "sender_full_name": "matklad",
        "timestamp": 1558432591
    },
    {
        "content": "<p>yeah, that would be interesting</p>",
        "id": 166158002,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558432613
    },
    {
        "content": "<p>maybe <code>unsafe</code> too</p>",
        "id": 166158006,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558432617
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/4AC-_s2j-BeezTLYdGbD1EKh/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/4AC-_s2j-BeezTLYdGbD1EKh/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/4AC-_s2j-BeezTLYdGbD1EKh/pasted_image.png\"></a></div>",
        "id": 166158054,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558432677
    },
    {
        "content": "<p>here's a quick preview</p>",
        "id": 166158057,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558432681
    },
    {
        "content": "<p>Looks good! Can you send a PR with ThemeColor?</p>\n<p>If you are interested in improving the internal  implementation, I can write some mentoring instructions as well!</p>",
        "id": 166158384,
        "sender_full_name": "matklad",
        "timestamp": 1558432932
    },
    {
        "content": "<p>I'll file one when it's in a better shape. It's still missing a high contrast set of colors and I'm pretty bad at picking them</p>",
        "id": 166158433,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558432994
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 166158659,
        "sender_full_name": "matklad",
        "timestamp": 1558433169
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/1299\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/1299\">https://github.com/rust-analyzer/rust-analyzer/pull/1299</a></p>",
        "id": 166162112,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558436828
    },
    {
        "content": "<p>Can I get rid of the <code>background</code> color? I don't see where it's used</p>",
        "id": 166170785,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558444490
    },
    {
        "content": "<p>I think you can: iirc, it's the editor how controls the background</p>",
        "id": 166170854,
        "sender_full_name": "matklad",
        "timestamp": 1558444560
    },
    {
        "content": "<p>the one here? <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/editors/code/src/highlighting.ts#L22\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/editors/code/src/highlighting.ts#L22\">https://github.com/rust-analyzer/rust-analyzer/blob/master/editors/code/src/highlighting.ts#L22</a></p>",
        "id": 166171160,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558444783
    },
    {
        "content": "<p>I thought they are emitted by RA</p>",
        "id": 166171166,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558444791
    },
    {
        "content": "<p>I'm also not sure what <code>builtin</code> is</p>",
        "id": 166171254,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558444846
    },
    {
        "content": "<p>can I check what a <code>NAME_REF</code> points to (function, type, variable)?</p>",
        "id": 166173843,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558446682
    },
    {
        "content": "<p>Yeah, and that's the big part of \"better highlighting\"</p>",
        "id": 166173883,
        "sender_full_name": "matklad",
        "timestamp": 1558446717
    },
    {
        "content": "<p>The rule should be that <code>NAME_REF</code> are colored into the same color as the thing they point to</p>",
        "id": 166173954,
        "sender_full_name": "matklad",
        "timestamp": 1558446739
    },
    {
        "content": "<p>That's not a simple change of the current code. See how goto_definition works, to learn about the API</p>",
        "id": 166174003,
        "sender_full_name": "matklad",
        "timestamp": 1558446781
    },
    {
        "content": "<p>The TL;DR: is that we should go from syntax to hir, and do resolution there</p>",
        "id": 166174025,
        "sender_full_name": "matklad",
        "timestamp": 1558446799
    },
    {
        "content": "<p>that will require doing name resolution for highlighting though -- should there be separate 'levels'? i.e. VSCode probably does simple regex-based (lexer level) highlighting for keywords, then we can do syntax based highlighting, and then semantic</p>",
        "id": 166174154,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1558446878
    },
    {
        "content": "<p>Yeah, that's the other bit of the plan: do highlighting in several phases: lexical, syntactical, semantic/diagnosict</p>",
        "id": 166174270,
        "sender_full_name": "matklad",
        "timestamp": 1558446940
    },
    {
        "content": "<p>And yet another bit of a puzzle  is region-based highlighting: we should highilght only the vewiport</p>",
        "id": 166174357,
        "sender_full_name": "matklad",
        "timestamp": 1558446968
    },
    {
        "content": "<p>I tried to cast the node to a <code>NameRef</code>, invoke the go to definition machinery, get a <code>NavigationTarget</code>, but I'm not sure what to do now (:</p>",
        "id": 166176442,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558448216
    },
    {
        "content": "<p>ah, nice</p>",
        "id": 166178312,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558449426
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/utXOoUB0gB7mtNIXbpTwGyr0/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/utXOoUB0gB7mtNIXbpTwGyr0/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/utXOoUB0gB7mtNIXbpTwGyr0/pasted_image.png\"></a></div>",
        "id": 166178314,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558449428
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> you shouldn't invoke go to definition machinery exactly, you should use the HIR API directly:</p>\n<div class=\"codehilite\"><pre><span></span>    if let Some(path) = name_ref.syntax().ancestors().find_map(ast::Path::cast) {\n        if let Some(resolved) = analyzer.resolve_path(db, path) {\n            match resolved {\n                hir::PathResolution::Def(def) =&gt; return Exact(NavigationTarget::from_def(db, def)),\n                hir::PathResolution::LocalBinding(pat) =&gt; {\n</pre></div>",
        "id": 166179514,
        "sender_full_name": "matklad",
        "timestamp": 1558450203
    },
    {
        "content": "<p>maybe we can extract some of that glue code into a module which is shared by both goto defenition and highlighting, but highlighting shouldn't be invoking goto def directly</p>",
        "id": 166179565,
        "sender_full_name": "matklad",
        "timestamp": 1558450249
    },
    {
        "content": "<p>right, that makes sense</p>",
        "id": 166179640,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558450311
    },
    {
        "content": "<p>can I just make a new <code>SourceAnalyzer</code>?</p>",
        "id": 166179710,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558450336
    },
    {
        "content": "<p>I was using <code>reference_definition</code></p>",
        "id": 166179805,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558450408
    },
    {
        "content": "<p>You can make something that wraps <code>SourceAnalyzer</code> and has methods like <code>classify_nameref</code></p>",
        "id": 166179826,
        "sender_full_name": "matklad",
        "timestamp": 1558450422
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>      10571ms - handle_code_action\n              0ms - diagnostics\n</pre></div>",
        "id": 166196550,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558461621
    },
    {
        "content": "<p>we need a way to disable these</p>",
        "id": 166196555,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558461627
    },
    {
        "content": "<p>actually, it was just loading this time, I guess. but the diagnostics are slow at times</p>",
        "id": 166196629,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558461675
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> The issue with highlighting <code>NAME</code> as <code>function</code> is that it will apply equally to function, type and struct names. I would prefer to have type names and references to them to have the same color</p>",
        "id": 166353636,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558612802
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/B9ny-x2O0HvZvM6V_1sLm7P0/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/B9ny-x2O0HvZvM6V_1sLm7P0/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/B9ny-x2O0HvZvM6V_1sLm7P0/pasted_image.png\"></a></div>",
        "id": 166353706,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558612813
    },
    {
        "content": "<p>Yeah, we should use something more precise than just \"Name\"</p>",
        "id": 166353746,
        "sender_full_name": "matklad",
        "timestamp": 1558612873
    },
    {
        "content": "<p>It's probably fine short-term, though</p>",
        "id": 166353747,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558612875
    },
    {
        "content": "<p>\"function\"</p>",
        "id": 166353748,
        "sender_full_name": "matklad",
        "timestamp": 1558612877
    },
    {
        "content": "<p>but short-term, \"function\" is better than \"text\"</p>",
        "id": 166353755,
        "sender_full_name": "matklad",
        "timestamp": 1558612890
    },
    {
        "content": "<p>same for things like</p>\n<div class=\"codehilite\"><pre><span></span>                    BIND_PAT@[3091; 3105)\n                      NAME@[3091; 3105)\n                        IDENT@[3091; 3105) &quot;TYPE_ALIAS_DEF&quot;\n</pre></div>",
        "id": 166353816,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558612932
    },
    {
        "content": "<p>Yeah, I thik we need something like \"classify_name\" as welll</p>",
        "id": 166354067,
        "sender_full_name": "matklad",
        "timestamp": 1558613173
    },
    {
        "content": "<p>Next time :-). I'll update the test and hopefully we're good to go with this</p>",
        "id": 166354161,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558613261
    },
    {
        "content": "<p>Gah, I wonder when the <code>Debug</code> comma change will hit stable</p>",
        "id": 166354681,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558613699
    },
    {
        "content": "<p>This friday? Or is it in the next reelase?</p>",
        "id": 166354723,
        "sender_full_name": "matklad",
        "timestamp": 1558613758
    },
    {
        "content": "<p>Yeah, it's in beta</p>",
        "id": 166354972,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558613948
    },
    {
        "content": "<p>re <a href=\"https://github.com/rust-lang/rust/issues/1314\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/1314\">#1314</a>, we'll still need to handle the case when <code>classify_name_ref</code> fails</p>",
        "id": 166360933,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558618668
    },
    {
        "content": "<p>Indeed... I think we need some variants like <code>UnresolvedPathSegment</code>, <code>UnresolvedFieldAccess</code>, etc. Actually, for FieldAccess we can do <code>FieldAccess(Option&lt;hir::StructField&gt;),</code>, that is, we can move <code>None</code> <em>inside</em> some of the variants</p>",
        "id": 166361210,
        "sender_full_name": "matklad",
        "timestamp": 1558618832
    },
    {
        "content": "<p>That sounds like a good idea</p>",
        "id": 166361275,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558618880
    },
    {
        "content": "<p>Also, this <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide_api/src/name_ref_kind.rs#L26-L71\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide_api/src/name_ref_kind.rs#L26-L71\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide_api/src/name_ref_kind.rs#L26-L71</a> looks a bit weird</p>",
        "id": 166361415,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558618952
    },
    {
        "content": "<p>Shouldn't it try to resolve a path first, then handle function calls, macros, and the other things?</p>",
        "id": 166361444,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558618974
    },
    {
        "content": "<p>I would expect both <code>f()</code> and <code>m::f()</code> to go through the path logic, with <code>f</code> getting resolved as a function call at the end</p>",
        "id": 166361586,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558619067
    },
    {
        "content": "<p>That what actually happens</p>",
        "id": 166361634,
        "sender_full_name": "matklad",
        "timestamp": 1558619103
    },
    {
        "content": "<p>the only special case is <strong>method</strong> calls</p>",
        "id": 166361649,
        "sender_full_name": "matklad",
        "timestamp": 1558619111
    },
    {
        "content": "<p><code>x.foo()</code> is not the same as <code>(x.foo)()</code></p>",
        "id": 166361664,
        "sender_full_name": "matklad",
        "timestamp": 1558619124
    },
    {
        "content": "<p>so, you need to special case that</p>",
        "id": 166361667,
        "sender_full_name": "matklad",
        "timestamp": 1558619129
    },
    {
        "content": "<p>So it's for methods (not functions) and fields?</p>",
        "id": 166361739,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558619165
    },
    {
        "content": "<p>But there's also a case for macros</p>",
        "id": 166361756,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558619188
    },
    {
        "content": "<p>Hm, yeah, I think macros can be hadled slightly better</p>",
        "id": 166361783,
        "sender_full_name": "matklad",
        "timestamp": 1558619227
    },
    {
        "content": "<p>We should first fetch a path</p>",
        "id": 166361789,
        "sender_full_name": "matklad",
        "timestamp": 1558619233
    },
    {
        "content": "<p>and only then check path's parent and call either \"resovle_path\" or \"resolve_macro\"</p>",
        "id": 166361809,
        "sender_full_name": "matklad",
        "timestamp": 1558619252
    },
    {
        "content": "<p>Yeah, something like that</p>",
        "id": 166361990,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558619369
    },
    {
        "content": "<p>I wonder if parts of <code>completion_context.rs</code> could reuse the same logic</p>",
        "id": 166389025,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558637762
    },
    {
        "content": "<p>That one also has a <code>classify_name_ref</code>, but it seems to operate only on the AST</p>",
        "id": 166389058,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558637779
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> I wondered that as well!</p>\n<p>I think though that completion is a pretty unique subsystem, and it might want to do things differently (for example, it has to process two files, original one and the one with a fake identifier). So, while it seems like there's a duplication there, I think we shouldn't try to agressively remove it</p>",
        "id": 166448960,
        "sender_full_name": "matklad",
        "timestamp": 1558702347
    },
    {
        "content": "<p>We definitelly want to employ <code>classify_name_ref</code> in hover though!</p>",
        "id": 166448980,
        "sender_full_name": "matklad",
        "timestamp": 1558702366
    },
    {
        "content": "<p>Is there a reason why name resolution doesn't seem to work for <code>i32</code>?</p>",
        "id": 166786833,
        "sender_full_name": "Laurențiu",
        "timestamp": 1559110193
    },
    {
        "content": "<p>I mean, I imagine why, but is it tracked somewhere?</p>",
        "id": 166786933,
        "sender_full_name": "Laurențiu",
        "timestamp": 1559110319
    },
    {
        "content": "<p><code>i32</code> is a primitive type, so there's nothing we can resolve it to.</p>",
        "id": 166788193,
        "sender_full_name": "matklad",
        "timestamp": 1559111974
    },
    {
        "content": "<p>OTOH, yeah, the resolver can returns something like \"primitive type\" here...</p>",
        "id": 166788447,
        "sender_full_name": "matklad",
        "timestamp": 1559112339
    },
    {
        "content": "<p>there's this issue that's visible in the HTML colorization, where types get assigned two tags</p>",
        "id": 166788598,
        "sender_full_name": "Laurențiu",
        "timestamp": 1559112515
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;foo&lt;/span&gt;&amp;lt;&lt;span class=&quot;type type&quot;&gt;T&lt;/span&gt;&amp;gt;() -&amp;gt; &lt;span class=&quot;type&quot;&gt;T&lt;/span&gt; {\n</pre></div>",
        "id": 166788604,
        "sender_full_name": "Laurențiu",
        "timestamp": 1559112528
    },
    {
        "content": "<p>I think that's because they're handled twice, once as <code>TYPE_PARAM</code>, and once as a <code>NAME</code></p>",
        "id": 166788721,
        "sender_full_name": "Laurențiu",
        "timestamp": 1559112719
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">            </span><span class=\"n\">TYPE_ALIAS_DEF</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">TYPE_ARG</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">TYPE_PARAM</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"s\">&quot;type&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n</pre></div>",
        "id": 166788768,
        "sender_full_name": "Laurențiu",
        "timestamp": 1559112732
    },
    {
        "content": "<p>Yeah, that's a common bug in this kind of code</p>",
        "id": 166788773,
        "sender_full_name": "matklad",
        "timestamp": 1559112764
    },
    {
        "content": "<p>Some logic for prioritization should be added</p>",
        "id": 166788778,
        "sender_full_name": "matklad",
        "timestamp": 1559112777
    },
    {
        "content": "<p>Or, we should just explicitly handle all named thigs</p>",
        "id": 166788794,
        "sender_full_name": "matklad",
        "timestamp": 1559112793
    },
    {
        "content": "<p>And it makes sense to remove that line, since (I imagine) we want to highlight terminals (if that's the correct term)</p>",
        "id": 166788796,
        "sender_full_name": "Laurențiu",
        "timestamp": 1559112798
    },
    {
        "content": "<p>and <code>TYPE_PARAM</code> isn't one</p>",
        "id": 166788799,
        "sender_full_name": "Laurențiu",
        "timestamp": 1559112811
    },
    {
        "content": "<p>Thats, we don't color name when we visit name, we color it when we visit type alias, function definition, struct definition, etc</p>",
        "id": 166788803,
        "sender_full_name": "matklad",
        "timestamp": 1559112823
    },
    {
        "content": "<p>but then things like <code>i32</code> won't be highlighted</p>",
        "id": 166788804,
        "sender_full_name": "Laurențiu",
        "timestamp": 1559112825
    },
    {
        "content": "<p>but my gut feeling is that removing <code>TYPE_ALIAS_DEF | TYPE_ARG | TYPE_PARAM =&gt; \"type\",</code> is ok</p>",
        "id": 166788858,
        "sender_full_name": "matklad",
        "timestamp": 1559112848
    },
    {
        "content": "<p>yeah, I meant the other way around (highlight names, not definitions)</p>",
        "id": 166788861,
        "sender_full_name": "Laurențiu",
        "timestamp": 1559112856
    },
    {
        "content": "<p>So I remember a BUILTIN NodeKind that is not used, was it supposed to be used for primitive types or something else?</p>",
        "id": 166789751,
        "sender_full_name": "Laurențiu",
        "timestamp": 1559113984
    },
    {
        "content": "<p>And I think there's no UNION_DEF</p>",
        "id": 166789816,
        "sender_full_name": "Laurențiu",
        "timestamp": 1559114051
    },
    {
        "content": "<p>I wouldn't say that original kinds were really <em>supposed</em> to be used for anything. I think I've just copy-pasted them from fall, so, if something doesn't make sense, it probably indeed is senseless :)</p>",
        "id": 166789833,
        "sender_full_name": "matklad",
        "timestamp": 1559114089
    },
    {
        "content": "<p>Fair enough</p>",
        "id": 166789857,
        "sender_full_name": "Laurențiu",
        "timestamp": 1559114118
    },
    {
        "content": "<p>I am not sure if we should color primitive types like ixx, fxx str and char specially</p>",
        "id": 166789858,
        "sender_full_name": "matklad",
        "timestamp": 1559114120
    },
    {
        "content": "<p>Like types, maybe? Or keywords</p>",
        "id": 166789867,
        "sender_full_name": "Laurențiu",
        "timestamp": 1559114157
    },
    {
        "content": "<p>I think they should be just types</p>",
        "id": 166789915,
        "sender_full_name": "matklad",
        "timestamp": 1559114167
    },
    {
        "content": "<p>more specifically, structs</p>",
        "id": 166789920,
        "sender_full_name": "matklad",
        "timestamp": 1559114178
    },
    {
        "content": "<p>Yup</p>",
        "id": 166789923,
        "sender_full_name": "Laurențiu",
        "timestamp": 1559114185
    },
    {
        "content": "<p>(I think we can color enums and structs differently, though I don't know if we nececssary should)</p>",
        "id": 166789934,
        "sender_full_name": "matklad",
        "timestamp": 1559114206
    },
    {
        "content": "<p>And that should be handled by type resolution, not in the grammar, right?</p>",
        "id": 166789951,
        "sender_full_name": "Laurențiu",
        "timestamp": 1559114232
    },
    {
        "content": "<p>The primitives</p>",
        "id": 166789963,
        "sender_full_name": "Laurențiu",
        "timestamp": 1559114250
    },
    {
        "content": "<p>Hm</p>",
        "id": 166789966,
        "sender_full_name": "matklad",
        "timestamp": 1559114259
    },
    {
        "content": "<p>not by the grammar, but not by the type resolution either</p>",
        "id": 166789971,
        "sender_full_name": "matklad",
        "timestamp": 1559114274
    },
    {
        "content": "<p>I think this is the job of name resolution</p>",
        "id": 166789973,
        "sender_full_name": "matklad",
        "timestamp": 1559114281
    },
    {
        "content": "<p>(although, I guess, currently this logic wrongly lives in type inference code, let me take a look)</p>",
        "id": 166790021,
        "sender_full_name": "matklad",
        "timestamp": 1559114302
    },
    {
        "content": "<p>Yeah, the primitive type resolution currently lives in type inference, I think because the name resolution doesn't know about types and there's nothing 'intermediate' the primitives can resolve to</p>",
        "id": 166790313,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1559114658
    },
    {
        "content": "<p>TIL: this is valid rust: <code>pub use i32 as int;</code></p>",
        "id": 166790426,
        "sender_full_name": "matklad",
        "timestamp": 1559114791
    },
    {
        "content": "<p>So, name resolution needs to learn about i32 and friends</p>",
        "id": 166790450,
        "sender_full_name": "matklad",
        "timestamp": 1559114827
    },
    {
        "content": "<p>submitted <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/1340\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/1340\">https://github.com/rust-analyzer/rust-analyzer/issues/1340</a></p>",
        "id": 166794858,
        "sender_full_name": "matklad",
        "timestamp": 1559118942
    },
    {
        "content": "<p>maybe we should just give them a <code>StructId</code>?</p>",
        "id": 166797160,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1559121000
    },
    {
        "content": "<p>I was thinking about that, and builtins seems cleaner: with <code>StructId</code>, we'd have to assign them to a particular crate, handle <code>source</code>, etc</p>",
        "id": 166797395,
        "sender_full_name": "matklad",
        "timestamp": 1559121150
    },
    {
        "content": "<p>Or you mean, assigning <code>StructId</code>, but <strong>not</strong> allowing to create a <code>Struct</code> of them?</p>",
        "id": 166797429,
        "sender_full_name": "matklad",
        "timestamp": 1559121184
    },
    {
        "content": "<p>no, if we assign a <code>StructId</code> we need to allow creating a <code>Struct</code>... but yeah, maybe it's more trouble than it's worth</p>",
        "id": 166797453,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1559121222
    },
    {
        "content": "<p>This is nicely handled in Go. In the stdlib, they have stub like <code>extern type int;</code>, so primitive types have a real definition in stdlib</p>",
        "id": 166800885,
        "sender_full_name": "matklad",
        "timestamp": 1559124427
    },
    {
        "content": "<p>this won't work for rust due to <code>no_core</code></p>",
        "id": 166800888,
        "sender_full_name": "matklad",
        "timestamp": 1559124436
    },
    {
        "content": "<p>An update from Code: <a href=\"https://github.com/microsoft/vscode/issues/77140\" target=\"_blank\" title=\"https://github.com/microsoft/vscode/issues/77140\">https://github.com/microsoft/vscode/issues/77140</a></p>",
        "id": 173663637,
        "sender_full_name": "Laurențiu",
        "timestamp": 1566311872
    },
    {
        "content": "<p>Oh neat. I haven't seen tree-sitter before.</p>",
        "id": 173669459,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1566315898
    },
    {
        "content": "<p>Tree-sitter is an absolute <span aria-label=\"fire\" class=\"emoji emoji-1f525\" role=\"img\" title=\"fire\">:fire:</span> !</p>",
        "id": 173669781,
        "sender_full_name": "matklad",
        "timestamp": 1566316168
    },
    {
        "content": "<p>Is that a good <span aria-label=\"fire\" class=\"emoji emoji-1f525\" role=\"img\" title=\"fire\">:fire:</span> or a <span aria-label=\"trash can\" class=\"emoji emoji-1f5d1\" role=\"img\" title=\"trash can\">:trash_can:</span> <span aria-label=\"fire\" class=\"emoji emoji-1f525\" role=\"img\" title=\"fire\">:fire:</span>? The use of the indefinite article suggests the latter</p>",
        "id": 173669982,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1566316331
    },
    {
        "content": "<p>a good one!</p>",
        "id": 173670049,
        "sender_full_name": "matklad",
        "timestamp": 1566316401
    },
    {
        "content": "<p>Fair enough!</p>",
        "id": 173670158,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1566316497
    }
]