[
    {
        "content": "<p>Heya; I was wondering what steps would be required to implement interactive assist prompts like the VS Code Java extension has.</p>\n<p><a href=\"/user_uploads/4715/3gzAkim6fuIsRe5Gl-xuF8ZP/92124898-a392bb80-edfe-11ea-8363-1a15ba3bcab0.gif\">92124898-a392bb80-edfe-11ea-8363-1a15ba3bcab0.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/3gzAkim6fuIsRe5Gl-xuF8ZP/92124898-a392bb80-edfe-11ea-8363-1a15ba3bcab0.gif\" title=\"92124898-a392bb80-edfe-11ea-8363-1a15ba3bcab0.gif\"><img src=\"/user_uploads/4715/3gzAkim6fuIsRe5Gl-xuF8ZP/92124898-a392bb80-edfe-11ea-8363-1a15ba3bcab0.gif\"></a></div><p>We already have several drop-down assists; but none which operate in bulk the way the example above does. I assume there's likely to be LSP protocol work, VS Code plugin work, and work on the assists required to make this happen. The assist part I'm already familiar with; but I'd love to learn where to look to make the other parts happen too. Thanks!</p>",
        "id": 249345473,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1628851664
    },
    {
        "content": "<p>there's been quite a bit of <a href=\"https://github.com/microsoft/language-server-protocol/issues/1164\">discussion</a> about this, and I think in general we prefer not to have prompts at all, but maybe 'bulk' operations are a different matter</p>",
        "id": 249345664,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1628851806
    },
    {
        "content": "<p>what do you mean by drop-down assists?</p>",
        "id": 249345689,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1628851823
    },
    {
        "content": "<p>I'm not sure that's supported by LSP, and if it's an extension it would mean excluding non-Code users from this feature.</p>",
        "id": 249345693,
        "sender_full_name": "Laurențiu",
        "timestamp": 1628851827
    },
    {
        "content": "<p>it's not, currently</p>",
        "id": 249345741,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1628851867
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/interactive.20prompts/near/249345689\">said</a>:</p>\n<blockquote>\n<p>what do you mean by drop-down assists?</p>\n</blockquote>\n<p>In some cases we have multi-level assists right now in lieu of prompts. E.g. the \"generate getter/setter\" assist uses \"generate getter/setter\" and then a secondary prompt which displays: \"generate getter, generate mut getter, generate setter\". In the Java VS Code plugin these all go through a prompt much like the one I shared above:</p>\n<p><a href=\"https://code.visualstudio.com/docs/java/java-refactoring#_generate-getters-and-setters\">https://code.visualstudio.com/docs/java/java-refactoring#_generate-getters-and-setters</a></p>",
        "id": 249345840,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1628851927
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/interactive.20prompts/near/249345741\">said</a>:</p>\n<blockquote>\n<p>it's not, currently</p>\n</blockquote>\n<p>ah dang, that's unfortunate</p>",
        "id": 249345888,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1628851969
    },
    {
        "content": "<p>ah, those multi-level assists are code action groups, which are a custom extension (but if the client doesn't support it, they just show up flattened)</p>",
        "id": 249346077,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1628852142
    },
    {
        "content": "<p>The main context for this is that I'm thinking about the: <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/5944\">\"generate delegate methods\"</a> assist; and having a visual prompt like the Java extension has seems pretty ideal for this.</p>",
        "id": 249346169,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1628852182
    },
    {
        "content": "<p>Whenever I delegate methods it tends to be for newtype / combining types, and it usually ends up being a fair number of methods that end up being delegated.</p>",
        "id": 249346289,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1628852281
    },
    {
        "content": "<p>one alternative UI could be a completion</p>",
        "id": 249346394,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1628852343
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/interactive.20prompts/near/249346394\">said</a>:</p>\n<blockquote>\n<p>one alternative UI could be a completion</p>\n</blockquote>\n<p>can you elaborate?</p>",
        "id": 249346415,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1628852362
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/interactive.20prompts/near/249346077\">said</a>:</p>\n<blockquote>\n<p>ah, those multi-level assists are code action groups, which are a custom extension (but if the client doesn't support it, they just show up flattened)</p>\n</blockquote>\n<p>What about the checkboxes the command pane?</p>",
        "id": 249346428,
        "sender_full_name": "Laurențiu",
        "timestamp": 1628852371
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu</span> the checkboxes are from the Java extension IIUC, we don't have something like that</p>",
        "id": 249346460,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1628852398
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts</span> I mean something like, if you want to delegate <code>foo</code> you write <code>fn foo</code> and it suggests a completion with the full method body</p>",
        "id": 249346586,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1628852450
    },
    {
        "content": "<p>not saying that would necessarily better, I'm not even sure it can work in this case</p>",
        "id": 249346623,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1628852482
    },
    {
        "content": "<p>oh like that; hmm</p>",
        "id": 249346646,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1628852508
    },
    {
        "content": "<p>It's not really discoverable</p>",
        "id": 249346727,
        "sender_full_name": "Laurențiu",
        "timestamp": 1628852555
    },
    {
        "content": "<p>yeah, that's what I was thinking too</p>",
        "id": 249346737,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1628852563
    },
    {
        "content": "<p>I disagree about that -- you're just doing what you would be doing manually</p>",
        "id": 249346751,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1628852578
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/r8W_8UdXoUzpKnib_acBnmJn/c.mp4\">c.mp4</a></p>",
        "id": 249346762,
        "sender_full_name": "matklad",
        "timestamp": 1628852588
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/K8RRZlhQKwR268W2t633o-_-/c.gif\">c.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/K8RRZlhQKwR268W2t633o-_-/c.gif\" title=\"c.gif\"><img src=\"/user_uploads/4715/K8RRZlhQKwR268W2t633o-_-/c.gif\"></a></div>",
        "id": 249346881,
        "sender_full_name": "matklad",
        "timestamp": 1628852675
    },
    {
        "content": "<p>oh I see; yeah actually that _would_ be nice</p>",
        "id": 249346934,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1628852720
    },
    {
        "content": "<p>I mean, we can't know what to use for the method body unless you do a <code>// delegate * to self.foo</code> thing.</p>",
        "id": 249346936,
        "sender_full_name": "Laurențiu",
        "timestamp": 1628852723
    },
    {
        "content": "<p>presumably in most situations there would be only one thing to delegate to</p>",
        "id": 249346965,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1628852750
    },
    {
        "content": "<p>but that's why I'm not so sure about it</p>",
        "id": 249347069,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1628852808
    },
    {
        "content": "<p>maybe a solution would be to introduce two variants of the assist? One for unambiguous in-line function completion (like matklad's video). And one \"delegate method\" for per-item drop-downs that can be selected on the struct</p>",
        "id": 249347129,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1628852863
    },
    {
        "content": "<p>that could be part of the solution, yeah. Like for trait methods, we also have the completion and an assist that implements all of them at once</p>",
        "id": 249347253,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1628852941
    },
    {
        "content": "<blockquote>\n<p>we also have the completion</p>\n</blockquote>\n<p>oh wait; I just modified that logic earlier this week. I think I might have missed that exact case; do you know the name of that assist?</p>",
        "id": 249347299,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1628852992
    },
    {
        "content": "<p>the completion is <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ide_completion/src/completions/trait_impl.rs\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ide_completion/src/completions/trait_impl.rs</a></p>",
        "id": 249347398,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1628853049
    },
    {
        "content": "<p>blesss, thank you</p>",
        "id": 249347437,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1628853095
    },
    {
        "content": "<p>looks like I missed that, haha</p>",
        "id": 249347457,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1628853106
    },
    {
        "content": "<p>Is the policy that if a particular feature can't be done in LSP, don't implement the feature or is there room for a more nuance? For example, all features must have some analogue in pure LSP, but individual implementations (e.g., VS Code) can be extended with more rich features?</p>",
        "id": 249349293,
        "sender_full_name": "rylev",
        "timestamp": 1628854583
    },
    {
        "content": "<p>Our policy is that we don't care much what LSP does -- if we need a thing, we just do a thing, and then pester upstream to include analogue into the protocol. We do care to carefuly document and feature guard our extensions (see <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/dev/lsp-extensions.md\">https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/dev/lsp-extensions.md</a>)</p>",
        "id": 249350297,
        "sender_full_name": "matklad",
        "timestamp": 1628855365
    },
    {
        "content": "<p>Ok then it sounds like interactive prompts are a possibility (if we decide that's the best UX), we just won't be able to offer it to all users of the LSP only to VS Code users for now, right?</p>",
        "id": 249350508,
        "sender_full_name": "rylev",
        "timestamp": 1628855519
    },
    {
        "content": "<p>Even better than that: there folks who maintain ra extensions for emacs and vims, and they likely will adapt our extension.</p>",
        "id": 249350799,
        "sender_full_name": "matklad",
        "timestamp": 1628855733
    },
    {
        "content": "<p>To give a summary without reading the whole discussions:</p>\n<ul>\n<li>technically, doing checkboxes is just a moderate amount of work -- it's not a big feature we need to discuss up-front, someone can just send a PR</li>\n<li>UX-wise, I feel that checkboxes might not be optimal. For refactors, VS Code API is <em>very</em> restricted. We should aspire to actually good UX like in <a href=\"https://www.youtube.com/watch?v=GRmOXuoe648&amp;t=7872s\">https://www.youtube.com/watch?v=GRmOXuoe648&amp;t=7872s</a><div class=\"youtube-video message_inline_image\"><a data-id=\"GRmOXuoe648\" href=\"https://www.youtube.com/watch?v=GRmOXuoe648&amp;t=7872s\"><img src=\"https://uploads.zulipusercontent.net/cdfbbfd1c0d2ef0b83f9b44f94193b7547556b67/68747470733a2f2f692e7974696d672e636f6d2f76692f47526d4f58756f653634382f64656661756c742e6a7067\"></a></div></li>\n<li>practically, let's design the LSP extension such that we don't hard-code the UI to be checkboxes exactly, and leave some space for clients to expermient with the best possible representation.</li>\n</ul>",
        "id": 249351060,
        "sender_full_name": "matklad",
        "timestamp": 1628855890
    }
]