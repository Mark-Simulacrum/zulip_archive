[
    {
        "content": "<p>I'm currently noticing a problem where rust-analyzer stops responding to any queries and pegs a CPU core seemingly forever. This happens regularly when working on a new file I created in the rust compiler under <code>src/librustc_mir/transform/dag_nrvo.rs</code>. I've posted the contents <a href=\"https://gist.github.com/jonas-schievink/81897788c04417b035a307ce716e6b63\" title=\"https://gist.github.com/jonas-schievink/81897788c04417b035a307ce716e6b63\">here</a> but I'm not sure that's enough to reproduce the issue.</p>\n<p>Has anybody seen a hang like this before?</p>",
        "id": 193360935,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1586370975
    },
    {
        "content": "<p>Hmm, I wrote some more code and now the issue seems to be gone</p>",
        "id": 193379541,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1586380475
    },
    {
        "content": "<p>might be <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/3861\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/3861\">https://github.com/rust-analyzer/rust-analyzer/issues/3861</a></p>",
        "id": 193379723,
        "sender_full_name": "matklad",
        "timestamp": 1586380575
    },
    {
        "content": "<p>Still seems to be an issue, unfortunately (as of commit 176f7f6)</p>",
        "id": 193620791,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1586554780
    },
    {
        "content": "<p>Not entirely sure how to reproduce the issue, or how to profile r-a, but running <code>analysis-stats</code> panics with this error:</p>\n<blockquote>\n<p>thread 'main' panicked at 'no value set for FileTextQuery(FileId(9280))'</p>\n</blockquote>\n<p>It also outputs a bunch of cyclic dependency errors (that don't seem to cause any issues so far)</p>",
        "id": 193621209,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1586555015
    },
    {
        "content": "<blockquote>\n<p>2958 textDocument/codeAction             132438ms</p>\n</blockquote>",
        "id": 193627449,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1586559385
    },
    {
        "content": "<p>(removed)</p>",
        "id": 193636162,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586569008
    },
    {
        "content": "<p>(whoops)</p>",
        "id": 193636168,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586569024
    },
    {
        "content": "<p>That analysis-stats panic might be <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/3888\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/3888\">https://github.com/rust-analyzer/rust-analyzer/issues/3888</a></p>",
        "id": 193652770,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1586599619
    },
    {
        "content": "<p>Submitted <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/3939\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/3939\">https://github.com/rust-analyzer/rust-analyzer/pull/3939</a> to fix that panic.</p>\n<p>However, there is another panic related to Chalk ..</p>",
        "id": 193653296,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1586600563
    },
    {
        "content": "<p>I've narrowed this down to the \"bad offset\" crash that was reported a while ago. I've added a backtrace here: <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/4058#issuecomment-625500413\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/4058#issuecomment-625500413\">https://github.com/rust-analyzer/rust-analyzer/issues/4058#issuecomment-625500413</a></p>",
        "id": 196832520,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1588886858
    },
    {
        "content": "<p>It looks like r-a is still pegging 6 cores after the crash though, which makes it seem like there's more to this</p>",
        "id": 196832745,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1588886983
    },
    {
        "content": "<p>Now it froze the Electron renderer process. This code is just cursed.</p>",
        "id": 196837975,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1588890299
    },
    {
        "content": "<p>The plot thickens...</p>\n<div class=\"codehilite\"><pre><span></span><code>    341143ms - add_missing_impl_members_inner\n            0ms - Semantics::analyze2 (3 calls)\n        10164ms - crate_def_map:wait (82825723 calls)\n           10ms - enum_data_query (10 calls)\n            0ms - parse_query (1 calls)\n        330968ms - ???\n</code></pre></div>\n\n\n<p>5+ minutes for this... is not normal, right?</p>",
        "id": 197850265,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1589723594
    },
    {
        "content": "<p>definitely not</p>",
        "id": 197850363,
        "sender_full_name": "matklad",
        "timestamp": 1589723690
    },
    {
        "content": "<p>Oh, I was editing in a <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/visit/trait.MutVisitor.html\"><code>MutVisitor</code></a> when this happened, that trait has quite a few items (but way fewer than eg. <code>Iterator</code>).</p>",
        "id": 197851289,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1589724827
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 197851625,
        "sender_full_name": "Simon Vandel Sillesen",
        "timestamp": 1589725305
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/4498\">https://github.com/rust-analyzer/rust-analyzer/issues/4498</a> for further investigation</p>",
        "id": 197858017,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1589734429
    },
    {
        "content": "<p>Any idea why <code>crate_def_map:wait</code> takes over 100ms per invocation? Seems like it really shouldn't, once the def map is computed once.</p>",
        "id": 197863872,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1589742050
    },
    {
        "content": "<p>I think it means either of the two:</p>\n<ul>\n<li>crate_def_map is waiting on something else for validation (like macro expansion)</li>\n<li>verificatio in salsa takes 100ms</li>\n</ul>",
        "id": 197863941,
        "sender_full_name": "matklad",
        "timestamp": 1589742181
    },
    {
        "content": "<p>You mean verification as in checking that the input didn't change?</p>",
        "id": 197863991,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1589742243
    },
    {
        "content": "<p>yup</p>",
        "id": 197864009,
        "sender_full_name": "matklad",
        "timestamp": 1589742306
    },
    {
        "content": "<p>It looks like <code>find_path</code> is what takes most of the time here</p>",
        "id": 197869023,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1589749727
    },
    {
        "content": "<p>Querifying <code>importable_locations_in_crate</code> brought the entire ordeal down to 20 seconds</p>",
        "id": 197870380,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1589751748
    },
    {
        "content": "<p>Not sure if that's a good approach though</p>",
        "id": 197870382,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1589751756
    },
    {
        "content": "<p>Hmm, I feel like <code>ra_prof</code> sometimes wrongly attributes time spent somewhere. And here the indentation here looks weird (but the times kinda make sense?):</p>\n<div class=\"codehilite\"><pre><span></span><code>    20399ms - add_missing_impl_members_inner\n            0ms - Semantics::analyze2 (3 calls)\n            0ms - crate_def_map:wait (2038 calls)\n            9ms - enum_data_query (10 calls)\n        20366ms - find_path (347 calls)\n        0ms - Semantics::analyze2 (4 calls)\n        6ms - add_missing_impl_members_inner (1 calls)\n</code></pre></div>",
        "id": 197872403,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1589754816
    },
    {
        "content": "<blockquote>\n<p>sometimes wrongly attributes time spent somewhere. </p>\n</blockquote>\n<p>I had this feeling as well, though I haven't dug into it</p>",
        "id": 197872468,
        "sender_full_name": "matklad",
        "timestamp": 1589754898
    },
    {
        "content": "<p>The indentation in the example seems ok?</p>",
        "id": 197872472,
        "sender_full_name": "matklad",
        "timestamp": 1589754904
    },
    {
        "content": "<p>3 outer functions are on the same level</p>",
        "id": 197872475,
        "sender_full_name": "matklad",
        "timestamp": 1589754913
    },
    {
        "content": "<p>nested funcitons are nested</p>",
        "id": 197872477,
        "sender_full_name": "matklad",
        "timestamp": 1589754918
    },
    {
        "content": "<p>(<code>-</code>) is the level of indent, not the number</p>",
        "id": 197872480,
        "sender_full_name": "matklad",
        "timestamp": 1589754936
    },
    {
        "content": "<p><code>find_path</code> is also used by the auto-import machinery, right? I think I've seen it working surprisingly long, so I bet there's some stupid tihng hidden there</p>",
        "id": 197872526,
        "sender_full_name": "matklad",
        "timestamp": 1589754998
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Infinite.20loop.20when.20using.20rust-analyzer.20on.20rustc/near/197872480\">said</a>:</p>\n<blockquote>\n<p>(<code>-</code>) is the level of indent, not the number</p>\n</blockquote>\n<p>Oh, okay. I thought the whitespace in the front was.</p>",
        "id": 197872537,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1589755065
    },
    {
        "content": "<p>Yeah it is</p>",
        "id": 197872539,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1589755074
    },
    {
        "content": "<p>yeah, <code>&lt;</code> aligned timings look weird. It looks much better if you don't have 20 seconds outliers</p>",
        "id": 197872594,
        "sender_full_name": "matklad",
        "timestamp": 1589755114
    },
    {
        "content": "<p>Wait, are you runing ra_profile with big cutoff?</p>",
        "id": 197872606,
        "sender_full_name": "matklad",
        "timestamp": 1589755143
    },
    {
        "content": "<p>Yeah, <code>RA_PROFILE='*&gt;1000'</code></p>",
        "id": 197872611,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1589755155
    },
    {
        "content": "<p>Ah, that explains why we collapse 347 calls</p>",
        "id": 197872615,
        "sender_full_name": "matklad",
        "timestamp": 1589755168
    },
    {
        "content": "<p>I don't understand why 0ms calls are still showing up with that</p>",
        "id": 197872622,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1589755192
    },
    {
        "content": "<p>we show one-level of 0ms calls, to make sure that everything is printed</p>",
        "id": 197872675,
        "sender_full_name": "matklad",
        "timestamp": 1589755225
    },
    {
        "content": "<p>Like, we skip the children, but we show first-level, to make it clear that the profiling acutlaly works</p>",
        "id": 197872684,
        "sender_full_name": "matklad",
        "timestamp": 1589755251
    },
    {
        "content": "<p>Ah, okay. So probably I'm just misinterpreting the output and it's measuring correctly.</p>",
        "id": 197872791,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1589755377
    },
    {
        "content": "<p>Each <code>find_path</code> call still takes around 100ms, and there's a huge number of paths in the default impls, so that explains why it's still slow</p>",
        "id": 197872808,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1589755433
    },
    {
        "content": "<p>I think many of those are for the same item, maybe some more aggressive caching would help</p>",
        "id": 197872854,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1589755474
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>              173ms - QualifyPaths::get_substitution_inner\n                  173ms - find_path\n                       10ms - crate_def_map:wait (32769 calls)\n                      122ms - find_importable_locations (16384 calls)\n</code></pre></div>",
        "id": 197872917,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1589755580
    },
    {
        "content": "<p>I think there are at least three wrong things here:</p>\n<ul>\n<li>we do something horribly inefficient. In the trace in the issue, there are 500k calls to some query, and there shouldn't be any 500k of anything. It's not inefficiently, it literarly is quadratic behavior </li>\n<li>we can add caching to do efficient stuff less</li>\n<li>we actually shouldn't be computing assists edits at all, unless the user applies them</li>\n</ul>",
        "id": 197873041,
        "sender_full_name": "matklad",
        "timestamp": 1589755813
    },
    {
        "content": "<p>One thing that the <code>find_path</code> code does is looking up a name in <em>every</em> module of <em>every</em> dependency, and in the current crate as well. That might explain the high query counts.</p>",
        "id": 197873317,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1589756090
    },
    {
        "content": "<p>Yeah, that probably is bad</p>",
        "id": 197873841,
        "sender_full_name": "matklad",
        "timestamp": 1589756535
    },
    {
        "content": "<p>I originally had a query for this in the <code>find_path</code> PR, we removed it because it wasn't clear it was really necessary <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 197898918,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1589786942
    }
]