[
    {
        "content": "<p>For <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/3419\">https://github.com/rust-analyzer/rust-analyzer/issues/3419</a> where would the checks for this ideally go? I would imagine in the syntax crate in validation?</p>",
        "id": 213045274,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1602512943
    },
    {
        "content": "<p>Yup</p>",
        "id": 213045329,
        "sender_full_name": "matklad",
        "timestamp": 1602512979
    },
    {
        "content": "<p>Specifically, the <code>syntax</code> crate should have a pretty abstract way to tokenize a string</p>",
        "id": 213045369,
        "sender_full_name": "matklad",
        "timestamp": 1602513001
    },
    {
        "content": "<p>and then that should be used by other crates</p>",
        "id": 213045419,
        "sender_full_name": "matklad",
        "timestamp": 1602513011
    },
    {
        "content": "<p>I <em>think</em> we already have something like this already, for syntax highlighting</p>",
        "id": 213045456,
        "sender_full_name": "matklad",
        "timestamp": 1602513027
    },
    {
        "content": "<p>Yep, there is a <code>HasFormatSpecifier</code> trait implemented on String and RawString which offers a lexing function for this thanks to syntax highlighting</p>",
        "id": 213045553,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1602513079
    },
    {
        "content": "<p>Note that an AST validation pass is not enough to handle this â€“ the validation needs to happen on expansion of the built-in <code>format_args!</code> macro</p>",
        "id": 213045577,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1602513095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300586\">@veykril</span> right! I think it might make sense to move it to a <code>format.rs</code> module, and maybe change the interface to work with <code>&amp;str</code>, rather than with AST nodes</p>",
        "id": 213045771,
        "sender_full_name": "matklad",
        "timestamp": 1602513158
    },
    {
        "content": "<p>Things that can be indepemdent of AST should be independent</p>",
        "id": 213045793,
        "sender_full_name": "matklad",
        "timestamp": 1602513170
    },
    {
        "content": "<p>It is also true that it's only  during macro expansion that we know which strings are actually format specifiers.</p>",
        "id": 213045863,
        "sender_full_name": "matklad",
        "timestamp": 1602513203
    },
    {
        "content": "<p>Right, where should the check go then though? I've been looking through things for a bit earlier but couldn't find another place where it was obvious for me to check.</p>",
        "id": 213046097,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1602513289
    },
    {
        "content": "<p>What crate should that belong to then? <code>stdx</code> or still <code>syntax</code>?</p>",
        "id": 213046172,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1602513322
    },
    {
        "content": "<p><code>format_args_expand</code> I think is conceptually the right place to do the check</p>",
        "id": 213046461,
        "sender_full_name": "matklad",
        "timestamp": 1602513433
    },
    {
        "content": "<p>The problem is, we don't yet have any infra for reporting errors from macro expansion so this'll require some plumbing</p>",
        "id": 213046519,
        "sender_full_name": "matklad",
        "timestamp": 1602513460
    },
    {
        "content": "<p>Oh, so invalid macro invocations aren't actually being reported at all by RA currently?</p>",
        "id": 213047817,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1602514082
    },
    {
        "content": "<p>yup</p>",
        "id": 213049700,
        "sender_full_name": "matklad",
        "timestamp": 1602514962
    }
]