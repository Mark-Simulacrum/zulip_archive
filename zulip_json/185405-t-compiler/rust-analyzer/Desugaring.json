[
    {
        "content": "<p>Stream for <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/2236\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/2236\">https://github.com/rust-analyzer/rust-analyzer/issues/2236</a></p>",
        "id": 180913586,
        "sender_full_name": "matklad",
        "timestamp": 1573913350
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> yep, what you've written in the issue is correct!</p>",
        "id": 180913645,
        "sender_full_name": "matklad",
        "timestamp": 1573913446
    },
    {
        "content": "<p>One thing to add though, is that there are two paths for <code>CST -&gt; AST</code> (or <code>ast -&gt; hir</code>, if using, rust-analyzer terminlogy (which is confusing :( ))</p>",
        "id": 180913667,
        "sender_full_name": "matklad",
        "timestamp": 1573913493
    },
    {
        "content": "<p>The first path is when we do lowering: we start with function/static/const, and recursively lower every expression</p>",
        "id": 180913710,
        "sender_full_name": "matklad",
        "timestamp": 1573913523
    },
    {
        "content": "<p>There's a second path thogh: <code>SourceAnalyzer::expr_id</code>. This is invoked by an IDE. IDE has a CST  for a specific expression, and it wants to get AST for this expression (as opposed to AST for the whole function)</p>",
        "id": 180913734,
        "sender_full_name": "matklad",
        "timestamp": 1573913600
    },
    {
        "content": "<p>That's why, when lowring, we maintain both forward and backward maps</p>",
        "id": 180913736,
        "sender_full_name": "matklad",
        "timestamp": 1573913630
    },
    {
        "content": "<p>And the problem is indeed that these maps miss some entries due to the way desugaring work, and in general <em>feel</em> imprecise. </p>\n<p>I don't know, maybe the solution here is just to refactor these bits and put behind nicer interfaces (like removing Either's), but maybe it's something bigger</p>",
        "id": 180913788,
        "sender_full_name": "matklad",
        "timestamp": 1573913699
    },
    {
        "content": "<p>Ok, I start to grasp a bit the issue. A first way forward would be to have all the lowering in one place. Then, we will have to ensure through typing that all the <code>hir</code> nodes have an <code>ast</code> counterpart. These two may lead to a significant step forward.</p>",
        "id": 180914023,
        "sender_full_name": "cjgillot",
        "timestamp": 1573914103
    },
    {
        "content": "<p>Looks good to me!</p>\n<p>I think we might also want to define some <em>type</em> which describes the lowring. Like, <code>ast &lt;-&gt; hir</code> map should be 1-to-many, so that we can say \"this <em>if let</em> expression got lowered to this bunch of expressions\".</p>",
        "id": 180914132,
        "sender_full_name": "matklad",
        "timestamp": 1573914284
    },
    {
        "content": "<p>Or, and another complication is that there may be different types on the <code>ast</code> side (that's where the Eithers come from)</p>",
        "id": 180914276,
        "sender_full_name": "matklad",
        "timestamp": 1573914588
    },
    {
        "content": "<p>Hi @matklad. I have an issue about the missing AST nodes. When there are missing constructors AST blocks, we have to invent a <code>Missing</code> HIR node. That node can not be mapped to an AST node. How should these be taken into account?</p>",
        "id": 181059164,
        "sender_full_name": "cjgillot",
        "timestamp": 1574113082
    },
    {
        "content": "<p>Good question!</p>\n<p>I think it makes sense that this node does not have a corresponding mapping back to the source. If you want to report an error for an expression, but the expr is  a synthesized <code>Missing</code>, you actually <em>shouldn't</em> be able to report an error.</p>",
        "id": 181089389,
        "sender_full_name": "matklad",
        "timestamp": 1574150063
    },
    {
        "content": "<p>That seems like the signature should be like <code>-&gt; Result&lt;SyntaxNode, ExprMissingError&gt;</code>, and we might, or might not want to try to express this in the type system</p>",
        "id": 181089414,
        "sender_full_name": "matklad",
        "timestamp": 1574150146
    },
    {
        "content": "<p>(this: the fact that only non-missing expressions have sources)</p>",
        "id": 181089458,
        "sender_full_name": "matklad",
        "timestamp": 1574150166
    },
    {
        "content": "<p>I have an issue with the synthetic HIR nodes that come from desugaring. A possibility is to attach those to the containing expression. This would cause some hir::Expr nodes to back-reference to a ast::Pat node and conversely. Do we really need to preserve the typing in this direction?</p>",
        "id": 181660684,
        "sender_full_name": "cjgillot",
        "timestamp": 1574444636
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> could you give an example?</p>",
        "id": 181661289,
        "sender_full_name": "matklad",
        "timestamp": 1574444992
    },
    {
        "content": "<p>The desugaring of <code>WhileLet</code> creates 2 desugared expressions, a <code>break</code> and a <code>match</code>, as well as a pattern <code>_</code>.</p>",
        "id": 181663601,
        "sender_full_name": "cjgillot",
        "timestamp": 1574446614
    },
    {
        "content": "<p>The only AST node to which back-map the pattern is the <code>WhileLet</code> node, but it is an expression node, not a pattern node.</p>",
        "id": 181663775,
        "sender_full_name": "cjgillot",
        "timestamp": 1574446722
    },
    {
        "content": "<p>Aha! I guess, if we want to go fully strongly typed, we want to map it to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">enum</span> <span class=\"nc\">PatternSugar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Pat</span><span class=\"p\">(</span><span class=\"n\">ast</span>::<span class=\"n\">Pat</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">WhileLetSugar</span><span class=\"p\">(</span><span class=\"n\">ExprId</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 181664191,
        "sender_full_name": "matklad",
        "timestamp": 1574447005
    },
    {
        "content": "<p>I was trying to get rid of the typing to make lowering easier, but this was should be better for error reporting.</p>",
        "id": 181664692,
        "sender_full_name": "cjgillot",
        "timestamp": 1574447355
    },
    {
        "content": "<p>Hi. I have some doubt about the handling of missing expression nodes. At the moment, new <code>ExprId</code>s and <code>PatId</code>s are allocated each time, with no associated information. What about changing the <code>ExprId</code> in the HIR to <code>Option&lt;ExprId&gt;</code> and handle missing nodes using None value? This would allow to completely remove that special case from lowering and have complete HIR-&gt;AST mapping. Are there downstream constraints against that?</p>",
        "id": 181761508,
        "sender_full_name": "cjgillot",
        "timestamp": 1574602907
    },
    {
        "content": "<p>Yep, this would unfortunatelly complicate furter analisys. Like, suppose we have something like <code>if [missing] { then } else { otherwise }</code>.</p>\n<p>If the lowring produces <code>Expr::Missing</code> for <code>[missing]</code>, the typechecker assigns a fresh variable to this expr, it's inferred to <code>bool</code>, and everything typechecks, without any explicit handling. At the same time, the error is reported at the lowering phase. </p>\n<p>If, OTOH, we use an <code>Option&lt;Expr&gt;</code> representation, than every bit of the typechecker has to care about this</p>",
        "id": 181761665,
        "sender_full_name": "matklad",
        "timestamp": 1574603215
    },
    {
        "content": "<p>Ok. Do you have a pointer to a code block which would be strongly impacted? There may be some middle ground to reach.</p>",
        "id": 181761865,
        "sender_full_name": "cjgillot",
        "timestamp": 1574603619
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> that would be <code>InferenceContext::infer_expr_inner</code></p>",
        "id": 181761978,
        "sender_full_name": "matklad",
        "timestamp": 1574603805
    },
    {
        "content": "<p>In general, it seems like upper layers would prefer <code>Option&lt;ExprId&gt;</code> repr, while lower layers benefit from <code>Expr::Missing</code> repr. </p>\n<p>Ideally, the desugaring infra should be the place which cleanly separates both worlds.</p>",
        "id": 181762036,
        "sender_full_name": "matklad",
        "timestamp": 1574603885
    },
    {
        "content": "<p>In that case, <code>infer_expr</code> would be responsible for unwrapping the <code>Option&lt;ExprId&gt;</code>, and <code>infer_expr_inner</code> would barely change.</p>",
        "id": 181762131,
        "sender_full_name": "cjgillot",
        "timestamp": 1574604084
    },
    {
        "content": "<p>There would be at least some subtelities. For example, optional expressions, like the else branch of <code>if</code>, would become an awkward <code>Option&lt;Option&lt;ExprId&gt;&gt;</code>.</p>",
        "id": 181762294,
        "sender_full_name": "matklad",
        "timestamp": 1574604348
    },
    {
        "content": "<p>Though that can fixed by using a dedicated enum instead of inner options</p>",
        "id": 181762348,
        "sender_full_name": "matklad",
        "timestamp": 1574604374
    },
    {
        "content": "<p>And I think that approach has some merit: in particular, it would be impossible to report errors for missing expressions...</p>",
        "id": 181762374,
        "sender_full_name": "matklad",
        "timestamp": 1574604438
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 181762375,
        "sender_full_name": "matklad",
        "timestamp": 1574604441
    },
    {
        "content": "<p>lark used an interesting type for similar purposes: <code>Result&lt;T, ErrorReported&gt;</code></p>",
        "id": 181762380,
        "sender_full_name": "matklad",
        "timestamp": 1574604465
    }
]