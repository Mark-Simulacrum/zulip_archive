[
    {
        "content": "<p>I've been working on adding implicit Sized bounds <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8984\">https://github.com/rust-analyzer/rust-analyzer/issues/8984</a> <br>\nSorry for the delay and sorry for the long writing.<br>\n<strong>TLDR</strong> I got a failing test of unsize coercion I cannot grasp how to fix it by myself. </p>\n<p>The failing test is <code>tests::coercion::coerce_unsize_trait_object_simple</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[lang = </span><span class=\"s\">\"sized\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"nb\">Sized</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"cp\">#[lang = </span><span class=\"s\">\"unsize\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Unsize</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"cp\">#[lang = </span><span class=\"s\">\"coerce_unsized\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">CoerceUnsized</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Unsize</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">CoerceUnsized</span><span class=\"o\">&lt;&amp;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&gt;</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Baz</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&gt;</span>: <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Baz</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">obj</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">Baz</span><span class=\"o\">&lt;</span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i16</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">S</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">obj</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i16</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">S</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">obj</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">S</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>Expect:\n----\n457..572 &#39;{     ... &amp;S; }&#39;: ()\n467..470 &#39;obj&#39;: &amp;dyn Baz&lt;i8, i16&gt;\n492..494 &#39;&amp;S&#39;: &amp;S&lt;i8, i16&gt;\n493..494 &#39;S&#39;: S&lt;i8, i16&gt;\n504..507 &#39;obj&#39;: &amp;dyn Bar&lt;usize, i8, i16&gt;\n532..534 &#39;&amp;S&#39;: &amp;S&lt;i8, i16&gt;\n533..534 &#39;S&#39;: S&lt;i8, i16&gt;\n544..547 &#39;obj&#39;: &amp;dyn Foo&lt;i8, usize&gt;\n567..569 &#39;&amp;S&#39;: &amp;S&lt;i8, {unknown}&gt;\n568..569 &#39;S&#39;: S&lt;i8, {unknown}&gt;\n\n----\n\nActual:\n----\n457..572 &#39;{     ... &amp;S; }&#39;: ()\n467..470 &#39;obj&#39;: &amp;dyn Baz&lt;i8, i16&gt;\n492..494 &#39;&amp;S&#39;: &amp;S&lt;i8, i16&gt;\n493..494 &#39;S&#39;: S&lt;i8, i16&gt;\n504..507 &#39;obj&#39;: &amp;dyn Bar&lt;usize, i8, i16&gt;\n532..534 &#39;&amp;S&#39;: &amp;S&lt;i8, i16&gt;\n533..534 &#39;S&#39;: S&lt;i8, i16&gt;\n544..547 &#39;obj&#39;: &amp;dyn Foo&lt;i8, {unknown}&gt;\n567..569 &#39;&amp;S&#39;: &amp;S&lt;{unknown}, {unknown}&gt;\n568..569 &#39;S&#39;: S&lt;{unknown}, {unknown}&gt;\n567..569: expected &amp;dyn Foo&lt;i8, {unknown}&gt;, got &amp;S&lt;{unknown}, {unknown}&gt;\n</code></pre></div>\n<p>The last coercion fails. It is expected to success with 1 inference var left unbound but, with implicit Sized bounds, Chalk returns <code>ambiguous</code>. The ambiguity here is treated as no-success <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/16e142cd395f264ba5c6c3814ece92431415c089/crates/hir_ty/src/infer/coerce.rs#L409-L422\">hir_ty/src/infer/coerce.rs#L409-L422</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">solution</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Solution</span>::<span class=\"n\">Unique</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">canonicalized</span><span class=\"p\">.</span><span class=\"n\">apply_solution</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">Canonical</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">binders</span>: <span class=\"nc\">v</span><span class=\"p\">.</span><span class=\"n\">binders</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"c1\">// FIXME handle constraints</span>\n<span class=\"w\">                        </span><span class=\"n\">value</span>: <span class=\"nc\">v</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">subst</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// FIXME: should we accept ambiguous results here?</span>\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">TypeError</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I can use <code>Solution::Ambiguous(definitely_inferred)</code> to update U in <code>dyn Foo&lt;i8, U=usize&gt;</code> but should we treat the ambiguity as successful coercion? </p>\n<p>I recorded logs <code>CHALK_DEBUG=info CHALK_PRINT=1 cargo test --package hir_ty --lib -- --nocapture tests::coercion::coerce_unsize_trait_object_simple --exact &amp;&gt;</code> <a href=\"/user_uploads/4715/KW53ca6Wj5vzyMx_BTv-kRjK/coerce_unsize_trait_object_simple.log\">log</a> . So for the last coercion it says:</p>\n<div class=\"codehilite\"><pre><span></span><code>┐solve_goal goal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: Implemented((&amp;&#39;static S&lt;[?0 := ^0.0, ?1 := ^0.1]&gt;): CoerceUnsized&lt;(&amp;&#39;static dyn for&lt;type&gt; [for&lt;&gt; Implemented(^1.0: Foo&lt;Int(I8), ^2.2&gt;)] + &#39;static)&gt;) }, binders: [U0 with kind type, U0 with kind type, U0 with kind type] }, universes: 1 }\n&lt;snip&gt;\n├─89ms INFO solve_goal: solution = Ok(Ambig(Definite(Canonical { value: [?0 := Int(I8), ?1 := ^0.0, ?2 := Uint(Usize)], binders: [U0 with kind type] }))) prio High\n┘\n</code></pre></div>\n<p>Then I tried to reproduce the query in Chalk REPL (still not sure which one represents the query r-a does; Chalk program dump is in the log)</p>\n<div class=\"codehilite\"><pre><span></span><code>?- exists&lt;T,U,X&gt; {\n    &amp;&#39;static S&lt;T,X&gt;: CoerceUnsized&lt;&amp;&#39;static (dyn Foo&lt;i8, U&gt; + &#39;static)&gt;\n}\nAmbiguous; no inference guidance\n\n?- forall&lt;X&gt; {\n    exists&lt;T,U&gt; {\n        &amp;&#39;static S&lt;T,X&gt;: CoerceUnsized&lt;&amp;&#39;static (dyn Foo&lt;i8, U&gt; + &#39;static)&gt;\n    }\n}\nNo possible solution.\n\n?- forall&lt;X&gt; {\n    exists&lt;T,U&gt; {\n        if (X:Sized) {\n           &amp;&#39;static S&lt;T,X&gt;: CoerceUnsized&lt;&amp;&#39;static (dyn Foo&lt;i8, U&gt; + &#39;static)&gt;\n        }\n    }\n}\nUnique; substitution [?0 := Int(I8), ?1 := Uint(Usize)], lifetime constraints [InEnvironment { environment: Env([]), goal: S&lt;Int(I8), !1_0&gt;: &#39;static }]\n\n?- forall&lt;X&gt; {\n    exists&lt;T,U&gt; {\n        if (FromEnv(S&lt;T,X&gt;)) {\n           &amp;&#39;static S&lt;T,X&gt;: CoerceUnsized&lt;&amp;&#39;static (dyn Foo&lt;i8, U&gt; + &#39;static)&gt;\n        }\n    }\n}\nUnique; substitution [?0 := Int(I8), ?1 := Uint(Usize)], lifetime constraints [InEnvironment { environment: Env([]), goal: S&lt;Int(I8), !1_0&gt;: &#39;static }]\n</code></pre></div>\n<p>So chalk finds a solution with <code>if(X:Sized) {..}</code> or <code>if(FromEnv(S&lt;T,X&gt;))</code> implications. <del>But isn't it might infer this somehow?</del> Does this mean we could provide to chalk some <code>FromEnv(from_ty) &amp;&amp; FromEnv(to_ty)</code> assumptions about well-formedness?</p>",
        "id": 241936955,
        "sender_full_name": "Dawer",
        "timestamp": 1623165703
    },
    {
        "content": "<p><code>FromEnv(&amp;'static S&lt;T,X&gt;)</code> did not work. Have to look into inner types then..  <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n<div class=\"codehilite\"><pre><span></span><code>?- forall&lt;X&gt; {\n    exists&lt;T,U&gt; {\n        if (FromEnv(&amp;&#39;static S&lt;T,X&gt;)) {\n           &amp;&#39;static S&lt;T,X&gt;: CoerceUnsized&lt;&amp;&#39;static (dyn Foo&lt;i8, U&gt; + &#39;static)&gt;\n        }\n    }\n}\nNo possible solution.\n</code></pre></div>",
        "id": 241937525,
        "sender_full_name": "Dawer",
        "timestamp": 1623165936
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>exists&lt;T,U,X&gt; {\n    &amp;&#39;static S&lt;T,X&gt;: CoerceUnsized&lt;&amp;&#39;static (dyn Foo&lt;i8, U&gt; + &#39;static)&gt;\n}\n</code></pre></div>\n<p>is the correct query unless I'm missing something</p>",
        "id": 241950554,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1623171058
    },
    {
        "content": "<p>I'm not sure this is supposed to work, since the expected result already has an uninferred type anyway</p>",
        "id": 241950635,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1623171098
    },
    {
        "content": "<p>rustc actually doesn't do normal trait solving in that place, so it's really hard to tell whether we should be accepting ambiguous results or not or whether neither will do what we need</p>",
        "id": 241950787,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1623171150
    },
    {
        "content": "<p>we could try seeing what happens if we allow ambiguous results there; we would need to return the obligation so it can be fully checked later</p>",
        "id": 241950903,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1623171213
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319948\">@Dawer</span> did you make progress on this? you could put up a draft PR if it's not quite working yet</p>",
        "id": 245602041,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1626002404
    },
    {
        "content": "<p>Sorry for being missing for a long time!<br>\nMost of things are done. The last issue I recall was that rebasing onto master with minicore feature revealed <del>another place where it needs to accept ambiguous results</del> some broken tests. I'll refresh my context on this and continue soon.</p>",
        "id": 247571664,
        "sender_full_name": "Dawer",
        "timestamp": 1627558702
    },
    {
        "content": "<p>(I should have notify that I will be unavailable and make a draft PR before a go for a long time)</p>",
        "id": 247571692,
        "sender_full_name": "Dawer",
        "timestamp": 1627558731
    }
]