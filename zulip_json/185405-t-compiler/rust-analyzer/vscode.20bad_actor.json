[
    {
        "content": "<p>Wondering if anyone has seen this yet (code exec via macro expansion when loading a crate in VSCode)?</p>\n<p><a href=\"https://github.com/lucky/bad_actor_poc\">https://github.com/lucky/bad_actor_poc</a></p>",
        "id": 239631586,
        "sender_full_name": "bynx",
        "timestamp": 1621532530
    },
    {
        "content": "<p>of course :)</p>",
        "id": 239631749,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621532615
    },
    {
        "content": "<p>Cool cool haha. I figured - but just wanted to double check</p>",
        "id": 239631800,
        "sender_full_name": "bynx",
        "timestamp": 1621532641
    },
    {
        "content": "<p>And see also: <a href=\"https://rust-analyzer.github.io/manual.html#security\">https://rust-analyzer.github.io/manual.html#security</a></p>",
        "id": 239667886,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1621549265
    },
    {
        "content": "<p>It could be interesting to look at the workspace trust feature of vscode <a href=\"https://github.com/microsoft/vscode/issues/120251\">https://github.com/microsoft/vscode/issues/120251</a></p>",
        "id": 239779016,
        "sender_full_name": "Daniel Frampton",
        "timestamp": 1621614922
    },
    {
        "content": "<p>yeah, that seems like a good solution</p>",
        "id": 239779186,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621614994
    },
    {
        "content": "<p>is it exposed via LSP?</p>",
        "id": 239779209,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621615006
    },
    {
        "content": "<p>I don't know the details, but I am happy to help find out. I might go ahead and get an issue created in <a href=\"https://github.com/rust-analyzer/rust-analyzer\">https://github.com/rust-analyzer/rust-analyzer</a></p>",
        "id": 239780162,
        "sender_full_name": "Daniel Frampton",
        "timestamp": 1621615481
    },
    {
        "content": "<p>It looks fairly simple to just add the capability setting to always require trust, which might be the right approach for now. But in theory it might be possible to support the limited mode and provide some functionality.</p>",
        "id": 239781734,
        "sender_full_name": "Daniel Frampton",
        "timestamp": 1621616250
    },
    {
        "content": "<p>implementation-wise the untrusted mode would basically require us to never run any external commands</p>",
        "id": 239781977,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621616350
    },
    {
        "content": "<p>I am guessing it would be possible to have a mode that provided intellisense for a project with no <a href=\"http://build.rs\">build.rs</a> or proc_macros, but it would require some care to make sure it was done right.</p>",
        "id": 239782308,
        "sender_full_name": "Daniel Frampton",
        "timestamp": 1621616478
    },
    {
        "content": "<p>what if r-a would do <code>std::env::remove_var(\"PATH\")</code>? that would make it impossible to invoke most external programs. ah, but I guess Windows searches the current directory first</p>",
        "id": 239783148,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621616864
    },
    {
        "content": "<p>Impossible to invoke most external programs, apart from literally every external program just by passing in an absolute path.</p>",
        "id": 239783369,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1621616963
    },
    {
        "content": "<p>yes, but that doesn't happen by accident</p>",
        "id": 239783398,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621616982
    },
    {
        "content": "<p>I'm trying to safeguard against an accidental <code>cargo</code> invocation or something similar while in untrusted mode</p>",
        "id": 239783497,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621617010
    },
    {
        "content": "<p>In any case, I think once you enable the trusted workspaces feature the default is to require trust to run rust-analyzer. So it might be that we don't really need to do anything here unless we want to support the limited mode. Though we could add the option in the package.json to make that explicit.</p>",
        "id": 239791611,
        "sender_full_name": "Daniel Frampton",
        "timestamp": 1621620788
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"274417\">Daniel Frampton</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/vscode.20bad_actor/near/239782308\">said</a>:</p>\n<blockquote>\n<p>I am guessing it would be possible to have a mode that provided intellisense for a project with no <a href=\"http://build.rs\">build.rs</a> or proc_macros, but it would require some care to make sure it was done right.</p>\n</blockquote>\n<p>That would provide no <code>rustc</code> diagnostics either.</p>",
        "id": 239843217,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1621657855
    }
]