[
    {
        "content": "<p>Hey, I've been wanting this badly for some months now: <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8555\">https://github.com/rust-analyzer/rust-analyzer/issues/8555</a></p>\n<p>I think it mostly has all the required infra (we already do that for free-standing functions), so bring that over the finish line shouldn't be too hard. <span class=\"user-mention\" data-user-id=\"424024\">@Mahdi Faramarzpour</span> I wonder if you might be interested in that</p>",
        "id": 248209003,
        "sender_full_name": "matklad",
        "timestamp": 1627990259
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"424024\">Mahdi Faramarzpour</span> I wonder if you might be interested in that</p>\n</blockquote>\n<p>Yeah why not! of course with guidance.</p>",
        "id": 248229565,
        "sender_full_name": "Mahdi Faramarzpour",
        "timestamp": 1628001411
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/314e2e75c09cc6115fc35fd94433b146eb3e325a/crates/ide_assists/src/handlers/generate_function.rs#L45\">https://github.com/rust-analyzer/rust-analyzer/blob/314e2e75c09cc6115fc35fd94433b146eb3e325a/crates/ide_assists/src/handlers/generate_function.rs#L45</a></p>",
        "id": 248229688,
        "sender_full_name": "matklad",
        "timestamp": 1628001479
    },
    {
        "content": "<p>this is the main thing to look at</p>",
        "id": 248229736,
        "sender_full_name": "matklad",
        "timestamp": 1628001485
    },
    {
        "content": "<p>Note that the existing impl is mostly us figuring stuff out -- if something doesn't make sense, feel free to refactor!</p>",
        "id": 248229861,
        "sender_full_name": "matklad",
        "timestamp": 1628001543
    },
    {
        "content": "<p>As a proof of \"we're figuring this out\", generate_function now has the following crash: </p>\n<div class=\"codehilite\"><pre><span></span><code>Panic context:\n&gt;\nversion: 314e2e75c 2021-08-02 dev\nrequest: textDocument/codeAction CodeActionParams {\n    text_document: TextDocumentIdentifier {\n        uri: Url {\n            scheme: &quot;file&quot;,\n            cannot_be_a_base: false,\n            username: &quot;&quot;,\n            password: None,\n            host: None,\n            port: None,\n            path: &quot;/home/matklad/projects/rust-analyzer/crates/hir_def/src/resolver.rs&quot;,\n            query: None,\n            fragment: None,\n        },\n    },\n    range: Range {\n        start: Position {\n            line: 795,\n            character: 12,\n        },\n        end: Position {\n            line: 795,\n            character: 15,\n        },\n    },\n    context: CodeActionContext {\n        diagnostics: [],\n        only: None,\n    },\n    work_done_progress_params: WorkDoneProgressParams {\n        work_done_token: None,\n    },\n    partial_result_params: PartialResultParams {\n        partial_result_token: None,\n    },\n}\n\nthread &#39;&lt;unnamed&gt;&#39; panicked at &#39;Failed to make ast node `syntax::ast::generated::nodes::Name` from text mod 0;&#39;, crates/syntax/src/ast/make.rs:641:13\nstack backtrace:\n   0: rust_begin_unwind\n             at /rustc/3c216f01c7be6a01cfca069eee62ef3c72d9fd3a/library/std/src/panicking.rs:515:5\n   1: std::panicking::begin_panic_fmt\n             at /rustc/3c216f01c7be6a01cfca069eee62ef3c72d9fd3a/library/std/src/panicking.rs:457:5\n   2: syntax::ast::make::ast_from_text\n   3: syntax::ast::make::name\n   4: core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once\n   5: itertools::Itertools::join\n   6: syntax::ast::make::param_list\n   7: ide_assists::handlers::generate_function::generate_function\n   8: ide_assists::assists\n   9: ide::Analysis::assists_with_fixes::{{closure}}\n  10: std::panicking::try\n  11: ide::Analysis::assists_with_fixes\n  12: rust_analyzer::handlers::handle_code_action\n  13: &lt;F as threadpool::FnBox&gt;::call_box\n</code></pre></div>",
        "id": 248234974,
        "sender_full_name": "matklad",
        "timestamp": 1628003680
    },
    {
        "content": "<p>Yeah, that's basically it when we go for text-based solutions. For a moment I thought it's my code that's causing it.</p>",
        "id": 248237647,
        "sender_full_name": "Mahdi Faramarzpour",
        "timestamp": 1628004762
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>  What sort of behavior is expected?<br>\nlet's say there is no impl block for that type. In that case it's clear that we should create a block; but where? In the  module that the type itself resides, or the module we're currently typing in? Also, if a block already exists but it's not in the module we're typing in, should we create another block in that module?</p>",
        "id": 248497880,
        "sender_full_name": "Mahdi Faramarzpour",
        "timestamp": 1628179205
    },
    {
        "content": "<p>Usually, there's no one single clear answer to these sorts of questions. The best strategy is to go with the simplest and most \"obvious\" approach.</p>",
        "id": 248498098,
        "sender_full_name": "matklad",
        "timestamp": 1628179293
    },
    {
        "content": "<p>In this case, I think if there's an existing impl block, we should apped function there. If there's no block, we should create one in the same file that the type is denined in</p>",
        "id": 248498278,
        "sender_full_name": "matklad",
        "timestamp": 1628179354
    },
    {
        "content": "<p>I <em>think</em> this logic is already wirtten for the \"generate_getter\" assist</p>",
        "id": 248498316,
        "sender_full_name": "matklad",
        "timestamp": 1628179375
    },
    {
        "content": "<p>Next to the definition seems reasonable, at least if it's the user's type.</p>",
        "id": 248498370,
        "sender_full_name": "Laurențiu",
        "timestamp": 1628179413
    },
    {
        "content": "<p>right, and how can I turn an <code>hir::Type</code> to a <code>ast::Type</code> with the use of a <code>semantics&lt;RootDatabase&gt;</code>?</p>",
        "id": 248498650,
        "sender_full_name": "Mahdi Faramarzpour",
        "timestamp": 1628179553
    },
    {
        "content": "<p>I'm quite stuck on this <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 248498807,
        "sender_full_name": "Mahdi Faramarzpour",
        "timestamp": 1628179631
    },
    {
        "content": "<p>See the <code>HirDisplay</code> trait, it might help</p>",
        "id": 248498975,
        "sender_full_name": "matklad",
        "timestamp": 1628179708
    },
    {
        "content": "<p>I don't think we have anthing to convert to ast yet (but that would be useful)</p>",
        "id": 248499019,
        "sender_full_name": "matklad",
        "timestamp": 1628179727
    },
    {
        "content": "<p>Simplest is by turning it into an adt <code>ty.as_adt()</code> and then calling <code>source</code> the variants of that I believe</p>",
        "id": 248499023,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1628179728
    },
    {
        "content": "<p>See also <code>make_ty</code> in <code>extract_function.rs</code></p>",
        "id": 248499130,
        "sender_full_name": "matklad",
        "timestamp": 1628179801
    },
    {
        "content": "<blockquote>\n<p>I don't think we have anthing to convert to ast yet</p>\n</blockquote>\n<p>Well, I need to have the ast node of that adt to find the impl blocks. There's a function which does that, and uses ast nodes rather than semantic data.</p>",
        "id": 248500368,
        "sender_full_name": "Mahdi Faramarzpour",
        "timestamp": 1628180430
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">as_adt</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">hir</span>::<span class=\"n\">Adt</span>::<span class=\"n\">Struct</span><span class=\"p\">(</span><span class=\"n\">strukt</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">strukt</span><span class=\"p\">.</span><span class=\"n\">source</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Should give you the ast nodes</p>",
        "id": 248500504,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1628180511
    },
    {
        "content": "<p>For primitives(<code>u8</code>, <code>str</code>, etc) this doesn't work of course but those don't have source definitions anyways</p>",
        "id": 248500603,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1628180556
    },
    {
        "content": "<p>you also may have to strip references before doing this as well so you might need to do <code>ty.strip_references().as_adt()</code></p>",
        "id": 248500658,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1628180585
    },
    {
        "content": "<p>\"Create extension method\" would be <span aria-label=\"love\" class=\"emoji emoji-2764\" role=\"img\" title=\"love\">:love:</span></p>",
        "id": 248501267,
        "sender_full_name": "Laurențiu",
        "timestamp": 1628180883
    },
    {
        "content": "<p>Done:<br>\n<a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/9804\">https://github.com/rust-analyzer/rust-analyzer/pull/9804</a></p>",
        "id": 248710556,
        "sender_full_name": "Mahdi Faramarzpour",
        "timestamp": 1628333866
    }
]