[
    {
        "content": "<p>I figured it might be a good idea to have an umbrella topic for the merger while it's under way.</p>\n<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> I'm porting the update and release id/tag portions of the original code and would like to detach installed RA version from the extension version itself (and thus having to implement auto-update for 'stable' releases). The way I set up stuff before is so the user can specify <code>releaseTag</code> that will be downloaded. I propose that we can also specify <code>stable</code> (analogously to <code>nightly</code>) which will fetch the latest non-nightly release and which will be also gated behind some internal github poll timeout (e.g. 1hr like now, for nightly). Does that sound good?</p>",
        "id": 207852764,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1598280758
    },
    {
        "content": "<p>So in addition to specifying e.g. <code>nightly</code> or <code>2020-08-24</code> we can also specify <code>stable</code> which should be auto-updating and try to pull the latest release from GH from time to time <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 207852929,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1598280829
    },
    {
        "content": "<p>Let me think for a moment, that's probably the most tricky bit...</p>\n<p>FWIW, I think to just merge the extensions, it's fine to start with an explicitely specified path, and tackle auto-update in a separate PR</p>",
        "id": 207853013,
        "sender_full_name": "matklad",
        "timestamp": 1598280851
    },
    {
        "content": "<p>IE, I wouldn't find it unreasonable to say \"hey, rust-lang/rust extension just uses the version from <code>rustup</code>\"</p>",
        "id": 207853061,
        "sender_full_name": "matklad",
        "timestamp": 1598280880
    },
    {
        "content": "<p>the thing is, just merging as-is would lose the auto-update feature for RA as it is now</p>",
        "id": 207853143,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1598280917
    },
    {
        "content": "<p>because we don't continuously release vsix extensions with bumped release versions from package.json that are later used to fetch 'latest' RA</p>",
        "id": 207853206,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1598280952
    },
    {
        "content": "<p>and I'd prefer to tackle this now rather than have a period of time where we temporarily change the current release model for the extension</p>",
        "id": 207853313,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1598280997
    },
    {
        "content": "<p>I mean, we should fix this <em>before</em> we say to folks \"hey, switch to rust-lang/rust extension\", but we don't have to do this in the initial PR</p>",
        "id": 207853398,
        "sender_full_name": "matklad",
        "timestamp": 1598281044
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> oh right I forgot about RA being shipped with rustup <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 207853406,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1598281048
    },
    {
        "content": "<p>let me think</p>",
        "id": 207853541,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1598281104
    },
    {
        "content": "<p>where does it install the binary? to <code>.cargo/bin/rust-analyzer</code>?</p>",
        "id": 207853660,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1598281165
    },
    {
        "content": "<p>it = rustup? I am not sure if the shim is already in place.</p>",
        "id": 207853705,
        "sender_full_name": "matklad",
        "timestamp": 1598281188
    },
    {
        "content": "<p>But we can ask rustup folks to do a minor release, and than yeah, it will be there</p>",
        "id": 207853730,
        "sender_full_name": "matklad",
        "timestamp": 1598281201
    },
    {
        "content": "<p>we can do that separately</p>",
        "id": 207854043,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1598281323
    },
    {
        "content": "<p>okay then, let's leave the auto updates for later</p>",
        "id": 207854132,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1598281365
    },
    {
        "content": "<p>Users can already set explicit releaseTag or path to the server binary</p>",
        "id": 207854158,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1598281378
    },
    {
        "content": "<p>So, the original motivation behind tying the two versions together was to avoid doing HTTP requests without explicit user's consent. </p>\n<p>That is, we were able to leverage marketplace's auto-update function. But just looking, locally, at the version of the extension and the version of the binary, we could say if we need to auto-update. </p>\n<p>As opposed to querying GH API just to figure out if we need to update. </p>\n<p>We definitely want separate release schedules for server and extension, at least for the time being. So, it seems like there's no other way than to implement auto-update on stable. And of course the question of defaults araises:</p>\n<ul>\n<li>if the auto-update is opt-in, many folk won't enable it for the lack of knowledge.</li>\n<li>we can show popup on startap, but that is <strong>horrible</strong> user-experience (really, startup popups are most annoying, they are the last resort for cases where you've failed to solve the problem)</li>\n<li>we can do some aproximate auto-update: the release is fixed on mondays, so checking every tuesday should work.</li>\n<li>we can maybe just enable the thing by default?</li>\n</ul>",
        "id": 207854715,
        "sender_full_name": "matklad",
        "timestamp": 1598281627
    },
    {
        "content": "<p>These are valid points, thanks for bringing up the original motivation. While I appreciate not doing the HTTP requests without user consent, I don't think needs as much attention:</p>\n<ul>\n<li>from privacy standpoint such a request is essentially stateless and does not carry any private nor even aggregate telemetry</li>\n<li>if we care about user's data plan then we can use the graphql api from github to only select data we're interested in (and it's behind a 1 hr time interval already)</li>\n</ul>\n<p>However, if we also account for <code>rustup</code> as another means of auto-updating the server binary, then we might need to rethink on how to best tackle that and let the user select the release model they want to follow.</p>\n<p>Let's leave this for now, then :) We can implement a simple auto-update after this PR; this should give us more time to rethink our possible options</p>",
        "id": 207855887,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1598282154
    },
    {
        "content": "<p>With <code>rustup</code> there should be no auto update. rust-analyzer is bound to a specific rust toolchain version. I don't think anybody wants an editor extension to suddenly update rustc while building a project.</p>",
        "id": 207860735,
        "sender_full_name": "bjorn3",
        "timestamp": 1598284538
    }
]