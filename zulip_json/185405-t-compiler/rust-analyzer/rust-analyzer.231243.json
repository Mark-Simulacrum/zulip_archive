[
    {
        "content": "<p>Just tried swaping <code>public_macro</code> and <code>local_macro</code> order did fix the issue <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/1243\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/1243\">#1243</a></p>\n<p>Before:</p>\n<div class=\"codehilite\"><pre><span></span>    pub(crate) fn find_macro(&amp;self, name: &amp;Name) -&gt; Option&lt;MacroDefId&gt; {\n        self.public_macros.get(name).or(self.local_macros.get(name)).map(|it| *it)\n    }\n</pre></div>\n\n\n<p>After:</p>\n<div class=\"codehilite\"><pre><span></span>    pub(crate) fn find_macro(&amp;self, name: &amp;Name) -&gt; Option&lt;MacroDefId&gt; {\n         self.local_macros.get(name).or(self.public_macros.get(name)).map(|it| *it)\n    }\n</pre></div>\n\n\n<p>However, i agreed we need to be just more principled with macro resolution as <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> said. So the question is , do i submit a PR for this swapping hotfix ? Or waiting for the better name resolution implementation ?</p>",
        "id": 165525625,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1557752430
    },
    {
        "content": "<p>Could also add a test for this? I am all for PR!</p>",
        "id": 165527538,
        "sender_full_name": "matklad",
        "timestamp": 1557753942
    },
    {
        "content": "<blockquote>\n<p>Could also add a test for this? I am all for PR!</p>\n</blockquote>\n<p>I found that i don't actually know why that fix the issue <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> . So i start to study how current macro name resolution works and want  to try  implementing instead of proper macro scopes in <code>DefMap</code>.</p>",
        "id": 165633018,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1557848473
    },
    {
        "content": "<p>But i have a few questions:</p>\n<p>In <code>collector.rs</code> :</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">resolve_macros</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">ReachedFixedPoint</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"p\">......</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">macros</span><span class=\"p\">.</span><span class=\"n\">retain</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">module_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ast_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.......</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">});</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">module_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">macro_call_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">macro_def_id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">resolved</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">collect_macro_expansion</span><span class=\"p\">(</span><span class=\"n\">module_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">macro_call_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">macro_def_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">res</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Why we do not to set back the retained <code>macros</code> back in <code>self.unexpanded_macros</code> ?</p>",
        "id": 165633392,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1557848735
    },
    {
        "content": "<p>And if i understand correctly, current implementation do not support old style external crate + <code>#[macro_use]</code> combo , is it correct ?</p>",
        "id": 165633716,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1557848971
    },
    {
        "content": "<p>that... looks like a bug?</p>",
        "id": 165633753,
        "sender_full_name": "matklad",
        "timestamp": 1557848999
    },
    {
        "content": "<p>we should swap unexpanded macros back</p>",
        "id": 165633816,
        "sender_full_name": "matklad",
        "timestamp": 1557849011
    }
]