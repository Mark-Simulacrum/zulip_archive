[
    {
        "content": "<p>I'm slowly working on <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/3851\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/3851\">https://github.com/rust-analyzer/rust-analyzer/issues/3851</a> on the side and I don't want to spam the Github issue anymore, so I'm writing my questions down here.</p>\n<p>Issues I was stuck on for a while but then solved (maybe someone will find those interesting?):</p>\n<ol>\n<li>\n<p>A freshly created <code>Semantics</code> in the <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/baf9fcc38ebd5a52b22fdf115a7475f9002058f6/crates/ra_ide_db/src/symbol_index.rs#L369\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/baf9fcc38ebd5a52b22fdf115a7475f9002058f6/crates/ra_ide_db/src/symbol_index.rs#L369\">leaf call</a> failed to expand the macro because its cache was empty.<br>\n    -&gt; then I noticed that the parent function <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/baf9fcc38ebd5a52b22fdf115a7475f9002058f6/crates/ra_ide_db/src/symbol_index.rs#L102\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/baf9fcc38ebd5a52b22fdf115a7475f9002058f6/crates/ra_ide_db/src/symbol_index.rs#L102\"><code>file_symbols</code></a> actually parses the file via <code>db.parse</code>. Creating a <code>Semantics</code> at the start of the function and calling <code>sema.parse</code> instead filled the cache. Passing that <code>sema</code> instance down worked.</p>\n</li>\n<li>\n<p><code>sema.expand</code> returns a <code>SyntaxNode</code>, but to recursively call <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/baf9fcc38ebd5a52b22fdf115a7475f9002058f6/crates/ra_ide_db/src/symbol_index.rs#L320\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/baf9fcc38ebd5a52b22fdf115a7475f9002058f6/crates/ra_ide_db/src/symbol_index.rs#L320\"><code>source_file_to_file_symbols</code></a> I need a <code>SourceFile</code><br>\n    -&gt; or actually, I just need something to call <code>.syntax()</code> on, so an <code>AstNode</code><br>\n    -&gt; or actually, I can just change the signature of <code>source_file_to_file_symbols</code> to take the <code>SyntaxNode</code> that <code>.syntax()</code> returns... <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>\n</li>\n</ol>",
        "id": 193465046,
        "sender_full_name": "Timo Freiberg",
        "timestamp": 1586445652
    },
    {
        "content": "<p>I wonder if we shouldn't start building the index from HIR instead</p>",
        "id": 193465296,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1586445781
    },
    {
        "content": "<p>Would that change the approach completely?</p>",
        "id": 193465382,
        "sender_full_name": "Timo Freiberg",
        "timestamp": 1586445823
    },
    {
        "content": "<p>yes, pretty much</p>",
        "id": 193465415,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1586445839
    },
    {
        "content": "<p>Hm, I'm interested yet I'm not even sure how to express my questions <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span><br>\nI guess the current approach is AST-based?</p>",
        "id": 193465793,
        "sender_full_name": "Timo Freiberg",
        "timestamp": 1586445977
    },
    {
        "content": "<p>I think it's something that we do want to do at some point, and it might not be worth the effort to try to adapt the current approach to expand macros</p>",
        "id": 193465835,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1586445992
    },
    {
        "content": "<p>yes</p>",
        "id": 193465847,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1586445997
    },
    {
        "content": "<p>not sure what <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> thinks though, I haven't really dealt with the symbol index so far</p>",
        "id": 193465914,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1586446028
    },
    {
        "content": "<p>Yeah, I think we are roughtly at the position where hir-based index is worthwhile.</p>\n<p>I think the only pre-requesite we need to do is this:</p>",
        "id": 193465949,
        "sender_full_name": "matklad",
        "timestamp": 1586446043
    },
    {
        "content": "<p>Instead of completely forgetting the cfged-out items, we should still collect them, but in a \"disabled\" state</p>",
        "id": 193466006,
        "sender_full_name": "matklad",
        "timestamp": 1586446070
    },
    {
        "content": "<p>so then to build the index you'd walk through all the modules pretty similarly to how we do it in <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/rust-analyzer/src/cli/analysis_stats.rs\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/rust-analyzer/src/cli/analysis_stats.rs\">analysis-stats</a>, I guess</p>",
        "id": 193466121,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1586446107
    },
    {
        "content": "<p>Uhm..... Now that I think about it, it might be the case that what we want is an index based on the item-tree IR</p>",
        "id": 193466154,
        "sender_full_name": "matklad",
        "timestamp": 1586446123
    },
    {
        "content": "<p>For what it's worth, I think a not-very-pretty version of including macro-expanded code in the index is not far off, but I'm very new to the codebase so there are lots of unknown unknowns</p>",
        "id": 193466431,
        "sender_full_name": "Timo Freiberg",
        "timestamp": 1586446229
    },
    {
        "content": "<p>Agree that bolting on macro-expansion <em>for the current crate</em> on top of our index is not that much of work</p>",
        "id": 193466578,
        "sender_full_name": "matklad",
        "timestamp": 1586446292
    },
    {
        "content": "<p>IIRC, I did that at one point, in the very first implementation of macro expansion</p>",
        "id": 193466622,
        "sender_full_name": "matklad",
        "timestamp": 1586446312
    },
    {
        "content": "<p>so, do you think it's worth it to work on the current index? or should that effort rather be focused on redesigning it?</p>",
        "id": 193485333,
        "sender_full_name": "Timo Freiberg",
        "timestamp": 1586454510
    },
    {
        "content": "<p>I continued trying to bolt on macro-expansion for a bit until I got stuck remapping the text range. My motivation to continue is not very high, partly because I feel like it might be better to work on a hir-based index. Is there a ticket for that?</p>",
        "id": 193723727,
        "sender_full_name": "Timo Freiberg",
        "timestamp": 1586715419
    }
]