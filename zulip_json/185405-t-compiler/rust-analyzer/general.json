[
    {
        "content": "<p>I am experimenting with providing some actual diagnostics!</p>",
        "id": 161377283,
        "sender_full_name": "matklad",
        "timestamp": 1553195551
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/1ZGqHEA410J3viXRO_x_1AFf/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/1ZGqHEA410J3viXRO_x_1AFf/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/1ZGqHEA410J3viXRO_x_1AFf/pasted_image.png\"></a></div>",
        "id": 161377286,
        "sender_full_name": "matklad",
        "timestamp": 1553195554
    },
    {
        "content": "<p>How much overlap does RA and rustc have? I noticed that HIR is approaching stabilization (rustc) and would lead towards stabilizing incremental compilation. Is there overlap between rust-analyzer and that progress?</p>",
        "id": 161778518,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1553617477
    },
    {
        "content": "<p>There's not that much overlap happening at the moment unfortunately. The most interesting bits, from IDE perspective, tend to happen before hir (syntax trees, parsing, macro expansion), so ra currently attacks those.</p>",
        "id": 161778716,
        "sender_full_name": "matklad",
        "timestamp": 1553617642
    },
    {
        "content": "<p>Though, producing HIR/MIR using ra frontend is one long-term path to merging the projects. </p>\n<p>Another long-term path is librarification: for example, both rustc and ra could use chalk. We hope to produce similar libraries for name resolution, etc</p>",
        "id": 161778875,
        "sender_full_name": "matklad",
        "timestamp": 1553617747
    },
    {
        "content": "<p>Is there an issue or documentation describing why \"traits\" are far into the future? <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/909#issuecomment-468366485\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/909#issuecomment-468366485\">https://github.com/rust-analyzer/rust-analyzer/issues/909#issuecomment-468366485</a></p>",
        "id": 161778883,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1553617754
    },
    {
        "content": "<p>well, time flies fast in rust-analyzer, 26 days ago is a distant past :) We already started on chalk integration, see <code>wg-rls-2.0/chalk</code> subgroup :)</p>",
        "id": 161779023,
        "sender_full_name": "matklad",
        "timestamp": 1553617831
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"215394\">@Cole Lawrence</span> this the paper doc from planing the traits: <a href=\"https://paper.dropbox.com/doc/Chalk-RLS-integration--AaBRVmOY2Qv~GNc~8re8bL_RAg-QCJelXDeaq7GV6jVQln4j\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Chalk-RLS-integration--AaBRVmOY2Qv~GNc~8re8bL_RAg-QCJelXDeaq7GV6jVQln4j\">https://paper.dropbox.com/doc/Chalk-RLS-integration--AaBRVmOY2Qv~GNc~8re8bL_RAg-QCJelXDeaq7GV6jVQln4j</a>, you might find it interesting</p>",
        "id": 161779780,
        "sender_full_name": "matklad",
        "timestamp": 1553618391
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> I'll start reading into chalk and salsa and see where that takes me :-)</p>",
        "id": 161780346,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1553618733
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> , do we have some good-first-bug issues for chalk integration? :)</p>",
        "id": 161780479,
        "sender_full_name": "matklad",
        "timestamp": 1553618816
    },
    {
        "content": "<p>hmm not really so far, I'll need to think a bit about the next steps, maybe then I'll come up with something...</p>",
        "id": 161781699,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1553619597
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> Looks like the VM is stuck booting on Travis.</p>",
        "id": 161862848,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1553696102
    },
    {
        "content": "<p>Looks like it finally went through.</p>",
        "id": 161864276,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1553696962
    },
    {
        "content": "<p>Kinda a weird idea, but has anyone considered that HIR could be used as a set of building blocks to create a structural editor? Think of like Scratch... But it translates into HIR-&gt;MIR-&gt;LLVM</p>",
        "id": 161885683,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1553710332
    },
    {
        "content": "<p>Can rust-analyzer HIR be translated to Rustc HIR? I imagined that this would have to be built on top of rustc's HIR</p>",
        "id": 161885776,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1553710408
    },
    {
        "content": "<p>Then, with <code>chalk</code> it seems like there would be a lot of heavy lifting with type support taken to build off of</p>",
        "id": 161885869,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1553710470
    },
    {
        "content": "<p>Is it possible to pass a feature flag in a project with <code>rust-analyzer</code>'s VSCode integration? In the <code>rls</code> VSCode extension you can pass <code>rust.features</code> but I didn't see anything similar in <code>rust-analyzer</code></p>",
        "id": 161922401,
        "sender_full_name": "Chris Czub",
        "timestamp": 1553746232
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"215675\">@Chris Czub</span> we don't hande cfg's yet, so we don't support <code>feature</code> in any specific way</p>",
        "id": 161926926,
        "sender_full_name": "matklad",
        "timestamp": 1553753657
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"215394\">@Cole Lawrence</span> maybe? Though, I might be a wrong person to ask: based on what I know about JetBrains MPS, I am <strong>very</strong> strongly biased towards the plain text representation + good idea support (basically, extend selection gives you 90% of paredit for any language anyway) :)</p>",
        "id": 161926954,
        "sender_full_name": "matklad",
        "timestamp": 1553753743
    },
    {
        "content": "<p>Is this being tracked in GitHub?</p>",
        "id": 162005801,
        "sender_full_name": "Chris Czub",
        "timestamp": 1553819030
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"215675\">@Chris Czub</span>  no, might be a good idea to create one!</p>",
        "id": 162020100,
        "sender_full_name": "matklad",
        "timestamp": 1553837976
    },
    {
        "content": "<p>Do anyone try to run cargo test for master in rustc 1.34 (Windows) , It seem to be dead lock in <code>test_runnables_project</code>.</p>\n<div class=\"codehilite\"><pre><span></span>cargo test test_runnables_project -- --nocapture\n</pre></div>",
        "id": 163486191,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1555433524
    },
    {
        "content": "<p>I just wanna know whether it is my own machine problem, I tested it in macos and its works.</p>",
        "id": 163486223,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1555433565
    },
    {
        "content": "<blockquote>\n<p>Do anyone try to run cargo test for master in rustc 1.34 (Windows) , It seem to be dead lock in <code>test_runnables_project</code>.</p>\n</blockquote>\n<p>Hi! I have the same problem... it started happening after a recent (&lt; 7 days ago) commit, I have another (older) branch where the test runs fine</p>",
        "id": 163508045,
        "sender_full_name": "marcogroppo",
        "timestamp": 1555449529
    },
    {
        "content": "<p>It might be multiple-workspaces support</p>",
        "id": 163508825,
        "sender_full_name": "matklad",
        "timestamp": 1555450100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"215645\">@Marco Groppo</span> Thanks, i filed a issue in github for that. I will dig a little bit deeper to try understand whats happened.</p>",
        "id": 163524345,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1555467105
    },
    {
        "content": "<p>Hi, I am working on <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/1149\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/1149\">https://github.com/rust-analyzer/rust-analyzer/issues/1149</a> And try to replace alll <code>as_source_file()</code> to <code>source_file()</code>. However, after i change and build codes in <code>navigation_target.rs</code>. the following error occurs:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0599]: no method named `parse` found for type `&amp;&amp;db::RootDatabase` in the current scope\n  --&gt; crates\\ra_ide_api\\src\\references.rs:63:22\n   |\n63 |     let file = db.parse(position.file_id);\n   |                      ^^^^^\n   |\n   = note: the method `parse` exists but the following trait bounds were not satisfied:\n           `&amp;&amp;db::RootDatabase : ra_db::SourceDatabase`\n           `&amp;db::RootDatabase : ra_db::SourceDatabase`\n           `db::RootDatabase : ra_db::SourceDatabase`\n   = help: items from traits can only be used if the trait is implemented and in scope\n   = note: the following trait defines an item `parse`, perhaps you need to implement it:\n           candidate #1: `ra_db::SourceDatabase`\n</pre></div>\n\n\n<p>I am not familiar how <code>salsa</code> works,  but i am so sure i imported SourceDataBase and RootDatabase in that file. (i didn't change any imports in that file), do anyone know why ? I can make it pass by change it to <code>(db as SourceDataBase).parse</code> , but just feel so weird ...</p>",
        "id": 163716834,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1555655131
    },
    {
        "content": "<p>That's a bug with incremental compilation</p>",
        "id": 163716898,
        "sender_full_name": "detrumi",
        "timestamp": 1555655182
    },
    {
        "content": "<p>You can fix it using something like <code>rm -rf ./target/debug/incremental/</code> (sadly only temporarily, it can happen again)</p>",
        "id": 163716980,
        "sender_full_name": "detrumi",
        "timestamp": 1555655304
    },
    {
        "content": "<p>See this issue: <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/826\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/826\">https://github.com/rust-analyzer/rust-analyzer/issues/826</a></p>",
        "id": 163716982,
        "sender_full_name": "detrumi",
        "timestamp": 1555655311
    },
    {
        "content": "<p>Might be fixed on newer Rust versions, though</p>",
        "id": 163717011,
        "sender_full_name": "detrumi",
        "timestamp": 1555655385
    },
    {
        "content": "<p>Oh .. that's so weird.  thanks a lot.</p>",
        "id": 163717066,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1555655409
    },
    {
        "content": "<p>I think the current rustc-side issue is <a href=\"https://github.com/rust-lang/rust/issues/60010\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60010\">https://github.com/rust-lang/rust/issues/60010</a></p>",
        "id": 163722037,
        "sender_full_name": "matklad",
        "timestamp": 1555662817
    },
    {
        "content": "<p>(technically the rustc-side issue is  <a href=\"https://github.com/rust-lang/rust/issues/58291\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/58291\">#58291</a> ; <a href=\"https://github.com/rust-lang/rust/issues/60010\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60010\">#60010</a> may or may not be related to the root cause)</p>",
        "id": 163728859,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555672661
    },
    {
        "content": "<p>Recently the rls has been panicking for me and it seems to be casued by the type inference query. I got a backtrace here <a href=\"https://gist.github.com/Lapz/0589bb8fbcd8f631b034356b64983a11\" target=\"_blank\" title=\"https://gist.github.com/Lapz/0589bb8fbcd8f631b034356b64983a11\">https://gist.github.com/Lapz/0589bb8fbcd8f631b034356b64983a11</a>.</p>",
        "id": 164285842,
        "sender_full_name": "L.apz",
        "timestamp": 1556303007
    },
    {
        "content": "<p>It seems to be caused by the syntax highlighting</p>",
        "id": 164286031,
        "sender_full_name": "L.apz",
        "timestamp": 1556303117
    },
    {
        "content": "<p>Also i goto really slow for anyone else</p>",
        "id": 164289977,
        "sender_full_name": "L.apz",
        "timestamp": 1556306201
    },
    {
        "content": "<p>so the last working commit was <a href=\"https://github.com/rust-lang/rust/commit/42c4e0f378faeabd425392d4a7a7839bd7e8ac2f\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/42c4e0f378faeabd425392d4a7a7839bd7e8ac2f\">42c4e0f378faeabd425392d4a7a7839bd7e8ac2f</a></p>",
        "id": 164291041,
        "sender_full_name": "L.apz",
        "timestamp": 1556307051
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121360\">@L.apz</span>  Which commit are you on?</p>",
        "id": 164293115,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1556308663
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121360\">@L.apz</span> if you disable highlighting in the client settings does that make it go away?</p>",
        "id": 164293264,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1556308779
    },
    {
        "content": "<p>A test case would be useful or a github issue.</p>",
        "id": 164293363,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1556308837
    },
    {
        "content": "<p>Hello guys ! I usually use vim for rust but wanted to checkout the rust-analyzer with vs-code. <br>\nHow do I get my code to compile and debug with vs-code ?</p>",
        "id": 164312398,
        "sender_full_name": "blitzerr",
        "timestamp": 1556330884
    },
    {
        "content": "<p>Sorry for the ignorant question and sorry if geenral thread is not the right place to post it</p>",
        "id": 164312408,
        "sender_full_name": "blitzerr",
        "timestamp": 1556330919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> I usually run <code>cargo build</code> from a console, but you can set up some asks in VS Code for that. I'm not sure how, though.</p>",
        "id": 164324638,
        "sender_full_name": "Laurențiu",
        "timestamp": 1556353081
    },
    {
        "content": "<p>And there's also an integrated terminal</p>",
        "id": 164324681,
        "sender_full_name": "Laurențiu",
        "timestamp": 1556353087
    },
    {
        "content": "<p>For debugging there was a \"native debug\" extension IIRC</p>",
        "id": 164324687,
        "sender_full_name": "Laurențiu",
        "timestamp": 1556353103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203366\">@Jeremy Kolb</span>  It's caused by my local changes. So ill need to look into it</p>",
        "id": 164328313,
        "sender_full_name": "L.apz",
        "timestamp": 1556359781
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span></p>",
        "id": 164331627,
        "sender_full_name": "blitzerr",
        "timestamp": 1556365047
    },
    {
        "content": "<p>Hi all! I'm wondering how coupled the rust-analyzer is to cargo? We're interested in Rust LSP solutions which also work in a Buck-built codebase (as well as Cargo-built). RLS is currently very coupled to Cargo, and its not clear to me how to improve this. <span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span> had done some work which allows us to make it work at all, but its still very partial. It looks like rust-analyzer is going in the right direction overall, and so we're thinking of directing all future attention to it.</p>",
        "id": 169523970,
        "sender_full_name": "Jeremy Fitzhardinge",
        "timestamp": 1562105952
    },
    {
        "content": "<p>Hm, from a quick poke around it looks like the intention is to mediate project interactions via ra_project_model, which already supports Cargo and Json project types. Though it looks like this is a pretty leaky abstraction.</p>",
        "id": 169526230,
        "sender_full_name": "Jeremy Fitzhardinge",
        "timestamp": 1562108511
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"213049\">@Jeremy Fitzhardinge</span> the only thing that really depend on Cargo is <code>cargo check</code> integration. Everything else is completely Cargo-independent in theory, and, in practice, we have that <code>rust-project.json</code> thing</p>",
        "id": 169542711,
        "sender_full_name": "matklad",
        "timestamp": 1562135002
    },
    {
        "content": "<p>The problem with <code>rust-project.json</code> is that I don't know if it is used at all, so it doesn't get as much love as it deserves :-) If you could experiment with it in a real-world use-case, I would be delighted to improve it</p>",
        "id": 169542760,
        "sender_full_name": "matklad",
        "timestamp": 1562135074
    },
    {
        "content": "<p>Yeah, we have some dedicated resources for Rust stuff over the next 6 months, and improving the LSP experience is a big part of that. I'm also interested in the design around directory structure. For example, Cargo's structure means that a directory generally only contains the source for one crate, but that's not necessarily the case with Buck.</p>",
        "id": 169542997,
        "sender_full_name": "Jeremy Fitzhardinge",
        "timestamp": 1562135411
    },
    {
        "content": "<blockquote>\n<p>Though it looks like this is a pretty leaky abstraction.</p>\n</blockquote>\n<p>Could you elaborate on this a bit more? The intention of <code>rust-project.json</code> is to be more-or less independent from any particular tool, and contain only language-level information. So, it talks about crates in rust-langauge-reference sense, and not about Cargo packages. </p>\n<p>The only bit that is specific to rust-analyzer is that <code>roots</code> thing. Unlike compiler, IDE can't just traverse the crate from the root module, it needs to know the directory with sources to be able to watch files and provide features for files not yet included into module hierarchy.</p>",
        "id": 169542998,
        "sender_full_name": "matklad",
        "timestamp": 1562135413
    },
    {
        "content": "<blockquote>\n<p>. For example, Cargo's structure means that a directory generally only contains the source for one crate, b</p>\n</blockquote>\n<p>That's not true: <code>example</code>, <code>tests</code>, and <code>src/bin</code> all contain many crates in one dir</p>",
        "id": 169543004,
        "sender_full_name": "matklad",
        "timestamp": 1562135454
    },
    {
        "content": "<p>Oh, if you are thinking about <code>roots</code> thing, it's totally OK to have many crates share a single root, and it's also ok to share <em>files</em>  between the crates by adding <code>mod foo</code> to two crates.</p>",
        "id": 169543016,
        "sender_full_name": "matklad",
        "timestamp": 1562135506
    },
    {
        "content": "<blockquote>\n<p>Could you elaborate on this a bit more?</p>\n</blockquote>\n<p>Well, that was just an impression from a quick poke around. But if it were a truly hermetic abstraction, I'd expect to only see references to Cargo* in ra_project_model, whereas ra_lsp_server also has cargo_target_spec. But as I say, I haven't really dug into it yet, or thought about how it maps to Buck's model.<br>\nWe also need to be careful about directory watches. One problem we had with rls was that it traversed the entire directory tree to generate a watch LSP request. This means it ended up traversing many thousands of directories and millions of files, including dirs which contain only build artifacts and caches that it shouldn't be looking at. It would be much more efficient to pass a few <code>**/*.rs</code> style globs.</p>",
        "id": 169543227,
        "sender_full_name": "Jeremy Fitzhardinge",
        "timestamp": 1562135726
    },
    {
        "content": "<p>Our environment is a large monorepo filled with mostly non-Rust, with some Rust code dotted about in it, not rooted at any particular directory. The most general \"project root\" would be the top-level dir of the repo, but for that to work the tooling has to avoid anything like explicit directory scans or other operations which are O(repo size). Instead, it needs to look at what files are actually being used, query the buildsystem for dependent crates and their sources, and make efficient use of the editor's dir watching capabilities.</p>",
        "id": 169543440,
        "sender_full_name": "Jeremy Fitzhardinge",
        "timestamp": 1562136034
    },
    {
        "content": "<p>Those bits of <code>Cargo</code> elsewhere exist to enhance functionality if Cargo is available. For example, we draw <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span> alongside each <code>#[cfg(test)]</code> function, clicking on which launches <code>env RUST_BACKTRACE=short cargo test --nocapture $test_name</code>. For non-cargo based projects, the button is not shown because we wouldn't know what \"launching a test\" means in buck</p>",
        "id": 169543754,
        "sender_full_name": "matklad",
        "timestamp": 1562136541
    },
    {
        "content": "<p>File watching with exclusion is something that is generally supported, though quality of implementation is not ideal yet.</p>",
        "id": 169543916,
        "sender_full_name": "matklad",
        "timestamp": 1562136733
    },
    {
        "content": "<p>Specifically, each <code>SourceRoot</code> comes with a filter that is used by our virtual file system to skip watching something: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/f15f0d1ec006c6c628fb70414d311bd85c2a0469/crates/ra_project_model/src/lib.rs#L61-L77\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/f15f0d1ec006c6c628fb70414d311bd85c2a0469/crates/ra_project_model/src/lib.rs#L61-L77\">https://github.com/rust-analyzer/rust-analyzer/blob/f15f0d1ec006c6c628fb70414d311bd85c2a0469/crates/ra_project_model/src/lib.rs#L61-L77</a></p>",
        "id": 169543925,
        "sender_full_name": "matklad",
        "timestamp": 1562136770
    },
    {
        "content": "<p>Currently, this is hard-coded to some known offenders like the <code>/target</code> dir, but this totally should be configurable from <code>rust-project.json</code> or <code>.gitingnore</code></p>",
        "id": 169543970,
        "sender_full_name": "matklad",
        "timestamp": 1562136836
    },
    {
        "content": "<p>The bigger problem I envision is that we use the <code>notify</code> crate for file watching, and we historically faced quite a few hard-to-track bugs with it, both because the code on our side is non-trivial, and because something inside <code>notify</code> was wrong. </p>\n<p>I <em>think</em> you are already using <code>watchman</code> service though, so I am interested in exploring it as an alternative  solution for file watching. Honestly, I'd just picked watchman for file watching, but I really really want to avoid non-rust dependencies in the <em>default</em> configuration.</p>",
        "id": 169544126,
        "sender_full_name": "matklad",
        "timestamp": 1562136992
    },
    {
        "content": "<p>Yeah, we use watchman extensively. Part of reason for our constraints is that we use a virtual filesystem which manifests things on demand, so any kind of scanning/walking operation is super-expensive because it forces the filesystem to manifest everything. But watchman interfaces with it directly so it gets a live feed of changes as they happen very cheaply.<br>\nBut my understanding was that file watching was via LSP and mediated by the editor. Am I mistaken?</p>",
        "id": 169544871,
        "sender_full_name": "Jeremy Fitzhardinge",
        "timestamp": 1562137941
    },
    {
        "content": "<p>As far as things like tests go, we can query for them with buck query, and run them with buck test. So that seems like something that could be abstracted over.</p>",
        "id": 169544884,
        "sender_full_name": "Jeremy Fitzhardinge",
        "timestamp": 1562137981
    },
    {
        "content": "<blockquote>\n<p>But my understanding was that file watching was via LSP and mediated by the editor. Am I mistaken?</p>\n</blockquote>\n<p>It <em>is</em> possible to use VS Code file watching services, but that's optional. We deliberately don't do this, for two reasons:</p>\n<ul>\n<li>VS Code can only watch the folders opened in the editors, but we also need to watch <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> libraries and sysroot</li>\n<li>It's nice to have built-in watching which works in any context, and not just in VS Code.</li>\n</ul>\n<p>If you are curious, our impl of VFS/file watching is here: <a href=\"https://github.com/rust-analyzer/ra_vfs\" target=\"_blank\" title=\"https://github.com/rust-analyzer/ra_vfs\">https://github.com/rust-analyzer/ra_vfs</a></p>",
        "id": 169545015,
        "sender_full_name": "matklad",
        "timestamp": 1562138163
    },
    {
        "content": "<p>Another consideration is that we have a split editor model, where the files are on a different machine from where the UI is displayed. But I guess vscode has formalized that model now.<br>\nI don't think the JsonProject would work for our use case. I could make it work by populating the json file from buck, but it would be pretty cumbersome and wouldn't update dynamically. I think it would be better to extract the same information from buck incrementally on the fly. That is, doing a single bulk query to get that info would be a O(repo size) operation. But given a foo/bar/lib.rs, I could query buck to get the target name(s) (ie, crate(s)) that own that file, and then get their transitive deps, and so on. That would be incremental with a cost proportional to the number of files open.</p>",
        "id": 169545630,
        "sender_full_name": "Jeremy Fitzhardinge",
        "timestamp": 1562139034
    },
    {
        "content": "<blockquote>\n<p>and wouldn't update dynamically</p>\n</blockquote>\n<p>FWIW, we currently don't support dynamic updates of the project structure at all. There's no blockers for this, just some code that needs to be written, especially in the area of virtual file system where, due to root changes, you need to carefully and transactionally move files from one root to another. </p>\n<p>The main idea behind <code>rust-project-json</code> (besides the fact that it's the simplest possible thing) is to make sure that the non-cargo build system and rust-analyzer could exist as separate processes.  Queering buck from rust-analyzer is certainly possible, but I'd rather avoid <code>rust-analyzer -&gt; buck</code> dependency edge. Surface layers of rust-analyzer know about Cargo, yes, but that is a compromise due to the fact that Cargo is a de-facto standard. </p>\n<p>What would you think about LSP request like <code>setRustProjectModel</code> instead of <code>rust-project.json</code> file?</p>",
        "id": 169548675,
        "sender_full_name": "matklad",
        "timestamp": 1562142358
    },
    {
        "content": "<blockquote>\n<p>But given a foo/bar/lib.rs, I could query buck to get the target name(s) (ie, crate(s)) that own that file, and then get their transitive deps, and so on</p>\n</blockquote>\n<p>Hm, this might be a problem. rust-analyzer is engineered to know the project information from the start. We maintain a consistent snapshot of all rust-files in memory, and use that as a single source of truth. I think that will always be the case for at least \"current crate\". For dependencies, we could and should, at some point, to switch to analysis of <code>.rlib</code> files (or rust-analyzer analogue) instead of analysis of the source code.</p>\n<p>I need to think about this lazy-loading more. Currently I feel like this probably belongs to the editor layer. Like, if the editor notices that the user opens a file which is not a part of the current project-model, it asks buck for deps of this file, and feeds the new project model to rust-analyzer.</p>",
        "id": 169549021,
        "sender_full_name": "matklad",
        "timestamp": 1562142773
    },
    {
        "content": "<p>Yeah, from an overall system design point of view, we really want to avoid a \"needs to know everything up front\" model, mostly to improve startup latency and memory use. I don't have solid thoughts about how to achieve that goal, and offloading some of it to the editor might make sense. Another option is to have some way to serialize all the interesting state so that it can be bulk downloaded - it might not completely match the actual current state, but it should be close enough that making up the delta is pretty quick.</p>",
        "id": 169588004,
        "sender_full_name": "Jeremy Fitzhardinge",
        "timestamp": 1562176510
    },
    {
        "content": "<p>A good case to think about with regards to \"up front\" knowledge is \"workspace symbol\" query: given a fuzzy query like <code>AnHost</code>, the IDE should find a type whose name is something like <code>AnalysisHost</code>. To do so, it should know the set of type that exist in the project, it can't rely only on the files opened in the editor</p>",
        "id": 169592851,
        "sender_full_name": "matklad",
        "timestamp": 1562180007
    },
    {
        "content": "<p>Yeah, that's a tricky case. You could say something like \"completion only works within the scope of the transitive deps of the current file\", but that might miss out on useful cases, esp if you're trying to work out what crate you should be depending on.</p>",
        "id": 169601017,
        "sender_full_name": "Jeremy Fitzhardinge",
        "timestamp": 1562186898
    },
    {
        "content": "<blockquote>\n<p>Another option is to have some way to serialize all the interesting state so that it can be bulk downloaded - it might not completely match the actual current state, but it should be close enough that making up the delta is pretty quick.</p>\n</blockquote>\n<p>Would LSIF fit that goal?</p>",
        "id": 169653774,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1562251617
    },
    {
        "content": "<p>Good question, I'll need to look into it. The key feature would be that it can contain the state for multiple source control revisions at once, ideally sharing all the state that's common between revisions.</p>",
        "id": 169664542,
        "sender_full_name": "Jeremy Fitzhardinge",
        "timestamp": 1562264485
    },
    {
        "content": "<p>Hm, doesn't look like its rich enough. The goal would be to avoid having to do a local re-index, rather than offline use.</p>",
        "id": 169664997,
        "sender_full_name": "Jeremy Fitzhardinge",
        "timestamp": 1562265186
    },
    {
        "content": "<p>LSIF will a wrong solution here, it lacks language semantics. We basically need <code>.rmeta</code> files</p>",
        "id": 169669742,
        "sender_full_name": "matklad",
        "timestamp": 1562272498
    }
]