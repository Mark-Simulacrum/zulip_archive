[
    {
        "content": "<p>I opened PR #<a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/6901\">6901</a> which temp fix some panics due to current design :</p>\n<p>We don't have <code>ast-node</code> for proc-macro such that <code>HasSource::source</code> fail.<br>\nSo how would we handle this problem properly ?</p>",
        "id": 220103300,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1608117471
    },
    {
        "content": "<p>Oh</p>",
        "id": 220104492,
        "sender_full_name": "matklad",
        "timestamp": 1608118306
    },
    {
        "content": "<p>oh oh oh oh no</p>",
        "id": 220104504,
        "sender_full_name": "matklad",
        "timestamp": 1608118310
    },
    {
        "content": "<p>This seems to be one of that cases where innocuous-looking design decision early on would lead to a lot of pain down the road. </p>\n<p>I think, fundamentally, <code>HasSource</code> needs to return an <code>Option</code>, for two reasons. </p>\n<ul>\n<li>First, there are entities which genuinely don't have source, like proc-macros or primitive types. Those I think actually should be fixed on the type level. For example, the thing which currently implements <code>HasSource</code> and can represent proc-macros should be split into separate entities for proceduran and declarative macros, and only declarative macros should implement <code>HasSource</code>. </li>\n<li>Second, and this is a deeper problem, things from <code>.rlib</code>s don't have source by virtue of being in an <code>.rlib</code>. This requres to change HasSource to return an Option.</li>\n</ul>",
        "id": 220104967,
        "sender_full_name": "matklad",
        "timestamp": 1608118662
    },
    {
        "content": "<p><code>.rlib</code>'s do contains <code>Span</code>'s from which you could get the original source in most cases.</p>",
        "id": 220105078,
        "sender_full_name": "bjorn3",
        "timestamp": 1608118728
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> how hard would it be to split <code>hir::MacroDef</code> into separate <code>hir::ProcMacro</code> and <code>hir::DeclMacro</code>, such that  only the latter implements <code>HasSource</code>?</p>",
        "id": 220105091,
        "sender_full_name": "matklad",
        "timestamp": 1608118743
    },
    {
        "content": "<p>Technically <code>HasSource</code> could point you to the function marked as <code>#[proc_macro]</code>, since they now go through hir_def name resolution</p>",
        "id": 220105257,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608118855
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> that's true, but there's a difference between \"source is an immanent property of an object\" and \"you can get source in 99.99% of the time\". Although the user-visible experience would be almost identiical, the two situations need fundamentally different code in the implementation. </p>\n<p>And I think it is true that source is not an inherent property of the things we have in code-model, there can be various synthetic things which behave as if they were real, but lack the source nontheless.</p>",
        "id": 220105284,
        "sender_full_name": "matklad",
        "timestamp": 1608118878
    },
    {
        "content": "<p>Not that hard i think , but <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> is refactoring for macro 2.0. I would prefer doing it after that</p>",
        "id": 220105555,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1608119111
    },
    {
        "content": "<blockquote>\n<p>Technically <code>HasSource</code> could point you to the function marked as <code>#[proc_macro]</code>, since they now go through hir_def name resolution</p>\n</blockquote>\n<p>Yes, and goto def in following cases works for now:</p>\n<div class=\"codehilite\"><pre><span></span><code>use foo; // foo is proc macro\n</code></pre></div>",
        "id": 220105827,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1608119336
    },
    {
        "content": "<p>But, as usual, the ground truth is the <code>.so</code> with the macro, and not the source COde</p>",
        "id": 220107428,
        "sender_full_name": "matklad",
        "timestamp": 1608120487
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/proc-macro.20no.20ast-node/near/220105284\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> that's true, but there's a difference between \"source is an immanent property of an object\" and \"you can get source in 99.99% of the time\".</p>\n</blockquote>\n<p>I learned a new word today! <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 220114656,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608125324
    }
]