[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/rowan-next.20(bonsai)/near/189099214\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/rowan-next.20(bonsai)/near/189099214\">said</a>:</p>\n<blockquote>\n<p>Ok, let's start small :)</p>\n<p>I want to commit to having 1.0 version of text-unit/str-index/text-size crate in three months. To that end:</p>\n<ul>\n<li>I propose spending some time for the final bikeshed. I like <code>TextSize</code> color the most :P</li>\n<li>After we bikeshed, we release the 0.99 version of this library, even if there are bits I don't like/am not sure about.</li>\n<li>We migrate rowan and rust-analyzer to 0.99</li>\n<li>After a month, unless something truly outrageous comes up, we bump version to 1.0 (with maybe even a semver trick to make migration trully flawless).</li>\n</ul>\n</blockquote>\n<p>I'm going to drop impl notes here as I try to find a nice balance between text_unit and str-index.</p>",
        "id": 189183148,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1582772640
    },
    {
        "content": "<p><code>TextSize</code> is nice, but falls short on one important note: constructing <code>TextRange</code></p>",
        "id": 189183200,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1582772696
    },
    {
        "content": "<p>Because <code>TextSize</code> is the \"size\" of a string it feels kind of weird to use as also an index</p>",
        "id": 189183226,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1582772739
    },
    {
        "content": "<p>Though I suppose that's a flown ship (wait wut) given Rust uses <code>usize</code> for both \"size\" (of an array) and \"index\"</p>",
        "id": 189183275,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1582772779
    },
    {
        "content": "<p>Yeah, exactly: <code>xs[..92]</code> is a range with size as a bound</p>",
        "id": 189194417,
        "sender_full_name": "matklad",
        "timestamp": 1582791821
    },
    {
        "content": "<p>(index is also weird in a sense that it's impossible to <em>index</em> string, only to slice it)</p>",
        "id": 189194474,
        "sender_full_name": "matklad",
        "timestamp": 1582791877
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/text_unit/pull/2\" target=\"_blank\" title=\"https://github.com/rust-analyzer/text_unit/pull/2\">Initial PR for text-size is up!</a></p>\n<p>As I mentioned in the PR, I went pretty aggressive (and probably overboard) on allowing implicit \"on-boarding\" conversions, via taking <code>Into&lt;TextSize&gt;</code> for most functions. I expect to be vetoed on at least some of them.</p>\n<p>The idea of the implicit conversions is to allow using <code>TextSize</code>/<code>TextRange</code> to be as painless as possible. <code>TextRange</code> is actually useful in being a <code>Copy</code> range and providing manipulation methods, but <code>TextSize</code> is \"just\" a newtype representing a \"kind\" of <code>u32</code>. The idea is that coersion points makes it so more API surface can adopt <code>TextSize</code> for correctness without regressing ergonomics of using integer literals and such.</p>",
        "id": 189989008,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1583620122
    },
    {
        "content": "<p>per <a href=\"https://github.com/rust-analyzer/text_unit/pull/2#discussion_r389319650\" target=\"_blank\" title=\"https://github.com/rust-analyzer/text_unit/pull/2#discussion_r389319650\">https://github.com/rust-analyzer/text_unit/pull/2#discussion_r389319650</a>, I've removed all of the <code>Into&lt;TextSize&gt;</code> \"on-boarding coercions\". Reasoning: putting effort into allowing use of literals is \"coding for the tests\" a bit too much. The point of the crate is to separate text units from raw numbers, so having the split is a good thing.</p>",
        "id": 189997833,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1583639090
    },
    {
        "content": "<p>I guess the thing Rust lacks here is C++ish literals overloads...</p>",
        "id": 190005169,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1583655421
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> 's position that convinced me the most is that you shouldn't really be using literals of <code>TextSize</code>/<code>TextRange</code> outside of tests. And the API should work to serve the real code first, tests second.</p>",
        "id": 190023240,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1583692441
    },
    {
        "content": "<p>The most common literal to use would be <code>0</code>, and we can just provide <code>const TextSize::ZERO</code> and/or <code>const fn TextSize::zero()</code> for that case.</p>",
        "id": 190023340,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1583692615
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132829\">@Christopher Durham</span> what do you think about <a href=\"https://github.com/rust-analyzer/text_unit/pull/4\" target=\"_blank\" title=\"https://github.com/rust-analyzer/text_unit/pull/4\">https://github.com/rust-analyzer/text_unit/pull/4</a>?</p>",
        "id": 190046560,
        "sender_full_name": "matklad",
        "timestamp": 1583739764
    },
    {
        "content": "<p>I've forgotten the initial reason that I didn't pull over that requirement. I prefer <code>::new(start..end)</code> to <code>::new(start, end)</code> but that's just a minor syntax quibble.</p>",
        "id": 190077548,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1583765859
    },
    {
        "content": "<p>Unlike <code>ops::Range</code>, though, I've already noted a reverse range as immediately a logic error. So the well-formedness of the range is still assumable, just not for the fulfilment of <code>unsafe</code> requirements.</p>",
        "id": 190077716,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1583765952
    },
    {
        "content": "<p>Is there a use case where having a strict guarantee that the range is increasing is required? Or is it just a panic-sooner kind of thing for quicker catching of logic errors?</p>",
        "id": 190077996,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1583766086
    },
    {
        "content": "<p>It's for catching logic errors, yeah. And also for letting you not to think about this case as well .</p>",
        "id": 190078163,
        "sender_full_name": "matklad",
        "timestamp": 1583766165
    },
    {
        "content": "<p>(also I have no idea what tbbs stands for)</p>",
        "id": 190078196,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1583766186
    },
    {
        "content": "<p>to be bikeshed</p>",
        "id": 190078240,
        "sender_full_name": "matklad",
        "timestamp": 1583766211
    },
    {
        "content": "<p>So, if we are already at it, I also find <code>TextRange::new(lo..hi)</code> kind of nicer than <code>,</code>, and probably would even prefer to read/write just <code>TextRange(lo..hi)</code>. But isn't that too cute for the sake of code golf? <code>::new(lo, hi)</code> is boring, which is a major benefit</p>",
        "id": 190078676,
        "sender_full_name": "matklad",
        "timestamp": 1583766438
    },
    {
        "content": "<p>I think <code>::new(lo..hi)</code> is probably the best here</p>",
        "id": 190079016,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1583766614
    },
    {
        "content": "<p>The reason I prefer it over <code>(lo, hi)</code> is that it makes the half-open semantics immediately clear</p>",
        "id": 190079052,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1583766642
    },
    {
        "content": "<p>\"this works like <code>ops::Range</code>\"</p>",
        "id": 190079068,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1583766653
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/o3ZelQ8IZrRMyblEBiDQXyKi/image.png\" target=\"_blank\" title=\"image.png\">image.png</a> and, tbh, <code>TextRange::from_to()</code></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/o3ZelQ8IZrRMyblEBiDQXyKi/image.png\" target=\"_blank\" title=\"image.png\"><img src=\"/user_uploads/4715/o3ZelQ8IZrRMyblEBiDQXyKi/image.png\"></a></div><p><a href=\"/user_uploads/4715/6RQZhxHa2IY3yooH2gVD956_/image.png\" target=\"_blank\" title=\"image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/6RQZhxHa2IY3yooH2gVD956_/image.png\" target=\"_blank\" title=\"image.png\"><img src=\"/user_uploads/4715/6RQZhxHa2IY3yooH2gVD956_/image.png\"></a></div>",
        "id": 190079093,
        "sender_full_name": "matklad",
        "timestamp": 1583766670
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/GDDM0_LVNh4HvLYwNVKo5Q_V/image.png\" target=\"_blank\" title=\"image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/GDDM0_LVNh4HvLYwNVKo5Q_V/image.png\" target=\"_blank\" title=\"image.png\"><img src=\"/user_uploads/4715/GDDM0_LVNh4HvLYwNVKo5Q_V/image.png\"></a></div>",
        "id": 190079122,
        "sender_full_name": "matklad",
        "timestamp": 1583766685
    },
    {
        "content": "<p><code>,</code> formats better over several lines...</p>",
        "id": 190079142,
        "sender_full_name": "matklad",
        "timestamp": 1583766708
    },
    {
        "content": "<p>Yeah, that's the one reason to maybe prefer <code>,</code>.</p>",
        "id": 190079342,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1583766801
    },
    {
        "content": "<p>Designing for a world with argument labels also is different from trying to work well without</p>",
        "id": 190079442,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1583766843
    },
    {
        "content": "<p>Note that if it's the frist time you see <code>new(lo..hi)</code>, you'll probably go to check docs/source anyway, because \"whyyy are we using <code>..</code> as an argument here? Is it an iterator\"?</p>",
        "id": 190079499,
        "sender_full_name": "matklad",
        "timestamp": 1583766875
    },
    {
        "content": "<p>I wonder if</p>\n<p><a href=\"/user_uploads/4715/o1xfWcwnA-Ax6tO6yxlopwOF/image.png\" target=\"_blank\" title=\"image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/o1xfWcwnA-Ax6tO6yxlopwOF/image.png\" target=\"_blank\" title=\"image.png\"><img src=\"/user_uploads/4715/o1xfWcwnA-Ax6tO6yxlopwOF/image.png\"></a></div><p>is best? You get half-opennes and range semantics simply because there's a <code>Range</code>in the name</p>",
        "id": 190079686,
        "sender_full_name": "matklad",
        "timestamp": 1583766980
    },
    {
        "content": "<p>Anyway, should I merge that PR with invariant?</p>",
        "id": 190079733,
        "sender_full_name": "matklad",
        "timestamp": 1583767016
    },
    {
        "content": "<p>Maybe, but <code>Range::new(lo..hi)</code> I think is pretty clear. Or we can just ignore the \"infallible\" expectation of <code>From</code> and do <code>Range::from(lo..hi)</code> if that's clearer (with an inherent method)</p>",
        "id": 190079774,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1583767036
    },
    {
        "content": "<p>But I'm warming up to the \"fake tuple struct,\" actually</p>",
        "id": 190079797,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1583767052
    },
    {
        "content": "<p>I'd say rebase it to add the restriction to the \"tuple struct constructor\" then merge it</p>",
        "id": 190079911,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1583767111
    },
    {
        "content": "<p>(internal const construction can just fall back to <code>{ start, end }</code>)</p>",
        "id": 190079939,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1583767138
    },
    {
        "content": "<p>It's sad to see <code>From</code> go but I think it's for the better</p>",
        "id": 190080061,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1583767196
    },
    {
        "content": "<p>tbh, I don't think I've ever wanted From for ranges</p>",
        "id": 190080177,
        "sender_full_name": "matklad",
        "timestamp": 1583767255
    },
    {
        "content": "<p>I wanted to do <code>text[text_size..]</code>, but that's another story</p>",
        "id": 190080204,
        "sender_full_name": "matklad",
        "timestamp": 1583767269
    },
    {
        "content": "<p>Yeah, it's more a theoretical sadness than a practical one</p>",
        "id": 190080215,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1583767276
    },
    {
        "content": "<p>And since we're \"fake tuple struct\"ing <code>TextRange</code> we should probably do it for <code>TextSize</code> as well.</p>",
        "id": 190080217,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1583767278
    },
    {
        "content": "<p>Though to be clear: not marking the constructor as <code>const</code> is a difference from real tuple structs (along with the lack of pattern matching through them).</p>",
        "id": 190080310,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1583767323
    },
    {
        "content": "<p>We can make them const tho</p>",
        "id": 190080355,
        "sender_full_name": "matklad",
        "timestamp": 1583767344
    },
    {
        "content": "<p><code>[()][(start &gt; end) as usize]</code></p>",
        "id": 190080380,
        "sender_full_name": "matklad",
        "timestamp": 1583767357
    },
    {
        "content": "<p>Oh no const assert hacks‽ Yes please</p>",
        "id": 190080423,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1583767375
    },
    {
        "content": "<p>Though I'd prefer to just put an assert there, and then wait until it is const :D</p>",
        "id": 190080502,
        "sender_full_name": "matklad",
        "timestamp": 1583767414
    },
    {
        "content": "<p>Please give me <code>const assert!</code> lang team</p>",
        "id": 190080648,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1583767467
    },
    {
        "content": "<p>If adding <code>static_assertions</code> as a dep is ok, they have <code>const_assert!</code> to wrap up the trickery</p>",
        "id": 190080709,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1583767504
    },
    {
        "content": "<p>(and it is a leaf dependency)</p>",
        "id": 190080752,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1583767529
    },
    {
        "content": "<p>Wait nvm I'm pretty sure <code>const_assert!</code> only works on constants, not just in a const context</p>",
        "id": 190080840,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1583767566
    },
    {
        "content": "<p>Pushed, but I am having second thoughs about fake tuple for <code>TextSize</code></p>",
        "id": 190081470,
        "sender_full_name": "matklad",
        "timestamp": 1583767909
    },
    {
        "content": "<p><code>TextRanges</code> you do create from various offset mansually</p>",
        "id": 190081505,
        "sender_full_name": "matklad",
        "timestamp": 1583767922
    },
    {
        "content": "<p><code>TextSize</code>, however, you should really crate with <code>of</code></p>",
        "id": 190081551,
        "sender_full_name": "matklad",
        "timestamp": 1583767937
    },
    {
        "content": "<p>Maybe I am being to pedantic here, but I'd really love to see <code>TextSize::of(\":\")</code>, rather than <code>TextSize(1)</code>, and not having tuple ctor helps with that</p>",
        "id": 190081618,
        "sender_full_name": "matklad",
        "timestamp": 1583767980
    },
    {
        "content": "<p>Ie, you can crate a range from two sizes, but the only \"officail\" way to create a size would be to measure something</p>",
        "id": 190081651,
        "sender_full_name": "matklad",
        "timestamp": 1583768007
    },
    {
        "content": "<p>That makes sense</p>",
        "id": 190083114,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1583768704
    },
    {
        "content": "<p>Ok, merged that PR</p>",
        "id": 190083369,
        "sender_full_name": "matklad",
        "timestamp": 1583768844
    },
    {
        "content": "<p>This const assert hack made my day. Thanks :)</p>",
        "id": 190083843,
        "sender_full_name": "Wojciech Polak",
        "timestamp": 1583769107
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214828\">@Wojciech Polak</span> <a href=\"https://github.com/rust-analyzer/smol_str/commit/c7ce079a24cdd67eaf972f070874c6be7c166082\" target=\"_blank\" title=\"https://github.com/rust-analyzer/smol_str/commit/c7ce079a24cdd67eaf972f070874c6be7c166082\">https://github.com/rust-analyzer/smol_str/commit/c7ce079a24cdd67eaf972f070874c6be7c166082</a> :D</p>",
        "id": 190084018,
        "sender_full_name": "matklad",
        "timestamp": 1583769177
    },
    {
        "content": "<p>We should make a crate out of this</p>",
        "id": 190086591,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1583770390
    },
    {
        "content": "<p>Oh, wait it already exists</p>",
        "id": 190086832,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1583770484
    },
    {
        "content": "<p>Specifically, while I'm pretty sure <a href=\"https://docs.rs/static_assertions/1.1.0/static_assertions/macro.const_assert.html\" target=\"_blank\" title=\"https://docs.rs/static_assertions/1.1.0/static_assertions/macro.const_assert.html\"><code>static_assertions::const_assert</code></a> only works for statically-known consts, <a href=\"https://docs.rs/const_fn_assert/0.1.2/const_fn_assert/macro.cfn_assert.html\" target=\"_blank\" title=\"https://docs.rs/const_fn_assert/0.1.2/const_fn_assert/macro.cfn_assert.html\"><code>const_fn_assert::cfn_assert</code></a> works for \"const-time\" asserts with a not completely horrible const-time error (but understandably bad runtime error).</p>",
        "id": 190097524,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1583776200
    },
    {
        "content": "<p>I really like these changes, maybe Ill use this <code>text-size 0.99</code> crate in my next \"Parser in Rust\" article :)</p>",
        "id": 190278214,
        "sender_full_name": "Wojciech Polak",
        "timestamp": 1583931895
    },
    {
        "content": "<p>Just keep in mind that it's not quite stable yet, as we argue out the remaining details :)</p>",
        "id": 190463460,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1584063642
    },
    {
        "content": "<p>I noticed ;)</p>",
        "id": 190479912,
        "sender_full_name": "Wojciech Polak",
        "timestamp": 1584087290
    },
    {
        "content": "<p>I think we're converging on what we want to publish as v0.99, so I published v0.99.0-dev.2 (and also invited matklad to own), so that I can make experimental patches for rowan and rust-analyzer.</p>",
        "id": 191164674,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1584646606
    },
    {
        "content": "<p>Here's a couple papercuts I found with text-size in porting rowan to use it:</p>\n<ul>\n<li>Given <code>s: &amp;SmolStr</code>, you can call <code>TextUnit::of_str(s)</code>, but not <code>TextSize::of(s)</code>; requiring <code>TextSize::of(&amp;**s)</code>. This is solvable in text-size via a blanket recursive impl.<ul>\n<li>Simpler: <code>impl&lt;D&gt; TextSized for &amp;'_ D where D: Deref&lt;Target = str&gt;</code></li>\n<li>More complete: <code>impl&lt;D&gt; TextSized for &amp;'_ D where D: Deref, for&lt;'a&gt; &amp;'a D::Target: TextSized</code></li>\n</ul>\n</li>\n<li><code>self.range.contains_range(range)</code><ul>\n<li><code>.contains_range(range)</code> is disturbingly common.</li>\n</ul>\n</li>\n<li><code>SyntaxTextRange</code> should probably be replaced by <code>RangeBounds&lt;TextSize&gt;</code>, but also brings up an interesting change:<ul>\n<li><code>range.start()</code> for <code>range: &amp;TextRange</code> now prefers <code>SyntaxTextRange::start</code> over <code>TextRange::start</code> due to the way method resolution works.</li>\n</ul>\n</li>\n<li><code>TextRange::empty(offset)</code> should probably be <code>TextRange::empty_at(offset)</code> and/or <code>TextRange::empty() + offset</code> (<code>TextRange::zero() + offset</code>?)</li>\n</ul>",
        "id": 191313105,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1584745155
    },
    {
        "content": "<p>Here's the rowan patch: <a href=\"https://github.com/CAD97/rowan/pull/3\" target=\"_blank\" title=\"https://github.com/CAD97/rowan/pull/3\">https://github.com/CAD97/rowan/pull/3</a></p>",
        "id": 191313130,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1584745182
    },
    {
        "content": "<p>And here's <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=008b5e0c2edd332b34b3efa42ce2a40a\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=008b5e0c2edd332b34b3efa42ce2a40a\">a playground showing off the deref-coersion style(?) <code>TextSized</code> impls</a></p>",
        "id": 191315360,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1584747223
    },
    {
        "content": "<p>I think we should add only the first blanket impls</p>",
        "id": 191316361,
        "sender_full_name": "matklad",
        "timestamp": 1584748107
    },
    {
        "content": "<p>range.conains_range(range) is funny, but is strictly better than the reversed is_subrange</p>",
        "id": 191316383,
        "sender_full_name": "matklad",
        "timestamp": 1584748135
    },
    {
        "content": "<p>Not sure about the last one</p>",
        "id": 191316519,
        "sender_full_name": "matklad",
        "timestamp": 1584748267
    },
    {
        "content": "<p>Seems like empty with argument is the right thing, as there are many empty ranges</p>",
        "id": 191316545,
        "sender_full_name": "matklad",
        "timestamp": 1584748288
    },
    {
        "content": "<p><code>empty_at</code> probably is clearer for that case, though</p>",
        "id": 191316566,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1584748315
    },
    {
        "content": "<p>It's a bit of \"argument hint\" bias to have <code>TextRange::empty(offset: size)</code>, but <code>TextRange::empty_at(offset: size)</code> serves those both with and without imho</p>",
        "id": 191316643,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1584748368
    },
    {
        "content": "<p>Not sold: like you see there is an argument for <code>empty</code>, and it <em>could</em> only mean one single ting</p>",
        "id": 191316693,
        "sender_full_name": "matklad",
        "timestamp": 1584748429
    },
    {
        "content": "<p>you don't need to know its name to guess what does it mean</p>",
        "id": 191316708,
        "sender_full_name": "matklad",
        "timestamp": 1584748442
    },
    {
        "content": "<p>The one counterargument is that <code>TextRange::empty(TextSize::zero())</code> is _also_ common<br>\nand I'd guess at it being a decent chunk of <code>::empty</code> calls</p>",
        "id": 191316838,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1584748545
    },
    {
        "content": "<p>So that would be better served by having <code>::empty()</code>, rather than relying on <code>::default()</code> being <code>::empty()</code></p>",
        "id": 191316895,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1584748570
    },
    {
        "content": "<p>... which we don't even provide <code>Default</code> currently</p>",
        "id": 191316906,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1584748591
    },
    {
        "content": "<p>But <code>::empty()</code> does not make sense: there are <code>u32::max</code> empty text ranges. Providing <code>default</code> seems like a good idea to me though!</p>",
        "id": 191333574,
        "sender_full_name": "matklad",
        "timestamp": 1584776744
    },
    {
        "content": "<blockquote>\n<p>there are <code>u32::MAX</code> empty text ranges</p>\n</blockquote>\n<p>This is what convinced me.</p>",
        "id": 191410894,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1584903723
    },
    {
        "content": "<p>This text range thing is just a vector of two coordinates that has 3 degenerate cases: <code>null_vector(0, 0)</code>; <code>unbiased(0, p)</code>; <code>empty(p, 0)</code></p>",
        "id": 191412977,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584906591
    },
    {
        "content": "<p>I also wonder wouldn't it make sense to <code>std::ops::Range*&lt;TextUnit&gt;</code> instead of <code>TextRange</code> just for the additional syntax sugar?</p>",
        "id": 191413343,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584907141
    },
    {
        "content": "<p>Three main problems with that:</p>\n<ul>\n<li><code>ops::Range</code> is not <code>Copy</code>, and having a <code>Copy</code> range is a nice bonus for using a crate like this,</li>\n<li><code>ops::Range</code> does not guarantee a nondecreasing \"forwards\" range, which matklad is a fan of having as a guarantee to catch errors early, and</li>\n<li>there is currently no way to index with <code>ops::Range&lt;MyType&gt;</code> <a href=\"https://github.com/rust-lang/rust/issues/35729#issuecomment-598777102\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/35729#issuecomment-598777102\">because of <code>SliceIndex</code></a>.</li>\n</ul>",
        "id": 191414849,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1584909337
    },
    {
        "content": "<p>Hmm, I wish the following worked:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ops</span>::<span class=\"n\">Range</span><span class=\"o\">&lt;</span><span class=\"n\">TextUnit</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>but it fails due to coherence rules...<br>\nAnyway, yeah that's reasonable</p>",
        "id": 191416593,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584911756
    }
]