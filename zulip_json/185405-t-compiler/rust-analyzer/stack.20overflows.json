[
    {
        "content": "<p>Something changed between yesterday and today. I am now getting a lot of exciting</p>\n<blockquote>\n<p>thread '&lt;unknown&gt;' has overflowed its stack<br>\n[Error - 1:33:16 PM] Connection to server got closed. Server will not be restarted.<br>\n[Error - 1:33:16 PM] Request textDocument/codeAction failed.</p>\n</blockquote>",
        "id": 175929523,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1568741677
    },
    {
        "content": "<p>Yeah, noticed this as well! Rolled back the latest commit from master just moments ago</p>",
        "id": 175929930,
        "sender_full_name": "matklad",
        "timestamp": 1568741918
    },
    {
        "content": "<p>Did you do a force push? Looks like I have to force the checkout</p>",
        "id": 175930044,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1568742001
    },
    {
        "content": "<p>I mean a reset</p>",
        "id": 175930217,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1568742089
    },
    {
        "content": "<p>Yeah, I've force pushed</p>",
        "id": 175930446,
        "sender_full_name": "matklad",
        "timestamp": 1568742219
    },
    {
        "content": "<p>That seems to have fixed it</p>",
        "id": 175930700,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1568742360
    },
    {
        "content": "<p>hm, I'll check it</p>",
        "id": 175931033,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1568742540
    },
    {
        "content": "<p>oh... </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Trait</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">Item</span>: <span class=\"nc\">Trait2</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>we want to lower the types in the where clauses, so we need to select the trait where <code>Item</code> comes from, so we look into the where clauses, so we need to lower the types in the where clauses...</p>",
        "id": 175932780,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1568743617
    },
    {
        "content": "<p>ah... should have read rustc <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> <a href=\"https://github.com/rust-lang/rust/blob/9150f844e2624eb013ec78ca08c1d416e6644026/src/librustc_typeck/astconv.rs#L46\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/9150f844e2624eb013ec78ca08c1d416e6644026/src/librustc_typeck/astconv.rs#L46\">https://github.com/rust-lang/rust/blob/9150f844e2624eb013ec78ca08c1d416e6644026/src/librustc_typeck/astconv.rs#L46</a></p>",
        "id": 175935084,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1568745067
    },
    {
        "content": "<p>Since today I've started seeing some random stack overflows every now and then when editing files. Have yet to see a pattern though <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span><br>\nI also seem to get a few HIR display panics like <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8077\">https://github.com/rust-analyzer/rust-analyzer/issues/8077</a> since yesterday I think</p>",
        "id": 230781433,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616020837
    },
    {
        "content": "<p><a href=\"https://crates.io/crates/backtrace-on-stack-overflow\">https://crates.io/crates/backtrace-on-stack-overflow</a> might be useful</p>",
        "id": 230831992,
        "sender_full_name": "matklad",
        "timestamp": 1616058573
    },
    {
        "content": "<p>I noticed some clippy warnings about some recursive <code>Display</code> impls, but they're probably FPs</p>",
        "id": 230832123,
        "sender_full_name": "Laurențiu",
        "timestamp": 1616058625
    },
    {
        "content": "<p>Also, that was before yesterday</p>",
        "id": 230832145,
        "sender_full_name": "Laurențiu",
        "timestamp": 1616058634
    },
    {
        "content": "<p>Hm, I am seeing a panic in attrs handing, not a stack overflow: </p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;cannot find `Attr` at index 0&#39;, crates/hir_def/src/attr.rs:395:32\nstack backtrace:\n   0: rust_begin_unwind\n             at /rustc/cb75ad5db02783e8b0222fee363c5f63f7e2cf5b/library/std/src/panicking.rs:493:5\n   1: std::panicking::begin_panic_fmt\n             at /rustc/cb75ad5db02783e8b0222fee363c5f63f7e2cf5b/library/std/src/panicking.rs:435:5\n   2: hir_def::attr::AttrSourceMap::source_of::{{closure}}\n   3: hir_def::attr::AttrSourceMap::source_of\n   4: ide::syntax_highlighting::inject::doc_comment\n   5: ide::syntax_highlighting::highlight\n   6: std::panicking::try\n   7: ide::Analysis::highlight\n   8: rust_analyzer::handlers::handle_semantic_tokens_full\n</code></pre></div>",
        "id": 230836874,
        "sender_full_name": "matklad",
        "timestamp": 1616061228
    },
    {
        "content": "<p>That one looks like its on me <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 230837058,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616061325
    },
    {
        "content": "<p>Though that panic is weird, I'm not sure why that's happening <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 230838379,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616062060
    },
    {
        "content": "<p>Okay I can reproduce it reliably i think</p>\n<div class=\"codehilite\"><pre><span></span><code>//! A simplified AST that only contains items.\n\nmod lower;\n</code></pre></div>\n<p>This seems to panic :/</p>",
        "id": 230839258,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616062498
    },
    {
        "content": "<p>Okay the problem is that the Attribute source mapping doesnt work so easily. Attributes of outline modules can have two different owner nodes. I guess wrapping <code>Attr</code> in an <code>InFile</code> would help here to track where they came from? Would that be an okay approach to fix this?</p>\n<p>Actually no this wouldn't help</p>",
        "id": 230843945,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616064972
    },
    {
        "content": "<p>On another Note, did completions get slower? I feel like VSCode is showing me only basic text completions quite frequently now</p>",
        "id": 230850489,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616068726
    },
    {
        "content": "<p>it might have, we enabled auto-imports in more cases. Really, we should \"somehow\" push auto-imports to be instant. I don't know how, but, intuitevely, auto-import suggestion don't change much, so the lookup should be fashayt</p>",
        "id": 230857303,
        "sender_full_name": "matklad",
        "timestamp": 1616072110
    },
    {
        "content": "<p>Okay I am actually able to reproduce the stack overflow, given</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">group_label</span><span class=\"p\">(</span><span class=\"n\">candidate</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">ImportCandidate</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">GroupLabel</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">candidate</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ImportCandidate</span>::<span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ImportCandidate</span>::<span class=\"n\">TraitAssocItem</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ImportCandidate</span>::<span class=\"n\">TraitMethod</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">&amp;</span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">assoc_item_name</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// &lt;------</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">GroupLabel</span><span class=\"p\">(</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"Qualify {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>in <code>handlers/qualify_path.rs</code> as an example<br>\nWhen deleting the annotated <code>}</code> the server completely dies on a stack overflow</p>",
        "id": 230881512,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616080721
    },
    {
        "content": "<p>This seems to happen with any <code>match</code></p>",
        "id": 230881531,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616080730
    },
    {
        "content": "<p>Oh no if one doesn't fix the syntax error it just keeps crashing on restart <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 230881905,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616080847
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/stack.20overflows/near/230831992\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://crates.io/crates/backtrace-on-stack-overflow\">https://crates.io/crates/backtrace-on-stack-overflow</a> might be useful</p>\n</blockquote>\n<p>Guess I'll try to debug this later with the crate you mentioned</p>",
        "id": 230882509,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616081037
    },
    {
        "content": "<p>Okay I don't think I need the backtrace(+ I dont have a linux machine atm so I cant really use it), but if Im guessing this right the problem is expression-statement error recovery.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>also causes crashes. And it only crashes when a lot of source follows the syntax error which makes me believe it is error recovery causing problems?</p>",
        "id": 230887629,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616082647
    },
    {
        "content": "<p>Syntax error recovery? Yeah, that might be it!</p>\n<p>I think the best way to debug this is to paste the offending code into <code>parser_smoke_test</code> <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/d704750ba982153d92ccff90cf236121641b9da3/crates/syntax/src/tests.rs#L32-L43\">https://github.com/rust-analyzer/rust-analyzer/blob/d704750ba982153d92ccff90cf236121641b9da3/crates/syntax/src/tests.rs#L32-L43</a></p>",
        "id": 230888895,
        "sender_full_name": "matklad",
        "timestamp": 1616083033
    },
    {
        "content": "<p>Hm, doesn't stack overflow there :/ guess its not error recovery then, thought then I'm keen to find out what it is instead</p>",
        "id": 230892461,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616083786
    },
    {
        "content": "<p>So apparently <code>Declvalidator::validate_item</code> is recursing endlessly</p>",
        "id": 230913593,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616091283
    },
    {
        "content": "<p>So Im pretty sure the reason for why this stack overflow is happening now is thanks to local nameres <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 230917890,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616093091
    },
    {
        "content": "<p>Though I wonder why this is happening when there is such a syntax error, from the looks of it the syntax tree gets very much malformed and I guess the HIR gets incorrectly constructred therefor</p>",
        "id": 230918000,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616093141
    },
    {
        "content": "<p>oof</p>",
        "id": 230918002,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616093141
    },
    {
        "content": "<p>any way to reproduce this?</p>",
        "id": 230918015,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616093149
    },
    {
        "content": "<p>very easily</p>",
        "id": 230918030,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616093158
    },
    {
        "content": "<p>Putting <code>if let x = x{;</code> here <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/d0805c6444e06e082465cd1a064c83c0f90faf71/crates/ide_assists/src/handlers/qualify_path.rs#L45\">https://github.com/rust-analyzer/rust-analyzer/blob/d0805c6444e06e082465cd1a064c83c0f90faf71/crates/ide_assists/src/handlers/qualify_path.rs#L45</a></p>",
        "id": 230918115,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616093196
    },
    {
        "content": "<p>crashes the server</p>",
        "id": 230918127,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616093201
    },
    {
        "content": "<p>and commenting out <code>validate_item</code> prevents the crash</p>",
        "id": 230918318,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616093273
    },
    {
        "content": "<p>If I see this right the syntax tree is completely incorrect after this, basically <strong><em>everything</em></strong> that follows the incorrect <code>if let</code> there seems to become the <code>if let</code> nodes child node</p>",
        "id": 230918445,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616093313
    },
    {
        "content": "<p>So I imagine the problem is the HIR getting cycles somehow due to this?</p>",
        "id": 230918505,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616093340
    },
    {
        "content": "<p>could be!</p>",
        "id": 230918587,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616093368
    },
    {
        "content": "<p>I've seen hangs and crashes related to local nameres when refactoring ItemTree</p>",
        "id": 230918648,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616093394
    },
    {
        "content": "<p>Yep so everything after the syntax error becomes a local item to the first function syntax tree wise it turns out <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 230919952,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616093955
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">qualify_path</span><span class=\"p\">()</span><span class=\"w\">  </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">mod</span> <span class=\"nn\">tests</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>minimal repro that crashes</p>",
        "id": 230919963,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616093960
    },
    {
        "content": "<p>Corresponding RAST, which shows the incorrect nesting <a href=\"https://gist.github.com/Veykril/bfb1f9327c906bc61cd88a6ca914accb\">https://gist.github.com/Veykril/bfb1f9327c906bc61cd88a6ca914accb</a></p>",
        "id": 230920177,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616094028
    },
    {
        "content": "<p>Okay I can hand this over to you I think Jonas, its not even syntax error related</p>",
        "id": 230920807,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616094241
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 230920871,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616094247
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 230920879,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616094250
    },
    {
        "content": "<p>This crashes <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">qualify</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">mod</span> <span class=\"nn\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 230921263,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616094422
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 230921365,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616094463
    },
    {
        "content": "<p>It happens when computing diagnostics</p>\n<div class=\"codehilite\"><pre><span></span><code>#8848 0x00005555560bfc56 in hir_ty::diagnostics::decl_check::DeclValidator::validate_item ()\n#8849 0x00005555560bfc56 in hir_ty::diagnostics::decl_check::DeclValidator::validate_item ()\n#8850 0x00005555560bfc56 in hir_ty::diagnostics::decl_check::DeclValidator::validate_item ()\n#8851 0x00005555560bfc56 in hir_ty::diagnostics::decl_check::DeclValidator::validate_item ()\n#8852 0x00005555560bfc56 in hir_ty::diagnostics::decl_check::DeclValidator::validate_item ()\n#8853 0x00005555560bfc56 in hir_ty::diagnostics::decl_check::DeclValidator::validate_item ()\n#8854 0x00005555560bfc56 in hir_ty::diagnostics::decl_check::DeclValidator::validate_item ()\n#8855 0x00005555560bfc56 in hir_ty::diagnostics::decl_check::DeclValidator::validate_item ()\n#8856 0x00005555560bfc56 in hir_ty::diagnostics::decl_check::DeclValidator::validate_item ()\n#8857 0x00005555560bfc56 in hir_ty::diagnostics::decl_check::DeclValidator::validate_item ()\n</code></pre></div>",
        "id": 230921581,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616094551
    },
    {
        "content": "<p>I think I found the issue</p>",
        "id": 230921907,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616094687
    },
    {
        "content": "<p>Ye looks like using importing something from the parent via <code>super</code> inside a module that is inside a function doesn't work too well</p>",
        "id": 230921946,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616094706
    },
    {
        "content": "<p>we were recursively computing diagnostics for all <em>in-scope</em> functions, not just functions that were <em>defined</em> inside a block scope</p>",
        "id": 230922053,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616094745
    },
    {
        "content": "<p>oooh</p>",
        "id": 230922070,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616094756
    },
    {
        "content": "<p>Ye that explains it then <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 230922094,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616094765
    },
    {
        "content": "<p>Well that was a rather simple fix <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 230922870,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616095137
    },
    {
        "content": "<p>yup, love to see it <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 230922932,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616095171
    }
]