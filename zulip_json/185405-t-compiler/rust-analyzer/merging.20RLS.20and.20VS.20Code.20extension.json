[
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span> ! I feel like we should chat a bit about strategy for VS Code extension some time. I really like your proposal about using a single existing extensions for both.</p>\n<p>I don't have time for a chat <em>right</em> now, but I am creating this stream as a placeholder, and for the case you already have some ideas do dump in <code>async</code> fashion :)</p>",
        "id": 195568546,
        "sender_full_name": "matklad",
        "timestamp": 1588082675
    },
    {
        "content": "<p>sounds great <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 195568631,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588082714
    },
    {
        "content": "<p>So I think immediately we should re-brand the Rust (rls) extension to a regular \"Rust support for Visual Studio Code\" or similar (de-emphasize RLS)</p>",
        "id": 195578075,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588086592
    },
    {
        "content": "<p>I did clean some bits and pieces and tried to extract the core \"client workspaces\" (spawned LSPs and their <code>rootUri</code>s) and project detection logic and abstract it away from the rest of the extension</p>",
        "id": 195578254,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588086641
    },
    {
        "content": "<p>so I'd say we're in a good position to start implementing the RA engine support</p>",
        "id": 195578287,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588086660
    },
    {
        "content": "<p>One thing that needs reworking is the configuration prefixes - currently we have <code>rust-client.*</code> for anything client specific and <code>rust.*</code> are automatically synced with corresponding plugins</p>",
        "id": 195578419,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588086707
    },
    {
        "content": "<p>so I think we'd have to change that logic and extract a common Rust and RLS-specific options or at least warn against using RLS-specific configurations (and vice-versa with RA)</p>",
        "id": 195578596,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588086765
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span> let's continue here, for future reference</p>",
        "id": 195865868,
        "sender_full_name": "matklad",
        "timestamp": 1588264484
    },
    {
        "content": "<p>So I'm all for merging the plugins, definitely</p>",
        "id": 195865920,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588264505
    },
    {
        "content": "<p>So, I wouldn't actually <em>hate</em> moving vscode plugin to a separare repo, but I definitelly would strongly prefer it in tree</p>",
        "id": 195865933,
        "sender_full_name": "matklad",
        "timestamp": 1588264512
    },
    {
        "content": "<p>and I don't feel there are strong reasons not to do this.</p>",
        "id": 195865967,
        "sender_full_name": "matklad",
        "timestamp": 1588264529
    },
    {
        "content": "<p>heh, I just wanted to metion that I'm strongly in favour of having it dedicated :)</p>",
        "id": 195865982,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588264537
    },
    {
        "content": "<p>Like, even if it is in a separate repo under rust-lang, it's still blessed</p>",
        "id": 195866002,
        "sender_full_name": "matklad",
        "timestamp": 1588264547
    },
    {
        "content": "<p>But I guess that's probably not the most important thing -- it should be easey to move one way or anoter afterwards</p>",
        "id": 195866164,
        "sender_full_name": "matklad",
        "timestamp": 1588264609
    },
    {
        "content": "<p>for me, I think that coupling these two together encourages doing so even further, which results in rust-analyzer not being strictly LSP conformant and/or having some issues when trying to integrate with other editors</p>",
        "id": 195866176,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588264613
    },
    {
        "content": "<p>and it sorts of sends the message of 'extension for Rust Analyzer', which I believe should be \"the official, go-to Rust support extension for Visual Studio Code\"</p>",
        "id": 195866245,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588264645
    },
    {
        "content": "<p>so that people don't need to go into details that there's RLs or Rust Analyzer or anything else, just a good VSCode experience out-of-box</p>",
        "id": 195866286,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588264667
    },
    {
        "content": "<p>Yeah, agree that \"marketing\"-wise separate repo is better</p>",
        "id": 195866400,
        "sender_full_name": "matklad",
        "timestamp": 1588264713
    },
    {
        "content": "<p>we could have nightly features or prototypes for a development extension in-tree, but once they mature I imagine we should add support for new features as they are stabilized and added to the official extension</p>",
        "id": 195866431,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588264727
    },
    {
        "content": "<p>That I would think would be worst :D</p>",
        "id": 195866481,
        "sender_full_name": "matklad",
        "timestamp": 1588264753
    },
    {
        "content": "<p>let's not then :) didn't want to lose the development velocity bonus of keeping stuff in-tree</p>",
        "id": 195866524,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588264775
    },
    {
        "content": "<p>Like, coordinating two streams of development is painful :)</p>",
        "id": 195866530,
        "sender_full_name": "matklad",
        "timestamp": 1588264777
    },
    {
        "content": "<p>if anything, I think it promotes a cleaner separation of concerns and more well-though \"API\" boundaries</p>",
        "id": 195866654,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588264812
    },
    {
        "content": "<p>so it's not like it's all bad <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 195866669,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588264818
    },
    {
        "content": "<p>but agreed, it's more work overall</p>",
        "id": 195866684,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588264826
    },
    {
        "content": "<p>Not sure -- like, there's a process boundary anyway, you can't get any more separated then that</p>",
        "id": 195866736,
        "sender_full_name": "matklad",
        "timestamp": 1588264849
    },
    {
        "content": "<p>but let's probably pause <em>this</em> particular discussion -- as I've said, these seems easy to change as we go</p>",
        "id": 195866797,
        "sender_full_name": "matklad",
        "timestamp": 1588264874
    },
    {
        "content": "<p>Rather, how do you imagine the actual merge?</p>",
        "id": 195866814,
        "sender_full_name": "matklad",
        "timestamp": 1588264884
    },
    {
        "content": "<p>yes, but the urge to be compliant to that once implementation is easy to satify if all you're going to do is push 1 commit with changes here and there</p>",
        "id": 195866815,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588264884
    },
    {
        "content": "<p>err, misspoke but you get the idea :)</p>",
        "id": 195866867,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588264912
    },
    {
        "content": "<p>I sort of see two ways this can play out</p>",
        "id": 195866926,
        "sender_full_name": "matklad",
        "timestamp": 1588264924
    },
    {
        "content": "<p>I didn't read the source code for the rust-analyzer extension yet, which I think I should before commenting more on that</p>",
        "id": 195866974,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588264948
    },
    {
        "content": "<p>tbh, I haven't read source of rls-vscode for a while :D)</p>",
        "id": 195867031,
        "sender_full_name": "matklad",
        "timestamp": 1588264977
    },
    {
        "content": "<p>I don't think there's pressure to merge them right away - I'd focus on getting the support for Rust Analyzer first in the <code>rls-vscode</code>, so that we can technically progress with what's outlined in the RFC</p>",
        "id": 195867108,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588265015
    },
    {
        "content": "<p>Yeah, that also would work</p>",
        "id": 195867153,
        "sender_full_name": "matklad",
        "timestamp": 1588265035
    },
    {
        "content": "<p>as we go, we should add more and more feature parity but also document and identify the LSP extensions</p>",
        "id": 195867258,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588265064
    },
    {
        "content": "<p>On rust-analyzer side, I think it makese sense to first fix LSP-complience internally, and only then move to officially suggesting users to try</p>",
        "id": 195867286,
        "sender_full_name": "matklad",
        "timestamp": 1588265075
    },
    {
        "content": "<p>how did you see the process?</p>",
        "id": 195867289,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588265076
    },
    {
        "content": "<p>Let me think, I haven't considered adding preliminary support directly to rls-vscode</p>",
        "id": 195867405,
        "sender_full_name": "matklad",
        "timestamp": 1588265133
    },
    {
        "content": "<p>Yeah, I would imagine that eventually we'd just do one big-bang merge. Like, it's only 4k lines of code total, don't think we need any kind of complicated staged rollout procedure or what not</p>",
        "id": 195867590,
        "sender_full_name": "matklad",
        "timestamp": 1588265185
    },
    {
        "content": "<p>(as an aside, I considered implementing the extension in a single TS file, to get rid of the bundler, and to create a pressure to not add custom TS things)</p>",
        "id": 195867680,
        "sender_full_name": "matklad",
        "timestamp": 1588265222
    },
    {
        "content": "<p>But initially it indeed seems a good idea to add <code>rust-analyzer</code> mode to existing extension, which would basically call <code>rust-analyzer</code> binary instead of <code>rls</code>.</p>",
        "id": 195867964,
        "sender_full_name": "matklad",
        "timestamp": 1588265266
    },
    {
        "content": "<p><em>Maybe</em> having just a config switch for this is enough? And showing the message to the user with the installation instructions.</p>",
        "id": 195868066,
        "sender_full_name": "matklad",
        "timestamp": 1588265299
    },
    {
        "content": "<p>We can also copy-paste the code for downloading the binary form GitHub releases, but it is somewhat messy</p>",
        "id": 195868122,
        "sender_full_name": "matklad",
        "timestamp": 1588265321
    },
    {
        "content": "<p>Well, maybe</p>",
        "id": 195868125,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588265322
    },
    {
        "content": "<p>It sort of is nice to just click \"Now use Rust Analyzer\" and stuff is being done for you</p>",
        "id": 195868162,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588265335
    },
    {
        "content": "<p>Alternatively, we can first put rust-analyzer into <code>rustup</code>, and than installation becomes <code>rustup component add</code></p>",
        "id": 195868230,
        "sender_full_name": "matklad",
        "timestamp": 1588265365
    },
    {
        "content": "<p>I  very much like that, coupled with the task execution introspection - users see what's happening so they can follow along and understand</p>",
        "id": 195868232,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588265366
    },
    {
        "content": "<p>what is \"task exection introspection\"?</p>",
        "id": 195868289,
        "sender_full_name": "matklad",
        "timestamp": 1588265390
    },
    {
        "content": "<p>yes, rustup component add rust-analyzer would be definitely the easiest to solve from the extension's perspective</p>",
        "id": 195868290,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588265390
    },
    {
        "content": "<p>so to install RLS, we need to install <code>rust-src</code>, <code>rust-analysis</code> and <code>rls</code> components - we execute the tasks as if they were provided by the user</p>",
        "id": 195868397,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588265421
    },
    {
        "content": "<p>and they can see the output and the progress of what's happening, e.g. <code>rustup component add XYZ --toolchain ABC</code></p>",
        "id": 195868431,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588265436
    },
    {
        "content": "<p>I think that's both convenient and informative, so the users don't think it's some black magic machinery they don't have any influence over</p>",
        "id": 195868514,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588265474
    },
    {
        "content": "<p>Hm, yep, that's nice UX!</p>",
        "id": 195868552,
        "sender_full_name": "matklad",
        "timestamp": 1588265495
    },
    {
        "content": "<p>So yeah, I think it'll be useful for you to talke a look at this code: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/fec1e7c8e10e1c592642fac0c497cd57bd3f003c/editors/code/src/main.ts#L171-L243\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/fec1e7c8e10e1c592642fac0c497cd57bd3f003c/editors/code/src/main.ts#L171-L243\">https://github.com/rust-analyzer/rust-analyzer/blob/fec1e7c8e10e1c592642fac0c497cd57bd3f003c/editors/code/src/main.ts#L171-L243</a></p>",
        "id": 195868596,
        "sender_full_name": "matklad",
        "timestamp": 1588265510
    },
    {
        "content": "<p>yep, thanks!</p>",
        "id": 195868706,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588265536
    },
    {
        "content": "<p>(and probably <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/editors/code/src/net.ts\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/editors/code/src/net.ts\">https://github.com/rust-analyzer/rust-analyzer/blob/master/editors/code/src/net.ts</a> as well, which handled the networking)</p>",
        "id": 195868799,
        "sender_full_name": "matklad",
        "timestamp": 1588265579
    },
    {
        "content": "<p>That's the integration with the current release process. I <em>think</em> coping just that to rust-vscode would be the best way to get the ball rolling</p>",
        "id": 195868923,
        "sender_full_name": "matklad",
        "timestamp": 1588265628
    },
    {
        "content": "<p>definitelly faster than pusing stuff to <code>rustup</code></p>",
        "id": 195868945,
        "sender_full_name": "matklad",
        "timestamp": 1588265638
    },
    {
        "content": "<p>yep, definitely</p>",
        "id": 195884393,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588272506
    },
    {
        "content": "<p>I'll copy over the relevant bits</p>",
        "id": 195884409,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588272514
    },
    {
        "content": "<p>There's a WIP that downloads and install rust analyzer if <code>\"rust-client.engine\"</code> (also WIP) is set to <code>rust-analyzer</code>: <a href=\"https://github.com/rust-lang/rls-vscode/tree/support-rust-analyzer\" title=\"https://github.com/rust-lang/rls-vscode/tree/support-rust-analyzer\">https://github.com/rust-lang/rls-vscode/tree/support-rust-analyzer</a></p>",
        "id": 196383644,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588723445
    },
    {
        "content": "<p>It's rough around the edges and lacks some bits like automatic rust-src component installation but it's getting there =)</p>",
        "id": 196383693,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588723492
    },
    {
        "content": "<p>Great work, thanks!</p>",
        "id": 196383698,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588723496
    },
    {
        "content": "<p>Nice!</p>",
        "id": 196599611,
        "sender_full_name": "matklad",
        "timestamp": 1588752175
    },
    {
        "content": "<p>I wonder what specific next step should we pursue....</p>",
        "id": 196599754,
        "sender_full_name": "matklad",
        "timestamp": 1588752255
    },
    {
        "content": "<p>I need to make the end-to-end installation experience pleasant and complete, along with further making internal bits more engine-agnostic</p>",
        "id": 196608777,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588757511
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> there is one thing though that's making the current integration suboptimal. If I had to guess, Rust Analyzer listens to workspace folder changes and wants to be a single LSP server, whereas we went with the single server per project directory approach, to minimize the overhead so to speak</p>",
        "id": 196609412,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588757967
    },
    {
        "content": "<p>is my guess correct? If so, what do you say about intercepting and ignoring the workspace change requests and keep the fine-grained approach we have currently?</p>",
        "id": 196609465,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588758002
    },
    {
        "content": "<p>there's also the fact that rust-analyzer aims to be more build system agnostic, whereas our project layout logic in the extension uses Cargo.toml as its basis for project discovery and where to spawn the RLS instance</p>",
        "id": 196609547,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588758035
    },
    {
        "content": "<p>I feel pretty strongly that a single server instance is a better approach</p>",
        "id": 196610340,
        "sender_full_name": "matklad",
        "timestamp": 1588758575
    },
    {
        "content": "<p>rust-analyzer can (in theory more than in practice though) support arbitrary complex projects layout. For example, it can support several interdependent workspaces, and different workspaces can share sysroot crates</p>",
        "id": 196610449,
        "sender_full_name": "matklad",
        "timestamp": 1588758627
    },
    {
        "content": "<p>There's some discussion about this in this PR: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/3987\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/3987\">https://github.com/rust-analyzer/rust-analyzer/pull/3987</a></p>",
        "id": 196610520,
        "sender_full_name": "matklad",
        "timestamp": 1588758669
    },
    {
        "content": "<p>didn't dig deeper into that but  just want to add that Jannick was also kind enough to contribute to the existing workspace support in the RLS extension</p>",
        "id": 196622476,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588765976
    },
    {
        "content": "<p>and I'm not disagreeing on the single server instance approach, just to be clear</p>",
        "id": 196622627,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588766058
    },
    {
        "content": "<p>however I do find the argument of laziness/reduced overhead sound, especially in terms of possibly big monorepos</p>",
        "id": 196622691,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588766088
    },
    {
        "content": "<p>so I'm not sure how rust-analyzer works internally as of now, but if I were to initialize it in a monorepo will it try to, let's say, analyze project A even if I only opened/edited files for project B (which may not be related to project A)?</p>",
        "id": 196622784,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588766151
    },
    {
        "content": "<p>/me digs into that PR</p>",
        "id": 196623021,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588766279
    },
    {
        "content": "<p>Jesus christ I hate Zulip UX, sorry for the topic spam (edited already)</p>",
        "id": 196627336,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588768582
    },
    {
        "content": "<p>So this is somewhat in the air internally, but generally you \"initialize\" <code>rust-analyzer</code> with a set of projects. The \"initialize\" logic is a piece that I'd expect we tweak quite a bit in the future, but at the moment it is \"discover Cargo.toml's in workspace folders up to depth 1\". One thing we should definitelly do is to change this to \"look at the explicit set of Cargo.toml in the config\", which should cover \"I want to activate rust-analyzer only for subset of open projects\"</p>",
        "id": 196630439,
        "sender_full_name": "matklad",
        "timestamp": 1588770135
    },
    {
        "content": "<p>Does this mean that it doesn't respect <code>root{Path, Uri}</code> and rather looks for the in the configuration?</p>",
        "id": 196632772,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588771120
    },
    {
        "content": "<p>So, at the moment, we <strong>don't</strong> look at config</p>",
        "id": 196632867,
        "sender_full_name": "matklad",
        "timestamp": 1588771174
    },
    {
        "content": "<p>But I expect that we should add feature where, if config contains <code>cargoTomls = [\"foo/Cargo.toml\", \"bar/Cargo.toml\"]</code>, we should use that</p>",
        "id": 196632982,
        "sender_full_name": "matklad",
        "timestamp": 1588771210
    },
    {
        "content": "<p>That is, I think it's important to nail down both:</p>\n<p>1) auto discovery<br>\n2) explicit config</p>\n<p>and that probably auto-discovery should desugar internally to the same thing as explicit config</p>",
        "id": 196633062,
        "sender_full_name": "matklad",
        "timestamp": 1588771247
    },
    {
        "content": "<p>Here's a first pass at supporting Rust Analyzer in a user-friendly way - it'll install rust-src for you, you can specify a releaseTag that can be downloaded for you (and upgraded/changed later if you want) or you can specify your own binary.</p>",
        "id": 197182825,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1589220237
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rls-vscode/pull/793\">https://github.com/rust-lang/rls-vscode/pull/793</a></p>",
        "id": 197182835,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1589220239
    },
    {
        "content": "<p>It also supports passing rust-analyzer-specific options although they're not yet typed out in package.json for the user</p>",
        "id": 197182920,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1589220265
    },
    {
        "content": "<p>I'd appreciate taking a look &lt;3 If there won't be anything critical, I'd like to do that in a follow-up PR though</p>",
        "id": 197182995,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1589220319
    },
    {
        "content": "<p>I checked the PR and I'm wondering for how long we will use the \"experimental\" wording when we talk about rust-analyzer ? Is RFC a goal to not use \"experimental\" anymore ?</p>",
        "id": 197183676,
        "sender_full_name": "Coenen Benjamin",
        "timestamp": 1589220678
    },
    {
        "content": "<p>I meant to emphasize that rust-analyzer <em>support in rls-vscode</em> is experimental  in itself</p>",
        "id": 197236821,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1589263638
    },
    {
        "content": "<p>That’s because wcustom commands like applySourceChange are not implemented, somewhat limiting the practical capabilities of the tool</p>",
        "id": 197236883,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1589263711
    }
]