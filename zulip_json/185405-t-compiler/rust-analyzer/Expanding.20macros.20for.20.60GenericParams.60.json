[
    {
        "content": "<p>Trying to fix <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/10286\">rust-analyzer/rust-analyzer#10286</a> I stumbled upon a wall. AST -&gt; <code>ItemTree</code> lowering seems to assume that all generic parameters are known before macros are expanded (or at least I can't seem to find a way to expand macros at this stage). This is however false, macros can expand to <code>impl Trait</code> in argument position, which adds a new generic parameter. Fixing this however seems tricky to me. The only way I can think of is to change <code>GenericParams::generic_params_query</code> to either fixup or be the one that creates the <code>GenericParams</code> for <code>Function</code>, but both of them feel like a weird hack. Do you think this is the right way to go or do you have other/better ideas?</p>",
        "id": 254036804,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1632138725
    },
    {
        "content": "<p>this area probably needs a bigger refactoring. The most immediate way I see to solve this right now is probably to add a <code>TypeRef::walk_expanded</code> that expands macros. I think that should be possible</p>",
        "id": 254037865,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1632139254
    },
    {
        "content": "<p>I think long-term, maybe we need to remove impl trait handling from hir_def, do it purely in hir_ty, and move everything in hir_ty that accesses these the generics to instead work with Binders</p>",
        "id": 254038261,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1632139467
    },
    {
        "content": "<p>maybe we need to eagerly macroexpand all types in function signatures in hir_def though</p>",
        "id": 254038761,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1632139735
    },
    {
        "content": "<p>yeah, that seems reasonable</p>",
        "id": 254038844,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1632139794
    },
    {
        "content": "<p>that's actually maybe the simplest way, and would avoid doubling the work</p>",
        "id": 254038952,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1632139840
    },
    {
        "content": "<p>oh and <span class=\"user-mention\" data-user-id=\"338379\">@Giacomo Stevanato</span> by \"it should be pretty straightforward to turn it into a test\" I meant \"to use that test for debugging\", by the way</p>",
        "id": 254040423,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1632140607
    },
    {
        "content": "<p>I actually ended up writing the test (which also made the IDE crash) and running <code>cargo test</code> got me a backtrace. This wouldn't have been necessary if <code>RUST_BACKTRACE</code> worked from the start though.</p>",
        "id": 254040874,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1632140843
    },
    {
        "content": "<p>the test is still necessary anyway ;)</p>",
        "id": 254040914,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1632140877
    },
    {
        "content": "<p>not sure why RUST_BACKTRACE didn't work for you though</p>",
        "id": 254041012,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1632140916
    },
    {
        "content": "<p>The real pain wasn't writing the test, but fighting against VSCode wanting to open the \"Output\" tab everytime I moved the cursor</p>",
        "id": 254041265,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1632141052
    },
    {
        "content": "<p><code>RUST_BACKTRACE</code> doesn't work on windows for the downloaded binaries from github</p>",
        "id": 254044464,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632142529
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Expanding.20macros.20for.20.60GenericParams.60/near/254038761\">said</a>:</p>\n<blockquote>\n<p>maybe we need to eagerly macroexpand all types in function signatures in hir_def though</p>\n</blockquote>\n<p>Going back to this, I'm not quite sure how that would be implemented since macro expansion doesn't seem to be available when <code>ItemTree</code> is being created. Or do you mean to delay the creation of <code>GenericParams</code> until it is created? Looking at the uses of <code>Function::generic_params</code> it seems to be used only in <code>GenericParams::generic_params_query</code> (which seems to be able to do macro expansion) and in pretty printing for tests, so it wouldn't be that difficult to delay its creation.</p>",
        "id": 254177518,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1632216147
    },
    {
        "content": "<p>I mean during <code>fn_data_query</code></p>",
        "id": 254180041,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1632217457
    },
    {
        "content": "<p>Oh yeah, that makes sense</p>",
        "id": 254181315,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1632218139
    }
]