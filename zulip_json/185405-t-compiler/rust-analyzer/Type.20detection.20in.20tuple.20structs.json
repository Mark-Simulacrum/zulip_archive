[
    {
        "content": "<p>Hey, a first time contributor here, I am trying to solve <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/9337\">https://github.com/rust-analyzer/rust-analyzer/issues/9337</a></p>\n<p>My current approach is finding the data types of variables present in tuple struct of the cursor arm and then collect all other arms with same expr and same datatypes, which will then be ORed for the final merge output.</p>\n<p>I am kind of stuck in the part to determine the type of variable inside tuple struct, I am able to get the variable with the help of last_children, and then I tried approach taken in \"type inference assist\",  with the help of ctx.sema.type_of_, but I receive the variable as SyntaxNode, and am not sure how to go about determining its type, excuse me if its a noob doubt <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> , any guidance would help <span aria-label=\"raised hands\" class=\"emoji emoji-1f64c\" role=\"img\" title=\"raised hands\">:raised_hands:</span> .</p>",
        "id": 243375479,
        "sender_full_name": "Fenil Jain",
        "timestamp": 1624279076
    },
    {
        "content": "<p>You can use <a href=\"https://rust-analyzer.github.io/rust-analyzer/ide/struct.Semantics.html#method.type_of_pat\"><code>Semantics::type_of_pat</code></a> to query the type of a pattern</p>",
        "id": 243375634,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624279185
    },
    {
        "content": "<p>This should work for sub-patterns too, so you can just pass the inner identifier pattern and it should give you the type</p>",
        "id": 243375693,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624279207
    },
    {
        "content": "<p>If I try that, I get the type of enum which it is part of instead of the variable inside it, for example, for this code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">Value1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">One</span><span class=\"p\">(</span><span class=\"nb\">String</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">Value1</span>::<span class=\"n\">One</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">fmt</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I get the type as Value1 which is enum and not the x type.</p>",
        "id": 243376226,
        "sender_full_name": "Fenil Jain",
        "timestamp": 1624279526
    },
    {
        "content": "<p>Are you passing <code>Value1::One(x)</code> or just the <code>x</code> as the pattern?</p>",
        "id": 243376374,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624279598
    },
    {
        "content": "<p>I am passing whole Value1::One(x) and yeah that's why I am getting  enum as type, but if I extract x using last_children I will get it as SyntaxNode which in turn cannot be passed to type_of_pat.</p>",
        "id": 243376634,
        "sender_full_name": "Fenil Jain",
        "timestamp": 1624279736
    },
    {
        "content": "<p>You can cast <code>SyntaxNode</code>s to their typed counterpart via <code>ast::Node::cast(syntax_node)</code></p>",
        "id": 243376831,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624279851
    },
    {
        "content": "<p>you probably don't want to extract it that way anyway though</p>",
        "id": 243376893,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1624279877
    },
    {
        "content": "<p>it probably makes more sense to look for bind patterns in the pattern</p>",
        "id": 243376925,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1624279897
    },
    {
        "content": "<p>I am not entirely sure what you meant here <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> .</p>",
        "id": 243377631,
        "sender_full_name": "Fenil Jain",
        "timestamp": 1624280273
    },
    {
        "content": "<p>this bug isn't really about tuple structs, is it? it would probably also happen with <code>Value::Char { value: x }</code> and <code>Value::I8 { value: x }</code>. Or more complicated patterns like <code>(Value::Char(x), _)</code> and <code>(_, Value::I8(x))</code>. we need to make sure that all the match arms have the same bind patterns with the same types</p>",
        "id": 243378453,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1624280659
    },
    {
        "content": "<p>ideally we'd use the <code>hir</code> APIs for that, but I don't think we have a way to get all bindings introduced by some pattern there yet</p>",
        "id": 243378746,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1624280837
    },
    {
        "content": "<p>Yeah it surely isn't limited to tuple structs, as in for adding the API you mentioned, if it's possible I can try to take up the task and subsequently fix the issue. Could you give some context on how and where should I start looking for the same in codebase?</p>",
        "id": 243390248,
        "sender_full_name": "Fenil Jain",
        "timestamp": 1624285706
    },
    {
        "content": "<p>I think for now I'd just implement it using the AST, the HIR API is basically <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8713\">rust-analyzer/rust-analyzer#8713</a></p>",
        "id": 243395470,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1624287707
    }
]