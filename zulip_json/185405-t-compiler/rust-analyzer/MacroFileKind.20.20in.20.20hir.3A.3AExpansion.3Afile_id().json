[
    {
        "content": "<p>I am tracing a bug which fail to expand <code>match_ast</code> ,  I found that in current source code: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Expansion</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">file_id</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">HirFileId</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">macro_call_id</span><span class=\"p\">.</span><span class=\"n\">as_file</span><span class=\"p\">(</span><span class=\"n\">MacroFileKind</span>::<span class=\"n\">Items</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Which is hardcoded as items. But in inner <code>match_ast!</code> expansion,  It fail to expand as trying to parse from <code>TokenTree</code>. (i.e. the expansion is ok, but cannot convert it to <code>ast::Source</code>)</p>\n<p>So my question is , how to determine which <code>MacroFileKind</code> it should be here?</p>",
        "id": 181219980,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1574265151
    },
    {
        "content": "<p>I thin in the <code>resolve_macro_call</code> we should look at the parent of the maro call and save the appropriate <code>MacroKind</code> as a field of the xpansion</p>",
        "id": 181220126,
        "sender_full_name": "matklad",
        "timestamp": 1574265246
    },
    {
        "content": "<p>And do it recursively ? I mean if the parent of the macro call HirFileId is MacroFile, try to find it parent in parent HirFileId ?</p>",
        "id": 181221037,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1574265756
    },
    {
        "content": "<p>And can we determine it by only its parent, or we need to know how hierarachy ?</p>",
        "id": 181221273,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1574265913
    },
    {
        "content": "<p>Is this why I'm seeing <code>foo(&lt;|&gt;)</code>end up being a token tree and not a <code>ast::CallExpr</code>?</p>",
        "id": 181221580,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1574266098
    },
    {
        "content": "<p>Maybe <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 181224266,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1574267804
    },
    {
        "content": "<p>It seem to be related, but Iâ€™m not sure</p>",
        "id": 181224459,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1574267885
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> I think you don't need recursion, it should be possible to get the context from just the parent node</p>",
        "id": 181228369,
        "sender_full_name": "matklad",
        "timestamp": 1574270197
    },
    {
        "content": "<p>if parent is <code>MACRO_ITEMS</code>, it's items, etc</p>",
        "id": 181228403,
        "sender_full_name": "matklad",
        "timestamp": 1574270224
    },
    {
        "content": "<p>Not 100% sure, but I think so</p>",
        "id": 181228408,
        "sender_full_name": "matklad",
        "timestamp": 1574270230
    },
    {
        "content": "<p>Um..</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"cp\">$($tt</span>:<span class=\"nc\">tt</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">b</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"cp\">$($tt</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">foo</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">&lt;|&gt;</span><span class=\"n\">ar</span><span class=\"o\">!</span><span class=\"p\">());</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p><code>foo</code> is items, but <code>bar</code> is expr, right ?</p>",
        "id": 181229476,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1574270843
    },
    {
        "content": "<p>Um.. you are right, because it is expanded.</p>",
        "id": 181229535,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1574270877
    },
    {
        "content": "<p>The parent of <code>bar</code> is <code>b()</code>. not <code>foo</code></p>",
        "id": 181229625,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1574270923
    },
    {
        "content": "<p>Right, the parent of <code>bar</code> would be the block in the expansino code</p>",
        "id": 181229866,
        "sender_full_name": "matklad",
        "timestamp": 1574271066
    },
    {
        "content": "<p>there's a nasty edge case though: <code>macro_rules! foo { () =&gt; { bar!() }}</code></p>",
        "id": 181229891,
        "sender_full_name": "matklad",
        "timestamp": 1574271091
    },
    {
        "content": "<p>Here, the parent of <code>bar</code> is the root node, but it still should be possible to figure out the context (stmt, expr, item) from the <code>kind</code> of this root</p>",
        "id": 181229965,
        "sender_full_name": "matklad",
        "timestamp": 1574271125
    },
    {
        "content": "<p>Um... another nasty edge case: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![allow(dead_code)]</span><span class=\"w\"></span>\n\n<span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">b</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">foo</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">foo</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>The ancestors of 2 <code>foo!</code> is same :(</p>",
        "id": 181274101,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1574308268
    },
    {
        "content": "<p>It is <code>EXPR_STMT</code>, so we should add ExprStmt in <code>MacroKindFile</code> ?</p>",
        "id": 181274236,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1574308479
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> it's just that, at the moment, <code>MacroFIleKind</code> supports only expression or items. We should extend <code>MacroFileKind</code> to propely support all kinds of fragments (together with actually supporting them, like expanding macros in patterns, etc)</p>",
        "id": 181282563,
        "sender_full_name": "matklad",
        "timestamp": 1574322181
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203366\">@Jeremy Kolb</span> I can confirm that the inner <code>match_ast</code> can't expand by mbe now. It use a neat trick to make comma option in macro lhs arm, which i didnâ€™t handle. Will make a PR to fix it and ping you to test again</p>",
        "id": 181307738,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1574345707
    },
    {
        "content": "<p>Cool, if that fixes it I can test signature help again</p>",
        "id": 181309048,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1574346558
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> That didn't seem to fix my issue</p>",
        "id": 181569702,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1574360664
    },
    {
        "content": "<p>Yeah, you need another one PR too, Which is related to this topic</p>",
        "id": 181569772,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1574360729
    }
]