[
    {
        "content": "<div class=\"codehilite\"><pre><span></span>thread &#39;hover::tests::hover_shows_fn_signature&#39; panicked at &#39;assertion failed: `(left == right)`\n  left: `&quot;pub fn foo() -&gt; u32&quot;`,\n right: `&quot;pub fn foo() -&gt; &amp;str&quot;`&#39;, crates/ra_ide_api/src/hover.rs:162:13\n</pre></div>",
        "id": 166746030,
        "sender_full_name": "Laurențiu",
        "timestamp": 1559068610
    },
    {
        "content": "<p>huh, that seems bad!</p>",
        "id": 166788197,
        "sender_full_name": "matklad",
        "timestamp": 1559111989
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> I can't reproduce it locally. Which version of Rust are you using (I <em>think</em> nightly's hash-brown could have changed things)</p>",
        "id": 166788421,
        "sender_full_name": "matklad",
        "timestamp": 1559112289
    },
    {
        "content": "<p>a nightly</p>",
        "id": 166788538,
        "sender_full_name": "Laurențiu",
        "timestamp": 1559112462
    },
    {
        "content": "<p>rustc 1.36.0-nightly (7158ed9cb 2019-05-15)</p>",
        "id": 166788540,
        "sender_full_name": "Laurențiu",
        "timestamp": 1559112471
    },
    {
        "content": "<p>Aha, will try to look into that!</p>",
        "id": 166788868,
        "sender_full_name": "matklad",
        "timestamp": 1559112888
    },
    {
        "content": "<p>no worries, I tried to check whether they're sorted, but didn't see anything</p>",
        "id": 166788895,
        "sender_full_name": "Laurențiu",
        "timestamp": 1559112936
    },
    {
        "content": "<p>ah, yeah, this is much better than I've expected, we don't have a non-deterministic type inference, it's just the test itself that relies on the order of iteration</p>",
        "id": 166788968,
        "sender_full_name": "matklad",
        "timestamp": 1559113056
    },
    {
        "content": "<p>In the <code>let hover = analysis.hover(position).unwrap().unwrap();</code></p>",
        "id": 166789020,
        "sender_full_name": "matklad",
        "timestamp": 1559113086
    },
    {
        "content": "<p>We basically should add <code>hover.sort()</code>, adjust the tests, and make sure all <code>#[derive(Ord)]</code> are present to actually be able to sort hovers</p>",
        "id": 166789034,
        "sender_full_name": "matklad",
        "timestamp": 1559113114
    },
    {
        "content": "<p>I wonder how many projects will be broken in practice due to different order of iteration.... ? :D</p>\n<p>I've already fixed a couple of similar bugs when I was trying the nightly out</p>",
        "id": 166789066,
        "sender_full_name": "matklad",
        "timestamp": 1559113183
    },
    {
        "content": "<p>Sure, but in the long run do we want to prioritize or sort hover references before showing them?</p>",
        "id": 166789319,
        "sender_full_name": "Laurențiu",
        "timestamp": 1559113493
    },
    {
        "content": "<p>And wasn't there a random seed used by hashmaps that should change the iteration order from one run to another?</p>",
        "id": 166789425,
        "sender_full_name": "Laurențiu",
        "timestamp": 1559113601
    },
    {
        "content": "<p>Maybe? I don't know an obvious rule to sort hovers though, and I don't think that's really important, so sorting in tests seems fine</p>",
        "id": 166789511,
        "sender_full_name": "matklad",
        "timestamp": 1559113693
    },
    {
        "content": "<blockquote>\n<p>And wasn't there a random seed used by hashmaps that should change the iteration order from one run to another?</p>\n</blockquote>\n<p>Good observation! I think, because we are using <code>FxHashMap</code>, we don't do randomization</p>",
        "id": 166789529,
        "sender_full_name": "matklad",
        "timestamp": 1559113721
    },
    {
        "content": "<p>we probably should though...</p>",
        "id": 166789550,
        "sender_full_name": "matklad",
        "timestamp": 1559113748
    },
    {
        "content": "<p>at least for tests</p>",
        "id": 166789559,
        "sender_full_name": "matklad",
        "timestamp": 1559113766
    },
    {
        "content": "<p>Sorting only in the test should work for now, though</p>",
        "id": 166789580,
        "sender_full_name": "Laurențiu",
        "timestamp": 1559113801
    },
    {
        "content": "<p>agree!</p>",
        "id": 166789638,
        "sender_full_name": "matklad",
        "timestamp": 1559113821
    }
]