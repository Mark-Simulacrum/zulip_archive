[
    {
        "content": "<p>Our multi-ABI code currently decides which ABI to use purely based on the Rust version the proc macro was built with. This usually works fine for stable Rust, but nightlies often break the proc macro ABI without bumping the Rust version (which makes sense).</p>\n<p>Ideally, rustc would include some sort of \"proc macro ABI hash\" in the built DLL, but until something like that exists, I'm tempted to disable proc macro support with nightly Rust versions, unless a setting is enabled to force it on. Thoughts?</p>",
        "id": 276459451,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1648119891
    },
    {
        "content": "<p>Maybe we could hash the relevant source files of libproc_macro as found in the rust-src component for nightly?</p>",
        "id": 276459814,
        "sender_full_name": "bjorn3",
        "timestamp": 1648120099
    },
    {
        "content": "<p>I'm not sure we should be worried. I've seen some people who wanted support for old nightlies and such, but I think they wouldn't have been happy with just turning off proc macro support.</p>",
        "id": 276459890,
        "sender_full_name": "Laurențiu",
        "timestamp": 1648120143
    },
    {
        "content": "<p>I mean, most nightlies work fine anyway, and if we turn them off, we make things worse for everybody.</p>",
        "id": 276459987,
        "sender_full_name": "Laurențiu",
        "timestamp": 1648120202
    },
    {
        "content": "<p>Also <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8925#issuecomment-874312836\">https://github.com/rust-analyzer/rust-analyzer/issues/8925#issuecomment-874312836</a></p>",
        "id": 276460097,
        "sender_full_name": "Laurențiu",
        "timestamp": 1648120256
    },
    {
        "content": "<p>And if we do turn them off, we won't find out about changes.</p>",
        "id": 276460232,
        "sender_full_name": "Laurențiu",
        "timestamp": 1648120332
    },
    {
        "content": "<p>I'm not sure I get the problem -- shouldn't we at least be able to support the newest nightly?</p>",
        "id": 276461190,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1648120933
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/proc.20macro.20multi-ABI.20does.20not.20work.20reliably.20in.20nightlies/near/276459814\">said</a>:</p>\n<blockquote>\n<p>Maybe we could hash the relevant source files of libproc_macro as found in the rust-src component for nightly?</p>\n</blockquote>\n<p>We can also hash something like <code>with_api!(stringify)</code>, since the whole ABI is generated with a macro. That would at least catch the most common cases where a new API is added there.</p>",
        "id": 276461840,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1648121345
    },
    {
        "content": "<p>We don't add the new ABI immediately (sometimes it takes weeks) and some people don't want to use the latest nightly anyway.</p>",
        "id": 276461863,
        "sender_full_name": "Laurențiu",
        "timestamp": 1648121361
    },
    {
        "content": "<p>I agree we don't strictly have to support old nightlies, but then I'd at least like to provide better UX when something doesn't work</p>",
        "id": 276461932,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1648121403
    },
    {
        "content": "<p>Maybe detect the crash and disable them for the current session?</p>",
        "id": 276461986,
        "sender_full_name": "Laurențiu",
        "timestamp": 1648121442
    }
]