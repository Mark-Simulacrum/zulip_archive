[
    {
        "content": "<p>Our current path resolution implementation doesn't actually resolve associated items at all(NameRefClass avoids this with all its extra prior checks). This gives us problems with intra doc link resolution currently though as all of those fail. Is this intentional and just requires workaround for doc link resolution or is this something that path resolution should actually resolve</p>",
        "id": 247193668,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1627301475
    },
    {
        "content": "<p>Example here: <br>\n<a href=\"/user_uploads/4715/cvidxkoFOrs2VO36B4iZTVoi/image.png\">image.png</a> <br>\nAll of these links do not resolve as path resolution only resolves the <code>Struct</code> prefix giving up afterwards</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/cvidxkoFOrs2VO36B4iZTVoi/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/cvidxkoFOrs2VO36B4iZTVoi/image.png\"></a></div>",
        "id": 247193694,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1627301511
    },
    {
        "content": "<p>Which aspect of Path resolution? The one in semantics shoudl resovle everything. THe one in nameres doesn't know about asoc items</p>",
        "id": 247193847,
        "sender_full_name": "matklad",
        "timestamp": 1627301640
    },
    {
        "content": "<p>Ah wait, this is technically a problem with calling <code>resolve_module_path_in_items</code> I suppose</p>",
        "id": 247193848,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1627301640
    },
    {
        "content": "<p>Ye I was looking at the wrong parts I believe, still quite a bit in the dark when it comes to RA's path res <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 247193923,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1627301669
    },
    {
        "content": "<p>Basically, stuff which takes a specific <code>ast::Path</code> can do this, things working on <code>hir::Path</code> can't</p>",
        "id": 247193931,
        "sender_full_name": "matklad",
        "timestamp": 1627301674
    },
    {
        "content": "<p>Basically we currently create a resolver for the item whose docs we are inspecting and resolving the path via <code>resolve_module_path_in_items</code> on said item which fails in this case.</p>",
        "id": 247194005,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1627301744
    },
    {
        "content": "<p>Because it only resolves to the struct at which point it bails out as there are segments left, so I guess calling <code>resolve_module_path_in_items</code> isnt the right call here?</p>",
        "id": 247194082,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1627301784
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir/src/attrs.rs#L145-L148\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir/src/attrs.rs#L145-L148</a></p>",
        "id": 247194110,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1627301821
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Path.20resolution.20does.20not.20like.20assoc.20items/near/247193931\">said</a>:</p>\n<blockquote>\n<p>Basically, stuff which takes a specific <code>ast::Path</code> can do this, things working on <code>hir::Path</code> can't</p>\n</blockquote>\n<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 247194297,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1627301963
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 247195362,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1627302783
    },
    {
        "content": "<p>Hmm this is gonna be ugly I feel like. So everything that currently works on the hir for this pretty much has to go back to the AST I think <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span><br>\nAs in all of the <code>doc_links</code> module will work on the ast and not the hir, actually maybe not since one can go from hir to ast. Will have to check again</p>",
        "id": 247197632,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1627304122
    },
    {
        "content": "<p>Yeah, that's tricky....</p>\n<p>The thing is, our hir lacks identity semantics -- you can't look at a <code>hir::Path</code> and say where did it originated from. And you need that for assoc items, as they, in general, depend on types&amp;bodies.</p>",
        "id": 247198065,
        "sender_full_name": "matklad",
        "timestamp": 1627304336
    },
    {
        "content": "<p>that's what we have <code>SemanticsScope</code> for though, isn't it?</p>",
        "id": 247198308,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1627304438
    },
    {
        "content": "<p>Ye my main problem was how to get one from a <code>Definition</code> but that shouldn't be a problem actually</p>",
        "id": 247198430,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1627304494
    },
    {
        "content": "<p>Although, I am wondering if we are talking about the right thing here...</p>",
        "id": 247198451,
        "sender_full_name": "matklad",
        "timestamp": 1627304506
    },
    {
        "content": "<p>As I see it, doc link resolving is a rather special case, it <em>should</em> be handled by the <code>HasAttrs::resolev_doc_path</code> function</p>",
        "id": 247198558,
        "sender_full_name": "matklad",
        "timestamp": 1627304544
    },
    {
        "content": "<p>And that is inside <code>hir</code> already, ie, it doesn't have ast, Definition or Semantics</p>",
        "id": 247198642,
        "sender_full_name": "matklad",
        "timestamp": 1627304599
    },
    {
        "content": "<p>Well it already special cases resolution for assoc trait items in there</p>",
        "id": 247198817,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1627304680
    },
    {
        "content": "<p>But that approach doesn't work for impl assoc items</p>",
        "id": 247198843,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1627304695
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_def/src/resolver.rs#L147-L171\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_def/src/resolver.rs#L147-L171</a></p>",
        "id": 247198931,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1627304746
    },
    {
        "content": "<p>Yeah, looking at it. Seems that that doesn't work exactly as it should</p>",
        "id": 247198957,
        "sender_full_name": "matklad",
        "timestamp": 1627304756
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/35e072ed44c55e5c74640fe7ab3aeffe20306d2a/crates/hir_def/src/resolver.rs#L83\">https://github.com/rust-analyzer/rust-analyzer/blob/35e072ed44c55e5c74640fe7ab3aeffe20306d2a/crates/hir_def/src/resolver.rs#L83</a></p>",
        "id": 247199009,
        "sender_full_name": "matklad",
        "timestamp": 1627304765
    },
    {
        "content": "<p>This think should be used, but I am not seeing it there. This <code>Partial</code> variant says:</p>\n<p>\"hey, I've resolevd up to <code>idx</code> segments out of the original path, and the result is this <code>Ty</code>. Resolve the rest using associcated items machinery\"</p>",
        "id": 247199109,
        "sender_full_name": "matklad",
        "timestamp": 1627304823
    },
    {
        "content": "<p>Isn't that only for values though?</p>",
        "id": 247199480,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1627305005
    },
    {
        "content": "<p>I think it is, but seems like a similar thing should be done for types?</p>",
        "id": 247199558,
        "sender_full_name": "matklad",
        "timestamp": 1627305062
    },
    {
        "content": "<p>Alright, I'll look into that then.</p>",
        "id": 247199588,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1627305081
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">resolve_path_in_type_ns</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">db</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">DefDatabase</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">path</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">ModPath</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">TypeNs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I guess someone was inconsistently lazy with respect to extracting named types</p>",
        "id": 247199673,
        "sender_full_name": "matklad",
        "timestamp": 1627305123
    },
    {
        "content": "<p>well, I guess it was necessary to create an enum for one, and not strictly necessary for the other ;)</p>",
        "id": 247200363,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1627305482
    },
    {
        "content": "<p>actually resolving the associated items might require extracting some of the code for that from type inference</p>",
        "id": 247200445,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1627305518
    },
    {
        "content": "<p>which would be good anyway</p>",
        "id": 247200449,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1627305522
    },
    {
        "content": "<p>Right inference already has to do that as well doesnt it</p>",
        "id": 247200922,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1627305738
    },
    {
        "content": "<p>mostly I think the relevant code is in <code>infer/path.rs</code></p>",
        "id": 247202258,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1627306261
    },
    {
        "content": "<p>and it mostly doesn't interact much with the rest of inference, I think, so it maybe actually won't be that hard to extract... I think <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 247202526,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1627306379
    },
    {
        "content": "<p>Well, we'll see <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 247202559,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1627306394
    },
    {
        "content": "<p>except for writing results in the end</p>",
        "id": 247202576,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1627306405
    },
    {
        "content": "<p>Seems like it calls quite a bit into the <code>InferenceTable</code> which makes this pretty difficult to extract</p>",
        "id": 247235986,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1627321233
    },
    {
        "content": "<p>does it? I only see three direct uses of the inference table, one is just getting the trait env, and the other two are at the end (the part that should not be extracted)</p>",
        "id": 247240837,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1627323300
    },
    {
        "content": "<p>so for example for <code>resolve_ty_assoc_item</code>, I'd probably expect the extracted version to return the <code>AssocItemId</code></p>",
        "id": 247241015,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1627323370
    },
    {
        "content": "<blockquote>\n<p>well, I guess it was necessary to create an enum for one, and not strictly necessary for the other </p>\n</blockquote>\n<p>Hm, it seems to me that we do want to extract <code>(TypeNs, usize)</code> pair into a struct  in both cases, as that has a clear meaning of \"partially resovled assoc type\"</p>",
        "id": 247245088,
        "sender_full_name": "matklad",
        "timestamp": 1627325296
    }
]