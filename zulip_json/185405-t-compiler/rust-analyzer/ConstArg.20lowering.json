[
    {
        "content": "<p>Regarding <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/7432\">https://github.com/rust-analyzer/rust-analyzer/issues/7432</a> which just popped up, I wonder how would we go about lowering these const expressions in type param position? I remember having that question in my head when I added them to the HIR. Technically those expressions are bodies right? Which means we would have to lower them lazily but that seems to go against the fact that types are lowered eagerly right?</p>",
        "id": 223965112,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1611611168
    },
    {
        "content": "<p>good question. I do think we could lower them lazily; the type would only contain the ID of the expression (body) anyway</p>",
        "id": 223966109,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1611611687
    },
    {
        "content": "<p>we do need a place to put them, give them IDs and find them again though, which isn't so easy since they can appear everywhere</p>",
        "id": 223966334,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1611611786
    },
    {
        "content": "<p>those bodies could even contain local functions and modules <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 223968858,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1611612503
    },
    {
        "content": "<p>Oh no, that sounds just lovely <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 223969388,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1611612662
    },
    {
        "content": "<p>So this might be relevant to the DefMap stuff as well then? Since <span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> is working on that part to support local items it might be good to keep that in mind</p>",
        "id": 223969578,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1611612722
    },
    {
        "content": "<p>hmm, yeah, tricky</p>",
        "id": 223971741,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611613599
    },
    {
        "content": "<p>Currently we can compute a <code>Body</code> for any <code>DefWithBodyId</code>, which is just functions, statics and consts</p>",
        "id": 223971830,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611613652
    },
    {
        "content": "<p>We'd have to extend that to be nestable inside types</p>",
        "id": 223971861,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611613668
    },
    {
        "content": "<p>Possibly by an <code>AstId</code>-like scheme but for these expression roots?</p>",
        "id": 223971976,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611613722
    },
    {
        "content": "<p>urgh, if only salsa had an <code>db.allocate_id()</code> method...</p>",
        "id": 224006089,
        "sender_full_name": "matklad",
        "timestamp": 1611647570
    }
]