[
    {
        "content": "<p>Quick question regarding how I should model the unit tests. I was thinking of something like the following. <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[cfg(test)]</span><span class=\"w\"></span>\n<span class=\"k\">mod</span> <span class=\"nn\">tests</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">expect_test</span>::<span class=\"p\">{</span><span class=\"n\">expect</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Expect</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">text_edit</span>::<span class=\"n\">TextEdit</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"n\">AstNode</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">test_diff</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">check_diff</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">r</span><span class=\"s\">\"</span>\n<span class=\"s\">use expect_test::{expect, Expect};</span>\n\n<span class=\"s\">use crate::AstNode;</span>\n<span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">\"</span>\n<span class=\"s\">use expect_test::{expect, Expect};</span>\n<span class=\"s\">use text_edit::TextEdit;</span>\n\n<span class=\"s\">use crate::AstNode;</span>\n<span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">expect</span><span class=\"o\">!</span><span class=\"p\">[[</span><span class=\"n\">r</span><span class=\"err\">#</span><span class=\"s\">\"</span>\n<span class=\"s\">                TreeDiff {</span>\n<span class=\"s\">                    replacements: {</span>\n<span class=\"s\">                        Token(</span>\n<span class=\"s\">                            WHITESPACE@35..37 \"</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"s\">\",</span>\n<span class=\"s\">                        ): Token(</span>\n<span class=\"s\">                            WHITESPACE@35..36 \"</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"s\">\",</span>\n<span class=\"s\">                        ),</span>\n<span class=\"s\">                        Token(</span>\n<span class=\"s\">                            CRATE_KW@41..46 \"</span><span class=\"k\">crate</span><span class=\"s\">\",</span>\n<span class=\"s\">                        ): Node(</span>\n<span class=\"s\">                            NAME_REF@40..49</span>\n<span class=\"s\">                              IDENT@40..49 \"</span><span class=\"n\">text_edit</span><span class=\"s\">\"</span>\n<span class=\"s\">                            ,</span>\n<span class=\"s\">                        ),</span>\n<span class=\"s\">                        Token(</span>\n<span class=\"s\">                            IDENT@48..55 \"</span><span class=\"n\">AstNode</span><span class=\"s\">\",</span>\n<span class=\"s\">                        ): Token(</span>\n<span class=\"s\">                            IDENT@51..59 \"</span><span class=\"n\">TextEdit</span><span class=\"s\">\",</span>\n<span class=\"s\">                        ),</span>\n<span class=\"s\">                        Token(</span>\n<span class=\"s\">                            WHITESPACE@56..57 \"</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"s\">\",</span>\n<span class=\"s\">                        ): Token(</span>\n<span class=\"s\">                            WHITESPACE@60..62 \"</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"s\">\",</span>\n<span class=\"s\">                        ),</span>\n<span class=\"s\">                    },</span>\n<span class=\"s\">                    deletions: [],</span>\n<span class=\"s\">                    insertions: {</span>\n<span class=\"s\">                        Token(</span>\n<span class=\"s\">                            WHITESPACE@56..57 \"</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"s\">\",</span>\n<span class=\"s\">                        ): [</span>\n<span class=\"s\">                            Node(</span>\n<span class=\"s\">                                USE@62..81</span>\n<span class=\"s\">                                  USE_KW@62..65 \"</span><span class=\"k\">use</span><span class=\"s\">\"</span>\n<span class=\"s\">                                  WHITESPACE@65..66 \"</span><span class=\"w\"> </span><span class=\"s\">\"</span>\n<span class=\"s\">                                  USE_TREE@66..80</span>\n<span class=\"s\">                                    PATH@66..80</span>\n<span class=\"s\">                                      PATH@66..71</span>\n<span class=\"s\">                                        PATH_SEGMENT@66..71</span>\n<span class=\"s\">                                          CRATE_KW@66..71 \"</span><span class=\"k\">crate</span><span class=\"s\">\"</span>\n<span class=\"s\">                                      COLON2@71..73 \"</span>::<span class=\"s\">\"</span>\n<span class=\"s\">                                      PATH_SEGMENT@73..80</span>\n<span class=\"s\">                                        NAME_REF@73..80</span>\n<span class=\"s\">                                          IDENT@73..80 \"</span><span class=\"n\">AstNode</span><span class=\"s\">\"</span>\n<span class=\"s\">                                  SEMICOLON@80..81 \"</span><span class=\"p\">;</span><span class=\"s\">\"</span>\n<span class=\"s\">                                ,</span>\n<span class=\"s\">                            ),</span>\n<span class=\"s\">                            Token(</span>\n<span class=\"s\">                                WHITESPACE@81..82 \"</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"s\">\",</span>\n<span class=\"s\">                            ),</span>\n<span class=\"s\">                        ],</span>\n<span class=\"s\">                    },</span>\n<span class=\"s\">                }\"</span><span class=\"err\">#</span><span class=\"p\">]],</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">check_diff</span><span class=\"p\">(</span><span class=\"n\">from</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">to</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">expected_diff</span>: <span class=\"nc\">Expect</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">from_node</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"n\">SourceFile</span>::<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">from</span><span class=\"p\">).</span><span class=\"n\">tree</span><span class=\"p\">().</span><span class=\"n\">syntax</span><span class=\"p\">().</span><span class=\"n\">clone</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">to_node</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"n\">SourceFile</span>::<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">).</span><span class=\"n\">tree</span><span class=\"p\">().</span><span class=\"n\">syntax</span><span class=\"p\">().</span><span class=\"n\">clone</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">super</span>::<span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">from_node</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">to_node</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">expected_diff</span><span class=\"p\">.</span><span class=\"n\">assert_eq</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{:#?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"p\">));</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"p\">.</span><span class=\"n\">to_owned</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">text_edit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">TextEdit</span>::<span class=\"n\">builder</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">diff</span><span class=\"p\">.</span><span class=\"n\">into_text_edit</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">text_edit</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">text_edit</span><span class=\"p\">.</span><span class=\"n\">finish</span><span class=\"p\">().</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">&amp;*</span><span class=\"n\">from</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"diff did not turn `from` to `to`\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 214161097,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1603357930
    },
    {
        "content": "<p>Though i guess this gets rather unwieldy quite fast? not sure</p>",
        "id": 214161271,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1603358064
    },
    {
        "content": "<p>I'd use something more visual</p>",
        "id": 214162879,
        "sender_full_name": "matklad",
        "timestamp": 1603359099
    },
    {
        "content": "<p>Specifically, when rendering insertions and deletions, I'd use Display of nodes, rather than verbose debug</p>",
        "id": 214162961,
        "sender_full_name": "matklad",
        "timestamp": 1603359131
    },
    {
        "content": "<p>I imgine something like this would work</p>\n<div class=\"codehilite\"><pre><span></span><code>replacements:\n\nSTRUCT_DEF@10..20 -&gt;\n&quot;enum Foo { }&quot;\n\n...\n</code></pre></div>",
        "id": 214163078,
        "sender_full_name": "matklad",
        "timestamp": 1603359208
    },
    {
        "content": "<p>Ie, we use <code>{:?}</code> for anchor and <code>{}</code> for replacement</p>",
        "id": 214163101,
        "sender_full_name": "matklad",
        "timestamp": 1603359226
    },
    {
        "content": "<p>So something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[cfg(test)]</span><span class=\"w\"></span>\n<span class=\"k\">mod</span> <span class=\"nn\">tests</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">expect_test</span>::<span class=\"p\">{</span><span class=\"n\">expect</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Expect</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">itertools</span>::<span class=\"n\">Itertools</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">text_edit</span>::<span class=\"n\">TextEdit</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"n\">AstNode</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">insert_use</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">check_diff</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">r</span><span class=\"s\">\"</span>\n<span class=\"s\">use expect_test::{expect, Expect};</span>\n\n<span class=\"s\">use crate::AstNode;</span>\n<span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">\"</span>\n<span class=\"s\">use expect_test::{expect, Expect};</span>\n<span class=\"s\">use text_edit::TextEdit;</span>\n\n<span class=\"s\">use crate::AstNode;</span>\n<span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">expect</span><span class=\"o\">!</span><span class=\"p\">[[</span><span class=\"n\">r</span><span class=\"err\">#</span><span class=\"s\">\"</span>\n<span class=\"s\">                insetions:</span>\n\n<span class=\"s\">                Token(WHITESPACE@56..57 \"</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"s\">\") -&gt;</span>\n<span class=\"s\">                \"</span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"n\">AstNode</span><span class=\"p\">;</span><span class=\"s\">\"</span>\n<span class=\"s\">                \"</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"s\">\"</span>\n\n<span class=\"s\">                replacements:</span>\n\n<span class=\"s\">                Token(WHITESPACE@35..37 \"</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"s\">\") -&gt;</span>\n<span class=\"s\">                \"</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"s\">\"</span>\n<span class=\"s\">                Token(CRATE_KW@41..46 \"</span><span class=\"k\">crate</span><span class=\"s\">\") -&gt;</span>\n<span class=\"s\">                \"</span><span class=\"n\">text_edit</span><span class=\"s\">\"</span>\n<span class=\"s\">                Token(IDENT@48..55 \"</span><span class=\"n\">AstNode</span><span class=\"s\">\") -&gt;</span>\n<span class=\"s\">                \"</span><span class=\"n\">TextEdit</span><span class=\"s\">\"</span>\n<span class=\"s\">                Token(WHITESPACE@56..57 \"</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"s\">\") -&gt;</span>\n<span class=\"s\">                \"</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"s\">\"</span>\n\n<span class=\"s\">                deletions:</span>\n\n\n<span class=\"s\">            \"</span><span class=\"err\">#</span><span class=\"p\">]],</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">remove_use</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">check_diff</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">r</span><span class=\"s\">\"</span>\n<span class=\"s\">use expect_test::{expect, Expect};</span>\n<span class=\"s\">use text_edit::TextEdit;</span>\n\n<span class=\"s\">use crate::AstNode;</span>\n<span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">\"</span>\n<span class=\"s\">use expect_test::{expect, Expect};</span>\n\n<span class=\"s\">use crate::AstNode;</span>\n<span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">expect</span><span class=\"o\">!</span><span class=\"p\">[[</span><span class=\"n\">r</span><span class=\"err\">#</span><span class=\"s\">\"</span>\n<span class=\"s\">                insetions:</span>\n\n\n\n<span class=\"s\">                replacements:</span>\n\n<span class=\"s\">                Node(NAME_REF@40..49) -&gt;</span>\n<span class=\"s\">                \"</span><span class=\"k\">crate</span><span class=\"s\">\"</span>\n<span class=\"s\">                Token(IDENT@51..59 \"</span><span class=\"n\">TextEdit</span><span class=\"s\">\") -&gt;</span>\n<span class=\"s\">                \"</span><span class=\"n\">AstNode</span><span class=\"s\">\"</span>\n<span class=\"s\">                Token(WHITESPACE@60..62 \"</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"s\">\") -&gt;</span>\n<span class=\"s\">                \"</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"s\">\"</span>\n<span class=\"s\">                Token(WHITESPACE@35..36 \"</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"s\">\") -&gt;</span>\n<span class=\"s\">                \"</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"s\">\"</span>\n\n<span class=\"s\">                deletions:</span>\n\n<span class=\"s\">                \"</span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"n\">AstNode</span><span class=\"p\">;</span><span class=\"s\">\"</span>\n<span class=\"s\">                \"</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"s\">\"</span>\n<span class=\"s\">            \"</span><span class=\"err\">#</span><span class=\"p\">]],</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">merge_use</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">check_diff</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">r</span><span class=\"s\">\"</span>\n<span class=\"s\">use std::{</span>\n<span class=\"s\">    fmt,</span>\n<span class=\"s\">    hash::BuildHasherDefault,</span>\n<span class=\"s\">    ops::{self, RangeInclusive},</span>\n<span class=\"s\">};</span>\n<span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">\"</span>\n<span class=\"s\">use std::fmt;</span>\n<span class=\"s\">use std::hash::BuildHasherDefault;</span>\n<span class=\"s\">use std::ops::{self, RangeInclusive};</span>\n<span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">expect</span><span class=\"o\">!</span><span class=\"p\">[[</span><span class=\"n\">r</span><span class=\"err\">#</span><span class=\"s\">\"</span>\n<span class=\"s\">                insetions:</span>\n\n<span class=\"s\">                Node(PATH_SEGMENT@5..8) -&gt;</span>\n<span class=\"s\">                \"</span>::<span class=\"s\">\"</span>\n<span class=\"s\">                \"</span><span class=\"n\">fmt</span><span class=\"s\">\"</span>\n<span class=\"s\">                Token(WHITESPACE@86..99 \"</span><span class=\"w\">            </span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"s\">\") -&gt;</span>\n<span class=\"s\">                \"</span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">hash</span>::<span class=\"n\">BuildHasherDefault</span><span class=\"p\">;</span><span class=\"s\">\"</span>\n<span class=\"s\">                \"</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"s\">\"</span>\n<span class=\"s\">                \"</span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ops</span>::<span class=\"p\">{</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">RangeInclusive</span><span class=\"p\">};</span><span class=\"s\">\"</span>\n<span class=\"s\">                \"</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"s\">\"</span>\n\n<span class=\"s\">                replacements:</span>\n\n<span class=\"s\">                Token(WHITESPACE@86..99 \"</span><span class=\"w\">            </span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"s\">\") -&gt;</span>\n<span class=\"s\">                \"</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"s\">\"</span>\n<span class=\"s\">                Token(IDENT@5..8 \"</span><span class=\"n\">std</span><span class=\"s\">\") -&gt;</span>\n<span class=\"s\">                \"</span><span class=\"n\">std</span><span class=\"s\">\"</span>\n\n<span class=\"s\">                deletions:</span>\n\n<span class=\"s\">                \"</span>::<span class=\"s\">\"</span>\n<span class=\"s\">                \"</span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">fmt</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">hash</span>::<span class=\"n\">BuildHasherDefault</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">ops</span>::<span class=\"p\">{</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">RangeInclusive</span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"s\">\"</span>\n<span class=\"s\">            \"</span><span class=\"err\">#</span><span class=\"p\">]],</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">dd</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">check_diff</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">r</span><span class=\"err\">#</span><span class=\"s\">\"</span>\n<span class=\"s\">fn main() {</span>\n<span class=\"s\">    if&lt;|&gt; let Ok(x) = Err(92) {</span>\n<span class=\"s\">        foo(x);</span>\n<span class=\"s\">    }</span>\n<span class=\"s\">}</span>\n<span class=\"s\">            \"</span><span class=\"err\">#</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">r</span><span class=\"err\">#</span><span class=\"s\">\"</span>\n<span class=\"s\">fn main() {</span>\n<span class=\"s\">    let x = match Err(92) {</span>\n<span class=\"s\">        Ok(it) =&gt; it,</span>\n<span class=\"s\">        _ =&gt; return,</span>\n<span class=\"s\">    };</span>\n<span class=\"s\">    foo(x);</span>\n<span class=\"s\">}</span>\n<span class=\"s\">            \"</span><span class=\"err\">#</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">expect</span><span class=\"o\">!</span><span class=\"p\">[[</span><span class=\"n\">r</span><span class=\"err\">#</span><span class=\"s\">\"</span>\n<span class=\"s\">                insetions:</span>\n\n<span class=\"s\">                Node(IF_EXPR@17..22) -&gt;</span>\n<span class=\"s\">                \"</span><span class=\"w\"> </span><span class=\"s\">\"</span>\n<span class=\"s\">                \"</span><span class=\"n\">x</span><span class=\"s\">\"</span>\n<span class=\"s\">                \"</span><span class=\"w\"> </span><span class=\"s\">\"</span>\n<span class=\"s\">                \"</span><span class=\"o\">=</span><span class=\"s\">\"</span>\n<span class=\"s\">                \"</span><span class=\"w\"> </span><span class=\"s\">\"</span>\n<span class=\"s\">                \"</span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"mi\">92</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"s\">\"</span>\n<span class=\"s\">                \"</span><span class=\"p\">;</span><span class=\"s\">\"</span>\n\n<span class=\"s\">                replacements:</span>\n\n<span class=\"s\">                Token(WHITESPACE@42..43 \"</span><span class=\"w\"> </span><span class=\"s\">\") -&gt;</span>\n<span class=\"s\">                \"</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"s\">\"</span>\n<span class=\"s\">                Node(BLOCK_EXPR@43..66) -&gt;</span>\n<span class=\"s\">                \"</span><span class=\"p\">}</span><span class=\"s\">\"</span>\n<span class=\"s\">                Token(LET_KW@23..26 \"</span><span class=\"kd\">let</span><span class=\"s\">\") -&gt;</span>\n<span class=\"s\">                \"</span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"s\">\"</span>\n<span class=\"s\">                Token(WHITESPACE@26..27 \"</span><span class=\"w\"> </span><span class=\"s\">\") -&gt;</span>\n<span class=\"s\">                \"</span><span class=\"p\">;</span><span class=\"s\">\"</span>\n<span class=\"s\">                Node(IF_EXPR@17..22) -&gt;</span>\n<span class=\"s\">                \"</span><span class=\"kd\">let</span><span class=\"s\">\"</span>\n<span class=\"s\">                Token(WHITESPACE@22..23 \"</span><span class=\"w\"> </span><span class=\"s\">\") -&gt;</span>\n<span class=\"s\">                \"</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"s\">\"</span>\n\n<span class=\"s\">                deletions:</span>\n\n<span class=\"s\">                \"</span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"s\">\"</span>\n<span class=\"s\">                \"</span><span class=\"w\"> </span><span class=\"s\">\"</span>\n<span class=\"s\">                \"</span><span class=\"o\">=</span><span class=\"s\">\"</span>\n<span class=\"s\">                \"</span><span class=\"w\"> </span><span class=\"s\">\"</span>\n<span class=\"s\">                \"</span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"mi\">92</span><span class=\"p\">)</span><span class=\"s\">\"</span>\n<span class=\"s\">                \"</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"s\">\"</span>\n<span class=\"s\">                \"</span><span class=\"p\">}</span><span class=\"s\">\"</span>\n<span class=\"s\">            \"</span><span class=\"err\">#</span><span class=\"p\">]],</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">check_diff</span><span class=\"p\">(</span><span class=\"n\">from</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">to</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">expected_diff</span>: <span class=\"nc\">Expect</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">from_node</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"n\">SourceFile</span>::<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">from</span><span class=\"p\">).</span><span class=\"n\">tree</span><span class=\"p\">().</span><span class=\"n\">syntax</span><span class=\"p\">().</span><span class=\"n\">clone</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">to_node</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"n\">SourceFile</span>::<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">).</span><span class=\"n\">tree</span><span class=\"p\">().</span><span class=\"n\">syntax</span><span class=\"p\">().</span><span class=\"n\">clone</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">super</span>::<span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">from_node</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">to_node</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">insertions</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"p\">.</span><span class=\"n\">insertions</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">format_with</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"s\">\"{:?} -&gt;</span><span class=\"se\">\\n</span><span class=\"s\">{}\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">format_with</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\\"</span><span class=\"s\">{}</span><span class=\"se\">\\\"</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">});</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">replacements</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">replacements</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">format_with</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{:?} -&gt;</span><span class=\"se\">\\n\\\"</span><span class=\"s\">{}</span><span class=\"se\">\\\"</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">)));</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">deletions</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"p\">.</span><span class=\"n\">deletions</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">format_with</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\\"</span><span class=\"s\">{}</span><span class=\"se\">\\\"</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">)));</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">actual</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">\"insetions:</span><span class=\"se\">\\n\\n</span><span class=\"s\">{}</span><span class=\"se\">\\n\\n</span><span class=\"s\">replacements:</span><span class=\"se\">\\n\\n</span><span class=\"s\">{}</span><span class=\"se\">\\n\\n</span><span class=\"s\">deletions:</span><span class=\"se\">\\n\\n</span><span class=\"s\">{}</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">insertions</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">replacements</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">deletions</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">expected_diff</span><span class=\"p\">.</span><span class=\"n\">assert_eq</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">actual</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"p\">.</span><span class=\"n\">to_owned</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">text_edit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">TextEdit</span>::<span class=\"n\">builder</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">diff</span><span class=\"p\">.</span><span class=\"n\">into_text_edit</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">text_edit</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">text_edit</span><span class=\"p\">.</span><span class=\"n\">finish</span><span class=\"p\">().</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">&amp;*</span><span class=\"n\">from</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"diff did not turn `from` to `to`\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 214166455,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1603361433
    },
    {
        "content": "<p>Yeah, that's more readable already</p>",
        "id": 214168016,
        "sender_full_name": "matklad",
        "timestamp": 1603362468
    },
    {
        "content": "<p>We probably can get rid of some internal quotes though</p>",
        "id": 214168031,
        "sender_full_name": "matklad",
        "timestamp": 1603362482
    },
    {
        "content": "<p>(not sure why I put them in my example)</p>",
        "id": 214168071,
        "sender_full_name": "matklad",
        "timestamp": 1603362491
    },
    {
        "content": "<p>Generally, optimize the thing to be as human-readable as possible, and expect would make sure that writing it out is not the pain</p>",
        "id": 214168123,
        "sender_full_name": "matklad",
        "timestamp": 1603362532
    },
    {
        "content": "<p>Well, it would help to print the line number where the op is happening as well. I didn't expect most of the anchors to be whitespace :D</p>",
        "id": 214168177,
        "sender_full_name": "matklad",
        "timestamp": 1603362568
    },
    {
        "content": "<p>Ye a lot of whitespace is being replaced and inserted <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 214168283,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1603362615
    },
    {
        "content": "<p>For whitespace, I think we can special case this and use <code>{:?}</code> of the text of the node</p>",
        "id": 214168357,
        "sender_full_name": "matklad",
        "timestamp": 1603362667
    },
    {
        "content": "<p>so that you get <code>\"\\n\"</code> rather than <code>\"\n\"</code></p>",
        "id": 214168368,
        "sender_full_name": "matklad",
        "timestamp": 1603362677
    },
    {
        "content": "<p>Ye that seems like a good idea</p>",
        "id": 214168381,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1603362690
    },
    {
        "content": "<p>regarding line numbers, how would i get those?</p>",
        "id": 214168393,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1603362701
    },
    {
        "content": "<p>I am afraind just manually: <code>text[..range.start()].lines().count()</code></p>",
        "id": 214168473,
        "sender_full_name": "matklad",
        "timestamp": 1603362750
    },
    {
        "content": "<p>add -/+1 to taste</p>",
        "id": 214168499,
        "sender_full_name": "matklad",
        "timestamp": 1603362775
    },
    {
        "content": "<p>Alright, looks good to me I'd say. Question is what makes good tests for this this <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">insert_use</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">check_diff</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">r</span><span class=\"s\">\"</span>\n<span class=\"s\">use expect_test::{expect, Expect};</span>\n\n<span class=\"s\">use crate::AstNode;</span>\n<span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">\"</span>\n<span class=\"s\">use expect_test::{expect, Expect};</span>\n<span class=\"s\">use text_edit::TextEdit;</span>\n\n<span class=\"s\">use crate::AstNode;</span>\n<span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">expect</span><span class=\"o\">!</span><span class=\"p\">[[</span><span class=\"n\">r</span><span class=\"err\">#</span><span class=\"s\">\"</span>\n<span class=\"s\">                insertions:</span>\n\n<span class=\"s\">                Line 4: Token(WHITESPACE@56..57 \"</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"s\">\")</span>\n<span class=\"s\">                -&gt; use crate::AstNode;</span>\n<span class=\"s\">                -&gt; \"</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"s\">\"</span>\n\n<span class=\"s\">                replacements:</span>\n\n<span class=\"s\">                Line 4: Token(IDENT@48..55 \"</span><span class=\"n\">AstNode</span><span class=\"s\">\") -&gt; TextEdit</span>\n<span class=\"s\">                Line 4: Token(WHITESPACE@56..57 \"</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"s\">\") -&gt; \"</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"s\">\"</span>\n<span class=\"s\">                Line 2: Token(WHITESPACE@35..37 \"</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"s\">\") -&gt; \"</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"s\">\"</span>\n<span class=\"s\">                Line 4: Token(CRATE_KW@41..46 \"</span><span class=\"k\">crate</span><span class=\"s\">\") -&gt; text_edit</span>\n\n<span class=\"s\">                deletions:</span>\n\n\n<span class=\"s\">            \"</span><span class=\"err\">#</span><span class=\"p\">]],</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">remove_use</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">check_diff</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">r</span><span class=\"s\">\"</span>\n<span class=\"s\">use expect_test::{expect, Expect};</span>\n<span class=\"s\">use text_edit::TextEdit;</span>\n\n<span class=\"s\">use crate::AstNode;</span>\n<span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">\"</span>\n<span class=\"s\">use expect_test::{expect, Expect};</span>\n\n<span class=\"s\">use crate::AstNode;</span>\n<span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">expect</span><span class=\"o\">!</span><span class=\"p\">[[</span><span class=\"n\">r</span><span class=\"err\">#</span><span class=\"s\">\"</span>\n<span class=\"s\">                insertions:</span>\n\n\n\n<span class=\"s\">                replacements:</span>\n\n<span class=\"s\">                Line 3: Token(IDENT@51..59 \"</span><span class=\"n\">TextEdit</span><span class=\"s\">\") -&gt; AstNode</span>\n<span class=\"s\">                Line 3: Node(NAME_REF@40..49) -&gt; crate</span>\n<span class=\"s\">                Line 2: Token(WHITESPACE@35..36 \"</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"s\">\") -&gt; \"</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"s\">\"</span>\n<span class=\"s\">                Line 3: Token(WHITESPACE@60..62 \"</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"s\">\") -&gt; \"</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"s\">\"</span>\n\n<span class=\"s\">                deletions:</span>\n\n<span class=\"s\">                Line 4: use crate::AstNode;</span>\n<span class=\"s\">                Line 5: \"</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"s\">\"</span>\n<span class=\"s\">            \"</span><span class=\"err\">#</span><span class=\"p\">]],</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">merge_use</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">check_diff</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">r</span><span class=\"s\">\"</span>\n<span class=\"s\">use std::{</span>\n<span class=\"s\">    fmt,</span>\n<span class=\"s\">    hash::BuildHasherDefault,</span>\n<span class=\"s\">    ops::{self, RangeInclusive},</span>\n<span class=\"s\">};</span>\n<span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">\"</span>\n<span class=\"s\">use std::fmt;</span>\n<span class=\"s\">use std::hash::BuildHasherDefault;</span>\n<span class=\"s\">use std::ops::{self, RangeInclusive};</span>\n<span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">expect</span><span class=\"o\">!</span><span class=\"p\">[[</span><span class=\"n\">r</span><span class=\"err\">#</span><span class=\"s\">\"</span>\n<span class=\"s\">                insertions:</span>\n\n<span class=\"s\">                Line 2: Node(PATH_SEGMENT@5..8)</span>\n<span class=\"s\">                -&gt; ::</span>\n<span class=\"s\">                -&gt; fmt</span>\n<span class=\"s\">                Line 6: Token(WHITESPACE@86..87 \"</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"s\">\")</span>\n<span class=\"s\">                -&gt; use std::hash::BuildHasherDefault;</span>\n<span class=\"s\">                -&gt; \"</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"s\">\"</span>\n<span class=\"s\">                -&gt; use std::ops::{self, RangeInclusive};</span>\n<span class=\"s\">                -&gt; \"</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"s\">\"</span>\n\n<span class=\"s\">                replacements:</span>\n\n<span class=\"s\">                Line 2: Token(IDENT@5..8 \"</span><span class=\"n\">std</span><span class=\"s\">\") -&gt; std</span>\n\n<span class=\"s\">                deletions:</span>\n\n<span class=\"s\">                Line 2: ::</span>\n<span class=\"s\">                Line 2: {</span>\n<span class=\"s\">                    fmt,</span>\n<span class=\"s\">                    hash::BuildHasherDefault,</span>\n<span class=\"s\">                    ops::{self, RangeInclusive},</span>\n<span class=\"s\">                }</span>\n<span class=\"s\">            \"</span><span class=\"err\">#</span><span class=\"p\">]],</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">early_return_assist</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">check_diff</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">r</span><span class=\"err\">#</span><span class=\"s\">\"</span>\n<span class=\"s\">fn main() {</span>\n<span class=\"s\">    if let Ok(x) = Err(92) {</span>\n<span class=\"s\">        foo(x);</span>\n<span class=\"s\">    }</span>\n<span class=\"s\">}</span>\n<span class=\"s\">            \"</span><span class=\"err\">#</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">r</span><span class=\"err\">#</span><span class=\"s\">\"</span>\n<span class=\"s\">fn main() {</span>\n<span class=\"s\">    let x = match Err(92) {</span>\n<span class=\"s\">        Ok(it) =&gt; it,</span>\n<span class=\"s\">        _ =&gt; return,</span>\n<span class=\"s\">    };</span>\n<span class=\"s\">    foo(x);</span>\n<span class=\"s\">}</span>\n<span class=\"s\">            \"</span><span class=\"err\">#</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">expect</span><span class=\"o\">!</span><span class=\"p\">[[</span><span class=\"n\">r</span><span class=\"err\">#</span><span class=\"s\">\"</span>\n<span class=\"s\">                insertions:</span>\n\n<span class=\"s\">                Line 3: Node(BLOCK_EXPR@40..63)</span>\n<span class=\"s\">                -&gt; \"</span><span class=\"w\"> </span><span class=\"s\">\"</span>\n<span class=\"s\">                -&gt; match Err(92) {</span>\n<span class=\"s\">                        Ok(it) =&gt; it,</span>\n<span class=\"s\">                        _ =&gt; return,</span>\n<span class=\"s\">                    }</span>\n<span class=\"s\">                -&gt; ;</span>\n<span class=\"s\">                Line 5: Token(R_CURLY@64..65 \"</span><span class=\"p\">}</span><span class=\"s\">\")</span>\n<span class=\"s\">                -&gt; \"</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"s\">\"</span>\n<span class=\"s\">                -&gt; }</span>\n\n<span class=\"s\">                replacements:</span>\n\n<span class=\"s\">                Line 5: Token(R_CURLY@64..65 \"</span><span class=\"p\">}</span><span class=\"s\">\") -&gt; foo(x);</span>\n<span class=\"s\">                Line 3: Token(LET_KW@20..23 \"</span><span class=\"kd\">let</span><span class=\"s\">\") -&gt; x</span>\n<span class=\"s\">                Line 3: Token(IF_KW@17..19 \"</span><span class=\"k\">if</span><span class=\"s\">\") -&gt; let</span>\n<span class=\"s\">                Line 3: Node(BLOCK_EXPR@40..63) -&gt; =</span>\n<span class=\"s\">                Line 5: Token(WHITESPACE@63..64 \"</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"s\">\") -&gt; \"</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"w\">    </span><span class=\"s\">\"</span>\n\n<span class=\"s\">                deletions:</span>\n\n<span class=\"s\">                Line 3: \"</span><span class=\"w\"> </span><span class=\"s\">\"</span>\n<span class=\"s\">                Line 3: Ok(x)</span>\n<span class=\"s\">                Line 3: \"</span><span class=\"w\"> </span><span class=\"s\">\"</span>\n<span class=\"s\">                Line 3: =</span>\n<span class=\"s\">                Line 3: \"</span><span class=\"w\"> </span><span class=\"s\">\"</span>\n<span class=\"s\">                Line 3: Err(92)</span>\n<span class=\"s\">            \"</span><span class=\"err\">#</span><span class=\"p\">]],</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 214172113,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1603365189
    },
    {
        "content": "<blockquote>\n<p>Question is what makes good tests for this this </p>\n</blockquote>\n<p>Placing <code>mark::hit!</code> into every interesting if and writing minimal suite that hits them all/</p>",
        "id": 214172233,
        "sender_full_name": "matklad",
        "timestamp": 1603365262
    },
    {
        "content": "<p>looks nice!</p>",
        "id": 214172319,
        "sender_full_name": "matklad",
        "timestamp": 1603365331
    },
    {
        "content": "<p>Alright, pushed the test stuff <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 214176431,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1603368133
    },
    {
        "content": "<p>Interesting, import resolution for the mark macros fails on CI, as well as in RA but not when I build myself</p>",
        "id": 214176596,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1603368243
    },
    {
        "content": "<p>Oh I see the problem</p>",
        "id": 214176767,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1603368351
    }
]