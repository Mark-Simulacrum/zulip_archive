[
    {
        "content": "<p>Are test marks known to ever be flakey? I'm pretty sure I have seen false failures (at least once) for mark not hit when running the tests locally, and I just saw it in CI - <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/8027\">https://github.com/rust-analyzer/rust-analyzer/pull/8027</a>. Re-running caused the CI tests to pass. Specifically it is the <code>expected_type_if_let_without_leading_char</code> mark. I don't think there is anything in that test that is non-deterministic.</p>",
        "id": 230346699,
        "sender_full_name": "Josh Mcguigan",
        "timestamp": 1615816161
    },
    {
        "content": "<p>Not AFAIK</p>",
        "id": 230347138,
        "sender_full_name": "Laurențiu",
        "timestamp": 1615816314
    },
    {
        "content": "<p>Marks might falsely pass, but they should never falsely fail</p>",
        "id": 230347208,
        "sender_full_name": "matklad",
        "timestamp": 1615816325
    },
    {
        "content": "<p>That being said, we've recently switched from an in-tree impl to one from <a href=\"http://crates.io\">crates.io</a>. they should be equvalent, but maybe they arent'</p>",
        "id": 230347391,
        "sender_full_name": "matklad",
        "timestamp": 1615816399
    },
    {
        "content": "<p><code>cargo test --package ide_completion --lib -- context::tests::expected_type_if_let_without_leading_char --exact --nocapture</code> fails for me locally reliably</p>",
        "id": 230347577,
        "sender_full_name": "matklad",
        "timestamp": 1615816469
    },
    {
        "content": "<p>so yeah, you just got lucky on CI :)</p>\n<p>(</p>",
        "id": 230347620,
        "sender_full_name": "matklad",
        "timestamp": 1615816485
    },
    {
        "content": "<p>/me thinks if we should enable precise thread-local marks?</p>",
        "id": 230347657,
        "sender_full_name": "matklad",
        "timestamp": 1615816507
    },
    {
        "content": "<p>Yeah, let's try to activate <a href=\"https://github.com/matklad/cov-mark/blob/master/Cargo.toml#L20\">this feature</a> in all test-mark using crates. If it works, then let's roll with it.</p>",
        "id": 230348300,
        "sender_full_name": "matklad",
        "timestamp": 1615816746
    },
    {
        "content": "<p>Right, what do we do with that mark?</p>",
        "id": 230349298,
        "sender_full_name": "Laurențiu",
        "timestamp": 1615817082
    },
    {
        "content": "<p>So it does fail locally  for me too when running that test in isolation. But <code>cargo test -p ide_completion</code> is flakey, mostly passing (although I have seen one failure in a handful of runs).</p>",
        "id": 230350922,
        "sender_full_name": "Josh Mcguigan",
        "timestamp": 1615817684
    },
    {
        "content": "<p>Is that even with <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/8029\">https://github.com/rust-analyzer/rust-analyzer/pull/8029</a>?</p>",
        "id": 230351653,
        "sender_full_name": "Laurențiu",
        "timestamp": 1615817978
    },
    {
        "content": "<p>No that is master. I'm looking at your PR now.</p>",
        "id": 230353276,
        "sender_full_name": "Josh Mcguigan",
        "timestamp": 1615818565
    },
    {
        "content": "<p>I've confirmed it consistently fails on my machine with the <code>thread-local</code> feature. Thanks for the quick help resolving this!</p>",
        "id": 230355406,
        "sender_full_name": "Josh Mcguigan",
        "timestamp": 1615819291
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275435\">@Josh Mcguigan</span> so the way mark work is that each mark is an atomic counter, incremented by each <code>hit</code>. The check then looks at the marks at the start and end of the scope, and makes sure that there was at least one increment. So, if the mark is incremented by an unrelated test, that would get counted as a hit. </p>\n<p>This is architectured to allow spawning threads from within the test, and get them pass. There's a thread local opt-out. If all our tests actually work with thread-local, I am tempted to release a 2.0 version, which makes thread-local based impl default, and uses a feature to opt-into non-thread-safetyz</p>",
        "id": 230356992,
        "sender_full_name": "matklad",
        "timestamp": 1615819868
    },
    {
        "content": "<p>Good to know! Just to make sure I am understanding, does this mean that when we enable <code>thread-local</code>, if we had a test that spawned a thread and that thread hit the mark we'd get a false-fail?</p>",
        "id": 230357938,
        "sender_full_name": "Josh Mcguigan",
        "timestamp": 1615820184
    },
    {
        "content": "<p>right</p>",
        "id": 230358014,
        "sender_full_name": "matklad",
        "timestamp": 1615820216
    }
]