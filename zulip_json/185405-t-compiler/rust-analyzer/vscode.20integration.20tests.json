[
    {
        "content": "<p>Hi.</p>\n<p>Maybe we should add some vscode integration tests to the CI? For example, I merely forgot to test binary targets and voila.. <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/4528\">https://github.com/rust-analyzer/rust-analyzer/pull/4528</a></p>\n<p>With minimal smoke testing, it would not happen. Are there any reasons not to add the extension testing into the CI?</p>\n<p>P.S. The situation will get even more worse if we support different API for different vscode versions. mocha and vscode-test can help a lot.</p>",
        "id": 198163239,
        "sender_full_name": "vsrs",
        "timestamp": 1589959938
    },
    {
        "content": "<p>matklad wasn't really keen on it previously because they're pretty finicky to write and the cost/benefit seems high</p>",
        "id": 198163401,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1589960060
    },
    {
        "content": "<p>I've tried <a href=\"https://github.com/microsoft/vscode-test\">https://github.com/microsoft/vscode-test</a> and it does not look too burden. Not to say easy :)</p>",
        "id": 198164021,
        "sender_full_name": "vsrs",
        "timestamp": 1589960477
    },
    {
        "content": "<p>I would be -1 on VS Code tests that spawn an actual rust-analyzer/cargo process. Adding unit tests seems fine to me, but I would strongly prefer to \"just\" write code that doesn't need a lot of testing. </p>\n<p>Ie, ideally, I'd love to see a well-typed interface on the server, and a well-typed interface on the client, such that:</p>\n<ul>\n<li>we can manually inspect the interfaces and check that they are equivalent</li>\n<li>we can be reasonably sure that, by just following the types, we do everything right </li>\n</ul>\n<p>But yeah, the above case is exactly where we have some meaningful logic on the client</p>",
        "id": 198166189,
        "sender_full_name": "matklad",
        "timestamp": 1589961909
    },
    {
        "content": "<p>I did not mean heavy tests with actual  workspace building\\running. Only some client-specific logic tests. I've called them <code>integration</code> because they might involve vscode running.</p>\n<p>Though I would prefer to remove any logic from the client-side at all it is not always possible. For the above-mentioned case it is possible, I hope. Just not at the moment.</p>\n<p>So, can I add such 'client unit-tests' to the master or it would be better to keep them in my local branches?</p>",
        "id": 198169715,
        "sender_full_name": "vsrs",
        "timestamp": 1589964449
    },
    {
        "content": "<p>Yup, <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> on client-side tests</p>",
        "id": 198170032,
        "sender_full_name": "matklad",
        "timestamp": 1589964630
    },
    {
        "content": "<p>We actually had them for <code>cargo check</code>, while that was implemented client-side</p>",
        "id": 198170046,
        "sender_full_name": "matklad",
        "timestamp": 1589964643
    },
    {
        "content": "<p>Great! For the start I'll add them for a launch configuration generation and a bit later for shared downloads (<a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/4469\">https://github.com/rust-analyzer/rust-analyzer/issues/4469</a>)</p>",
        "id": 198170545,
        "sender_full_name": "vsrs",
        "timestamp": 1589964984
    }
]