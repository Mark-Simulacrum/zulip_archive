[
    {
        "content": "<p>Hi everyone, is it possible to get a list of all symbols including their type?</p>\n<p>This is what I currently have, but I get empty lists.</p>\n<div class=\"codehilite\"><pre><span></span>const LOCAL_CODE: SourceRootId = SourceRootId(0);\nconst SYSROOT: SourceRootId = SourceRootId(1);\n\nstruct PackageRootWrapper(PackageRoot);\n\nimpl Debug for PackageRootWrapper {\n    fn fmt(&amp;self, f: &amp;mut Formatter&lt;&#39;_&gt;) -&gt; Result&lt;(), Error&gt; {\n        f.debug_struct(&quot;PackageRoot&quot;)\n            .field(&quot;path&quot;, self.0.path())\n            .field(&quot;is_member&quot;, &amp;self.0.is_member())\n            .finish()\n    }\n}\n\nfn main() -&gt; anyhow::Result&lt;()&gt; {\n    let mut analysis_host = AnalysisHost::default();\n    let mut change = AnalysisChange::new();\n\n    let workspace = ProjectWorkspace::discover_with_sysroot(\n        Path::new(&quot;/home/user/rust/analyzer-test&quot;),\n        true,\n        &amp;CargoFeatures::default(),\n    )?;\n    dbg!(workspace\n        .to_roots()\n        .iter()\n        .map(|pr| PackageRootWrapper(pr.clone()))\n        .collect::&lt;Vec&lt;_&gt;&gt;());\n\n    for (i, pr) in workspace.to_roots().iter().enumerate() {\n        change.add_root(SourceRootId(i as u32), pr.is_member());\n        change.set_debug_root_path(\n            SourceRootId(i as u32),\n            pr.path().to_str().unwrap().to_string(),\n        );\n    }\n\n    let mut next_file_id = 0u32;\n    let mut file_id_map: FxHashMap&lt;PathBuf, FileId&gt; = FxHashMap::default();\n    let mut get_or_insert_file_id = |p: &amp;Path| -&gt; Option&lt;FileId&gt; {\n        let p = p.to_path_buf();\n        match file_id_map.get(&amp;p) {\n            Some(id) =&gt; Some(*id),\n            None =&gt; {\n                next_file_id += 1;\n                file_id_map.insert(p, FileId(next_file_id));\n                Some(FileId(next_file_id))\n            }\n        }\n    };\n\n    change.add_root(LOCAL_CODE, true);\n    change.add_file(\n        LOCAL_CODE,\n        FileId(0),\n        RelativePathBuf::from_path(&quot;src/main.rs&quot;).unwrap(),\n        Arc::new(&quot;fn main() {}&quot;.to_string()),\n    );\n    let crate_graph = workspace.to_crate_graph(\n        &amp;CfgOptions::default(),\n        &amp;FxHashMap::default(),\n        &amp;mut get_or_insert_file_id,\n    );\n    change.set_crate_graph(crate_graph);\n\n    analysis_host.apply_change(change);\n    let mut query = Query::new(&quot;to&quot;.to_string());\n    query.libs();\n    let db: &amp;mut RootDatabase =\n        Any::downcast_mut::&lt;RootDatabase&gt;(analysis_host.raw_database_mut()).unwrap();\n    dbg!(symbol_index::world_symbols(db, query));\n    dbg!(db.library_roots());\n    dbg!(db.local_roots());\n    dbg!(db.library_symbols(SourceRootId(0)));\n    // dbg!(an.symbol_search(query));\n    Ok(())\n}\n</pre></div>",
        "id": 191340917,
        "sender_full_name": "tcjqlwnsqthqcakslc",
        "timestamp": 1584789425
    },
    {
        "content": "<p>Take a look at <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/10867336e627f84a4886592c0a2764f5105bd0ce/crates/rust-analyzer/src/cli/analysis_stats.rs#L75-L77\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/10867336e627f84a4886592c0a2764f5105bd0ce/crates/rust-analyzer/src/cli/analysis_stats.rs#L75-L77\">https://github.com/rust-analyzer/rust-analyzer/blob/10867336e627f84a4886592c0a2764f5105bd0ce/crates/rust-analyzer/src/cli/analysis_stats.rs#L75-L77</a>, which collects all <em>functions</em></p>",
        "id": 191340986,
        "sender_full_name": "matklad",
        "timestamp": 1584789569
    },
    {
        "content": "<p>thanks, I'll look into that</p>",
        "id": 191341800,
        "sender_full_name": "tcjqlwnsqthqcakslc",
        "timestamp": 1584790960
    }
]