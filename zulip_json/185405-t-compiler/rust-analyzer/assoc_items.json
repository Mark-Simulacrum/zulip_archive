[
    {
        "content": "<p>When I see something like</p>\n<blockquote>\n<p>path segment \"new\" resolved to non-module Struct(Struct { id: StructId(0) }), but is not last</p>\n</blockquote>\n<p>What does the <code>but is not last</code> refer to?</p>",
        "id": 159741267,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1551468278
    },
    {
        "content": "<p>during resolution</p>",
        "id": 159741964,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1551468869
    },
    {
        "content": "<p>I think there's an off-by-one in that log message ;) so you have e.g. <code>Foo::new()</code>, and it's saying that <code>Foo</code> resolved to some struct, not a module, so it's stopping the resolution at that point (if this happens for an import, it's an error, but in an expression we can continue resolving it during type inference)</p>",
        "id": 159742441,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551469297
    },
    {
        "content": "<p>I was wondering that too</p>",
        "id": 159742687,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1551469472
    },
    {
        "content": "<p>I'm basically trying to resolve <code>Foo::new()</code></p>",
        "id": 159742702,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1551469501
    },
    {
        "content": "<p>well figure out why it doesn't resolve</p>",
        "id": 159742762,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1551469551
    },
    {
        "content": "<p>It's handled during type inference, like method calls. We just don't handle it for goto def. Probably, we need another side table during type inference where we write resolutions of associated items, and then use that for goto def (I wrote a bit about that here: <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/832#issuecomment-463751288\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/832#issuecomment-463751288\">https://github.com/rust-analyzer/rust-analyzer/issues/832#issuecomment-463751288</a> )</p>",
        "id": 159744277,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551470580
    },
    {
        "content": "<p>So we need a side table for type inference or one for goto def?</p>",
        "id": 159745315,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1551471310
    },
    {
        "content": "<p>A side table for type inference to write information that goto def can then use ;)</p>",
        "id": 159748662,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551474013
    },
    {
        "content": "<p>(and by side table I really just mean a hash map, like the ones for method and field resolutions)</p>",
        "id": 159748674,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551474033
    },
    {
        "content": "<p>Yep. I have one going from ExprId to Function but <code>infer_expr</code> doesn't seem to get called</p>",
        "id": 159749066,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1551474376
    },
    {
        "content": "<p>Maybe we need to use inference if <code>name_ref.syntax().parent().and_then(ast::PathSegment::cast)</code></p>",
        "id": 159749149,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1551474477
    },
    {
        "content": "<p>in goto def</p>",
        "id": 159749151,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1551474481
    },
    {
        "content": "<p><code>reference_definition</code> calls type inference if it sees a method or field access, it should probably do the same if it can't resolve a path</p>",
        "id": 159750470,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551475513
    },
    {
        "content": "<p>Ok i'll try it if name resolution fails</p>",
        "id": 159750633,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1551475673
    },
    {
        "content": "<p>so infer_expr doesn't really know anything about the \"receiver\" since this is a call expr and not really a method right?</p>",
        "id": 159751014,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1551475986
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> I'm assuming that I write to the hash table in <code>infer_expr</code> if we're looking at <code>Expr:Call</code>. How do I get the <code>Function</code> I need? I think I need to find an <code>ImplBlock::Method</code>?</p>",
        "id": 159751897,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1551476663
    },
    {
        "content": "<p>I think you write to the hash table when you're looking at the <code>Expr::Path</code> already</p>",
        "id": 159751933,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551476698
    },
    {
        "content": "<p>it might be an associated constant as well, it doesn't really matter if it's called or what else is done with it afterwards</p>",
        "id": 159751962,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551476725
    },
    {
        "content": "<p>so basically at the end of <code>infer_path_expr</code>, you may have a <code>Resolution::Def(some_module_def)</code>, and then you can save that</p>",
        "id": 159752088,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551476829
    },
    {
        "content": "<p>by the way, I just notice that we basically convert the <code>ImplItem::Method</code> into a <code>ModuleDef::Function</code> there, which feels... weird</p>",
        "id": 159752119,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551476873
    },
    {
        "content": "<p>but I guess if you just interpret <code>ModuleDef</code> as 'things that could be in a module' as opposed to 'things that are in a module', it's fine</p>",
        "id": 159752184,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551476910
    },
    {
        "content": "<p>Should I be saving the path instead of the expr? I guess this is more of a path to associated thing map</p>",
        "id": 159752578,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1551477221
    },
    {
        "content": "<p>sorry: would it make more sense that the path is the key</p>",
        "id": 159752590,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1551477233
    },
    {
        "content": "<p>I think in some weird edge cases the same paths might resolve to different items even in the same function...</p>",
        "id": 159752807,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551477382
    },
    {
        "content": "<p>on the other hand, we ideally want all the intermediate resolutions as well</p>",
        "id": 159752842,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551477412
    },
    {
        "content": "<p>still, it should be keyed on the expression I think</p>",
        "id": 159752858,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551477424
    },
    {
        "content": "<p>well the issue is that the expression is not acccessible from that point</p>",
        "id": 159752883,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1551477459
    },
    {
        "content": "<p>and the other caller <code>infer_pat</code> doesn't have one passed in either</p>",
        "id": 159752977,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1551477522
    },
    {
        "content": "<p>oh, I think it should be fine to just pass the <code>ExprId</code> to <code>infer_path_expr</code></p>",
        "id": 159752989,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551477536
    },
    {
        "content": "<p>oh, it's called by pattern inference as well, right...</p>",
        "id": 159753071,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551477589
    },
    {
        "content": "<p>yeah</p>",
        "id": 159753076,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1551477592
    },
    {
        "content": "<p>we do want to save the resolution in the pattern case as well</p>",
        "id": 159753155,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551477628
    },
    {
        "content": "<p>we might return the resolved item as well as the type... or pass a callback to <code>infer_path_expr</code> that writes the resolution to the right place... or pass some enum wrapping <code>ExprId</code> or <code>PatId</code>... not sure what the nicest approach is</p>",
        "id": 159753292,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551477727
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> I chose the latter for now</p>",
        "id": 159756456,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1551480574
    },
    {
        "content": "<p>think i have something that works for associated functions</p>",
        "id": 159758477,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1551482485
    },
    {
        "content": "<p>PR is up</p>",
        "id": 159759550,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1551483438
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> we don't currently do anything with that <code>PatId</code>. should we right now?</p>",
        "id": 160094392,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1551878571
    },
    {
        "content": "<p>I guess if you use an associated constant in a pattern, we should?</p>",
        "id": 160094614,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551878755
    },
    {
        "content": "<p>Are associated constants even allowed in patterns? How would you check pattern disjointess?</p>",
        "id": 160094822,
        "sender_full_name": "matklad",
        "timestamp": 1551878936
    },
    {
        "content": "<p>inherent associated constants don't have that problem <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=9881a070f75f0458cdb51f1513f2a2dc\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=9881a070f75f0458cdb51f1513f2a2dc\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=9881a070f75f0458cdb51f1513f2a2dc</a></p>",
        "id": 160095841,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551879705
    },
    {
        "content": "<p>looks like that answers the question</p>",
        "id": 160096168,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1551879904
    },
    {
        "content": "<p>associated consts of a trait do indeed not work in patterns</p>",
        "id": 160098051,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551881267
    },
    {
        "content": "<p>Hm, they <strong>do</strong> work? <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8e3658e31e3c73457a827151b59527b9\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8e3658e31e3c73457a827151b59527b9\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8e3658e31e3c73457a827151b59527b9</a></p>",
        "id": 160098150,
        "sender_full_name": "matklad",
        "timestamp": 1551881339
    },
    {
        "content": "<p>Yeah if the self type is known, I meant something like this: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=1f70f60dbd38fce55af7159795fca16b\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=1f70f60dbd38fce55af7159795fca16b\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=1f70f60dbd38fce55af7159795fca16b</a></p>",
        "id": 160099410,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551882144
    },
    {
        "content": "<p>So in the match we're actually in a <code>PathPat</code> not a <code>Pat</code>. I can't seem to get the <code>PatId</code> from the <code>PathPat</code></p>",
        "id": 160103078,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1551884682
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/942\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/942\">https://github.com/rust-analyzer/rust-analyzer/pull/942</a></p>",
        "id": 160111907,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1551890488
    },
    {
        "content": "<p>It will also give information on associated functions but I think that should be correct even if the compiler rejects it</p>",
        "id": 160112299,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1551890763
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203366\">@Jeremy Kolb</span> there's <code>From&lt;PathPat&gt; for </code>Pat` impl</p>",
        "id": 160114470,
        "sender_full_name": "matklad",
        "timestamp": 1551892387
    },
    {
        "content": "<p>That's on the ast side. I don't think it helps</p>",
        "id": 160126677,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1551900604
    },
    {
        "content": "<p>the <code>PathPat</code> you have there is an <code>ast::PathPat</code>, right? you can turn that into an <code>ast::Pat</code> and get the <code>PatId</code> from the body source map (pretty much like it's done in the expr case)</p>",
        "id": 160126975,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551900787
    },
    {
        "content": "<p>ah right. i missed that</p>",
        "id": 160127114,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1551900855
    },
    {
        "content": "<p>much better</p>",
        "id": 160127644,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1551901267
    }
]