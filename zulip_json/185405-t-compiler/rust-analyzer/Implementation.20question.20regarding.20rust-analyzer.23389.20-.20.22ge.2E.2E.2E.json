[
    {
        "content": "<p>Hello, guys! I'm new here so I don't really know how zulip works. Sorry if I am not sending the message to the right channel.</p>\n<p>So, I am working on <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/389\">https://github.com/rust-analyzer/rust-analyzer/issues/389</a> and I have some questions regarding that issue. As the issue says, textDocument/hover speaks about a position, not ranges, so we would have to change it somehow to include the range. But the example given is about extending the server response of CodeActions, which I think is not the same. So, I have been trying to change the position param to a range, but that involves changing the client typescript code, so I am not sure if that is the way to go or if I'm misinterpreting something.</p>\n<p>Could someone give me any pointers on this? Should I be changing the code in the client? Thanks!</p>",
        "id": 247103823,
        "sender_full_name": "Alexander Gonzalez",
        "timestamp": 1627179584
    },
    {
        "content": "<p>It looks like <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/389#issuecomment-849448988\">the advice given by matklad in that issue</a> is to extend HoverParams to be an enum of _either_ <code>Position</code> or <code>Range</code>; presumably, for back-compat, it would be nice if the TypeScript side would understand a default of <code>Position</code> if it doesn't look like the enum type, but I'm pretty sure that's unnecessary with RA's update model.</p>\n<p>To clarify: Yes, I believe you'll have to change code in both the typescript and the rust portions.</p>",
        "id": 247104190,
        "sender_full_name": "Zoey",
        "timestamp": 1627180215
    },
    {
        "content": "<p>Yeah, I thought of making it an enum, but assumed that I could make it work since a Position is a Range of length 0. But I think that using an enum would be clearer. Thank you!</p>\n<p>In any case, the main problem I have is that I am not sure of how to extend the params in the typescript side <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span> </p>\n<p>Halp!</p>",
        "id": 247106621,
        "sender_full_name": "Alexander Gonzalez",
        "timestamp": 1627184794
    },
    {
        "content": "<p>I believe you wanna touch this part on the typescript side <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/2fe586a8a781f22f4e5a82037ed459fe28e87f8f/editors/code/src/client.ts#L58-L74\">https://github.com/rust-analyzer/rust-analyzer/blob/2fe586a8a781f22f4e5a82037ed459fe28e87f8f/editors/code/src/client.ts#L58-L74</a></p>",
        "id": 247118264,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1627206151
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 247118273,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1627206181
    },
    {
        "content": "<p>Hey guys! I have another question here. How should I go about adding the server/client capability here <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>? I can't seem to figure it out.</p>",
        "id": 247258297,
        "sender_full_name": "Alexander Gonzalez",
        "timestamp": 1627331822
    },
    {
        "content": "<p>We have <code>hover_provider: Some(HoverProviderCapability::Simple(true))</code>, but I am not sure about how should I extend it.</p>",
        "id": 247258409,
        "sender_full_name": "Alexander Gonzalez",
        "timestamp": 1627331882
    },
    {
        "content": "<p>I think that the requirement is supporting hovers and r-a does support them :D</p>",
        "id": 247259600,
        "sender_full_name": "Alexander Gonzalez",
        "timestamp": 1627332435
    },
    {
        "content": "<p>The capabilities have an <code>experimental</code> field which is just a json blob, thats where you should put something</p>",
        "id": 247269674,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1627336929
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"n\">experimental</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">!</span><span class=\"p\">({</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">\"joinLines\"</span>: <span class=\"nc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">\"ssr\"</span>: <span class=\"nc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">\"onEnter\"</span>: <span class=\"nc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">\"parentModule\"</span>: <span class=\"nc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">\"runnables\"</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"s\">\"kinds\"</span>: <span class=\"p\">[</span><span class=\"w\"> </span><span class=\"s\">\"cargo\"</span><span class=\"w\"> </span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">\"workspaceSymbolScopeKindFiltering\"</span>: <span class=\"nc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">})),</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"https://github.com/Veykril/rust-analyzer/blob/3fab50019c0e19fbd06891c83038b1593ba7901a\\crates\\rust-analyzer\\src\\caps.rs#L115-L124\">https://github.com/Veykril/rust-analyzer/blob/3fab50019c0e19fbd06891c83038b1593ba7901a\\crates\\rust-analyzer\\src\\caps.rs#L115-L124</a></p>",
        "id": 247269711,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1627336955
    },
    {
        "content": "<p>client caps are here -&gt; <a href=\"https://github.com/Veykril/rust-analyzer/blob/3fab50019c0e19fbd06891c83038b1593ba7901a\\editors\\code\\src\\client.ts#L162-L175\">https://github.com/Veykril/rust-analyzer/blob/3fab50019c0e19fbd06891c83038b1593ba7901a\\editors\\code\\src\\client.ts#L162-L175</a></p>",
        "id": 247269767,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1627337003
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span>  Thanks man, you are so helpful <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span> </p>\n<p>But I don't get it, why do we need to specify this? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> And since we do, shouldn't it affect the code somehow? That is, shouldn't I fall back to the old behavior if the capability is false or something similar? </p>\n<p>Sorry if I am being dumb <span aria-label=\"disappointed\" class=\"emoji emoji-1f61e\" role=\"img\" title=\"disappointed\">:disappointed:</span></p>",
        "id": 247271925,
        "sender_full_name": "Alexander Gonzalez",
        "timestamp": 1627338370
    },
    {
        "content": "<p>that I can't tell you either, I'm not familiar with the capabilities part of the protocol</p>",
        "id": 247272014,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1627338445
    },
    {
        "content": "<p>you need to specify it so that clients know they can send a range in the hover request</p>",
        "id": 247300109,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1627369167
    }
]