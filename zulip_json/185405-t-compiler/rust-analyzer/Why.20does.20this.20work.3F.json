[
    {
        "content": "<p>I noticed that we don't eagerly unify a closure's argument types with the expected type in some cases, which leads to uninferred closure args, and unresolved inherent method calls. Basically we seem to be missing the code here: <a href=\"https://github.com/rust-lang/rust/blob/5d0fae5b66ea33e667c8e1f7cceaca0c3653597c/compiler/rustc_typeck/src/check/closure.rs#L158\">https://github.com/rust-lang/rust/blob/5d0fae5b66ea33e667c8e1f7cceaca0c3653597c/compiler/rustc_typeck/src/check/closure.rs#L158</a></p>\n<p>At least when the expected type is <code>&amp;dyn Fn(X)</code>, this seems to be correct, but for some reason the following seems to work fine, but I expected it to also fail:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">inherent</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u8</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">take_generic_closure</span><span class=\"p\">(</span><span class=\"n\">f</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">take_generic_closure</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">inherent</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">                             </span><span class=\"c1\">//^^^^^^^^^^^^ u8</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Where are we implementing this?</p>",
        "id": 244292349,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624977776
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/13cbe64a5908cfc36629687a302be9568a06afa4/crates/hir_ty/src/infer/expr.rs#L284-L289\">https://github.com/rust-analyzer/rust-analyzer/blob/13cbe64a5908cfc36629687a302be9568a06afa4/crates/hir_ty/src/infer/expr.rs#L284-L289</a></p>",
        "id": 244294439,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1624978509
    },
    {
        "content": "<p>hmm, where does <code>coerce</code> look at the where-clauses though?</p>",
        "id": 244294590,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624978553
    },
    {
        "content": "<p>the problem with <code>&amp;dyn Fn</code> might be an unsizing coercion problem?</p>",
        "id": 244294607,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1624978561
    },
    {
        "content": "<p><code>coerce</code> calls <code>resolve_ty_shallow</code>, which calls <code>resolve_obligations_as_possible</code></p>",
        "id": 244294727,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1624978597
    },
    {
        "content": "<p>at this point the where clause should already be registered as an obligation</p>",
        "id": 244294782,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1624978619
    },
    {
        "content": "<p>ah, okay</p>",
        "id": 244294791,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624978623
    },
    {
        "content": "<p>I think <code>dyn</code> doesn't work because <code>only_has_type</code> ignores <code>Expectation::RValueLikeUnsized</code></p>",
        "id": 244295086,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624978720
    },
    {
        "content": "<p>I think rustc doesn't do that</p>",
        "id": 244295102,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624978726
    },
    {
        "content": "<p>hmm the expectation won't be <code>RValueLikeUnsized</code> in your example though, I think?</p>",
        "id": 244295220,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1624978768
    },
    {
        "content": "<p>ah well it might</p>",
        "id": 244295412,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1624978824
    },
    {
        "content": "<p>it is</p>",
        "id": 244295535,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624978850
    },
    {
        "content": "<p>but that doesn't fix it</p>",
        "id": 244295562,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624978858
    },
    {
        "content": "<p>does it infer the type of <code>x</code> at all in the test?</p>",
        "id": 244295781,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1624978922
    },
    {
        "content": "<p>I'm testing with</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">inherent</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u8</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">take_dyn_fn</span><span class=\"p\">(</span><span class=\"n\">f</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">take_dyn_fn</span><span class=\"p\">(</span><span class=\"o\">&amp;|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">inherent</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">                     </span><span class=\"c1\">//^^^^^^^^^^^^ u8</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 244295933,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624978963
    },
    {
        "content": "<p>apparently it does, yes</p>",
        "id": 244295994,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624978990
    },
    {
        "content": "<p>hrm</p>",
        "id": 244296055,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1624979016
    },
    {
        "content": "<p>yeah well just not doing <code>only_has_type</code> isn't going to help there, since the closure doesn't coerce to <code>dyn Fn</code> without <code>&amp;</code></p>",
        "id": 244296266,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1624979089
    },
    {
        "content": "<p>so yeah, this might need something like <code>deduce_expectations_from_expected_type</code> after all :(</p>",
        "id": 244296325,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1624979108
    },
    {
        "content": "<p>I came up with another interesting case that my PR doesn't fix:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">inherent</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u8</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">take_dyn_fn</span><span class=\"p\">(</span><span class=\"n\">f</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">take_dyn_fn</span><span class=\"p\">(</span><span class=\"o\">&amp;|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">inherent</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"c1\">//^^^^^^^^^^^^ u8</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"c1\">//^^ &amp;u8</span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Here the <code>DynTy</code> prints as <code>dyn for&lt;type&gt; [] + 'static</code>, which looks like we're just throwing away the higher-ranked bound. Is that a known bug?</p>",
        "id": 244352648,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625003443
    },
    {
        "content": "<p>also I don't think I can just shift the <code>&amp;'a S</code> out of its binder here</p>",
        "id": 244354726,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625004578
    },
    {
        "content": "<p>\"let's see how rustc handles these binders correctly\"</p>\n<p><a href=\"https://github.com/rust-lang/rust/blob/6e0b554619a3bb7e75b3334e97f191af20ef5d76/compiler/rustc_typeck/src/check/closure.rs#L259\">https://github.com/rust-lang/rust/blob/6e0b554619a3bb7e75b3334e97f191af20ef5d76/compiler/rustc_typeck/src/check/closure.rs#L259</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arg_param_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">projection</span><span class=\"p\">.</span><span class=\"n\">skip_binder</span><span class=\"p\">().</span><span class=\"n\">projection_ty</span><span class=\"p\">.</span><span class=\"n\">substs</span><span class=\"p\">.</span><span class=\"n\">type_at</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>:|</p>",
        "id": 244355298,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625004924
    },
    {
        "content": "<p>ah, and then it <code>rebind</code>s everything in the <code>FnSig</code></p>",
        "id": 244355410,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625004989
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Why.20does.20this.20work.3F/near/244352648\">said</a>:</p>\n<blockquote>\n<p>I came up with another interesting case that my PR doesn't fix:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">inherent</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u8</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">take_dyn_fn</span><span class=\"p\">(</span><span class=\"n\">f</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">take_dyn_fn</span><span class=\"p\">(</span><span class=\"o\">&amp;|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">inherent</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"c1\">//^^^^^^^^^^^^ u8</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"c1\">//^^ &amp;u8</span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Here the <code>DynTy</code> prints as <code>dyn for&lt;type&gt; [] + 'static</code>, which looks like we're just throwing away the higher-ranked bound. Is that a known bug?</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_def/src/type_ref.rs#L303\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_def/src/type_ref.rs#L303</a> We are skipping them currently</p>",
        "id": 244356015,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1625005361
    },
    {
        "content": "<p>sadge</p>",
        "id": 244356473,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625005655
    },
    {
        "content": "<p>I think I just didn't add it because the lifetime hir PR was big enough back then, could look into fixing that</p>",
        "id": 244357058,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1625006055
    },
    {
        "content": "<p>I do think we'll need this for accurate closure inference, but I can also look into it when I get the chance</p>",
        "id": 244358270,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625006948
    },
    {
        "content": "<p>I wouldn't mind looking into it either, wasnt sure what to work on next anyways</p>",
        "id": 244358621,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1625007195
    },
    {
        "content": "<p>but if you wanna you can do it of course</p>",
        "id": 244358633,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1625007203
    },
    {
        "content": "<p>I'm not going to fix that immediately, first I want to understand how chalk/hir_ty works a bit better</p>",
        "id": 244358729,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625007269
    },
    {
        "content": "<p>Well took a quick peek at it and pushed the problem from <code>TypeRef</code> to the point where we create the where clauses from <code>TypeBound</code>s which probably wont help too much. As it just drops all hrtb lifetimes there now  but that's as far as my knowledge here goes <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/9431\">https://github.com/rust-analyzer/rust-analyzer/pull/9431</a></p>",
        "id": 244362487,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1625010010
    },
    {
        "content": "<p>hmm I thought we just ignored the <code>for</code> and lowered it as a normal bound :/</p>",
        "id": 244385430,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1625037373
    },
    {
        "content": "<p>I think we do that for where clauses? We dont for type bounds yet at least</p>",
        "id": 244394195,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1625043322
    },
    {
        "content": "<p>I don't quite understand the logic here:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">sig_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">TyKind</span>::<span class=\"n\">Function</span><span class=\"p\">(</span><span class=\"n\">FnPointer</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">num_binders</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">sig</span>: <span class=\"nc\">FnSig</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">abi</span>: <span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">safety</span>: <span class=\"nc\">chalk_ir</span>::<span class=\"n\">Safety</span>::<span class=\"n\">Safe</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">variadic</span>: <span class=\"nc\">false</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">substitution</span>: <span class=\"nc\">FnSubst</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">Substitution</span>::<span class=\"n\">from_iter</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">Interner</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sig_tys</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">()).</span><span class=\"n\">shifted_in</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">Interner</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">intern</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">Interner</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This always creates an <code>FnPointer</code> that has a fixed 0 higher-ranked regions, but it still calls <code>shifted_in</code>. Wouldn't that shift the indices past the (non-existent) implicit binder in the <code>FnPointer</code>?</p>",
        "id": 244411284,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625054290
    },
    {
        "content": "<p>de bruijn indices are conceptually simple, but I can't wrap my head around how they work in chalk</p>",
        "id": 244411343,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625054341
    },
    {
        "content": "<p>chalk (like rustc, I think?) counts binders, not bound variables, so when putting something inside the FnPointer we need to shift in even if the binder has 0 variables</p>",
        "id": 244411549,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1625054459
    },
    {
        "content": "<p>as a general note though, the handling of function binders and higher-ranked bounds in hir_ty is, let's say, not really clean and will probably break in lots of places once we actually have lifetimes</p>",
        "id": 244411625,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1625054511
    },
    {
        "content": "<p>ah, so every <code>Binders</code> instance is counted, not every variable inside</p>",
        "id": 244411739,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625054577
    },
    {
        "content": "<p>yeah. that's why <code>BoundVar</code> has two indices, the debruijn index for the binder and the index for the variable in that binder</p>",
        "id": 244411792,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1625054618
    },
    {
        "content": "<p>chalks API for dealing with this function signatures also seems a bit suboptimal here</p>",
        "id": 244411824,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625054636
    },
    {
        "content": "<p>do we have an equivalent to <code>liberate_late_bound_regions</code> in r-a? presumably no?</p>",
        "id": 244411941,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625054686
    },
    {
        "content": "<p>I guess there might be some stuff missing. I think one of the main problems is though that we still have our own <code>CallableSig</code> type which doesn't have binders</p>",
        "id": 244411947,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1625054689
    },
    {
        "content": "<p>no <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 244411966,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1625054698
    },
    {
        "content": "<p>yeah exactly</p>",
        "id": 244411967,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625054698
    },
    {
        "content": "<p>mostly I find <code>FnPointer</code> unintuitive to construct, and <code>Binder&lt;InternedSlice&gt;</code> is also hard to work with</p>",
        "id": 244412021,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625054723
    },
    {
        "content": "<p>I'd expect an <code>IntoIterator</code> impl for that that yields <code>Binder&lt;&amp;SliceElement&gt;</code> or something</p>",
        "id": 244412055,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625054745
    },
    {
        "content": "<p>hm, there is an <code>IntoIterator</code> impl for IntoIterator inside Binders. Seems like one for <code>Binder&lt;InternedSlice&gt;</code> would make sense, but may run into coherence problems... although probably it could be generated by the <code>interned_slice!</code> macros</p>",
        "id": 244412391,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1625054899
    },
    {
        "content": "<p>ah, yeah, that'd work too</p>",
        "id": 244412415,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625054914
    },
    {
        "content": "<p>although you could also do <code>binder.map(|x| x.iter(&amp;Interner)).into_iter()</code> I guess?</p>",
        "id": 244412465,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1625054945
    },
    {
        "content": "<p>oh, it couldn't be a proper <code>IntoIterator</code> impl anyway since it needs the interner</p>",
        "id": 244412612,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1625055014
    },
    {
        "content": "<p>there could be an inherent method for this though I guess</p>",
        "id": 244412634,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1625055027
    },
    {
        "content": "<p>this works but r-a isn't too happy about it</p>\n<p><a href=\"/user_uploads/4715/aKQQS4rZB39zd0k_MOO5RY39/screenshot-2021-06-30-141210.png\">screenshot-2021-06-30-141210.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/aKQQS4rZB39zd0k_MOO5RY39/screenshot-2021-06-30-141210.png\" title=\"screenshot-2021-06-30-141210.png\"><img src=\"/user_uploads/4715/aKQQS4rZB39zd0k_MOO5RY39/screenshot-2021-06-30-141210.png\"></a></div>",
        "id": 244412856,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625055153
    },
    {
        "content": "<p>that might be the thing where it fails to project <code>HasInterner::Interner</code> at some points... it's also on <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8961\">https://github.com/rust-analyzer/rust-analyzer/issues/8961</a></p>",
        "id": 244412973,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1625055229
    },
    {
        "content": "<p>ooh new github issues UI btw</p>",
        "id": 244413193,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1625055315
    },
    {
        "content": "<p>is <code>liberate_late_bound_regions</code> just basically a <code>substitute</code> with some different lifetimes? :/</p>",
        "id": 244413564,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1625055493
    },
    {
        "content": "<p>I was under the impression I needed that to unify types behind a binder</p>",
        "id": 244413712,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625055586
    },
    {
        "content": "<p>but looks like no</p>",
        "id": 244413725,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625055592
    },
    {
        "content": "<p>well, that sounds kind of like what Chalk does to unify binders</p>",
        "id": 244413899,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1625055680
    },
    {
        "content": "<p>I think that was the missing key piece - we can just create an <code>FnPointer</code> type for the expected signature and unify the closure's sig_ty with that</p>",
        "id": 244419427,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625058169
    },
    {
        "content": "<p>that should handle arbitrary binders correctly</p>",
        "id": 244419480,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625058188
    }
]