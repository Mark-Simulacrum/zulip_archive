[
    {
        "content": "<p>I have read some articles written by <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> that some proc-macro are impossible to infer and analysis. But I am tracing a bug in some proc-macros that is indeterministic: i.e. It expands to different syntax orders every time( maybe using Hashmap internally)</p>",
        "id": 196602201,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1588753597
    },
    {
        "content": "<p>Hm, yeah, that would be bad for salsa...</p>",
        "id": 196602238,
        "sender_full_name": "matklad",
        "timestamp": 1588753633
    },
    {
        "content": "<p>Dear, we do need to wasm up all proc macros...</p>",
        "id": 196602250,
        "sender_full_name": "matklad",
        "timestamp": 1588753644
    },
    {
        "content": "<blockquote>\n<p>wasm up all proc macros</p>\n</blockquote>\n<p>there's also the new WinRT integration that uses proc macros to generate bindings on the fly, reading lots of files in the process <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 196602419,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1588753749
    },
    {
        "content": "<p>but I guess as long as the binding files don't change, that's maybe not the worst</p>",
        "id": 196602622,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1588753873
    },
    {
        "content": "<p>Yea, I've already left a \"please, don't\" comment on their repo: <a href=\"https://github.com/microsoft/winrt-rs/issues/107#issuecomment-622402448\" title=\"https://github.com/microsoft/winrt-rs/issues/107#issuecomment-622402448\">https://github.com/microsoft/winrt-rs/issues/107#issuecomment-622402448</a> :D</p>",
        "id": 196602751,
        "sender_full_name": "matklad",
        "timestamp": 1588753942
    },
    {
        "content": "<p>I know they are starting to discuss about 2021 edition features, you might have to persuade to them hardly.</p>",
        "id": 196603082,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1588754175
    },
    {
        "content": "<p>FYI, the actual panic is look like this :</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;can&#39;t resolve local ptr to SyntaxNode: SyntaxNodePtr { range: 160..329, kind: IMPL_DEF }&#39;, crates\\ra_syntax\\src\\ptr.rs:30:28\n</code></pre></div>",
        "id": 196603131,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1588754231
    },
    {
        "content": "<p>I don't think it's a good idea to target any lang-changes for 2021 edition -- not enough time</p>",
        "id": 196603141,
        "sender_full_name": "matklad",
        "timestamp": 1588754239
    },
    {
        "content": "<p>for 2024, I hope we'll be able to clean up the lang with an eye towards IDE</p>",
        "id": 196603161,
        "sender_full_name": "matklad",
        "timestamp": 1588754257
    },
    {
        "content": "<p>Okay, then we have to hotfix this bug now :(<br>\nI propose we store a cache for expansion result, and return its for second call for <code>expand_proc_macro</code></p>",
        "id": 196603342,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1588754354
    },
    {
        "content": "<p>Maybe we should move proc-macros to a separate table, which is not LRUd?</p>",
        "id": 196603384,
        "sender_full_name": "matklad",
        "timestamp": 1588754393
    },
    {
        "content": "<p>Thats much better of course. </p>\n<p>But would you mind give me some pointer about that part of doc in salsa ? I  know very basic usage about it.</p>",
        "id": 196603630,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1588754540
    },
    {
        "content": "<p>Seems like we have zero docs about this D:</p>",
        "id": 196603817,
        "sender_full_name": "matklad",
        "timestamp": 1588754677
    },
    {
        "content": "<p>wait, where do we actually set up LRU? Looks like I forgot how it works</p>",
        "id": 196603954,
        "sender_full_name": "matklad",
        "timestamp": 1588754778
    },
    {
        "content": "<p>Ah, it's well hidden. <span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> take a look at <code>RootDatabase::update_lru_capacity</code> method</p>",
        "id": 196604005,
        "sender_full_name": "matklad",
        "timestamp": 1588754833
    },
    {
        "content": "<p>It calls <code>self.query_mut(ra_db::ParseQuery).set_lru_capacity(lru_capacity);</code></p>",
        "id": 196604014,
        "sender_full_name": "matklad",
        "timestamp": 1588754840
    },
    {
        "content": "<p>What this does, in terms of salsa, is ensures that at any time there's at most <code>lru_capacity</code> <strong>values</strong> in a given table</p>",
        "id": 196604044,
        "sender_full_name": "matklad",
        "timestamp": 1588754871
    },
    {
        "content": "<p>and values are evicted on LRU bases</p>",
        "id": 196604078,
        "sender_full_name": "matklad",
        "timestamp": 1588754882
    },
    {
        "content": "<blockquote>\n<p>I know very basic usage about it.</p>\n</blockquote>\n<p>I think you might want to spend some time reading the source code for salsa -- it's a very interesting and well-writen piece of technology :)</p>",
        "id": 196604124,
        "sender_full_name": "matklad",
        "timestamp": 1588754920
    },
    {
        "content": "<p>Will do! Thanks</p>",
        "id": 196604724,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1588755303
    },
    {
        "content": "<p>I agree. I had fun reading up on rust-analyzer salsa stuff :D</p>",
        "id": 196605276,
        "sender_full_name": "pksunkara",
        "timestamp": 1588755590
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> just to scare you more, pest currently also reads from another file in its derive macro (though we do offer an inline option now).</p>",
        "id": 196663603,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1588783923
    },
    {
        "content": "<p>I'm slowly pushing for a <code>proc_macro</code> API for loading a file (with the Rust lexer and getting <code>Span</code> information) which should be less problematic than just reading an arbitrary file, though.</p>",
        "id": 196663725,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1588783989
    },
    {
        "content": "<p>(because it tells the macro driver to do the file loading)</p>",
        "id": 196663759,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1588784005
    },
    {
        "content": "<p>Basically, <code>fn proc_macro::open(&amp;Path) -&gt; TokenStream</code>.</p>",
        "id": 196663937,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1588784084
    },
    {
        "content": "<p>if it returns a <code>TokenStream</code>, it can only be used for files that can be lexed as Rust though, right?</p>",
        "id": 196664019,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1588784134
    },
    {
        "content": "<p>Yes, but I think that's the majority of cases</p>",
        "id": 196664080,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1588784162
    },
    {
        "content": "<p>And I'm also in favor of making <code>TokenStream</code> able to represent invalid tokens</p>",
        "id": 196664159,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1588784189
    },
    {
        "content": "<p>(by e.g. making \"2.0\" <code>meta::tokens::TokenStream</code> closer to <code>rustc_lexer</code> than <code>proc_macro::TokenStream</code> would be one \"simple\" way of doing so)</p>",
        "id": 196664292,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1588784267
    },
    {
        "content": "<p>I have a proc_macro that processes a lot of files using regex (not <code>TokenStream</code>) and builds a <code>TokenStream</code>. I understand that this is bad practice, but I couldn't achieve this any other way. What exactly do we need to support this in the IDE? Maybe some kind of flag to denote a proc_macro as indeterministic? That would allow the proc_macro server to run it everytime.</p>",
        "id": 196743899,
        "sender_full_name": "pksunkara",
        "timestamp": 1588842311
    },
    {
        "content": "<p>I can imagine the wasm proc-macro should be <code>no-std</code> with some explict api for IO and other stuffs. In theory we could hook the IO api in wasm VM and detect if anything is changed in expansion and invalidate all related caches. </p>\n<p>But well, it is quite complicated ...</p>",
        "id": 196746456,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1588843975
    },
    {
        "content": "<p>A small step would just to be allowing proc macros to use <code>cargo:rerun-if-changed</code> like build scripts do.</p>",
        "id": 196832671,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1588886927
    }
]