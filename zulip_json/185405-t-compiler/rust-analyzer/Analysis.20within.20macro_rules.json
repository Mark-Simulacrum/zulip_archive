[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> I was thinking of trying to tackle at least partial analysis within macro_rules! bodies. My thought was that we could guarantee resolution of items like <code>$crate</code> and the paths that follow. Is there any existing issue based on that, or do you have any thoughts on whether we should approach something like that right now?</p>",
        "id": 206813319,
        "sender_full_name": "Paul Faria",
        "timestamp": 1597324729
    },
    {
        "content": "<p>I think the best approach would be to do it like how I proposed in <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/macro_rules.20highlighting\">https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/macro_rules.20highlighting</a></p>",
        "id": 206824383,
        "sender_full_name": "pksunkara",
        "timestamp": 1597330296
    },
    {
        "content": "<p>But there's no issue created for this yet.</p>",
        "id": 206824396,
        "sender_full_name": "pksunkara",
        "timestamp": 1597330305
    },
    {
        "content": "<p>I know that topic talks about analyzing content inside <code>macro!</code> but it is relevant to also analyzing content inside <code>macro_rules!</code></p>",
        "id": 206824629,
        "sender_full_name": "pksunkara",
        "timestamp": 1597330392
    },
    {
        "content": "<p>I looked into it this morning. The biggest issue is that the body of a macro_rules macro is just a token tree, and there's currently no analysis done if the macro itself isn't called. <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> could we sync at some point to go over a best path forward here? I have a couple ideas, but not sure which is the best approach:</p>\n<ul>\n<li>Add rules for <code>macro_rules</code> to the ungrammar<ul>\n<li>I imagine this would at least double the size of the ungrammar since it has to account for metavars within nearly all positions of the AST</li>\n</ul>\n</li>\n<li>Add a seperate ungrammar for bodies of <code>macro_rules</code> that \"forwards\" the kinds of the metavars into the AST</li>\n<li>Manually walk the token tree since there's a limited number of cases where goto/hover/syntax highlighting can be useful:<ul>\n<li>We could only recognize <code>NameRef</code>'s external to the macro if they were part of a <code>$crate</code> path</li>\n<li>We could recognize that metavars are namerefs for the macro pattern</li>\n<li>Might not be able to support going to a def within the macro from a name_ref</li>\n</ul>\n</li>\n</ul>",
        "id": 206934479,
        "sender_full_name": "Paul Faria",
        "timestamp": 1597415138
    },
    {
        "content": "<p>I don't think it makes sense to do any kind of \"fancy\" analysis of macro bodies any time soon</p>",
        "id": 207250967,
        "sender_full_name": "matklad",
        "timestamp": 1597752456
    },
    {
        "content": "<p>This is a deeply heurisitc thing, and it's not like we got the basic stuff working</p>",
        "id": 207250988,
        "sender_full_name": "matklad",
        "timestamp": 1597752475
    },
    {
        "content": "<p>What can, and should be done though, is supporting goto definition and compleiton for meta vars</p>",
        "id": 207251050,
        "sender_full_name": "matklad",
        "timestamp": 1597752507
    },
    {
        "content": "<p>clicking on <code>$foo</code> should bring one to <code>$foo:expr</code></p>",
        "id": 207251066,
        "sender_full_name": "matklad",
        "timestamp": 1597752521
    },
    {
        "content": "<p>I am not sure how to best achieve this, as macro machinery fundametally works with token trees, and not the syntax trees</p>",
        "id": 207251106,
        "sender_full_name": "matklad",
        "timestamp": 1597752554
    },
    {
        "content": "<p>I think the right approach here is just a huge wad of code in <code>ide</code> which uses <code>TokenID</code> to switch bridge the two representations</p>",
        "id": 207251144,
        "sender_full_name": "matklad",
        "timestamp": 1597752586
    },
    {
        "content": "<p>Could we at least have the ungrammar account for this within macro rules? <a href=\"https://doc.rust-lang.org/reference/macros-by-example.html\">https://doc.rust-lang.org/reference/macros-by-example.html</a></p>",
        "id": 207259226,
        "sender_full_name": "Paul Faria",
        "timestamp": 1597757520
    },
    {
        "content": "<p>I noticed it's not in the official grammar (the one being produced by wg-grammar), but only in the reference linked above.</p>",
        "id": 207259273,
        "sender_full_name": "Paul Faria",
        "timestamp": 1597757528
    },
    {
        "content": "<p>I don't think this should be handle by ungrammar -- macros are token trees</p>",
        "id": 207259374,
        "sender_full_name": "matklad",
        "timestamp": 1597757606
    },
    {
        "content": "<p>Ok, so <code>ide</code> would be the area to handle <code>macro_rules</code> in a special way?</p>",
        "id": 207259640,
        "sender_full_name": "Paul Faria",
        "timestamp": 1597757742
    },
    {
        "content": "<p>yup</p>",
        "id": 207259720,
        "sender_full_name": "matklad",
        "timestamp": 1597757770
    },
    {
        "content": "<p>IDE would call into mbe to make sense of macro rules invocations</p>",
        "id": 207259742,
        "sender_full_name": "matklad",
        "timestamp": 1597757784
    },
    {
        "content": "<p>should also stress our IR-mapping infrastructure (not that we have any :D ), as mbe are essentially are a separate IR</p>",
        "id": 207259784,
        "sender_full_name": "matklad",
        "timestamp": 1597757813
    },
    {
        "content": "<p>I did not even realize <code>mbe</code> existed. Ok I'll review this for the time being. Thanks for following up!</p>",
        "id": 207259991,
        "sender_full_name": "Paul Faria",
        "timestamp": 1597757906
    },
    {
        "content": "<p>Can someone please tag this issue as macro? <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/5972\">https://github.com/rust-analyzer/rust-analyzer/issues/5972</a></p>",
        "id": 209715826,
        "sender_full_name": "pksunkara",
        "timestamp": 1599775676
    },
    {
        "content": "<p>Done</p>",
        "id": 209742442,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1599802635
    }
]