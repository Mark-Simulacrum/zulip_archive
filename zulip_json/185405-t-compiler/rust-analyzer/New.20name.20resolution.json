[
    {
        "content": "<p>I am starting on integrated name-resoltion/macro-expansion in this branch: <a href=\"https://github.com/rust-analyzer/rust-analyzer/tree/name-resolution-2\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/tree/name-resolution-2\">https://github.com/rust-analyzer/rust-analyzer/tree/name-resolution-2</a></p>\n<p>I still don't have a clear picture in my head about how this all should work together, hopefully writing some code should make this clearer.</p>",
        "id": 159814557,
        "sender_full_name": "matklad",
        "timestamp": 1551560443
    },
    {
        "content": "<p>The current plan is to center nameres around <code>CrateDefMap</code> datastructure. </p>\n<p>In theory, <code>CrateDefMap</code> should contain information about all top-level declarations inside the macro-expanded crate. It should also be a home for the tree of modules. We will populate <code>CrateDefMap</code> in one go, but we should't recalculate it unless the user types something on the module top-level.</p>",
        "id": 159814631,
        "sender_full_name": "matklad",
        "timestamp": 1551560566
    },
    {
        "content": "<p>So, I must confess I am feeling a little bit like \"name resolution is stuck\" error :D</p>",
        "id": 160024016,
        "sender_full_name": "matklad",
        "timestamp": 1551808344
    },
    {
        "content": "<p>I haven't written any working code, but made this comment explaining the proposed algorithm and imitations I am running into: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/a5aa2fe7bb25fa0cb3a4f8c67d21121eb0fbb73d/crates/ra_hir/src/nameres/crate_def_map.rs#L1\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/a5aa2fe7bb25fa0cb3a4f8c67d21121eb0fbb73d/crates/ra_hir/src/nameres/crate_def_map.rs#L1\">https://github.com/rust-analyzer/rust-analyzer/blob/a5aa2fe7bb25fa0cb3a4f8c67d21121eb0fbb73d/crates/ra_hir/src/nameres/crate_def_map.rs#L1</a></p>",
        "id": 160024055,
        "sender_full_name": "matklad",
        "timestamp": 1551808384
    },
    {
        "content": "<p>The problem I am trying to solve is that I want to <em>not</em> rerun global name resolution after a change inside item body.</p>",
        "id": 160024091,
        "sender_full_name": "matklad",
        "timestamp": 1551808422
    },
    {
        "content": "<p>Without macros, this works by placing an intermediate query between parsing and name res, which returns a set of top-level items.</p>",
        "id": 160024159,
        "sender_full_name": "matklad",
        "timestamp": 1551808456
    },
    {
        "content": "<p>With macros, things get interesting. Consider this code:</p>\n<div class=\"codehilite\"><pre><span></span>lazy_static! {\n    static ref HASHMAP: HashMap&lt;u32, &amp;&#39;static str&gt; = {\n        let mut m = HashMap::new();\n        m.insert(0, &quot;foo&quot;);\n        m.insert(1, &quot;bar&quot;);\n        m.insert(2, &quot;baz&quot;);\n        m\n    };\n}\n</pre></div>",
        "id": 160024189,
        "sender_full_name": "matklad",
        "timestamp": 1551808489
    },
    {
        "content": "<p>Ideally, we should not re-run name resolution if we remove <code>m.insert(1, \"bar\");</code> line: we should re-run only the lazy_static macro itself, check that it produced the same items as the last time, and be done with it.</p>",
        "id": 160024264,
        "sender_full_name": "matklad",
        "timestamp": 1551808560
    },
    {
        "content": "<p>This wont work for naive intermediate query, which stores input token trees for macro calls.</p>",
        "id": 160024349,
        "sender_full_name": "matklad",
        "timestamp": 1551808606
    },
    {
        "content": "<p>The fix would be to apply intermediate query recursively: instead of storing token tree itself in the result, store only some macro ID, and than have an <code>expand macro id to top-level items query</code>.</p>",
        "id": 160024468,
        "sender_full_name": "matklad",
        "timestamp": 1551808699
    },
    {
        "content": "<p>However, I don't think I can assign an id to the macro invocation: assigning Ids needs results of name resolution, and we are running name resolution right now! That is, the <code>HirFileId</code> trick we use today in ra to identify macros works only because macros are not really a part of name resolution</p>",
        "id": 160024527,
        "sender_full_name": "matklad",
        "timestamp": 1551808776
    },
    {
        "content": "<p>cc <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> this is an interesting question :) Does anybody understands the problem I am trying to solve? Do we have any suggestions? :)</p>",
        "id": 160024633,
        "sender_full_name": "matklad",
        "timestamp": 1551808823
    },
    {
        "content": "<p>Why does assigning IDs require the results of name resolution? can't you do an 'nth macro in file x' type of ID?</p>",
        "id": 160024699,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551808891
    },
    {
        "content": "<p>I can do that if <code>x</code> is a <code>FileId</code>. If <code>x</code> is a file produced by a macro, I am unsure how to do that</p>",
        "id": 160024783,
        "sender_full_name": "matklad",
        "timestamp": 1551808939
    },
    {
        "content": "<p>though the query expanding that would depend on name resolution then, wouldn't it... <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 160024794,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551808952
    },
    {
        "content": "<p>yeah, precisely</p>",
        "id": 160024813,
        "sender_full_name": "matklad",
        "timestamp": 1551808971
    },
    {
        "content": "<p>I see two possible \"solutions\" here:</p>\n<ul>\n<li>concede that deleting <code>m.insert(1, \"bar\");</code> line invalidates name resolution</li>\n<li>(not sure if this even is possible) add an explicit fixed-point \"round\" to the query parameter. That way, we can refer, via queries to macros from current-round - 1.</li>\n</ul>",
        "id": 160025019,
        "sender_full_name": "matklad",
        "timestamp": 1551809129
    },
    {
        "content": "<blockquote>\n<ul>\n<li>concede that deleting <code>m.insert(1, \"bar\");</code> line invalidates name resolution</li>\n</ul>\n</blockquote>\n<p>How bad would this be in practice?</p>",
        "id": 160025824,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1551809771
    },
    {
        "content": "<p>worst case pretty horrible</p>\n<div class=\"codehilite\"><pre><span></span>#[cfg(test)]\nmod tests {\n    loooots of code\n}\n</pre></div>",
        "id": 160025923,
        "sender_full_name": "matklad",
        "timestamp": 1551809848
    },
    {
        "content": "<p><code>cfg(test)</code> here is more or less a macro that applies to the following item</p>",
        "id": 160025949,
        "sender_full_name": "matklad",
        "timestamp": 1551809869
    },
    {
        "content": "<p>similarly, derives are macros</p>",
        "id": 160025953,
        "sender_full_name": "matklad",
        "timestamp": 1551809874
    },
    {
        "content": "<p>so I don't know if this would work but could you assign ids based on something besides name res? like... a weird hash of all potential names?</p>",
        "id": 160026534,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1551810255
    },
    {
        "content": "<p>make it a bit fuzzy, sort of a best guess</p>",
        "id": 160026551,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1551810271
    },
    {
        "content": "<p>we don't assign ids based on name refs. An ID is an interned location, where location is something like \"the nth macro in the foo file\"</p>",
        "id": 160026779,
        "sender_full_name": "matklad",
        "timestamp": 1551810427
    },
    {
        "content": "<p>for macro expansion, locations should contain a macro expansion backtrace \"to find this thing, go to the nth macro in file foo, than to kth macro inside that macro's expansion, then to the mth item in the second expansion\".</p>",
        "id": 160026900,
        "sender_full_name": "matklad",
        "timestamp": 1551810502
    },
    {
        "content": "<p>And we can't <em>use</em> such ids until macro expansion is fully complete, if we do macro exapnsion in a single query. If we do macro expansion as fine-grained queries this works, but fine-grained queries don't work with fixed-point iteration nature of macro expansion</p>",
        "id": 160027000,
        "sender_full_name": "matklad",
        "timestamp": 1551810583
    },
    {
        "content": "<p>So, the bad intrraction here is that we want \"expand single macro\" to be a query, such that we can project items out of the full syntax trees and ignore local modifications. At the same time, we have to use \"expand all the macros\" mega query to avoid cyclic queries.</p>",
        "id": 160027227,
        "sender_full_name": "matklad",
        "timestamp": 1551810703
    },
    {
        "content": "<p>Why do you get cyclic queries then? Because macros can bring names into scope that change behavior?</p>",
        "id": 160027376,
        "sender_full_name": "detrumi",
        "timestamp": 1551810795
    },
    {
        "content": "<p>More or less: at it's heart, nameresoluton and macro-expansion is a fixed point iteration style algorithm. If you implement this algorithm using a naive recursion, you can get an infinite loop</p>",
        "id": 160027549,
        "sender_full_name": "matklad",
        "timestamp": 1551810894
    },
    {
        "content": "<p>I wonder if Salsa could add special support for 'fixpoint' queries</p>",
        "id": 160027562,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551810901
    },
    {
        "content": "<p><a href=\"https://github.com/salsa-rs/salsa/issues/9\" target=\"_blank\" title=\"https://github.com/salsa-rs/salsa/issues/9\">https://github.com/salsa-rs/salsa/issues/9</a> :-)</p>",
        "id": 160027606,
        "sender_full_name": "matklad",
        "timestamp": 1551810929
    },
    {
        "content": "<p>aha :)</p>",
        "id": 160027619,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551810941
    },
    {
        "content": "<p>I am not sure what \"salsa-style fixed point\" means though...</p>",
        "id": 160027632,
        "sender_full_name": "matklad",
        "timestamp": 1551810956
    },
    {
        "content": "<p>yeah...</p>",
        "id": 160027789,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551811040
    },
    {
        "content": "<blockquote>\n<p>Why do you get cyclic queries then? Because macros can bring names into scope that change behavior?</p>\n</blockquote>\n<p>yes, to expand a macro we need to resolve its name first, and to do name resolution we need to expand macros, so naively expressing that in queries leads to a cycle immediately...</p>",
        "id": 160027907,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551811104
    },
    {
        "content": "<p>Right, but there should be some \"correct\" order in which to resolve things</p>",
        "id": 160028004,
        "sender_full_name": "detrumi",
        "timestamp": 1551811168
    },
    {
        "content": "<p>Though maybe then you lose the opportunity to look at a piece of code independently, if it requires resolution of another part first</p>",
        "id": 160028172,
        "sender_full_name": "detrumi",
        "timestamp": 1551811255
    },
    {
        "content": "<p>maybe the resolution of the macro could be part of the input of the query? so we'd have a <code>expand(TokenTree, ResolvedMacro) -&gt; TokenTree</code> query</p>",
        "id": 160028532,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551811430
    },
    {
        "content": "<p>oh, but the result of that query would change, of course</p>",
        "id": 160028612,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551811468
    },
    {
        "content": "<p>though there could be a lowering step after that</p>",
        "id": 160028625,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551811483
    },
    {
        "content": "<p>wait, that sounds like it could work?</p>",
        "id": 160028709,
        "sender_full_name": "matklad",
        "timestamp": 1551811539
    },
    {
        "content": "<p>so <code>expand(LoweredMacroCall, ResolvedMacro) -&gt; Vec&lt;LoweredModuleItems&gt;</code></p>",
        "id": 160028724,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551811550
    },
    {
        "content": "<p>got to run, will think about htat</p>",
        "id": 160028736,
        "sender_full_name": "matklad",
        "timestamp": 1551811559
    },
    {
        "content": "<p>hm, no :(</p>",
        "id": 160028860,
        "sender_full_name": "matklad",
        "timestamp": 1551811623
    },
    {
        "content": "<p>You still have <code>TokenTree</code> inside <code>LoweredMacroCall</code></p>",
        "id": 160028876,
        "sender_full_name": "matklad",
        "timestamp": 1551811637
    },
    {
        "content": "<p>and <code>LoweredMouduleItems</code> can contains <code>LowerMacroCall</code>s</p>",
        "id": 160028905,
        "sender_full_name": "matklad",
        "timestamp": 1551811655
    },
    {
        "content": "<p>we need to <strong>fully</strong> expand <code>-&gt; Vec&lt;LMI&gt;</code>, but to do that, we need to add nameres as an input to the query</p>",
        "id": 160029005,
        "sender_full_name": "matklad",
        "timestamp": 1551811713
    },
    {
        "content": "<p>the <code>LoweredMacroCall</code> could be just an ID, I think, but the return value is a problem, yeah...</p>",
        "id": 160029203,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551811835
    },
    {
        "content": "<p>Adding the whole macro scope to the input would be too much, I guess...</p>",
        "id": 160029588,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551812121
    },
    {
        "content": "<blockquote>\n<p>(not sure if this even is possible) add an explicit fixed-point \"round\" to the query parameter. That way, we can refer, via queries to macros from current-round - 1.</p>\n</blockquote>\n<p>have you given this more thought? I had thought this, or something like it (in terms of explicitly modeling the state of the fixed-point iteration in some fashion) would be necessary</p>",
        "id": 160192255,
        "sender_full_name": "pnkfelix",
        "timestamp": 1551961364
    },
    {
        "content": "<p>yep, I've thought about this a bit: even with explicit <code>round</code> parameter, it seems like it could work.</p>\n<p>Specifically, at round <code>n</code> a macro call will be represented not as a token tree, but as <code>nth macro at x file at round n-1</code>.</p>",
        "id": 160195703,
        "sender_full_name": "matklad",
        "timestamp": 1551964476
    },
    {
        "content": "<p>Though I think for the first implementation it makes sense to stick \"typing inside a macro invalidates name resolution\" strategy</p>",
        "id": 160195739,
        "sender_full_name": "matklad",
        "timestamp": 1551964515
    },
    {
        "content": "<ul>\n<li>name res is already too complicated, and making salsa aware of it will make it even more complex. </li>\n<li>it seems to me that, because something like <code>syn</code> will bail on incomplete code, we are up for some recomputations anyway. Like, if you remove a <code>,</code> in a filed declaration, the <code>Derive(Serialize)</code> would not produce the same set of items.</li>\n</ul>",
        "id": 160195883,
        "sender_full_name": "matklad",
        "timestamp": 1551964676
    },
    {
        "content": "<p>Made some progress today for the simple \"typing inside top-level macro invalidates the whole crate\" approach</p>",
        "id": 160581195,
        "sender_full_name": "matklad",
        "timestamp": 1552405317
    },
    {
        "content": "<p>The actual name resolution is empty at the moment <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/8120d763459ce5dff32057d1d8ee972cd9b64d34/crates/ra_hir/src/nameres/crate_def_map/collector.rs#L91-L94\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/8120d763459ce5dff32057d1d8ee972cd9b64d34/crates/ra_hir/src/nameres/crate_def_map/collector.rs#L91-L94\">https://github.com/rust-analyzer/rust-analyzer/blob/8120d763459ce5dff32057d1d8ee972cd9b64d34/crates/ra_hir/src/nameres/crate_def_map/collector.rs#L91-L94</a> :D</p>\n<p>However, there's some code that does recursive macro expansion of macro rules, while walking the crate</p>",
        "id": 160581321,
        "sender_full_name": "matklad",
        "timestamp": 1552405399
    },
    {
        "content": "<p>An interesting tidbit is that in this approach we are going to expand each macro call twice:</p>\n<p>First, we eagerly expand the macro during name resolution, because we can't queryify it. Than, after name resolution is done, if some code needs to look inside the macro, it'll do so via query, which would use results of name resolution to resolve the macro and than do macro expansion the second time.</p>",
        "id": 160581611,
        "sender_full_name": "matklad",
        "timestamp": 1552405571
    },
    {
        "content": "<p>In other words, perhaps slightly less confusing, we need to assign DefIds during name resolution, and DefId mentions the file (which could be a macro) where the Def comes from.</p>",
        "id": 160581671,
        "sender_full_name": "matklad",
        "timestamp": 1552405634
    },
    {
        "content": "<p>We synthesize some files on the fly, so we need to make sure that later, when we query for Def's file, we get the same file we created during name resolution.</p>",
        "id": 160581833,
        "sender_full_name": "matklad",
        "timestamp": 1552405750
    },
    {
        "content": "<p>I think this is more or less ready now: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/968\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/968\">https://github.com/rust-analyzer/rust-analyzer/pull/968</a></p>",
        "id": 160959831,
        "sender_full_name": "matklad",
        "timestamp": 1552757213
    },
    {
        "content": "<p>The PR is now merged, and I think it forms a pretty good basis for name resolution.  <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> perhaps we could do a bit of a brainstorming about next steps for nameres librarification? It'd be cool to come up with a list of action items.</p>",
        "id": 161043552,
        "sender_full_name": "matklad",
        "timestamp": 1552902812
    },
    {
        "content": "<p>okay I should probably take a closer look at the PR itself before I try to figure out what the next steps are</p>",
        "id": 161049686,
        "sender_full_name": "pnkfelix",
        "timestamp": 1552909135
    },
    {
        "content": "<p>The PR is massive, because it also deletes existing impl. I suggest taking a look at the first commit (it has only the minimal infrastructure), and than at the current state of code in <code>ra_hir/src/nameres</code></p>",
        "id": 161050374,
        "sender_full_name": "matklad",
        "timestamp": 1552909815
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> did you get a chance to look at the PR?</p>",
        "id": 161334208,
        "sender_full_name": "matklad",
        "timestamp": 1553165783
    },
    {
        "content": "<p>no sorry not yet</p>",
        "id": 161334215,
        "sender_full_name": "pnkfelix",
        "timestamp": 1553165798
    },
    {
        "content": "<p>I'll try to dive into it after I follow up on some unrelated performance issues with the compiler that I am looking at now</p>",
        "id": 161334253,
        "sender_full_name": "pnkfelix",
        "timestamp": 1553165854
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span>  I'll do other stuff meanwhile then: it seems like name resolution could benefit from a somewhat principled planing/designing, etc :)</p>",
        "id": 161334515,
        "sender_full_name": "matklad",
        "timestamp": 1553166096
    }
]