[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> Hey, so I'm slowly digging into integrating the rust-analyzer into the vscode and been wondering about the current distribution</p>",
        "id": 195861794,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588262696
    },
    {
        "content": "<p>Looking at the current infrastructure, it seems to be very tied to the current extension and installing it alongside of it</p>",
        "id": 195861885,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588262730
    },
    {
        "content": "<p>Apart from providing the best experience coupled with a dedicated plugin, is there any other technical reason not to support a regular <code>cargo install</code> means of distribution?</p>",
        "id": 195861989,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588262764
    },
    {
        "content": "<p>Is it because we'd like to continue providing rolling releases without the semver hassle?</p>",
        "id": 195862141,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588262812
    },
    {
        "content": "<p>So, cargo install is supported</p>",
        "id": 195863025,
        "sender_full_name": "matklad",
        "timestamp": 1588263211
    },
    {
        "content": "<p>or rather, it just works</p>",
        "id": 195863036,
        "sender_full_name": "matklad",
        "timestamp": 1588263216
    },
    {
        "content": "<p>(with <code>--git=...</code></p>",
        "id": 195863051,
        "sender_full_name": "matklad",
        "timestamp": 1588263225
    },
    {
        "content": "<p>But it's kind of unpleasant, as it builds stuff from source. Not that building rust-analyzer is hard (we have zero c deps, which is even checked on CI), but it's not super fast</p>",
        "id": 195863156,
        "sender_full_name": "matklad",
        "timestamp": 1588263266
    },
    {
        "content": "<p>Like, if <code>cargo install</code> could do binary packages, we'd do that</p>",
        "id": 195863247,
        "sender_full_name": "matklad",
        "timestamp": 1588263309
    },
    {
        "content": "<p>ah right, I missed that</p>",
        "id": 195863474,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588263397
    },
    {
        "content": "<p>I wouldn't call that the infra is reallied tied to the extension. </p>\n<p>Publishing-wise, we just ship binaries to GH releases.</p>\n<p>On the extension side, we basically need just a path to the <code>rust-analyzer</code> executable. But we also implement \"download from github\" thing</p>",
        "id": 195863528,
        "sender_full_name": "matklad",
        "timestamp": 1588263426
    },
    {
        "content": "<p>I was scouring the code and referred to the cargo xtask install ra</p>",
        "id": 195863572,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588263452
    },
    {
        "content": "<p>which does a lot of vscode  checking and tweaking, hence my original comment</p>",
        "id": 195863587,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588263461
    },
    {
        "content": "<p>Yeah, <code>cargo xtask install</code> installs both the binary and the vscode extension</p>",
        "id": 195863632,
        "sender_full_name": "matklad",
        "timestamp": 1588263481
    },
    {
        "content": "<p>I imagine the alternative is to download the release directly from <a href=\"https://github.com/rust-analyzer/rust-analyzer/releases/download/nightly/rust-analyzer-linux\" title=\"https://github.com/rust-analyzer/rust-analyzer/releases/download/nightly/rust-analyzer-linux\">https://github.com/rust-analyzer/rust-analyzer/releases/download/nightly/rust-analyzer-linux</a> or similar?</p>",
        "id": 195863662,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588263482
    },
    {
        "content": "<p>btw it feels nice to specify \"rust-analyzer\" as the LSP server path in the existing extension and most of the stuff just works out of box :)</p>",
        "id": 195863731,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588263520
    },
    {
        "content": "<p>(modulo applySourceChange and whatnot)</p>",
        "id": 195863761,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588263536
    },
    {
        "content": "<p>Yup (in VS Code, we do this(=download release directly) in <code>bootstrapServer</code> funciont)</p>",
        "id": 195863766,
        "sender_full_name": "matklad",
        "timestamp": 1588263539
    },
    {
        "content": "<p>Argh, applySourceChange is a big one tough</p>",
        "id": 195863800,
        "sender_full_name": "matklad",
        "timestamp": 1588263556
    },
    {
        "content": "<p>will hopefully taclke it next week</p>",
        "id": 195863814,
        "sender_full_name": "matklad",
        "timestamp": 1588263564
    },
    {
        "content": "<p>btw why codeaction/textedit from LSP wasn't enough?</p>",
        "id": 195863842,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588263582
    },
    {
        "content": "<p>We want to control the position of the cursor</p>",
        "id": 195863977,
        "sender_full_name": "matklad",
        "timestamp": 1588263636
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/-4PTa3Kx21T0R8_63YIa_OnX/Peek-2020-04-30-18-21.gif\" title=\"Peek-2020-04-30-18-21.gif\">Peek-2020-04-30-18-21.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/-4PTa3Kx21T0R8_63YIa_OnX/Peek-2020-04-30-18-21.gif\" title=\"Peek-2020-04-30-18-21.gif\"><img src=\"/user_uploads/4715/-4PTa3Kx21T0R8_63YIa_OnX/Peek-2020-04-30-18-21.gif\"></a></div>",
        "id": 195864072,
        "sender_full_name": "matklad",
        "timestamp": 1588263687
    },
    {
        "content": "<p>The following won't be possible with stock code actions</p>",
        "id": 195864118,
        "sender_full_name": "matklad",
        "timestamp": 1588263705
    },
    {
        "content": "<p>as well as \"ctrl+. on <code>mod foo;</code> creates&amp;opens <a href=\"http://foo.rs\" title=\"http://foo.rs\">foo.rs</a> file\"</p>",
        "id": 195864186,
        "sender_full_name": "matklad",
        "timestamp": 1588263724
    },
    {
        "content": "<p>while we are at it <span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span> what are your thoughts on mering TS extensions?</p>",
        "id": 195864293,
        "sender_full_name": "matklad",
        "timestamp": 1588263793
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/cargo.20install/near/195863977\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/cargo.20install/near/195863977\">said</a>:</p>\n<blockquote>\n<p>We want to control the position of the cursor</p>\n</blockquote>\n<p>gotcha</p>",
        "id": 195864335,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588263815
    },
    {
        "content": "<p>I've looked, and they both clock at around 2k lines of code, which is not that bad</p>",
        "id": 195864345,
        "sender_full_name": "matklad",
        "timestamp": 1588263820
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/cargo.20install/near/195864293\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/cargo.20install/near/195864293\">said</a>:</p>\n<blockquote>\n<p>while we are at it <span class=\"user-mention silent\" data-user-id=\"153740\">Igor Matuszewski</span> what are your thoughts on mering TS extensions?</p>\n</blockquote>\n<p>I think that'd be ideal</p>",
        "id": 195864376,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588263835
    },
    {
        "content": "<p>I'd host something like a <code>rust-lang/vscode-rust</code> personally, though</p>",
        "id": 195864439,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588263850
    },
    {
        "content": "<p>to sort of make it more official/bless it</p>",
        "id": 195864462,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588263861
    },
    {
        "content": "<p>Which is the high-order bit here? A separate repo, or a <code>rust-lang</code> org?</p>",
        "id": 195864502,
        "sender_full_name": "matklad",
        "timestamp": 1588263884
    },
    {
        "content": "<p>not sure how that would impede the current dev workflow for rust-analyzer, I imagine that's something that has to be talked over separately</p>",
        "id": 195864510,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588263889
    },
    {
        "content": "<p>I sort-of find it usful to have the typescript and rust code in the same repository</p>",
        "id": 195864529,
        "sender_full_name": "matklad",
        "timestamp": 1588263899
    },
    {
        "content": "<p>well, both I imagine</p>",
        "id": 195864537,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588263902
    },
    {
        "content": "<p>Ideally we shouldn't really tie them in any way</p>",
        "id": 195864562,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588263918
    },
    {
        "content": "<p>Not sure....</p>",
        "id": 195864574,
        "sender_full_name": "matklad",
        "timestamp": 1588263926
    },
    {
        "content": "<p>Like, we <em>do</em> custom things, and when you hack on a custom thing, it's very conveient to me able to fix both sides at once</p>",
        "id": 195864630,
        "sender_full_name": "matklad",
        "timestamp": 1588263952
    },
    {
        "content": "<p>I personally feel like this sends a wrong message in the sense that it's only expected to work best for vscode</p>",
        "id": 195864697,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588263964
    },
    {
        "content": "<p>I too feel the burden when you need to juggle 3 vscode instances, output to a log file and debug the spawned extension, which the more streamlined approach helps with</p>",
        "id": 195864794,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588264008
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/3561\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/3561\">https://github.com/rust-analyzer/rust-analyzer/pull/3561</a> is a good example of feature which would be pretty awkward to do across several repos</p>",
        "id": 195864805,
        "sender_full_name": "matklad",
        "timestamp": 1588264014
    },
    {
        "content": "<p>but I'm not sure that's the right way - otherwise we'd have to lump all of the editors' code together with rust-analyzer</p>",
        "id": 195864840,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588264025
    },
    {
        "content": "<blockquote>\n<p>it's only expected to work best for vscode</p>\n</blockquote>\n<p>It's quite literary true though: LSP impls in other editors tend to be sup bar</p>",
        "id": 195864948,
        "sender_full_name": "matklad",
        "timestamp": 1588264080
    },
    {
        "content": "<p>one thing that <em>is</em> annoying, though, is that you get a lot of bug reports for the vscode extension repository, which 99% should be meant for the LSP itself</p>",
        "id": 195865000,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588264088
    },
    {
        "content": "<p>as someone who uses RA from another editor (and sometimes updates the integration), I think it's still useful to have one 'reference' implementation</p>",
        "id": 195865038,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1588264106
    },
    {
        "content": "<p>TBH, I'd be happy to have at least VS Code, Emacs and Vim plugins in the repo.</p>",
        "id": 195865120,
        "sender_full_name": "matklad",
        "timestamp": 1588264150
    },
    {
        "content": "<p>we'll have an official VSCode extension and the official IDE tool as Rust Analyzer, I think that should be easily discoverable for the reference implementation, personally</p>",
        "id": 195865128,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588264157
    },
    {
        "content": "<p>But at the moment Emacs-LSP preferes a monorepo wit all extensions, and vim has five different LSP plugins none of which is a clear favorite</p>",
        "id": 195865191,
        "sender_full_name": "matklad",
        "timestamp": 1588264189
    },
    {
        "content": "<p>at least neovim has it easy <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 195865256,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588264206
    },
    {
        "content": "<p>You mean the neovim-lsp which is in the unrelease 0.5 branch?</p>",
        "id": 195865305,
        "sender_full_name": "matklad",
        "timestamp": 1588264230
    },
    {
        "content": "<p>the one by autozimu, last time I've checked it's been the most popular one</p>",
        "id": 195865358,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588264261
    },
    {
        "content": "<p>but then again they added a support for LSP in trunk? or so I recall</p>",
        "id": 195865410,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588264284
    },
    {
        "content": "<p>debatable: <a href=\"https://www.reddit.com/r/rust/comments/g5ckqi/rfc_transition_to_rustanalyzer_as_our_official/fo90t1c/\" title=\"https://www.reddit.com/r/rust/comments/g5ckqi/rfc_transition_to_rustanalyzer_as_our_official/fo90t1c/\">https://www.reddit.com/r/rust/comments/g5ckqi/rfc_transition_to_rustanalyzer_as_our_official/fo90t1c/</a></p>",
        "id": 195865534,
        "sender_full_name": "matklad",
        "timestamp": 1588264338
    },
    {
        "content": "<p>I <em>think</em> coc.nvim is known for \"works best\", and the <code>nvim-lsp</code> (which I talked above) is going to be build in</p>",
        "id": 195865596,
        "sender_full_name": "matklad",
        "timestamp": 1588264371
    },
    {
        "content": "<p>gotcha</p>",
        "id": 195865625,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588264389
    },
    {
        "content": "<p>I was talking about <a href=\"https://github.com/autozimu/LanguageClient-neovim\" title=\"https://github.com/autozimu/LanguageClient-neovim\">https://github.com/autozimu/LanguageClient-neovim</a></p>",
        "id": 195865629,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588264392
    },
    {
        "content": "<p>should we move the discussion merging off this topic btw?</p>",
        "id": 195865713,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588264430
    },
    {
        "content": "<p>yup, right, there was a dedidated one</p>",
        "id": 195865807,
        "sender_full_name": "matklad",
        "timestamp": 1588264452
    }
]