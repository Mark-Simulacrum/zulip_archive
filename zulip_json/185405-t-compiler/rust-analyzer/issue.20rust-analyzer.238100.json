[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> I am currently looking into <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8100\">https://github.com/rust-analyzer/rust-analyzer/issues/8100</a>.</p>\n<p>I think the substitution might be wrong here:</p>\n<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/92b9e5ef3c03d51713ff5fa32cd58bdf97701b5e/crates/hir_ty/src/infer/expr.rs#L897\">https://github.com/rust-analyzer/rust-analyzer/blob/92b9e5ef3c03d51713ff5fa32cd58bdf97701b5e/crates/hir_ty/src/infer/expr.rs#L897</a></p>\n<p>Logging:</p>\n<div class=\"codehilite\"><pre><span></span><code>StructId(0) = Box\nStructId(1) = Foo\n[crates/hir_ty/src/infer/expr.rs:895] canonicalized_receiver.decanonicalize_ty(ty) = AdtId(StructId(StructId(1)))&lt;[?0 := Int(I32)]&gt;\n[crates/hir_ty/src/infer/expr.rs:896] generics(self.db.upcast(), func.into()) = Generics {\n    def: FunctionId(\n        FunctionId(\n            4,\n        ),\n    ),\n    params: GenericParams {\n        types: Arena {\n            len: 0,\n            data: [],\n        },\n        lifetimes: Arena {\n            len: 1,\n            data: [\n                LifetimeParamData {\n                    name: Name(\n                        Text(\n                            &quot;&#39;a&quot;,\n                        ),\n                    ),\n                },\n            ],\n        },\n        consts: Arena {\n            len: 0,\n            data: [],\n        },\n        where_predicates: [],\n    },\n    parent_generics: Some(\n        Generics {\n            def: ImplId(\n                ImplId(\n                    1,\n                ),\n            ),\n            params: GenericParams {\n                types: Arena {\n                    len: 1,\n                    data: [\n                        TypeParamData {\n                            name: Some(\n                                Name(\n                                    Text(\n                                        &quot;T&quot;,\n                                    ),\n                                ),\n                            ),\n                            default: None,\n                            provenance: TypeParamList,\n                        },\n                    ],\n                },\n                lifetimes: Arena {\n                    len: 0,\n                    data: [],\n                },\n                consts: Arena {\n                    len: 0,\n                    data: [],\n                },\n                where_predicates: [],\n            },\n            parent_generics: None,\n        },\n    ),\n}\n[crates/hir_ty/src/infer/expr.rs:897] self.substs_for_method_call(generics, generic_args, &amp;ty) = [?0 := ?5]\n</code></pre></div>\n<p>I would've expected that we would have applied the subst from <code>ty</code> (<code>?0 := Int(I32)</code>) instead of <code>?0 := ?5</code> (new inference var).</p>\n<p>Am I missing something?</p>",
        "id": 240773590,
        "sender_full_name": "cynecx",
        "timestamp": 1622408162
    },
    {
        "content": "<p>no, that happens later through</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">unify</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">expected_receiver_ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">actual_receiver_ty</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 240773808,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622408490
    },
    {
        "content": "<p>Ahh</p>",
        "id": 240773815,
        "sender_full_name": "cynecx",
        "timestamp": 1622408512
    },
    {
        "content": "<p>lol i should've seen that, i didn't read far enough</p>",
        "id": 240773883,
        "sender_full_name": "cynecx",
        "timestamp": 1622408578
    },
    {
        "content": "<p>keep in mind you might have something like <code>impl&lt;A, B&gt; SomeType&lt;SomeOtherType&lt;B&gt;, StillSomeOtherType&lt;A&gt;&gt;</code></p>",
        "id": 240773960,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622408656
    },
    {
        "content": "<p>so you can't just take the substs</p>",
        "id": 240773967,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622408668
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[crates/hir_ty/src/infer/expr.rs:928] expected_receiver_ty = (&amp;&#39;static AdtId(StructId(StructId(0)))&lt;[?0 := AdtId(StructId(StructId(1)))&lt;[?0 := ?2]&gt;]&gt;)\n[crates/hir_ty/src/infer/expr.rs:928] actual_receiver_ty = (&amp;&#39;static AdtId(StructId(StructId(1)))&lt;[?0 := Int(I32)]&gt;)\n</code></pre></div>\n<p>should unify \"work\" on that? that looks wrong? (Or I might have a different understanding what unify should do lol)</p>",
        "id": 240774245,
        "sender_full_name": "cynecx",
        "timestamp": 1622409105
    },
    {
        "content": "<p>oh wait</p>",
        "id": 240774335,
        "sender_full_name": "cynecx",
        "timestamp": 1622409237
    },
    {
        "content": "<p>well nvm, idk this might be over my head xD. i might pick this up later.</p>",
        "id": 240774499,
        "sender_full_name": "cynecx",
        "timestamp": 1622409444
    },
    {
        "content": "<p>those are completely different structs</p>",
        "id": 240776124,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622411943
    },
    {
        "content": "<p>ah, the expected receiver ty is wrapped in something additional</p>",
        "id": 240776135,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622411972
    },
    {
        "content": "<p>yeah I don't think this is trivial to do, but I don't remember the details</p>",
        "id": 240776178,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622412003
    },
    {
        "content": "<p>On second thought:</p>\n<p>test case:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[lang = </span><span class=\"s\">\"deref\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Deref</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Target</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">deref</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span>::<span class=\"n\">Target</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Deref</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Target</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">deref</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span>::<span class=\"n\">Target</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">get_inner</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// fn get_self&lt;'a&gt;(self: &amp;'a Box&lt;Self&gt;) -&gt; &amp;'a Self {}</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">boxed</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"mi\">0_</span><span class=\"k\">i32</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bad1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">boxed</span><span class=\"p\">.</span><span class=\"n\">get_inner</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Here <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/10b15b27f2f4bee6de63f66c344f741482becd21/crates/hir_ty/src/infer/expr.rs#L883\">https://github.com/rust-analyzer/rust-analyzer/blob/10b15b27f2f4bee6de63f66c344f741482becd21/crates/hir_ty/src/infer/expr.rs#L883</a>, we are resolving the method, which returns:</p>\n<div class=\"codehilite\"><pre><span></span><code>[crates/hir_ty/src/infer/expr.rs:893] resolved = Some(\n    (\n        AdtId(StructId(StructId(1)))&lt;[?0 := Int(I32)]&gt;, // Foo&lt;i32&gt;\n        FunctionId(\n            3, // get_inner\n        ),\n    ),\n)\n[crates/hir_ty/src/infer/expr.rs:895] canonicalized_receiver.decanonicalize_ty(dbg!(ty)) = AdtId(StructId(StructId(1)))&lt;[?0 := Int(I32)]&gt; //  derefed_receiver_ty = Foo&lt;i32&gt;\n</code></pre></div>\n<p>This (<code>derefed_receiver_ty</code>) seems wrong to me because we aren't actually deref'ing anything except while resolving the method because the receiver type accepts the \"underefed\" type (<code>Box&lt;Foo&lt;i32&gt;&gt;</code>).</p>",
        "id": 240850963,
        "sender_full_name": "cynecx",
        "timestamp": 1622477979
    },
    {
        "content": "<p>yes, the determination of the receiver type is wrong</p>",
        "id": 240851884,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622478658
    },
    {
        "content": "<p>Okay, I may or may not have found the issue</p>",
        "id": 240854851,
        "sender_full_name": "cynecx",
        "timestamp": 1622480894
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/10b15b27f2f4bee6de63f66c344f741482becd21/crates/hir_ty/src/method_resolution.rs#L724\">https://github.com/rust-analyzer/rust-analyzer/blob/10b15b27f2f4bee6de63f66c344f741482becd21/crates/hir_ty/src/method_resolution.rs#L724</a></p>",
        "id": 240854860,
        "sender_full_name": "cynecx",
        "timestamp": 1622480899
    },
    {
        "content": "<p>We are using <code>self_ty.value</code> here which might differ from the actual receiver type.</p>",
        "id": 240854922,
        "sender_full_name": "cynecx",
        "timestamp": 1622480965
    },
    {
        "content": "<p>We should've used <code>receiver_ty: Option&lt;&amp;Canonical&lt;Ty&gt;&gt;</code> instead here</p>",
        "id": 240854946,
        "sender_full_name": "cynecx",
        "timestamp": 1622480995
    },
    {
        "content": "<p>Hm, it seems that the type also has an extra ref <code>&amp;'static &lt;receiver_ty&gt;</code></p>",
        "id": 240855064,
        "sender_full_name": "cynecx",
        "timestamp": 1622481083
    },
    {
        "content": "<p>the logic here is complicated lol</p>",
        "id": 240855151,
        "sender_full_name": "cynecx",
        "timestamp": 1622481129
    },
    {
        "content": "<p>i am not even sure i totally understand whats going on here</p>",
        "id": 240855170,
        "sender_full_name": "cynecx",
        "timestamp": 1622481153
    },
    {
        "content": "<p>Oh nice, it seems to actually work that way:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">receiver_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">receiver_ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">receiver_ty</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">receiver_ty</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">Interner</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">TyKind</span>::<span class=\"n\">Ref</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">receiver_ty</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"n\">self_ty</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">callback</span><span class=\"p\">(</span><span class=\"n\">receiver_ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 240855337,
        "sender_full_name": "cynecx",
        "timestamp": 1622481295
    },
    {
        "content": "<p>but i don't think that is correct (stripping the reference)</p>",
        "id": 240855572,
        "sender_full_name": "cynecx",
        "timestamp": 1622481484
    },
    {
        "content": "<p>hmm</p>",
        "id": 240857919,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622483360
    },
    {
        "content": "<p>something about this smells, admittedly... method resolution is returning the <code>self_ty</code>, but inference then treats it as <code>receiver_ty</code>. those are different things</p>",
        "id": 240858035,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622483429
    },
    {
        "content": "<p>aah but with non-arbitrary self types, the only difference is the optional autoref</p>",
        "id": 240858071,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622483472
    },
    {
        "content": "<p>I kind of think you're right that method resolution should be returning <code>receiver_ty</code></p>",
        "id": 240858246,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622483627
    },
    {
        "content": "<p>and maybe we don't actually need <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/7c1d8ca63510bb719fd91bbf38692e45b19c04d6/crates/hir_ty/src/infer/expr.rs#L920-L927\">these lines</a> then</p>",
        "id": 240858330,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622483685
    },
    {
        "content": "<p>ah</p>",
        "id": 240858382,
        "sender_full_name": "cynecx",
        "timestamp": 1622483741
    },
    {
        "content": "<p>let me try that</p>",
        "id": 240858452,
        "sender_full_name": "cynecx",
        "timestamp": 1622483784
    },
    {
        "content": "<p>nice that works :D</p>",
        "id": 240858580,
        "sender_full_name": "cynecx",
        "timestamp": 1622483898
    },
    {
        "content": "<p>o_O is it really that simple</p>",
        "id": 240858600,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622483914
    },
    {
        "content": "<p>hir_ty test suite also passes</p>",
        "id": 240858615,
        "sender_full_name": "cynecx",
        "timestamp": 1622483928
    },
    {
        "content": "<p>let me open up a PR</p>",
        "id": 240858659,
        "sender_full_name": "cynecx",
        "timestamp": 1622483971
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/9090\">https://github.com/rust-analyzer/rust-analyzer/pull/9090</a></p>",
        "id": 240859159,
        "sender_full_name": "cynecx",
        "timestamp": 1622484385
    }
]