[
    {
        "content": "<p>I've resurrected the stubs/item tree work and moved the def collector over to it (removing raw items completely). Now I'm looking into replacing queries such as <code>generic_params</code> and <code>impl_data</code>, but they're keyed off of <code>GenericDefId</code> and <code>ImplId</code>, which are just interned IDs that return an AST node, and I can't query the item tree with that.</p>\n<p>Not sure about the best way forward here, but I'm feeling like the additional queries should be removed entirely and all callers be moved over to use the item tree directly. Does that make sense?</p>",
        "id": 201004031,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592308804
    },
    {
        "content": "<p>Yup!</p>",
        "id": 201005930,
        "sender_full_name": "matklad",
        "timestamp": 1592309969
    },
    {
        "content": "<p>That is, the ID I think should contain (id of parent, index in the item tree). Well, super long-term I imagine we might want (id of parent, name of child, diambiguator), but we can get away without it for the time being</p>",
        "id": 201006040,
        "sender_full_name": "matklad",
        "timestamp": 1592310041
    },
    {
        "content": "<p>Do you mean the parent item or file? <code>FileId</code> would be easier for now</p>",
        "id": 201006296,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592310219
    },
    {
        "content": "<p>Ideally, it should be parent item I think</p>",
        "id": 201006599,
        "sender_full_name": "matklad",
        "timestamp": 1592310389
    },
    {
        "content": "<p>We already track this actually</p>",
        "id": 201006613,
        "sender_full_name": "matklad",
        "timestamp": 1592310404
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>#[derive(Debug, Clone, PartialEq, Eq, Hash)]\npub struct ItemLoc&lt;N: AstNode&gt; {\n    pub container: ContainerId, // &lt;- this is the parent\n    pub ast_id: AstId&lt;N&gt;,\n}\n</code></pre></div>",
        "id": 201006630,
        "sender_full_name": "matklad",
        "timestamp": 1592310415
    },
    {
        "content": "<p>So, we should replace <code>AstId</code> with <code>ItemTreeId</code>. Note that that'll require some significant changes to <code>get source of the thing</code> infrastructure</p>",
        "id": 201006708,
        "sender_full_name": "matklad",
        "timestamp": 1592310471
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> it might make sense to take a look at the <a href=\"http://source_to_def.rs\">source_to_def.rs</a> file</p>",
        "id": 201007718,
        "sender_full_name": "matklad",
        "timestamp": 1592311024
    },
    {
        "content": "<p>It contains a bit of IDE specific magic which affects how we setup ids and sources</p>",
        "id": 201007742,
        "sender_full_name": "matklad",
        "timestamp": 1592311044
    },
    {
        "content": "<p>Curiously, this is exactly the same pattern that is used in Roslyn and Kotlin (and I really should blog about it)...</p>",
        "id": 201007766,
        "sender_full_name": "matklad",
        "timestamp": 1592311072
    },
    {
        "content": "<p>The core idea is that, if you have an <code>ast::Thing</code>, and want a <code>hir::Thing</code>, you look at the ast parent, recursively get <code>hir::ParentThing</code>, and then look through hir parent's children to find the child whose source is <code>ast::Thing</code>. That is, in a sense a lookup is reversed.</p>",
        "id": 201007905,
        "sender_full_name": "matklad",
        "timestamp": 1592311149
    },
    {
        "content": "<p>I did not realize this would be such a huge undertaking <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 201136094,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592398357
    },
    {
        "content": "<p>Well, you are about half-way in, so at this point it's easier just to finish the thing :)</p>",
        "id": 201136146,
        "sender_full_name": "matklad",
        "timestamp": 1592398395
    },
    {
        "content": "<p>But yeah, I feel like we've lost a significant amount of experemination freedom we had initially, when such refactorings were relatively straightforward...</p>",
        "id": 201136196,
        "sender_full_name": "matklad",
        "timestamp": 1592398424
    },
    {
        "content": "<p>Any good idea for how to handle/represent inner items in the item tree? Since they might be nested in inner blocks, just having a <code>Vec&lt;ModItem&gt;</code> in <code>Function</code> might not cut it.</p>",
        "id": 201136214,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592398434
    },
    {
        "content": "<p>(Body lowering and the item data queries create item IDs from AST nodes, which now doesn't work anymore, so I have to fix that)</p>",
        "id": 201136310,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592398495
    },
    {
        "content": "<p>Hmm, since the item data queries return fully expanded data, how do we map that to the item tree? Maybe we need to keep the queries and have them still perform the expansion?</p>",
        "id": 201136471,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592398567
    },
    {
        "content": "<p>Those are good questions....</p>",
        "id": 201136528,
        "sender_full_name": "matklad",
        "timestamp": 1592398602
    },
    {
        "content": "<p>For inner items, I see two approaches:</p>\n<ul>\n<li>we store <em>all</em> items in the item tree, and the same <code>ItemLoc</code> approach works. It's just <code>function</code> and other expression-owning things can be containers now.</li>\n<li>we store only top-level items in the item tree, but then have a separate query for inner items (which should allow us to parse bodies lazily)</li>\n</ul>",
        "id": 201136752,
        "sender_full_name": "matklad",
        "timestamp": 1592398712
    },
    {
        "content": "<blockquote>\n<p>Since they might be nested in inner blocks, just having a Vec&lt;ModItem&gt; in Function might not cut it.</p>\n</blockquote>\n<p>We might still attach all items to the parent item, or we can have an ID of the block. Not sure which one is better</p>",
        "id": 201136868,
        "sender_full_name": "matklad",
        "timestamp": 1592398783
    },
    {
        "content": "<p>we certainly should still do expansion of item bodies lazily, right?</p>",
        "id": 201137318,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1592399009
    },
    {
        "content": "<p>yup, expansion of bodies (and headers, as in <code>const C: ty_macro!() = 92;</code>) should be done lazily I would thing</p>",
        "id": 201137593,
        "sender_full_name": "matklad",
        "timestamp": 1592399157
    },
    {
        "content": "<p>Won't we end up doing expansion and parsing of bodies eagerly anyways to collect all impls that could apply to a type?</p>",
        "id": 201137707,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592399207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> today, we indeed have to do eager expansion, because impls leak beyond function bodies</p>",
        "id": 201137757,
        "sender_full_name": "matklad",
        "timestamp": 1592399243
    },
    {
        "content": "<p>But we plan to deprecate this (to make IDE go faster), so we should try to lazy-ify this. Specifically, the tentative long-term plan is that item body is sort-of like a downstream crate with respect to visibility of things</p>",
        "id": 201137873,
        "sender_full_name": "matklad",
        "timestamp": 1592399293
    },
    {
        "content": "<p>Yeah, makes sense to prepare for that I suppose</p>",
        "id": 201137896,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592399313
    },
    {
        "content": "<p>Not as much prepare, as to prove that the optimization makes sense (but it seems like it does)</p>",
        "id": 201138503,
        "sender_full_name": "matklad",
        "timestamp": 1592399632
    },
    {
        "content": "<p>TBH I think we should act like impls inside function bodies can't affect types outside that body, with the deprecation just making it official that this won't be supported (admittedly it's theoretical currently anyway, since we don't support any kind of impl in function bodies...)</p>",
        "id": 201138773,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1592399761
    },
    {
        "content": "<p>or in other words, it seems a waste of time to plan to implement support for it if we want to deprecate it anyway</p>",
        "id": 201138861,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1592399800
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/ItemTree/near/201137593\">said</a>:</p>\n<blockquote>\n<p>yup, expansion of bodies (and headers, as in <code>const C: ty_macro!() = 92;</code>) should be done lazily I would thing</p>\n</blockquote>\n<p>How this is currently handled? <code>ast::TypeRef</code> does not have a macro variant</p>",
        "id": 201139158,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592399971
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> by not doing macro expansion in this postions at all :D</p>",
        "id": 201139221,
        "sender_full_name": "matklad",
        "timestamp": 1592400000
    },
    {
        "content": "<p>... I think it just isn't? (... too late)</p>",
        "id": 201139271,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1592400006
    },
    {
        "content": "<p>Works for me :D</p>",
        "id": 201139293,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592400019
    },
    {
        "content": "<p>I am kind of working on refactoring type lowering (introducing another intermediate representation), which kind of touches on that -- I guess macro expansion would happen during lowering to that new IR</p>",
        "id": 201139685,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1592400208
    },
    {
        "content": "<p>What happens when expanding a macro call inside an impl or trait? Does r-a support that currently? How does the resulting AST look? The <code>ItemTree</code> assumes that its given a module, but that wouldn't be true here, right?</p>",
        "id": 201146864,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592403381
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> see <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir_def/src/data.rs#L168-L181\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir_def/src/data.rs#L168-L181</a></p>",
        "id": 201147005,
        "sender_full_name": "matklad",
        "timestamp": 1592403443
    },
    {
        "content": "<p>We collect inner items from sources, bypassing raw items</p>",
        "id": 201147215,
        "sender_full_name": "matklad",
        "timestamp": 1592403531
    },
    {
        "content": "<p>So we get <code>MacroItems</code>, which is a <code>ModuleItemsOwner</code>, even though we're only looking for associated items, hmm</p>",
        "id": 201147338,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592403587
    },
    {
        "content": "<p>Okay, figured out the item data queries. Now on to inner items.</p>",
        "id": 201162948,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592409845
    },
    {
        "content": "<p>Wow, literally anything can have inner items.</p>",
        "id": 201163024,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592409879
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">En</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Variant</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 201163115,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592409926
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"k\">fn</span> <span class=\"nf\">lol</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">}]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[];</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 201163254,
        "sender_full_name": "matklad",
        "timestamp": 1592409980
    },
    {
        "content": "<p>but yes, your proc_macro_hack version is better :D</p>",
        "id": 201163272,
        "sender_full_name": "matklad",
        "timestamp": 1592409991
    },
    {
        "content": "<p>In general, for this reason I am <em>somewhat</em> unhappy that we have a very strict split between expression and item worlds...</p>",
        "id": 201163405,
        "sender_full_name": "matklad",
        "timestamp": 1592410048
    },
    {
        "content": "<p>Hmm, seems somewhat problematic to make ItemTree the sole source of items if it <em>also</em> wants to process item bodies lazily. That means that inner items won't have an ID in the tree, but we need one when lowering the body.</p>",
        "id": 201168091,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592412300
    },
    {
        "content": "<p>Ah, well, the item tree can eagerly process them as long as it doesn't expand macros</p>",
        "id": 201169316,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592412883
    },
    {
        "content": "<p>the way I would imagine it to work is that item bodies get their own item trees, and item IDs are basically concatenated paths through this 'tree of trees' (i.e. a root item ID is simply the index in the root tree, but a nested item ID would be the outer item's ID + the index in that tree)</p>",
        "id": 201169705,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1592413090
    },
    {
        "content": "<p>but I'm not really up to date on the whole thing <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 201169730,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1592413105
    },
    {
        "content": "<p>Yup, I imagine this setup as well</p>",
        "id": 201192472,
        "sender_full_name": "matklad",
        "timestamp": 1592423959
    },
    {
        "content": "<p>Okay, that's quite different from what I have</p>",
        "id": 201192600,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592424008
    },
    {
        "content": "<p>Ideally, we should be able to swtich impl strategies relatively painless as well...</p>",
        "id": 201192923,
        "sender_full_name": "matklad",
        "timestamp": 1592424167
    },
    {
        "content": "<p>But I don't know how to achieve that</p>",
        "id": 201192944,
        "sender_full_name": "matklad",
        "timestamp": 1592424176
    },
    {
        "content": "<p>Well, at least, with the <code>hir</code> layer, one can be relatively sure that no changes to IDE will be required</p>",
        "id": 201193001,
        "sender_full_name": "matklad",
        "timestamp": 1592424200
    },
    {
        "content": "<blockquote>\n<p>175mb ItemTreeQuery</p>\n</blockquote>\n<p>Pretty heavy</p>",
        "id": 201713255,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592911512
    }
]