[
    {
        "content": "<p>So I once again looked into fixing some resolution things around derive macros(search/reference search specifically), like usual this requires a lot of special casing as the identifiers in <code>derive(...)</code> input token trees are not downmapped into the invocation onto <code>NameRef</code>s. Now I was wondering, since we can't change the parse for <code>derive</code> attribute invocations due to <code>derive</code> being a generic attribute in the language now. Could we somehow change things up to have the input tokens in the derive input, that is the <code>Foo</code> in <code>#[derive(Foo)]</code>, downmap into a special macro expansion file instead? That is have derive attributes expand to an extra expansion file(aside of all their single derive expansions) that just contains <code>NameRef</code>s of the invoked derives</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>MACRO_DERIVE_OUTPUT@0..3\n    NAME_REF@0..3\n</code></pre></div>\n<p>That way resolving these identifiers would give us ordinary <code>NameRef</code>s we can properly use(at the cost of a bit more memory, how much I am not sure) like we do with all other names, removing a lot of complexity/moving all the complexity for looking up derives to one point(name ref classification).(This idea could maybe be expanded to other builtin macros where applicable as well).</p>",
        "id": 271635798,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1644612965
    }
]