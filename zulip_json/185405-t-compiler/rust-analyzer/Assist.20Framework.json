[
    {
        "content": "<p>Heya; last Friday I hacked some on RA and had a lot of fun. I ended up copying and then refactoring several utility functions from other assists. E.g. in <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/assists/src/utils.rs\"><code>assists/src/utils.rs</code></a>: <code>find_impl_block</code> and <code>find_struct_impl</code>.</p>\n<p>I've seen other utilities in the assists lib float around, such as: <code>add_trait_assoc_items_to_impl</code>. These three all seem closely related, and it feels like we could create some structures to for example target and manipulate impl blocks. I suspect that with a bit of effort we could create structures which would make it possible to author and update assists more quickly and accurately.</p>\n<p>I was wondering what the current state of thinking on this was, and whether it'd be useful to draft a quick design for this?</p>",
        "id": 225536623,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1612787410
    },
    {
        "content": "<p>One piece of functionality I'd like to add for example is a way to both \"add a method to the start of an impl block\" and \"add a method to the end of an impl block\". Right now the \"add matches method\" assist pushes new methods to the start of impl blocks, which doesn't feel right.</p>",
        "id": 225536763,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1612787497
    },
    {
        "content": "<p>Note that <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/7498/\">https://github.com/rust-analyzer/rust-analyzer/pull/7498/</a> will change in a fundamental way how we write asssists. In particular, it should provide way better composability</p>",
        "id": 225537103,
        "sender_full_name": "matklad",
        "timestamp": 1612787656
    },
    {
        "content": "<p>The TL;DR is that the syntax tree becomes mutable-ish, so that <code>my_impl.add_method(make::...)</code> will just work</p>",
        "id": 225537271,
        "sender_full_name": "matklad",
        "timestamp": 1612787754
    },
    {
        "content": "<p>No eta on how that lands though :)</p>",
        "id": 225537326,
        "sender_full_name": "matklad",
        "timestamp": 1612787768
    },
    {
        "content": "<p>Which is to say: yes, long term we need some assist framework. But at the moment the churn rate of the undrelying abstraction is high, so we don't try to go far beyound the utils module just yet.</p>",
        "id": 225537410,
        "sender_full_name": "matklad",
        "timestamp": 1612787838
    },
    {
        "content": "<p>Cool! -- that sounds really good, and I'm glad I asked ^^</p>",
        "id": 225537557,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1612787918
    },
    {
        "content": "<p>just seeing <code>rowan</code> for the first time now; that's incredibly exciting</p>",
        "id": 225537764,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1612788034
    }
]