[
    {
        "content": "<p>Hi! I'm trying to use rust-analyzer as a library to analyze cross-references between types in a crate to find cyclic dependencies. For that, I cobbled together this monstrosity of a function to load a crate:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">load_crate</span><span class=\"p\">(</span><span class=\"n\">crate_dir</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"n\">ra_ap_ide</span>::<span class=\"n\">AnalysisHost</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ra_ap_hir</span>::<span class=\"n\">Crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">crate_dir</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ra_ap_paths</span>::<span class=\"n\">AbsPath</span>::<span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">crate_dir</span><span class=\"p\">.</span><span class=\"n\">as_ref</span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ra_ap_project_model</span>::<span class=\"n\">ProjectManifest</span>::<span class=\"n\">discover_single</span><span class=\"p\">(</span><span class=\"n\">crate_dir</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">cargo_config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ra_ap_project_model</span>::<span class=\"n\">CargoConfig</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">no_default_features</span>: <span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">all_features</span>: <span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">features</span>: <span class=\"nc\">vec</span><span class=\"o\">!</span><span class=\"p\">[],</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">target</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">no_sysroot</span>: <span class=\"nc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">rustc_source</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">unset_test_crates</span>: <span class=\"nc\">ra_ap_project_model</span>::<span class=\"n\">UnsetTestCrates</span>::<span class=\"n\">All</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">wrap_rustc_in_build_scripts</span>: <span class=\"nc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">workspace</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ra_ap_project_model</span>::<span class=\"n\">ProjectWorkspace</span>::<span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">cargo_config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;|</span><span class=\"n\">_progress</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{}).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">vfs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ra_ap_rust_analyzer</span>::<span class=\"n\">cli</span>::<span class=\"n\">load_cargo</span>::<span class=\"n\">load_workspace</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">workspace</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">ra_ap_rust_analyzer</span>::<span class=\"n\">cli</span>::<span class=\"n\">load_cargo</span>::<span class=\"n\">LoadCargoConfig</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">load_out_dirs_from_check</span>: <span class=\"nc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">with_proc_macro</span>: <span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">prefill_caches</span>: <span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">db</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">raw_database</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">crate_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ra_ap_hir</span>::<span class=\"n\">Crate</span>::<span class=\"n\">all</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">crate_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">vfs_path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vfs</span><span class=\"p\">.</span><span class=\"n\">file_path</span><span class=\"p\">(</span><span class=\"n\">crate_</span><span class=\"p\">.</span><span class=\"n\">root_file</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// go from `project/src/lib.rs` to `parent`</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vfs_path</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">as_path</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">parent</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">parent</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">crate_dir</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">crate_</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This <em>works</em>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">crate_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load_crate</span><span class=\"p\">(</span><span class=\"s\">\"/home/kangalioo/dev/rust/poise\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">db</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">raw_database</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"found crate {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">crate_</span><span class=\"p\">.</span><span class=\"n\">display_name</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">));</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Is my implementation of load_crate the best way to load a single crate? Or is there something shorter, that ideally also doesn't require depending on five different ra_ap_* crates?</p>",
        "id": 277838305,
        "sender_full_name": "kangalioo",
        "timestamp": 1649144205
    },
    {
        "content": "<p>that seems pretty normal. the APIs aren't yet optimized for ease of use (or really for use outside of RA itself at all), and there are lots of complexities. Only thing I'd question is whether this is the best way to find the <code>Crate</code></p>",
        "id": 277842609,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1649147046
    },
    {
        "content": "<p>you could use <code>load_workspace_at</code> to make it a bit shorter</p>",
        "id": 277842999,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1649147272
    },
    {
        "content": "<p>for finding the crate I'd at least do <code>vfs_path.as_path().map_or(false, |p| p.starts_with(crate_dir))</code> instead of all the unwrapping and directly comparing paths</p>",
        "id": 277843588,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1649147593
    },
    {
        "content": "<p>Thank you, that was the feedback I was looking for! I will definitely use load_workspace_at and I just noticed CargoConfig has a nice Default impl which will reduce the code further</p>\n<blockquote>\n<p>for finding the crate I'd at least do <code>vfs_path.as_path().map_or(false, |p| p.starts_with(crate_dir))</code> instead of all the unwrapping and directly comparing paths</p>\n</blockquote>\n<p>That approach has false positives on subcrates. In my case, it found one of the cargo examples first (/home/kangalioo/dev/rust/poise/examples/framework_usage/)</p>",
        "id": 277853508,
        "sender_full_name": "kangalioo",
        "timestamp": 1649152933
    },
    {
        "content": "<p>how about explicitly checking that the root file is <code>src/lib.rs</code> then? just seems a bit brittle to rely on \"the crate I want is the only one two directories down from that folder\"</p>",
        "id": 277859966,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1649156835
    },
    {
        "content": "<p>you could also just get the file ID for <code>project/src/lib.rs</code>, look up the <code>Module</code> for it with and get the crate from that</p>",
        "id": 277860118,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1649156903
    },
    {
        "content": "<p>I guess it would be nice to have a way to go from the <code>Cargo.toml</code> to its root source file, I don't think we have that currently</p>",
        "id": 277860240,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1649156995
    }
]