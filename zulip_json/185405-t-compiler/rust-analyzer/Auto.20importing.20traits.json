[
    {
        "content": "<p>Is there any sane way to get a collection of <code>ModuleDef::Trait</code> that correspond to a given hir <code>Adt</code>?<br>\nOr maybe a way to get a collection of <code>ModuleDef::Trait</code> that have a hir <code>Function</code> defined in them?</p>\n<p>In other words, I want to either find all traits that are implemented for a given <code>Adt</code> or find all traits that have the particular function definition.</p>\n<p>One strong limitation that makes it <em>fun</em>: the trait is not in the current scope (i.e. no <code>use</code> statement for it from the place we perform a search hence no <code>SourceAnalyzer::resolve_path</code> can be used).</p>\n<p>So far I've found an eerie way to get that as </p>\n<p><code>ImplBlock::all_in_crate</code> <br>\n-&gt; filter out the ones that target the given <code>Adt</code> only<br>\n-&gt; get the <code>ra_hir_def::TypeRef</code> via <code>ImplBlock::target_trait</code> on the remaining <br>\n-&gt; scrape the trait name out of it (by considering the <code>TypeRef::Path</code> variants only) <br>\n-&gt; do <code>ImportsLocator::find_imports</code> on the name</p>\n<p>Can there be a better way?<br>\nIt would be great to get the <code>Trait</code> instead of <code>TypeRef</code> somehow at least.</p>",
        "id": 187868565,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1581376196
    },
    {
        "content": "<p>Yeah, I wouldn't recommend that approach <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> This needs to use the <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates/ra_hir_ty/src/method_resolution.rs#L182\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates/ra_hir_ty/src/method_resolution.rs#L182\">method resolution code</a> and tell it to consider all traits, not just the ones in scope (that option doesn't exist yet)</p>",
        "id": 187891031,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581408503
    },
    {
        "content": "<p>I see that the resolution method boils down to this: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir_ty/src/method_resolution.rs#L385\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir_ty/src/method_resolution.rs#L385\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir_ty/src/method_resolution.rs#L385</a></p>\n<p>And if I get it right, the method just adds the traits in scope to the iteration, that's it.<br>\nSo, in order to make it to consider all traits, I have to get all traits first, haven't I?</p>\n<p>How do I do that?<br>\nI wonder why do I need to change this method, if I'm able to get all traits? :)</p>",
        "id": 187891839,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1581409632
    },
    {
        "content": "<p>You're right, you don't need to change it since it takes the set of traits as a parameter nowadays</p>",
        "id": 187892027,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581409899
    },
    {
        "content": "<p>I think to get the set of candidate traits the best way would be to go through the <code>CrateDefMap</code> of the current crate and its direct dependencies, and collect the set of all traits in all modules in there. (We might want to make an index of that, but I guess it's better to actually first try the brute-force way)</p>",
        "id": 187895170,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581413158
    },
    {
        "content": "<p>Thanks, I'll try that.</p>",
        "id": 187896487,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1581414221
    },
    {
        "content": "<p>I think the right approach here is to filter by function first (using the symbol index)</p>",
        "id": 187899611,
        "sender_full_name": "matklad",
        "timestamp": 1581416887
    },
    {
        "content": "<p>I hope we can live without \"find all traits for a type\", as that doesn't look like it can scale.</p>",
        "id": 187899650,
        "sender_full_name": "matklad",
        "timestamp": 1581416938
    },
    {
        "content": "<p>method resolution filters by the function first anyway</p>",
        "id": 187900091,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581417281
    },
    {
        "content": "<p>but getting all traits with a function with a certain name via an index would of course be nicer</p>",
        "id": 187900119,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581417307
    },
    {
        "content": "<p>If there's a way to get to get impls for a given <code>Trait</code> or <code>TraitDef</code>, I can avoid using the <code>method_resolution</code> method at all.<br>\nI think I should, because otherwise I need to somehow make it available in <code>ra_assists</code> crate which does not make much sense to me.</p>",
        "id": 187909009,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1581426234
    },
    {
        "content": "<p>And I think there is a way via <code>ImplBlock::for_trait</code>, so all good.</p>",
        "id": 187909188,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1581426370
    },
    {
        "content": "<p>you have to use method resolution, otherwise you will get wrong and incomplete results</p>",
        "id": 187909812,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581426851
    },
    {
        "content": "<p>actually, we already expose it: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/3c98681d4efeabe91dc91ff3ef0e1ce11c35d067/crates/ra_hir/src/code_model.rs#L1025\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/3c98681d4efeabe91dc91ff3ef0e1ce11c35d067/crates/ra_hir/src/code_model.rs#L1025\">https://github.com/rust-analyzer/rust-analyzer/blob/3c98681d4efeabe91dc91ff3ef0e1ce11c35d067/crates/ra_hir/src/code_model.rs#L1025</a></p>",
        "id": 187910019,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581427050
    },
    {
        "content": "<p>Well, this method does not find me any candidates for my tiny test.<br>\nI'll try to find out why, hope it does not depend on the scope somehow.</p>",
        "id": 187910862,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1581427799
    },
    {
        "content": "<p>I think that happens because of this: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/3c98681d4efeabe91dc91ff3ef0e1ce11c35d067/crates/ra_hir/src/code_model.rs#L1048\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/3c98681d4efeabe91dc91ff3ef0e1ce11c35d067/crates/ra_hir/src/code_model.rs#L1048\">https://github.com/rust-analyzer/rust-analyzer/blob/3c98681d4efeabe91dc91ff3ef0e1ce11c35d067/crates/ra_hir/src/code_model.rs#L1048</a></p>\n<p>Currently I'm trying to import traits for the associated trait functions:</p>\n<div class=\"codehilite\"><pre><span></span>mod test_mod {\n    pub trait TestTrait {\n        fn test_function();\n    }\n    pub struct TestStruct {}\n    impl TestTrait for TestStruct {\n        fn test_function() {}\n    }\n}\n\nfn main() {\n    test_mod::TestStruct::test_function&lt;|&gt;\n}\n</pre></div>\n\n\n<p>and all my traits get rejected here: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/3c98681d4efeabe91dc91ff3ef0e1ce11c35d067/crates/ra_hir_ty/src/method_resolution.rs#L454\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/3c98681d4efeabe91dc91ff3ef0e1ce11c35d067/crates/ra_hir_ty/src/method_resolution.rs#L454\">https://github.com/rust-analyzer/rust-analyzer/blob/3c98681d4efeabe91dc91ff3ef0e1ce11c35d067/crates/ra_hir_ty/src/method_resolution.rs#L454</a></p>",
        "id": 187912374,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1581428921
    },
    {
        "content": "<p>If I replace the <code>LookupMode</code> with the other variant, I get something passed into the closure.</p>\n<p>So, should we expose another method? Or rather allow to specify the <code>LookupMode</code> as a parameter?<br>\nOr am I doing something wrong?</p>",
        "id": 187912444,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1581428992
    },
    {
        "content": "<p>for a path like that, you need <code>LookupMode::Path</code>, yeah</p>",
        "id": 187912588,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581429097
    },
    {
        "content": "<p>we should maybe expose another variant that uses <code>LookupMode::Path</code> and also supports returning associated constants</p>",
        "id": 187912686,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581429150
    },
    {
        "content": "<p>maybe call it <code>iterate_associated_candidates</code> or something like that</p>",
        "id": 187912747,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581429209
    },
    {
        "content": "<p>(I was assuming you're doing method calls like <code>foo.bar()</code>)</p>",
        "id": 187912772,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581429239
    },
    {
        "content": "<p>Sounds reasonable, not sure how to pass the <code>AssocItemId::ConstId</code> into that callback though.<br>\nI'll try something.</p>",
        "id": 187912774,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1581429240
    },
    {
        "content": "<p>we have an <code>enum AssocItem</code> in <code>code_model</code></p>",
        "id": 187912835,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581429269
    },
    {
        "content": "<p>Oh wait, there's already a method that does it :)<br>\nThanks for the guidance anyway, that helps a lot.</p>",
        "id": 187913250,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1581429566
    },
    {
        "content": "<p>Ok, one last set of questions: how is the <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/3c98681d4efeabe91dc91ff3ef0e1ce11c35d067/crates/ra_hir/src/code_model.rs#L1056\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/3c98681d4efeabe91dc91ff3ef0e1ce11c35d067/crates/ra_hir/src/code_model.rs#L1056\">https://github.com/rust-analyzer/rust-analyzer/blob/3c98681d4efeabe91dc91ff3ef0e1ce11c35d067/crates/ra_hir/src/code_model.rs#L1056</a> method supposed to help me to detect the <em>traits</em> I want to import?</p>\n<p>The callback signature is <code>mut callback: impl FnMut(&amp;Ty, AssocItem) -&gt; Option&lt;T&gt;,</code> so it does not return a trait.<br>\nOr is the plan to call the method for each trait I've located before, one by one, and see if something gets passed into the callback for that trait?<br>\nI cannot even fully check what I get back, because <code>Ty</code> is not accesssible in <code>ra_assists</code> and checking <code>AssocItem</code> seem to make no sense since we've filtered out the traits by the method before already.</p>",
        "id": 187914026,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1581430103
    },
    {
        "content": "<p>And do I get it right, that <code>ImplBlock::for_trait</code> approach is worse than the way you've proposed because it does not consider derefs?</p>",
        "id": 187914168,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1581430213
    },
    {
        "content": "<p>once you have the <code>AssocItem</code>, you can get its container, which is the trait</p>",
        "id": 187918623,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581432789
    },
    {
        "content": "<p>It is not, that's the trick, it's the <code>Function</code>.</p>",
        "id": 187918662,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1581432825
    },
    {
        "content": "<p>for a <code>Function</code> as well you can get the container. you might need to add methods for it in <code>code_model</code>, but it's straightforward</p>",
        "id": 187918760,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581432870
    },
    {
        "content": "<p>Ah, silly me, got it. Thanks.</p>",
        "id": 187918781,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1581432895
    },
    {
        "content": "<blockquote>\n<p>And do I get it right, that <code>ImplBlock::for_trait</code> approach is worse than the way you've proposed because it does not consider derefs?</p>\n</blockquote>\n<p>derefs aren't relevant for path-style method calls, but to decide whether a type implements a trait you have to use chalk, you can't just look at the impls. consider impls like <code>impl&lt;T&gt; Trait for T where T: SomeOtherTrait</code></p>",
        "id": 187918951,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581432987
    }
]