[
    {
        "content": "<p>In rustc, eager expansion is implemented with a single line of code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">expander</span><span class=\"p\">().</span><span class=\"n\">fully_expand_fragment</span><span class=\"p\">(</span><span class=\"n\">AstFragment</span>::<span class=\"n\">Expr</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">)).</span><span class=\"n\">make_expr</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n<p>In rust-analyzer, a comparatively huge amount of infrastructure seems to be responsible for handling eager macros. Is that a necessary consequence of doing it in a query-driven way, or is this complexity accidental and could be reduced?</p>",
        "id": 218351700,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606773333
    },
    {
        "content": "<p>Ah, just found this thread: <a href=\"#narrow/stream/131828-t-compiler/topic/Eager.20expansion.20of.20built-in.20macros\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/Eager.20expansion.20of.20built-in.20macros</a></p>",
        "id": 218364582,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606781346
    },
    {
        "content": "<p>Yeah, it's true that, overall, \"eager macros are tricky\". Our current impl is not in cache for me though it's quite likely we can simplify it substantionally. </p>\n<p>IIRC, we just encode the whole of macro argument into macro ID for eager expansion.</p>",
        "id": 218427587,
        "sender_full_name": "matklad",
        "timestamp": 1606832513
    }
]