[
    {
        "content": "<p>Hey guys! First, happy to be a part of the rust-analyzer community! This is my first time using Zulip or the rust-analyzer channel for that matter so forgive me if I'm posting in the wrong place or not following proper convention.</p>\n<p>I noticed rust-analyzer in VSCode isn't properly completing fields with raw string literals. For example, if you have a struct defined like so:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Example</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">r</span>#<span class=\"k\">type</span>: <span class=\"nb\">String</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and you try to type out the code for reading the field in VSCode like so:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ex</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">r</span>#<span class=\"k\">type</span>: <span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"example\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ex</span><span class=\"p\">.</span><span class=\"n\">t</span><span class=\"w\"></span>\n</code></pre></div>\n<p>rust-analyzer and VSCode will show that the field <code>type</code> is an option. When pressing enter to auto complete, the text <code>type</code> will be inserted so that our code now looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ex</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">r</span>#<span class=\"k\">type</span>: <span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"example\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ex</span><span class=\"p\">.</span><span class=\"k\">type</span>\n</code></pre></div>\n<p>but there is a problem here. <code>type</code> is a reserved identifier and so this is actually invalid rust code. I'd like to fix this so that when enter is pressed, raw string literals are used instead. The resulting code would instead be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ex</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">r</span>#<span class=\"k\">type</span>: <span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"example\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ex</span><span class=\"p\">.</span><span class=\"n\">r</span>#<span class=\"k\">type</span>\n</code></pre></div>\n<p>which would be valid rust.</p>\n<p>My question is, where do I start? Is this something that should be handled in the VSCode extension? In the main rust-analyzer codebase?<br>\nAlso, do we actually want this feature in the first place? I see no problem with it but maybe someone else does.</p>\n<p>Thanks!</p>",
        "id": 251213327,
        "sender_full_name": "Patrick",
        "timestamp": 1630321794
    },
    {
        "content": "<p>That's the right place for this, yeah!</p>",
        "id": 251213512,
        "sender_full_name": "matklad",
        "timestamp": 1630321904
    },
    {
        "content": "<p>Completion lives around <a href=\"https://github.com/rust-analyzer/rust-analyzer/tree/master/crates/ide_completion/src/completions\">https://github.com/rust-analyzer/rust-analyzer/tree/master/crates/ide_completion/src/completions</a></p>",
        "id": 251213579,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1630321926
    },
    {
        "content": "<p>Terminology note, those are raw identifiers, not raw string literals</p>",
        "id": 251213665,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1630322007
    },
    {
        "content": "<p>Relevant code for that is here <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/cbae5969417eba9c9fbaee0337c8f57e566fd286/crates/ide_completion/src/render.rs#L86\">https://github.com/rust-analyzer/rust-analyzer/blob/cbae5969417eba9c9fbaee0337c8f57e566fd286/crates/ide_completion/src/render.rs#L86</a></p>",
        "id": 251213841,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1630322098
    },
    {
        "content": "<p>we should actually move that (and related test) to a sumbodule, so that it's easier to find</p>",
        "id": 251213935,
        "sender_full_name": "matklad",
        "timestamp": 1630322157
    },
    {
        "content": "<p>I found some time to work on this, setup my developer environment for working on rust-analyzer, and have figured out how to replace all <code>type</code> fields with <code>r#type</code> on text completion. Atm, it's a single string comparison check for <code>type</code> like so</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">\"type\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">insert_text</span><span class=\"p\">(</span><span class=\"s\">\"r#type\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>at line 92 of the code Lukas pointed out (thank you by the way!). Is there a way to properly do this for all identifiers? I imagine doing string comparisons on all possible identifiers (if, struct, etc) wouldn't be the best way to implement this feature and if new identifiers are added to the Rust compiler, the code would have to be manually updated each time.</p>",
        "id": 252010668,
        "sender_full_name": "Blake Wyatt",
        "timestamp": 1630772132
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/fd30bd179ce7920f660488ae3ea53c9c2ace3bbd/crates/syntax/src/ast/make.rs#L74-L82\">https://github.com/rust-analyzer/rust-analyzer/blob/fd30bd179ce7920f660488ae3ea53c9c2ace3bbd/crates/syntax/src/ast/make.rs#L74-L82</a></p>",
        "id": 252010836,
        "sender_full_name": "matklad",
        "timestamp": 1630772304
    },
    {
        "content": "<p>I think you need the same SyntaxKind::from_keyword logic</p>",
        "id": 252010863,
        "sender_full_name": "matklad",
        "timestamp": 1630772342
    },
    {
        "content": "<p>I'll look into this, thanks!</p>",
        "id": 252010988,
        "sender_full_name": "Blake Wyatt",
        "timestamp": 1630772488
    },
    {
        "content": "<p>Random request for feedback -- was setting the dev environment for ra easy? Anything you've spend time on you feel could be better handled? :)</p>",
        "id": 252011178,
        "sender_full_name": "matklad",
        "timestamp": 1630772668
    },
    {
        "content": "<p>It was <em>extremely</em> easy! I forked the RA repo, cloned my fork, installed it as mentioned <a href=\"https://rust-analyzer.github.io/manual.html\">here</a>, and was able to start writing/compiling code no problem! The only part that took some time was figuring out how to log information. From the same url, I learned how to read logs through VSCode but I had to experiment to figure out how to log things (like the <code>name</code> variable). My first attempt to log was with <code>println!(\"{}\", name)</code>. Whenever I triggered the print statement to run, rust-analyzer would crash. It refused to respond to changes written in the code. There were no error messages I could find with <code>RA_LOG=info</code> either. As a quick fix, I've been using <code>panic</code> to log things. This brings up an error message in VSCode that is easy to see and prints whatever I need. I'm sure there's an easy way to do it without using <code>panic</code> and with rust-analyzer's logging solution, but I'm not sure what that is. I think it would be helpful to note whatever it is at <a href=\"https://rust-analyzer.github.io/manual.html#troubleshooting\">https://rust-analyzer.github.io/manual.html#troubleshooting</a></p>",
        "id": 252012666,
        "sender_full_name": "Blake Wyatt",
        "timestamp": 1630774335
    },
    {
        "content": "<p>Yeah, you need <code>eprintln!</code>. stdout is what we use to communicate with LSP, so printing there breaks things.</p>",
        "id": 252013448,
        "sender_full_name": "matklad",
        "timestamp": 1630775217
    },
    {
        "content": "<p>what OS are you on? I wonder if there's some ungraceful hack we can employ here.</p>",
        "id": 252013463,
        "sender_full_name": "matklad",
        "timestamp": 1630775240
    },
    {
        "content": "<p>Folks, can we, from within the program:</p>\n<ul>\n<li>duplicate redirect stdout to stderr, so that <code>eprintln!</code> and <code>println</code> are equivalent</li>\n<li>move the original stdout to another fd</li>\n</ul>\n<p>?</p>",
        "id": 252013541,
        "sender_full_name": "matklad",
        "timestamp": 1630775313
    },
    {
        "content": "<p>Oh that makes sense! I didn't realize <code>eprintln!</code> existed either! I'm on Windows</p>",
        "id": 252013956,
        "sender_full_name": "Blake Wyatt",
        "timestamp": 1630775830
    },
    {
        "content": "<p>Heh, I use <code>tracing::error!</code></p>",
        "id": 252014435,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1630776408
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/10148\">https://github.com/rust-analyzer/rust-analyzer/pull/10148</a> might help a bit -- the <code>println!</code> gotcha is documented in our dev docs, liked those from the troubleshooting section</p>",
        "id": 252014664,
        "sender_full_name": "matklad",
        "timestamp": 1630776689
    },
    {
        "content": "<p>Looks good!</p>",
        "id": 252020169,
        "sender_full_name": "Blake Wyatt",
        "timestamp": 1630782894
    },
    {
        "content": "<p>I think I'm done implementing completion for raw identifiers. Should I add tests for this small of a change? I don't see any existing tests for the <code>render_field</code> function</p>",
        "id": 252020290,
        "sender_full_name": "Blake Wyatt",
        "timestamp": 1630783025
    },
    {
        "content": "<p>Yeah, I think you'd want a <code>check_edit</code> test here: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/cbae5969417eba9c9fbaee0337c8f57e566fd286/crates/ide_completion/src/render.rs#L807\">https://github.com/rust-analyzer/rust-analyzer/blob/cbae5969417eba9c9fbaee0337c8f57e566fd286/crates/ide_completion/src/render.rs#L807</a></p>",
        "id": 252022014,
        "sender_full_name": "matklad",
        "timestamp": 1630784991
    },
    {
        "content": "<p>Submitted a PR <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/10152\">https://github.com/rust-analyzer/rust-analyzer/pull/10152</a></p>",
        "id": 252034429,
        "sender_full_name": "Blake Wyatt",
        "timestamp": 1630798808
    }
]