[
    {
        "content": "<p>Hey, <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> , I am trying to move call info over to hir types (to support closures, and to avoid string-based semantic analysis). </p>\n<p>I think I am hitting a couple of surprising limitations of our inference infra</p>",
        "id": 204083835,
        "sender_full_name": "matklad",
        "timestamp": 1594906488
    },
    {
        "content": "<p>Here's the first one:</p>\n<p><a href=\"/user_uploads/4715/U7FqAzMZXZNHBqKg7BelAHCV/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/U7FqAzMZXZNHBqKg7BelAHCV/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/U7FqAzMZXZNHBqKg7BelAHCV/image.png\"></a></div>",
        "id": 204083959,
        "sender_full_name": "matklad",
        "timestamp": 1594906536
    },
    {
        "content": "<p>Here, we are showing hints for a function with two generic params: <code>foo(T, U)</code></p>",
        "id": 204084060,
        "sender_full_name": "matklad",
        "timestamp": 1594906568
    },
    {
        "content": "<p>We know value only for the first param, so the hint shows <code>(i32, {unknown})</code></p>",
        "id": 204084094,
        "sender_full_name": "matklad",
        "timestamp": 1594906584
    },
    {
        "content": "<p>Now, it would be cool if that <code>{unknown}</code> said <code>U</code> instead. It seems like we might want to extend the defition of <code>Ty::Unknown</code> to not erase this information somehow</p>",
        "id": 204084225,
        "sender_full_name": "matklad",
        "timestamp": 1594906652
    },
    {
        "content": "<p>hm. It's not <code>U</code> though -- like, <code>U</code> is not a type that even exists at that location. This feels like something that should be tracked on some side channel maybe (i.e., why did a type variable get created)</p>",
        "id": 204084395,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1594906731
    },
    {
        "content": "<p>What if <code>U</code> is an associated type of <code>T</code>? Should it say <code>i32::Foo</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">HasU</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">U</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">HasU</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"nc\">T</span>::<span class=\"n\">U</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204084446,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1594906762
    },
    {
        "content": "<p>The second limitation is simpler. For method calls like <code>x.foo(a, b)</code>, we don't seem to record substitutions for <code>foo</code> anywhere. Our table stores only <code>FunctionId</code>. </p>\n<p>Note that this problem does not exist for function calls (<code>X::foo(x, a, b)</code>), as we can look up the type of <code>X::foo</code> expr, and that carries <code>subs</code>.</p>",
        "id": 204084461,
        "sender_full_name": "matklad",
        "timestamp": 1594906767
    },
    {
        "content": "<p>yeah we probably want to just record them</p>",
        "id": 204084528,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1594906798
    },
    {
        "content": "<blockquote>\n<p>like, U is not a type that even exists at that location.</p>\n</blockquote>\n<p>Exactly! The <code>Ty::Unknown</code> is the <em>right</em> type. <em>But</em> it seems like we know that we've got that particular unknown from a type parameter, so we <em>might</em> want to change <code>Unknown</code> to <code>Unknown { type_param: Option&lt;TypeParamId&gt; }</code> or something like that.</p>",
        "id": 204084676,
        "sender_full_name": "matklad",
        "timestamp": 1594906856
    },
    {
        "content": "<p>so, I'd like to keep  additional information out of <code>Ty</code> because in some not-so-far-off future, <code>Ty</code> won't exist anymore and we'll be using <code>chalk_ir::Ty</code>. I think it'd make more sense to 1. have some way of knowing the exact type variable that Unknown came from, and then 2. be able to look up why that variable was created (which I guess would be something like <code>TypeVariableSource::TypeParam(TypeParamId)</code>). I think rustc keeps track of that quite similarly for diagnostics, haven't looked into it yet though</p>",
        "id": 204085113,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1594907088
    },
    {
        "content": "<p>I'm not sure what part would see that and decide to print <code>U</code> instead of <code>{unknown}</code> though <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 204085195,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1594907127
    },
    {
        "content": "<p>it feels wrong to do that in the HIR code, since it's not the correct type, it's more of an IDE decision, but then the IDE code needs to have their own printing <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 204085299,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1594907166
    },
    {
        "content": "<p>Yeah, that's more general problem: I think something about paths/auto-import already bleeds into <code>HirDisplay</code>?</p>",
        "id": 204085442,
        "sender_full_name": "matklad",
        "timestamp": 1594907260
    },
    {
        "content": "<p>Drawing the line between IDE and compiler feels like separating the toothpaste into three colored strands :)</p>",
        "id": 204085554,
        "sender_full_name": "matklad",
        "timestamp": 1594907298
    },
    {
        "content": "<p>yeah, it optionally tries to print correct importable paths</p>",
        "id": 204085592,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1594907316
    },
    {
        "content": "<p>I have a plan to fix that, which is basically to use the new type IR I'm slowly working on also in the other direction</p>",
        "id": 204086009,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1594907521
    },
    {
        "content": "<p>The separate IR from chalk's?</p>",
        "id": 204086169,
        "sender_full_name": "matklad",
        "timestamp": 1594907590
    },
    {
        "content": "<p>So that we have two type reprs?</p>",
        "id": 204086179,
        "sender_full_name": "matklad",
        "timestamp": 1594907597
    },
    {
        "content": "<p>Adding a new IR always feels like a right solution :D</p>",
        "id": 204086217,
        "sender_full_name": "matklad",
        "timestamp": 1594907616
    },
    {
        "content": "<p>yeah, basically an IR that represents user-facing types, but resolved</p>",
        "id": 204086242,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1594907634
    },
    {
        "content": "<p>that doesn't help with the type variable problem though</p>",
        "id": 204086295,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1594907644
    },
    {
        "content": "<p>we already have two type reprs, <code>TypeRef</code> and <code>Ty</code>, this would be in between them ;)</p>",
        "id": 204086347,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1594907669
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> maybe it would be enough of an interim solution to just print <code>_</code> instead of <code>{unknown}</code>?</p>",
        "id": 204088227,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1594908565
    },
    {
        "content": "<p>Nah, for interim solution <code>{unknown}</code> is fine :D</p>",
        "id": 204088395,
        "sender_full_name": "matklad",
        "timestamp": 1594908639
    },
    {
        "content": "<p>Though, Ive been debating if we should render <code>{unknown}</code> as <code>?</code></p>",
        "id": 204088455,
        "sender_full_name": "matklad",
        "timestamp": 1594908663
    },
    {
        "content": "<p>(that is, everywhere -- in hover, in inlay hints, etc)</p>",
        "id": 204088510,
        "sender_full_name": "matklad",
        "timestamp": 1594908686
    },
    {
        "content": "<p><code>_</code> makes sense to me because it <em>is</em> actually an inference variable. Maybe it'd be good to distinguish between error types and unresolved inference variables later</p>",
        "id": 204091258,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1594909871
    },
    {
        "content": "<p>Yeah, <code>_</code> also makes sense... I am thinking though if it would be self-explanatory. </p>\n<p>If you see <code>let x: Vec&lt;?&gt; = ...</code> it's self-evident that IDE has trouble inferring <code>?</code>. If you see <code>let x: Vec&lt;_&gt;</code>, you might think that IDE shortents type here, or something.</p>",
        "id": 204091554,
        "sender_full_name": "matklad",
        "timestamp": 1594909979
    },
    {
        "content": "<p>Aren't we actually using <code>_</code> for type shortening already?</p>",
        "id": 204091585,
        "sender_full_name": "matklad",
        "timestamp": 1594909990
    },
    {
        "content": "<p>I think we're using ... for type shortening</p>",
        "id": 204091678,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1594910035
    }
]