[
    {
        "content": "<p>Is this actually expected that we report multiple errors for a single TextUnit in <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/326556b09078a398e641dd221ab870ee0fe47f68/crates/ra_syntax/test_data/parser/err/0024_many_type_parens.txt#L298-L301\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/326556b09078a398e641dd221ab870ee0fe47f68/crates/ra_syntax/test_data/parser/err/0024_many_type_parens.txt#L298-L301\">this test here</a> <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> ?</p>",
        "id": 188406886,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581973783
    },
    {
        "content": "<p>I would also display the token textual repr itself here instead of <code>R_PAREN</code> etc., but that's another topic...</p>",
        "id": 188406970,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581973909
    },
    {
        "content": "<p>Yes, it is expected</p>",
        "id": 188407136,
        "sender_full_name": "matklad",
        "timestamp": 1581974134
    },
    {
        "content": "<p>More specifically, at this stage it doesn't really makes sense to optimize syntax error representation a lot: as long as there's a red line in the editor, we are all good for the time being</p>",
        "id": 188407200,
        "sender_full_name": "matklad",
        "timestamp": 1581974175
    },
    {
        "content": "<p><del>I don't see those errors in Code, but they do show up in vim from time to time (<code>cargo check</code> gives better errors when it runs)</del></p>",
        "id": 188407287,
        "sender_full_name": "Laurențiu",
        "timestamp": 1581974300
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/PsVakKlpzd9J4K1Z4e5ez6YE/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/PsVakKlpzd9J4K1Z4e5ez6YE/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/PsVakKlpzd9J4K1Z4e5ez6YE/pasted_image.png\"></a></div>",
        "id": 188407297,
        "sender_full_name": "Laurențiu",
        "timestamp": 1581974337
    },
    {
        "content": "<p>By representation you mean converting <code>R_PAREN</code> to <code>)</code>, right? Because I am currently working on that PR of reshaping SyntaxError.</p>",
        "id": 188407987,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581975157
    },
    {
        "content": "<p>I mean I am not working of converting <code>R_PAREN</code> -&gt; <code>)</code>, ah...</p>",
        "id": 188408012,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581975213
    },
    {
        "content": "<p>Hmm, I remember that automatic addition of <code>///</code> for doc comments worked, or am I drunk? <a href=\"/user_uploads/4715/ZVES0TtUsf9fwWxdGVW0rZtu/comments.gif\" target=\"_blank\" title=\"comments.gif\">comments.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/ZVES0TtUsf9fwWxdGVW0rZtu/comments.gif\" target=\"_blank\" title=\"comments.gif\"><img src=\"/user_uploads/4715/ZVES0TtUsf9fwWxdGVW0rZtu/comments.gif\"></a></div>",
        "id": 188410039,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581977851
    },
    {
        "content": "<p>It works, but impl changed from <code>ontype</code> handler to a custom <code>Enter</code> keybinding</p>",
        "id": 188410097,
        "sender_full_name": "matklad",
        "timestamp": 1581977906
    },
    {
        "content": "<p>One big flaw to this, is once I have removed that binding, I cannot add it back</p>",
        "id": 188410133,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581977979
    },
    {
        "content": "<p>Though, I can add it back via messing with <code>keybindings.json</code></p>",
        "id": 188410370,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581978235
    },
    {
        "content": "<p>I'm having an issue where ra isn't highlighting certain errors until I safe, e.g. <code>fn foo() -&gt; u32 {}</code> doesn't note that the return type of the block is wrong until save.  This is in emacs with lsp-mode.  Is this known or something weird with my setup?</p>",
        "id": 188442650,
        "sender_full_name": "Benn Sundsrud",
        "timestamp": 1582025251
    },
    {
        "content": "<p>We run <code>cargo check</code> on project load and when saving a file, but not while typing (as <code>cargo</code> needs the files to be on disk), so most diagnostics will only show up then. There are some diagnostics implemented in <code>rust-analyzer</code>, e.g. parse errors should show up immediately, but not type mismatches.</p>",
        "id": 188442732,
        "sender_full_name": "Laurențiu",
        "timestamp": 1582025337
    },
    {
        "content": "<p>ah k.  Good to know it's not my setup, thanks! Also, who's emacs setup was that in the RA changelog posted on reddit, and is their .emacs public somewhere</p>",
        "id": 188443350,
        "sender_full_name": "Benn Sundsrud",
        "timestamp": 1582025956
    },
    {
        "content": "<p>I'd look at <span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> 's emacs config: <a href=\"https://github.com/flodiebold/dotfiles/commit/b412b230ae52eec4a46651c2eb692a42aaa686ea\" target=\"_blank\" title=\"https://github.com/flodiebold/dotfiles/commit/b412b230ae52eec4a46651c2eb692a42aaa686ea\">https://github.com/flodiebold/dotfiles/commit/b412b230ae52eec4a46651c2eb692a42aaa686ea</a></p>",
        "id": 188443540,
        "sender_full_name": "matklad",
        "timestamp": 1582026131
    },
    {
        "content": "<p>well, I use a hacked-together spacemacs layer... if you don't use spacemacs, I'd look into rustic</p>",
        "id": 188444719,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1582027407
    },
    {
        "content": "<p>I just tried to switch from my rust-mode setup to rustic and trying to get rustfmt to work the way I want on save was not great</p>",
        "id": 188444782,
        "sender_full_name": "Benn Sundsrud",
        "timestamp": 1582027459
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> do you think we could emit diagnosis for type mismatches if the false positive rate wasn't so large? I guess we already infer the types.</p>",
        "id": 188445126,
        "sender_full_name": "Laurențiu",
        "timestamp": 1582027862
    },
    {
        "content": "<p>yes, we even already record type mismatches (and use them for one assist)</p>",
        "id": 188445206,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1582027933
    },
    {
        "content": "<p>but the false positive rate is too large (you can see for yourself by running <code>analysis-stats</code> with <code>-v</code>)</p>",
        "id": 188445219,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1582027959
    },
    {
        "content": "<p>Maybe by next February, then <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 188445224,
        "sender_full_name": "Laurențiu",
        "timestamp": 1582027962
    },
    {
        "content": "<p>I kind of hope we'll have a mostly-complete type system by then <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 188445262,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1582027997
    },
    {
        "content": "<p>Hmm, which assist is that?</p>",
        "id": 188445270,
        "sender_full_name": "Laurențiu",
        "timestamp": 1582028004
    },
    {
        "content": "<p>if not merged with rustc, of course</p>",
        "id": 188445283,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1582028013
    },
    {
        "content": "<blockquote>\n<p>Hmm, which assist is that?</p>\n</blockquote>\n<p>there's a \"wrap with Ok\" assist that triggers if you forget to wrap your return value in <code>Ok</code></p>",
        "id": 188445364,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1582028059
    },
    {
        "content": "<p>I keep forgetting about these.</p>",
        "id": 188445426,
        "sender_full_name": "Laurențiu",
        "timestamp": 1582028119
    },
    {
        "content": "<p>we could probably do more of these <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 188445442,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1582028133
    },
    {
        "content": "<p>I think we should emit all the errors we can, but hide them being a disable by default feature flag</p>",
        "id": 188446048,
        "sender_full_name": "matklad",
        "timestamp": 1582028700
    },
    {
        "content": "<p>and we probably should do that first for nameres errors</p>",
        "id": 188446063,
        "sender_full_name": "matklad",
        "timestamp": 1582028715
    },
    {
        "content": "<p>really, that's one great question <span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> , this is a bit of work that we need to do soon!</p>",
        "id": 188446074,
        "sender_full_name": "matklad",
        "timestamp": 1582028732
    },
    {
        "content": "<blockquote>\n<p>and we probably should do that first for nameres errors</p>\n</blockquote>\n<p>That should also work well with the auto import assist we have: there's a possibility to specify a quickfix for the diagnostics.</p>",
        "id": 188446221,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1582028882
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Syntax_Errors/near/188445219\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Syntax_Errors/near/188445219\">said</a>:</p>\n<blockquote>\n<p>but the false positive rate is too large (you can see for yourself by running <code>analysis-stats</code> with <code>-v</code>)</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span>src/db.rs 32:52-32:54: Expected &amp;dyn AstDatabase, got &amp;dyn AstDatabase\n\nsrc/codegen/gen_syntax.rs 3:4-3:7: Expected str, got String\nsrc/codegen/gen_syntax.rs 3:4-3:7: Expected str, got String\nsrc/codegen/gen_syntax.rs 3:4-3:7: Expected str, got String\nsrc/codegen/gen_syntax.rs 3:4-3:7: Expected str, got String\nsrc/codegen/gen_syntax.rs 3:4-3:7: Expected str, got String\nsrc/codegen/gen_syntax.rs 3:4-3:7: Expected str, got String\nsrc/codegen/gen_syntax.rs 3:4-3:7: Expected str, got String\nsrc/codegen/gen_syntax.rs 3:4-3:7: Expected str, got String\nsrc/codegen/gen_syntax.rs 3:4-3:7: Expected str, got String\nsrc/codegen/gen_syntax.rs 3:4-3:7: Expected str, got String\nsrc/codegen/gen_syntax.rs 3:4-3:7: Expected str, got String\nsrc/codegen/gen_syntax.rs 3:4-3:7: Expected str, got String\n</pre></div>\n\n\n<p>I'm not sure what I'm looking at <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span>. <code>gen_syntax.rs 3:4</code> is inside a doc comment.</p>",
        "id": 188823827,
        "sender_full_name": "Laurențiu",
        "timestamp": 1582389414
    },
    {
        "content": "<p>that's inside a macro, we don't map the spans correctly there</p>",
        "id": 188824300,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1582390174
    },
    {
        "content": "<p>Ah.</p>",
        "id": 188824357,
        "sender_full_name": "Laurențiu",
        "timestamp": 1582390258
    }
]