[
    {
        "content": "<p>Hey, I suggest changing the strategy of asserts in rust-analyzer: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/7270\">https://github.com/rust-analyzer/rust-analyzer/pull/7270</a></p>",
        "id": 222732623,
        "sender_full_name": "matklad",
        "timestamp": 1610638105
    },
    {
        "content": "<p>TL;DR: instead of <code>assert!(cond)</code>, we now write</p>",
        "id": 222732696,
        "sender_full_name": "matklad",
        "timestamp": 1610638143
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 222732700,
        "sender_full_name": "matklad",
        "timestamp": 1610638145
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">stdx</span>::<span class=\"n\">assert_never</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">cond</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">handle_impossible</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 222732803,
        "sender_full_name": "matklad",
        "timestamp": 1610638192
    },
    {
        "content": "<p>I like it, it splits the difference between \"this should never happen and I want to check that\" and \"but it'd actually be pretty easy to do something sensible in this situation\", which is a dilemma that I have all the time...</p>",
        "id": 222733015,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1610638282
    },
    {
        "content": "<p>yay fearless assertivness!</p>",
        "id": 222733183,
        "sender_full_name": "matklad",
        "timestamp": 1610638333
    },
    {
        "content": "<p>I think you might've forgotten to push the <code>assert_always</code> macro with it, the <code>assert_never</code> macro references it in the first transcriber but it doesn't exist <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <a href=\"https://github.com/rust-analyzer/rust-analyzer/commit/8dc68ecdfcc764c7c0dcf5fcedcb51b092d99620#diff-4ab2b49eae91be2ce0307d9a427fb0cacf505aec4881b742d9bee842d580e81bR69\">https://github.com/rust-analyzer/rust-analyzer/commit/8dc68ecdfcc764c7c0dcf5fcedcb51b092d99620#diff-4ab2b49eae91be2ce0307d9a427fb0cacf505aec4881b742d9bee842d580e81bR69</a></p>",
        "id": 222768565,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1610652051
    },
    {
        "content": "<p>argh</p>",
        "id": 222772826,
        "sender_full_name": "matklad",
        "timestamp": 1610653596
    },
    {
        "content": "<p>it's rather that I was lazy to push implement both macros, and botched a rename from always to never</p>",
        "id": 222772925,
        "sender_full_name": "matklad",
        "timestamp": 1610653645
    },
    {
        "content": "<p>noting defeats the advantages of a strong static type system quite as effectively as a powerful macro machinery</p>",
        "id": 222773089,
        "sender_full_name": "matklad",
        "timestamp": 1610653698
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>, I think long-term it might make sense to use something like this for chalk? We hit assertion errors fairly often, and, long term, they shouldn't crash the whole request. </p>\n<p>OTOH, right now crashing rust-analyzer might be nice, because it forces users to come up with sweat minimal examples: <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/6956#issuecomment-764459620\">https://github.com/rust-analyzer/rust-analyzer/issues/6956#issuecomment-764459620</a></p>",
        "id": 223482413,
        "sender_full_name": "matklad",
        "timestamp": 1611219219
    },
    {
        "content": "<p>I don't know, e.g. the \"wrong number of type parameters substituted into a type\" indicates a rather severe bug somewhere, and at the point of that assertion it's a pretty deep assumption that's very hard to continue without</p>",
        "id": 223490087,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1611224437
    },
    {
        "content": "<p>That's also true. Hm, don't we wrap chalk into catch_unwind already? I guess then it doesn't really matter</p>",
        "id": 223491270,
        "sender_full_name": "matklad",
        "timestamp": 1611225280
    },
    {
        "content": "<p>I don't think we do anymore</p>",
        "id": 223491828,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1611225635
    },
    {
        "content": "<p>I guess we could handle it similar to an assert_never around the whole solver call</p>",
        "id": 223491868,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1611225679
    },
    {
        "content": "<p>I'm with <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> here: it would be really hard to recover from most of the errors we encounter. It might be worth introducing some kind of <code>FatalError</code> state that can be returned instead of a solution (or lack of). Then try to bubble that up. But that would mean refactoring basically the entire codebase. At that point, it's probably easier to just panic/catch_unwind</p>",
        "id": 223514901,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611239323
    }
]