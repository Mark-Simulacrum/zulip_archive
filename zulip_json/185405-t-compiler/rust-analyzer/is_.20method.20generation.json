[
    {
        "content": "<p>Hello!</p>\n<p>I am loving the new changelog with <code>is_</code> method generation. although there are a couple things which confuse me:</p>\n<ul>\n<li>Why does it use <code>matches!</code> even if the enum implements PartialEq?</li>\n<li>Why can it not generate the methods for tuple/struct variants? this is a little frustrating when using it for things like ASTs.</li>\n</ul>\n<p>Id be wiling to PR both changes for learning more about RA.</p>",
        "id": 225607345,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1612817953
    },
    {
        "content": "<p>regarding point 2, this was already filed <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/7601\">https://github.com/rust-analyzer/rust-analyzer/issues/7601</a> feel free to implement that <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 225610878,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1612819658
    },
    {
        "content": "<p>regarding point 1, what would be the benefit of using <code>PartialEq</code> over <code>matches!</code>?</p>",
        "id": 225611000,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1612819708
    },
    {
        "content": "<p>Matches is actually more efficient usually</p>",
        "id": 225618017,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612822855
    },
    {
        "content": "<p>PartialEq is usually implemented in terms of a match</p>",
        "id": 225618037,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612822865
    },
    {
        "content": "<p>Filed an additional bug regarding the lint: <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/7605\">https://github.com/rust-analyzer/rust-analyzer/issues/7605</a></p>\n<p>The generated methods should be appended, not prepended to the impl block</p>",
        "id": 225618665,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1612823256
    },
    {
        "content": "<p>Probably a matter of finding the last close <code>}</code> in the block, and then inserting the method right before that. This should probably be a new method in utils tho</p>",
        "id": 225618769,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1612823285
    },
    {
        "content": "<p>Where is the code for this assist located so i can take a look?</p>",
        "id": 225634616,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1612834204
    },
    {
        "content": "<p>lol nevermind i found it</p>",
        "id": 225634700,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1612834299
    },
    {
        "content": "<blockquote>\n<p>Why does it use matches! even if the enum implements PartialEq?</p>\n</blockquote>\n<p>Also, <code>matches!</code> always works, while <code>eq</code> only works if it implements <code>PartialEq</code></p>",
        "id": 225656350,
        "sender_full_name": "Laurențiu",
        "timestamp": 1612858746
    },
    {
        "content": "<p>And filed another one <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/7607\">https://github.com/rust-analyzer/rust-analyzer/issues/7607</a> -- already know how to fix this, will send through a patch later.</p>",
        "id": 225680023,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1612872166
    },
    {
        "content": "<p>(first time contributing  code to RA, still learning how the various parts of an assist fit together <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> )</p>",
        "id": 225680082,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1612872201
    },
    {
        "content": "<p>Another issue i found is that it produces invalid intra doc links for its docs</p>",
        "id": 225696725,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1612880800
    },
    {
        "content": "<p>Since it just writes the variant without the enum beforehand</p>",
        "id": 225696782,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1612880825
    },
    {
        "content": "<p>This makes it fail check-doc-links CI which made me a bit confused when i pushed to my repo <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 225696848,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1612880859
    },
    {
        "content": "<p>Maybe if it is trivial to see if the variants are in scope then use the variants directly and otherwise fully qualify them?</p>",
        "id": 225697002,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1612880916
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276242\">Riccardo D'Ambrosio</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/is_.20method.20generation/near/225697002\">said</a>:</p>\n<blockquote>\n<p>Maybe if it is trivial to see if the variants are in scope then use the variants directly and otherwise fully qualify them?</p>\n</blockquote>\n<p>It seems reasonable to always qualify the variants with the enum name</p>",
        "id": 225698933,
        "sender_full_name": "Laurențiu",
        "timestamp": 1612881661
    }
]