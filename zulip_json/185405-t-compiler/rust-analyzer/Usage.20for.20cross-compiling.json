[
    {
        "content": "<p>Hey, so I'm interested in how to setup rust-analyzer for different targets. I've got <code>.cargo/config</code> to include</p>\n<div class=\"codehilite\"><pre><span></span>[build]\ntarget = &quot;x86_64-apple-darwin&quot;\n</pre></div>\n\n\n<p>but it doesn't seem to result in rest-analyzer working on the correct target. Is there a github issue for this maybe?</p>",
        "id": 195352970,
        "sender_full_name": "simlay",
        "timestamp": 1587935647
    },
    {
        "content": "<p>That's a somewhat popular question recently: <a href=\"#narrow/stream/122651-general/topic/Define.20a.20default.20target/near/195290371\" title=\"#narrow/stream/122651-general/topic/Define.20a.20default.20target/near/195290371\">https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/Define.20a.20default.20target/near/195290371</a></p>",
        "id": 195353096,
        "sender_full_name": "matklad",
        "timestamp": 1587935901
    },
    {
        "content": "<p>I think it should be pretty easy to fix</p>",
        "id": 195353099,
        "sender_full_name": "matklad",
        "timestamp": 1587935916
    },
    {
        "content": "<p>(the linked discussion shows the places where the fix needs to be applied)</p>",
        "id": 195353102,
        "sender_full_name": "matklad",
        "timestamp": 1587935931
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> I <em>think</em>  you might be hitting this as well probably?</p>",
        "id": 195353109,
        "sender_full_name": "matklad",
        "timestamp": 1587935948
    },
    {
        "content": "<p>Not at the moment, but it would be great to have indeed</p>",
        "id": 195353115,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1587935972
    },
    {
        "content": "<p>(creating an issue with pointers to code would be appreciated :) )</p>",
        "id": 195353116,
        "sender_full_name": "matklad",
        "timestamp": 1587935975
    },
    {
        "content": "<p>oh nice. I'll create an issue.</p>",
        "id": 195353124,
        "sender_full_name": "simlay",
        "timestamp": 1587935992
    },
    {
        "content": "<p>When I work on code that does require setting a target I usually just do <code>cargo check --target xxx</code> in some terminal</p>",
        "id": 195353173,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1587936028
    },
    {
        "content": "<p>Yeah, I think it's important to understand that there are two issues here:</p>\n<ul>\n<li>how we run <code>cargo check</code> (and this is possible to tweak today via settings)</li>\n<li>which <code>cfg</code> we use to analyze code (and this I <em>think</em>, is unconditionally host today)</li>\n</ul>",
        "id": 195353204,
        "sender_full_name": "matklad",
        "timestamp": 1587936106
    },
    {
        "content": "<p>Although for the second bit I'd expect the <code>[build]</code> in <code>.cargo/confgi</code> to actually fix it....</p>",
        "id": 195353245,
        "sender_full_name": "matklad",
        "timestamp": 1587936124
    },
    {
        "content": "<p>Ahh, that might not be enough, becuase we also query rustc for this info, bypassing cargo</p>",
        "id": 195353248,
        "sender_full_name": "matklad",
        "timestamp": 1587936143
    },
    {
        "content": "<p>ah, yes that makes sense.</p>",
        "id": 195353256,
        "sender_full_name": "simlay",
        "timestamp": 1587936222
    },
    {
        "content": "<p>Would be fun to treat <code>#[cfg]</code> like where clauses: When in a function, assume that all <code>#[cfg]</code>s \"in scope\" are available (ie. on the function or on its containing items/modules) and provide IDE features based on that (enabling any items with a subset of these <code>#[cfg]</code>s).</p>",
        "id": 195353315,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1587936323
    },
    {
        "content": "<p>Would be fun to design a language in such a way that conditional compilation happens <em>after</em> name resolution and not before it D:</p>",
        "id": 195353366,
        "sender_full_name": "matklad",
        "timestamp": 1587936367
    },
    {
        "content": "<p>...or in which you wouldn't have to implement a full language interpreter to offer correct completions</p>",
        "id": 195353375,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1587936405
    },
    {
        "content": "<p>Well, implementing language interpreter is an easier task than conditional compilation</p>",
        "id": 195353388,
        "sender_full_name": "matklad",
        "timestamp": 1587936444
    },
    {
        "content": "<p>In a sense that constexpr and such have one precise answer</p>",
        "id": 195353391,
        "sender_full_name": "matklad",
        "timestamp": 1587936458
    },
    {
        "content": "<p>With cross-compilation, you sorta-kinda need to merge analysis results from diffierent sets of enabled cfgs, and that is a problem which is much fuzzier</p>",
        "id": 195353441,
        "sender_full_name": "matklad",
        "timestamp": 1587936499
    },
    {
        "content": "<p>I submitted <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/4163\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/4163\">https://github.com/rust-analyzer/rust-analyzer/issues/4163</a> with relevant words and links</p>",
        "id": 195354180,
        "sender_full_name": "simlay",
        "timestamp": 1587937854
    }
]