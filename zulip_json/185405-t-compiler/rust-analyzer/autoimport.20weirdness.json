[
    {
        "content": "<p>autoimport seems to want to import methods from trait impls? e.g. in current master, in <code>autoderef.rs</code>, go inside a function and type <code>from_chalk</code>. It proposes two autoimports, <code>hir_def::ImplId</code> and <code>hir_def::TraitId</code>. those aren't even traits :/</p>",
        "id": 230586843,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1615926996
    },
    {
        "content": "<p>also, if I remove the <code>Interner</code> use in the same module, it can't autoimport it again</p>",
        "id": 230586992,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1615927073
    },
    {
        "content": "<p>OTOH, if I type <code>Interner</code> in <code>diagnostics.rs</code> (still in hir_ty), it proposes <code>crate::Interner</code> _twice_?</p>",
        "id": 230587180,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1615927145
    },
    {
        "content": "<p>I also saw some missing items today</p>",
        "id": 230591302,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1615928759
    },
    {
        "content": "<p>For me, <code>Interner</code> appears if I type it fully, so this is still <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/7902\">https://github.com/rust-analyzer/rust-analyzer/issues/7902</a> but just for a different crate.</p>\n<p>It is surprisingly many fuzzy-matching non-qualified names for such words as <code>interner</code>, and our current limit (40) gets too many associated items before the proper results.</p>",
        "id": 230591557,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1615928877
    },
    {
        "content": "<p>Weird and duplicated appearances are most probably bugs in <code>import_assets.rs</code>, but there's always a slight chance that trait resolution is somehow involved <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> </p>\n<p>Great findings though, I can dig the later closer to the end of the week.</p>",
        "id": 230592418,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1615929224
    },
    {
        "content": "<p>hmm interesting, <code>Interner</code> appears in the <code>autoderef</code> function, but not in <code>autoderef_by_trait</code> (except for the chalk Interner)</p>",
        "id": 230645010,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1615963308
    },
    {
        "content": "<p>Can we make it \"smart-cased\" or case-sensitive to get fewer results?</p>",
        "id": 230648988,
        "sender_full_name": "Laurențiu",
        "timestamp": 1615966600
    },
    {
        "content": "<p>I find it a bit suspicious that there would be so many results</p>",
        "id": 230649227,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1615966822
    },
    {
        "content": "<p>I was looking at the screenshot in <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/7902\">https://github.com/rust-analyzer/rust-analyzer/issues/7902</a> where we suggest <code>atomic_xor_acq</code> for <code>Arc</code>. But that seems too fuzzy, even for <code>arc</code>.</p>",
        "id": 230649288,
        "sender_full_name": "Laurențiu",
        "timestamp": 1615966899
    },
    {
        "content": "<p>yeah... personally I would actually be fine with just prefix matching, but another option would also be splitting names (on <code>_</code> and capital letters) and matching on starting letters of words (e.g. IntelliJ's class search for java lets you match <code>ThingFactory</code> with <code>tf</code>), or just making sure that these kinds of matches always come first</p>",
        "id": 230651262,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1615968089
    },
    {
        "content": "<p>Currently, the search is based on <a href=\"https://github.com/BurntSushi/fst\"><code>fst</code></a> lookup which stores the strings with lowercased fully qualified names + an integer key to get the associated data.<br>\nfst requres the sorted input strings, so the semantic ordering is messed up greatly, but we get a fast fuzzy lookup in return.<br>\nThen we apply some semantics aware post-filtering on top of all data found, so it's a bit tricky to make something to always come first.</p>\n<p>We can work on making some match scoring of the results: in <code>fst</code>, there's Levenstein distance available, but for \"starting letters of words\" it should be something more complex?<br>\nAfter we derive the scoring, we keep the score-sorted interemediate collection to hold the data and decide when the collection is filled enough for the search.<br>\nWe can also split off the assoc items from the rest or add whatever <code>¢æ</code> special logic bytes in <code>fst</code> to make the original queries better.<br>\nNot sure if that's all feasible to do before some benchmarks appear first.</p>\n<p>I like the idea of a more clever search though (i.e. more sophisticated post-filtering), that can be relatively simple and safe to do.<br>\nIf we take the capital letters case, I have no idea what a \"smart-cased\" and \"prefix matching\" means alas.<br>\nBut imagined we could require the fst results to contain all capital letters from the input, or simply make all searches case-sensitive <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ide_db/src/items_locator.rs\">here</a> and see how it works out for you.</p>\n<p>Search limits are also simple to bump in the same <code>items_locator.rs</code>.<br>\nI've experienced bad timings when set it up to <code>usize::MAX</code>, so we cannot just turn it off, but maybe we should move it to settings after all?</p>",
        "id": 230664462,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1615974984
    },
    {
        "content": "<p>Smart case is doing a case-sensitive match (only) if there are upper-case letters in the input. Doing a better post-filtering sounds reasonable, I guess.</p>",
        "id": 230665725,
        "sender_full_name": "Laurențiu",
        "timestamp": 1615975641
    },
    {
        "content": "<p>IMO we should first look into those suspicious issues I mentioned at the beginning (if we're indexing methods from trait impls, that's a huge amount of results we can just get rid of)</p>",
        "id": 230667368,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1615976524
    },
    {
        "content": "<p>regarding 'first letters of words' matching, I'm pretty sure it should be possible to represent that as an FST, but we'd have to implement it ourselves I guess</p>",
        "id": 230667717,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1615976751
    },
    {
        "content": "<blockquote>\n<p>it should be possible to represent that as an FST, but we'd have to implement it ourselves I guess</p>\n</blockquote>\n<p>This probably wants to be a separate layer on top of FST. we want to apply the same logic for usual completion ranking.</p>",
        "id": 230667844,
        "sender_full_name": "matklad",
        "timestamp": 1615976798
    },
    {
        "content": "<p>Yes, the weird results + the smart casing look very interesting, I'll check it out later, as planned.</p>",
        "id": 230667853,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1615976804
    },
    {
        "content": "<blockquote>\n<p>it should be possible to represent that as an FST, but we'd have to implement it ourselves I guess</p>\n</blockquote>\n<p>In that case, I'd love to drag into that new FST the \"current crates\" of the project and remove the symbol lookup we have instead.</p>",
        "id": 230667924,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1615976857
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/autoimport.20weirdness/near/230667844\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>it should be possible to represent that as an FST, but we'd have to implement it ourselves I guess</p>\n</blockquote>\n<p>This probably wants to be a separate layer on top of FST. we want to apply the same logic for usual completion ranking.</p>\n</blockquote>\n<p>if we can construct an FST, we can probably use that to match completions as well. I think implementing it as an FST would be more performant and get rid of those \"too many results, so the interesting ones were outside the search limit\" problems</p>",
        "id": 230668328,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1615977101
    },
    {
        "content": "<p>btw, I just saw that the fst crate says</p>\n<blockquote>\n<p>The construction of Levenshtein automatons should be consider \"proof of concept\" quality. Namely, they do just enough to be correct. But they haven't had any effort put into them to be memory conscious.</p>\n</blockquote>\n<p><span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 230668584,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1615977239
    },
    {
        "content": "<p>btw, as a positive side-note, autoimport completions now work nicely in Emacs (they needed some fixes in lsp-mode)</p>",
        "id": 230731124,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1616001464
    },
    {
        "content": "<blockquote>\n<p>in current master, in <a href=\"http://autoderef.rs\">autoderef.rs</a>, go inside a function and type from_chalk.</p>\n</blockquote>\n<p>Come to finally think of it: what would you expect to be completed in this case?<br>\nAfaik, even for associated functions, you have to specify some non-trait type to call the actual method? <br>\nSo just completing <code>from_chalk</code> with a trait auto import will produce the code that does not compile, won't it?</p>\n<p>What if we disallow such completions entirely?</p>",
        "id": 231050214,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1616171147
    },
    {
        "content": "<p>there's a <code>pub(crate) fn from_chalk</code> in <code>chalk.rs</code></p>",
        "id": 231052018,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1616171825
    },
    {
        "content": "<p>all the trait methods are a red herring here ;)</p>",
        "id": 231052053,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1616171841
    },
    {
        "content": "<p>so yeah, I'd expect only that one</p>",
        "id": 231052214,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1616171894
    },
    {
        "content": "<p>I now understand what's happening with the non-trait suggestions: <code>import_map</code> is indeed fine, indexing only trait-related assoc items.<br>\nBut <code>from_chalk</code> is the part of the current project, it's not held in the <code>import_map</code>: instead, it's held in the text index that's searched separately (i.e. project's imports and external crates' imports are searched separately).<br>\nThere, for <code>from_chalk</code>, plenty of assoc items returned, including the non-trait ones.</p>\n<p>Then, after fiddling with flyimport completion with path prefixes, I've forgotten about this and let such assoc items slip into and allowed such completions in general.</p>",
        "id": 231055536,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1616173188
    },
    {
        "content": "<p>On the other hand, there can be associated items and imports with zero traits involved, so the way we do it in <code>import_map</code> isn't also 100% correct?</p>\n<div class=\"codehilite\"><pre><span></span><code>mod foo {\n    pub mod bar {\n        pub struct Item;\n\n        impl Item {\n            pub const TEST_ASSOC: usize = 3;\n        }\n    }\n}\n\nuse crate::foo::bar;\n\nfn main() {\n    let _thee = bar::Item::TEST_ASSOC;\n}\n</code></pre></div>",
        "id": 231102053,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1616195376
    },
    {
        "content": "<p>these are always accessed through the type, I believe</p>",
        "id": 231103221,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616196107
    },
    {
        "content": "<p>Just to sum things up with <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/8123\">https://github.com/rust-analyzer/rust-analyzer/pull/8123</a> </p>\n<ul>\n<li>\n<p>no weird <code>ImplId</code>, <code>TraitId</code> and others in <code>autoderef.rs</code>. We've also lost other unqualified items along the way and discussing it in the PR, but nothing false-positive at least <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> </p>\n</li>\n<li>\n<p>I see no double <code>Interner</code> in <code>hir_ty/diagnostics.rs</code> anymore, seems to be the part of the same \"weird\" import bug</p>\n</li>\n<li>\n<p>smart casing feels really nice, I have a separate branch for that ready after the PR mentioned above lands.<br>\nIt also helps a lot with external names like <code>Arc</code>.</p>\n</li>\n<li>\n<p><code>deref_by_trait</code> has no <code>crate::Interner</code> proposals at all still.<br>\nThis is the most weird: I've traced it down to <code>symbol_index::crate_symbols</code> query in <code>items_locator.rs</code>: seems like our text index stops returning the results in this method entirely when the import is gone. I see various <code>.intern(&amp;Interner)</code> used in that particular method, so I wonder if that has something to do with the index, spoiling it. Weird though, that it's position-dependent. I could dig it further, but I still feel like we have to have a single source of imports with a single way to look up things, not two like we do now, so I'd rather merge both instead of debugging it.</p>\n</li>\n<li>\n<p><code>Interner</code> is still very late to appear in the completion list, even with the smart casing, something is odd here.<br>\nSince it's a local item, it's either abundant assoc items in the text index or some other text index quirks. Either way, same thoughts as in the previous bullet apply: instead of fiddling with the text index separately, it might make sense to move all into <code>import_map</code> and fiddle with it instead, once and for all.</p>\n</li>\n</ul>",
        "id": 231178931,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1616283399
    }
]