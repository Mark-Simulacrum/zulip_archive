[
    {
        "content": "<p>I added issues with hopefully adequate mentoring instructions for <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/1425\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/1425\">for loops</a> and the <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/1426\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/1426\">? operator</a>. I guess this would be a good place for questions (and/or disagreements about handling them directly instead of desugaring) ;)</p>",
        "id": 168751523,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1561210458
    },
    {
        "content": "<p>I'd like to go via desugaring, but <em>not</em> as the initial implementation. Desugaring is tricky for IDEs, so it makes sense to experiment with it more.</p>",
        "id": 168751731,
        "sender_full_name": "matklad",
        "timestamp": 1561210889
    },
    {
        "content": "<p>Yeah. In any case, I think everything we need to build for the 'handling it directly' approach we would also need for the desugaring approach.</p>",
        "id": 168752143,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1561211750
    },
    {
        "content": "<p>That's true, and, for desugaring, I think it maybe makes sense to to a bit of up-front design of the hir::Body, scopes and source maps. I feel like the current incarnation is not the best one: in particular, it seems like we should name-resolve expressions when lowering to the <code>Body</code>.</p>",
        "id": 168752438,
        "sender_full_name": "matklad",
        "timestamp": 1561212352
    },
    {
        "content": "<p>i know someone has already taken this on github - but i was giving this a stab on sunday and got stuck at <code>resolve_obligations_as_possible</code> on the line <code>let (solution, canonicalized) = match &amp;obligation</code> where the compiler keeps on not allowing me to have a generic over Canonicalized&lt;T&gt;. if i could get past that (or if zbelial solves it) - imight be able to work on the ? inference</p>",
        "id": 169097780,
        "sender_full_name": "levi",
        "timestamp": 1561601307
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"217399\">@levi</span> could you push your in-progress branch somewhere? It would be easier to see the problem that way.</p>",
        "id": 169127129,
        "sender_full_name": "matklad",
        "timestamp": 1561636531
    },
    {
        "content": "<p><a href=\"https://github.com/urbandove/rust-analyzer/tree/for-loops\" target=\"_blank\" title=\"https://github.com/urbandove/rust-analyzer/tree/for-loops\">https://github.com/urbandove/rust-analyzer/tree/for-loops</a> currently - i think im supposed to add a trait - but i couldnt get that wokring</p>",
        "id": 169128202,
        "sender_full_name": "levi",
        "timestamp": 1561637342
    },
    {
        "content": "<p>So, that's the limitation of Rust: you have match arms of different types, and in Rust, unlike something Java, you can't unify those to a super-type</p>",
        "id": 169128705,
        "sender_full_name": "matklad",
        "timestamp": 1561637790
    },
    {
        "content": "<p>The simplest fix would be to just pull the code <em>after</em> the match branch inside:</p>\n<div class=\"codehilite\"><pre><span></span>    fn resolve_obligations_as_possible(&amp;mut self) {\n        let obligations = mem::replace(&amp;mut self.obligations, Vec::new());\n        for obligation in obligations {\n            match &amp;obligation {\n                Obligation::Trait(tr) =&gt; {\n                    let canonicalized = self.canonicalizer().canonicalize_trait_ref(tr.clone());\n                    let (solution, canonicalized) = (\n                        self.db.implements(\n                            self.resolver.krate().unwrap(),\n                            canonicalized.value.clone(),\n                        ),\n                        canonicalized,\n                    );\n                    match solution {\n                        Some(Solution::Unique(substs)) =&gt; {\n                            canonicalized.apply_solution(self, substs.0);\n                        }\n                        Some(Solution::Ambig(Guidance::Definite(substs))) =&gt; {\n                            canonicalized.apply_solution(self, substs.0);\n                            self.obligations.push(obligation);\n                        }\n                        Some(_) =&gt; {\n                            // FIXME use this when trying to resolve everything at the end\n                            self.obligations.push(obligation);\n                        }\n                        None =&gt; {\n                            // FIXME obligation cannot be fulfilled =&gt; diagnostic\n                        }\n                    }\n                }\n                Obligation::Projection(pr) =&gt; {\n                    let canonicalized = self.canonicalizer().canonicalize_projection(pr.clone());\n                    let (solution, canonicalized) = (\n                        self.db\n                            .normalize(self.resolver.krate().unwrap(), canonicalized.value.clone()),\n                        canonicalized,\n                    );\n                    match solution {\n                        Some(Solution::Unique(substs)) =&gt; {\n                            canonicalized.apply_solution(self, substs.0);\n                        }\n                        Some(Solution::Ambig(Guidance::Definite(substs))) =&gt; {\n                            canonicalized.apply_solution(self, substs.0);\n                            self.obligations.push(obligation);\n                        }\n                        Some(_) =&gt; {\n                            // FIXME use this when trying to resolve everything at the end\n                            self.obligations.push(obligation);\n                        }\n                        None =&gt; {\n                            // FIXME obligation cannot be fulfilled =&gt; diagnostic\n                        }\n                    }\n                }\n            };\n        }\n    }\n</pre></div>",
        "id": 169128739,
        "sender_full_name": "matklad",
        "timestamp": 1561637830
    },
    {
        "content": "<p>The duplicated part can be extracted into a generic function to make this nicer</p>",
        "id": 169128761,
        "sender_full_name": "matklad",
        "timestamp": 1561637862
    },
    {
        "content": "<p>I am not sure if that is the right code to begin with, I am not really proficient with chalk, but that at lest fixes the compilation error :D</p>",
        "id": 169128826,
        "sender_full_name": "matklad",
        "timestamp": 1561637900
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"217399\">@levi</span> does that help?</p>",
        "id": 169128835,
        "sender_full_name": "matklad",
        "timestamp": 1561637913
    },
    {
        "content": "<p>another possibility might be canonicalizing the whole <code>Obligation</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>  in addition to <code>canonicalize_trait_ref</code> and <code>canonicalize_projection</code>, you'd have <code>canonicalize_obligation</code>, and you'd call that before the match and then do the match on the canonicalized obligation, and the rest could be generic again (I think)</p>",
        "id": 169137426,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1561644186
    },
    {
        "content": "<p>i was thinking about that - it just looked overly verbose to me - and though there was an easier way.<br>\nill try that later today and see how it goes. and maybe after if i get that working i can have a look at trying what <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> suggested</p>",
        "id": 169141884,
        "sender_full_name": "levi",
        "timestamp": 1561647151
    }
]