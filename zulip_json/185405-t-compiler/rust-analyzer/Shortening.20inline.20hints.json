[
    {
        "content": "<p>For shortening inline type hints, I'd hoped to transform the type a bit to change long parts to <code>_</code> or <code>...</code> or similar.<br>\nIs it better to replace those parts with some dummy types that print the right thing, or is it possible to display just parts of the type without re-implementing the whole formatting part?</p>",
        "id": 177809621,
        "sender_full_name": "detrumi",
        "timestamp": 1570714237
    },
    {
        "content": "<p>I guess the formatting part could be refactored to take an optional depth parameter? Maybe using unlimited depth for when you hover over the declaration, but inline hints and hovering over uses could be limited too</p>",
        "id": 177809819,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1570714341
    },
    {
        "content": "<p>Good question! I don't know the right answer :)</p>\n<p>I think we need some of general formatting infra with knobs in ra_hir, and use it for both HirDispaly and type hints. Basically, what <span class=\"user-mention\" data-user-id=\"200146\">@Daniel Mcnab</span> suggesting</p>",
        "id": 177809871,
        "sender_full_name": "matklad",
        "timestamp": 1570714385
    },
    {
        "content": "<p>Type hints use the HirDisplay trait, so it makes sense to extend that then, yeah</p>",
        "id": 177810052,
        "sender_full_name": "detrumi",
        "timestamp": 1570714508
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> I had something different in mind. I think extending <code>HirDisplay</code> would put complexity in the wrong place.</p>\n<p>Rather, we should extend only <code>Ty</code> display, but implmenet <code>&lt;Ty as HirDisplay&gt;</code> in terms of that new infra</p>",
        "id": 177810191,
        "sender_full_name": "matklad",
        "timestamp": 1570714574
    },
    {
        "content": "<p>basically</p>\n<div class=\"codehilite\"><pre><span></span>fn display_ty(ty: &amp;Ty, knobs: Kbobs) -&gt; Stirng { ... }\n\nimpl HirDispaly for Ty {\n    fn fmt(&amp;self) {  display_ty(self, Knobs::default()) }\n}\n</pre></div>",
        "id": 177810233,
        "sender_full_name": "matklad",
        "timestamp": 1570714621
    },
    {
        "content": "<p>Oooh, that's nice</p>",
        "id": 177810267,
        "sender_full_name": "detrumi",
        "timestamp": 1570714656
    },
    {
        "content": "<p>Well... extending only <code>Ty</code> display would mean the knobs would get lost e.g. in <code>impl Trait&lt;SomeType&gt;</code></p>",
        "id": 177811781,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1570715677
    },
    {
        "content": "<p>=/</p>",
        "id": 177811849,
        "sender_full_name": "matklad",
        "timestamp": 1570715724
    },
    {
        "content": "<p>unless you mean completely building a parallel displaying infrastructure that allows the knobs</p>",
        "id": 177811857,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1570715729
    },
    {
        "content": "<p>then we could just implement <code>HirDisplay</code> for that</p>",
        "id": 177811880,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1570715752
    },
    {
        "content": "<p>I think we need something like that</p>",
        "id": 177811942,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1570715772
    },
    {
        "content": "<p>Might be a good idea to check what itellij is doing</p>",
        "id": 177812860,
        "sender_full_name": "matklad",
        "timestamp": 1570716333
    },
    {
        "content": "<p>Looks they're building a collapsible structure based on the depth</p>",
        "id": 177814218,
        "sender_full_name": "detrumi",
        "timestamp": 1570717162
    },
    {
        "content": "<p>Or levels, with some logic for checking sizes</p>",
        "id": 177814340,
        "sender_full_name": "detrumi",
        "timestamp": 1570717222
    },
    {
        "content": "<p>Oooh, right, the don't render directly to string....</p>\n<p>I wonder if we should actually do the same? Produce a tree, with a hints like \"you can collapse this node\", and let the client handle getting the actual string</p>",
        "id": 177814369,
        "sender_full_name": "matklad",
        "timestamp": 1570717248
    },
    {
        "content": "<p>We could, though it would complicate the client somewhat</p>",
        "id": 177814684,
        "sender_full_name": "detrumi",
        "timestamp": 1570717453
    },
    {
        "content": "<p>Unless we let clients choose between string or tree representation</p>",
        "id": 177814760,
        "sender_full_name": "detrumi",
        "timestamp": 1570717506
    },
    {
        "content": "<p>That's true.... Yeah, I think, as a first cut, we really should just be sending strings to the editor. But it makes sense to keep a more powerful impl in mind while implementhig this</p>",
        "id": 177814795,
        "sender_full_name": "matklad",
        "timestamp": 1570717535
    },
    {
        "content": "<p>Yeah, I think building some tree structure and handling the presentation/collapsing stuff etc. as a second step is actually a good approach</p>",
        "id": 177824805,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1570723323
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> maybe that tree structure is just a syntax tree again?</p>",
        "id": 177824836,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1570723360
    },
    {
        "content": "<p>Ideally we'd create some indirection in the <code>hir_fmt</code> functions, so that they don't call <code>hir_fmt</code> on children directly. Maybe change <code>ty.hir_fmt(f)</code> to something like <code>f.fmt(ty)</code>, where a different formatter can handle the level logic?</p>",
        "id": 177908072,
        "sender_full_name": "detrumi",
        "timestamp": 1570801709
    },
    {
        "content": "<p>So I've been experimenting a bit on this, and there's a few ways to go here:<br>\n1) The simplest is to still write directly to string, but add some knobs (just a folding level in the simplest case). This is fairly easy to add to <code>HirDisplayWrapper</code>, <a href=\"https://github.com/rust-analyzer/rust-analyzer/compare/master...detrumi:hir-display-levels\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/compare/master...detrumi:hir-display-levels\">this WIP branch</a> shows an example<br>\n2A) Changing <code>HirDisplay</code> so that it returns an intermediate tree representation that tracks which parts can be collapsed, so we can use a single <code>HirDisplay</code> implementation for both type hints and normal <code>Display</code> impls. I've got a <a href=\"https://github.com/rust-analyzer/rust-analyzer/compare/master...detrumi:hir-display-tree\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/compare/master...detrumi:hir-display-tree\">very WIP branch</a> that shows the idea. The main downside of this approach is that the <code>HirDisplay</code> impl's get more complex because they need to decide what's collapsible and such<br>\n2B) Create new infrastructure for showing type hints that's separate from <code>HirDisplay</code>. This is <a href=\"https://github.com/intellij-rust/intellij-rust/blob/f884688720a04cb69d41b48acfe6318a24a8ccba/src/main/kotlin/org/rust/ide/hints/RsTypeHintsPresentationFactory.kt#L22\" target=\"_blank\" title=\"https://github.com/intellij-rust/intellij-rust/blob/f884688720a04cb69d41b48acfe6318a24a8ccba/src/main/kotlin/org/rust/ide/hints/RsTypeHintsPresentationFactory.kt#L22\">what intellij is doing</a>. The main downside of course is that we duplicate the formatting implementations, and we won't be able to send the tree representation to the client</p>",
        "id": 181014510,
        "sender_full_name": "detrumi",
        "timestamp": 1574083210
    },
    {
        "content": "<p>Ah, seems like kiljacken had more success implementing a solution, nice</p>",
        "id": 181095995,
        "sender_full_name": "detrumi",
        "timestamp": 1574157069
    }
]