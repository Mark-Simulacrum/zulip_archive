[
    {
        "content": "<p>So after commenting a few things out here and there it seems that the culprit is the doc highlight injection</p>",
        "id": 240872232,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1622496131
    },
    {
        "content": "<p>numstructs milliseconds</p>\n<div class=\"codehilite\"><pre><span></span><code>1000 827\n2000 1890\n3000 3165\n4000 4755\n5000 6555\n6000 8574\n7000 10677\n8000 13144\n</code></pre></div>\n<p>This is what I get when I just comment the injection out</p>",
        "id": 240872310,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1622496170
    },
    {
        "content": "<p>Which is already a lot faster than with it uncommented</p>",
        "id": 240872372,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1622496208
    },
    {
        "content": "<p>With just calling <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/71117e6812f87e014bc8e984e195a75e222ac227/crates/ide/src/doc_links.rs#L173-L198\"><code>doc_attributes</code></a> in the injection code and returning afterwards I get</p>\n<div class=\"codehilite\"><pre><span></span><code>1000 1556\n2000 3737\n3000 6653\n4000 10340\n5000 14573\n6000 19411\n</code></pre></div>\n<p><del>Adding the <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/71117e6812f87e014bc8e984e195a75e222ac227/crates/hir_def/src/attr.rs#L452-L503\"><code>attributes.docs_with_rangemap</code></a> call to that gives:</del><br>\n<del><code>\n1000 2343\n2000 6425\n3000 12279\n4000 19838\n5000 29203\n6000 40330\n</code></del><br>\nNote that the only comments in the test fixture are single line doc comments on the generated fields<br>\n<span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 240872991,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1622496802
    },
    {
        "content": "<p>Adding the <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/71117e6812f87e014bc8e984e195a75e222ac227/crates/hir_def/src/attr.rs#L368-L450\"><code>attributes.source_map</code></a> call in gives:</p>\n<div class=\"codehilite\"><pre><span></span><code>1000 2323\n2000 5880\n3000 11172\n4000 18011\n5000 26117\n6000 35742\n</code></pre></div>",
        "id": 240874736,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1622498426
    },
    {
        "content": "<p>I fail to see where all ofthis is getting quadratic in regards to the fields though <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span><br>\nMaybe this isn't the quadratic cause but just something that gets caught up in it? Since the first timings are still somewhat quadratic looking</p>",
        "id": 240875087,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1622498813
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300586\">Lukas Wirth</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Syntax.20highlighting.20is.20quadratic/near/240872310\">said</a>:</p>\n<blockquote>\n<p>numstructs milliseconds</p>\n<div class=\"codehilite\"><pre><span></span><code>1000 827\n2000 1890\n3000 3165\n4000 4755\n5000 6555\n6000 8574\n7000 10677\n8000 13144\n</code></pre></div>\n<p>This is what I get when I just comment the injection out</p>\n</blockquote>\n<p>But that's already quadratic, so maybe it's not the highlight injection.</p>",
        "id": 240917064,
        "sender_full_name": "Laurențiu",
        "timestamp": 1622540245
    },
    {
        "content": "<p>That's almost linear, 2ms for each new struct (1000 new structs -&gt; 2000 more ms).</p>",
        "id": 240917394,
        "sender_full_name": "pachi",
        "timestamp": 1622540450
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Syntax.20highlighting.20is.20quadratic/near/240917064\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"300586\">Lukas Wirth</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Syntax.20highlighting.20is.20quadratic/near/240872310\">said</a>:</p>\n<blockquote>\n<p>numstructs milliseconds</p>\n<div class=\"codehilite\"><pre><span></span><code>1000 827\n2000 1890\n3000 3165\n4000 4755\n5000 6555\n6000 8574\n7000 10677\n8000 13144\n</code></pre></div>\n<p>This is what I get when I just comment the injection out</p>\n</blockquote>\n<p>But that's already quadratic, so maybe it's not the highlight injection.</p>\n</blockquote>\n<p>Ye that was what I meant with my last message. It just wasnt too obvious to me at first, but I feel like the \"quadratic-ness\" got worse with the injection stuff?</p>",
        "id": 240917686,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1622540620
    },
    {
        "content": "<p>Can field resolution cause this? <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/9031#issuecomment-851409380\">https://github.com/rust-analyzer/rust-analyzer/pull/9031#issuecomment-851409380</a></p>",
        "id": 240917799,
        "sender_full_name": "Dawer",
        "timestamp": 1622540674
    },
    {
        "content": "<p>Noh the generated fixture is only struct definitions so those arent revelant(I also checked just in case and commented the parts out)</p>",
        "id": 240917917,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1622540740
    },
    {
        "content": "<p>Those are still quadratic though with their lookup, its just not the main problem here</p>",
        "id": 240917943,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1622540758
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/T53Lv39yLaAtfGmuIzUsREjo/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/T53Lv39yLaAtfGmuIzUsREjo/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/T53Lv39yLaAtfGmuIzUsREjo/image.png\"></a></div><p>This is the plot. It is slightly slower than linear. Maybe O(n log n)?</p>",
        "id": 240918147,
        "sender_full_name": "bjorn3",
        "timestamp": 1622540867
    },
    {
        "content": "<p>Actually if you plot <code>x, y/x</code> it's pretty linear, it just that the quadratic factor is fairly small compared to the linear component. Best fit is about <code>0.73 n + 0.00011 n^2</code></p>",
        "id": 241090957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622592248
    },
    {
        "content": "<p>Oh I forgot about this <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I'm still not entirely sure whats going on here but I think the <code>sema.to_def</code> call is quadratic for fields?</p>",
        "id": 241790551,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623078371
    },
    {
        "content": "<p>Iirc when looking for definitions we search for the container, which is the struct for fields and then search linearly in the container for  the index or something which would be certainly quadratic. This is just a guess though I haven't looked much into how we map ast things to definitions yet</p>",
        "id": 241790815,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623078470
    },
    {
        "content": "<p><code>record_field_to_def</code> seems to go through <code>DynMap</code> like other items</p>",
        "id": 241795189,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1623080068
    },
    {
        "content": "<p>hmm, and the <code>HasChildSource</code> code in <code>adt.rs</code> looks linear in the size of the struct from what I can tell</p>",
        "id": 241796025,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1623080383
    },
    {
        "content": "<p>and since this is cached we should only compute it once per struct, and then do <code>O(1)</code> lookups in the map</p>",
        "id": 241796145,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1623080416
    },
    {
        "content": "<p>Hmm ye that doesn't seem to be it then...</p>",
        "id": 241806049,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623084543
    },
    {
        "content": "<p>I'm pretty sure that highlighting <em>within macros</em> is quadratic though: <code>TokenMap</code> lookups are linear in the size of the input (I think), and highlighting does it once per input token</p>",
        "id": 241854343,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1623108524
    },
    {
        "content": "<p><del>Im looking into this again right now and the <code>fields_attrs_query</code> should only run once per struct right? Afterwards it should be cached if im not mistaken right? Because if I'm checking this correctly right now it looks like this is being a lot of times? For the 1000 field struct case it's being executed 1001 times(cross crate cov_mark comes in really handy here)</del></p>",
        "id": 242794136,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623788629
    },
    {
        "content": "<p><del>Which is definitely quadratic as it recollects all child fields again in each call for each field</del></p>",
        "id": 242794252,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623788677
    },
    {
        "content": "<p><del>Exactly the same appears to be happening for <code>fields_attrs_source_map</code> so that explains the big time increases I got when commenting those out</del></p>",
        "id": 242794723,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623788897
    },
    {
        "content": "<p><del>So I suppose salsa is kicking the results of those out of the cache immediately for some reason?</del></p>",
        "id": 242794765,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623788925
    },
    {
        "content": "<p><del>Or not realizing that it can reuse the computation?(I dont really know how salsa works yet)</del></p>",
        "id": 242794812,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623788946
    },
    {
        "content": "<p>oh wait the fixture generates one struct with n fields and n structs on the side nvm...</p>",
        "id": 242797957,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623790320
    },
    {
        "content": "<p>I don't think I'll figure this out anytime soon,  I'm not making any progress with this <span aria-label=\"weary\" class=\"emoji emoji-1f629\" role=\"img\" title=\"weary\">:weary:</span></p>",
        "id": 242798144,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623790401
    },
    {
        "content": "<p>Comming back to this! I've run the following bench in realease on the current master:</p>\n<div class=\"codehilite\"><pre><span></span><code>#[test]\nfn benchmark_syntax_highlighting_long_struct() {\n    for i in 0..=20 {\n        let n = i * 500;\n        let fixture = bench_fixture::big_struct_n(n);\n        let (analysis, file_id) = fixture::file(&amp;fixture);\n        let t = Instant::now();\n        let _ = analysis.highlight(file_id);\n        eprintln!(&quot;{:3} {:?}&quot;, i, t.elapsed());\n    }\n}\n</code></pre></div>\n<p>Here are the results:</p>\n<div class=\"codehilite\"><pre><span></span><code>  0 240.151µs\n  1 37.874711ms\n  2 110.355746ms\n  3 217.256364ms\n  4 361.15263ms\n  5 539.999892ms\n  6 756.224383ms\n  7 1.005763744s\n  8 1.294456419s\n  9 1.616761095s\n 10 1.979827698s\n 11 2.367461069s\n 12 2.820995648s\n 13 3.273588743s\n 14 3.767652556s\n 15 4.308655111s\n 16 4.941540713s\n 17 5.605129736s\n 18 6.257592457s\n 19 6.927527017s\n 20 7.656330973s\n</code></pre></div>\n<p>This is clearly quadratic -- doubling the number on the left quadruples the number on the right. 10 takes about 2s, 20 takes about 8s.</p>",
        "id": 243404117,
        "sender_full_name": "matklad",
        "timestamp": 1624291163
    },
    {
        "content": "<p>Next fascinating observation: adding <code>return None</code> to the actual highlighting (<code>highlight::element</code> function)  doesn't change the timings at all. That it, whatever is slow in our syntax highlighting, it is clearly not the syntax highlighting!</p>",
        "id": 243404650,
        "sender_full_name": "matklad",
        "timestamp": 1624291385
    },
    {
        "content": "<p>Yeah, commenting out all this doesn't change the picture: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/1b05dbba39d5a4d46f321dc962df99038cddbf21/crates/ide/src/syntax_highlighting.rs#L286-L365\">https://github.com/rust-analyzer/rust-analyzer/blob/1b05dbba39d5a4d46f321dc962df99038cddbf21/crates/ide/src/syntax_highlighting.rs#L286-L365</a></p>",
        "id": 243405211,
        "sender_full_name": "matklad",
        "timestamp": 1624291627
    },
    {
        "content": "<p>Walking in from the other side, commenting the inside of the <code>for event in root.value.preorder_with_tokens() {</code> reveals that we have <em>two</em> indpendent sources of quadraticness here!</p>\n<p>One is this block:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">element</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">event</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">WalkEvent</span>::<span class=\"n\">Enter</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">WalkEvent</span>::<span class=\"n\">Leave</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">as_node</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">inject</span>::<span class=\"n\">doc_comment</span><span class=\"p\">(</span><span class=\"n\">hl</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sema</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">with_value</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">continue</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The second one is this one:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">event</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">it</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">into_node</span><span class=\"p\">().</span><span class=\"n\">and_then</span><span class=\"p\">(</span><span class=\"n\">ast</span>::<span class=\"n\">Item</span>::<span class=\"n\">cast</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">WalkEvent</span>::<span class=\"n\">Enter</span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">sema</span><span class=\"p\">.</span><span class=\"n\">is_attr_macro_call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">item</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">current_attr_macro_call</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">WalkEvent</span>::<span class=\"n\">Leave</span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">current_attr_macro_call</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">current_attr_macro_call</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>independently, each of those is O(N^2)</p>",
        "id": 243406143,
        "sender_full_name": "matklad",
        "timestamp": 1624292068
    },
    {
        "content": "<p>hmm, what's the expected complexity of <code>Semantics::analyzer</code>?</p>",
        "id": 243406772,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624292383
    },
    {
        "content": "<p><code>::analyze</code> ? I think cached <code>O(1)</code></p>",
        "id": 243407005,
        "sender_full_name": "matklad",
        "timestamp": 1624292493
    },
    {
        "content": "<p>hmm, why is the attribute macro handling O(n²) then?</p>",
        "id": 243407411,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624292686
    },
    {
        "content": "<p>Hm, somthing doesnt' make sense to me.. Heer's the code I've minimized this to:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_it</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stdx</span>::<span class=\"n\">timeit</span><span class=\"p\">(</span><span class=\"s\">\"total\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">event</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">preorder_with_tokens</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_it</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stdx</span>::<span class=\"n\">timeit</span><span class=\"p\">(</span><span class=\"s\">\"loop\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">element</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">event</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">WalkEvent</span>::<span class=\"n\">Enter</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">WalkEvent</span>::<span class=\"n\">Leave</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">as_node</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">inject</span>::<span class=\"n\">doc_comment</span><span class=\"p\">(</span><span class=\"n\">hl</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sema</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">with_value</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">continue</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And here's the output I get (filtering out times &lt; 2 ms):</p>\n<div class=\"codehilite\"><pre><span></span><code>loop: 655.68ms\ntotal: 2.00s\n 17 2.11564048s\nloop: 713.26ms\ntotal: 2.25s\n 18 2.373231198s\nloop: 788.57ms\ntotal: 2.46s\n 19 2.591156794s\nloop: 859.33ms\ntotal: 2.74s\n 20 2.885021587s\n</code></pre></div>\n<p>There's only one slow loop here?</p>",
        "id": 243408017,
        "sender_full_name": "matklad",
        "timestamp": 1624292994
    },
    {
        "content": "<p>Ah, no, it's just that rust is plenty fast -- individual loops to get into 0.3 ms range</p>",
        "id": 243408251,
        "sender_full_name": "matklad",
        "timestamp": 1624293108
    },
    {
        "content": "<p>Apparetntly, both <code>to_def</code> and <code>.attrs</code> are quadratic</p>",
        "id": 243408860,
        "sender_full_name": "matklad",
        "timestamp": 1624293416
    },
    {
        "content": "<p>Feels like a fractal, where each quadratic part consists of two independent quadratic parts</p>",
        "id": 243408898,
        "sender_full_name": "matklad",
        "timestamp": 1624293445
    },
    {
        "content": "<p>So, <code>to_def</code> for RecordField is def linear...</p>",
        "id": 243409101,
        "sender_full_name": "matklad",
        "timestamp": 1624293551
    },
    {
        "content": "<p>Thats roughly how far I got, but after that I got nowhere</p>",
        "id": 243409386,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1624293708
    },
    {
        "content": "<p>Yeah, I am now in the delightful <code>source_to_def</code> module. A good thing about it is that, once written, this module basically never changed. The bad  thing about it is that it's so tricky that it'd be better not have been written at all</p>",
        "id": 243409591,
        "sender_full_name": "matklad",
        "timestamp": 1624293791
    },
    {
        "content": "<p>A fun thing, though, is that both Kotlin and Roslyn contain the code which does exactly the same -- it's a somwhat surprising essense of an ide it seems</p>",
        "id": 243409872,
        "sender_full_name": "matklad",
        "timestamp": 1624293939
    },
    {
        "content": "<p>I have yet to understand that module to be honest</p>",
        "id": 243410611,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1624294281
    },
    {
        "content": "<p>Never really dug into it</p>",
        "id": 243410624,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1624294293
    },
    {
        "content": "<p>I am baffled that it has empty docs tbh, that's the interesting bit!(</p>",
        "id": 243411018,
        "sender_full_name": "matklad",
        "timestamp": 1624294483
    },
    {
        "content": "<p>Curious! So, getting struct's source is linear...</p>",
        "id": 243411495,
        "sender_full_name": "matklad",
        "timestamp": 1624294687
    },
    {
        "content": "<p>We have to many traits and to few \"goto definition goes to impl\" :(</p>",
        "id": 243411703,
        "sender_full_name": "matklad",
        "timestamp": 1624294792
    },
    {
        "content": "<p>Does that include the fields in the struct? Your test above hints at it being related to the items</p>",
        "id": 243411922,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1624294888
    },
    {
        "content": "<p>Quadratic <code>SyntaxNodePtr</code>, I welcome you, my old friend!</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">to_node</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">root</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">SyntaxNode</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">SyntaxNode</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">assert!</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">parent</span><span class=\"p\">().</span><span class=\"n\">is_none</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">successors</span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">()),</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">node</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">children</span><span class=\"p\">().</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">it</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">text_range</span><span class=\"p\">().</span><span class=\"n\">contains_range</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">range</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">it</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">text_range</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">range</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap_or_else</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"can't resolve local ptr to SyntaxNode: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I've thought that this was fixed with transition to new rowan, but looks like it wasn't?</p>",
        "id": 243412392,
        "sender_full_name": "matklad",
        "timestamp": 1624295109
    },
    {
        "content": "<p>oh wow</p>",
        "id": 243412650,
        "sender_full_name": "matklad",
        "timestamp": 1624295227
    },
    {
        "content": "<p>that's going to be the most perf-improving one line change i've ever did</p>",
        "id": 243412699,
        "sender_full_name": "matklad",
        "timestamp": 1624295251
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 243412715,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1624295261
    },
    {
        "content": "<p>Good news: the change improves perf for n = 20 from 7.6s to 420ms. Bad news: some test hangs</p>",
        "id": 243413190,
        "sender_full_name": "matklad",
        "timestamp": 1624295506
    },
    {
        "content": "<p>Correction: only good news is the real one! The tests that hangs is my manual very long quadratic test :D I sense an opportunity for an epic commit message</p>",
        "id": 243413425,
        "sender_full_name": "matklad",
        "timestamp": 1624295614
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/9362/commits/099b63e7c01ed9969041bef8b3b9c573c7e24bf8\">https://github.com/rust-analyzer/rust-analyzer/pull/9362/commits/099b63e7c01ed9969041bef8b3b9c573c7e24bf8</a></p>",
        "id": 243420494,
        "sender_full_name": "matklad",
        "timestamp": 1624298707
    },
    {
        "content": "<p>it probably makes sense to doc comment <code>child_or_token_at_range</code> and mention that it performs a binary search</p>",
        "id": 243421987,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1624299425
    },
    {
        "content": "<p>yeah, nobody but Aleksey could have noticed this without docs</p>",
        "id": 243422246,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624299552
    },
    {
        "content": "<p>Good call, added docs to rowan and ra. </p>\n<p>To be fair, figuring out that this is linear is possible -- the original version used a hand-written naive linear search. </p>\n<p>Figuring out that a faster version already exists in rowan and just needs to be enabled would be tricky, yeah</p>",
        "id": 243487420,
        "sender_full_name": "matklad",
        "timestamp": 1624351617
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/9369/files\">https://github.com/rust-analyzer/rust-analyzer/pull/9369/files</a> documents the magic source_to_def is</p>",
        "id": 243508399,
        "sender_full_name": "matklad",
        "timestamp": 1624365152
    }
]