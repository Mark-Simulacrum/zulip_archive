[
    {
        "content": "<p>Let me try to talk this through, as it seems important.</p>",
        "id": 175816402,
        "sender_full_name": "matklad",
        "timestamp": 1568643719
    },
    {
        "content": "<p>So, syntax trees in rust-analyzer are by designg value types. <code>1 + 1</code> in <code>foo.rs</code> looks exactly like <code>1 + 1</code> in <code>bar.rs</code>, and given that AST is reference counted, it's ok to intern syntax trees</p>",
        "id": 175816501,
        "sender_full_name": "matklad",
        "timestamp": 1568643772
    },
    {
        "content": "<p>(and this even happens within a single file already)</p>",
        "id": 175816510,
        "sender_full_name": "matklad",
        "timestamp": 1568643783
    },
    {
        "content": "<p>For analysis, you need to add some form of identity to the syntax trees.</p>",
        "id": 175816617,
        "sender_full_name": "matklad",
        "timestamp": 1568643844
    },
    {
        "content": "<p>for example, if you have <code>#[path = \"foo.rs\"] mod x; #[path = \"foo.rs\"] mod y; </code>, then the same syntax from <code>foo.rs</code> would represent two different modules</p>",
        "id": 175816680,
        "sender_full_name": "matklad",
        "timestamp": 1568643887
    },
    {
        "content": "<p>it's module identity that distinguishes one <code>foo</code> from another.</p>",
        "id": 175816710,
        "sender_full_name": "matklad",
        "timestamp": 1568643909
    },
    {
        "content": "<p>(I'm going to break this out into its own topic, it seems worth separating; also, I'm going to have to run for a bit, but I'll continue async)</p>",
        "id": 175816716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568643913
    },
    {
        "content": "<p>ok carry on <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>, I'm following so far :)</p>",
        "id": 175816779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568643958
    },
    {
        "content": "<p>So far, this jump from \"value-type syntax\" to \"identity-based hir\" was pretty adhoc</p>",
        "id": 175816851,
        "sender_full_name": "matklad",
        "timestamp": 1568643984
    },
    {
        "content": "<p>However, we had an <code>struct Source&lt;T&gt; { file_id: HirFileId, ast: T}</code> type just to conveniently describe a piece of ast in a file. It was used mostly by the IDE side of thing, so that you can go from <code>hir::Struct</code> (which is an id) to <code>Source&lt;ast::StructDef&gt;</code> which you can use in the editor for goto def (this is essentially a span: file name + text range inside a file)</p>",
        "id": 175817021,
        "sender_full_name": "matklad",
        "timestamp": 1568644094
    },
    {
        "content": "<p>And now, in the <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/1815\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/1815\">https://github.com/rust-analyzer/rust-analyzer/pull/1815</a>, it seems like this <code>Source&lt;T&gt;</code> thing is how we'd add a hygine</p>",
        "id": 175817058,
        "sender_full_name": "matklad",
        "timestamp": 1568644125
    },
    {
        "content": "<blockquote>\n<p><code>struct Source&lt;T&gt; { file_id: HirFileId, ast: T}</code></p>\n</blockquote>\n<p>does this also include the line/column/whatever <em>within</em> the file?</p>",
        "id": 175817153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568644186
    },
    {
        "content": "<p>Yeah: currently each node in AST remembers position within a file</p>",
        "id": 175817229,
        "sender_full_name": "matklad",
        "timestamp": 1568644210
    },
    {
        "content": "<p>That is, this info will be present in <code>T</code> for reasonable <code>T</code>s</p>",
        "id": 175817268,
        "sender_full_name": "matklad",
        "timestamp": 1568644231
    },
    {
        "content": "<p>So, using the <code>file_id</code> field of the <code>Source</code> you should be able to fetch hygiene tables from the database, and assign proper hygiene to identifiers in the AST</p>",
        "id": 175817391,
        "sender_full_name": "matklad",
        "timestamp": 1568644312
    },
    {
        "content": "<p>this is super hand-wavy, as this is a naturally emerging abstraction, I am not sure about the details yet :)</p>",
        "id": 175817464,
        "sender_full_name": "matklad",
        "timestamp": 1568644341
    },
    {
        "content": "<p>This <code>Source&lt;T&gt;</code> is also used in <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/1853\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/1853\">https://github.com/rust-analyzer/rust-analyzer/pull/1853</a>, which cleanups the way IDE goes from offsets to hir.</p>",
        "id": 175817545,
        "sender_full_name": "matklad",
        "timestamp": 1568644393
    },
    {
        "content": "<p>Basically, the problem in IDE is that if you have <code>#[path = \"foo.rs\"] mod x; #[path = \"foo.rs\"] mod y;</code> and the user asks for \"Goto Definition\" for some definition inside <code>foo.rs</code>, the request is ambiguous, as <code>foo.rs</code> is effectively included twice.</p>",
        "id": 175817670,
        "sender_full_name": "matklad",
        "timestamp": 1568644454
    },
    {
        "content": "<p>The Source thing captures that ambiguity precisely</p>",
        "id": 175817681,
        "sender_full_name": "matklad",
        "timestamp": 1568644464
    },
    {
        "content": "<p>Is <code>source_binder</code> going away?</p>",
        "id": 175818529,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1568644952
    },
    {
        "content": "<p>yeah</p>",
        "id": 175818548,
        "sender_full_name": "matklad",
        "timestamp": 1568644974
    }
]