[
    {
        "content": "<p>When I have a <code>FileId</code>, I can query the owning <code>SourceRoot</code>, which knows whether it's \"static\" (from <a href=\"http://crates.io/sysroot\">crates.io/sysroot</a>) via <code>is_library</code>. Is there a way to get the same info when I only have a <code>CrateId</code>/<code>CrateData</code> and no <code>SourceDatabaseExt</code> (since I'm in <code>ra_hir_ty</code>)?</p>",
        "id": 202557152,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1593602728
    },
    {
        "content": "<p>The answer is that you shouldn't be asking such questions :-)</p>",
        "id": 202558062,
        "sender_full_name": "matklad",
        "timestamp": 1593603478
    },
    {
        "content": "<p>Why do you need this info?</p>",
        "id": 202558108,
        "sender_full_name": "matklad",
        "timestamp": 1593603488
    },
    {
        "content": "<p>More seriously, the <code>Ext</code> setup is specifically so that the compiler doesn't know too much</p>",
        "id": 202558123,
        "sender_full_name": "matklad",
        "timestamp": 1593603512
    },
    {
        "content": "<p>As an optimization. I want to generate a small-and-expensive-to-recompute index for static crates, and a heavy-but-fast-to-recompute index for workspace crates.</p>",
        "id": 202558186,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1593603591
    },
    {
        "content": "<p>Index here is <code>ImportMap</code>?</p>",
        "id": 202558277,
        "sender_full_name": "matklad",
        "timestamp": 1593603659
    },
    {
        "content": "<p>No, something like <code>CrateImplDefs</code>, an index of impls</p>",
        "id": 202558315,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1593603710
    },
    {
        "content": "<p>Uhu.... At the moment, our model definitely doesn't allow for that. I am not sure if it should -- seems like this would inevitably add two different code paths, which would need to be unified</p>",
        "id": 202558416,
        "sender_full_name": "matklad",
        "timestamp": 1593603780
    },
    {
        "content": "<p><code>ImportMap</code> is only consulted for direct dependencies, while for impls we have to look at all transitive deps</p>",
        "id": 202558418,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1593603782
    },
    {
        "content": "<p>Do you think that a call might be helpful?</p>",
        "id": 202558520,
        "sender_full_name": "matklad",
        "timestamp": 1593603861
    },
    {
        "content": "<p>Yeah, that might help</p>",
        "id": 202558680,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1593603977
    },
    {
        "content": "<p>Conclusion: <code>impls_from_deps_query</code> is only directly called for leaf crates, so we can maybe speed it up by first computing an <code>FxHashSet&lt;CrateId&gt;</code> transitive closure of dep crates, and then invoking non-transiive version of the query.</p>",
        "id": 202561259,
        "sender_full_name": "matklad",
        "timestamp": 1593605879
    },
    {
        "content": "<p>A futher optimization would create a query for transitive closure / self. That way, we'll have to do only two hashmap lookups (local crate/some dep), but we won't have to recompure the closure for deps on modifications</p>",
        "id": 202561358,
        "sender_full_name": "matklad",
        "timestamp": 1593605953
    }
]