[
    {
        "content": "<p>I want to pass <code>--cfg spec</code> when checking my code. I found <code>cargo.features</code>, but that appears to force the usage of \"feature\".</p>",
        "id": 231159234,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616261281
    },
    {
        "content": "<p>I think currently the only way to do this is to set it from a build script</p>",
        "id": 231159694,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616261738
    },
    {
        "content": "<p>does RA allow passing arbitrary rustflags?</p>",
        "id": 231159965,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616262020
    },
    {
        "content": "<p><code>RUSTFLAGS</code> is passed through, but we ignore it</p>",
        "id": 231160029,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616262088
    },
    {
        "content": "<p>Unfortunate. It looks like it _was_ supported at some point? <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/1073\">https://github.com/rust-analyzer/rust-analyzer/issues/1073</a></p>",
        "id": 231161352,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616263373
    },
    {
        "content": "<p>Oh, maybe that's literally also just features</p>",
        "id": 231161391,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616263409
    },
    {
        "content": "<p>Nothing was removed here, that issue was closed when basic support for handling <code>#[cfg]</code> landed</p>",
        "id": 231161527,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616263556
    },
    {
        "content": "<p>Should I open an issue for supporting additional <code>cfg</code>?</p>",
        "id": 231161828,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616263846
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/5421\">https://github.com/rust-analyzer/rust-analyzer/issues/5421</a></p>",
        "id": 231161844,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616263882
    },
    {
        "content": "<p>I did see that there's an option for <code>cfg</code> when not using Cargo — <a href=\"https://rust-analyzer.github.io/manual.html#non-cargo-based-projects\">https://rust-analyzer.github.io/manual.html#non-cargo-based-projects</a></p>",
        "id": 231161929,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616263955
    },
    {
        "content": "<p>Should be perhaps pares RUSTFLAGS?</p>",
        "id": 231347142,
        "sender_full_name": "matklad",
        "timestamp": 1616432537
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> what do you use to set this for cargo? RUSTFLAGS or something else?</p>",
        "id": 231347255,
        "sender_full_name": "matklad",
        "timestamp": 1616432580
    },
    {
        "content": "<p>You can use <code>rustc --print cfg $RUSTFLAGS</code> to get the list of all enabled cfgs.</p>",
        "id": 231347487,
        "sender_full_name": "bjorn3",
        "timestamp": 1616432651
    },
    {
        "content": "<p>wow, that's <strong>nice</strong>, that means that the impl is trivial, as we are already running <code>--print cfg</code></p>",
        "id": 231347692,
        "sender_full_name": "matklad",
        "timestamp": 1616432724
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/How.20do.20I.20set.20non-feature.20cfgs.3F/near/231347255\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> what do you use to set this for cargo? RUSTFLAGS or something else?</p>\n</blockquote>\n<p>I am running:</p>\n<div class=\"codehilite\"><pre><span></span><code>CARGO_BUILD_PIPELINING=false cargo rustc -- --crate-type=bin --cfg=spec\n</code></pre></div>",
        "id": 231627607,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616590385
    },
    {
        "content": "<p>(sorry for long delays; been in a <em>lot</em> of training <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>)</p>",
        "id": 231627661,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616590413
    },
    {
        "content": "<p>Hm, that's tricky -- while <code>RUSFLAGS</code> are global, config via <code>rustc</code> I think applies only to one target. Yup:</p>\n<blockquote>\n<p>The specified args will all be passed to the final compiler invocation, not any of the dependencies. </p>\n</blockquote>\n<p>So the config we want here would be a map from (package, target) pairs to additional cfg. It shouldn't be that hard to implement, but would be quite annoing, especially because there's no clean way to identifiy a package/target pair (cargo identifies them implicitly, via --lib, --bin, etc args)</p>",
        "id": 231628598,
        "sender_full_name": "matklad",
        "timestamp": 1616590790
    },
    {
        "content": "<p>For my <em>particular</em> case, the cfg could go to every crate. It’s the exact same concept as cfg(test).</p>",
        "id": 231794088,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616676608
    },
    {
        "content": "<p>People would want it to effectively always be on in their editor if they were using this.</p>",
        "id": 231794218,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616676681
    }
]