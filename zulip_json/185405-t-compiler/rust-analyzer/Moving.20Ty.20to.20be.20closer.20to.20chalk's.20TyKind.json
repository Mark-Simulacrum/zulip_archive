[
    {
        "content": "<p>I've been looking at our <code>Ty::Infer(InferTy)</code> variant to bring it closer to chalks representation <code>InferenceVar(InferenceVar, TyVariableKind)</code> and noticed that our InferTy basically has 4 variable kinds unlike chalk which has 3. We have an extra <code>MaybeNever</code> variant:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">InferTy</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">TypeVar</span><span class=\"p\">(</span><span class=\"n\">unify</span>::<span class=\"n\">TypeVarId</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">IntVar</span><span class=\"p\">(</span><span class=\"n\">unify</span>::<span class=\"n\">TypeVarId</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">FloatVar</span><span class=\"p\">(</span><span class=\"n\">unify</span>::<span class=\"n\">TypeVarId</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">MaybeNeverTypeVar</span><span class=\"p\">(</span><span class=\"n\">unify</span>::<span class=\"n\">TypeVarId</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/23d7dbfa5e7ba2cebf8c3f79b5d31285d79c1527/crates/hir_ty/src/infer.rs#L658-L663\">crates/hir_ty/src/infer.rs#L658-L663</a><br>\nIf we were to switch over to chalk's typesystem one day we would lose this information if I'm not mistaken right? Is this something that should actually go into chalk?</p>",
        "id": 228161742,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614551447
    },
    {
        "content": "<p>Chalk does support the never type, and rust's <code>InferTy</code> doesn't contain a <code>Never</code> variant, so I don't think a variant needs to be added in chalk</p>",
        "id": 228162429,
        "sender_full_name": "detrumi",
        "timestamp": 1614552180
    },
    {
        "content": "<p>Unless <code>MaybeNever</code> is something RA added for better IDE support?</p>",
        "id": 228162528,
        "sender_full_name": "detrumi",
        "timestamp": 1614552247
    },
    {
        "content": "<p>From what I've seen it's used to specify type inference fallback to use never instead of the unit type in RA</p>",
        "id": 228162664,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614552389
    },
    {
        "content": "<p>Chalk and rustc use a <code>TyKind::Never</code> type instead, but yeah then you wouldn't have a <code>TypeVarId</code>. But I don't think that's actually needed anywhere</p>",
        "id": 228162763,
        "sender_full_name": "detrumi",
        "timestamp": 1614552515
    },
    {
        "content": "<p>I see, figured it's gonna be like that. I imagine the problem lies in how type inference is structured in RA then, Florian should know. I haven't looked too much into how type inference in RA works(or rather that much in general either).</p>",
        "id": 228164261,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614554166
    },
    {
        "content": "<p>I'm pretty sure rustc has a similar mechanism? let me check</p>",
        "id": 228195023,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1614587145
    },
    {
        "content": "<p>ah, rustc does this with a flag in a separate data structure indicating that the type variable is diverging</p>",
        "id": 228195513,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1614587460
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/05c300144cebbf3ddaff213b7485f669a9e0b660/compiler/rustc_infer/src/infer/type_variable.rs#L122\">https://github.com/rust-lang/rust/blob/05c300144cebbf3ddaff213b7485f669a9e0b660/compiler/rustc_infer/src/infer/type_variable.rs#L122</a></p>",
        "id": 228195581,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1614587513
    },
    {
        "content": "<p>that would probably be a good refactoring, and we'll want to keep additional information on type variables (like the origin) anyway</p>",
        "id": 228195666,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1614587562
    },
    {
        "content": "<p>Ah I see, we would store this in the InferenceTable then if i see this right?</p>",
        "id": 228207540,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614594452
    },
    {
        "content": "<p>I think it needs to be a separate table (keyed by variable ID)</p>",
        "id": 228208168,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1614594738
    },
    {
        "content": "<p>sorrry, meant it as in whether the extra table should be in InferenceTable, since InferenceTable needs it for the fallback.</p>",
        "id": 228208553,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614594926
    },
    {
        "content": "<p>or pass it by ref on each call where required</p>",
        "id": 228208576,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614594942
    },
    {
        "content": "<p>aah right sorry, yeah it makes sense to put it there</p>",
        "id": 228210535,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1614595892
    }
]