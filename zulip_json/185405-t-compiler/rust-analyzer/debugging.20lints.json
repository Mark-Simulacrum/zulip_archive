[
    {
        "content": "<p>Hi! Since, it appears, 0.2.400 or 0.2.408, I am getting a macro-error lint on any asm blocks (repro: <code>unsafe { asm!(\"\") }</code>) which I'd like to fix myself to learn how the project works. I've read the dev docs which say that the usual way of managing this kind of thing is to write a unit test, however, I couldn't quite figure out where to put that test.</p>\n<p>The page I read (<a href=\"https://github.com/rust-analyzer/rust-analyzer/tree/master/docs/dev\">https://github.com/rust-analyzer/rust-analyzer/tree/master/docs/dev</a>) said that such things might go in the parser crate, but I don't know what it means by \"manual test\" and whether that is what I want. It also seems to be that the error for this is generated by something to do with HIR, which makes it unclear to me whether it would be triggered by tests in there.</p>\n<p>Can someone give me some pointers on where to start on this?</p>",
        "id": 219939395,
        "sender_full_name": "Jade",
        "timestamp": 1608009982
    },
    {
        "content": "<p>Seem like we are not supported asm builtin macro yet, you could follow how PR <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/6874\">#6874</a> works and add a test similar to <a href=\"https://github.com/jonas-schievink/rust-analyzer/blob/81820fe52cde8e2433eb140441375e408e2659ee/crates/hir_expand/src/builtin_macro.rs#L210\">this</a></p>",
        "id": 219944673,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1608017505
    },
    {
        "content": "<p>And I think a dummy implementation for <code>asm</code> macro is okay for now</p>",
        "id": 219944818,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1608017633
    },
    {
        "content": "<p>alrighty, thanks for the help! I've filed a PR: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/6889\">https://github.com/rust-analyzer/rust-analyzer/pull/6889</a></p>",
        "id": 219951905,
        "sender_full_name": "Jade",
        "timestamp": 1608023528
    }
]