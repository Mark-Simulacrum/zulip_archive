[
    {
        "content": "<p>I'm interested in contributing to <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8971\">https://github.com/rust-analyzer/rust-analyzer/issues/8971</a> - is there already ongoing work on it?</p>",
        "id": 240779052,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622416705
    },
    {
        "content": "<p>I have done some work on the prerequisites</p>",
        "id": 240779111,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622416831
    },
    {
        "content": "<p>The next steps here are:</p>\n<ul>\n<li>change r-a's builtin macros to carry their macro kind, add knowledge of the built-in attribute macros</li>\n<li>figure out how to make r-a's attribute API work with attribute macro expansion and diagnostics properly</li>\n</ul>",
        "id": 240779133,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622416913
    },
    {
        "content": "<p>Re: the attribute API â€“ this can possibly be skipped for an MVP, but is probably already causing issues with how we strip <code>#[derive]</code> attributes today.</p>\n<p>Basically the issue is that we try to uniquely identify attributes without accounting for <code>cfg_attr</code>, which can expand to any number of attributes. This then leads to us stripping the entire <code>cfg_attr</code> instead of just one of the expanded attributes. It has also causes hangs, where I assumed that attribute IDs are unique (I've fixed or papered over those now).</p>",
        "id": 240779244,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622417061
    },
    {
        "content": "<p>One thing that would also help rust-analyzer would be if we didn't have to duplicate this file but could somehow reuse it: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_def/src/builtin_attr.rs\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_def/src/builtin_attr.rs</a></p>",
        "id": 240779268,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622417141
    },
    {
        "content": "<p>(the <code>EXTRA_ATTRIBUTES</code> const is new, that would go away if we add proper support for the builtin attribute macros - it's also very incomplete apparently <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> )</p>",
        "id": 240779314,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622417204
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink  [he/him]</span> Are you able to depend on <code>rustc_feature</code> directly?</p>",
        "id": 240779377,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622417332
    },
    {
        "content": "<p>not directly, since we target stable</p>",
        "id": 240779389,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622417387
    },
    {
        "content": "<p>rustc_feature also uses rustc's list of known symbols, which we don't have</p>",
        "id": 240779437,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622417419
    },
    {
        "content": "<p>does <code>rust-analyzer</code> depend on any rustc internal crates?</p>",
        "id": 240779438,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622417421
    },
    {
        "content": "<p>on the lexer, yeah</p>",
        "id": 240779565,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622417654
    },
    {
        "content": "<p>outside of that, no, but we do use chalk, and have vendored the proc_macro bridge</p>",
        "id": 240779569,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622417680
    },
    {
        "content": "<p>(I'd also like to stop vendoring the proc_macro code since it tends to break often, but this requires some more complicated changes I think)</p>",
        "id": 240779586,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622417741
    },
    {
        "content": "<p>To expand on \"depend on rustc\", we totally can and want to depend on <code>rustc</code> crates, as long as they are build with stable. So, extracting the attribute data table into a separate, \"builds on stable\" crate would help us, yeah. To be clear, we don't need the APIs to be stable, we are 100% comfortable following whatever changes happen in rustc, as long as \"builds on stable\" is observed. </p>\n<p>Also, <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> excited to see experienced rustc hackers taking a look at rust-analyzer. If you need anything to mover forward, feel free to ping us!</p>",
        "id": 240812003,
        "sender_full_name": "matklad",
        "timestamp": 1622453834
    },
    {
        "content": "<p><code>rustc_features</code> uses the <code>once_cell</code> feature gate and depends on <code>rustc_data_structures</code> and <code>rustc_span</code>. The <code>rustc_data_structures</code> dependency is easy to remove as it only uses <code>FxHashMap</code>. The <code>rustc_span</code> dependency is used for <code>Edition</code>, <code>Symbol</code>, <code>Span</code> and <code>sym</code>, making it much harder to remove. <code>rustc_span</code> uses several feature gates.</p>",
        "id": 240812478,
        "sender_full_name": "bjorn3",
        "timestamp": 1622454125
    },
    {
        "content": "<p>Yeah, there's no analogue to <code>span</code>s in rust-analyzer, so any sharing needs to be done in such a way that the callee supplies the span info.</p>",
        "id": 240815808,
        "sender_full_name": "matklad",
        "timestamp": 1622456261
    },
    {
        "content": "<p>sooo, it turns out we already have most things in place to let this \"work\", for some values of \"work\"</p>\n<p><a href=\"/user_uploads/4715/TNdsdMQJqIE4HGWWoi-LoBvB/screenshot-2021-05-31-131459.png\">screenshot-2021-05-31-131459.png</a> <a href=\"/user_uploads/4715/w6xSdHXzWEun0ur1jdm5ZccN/screenshot-2021-05-31-131510.png\">screenshot-2021-05-31-131510.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/TNdsdMQJqIE4HGWWoi-LoBvB/screenshot-2021-05-31-131459.png\" title=\"screenshot-2021-05-31-131459.png\"><img src=\"/user_uploads/4715/TNdsdMQJqIE4HGWWoi-LoBvB/screenshot-2021-05-31-131459.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/4715/w6xSdHXzWEun0ur1jdm5ZccN/screenshot-2021-05-31-131510.png\" title=\"screenshot-2021-05-31-131510.png\"><img src=\"/user_uploads/4715/w6xSdHXzWEun0ur1jdm5ZccN/screenshot-2021-05-31-131510.png\"></a></div>",
        "id": 240820536,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622459767
    },
    {
        "content": "<p>everything else breaks tho</p>",
        "id": 240820583,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622459795
    },
    {
        "content": "<p>ship it? <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 240820953,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622460050
    },
    {
        "content": "<p>(what's 'everything else'?)</p>",
        "id": 240820961,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622460060
    },
    {
        "content": "<p>all the salsa macros apparently expand to thin air</p>",
        "id": 240821266,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622460249
    },
    {
        "content": "<p>ah</p>",
        "id": 240821308,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622460278
    },
    {
        "content": "<p>I think we're just missing the attribute arguments here</p>",
        "id": 240821354,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622460308
    },
    {
        "content": "<p>but I did expect at least some sort of diagnostic</p>",
        "id": 240821368,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622460318
    },
    {
        "content": "<p>also I think the <code>TokenMap</code> isn't working, and maybe child_by_source also doesn't</p>",
        "id": 240821485,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622460391
    },
    {
        "content": "<p>so there's still quite a bit of work to do</p>",
        "id": 240821497,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622460402
    },
    {
        "content": "<p>pushed the code here for now: <a href=\"https://github.com/jonas-schievink/rust-analyzer/tree/expand-attr-macros\">https://github.com/jonas-schievink/rust-analyzer/tree/expand-attr-macros</a></p>",
        "id": 240823014,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622461479
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> Can you elaborate on the motivation behind the compiles-on-stable requirement? Given the extensive use of nightly features in compiler crates, it seems like that requirement causes (or will cause) a large amount of duplication between rustc and rust-analyzer. I can see the value in having independent implementations of different parts of the compiler, but it sounds like you would potentially depend on many more <code>rustc</code> crates if you were able to.</p>",
        "id": 240841951,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622472475
    },
    {
        "content": "<p>If <code>rust-analyzer</code> were to be made a subtreee (I don't know if there's been any discussion of this), then in my (perhaps naive) view, it could function similar to clippy</p>",
        "id": 240842259,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622472630
    },
    {
        "content": "<p>Personally I would be fine with targeting nightly instead, if we use a <code>rust-toolchain</code> file we should get roughly the same contributor experience</p>",
        "id": 240842348,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622472690
    },
    {
        "content": "<p>It requires nightly, uses many compiler crates,  but AFAIK that doesn't cause problems</p>",
        "id": 240842354,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622472695
    },
    {
        "content": "<p>of course, clippy is also distributed via rustup</p>",
        "id": 240842371,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622472708
    },
    {
        "content": "<p>So there are two parts here:</p>\n<p>1) just using unstable features <br>\n2) relying on unstable features for bootstraping purposes </p>\n<p>Both have a disadvantage that they make iterating on <code>rust-analyzer</code> itself significantly harder, especially for new contributors. Fast, reliable build &amp; test process is something we optimize for a lot, to make code base more accessible, and to be able to ship more things faster ourselves. </p>\n<p>Long term, when we start actually sharing significant parts of code with rustc, I can see us forgoing 1). I'd fight tooth and nail for 2). It's not that I can't be defeated on that one, but I'll fight :-)</p>\n<p>Before we reach the situation where <em>a lot</em> of code is shared, I think it makes sense to at least try to stick with stable. <code>chalk</code> is a good example to learn from here.</p>",
        "id": 240842599,
        "sender_full_name": "matklad",
        "timestamp": 1622472839
    },
    {
        "content": "<p>I guess, ther's also </p>\n<p>3) not using <code>rustc_private</code> crates </p>\n<p>That I think is hardest requirenment, as that goes directly the idea of proper, re-usable libraries.</p>",
        "id": 240842735,
        "sender_full_name": "matklad",
        "timestamp": 1622472912
    },
    {
        "content": "<p>Do we have any features in the <code>hir</code> crates that can be controlled by the settings?</p>",
        "id": 241390567,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622727080
    },
    {
        "content": "<p>Because gating attribute macros behind one currently seems pretty annoying to do</p>",
        "id": 241390601,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622727098
    },
    {
        "content": "<p>I don't think we do</p>",
        "id": 241390795,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1622727195
    },
    {
        "content": "<p>the setting would just be another input query, I guess?</p>",
        "id": 241391789,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622727631
    },
    {
        "content": "<p>hmm, yeah, that's pretty simple actually</p>",
        "id": 241391874,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622727683
    },
    {
        "content": "<p>we just can't forget to set it (does salsa have default values for input queries?)</p>",
        "id": 241391913,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622727707
    },
    {
        "content": "<p>hmm I don't know</p>",
        "id": 241391938,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622727718
    },
    {
        "content": "<p>okay, that was relatively straightforward</p>",
        "id": 241396261,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622729651
    }
]