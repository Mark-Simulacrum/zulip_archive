[
    {
        "content": "<p>I've noticed that when using Cargo.toml projects, adding new dependencies to crates seems to be picked up immediately, as if the Cargo.toml files are being watched (or if the LSP / extension is seeing the edits and acting accordingly).</p>\n<p>It appears that editing the Cargo.toml files causes a reload of the whole workspace.  But I know that project.json files aren't similarly reloaded.   (otoh, the ~600 crates that the <code>rust-analyzer</code> workspace contains doesn't take long to process vs. the ~3000 that I have in my project.json).</p>\n<p>Is the Cargo.toml reprocessing done through watching on the filesystem, or via the IDE (and is that what the \"client\" watcher is, the IDE?)</p>",
        "id": 229732661,
        "sender_full_name": "woody77",
        "timestamp": 1615406442
    },
    {
        "content": "<p>I believe we are effectively using the IDE as a file watcher for Cargo.toml, at least with the default config</p>",
        "id": 229733785,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1615406802
    },
    {
        "content": "<p>You can also tell r-a to use a native file watching implementation, but I'm not sure if Cargo.toml works with that setting</p>",
        "id": 229733878,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1615406838
    },
    {
        "content": "<p>Is that setup in <code>switch_workspace</code>?</p>",
        "id": 229733903,
        "sender_full_name": "woody77",
        "timestamp": 1615406848
    },
    {
        "content": "<p>I'm torn on whether I want it to watch my <code>project.json</code>, but it would probably be a usability improvement.  (when adding new crates/deps I end up telling r-a to reload the workspace a bunch)</p>",
        "id": 229734193,
        "sender_full_name": "woody77",
        "timestamp": 1615406951
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"301314\">woody77</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/File.20watching.20and.20Cargo.2Etoml.20vs.20project.2Ejson/near/229733903\">said</a>:</p>\n<blockquote>\n<p>Is that setup in <code>switch_workspace</code>?</p>\n</blockquote>\n<p>Yes, looks like it</p>",
        "id": 229738540,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1615408321
    },
    {
        "content": "<p>At least it decides whether to use the client's functionality or the builtin watcher</p>",
        "id": 229738646,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1615408344
    },
    {
        "content": "<p>I think we currently only listen to <code>didSave</code> for Cargo.toml, which is a <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/5333\">problem</a></p>",
        "id": 229746316,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1615411029
    },
    {
        "content": "<p>hmm, yeah</p>",
        "id": 229746508,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1615411106
    },
    {
        "content": "<p>Yeah it's just <code>didSave</code> for the moment: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/16a76aa158d0898d6a46d7bba7310150555a69b9/crates/rust-analyzer/src/main_loop.rs#L123-L131\">https://github.com/rust-analyzer/rust-analyzer/blob/16a76aa158d0898d6a46d7bba7310150555a69b9/crates/rust-analyzer/src/main_loop.rs#L123-L131</a></p>",
        "id": 229747587,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1615411550
    },
    {
        "content": "<p>Oh, interesting....  And since project.json is (I assume) usually generated, not edited (at least it is for us), then adding \"project.json\" to that list wouldn't really work (although it would allow for hand-edits...)</p>",
        "id": 229754905,
        "sender_full_name": "woody77",
        "timestamp": 1615414041
    },
    {
        "content": "<p>Although, would VSCode tell the LSP that the file changed because VSCode's own file-watcher detected a change?  or would it need to be open in an editor for that to happen?</p>",
        "id": 229755110,
        "sender_full_name": "woody77",
        "timestamp": 1615414087
    },
    {
        "content": "<p><code>didSave</code> only happens if you actually edit it in the editor. that's the problem. There is a separate mechanism with which we can register file watchers, but we don't use it for Cargo.toml yet (I think because it's not completely trivial because we'd have to add it to the VFS)</p>",
        "id": 229755680,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1615414226
    },
    {
        "content": "<p>For <code>didSave</code>, you have to save the file with the editor, not outside</p>",
        "id": 229755705,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1615414232
    },
    {
        "content": "<p>Ok, that makes sense.  And the VFS isn't used to watch files if VSCode is the watcher, correct?</p>",
        "id": 229756223,
        "sender_full_name": "woody77",
        "timestamp": 1615414357
    },
    {
        "content": "<p>Right. I think there's a setting for it... or there was a long time ago...</p>",
        "id": 229764180,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1615417843
    },
    {
        "content": "<p>There are still settings around that, yes.</p>",
        "id": 229942720,
        "sender_full_name": "woody77",
        "timestamp": 1615503175
    },
    {
        "content": "<p>So in general, it sounds like for <code>project.json</code>, we don't have any short paths to more automatic support than to reload the extension...  And from looking at things, by the time we're setting up file watching, we've elided the source of the workspace(s) / a crate graph, divorced from the Cargo.toml or project.json that created it.</p>",
        "id": 229946520,
        "sender_full_name": "woody77",
        "timestamp": 1615505095
    },
    {
        "content": "<p>Based on a change that I saw to <a href=\"http://reload.rs\">reload.rs</a> that added watching <code>Cargo.toml</code> files, I tried adding the watching of <code>rust-project.json</code> in the same way.  I'm seeing notifications of the file changing, but RA isn't picking up the changes to crate dependencies when that happens.  Any pointers for where to look next?</p>",
        "id": 255681331,
        "sender_full_name": "woody77",
        "timestamp": 1633056127
    },
    {
        "content": "<p>This was the change that I based mine on:  <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/9426/files\">https://github.com/rust-analyzer/rust-analyzer/pull/9426/files</a></p>",
        "id": 255681372,
        "sender_full_name": "woody77",
        "timestamp": 1633056181
    },
    {
        "content": "<p>And here's my println/tracing::error! debug statements that tell me that RA is getting notified of the change:</p>\n<div class=\"codehilite\"><pre><span></span><code>[ERROR rust_analyzer::main_loop] changed watched file: /Users/aaronwood/fuchsia/rust-project.json\n</code></pre></div>",
        "id": 255681492,
        "sender_full_name": "woody77",
        "timestamp": 1633056280
    },
    {
        "content": "<p>Oh, this line seems likely:  <br>\n<a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/c30a6a297489703af4ecf6689e7f5dea0754a689/crates/rust-analyzer/src/reload.rs#L574\">https://github.com/rust-analyzer/rust-analyzer/blob/c30a6a297489703af4ecf6689e7f5dea0754a689/crates/rust-analyzer/src/reload.rs#L574</a></p>",
        "id": 255682597,
        "sender_full_name": "woody77",
        "timestamp": 1633057289
    },
    {
        "content": "<p>But not enough, it seems...</p>\n<p>I can see that the notification has landed, but it doesn't seem to have triggered a reload (my test is that a symbol is still marked as unkonwn (unresolved import for a new dependency that I added to the rust-project.json file).</p>",
        "id": 255779350,
        "sender_full_name": "woody77",
        "timestamp": 1633109193
    },
    {
        "content": "<p>Try adding some debug messages, it wasn't too difficult last time I touched that code</p>",
        "id": 255780666,
        "sender_full_name": "Laurențiu",
        "timestamp": 1633109781
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/10199\">https://github.com/rust-analyzer/rust-analyzer/pull/10199</a></p>",
        "id": 255780677,
        "sender_full_name": "Laurențiu",
        "timestamp": 1633109790
    }
]