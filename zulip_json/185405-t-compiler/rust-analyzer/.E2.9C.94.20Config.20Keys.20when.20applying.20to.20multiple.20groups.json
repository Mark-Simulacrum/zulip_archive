[
    {
        "content": "<p>In <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/11145\">https://github.com/rust-analyzer/rust-analyzer/pull/11145</a> we want to add a new config key to specify whether to fill struct field defaults with <code>todo!</code> or <code>Default::default</code>(if applicable), this would apply to diagnostics but struct field completions in struct literals can also make use of this configuration for the snippet completion's default, so now the question is where a good spot for that config would be in since it applies to both <code>completion</code> and <code>diagnostics</code>(and maybe even <code>assists</code>?)</p>",
        "id": 266505436,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1640959764
    },
    {
        "content": "<p>I don't think we had such a case of a config being applicable for multiple IDE parts yet? I guess one way would be to duplicate the config for both but that feels wrong to me since this is not something you would want to ever work differently I believe<br>\nI think <code>assists</code> would be probably fit the best for the all rounder configs? <code>add_missing_match_arms</code> could also use this in which case this could be made more general as well by having this as a default filling element in general I suppose and not just fields.</p>",
        "id": 266505503,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1640959822
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300586\">Lukas Wirth</span> has marked this topic as resolved.</p>",
        "id": 266505821,
        "sender_full_name": "Notification Bot",
        "timestamp": 1640960276
    },
    {
        "content": "<p>I don't think we should do this (as <code>Default::default</code> is never what one wants), but for the general question:</p>\n<ul>\n<li>in terms of implementation, <code>CompletionConfig</code> and <code>AssistConfig</code> should have identical, unrelated fields for these. It's up to the caller to implement the logic of \"single user-specified options affects both behaviors\"</li>\n<li>in terms of UI, I think we already solved similar issue for auto-import merging behavior. There, the config is in the <code>assists</code>. So, I feel we should just do the same and not think to much (that's my general approach for working on RA -- I just copy-paste code and tricks around :) ). It also feels generally OK -- you can view assists as a general \"code assistance\"</li>\n</ul>",
        "id": 266621233,
        "sender_full_name": "matklad",
        "timestamp": 1641140436
    },
    {
        "content": "<p>Hmm ye <code>Default::default</code> filling is probably not too useful, though I do think having the configuration for \"reasonable defaults\" wouldn't be a bad choice</p>",
        "id": 266622514,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1641142227
    },
    {
        "content": "<p>Yeah, that's my reasoning exactly. \"reasonable\" means Pareto-optimal -- we can't do anything <em>strictly</em> better. And there's a possible Pareto-improvement to <code>Default::default</code>  -- instead of literal <code>Default::default</code>, use appropriate default value for each type (\"zero\" literals for primitive types, <code>T::new()</code> if that exists, <code>T::default</code> if that exists).</p>",
        "id": 266623103,
        "sender_full_name": "matklad",
        "timestamp": 1641142918
    },
    {
        "content": "<p>I implemented what you suggested but I still have an issue, if you know what's wrong let me know :) <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/11145#issuecomment-1004884170\">https://github.com/rust-analyzer/rust-analyzer/pull/11145#issuecomment-1004884170</a></p>",
        "id": 266818221,
        "sender_full_name": "Coenen Benjamin",
        "timestamp": 1641308625
    },
    {
        "content": "<p>Does it never find the <code>new</code> method for any types? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 266821597,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1641310302
    },
    {
        "content": "<p>Yes it doesn't find new at all. At least that what I saw. Maybe I'm wrong or I'm misinterpreting something</p>",
        "id": 266827904,
        "sender_full_name": "Coenen Benjamin",
        "timestamp": 1641313038
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span> I found my mistake on <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/11145\">https://github.com/rust-analyzer/rust-analyzer/pull/11145</a> basically I was calling for <code>iterate_on_methods</code> and <code>new</code> is an associated function then I had to call <code>iterate_on_associated_item</code> my bad. It's ready for review :)</p>",
        "id": 267068312,
        "sender_full_name": "Coenen Benjamin",
        "timestamp": 1641480386
    },
    {
        "content": "<p>o ye that would explain it <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 267068611,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1641480535
    }
]