[
    {
        "content": "<p>So I'm currently working on making the cargo check code provide OUT_DIR for packages that run a build script, and the actual interfacing with cargo is easy. I'm not sure about how to hook it up to the rest of rust-analyzer however.</p>\n<p>I currently have a cargo package id (e.g. <code>gl 0.14.0 (registry+https://github.com/rust-lang/crates.io-index)</code>) and an OUT_DIR path, but I'm not quite sure how to access and update the corresponding crate from <code>on_check_task</code> in <code>main_loop.rs</code>. If anybody with more experience in how the crate graph is stored inside a <code>WorldState</code> could point me in the right direction it would be appreciated.</p>\n<p>Secondly I'd also love some input on how/when to schedule getting the OUT_DIR values. As we all know by know, cargo check isn't always that fast, so running it asynchronously is a must. I'm not quite sure when to launch it to get the OUT_DIR values however. Ideally we'd have a way to ask cargo for just the OUT_DIRs without having to check the entire world, but that's not the situation currently.</p>",
        "id": 190387974,
        "sender_full_name": "Emil Lauridsen",
        "timestamp": 1584019177
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"212936\">@Emil Lauridsen</span> , this may not be very related, but I noticed a suspicions thing in <code>rls</code> code. They <a href=\"https://github.com/rust-lang/rls/blob/521498cd95c1389ef208d256acd2a1e4ca618cf0/Cargo.toml#L33\" target=\"_blank\" title=\"https://github.com/rust-lang/rls/blob/521498cd95c1389ef208d256acd2a1e4ca618cf0/Cargo.toml#L33\">depend on cargo</a> as a package. I am not sure how this works, maybe this could mean they can access <code>out-dir</code> api in their code (though I don't see any code doing exactly that)?</p>",
        "id": 190389358,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584019996
    },
    {
        "content": "<p>the <code>WorldState</code> contains an <code>AnalysisHost</code>. I think you should be able to create an <code>AnalysisChange</code>, <code>set_crate_graph</code> on that and then <code>apply_change</code> on the analysis host.</p>",
        "id": 190394692,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1584023025
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132829\">@Christopher Durham</span>  have some idea what the steps of the general cache process should be,you may be interested.</p>\n<p><a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/How.20to.20get.20.60Out-Dir.60/near/190024836\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/How.20to.20get.20.60Out-Dir.60/near/190024836\">https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/How.20to.20get.20.60Out-Dir.60/near/190024836</a></p>",
        "id": 190473432,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1584078302
    },
    {
        "content": "<p>Keep in mind when I wrote that I was under the impression that a new <code>cargo check</code> wouldn't re-emit the build-script-executed message. I may be wrong there, and that should simplify the process.</p>",
        "id": 190473608,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1584078599
    },
    {
        "content": "<p>And there is a vscode api <a href=\"https://code.visualstudio.com/api/references/vscode-api#ExtensionContext\" target=\"_blank\" title=\"https://code.visualstudio.com/api/references/vscode-api#ExtensionContext\">ExtensionContext</a> which provide some cache related directory api , which might be usefull too.</p>",
        "id": 190473897,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1584079036
    },
    {
        "content": "<p>Check seems to always replay the build-script-executed events, so we luckily shouldn't need to worry about that</p>",
        "id": 190498191,
        "sender_full_name": "Emil Lauridsen",
        "timestamp": 1584103624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> It looks to me like we have no way to identify a crate in the CrateGraph by the id/name we get from cargo, is that right? If so, how would you prefer going about storing such a mapping so that we can actually set OUT_DIR without blocking on the first cargo check?</p>",
        "id": 190502857,
        "sender_full_name": "Emil Lauridsen",
        "timestamp": 1584106513
    },
    {
        "content": "<p>When we lower <code>cargo metadata</code> to crate graph, we can remmeber a mapping from package name/target name to CrateId</p>",
        "id": 190502989,
        "sender_full_name": "matklad",
        "timestamp": 1584106581
    },
    {
        "content": "<p>Okay I've almost got it working, just gotta figure out how the get/create a ExternSourceId for a path on the fly. This would all be a lot easier if OUT_DIR was available form <code>cargo metadata</code>, it's turning out a bit more dirty than I'd like, so looking forward to some feedback once I get the last bit going.</p>",
        "id": 190510791,
        "sender_full_name": "Emil Lauridsen",
        "timestamp": 1584110877
    },
    {
        "content": "<p>The cargo issue for that is not very encouraging</p>",
        "id": 190511311,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1584111146
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"212936\">@Emil Lauridsen</span> Currently <code>ExternSourceId</code> is just a re-wrapper of <code>SourceRooId</code>, such that :</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">extern_source_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\">  </span><span class=\"n\">ExternSoruceId</span><span class=\"p\">(</span><span class=\"n\">source_root_id</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 190513960,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1584112308
    },
    {
        "content": "<p>Form the code in <code>world.rs</code> ~L130 it seems to be a wrapped VfsRoot id, but that appears to use the same ids so I think I got it figured out</p>",
        "id": 190515855,
        "sender_full_name": "Emil Lauridsen",
        "timestamp": 1584113105
    },
    {
        "content": "<p>I created a draft PR with my current work: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/3582\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/3582\">https://github.com/rust-analyzer/rust-analyzer/pull/3582</a></p>",
        "id": 190518900,
        "sender_full_name": "Emil Lauridsen",
        "timestamp": 1584114579
    },
    {
        "content": "<p>Why is <code>rust-analyzer.cargoFeatures.loadOutDirsFromCheck</code> disabled by default? Can we enable it in the future?</p>",
        "id": 191095462,
        "sender_full_name": "Laurențiu",
        "timestamp": 1584614658
    },
    {
        "content": "<p>It slows down initial load a lot</p>",
        "id": 191095932,
        "sender_full_name": "matklad",
        "timestamp": 1584614867
    },
    {
        "content": "<p>Oh, right. Maybe we can turn it on when we support changing workspace contents dynamically?</p>",
        "id": 191096109,
        "sender_full_name": "Laurențiu",
        "timestamp": 1584614959
    },
    {
        "content": "<p>And I assume that's only on the first load</p>",
        "id": 191096150,
        "sender_full_name": "Laurențiu",
        "timestamp": 1584614980
    },
    {
        "content": "<p>Would could do it lazily, the main blocker is how annoying (if even possible) adding a new VFS root and source roots on the fly. With that in place at some point, we could just run the initial <code>cargo check</code> in a thread like we run <code>cargo check</code> on save, and update the <code>OUT_DIR</code>s on the fly.</p>",
        "id": 191159943,
        "sender_full_name": "Emil Lauridsen",
        "timestamp": 1584644291
    }
]