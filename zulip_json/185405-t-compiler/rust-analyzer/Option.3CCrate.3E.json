[
    {
        "content": "<p>I noticed that almost all types in <code>code_model.rs</code> have a <code>pub fn krate(self, db: &amp;dyn HirDatabase) -&gt; Option&lt;Crate&gt;</code> that always returns <code>Some</code>. Is there a reason for that or can I change it to return just <code>Crate</code>?</p>",
        "id": 220238605,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608209353
    },
    {
        "content": "<p>I <em>think</em> primitives are not associated with any crate</p>",
        "id": 220238898,
        "sender_full_name": "matklad",
        "timestamp": 1608209551
    },
    {
        "content": "<p>but yeah, they probably should refer to a specific crate</p>",
        "id": 220238934,
        "sender_full_name": "matklad",
        "timestamp": 1608209573
    },
    {
        "content": "<p>OTOH, I am not sure it's such a good idea to have <em>every</em> type implement <code>fn module</code>, <code>fn crate</code></p>",
        "id": 220238980,
        "sender_full_name": "matklad",
        "timestamp": 1608209602
    },
    {
        "content": "<p>This feels like a missing abstraction somewhere</p>",
        "id": 220239000,
        "sender_full_name": "matklad",
        "timestamp": 1608209619
    },
    {
        "content": "<p>Hmm, interestingly a lot of types have a <code>fn module(self, db: &amp;dyn HirDatabase) -&gt; Module</code>, which then <em>does</em> allow you to get the defining crate anyways</p>",
        "id": 220239015,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608209625
    },
    {
        "content": "<p>The hir_def crate has <code>HasModule</code></p>",
        "id": 220239034,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608209639
    },
    {
        "content": "<p>Which could have a provided method that returns the crate</p>",
        "id": 220239093,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608209658
    },
    {
        "content": "<p>Ok, I think I've recalled historical context here</p>",
        "id": 220239780,
        "sender_full_name": "matklad",
        "timestamp": 1608210066
    },
    {
        "content": "<p>Originally, defs were very tightly bounded to AST</p>",
        "id": 220239804,
        "sender_full_name": "matklad",
        "timestamp": 1608210079
    },
    {
        "content": "<p>Basically, there was an <code>fn to_def(ast: ast::Struct) -&gt; hir::Struct</code>.</p>",
        "id": 220239833,
        "sender_full_name": "matklad",
        "timestamp": 1608210095
    },
    {
        "content": "<p>Not how it was infailable.</p>",
        "id": 220239840,
        "sender_full_name": "matklad",
        "timestamp": 1608210101
    },
    {
        "content": "<p>The idea was that you can create <code>hir</code> even for files which are not otherwise linked with the build process</p>",
        "id": 220239923,
        "sender_full_name": "matklad",
        "timestamp": 1608210132
    },
    {
        "content": "<p>Since we've made ast-&gt;hir conversion failable, now we should assume that the crate always exists</p>",
        "id": 220239962,
        "sender_full_name": "matklad",
        "timestamp": 1608210162
    },
    {
        "content": "<p>so, <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> , I think we should make everything return a non-None crate, modulo potential primite bug</p>",
        "id": 220239999,
        "sender_full_name": "matklad",
        "timestamp": 1608210182
    },
    {
        "content": "<p>But also, <em>maybe</em> we should only have <code>fn module</code> and use two calls for crate?</p>",
        "id": 220240035,
        "sender_full_name": "matklad",
        "timestamp": 1608210198
    },
    {
        "content": "<p>Interesting, thanks for the recap!</p>",
        "id": 220240080,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608210230
    },
    {
        "content": "<p>I kinda want a trait for this, since that would help with making <code>HasAttrs</code> work with <code>cfg_attr</code></p>",
        "id": 220240135,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608210247
    },
    {
        "content": "<p>(the crate needs to be known to access attributes once we handle them)</p>",
        "id": 220240172,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608210268
    },
    {
        "content": "<p>Hmm, we have 2 <code>HasSource</code> traits already, so I guess it wouldn't be the end of the world to define another <code>HasModule</code> trait in <code>hir</code></p>",
        "id": 220240346,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608210382
    },
    {
        "content": "<p>Yeah, we def should do <em>something</em> here, good catch about uselss option</p>",
        "id": 220240620,
        "sender_full_name": "matklad",
        "timestamp": 1608210582
    },
    {
        "content": "<p>I am not so sure about a trait though. I think we never actually use this in generic context</p>",
        "id": 220240679,
        "sender_full_name": "matklad",
        "timestamp": 1608210603
    },
    {
        "content": "<p>So, having inherent method would work better.</p>",
        "id": 220240694,
        "sender_full_name": "matklad",
        "timestamp": 1608210615
    },
    {
        "content": "<p>I actually want to provide inherent impls for all of the <code>ast</code> traits as well, so that you don't have to import them</p>",
        "id": 220240717,
        "sender_full_name": "matklad",
        "timestamp": 1608210637
    },
    {
        "content": "<p>(they trait would still be there for cases where you do want to handle stuff generically)</p>",
        "id": 220240729,
        "sender_full_name": "matklad",
        "timestamp": 1608210651
    },
    {
        "content": "<p><a href=\"https://matklad.github.io/2020/08/15/concrete-abstraction.html\">https://matklad.github.io/2020/08/15/concrete-abstraction.html</a></p>",
        "id": 220240763,
        "sender_full_name": "matklad",
        "timestamp": 1608210672
    },
    {
        "content": "<p>Problem is that <code>HasAttrs</code> <em>is</em> used generically, and to access the attributes once we handle <code>cfg_attr</code>, you need the <code>CrateId</code> (not just <code>Crate</code>)... so, not yet sure how to handle this</p>",
        "id": 220240994,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608210810
    },
    {
        "content": "<p>Hm, you'll need CrateId <em>inside</em> <code>HasAttrs</code> impl, right?</p>",
        "id": 220241593,
        "sender_full_name": "matklad",
        "timestamp": 1608211099
    },
    {
        "content": "<p>not outside?</p>",
        "id": 220241604,
        "sender_full_name": "matklad",
        "timestamp": 1608211105
    },
    {
        "content": "<p>I think I <em>could</em> make it work that way</p>",
        "id": 220241637,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608211125
    },
    {
        "content": "<p>I think you need <code>fn crate(def: AttrDefId) -&gt; CrateId</code></p>",
        "id": 220241702,
        "sender_full_name": "matklad",
        "timestamp": 1608211160
    },
    {
        "content": "<p>And that can be implemented in <code>hir_def</code></p>",
        "id": 220241715,
        "sender_full_name": "matklad",
        "timestamp": 1608211167
    },
    {
        "content": "<p>What I have now is a method on <code>Attrs</code>: <code>fn query(&amp;self, db: &amp;dyn DefDatabase, krate: CrateId) -&gt; QueryableAttrs&lt;'_&gt;</code></p>\n<p>Since this bororws <code>self</code>, there wouldn't be any way to return the <code>QueryableAttrs</code> to the caller.</p>",
        "id": 220241730,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608211178
    },
    {
        "content": "<p>(but you obv have more context here than I do )</p>",
        "id": 220241731,
        "sender_full_name": "matklad",
        "timestamp": 1608211180
    },
    {
        "content": "<p>Ahhh</p>",
        "id": 220241761,
        "sender_full_name": "matklad",
        "timestamp": 1608211195
    },
    {
        "content": "<p>If I make <code>QueryableAttrs</code> owned, this could be made to work</p>",
        "id": 220241770,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608211200
    },
    {
        "content": "<p>So you want to cfg-attr attributes lazily?</p>",
        "id": 220241820,
        "sender_full_name": "matklad",
        "timestamp": 1608211207
    },
    {
        "content": "<p>At the point where we query them, not at the point of definition?</p>",
        "id": 220241837,
        "sender_full_name": "matklad",
        "timestamp": 1608211218
    },
    {
        "content": "<p>Which just means cloning the <code>Attrs</code>, which shouldn't be too bad</p>",
        "id": 220241842,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608211222
    },
    {
        "content": "<p>Yeah that was my plan</p>",
        "id": 220241851,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608211227
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 220241859,
        "sender_full_name": "matklad",
        "timestamp": 1608211235
    },
    {
        "content": "<p>I briefly tried going the other way, but this seemed easier</p>",
        "id": 220241876,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608211250
    },
    {
        "content": "<p>I would think that an easier model is that in which you only ever have active attributes</p>",
        "id": 220241885,
        "sender_full_name": "matklad",
        "timestamp": 1608211256
    },
    {
        "content": "<p>though maybe that's not true</p>",
        "id": 220241898,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608211263
    },
    {
        "content": "<p>I mean, an ieasier model to use</p>",
        "id": 220241901,
        "sender_full_name": "matklad",
        "timestamp": 1608211264
    },
    {
        "content": "<p>not sure about implementation-side</p>",
        "id": 220241910,
        "sender_full_name": "matklad",
        "timestamp": 1608211272
    },
    {
        "content": "<p>yeah</p>",
        "id": 220241912,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608211273
    },
    {
        "content": "<p>but, as an assist author, I would prefer to be in a world where all \"macros\" are expanded, and where conditional compilation doesn't exist</p>",
        "id": 220241959,
        "sender_full_name": "matklad",
        "timestamp": 1608211302
    },
    {
        "content": "<p>(unrelated, but I've realized that early handing of conditional compilation is a thing whcih makes prortability lints and unified std not implementable in a \"reliable\" way)</p>",
        "id": 220242038,
        "sender_full_name": "matklad",
        "timestamp": 1608211347
    },
    {
        "content": "<p>mhmm, that's reasonable</p>",
        "id": 220242043,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608211350
    },
    {
        "content": "<p>seems like there's a lot of calls to <code>Attrs::from_attrs_owner</code> inside the IDE crates that would somehow need the <code>CrateId</code></p>",
        "id": 220243356,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608212106
    },
    {
        "content": "<p>maybe this is a larger-scale refactoring than I thought, and should be done in phases</p>",
        "id": 220243390,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608212132
    },
    {
        "content": "<p>wait</p>",
        "id": 220243893,
        "sender_full_name": "matklad",
        "timestamp": 1608212400
    },
    {
        "content": "<p>how</p>",
        "id": 220243903,
        "sender_full_name": "matklad",
        "timestamp": 1608212402
    },
    {
        "content": "<p>that's wrong, IDE shouldn't call <code>from_attrs_owner</code></p>",
        "id": 220243958,
        "sender_full_name": "matklad",
        "timestamp": 1608212414
    },
    {
        "content": "<p>Ook, I seee</p>",
        "id": 220244074,
        "sender_full_name": "matklad",
        "timestamp": 1608212493
    },
    {
        "content": "<p>all thouse usages are wrong :D</p>",
        "id": 220244087,
        "sender_full_name": "matklad",
        "timestamp": 1608212500
    },
    {
        "content": "<p>oh no :D</p>",
        "id": 220244313,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608212637
    },
    {
        "content": "<p>(as a meta note: in <code>hir_(def|expand|ty)</code>  anything goes -- it's useful to keep abstraction thin and do whatever is the easiest to get the cake eaten. In hir, however, care must be taken to not expose impl detail. The latter is a futile battle and a whack-a-mole game, but we still need to fight it :-) )</p>",
        "id": 220244376,
        "sender_full_name": "matklad",
        "timestamp": 1608212655
    },
    {
        "content": "<p>yeah, it's a bit odd that <code>Attrs</code> is just used all over the stack here</p>",
        "id": 220244422,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608212691
    },
    {
        "content": "<p>I think there are only two usages though?</p>",
        "id": 220244459,
        "sender_full_name": "matklad",
        "timestamp": 1608212713
    },
    {
        "content": "<p>One inside <code>nav_target</code>, to get docs from symbols from symbol index</p>",
        "id": 220244478,
        "sender_full_name": "matklad",
        "timestamp": 1608212730
    },
    {
        "content": "<p>The second one inside runnables</p>",
        "id": 220244493,
        "sender_full_name": "matklad",
        "timestamp": 1608212739
    },
    {
        "content": "<p>I am dealing with runnables due to an unrealted issue, I might be able to paper over that today</p>",
        "id": 220244519,
        "sender_full_name": "matklad",
        "timestamp": 1608212756
    },
    {
        "content": "<p>THe one inside symbol index is interesting...</p>",
        "id": 220244592,
        "sender_full_name": "matklad",
        "timestamp": 1608212784
    },
    {
        "content": "<p>Not sure what's the best solution there. Maybe just don't try to render docs for symbols from index? Not sure where they'd be visible in the UI</p>",
        "id": 220244648,
        "sender_full_name": "matklad",
        "timestamp": 1608212820
    },
    {
        "content": "<p>Maybe this shows up on hover when the accurate resolution fails? Similar to the go to def fallback</p>",
        "id": 220246094,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608213665
    },
    {
        "content": "<p>hmm, no, doesn't look like it; only the source preview works, not rendered documentation</p>",
        "id": 220246473,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608213832
    },
    {
        "content": "<p>This PR makes <code>from_attrs_owner</code> private: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/6916\">https://github.com/rust-analyzer/rust-analyzer/pull/6916</a></p>",
        "id": 220251778,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608216484
    },
    {
        "content": "<p>Since the ItemTree still stores attributes, I think we'll have to split them up into <code>RawAttrs</code>, which are crate-independent and do not handle <code>cfg_attr</code>, and <code>Attrs</code>, which were filtered according to the <code>cfg</code>s active for the crate in question.</p>",
        "id": 220252862,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608217040
    },
    {
        "content": "<p>Since almost no attributes include <code>cfg_attr</code>, they can share the same data most of the time</p>",
        "id": 220252924,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608217069
    },
    {
        "content": "<p>(sorry, just thinking out loud)</p>",
        "id": 220252942,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608217081
    },
    {
        "content": "<p>Make sense</p>",
        "id": 220252991,
        "sender_full_name": "matklad",
        "timestamp": 1608217086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> regarding doubts about overall <code>module/crate</code> API.</p>\n<p>I am looking at the <code>ModuleDef::canonical_path</code> API right now, and it doesn't handle associated items propertly</p>",
        "id": 220257545,
        "sender_full_name": "matklad",
        "timestamp": 1608219080
    },
    {
        "content": "<p>More generally, the problem with <code>.module</code> api is that the parent might actually be a block, and you might actually want to look at that, rather than at the module</p>",
        "id": 220257612,
        "sender_full_name": "matklad",
        "timestamp": 1608219111
    },
    {
        "content": "<p>but with <code>.module</code> so easily accessible, it might not be obvious</p>",
        "id": 220257671,
        "sender_full_name": "matklad",
        "timestamp": 1608219124
    },
    {
        "content": "<p>can associated items be <code>ModuleDef</code>s?</p>",
        "id": 220257735,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608219146
    },
    {
        "content": "<p>I thought they had a separate type</p>",
        "id": 220257758,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608219154
    },
    {
        "content": "<p>Sadly, the answer is \"who knows\" :(</p>",
        "id": 220257935,
        "sender_full_name": "matklad",
        "timestamp": 1608219226
    },
    {
        "content": "<p>We do have <code>ModuleDef</code> and <code>AssocItemDef</code></p>",
        "id": 220257959,
        "sender_full_name": "matklad",
        "timestamp": 1608219234
    },
    {
        "content": "<p>But I don't thing anything actually checks whether a thing is in module or an assoc item</p>",
        "id": 220258067,
        "sender_full_name": "matklad",
        "timestamp": 1608219258
    },
    {
        "content": "<p>We <em>might</em> need to install such checks</p>",
        "id": 220258094,
        "sender_full_name": "matklad",
        "timestamp": 1608219268
    },
    {
        "content": "<p>I think I wrote a comment about that somewhere <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 220258364,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1608219369
    },
    {
        "content": "<p>Also, calling <code>ModuleDef::module</code> on a module returns the module's <em>parent</em></p>",
        "id": 220258784,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608219534
    },
    {
        "content": "<p>So perhaps it should be <code>containing_module</code> or something</p>",
        "id": 220258828,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608219554
    },
    {
        "content": "<p>Maybe we need <code>Def::container</code> API which you can't get wrong</p>",
        "id": 220258986,
        "sender_full_name": "matklad",
        "timestamp": 1608219614
    },
    {
        "content": "<p>And <code>Module::for_def(def: Def)</code>,  <code>Crate::for_def(def: Def)</code> as a more verbose error-prone version?</p>",
        "id": 220259036,
        "sender_full_name": "matklad",
        "timestamp": 1608219646
    },
    {
        "content": "<p><span aria-label=\"black large square\" class=\"emoji emoji-2b1b\" role=\"img\" title=\"black large square\">:black_large_square:</span> Design <span aria-label=\"black large square\" class=\"emoji emoji-2b1b\" role=\"img\" title=\"black large square\">:black_large_square:</span></p>",
        "id": 220259083,
        "sender_full_name": "matklad",
        "timestamp": 1608219666
    }
]