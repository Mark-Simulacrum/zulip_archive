[
    {
        "content": "<p>Hey sorry if this is a known issue but I ran into a problem where items imported from a crate have methods that show as returning <code>!</code> or <code>{unknown}</code>. The code works fine when compiled but rust-analyzer just shows the types incorrectly in the IDE. This is the crate specifically <a href=\"https://docs.rs/scrap/0.5.0/scrap/\" target=\"_blank\" title=\"https://docs.rs/scrap/0.5.0/scrap/\">https://docs.rs/scrap/0.5.0/scrap/</a>. Just wondering where the problem is and if it's with my setup is there any way I can fix this?</p>",
        "id": 179742965,
        "sender_full_name": "eryn",
        "timestamp": 1572779169
    },
    {
        "content": "<p>rust-analyzer does its own name resolution and type inference, which isn't yet completely correct in some cases. That said, <code>!</code> and <code>{unknown}</code> are very different cases; <code>{unknown}</code> can easily happen when we can't resolve something e.g. because of some macro that we can't handle yet, whereas I would expect <code>!</code> to wrongly show up only in some edge cases with e.g. <code>match</code> or <code>if</code> within a function body, not as the return type of a method.</p>\n<p>We would have to look at the specific cases for more detail; it's possible or even likely that they're related to a known limitation, but it's hard to tell in this generality <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 179744998,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1572783350
    },
    {
        "content": "<p>Makes sense</p>\n<p>The return from this function here <a href=\"https://docs.rs/scrap/0.5.0/scrap/struct.Capturer.html#method.frame\" target=\"_blank\" title=\"https://docs.rs/scrap/0.5.0/scrap/struct.Capturer.html#method.frame\">https://docs.rs/scrap/0.5.0/scrap/struct.Capturer.html#method.frame</a> is being displayed as <code>Result&lt;!, {unknown}&gt;</code></p>",
        "id": 179745323,
        "sender_full_name": "eryn",
        "timestamp": 1572783884
    },
    {
        "content": "<p>As far as I can see, we can't even resolve <code>scrap::Capturer</code>, presumably because of all the conditional compilation going on there, so that type probably comes from how it's being used, and if you e.g. do a match on the <code>Result</code> where you <code>return</code> on the <code>Err</code> branch, that'll lead to inferring <code>!</code> for the <code>Ok</code> type</p>",
        "id": 179746292,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1572785859
    },
    {
        "content": "<p>ah, it uses <code>build.rs</code> to set some cfgs... I doubt we can handle that at the moment, so none of them is set, hence we don't resolve anything in there (since it doesn't have a fallback implementation)</p>",
        "id": 179746403,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1572786030
    },
    {
        "content": "<p>we used to kind of handle this better before we implemented the support for <code>cfg</code> we currently have...</p>",
        "id": 179746419,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1572786074
    },
    {
        "content": "<p>Is there a way I can help it along and sort of assert what type something is just within the context of rust-analyzer? Even doing <code>let capturer: Capturer = Capturer::new(display).unwrap();</code> makes it say <code>{unknown}</code>, shouldn't it be able to know that it's a <code>Capturer</code> since I set the type explicitly in the assignment?</p>",
        "id": 179759558,
        "sender_full_name": "eryn",
        "timestamp": 1572808817
    },
    {
        "content": "<p>That suggests that it can't resolve capturer, which is pretty much the same issue.</p>",
        "id": 179759576,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1572808903
    },
    {
        "content": "<p>So the only way around it that I can see is to define your own Capturer with the minimum interface that you need, perhaps as a new type struct around the real Capturer</p>",
        "id": 179759917,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1572809490
    },
    {
        "content": "<p>In this case, we don't know <code>Capturer</code> at all because we never even include any of the modules that define it</p>",
        "id": 179761386,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1572811665
    }
]