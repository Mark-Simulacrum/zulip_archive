[
    {
        "content": "<p>(deleted)</p>",
        "id": 216018842,
        "sender_full_name": "pksunkara",
        "timestamp": 1604859986
    },
    {
        "content": "<p>One of things we do in clap is to put <code>pub(crate)</code> on every private thing. Let me explain why. Assume we have <code>foo.rs</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">baz</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>We want to expose only <code>baz</code> to end users but still use <code>bar</code> internally in other modules:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">foo</span>::<span class=\"n\">baz</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">uses_bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>::<span class=\"n\">bar</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>In that situation, when we are working on <code>foo.rs</code>, we have no hint about the visibility of the items. Are they visibile to public? Are they visibile to only <code>super</code>? etc.. So, to make it easier for us, we ended up doing <code>pub(crate)</code> on all internal things which we want to use elsewhere in the codebase.</p>\n<p>I think this is one of things LSP can do. Provide an inlay hint that can display the visibility reach of each item that has <code>pub</code>.</p>",
        "id": 216019006,
        "sender_full_name": "pksunkara",
        "timestamp": 1604860261
    },
    {
        "content": "<p>if I understand you correctly, you might be interested in the <a href=\"https://doc.rust-lang.org/rustc/lints/listing/allowed-by-default.html#unreachable-pub\">unreachable-pub lint</a></p>",
        "id": 216019227,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1604860575
    },
    {
        "content": "<p>Yeah, we do have that. But I just don't like it. I think the IDE should display the info of the restriction level of visibility</p>",
        "id": 216019300,
        "sender_full_name": "pksunkara",
        "timestamp": 1604860691
    },
    {
        "content": "<p>Instead of forcing all my contributors to add <code>pub(crate)</code></p>",
        "id": 216019315,
        "sender_full_name": "pksunkara",
        "timestamp": 1604860709
    },
    {
        "content": "<p>If you use <code>pub</code> instead of <code>pub(crate)</code> rustc will for all intents and purposes consider it exported. The private-in-public lint won't fire, the missing_docs lint will fire and so on.</p>",
        "id": 216019863,
        "sender_full_name": "bjorn3",
        "timestamp": 1604861574
    },
    {
        "content": "<p>I do think this is a language-level concern, and that the fix is indeed to use <code>pub</code> only for exported items, and roll with <code>-Dunreacheable_pub</code> otherwise.</p>",
        "id": 216061173,
        "sender_full_name": "matklad",
        "timestamp": 1604914931
    },
    {
        "content": "<p>It is hugely helpful to see <code>pub</code> and immediately know \"hey, this is a public API\"</p>",
        "id": 216061201,
        "sender_full_name": "matklad",
        "timestamp": 1604914951
    },
    {
        "content": "<p>We recently begin enforcing this on CI: <a href=\"https://github.com/rust-analyzer/rust-analyzer/commit/ba8d6d1e4ea2590b31470171efc175b0301c5e1c\">https://github.com/rust-analyzer/rust-analyzer/commit/ba8d6d1e4ea2590b31470171efc175b0301c5e1c</a></p>",
        "id": 216061260,
        "sender_full_name": "matklad",
        "timestamp": 1604914998
    },
    {
        "content": "<p>Thanks for the discussion guys. I am now thinking that we should get clippy to have that lint by default turned on then</p>",
        "id": 216093302,
        "sender_full_name": "pksunkara",
        "timestamp": 1604933214
    },
    {
        "content": "<p>Its not the clippy lint, it's compiler lint. </p>\n<p>The plan was to toggle it in 2018, but that didn't happen, in large part due to <code>crate</code> visibility modifier not happening</p>",
        "id": 216093675,
        "sender_full_name": "matklad",
        "timestamp": 1604933351
    },
    {
        "content": "<p>unreachable_pub is buggy though :/</p>",
        "id": 216100710,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604936270
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/64762\">https://github.com/rust-lang/rust/issues/64762</a></p>",
        "id": 216100934,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604936349
    },
    {
        "content": "<p>Yeah, I've noticed that it doesn't hanle this case</p>\n<div class=\"codehilite\"><pre><span></span><code>pub use m::foo;\nmod m { pub fn fo0() {}}\n</code></pre></div>",
        "id": 216100944,
        "sender_full_name": "matklad",
        "timestamp": 1604936353
    },
    {
        "content": "<p>Oh I'm ok with false negatives, it also has false positives</p>",
        "id": 216101003,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604936377
    },
    {
        "content": "<p>And those are really annoying</p>",
        "id": 216101016,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604936383
    },
    {
        "content": "<p>I mean, that's false posive</p>",
        "id": 216101043,
        "sender_full_name": "matklad",
        "timestamp": 1604936397
    },
    {
        "content": "<p>And, looking at the issue, I think that actually needs to be <code>m::{foo, bar}</code>.</p>",
        "id": 216101118,
        "sender_full_name": "matklad",
        "timestamp": 1604936415
    },
    {
        "content": "<p>Hmm.. I guess I will wait for 2021 edition roadmap and then I can propose turning this to <code>warn</code></p>",
        "id": 216203051,
        "sender_full_name": "pksunkara",
        "timestamp": 1605010755
    },
    {
        "content": "<p>you don't need an edition break to make lints warn-by-default</p>",
        "id": 216203091,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605010776
    },
    {
        "content": "<p>you do however need to make sure there aren't false positives</p>",
        "id": 216203116,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605010788
    },
    {
        "content": "<p>so <a href=\"https://github.com/rust-lang/rust/issues/64762\">https://github.com/rust-lang/rust/issues/64762</a> needs to be fixed first</p>",
        "id": 216203131,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605010798
    }
]