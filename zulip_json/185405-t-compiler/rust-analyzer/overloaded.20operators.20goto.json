[
    {
        "content": "<p>Hi! I had a question about this issue, <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/11105\">https://github.com/rust-analyzer/rust-analyzer/issues/11105</a> . In the code snippet there's a <code>match</code> macro that seems to be matching variants of an <code>ast</code> enum. I tried looking through the code and I'm not sure what variants <code>ast</code> has. Autocomplete when typing <code>ast::</code> doesn't bring up anything. So I'm guessing I'm misunderstanding what is going on in that macro. Can anyone shed some light?</p>",
        "id": 266363506,
        "sender_full_name": "Ayomide Bamidele",
        "timestamp": 1640799316
    },
    {
        "content": "<p>The <code>match_ast!</code> macro will turn the match into a if-else chain, it will check if <code>node</code> can be cast into a struct in <a href=\"https://rust-analyzer.github.io/rust-analyzer/syntax/ast/index.html\"><code>syntax::ast</code></a>. The definition of <code>match_ast!</code> is here <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/4ea1f58bf6b3fd5bb59ed583f2ac432e237e1e1e/crates/syntax/src/lib.rs#L239-L250\">https://github.com/rust-analyzer/rust-analyzer/blob/4ea1f58bf6b3fd5bb59ed583f2ac432e237e1e1e/crates/syntax/src/lib.rs#L239-L250</a></p>",
        "id": 266365274,
        "sender_full_name": "Ruochen Wang",
        "timestamp": 1640800629
    },
    {
        "content": "<p>Thank you! I understand now</p>",
        "id": 266365917,
        "sender_full_name": "Ayomide Bamidele",
        "timestamp": 1640801052
    },
    {
        "content": "<p>Hmm, so for jumping to the overloadable operator. I'm guessing I would need to match on <code>ast::BinaryOp</code>? It's an enum not a struct but I'm not sure if any of the structs are specific to operators</p>",
        "id": 266367910,
        "sender_full_name": "Ayomide Bamidele",
        "timestamp": 1640802782
    },
    {
        "content": "<p>seems like <code>ast::BinaryOp</code> doesn't implement <code>AstNode</code>, so there's no <code>BinaryOp::cast</code> function</p>",
        "id": 266379122,
        "sender_full_name": "Ruochen Wang",
        "timestamp": 1640812328
    },
    {
        "content": "<p>You want to check for <code>BinExpr</code> I believe</p>",
        "id": 266381031,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1640813998
    }
]