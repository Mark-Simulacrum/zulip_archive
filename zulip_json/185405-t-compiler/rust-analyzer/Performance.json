[
    {
        "content": "<p>Hey all! First, thanks for the awesome work! <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span>️ I'm working on the winrt crate which is a crate for Windows Runtime bindings (think modern Windows APIs). These APIs are huge and so it's pretty easy for bindings to reach the hundreds of thousands or even millions of lines of code. Needless to say, it's a perf challenge. I'm wondering if it would be helpful to have our crate as a performance measure. You can give it a try with a simple scratch repo we set up: <a href=\"https://github.com/kennykerr/scratch\">https://github.com/kennykerr/scratch</a> there shouldn't be anything special to run it, just a Windows 10 box.</p>",
        "id": 199901163,
        "sender_full_name": "rylev",
        "timestamp": 1591374269
    },
    {
        "content": "<p>Could you also create a repo with all the code generated? Might be much easier to poke at if win 10 box is not required :)</p>",
        "id": 199901489,
        "sender_full_name": "matklad",
        "timestamp": 1591374411
    },
    {
        "content": "<p>Sure. You won't be able to run it, but I guess that's not an issue</p>",
        "id": 199901597,
        "sender_full_name": "rylev",
        "timestamp": 1591374477
    },
    {
        "content": "<p>Fun fact: IntelliJ Rust had (and I bet still has) special hacks in resolver to handle winapi crate</p>",
        "id": 199901774,
        "sender_full_name": "matklad",
        "timestamp": 1591374543
    },
    {
        "content": "<p>yup, still there: <a href=\"https://github.com/intellij-rust/intellij-rust/blob/5a3d790d4d981c0f5a03761a340d7add69702e66/src/main/kotlin/org/rust/lang/core/resolve/Processors.kt#L38-L42\">https://github.com/intellij-rust/intellij-rust/blob/5a3d790d4d981c0f5a03761a340d7add69702e66/src/main/kotlin/org/rust/lang/core/resolve/Processors.kt#L38-L42</a></p>",
        "id": 199901868,
        "sender_full_name": "matklad",
        "timestamp": 1591374594
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> <a href=\"https://github.com/rylev/winrt-generated\">https://github.com/rylev/winrt-generated</a></p>",
        "id": 199902841,
        "sender_full_name": "rylev",
        "timestamp": 1591375006
    },
    {
        "content": "<p>Interesting note. the generated bindings seems faster than when going through a different create through an <code>include</code> macro</p>",
        "id": 199903250,
        "sender_full_name": "rylev",
        "timestamp": 1591375167
    },
    {
        "content": "<p>Is there perhaps something when using <code>include!</code> that might be slowing things down?</p>",
        "id": 199904109,
        "sender_full_name": "rylev",
        "timestamp": 1591375588
    },
    {
        "content": "<p>Moving stuff around in the file seems to cause it to wonk out though...</p>",
        "id": 199906015,
        "sender_full_name": "rylev",
        "timestamp": 1591376522
    },
    {
        "content": "<p>I played more with the sample repo I posted above today. Besides a long startup time, the performance is ok. It still takes over a second for some types to resolve. I also am under the impression that performance is different when the code is pre-generated and included explicitly  in the project vs when the code is generated in the build script and read by an <code>include!</code> macro from OUT_DIR. I'm not exactly sure what the next steps should be</p>",
        "id": 200102851,
        "sender_full_name": "rylev",
        "timestamp": 1591625666
    },
    {
        "content": "<p>Yeah, I think it's quite probable that <code>include!</code> is a problem here</p>",
        "id": 200103242,
        "sender_full_name": "matklad",
        "timestamp": 1591625834
    },
    {
        "content": "<p>(or at least one of the problems)</p>",
        "id": 200103253,
        "sender_full_name": "matklad",
        "timestamp": 1591625840
    },
    {
        "content": "<p>We've fixed an accidently quadratic behavior around <code>include!</code> a couple of weeks ago but there's still at least one <code>O(N^2)</code> thing left</p>",
        "id": 200103314,
        "sender_full_name": "matklad",
        "timestamp": 1591625868
    },
    {
        "content": "<p>Are there tests around this? I need to look into getting rust-analyzer dev set upon my machine</p>",
        "id": 200103584,
        "sender_full_name": "rylev",
        "timestamp": 1591625970
    },
    {
        "content": "<p>look for <code>infer_builtin_macros_include</code> and <code>include_accidentally_quadratic</code></p>",
        "id": 200103821,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1591626070
    },
    {
        "content": "<p>the <code>include_accidentally_quadratic</code> test is actually ignored, presumably because it's still pretty slow</p>",
        "id": 200103877,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1591626101
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/5ed9818a7c855bf914e91324e305f24e4e743057/crates/ra_hir_ty/src/tests/macros.rs#L553-L575\">https://github.com/rust-analyzer/rust-analyzer/blob/5ed9818a7c855bf914e91324e305f24e4e743057/crates/ra_hir_ty/src/tests/macros.rs#L553-L575</a></p>",
        "id": 200103896,
        "sender_full_name": "matklad",
        "timestamp": 1591626111
    },
    {
        "content": "<p>I'll see if I can make any dent in that.</p>",
        "id": 200104151,
        "sender_full_name": "rylev",
        "timestamp": 1591626210
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@Ryan Levick</span> do you know about <code>RA_PROFILE</code> env var?</p>",
        "id": 200104358,
        "sender_full_name": "matklad",
        "timestamp": 1591626292
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/tree/master/docs/dev#profiling\">https://github.com/rust-analyzer/rust-analyzer/tree/master/docs/dev#profiling</a></p>",
        "id": 200104426,
        "sender_full_name": "matklad",
        "timestamp": 1591626322
    },
    {
        "content": "<p>Might be useful to narrow this down. I haven't looked into this myself yet, but the most probable cause is \"somethig is quadratic\".</p>",
        "id": 200104471,
        "sender_full_name": "matklad",
        "timestamp": 1591626348
    },
    {
        "content": "<p>Sorry, had to step out. No I didn't know about that (I'm basically completely new to RA dev - only been a user until now). I'll give it a look</p>",
        "id": 200112611,
        "sender_full_name": "rylev",
        "timestamp": 1591629500
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/tree/master/docs/dev\">https://github.com/rust-analyzer/rust-analyzer/tree/master/docs/dev</a> is worth reading, but <code>git clone</code> and <code>cargo test</code> will get you pretty far.</p>",
        "id": 200116151,
        "sender_full_name": "Laurențiu",
        "timestamp": 1591630821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> regarding the performance cc <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/4692#issuecomment-637076470\">https://github.com/rust-analyzer/rust-analyzer/issues/4692#issuecomment-637076470</a>, it's strange that <code>codegen-units=1</code> doesn't increase the dist run time. If so I wonder if it really does give performance increase.</p>",
        "id": 200400190,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1591785322
    },
    {
        "content": "<p>That's compile-time peformance, right? In general, I wouldn't tweak anything here -- at the current level of internal optimization of RA, fine-grained tweaking of compiler optimization flags should be irrelevant -- those should come after the code base itself is optimized. </p>\n<p>I wonder if incremental=true negates codegen units?</p>",
        "id": 200400670,
        "sender_full_name": "matklad",
        "timestamp": 1591785707
    },
    {
        "content": "<p>Incremental=true did this untill 1.44 rust releaae</p>",
        "id": 200400818,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1591785812
    },
    {
        "content": "<p>Setting Codegen-units=1 trades compilation in 1 thread for potentially more optimizations rustc can do.<br>\nI also wonder why we have incremental enabled for dist builds...</p>",
        "id": 200400973,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1591785920
    },
    {
        "content": "<p>We don't?</p>",
        "id": 200400983,
        "sender_full_name": "Laurențiu",
        "timestamp": 1591785936
    },
    {
        "content": "<p>There's <code>CARGO_INCREMENTAL: 0</code> in an <code>env</code> section at the top of <code>release.yaml</code></p>",
        "id": 200401040,
        "sender_full_name": "Laurențiu",
        "timestamp": 1591785966
    },
    {
        "content": "<p>I mean there is incremental=true release section of cargo toml</p>",
        "id": 200401060,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1591785986
    },
    {
        "content": "<p>Because matklad only runs release builds locally?</p>",
        "id": 200401087,
        "sender_full_name": "Laurențiu",
        "timestamp": 1591786030
    },
    {
        "content": "<p>Don't we have <code>debug=0</code> in <code>[dev]</code> profile for this purpose?</p>",
        "id": 200401160,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1591786099
    },
    {
        "content": "<p>debug=0 is to speed up local debug builds (debug info is huge). incremtal=1 is to speed up local release builds</p>",
        "id": 200401245,
        "sender_full_name": "matklad",
        "timestamp": 1591786199
    },
    {
        "content": "<p>I think <code>CARGO_INCREMENTAL=0</code> in <code>release.yml</code> doesn't override what is specified in <code>Cargo.toml</code></p>",
        "id": 200401369,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1591786289
    },
    {
        "content": "<p>Or  does it?</p>",
        "id": 200401387,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1591786311
    },
    {
        "content": "<p>It should</p>",
        "id": 200401655,
        "sender_full_name": "Laurențiu",
        "timestamp": 1591786543
    },
    {
        "content": "<p>Ah, yes, the docs say so...<br>\nI wonder why I thought it doesn't</p>",
        "id": 200401764,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1591786614
    },
    {
        "content": "<p>A <code>codegen-units=1 incremental=false</code> build takes 14 minutes on my laptop</p>",
        "id": 200403655,
        "sender_full_name": "Laurențiu",
        "timestamp": 1591788109
    },
    {
        "content": "<p>And analysis takes 57.7 vs. 59.8s</p>",
        "id": 200404207,
        "sender_full_name": "Laurențiu",
        "timestamp": 1591788575
    },
    {
        "content": "<p>I just wiped my target directory because I was running out of disk space. I now have an extra 50GB I didn't have before.</p>",
        "id": 200666065,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1591966549
    }
]