[
    {
        "content": "<p>identiy proc macro:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">proc_macro</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[proc_macro]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">identity</span><span class=\"p\">(</span><span class=\"n\">ts</span>: <span class=\"nc\">TokenStream</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TokenStream</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">eprintln!</span><span class=\"p\">(</span><span class=\"s\">\"in  = {:#?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ts</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ts_clone</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">clone_stream</span><span class=\"p\">(</span><span class=\"n\">ts</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">eprintln!</span><span class=\"p\">(</span><span class=\"s\">\"out = {:#?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ts_clone</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">clone</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">clone</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ts_clone</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ts</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">clone_stream</span><span class=\"p\">(</span><span class=\"n\">ts</span>: <span class=\"nc\">TokenStream</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TokenStream</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ts</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">clone_tree</span><span class=\"p\">).</span><span class=\"n\">collect</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">clone_tree</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"nc\">TokenTree</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TokenTree</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">TokenTree</span>::<span class=\"n\">Group</span><span class=\"p\">(</span><span class=\"n\">orig</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Group</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">orig</span><span class=\"p\">.</span><span class=\"n\">delimiter</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">clone_stream</span><span class=\"p\">(</span><span class=\"n\">orig</span><span class=\"p\">.</span><span class=\"n\">stream</span><span class=\"p\">()));</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">set_span</span><span class=\"p\">(</span><span class=\"n\">orig</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">TokenTree</span>::<span class=\"n\">Group</span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">TokenTree</span>::<span class=\"n\">Ident</span><span class=\"p\">(</span><span class=\"n\">orig</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">TokenTree</span>::<span class=\"n\">Ident</span><span class=\"p\">(</span><span class=\"n\">Ident</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">orig</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">orig</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">())),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">TokenTree</span>::<span class=\"n\">Punct</span><span class=\"p\">(</span><span class=\"n\">orig</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Punct</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">orig</span><span class=\"p\">.</span><span class=\"n\">as_char</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">orig</span><span class=\"p\">.</span><span class=\"n\">spacing</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">set_span</span><span class=\"p\">(</span><span class=\"n\">orig</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">TokenTree</span>::<span class=\"n\">Punct</span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">TokenTree</span>::<span class=\"n\">Literal</span><span class=\"p\">(</span><span class=\"n\">_orig</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">unimplemented!</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>usage: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![allow(unused)]</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">m</span>::<span class=\"n\">identity</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$e</span>:<span class=\"nc\">expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">identity</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"cp\">$e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">m</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"nb\">String</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 255965211,
        "sender_full_name": "matklad",
        "timestamp": 1633281291
    },
    {
        "content": "<p>The usage will compile only when we do clone the token stream</p>",
        "id": 255965238,
        "sender_full_name": "matklad",
        "timestamp": 1633281327
    },
    {
        "content": "<p>Ok, this is <strong>suuper</strong> weird</p>",
        "id": 255966663,
        "sender_full_name": "matklad",
        "timestamp": 1633282662
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/gvoc0f60PF5VN-odwO_jrLCz/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/gvoc0f60PF5VN-odwO_jrLCz/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/gvoc0f60PF5VN-odwO_jrLCz/image.png\"></a></div>",
        "id": 255966664,
        "sender_full_name": "matklad",
        "timestamp": 1633282665
    },
    {
        "content": "<p>I think it's more like macro_rules! magic</p>",
        "id": 255967736,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1633283709
    },
    {
        "content": "<p>Yeah, that's known. What was new to me is that the ts passed into proc_macro carries some of that magic, and those magical bits can't be duplicated</p>",
        "id": 255967895,
        "sender_full_name": "matklad",
        "timestamp": 1633283871
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Procedural Macro</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">proc_macro</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[proc_macro]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">identity</span><span class=\"p\">(</span><span class=\"n\">ts</span>: <span class=\"nc\">TokenStream</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TokenStream</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ts_clone</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">clone_stream</span><span class=\"p\">(</span><span class=\"n\">ts</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">clone</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// change me</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">clone</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ts_clone</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ts</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">clone_stream</span><span class=\"p\">(</span><span class=\"n\">ts</span>: <span class=\"nc\">TokenStream</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TokenStream</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ts</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">clone_tree</span><span class=\"p\">).</span><span class=\"n\">collect</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">clone_tree</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"nc\">TokenTree</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TokenTree</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">TokenTree</span>::<span class=\"n\">Group</span><span class=\"p\">(</span><span class=\"n\">orig</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Group</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">orig</span><span class=\"p\">.</span><span class=\"n\">delimiter</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">clone_stream</span><span class=\"p\">(</span><span class=\"n\">orig</span><span class=\"p\">.</span><span class=\"n\">stream</span><span class=\"p\">()));</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">set_span</span><span class=\"p\">(</span><span class=\"n\">orig</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">TokenTree</span>::<span class=\"n\">Group</span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">TokenTree</span>::<span class=\"n\">Ident</span><span class=\"p\">(</span><span class=\"n\">orig</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">TokenTree</span>::<span class=\"n\">Ident</span><span class=\"p\">(</span><span class=\"n\">Ident</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">orig</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">orig</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">())),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">TokenTree</span>::<span class=\"n\">Punct</span><span class=\"p\">(</span><span class=\"n\">orig</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Punct</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">orig</span><span class=\"p\">.</span><span class=\"n\">as_char</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">orig</span><span class=\"p\">.</span><span class=\"n\">spacing</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">set_span</span><span class=\"p\">(</span><span class=\"n\">orig</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">TokenTree</span>::<span class=\"n\">Punct</span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">TokenTree</span>::<span class=\"n\">Literal</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Main</span>\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$e</span>:<span class=\"nc\">expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">m</span>::<span class=\"n\">identity</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"cp\">$e</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">eprintln!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 255968114,
        "sender_full_name": "matklad",
        "timestamp": 1633284024
    },
    {
        "content": "<p>Minimized example</p>",
        "id": 255968301,
        "sender_full_name": "matklad",
        "timestamp": 1633284225
    },
    {
        "content": "<p>This looks a bit like the <a href=\"https://github.com/danielhenrymantilla/rust-defile\"><code>defile</code></a> proc-macro that <span class=\"user-mention\" data-user-id=\"158561\">@Daniel Henry-Mantilla</span> wrote, maybe they know what is going on here</p>",
        "id": 256338799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633479109
    },
    {
        "content": "<p>Ah, it's mentioned at the bottom:</p>\n<blockquote>\n<p><strong>Caveats</strong><br>\nCurrently (1.45.0), there are several bugs regarding the interaction between <code>macro_rules!</code> macros and procedural macros, that may lead to <code>defile!</code> and any other helper procedural macro to split groups that are not <code>@</code>-prefixed.</p>\n<p>Hopefully those bugs are solved, making the actual implementation of <code>defile!</code> meaningful.</p>\n</blockquote>",
        "id": 256338972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633479229
    },
    {
        "content": "<p>Thanks for the ping, <span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span>.  Matklad is right, when they say:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/TIL.20that.20token.20streams.20are.20magic/near/255967895\">said</a>:</p>\n<blockquote>\n<p>the ts passed into proc_macro carries some of that magic, and those magical bits can't be duplicated</p>\n</blockquote>\n<p>This behavior is indeed the one responsible for that \"caveats\" section you mentioned, and may even be the reason behing the workaround done in <code>macro_rules_attribute</code> (<a href=\"https://github.com/danielhenrymantilla/macro_rules_attribute-rs/blob/b673e96025485bd8120a44b6aeb7e738f1affe3f/src/proc_macro/mod.rs#L110-L112\">https://github.com/danielhenrymantilla/macro_rules_attribute-rs/blob/b673e96025485bd8120a44b6aeb7e738f1affe3f/src/proc_macro/mod.rs#L110-L112</a>) just working.</p>\n<p>Now, I've been experimenting a bit more given this thread, with the following stand-alone Playground:</p>\n<ul>\n<li><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=1b4169c1fa8d9dddf18153d0cbaf9b03\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=1b4169c1fa8d9dddf18153d0cbaf9b03</a></li>\n</ul>\n<p>My main observation is that the <code>TokenTree</code>s yielded by <code>.into_iter()</code> do indeed no longer carry all the information that the original <code>TokenTree</code>s carried:</p>\n<ul>\n<li>\n<p><code>input</code> represents a stream of tokens which, <em>at any depth</em> (feel free to add parenthesis in <code>entrypoint!</code> and things like that when experimenting), feature <code>None</code>-delimited <code>Group</code>s imbued with the appropriate grammar-tagging semantics.</p>\n</li>\n<li>\n<p>But the <code>TokenTree</code>s yielded by <code>input</code> through iteration, which represent a <em>seemingly</em> equivalent stream of tokens (they are <em>seemingly</em> still <code>Group</code>-ped as originally: if such stream is then <em>directly</em> fed to further proc-macros (through macro invocations I mean), then nothing seems to have changed), have actually changed!</p>\n</li>\n<li>\n<p>Indeed, if such stream is to be parsed by either non-macro rust code, or by a <code>macro_rules!</code> macro, then those <code>Group</code>-layers seem to vanish.</p>\n</li>\n</ul>\n<p>I know that the compiler tries to be quite smart with span manipulation and caching, and all while trying to be retro-compatible with the first semantics exposed to client proc-macro code: so there are some hacks there to preserve such retro-compat while enabling some \"cached tokenstream\" optimizations, and to try and feature as much span correctness as possible.</p>\n<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> has been working a lot with such tweaks, so they definitely are the ones able to explain why the current proc-macro implementation behaves like it does.</p>",
        "id": 256398884,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1633521757
    }
]