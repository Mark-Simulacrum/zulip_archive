[
    {
        "content": "<p>I'm seeking for some mentoring on <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/5993\">rust-analyzer#5993</a> . I think there's something i need to do on lowering, but i'm not entirely sure.</p>",
        "id": 210219796,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600228430
    },
    {
        "content": "<p>I think you need to modify <code>type_for_type_alias</code> in <code>hir_ty/src/lower.rs</code> to check <code>is_extern</code></p>",
        "id": 210239274,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1600248709
    },
    {
        "content": "<p>Because right now that will just give you a <code>TypeRef::Error</code> when the <code>= ExistingType</code> part of the alias is missing</p>",
        "id": 210239390,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1600248769
    },
    {
        "content": "<p>Thanks for instruction! Updated.</p>",
        "id": 210256929,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600261074
    },
    {
        "content": "<p>Is it working now? Then the next step would be to add some inference tests, I think.</p>",
        "id": 210257898,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1600261504
    },
    {
        "content": "<p>It's not fully working, but definitely works better than without this PR. I've added a test.</p>",
        "id": 210286452,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600273528
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">method_resolution_foreign_opaque_type</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">check_infer</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">r</span><span class=\"err\">#</span><span class=\"s\">&quot;</span>\n<span class=\"s\">        extern &quot;</span><span class=\"n\">C</span><span class=\"s\">&quot; {</span>\n<span class=\"s\">            type S;</span>\n<span class=\"s\">            fn f() -&gt; &amp;&#39;static S;</span>\n<span class=\"s\">        }</span>\n<span class=\"s\">        impl S {</span>\n<span class=\"s\">            fn foo(&amp;self) -&gt; bool {</span>\n<span class=\"s\">                true</span>\n<span class=\"s\">            }</span>\n<span class=\"s\">        }</span>\n<span class=\"s\">        fn test() {</span>\n<span class=\"s\">            let s = unsafe { f() };</span>\n<span class=\"s\">            s.foo();</span>\n<span class=\"s\">        }</span>\n<span class=\"s\">        &quot;</span><span class=\"err\">#</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// FIXME: &#39;s.foo()&#39; should be `bool`.</span>\n<span class=\"w\">        </span><span class=\"n\">expect</span><span class=\"o\">!</span><span class=\"p\">[[</span><span class=\"n\">r</span><span class=\"err\">#</span><span class=\"s\">&quot;</span>\n<span class=\"s\">            75..79 &#39;self&#39;: &amp;S</span>\n<span class=\"s\">            89..109 &#39;{     ...     }&#39;: bool</span>\n<span class=\"s\">            99..103 &#39;true&#39;: bool</span>\n<span class=\"s\">            123..167 &#39;{     ...o(); }&#39;: ()</span>\n<span class=\"s\">            133..134 &#39;s&#39;: &amp;S</span>\n<span class=\"s\">            137..151 &#39;unsafe { f() }&#39;: &amp;S</span>\n<span class=\"s\">            144..151 &#39;{ f() }&#39;: &amp;S</span>\n<span class=\"s\">            146..147 &#39;f&#39;: fn f() -&gt; &amp;S</span>\n<span class=\"s\">            146..149 &#39;f()&#39;: &amp;S</span>\n<span class=\"s\">            157..158 &#39;s&#39;: &amp;S</span>\n<span class=\"s\">            157..164 &#39;s.foo()&#39;: {unknown}</span>\n<span class=\"s\">        &quot;</span><span class=\"err\">#</span><span class=\"p\">]],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 210286459,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600273534
    },
    {
        "content": "<p>There's still one <code>{unknown}</code>.</p>",
        "id": 210286489,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600273556
    },
    {
        "content": "<p>without this PR everything is <code>{unknown}</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>75..79 &#39;self&#39;: &amp;{unknown}\n89..109 &#39;{     ...     }&#39;: bool\n99..103 &#39;true&#39;: bool\n123..167 &#39;{     ...o(); }&#39;: ()\n133..134 &#39;s&#39;: &amp;{unknown}\n137..151 &#39;unsafe { f() }&#39;: &amp;{unknown}\n144..151 &#39;{ f() }&#39;: &amp;{unknown}\n146..147 &#39;f&#39;: fn f() -&gt; &amp;{unknown}\n146..149 &#39;f()&#39;: &amp;{unknown}\n157..158 &#39;s&#39;: &amp;{unknown}\n157..164 &#39;s.foo()&#39;: {unknown}\n</code></pre></div>",
        "id": 210286722,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600273668
    },
    {
        "content": "<p>Found the problem with method resolution, fixed it~</p>",
        "id": 210289597,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600275065
    },
    {
        "content": "<p>Great!</p>",
        "id": 210293527,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1600276998
    }
]