[
    {
        "content": "<p>Can someone please explain what is the difference between <code>flatten_mut()</code> and <code>flatten_const()</code> methods in this code? I see that both of them have the same income and outcome.</p>",
        "id": 185857764,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1579207406
    },
    {
        "content": "<p><a href=\"https://github.com/CAD97/thin-dst/blob/1da8b7ac72829b1ed57075d13810bc2ce9842e0b/src/lib.rs#L111\" target=\"_blank\" title=\"https://github.com/CAD97/thin-dst/blob/1da8b7ac72829b1ed57075d13810bc2ce9842e0b/src/lib.rs#L111\">https://github.com/CAD97/thin-dst/blob/1da8b7ac72829b1ed57075d13810bc2ce9842e0b/src/lib.rs#L111</a></p>",
        "id": 185857781,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1579207416
    },
    {
        "content": "<p>but <code>fatten_mut</code> uses <code>make_slice_mut</code> which probably cuts things from the given pointer</p>",
        "id": 185861002,
        "sender_full_name": "pksunkara",
        "timestamp": 1579209223
    },
    {
        "content": "<p>Those are just wrappers for <code>slice::from_raw_parts()</code> and <code>slice::from_raw_parts_mut()</code><br>\n<a href=\"https://github.com/CAD97/thin-dst/blob/1da8b7ac72829b1ed57075d13810bc2ce9842e0b/src/polyfill.rs#L9\" target=\"_blank\" title=\"https://github.com/CAD97/thin-dst/blob/1da8b7ac72829b1ed57075d13810bc2ce9842e0b/src/polyfill.rs#L9\">https://github.com/CAD97/thin-dst/blob/1da8b7ac72829b1ed57075d13810bc2ce9842e0b/src/polyfill.rs#L9</a></p>",
        "id": 185861240,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1579209344
    },
    {
        "content": "<p>They give different pointer provenance. One goes via <code>&amp;</code>, the other via <code>&amp;mut</code>. If you intend to mutate the thing, you need to get the raw pointer from an <code>&amp;mut</code>.</p>",
        "id": 185899197,
        "sender_full_name": "matklad",
        "timestamp": 1579252765
    },
    {
        "content": "<p>provenance?</p>",
        "id": 185934966,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1579280114
    },
    {
        "content": "<p>yup: <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/52\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/52\">https://github.com/rust-lang/unsafe-code-guidelines/issues/52</a>, <a href=\"https://github.com/rust-lang/rust/pull/54461\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54461\">https://github.com/rust-lang/rust/pull/54461</a></p>\n<p>Basically, it's only valid to write through <code>*mut</code> if it originated (has a provenance of?) from a mutable location</p>",
        "id": 185935228,
        "sender_full_name": "matklad",
        "timestamp": 1579280253
    },
    {
        "content": "<p>oh, so like <code>*(&amp;t as *const _ as *mut) = whatever</code> is invalid</p>",
        "id": 185935474,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1579280385
    },
    {
        "content": "<p>right</p>",
        "id": 185935683,
        "sender_full_name": "matklad",
        "timestamp": 1579280485
    },
    {
        "content": "<p>well, I don't know a lot about this stuff myself, but that's my semi-layman understanding</p>",
        "id": 185935729,
        "sender_full_name": "matklad",
        "timestamp": 1579280511
    },
    {
        "content": "<p><em>let me go change some code at $WORK</em></p>",
        "id": 185935942,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1579280635
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> , wow that is something I never knew, this provenance thing is something complex. I've read <a href=\"https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2019/june/pointer-provenance/\" target=\"_blank\" title=\"https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2019/june/pointer-provenance/\">this post</a> and if I understood it correctly provenance is not something that is standardized but instead used exclusively by the compiler. There is also a post that justifies that <a href=\"https://www.ralfj.de/blog/2018/07/24/pointers-and-bytes.html\" target=\"_blank\" title=\"https://www.ralfj.de/blog/2018/07/24/pointers-and-bytes.html\">pointers are not just integers</a>. I'd make a conclusion that provenance is the static metadata used for optimizations, that is erased in the compiled output, and at runtime, pointers are indeed just integers.<br>\nBut I am not sure how this is applicable to the context I gave initially. This seems to be used only for detecting pointers aliasing I am not sure how this applies to *mut and *const context.</p>",
        "id": 185968306,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1579304323
    },
    {
        "content": "<p>I wrote a good bit over on <a href=\"https://github.com/CAD97/thin-dst/issues/9\" target=\"_blank\" title=\"https://github.com/CAD97/thin-dst/issues/9\">the issue you posted</a>. It is about pointer provenance, but the real issue is that <code>make_mut</code>/<code>make_slice_mut</code> necessarily create references, and going through the references puts</p>",
        "id": 186590601,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1579990011
    },
    {
        "content": "<p>Sorry for the <code>junk</code> dir, it is actually the place where I test things out )</p>",
        "id": 186616839,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580036873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132829\">@Christopher Durham</span>, thank you for the detailed answer! While trying to understand the pointer cast from <code>*const [SliceItem]</code> to <code>NonNull&lt;ThinData&lt;Head, SliceItem&gt;&gt;</code> I cloned your repo and ran <code>cargo build</code>, but it failed:</p>\n<div class=\"codehilite\"><pre><span></span>~/my/junk/thin-dst (master) $ rustc --version\nrustc 1.40.0 (73528e339 2019-12-16)\n~/my/junk/thin-dst (master) $ cargo build\n   Compiling thin-dst v1.0.0 (/home/veetaha/my/junk/thin-dst)\nerror[E0210]: type parameter `Head` must be used as the type parameter for some local type (e.g., `MyStruct&lt;Head&gt;`)\n   --&gt; src/lib.rs:433:6\n    |\n433 | impl&lt;Head, SliceItem&gt; From&lt;ThinArc&lt;Head, SliceItem&gt;&gt; for Arc&lt;ThinData&lt;Head, SliceItem&gt;&gt; {\n    |      ^^^^ type parameter `Head` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n\nerror[E0210]: type parameter `Head` must be used as the type parameter for some local type (e.g., `MyStruct&lt;Head&gt;`)\n   --&gt; src/lib.rs:492:6\n    |\n492 | impl&lt;Head, SliceItem&gt; From&lt;ThinRc&lt;Head, SliceItem&gt;&gt; for Rc&lt;ThinData&lt;Head, SliceItem&gt;&gt; {\n    |      ^^^^ type parameter `Head` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n\nerror[E0210]: type parameter `Head` must be used as the type parameter for some local type (e.g., `MyStruct&lt;Head&gt;`)\n   --&gt; src/lib.rs:574:6\n    |\n574 | impl&lt;Head, SliceItem&gt; From&lt;ThinPtr&lt;Head, SliceItem&gt;&gt; for NonNull&lt;ThinData&lt;Head, SliceItem&gt;&gt; {\n    |      ^^^^ type parameter `Head` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0210`.\nerror: could not compile `thin-dst`.\n</pre></div>",
        "id": 186617175,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580037410
    },
    {
        "content": "<p>Yeah, head has those two impls that only work on beta currently</p>",
        "id": 186623275,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1580047619
    },
    {
        "content": "<p>1.41 adjusts coherence rules a bit so those impls are considered local.</p>",
        "id": 186623328,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1580047708
    }
]