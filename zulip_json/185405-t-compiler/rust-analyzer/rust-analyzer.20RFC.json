[
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> on the topic of the RFC. Here is the <a href=\"https://hackmd.io/NKMNjAYoRE6AP_XRot3z0w?both\" title=\"https://hackmd.io/NKMNjAYoRE6AP_XRot3z0w?both\">current draft</a>. Re-reading it, I think the summary doesn't seem right</p>",
        "id": 194684202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587393627
    },
    {
        "content": "<p>I believe we had discussed a kind of \"transition period\", right</p>",
        "id": 194684280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587393667
    },
    {
        "content": "<p>i.e., the idea was that we are declaring rust-analyzer as the \"official IDE\", but we're going to do the adoption in a few phases, beginning with the simple one of encouraging people to switch and give feedback</p>",
        "id": 194684327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587393694
    },
    {
        "content": "<p>I feel like that is probably a better thing for the summary then what is there <em>now</em></p>",
        "id": 194684361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587393706
    },
    {
        "content": "<p>Yeah, the curent summary is not <em>wrong</em>, but it's not he most relevant thing.</p>",
        "id": 194684532,
        "sender_full_name": "matklad",
        "timestamp": 1587393765
    },
    {
        "content": "<p>I'm reading the rest and will drop a few notes here</p>",
        "id": 194684597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587393784
    },
    {
        "content": "<p>One thing I want to particularly note is that we basically have no plan to adopt save-analysis anymore</p>",
        "id": 194684659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587393814
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/rust-analyzer.20RFC/near/194684280\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/rust-analyzer.20RFC/near/194684280\">said</a>:</p>\n<blockquote>\n<p>I believe we had discussed a kind of \"transition period\", right</p>\n</blockquote>\n<p>ah, good, there is good <a href=\"https://hackmd.io/NKMNjAYoRE6AP_XRot3z0w?both#Timeline-for-transition\" title=\"https://hackmd.io/NKMNjAYoRE6AP_XRot3z0w?both#Timeline-for-transition\">material on that already</a></p>",
        "id": 194684834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587393884
    },
    {
        "content": "<blockquote>\n<p>The experience of installing rust-analyzer for other editors is more varied. The rust-analyzer project only directly supports VSCode.  Other editor plugins are maintained independently.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> is there a link we can drop in here?</p>",
        "id": 194684925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587393933
    },
    {
        "content": "<p>Link to what? other editors?</p>",
        "id": 194685021,
        "sender_full_name": "matklad",
        "timestamp": 1587393977
    },
    {
        "content": "<p>Do you have some part of the rust-analyzer website that lists other extensions</p>",
        "id": 194685044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587393992
    },
    {
        "content": "<p>the <a href=\"https://hackmd.io/NKMNjAYoRE6AP_XRot3z0w?both#Branding-how-to-talk-about-rust-analyzerRLS-going-forward\" title=\"https://hackmd.io/NKMNjAYoRE6AP_XRot3z0w?both#Branding-how-to-talk-about-rust-analyzerRLS-going-forward\">branding section</a> is a bit confusing to me.</p>",
        "id": 194685052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587394002
    },
    {
        "content": "<p>I am fine with keeping the rust-analyzer name.</p>",
        "id": 194685068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587394013
    },
    {
        "content": "<ul>\n<li><a href=\"https://rust-analyzer.github.io/manual.html#vs-code\" title=\"https://rust-analyzer.github.io/manual.html#vs-code\">https://rust-analyzer.github.io/manual.html#vs-code</a></li>\n<li><a href=\"https://rust-analyzer.github.io/manual.html#emacs\" title=\"https://rust-analyzer.github.io/manual.html#emacs\">https://rust-analyzer.github.io/manual.html#emacs</a></li>\n<li><a href=\"https://rust-analyzer.github.io/manual.html#vim\" title=\"https://rust-analyzer.github.io/manual.html#vim\">https://rust-analyzer.github.io/manual.html#vim</a></li>\n</ul>",
        "id": 194685073,
        "sender_full_name": "matklad",
        "timestamp": 1587394017
    },
    {
        "content": "<p>Though the <em>contents</em> of those links admittedly  needs some love</p>",
        "id": 194685130,
        "sender_full_name": "matklad",
        "timestamp": 1587394050
    },
    {
        "content": "<p>I guess <a href=\"https://rust-analyzer.github.io/manual.html#installation\" title=\"https://rust-analyzer.github.io/manual.html#installation\">https://rust-analyzer.github.io/manual.html#installation</a> is probably the 'meta link' I was looking for</p>",
        "id": 194685179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587394068
    },
    {
        "content": "<p>I just wanted to say something like \"See the \\[rust-analyzer manual\\] for more information.\"</p>",
        "id": 194685307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587394098
    },
    {
        "content": "<blockquote>\n<p>the branding section is a bit confusing to me.</p>\n</blockquote>\n<p>uhu. Let's say \"keep rust-analyzer name, at least for the transition period\"?</p>",
        "id": 194685376,
        "sender_full_name": "matklad",
        "timestamp": 1587394130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/rust-analyzer.20RFC/near/194685052\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/rust-analyzer.20RFC/near/194685052\">said</a>:</p>\n<blockquote>\n<p>the <a href=\"https://hackmd.io/NKMNjAYoRE6AP_XRot3z0w?both#Branding-how-to-talk-about-rust-analyzerRLS-going-forward\" title=\"https://hackmd.io/NKMNjAYoRE6AP_XRot3z0w?both#Branding-how-to-talk-about-rust-analyzerRLS-going-forward\">branding section</a> is a bit confusing to me.</p>\n</blockquote>\n<p>to say a bit more, the <a href=\"https://github.com/rust-analyzer\" title=\"https://github.com/rust-analyzer\">rust-analyzer org</a> includes a fair number of repositories.</p>",
        "id": 194685453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587394171
    },
    {
        "content": "<p>(Side note: the thing I worry most about here, that I'm not sure how to think about, is the rust-analyzer opencollective. Obviously there is no \"rustc opencollective\", and the line between the two is going to get blurrier and blurrier. But it feels like a problem we should be trying to address.)</p>",
        "id": 194685639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587394243
    },
    {
        "content": "<p>(see also work towards foundation, although I think that will not necessarily address the whole problem, but let's not get too far into that discussion here.)</p>",
        "id": 194685701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587394275
    },
    {
        "content": "<p>I guess I'd like the branding session to be a bit more concrete :)</p>",
        "id": 194685738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587394291
    },
    {
        "content": "<p>In general, we have been consolidating things under the rust-lang github org, so <em>probably</em> we are going to move all the repositories there, at least eventually?</p>",
        "id": 194685772,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587394309
    },
    {
        "content": "<p>anyway, this might also be something we can hammer out after RFC is opened, in discussions with infra or whatever</p>",
        "id": 194685797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587394322
    },
    {
        "content": "<blockquote>\n<p>In general, we have been consolidating things under the rust-lang github org, so probably we are going to move all the repositories there, at least eventually?</p>\n</blockquote>\n<p>Yup. And maybe even merge the repos into one rust-analyzer monorepo</p>",
        "id": 194685882,
        "sender_full_name": "matklad",
        "timestamp": 1587394355
    },
    {
        "content": "<p>the website, btw, could become <a href=\"http://rust-analyzer.rust-lang.org\" title=\"http://rust-analyzer.rust-lang.org\">rust-analyzer.rust-lang.org</a></p>",
        "id": 194685948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587394387
    },
    {
        "content": "<p>eventually, anyway</p>",
        "id": 194685965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587394393
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> has been reminding me that we don't have to necessarily limit ourselves to <a href=\"http://github.io\" title=\"http://github.io\">github.io</a> domains:)</p>",
        "id": 194685999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587394413
    },
    {
        "content": "<p>Yeah.....</p>\n<p>Hm, this actually is tough, in a sense that we'll accumulate a ton of stale URLs during transition period....</p>",
        "id": 194686049,
        "sender_full_name": "matklad",
        "timestamp": 1587394436
    },
    {
        "content": "<p>say more?</p>",
        "id": 194686163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587394490
    },
    {
        "content": "<p>do you mean if we were to rename rust-analyzer, or do you just mean in the form of \"moving repos\"</p>",
        "id": 194686194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587394504
    },
    {
        "content": "<p>Like, we have a known problem that google search results are plagued by first-edition of the book</p>",
        "id": 194686216,
        "sender_full_name": "matklad",
        "timestamp": 1587394515
    },
    {
        "content": "<p>(the stale URLs <em>are</em> a pain...)</p>",
        "id": 194686218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587394516
    },
    {
        "content": "<p>I had hoped we'd be able to redirect</p>",
        "id": 194686254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587394533
    },
    {
        "content": "<p>with RLS -&gt; rust-analyzer -&gt; unified rustc tool, we'd have a similar problem, unless we decide on the proper place for the docs from the start</p>",
        "id": 194686364,
        "sender_full_name": "matklad",
        "timestamp": 1587394567
    },
    {
        "content": "<p>To clarify, I think that the best path forward is maybe to just accept some (a lot?) of user confusion until the IDE-story crystallizes more.</p>",
        "id": 194686559,
        "sender_full_name": "matklad",
        "timestamp": 1587394653
    },
    {
        "content": "<p>Seems probable</p>",
        "id": 194687001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587394831
    },
    {
        "content": "<p>I think it'd be pretty reasonable to have <code>ide.rust-lang.org</code></p>",
        "id": 194687021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587394840
    },
    {
        "content": "<p>that always contains up-to-date information about our recommended solution</p>",
        "id": 194687051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587394854
    },
    {
        "content": "<p>for use in IDEs</p>",
        "id": 194687058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587394857
    },
    {
        "content": "<p>it's hard to imagine that going stale :)</p>",
        "id": 194687081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587394863
    },
    {
        "content": "<p>it also seems <em>kind of</em> orthogonal from this RFC</p>",
        "id": 194687126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587394881
    },
    {
        "content": "<p>like, work we should do, but it's more of a general \"improve the website\" thing than anything</p>",
        "id": 194687153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587394892
    },
    {
        "content": "<p>I'll list it as a possible \"future step\" or something</p>",
        "id": 194687189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587394905
    },
    {
        "content": "<p>There's another thing on my mind: I've received complains from notable vim users (<span class=\"user-mention silent\" data-user-id=\"222471\">BurntSushi</span> and <span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> ) that rust-anlyzer's slow start up time is a deal breaker.</p>",
        "id": 194687417,
        "sender_full_name": "matklad",
        "timestamp": 1587394992
    },
    {
        "content": "<p>well, not so much a deal breaker, as 'annoying'</p>",
        "id": 194687454,
        "sender_full_name": "simulacrum",
        "timestamp": 1587395009
    },
    {
        "content": "<p>I think it is one for <span class=\"user-mention silent\" data-user-id=\"222471\">BurntSushi</span> , which is an important data point</p>",
        "id": 194687493,
        "sender_full_name": "matklad",
        "timestamp": 1587395030
    },
    {
        "content": "<p>Is this in contrast to the existing RLS?</p>",
        "id": 194687496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587395031
    },
    {
        "content": "<p>Yup</p>",
        "id": 194687507,
        "sender_full_name": "matklad",
        "timestamp": 1587395036
    },
    {
        "content": "<p>vim is certainly a very popular editor</p>",
        "id": 194687510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587395039
    },
    {
        "content": "<p>That does seem important</p>",
        "id": 194687561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587395046
    },
    {
        "content": "<p>(I've never used RLS, so can't comment there. I would say though that at least my vim workflow is <em>usually</em> open for a long time, where I then don't notice it much. But e.g. sitting down in the morning can be painful to wait for startup, especially because I don't really know when to stop waiting)</p>",
        "id": 194687643,
        "sender_full_name": "simulacrum",
        "timestamp": 1587395085
    },
    {
        "content": "<p>The are I think two issues here:</p>\n<ul>\n<li>ra doesn't store anything to disk, so opening a file for the first time entails, eg, parsing the whole of stdlib</li>\n<li>(haven't investigated this very thoroughly) I <em>think</em> vim is \"worse\" than other editors at persisting rust-analyzer process over different files</li>\n</ul>",
        "id": 194687729,
        "sender_full_name": "matklad",
        "timestamp": 1587395120
    },
    {
        "content": "<p>OTOH, node.js based plugin for rust-analyzer for vim seems like it has some momentum behind this: <a href=\"https://github.com/fannheyward/coc-rust-analyzer\" title=\"https://github.com/fannheyward/coc-rust-analyzer\">https://github.com/fannheyward/coc-rust-analyzer</a></p>\n<p>So it's not like nobody can use ra with vim</p>",
        "id": 194688037,
        "sender_full_name": "matklad",
        "timestamp": 1587395255
    },
    {
        "content": "<p>my impression is that it depends on the workflow, but with (old-school) vim it's a pretty normal thing to open a file from the terminal, edit a bit and save and quit to edit something else</p>",
        "id": 194688085,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1587395272
    },
    {
        "content": "<p>Yeah. That was certainly true for me when I used vi in .. oh .. 1996 or so :)</p>",
        "id": 194688445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587395439
    },
    {
        "content": "<p>but I guess my experiences are a bit dated</p>",
        "id": 194688458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587395451
    },
    {
        "content": "<p>/me has fond memories of writing perl in vi on a DEC VAX machine</p>",
        "id": 194688517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587395485
    },
    {
        "content": "<p>How much emoji reactions does Zulip allow on a single comment? :)</p>",
        "id": 194689506,
        "sender_full_name": "bjorn3",
        "timestamp": 1587395810
    },
    {
        "content": "<p>Regarding startup performance: should we focus on LSIF?</p>",
        "id": 194690275,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1587396107
    },
    {
        "content": "<p>Or I guess... has that become more urgent?</p>",
        "id": 194690425,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1587396158
    },
    {
        "content": "<p>I am pretty sure that LSIF is not a solution here. LSIF for <strong>our</strong> use case would be like a worse version of safe analysis, which we are migrating from :D</p>",
        "id": 194690542,
        "sender_full_name": "matklad",
        "timestamp": 1587396205
    },
    {
        "content": "<p>There was a discussion about using save-analysis until we have something better in place</p>",
        "id": 194690610,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587396230
    },
    {
        "content": "<blockquote>\n<p>Talk to fuchsia + facebook folks to figure out current state</p>\n</blockquote>\n<p>Why is fuchsia or facebook related to rust-analyzer?</p>",
        "id": 194692058,
        "sender_full_name": "bjorn3",
        "timestamp": 1587396749
    },
    {
        "content": "<p>They are folks who use rust-analyzer in a huge monorepo setup, so they can clarify if rust-analyzer works for their use-case. And their use-case is important, as it is basically \"worst-case\" for IDE support</p>",
        "id": 194692265,
        "sender_full_name": "matklad",
        "timestamp": 1587396828
    },
    {
        "content": "<p>I am using this in <a href=\"https://github.com/clap-rs/clap\" title=\"https://github.com/clap-rs/clap\">https://github.com/clap-rs/clap</a> which is a monorepo. Works good. But another monorepo at <a href=\"https://github.com/pksunkara/reign\" title=\"https://github.com/pksunkara/reign\">https://github.com/pksunkara/reign</a> doesn't work as good because some crates use only some features from some crates and the check/build command is different for many crates</p>",
        "id": 194692809,
        "sender_full_name": "pksunkara",
        "timestamp": 1587397008
    },
    {
        "content": "<p>What is the story about Macro in the RFC ? So would we use rustc macro code eventually ? Or it would be another library-ification ?</p>",
        "id": 194693119,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587397146
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> I would think that yes, we'd love to library-ify macro expansion as well. Starting with shared token-tree structure between rustc and rust-analyzer.</p>",
        "id": 194693261,
        "sender_full_name": "matklad",
        "timestamp": 1587397216
    },
    {
        "content": "<p>Separetly from that, wasm-based proc macros is also somehting we need to handle....</p>",
        "id": 194693322,
        "sender_full_name": "matklad",
        "timestamp": 1587397245
    },
    {
        "content": "<p>I think we have to figure out how hygiene works in RA first to confirm our token-tree structure is actually solid. Right ?</p>",
        "id": 194693950,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587397521
    },
    {
        "content": "<p>Right, I think after proc macros, hygine is probably the single non-technical unresolved question left in rust-analyzer</p>",
        "id": 194694173,
        "sender_full_name": "matklad",
        "timestamp": 1587397601
    },
    {
        "content": "<p>The two technical questions are:</p>\n<ul>\n<li>persisting analysis to disk</li>\n<li>right API for VFS</li>\n</ul>",
        "id": 194694212,
        "sender_full_name": "matklad",
        "timestamp": 1587397621
    },
    {
        "content": "<p>local imports? <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 194694414,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1587397694
    },
    {
        "content": "<p>Sort-of? I feel that for local imports the design is more-or-less clear, and what is needed is \"implementation\" work, where the first step of \"implementation\" is creating a chalk-like strong bounday for name-reoslution IR</p>",
        "id": 194694702,
        "sender_full_name": "matklad",
        "timestamp": 1587397819
    },
    {
        "content": "<p>ok, yeah, having written that, I agree that name res is another unresolved thing. It always is.</p>",
        "id": 194694752,
        "sender_full_name": "matklad",
        "timestamp": 1587397843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> ok, I think the RFC is basically ready now</p>",
        "id": 194736196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587418272
    },
    {
        "content": "<p>I'm sorry, I got distracted for a while</p>",
        "id": 194736216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587418278
    },
    {
        "content": "<p>by life</p>",
        "id": 194736236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587418286
    },
    {
        "content": "<p>That's a very reasonable reason to be distracted!</p>",
        "id": 194736335,
        "sender_full_name": "matklad",
        "timestamp": 1587418333
    },
    {
        "content": "<p>oh hmm there are two sections on library-ification that seem to be about the same</p>",
        "id": 194736354,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587418347
    },
    {
        "content": "<p>I'll merge them</p>",
        "id": 194736411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587418394
    },
    {
        "content": "<p>ok, I'm going to post</p>",
        "id": 194736806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587418625
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 194736854,
        "sender_full_name": "matklad",
        "timestamp": 1587418653
    },
    {
        "content": "<p>Done: <a href=\"https://github.com/rust-lang/rfcs/pull/2912\" title=\"https://github.com/rust-lang/rfcs/pull/2912\">https://github.com/rust-lang/rfcs/pull/2912</a></p>",
        "id": 194737807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587419275
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> thank you for putting the work into finishing the thing!</p>",
        "id": 194737942,
        "sender_full_name": "matklad",
        "timestamp": 1587419359
    },
    {
        "content": "<p>I messed on privmsg, but <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> probably better to discuss here (also cc <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span>):</p>\n<p>I wrote a <a href=\"https://gist.github.com/nikomatsakis/c31e74c279025aefcdc485bab05a7fdf/\" title=\"https://gist.github.com/nikomatsakis/c31e74c279025aefcdc485bab05a7fdf/\">summary comment</a> that covers the RFC thread thus far. I wanted to call attention to the point about \"full conformance\" -- do you agree with what I wrote there?</p>\n<p>I'll probably post this soon, though I am thinking of rewriting the <a href=\"https://gist.github.com/nikomatsakis/c31e74c279025aefcdc485bab05a7fdf#support-for-linting-compilation-without-saving-and-other-specific-features-or-misfeatures\" title=\"https://gist.github.com/nikomatsakis/c31e74c279025aefcdc485bab05a7fdf#support-for-linting-compilation-without-saving-and-other-specific-features-or-misfeatures\">\"Feature parity\" section</a> to include a few more details. The TL;DR being \"we are explicitly not requiring feature parity because we want to use feedback period to figure out which features are more important. some things are harder to build in the rust-analyzer infra without more refactoring, and we would have to create 'facade code' to throw away, and we don't want to do that\" (referencing save-analysis, primarily).</p>",
        "id": 195550991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588074176
    },
    {
        "content": "<p>In any case, just wanted to be sure you all were comfortable with those statements.</p>",
        "id": 195551020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588074197
    },
    {
        "content": "<p>In particular, I think that the main differences from a feature parity perspective are </p>\n<ul>\n<li>support for unsaved files (rust virtual file system) for error checking, linting</li>\n<li>support for precise, global find-all-uses and rename (relies on save-analysis)</li>\n</ul>",
        "id": 195551134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588074254
    },
    {
        "content": "<p>are there others?</p>",
        "id": 195551137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588074256
    },
    {
        "content": "<blockquote>\n<p>because they do not support snippet-based completions, but rust-analyzer is sending them anyway.</p>\n</blockquote>\n<p>That's already fixed in the latest (yesterday's ) release. I've found a neat way to implement compile-time checked honoring of snippet capability (via zero-sized, khm, capability token) and just couldn't resist implementing it right away :D</p>",
        "id": 195551829,
        "sender_full_name": "matklad",
        "timestamp": 1588074787
    },
    {
        "content": "<blockquote>\n<p>I do not however think that rust-analyzer necessarily needs to support older features, except where mandated by the protocol (but it should respect clients that don't support new ones)</p>\n</blockquote>\n<p>I agree with this statement, but it is also somewhat vacuous, as the protocol more or less mandates support for older features. But I still think it's a good idea to have this stated explicitely.</p>",
        "id": 195552403,
        "sender_full_name": "matklad",
        "timestamp": 1588075123
    },
    {
        "content": "<p>that was something I wanted to check on...</p>",
        "id": 195553028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588075473
    },
    {
        "content": "<p>...one other \"feature\", I guess, is caching and faster startup</p>",
        "id": 195553063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588075492
    },
    {
        "content": "<blockquote>\n<p>I think this is well-motivated, but it's worth clarifying the stability story here</p>\n</blockquote>\n<p>This is a good question. I think stability story should be different from compiler, in that using \"unstable\" features should require only an opt-in in the settings (ie, unstable rust-analyzer features should be available on the stable toolchain). I don't think there's ossification danger we need to protect from here, and making things more useful seems good.</p>",
        "id": 195553087,
        "sender_full_name": "matklad",
        "timestamp": 1588075509
    },
    {
        "content": "<p>hmm, I am not sure I had even expected <em>that</em> much</p>",
        "id": 195553133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588075539
    },
    {
        "content": "<blockquote>\n<p>...one other \"feature\", I guess, is caching and faster startup</p>\n</blockquote>\n<p>offtopic, I've recently realised that we should make rust-analyzer || before we implement persistance.</p>",
        "id": 195553141,
        "sender_full_name": "matklad",
        "timestamp": 1588075542
    },
    {
        "content": "<p>I was concerned about things like \"emacs-lsp\" supporting r-a extensions, and then some details of the extension change</p>",
        "id": 195553228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588075579
    },
    {
        "content": "<p>but there is of course an analogous concern with an older vscode client</p>",
        "id": 195553248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588075594
    },
    {
        "content": "<p>not sure how that is managed</p>",
        "id": 195553255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588075599
    },
    {
        "content": "<p>(maybe the client just updates itself?)</p>",
        "id": 195553287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588075613
    },
    {
        "content": "<p>So there's a bidirectional feature-detection from both client and server side in the protocol. If we implement this \"properly\" (and not just assume that client can do everything, as is the case today), we should be able to roll-out experimental features only if client agrees that they support it.</p>",
        "id": 195553466,
        "sender_full_name": "matklad",
        "timestamp": 1588075689
    },
    {
        "content": "<p>But it's true that if we, say, change the way we do inlay hints, non-vs-code clients would need some catch up time.</p>",
        "id": 195553516,
        "sender_full_name": "matklad",
        "timestamp": 1588075721
    },
    {
        "content": "<p>(though, in practice, folks seem to fix stuff relatively quickly for emacs at least)</p>",
        "id": 195553540,
        "sender_full_name": "matklad",
        "timestamp": 1588075741
    },
    {
        "content": "<blockquote>\n<p>support for precise, global find-all-uses and rename (relies on save-analysis)</p>\n<p>are there others?</p>\n</blockquote>\n<ul>\n<li>Goto definition is also sometimes wrong. </li>\n<li>Higher latency for the first request due to the lack of on-disk caching</li>\n</ul>",
        "id": 195554545,
        "sender_full_name": "matklad",
        "timestamp": 1588076314
    },
    {
        "content": "<p>Other than that, <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 195554568,
        "sender_full_name": "matklad",
        "timestamp": 1588076328
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> regarding extensions to the protocol, perhaps it suffices to say that \"rust-analyzer should clarify the stability of each of the extensions it supports and document their status\", something like that?</p>",
        "id": 195555530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588076871
    },
    {
        "content": "<p>in theory, backwards incompatible changes to extensions could just use a new protocol name, I suppose (and the older one would not be supported)</p>",
        "id": 195555613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588076892
    },
    {
        "content": "<p>I guess the other question is how much opt-in is required on the client side to access said features</p>",
        "id": 195555634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588076910
    },
    {
        "content": "<p>I think that's kind of out of scope for the RFC itself personally, except to note that we should work it out</p>",
        "id": 195555652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588076921
    },
    {
        "content": "<p>I guess I feel like it's not a semver violation if (e.g.) we decided to disable the type hints or other features</p>",
        "id": 195555729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588076961
    },
    {
        "content": "<p>I guess I'll just copy your text which was basically <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 195555932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588077064
    },
    {
        "content": "<p>Yeah, \"clarify &amp; document\" sounds good to me!</p>\n<blockquote>\n<p>I guess I feel like it's not a semver violation if (e.g.) we decided to disable the type hints or other features</p>\n</blockquote>\n<p>yup, this is what I am getting at.</p>",
        "id": 195555951,
        "sender_full_name": "matklad",
        "timestamp": 1588077078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> does this sound ok for rfc text</p>\n<p>Furthermore, rust-analyzer currently supports some extensions to the core LSP protocol, to support<br>\nfeatures that the core LSP does not yet support. Some examples include:</p>\n<ul>\n<li>extend selection (<a href=\"https://github.com/microsoft/language-server-protocol/issues/613\" title=\"https://github.com/microsoft/language-server-protocol/issues/613\">https://github.com/microsoft/language-server-protocol/issues/613</a>)</li>\n<li>syntax highlighting (<a href=\"https://github.com/microsoft/vscode-languageserver-node/issues/576\" title=\"https://github.com/microsoft/vscode-languageserver-node/issues/576\">https://github.com/microsoft/vscode-languageserver-node/issues/576</a>)</li>\n<li>running specific tests (<a href=\"https://github.com/microsoft/language-server-protocol/issues/944\" title=\"https://github.com/microsoft/language-server-protocol/issues/944\">https://github.com/microsoft/language-server-protocol/issues/944</a>)</li>\n<li>inlay hints (<a href=\"https://github.com/microsoft/vscode-languageserver-node/pull/609\" title=\"https://github.com/microsoft/vscode-languageserver-node/pull/609\">https://github.com/microsoft/vscode-languageserver-node/pull/609</a>)</li>\n</ul>\n<p>rust-analyzer will document the status and stability of these<br>\nextensions. Further, disruptive or particulrly unstable extensions<br>\nwill be made opt-in (via client settings) until they are suitable for<br>\nwider use. However, we do not consider it a \"semver violation\" to<br>\nremove support for extensions if they don't seem to be working out, as<br>\nthe LSP protocol already permits a negotiation between client and<br>\nserver with respect to which extensions are supported.</p>",
        "id": 195556336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588077286
    },
    {
        "content": "<p>Almost! The factual mistake is that the first two <em>started</em> as extensions, but are now fully suported by the LSP</p>",
        "id": 195556452,
        "sender_full_name": "matklad",
        "timestamp": 1588077356
    },
    {
        "content": "<p>I was wondering about that, ok</p>",
        "id": 195556508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588077368
    },
    {
        "content": "<p>I guess s/currently supports/sometimes implements/ would work for past &amp; present</p>",
        "id": 195556562,
        "sender_full_name": "matklad",
        "timestamp": 1588077407
    },
    {
        "content": "<p>updated to</p>\n<p>Furthermore, rust-analyzer currently supports some extensions to the<br>\ncore LSP protocol, to support features that the core LSP does not yet<br>\nsupport. Some examples include:</p>\n<ul>\n<li>running specific tests (<a href=\"https://github.com/microsoft/language-server-protocol/issues/944\" title=\"https://github.com/microsoft/language-server-protocol/issues/944\">https://github.com/microsoft/language-server-protocol/issues/944</a>)</li>\n<li>inlay hints (<a href=\"https://github.com/microsoft/vscode-languageserver-node/pull/609\" title=\"https://github.com/microsoft/vscode-languageserver-node/pull/609\">https://github.com/microsoft/vscode-languageserver-node/pull/609</a>)</li>\n</ul>\n<p>In some cases, these extensions go on to become part of the standard<br>\nprotocol, as happened with these two extensions:</p>\n<ul>\n<li>extend selection (<a href=\"https://github.com/microsoft/language-server-protocol/issues/613\" title=\"https://github.com/microsoft/language-server-protocol/issues/613\">https://github.com/microsoft/language-server-protocol/issues/613</a>)</li>\n<li>syntax highlighting (<a href=\"https://github.com/microsoft/vscode-languageserver-node/issues/576\" title=\"https://github.com/microsoft/vscode-languageserver-node/issues/576\">https://github.com/microsoft/vscode-languageserver-node/issues/576</a>)</li>\n</ul>\n<p>rust-analyzer will document the status and stability of these<br>\nextensions. Further, disruptive or unstable extensions will be made<br>\nopt-in (via client settings) until they are suitable for wider<br>\nuse. However, we do not consider it a \"semver violation\" to remove<br>\nsupport for extensions if they don't seem to be working out, as the<br>\nLSP protocol already permits a negotiation between client and server<br>\nwith respect to which extensions are supported.</p>",
        "id": 195556587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588077420
    },
    {
        "content": "<p>I think it's worth noting that some got adopted</p>",
        "id": 195556598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588077425
    },
    {
        "content": "<p>Yup, perfect!</p>",
        "id": 195556627,
        "sender_full_name": "matklad",
        "timestamp": 1588077441
    },
    {
        "content": "<p>OK</p>",
        "id": 195556668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588077470
    },
    {
        "content": "<p>that's a lot of \"supports\" in the first sentence though ;)</p>",
        "id": 195556781,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1588077521
    },
    {
        "content": "<p>OK, I updated the <a href=\"https://gist.github.com/nikomatsakis/c31e74c279025aefcdc485bab05a7fdf#feature-parity\" title=\"https://gist.github.com/nikomatsakis/c31e74c279025aefcdc485bab05a7fdf#feature-parity\">feature parity</a> section of the comment and I plan to post</p>",
        "id": 195561248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588079589
    },
    {
        "content": "<p>posted comment</p>",
        "id": 195562545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588080115
    },
    {
        "content": "<p>Huh, weren't FCPs supposed to last 7 days? <a href=\"https://github.com/rust-lang/rfcs/pull/2912#issuecomment-628013908\">https://github.com/rust-lang/rfcs/pull/2912#issuecomment-628013908</a></p>",
        "id": 198474406,
        "sender_full_name": "Laurențiu",
        "timestamp": 1590170539
    },
    {
        "content": "<p>14 days AFAIK</p>",
        "id": 198475840,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1590171366
    },
    {
        "content": "<p>10 days is what the bot says, I think</p>",
        "id": 198475922,
        "sender_full_name": "simulacrum",
        "timestamp": 1590171413
    },
    {
        "content": "<blockquote>\n<p>The FCP lasts ten calendar days, so that it is open for at least 5 business days.</p>\n</blockquote>",
        "id": 198476274,
        "sender_full_name": "Laurențiu",
        "timestamp": 1590171578
    },
    {
        "content": "<p>Yeah, it must have changed. But some RFCs still seem to get merged after 7 days.</p>",
        "id": 198476289,
        "sender_full_name": "Laurențiu",
        "timestamp": 1590171584
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcbot-rs/blob/c02bfcf5263c9a76751cd33e510e57434c07ef7b/src/github/nag.rs#L454\">https://github.com/rust-lang/rfcbot-rs/blob/c02bfcf5263c9a76751cd33e510e57434c07ef7b/src/github/nag.rs#L454</a></p>",
        "id": 198478994,
        "sender_full_name": "bjorn3",
        "timestamp": 1590172837
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/pull/2912\">https://github.com/rust-lang/rfcs/pull/2912</a> is still not merged, though</p>",
        "id": 199009478,
        "sender_full_name": "Laurențiu",
        "timestamp": 1590665148
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^ <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 199171490,
        "sender_full_name": "Laurențiu",
        "timestamp": 1590766716
    },
    {
        "content": "<p>Yes, I'll merge it...</p>",
        "id": 199187357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590774230
    }
]