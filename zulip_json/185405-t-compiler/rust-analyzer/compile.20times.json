[
    {
        "content": "<p>Hello all, I want to work on <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/2801\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/2801\">https://github.com/rust-analyzer/rust-analyzer/issues/2801</a>, but every time I make a change it takes 5-10 minutes to compile when I run <code>cargo test</code>. Is there way to run tests for just the parser without having to compile any of the crates depending on it?</p>",
        "id": 185437719,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1578841505
    },
    {
        "content": "<p><code>cargo test -p ra_syntax</code></p>",
        "id": 185437767,
        "sender_full_name": "matklad",
        "timestamp": 1578841573
    },
    {
        "content": "<p>That doesn't seem to be running all the tests I want ...</p>\n<div class=\"codehilite\"><pre><span></span>(bash@lubuntu-thinkpad) ~/.../rust-analyzer/crates ▶️ cargo test -p ra_parser\n    Finished test [unoptimized] target(s) in 0.30s\n     Running /home/joshua/Documents/Programming/rust/rust-analyzer/target/debug/deps/ra_parser-37542a5f1551f7a0\n\nrunning 1 test\ntest token_set::token_set_works_for_tokens ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n</pre></div>",
        "id": 185437779,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1578841625
    },
    {
        "content": "<p>oh you said <code>ra_syntax</code>, whoops. Let me try that.</p>",
        "id": 185437788,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1578841658
    },
    {
        "content": "<p>ok great! <code>cargo xtask codegen &amp;&amp; cargo test -p ra_syntax</code> did exactly what I wanted :)</p>",
        "id": 185437866,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1578841780
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Just a little reminder: The Attr node should be placed inside the element node. :</p>\n<p><a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Attributes.20in.20elements.20of.20array.20and.20args\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Attributes.20in.20elements.20of.20array.20and.20args\">https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Attributes.20in.20elements.20of.20array.20and.20args</a></p>",
        "id": 185438269,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1578842577
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> Just a little reminder: The Attr node should be placed inside the element node. :</p>\n<p><a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Attributes.20in.20elements.20of.20array.20and.20args\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Attributes.20in.20elements.20of.20array.20and.20args\">https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Attributes.20in.20elements.20of.20array.20and.20args</a></p>\n</blockquote>\n<p>I'm not sure what you mean. This is what my current code looks like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">arg_list</span><span class=\"p\">(</span><span class=\"n\">p</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Parser</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">at</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"sc\">&#39;(&#39;</span><span class=\"p\">]));</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">bump</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"sc\">&#39;(&#39;</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">at</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"sc\">&#39;)&#39;</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">at</span><span class=\"p\">(</span><span class=\"n\">EOF</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">        </span><span class=\"n\">attributes</span>::<span class=\"n\">outer_attributes</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">at_ts</span><span class=\"p\">(</span><span class=\"n\">EXPR_FIRST</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s\">&quot;expected expression&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"k\">break</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Is there something else I need to change (other than adding tests)?</p>",
        "id": 185438332,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1578842712
    },
    {
        "content": "<p>The output node should be something like this:</p>\n<div class=\"codehilite\"><pre><span></span>ARG_LIST@[63; 224)\n  L_PAREN@[63; 64) &quot;(&quot;\n  WHITESPACE@[64; 73) &quot;\\n        &quot;\n  LITERAL@[73; 101)\n    ATTR@[157; 176)     &lt;------------------------------\n      POUND@[157; 158) &quot;#&quot;\n      L_BRACK@[158; 159) &quot;[&quot;\n      PATH@[159; 164)\n        PATH_SEGMENT@[159; 164)\n          NAME_REF@[159; 164)\n            IDENT@[159; 164) &quot;allow&quot;\n      TOKEN_TREE@[164; 175)\n        L_PAREN@[164; 165) &quot;(&quot;\n        IDENT@[165; 174) &quot;dead_code&quot;\n        R_PAREN@[174; 175) &quot;)&quot;\n      R_BRACK@[175; 176) &quot;]&quot;\n    WHITESPACE@[176; 185) &quot;\\n        &quot;\n    LITERAL@[185; 217)\n      FLOAT_NUMBER@[185; 217) &quot;1.797_693_134_862_315 ...&quot;\n    COMMA@[217; 218) &quot;,&quot;\n    WHITESPACE@[218; 223) &quot;\\n    &quot;\n    R_PAREN@[223; 224) &quot;)&quot;\n    STRING@[73; 101) &quot;\\&quot;1.797693134862315708 ...&quot;\n  COMMA@[101; 102) &quot;,&quot;\n  WHITESPACE@[102; 111) &quot;\\n        &quot;\nSEMI@[224; 225) &quot;;&quot;\n</pre></div>",
        "id": 185438569,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1578843183
    },
    {
        "content": "<p>So the attr should go _inside_ the literal, not above it? How would I do that?</p>\n<p>Currently I have it above: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/2813/files#diff-e1a74cafc36f91710ff085ff4aae3fffR69\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/2813/files#diff-e1a74cafc36f91710ff085ff4aae3fffR69\">https://github.com/rust-analyzer/rust-analyzer/pull/2813/files#diff-e1a74cafc36f91710ff085ff4aae3fffR69</a></p>",
        "id": 185438828,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1578843672
    },
    {
        "content": "<p>I added a new <code>ARG</code> node, since I don't know ahead of time what kind of expression the argument is and there doesn't seem to be a catch-all <code>Expr</code> type. Let me know if I should change that.</p>",
        "id": 185439430,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1578844743
    },
    {
        "content": "<p>I was finding how to do it and I can't think of a simple approach too. Maybe we could add a helper function in <code>CompletedMarker</code> for that  insertion. ? <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span></p>",
        "id": 185440208,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1578846258
    },
    {
        "content": "<p>What would the helper function do? Add the node both below and above, like you had?</p>\n<div class=\"codehilite\"><pre><span></span>LITERAL\n  ATTR\n  LITERAL\n</pre></div>\n\n\n<p>That seems a little inelegant to me ...</p>",
        "id": 185440410,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1578846681
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>LITERA\n    ATTR\n    FLOAT_NUMBER\n</pre></div>",
        "id": 185440452,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1578846735
    },
    {
        "content": "<p>Another option is passing down a flag to indicate we should expect an attribute node inside expr, but it is quite complicated.</p>",
        "id": 185440816,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1578847461
    },
    {
        "content": "<p>It looks like rustc plans to eventually add attributes on expressions: <a href=\"https://github.com/rust-lang/rust/issues/15701\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/15701\">https://github.com/rust-lang/rust/issues/15701</a><br>\nWould it be easier to parse the attribute in <code>expr()</code> and check later that it's in a valid position?</p>",
        "id": 185441535,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1578848704
    },
    {
        "content": "<p>I think attr on stmt is already handled.</p>\n<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/d0b52e5d84b8c371b74d4d5d43f45be91f103d12/crates/ra_parser/src/grammar/expressions.rs#L61\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/d0b52e5d84b8c371b74d4d5d43f45be91f103d12/crates/ra_parser/src/grammar/expressions.rs#L61\">https://github.com/rust-analyzer/rust-analyzer/blob/d0b52e5d84b8c371b74d4d5d43f45be91f103d12/crates/ra_parser/src/grammar/expressions.rs#L61</a></p>",
        "id": 185441879,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1578849304
    },
    {
        "content": "<p>it looks like libsyntax allows it on any expression, not just statements: <a href=\"https://github.com/rust-lang/rust/blob/441519536c8bd138e8c651743249acd6814747a1/src/libsyntax/parse/parser.rs#L2733\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/441519536c8bd138e8c651743249acd6814747a1/src/libsyntax/parse/parser.rs#L2733\">https://github.com/rust-lang/rust/blob/441519536c8bd138e8c651743249acd6814747a1/src/libsyntax/parse/parser.rs#L2733</a></p>",
        "id": 185442320,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1578850095
    },
    {
        "content": "<p>note how there's no special handling for function arguments</p>",
        "id": 185442324,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1578850108
    },
    {
        "content": "<p>here's the actually attribute handling: <a href=\"https://github.com/rust-lang/rust/blob/441519536c8bd138e8c651743249acd6814747a1/src/libsyntax/parse/parser.rs#L2841\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/441519536c8bd138e8c651743249acd6814747a1/src/libsyntax/parse/parser.rs#L2841\">https://github.com/rust-lang/rust/blob/441519536c8bd138e8c651743249acd6814747a1/src/libsyntax/parse/parser.rs#L2841</a></p>",
        "id": 185442454,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1578850307
    },
    {
        "content": "<p>Not that we _need_ it, but this is kinda' cute: <a href=\"https://tomforb.es/managing-rust-bloat-with-github-actions/\">https://tomforb.es/managing-rust-bloat-with-github-actions/</a></p>",
        "id": 202005234,
        "sender_full_name": "Laurențiu",
        "timestamp": 1593108941
    },
    {
        "content": "<p>Has anyone else's compile times blown up over the last 24 hours?</p>",
        "id": 218729657,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1607017712
    },
    {
        "content": "<p>from scratch or incremental?</p>",
        "id": 218730490,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607018073
    },
    {
        "content": "<blockquote>\n<p>release [optimized] target(s) in 57.03s</p>\n</blockquote>\n<p>Maybe just by a couple of seconds (some old nightly, clean build)</p>",
        "id": 218733846,
        "sender_full_name": "Laurențiu",
        "timestamp": 1607019600
    },
    {
        "content": "<p>Okay thanks. It must be something on my system. Both scratch and incremental.</p>",
        "id": 218735580,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1607020420
    },
    {
        "content": "<p>I've been sitting on <a href=\"/user_uploads/4715/dt3WPReirqJRRgs9WUYemWAj/image.png\">image.png</a> for a few minutes</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/dt3WPReirqJRRgs9WUYemWAj/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/dt3WPReirqJRRgs9WUYemWAj/image.png\"></a></div>",
        "id": 218736135,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1607020688
    },
    {
        "content": "<p>Nightly?</p>",
        "id": 218736631,
        "sender_full_name": "Laurențiu",
        "timestamp": 1607020955
    },
    {
        "content": "<p>rust-analyzer from master. stable compiler</p>",
        "id": 218736714,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1607021007
    },
    {
        "content": "<p>Oh</p>",
        "id": 218736774,
        "sender_full_name": "Laurențiu",
        "timestamp": 1607021035
    },
    {
        "content": "<p>I'll chalk it up to something weird on my work machine</p>",
        "id": 218736833,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1607021054
    },
    {
        "content": "<p>See if I can reproduce it on my personal laptop later.</p>",
        "id": 218736862,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1607021070
    }
]