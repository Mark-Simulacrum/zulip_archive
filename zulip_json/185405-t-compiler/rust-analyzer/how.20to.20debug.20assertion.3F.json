[
    {
        "content": "<p>I’m hitting <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir_ty/src/lib.rs#L524\">this assertion</a> with left=1 and right=2 (in a moderately complex codebase, of course, that is not yet public). Any ideas on how to proceed?</p>",
        "id": 199042910,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1590681904
    },
    {
        "content": "<p>The first thing to do would be to summon <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> :P</p>\n<p>Then, run <code>rust-analyzer analysis-stats .</code>  (batch analysis) to check if it reproduces the problem reliably</p>",
        "id": 199043198,
        "sender_full_name": "matklad",
        "timestamp": 1590682058
    },
    {
        "content": "<p>if it does, the next thing to do would be to minize the test case</p>",
        "id": 199043217,
        "sender_full_name": "matklad",
        "timestamp": 1590682072
    },
    {
        "content": "<p>ah, so how do I run rust-analyzer again? (now on Linux … )</p>",
        "id": 199043589,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1590682241
    },
    {
        "content": "<p>yeah, that. if analysis-stats crashes, you should be able to see the last function it was analyzing, and then you can run it with <code>-o that_function</code> to only analyze one function, which should be much faster and still crash</p>",
        "id": 199043622,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1590682266
    },
    {
        "content": "<p>you should be able to run it from wherever VSCode downloaded it (someone who knows about VSCode can probably tell us the path)</p>",
        "id": 199043704,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1590682318
    },
    {
        "content": "<p>hmm, looking …</p>",
        "id": 199043759,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1590682331
    },
    {
        "content": "<p><a href=\"https://rust-analyzer.github.io/manual.html#vs-code\">https://rust-analyzer.github.io/manual.html#vs-code</a></p>",
        "id": 199043843,
        "sender_full_name": "Laurențiu",
        "timestamp": 1590682392
    },
    {
        "content": "<p><code>~/.config/Code/User/globalStorage/matklad.rust-analyzer/rust-analyzer-linux </code></p>",
        "id": 199043869,
        "sender_full_name": "matklad",
        "timestamp": 1590682407
    },
    {
        "content": "<p>Don't we rename it to <code>rust-analyzer</code>? <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 199043929,
        "sender_full_name": "Laurențiu",
        "timestamp": 1590682435
    },
    {
        "content": "<p>there is no <code>~/.config/Code</code> … I’m running this via Code server remote</p>",
        "id": 199044026,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1590682468
    },
    {
        "content": "<p>you could also just download the binary from github and put it anywhere though</p>",
        "id": 199044039,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1590682477
    },
    {
        "content": "<p>(downloaded the binary because I couldn’t find it on that host)</p>\n<div class=\"codehilite\"><pre><span></span><code>Database loaded, 251 roots, 376.796722ms\nCrates in this dir: 1\nTotal modules found: 33\nTotal declarations: 478\nTotal functions: 319\nItem Collection: 14.546484276s, 0b allocated 0b resident\n50/319 15% processing: util::flow::distinctthread &#39;main&#39; panicked at &#39;assertion failed: `(left == right)`\n  left: `1`,\n right: `2`&#39;, crates/ra_hir_ty/src/lib.rs:524:9\n</code></pre></div>\n\n\n<p>so I guess that points me to the <code>distinct</code> method I happen to have on my <code>Flow</code> in the <code>flow</code> module, right?</p>",
        "id": 199044563,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1590682738
    },
    {
        "content": "<p>yes. so <code>-o util::flow::distinct</code> should also crash</p>",
        "id": 199044615,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1590682764
    },
    {
        "content": "<p>the thing is I have multiple <code>distinct</code> methods on different types in that module</p>",
        "id": 199044764,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1590682818
    },
    {
        "content": "<p>hmm yeah that's not ideal, you could try giving them unique names? unless it changes the name resolution inside the function it should probably still reproduce the crash</p>",
        "id": 199044857,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1590682863
    },
    {
        "content": "<p>yes, that crashes as well; I have several errors (am in the middle of a refactoring), will see if fixing the errors removes this crash</p>",
        "id": 199044958,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1590682916
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> So I have a trait <code>Flow&lt;'a, T&gt;</code> and I added another type parameter to it. Several methods needed updated type signatures, and after I’d done those the crash went away.</p>",
        "id": 199046392,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1590683576
    },
    {
        "content": "<p>now I still have many errors related to this change in other modules, but those don’t crash the analyzer</p>",
        "id": 199046477,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1590683622
    },
    {
        "content": "<p>hm yeah it's probably not as straightforward as having a trait and using it with the wrong number of type parameters</p>",
        "id": 199046516,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1590683641
    },
    {
        "content": "<p>not sure whether you are being ironic</p>",
        "id": 199046639,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1590683692
    },
    {
        "content": "<p>of course I need to fix my type errors, but the analyzer crashing makes that experience quite a bit more annoying; the primary reason to use rust-analyzer is that it so awesomely supports refactorings</p>",
        "id": 199046716,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1590683745
    },
    {
        "content": "<p>I'm not being ironic, I'm pretty sure this has to be a bit more complicated</p>",
        "id": 199046885,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1590683822
    },
    {
        "content": "<p>yeah, this is a bug we need to fix, doesn't matter whether there are type errors or not</p>",
        "id": 199046941,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1590683845
    },
    {
        "content": "<p>or, maybe not complicated, but some edge case...</p>",
        "id": 199047424,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1590684100
    },
    {
        "content": "<p>Ah, yes, makes sense (I don’t know you well enough yet, so had to ask). I’m making such changes often and this was the first one to crash; perhaps the lifetime parameter plays into it.</p>",
        "id": 199047998,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1590684367
    },
    {
        "content": "<p>I’ll try to minimize later, now I need to finish that one feature (as always)</p>",
        "id": 199048144,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1590684449
    }
]