[
    {
        "content": "<p>According to some memory profiles I took a while ago, attributes stored in <code>ItemTree</code>s might take up significant space.</p>\n<p>I suspect that this is in part due to token trees not using interning or well-known symbols (which would eliminate ~all copies of builtin attribute names).</p>\n<p>What would be the right approach to improving this? It seems to me that using <code>hir_def::Name</code> instead of <code>SmolStr</code>s in <code>tt::Ident</code> isn't semantically right. rustc just has <code>Symbol</code>s, which are interned strings without much semantic attached to them.</p>",
        "id": 240122767,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621896464
    },
    {
        "content": "<p>Also I'm wondering if we could do something about all those duplicated documentation strings here</p>",
        "id": 240122832,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621896492
    },
    {
        "content": "<p>Interning <code>AttrInput</code> alone saves over 10 MB already, probably because there are a lot of similar-enough attributes like <code>#[cfg(test)]</code></p>",
        "id": 240122956,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621896582
    },
    {
        "content": "<p>One fun thing to try would be to replace </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">path</span>: <span class=\"nc\">Interned</span><span class=\"o\">&lt;</span><span class=\"n\">ModPath</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">input</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">AttrInput</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n</code></pre></div>\n<p>with</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">raw_text</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and see how that affects memory usage. I don't have a good intuition about the difference in memory usage between a string and a token tree. I suspect strings might be significantly more memory-efficient.</p>",
        "id": 240161415,
        "sender_full_name": "matklad",
        "timestamp": 1621934366
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink  [he/him]</span> what are you using for heap-profiling, mastiff? Do you think it makes sense to add an xtask for that? Or maybe some docs to the dev/README? I'd love to take a look at profiles myself, but I want to re-use your hard-earned knowledge if possible :)</p>",
        "id": 240162633,
        "sender_full_name": "matklad",
        "timestamp": 1621935214
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/cNoRaPCFtlWeIJOHH8hCz6W3/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/cNoRaPCFtlWeIJOHH8hCz6W3/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/cNoRaPCFtlWeIJOHH8hCz6W3/image.png\"></a></div>",
        "id": 240172958,
        "sender_full_name": "matklad",
        "timestamp": 1621942006
    },
    {
        "content": "<p>new hack to quickly estimate the impact of sizer of things</p>",
        "id": 240172980,
        "sender_full_name": "matklad",
        "timestamp": 1621942024
    },
    {
        "content": "<p>This changes <code>Item Collection:     1.48s, 15ginstr, 73mb</code> to <code>Item Collection:     1.45s, 15ginstr, 78mb</code> for rowan, so RawAttrs themselves are 5-10% of total memory</p>",
        "id": 240173106,
        "sender_full_name": "matklad",
        "timestamp": 1621942107
    },
    {
        "content": "<p>which does sound like a lot</p>",
        "id": 240173121,
        "sender_full_name": "matklad",
        "timestamp": 1621942115
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Attributes.20are.20large/near/240162633\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> what are you using for heap-profiling, mastiff? Do you think it makes sense to add an xtask for that? Or maybe some docs to the dev/README? I'd love to take a look at profiles myself, but I want to re-use your hard-earned knowledge if possible :)</p>\n</blockquote>\n<p>nowadays I mostly use heaptrack since it's a lot faster than valgrind</p>",
        "id": 240173154,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621942143
    }
]