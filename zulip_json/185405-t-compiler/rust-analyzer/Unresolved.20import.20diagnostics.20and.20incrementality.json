[
    {
        "content": "<p>I'm trying to make the <code>typing_inside_a_function_should_not_invalidate_def_map</code> test fail by putting an unresolved import at the end of <code>lib.rs</code>, but it's still passing.</p>\n<p>Since that diagnostic contains a <code>SyntaxNodePtr</code>, I would expect that to fail though. Does anyone know what's going on?</p>",
        "id": 217893062,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606315462
    },
    {
        "content": "<p>Related issue: I'm trying to make name resolution collect and report errors from macro expansion, but this makes incrementality worse, since every macro call in item position now recomputes the CrateDefMap when changed (since the errors might have changed).</p>",
        "id": 217908751,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606322366
    },
    {
        "content": "<p>Not sure if that's a big issue, but it seems unfortunate</p>",
        "id": 217908785,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606322384
    },
    {
        "content": "<p>not sure I understand the problem -- before that, changing the macro call might already have changed the items, which would also require a CrateDefMap recalculation, so what's different?</p>",
        "id": 217910485,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1606323178
    },
    {
        "content": "<blockquote>\n<p>Since that diagnostic contains a SyntaxNodePtr, I would expect that to fail though. Does anyone know what's going on?</p>\n</blockquote>\n<p>the actual diagnostic returned by the query contains a <code>FileAstId</code>, not a <code>SyntaxNodePtr</code>, which is an index that doesn't change that easily. I think at least that's the answer</p>",
        "id": 217910891,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1606323357
    },
    {
        "content": "<p>it gets turned into a SyntaxNodePtr while collecting diagnostics later</p>",
        "id": 217910993,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1606323388
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Unresolved.20import.20diagnostics.20and.20incrementality/near/217910485\">said</a>:</p>\n<blockquote>\n<p>not sure I understand the problem -- before that, changing the macro call might already have changed the items, which would also require a CrateDefMap recalculation, so what's different?</p>\n</blockquote>\n<p>Previously nameres only fetched the item tree, which doesn't necessarily change if the macro change only affects item bodies</p>",
        "id": 217911090,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606323429
    },
    {
        "content": "<p>The <code>CrateDefMap</code> stores a list of <code>DefDiagnostic</code>s, which contains <code>SyntaxNodePtr</code>s for the <code>UnconfiguredCode</code> case here: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/9b512f8569dda32fe2d12114adeed2f612d0190f/crates/hir_def/src/nameres.rs#L303\">https://github.com/rust-analyzer/rust-analyzer/blob/9b512f8569dda32fe2d12114adeed2f612d0190f/crates/hir_def/src/nameres.rs#L303</a></p>",
        "id": 217911334,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606323517
    },
    {
        "content": "<p>ok, that might be bad? maybe it should be an <code>AstId</code>, like for the other diagnostics</p>",
        "id": 217911461,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1606323574
    },
    {
        "content": "<p>but you were talking about <code>UnresolvedImport</code> in the beginning, right?</p>",
        "id": 217911570,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1606323607
    },
    {
        "content": "<p>Oh, right, sorry</p>",
        "id": 217911649,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606323634
    },
    {
        "content": "<p>I meant only <code>UnconfiguredCode</code></p>",
        "id": 217911670,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606323643
    },
    {
        "content": "<p>So that explains why I haven't been able to trigger this :D</p>",
        "id": 217911690,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606323653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Unresolved.20import.20diagnostics.20and.20incrementality/near/217911090\">said</a>:</p>\n<blockquote>\n<p>Previously nameres only fetched the item tree, which doesn't necessarily change if the macro change only affects item bodies</p>\n</blockquote>\n<p>ok. If it now just fetches the item tree + errors, that shouldn't have much of an effect on incrementality, right? Only if errors actually change.</p>\n<p>It might be possible to collect the errors completely separately though (i.e. nameres uses a projection query that just gets the item tree, without errors, and there's a separate query that collects all the errors from macro expansions. the complicated part would be knowing which macro expansions to query)</p>",
        "id": 217911994,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1606323768
    },
    {
        "content": "<p>If it now fetches the whole expansion + errors, that would be a problem, and there should probably be a query that turns that into item tree + errors</p>",
        "id": 217912363,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1606323926
    },
    {
        "content": "<p>hmm, yeah, that sounds like it should work</p>",
        "id": 217912540,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606323996
    },
    {
        "content": "<p>thanks!</p>",
        "id": 217912562,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606324006
    },
    {
        "content": "<p>I ended up going with a simpler firewall query that turns the macro expansion result into just the expansion error <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/6645\">https://github.com/rust-analyzer/rust-analyzer/pull/6645</a></p>",
        "id": 218032172,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606418170
    },
    {
        "content": "<p>ah yeah, there's no need to combine the two</p>",
        "id": 218032510,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1606418539
    }
]