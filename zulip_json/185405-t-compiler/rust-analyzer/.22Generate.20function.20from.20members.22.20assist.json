[
    {
        "content": "<p>What do you think about an assist that works on enums with all tuple variants that generates a function if all variants have that function? for example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">enum</span> <span class=\"nc\">Baz</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Bar</span><span class=\"p\">(</span><span class=\"n\">Bar</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Baz</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// match on the variant and choose the right function</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I find this pattern kinda common and it would be nice to have a way to do this automatically. Although im torn on whether this should just not be available if a variant doesnt have the function or if it should insert a todo</p>",
        "id": 243596714,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624409978
    },
    {
        "content": "<p>Patching <code>fill_match_arms</code> assist to just do this would be slick! I could've use it yesterday</p>",
        "id": 243626295,
        "sender_full_name": "matklad",
        "timestamp": 1624440275
    },
    {
        "content": "<p>There: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/9379/files#diff-9ded74602cbdce03cc0b20f094e733658a7b43d14ffe0f9167bc79a0851e7e53R876\">https://github.com/rust-analyzer/rust-analyzer/pull/9379/files#diff-9ded74602cbdce03cc0b20f094e733658a7b43d14ffe0f9167bc79a0851e7e53R876</a></p>",
        "id": 243626349,
        "sender_full_name": "matklad",
        "timestamp": 1624440319
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> i feel like this would be weird behavior for fill match arms, no? I think an explicit assist would be better, plus, you dont have to write the function def</p>",
        "id": 243694192,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624473251
    },
    {
        "content": "<p>But im fine with either</p>",
        "id": 243694218,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624473262
    },
    {
        "content": "<p>i think adding this to fill_match_arms would be much more obscure than an explicit assist and many people wouldnt realize u can do this</p>",
        "id": 243694560,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624473442
    },
    {
        "content": "<p>I actually think the opposite -- people will use fill match arms (becasue that's how you'd do it manually), and discover this feature. With an explicit assist, you need to know that it actually exist, and, given that this is a relatively rarely applicable things, I doubt many people will discover this .</p>",
        "id": 243694878,
        "sender_full_name": "matklad",
        "timestamp": 1624473600
    },
    {
        "content": "<p>Although, we can have both!</p>",
        "id": 243694924,
        "sender_full_name": "matklad",
        "timestamp": 1624473606
    },
    {
        "content": "<p>Yeah having both and a shared impl would actually be pretty helpful</p>",
        "id": 243694978,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624473630
    },
    {
        "content": "<p>the shared impl just needs to make the match then the assist needs to fetch the function and put the match inside</p>",
        "id": 243695035,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624473658
    },
    {
        "content": "<p>speaking of that, does RA have an equivalent of quote!? like is there an easy way to make a function then slap the match inside?</p>",
        "id": 243695337,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624473789
    },
    {
        "content": "<p>or is the best way to manually put it inside the body using the ast def</p>",
        "id": 243695360,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624473802
    },
    {
        "content": "<p>No quote yet, youâ€™ll need to go via ast::make api. Fill-match-arms assist might be a good example</p>",
        "id": 243712118,
        "sender_full_name": "matklad",
        "timestamp": 1624481950
    }
]