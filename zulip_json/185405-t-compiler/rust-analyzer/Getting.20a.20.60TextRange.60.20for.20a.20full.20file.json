[
    {
        "content": "<p>How can I get the full range for a file?</p>",
        "id": 278280492,
        "sender_full_name": "Laurențiu",
        "timestamp": 1649411416
    },
    {
        "content": "<p><code>sema.parse(file_id).syntax().text_range()</code>, if you have no semantics just <code>db.parse</code> works as well</p>",
        "id": 278286642,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1649415058
    },
    {
        "content": "<p>That seems a bit round-about..</p>",
        "id": 278286723,
        "sender_full_name": "Laurențiu",
        "timestamp": 1649415122
    },
    {
        "content": "<p>And it's also used in the test suite, maybe I should just leave it optional</p>",
        "id": 278286770,
        "sender_full_name": "Laurențiu",
        "timestamp": 1649415148
    },
    {
        "content": "<p>Maybe. There is no need for us to cater our non-lsp server API around the LSP API to be fair.</p>",
        "id": 278287159,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1649415391
    },
    {
        "content": "<p>It's slightly ugly. We pass in <code>(FileId, Option&lt;FileRange&gt;)</code> so the file id is usually twice</p>",
        "id": 278287357,
        "sender_full_name": "Laurențiu",
        "timestamp": 1649415520
    },
    {
        "content": "<p>We can also pass a <code>(FileId, Option&lt;TextRange&gt;)</code> instead then no?</p>",
        "id": 278287395,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1649415547
    },
    {
        "content": "<p>But it's less type-safe than ideally since you can pass in the wrong file id by mistake (but I doubt that's going to be a problem in practice).</p>",
        "id": 278287533,
        "sender_full_name": "Laurențiu",
        "timestamp": 1649415612
    },
    {
        "content": "<p>Third way: <code>TextRange::new(TextSize::from(0), TextSize::from(ra_fixture.len() as u32 - 1))</code></p>",
        "id": 278287808,
        "sender_full_name": "Laurențiu",
        "timestamp": 1649415753
    },
    {
        "content": "<p>I mean you can always construct the <code>FileRange</code> in an invalid way as well so I wouldn't see that as a problem here</p>",
        "id": 278287846,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1649415783
    },
    {
        "content": "<p>Technically you could also pass <code>TextRange</code> spanning <code>0</code> to <code>!0u32</code>, since the code in inlay hints only checks for range inclusion so nothing would go wrong with that.</p>",
        "id": 278287895,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1649415837
    },
    {
        "content": "<p>I suppose I can leave the range optional, like before</p>",
        "id": 278287974,
        "sender_full_name": "Laurențiu",
        "timestamp": 1649415867
    }
]