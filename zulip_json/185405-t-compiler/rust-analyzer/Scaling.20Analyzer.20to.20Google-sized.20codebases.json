[
    {
        "content": "<p>I've recently watched the talk about clangd (<a href=\"https://www.youtube.com/watch?v=5HIyAXj1YNQ\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=5HIyAXj1YNQ\">https://www.youtube.com/watch?v=5HIyAXj1YNQ</a>), and it's significantly different from other IDE talks in that it places emphasis on working with behemoth codebases. I don't think we need to solve  this problem right now (getting precise completions for a single file with traits is much more important), but it's something to keep in mind.</p>\n<p>The trick they use is to split IDE into \"analyze the current translation unit\" and \"analyzer the whole workspace\" bits. Analyze TU \"just\" runs clang-frontend to get completions for methods, etc. Analyze workspace uses offline, potentially remote indices. </p>\n<p>In Rust, I fear we might get into trouble with just the first bit. In C++, because of header files, it should be pretty easy to analyzer only \"interface\" of the dependencies, skipping cpp files altogether. In Rust, we don't have header files, so kinda need to analyzer the whole transitive closure of code. </p>\n<p>It might be cool to introduce a notion of \"crate interface file\" (not expressible in the surface syntax) so that we can break dependency chain. I imagine a reified \"public interface of the crate\" will be useful for public-private dependencies as well .</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"5HIyAXj1YNQ\" href=\"https://www.youtube.com/watch?v=5HIyAXj1YNQ\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=5HIyAXj1YNQ\"><img src=\"https://i.ytimg.com/vi/5HIyAXj1YNQ/default.jpg\"></a></div>",
        "id": 158875724,
        "sender_full_name": "matklad",
        "timestamp": 1550577738
    },
    {
        "content": "<p>Yeah, I think saving &amp; loading the item map etc. would actually make sense, already to avoid parsing all of std on every startup. The compiled crates from rustc are something like that, aren't they? Though we'd need a more stable format, of course.</p>\n<p>And I feel like any big project will be split into many small crates, so this might already be enough.</p>",
        "id": 158886461,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1550587381
    },
    {
        "content": "<p>The problem with item-map is that it contains all of the private items as well.  And splitting into crates does not fundamentally change the picture: you still have to process the transitive closure of reachable code. </p>\n<p>In (non-templated) C++ headers the situation is different: you can use tricks like pimpl to make sure that you don't even have to look at the implementation code. Moreover, the impl can change freely without affecting the header.</p>\n<p>I guess we can do similar with the item-map setup, if we add a <code>public API</code> projection query.</p>",
        "id": 158887371,
        "sender_full_name": "matklad",
        "timestamp": 1550587944
    },
    {
        "content": "<p>we would need the private items to provide a \"item is private\" diagnostic instead of \"item not found\" though, especially if we want to have an assist that turns it public for local crates, right? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 158889034,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1550589079
    },
    {
        "content": "<p>Good point! I think it woudn't be too bad to say \"item not found\" for completely external crates, but doing things <em>differently</em> for local and remote crates seems hard.</p>\n<p>And, given that item-map lacks item bodies, perhaps I am trying to solve a non-existing problem? Like, if you want to <strong>link</strong> the resulting library/binary, than you need to be able to process everything (including bodies) on a single machine.</p>",
        "id": 158889484,
        "sender_full_name": "matklad",
        "timestamp": 1550589394
    },
    {
        "content": "<p>do we currently have statistics about the memory usage of the item maps? I don't think so, right?</p>",
        "id": 158889990,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1550589849
    },
    {
        "content": "<p>Yeah, we don't have it, but shouldn't be too hard to add</p>",
        "id": 158890083,
        "sender_full_name": "matklad",
        "timestamp": 1550589957
    },
    {
        "content": "<p><a href=\"https://github.com/Aeledfyr/deepsize\" target=\"_blank\" title=\"https://github.com/Aeledfyr/deepsize\">https://github.com/Aeledfyr/deepsize</a> or heap_size_of could be useful</p>",
        "id": 158890182,
        "sender_full_name": "matklad",
        "timestamp": 1550590066
    },
    {
        "content": "<p>I feel like (a) this is often the role that nrc was citing for save analysis but (b) it seems like this would be achieved by having a \"outer frontier\" of query results that we can preserve from crates and things (without having to preserve all the detailed work needed to reproduce that frontier).  In other words, I'd really like to express this idea in terms of <strong>queries</strong></p>",
        "id": 158903959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550600129
    },
    {
        "content": "<blockquote>\n<p>In Rust, I fear we might get into trouble with just the first bit. In C++, because of header files, it should be pretty easy to analyzer only \"interface\" of the dependencies, skipping cpp files altogether. In Rust, we don't have header files, so kinda need to analyzer the whole transitive closure of code. </p>\n<p>It might be cool to introduce a notion of \"crate interface file\" (not expressible in the surface syntax) so that we can break dependency chain. I imagine a reified \"public interface of the crate\" will be useful for public-private dependencies as well .</p>\n</blockquote>\n<p>Another option is doing a two-phase compilation, first outlining the API and later compiling the bodies.  See this presentation by Twitter where they're exploring this in an experimental compiler for Scala: <a href=\"https://www.youtube.com/watch?v=8SnIBkJXD8I\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=8SnIBkJXD8I\">https://www.youtube.com/watch?v=8SnIBkJXD8I</a>.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"8SnIBkJXD8I\" href=\"https://www.youtube.com/watch?v=8SnIBkJXD8I\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=8SnIBkJXD8I\"><img src=\"https://i.ytimg.com/vi/8SnIBkJXD8I/default.jpg\"></a></div>",
        "id": 158963965,
        "sender_full_name": "Dale Wijnand",
        "timestamp": 1550658577
    },
    {
        "content": "<p>This two-phase setup basically falls out from the query system, at least if we set things up correctly -- but it's a good thing for us to pay attention to!</p>",
        "id": 158967877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550663361
    },
    {
        "content": "<p>OK, cool! <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 158970599,
        "sender_full_name": "Dale Wijnand",
        "timestamp": 1550666308
    }
]