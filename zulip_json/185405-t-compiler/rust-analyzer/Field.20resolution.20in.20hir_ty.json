[
    {
        "content": "<p>I'm looking at </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"sd\">/// For each field in record literal, records the field it resolves to.</span>\n<span class=\"w\">    </span><span class=\"n\">record_field_resolutions</span>: <span class=\"nc\">FxHashMap</span><span class=\"o\">&lt;</span><span class=\"n\">ExprId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FieldId</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n</code></pre></div>\n<p>in <code>InferenceResult</code> and I'm not sure why this is stored in the inference result. Don't we know the full set of fields when we know the struct or enum variant that is being constructed?</p>",
        "id": 233335771,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617721633
    },
    {
        "content": "<p>hmm. resolving the variant itself also currently happens during inference, but for both I think there's currently nothing that really requires inference</p>",
        "id": 233336604,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1617721818
    },
    {
        "content": "<p>ah although, not sure if associated types need to be resolved there? we don't do that currently, but there's a fixme there</p>",
        "id": 233336766,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1617721853
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7a862a22ff0344b0613ca0c163e2a2e8\">yeah...</a></p>",
        "id": 233337247,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1617721959
    },
    {
        "content": "<p>yeah, I was expecting that part to happen in hir_ty</p>",
        "id": 233338832,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617722342
    },
    {
        "content": "<p>but not resolving individual fields</p>",
        "id": 233338865,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617722355
    },
    {
        "content": "<p>we could instead change that map to record the <code>VariantId</code> for each <code>Expr::RecordLit</code></p>",
        "id": 233339119,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617722441
    },
    {
        "content": "<p>that should slightly reduce memory usage and lets me play around with how we represent field shorthand syntax</p>",
        "id": 233339166,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617722463
    },
    {
        "content": "<p>oh, yeah ok, that should be fine</p>",
        "id": 233339379,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1617722536
    },
    {
        "content": "<p>oh wait that's already stored</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"sd\">/// For each struct literal, records the variant it resolves to.</span>\n<span class=\"w\">    </span><span class=\"n\">variant_resolutions</span>: <span class=\"nc\">FxHashMap</span><span class=\"o\">&lt;</span><span class=\"n\">ExprOrPatId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">VariantId</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 233339841,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617722685
    },
    {
        "content": "<p>opened <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/8376\">https://github.com/rust-analyzer/rust-analyzer/pull/8376</a> to remove it</p>",
        "id": 233345479,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617724794
    },
    {
        "content": "<p>I wonder if we should remove <code>record_pat_field_resolutions</code> too</p>",
        "id": 233345504,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617724802
    },
    {
        "content": "<p>that would make sense then I think</p>",
        "id": 233347464,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1617725543
    },
    {
        "content": "<p>though I guess I just turned O(1) lookup into O(n) search over all fields, I kinda expect that to become a problem for people that use structs with thousands of fields</p>",
        "id": 233347603,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617725600
    },
    {
        "content": "<p>huh</p>",
        "id": 233348724,
        "sender_full_name": "matklad",
        "timestamp": 1617726066
    },
    {
        "content": "<p>something regressed <code>benchmark_syntax_highlighting_long_struct</code> a bunch</p>",
        "id": 233348747,
        "sender_full_name": "matklad",
        "timestamp": 1617726078
    },
    {
        "content": "<p>1000 fields, yeah, that'd do it</p>",
        "id": 233348979,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617726178
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>19:21:34|~/projects/rust-analyzer|HEAD⚡*\nλ git rev-parse HEAD\n61f15b72ac52c23148038b3867198597b345e2f6\n\n19:21:38|~/projects/rust-analyzer|HEAD⚡*\nλ cargo test -q --package ide --lib -- syntax_highlighting::tests::benchmark_syntax_highlighting_long_struct --exact --nocapture\n\nrunning 1 test\nsyntax highlighting long struct: 904.13ms, 4161minstr\n.\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 437 filtered out; finished in 0.93s\n\n19:21:55|~/projects/rust-analyzer|HEAD✓\nλ git switch master\nPrevious HEAD position was 61f15b72a Add parsing benchmark\nSwitched to branch &#39;master&#39;\nYour branch is up to date with &#39;upstream/master&#39;.\n\n19:21:56|~/projects/rust-analyzer|master✓\nλ git rev-parse HEAD\n7dd7017547c83bb3d33a785047e6da0a1464c0ad\n\n19:22:00|~/projects/rust-analyzer|master✓\nλ cargo test -q --package ide --lib -- syntax_highlighting::tests::benchmark_syntax_highlighting_long_struct --exact --nocapture\n\nrunning 1 test\nsyntax highlighting long struct: 34.23s, 116ginstr\n.\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 525 filtered out; finished in 34.27s\n</code></pre></div>",
        "id": 233349001,
        "sender_full_name": "matklad",
        "timestamp": 1617726192
    },
    {
        "content": "<p>so this does need to be cached, but <code>InferenceResult</code> is the wrong location for that</p>",
        "id": 233349071,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617726230
    },
    {
        "content": "<p>I wonder if that was me actually..... I remember touching something about fields not so long ago. I don't think <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink  [he/him]</span> PR is the culprit though.</p>",
        "id": 233349102,
        "sender_full_name": "matklad",
        "timestamp": 1617726243
    },
    {
        "content": "<p>oh okay, I thought this <em>just</em> happened</p>",
        "id": 233349159,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617726258
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8377\">https://github.com/rust-analyzer/rust-analyzer/issues/8377</a></p>",
        "id": 233349329,
        "sender_full_name": "matklad",
        "timestamp": 1617726315
    },
    {
        "content": "<p>I didn't bisect this properly,  it might have happend just now? I am out of my quant for rust-analyzer for today, won't be able to come back to this until the next week. <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink  [he/him]</span> would you like to take a look?</p>",
        "id": 233349488,
        "sender_full_name": "matklad",
        "timestamp": 1617726376
    },
    {
        "content": "<p>38.18s before my PR, 39.81s after, I guess that didn't cause it</p>",
        "id": 233349952,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617726576
    },
    {
        "content": "<p>900ms after <a href=\"https://github.com/rust-analyzer/rust-analyzer/commit/f7156cb0aeaba8fe32c381a2d676b35d2c86f46f\">https://github.com/rust-analyzer/rust-analyzer/commit/f7156cb0aeaba8fe32c381a2d676b35d2c86f46f</a> so it isn't me either :P</p>",
        "id": 233350198,
        "sender_full_name": "matklad",
        "timestamp": 1617726679
    },
    {
        "content": "<p>Hmm, I don't understand how <a href=\"https://github.com/rust-analyzer/rust-analyzer/commit/636de3c709a7c86a1d3a870dc5dc3566310e9d92\">https://github.com/rust-analyzer/rust-analyzer/commit/636de3c709a7c86a1d3a870dc5dc3566310e9d92</a> has caused this. It must be because of the doc comments on the 1000 fields, but after that commit we still use <code>field_attrs</code> to cache them, just like before.</p>",
        "id": 233364255,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617732848
    },
    {
        "content": "<p><code>rowan::cursor::NodeData::next_sibling_or_token</code> is pretty high up in the profile, around 14%</p>",
        "id": 233367332,
        "sender_full_name": "Laurențiu",
        "timestamp": 1617734094
    },
    {
        "content": "<p>oh, we do call <code>source_map</code> from that benchmark</p>",
        "id": 233369524,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617734977
    },
    {
        "content": "<p>so we end up calling <code>field.parent.child_source()</code> for every field, which is O(n²)</p>",
        "id": 233369779,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617735055
    },
    {
        "content": "<p>ah, and before that commit I think we never even computed it for fields at all</p>",
        "id": 233370303,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617735278
    },
    {
        "content": "<p>ah, no, that's not true, we did</p>",
        "id": 233370423,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617735332
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/8384\">https://github.com/rust-analyzer/rust-analyzer/pull/8384</a> -- a draft of the test for this.</p>",
        "id": 233371150,
        "sender_full_name": "matklad",
        "timestamp": 1617735639
    },
    {
        "content": "<p>We are now using machine learning in rust-analyzer (linear regression is clearly ML)</p>",
        "id": 233371213,
        "sender_full_name": "matklad",
        "timestamp": 1617735661
    },
    {
        "content": "<p>I guess to fix the issue we can use the same trick as <code>variants_attrs</code> and <code>fields_attrs</code>, just for the source map</p>",
        "id": 233374259,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617737008
    },
    {
        "content": "<p>After that it seems to finish in 2.52s (now in O(n log m) due to <code>AstPtr</code> conversion)</p>",
        "id": 233381303,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617740073
    },
    {
        "content": "<p>(I'd love to see these benchmarks tracked in the metrics)</p>",
        "id": 233383691,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617741159
    },
    {
        "content": "<p>linear plot-twist: I am now reviewing this code: <a href=\"https://github.com/near/nearcore/pull/4231/files#r618276633\">https://github.com/near/nearcore/pull/4231/files#r618276633</a></p>",
        "id": 235658874,
        "sender_full_name": "matklad",
        "timestamp": 1619090618
    }
]