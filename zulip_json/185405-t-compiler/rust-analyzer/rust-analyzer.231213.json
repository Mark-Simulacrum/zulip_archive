[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> I've looked more at 1213 and I must say I don't entirely like the bifurcation behind compound and atomic tokens</p>",
        "id": 164388099,
        "sender_full_name": "matklad",
        "timestamp": 1556459259
    },
    {
        "content": "<p>I wonder if we, with a more thorough refactoring, can make a better API?</p>",
        "id": 164388103,
        "sender_full_name": "matklad",
        "timestamp": 1556459275
    },
    {
        "content": "<p>let me scketch what I have in mind...</p>",
        "id": 164388153,
        "sender_full_name": "matklad",
        "timestamp": 1556459286
    },
    {
        "content": "<p>What we do it is in  the <code>Parser</code> level</p>",
        "id": 164388176,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1556459326
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>    #[inline(always)] // to make sure compund case is compiled away when `kind` is compile time constant\n    pub(crate) fn at(&amp;self, kind: SyntaxKind) -&gt; bool {\n        match kind {\n            DOTDOT =&gt; self.at2(DOT, DOT),\n            DOTDOTDOT =&gt; ...\n            _ =&gt; self.current() == kind\n        }\n    }\n\n    // Private impl details\n    fn at2(&amp;self, kind1: SyntaxKind, kind2: SyntaxKind) -&gt; bool {\n        self.current2() == Some((kind1, kind2))\n    }\n</pre></div>",
        "id": 164388276,
        "sender_full_name": "matklad",
        "timestamp": 1556459459
    },
    {
        "content": "<p>Could we do something like this?</p>",
        "id": 164388286,
        "sender_full_name": "matklad",
        "timestamp": 1556459467
    },
    {
        "content": "<p>That is, the grammar impl will just ask <code>if at(DOTDOT)</code>, without thinking too much if it is a compound token</p>",
        "id": 164388301,
        "sender_full_name": "matklad",
        "timestamp": 1556459505
    },
    {
        "content": "<p>And the same trick could be applied to <code>at_ts</code>: we include multi-char tokens in tokensets, and internally we run special logic for multibyte bits of ts</p>",
        "id": 164388370,
        "sender_full_name": "matklad",
        "timestamp": 1556459578
    },
    {
        "content": "<p>Yes of course, but it is not so efficient if we concern it,  as we have to check it every time. If it is not an concern, we can do it too. But we have to do it in all at, nth, eat methods</p>",
        "id": 164388381,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1556459599
    },
    {
        "content": "<p>I <em>think</em> it could be just as efficient</p>",
        "id": 164388386,
        "sender_full_name": "matklad",
        "timestamp": 1556459620
    },
    {
        "content": "<p>the trick is that <code>kind</code> is almost always a compile-time constant</p>",
        "id": 164388389,
        "sender_full_name": "matklad",
        "timestamp": 1556459632
    },
    {
        "content": "<p>So, if llvm inlines stuff, it will compile away the <code>match kind</code> branch</p>",
        "id": 164388436,
        "sender_full_name": "matklad",
        "timestamp": 1556459652
    },
    {
        "content": "<p>The only place where abstraction will leak are <code>match p.current()</code> branches in parser</p>",
        "id": 164388461,
        "sender_full_name": "matklad",
        "timestamp": 1556459718
    },
    {
        "content": "<p>instead of </p>\n<div class=\"codehilite\"><pre><span></span>match p.current() {\n    DOTDOT =&gt;\n}\n</pre></div>\n\n\n<p>You'll have to write</p>\n<div class=\"codehilite\"><pre><span></span>match p.current() {\n    DOT if p.at(DOTDOT) =&gt;\n}\n</pre></div>\n\n\n<p>But that presumably is ok?</p>",
        "id": 164388504,
        "sender_full_name": "matklad",
        "timestamp": 1556459763
    },
    {
        "content": "<p>That's okay.</p>",
        "id": 164388535,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1556459855
    },
    {
        "content": "<p>Let me try your method first, and let see if there is any edge case :)</p>",
        "id": 164388591,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1556459910
    },
    {
        "content": "<p>Yeah, there could be edge cases especially around lookahead, but maybe lookahead can be restricted to atomic tokens?</p>",
        "id": 164388611,
        "sender_full_name": "matklad",
        "timestamp": 1556459952
    },
    {
        "content": "<p>To check performance, one can use <code>cargo run --release -p ra_cli -- parse --no-dump  &lt; some-big-file.rs</code>. A good candidate for <code>some-big.file.rs</code> is te parser from rust-lang/rust repo</p>",
        "id": 164388682,
        "sender_full_name": "matklad",
        "timestamp": 1556460026
    },
    {
        "content": "<blockquote>\n<p>but maybe lookahead can be restricted to atomic tokens</p>\n</blockquote>\n<p>It seem to be not work, but i did manage to handle it in <code>Parser::nth</code> , I found that we already have the <code>dollar</code> handling code in it, so ... maybe we should not be too worry about performance right now <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 164394291,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1556467346
    }
]