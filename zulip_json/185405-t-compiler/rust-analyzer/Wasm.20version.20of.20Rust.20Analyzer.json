[
    {
        "content": "<p>Hello,</p>\n<p>I'm experimenting with the WASM version of Rust Analyzer: <a href=\"https://github.com/rust-analyzer/rust-analyzer-wasm\">https://github.com/rust-analyzer/rust-analyzer-wasm</a></p>\n<p>As far as I can see, it can only receive the content of a single file but not of a full crate. This is since it is only implementing ra_ap_ide::Analysis and not ra_ap_ide::AnalysisHost? If I want it to analyze a complete crate, resolving dependencies from a Cargo.toml file, I assume that I've to add AnalysisHost, create a Change and use AnalysisHost.apply_change, so that I can finally create a Analysis instance from AnaylsisHost for analysis of the current file? </p>\n<p>Did someone ever try something like this? Any hints on some sample code? I'm an experienced Typescript dev, but relatively new to Rust. I appreciate any help!</p>\n<p>Best,<br>\nAchim</p>",
        "id": 240943375,
        "sender_full_name": "Achim Schneider",
        "timestamp": 1622554914
    },
    {
        "content": "<p>I don't think it's about <code>AnalysisHost</code> vs. <code>Analysis</code>; you need an <code>AnalysisHost</code> to get an <code>Analysis</code>, <code>from_single_file</code> just creates one internally. The issue is getting a project model, since you can't run cargo. You could just look at what <code>from_single_file</code> does and add more files and even a more complicated <code>CrateGraph</code> if you want</p>",
        "id": 240944206,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622555303
    },
    {
        "content": "<p>I see that the WASM demo actually recreates the analysis whenever the code changes; I don't think that's really the intended way to do it, not sure why it's doing that</p>",
        "id": 240944433,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622555428
    },
    {
        "content": "<p>usually you have to hold on to the <code>AnalysisHost</code> and then apply changes to the files as you get them</p>",
        "id": 240944486,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622555462
    },
    {
        "content": "<p>also, <a href=\"https://rust-analyzer.github.io/rust-analyzer/src/ide/lib.rs.html#201-227\">Analysis::from_single_file</a> has a doc comment that isn't a doc comment...</p>",
        "id": 240944766,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622555578
    },
    {
        "content": "<p>The comment on <code>impl Analysis</code> can also be turned into a doc comment.</p>",
        "id": 240944908,
        "sender_full_name": "bjorn3",
        "timestamp": 1622555630
    },
    {
        "content": "<p>that one is more a notice for people changing the code though, so it kind of makes sense to not make it a doc comment</p>",
        "id": 240945032,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622555674
    },
    {
        "content": "<p>Yes, I was also thinking that it is a very preliminary version!</p>\n<p>But investigating the from_single_file method in the Rust Analyzer sourcecode is already a big help. That's the sample creation of an AnalysisHost from some file, that I was searching for. Will try to understand and use it. Thanks!</p>",
        "id": 240945104,
        "sender_full_name": "Achim Schneider",
        "timestamp": 1622555709
    },
    {
        "content": "<p>Is there any sample code available which converts a Cargo.toml file into a CrateGraph that I can pass to AnalysisHost. </p>\n<p>I found this guide: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/\">https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/</a>, but I think it's outdated.</p>",
        "id": 241128439,
        "sender_full_name": "Achim Schneider",
        "timestamp": 1622628267
    },
    {
        "content": "<p>you need Cargo to do that. Then it's basically <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/dbdfeeeff91b5e42d8687df09dda1d29f99b34f8/crates/rust-analyzer/src/cli/load_cargo.rs#L35-L128\">this</a></p>",
        "id": 241128708,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622628479
    },
    {
        "content": "<p>but you're not going to be able to do it in wasm, unless you compile Cargo to wasm (which may be possible? I don't know how well-abstracted the I/O parts are in Cargo)</p>",
        "id": 241128801,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622628524
    },
    {
        "content": "<p>The I/O parts are not abstracted at all. It would probably compile for wasm32-wasi though.</p>",
        "id": 241128885,
        "sender_full_name": "bjorn3",
        "timestamp": 1622628599
    },
    {
        "content": "<p>But if most of the files I want to edit online are using the same dependencies, then I could create the CrateGraph once and parse it as a JSON to the Wasm version of Rust Analyzer?</p>",
        "id": 241130092,
        "sender_full_name": "Achim Schneider",
        "timestamp": 1622629393
    },
    {
        "content": "<p>that should be possible. Note that you still need to somehow bundle and provide the code for all those dependencies</p>",
        "id": 241131093,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622630022
    },
    {
        "content": "<p>including the standard library</p>",
        "id": 241131106,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622630034
    },
    {
        "content": "<p>or I guess you could also retrieve it</p>",
        "id": 241131163,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622630054
    },
    {
        "content": "<p>There seems to be even an implementation of a .json format for CrateGraphs: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/dbdfeeeff91b5e42d8687df09dda1d29f99b34f8/crates/project_model/src/project_json.rs\">https://github.com/rust-analyzer/rust-analyzer/blob/dbdfeeeff91b5e42d8687df09dda1d29f99b34f8/crates/project_model/src/project_json.rs</a>. But within the code I can only find functions which are converting json to CrateGraphs. Do you have any advice of how I can get such a rust-project.json file from either a crate.graph or Cargo.toml file / cargo metadata output?</p>",
        "id": 241383363,
        "sender_full_name": "Achim Schneider",
        "timestamp": 1622723400
    },
    {
        "content": "<p>no, they're intended to be written by hand or other build systems</p>",
        "id": 241383531,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622723495
    },
    {
        "content": "<p>But it should be possible to write a script which converts cargo metadata to a rust-project.json file?</p>",
        "id": 241383717,
        "sender_full_name": "Achim Schneider",
        "timestamp": 1622723584
    },
    {
        "content": "<p>yes, that should be possible. It could even be useful as a <code>rust-analyzer</code> command</p>",
        "id": 241383835,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622723662
    },
    {
        "content": "<p>which would probably be pretty straightforward, since it could just get the <code>CrateGraph</code> and then convert back to the project json format</p>",
        "id": 241383924,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622723711
    },
    {
        "content": "<p>I implemented a serialization and deserialization of the CrateGraph as well as of the Change object in my own version of RustAnalyzer. I will see if I can provide a PR which implements a CLI command for creating a rust-project.json file! Many thanks so far!</p>",
        "id": 242306644,
        "sender_full_name": "Achim Schneider",
        "timestamp": 1623393790
    },
    {
        "content": "<p>I'm currently running into problems when I try to compile any version of rust-analyzer to WebAssembly up from  0.0.48.</p>\n<p>Here is the compiler error after changing the rust version to 0.0.48. in Cargo.toml of the wasm version of rust-analyzer:</p>\n<p>error[E0690]: transparent struct needs exactly one non-zero-sized field, but has 0<br>\n   --&gt; /home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/ra_ap_stdx-0.0.48/src/lib.rs:182:1<br>\n    |<br>\n182 | pub struct JodChild(pub process::Child);<br>\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ needs exactly one non-zero-sized field, but has 0</p>\n<p>error: aborting due to previous error</p>\n<p>For more information about this error, try <code>rustc --explain E0690</code>.<br>\nerror: could not compile <code>ra_ap_stdx</code></p>",
        "id": 242306736,
        "sender_full_name": "Achim Schneider",
        "timestamp": 1623393914
    },
    {
        "content": "<p>Any ideas what could fix this?</p>",
        "id": 242306760,
        "sender_full_name": "Achim Schneider",
        "timestamp": 1623393945
    },
    {
        "content": "<p>Ah, so that's because wasm can't have child processes<br>\nThe easiest way would be to make it be not repr(transparent) on wasm and panic before trying to transmute into it</p>",
        "id": 242313772,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1623399363
    },
    {
        "content": "<p>it kind of seems that if we're trying to create child processes in wasm, it's already too late? i.e. maybe the type just shouldn't exist in wasm?</p>",
        "id": 242316120,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1623400914
    },
    {
        "content": "<p>but maybe that goes against the normal approach</p>",
        "id": 242316199,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1623400950
    },
    {
        "content": "<p>it's used by flycheck, which probably isn't in your dependency tree, and proc_macro_api, which... probably also shouldn't be</p>",
        "id": 242316426,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1623401096
    },
    {
        "content": "<p>I wonder if we should have a WASM build in CI</p>",
        "id": 242316617,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1623401214
    },
    {
        "content": "<p>of the crates that are supposed to work in WASM</p>",
        "id": 242316627,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1623401221
    },
    {
        "content": "<p>i.e. everything behind <code>ide</code></p>",
        "id": 242316661,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1623401249
    },
    {
        "content": "<p>I guess the other question is why <code>JodChild</code> needs to be <code>repr(transparent)</code> at all <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 242316867,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1623401394
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> why can't <code>JodChild::into_inner</code> not simply return <code>self.0</code>?</p>",
        "id": 242316995,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1623401488
    },
    {
        "content": "<p>oh, because it implements Drop</p>",
        "id": 242317347,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1623401721
    },
    {
        "content": "<p>It could contain an <code>Option&lt;Child&gt;</code> and do nothing in the <code>Drop</code> impl if it is <code>None</code>.</p>",
        "id": 242321390,
        "sender_full_name": "bjorn3",
        "timestamp": 1623404135
    },
    {
        "content": "<p>It'd be fine to make repr transparent conditional, and just panic in the <code>into</code> on wasm</p>",
        "id": 242321810,
        "sender_full_name": "matklad",
        "timestamp": 1623404367
    },
    {
        "content": "<p>While trying to compile the most recent version of rust-analyzer to wasm, I'm facing even more errors:</p>",
        "id": 242325659,
        "sender_full_name": "Achim Schneider",
        "timestamp": 1623406741
    },
    {
        "content": "<p>error[E0433]: failed to resolve: use of undeclared crate or module <code>imp</code><br>\n  --&gt; /home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/ra_ap_stdx-0.0.59/src/process.rs:25:9<br>\n   |<br>\n25 |         imp::read2(out, err, &amp;mut |is_out, data, eof| {<br>\n   |         ^^^ use of undeclared crate or module <code>imp</code></p>\n<p>error[E0690]: transparent struct needs exactly one non-zero-sized field, but has 0<br>\n   --&gt; /home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/ra_ap_stdx-0.0.59/src/lib.rs:114:1<br>\n    |<br>\n114 | pub struct JodChild(pub std::process::Child);<br>\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ needs exactly one non-zero-sized field, but has 0</p>\n<p>error[E0658]: use of unstable library feature 'partition_point': new API<br>\n  --&gt; /home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/ra_ap_stdx-0.0.59/src/lib.rs:95:23<br>\n   |<br>\n95 |     let start = slice.partition_point(|it| key(it) == Ordering::Less);<br>\n   |                       ^^^^^^^^^^^^^^^<br>\n   |<br>\n   = note: see issue <a href=\"https://github.com/rust-lang/rust/issues/73831\">#73831</a> &lt;<a href=\"https://github.com/rust-lang/rust/issues/73831\">https://github.com/rust-lang/rust/issues/73831</a>&gt; for more information<br>\n   = help: add <code>#![feature(partition_point)]</code> to the crate attributes to enable</p>\n<p>error[E0658]: use of unstable library feature 'partition_point': new API<br>\n  --&gt; /home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/ra_ap_stdx-0.0.59/src/lib.rs:96:30<br>\n   |<br>\n96 |     let len = slice[start..].partition_point(|it| key(it) == Ordering::Equal);<br>\n   |                              ^^^^^^^^^^^^^^^<br>\n   |<br>\n   = note: see issue <a href=\"https://github.com/rust-lang/rust/issues/73831\">#73831</a> &lt;<a href=\"https://github.com/rust-lang/rust/issues/73831\">https://github.com/rust-lang/rust/issues/73831</a>&gt; for more information<br>\n   = help: add <code>#![feature(partition_point)]</code> to the crate attributes to enable</p>\n<p>error: aborting due to 4 previous errors</p>\n<p>Some errors have detailed explanations: E0433, E0658, E0690.<br>\nFor more information about an error, try <code>rustc --explain E0433</code>.<br>\nerror: could not compile <code>ra_ap_stdx</code></p>",
        "id": 242325669,
        "sender_full_name": "Achim Schneider",
        "timestamp": 1623406745
    },
    {
        "content": "<p>Two of those are due to you not running the latest stable toolchain, RA usually only builds on the latest rust version</p>",
        "id": 242325944,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623406900
    },
    {
        "content": "<p>Ah, thanks! The toolchain is set to nightly-2021-02-11<br>\n in the rust-toolchain file in the wasm GitHub Repo. After setting it to stable, two errors remain:</p>\n<p>error[E0433]: failed to resolve: use of undeclared crate or module <code>imp</code><br>\n  --&gt; /home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/ra_ap_stdx-0.0.59/src/process.rs:25:9<br>\n   |<br>\n25 |         imp::read2(out, err, &amp;mut |is_out, data, eof| {<br>\n   |         ^^^ use of undeclared crate or module <code>imp</code></p>\n<p>error[E0690]: transparent struct needs exactly one non-zero-sized field, but has 0<br>\n   --&gt; /home/achim/.cargo/registry/src/github.com-1ecc6299db9ec823/ra_ap_stdx-0.0.59/src/lib.rs:114:1<br>\n    |<br>\n114 | pub struct JodChild(pub std::process::Child);<br>\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ needs exactly one non-zero-sized field, but has 0</p>",
        "id": 242327120,
        "sender_full_name": "Achim Schneider",
        "timestamp": 1623407533
    },
    {
        "content": "<p>I'm guessing that E0433 is due to trying some fs access, which is not available is wasm?</p>",
        "id": 242327204,
        "sender_full_name": "Achim Schneider",
        "timestamp": 1623407595
    },
    {
        "content": "<p>it's because our <code>process.rs</code> only has implementations for unix and windows</p>",
        "id": 242327412,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1623407737
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/stdx/src/process.rs\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/stdx/src/process.rs</a></p>",
        "id": 242327446,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1623407753
    },
    {
        "content": "<p>Okay, I see the point. I think I can probably fix that JodChild issue. Is it possible to implement a wasm version for <a href=\"http://process.rs\">process.rs</a>? Problably by preceding imp with #[cfg(target_arch = \"wasm32\")]? Sorry for all the noob questions, really very new to rust!</p>",
        "id": 242334910,
        "sender_full_name": "Achim Schneider",
        "timestamp": 1623412911
    },
    {
        "content": "<p>yeah, presumably the WASM implementation would just return an error unconditionally (since the <code>Command</code> API also doesn't work there)</p>",
        "id": 242335167,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1623413054
    },
    {
        "content": "<p>I was assuming that it shouIdn't get called! I tried to add a dummy implementation. Compilation passes beyond this point! Now new errors are showing up :/ </p>\n<p>Compiling ide v0.0.0 (/home/achim/Projects/rust-analyzer/crates/ide)<br>\nerror[E0277]: the trait bound <code>std::string::String: From&lt;Url&gt;</code> is not satisfied<br>\n   --&gt; /home/achim/Projects/rust-analyzer/crates/ide/src/doc_links.rs:289:24<br>\n    |<br>\n289 |         .map(|url| url.into())<br>\n    |                        ^^^^ the trait <code>From&lt;Url&gt;</code> is not implemented for <code>std::string::String</code><br>\n    |<br>\n    = help: the following implementations were found:<br>\n              &lt;std::string::String as From&lt;&amp;'a js_sys::JsString&gt;&gt;<br>\n              &lt;std::string::String as From&lt;&amp;mut str&gt;&gt;<br>\n              &lt;std::string::String as From&lt;&amp;std::string::String&gt;&gt;<br>\n              &lt;std::string::String as From&lt;&amp;str&gt;&gt;<br>\n            and 10 others<br>\n    = note: required because of the requirements on the impl of <code>Into&lt;std::string::String&gt;</code> for <code>Url</code></p>\n<p>error[E0277]: the trait bound <code>std::string::String: From&lt;Url&gt;</code> is not satisfied<br>\n   --&gt; /home/achim/Projects/rust-analyzer/crates/ide/src/doc_links.rs:328:19<br>\n    |<br>\n328 |     Some((new_url.into(), strip_prefixes_suffixes(title).to_string()))<br>\n    |                   ^^^^ the trait <code>From&lt;Url&gt;</code> is not implemented for <code>std::string::String</code><br>\n    |<br>\n    = help: the following implementations were found:<br>\n              &lt;std::string::String as From&lt;&amp;'a js_sys::JsString&gt;&gt;<br>\n              &lt;std::string::String as From&lt;&amp;mut str&gt;&gt;<br>\n              &lt;std::string::String as From&lt;&amp;std::string::String&gt;&gt;<br>\n              &lt;std::string::String as From&lt;&amp;str&gt;&gt;<br>\n            and 10 others<br>\n    = note: required because of the requirements on the impl of <code>Into&lt;std::string::String&gt;</code> for <code>Url</code></p>\n<p>error[E0277]: the trait bound <code>std::string::String: From&lt;Url&gt;</code> is not satisfied<br>\n   --&gt; /home/achim/Projects/rust-analyzer/crates/ide/src/doc_links.rs:348:24<br>\n    |<br>\n348 |         .map(|url| url.into())<br>\n    |                        ^^^^ the trait <code>From&lt;Url&gt;</code> is not implemented for <code>std::string::String</code><br>\n    |<br>\n    = help: the following implementations were found:<br>\n              &lt;std::string::String as From&lt;&amp;'a js_sys::JsString&gt;&gt;<br>\n              &lt;std::string::String as From&lt;&amp;mut str&gt;&gt;<br>\n              &lt;std::string::String as From&lt;&amp;std::string::String&gt;&gt;<br>\n              &lt;std::string::String as From&lt;&amp;str&gt;&gt;<br>\n            and 10 others<br>\n    = note: required because of the requirements on the impl of <code>Into&lt;std::string::String&gt;</code> for <code>Url</code></p>\n<p>error: aborting due to 3 previous errors</p>",
        "id": 242335384,
        "sender_full_name": "Achim Schneider",
        "timestamp": 1623413202
    },
    {
        "content": "<p>Just in case that someone is interested: I managed to serialize/deserialize a Change object. Now my WASM Version of rust analyzer is loading the dependencies for ink Smart Contracts (<a href=\"https://github.com/paritytech/ink\">https://github.com/paritytech/ink</a>), allowing the online editing of a Smart Contract file.</p>\n<p>You can test the current version here: </p>\n<p><a href=\"https://friendly-ramanujan-7bfd78.netlify.app/\">https://friendly-ramanujan-7bfd78.netlify.app/</a> </p>\n<p>Please note that rust analyzer only becomes available after being loaded, which takes up to 20 seconds.</p>",
        "id": 243366599,
        "sender_full_name": "Achim Schneider",
        "timestamp": 1624273607
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> Do you have any estimate how long it might take until the current version of rust analyzer becomes compilable to wasm again? I'm currently using version 0.45.</p>",
        "id": 243366686,
        "sender_full_name": "Achim Schneider",
        "timestamp": 1624273676
    },
    {
        "content": "<p>In \"CPU time\", I'd estimate that as half-a-day worth of work. In \"wall-clock time\", well, when someone invests this half a day!</p>",
        "id": 243366807,
        "sender_full_name": "matklad",
        "timestamp": 1624273755
    },
    {
        "content": "<p>I can do my best trying to support. It's just that my background is being a TypeScript developer so far, this is the first time for me working with rust. Will probably find support from some colleagues within my company too ;)</p>",
        "id": 243367105,
        "sender_full_name": "Achim Schneider",
        "timestamp": 1624273924
    },
    {
        "content": "<p>I am getting the following error:</p>\n<blockquote>\n<p>DataCloneError: Worker.postMessage: The WebAssembly.Memory object cannot be serialized. The Cross-Origin-Opener-Policy and Cross-Origin-Embedder-Policy HTTP headers can be used to enable this.</p>\n</blockquote>",
        "id": 243380287,
        "sender_full_name": "bjorn3",
        "timestamp": 1624281558
    },
    {
        "content": "<p>This is using firefox.</p>",
        "id": 243380322,
        "sender_full_name": "bjorn3",
        "timestamp": 1624281584
    },
    {
        "content": "<p>Ah yes! Currently it is only working for Chrome. It's just a very early WIP...</p>",
        "id": 243381869,
        "sender_full_name": "Achim Schneider",
        "timestamp": 1624282204
    },
    {
        "content": "<p>it's working for me, very cool <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 243382431,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1624282479
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/9381\">https://github.com/rust-analyzer/rust-analyzer/pull/9381</a></p>",
        "id": 243570658,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1624391698
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> Thanks a lot for fixing the compilation to WASM! Unfortunately, wasm-pack build still fails to build a valid .wasm file:</p>\n<p><code>[INFO]: Checking for the Wasm target...\n[INFO]: Compiling to Wasm...\n   Compiling wasm_demo v0.1.0 (/home/achim/Projects/wasm/rust-analyzer-react-typescript)\nerror: linking with </code>rust-lld` failed: exit status: 1</p>\n<p>...</p>\n<p>= note: rust-lld: error: mutable global exported but 'mutable-globals' feature not present in inputs: <code>__tls_base</code>. Use --no-check-features to suppress.<br>\n          rust-lld: error: mutable global exported but 'mutable-globals' feature not present in inputs: <code>__tls_size</code>. Use --no-check-features to suppress.<br>\n          rust-lld: error: mutable global exported but 'mutable-globals' feature not present in inputs: <code>__tls_align</code>. Use --no-check-features to suppress.</p>\n<p>`</p>\n<p>Any suggestions what I could do to fix this?</p>",
        "id": 244275738,
        "sender_full_name": "Achim Schneider",
        "timestamp": 1624971508
    },
    {
        "content": "<p>What is the exact wasm-pack command you tried? Did you enable any target-features?</p>",
        "id": 244276533,
        "sender_full_name": "bjorn3",
        "timestamp": 1624971814
    },
    {
        "content": "<p>looks like <a href=\"https://github.com/rustwasm/wasm-bindgen/issues/2487\">https://github.com/rustwasm/wasm-bindgen/issues/2487</a> ?</p>",
        "id": 244276689,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1624971872
    },
    {
        "content": "<p>so updating wasm-bindgen may help?</p>",
        "id": 244276777,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1624971920
    },
    {
        "content": "<p>That only applies to when using wasm shared memory for multi threading and the change in that PR is in the command the user uses, not what wasm-bindgen uses.</p>",
        "id": 244276973,
        "sender_full_name": "bjorn3",
        "timestamp": 1624972013
    },
    {
        "content": "<p>I use <code>wasm-pack build --target web </code> for compiling. I tried a variety of wasm-bindgen versions and toolchains, it fails with  wasm-bindgen = \"0.2.74\" too...</p>",
        "id": 244278614,
        "sender_full_name": "Achim Schneider",
        "timestamp": 1624972761
    },
    {
        "content": "<p>wasm-bingen-rayon requires to set some addiaitonal parameters, like nightly toolchain and some extra flags in .cargo/config:</p>\n<p>`[target.wasm32-unknown-unknown]<br>\nrustflags = [\"-C\", \"target-feature=+atomics,+bulk-memory\"]</p>\n<p>[unstable]<br>\nbuild-std = [\"panic_abort\", \"std\"]`</p>\n<p>See: <a href=\"https://github.com/GoogleChromeLabs/wasm-bindgen-rayon\">https://github.com/GoogleChromeLabs/wasm-bindgen-rayon</a></p>",
        "id": 244278783,
        "sender_full_name": "Achim Schneider",
        "timestamp": 1624972844
    },
    {
        "content": "<p>You have to add <code>+mutable-globals</code>: <a href=\"https://github.com/rustwasm/wasm-bindgen/pull/2488/files#diff-b4df63c506d6bfc7e14d93aeb1fe129c3ad10b3f6b1df7a1f4cc6ebff862d059R15\">https://github.com/rustwasm/wasm-bindgen/pull/2488/files#diff-b4df63c506d6bfc7e14d93aeb1fe129c3ad10b3f6b1df7a1f4cc6ebff862d059R15</a></p>",
        "id": 244278869,
        "sender_full_name": "bjorn3",
        "timestamp": 1624972889
    },
    {
        "content": "<p>I tried this flag before, since the error message also suggested it. But I either had a typo or something else was wrongly configured. However, it compiles now :) Thanks a lot!</p>",
        "id": 244281430,
        "sender_full_name": "Achim Schneider",
        "timestamp": 1624973821
    },
    {
        "content": "<p>I'm currently using my own modified version of rust analyzer in which I implemented the serialization and deserialization of the <code>Change</code> object, which is send to the <code>AnalysisHost</code>. I also added a CLI command to generate a .json file for a rust project. This way I'm able to load the dependencies for the rust analyzer into the version which I compiled to WASM. Would this feature be of general interest? Should I create a PR for it? Or would there be a better way to load the dependencies of a rust project into the WASM version?</p>",
        "id": 244409240,
        "sender_full_name": "Achim Schneider",
        "timestamp": 1625052824
    },
    {
        "content": "<p>hmm, maybe it'd be best to make a draft PR so we have something concrete to talk about</p>",
        "id": 244410807,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1625053971
    },
    {
        "content": "<p>Hey ;)<br>\nI would still like to do this PR. </p>\n<p>However, I was serializing/deserializing the <code>Change</code> object without the proc-macros. I was planning to add this before I publish a PR.</p>\n<p>But I realized that the proc-macros are handled by ProcMacroSrv which is not used by the IDE crate? So I guess they won't be available in a wasm version of rust-analyzer, anyway? Or at least not until someone implements a wasm version of ProcMacroSrv? Since it is using threads it probably wouldn't compile to wasm?</p>",
        "id": 246060667,
        "sender_full_name": "Achim Schneider",
        "timestamp": 1626334373
    },
    {
        "content": "<p>Do you have a compiler? You'd need to compile the proc macros before running them anyway.</p>",
        "id": 246060823,
        "sender_full_name": "Laurențiu",
        "timestamp": 1626334505
    },
    {
        "content": "<p>I don't have a compiler in WASM, unfortunately. But it might be possible to use pre-compiled proc-macros? Can you tell me where rust analyzer handles the compilation of proc macros?</p>",
        "id": 246061871,
        "sender_full_name": "Achim Schneider",
        "timestamp": 1626335364
    },
    {
        "content": "<p>It is not possible to compile proc-macros for wasm. They are compiled by rustc as dylibs (invoked by <code>cargo check</code>). None of the wasm targets don't support dylibs yet.</p>",
        "id": 246069921,
        "sender_full_name": "bjorn3",
        "timestamp": 1626340543
    },
    {
        "content": "<p>well, there's nothing in rust-analyzer that requires that to be the case. for the hir / ide crates, a proc macro is just a <code>dyn ProcMacroExpander</code>. it'd be possible to build in precompiled proc macros, for example. it wouldn't be trivial, though</p>",
        "id": 246076436,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1626345240
    },
    {
        "content": "<p>it might even be possible to precompile the proc macros to wasm using watt and load that</p>",
        "id": 246076650,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1626345364
    },
    {
        "content": "<p>nevertheless, I would recommend leaving that out of the PR for now <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 246077111,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1626345720
    }
]