[
    {
        "content": "<p>I'm curious how does rust-analyzer's parser compare with tree-sitter in terms of error recovery and incremental parsing? For example, what would be better or worse if I replaced rust-analyzer's parser with <a href=\"https://github.com/tree-sitter/tree-sitter-rust\">tree-sitter-rust</a>?</p>",
        "id": 205086108,
        "sender_full_name": "osa1",
        "timestamp": 1595832809
    },
    {
        "content": "<p>In terms of error recovery, rust-analyzer's parser is better (though this might be an artifact of how a specific grammar is specified in tree-sitter, I haven't looked very closely into this). In terms of incrementality, tree-sitter is better. </p>\n<p>Replacing our parser with tree sitter would be much worse, but not because of these two metrics.</p>",
        "id": 205088673,
        "sender_full_name": "matklad",
        "timestamp": 1595835486
    },
    {
        "content": "<p>The amount of accidental complexity to pull in a parser generator is big. It is generally justified when you need to parse a lot of languages. But we only need to parse one, so, in terms of overall cost, I expect a hand-written parser to be much more efficient.</p>",
        "id": 205088721,
        "sender_full_name": "matklad",
        "timestamp": 1595835569
    },
    {
        "content": "<p>Thanks! Why is error recovery better in rust-analyzer? Is it because we can do language-specific decisions on how to recover (which tree-sitter cannot do as far as I understand from the <a href=\"https://tree-sitter.github.io/tree-sitter/creating-parsers\">documentation</a>)? Is there a summary on how error recovery in parsing is done in rust-analyzer currently? Or else where do I look in the source code?</p>",
        "id": 205089575,
        "sender_full_name": "osa1",
        "timestamp": 1595836427
    },
    {
        "content": "<p><a href=\"https://matklad.github.io/2018/06/06/modern-parser-generator.html#abandoning-cfg\">https://matklad.github.io/2018/06/06/modern-parser-generator.html#abandoning-cfg</a> (from \"The most important feature of hand-written parsers is a great support for error recovery and partial parses. It\")</p>",
        "id": 205089793,
        "sender_full_name": "matklad",
        "timestamp": 1595836622
    },
    {
        "content": "<p>For the example, rust-analyze gives</p>\n<div class=\"codehilite\"><pre><span></span><code>SOURCE_FILE@0..22597\n  FN_DEF@0..7\n    FN_KW@0..2 &quot;fn&quot;\n    WHITESPACE@2..3 &quot; &quot;\n    NAME@3..6\n      IDENT@3..6 &quot;foo&quot;\n    PARAM_LIST@6..7\n      L_PAREN@6..7 &quot;(&quot;\n  WHITESPACE@7..9 &quot;\\n\\n&quot;\n  STRUCT_DEF@9..31\n    STRUCT_KW@9..15 &quot;struct&quot;\n    WHITESPACE@15..16 &quot; &quot;\n    NAME@16..17\n      IDENT@16..17 &quot;S&quot;\n    WHITESPACE@17..18 &quot; &quot;\n    RECORD_FIELD_DEF_LIST@18..31\n      L_CURLY@18..19 &quot;{&quot;\n      WHITESPACE@19..23 &quot;\\n   &quot;\n      RECORD_FIELD_DEF@23..29\n        NAME@23..24\n          IDENT@23..24 &quot;f&quot;\n        COLON@24..25 &quot;:&quot;\n        WHITESPACE@25..26 &quot; &quot;\n        PATH_TYPE@26..29\n          PATH@26..29\n            PATH_SEGMENT@26..29\n              NAME_REF@26..29\n                IDENT@26..29 &quot;u32&quot;\n      WHITESPACE@29..30 &quot;\\n&quot;\n      R_CURLY@30..31 &quot;}&quot;\n</code></pre></div>",
        "id": 205089804,
        "sender_full_name": "matklad",
        "timestamp": 1595836636
    },
    {
        "content": "<p>tree sitter</p>\n<div class=\"codehilite\"><pre><span></span><code>source_file [0, 0] - [5, 0])\n  ERROR [0, 0] - [4, 1])\n    identifier [0, 3] - [0, 6])\n    struct_pattern [2, 0] - [4, 1])\n      type: type_identifier [2, 0] - [2, 6])\n      ERROR [2, 7] - [2, 8])\n        identifier [2, 7] - [2, 8])\n      field_pattern [3, 3] - [3, 9])\n        name: field_identifier [3, 3] - [3, 4])\n        pattern: identifier [3, 6] - [3, 9])\n</code></pre></div>",
        "id": 205089825,
        "sender_full_name": "matklad",
        "timestamp": 1595836659
    },
    {
        "content": "<p>Interesting! Thanks for the concrete example and the blog post, I'll read it. What's  the source that you're parsing in these examples?</p>",
        "id": 205089885,
        "sender_full_name": "osa1",
        "timestamp": 1595836688
    },
    {
        "content": "<p>The example in the post</p>",
        "id": 205089894,
        "sender_full_name": "matklad",
        "timestamp": 1595836704
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> -- thanks for the answers, they're really helpful. I want to look at rust-analyzer source for the error recovery code used in the example above, where should I look?</p>",
        "id": 205102461,
        "sender_full_name": "osa1",
        "timestamp": 1595846761
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/bc9fab156596d05ddb6b3fa57acd0fbd0755f2a0/crates/ra_parser/src/grammar/items.rs#L322-L352\">https://github.com/rust-analyzer/rust-analyzer/blob/bc9fab156596d05ddb6b3fa57acd0fbd0755f2a0/crates/ra_parser/src/grammar/items.rs#L322-L352</a></p>",
        "id": 205103495,
        "sender_full_name": "matklad",
        "timestamp": 1595847642
    },
    {
        "content": "<p>Unrelated, but there's this pattern here: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/bc9fab156596d05ddb6b3fa57acd0fbd0755f2a0/crates/ra_parser/src/grammar/items.rs#L347-L351\">https://github.com/rust-analyzer/rust-analyzer/blob/bc9fab156596d05ddb6b3fa57acd0fbd0755f2a0/crates/ra_parser/src/grammar/items.rs#L347-L351</a></p>",
        "id": 205103770,
        "sender_full_name": "Laurențiu",
        "timestamp": 1595847875
    },
    {
        "content": "<p><code>eat</code> already checks the current token and returns <code>false</code> if they don't match. EDIT: ah, it's <code>bump</code>, not <code>eat</code>, and I guess it's not so common, so it's probably fine.</p>",
        "id": 205103787,
        "sender_full_name": "Laurențiu",
        "timestamp": 1595847895
    }
]