[
    {
        "content": "<p>Hi, I have a question as a fellow LanguageServer implementer, how does rust-analyzer fetch and manage dependencies?</p>",
        "id": 225436615,
        "sender_full_name": "Jason Axelson",
        "timestamp": 1612656544
    },
    {
        "content": "<p>through <code>rustup</code> I would assume</p>",
        "id": 225436671,
        "sender_full_name": "oliver",
        "timestamp": 1612656614
    },
    {
        "content": "<p>I would have to pay closer attention next time it updates though</p>",
        "id": 225436680,
        "sender_full_name": "oliver",
        "timestamp": 1612656648
    },
    {
        "content": "<p>From what I recall it uses <code>cargo metadata</code>, this crate is the relevant part for that I believe <a href=\"https://github.com/rust-analyzer/rust-analyzer/tree/master/crates/project_model/src\">https://github.com/rust-analyzer/rust-analyzer/tree/master/crates/project_model/src</a></p>",
        "id": 225436786,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1612656923
    },
    {
        "content": "<p>hmmm, thanks for the link, although I'm unable to see where in the code it fetches dependencies. Does rust-analyzer avoid a race condition between when it is fetching dependencies and if the user is fetching dependencies?</p>",
        "id": 225437356,
        "sender_full_name": "Jason Axelson",
        "timestamp": 1612657973
    },
    {
        "content": "<p>which dependencies are you interested in?</p>",
        "id": 225438091,
        "sender_full_name": "oliver",
        "timestamp": 1612659292
    },
    {
        "content": "<p>Do you mean the actual download of dependencies / the index? That is handled by Cargo, which has a file lock on the corresponding directories, which should avoid any races.</p>",
        "id": 225438735,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612660377
    },
    {
        "content": "<p>Ah, I see. Cargo handling the race condition makes sense. (I'm not interested in any particular dependency, I'm interested in how dependencies are fetched in general)</p>",
        "id": 225440785,
        "sender_full_name": "Jason Axelson",
        "timestamp": 1612664085
    },
    {
        "content": "<p>Thanks! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 225440791,
        "sender_full_name": "Jason Axelson",
        "timestamp": 1612664105
    },
    {
        "content": "<p>It does also use <code>rustup</code> to install the <code>rust-src</code> component</p>",
        "id": 225441999,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612666754
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"387686\">@Jason Axelson</span> ! </p>\n<p>I believe the best approach here is to let the build system do the heavy lifting. ie, the server asks where the deps are, and the build system provides the server with paths (maybe fetching some from the internet).</p>\n<p>One problem here is that the user and the server might invoke the build system concurrently. Solution to that is just to make sure that the build system is concurrency-safe. I submitted some bugs and fixed for Cargo for this, back when I worked on IntelliJ.</p>",
        "id": 225467800,
        "sender_full_name": "matklad",
        "timestamp": 1612710328
    },
    {
        "content": "<p>Thanks for the info <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>, solving it in the build system makes a lot of sense.</p>",
        "id": 225517836,
        "sender_full_name": "Jason Axelson",
        "timestamp": 1612775617
    }
]