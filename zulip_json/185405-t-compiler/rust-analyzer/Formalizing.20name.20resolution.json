[
    {
        "content": "<p>This is a topic to discuss what mathematical models exists for name resolution. Some links:</p>\n<ul>\n<li><a href=\"https://web.cecs.pdx.edu/~apt/esop15.pdf\">https://web.cecs.pdx.edu/~apt/esop15.pdf</a></li>\n<li><a href=\"https://github.com/brendanzab/moniker\">https://github.com/brendanzab/moniker</a></li>\n</ul>\n<p>cc <span class=\"user-mention\" data-user-id=\"201857\">@Brendan Zabarauskas</span></p>\n<p>Overall mood: <a href=\"https://twitter.com/graydon_pub/status/1052359170601566210\">https://twitter.com/graydon_pub/status/1052359170601566210</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/graydon_pub/status/1052359170601566210\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1202995163/graycode_normal.png\"></a><p>One of these days I want to give a compiler talk called \"name lookup is the absolute worst\" that's just 100 slides of screaming goat memes.</p><span>- Graydon Hoare (@graydon_pub)</span></div></div>",
        "id": 219065811,
        "sender_full_name": "matklad",
        "timestamp": 1607338786
    },
    {
        "content": "<p>Fwiw I've moved away from using Moniker on Pikelet - I now use a 'trick' called semantic type checking that combines de Bruijn levels and de Bruijn indices for fast evaluationâ€¦ Locally Nameless just wasn't pulling it's weight for an actual implementation of dependent type theory. Like a lot of things it depends on the context, and what you are trying to do. Name binding is a frightening rabbit warren of a topic.</p>",
        "id": 219066741,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607339185
    },
    {
        "content": "<p>The scope graph stuff is suuper interesting though - I haven't looked to deeply into it though, simply because it wasn't super useful for what I want, which is fast evaluators for dependent type checkers. I'll see if I can remember any more interesting things I've seen.</p>",
        "id": 219067007,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607339345
    },
    {
        "content": "<p>There's was interesting work on contextual modal type theory (most seen in the <a href=\"http://complogic.cs.mcgill.ca/beluga/\">Beluga theorem prover</a>).</p>",
        "id": 219067186,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607339461
    },
    {
        "content": "<p>I had some links in this issue on Pikelet: <a href=\"https://github.com/pikelet-lang/pikelet/issues/181/\">Move away from using Moniker for variable binding</a> - but this was more in relation to dependent type checking.</p>",
        "id": 219067359,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607339553
    },
    {
        "content": "<p><a href=\"https://www.jstage.jst.go.jp/article/transinf/E101.D/4/E101.D_2017EDP7257/_article\">\"Name Binding is Easy with Hypergraphs\"</a> might be interesting.</p>",
        "id": 219067427,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607339613
    },
    {
        "content": "<p>I have a super high-level question:</p>\n<p>One of the most interesting bits of Rust's name res is the \"fixed point iteration\" thing. Ie, things like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">a</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">b</span>::<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">mod</span> <span class=\"nn\">b</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">a</span>::<span class=\"n\">y</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">struct</span> <span class=\"nc\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Are there models which handle that? Or are there models only for stack of scopes?</p>",
        "id": 219067543,
        "sender_full_name": "matklad",
        "timestamp": 1607339668
    },
    {
        "content": "<p>Oooooh yeah that looks closer to the Spoofax scope graph stuff</p>",
        "id": 219067633,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607339731
    },
    {
        "content": "<p>Like, I'm not sure if it can handle it - there's been continued work since that paper you linked, but it might be worth trying it out, or even extending it to support it? Like, if it's a student project you could even use the spoofax workbench to make up a prototype?</p>",
        "id": 219067778,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607339832
    },
    {
        "content": "<p><a href=\"http://www.metaborg.org/en/latest/\">http://www.metaborg.org/en/latest/</a></p>",
        "id": 219067844,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607339882
    },
    {
        "content": "<p>Yeah, that'd be fun!</p>",
        "id": 219068141,
        "sender_full_name": "matklad",
        "timestamp": 1607340071
    },
    {
        "content": "<p>I think the relevant part of it is <a href=\"http://www.metaborg.org/en/latest/source/langdev/meta/lang/nabl2/index.html\">Static Semantics Definition with NaBL2</a>? Could be wrong though, I only have a vague understanding that the theory of name resolution/scope graph stuff is used in there.</p>",
        "id": 219068182,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607340101
    },
    {
        "content": "<p>Although the end goal is to arrive at the production impl of the name resolution, as the current three versions (rustc, rust-analyzer, intellij) are all a bit of a mess</p>",
        "id": 219068188,
        "sender_full_name": "matklad",
        "timestamp": 1607340108
    },
    {
        "content": "<p>Heh, the docs do not inspire confidence: <a href=\"http://www.metaborg.org/en/latest/source/langdev/meta/lang/nabl2/introduction.html#name-resolution-with-scope-graphs\">http://www.metaborg.org/en/latest/source/langdev/meta/lang/nabl2/introduction.html#name-resolution-with-scope-graphs</a></p>",
        "id": 219068247,
        "sender_full_name": "matklad",
        "timestamp": 1607340137
    },
    {
        "content": "<p>HAHA oh dear</p>",
        "id": 219068272,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607340155
    },
    {
        "content": "<p>yeah you would probably have to look at the examples or something sadly</p>",
        "id": 219068304,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607340171
    },
    {
        "content": "<p>researchware is always fun</p>",
        "id": 219068366,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607340217
    },
    {
        "content": "<p>Production-ready compilers are no less fun, sadly :D</p>",
        "id": 219068452,
        "sender_full_name": "matklad",
        "timestamp": 1607340247
    },
    {
        "content": "<p>I think this might be the implementation? <a href=\"https://github.com/metaborg/nabl\">https://github.com/metaborg/nabl</a></p>",
        "id": 219068485,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607340271
    },
    {
        "content": "<p>They have a funny eclipse IDE thing that you can define languages in using these DSLs</p>",
        "id": 219068612,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607340366
    },
    {
        "content": "<p>I think I've seen demos in videos of Elco Visser playing around</p>",
        "id": 219068658,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607340419
    },
    {
        "content": "<blockquote>\n<p>HAHA oh dear</p>\n</blockquote>\n<p>Added appropriate tweet to the first message in the thread</p>",
        "id": 219068682,
        "sender_full_name": "matklad",
        "timestamp": 1607340443
    },
    {
        "content": "<p>amazing!</p>",
        "id": 219068713,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607340473
    },
    {
        "content": "<p>I remember that tweet</p>",
        "id": 219068719,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607340480
    },
    {
        "content": "<p>You can probably find videos if you search for Elco Visser if that's more consumable (I often find it a bit easier than launching into papers first, but I'm weird).</p>",
        "id": 219068847,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607340602
    },
    {
        "content": "<p>I think he's the main researcher working on this stuff if you are looking for somebody to chat to: <a href=\"https://eelcovisser.org/\">https://eelcovisser.org/</a></p>",
        "id": 219068926,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607340657
    },
    {
        "content": "<p>/me remembers the days when cyclic imports would crash the rust compiler</p>",
        "id": 219069010,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607340721
    },
    {
        "content": "<p>I wonder if there's anything in the mutually recursive module system stuff (in ML land) that might be of use</p>",
        "id": 219069385,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607340969
    },
    {
        "content": "<p>Might be a bit focused on a specific language feature than a more general theory though</p>",
        "id": 219069429,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607341022
    },
    {
        "content": "<p>Heh, I wish we just didn't do this at all. Makes writing fast IDE a pain in the back (as it precludes map-reduce approach: <a href=\"https://rust-analyzer.github.io/blog/2020/07/20/three-architectures-for-responsive-ide.html#map-reduce\">https://rust-analyzer.github.io/blog/2020/07/20/three-architectures-for-responsive-ide.html#map-reduce</a>)</p>",
        "id": 219069518,
        "sender_full_name": "matklad",
        "timestamp": 1607341088
    },
    {
        "content": "<p>yeah, seems rather frustrating <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 219069755,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607341304
    },
    {
        "content": "<p>So yeah, dunno if any of this has helped at all! I do think you might be on the right track with the scope graph stuff - I'm just not sure how close it would be to getting it to getting it to a production implementation</p>",
        "id": 219069870,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607341383
    },
    {
        "content": "<p>This all is definitely very helpful!</p>",
        "id": 219069967,
        "sender_full_name": "matklad",
        "timestamp": 1607341452
    },
    {
        "content": "<p>Like, does it support the fixed point stuff you want, and how do you get it to work for a responsive, incremental compiler.</p>",
        "id": 219069985,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607341471
    },
    {
        "content": "<p>Even if it turns out to be a negative resul in the end with respect to actual impl D</p>",
        "id": 219069989,
        "sender_full_name": "matklad",
        "timestamp": 1607341474
    },
    {
        "content": "<p>Yeah, still always good to have people looking at this stuff, and sometimes interacting with the researchers, showing them potential use cases/applications that they might not have thought of.</p>",
        "id": 219070047,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607341539
    },
    {
        "content": "<p>(the scope graphs parts have dedicated papers and implementations, + talks &amp; videos eg <a href=\"https://eelcovisser.org/talks/2017/06/20/scope-graphsa-fresh-look-at-name-binding-in-programming-languages/\">https://eelcovisser.org/talks/2017/06/20/scope-graphsa-fresh-look-at-name-binding-in-programming-languages/</a>)</p>",
        "id": 219070337,
        "sender_full_name": "lqd",
        "timestamp": 1607341763
    },
    {
        "content": "<p>yeah, papers+implementations are always super nice and handy!</p>",
        "id": 219070452,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607341853
    },
    {
        "content": "<p>(fun fact I somehow watched your compose talk yesterday Brendan :)</p>",
        "id": 219070499,
        "sender_full_name": "lqd",
        "timestamp": 1607341907
    },
    {
        "content": "<p>oh no!</p>",
        "id": 219070508,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607341914
    },
    {
        "content": "<p>hahah :)</p>",
        "id": 219070521,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607341920
    },
    {
        "content": "<p>I did finally come up with a name in the year or so since that talk <a href=\"https://github.com/yeslogic/fathom\">https://github.com/yeslogic/fathom</a></p>\n<p>(and also figured out a bunch of nasty snags that I glossed over in there, hoping one day I might be able to do a follow up talk on it)</p>",
        "id": 219070649,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607342031
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"201857\">Brendan Zabarauskas</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Formalizing.20name.20resolution/near/219068612\">said</a>:</p>\n<blockquote>\n<p>They have a funny eclipse IDE thing that you can define languages in using these DSLs</p>\n</blockquote>\n<p>that's \"Spoofax\" ^^</p>",
        "id": 219070764,
        "sender_full_name": "lqd",
        "timestamp": 1607342113
    },
    {
        "content": "<p>have you played around with Spoofax before?</p>",
        "id": 219070850,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607342171
    },
    {
        "content": "<p>(ah you've all already mentioned everything here sorry)</p>",
        "id": 219070860,
        "sender_full_name": "lqd",
        "timestamp": 1607342185
    },
    {
        "content": "<p>I haven't but I've read a couple papers, such as the scope graphs and more, and I've seen conference tutorials and talks from Eelco and students</p>",
        "id": 219070896,
        "sender_full_name": "lqd",
        "timestamp": 1607342220
    },
    {
        "content": "<p>(including one where he hopes to model Haskell in Spoofax, and SPJ seemed interested :)</p>",
        "id": 219070940,
        "sender_full_name": "lqd",
        "timestamp": 1607342260
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"201857\">@Brendan Zabarauskas</span> have you seen <a href=\"https://github.com/GaloisInc/daedalus\">https://github.com/GaloisInc/daedalus</a>? Seems to be roughly in the same spot as fathom, from the cursory look at it.</p>",
        "id": 219071006,
        "sender_full_name": "matklad",
        "timestamp": 1607342297
    },
    {
        "content": "<p>oooh, not seen that one</p>",
        "id": 219071031,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607342326
    },
    {
        "content": "<p>I'm aware of Kaitai, Nacissus, Everpass/QuackyDucky</p>",
        "id": 219071062,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607342369
    },
    {
        "content": "<p>daedalus seems new, I wonder if David Christiansen didn't mention it somewhere</p>",
        "id": 219071131,
        "sender_full_name": "lqd",
        "timestamp": 1607342408
    },
    {
        "content": "<p>and there are some interesting ones for lisp and Dylan</p>",
        "id": 219071132,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607342409
    },
    {
        "content": "<p>yeah this looks pretty close</p>",
        "id": 219071172,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607342463
    },
    {
        "content": "<p>Wonder if the can unparse as well <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 219071356,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607342632
    },
    {
        "content": "<p>OOOH lol the PDF stuff will be interesting for YesLogic</p>",
        "id": 219071517,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1607342734
    },
    {
        "content": "<p>(if you want to prototype some rust-like rules to validate/invalidate the scope graphs approach, <a href=\"https://eelcovisser.org/talks/2020/06/16/spoofax-tutorial-at-pldi/\">https://eelcovisser.org/talks/2020/06/16/spoofax-tutorial-at-pldi/</a> was the \"tutorial\" I remember watching as well)</p>",
        "id": 219072204,
        "sender_full_name": "lqd",
        "timestamp": 1607343273
    },
    {
        "content": "<p>The work on scope graphs is indeed interesting and the nice thing is that it seems somewhat extensible, at a first glance at least. Does anyone know of other relevant papers on the topic? Most of what I've been able to find is related to Eelco Visser's work.</p>",
        "id": 219207381,
        "sender_full_name": "okterakt",
        "timestamp": 1607435059
    }
]