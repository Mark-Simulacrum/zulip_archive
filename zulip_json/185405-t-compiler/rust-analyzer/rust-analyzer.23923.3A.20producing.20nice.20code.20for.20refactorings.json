[
    {
        "content": "<p>This is the stream to discuss <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/923\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/923\">rust-analyzer#923</a>. This issue would be the beginning for the code formatting subsystem, so if you are into designing code formatters, feel free to suggest solutions!</p>",
        "id": 159863489,
        "sender_full_name": "matklad",
        "timestamp": 1551644966
    },
    {
        "content": "<p>Hmm. Would it be bad to try to generalize rustfmt to be a library that could handle this problem?</p>",
        "id": 159911120,
        "sender_full_name": "pnkfelix",
        "timestamp": 1551704623
    },
    {
        "content": "<p>(It seems like the most interesting part, from an API design POV, is determining how to describe the context of the snippet of code you want to insert. Obviously you <em>could</em> just feed in the entire surrounding source code, but I would hope one could avoid it.)</p>",
        "id": 159911244,
        "sender_full_name": "pnkfelix",
        "timestamp": 1551704710
    },
    {
        "content": "<p>Yeah, this is about generalizing rustfmt essentially. That is, rustfmt2 should have an API for \"reformat this syntax node\"</p>",
        "id": 159911693,
        "sender_full_name": "matklad",
        "timestamp": 1551705130
    },
    {
        "content": "<p>I don't think that feeding surrounding code is a problem per-se. Rather, it's <em>modifications</em> of surrounding code that we need to avoid</p>",
        "id": 159911732,
        "sender_full_name": "matklad",
        "timestamp": 1551705181
    },
    {
        "content": "<p>But it shouldn't be too hard to condense surrounding code to a description like \"the indent level is N, the immediate predecessor has this type, the immediate successor has this type\"</p>",
        "id": 159911812,
        "sender_full_name": "matklad",
        "timestamp": 1551705244
    },
    {
        "content": "<p>(you need predecessor/successor information to add correct amount of whitespace <em>around</em> the newly inserted node)</p>",
        "id": 159911844,
        "sender_full_name": "matklad",
        "timestamp": 1551705276
    },
    {
        "content": "<p>And yeah, I think the red-green style syntax trees would be a good fit for rustfmt, so I game for rewriting rustfmt long/medium term as well =)</p>",
        "id": 159911908,
        "sender_full_name": "matklad",
        "timestamp": 1551705340
    },
    {
        "content": "<p>How much do we want to specialize formatting for <code>rust-analyzer</code> ? Do we want to fix the simple common cases such as auto indenting but leave more advanced formatting for <code>rustfmt 2.0 API</code> ?</p>",
        "id": 159911913,
        "sender_full_name": "vipentti",
        "timestamp": 1551705349
    },
    {
        "content": "<p>Specifically, currently rustfmt fails if there are syntax errors in the file, but, with rust-analyzer style trees, this should be easy to fix.</p>",
        "id": 159911963,
        "sender_full_name": "matklad",
        "timestamp": 1551705371
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204303\">@vipentti</span> I think we should start with just auto-indenting</p>",
        "id": 159911984,
        "sender_full_name": "matklad",
        "timestamp": 1551705390
    },
    {
        "content": "<p>When we finalize the syntax-tree data structure, I think we should rewrite rustmft</p>",
        "id": 159912013,
        "sender_full_name": "matklad",
        "timestamp": 1551705418
    },
    {
        "content": "<p>Hmm, could the formatting benefit from implementing some structured editing API in <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/779\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/779\">rust-analyzer#779</a> ?</p>",
        "id": 159912151,
        "sender_full_name": "vipentti",
        "timestamp": 1551705495
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204303\">@vipentti</span> I doubt it actually: formatting is mostly about modifying trivia, so structured editing does not help much</p>",
        "id": 159912237,
        "sender_full_name": "matklad",
        "timestamp": 1551705546
    },
    {
        "content": "<p>There are cases like \"adding trailing comma\", where structured editing would be helpful, but there aren't too many such cases.</p>",
        "id": 159912316,
        "sender_full_name": "matklad",
        "timestamp": 1551705607
    },
    {
        "content": "<p>indentation and line breaking are much more difficult parts of code formatting.</p>",
        "id": 159912336,
        "sender_full_name": "matklad",
        "timestamp": 1551705628
    },
    {
        "content": "<p>Would we want to \"fix\" wrong indentation as well ? e.g.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">                         </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 159912576,
        "sender_full_name": "vipentti",
        "timestamp": 1551705826
    },
    {
        "content": "<p>(when using <code>add-impl</code> for example)</p>",
        "id": 159912671,
        "sender_full_name": "vipentti",
        "timestamp": 1551705886
    },
    {
        "content": "<p>So, if <code>struct Bar</code> is pre-existing code, and <code>impl Bar</code> is the newly added code, we should not touch <code>struct Bar</code>, but we should properly indent <code>impl Bar</code></p>",
        "id": 159912677,
        "sender_full_name": "matklad",
        "timestamp": 1551705889
    },
    {
        "content": "<p>I imagine this requires us to traverse up the tree to determine the actual indentation for the <code>impl Bar</code> unless we want to just indent it \"properly\" regards the <code>fn foo()</code> in this case. Which may or may not be properly indented itself</p>",
        "id": 159912931,
        "sender_full_name": "vipentti",
        "timestamp": 1551706095
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">mod</span> <span class=\"nn\">bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// using add impl</span>\n<span class=\"w\">            </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"c1\">// Gets indented here</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 159913106,
        "sender_full_name": "vipentti",
        "timestamp": 1551706239
    },
    {
        "content": "<p>I think indentation should be relative to the parent item.</p>",
        "id": 159913111,
        "sender_full_name": "matklad",
        "timestamp": 1551706244
    },
    {
        "content": "<p>That is, we traverse not to the root, but to the \"owner\" node (<code>ast::Block</code> in this case), and figure out the indentation relative to that</p>",
        "id": 159913164,
        "sender_full_name": "matklad",
        "timestamp": 1551706286
    },
    {
        "content": "<p>I'm interested in taking a look into this. I'm going to see where I get with replicating the tests linked in the issue and then report back.</p>",
        "id": 162350998,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1554222556
    },
    {
        "content": "<p>Cool! just yesterday I was looking at various assits, whihc have formatting code, <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/5cdf525caa51311515854c4dd398d3fb907d1368/crates/ra_assists/src/introduce_variable.rs#L53-L65\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/5cdf525caa51311515854c4dd398d3fb907d1368/crates/ra_assists/src/introduce_variable.rs#L53-L65\">like this</a> interspersed with the logic. It would be awesome to get rid of this!</p>",
        "id": 162351203,
        "sender_full_name": "matklad",
        "timestamp": 1554222713
    },
    {
        "content": "<p>Thanks for the heads up, I'm going to start by looking for instances of that I think about how that could be reused. Then, I'll come up with something and seek feedback on my approach.</p>",
        "id": 162351369,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1554222829
    },
    {
        "content": "<p>That is, something like \"introduce a variable\"  should produce a poorly-formatted syntax tree with variable inserted, ask the formatting subsystem to fix this single node, and use the fixed result as the final result.</p>",
        "id": 162351723,
        "sender_full_name": "matklad",
        "timestamp": 1554223059
    },
    {
        "content": "<p>So, in this case,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">mod</span> <span class=\"nn\">g</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"o\">&lt;|&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p><em>Add derive</em></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">mod</span> <span class=\"nn\">g</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[derive(&lt;|&gt;)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I should think about it more like: <br>\n 1. Insert the necessary symbols (produces what is seen above) and then<br>\n 2. Look at formatting just the <code>    #[derive(&lt;|&gt;)]</code> to <code>    }</code> lines?</p>",
        "id": 162352507,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1554223742
    },
    {
        "content": "<p>And perhaps look into a way to input the parent node as a parameter to gain indentation information from?</p>",
        "id": 162352640,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1554223822
    },
    {
        "content": "<p>yeah, perhaps at just reformatting the derived node</p>",
        "id": 162352664,
        "sender_full_name": "matklad",
        "timestamp": 1554223847
    },
    {
        "content": "<p>That is, the assist should produce</p>\n<div class=\"codehilite\"><pre><span></span>mod g {\n       #[derive()] struct A {\n       }\n}\n</pre></div>\n\n\n<p>and formatter should add a newline</p>",
        "id": 162352722,
        "sender_full_name": "matklad",
        "timestamp": 1554223896
    },
    {
        "content": "<p>Nodes know their parents, so it is always possible to take a look at the context</p>",
        "id": 162352798,
        "sender_full_name": "matklad",
        "timestamp": 1554223925
    },
    {
        "content": "<p>In the end, we could simply remove the whitespace counting code (like the one you referenced just a moment ago), and format.</p>",
        "id": 162352805,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1554223932
    },
    {
        "content": "<p>Do you think I'd be able to simply leverage the existing fmt code in RA? Or would some modifications need to be made?</p>",
        "id": 162352903,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1554224014
    },
    {
        "content": "<p>I am afraid pretty substantial modifications would be needed, if we want ot reuse rustfmt</p>",
        "id": 162353024,
        "sender_full_name": "matklad",
        "timestamp": 1554224095
    },
    {
        "content": "<p>feature wise,</p>\n<ul>\n<li>we should be able to format an isolated node (as opposed to the whole file)</li>\n<li>we should be able to format code, even if it contains syntax errors</li>\n</ul>",
        "id": 162353068,
        "sender_full_name": "matklad",
        "timestamp": 1554224127
    },
    {
        "content": "<p>These two points imply that we should use our syntax tree for formatting</p>",
        "id": 162353085,
        "sender_full_name": "matklad",
        "timestamp": 1554224148
    },
    {
        "content": "<p>and changing rustfmt's syntax tree would be a huge task</p>",
        "id": 162353150,
        "sender_full_name": "matklad",
        "timestamp": 1554224165
    },
    {
        "content": "<p>So, I think it makes sense to start experimenting with from-scratch formatter which does only subset of things</p>",
        "id": 162353189,
        "sender_full_name": "matklad",
        "timestamp": 1554224199
    },
    {
        "content": "<p>to nail down the API, etc.</p>",
        "id": 162353198,
        "sender_full_name": "matklad",
        "timestamp": 1554224205
    },
    {
        "content": "<p>after we are comfortable with that, I'd game for just rewriting rustfmt as a library on top of ra_syntax</p>",
        "id": 162353232,
        "sender_full_name": "matklad",
        "timestamp": 1554224232
    },
    {
        "content": "<p>Okay, that sounds like a good long-term plan. For now, perhaps I'll start looking at creating a simple function which takes in the node to be formatted. For now, this function will correct whitespace issues, but it will be designed to eventually support large parts of rustfmt's capabilities</p>",
        "id": 162353530,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1554224438
    },
    {
        "content": "<p>sgtm!</p>",
        "id": 162353575,
        "sender_full_name": "matklad",
        "timestamp": 1554224465
    },
    {
        "content": "<p>In RA, would it be more common to mutate the node, return back a clone with changes, or return a diff to be applied?</p>",
        "id": 162353610,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1554224497
    },
    {
        "content": "<p>I haven't started looking deeply into it, yet. But if we can retrieve the parent node from a child node, it seems like it could be a simple <code>fn format(&amp;config, &amp;node) -&gt; Node</code><br>\nOr maybe for now, <code>fn format(&amp;node) -&gt; Node</code></p>",
        "id": 162353736,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1554224562
    },
    {
        "content": "<p>I'll leave the configuration passing choices up for a later discussion...</p>",
        "id": 162353903,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1554224670
    },
    {
        "content": "<p>That is a good question, which I feel would be the core of the design. </p>\n<p>Syntax trees in Rust-Analyzer are an immutable data structure, so you can't mutate them in place. You can, however, cheaply create a copy of a file with some subtree substituted.</p>",
        "id": 162353920,
        "sender_full_name": "matklad",
        "timestamp": 1554224680
    },
    {
        "content": "<p>Can I create a copy of a node with a <em>child</em> node replaced <em>cheaply</em>?</p>",
        "id": 162353988,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1554224729
    },
    {
        "content": "<p>I feel formatting should be split into two bits:</p>\n<ul>\n<li>adjustting whitespace</li>\n<li>tree transformations (for example, adding traling commas)</li>\n</ul>\n<p>For adjusting ws, I think a nice API would be to walk a tree and compute, for each whitespace token, and edit whihc should be applied to each token</p>",
        "id": 162354073,
        "sender_full_name": "matklad",
        "timestamp": 1554224771
    },
    {
        "content": "<p>yeah, you can replace children cheaply</p>",
        "id": 162354089,
        "sender_full_name": "matklad",
        "timestamp": 1554224787
    },
    {
        "content": "<p>Though, there's really no good high-level API for it</p>",
        "id": 162354114,
        "sender_full_name": "matklad",
        "timestamp": 1554224812
    },
    {
        "content": "<p>you could take a look at the <code>reparsing</code> module, which does tree modification for incremental reparsing</p>",
        "id": 162354145,
        "sender_full_name": "matklad",
        "timestamp": 1554224833
    },
    {
        "content": "<p>I also feel that for formatting specifically, a <strong>mutable</strong> tree might be a good fit.</p>\n<p>Formatting than could be cast as applyng a series of transformations until a fixed point. That is, you can, for example, traverse the tree, apply the required indent as you go, and looking at the parent indent, without maintaining an explicit diff</p>",
        "id": 162354337,
        "sender_full_name": "matklad",
        "timestamp": 1554224971
    },
    {
        "content": "<p>It's interesting that IntellIJ, for formatting, builds a separate so-called formatting block tree, and runs on it</p>",
        "id": 162354356,
        "sender_full_name": "matklad",
        "timestamp": 1554224997
    },
    {
        "content": "<p>Is it trivial to track cursor location in the existing node structures?</p>",
        "id": 162354414,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1554225008
    },
    {
        "content": "<blockquote>\n<p>Is it trivial to track cursor location in the existing node structures?</p>\n</blockquote>\n<p>now</p>",
        "id": 162354429,
        "sender_full_name": "matklad",
        "timestamp": 1554225021
    },
    {
        "content": "<p>In general, tracking anything after edit is hard</p>",
        "id": 162354444,
        "sender_full_name": "matklad",
        "timestamp": 1554225032
    },
    {
        "content": "<p>The problem is, when you replace a node, you get back a file, and you need to find the \"clone\" of the node in it yourself</p>",
        "id": 162354477,
        "sender_full_name": "matklad",
        "timestamp": 1554225063
    },
    {
        "content": "<p>I could definitely see this mutable tree structure (similar to IntelliJ's) also being able to keep track of the cursor.<br>\nEspecially since assists provide cursor locations after application, and if you reformat your file, it'd be nice to not lose your cursor location.</p>",
        "id": 162354598,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1554225142
    },
    {
        "content": "<p>I think it would be a good idea to take a closer look at IntelliJ's formatted: <a href=\"https://www.jetbrains.org/intellij/sdk/docs/tutorials/custom_language_support/formatter.html\" target=\"_blank\" title=\"https://www.jetbrains.org/intellij/sdk/docs/tutorials/custom_language_support/formatter.html\">https://www.jetbrains.org/intellij/sdk/docs/tutorials/custom_language_support/formatter.html</a>. Not that it has good docs :)</p>",
        "id": 162354609,
        "sender_full_name": "matklad",
        "timestamp": 1554225147
    },
    {
        "content": "<p>I don't quite sure I have a full picture of what is available, but that's my first thought.</p>",
        "id": 162354627,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1554225173
    },
    {
        "content": "<p>I'll look into that formatter reference. I'm sure I'll get a few ideas</p>",
        "id": 162354664,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1554225202
    },
    {
        "content": "<p>To be fair, I also don't quite understand how this formatting API should look like. I guess we'll have to churn through a couple of different approaches before we find a good one!</p>",
        "id": 162354684,
        "sender_full_name": "matklad",
        "timestamp": 1554225221
    },
    {
        "content": "<p>I'm completely on board with trial-and-error</p>",
        "id": 162354765,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1554225257
    },
    {
        "content": "<p>The more I think about it, the more I like the idea of creating a mutable formatting tree on top of immutable syntax tree, and working with that...</p>\n<p>That should give us a pretty flexible API.</p>",
        "id": 162355161,
        "sender_full_name": "matklad",
        "timestamp": 1554225522
    },
    {
        "content": "<p>So formatting works like this:</p>\n<ul>\n<li>you get a node to reformat</li>\n<li>you create a shadow formatting tree, whihch wraps any non-ws elment of the original tree, and which represents spacing explicitelly (like, ws is not a string, but an indent level, etc)</li>\n<li>formatting code mutates spacing in the formatting tree. If it wants to, it can examing original nodes (with a caveat that they are in the orginial state)</li>\n<li>after formatting tree is in a good shapre, formatter walks both trees in lockstep, and computes the edit for the diff</li>\n</ul>",
        "id": 162355409,
        "sender_full_name": "matklad",
        "timestamp": 1554225689
    },
    {
        "content": "<p>A good thing would be if trailing whitespaces are unrepresentable in the format tree :D</p>",
        "id": 162355512,
        "sender_full_name": "matklad",
        "timestamp": 1554225763
    },
    {
        "content": "<p>\"computes the edit for the diff\" would the diff be a vec of AtomicTextEdits?</p>",
        "id": 162355565,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1554225810
    },
    {
        "content": "<p>yeah</p>",
        "id": 162355594,
        "sender_full_name": "matklad",
        "timestamp": 1554225839
    },
    {
        "content": "<p>fundamtelly, the result of any operation should be a diff, b/c that's what we send to the client</p>",
        "id": 162355653,
        "sender_full_name": "matklad",
        "timestamp": 1554225858
    },
    {
        "content": "<p>but I think it's a good idea to work with a stateful trees internally</p>",
        "id": 162355659,
        "sender_full_name": "matklad",
        "timestamp": 1554225872
    },
    {
        "content": "<p>Why not track ws in the shadow formatting tree? Then, we could simply update the ws nodes as we walk through the tree...</p>",
        "id": 162355784,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1554225983
    },
    {
        "content": "<p>I'm thinking that the whitespace could potentially influence the resulting format.</p>",
        "id": 162355842,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1554226045
    },
    {
        "content": "<p>A good example of this is <code>dartfmt</code> which gives the author a lot of control over the formatting by preserving some whitespacing and correcting others based on that.</p>",
        "id": 162355929,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1554226109
    },
    {
        "content": "<p><a href=\"https://github.com/dart-lang/dart_style#readme\" target=\"_blank\" title=\"https://github.com/dart-lang/dart_style#readme\">https://github.com/dart-lang/dart_style#readme</a></p>",
        "id": 162355949,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1554226136
    },
    {
        "content": "<p>Anyway, just a trail of thoughts. We won't know much until I've banged around in the code for a little bit ;-)</p>",
        "id": 162356173,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1554226272
    },
    {
        "content": "<p>We should track ws in shadow tree, but we should track it in a more structured way</p>",
        "id": 162356194,
        "sender_full_name": "matklad",
        "timestamp": 1554226292
    },
    {
        "content": "<p>or maybe not, I don't know.</p>\n<p>What I know is that the repr in syntax tree, where ws is just a string, is annoying to work with, because computing indent  is a pain.</p>",
        "id": 162356291,
        "sender_full_name": "matklad",
        "timestamp": 1554226347
    },
    {
        "content": "<p>That makes sense to me</p>",
        "id": 162356654,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1554226645
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"215394\">@Cole Lawrence</span> I guess a concrete first step here is to think hard about the problem, identify a small slice we can tackle and open a GitHub issue with the design/PR. Oh, and INtelliJ Rust formatter is here, if I haven't linked it before: <a href=\"https://github.com/intellij-rust/intellij-rust/tree/master/src/main/kotlin/org/rust/ide/formatter\" target=\"_blank\" title=\"https://github.com/intellij-rust/intellij-rust/tree/master/src/main/kotlin/org/rust/ide/formatter\">https://github.com/intellij-rust/intellij-rust/tree/master/src/main/kotlin/org/rust/ide/formatter</a></p>",
        "id": 162356799,
        "sender_full_name": "matklad",
        "timestamp": 1554226759
    },
    {
        "content": "<p>Does it make sense to consider macros at all at this point?</p>",
        "id": 162362552,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1554230610
    },
    {
        "content": "<p>Are there goals for others to extend rls? For example, to provide formatting for their macro libraries, or provide assistance for generating Serde serializers based on a JSON Schema?</p>",
        "id": 162363142,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1554231016
    },
    {
        "content": "<p>What does <code>compute_ws</code> do exactly? I'm having trouble understanding what purpose this has.</p>",
        "id": 162372464,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1554237725
    },
    {
        "content": "<p>Now, macros are definitely out of scope</p>",
        "id": 162374053,
        "sender_full_name": "matklad",
        "timestamp": 1554238972
    },
    {
        "content": "<p>Compute_ws returns the space between two tokens. Like “no space before closing }</p>",
        "id": 162374104,
        "sender_full_name": "matklad",
        "timestamp": 1554239037
    },
    {
        "content": "<p>As for the extension, that should be possible, but in a very far future:)</p>",
        "id": 162374181,
        "sender_full_name": "matklad",
        "timestamp": 1554239074
    },
    {
        "content": "<p>I'm having a hard time understanding the relationship between HIR, AST, <code>SyntaxToken</code>s, and the \"Source Text\" (String) levels of representation.</p>\n<p>My understanding is that our refactoring code currently (mostly) operates at the \"Source Text\" level, by looking at the derived HIR data (e.g. implementations, references, resolved type, etc.) AND THEN sending back up the changes to the raw \"Source Text\" directly.<br>\nSo...<br>\nWould it be desirable to instead commit our refactorings at the HIR level, and then derive the necessary \"Source Text\" changes from the HIR tree changes?<br>\nMy thought process is that if we could refactor at the HIR level, we could theoretically <em>know</em> that the result will be \"correct\" (maybe incomplete).<br>\nFor example, \"introduce as local variable\" should be able to be applied to any expression, but identifying what are expressions at the \"Source Text\" level forces us to reimplement some of our parsing logic.<br>\nThis could also start to close the gap between compiler suggestions and the operations if compiler suggestions are communicated as HIR changes.</p>",
        "id": 162375906,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1554240428
    },
    {
        "content": "<p>For example, the way TypeScript handles the communication between codefixes and the compiler <a href=\"https://github.com/Microsoft/TypeScript/tree/master/src/services/codefixes\" target=\"_blank\" title=\"https://github.com/Microsoft/TypeScript/tree/master/src/services/codefixes\">https://github.com/Microsoft/TypeScript/tree/master/src/services/codefixes</a></p>",
        "id": 162378743,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1554243193
    },
    {
        "content": "<p>I would say that we have only two principally different levels of representation: Source and HIR.</p>\n<p>For Source, we have several different views into the data: text (string), untyped SyntaxNode tree, typed tree of ast::FooBar values. However these are all views: there's one to one bidirectional correspondence between text and both trees (and typed tree uses literally the same representation as untyped tree). The core property of this layer is that it preserves all information from the source code exactly: all the comments and whitespace are in the tree.</p>\n<p>HIR, in contrast, is by design a lossy implementation: different source might result in the same HIR. For this reason, it is important that the final transformation to source is computed at the level of the source code: if you transform HIR directly and map it back to source, you'll lose all the comments. </p>\n<p>What we can and should do, though, is to use HIR to compute all the info, required to apply refactoring. See <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/1095\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/1095\">https://github.com/rust-analyzer/rust-analyzer/issues/1095</a> for an example of this. The struct fields example highlights the difference between HIR and source: when we add missing fields, we ideally should add them in the same order as the one in the struct declaration. However, HIR does not care about the order of fields, only syntax tree does. So, they need to work together to produce the desired result. </p>\n<blockquote>\n<p>but identifying what are expressions at the \"Source Text\" level forces us to reimplement some of our parsing logic.</p>\n</blockquote>\n<p>Note that this is not exactly what happens there: we should identify a specific expression at the cursor position, and that is very source-level specific. If the cursor is exactly between two nodes, you need to check both the left node and the right node, for example.</p>",
        "id": 162401502,
        "sender_full_name": "matklad",
        "timestamp": 1554271583
    }
]