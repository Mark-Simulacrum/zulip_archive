[
    {
        "content": "<p>As far as I can tell, syntax errors always seem to be attached to the preceding token when the current token is in the recovery set:</p>\n<p><a href=\"/user_uploads/4715/apWHHcSVtZHNjdDE6AdIcVjV/Screen-Shot-2021-09-11-at-3.44.23-pm.png\">Screen-Shot-2021-09-11-at-3.44.23-pm.png</a><br>\n<a href=\"/user_uploads/4715/4mVV8mXJ0ByPQ-F68C3-HgNk/Screen-Shot-2021-09-11-at-3.45.09-pm.png\">Screen-Shot-2021-09-11-at-3.45.09-pm.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/apWHHcSVtZHNjdDE6AdIcVjV/Screen-Shot-2021-09-11-at-3.44.23-pm.png\" title=\"Screen-Shot-2021-09-11-at-3.44.23-pm.png\"><img src=\"/user_uploads/4715/apWHHcSVtZHNjdDE6AdIcVjV/Screen-Shot-2021-09-11-at-3.44.23-pm.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/4715/4mVV8mXJ0ByPQ-F68C3-HgNk/Screen-Shot-2021-09-11-at-3.45.09-pm.png\" title=\"Screen-Shot-2021-09-11-at-3.45.09-pm.png\"><img src=\"/user_uploads/4715/4mVV8mXJ0ByPQ-F68C3-HgNk/Screen-Shot-2021-09-11-at-3.45.09-pm.png\"></a></div><p>Is this desired? Although I think it’s good in this example (since it keeps the error message closer to where the problem is instead of going over to the <code>let</code> on the next line), it can lead to some slightly confusing situations IMO:</p>\n<p><a href=\"/user_uploads/4715/vEzuOVnHXj-I1WPI9wGRrs8E/Screen-Shot-2021-09-11-at-3.47.24-pm.png\">Screen-Shot-2021-09-11-at-3.47.24-pm.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/vEzuOVnHXj-I1WPI9wGRrs8E/Screen-Shot-2021-09-11-at-3.47.24-pm.png\" title=\"Screen-Shot-2021-09-11-at-3.47.24-pm.png\"><img src=\"/user_uploads/4715/vEzuOVnHXj-I1WPI9wGRrs8E/Screen-Shot-2021-09-11-at-3.47.24-pm.png\"></a></div><p>Here the error message seems to suggest _replacing_ the <code>let</code> with a pattern, when really it’s asking the user to insert a pattern after the <code>let</code>. This intuition of ‘syntax error messages tell you to replace something’ comes from the common case where the unexpected token isn’t in the recovery set:</p>\n<p><a href=\"/user_uploads/4715/AD9V5XJ9OJYS7e-khfupWdwy/Screen-Shot-2021-09-11-at-3.50.45-pm.png\">Screen-Shot-2021-09-11-at-3.50.45-pm.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/AD9V5XJ9OJYS7e-khfupWdwy/Screen-Shot-2021-09-11-at-3.50.45-pm.png\" title=\"Screen-Shot-2021-09-11-at-3.50.45-pm.png\"><img src=\"/user_uploads/4715/AD9V5XJ9OJYS7e-khfupWdwy/Screen-Shot-2021-09-11-at-3.50.45-pm.png\"></a></div>",
        "id": 252885205,
        "sender_full_name": "Aramis Razzaghipour",
        "timestamp": 1631339464
    },
    {
        "content": "<p>That's very much a bug! In the logical model, such errors should say \"we are anticipating the following error at this position\" -- they shouldn't point to a token, but to an offest in an input. </p>\n<p>In the editor, we should render such errors as underlining the <em>whitespace</em> following the erroneous position.</p>",
        "id": 252904184,
        "sender_full_name": "matklad",
        "timestamp": 1631361230
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Syntax.20error.20location/near/252904184\">said</a>:</p>\n<blockquote>\n<p>That's very much a bug! In the logical model, such errors should say \"we are anticipating the following error at this position\" -- they shouldn't point to a token, but to an offest in an input. </p>\n<p>In the editor, we should render such errors as underlining the <em>whitespace</em> following the erroneous position.</p>\n</blockquote>\n<p>Hmm, that’s very interesting. Would that mean that, in the case where the erroneous token is in the recovery set, you’d want something like this?</p>\n<div class=\"codehilite\"><pre><span></span><code>let foo =   let bar = baz;\n         ^^^\n</code></pre></div>\n<p>And in the case where the erroneous token isn’t in the recovery set, you’d want this?</p>\n<div class=\"codehilite\"><pre><span></span><code>let ? = 10;\n   ^\n</code></pre></div>\n<p>In my opinion it makes more sense to underline the actual token causing the problem here, rather than the whitespace.</p>",
        "id": 252909164,
        "sender_full_name": "Aramis Razzaghipour",
        "timestamp": 1631366450
    },
    {
        "content": "<p>For the first example, as in </p>\n<div class=\"codehilite\"><pre><span></span><code>let foo =\nlet bar = baz;\n</code></pre></div>\n<p>we def want to point to the end of the first line as an erroneous position</p>\n<p>And for the second case, it seems that <code>?</code> shold be flag as an error. </p>\n<p>Basically, there are two kinds of errors : </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">ParseError</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">MissingToken</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">offest</span>: <span class=\"nc\">TextSize</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">UnexpectedToken</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">range</span>: <span class=\"nc\">TextRange</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 252909524,
        "sender_full_name": "matklad",
        "timestamp": 1631366840
    },
    {
        "content": "<p>Right, makes sense. And would you want the ‘missing token’ case to point to just one byte in the file, or to the entire sequence of whitespace at that point?</p>",
        "id": 252909633,
        "sender_full_name": "Aramis Razzaghipour",
        "timestamp": 1631366953
    },
    {
        "content": "<p>Ideally, I think we should transfer missing token to the editor as-is, and let the editor render it in the most appropriate way</p>",
        "id": 252909733,
        "sender_full_name": "matklad",
        "timestamp": 1631367070
    },
    {
        "content": "<p>missing token at the end of the line is a different case from a missng token in the middle of the line, for example. I guess, as usual, best to check what IntelliJ is doing!</p>",
        "id": 252909752,
        "sender_full_name": "matklad",
        "timestamp": 1631367105
    },
    {
        "content": "<p>our syntax error messages could also use some improvement, by the way -- \"Expected R_CURLY\" isn't very friendly</p>",
        "id": 252909756,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1631367112
    },
    {
        "content": "<p>I have been experimenting recently with automatically tracking all expected syntax kinds as the parser executes, which allows for some very nice error messages with no manual work. Would something like this fit with rust-analyzer?</p>",
        "id": 252909819,
        "sender_full_name": "Aramis Razzaghipour",
        "timestamp": 1631367171
    },
    {
        "content": "<p>Here’s how Kotlin in IntelliJ handles these examples:</p>\n<p><a href=\"/user_uploads/4715/DFJtVN4K0dr8xyWK9jXipgMH/Screen-Shot-2021-09-11-at-11.39.34-pm.png\">Screen-Shot-2021-09-11-at-11.39.34-pm.png</a> <br>\n<a href=\"/user_uploads/4715/ap11cXcPB5NA9p_-lslQkZxc/Screen-Shot-2021-09-11-at-11.40.03-pm.png\">Screen-Shot-2021-09-11-at-11.40.03-pm.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/DFJtVN4K0dr8xyWK9jXipgMH/Screen-Shot-2021-09-11-at-11.39.34-pm.png\" title=\"Screen-Shot-2021-09-11-at-11.39.34-pm.png\"><img src=\"/user_uploads/4715/DFJtVN4K0dr8xyWK9jXipgMH/Screen-Shot-2021-09-11-at-11.39.34-pm.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/4715/ap11cXcPB5NA9p_-lslQkZxc/Screen-Shot-2021-09-11-at-11.40.03-pm.png\" title=\"Screen-Shot-2021-09-11-at-11.40.03-pm.png\"><img src=\"/user_uploads/4715/ap11cXcPB5NA9p_-lslQkZxc/Screen-Shot-2021-09-11-at-11.40.03-pm.png\"></a></div><p>It seems that in the ‘missing token’ case IntelliJ only marks a single position as an error, not the entire whitespace token:</p>\n<p><a href=\"/user_uploads/4715/mB4Fjxv4e-8Ua6xfaTNG3elk/Screen-Shot-2021-09-11-at-11.40.56-pm.png\">Screen-Shot-2021-09-11-at-11.40.56-pm.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/mB4Fjxv4e-8Ua6xfaTNG3elk/Screen-Shot-2021-09-11-at-11.40.56-pm.png\" title=\"Screen-Shot-2021-09-11-at-11.40.56-pm.png\"><img src=\"/user_uploads/4715/mB4Fjxv4e-8Ua6xfaTNG3elk/Screen-Shot-2021-09-11-at-11.40.56-pm.png\"></a></div>",
        "id": 252910323,
        "sender_full_name": "Aramis Razzaghipour",
        "timestamp": 1631367666
    },
    {
        "content": "<p>I'm looking at this and have made some changes to <code>parser</code> and <code>syntax</code> that I'd like to take for a spin to see if it works. I've managed to get the local binary running as the language server (it's my first time working directly on the r-a codebase), but when it starts it dies off after a few seconds with a <code>salsa</code> cycle error which also occurs on the commit I checked out even without any modifications :s</p>",
        "id": 256870728,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633786363
    },
    {
        "content": "<p>Is this a current issue/is there something I can do to work around that?</p>",
        "id": 256870741,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633786380
    },
    {
        "content": "<p>Or are there UI tests somewhere that include error locations and that I could use instead?</p>",
        "id": 256870763,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633786418
    },
    {
        "content": "<p>Though these would only help to some extent, since VSCode has their own additional rules around diagnostic locations <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 256870895,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633786544
    },
    {
        "content": "<p>The panic happens on any project, not just the r-a workspace</p>",
        "id": 256871348,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633787006
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink  [he/him]</span> we've upgraded salsa recently, right?</p>",
        "id": 256871488,
        "sender_full_name": "matklad",
        "timestamp": 1633787137
    },
    {
        "content": "<p>This is what I'm seeing:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;Internal error, cycle detected:\n\nDatabaseKeyIndex { group_index: 7, query_index: 10, key_index: 560 }\nDatabaseKeyIndex { group_index: 7, query_index: 8, key_index: 11 }\n&#39;, C:\\Users\\Domenic Quirl\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\salsa-0.15.2\\src\\lib.rs:480:48\nstack backtrace:\n   0: std::panicking::begin_panic_handler\n             at /rustc/a178d0322ce20e33eac124758e837cbd80a6f633\\/library\\std\\src\\panicking.rs:515\n   1: std::panicking::begin_panic_fmt\n             at /rustc/a178d0322ce20e33eac124758e837cbd80a6f633\\/library\\std\\src\\panicking.rs:457\n   2: salsa::QueryTable&lt;Q&gt;::get::{{closure}}\n   3: &lt;DB as hir_ty::db::HirDatabase&gt;::generic_defaults::__shim\n   4: hir_ty::lower::substs_from_path_segment\n   5: hir_ty::lower::&lt;impl hir_ty::TraitRef&gt;::from_resolved_path\n   6: hir_ty::lower::&lt;impl hir_ty::TraitRef&gt;::from_path\n   7: hir_ty::lower::&lt;impl hir_ty::GenericPredicate&gt;::from_type_bound\n   8: hir_ty::lower::&lt;impl hir_ty::GenericPredicate&gt;::from_where_predicate\n   9: hashbrown::map::HashMap&lt;K,V,S,A&gt;::retain\n  10: &lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter\n  11: hir_ty::lower::generic_predicates_for_param_query\n  12: salsa::runtime::Runtime::execute_query_implementation\n  13: &lt;&amp;T as core::fmt::Debug&gt;::fmt\n  14: salsa::derived::slot::Slot&lt;Q,MP&gt;::read\n  15: &lt;salsa::derived::DerivedStorage&lt;Q,MP&gt; as salsa::plumbing::QueryStorageOps&lt;Q&gt;&gt;::try_fetch\n  16: &lt;DB as hir_ty::db::HirDatabase&gt;::generic_predicates_for_param::__shim\n  17: hir_ty::utils::all_super_trait_refs\n  18: hir_ty::utils::associated_type_by_name_including_super_traits\n  19: hir_ty::lower::&lt;impl hir_ty::Ty&gt;::from_partly_resolved_hir_path\n  20: hir_ty::lower::&lt;impl hir_ty::Ty&gt;::from_hir_ext\n  21: core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once\n  22: &lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter\n  23: hir_ty::lower::generic_defaults_query\n  24: salsa::runtime::Runtime::execute_query_implementation\n  25: &lt;&amp;T as core::fmt::Debug&gt;::fmt\n  26: salsa::derived::slot::Slot&lt;Q,MP&gt;::read\n  27: &lt;salsa::derived::DerivedStorage&lt;Q,MP&gt; as salsa::plumbing::QueryStorageOps&lt;Q&gt;&gt;::try_fetch\n  28: &lt;DB as hir_ty::db::HirDatabase&gt;::generic_defaults::__shim\n  29: hir_ty::lower::substs_from_path_segment\n  30: hir_ty::lower::&lt;impl hir_ty::TraitRef&gt;::from_resolved_path\n  31: hir_ty::lower::&lt;impl hir_ty::TraitRef&gt;::from_path\n  32: hir_ty::lower::&lt;impl hir_ty::TraitRef&gt;::from_hir\n  33: hir_ty::lower::impl_trait_query\n  34: salsa::runtime::Runtime::execute_query_implementation\n  35: &lt;&amp;T as core::fmt::Debug&gt;::fmt\n  36: salsa::derived::slot::Slot&lt;Q,MP&gt;::read\n  37: &lt;salsa::derived::DerivedStorage&lt;Q,MP&gt; as salsa::plumbing::QueryStorageOps&lt;Q&gt;&gt;::try_fetch\n  38: &lt;DB as hir_ty::db::HirDatabase&gt;::impl_trait::__shim\n  39: &lt;DB as hir_ty::db::HirDatabase&gt;::impl_trait\n  40: hir_ty::method_resolution::TraitImpls::trait_impls_in_crate_query\n  41: salsa::runtime::Runtime::execute_query_implementation\n  42: &lt;&amp;T as core::fmt::Debug&gt;::fmt\n  43: salsa::derived::slot::Slot&lt;Q,MP&gt;::read\n  44: &lt;salsa::derived::DerivedStorage&lt;Q,MP&gt; as salsa::plumbing::QueryStorageOps&lt;Q&gt;&gt;::try_fetch\n  45: &lt;DB as hir_ty::db::HirDatabase&gt;::trait_impls_in_crate::__shim\n  46: hir_ty::method_resolution::TraitImpls::trait_impls_in_deps_query\n  47: salsa::runtime::Runtime::execute_query_implementation\n  48: &lt;&amp;T as core::fmt::Debug&gt;::fmt\n  49: salsa::derived::slot::Slot&lt;Q,MP&gt;::read\n  50: &lt;salsa::derived::DerivedStorage&lt;Q,MP&gt; as salsa::plumbing::QueryStorageOps&lt;Q&gt;&gt;::try_fetch\n  51: &lt;DB as hir_ty::db::HirDatabase&gt;::trait_impls_in_deps::__shim\n  52: hir_ty::traits::chalk::&lt;impl chalk_solve::RustIrDatabase&lt;hir_ty::traits::chalk::interner::Interner&gt; for hir_ty::traits::ChalkContext&gt;::impls_for_trait\n  53: chalk_solve::clauses::program_clauses_for_goal\n  54: chalk_solve::clauses::program_clauses_for_goal\n  55: &lt;chalk_recursive::recursive::Solver&lt;I&gt; as chalk_recursive::solve::SolveDatabase&lt;I&gt;&gt;::solve_goal\n  56: &lt;chalk_recursive::recursive::RecursiveSolver&lt;I&gt; as chalk_solve::solve::Solver&lt;I&gt;&gt;::solve_limited\n  57: hir_ty::traits::trait_solve_query\n  58: salsa::runtime::Runtime::execute_query_implementation\n  59: &lt;&amp;T as core::fmt::Debug&gt;::fmt\n  60: salsa::derived::slot::Slot&lt;Q,MP&gt;::read\n  61: &lt;salsa::derived::DerivedStorage&lt;Q,MP&gt; as salsa::plumbing::QueryStorageOps&lt;Q&gt;&gt;::try_fetch\n  62: &lt;DB as hir_ty::db::HirDatabase&gt;::trait_solve::__shim\n  63: &lt;DB as hir_ty::db::HirDatabase&gt;::trait_solve\n  64: hir_ty::autoderef::deref\n  65: core::ptr::drop_in_place&lt;salsa::runtime::StampedValue&lt;alloc::sync::Arc&lt;arena::map::ArenaMap&lt;arena::Idx&lt;hir_def::adt::FieldData&gt;,hir_ty::Binders&lt;hir_ty::Ty&gt;&gt;&gt;&gt;&gt;\n  66: core::ptr::drop_in_place&lt;salsa::runtime::StampedValue&lt;alloc::sync::Arc&lt;arena::map::ArenaMap&lt;arena::Idx&lt;hir_def::adt::FieldData&gt;,hir_ty::Binders&lt;hir_ty::Ty&gt;&gt;&gt;&gt;&gt;\n  67: core::ptr::drop_in_place&lt;salsa::runtime::StampedValue&lt;alloc::sync::Arc&lt;arena::map::ArenaMap&lt;arena::Idx&lt;hir_def::adt::FieldData&gt;,hir_ty::Binders&lt;hir_ty::Ty&gt;&gt;&gt;&gt;&gt;\n  68: core::ptr::drop_in_place&lt;salsa::runtime::StampedValue&lt;alloc::sync::Arc&lt;arena::map::ArenaMap&lt;arena::Idx&lt;hir_def::adt::FieldData&gt;,hir_ty::Binders&lt;hir_ty::Ty&gt;&gt;&gt;&gt;&gt;\n  69: core::ptr::drop_in_place&lt;salsa::runtime::StampedValue&lt;alloc::sync::Arc&lt;arena::map::ArenaMap&lt;arena::Idx&lt;hir_def::adt::FieldData&gt;,hir_ty::Binders&lt;hir_ty::Ty&gt;&gt;&gt;&gt;&gt;\n  70: core::ptr::drop_in_place&lt;salsa::runtime::StampedValue&lt;alloc::sync::Arc&lt;arena::map::ArenaMap&lt;arena::Idx&lt;hir_def::adt::FieldData&gt;,hir_ty::Binders&lt;hir_ty::Ty&gt;&gt;&gt;&gt;&gt;\n  71: core::ptr::drop_in_place&lt;salsa::runtime::StampedValue&lt;alloc::sync::Arc&lt;arena::map::ArenaMap&lt;arena::Idx&lt;hir_def::adt::FieldData&gt;,hir_ty::Binders&lt;hir_ty::Ty&gt;&gt;&gt;&gt;&gt;\n  72: hir_ty::infer::infer_query\n  73: salsa::runtime::Runtime::execute_query_implementation\n  74: &lt;&amp;T as core::fmt::Debug&gt;::fmt\n  75: salsa::derived::slot::Slot&lt;Q,MP&gt;::read\n  76: &lt;salsa::derived::DerivedStorage&lt;Q,MP&gt; as salsa::plumbing::QueryStorageOps&lt;Q&gt;&gt;::try_fetch\n  77: &lt;DB as hir_ty::db::HirDatabase&gt;::infer_query::__shim\n  78: hir_ty::db::infer_wait\n  79: hir::source_analyzer::SourceAnalyzer::new_for_body\n  80: hir::semantics::SemanticsImpl::scope_for_def\n  81: hir::semantics::SemanticsImpl::type_of_pat\n  82: ide::inlay_hints::inlay_hints\n  83: std::panicking::try\n  84: ide::Analysis::inlay_hints\n  85: rust_analyzer::handlers::handle_inlay_hints\n  86: &lt;F as threadpool::FnBox&gt;::call_box\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n</code></pre></div>",
        "id": 256871885,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633787538
    },
    {
        "content": "<p>The outermost trigger isn't always <code>inlay_hints</code>, sometimes it's also <code>hover</code> or <code>diagnostics</code> or <code>document_highlight</code> or whatever (there's quite a lot of them in the output of one startup)</p>",
        "id": 256872034,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633787710
    },
    {
        "content": "<p>That is not the salsa version we're currently using</p>",
        "id": 256872232,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1633787922
    },
    {
        "content": "<p>Oh, what the...!</p>",
        "id": 256872864,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633788491
    },
    {
        "content": "<p>Github forked me 7000 commits behind O.o</p>",
        "id": 256872882,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633788518
    },
    {
        "content": "<p>you might've had a fork already in which case it doesn't refork</p>",
        "id": 256874900,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1633790524
    },
    {
        "content": "<p>I'm fairly sure I didn't. But whatever it was, it was very definitely the issue</p>",
        "id": 256876113,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633791698
    },
    {
        "content": "<p>Sorry for the fuss</p>",
        "id": 256876118,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633791703
    },
    {
        "content": "<p>Have some new syntax error locations as an apology <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span> <br>\n<a href=\"/user_uploads/4715/P925ztD-ROEXmpVI8gOgVrHO/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/P925ztD-ROEXmpVI8gOgVrHO/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/P925ztD-ROEXmpVI8gOgVrHO/image.png\"></a></div>",
        "id": 256876177,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633791737
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/OACYWz0FuyOm6icll-mc2nvH/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/OACYWz0FuyOm6icll-mc2nvH/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/OACYWz0FuyOm6icll-mc2nvH/image.png\"></a></div>",
        "id": 256878924,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633794506
    },
    {
        "content": "<p>If a line with an error at the end has no trailing whitespace, VSCode renders the error message in the new line because the end of the (exclusive) diagnostic end position</p>",
        "id": 256879011,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633794602
    },
    {
        "content": "<p>That seems... weird to me, given that LSP explicitly specifies ranges to be right-exclusive</p>",
        "id": 256879046,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633794621
    },
    {
        "content": "<p>Apart from that, I've broken the errors from incremental re-parsing, namely <code>syntax::parsing::reparsing::merge_errors</code>, which discards errors from prior parses whose range intersects the edit</p>",
        "id": 256879184,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633794783
    },
    {
        "content": "<p>The missing token errors do that now, because their range is no longer empty. The easy fix for that would be to <code>+1</code> that case, but since that code is fairly unrelated I'd like someone to check if that would break something else</p>",
        "id": 256879297,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633794931
    },
    {
        "content": "<p>(it fixes the reparsing tests, but I don't know if that's the full picture)</p>",
        "id": 256879413,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633795064
    },
    {
        "content": "<p>Notably, the intersecting happens when whitespace is replaced with different whitespace/whitespace is inserted into whitespace</p>",
        "id": 256879771,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633795369
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"337115\">Domenic Quirl</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Syntax.20error.20location/near/256879011\">said</a>:</p>\n<blockquote>\n<p>If a line with an error at the end has no trailing whitespace, VSCode renders the error message in the new line because the end of the (exclusive) diagnostic end position</p>\n</blockquote>\n<p>Something interesting about this is that it is possible to remap the diagnostic range to reference the end of the original line instead, which puts the error where you expect, at the cost of showing the underline at the end of the last token in that line if there is no trailing whitespace. Thoughts on which is better (as this is somewhat VSCode specific)?</p>",
        "id": 256881191,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633796779
    },
    {
        "content": "<blockquote>\n<p>Thoughts on which is better </p>\n</blockquote>\n<p>In the layer which emits errors, we should be (to a resonable degree) pedantically correct. In the layer which converts those errors to LSP it's perfectly fine to accommodate editor's idiosyncrasies. Would be great to check how lsp-mode and neovim behave there though.</p>",
        "id": 256892245,
        "sender_full_name": "matklad",
        "timestamp": 1633807063
    },
    {
        "content": "<p>The <code>SyntaxError</code> range itself is just a <code>TextRange</code> of length 1, which as far as I know gets directly converted into a r-a <code>Diagnostic</code>. What I did to test this was modify the <code>publish_diagnostics</code> handler to check whether the end of a range is at the start (character 0) of a line, and if so re-map that to the line before, character <code>u32::MAX</code>. I know that VSC officially interprets that as clamped to the end of the line, I don't know about the other editors. I have an old nvim config somewhere, but that would be using <code>coc</code>, not the new native LSP implementation. And emacs is not something I have used personally at all</p>",
        "id": 256893850,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1633808546
    },
    {
        "content": "<p>Wouldn't the \"pedantically correct\" option here be to have an error of size zero after the token? The boosting to size 1 to make the highlight show up seems like the editor idiosyncrasy part</p>",
        "id": 257137938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634003120
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Syntax.20error.20location/near/257137938\">said</a>:</p>\n<blockquote>\n<p>Wouldn't the \"pedantically correct\" option here be to have an error of size zero after the token? The boosting to size 1 to make the highlight show up seems like the editor idiosyncrasy part</p>\n</blockquote>\n<p>I'd say that's partially true. Since VSC interprets empty ranges to mean \"the word at this position\", this issue does require a workaround to render the error indications onto whitespace, because apparently the \"word\" at some document position in VSC cannot be whitespace and is always resolved to the neighbouring non-ws text.</p>\n<p>The other reason for the range, though, is to try to replicate the IntelliJ errors, which only render on the first position of the whitespace. So even if VSC allowed empty ranges to tag WS, it wouldn't be the desired result (note that syntax errors in general rely on the empty range behaviour at the moment).</p>",
        "id": 257165598,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634026623
    },
    {
        "content": "<p>To summarize VSC behaviour so far:</p>\n<ul>\n<li>empty ranges are interpreted to refer to the surrounding word (this is currently used by r-a). If the position is whitespace, they refer to an adjacent word (of which I think it's always to the left, but that might also be due to the position being on the left side of the whitespace).</li>\n<li>if the (exclusive) end of a diagnostic range is the start of a new line (char 0), VSC will render the squiggle at the end of the previous line, even if there is no trailing whitespace (the squiggle extends nicely past the line end), but will associate the diagnostic message with the ending line (imo this is a bug, since no character in that line is part of the diagnostic)</li>\n<li>if the end of the diagnostic is instead (past) the end of the original line, VSC will clip to the end of the line. If there is trailing whitespace, the squiggle appears as the first whitespace character. If not, it attaches to the left to the last text character of the line. Messages are associated with this line correctly.</li>\n</ul>",
        "id": 257166301,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634027012
    },
    {
        "content": "<p>Also I've just found out that VSC <em>will send the original diagnostic range back</em> when asking for fixes/assists on the diagnostic - so the re-mapping to characters that are <em>actually</em> past the end of the line then causes issues when trying to find that range in the syntax tree -.-</p>",
        "id": 257166532,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634027135
    },
    {
        "content": "<p>Ok, I think something like this is why the message rendering is wrong in VSC: </p>\n<p>The error messages are rendered with whole-line decorations (meaning they can visually extend past the actual document text). Such decorations are converted to start at the first character of their <em>starting</em> line and end at the last character of their <em>ending</em> line <a href=\"https://github.com/microsoft/vscode/blob/0de2780d3c99281856caebdacd17d4568385d5ca/src/vs/editor/common/viewModel/viewModelDecorations.ts#L84-L85\">here</a>. For each individual line, they are clamped to line boundaries <a href=\"https://github.com/microsoft/vscode/blob/7fba93f63a5193dc39cad884f32bf27d5137e70d/src/vs/editor/common/viewLayout/lineDecorations.ts#L84-L85\">again here</a> to be rendered.</p>\n<p>So a single error with <code>startLineNumber != endLineNumber</code> extends to both lines like this: <br>\n<a href=\"/user_uploads/4715/N1NnINdY-NUNlMJsKEkqxCCH/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/N1NnINdY-NUNlMJsKEkqxCCH/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/N1NnINdY-NUNlMJsKEkqxCCH/image.png\"></a></div><p>I haven't found where exactly the text rendering is, but I assume the text is put at the end of the whole (extended) range, which is why it appears on the second line.</p>",
        "id": 257173668,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1634030795
    }
]