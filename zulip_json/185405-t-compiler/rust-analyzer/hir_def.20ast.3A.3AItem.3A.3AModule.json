[
    {
        "content": "<p>In this line, I read it as a Module does not have inner items, can someone explain why that is the case?</p>\n<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_def/src/item_tree/lower.rs#L100\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_def/src/item_tree/lower.rs#L100</a></p>",
        "id": 219596298,
        "sender_full_name": "kev",
        "timestamp": 1607687689
    },
    {
        "content": "<p>Contrasting, ast::Item::Func does have inner items</p>",
        "id": 219596409,
        "sender_full_name": "kev",
        "timestamp": 1607687757
    },
    {
        "content": "<p>Good question <span class=\"user-mention\" data-user-id=\"369769\">@kev</span> !</p>\n<p>I think the primary reason is historical -- items nested in fn's and module items are treeted differently higher in the stack (CrateDefMap)</p>",
        "id": 219597442,
        "sender_full_name": "matklad",
        "timestamp": 1607688404
    },
    {
        "content": "<p>But I guess on the ItemTree level it might make sense to unify the representation? <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> , do you think we can maybe use some smart encoding here?</p>",
        "id": 219597483,
        "sender_full_name": "matklad",
        "timestamp": 1607688452
    },
    {
        "content": "<p>Like, flattening <em>all</em> items in a single array, and using some indexing scheme to infer the tree structure?</p>",
        "id": 219597505,
        "sender_full_name": "matklad",
        "timestamp": 1607688472
    },
    {
        "content": "<p>hmm, maybe</p>",
        "id": 219598092,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607688845
    },
    {
        "content": "<p>Not really sure how that would look, I'm not very good with algorithms :)</p>",
        "id": 219598123,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607688870
    },
    {
        "content": "<p>I guess you're imagining something like how you can store a binary heap in a linear array, and use indices to navigate it?</p>",
        "id": 219598143,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607688894
    },
    {
        "content": "<p>Sortof, yeah</p>",
        "id": 219598161,
        "sender_full_name": "matklad",
        "timestamp": 1607688907
    },
    {
        "content": "<p>The encoding would have to be more complicated, as that's n-ary tree</p>",
        "id": 219598195,
        "sender_full_name": "matklad",
        "timestamp": 1607688938
    },
    {
        "content": "<p>But something like this would contain all the requred information:</p>\n<div class=\"codehilite\"><pre><span></span><code>item_tree: Vec&lt;(usize, Item)&gt;\n</code></pre></div>\n<p>where <code>usize</code> is the index of parent</p>",
        "id": 219598276,
        "sender_full_name": "matklad",
        "timestamp": 1607688972
    },
    {
        "content": "<p>An alternative would be <code>Vec&lt;(Item, ops::Range&lt;usize&gt;)&gt;</code>, where the range specifies the children</p>",
        "id": 219598494,
        "sender_full_name": "matklad",
        "timestamp": 1607689150
    },
    {
        "content": "<p>Do we need to update those (e.g. to add children)?</p>",
        "id": 219598617,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1607689238
    },
    {
        "content": "<p>Not really, we build the thing once</p>",
        "id": 219598698,
        "sender_full_name": "matklad",
        "timestamp": 1607689282
    },
    {
        "content": "<p>Ahh I see, thank you for explaining @matklad :) Peeking into CrateDefMap now</p>",
        "id": 219600328,
        "sender_full_name": "kev",
        "timestamp": 1607690225
    },
    {
        "content": "<p>Hmm oh I think I understand fully, items inside of a function cannot be called from outside of that scope, but items in mod can, so I guess you needed a way to represent this distinction. So modules have their own Scope Variant</p>",
        "id": 219600749,
        "sender_full_name": "kev",
        "timestamp": 1607690511
    }
]