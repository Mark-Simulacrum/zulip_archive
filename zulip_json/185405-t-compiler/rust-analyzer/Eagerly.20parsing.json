[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>  Was wondering would there be any benefits, if the analyser eagerly parsed files that have been declared with mod?</p>\n<p>For example; I start off at <a href=\"http://lib.rs\">lib.rs</a> and it's content is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">mod</span> <span class=\"nn\">foo2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">mod</span> <span class=\"nn\">foo3</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>So before analysis, I parse the files related to foo, foo2, and foo3 eagerly</p>",
        "id": 219767939,
        "sender_full_name": "kev",
        "timestamp": 1607876142
    },
    {
        "content": "<p>The parser would not need to hold any state to do this I think, just check for <code>mod</code> declarations in the parsed file</p>",
        "id": 219767995,
        "sender_full_name": "kev",
        "timestamp": 1607876217
    },
    {
        "content": "<p>Parsing is done strictly on file basis</p>",
        "id": 219768008,
        "sender_full_name": "matklad",
        "timestamp": 1607876275
    },
    {
        "content": "<p>parser doesn't even have access to a file system to load child files</p>",
        "id": 219768050,
        "sender_full_name": "matklad",
        "timestamp": 1607876297
    },
    {
        "content": "<p>But, as long as you do <em>anything</em> with a crate, we parse all of it's files. Due to the nature of rust's name resolution algorithm, it's not really possible to postopne parsing within the crate</p>",
        "id": 219768062,
        "sender_full_name": "matklad",
        "timestamp": 1607876338
    },
    {
        "content": "<p>Hm I see, before I discard this idea, the parser can still have no access to the file system. A component who does would check the CST for mod declarations and call the parser on /foo.</p>\n<p>The aim was to do parsing in parallel and have all necessary files parsed before resolution , but I think it introduces a bit more complexity for not that great a benefit</p>",
        "id": 219768164,
        "sender_full_name": "kev",
        "timestamp": 1607876508
    },
    {
        "content": "<p>That's a great idea actually, and something we'd want to implement</p>",
        "id": 219768301,
        "sender_full_name": "matklad",
        "timestamp": 1607876669
    },
    {
        "content": "<p>although, it should be pushed a little bit further up the stack.</p>",
        "id": 219768307,
        "sender_full_name": "matklad",
        "timestamp": 1607876681
    },
    {
        "content": "<p>Specifically, it's the <code>DefCollector</code> who should done parallelization. When it parsed the file and build an item tree out of it, it should spawn rayon jobs to parse and item-tree-ize <code>foo1</code>, <code>foo2</code> and <code>foo3</code>.</p>",
        "id": 219768330,
        "sender_full_name": "matklad",
        "timestamp": 1607876746
    },
    {
        "content": "<p>But salsa currently doesn't support within-query parallelism</p>",
        "id": 219768353,
        "sender_full_name": "matklad",
        "timestamp": 1607876762
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Eagerly.20parsing/near/219768330\">said</a>:</p>\n<blockquote>\n<p>Specifically, it's the <code>DefCollector</code> who should done parallelization. When it parsed the file and build an item tree out of it, it should spawn rayon jobs to parse and item-tree-ize <code>foo1</code>, <code>foo2</code> and <code>foo3</code>.</p>\n</blockquote>\n<p>Oh that makes sense, thanks for clarifying and correcting</p>",
        "id": 219768424,
        "sender_full_name": "kev",
        "timestamp": 1607876879
    },
    {
        "content": "<p>Before we go down that route, we can also try parallelizing <code>prime_caches</code>. Last time I tried that I was hitting limitations of rayon, which could also cause issues when salsa supports this natively.</p>",
        "id": 219768492,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607876972
    },
    {
        "content": "<p>Specifically rayon's behavior around propagating panics caused cancellation to take a lot longer than it should, resulting in poor UX and sporadic test failures</p>",
        "id": 219768552,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607877033
    }
]