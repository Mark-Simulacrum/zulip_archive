[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> , do you know offhand if rust-analyzer has known issues on OS X?</p>",
        "id": 158110116,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549970734
    },
    {
        "content": "<p>I'm doing <code>cargo test</code> and am hitting Timeout errors during <code>test_vfs_works</code>, which may or may not be related to <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/734\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/734\">rust-analyzer#734</a></p>",
        "id": 158110168,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549970799
    },
    {
        "content": "<p>I don't know, but this seems unlikely. That is, I'd say its \"90% works out of the box\", but some weired shenanigans are not excluded.</p>",
        "id": 158110169,
        "sender_full_name": "matklad",
        "timestamp": 1549970799
    },
    {
        "content": "<p>aaaa</p>",
        "id": 158110171,
        "sender_full_name": "matklad",
        "timestamp": 1549970806
    },
    {
        "content": "<p>that is a known issue</p>",
        "id": 158110173,
        "sender_full_name": "matklad",
        "timestamp": 1549970809
    },
    {
        "content": "<p>So I shouldn't bother with <code>cargo test</code> for now?</p>",
        "id": 158110188,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549970830
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/734\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/734\">https://github.com/rust-analyzer/rust-analyzer/issues/734</a></p>",
        "id": 158110190,
        "sender_full_name": "matklad",
        "timestamp": 1549970832
    },
    {
        "content": "<p>Well, it's best to fix the issue, or to disable these tests on macos</p>",
        "id": 158110203,
        "sender_full_name": "matklad",
        "timestamp": 1549970853
    },
    {
        "content": "<p>I will note that my stack trace points to a  different line number, I think...</p>",
        "id": 158110204,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549970857
    },
    {
        "content": "<p>Yeah but I'm not even 100% sure what the issue is right now</p>",
        "id": 158110208,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549970869
    },
    {
        "content": "<p>they say that they are getting to vfs.rs:82</p>",
        "id": 158110252,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549970886
    },
    {
        "content": "<p>I'm getting it on vfs.rs:71</p>",
        "id": 158110262,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549970915
    },
    {
        "content": "<p>(but maybe that is an artifact of changes to the code since that bug was filed.)</p>",
        "id": 158110268,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549970929
    },
    {
        "content": "<p>this test is about watching file system for changes. We hit many curious issues in this subsystem and upstreamed a couple of fixed to the notify library we use</p>",
        "id": 158110276,
        "sender_full_name": "matklad",
        "timestamp": 1549970942
    },
    {
        "content": "<p>in particular I am hitting it on <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_vfs/tests/vfs.rs#L71\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_vfs/tests/vfs.rs#L71\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_vfs/tests/vfs.rs#L71</a></p>",
        "id": 158110301,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549970986
    },
    {
        "content": "<p>Reported line in repo at time of issue filing: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/55408081b05f79947f7ce4692b31be584aef4657/crates/ra_vfs/tests/vfs.rs#L82\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/55408081b05f79947f7ce4692b31be584aef4657/crates/ra_vfs/tests/vfs.rs#L82\">https://github.com/rust-analyzer/rust-analyzer/blob/55408081b05f79947f7ce4692b31be584aef4657/crates/ra_vfs/tests/vfs.rs#L82</a></p>",
        "id": 158110381,
        "sender_full_name": "davidtwco",
        "timestamp": 1549971046
    },
    {
        "content": "<p>ah okay so it is the same line then</p>",
        "id": 158110388,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549971060
    },
    {
        "content": "<p>Two thoughs:</p>\n<ul>\n<li>try increasing timeout in the 10th line</li>\n<li>try to add std::thread::sleep_ms(2000) on line 69 (<em>before</em> fs::write call)</li>\n</ul>",
        "id": 158110407,
        "sender_full_name": "matklad",
        "timestamp": 1549971091
    },
    {
        "content": "<p>I increased timeout to 10 seconds earlier. Didn't seem to help, so I didn't try larger values. But I can give it a shot</p>",
        "id": 158110431,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549971122
    },
    {
        "content": "<p>My hypothesis is (from a similar bug in Cargo) that MacOS misses modifications to a file if they withing the same seconds</p>",
        "id": 158110461,
        "sender_full_name": "matklad",
        "timestamp": 1549971127
    },
    {
        "content": "<p>though maybe I'll try adding the sleep call first</p>",
        "id": 158110464,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549971131
    },
    {
        "content": "<p>the sleep call before write could help with that I think</p>",
        "id": 158110472,
        "sender_full_name": "matklad",
        "timestamp": 1549971147
    },
    {
        "content": "<blockquote>\n<p>My hypothesis is (from a similar bug in Cargo) that MacOS misses modifications to a file if they withing the same seconds</p>\n</blockquote>\n<p>Hmm interesting. I recall various timestamp issues when I worked on tango; I guess I had hoped that a notification system wouldn't fall victim to similar issues...</p>",
        "id": 158110487,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549971181
    },
    {
        "content": "<p>grr sleep did not fix things either. Hmm.</p>",
        "id": 158110599,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549971331
    },
    {
        "content": "<p>yeah, I wouldn't call our file watching service reliable, it has issues.... Though luckily its not <em>that</em> important: most change notifications go via LSP, which works great. VFS watching is for cases like <code>git checkokut other-branch</code>.</p>",
        "id": 158110608,
        "sender_full_name": "matklad",
        "timestamp": 1549971348
    },
    {
        "content": "<p>Given ^, I am fine with <code>#[cfg_attr(macos, ignore)] // #734</code></p>",
        "id": 158110672,
        "sender_full_name": "matklad",
        "timestamp": 1549971418
    },
    {
        "content": "<p>(This is of course a schrodinger's-cat style bug where if I add instrumentation to try to learn more about the actual timestamps I might disrupt the replication of the bug itself...)</p>",
        "id": 158110696,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549971444
    },
    {
        "content": "<p>well, if adding timestamps fixes the test....</p>",
        "id": 158110714,
        "sender_full_name": "matklad",
        "timestamp": 1549971477
    },
    {
        "content": "<p>I'll poke at this a tiny bit more before resorting to cfg-ignoring it</p>",
        "id": 158110754,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549971484
    },
    {
        "content": "<p>It might be useful to stick <code>dbg!(event)</code> here: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_vfs/src/io.rs#L151\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_vfs/src/io.rs#L151\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_vfs/src/io.rs#L151</a></p>",
        "id": 158110785,
        "sender_full_name": "matklad",
        "timestamp": 1549971548
    },
    {
        "content": "<p>that would be even we get from the library.</p>",
        "id": 158110795,
        "sender_full_name": "matklad",
        "timestamp": 1549971564
    },
    {
        "content": "<p>Isn't that going to emit output to stdout/stderr? That's the sort of thing I was assuming would disrupt the bug</p>",
        "id": 158110803,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549971590
    },
    {
        "content": "<p>I was thinking i might emit data to a separate (in-memory) log that could be printed after the bug was observed</p>",
        "id": 158110856,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549971610
    },
    {
        "content": "<p>but I guess it doesn't hurt to try adding the <code>dbg!</code> call and see what happens, if the bug continues to reproduce then no harm done</p>",
        "id": 158110863,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549971631
    },
    {
        "content": "<p>If sleeps don't disrupt the bug, there's a change that dbg won't as well, yeah</p>",
        "id": 158110898,
        "sender_full_name": "matklad",
        "timestamp": 1549971710
    },
    {
        "content": "<p>(look at that, it does indeed continue to reproduce. great!)</p>",
        "id": 158110900,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549971721
    },
    {
        "content": "<p>/me is going to run and get lunch before its all gone. I'll be back in a 10 or 15 minuts</p>",
        "id": 158110951,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549971757
    },
    {
        "content": "<p><a href=\"https://github.com/passcod/notify/issues/150\" target=\"_blank\" title=\"https://github.com/passcod/notify/issues/150\">https://github.com/passcod/notify/issues/150</a> seems vaguely related</p>",
        "id": 158111120,
        "sender_full_name": "matklad",
        "timestamp": 1549971980
    },
    {
        "content": "<blockquote>\n<p>This means that if you open a file, write to it, close the file, and repeat, you will receive a single event _unless_ there is some delay between the two opens; in very simple testing this delay seems to be about 500ms.</p>\n</blockquote>\n<p>From <a href=\"https://github.com/passcod/notify/issues/147\" target=\"_blank\" title=\"https://github.com/passcod/notify/issues/147\">https://github.com/passcod/notify/issues/147</a></p>",
        "id": 158111654,
        "sender_full_name": "matklad",
        "timestamp": 1549972639
    },
    {
        "content": "<p>From that same issue:</p>\n<blockquote>\n<blockquote>\n<p>\"What's your high-level goal here?  If you're just interested in a single file, James's suggestion would work.  If you're trying to monitor an entire hierarchy of files, you're going to have to rethink you're assumptions.  FSEvents is designed to notify you about events in the file system so that you can then go look in the file system to find the current state of things and sync based on that.  It's not designed to feed you a stream of events with sufficient fidelity to reconstruct how the file system go into its current state.\"</p>\n</blockquote>\n<p>– <a href=\"https://lists.apple.com/archives/filesystem-dev/2016/Mar/msg00004.html\" target=\"_blank\" title=\"https://lists.apple.com/archives/filesystem-dev/2016/Mar/msg00004.html\">https://lists.apple.com/archives/filesystem-dev/2016/Mar/msg00004.html</a></p>\n</blockquote>",
        "id": 158112724,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549973936
    },
    {
        "content": "<p>yeah, that's roughly what we are doing: if we receive notification, a separate thread goes and reads the file from disk</p>",
        "id": 158112841,
        "sender_full_name": "matklad",
        "timestamp": 1549974108
    },
    {
        "content": "<p>Hmm, interesting: Adding the sleep_ms call does seem to cause two events to be observed, rather than just one (for the <code>Create(.../a/b/baz.rs)</code>, that is). <strong>But</strong> regardless of whether the two events have been folded into one or not, I still get the timeout.</p>",
        "id": 158112843,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549974113
    },
    {
        "content": "<p>Oh wait, I should be seeing the <code>Write</code> event, and I'm not. (or let me double-check that)</p>",
        "id": 158112899,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549974152
    },
    {
        "content": "<p>hmm. Is the <code>fs::write</code> call going to cause a <code>Create</code> event to be emitted here?</p>",
        "id": 158112954,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549974225
    },
    {
        "content": "<p>it shouldn't cause a create</p>",
        "id": 158113025,
        "sender_full_name": "matklad",
        "timestamp": 1549974282
    },
    {
        "content": "<p>file already exists</p>",
        "id": 158113032,
        "sender_full_name": "matklad",
        "timestamp": 1549974286
    },
    {
        "content": "<p>Yeah that's what I thought too, but I'm definitely seeing a <code>Create</code> (and only a <code>Create</code>) after the long pause injected by the <code>sleep_ms</code></p>",
        "id": 158113063,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549974313
    },
    {
        "content": "<p>and this is a <code>write(2)</code>, not an atomic editors create temp file &amp; rename</p>",
        "id": 158113069,
        "sender_full_name": "matklad",
        "timestamp": 1549974316
    },
    {
        "content": "<p>aha! That explains the bug</p>",
        "id": 158113153,
        "sender_full_name": "matklad",
        "timestamp": 1549974389
    },
    {
        "content": "<p>what? Is the file being auto-deleted or something in the interim?</p>",
        "id": 158113160,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549974406
    },
    {
        "content": "<p>if we get Create instead of Change, we don't emit a change because file already exists in the vfs</p>",
        "id": 158113167,
        "sender_full_name": "matklad",
        "timestamp": 1549974423
    },
    {
        "content": "<p>ah. and so we don't see any <code>VfsChange</code> and so the task times out</p>",
        "id": 158113187,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549974453
    },
    {
        "content": "<p>So the next Q might be: WHy are we seeing a <code>Change</code> here</p>",
        "id": 158113202,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549974474
    },
    {
        "content": "<p>I'm going to rename this topic</p>",
        "id": 158113210,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549974481
    },
    {
        "content": "<p>why  we get Create in the first place is beyond me, but I guess that is just \"operating systems are diffrent\"</p>",
        "id": 158113234,
        "sender_full_name": "matklad",
        "timestamp": 1549974482
    },
    {
        "content": "<p>I think \"why\" should not matter: I think the high-level bug is that we differentiate between Crate/Change at all</p>",
        "id": 158113273,
        "sender_full_name": "matklad",
        "timestamp": 1549974522
    },
    {
        "content": "<p>Given that this all vfs thing is supposed to be eventually (or quiescently) consistent, we should rely on telling if the file is created or changed.</p>",
        "id": 158113330,
        "sender_full_name": "matklad",
        "timestamp": 1549974582
    },
    {
        "content": "<p>s/rely/not rely/</p>",
        "id": 158113352,
        "sender_full_name": "matklad",
        "timestamp": 1549974599
    },
    {
        "content": "<p>(I'm going to see if I can adjust Zulip's hyperlinking for our stream.)</p>",
        "id": 158113404,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549974609
    },
    {
        "content": "<p>will try to  write a fix shortly!</p>",
        "id": 158113421,
        "sender_full_name": "matklad",
        "timestamp": 1549974626
    },
    {
        "content": "<blockquote>\n<p>(I'm going to see if I can adjust Zulip's hyperlinking for our stream.)</p>\n</blockquote>\n<p>((did someone fix it in parallel with me, or did I just not notice two hyperlinks before...?))</p>",
        "id": 158113533,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549974745
    },
    {
        "content": "<p>/me touched nothing</p>",
        "id": 158113545,
        "sender_full_name": "matklad",
        "timestamp": 1549974761
    },
    {
        "content": "<p>Ah okay I think <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> assisted</p>",
        "id": 158113559,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549974788
    },
    {
        "content": "<p>You'll see now that if you write <code>rust-analyzer#&lt;number&gt;</code> in a topic or in a chat message, the linkifer will operate on it.</p>",
        "id": 158113582,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549974825
    },
    {
        "content": "<p>e.g. <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/734\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/734\">rust-analyzer#734</a></p>",
        "id": 158113584,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549974831
    },
    {
        "content": "<p>we have found this to be pretty useful way to structure topics</p>",
        "id": 158113639,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549974866
    },
    {
        "content": "<p>though it is a bit funny that there are now two arrows (one pointing to rust-analyzer/rust-analyzer#734 and another to rust-lang/rust#734); unfortunately the Zulip's OS X app API does not give any tooltip or other preview of which arrow is which...</p>",
        "id": 158113667,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549974924
    },
    {
        "content": "<p>filed <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/805\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/805\">https://github.com/rust-analyzer/rust-analyzer/pull/805</a> We might need the delay  as well though</p>",
        "id": 158115429,
        "sender_full_name": "matklad",
        "timestamp": 1549976548
    },
    {
        "content": "<p>(linkifier will work for PRs too: <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/805\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/805\">rust-analyzer#805</a>)</p>",
        "id": 158115441,
        "sender_full_name": "davidtwco",
        "timestamp": 1549976569
    },
    {
        "content": "<p>Can it work in the reverse direction? It's easier to copy URL from the address bar than to type in the pr number :)</p>",
        "id": 158115496,
        "sender_full_name": "matklad",
        "timestamp": 1549976634
    },
    {
        "content": "<p>Not that I'm aware of.</p>",
        "id": 158115603,
        "sender_full_name": "davidtwco",
        "timestamp": 1549976748
    },
    {
        "content": "<p>I don't think its a breach of ettiquette to post urls if that better fits your workflow. (Well, of course its nicer for the topic for it to use the shorter linkified version)</p>",
        "id": 158115700,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549976840
    },
    {
        "content": "<p>The main benefit of linkification is when one is typing on the fly, IMO.</p>",
        "id": 158115708,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549976853
    },
    {
        "content": "<p>You can use standard Markdown linking syntax, so <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/805\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/805\">#805</a>.</p>",
        "id": 158115718,
        "sender_full_name": "davidtwco",
        "timestamp": 1549976871
    },
    {
        "content": "<p><code>You can use standard Markdown linking syntax, so [#805](https://github.com/rust-analyzer/rust-analyzer/pull/805).</code></p>",
        "id": 158115767,
        "sender_full_name": "davidtwco",
        "timestamp": 1549976894
    },
    {
        "content": "<p>Oh yeah, that might be the easiest way, when writing comments in the channel. But does that syntax work in topics?</p>",
        "id": 158115778,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549976921
    },
    {
        "content": "<p>(for some reason I thought it didn't)</p>",
        "id": 158115782,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549976929
    },
    {
        "content": "<p>Not sure. I'd just use a linkifier in topics.</p>",
        "id": 158115785,
        "sender_full_name": "davidtwco",
        "timestamp": 1549976939
    },
    {
        "content": "<p>yeah it doesn't work (I just tested; it renders as the raw markdown)</p>",
        "id": 158115811,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549976970
    },
    {
        "content": "<p>circling back to the original topic, looks like <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/805\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/805\">rust-analyzer#805</a> didn't actually fix the issue, even with added timeouts  (the ad-hoc mac build in <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/803\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/803\">rust-analyzer#803</a> fails) :(</p>",
        "id": 158116740,
        "sender_full_name": "matklad",
        "timestamp": 1549977895
    },
    {
        "content": "<p>yeah I'm looking into it</p>",
        "id": 158116760,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549977918
    },
    {
        "content": "<p>okay it looks to me like <code>io::handle_change</code> is falling into the <code>None</code> branch <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/abc5d377e2957af962c33d565fd550eb504dbbee/crates/ra_vfs/src/io.rs#L202\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/abc5d377e2957af962c33d565fd550eb504dbbee/crates/ra_vfs/src/io.rs#L202\">here</a> a lot.</p>",
        "id": 158127420,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549986637
    },
    {
        "content": "<p>ir</p>",
        "id": 158127439,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549986647
    },
    {
        "content": "<p>or rather, its falling into that branch during the lookup of <code>.../a/b/baz.rs</code> (where <code>...</code> is the tempdir)</p>",
        "id": 158127478,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549986680
    },
    {
        "content": "<p>oh, that makes sense for a <code>Create</code> call.</p>",
        "id": 158127518,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549986716
    },
    {
        "content": "<p>(or maybe it doesn't)</p>",
        "id": 158127574,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549986731
    },
    {
        "content": "<p>find should return <code>Some</code> even if file does not exist</p>",
        "id": 158127605,
        "sender_full_name": "matklad",
        "timestamp": 1549986779
    },
    {
        "content": "<p>yeah it seems like the code there is assuming that <code>find</code> will give you the root even if the file itself hasn't been created</p>",
        "id": 158127622,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549986794
    },
    {
        "content": "<p>It doesn't do syscalls and works just on path strings</p>",
        "id": 158127633,
        "sender_full_name": "matklad",
        "timestamp": 1549986806
    },
    {
        "content": "<p>but does that match the implementation of <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_vfs/src/lib.rs#L114\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_vfs/src/lib.rs#L114\">find</a> ?</p>",
        "id": 158127647,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549986821
    },
    {
        "content": "<p>Could this be someting about case-insensitive file system?</p>",
        "id": 158127651,
        "sender_full_name": "matklad",
        "timestamp": 1549986824
    },
    {
        "content": "<p>contains is <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_vfs/src/lib.rs#L71-L72\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_vfs/src/lib.rs#L71-L72\">this</a></p>",
        "id": 158127722,
        "sender_full_name": "matklad",
        "timestamp": 1549986855
    },
    {
        "content": "<p>it checks for prefix</p>",
        "id": 158127727,
        "sender_full_name": "matklad",
        "timestamp": 1549986859
    },
    {
        "content": "<p>hmm okay I'll look deeper</p>",
        "id": 158127747,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549986880
    },
    {
        "content": "<p>There's a single place in the test where we expect None:</p>\n<div class=\"codehilite\"><pre><span></span>    // should be ignored\n    fs::create_dir_all(dir.path().join(&quot;a/target&quot;)).unwrap();\n    fs::write(&amp;dir.path().join(&quot;a/target/new.rs&quot;), &quot;ignore me&quot;).unwrap();\n</pre></div>",
        "id": 158127841,
        "sender_full_name": "matklad",
        "timestamp": 1549986955
    },
    {
        "content": "<p>everything else should return Some</p>",
        "id": 158127899,
        "sender_full_name": "matklad",
        "timestamp": 1549986968
    },
    {
        "content": "<p>This <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/abc5d377e2957af962c33d565fd550eb504dbbee/crates/ra_vfs/src/lib.rs#L71\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/abc5d377e2957af962c33d565fd550eb504dbbee/crates/ra_vfs/src/lib.rs#L71\">strip_prefix call</a> is returning <code>Err(StripPrefixError)</code> for <code> \"/private/var/folders/68/bxt927zn2tnbpj7qf4_4vpk80000gn/T/.tmphSepLW/a/b/baz.rs\"</code></p>",
        "id": 158128407,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549987319
    },
    {
        "content": "<p><code>SepLW</code> &lt;- I bet that's case sensitivity</p>",
        "id": 158128540,
        "sender_full_name": "matklad",
        "timestamp": 1549987401
    },
    {
        "content": "<p>more detail:<br>\n<code>path.strip_prefix(&amp;self.root)</code> is returning that error for </p>\n<div class=\"codehilite\"><pre><span></span>path:  &quot;/private/var/folders/68/bxt927zn2tnbpj7qf4_4vpk80000gn/T/.tmpWuoGmP/a/b/baz.rs&quot;,\nself.root:  &quot;/var/folders/68/bxt927zn2tnbpj7qf4_4vpk80000gn/T/.tmpWuoGmP/a&quot;\n</pre></div>",
        "id": 158128631,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549987450
    },
    {
        "content": "<p>so, the first component is different...</p>",
        "id": 158128675,
        "sender_full_name": "matklad",
        "timestamp": 1549987482
    },
    {
        "content": "<p>I think its the <code>/private</code> there, yeah</p>",
        "id": 158128686,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549987491
    },
    {
        "content": "<p>On \"OS X\", <code>/var</code> is symlink to <code>/private/var</code></p>",
        "id": 158128898,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549987643
    },
    {
        "content": "<p>Does VFS attempt to normalize symbolic links in its internal paths? If not, should it?</p>",
        "id": 158128984,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549987684
    },
    {
        "content": "<p>No, it doesn't</p>",
        "id": 158128993,
        "sender_full_name": "matklad",
        "timestamp": 1549987693
    },
    {
        "content": "<p>I think it <em>should</em>, though I am not 100% sure</p>",
        "id": 158129033,
        "sender_full_name": "matklad",
        "timestamp": 1549987732
    },
    {
        "content": "<p>because under the assumption that this notification is constructed by the notification library, I'm not sure how we otherwise get around ths</p>",
        "id": 158129061,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549987759
    },
    {
        "content": "<p>other than by special casing</p>",
        "id": 158129063,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549987765
    },
    {
        "content": "<p>Ie, the notify library definitely returns canonical paths, but I am not sure if language client returns canonical paths...</p>",
        "id": 158129091,
        "sender_full_name": "matklad",
        "timestamp": 1549987790
    },
    {
        "content": "<p>(i.e. instead of trying to normalize symlinks everywhere, we could just recognize that this behavior can arise for the tempdir results and just normalize their path components)</p>",
        "id": 158129119,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549987802
    },
    {
        "content": "<p>Maybe but windows FAT32/NTFS is also case-insensitive and windows doesn't seem to share the same problem.</p>",
        "id": 158129176,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1549987814
    },
    {
        "content": "<p>yeah, I was wrong, it's not case sensitity after all</p>",
        "id": 158129203,
        "sender_full_name": "matklad",
        "timestamp": 1549987838
    },
    {
        "content": "<p>The safest thing to do would be to change RootConfig to</p>\n<div class=\"codehilite\"><pre><span></span>RootConfig {\n    root: PathBuf,\n    // result of root.canonicalize() if it is different from root\n    canonical_root: Option&lt;PathBuf&gt;\n}\n</pre></div>\n\n\n<p>and check both roots in <code>contains</code></p>",
        "id": 158129386,
        "sender_full_name": "matklad",
        "timestamp": 1549987949
    },
    {
        "content": "<p>Okay I'll look into that.</p>",
        "id": 158129461,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549988036
    },
    {
        "content": "<p>I've looked at the LSP speck, and how paths should be handled is basically unspecified. The relevant issue is <a href=\"https://github.com/Microsoft/language-server-protocol/issues/669\" target=\"_blank\" title=\"https://github.com/Microsoft/language-server-protocol/issues/669\">#669</a>.</p>",
        "id": 158130159,
        "sender_full_name": "matklad",
        "timestamp": 1549988524
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> given that we've only hit this in tests, perhaps we can use a less general solution? Let's call <code>.canonicalize()</code> in the test itself?</p>",
        "id": 158130194,
        "sender_full_name": "matklad",
        "timestamp": 1549988564
    },
    {
        "content": "<p>urrr</p>",
        "id": 158130216,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549988583
    },
    {
        "content": "<p>I'm skeptical of that</p>",
        "id": 158130222,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549988586
    },
    {
        "content": "<p>well, I suppose it depends</p>",
        "id": 158130237,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549988605
    },
    {
        "content": "<p>I think that the setup with two roots is probably right long term, but I don't feel too easy about makeing VFS code more complcated.</p>",
        "id": 158130247,
        "sender_full_name": "matklad",
        "timestamp": 1549988615
    },
    {
        "content": "<p>your thinking is that the use of tempdir is limited to tests alone?</p>",
        "id": 158130250,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549988619
    },
    {
        "content": "<p>I was thinking about that yeah, but now I understand that I am wrong ;-(</p>",
        "id": 158130310,
        "sender_full_name": "matklad",
        "timestamp": 1549988645
    },
    {
        "content": "<p>User totally can have a project in the symlinked directory</p>",
        "id": 158130326,
        "sender_full_name": "matklad",
        "timestamp": 1549988655
    },
    {
        "content": "<p>OMG i am late to pick up myso</p>",
        "id": 158130335,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549988663
    },
    {
        "content": "<p>my son</p>",
        "id": 158130337,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549988665
    },
    {
        "content": "<p>bye!</p>",
        "id": 158130338,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549988666
    },
    {
        "content": "<p>bye!</p>",
        "id": 158130345,
        "sender_full_name": "matklad",
        "timestamp": 1549988672
    },
    {
        "content": "<p>I don't understand. My recollection of my day today is that I did many runs and each time I would search the output log for the text <code>new.rs</code> and always came up empty</p>",
        "id": 158477717,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550092596
    },
    {
        "content": "<p>and yet somehow I posted a gist that clearly had a rename of <code>new.rs</code> in the output</p>",
        "id": 158477753,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550092629
    },
    {
        "content": "<p>oh wait, no, I added that line</p>",
        "id": 158477792,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550092663
    },
    {
        "content": "<p>(instrumented my own <code>fn fs_rename</code> function that i added)</p>",
        "id": 158477811,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550092676
    },
    {
        "content": "<p>I actually wonder if we should spend more time chasing this bug  <strong>at this time</strong>? There's an upstream issue about adding an easier and cross platform API:<a href=\"https://github.com/passcod/notify/issues/175\" target=\"_blank\" title=\"https://github.com/passcod/notify/issues/175\">https://github.com/passcod/notify/issues/175</a></p>",
        "id": 158477872,
        "sender_full_name": "matklad",
        "timestamp": 1550092699
    },
    {
        "content": "<p>If it is implemented (and <a href=\"https://github.com/vemoo/\" target=\"_blank\" title=\"https://github.com/vemoo/\">https://github.com/vemoo/</a> is working on it) , than presumably this will become the problem of the library.</p>",
        "id": 158477940,
        "sender_full_name": "matklad",
        "timestamp": 1550092748
    },
    {
        "content": "<p>That is, I somewhat blame the API here, which looks like it exposes platform differences :)</p>",
        "id": 158478010,
        "sender_full_name": "matklad",
        "timestamp": 1550092797
    },
    {
        "content": "<p>well even vemoo said they were surprised by the results here on this bug</p>",
        "id": 158478072,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550092812
    },
    {
        "content": "<p>but your point is that you think we might manage to actually build upon something that exhibits consistent behavior on all platforms? It would be nice.</p>",
        "id": 158478249,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550092934
    },
    {
        "content": "<p>Yeah, that's the problem: we are observing platform differences which arguably should be handled by the upstream library.</p>",
        "id": 158478254,
        "sender_full_name": "matklad",
        "timestamp": 1550092939
    },
    {
        "content": "<p>I can agree that it may not be a great idea to try to fix this problem 100% right now</p>",
        "id": 158478320,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550092999
    },
    {
        "content": "<p>and maybe better to just <code>#[cfg]</code>-out this (or all) vfs tests on OS X for now</p>",
        "id": 158478335,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550093025
    },
    {
        "content": "<p>Like, the <code>vfs/io</code> module is waaay to complicated, and the best long-term strategy would be to move a bulk of it to a completely general purpose library. So I suggest watchicng how notify#175 develops for the time being. There's also a planned rewrite of the notify library...</p>",
        "id": 158478392,
        "sender_full_name": "matklad",
        "timestamp": 1550093048
    },
    {
        "content": "<p>But it's good that we've fixed that <code>canonicalize</code> bug! That's defenitelly was a problem</p>",
        "id": 158478426,
        "sender_full_name": "matklad",
        "timestamp": 1550093076
    },
    {
        "content": "<p>still I want to at least get far enough here to see if there is a notify bug lurking here</p>",
        "id": 158478427,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550093077
    },
    {
        "content": "<p>Good! But don't feel bad about cfg-ing out this part of the test on MacOs if you get to far in the weeds!</p>",
        "id": 158478574,
        "sender_full_name": "matklad",
        "timestamp": 1550093172
    },
    {
        "content": "<p>also, could you rustfmthttps://github.com/rust-analyzer/rust-analyzer/pull/818?</p>",
        "id": 158478594,
        "sender_full_name": "matklad",
        "timestamp": 1550093199
    },
    {
        "content": "<p>oh yeah let me take care of that</p>",
        "id": 158478767,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550093333
    },
    {
        "content": "<p>What do you think about trying to add explicit <code>.sync_data()</code> or <code>.sync_all()</code> calls to the VFS tests, though?</p>",
        "id": 158479132,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550093608
    },
    {
        "content": "<p>Do you think that shouldn't be necessary? It seems more robust to me than just adding delays (i.e. calls to <code>sleep()</code>)...</p>",
        "id": 158479148,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550093625
    },
    {
        "content": "<p>(assuming one either puts them into the right places, or consistently uses a helper that always syncs, like the one I added in the gist I posted)</p>",
        "id": 158479210,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550093652
    },
    {
        "content": "<p>I would think that neither delays nor syncs should ideally be necessary. </p>\n<p>I think the test currently actually is written in a pretty good way, in that we always try to pump all of the events after each modification.</p>\n<p>That is, the test should work because of causality, not because of the good timing.</p>",
        "id": 158479273,
        "sender_full_name": "matklad",
        "timestamp": 1550093757
    },
    {
        "content": "<p>so an <code>fs::write(...)</code> invocation should cause the notify library to fire, regardless of whether the write has been pushed out to the disk?</p>",
        "id": 158479363,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550093808
    },
    {
        "content": "<p>or your point is that the <code>process_tasks</code> call should be waiting long enough for the event to come through?</p>",
        "id": 158479391,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550093841
    },
    {
        "content": "<p>More precisely, fs::write should trigger notify withing three seconds after the file descriptor is closed</p>",
        "id": 158479454,
        "sender_full_name": "matklad",
        "timestamp": 1550093891
    },
    {
        "content": "<p>Like, it's not unreasonable to assume that file systems work this way, but I might be proven wrong here</p>",
        "id": 158479469,
        "sender_full_name": "matklad",
        "timestamp": 1550093918
    },
    {
        "content": "<blockquote>\n<p>or your point is that the process_tasks call should be waiting long enough for the event to come through?</p>\n</blockquote>\n<p>basically, yes. The test guarantees that we can't loose events (modulo bugs), and I hope that eventually we see all of the events, where \"eventually\" is less than 3 seconds</p>",
        "id": 158479554,
        "sender_full_name": "matklad",
        "timestamp": 1550094000
    },
    {
        "content": "<p>I can understand in principle. I guess I just wish I wasn't seeing behavior vary depending on whether I include the sync calls or not. But I should be taking more precise notes on which of the changes I am making here actually matter, and in what way they matter.</p>",
        "id": 158479649,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550094052
    },
    {
        "content": "<p>Hmm this also seems potentially relevant: <a href=\"http://wingolog.org/archives/2018/05/21/correct-or-inotify-pick-one\" target=\"_blank\" title=\"http://wingolog.org/archives/2018/05/21/correct-or-inotify-pick-one\">http://wingolog.org/archives/2018/05/21/correct-or-inotify-pick-one</a></p>",
        "id": 158479763,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550094143
    },
    {
        "content": "<p>yeah... I think you had some variability in exact raw events you have been observing? That should be OK I think: it is allowed to miss some of raw events as long as the last one is registered</p>",
        "id": 158479772,
        "sender_full_name": "matklad",
        "timestamp": 1550094157
    },
    {
        "content": "<blockquote>\n<p>Hmm this also seems potentially relevant: <a href=\"http://wingolog.org/archives/2018/05/21/correct-or-inotify-pick-one\" target=\"_blank\" title=\"http://wingolog.org/archives/2018/05/21/correct-or-inotify-pick-one\">http://wingolog.org/archives/2018/05/21/correct-or-inotify-pick-one</a></p>\n</blockquote>\n<p>(or maybe there's nothing there you don't already know)</p>",
        "id": 158479873,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550094251
    },
    {
        "content": "<p>interesting read! Together with that MacOS docs I think it implies that getting <strong>precise</strong> list of events is impossible, and useless, due to TOCTTOU.</p>\n<p>We however don't need a precise list: we need to know if things \"could have changed\" to be correct (that whole comment about quiescent consistency on TastResult). I think <em>that</em> should be achieavable.</p>",
        "id": 158480028,
        "sender_full_name": "matklad",
        "timestamp": 1550094378
    },
    {
        "content": "<p>well, better to say I hope :-)</p>",
        "id": 158480080,
        "sender_full_name": "matklad",
        "timestamp": 1550094449
    },
    {
        "content": "<p>this question may be pointless, given your earlier statement (that we'd be better off switching to a different/better cross-platform API), but I figure I'll ask it anyway: The vfs test architecture, if I understand correctly, seems to be built on the assumption that you can predict the exact number of events you should always receive in response to the operations that are performed in between each call to <code>process_tasks</code>, is that right?</p>",
        "id": 158480391,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550094700
    },
    {
        "content": "<p>this seems fundamentally at odds with the idea that sometimes events can be collapsed or missed</p>",
        "id": 158480454,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550094728
    },
    {
        "content": "<p>I don't have any immediate suggestions for a <em>better</em> test architecture, other than maybe allowing for a <del>subset</del> subsequence of the events to be observed and still consider it a passing test, depending on which subsequence you observe, that is.</p>",
        "id": 158480521,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550094791
    },
    {
        "content": "<blockquote>\n<p>I think it implies that getting precise list of events is impossible, and useless, due to TOCTTOU</p>\n</blockquote>\n<p>on windows too, if the OS buffer overflows; you're supposed to re-read your directory and start over, but after a cursory glance I'm not sure that the <code>notify</code> crate handles that</p>",
        "id": 158481147,
        "sender_full_name": "Laurențiu",
        "timestamp": 1550095253
    },
    {
        "content": "<p>There's a RESCAN event for that I think. As long as we <em>know</em> that we should rescan, I think we are fine.</p>",
        "id": 158481335,
        "sender_full_name": "matklad",
        "timestamp": 1550095386
    },
    {
        "content": "<blockquote>\n<p>/// At the moment <code>RESCAN</code> events aren't emitted on Windows.</p>\n</blockquote>",
        "id": 158481553,
        "sender_full_name": "Laurențiu",
        "timestamp": 1550095569
    },
    {
        "content": "<p>Explorer has a \"Refresh\" right-click menu option, maybe we should have one</p>",
        "id": 158481607,
        "sender_full_name": "Laurențiu",
        "timestamp": 1550095627
    },
    {
        "content": "<p>Okay I did some digging and I think that one way out of this in the short term could be to use the raw events rather than the debounced ones</p>",
        "id": 158524059,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550146194
    },
    {
        "content": "<p>I put up an issue at <a href=\"https://github.com/passcod/notify/issues/181\" target=\"_blank\" title=\"https://github.com/passcod/notify/issues/181\">https://github.com/passcod/notify/issues/181</a></p>",
        "id": 158524110,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550146207
    },
    {
        "content": "<p>the most bizarre thing is that in the common case, a rename of \"foo\" <strong>to</strong> \"bar\" on Mac OS X yields raw events that say that foo op was CREATE|RENAME|WRITE and bar op was REMOVE|RENAME. (Which strikes me as 100% backwards.) I don't know whether this is an OS X issue or some logic gone backwards in notify itself.</p>",
        "id": 158524181,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550146308
    },
    {
        "content": "<p>Interesting!</p>\n<p>Conceptually, I think like we should use debounced events</p>",
        "id": 158524530,
        "sender_full_name": "matklad",
        "timestamp": 1550146642
    },
    {
        "content": "<p>at this point I'm also wondering if part of the issue here is that notify is, AFAICT, still using the FSEvent backend</p>",
        "id": 158524604,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550146699
    },
    {
        "content": "<p>despite saying that it would switch to kqueue?</p>",
        "id": 158524609,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550146708
    },
    {
        "content": "<p>see here, namely: <a href=\"https://github.com/passcod/notify/pull/144#issuecomment-427560683\" target=\"_blank\" title=\"https://github.com/passcod/notify/pull/144#issuecomment-427560683\">https://github.com/passcod/notify/pull/144#issuecomment-427560683</a></p>",
        "id": 158524630,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550146739
    },
    {
        "content": "<p>maybe they mean in v5 it will use kqueue</p>",
        "id": 158524640,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550146747
    },
    {
        "content": "<p>Yeah, I think this is about v5</p>",
        "id": 158524661,
        "sender_full_name": "matklad",
        "timestamp": 1550146782
    },
    {
        "content": "<p>which now seems more remote than a year ago</p>",
        "id": 158524669,
        "sender_full_name": "matklad",
        "timestamp": 1550146794
    },
    {
        "content": "<p>in any case at this point I  am <em>super</em> curious if the problem is just someone swapped to/from somewhere in the notify/fsevent.rs code</p>",
        "id": 158524672,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550146801
    },
    {
        "content": "<p>yeah, I did a quick look at it, and it seems like a kind of code where it's easy to make subtle logic errors</p>",
        "id": 158524741,
        "sender_full_name": "matklad",
        "timestamp": 1550146854
    },
    {
        "content": "<p>I'm going to do a quick check there, I'm already this deep into this</p>",
        "id": 158524774,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550146912
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>  long term, we will need a reliable file watching service anyway, so it is a well-spent time</p>",
        "id": 158524997,
        "sender_full_name": "matklad",
        "timestamp": 1550147067
    },
    {
        "content": "<p>hmm all of notify's <a href=\"http://fsevents.rs\" target=\"_blank\" title=\"http://fsevents.rs\">fsevents.rs</a> test suite is cfg'ed-out under a <code>feature = \"timing_tests\"</code>. But several of them look like tests of basic functionality...</p>",
        "id": 158525333,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550147450
    },
    {
        "content": "<p>(and of course they've all bitrotted)</p>",
        "id": 158525353,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550147466
    },
    {
        "content": "<p>This comment in the <code>notify.rs</code> test suite may be relevant though:</p>\n<div class=\"codehilite\"><pre><span></span>    // macOS FsEvent needs some time to discard old events from its log.\n    sleep_macos(10);\n</pre></div>",
        "id": 158525440,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550147570
    },
    {
        "content": "<p>(but that's only 10ms; I thought it might represent seconds but it doesnt.)</p>",
        "id": 158525477,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550147626
    },
    {
        "content": "<blockquote>\n<p>the most bizarre thing is that in the common case, a rename of \"foo\" <strong>to</strong> \"bar\" on Mac OS X yields raw events that say that foo op was CREATE|RENAME|WRITE and bar op was REMOVE|RENAME. (Which strikes me as 100% backwards.) I don't know whether this is an OS X issue or some logic gone backwards in notify itself.</p>\n</blockquote>\n<p>This is something that is prevalent and can happen on any OS. This is because the APIs report actual syscalls if not information from block level drivers. Then, applications may implement their moves however they want.</p>",
        "id": 158526125,
        "sender_full_name": "nagisa",
        "timestamp": 1550148297
    },
    {
        "content": "<p>i.e. \"create -&gt; copy -&gt; delete old\" is a very commonplace approach to implememnt file movement.</p>",
        "id": 158526155,
        "sender_full_name": "nagisa",
        "timestamp": 1550148331
    },
    {
        "content": "<p>in order to derive any sort of semantic information and to figure out what has happened, you must do some serious interpretation and guesswork.</p>",
        "id": 158526238,
        "sender_full_name": "nagisa",
        "timestamp": 1550148389
    },
    {
        "content": "<p>okay, but wouldn't you expect \"delete old\" to map to a delete of foo, not bar?</p>",
        "id": 158526241,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550148397
    },
    {
        "content": "<p>oh that... well, all I can suggest is that most likely this is an artifact of the filesystem implementation in macos.</p>",
        "id": 158526270,
        "sender_full_name": "nagisa",
        "timestamp": 1550148469
    },
    {
        "content": "<p>there's definitely some magic happening in the layers here to reconstruct the operation from the events received from the FSEvents channel, I don't argue that point</p>",
        "id": 158526341,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550148519
    },
    {
        "content": "<p>and, as a reminder, we luckily don't actually care about the precise operation, we care only about the path that could have been affected.</p>",
        "id": 158526375,
        "sender_full_name": "matklad",
        "timestamp": 1550148574
    },
    {
        "content": "<p>right. I would be entirely satisfied if I can coax <code>notify</code> into just telling us that <em>something happened</em> to any of {<code>foo</code>, <code>bar</code>}</p>",
        "id": 158526436,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550148606
    },
    {
        "content": "<p>(as in, get it to report both names back to us and then we look up what happened.)</p>",
        "id": 158526445,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550148622
    },
    {
        "content": "<p>but in the majority of the cases I'm looking at, the oddities in the raw event sequences seems to cause the debouncing to drop any mention of <code>foo</code>.</p>",
        "id": 158526483,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550148688
    },
    {
        "content": "<blockquote>\n<p>and, as a reminder, we luckily don't actually care about the precise operation, we care only about the path that could have been affected.</p>\n</blockquote>\n<p>Except it is entirely possible for the OS to not report any events for paths as well <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 158526484,
        "sender_full_name": "nagisa",
        "timestamp": 1550148689
    },
    {
        "content": "<p>Yeah, that's what that \"easy walkdir like API\" issue is about</p>",
        "id": 158526493,
        "sender_full_name": "matklad",
        "timestamp": 1550148711
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> hm, you mean I can write to a file and never be notified at all?</p>",
        "id": 158526543,
        "sender_full_name": "matklad",
        "timestamp": 1550148728
    },
    {
        "content": "<p>Yes, that is very possible.</p>",
        "id": 158526546,
        "sender_full_name": "nagisa",
        "timestamp": 1550148737
    },
    {
        "content": "<p>A common example of that would be anything related to storage not directly attached to the same motherboard to which the host CPU is attached to. Think: network storage.</p>",
        "id": 158526566,
        "sender_full_name": "nagisa",
        "timestamp": 1550148785
    },
    {
        "content": "<p>...okay, but surely extreme cases like that should not lead us to lower our expectations for (reliable) behavior in the very common case of the local file system?</p>",
        "id": 158526639,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550148849
    },
    {
        "content": "<p>Sure, yeah</p>",
        "id": 158526641,
        "sender_full_name": "matklad",
        "timestamp": 1550148860
    },
    {
        "content": "<p>In general, we already ignore errors from the watcher. That is, if a watcher fails to start for path for \"reasons\", we just ignore it and proceede without  waching</p>",
        "id": 158526666,
        "sender_full_name": "matklad",
        "timestamp": 1550148911
    },
    {
        "content": "<p>That works well because, for most of the changes, it's the editor who notifies us</p>",
        "id": 158526683,
        "sender_full_name": "matklad",
        "timestamp": 1550148940
    },
    {
        "content": "<p>Like, <code>vfs</code> watcher is a relatively new addition, we haven't watched a file system <strong>at all</strong> for a long time, and that actually worked pretty good. As is, you'd have to restart rust-analyzer when you switch git branches to force a rescan, but normal changes via VS Code worked ok</p>",
        "id": 158526761,
        "sender_full_name": "matklad",
        "timestamp": 1550149009
    },
    {
        "content": "<p>I would prefer something that works every time. The practice shows that some people do use rust with at least networked storage, and network storage is definitely not the only example of this problem.</p>\n<p>Whatever is done here, please just keep in mind that this is possible and provide <em>options</em> to your end users.</p>",
        "id": 158526794,
        "sender_full_name": "nagisa",
        "timestamp": 1550149042
    },
    {
        "content": "<p>(not that rustc works with networked storage right now, IIRC there are some ICEs here and there)</p>",
        "id": 158526808,
        "sender_full_name": "nagisa",
        "timestamp": 1550149066
    },
    {
        "content": "<p>I certainly wouldn't object to full refresh (or \"rescan\", whatever terminology is), either periodic and/or via-ui-command</p>",
        "id": 158526886,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550149108
    },
    {
        "content": "<p>Yeah, UI command for \"refresh\"  is generally required.</p>",
        "id": 158526918,
        "sender_full_name": "matklad",
        "timestamp": 1550149148
    },
    {
        "content": "<p>very odd. Some of the notify debouncing tests wait only 10ms after setting up the initial state. Others wait 35,000ms. (Specifically for Mac OS X, that is)</p>",
        "id": 158527215,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550149430
    },
    {
        "content": "<p>(well, maybe not so odd, if people just add the delays in an ad hoc manner to make the tests pass. I just would have expected uniform treatment.)</p>",
        "id": 158528376,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550150497
    },
    {
        "content": "<p>So, the fundamental problem with vfs is that we don't test it on mac and windows on the CI...</p>\n<p>At the same time, I don't want to add Windows and Mac to CI in general, to keep CI fast....</p>\n<p>What about moving <code>ra_vfs</code> to a separate repo with a more extensive CI setup? There's nothing specific to Rust language in the vfs, so presumably we could just publish it to <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a>? It has a few local deps, but I think we can get rid of them.</p>",
        "id": 158560412,
        "sender_full_name": "matklad",
        "timestamp": 1550174973
    },
    {
        "content": "<p>This sounds promising</p>",
        "id": 158561559,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550175862
    },
    {
        "content": "<p>I'll try moving <code>ra_vfs</code> outside then (not today, but soonish). Might be a good opportunity to check azure pipelines as a universal CI for all platforms as well.</p>\n<p>One thing I am not sure about is if \"memory overlay\" bit should be in the separate repo or in the main repo. Currently it is a part of VFS, but I can image a factoring where VFS deals only with files on disk, and in-memory stuff is composed on top.  I am inclined to move vfs as is.</p>",
        "id": 158608227,
        "sender_full_name": "matklad",
        "timestamp": 1550230919
    },
    {
        "content": "<p>Okay cool</p>",
        "id": 158609157,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550232106
    },
    {
        "content": "<p>I'm just happy to put a pin in this task. It was educational but also a bit frustrating at times.</p>",
        "id": 158609198,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550232124
    },
    {
        "content": "<p>Regarding PR <a href=\"https://github.com/rust-lang/rust/issues/837\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/837\">#837</a>, I briefly considering trying to also put in all the 35 second delays that seemed to help, guarded under something like <code>#[cfg(feature=\"slow_and_steady_because_fsevents\")]</code>. But I think in practice no one would ever use it.</p>",
        "id": 158609299,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550232254
    }
]