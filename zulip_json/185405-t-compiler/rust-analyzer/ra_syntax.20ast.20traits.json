[
    {
        "content": "<p>Hey!</p>\n<p>Question regarding the <code>ast</code> traits defined in <code>ra_syntax/src/ast.rs</code>, such as <code>NameOwner</code>. At what point do you consider adding a new trait ?</p>\n<p>This came up with <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/897\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/897\">rust-analyzer#897</a> when working with ast::ConstDef &amp; ast::StaticDef, both have a <code>type_ref</code> option, which also appear in multiple other nodes as well. Is there a reason there is no <code>TypeRefOwner</code> trait or could I add one and replace the options <code>TypeRef</code> in <code>grammar.ron</code> with trait <code>TypeRefOwner</code> and then use <code>TypeRefOwner</code> in the trait bounds?</p>\n<p>Similar method of working with nodes with <code>NameOwner</code> and a <code>type_ref</code> occurs in <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/cec637a3a91f0a34989dfde15ea853bbe8dc8a53/crates/ra_ide_api_light/src/structure.rs#L48\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/cec637a3a91f0a34989dfde15ea853bbe8dc8a53/crates/ra_ide_api_light/src/structure.rs#L48\">https://github.com/rust-analyzer/rust-analyzer/blob/cec637a3a91f0a34989dfde15ea853bbe8dc8a53/crates/ra_ide_api_light/src/structure.rs#L48</a></p>",
        "id": 159331318,
        "sender_full_name": "vipentti",
        "timestamp": 1551095495
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204303\">@vipentti</span> in general it's always a good idea to add traits to share AST fuctionlity</p>",
        "id": 159331906,
        "sender_full_name": "matklad",
        "timestamp": 1551096206
    },
    {
        "content": "<p>In this case all things with <code>: Type</code> should probably share a trait</p>",
        "id": 159331969,
        "sender_full_name": "matklad",
        "timestamp": 1551096271
    },
    {
        "content": "<p>I'd say something like</p>\n<div class=\"codehilite\"><pre><span></span>trait TypeAscriptionOwner {\n    fn ascribed_type(&amp;self) -&gt; Option&lt;TypeRef&gt;;\n}\n\nimpl TypeAscriptionOwner for const, static, let, param\n</pre></div>",
        "id": 159332000,
        "sender_full_name": "matklad",
        "timestamp": 1551096331
    },
    {
        "content": "<p>Is there a reason there is no <code>ast::WherePred</code> and a collection for <code>WhereClause</code> of predicates ?</p>",
        "id": 161351519,
        "sender_full_name": "vipentti",
        "timestamp": 1553179377
    },
    {
        "content": "<p>no, there's no reason</p>",
        "id": 161351717,
        "sender_full_name": "matklad",
        "timestamp": 1553179489
    },
    {
        "content": "<p>they should be added to grammar.ron</p>",
        "id": 161351732,
        "sender_full_name": "matklad",
        "timestamp": 1553179497
    },
    {
        "content": "<p>I am also passively thinking about rewriting AST bits of grammar.ron using a BNF-ish concrete sytnax</p>",
        "id": 161351797,
        "sender_full_name": "matklad",
        "timestamp": 1553179527
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>fn_def ::=\n   modifiers &#39;fn&#39; name param_list return_type? body?\n</pre></div>",
        "id": 161351901,
        "sender_full_name": "matklad",
        "timestamp": 1553179563
    },
    {
        "content": "<p>That sounds pretty cool actually</p>",
        "id": 161352034,
        "sender_full_name": "vipentti",
        "timestamp": 1553179645
    },
    {
        "content": "<p>I'll add a <code>WherePred</code> ,  I'm not sure though what methods or traits to implement for it, currently don't need anything but I wonder what would be the best way to get access to the paths</p>",
        "id": 161352208,
        "sender_full_name": "vipentti",
        "timestamp": 1553179725
    },
    {
        "content": "<p>hmm, is there an actual name for the \"type\" part of the where clause, e.g. <code>T</code> in <code>where T: Debug + Clone</code></p>",
        "id": 161352683,
        "sender_full_name": "vipentti",
        "timestamp": 1553179985
    },
    {
        "content": "<p>I'd call it just <code>type_ref</code></p>",
        "id": 161352763,
        "sender_full_name": "matklad",
        "timestamp": 1553180039
    },
    {
        "content": "<p>I guess the <code>Debug + Clone</code> is called bounds ?</p>",
        "id": 161352810,
        "sender_full_name": "vipentti",
        "timestamp": 1553180044
    },
    {
        "content": "<p>Yeah, that's what I was thinking</p>",
        "id": 161352833,
        "sender_full_name": "vipentti",
        "timestamp": 1553180056
    },
    {
        "content": "<p>yep, thouse are bounds</p>",
        "id": 161352863,
        "sender_full_name": "matklad",
        "timestamp": 1553180071
    },
    {
        "content": "<p>hmm, can bounds actually be anything other than <code>PathType</code> ?  or should they return <code>Option&lt;&amp;TypeRef&gt;</code> as well ?</p>",
        "id": 161354085,
        "sender_full_name": "vipentti",
        "timestamp": 1553180826
    }
]