[
    {
        "content": "<p>Hey all! With the new behavior of the extensions of trying to always download the latest from the releases, would y'all be willing to run some ARM builds too? I can do the legwork of setting up the extra CI tasks for it using <code>docker buildx</code> multiarch support if that's the case</p>",
        "id": 188066894,
        "sender_full_name": "qmx",
        "timestamp": 1581552823
    },
    {
        "content": "<p>Yep, providing arm builds will be sweet. I'd love to try to avoid docker though, and rely on cross-compilation. rust-analyzer does not depend on C code, so that in theory should be not too hard</p>",
        "id": 188090756,
        "sender_full_name": "matklad",
        "timestamp": 1581586388
    },
    {
        "content": "<p>cool, I'll give it a try and report back</p>",
        "id": 188109923,
        "sender_full_name": "qmx",
        "timestamp": 1581603673
    },
    {
        "content": "<p>Should I add the arm build as another \"os\" on the matrix?</p>",
        "id": 188550883,
        "sender_full_name": "qmx",
        "timestamp": 1582124029
    },
    {
        "content": "<p>I'm leaning towards this option because you have to install the cross compilation gcc toolchain</p>",
        "id": 188550973,
        "sender_full_name": "qmx",
        "timestamp": 1582124065
    },
    {
        "content": "<p>How does that work? GitHub Actions has no ARM support and I don't think they'll invoke the workflow with an unsupported OS.</p>\n<p>Ah, <code>runs-on</code> vs. <code>os</code>, got it.</p>",
        "id": 188551742,
        "sender_full_name": "Laurențiu",
        "timestamp": 1582124534
    },
    {
        "content": "<p>The thing that matters is the time to build and deploy. I guess xcompiling should be run in parallel with other jobs, or do we compile x64 and arm in the same process?</p>",
        "id": 188551962,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1582124648
    },
    {
        "content": "<p>I think it can be either an extra set of steps gated on <code>os == 'ubuntu-latest'</code>, but I'm not sure how to run it in parallel via <code>matrix</code>. Well, don't mind me.</p>",
        "id": 188552197,
        "sender_full_name": "Laurențiu",
        "timestamp": 1582124776
    },
    {
        "content": "<p>Matrix item combinations are run in parallel by itself, but I am not sure</p>",
        "id": 188552288,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1582124842
    },
    {
        "content": "<p>But we'd like \"<code>runs-on</code>: ${{ matrix.os }} if not ARM, else ubuntu-latest\", which..</p>",
        "id": 188552425,
        "sender_full_name": "Laurențiu",
        "timestamp": 1582124934
    },
    {
        "content": "<p>Make it a different job, maybe? Those also run in parallel</p>",
        "id": 188552489,
        "sender_full_name": "Laurențiu",
        "timestamp": 1582124975
    },
    {
        "content": "<p>The current release workflow builds the server binaries and the Code extension in parallel, then pushes a release when both are finished.</p>",
        "id": 188552578,
        "sender_full_name": "Laurențiu",
        "timestamp": 1582125013
    },
    {
        "content": "<p>I guess we could just have</p>\n<div class=\"codehilite\"><pre><span></span> strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest, macos-latest]\n        arch: [x64, arm]\n        exclude:\n             - os: macos-latest\n               arch: arm\n</pre></div>",
        "id": 188552984,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1582125294
    },
    {
        "content": "<p><a href=\"https://github.community/t5/GitHub-Actions/How-to-not-Allow-Some-Matrices-Together/td-p/40625\" target=\"_blank\" title=\"https://github.community/t5/GitHub-Actions/How-to-not-Allow-Some-Matrices-Together/td-p/40625\">https://github.community/t5/GitHub-Actions/How-to-not-Allow-Some-Matrices-Together/td-p/40625</a></p>",
        "id": 188553058,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1582125361
    },
    {
        "content": "<blockquote>\n<p>I'm leaning towards this option because you have to install the cross compilation gcc toolchain</p>\n</blockquote>\n<p>Why is that? We shouldn't have any C code?</p>",
        "id": 188553220,
        "sender_full_name": "matklad",
        "timestamp": 1582125464
    },
    {
        "content": "<p>libbacktrace</p>",
        "id": 188553408,
        "sender_full_name": "qmx",
        "timestamp": 1582125598
    },
    {
        "content": "<p>Ahhhhhhh.... Can we use clang instead of gcc?</p>",
        "id": 188553513,
        "sender_full_name": "matklad",
        "timestamp": 1582125674
    },
    {
        "content": "<p>Clang is a native cross compiler</p>",
        "id": 188553528,
        "sender_full_name": "matklad",
        "timestamp": 1582125685
    },
    {
        "content": "<p>I can try!</p>",
        "id": 188553555,
        "sender_full_name": "qmx",
        "timestamp": 1582125701
    },
    {
        "content": "<p>Ok, we depend on libbacktarce by accident! I'll send a PR to disable it as soon as GitHub stops throwing 500s at me</p>",
        "id": 188554663,
        "sender_full_name": "matklad",
        "timestamp": 1582126319
    },
    {
        "content": "<p>Aha, I do have the same problems</p>",
        "id": 188555033,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1582126564
    },
    {
        "content": "<p>500 when I try to merge one PR</p>",
        "id": 188555041,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1582126578
    },
    {
        "content": "<p><a href=\"https://www.githubstatus.com/\" target=\"_blank\" title=\"https://www.githubstatus.com/\">https://www.githubstatus.com/</a> <a href=\"/user_uploads/4715/WTjWsjmSU3wKz3aJ9O_mae7A/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/WTjWsjmSU3wKz3aJ9O_mae7A/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/WTjWsjmSU3wKz3aJ9O_mae7A/pasted_image.png\"></a></div>",
        "id": 188555254,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1582126747
    },
    {
        "content": "<p>also the github action we use for installing the musl target only supports a single target, I'm working on a PR to allow for <code>targets</code> instead</p>",
        "id": 188556754,
        "sender_full_name": "qmx",
        "timestamp": 1582127703
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116013\">@qmx</span> can't we just call <code>rustup target add</code> manually?</p>",
        "id": 188556793,
        "sender_full_name": "matklad",
        "timestamp": 1582127732
    },
    {
        "content": "<p>I've send a PR which disables libbacktrace</p>",
        "id": 188556815,
        "sender_full_name": "matklad",
        "timestamp": 1582127749
    },
    {
        "content": "<p>I think that means that we should just be able to do something like <code>RUSTFLAGS=\"-C linker=rust-lld -C linker-flavor=ld.lld\" cargo build -p rust-analyzer --target aarch64-unknown-linux-musl</code></p>",
        "id": 188556902,
        "sender_full_name": "matklad",
        "timestamp": 1582127802
    },
    {
        "content": "<p><del>I think it can't find <code>pthread</code>, <code>rt</code> and friends</del> Ah, nevermind.</p>",
        "id": 188557132,
        "sender_full_name": "Laurențiu",
        "timestamp": 1582127951
    },
    {
        "content": "<p>Just <code>__addtf3</code>, <code>__multf3</code> and <code>__subtf3</code></p>",
        "id": 188557253,
        "sender_full_name": "Laurențiu",
        "timestamp": 1582128041
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/compiler-builtins/issues/201\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-builtins/issues/201\">https://github.com/rust-lang/compiler-builtins/issues/201</a></p>",
        "id": 188557291,
        "sender_full_name": "Laurențiu",
        "timestamp": 1582128065
    },
    {
        "content": "<p>sure we can, I'm just trying to minimize the amount of custom configurations we have to have for this extra architecture</p>",
        "id": 188557335,
        "sender_full_name": "qmx",
        "timestamp": 1582128102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> cool, using <code>rust-lld</code> as the linker works!</p>",
        "id": 188557522,
        "sender_full_name": "qmx",
        "timestamp": 1582128235
    },
    {
        "content": "<p>it'd be really cool if cargo already did this linker choice by default on a cross compilation scenario</p>",
        "id": 188557623,
        "sender_full_name": "qmx",
        "timestamp": 1582128290
    },
    {
        "content": "<p>also verified that your backtrace branch / PR was the last standing native bits on rust-analyzer</p>",
        "id": 188557812,
        "sender_full_name": "qmx",
        "timestamp": 1582128391
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> hmm, the PR is green but bors didn't pick it up - do you need to <code>@</code> the bot?</p>",
        "id": 188558161,
        "sender_full_name": "qmx",
        "timestamp": 1582128602
    },
    {
        "content": "<p>seems like there's still problems with delivering hooks. merged manally</p>",
        "id": 188558480,
        "sender_full_name": "matklad",
        "timestamp": 1582128825
    },
    {
        "content": "<blockquote>\n<p>Should I add the arm build as another \"os\" on the matrix?</p>\n</blockquote>\n<p>it is important that cross build runs in parallel with our other builds, such that it doesn't slow down the release</p>",
        "id": 188565989,
        "sender_full_name": "matklad",
        "timestamp": 1582133656
    },
    {
        "content": "<p>I'll take this as the constraint to guide the solution then</p>",
        "id": 188566510,
        "sender_full_name": "qmx",
        "timestamp": 1582134044
    },
    {
        "content": "<p>It's not really a constraint, just an important nice-to-have</p>",
        "id": 188566652,
        "sender_full_name": "matklad",
        "timestamp": 1582134176
    },
    {
        "content": "<p>Hm, this actually makes me think....</p>\n<p>Should we cross-compile to windows from ubuntu as well? The ubuntu build is faster, so cross compilation might actually be a net win?</p>",
        "id": 188566887,
        "sender_full_name": "matklad",
        "timestamp": 1582134327
    },
    {
        "content": "<p>Ohhhh, If we can xcompile from ubuntu to all our targets, we can move most of the release process to <code>xtask</code>...</p>\n<p>But I think at least cross-compiling to osx requires installing some extra stuff?</p>",
        "id": 188567077,
        "sender_full_name": "matklad",
        "timestamp": 1582134425
    },
    {
        "content": "<p>Added a check to CI to make sure we don't regress no c state: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/3242\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/3242\">https://github.com/rust-analyzer/rust-analyzer/pull/3242</a></p>\n<p>was quite surprised to learn that we build libbacktrace by default :D</p>",
        "id": 188589018,
        "sender_full_name": "matklad",
        "timestamp": 1582148771
    },
    {
        "content": "<p>It's still not used, right?</p>",
        "id": 188590121,
        "sender_full_name": "Laurențiu",
        "timestamp": 1582149498
    },
    {
        "content": "<p>right, it was used in a debug-only fn which was never called</p>",
        "id": 188590441,
        "sender_full_name": "matklad",
        "timestamp": 1582149734
    },
    {
        "content": "<p>Windows user here: I'm using lld-link to link everything rust produce and have done it without a hitch for two years now :) It really speed up global compile time (link.exe is slooooww).</p>",
        "id": 188644550,
        "sender_full_name": "Vincent Rouillé",
        "timestamp": 1582210609
    },
    {
        "content": "<p>Well, RA is too much even for <code>lld</code>, some of the crates take some 60-80 seconds for ThinLTO and linking</p>",
        "id": 188646530,
        "sender_full_name": "Laurențiu",
        "timestamp": 1582211843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224971\">@Vincent Rouillé</span> I haven't tried that on windows. Is t hat just for arm of x64 too?</p>",
        "id": 188661848,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1582221864
    },
    {
        "content": "<p>For example, FreeBSD is currently using lld as default ELF linker on amd64, arm*, aarch64 and powerpc64<br>\nIn lld 7 (we are at 9/10 now) release note it says: \"lld 7 for ELF, COFF and MinGW are production-ready.\"<br>\nIn lld 9 they state: \"The Linux kernel for arm32_7, arm64, ppc64le and x86_64 can now be linked by lld.\"<br>\nSo it should go quite well.</p>",
        "id": 188686388,
        "sender_full_name": "Vincent Rouillé",
        "timestamp": 1582238139
    },
    {
        "content": "<p>If I recall correctly it took them some times to implements most of ld scripts, while the ELF part was quite complete.</p>",
        "id": 188686535,
        "sender_full_name": "Vincent Rouillé",
        "timestamp": 1582238220
    },
    {
        "content": "<p>this should make the github action a little bit cleaner: <a href=\"https://github.com/actions-rs/toolchain/pull/62\" target=\"_blank\" title=\"https://github.com/actions-rs/toolchain/pull/62\">https://github.com/actions-rs/toolchain/pull/62</a></p>",
        "id": 190568244,
        "sender_full_name": "qmx",
        "timestamp": 1584143956
    },
    {
        "content": "<p>let's hope the maintainers accept it</p>",
        "id": 190568251,
        "sender_full_name": "qmx",
        "timestamp": 1584143963
    },
    {
        "content": "<p>in the mean time, another question - how should the file naming strategy be? currently we have <code>rust-analyzer-linux</code> - would we just append a new binary <code>rust-analyzer-linux-armv7</code> to the release?</p>",
        "id": 190968016,
        "sender_full_name": "qmx",
        "timestamp": 1584531525
    },
    {
        "content": "<p>on the same note, is the auto-update feature within vscode architecture-aware?</p>",
        "id": 190968045,
        "sender_full_name": "qmx",
        "timestamp": 1584531553
    },
    {
        "content": "<p>Yeah, I think <code>rust-analyzer-linux-armv7</code> would do. We probably should change the others to <code>-x64</code>, but that can be done separatelly</p>",
        "id": 190968075,
        "sender_full_name": "matklad",
        "timestamp": 1584531581
    },
    {
        "content": "<p>Yup, auto-update is arch-aware</p>",
        "id": 190968083,
        "sender_full_name": "matklad",
        "timestamp": 1584531592
    },
    {
        "content": "<p>I was just looking here and the last update for actions-rs/toolchain was two months ago :(</p>",
        "id": 190968534,
        "sender_full_name": "qmx",
        "timestamp": 1584531934
    },
    {
        "content": "<p>any thoughts on just naming the binaries with their equivalent rust target-triple?</p>",
        "id": 191062389,
        "sender_full_name": "qmx",
        "timestamp": 1584580172
    },
    {
        "content": "<p>that could remove a bunch of \"hardcoding\" on build scripts and allow for new targets to be added later with minimal changes</p>",
        "id": 191062445,
        "sender_full_name": "qmx",
        "timestamp": 1584580215
    },
    {
        "content": "<blockquote>\n<p>that could remove a bunch of \"hardcoding\" on build scripts and allow for new targets to be added later with minimal changes</p>\n</blockquote>\n<p>This will make the TypeScript side more complicated though. Also, binaries are public facing (downloading them manually from github is supported), and target tripples look scary for not already familiar with them</p>",
        "id": 191076034,
        "sender_full_name": "matklad",
        "timestamp": 1584600924
    },
    {
        "content": "<p>So I would probably stick with minimal naming. It's not that we are going to add a whole lot of targets</p>",
        "id": 191076109,
        "sender_full_name": "matklad",
        "timestamp": 1584600985
    }
]