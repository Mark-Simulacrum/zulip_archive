[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> Did you have some specific error type in mind for error handling (<code>failure::Error</code> for example)? Or I could just start with something simple</p>",
        "id": 159803511,
        "sender_full_name": "detrumi",
        "timestamp": 1551542285
    },
    {
        "content": "<p>I think <code>failure::Error</code> will definitely be a bad fit there</p>",
        "id": 159803881,
        "sender_full_name": "matklad",
        "timestamp": 1551542935
    },
    {
        "content": "<p>Starting with simple, but specific error type is a good aproach</p>",
        "id": 159803889,
        "sender_full_name": "matklad",
        "timestamp": 1551542954
    },
    {
        "content": "<p>that is, as long as it is some opaque <code>struct MacroParsingError</code> we can always enchance it :)</p>",
        "id": 159803903,
        "sender_full_name": "matklad",
        "timestamp": 1551542980
    },
    {
        "content": "<p>Ah, I can't just replace option with result everywhere, because things like <code>expand_rule</code> are allowed to not match, if I understand correctly</p>",
        "id": 159803947,
        "sender_full_name": "detrumi",
        "timestamp": 1551543004
    },
    {
        "content": "<p>yeah, thats the part of the problem: currently \"there's an error\" and \"threre's a result, and it is empty\" cases are conflated</p>",
        "id": 159804165,
        "sender_full_name": "matklad",
        "timestamp": 1551543425
    },
    {
        "content": "<p>Right</p>",
        "id": 159804190,
        "sender_full_name": "detrumi",
        "timestamp": 1551543482
    },
    {
        "content": "<p>So error cases should propagate, and then panic or something to start off with, and empty cases are propagated like now</p>",
        "id": 159804231,
        "sender_full_name": "detrumi",
        "timestamp": 1551543538
    },
    {
        "content": "<p>yeah</p>",
        "id": 159804714,
        "sender_full_name": "matklad",
        "timestamp": 1551544280
    },
    {
        "content": "<p>Though I think it makes sense to perhaps try a \"best-effort\" parse as well?</p>",
        "id": 159804724,
        "sender_full_name": "matklad",
        "timestamp": 1551544313
    },
    {
        "content": "<p>Say, the task is parsing <code>macro_rules</code> token tree into a mbe defenition</p>",
        "id": 159804774,
        "sender_full_name": "matklad",
        "timestamp": 1551544335
    },
    {
        "content": "<p>ideally, if there's an error in a single branch, but other branches are correct, the macro should work, if the invocation uses only correct branches</p>",
        "id": 159804779,
        "sender_full_name": "matklad",
        "timestamp": 1551544372
    },
    {
        "content": "<p>So, instead of returning an <code>Result&lt;T, E&gt;</code>, I can imagine returning <code>(T, Vec&lt;E&gt;)</code>, where <code>T</code> is a best-effort parse, which ignores erroneous cases</p>",
        "id": 159804793,
        "sender_full_name": "matklad",
        "timestamp": 1551544415
    },
    {
        "content": "<p>but for the start <code>Result&lt;T, E&gt;</code> should be fine as well</p>",
        "id": 159804795,
        "sender_full_name": "matklad",
        "timestamp": 1551544432
    },
    {
        "content": "<p>Was just checking what rustc does here, it can give errors like \"no rules expected the token <code>bar</code>\"</p>",
        "id": 159804844,
        "sender_full_name": "detrumi",
        "timestamp": 1551544485
    },
    {
        "content": "<p>But the functionality could be different for IDE's, so maybe checking what rustc does isn't so helpful after all</p>",
        "id": 159804921,
        "sender_full_name": "detrumi",
        "timestamp": 1551544575
    },
    {
        "content": "<p>Yeah, best-effort parsing actually makes a lot more sense, would be nice to do it that way without first refactoring to Results</p>",
        "id": 159805181,
        "sender_full_name": "detrumi",
        "timestamp": 1551544947
    },
    {
        "content": "<p>on the one hand, yes, on the other hand, I think refactoring that should not be too difficult</p>",
        "id": 159805341,
        "sender_full_name": "matklad",
        "timestamp": 1551545198
    },
    {
        "content": "<p>Let's tart with changing <code>MacroRules::parse</code> to return an <code>Result&lt;MacroRules, MacroRulesError&gt;</code>?</p>",
        "id": 159805365,
        "sender_full_name": "matklad",
        "timestamp": 1551545227
    },
    {
        "content": "<p>I've changed most options to results in <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/916\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/916\">rust-analyzer#916</a>, though I'm not sure about the error information yet. I was also toying with the idea of storing a <code>Result&lt;SmolStr&gt;</code> in <code>Var.kind</code>, but dropped that idea because it was getting complicated</p>",
        "id": 159811614,
        "sender_full_name": "detrumi",
        "timestamp": 1551555491
    },
    {
        "content": "<p>Hi, im trying to porting mbe test from intetllij-rust. And i just found that currently our macro expansion code do not preserve white space. As i know rust-analyzer parser is lossless. But im not sure about macro expansion.</p>",
        "id": 162399164,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1554268126
    },
    {
        "content": "<p>It would be cool to preserve white space across macro expansion, but not super usedul</p>",
        "id": 162399807,
        "sender_full_name": "matklad",
        "timestamp": 1554269178
    },
    {
        "content": "<p>If you wanted to see the expansion of a macro, would we eventually then care about preserving whitespace? I'm thinking about first time macro authors where the macro may produce completely invalid code...</p>",
        "id": 162841572,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1554747230
    },
    {
        "content": "<p>eventually maaaybe....</p>",
        "id": 162851954,
        "sender_full_name": "matklad",
        "timestamp": 1554754957
    },
    {
        "content": "<p>though I'd gave for just refomatting the expanded code</p>",
        "id": 162851959,
        "sender_full_name": "matklad",
        "timestamp": 1554754966
    }
]