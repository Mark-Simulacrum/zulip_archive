[
    {
        "content": "<p>Has anyone used GATs in RA? I reported <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/9602\">#9602</a> after constraints gave me parsing failures, but I'm curious if anyone knows another way to specify a concrete value for a GAT-trait's associated type that might be a more-RA-friendly workaround?</p>\n<p><a href=\"user_uploads/4715/tQuTYb4elgRFJgj57SXw9QeV/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"user_uploads/4715/tQuTYb4elgRFJgj57SXw9QeV/image.png\" title=\"image.png\"><img src=\"user_uploads/4715/tQuTYb4elgRFJgj57SXw9QeV/image.png\"></a></div>",
        "id": 246286786,
        "sender_full_name": "Zoey",
        "timestamp": 1626473534
    },
    {
        "content": "<p>I don't think you can escape that problem with a different syntax, at least I don't think there is an alternative?<br>\nThe problem here is we just don't expect generics for the left of associated type args currently</p>",
        "id": 246287646,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1626474191
    },
    {
        "content": "<p>We only expect a simple nameref followed by a <code>=</code> token, <a href=\"https://github.com/rust-analyzer/ungrammar/blob/3207f958081ee1272ff88f0ff32fd302b5b5d78c/rust.ungram#L53-L54\">https://github.com/rust-analyzer/ungrammar/blob/3207f958081ee1272ff88f0ff32fd302b5b5d78c/rust.ungram#L53-L54</a></p>",
        "id": 246287658,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1626474201
    },
    {
        "content": "<p>Hmm so I looked into this and I am not sure how we wanna fix this. Currently RA does a lookahead of 1 to check if the current token is an ident followed by a <code>=</code> or <code>:</code> and parse accordingly, if its neither of those it parses a type. With GATs this lookahead wont work anymore as there can be an infinite amount of tokens inbetween...</p>",
        "id": 246292448,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1626479271
    },
    {
        "content": "<p>rustc solves this by just parsing a type(generic arg), then trying to extract the ident and args out of that, which isnt something we can do either. <a href=\"https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/compiler/rustc_parse/src/parser/path.rs#L440-L443\">https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/compiler/rustc_parse/src/parser/path.rs#L440-L443</a></p>",
        "id": 246292517,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1626479345
    },
    {
        "content": "<p>And if I see this right we cant just try and parse this as expecting a <code>=</code> and <code>:</code> and just reparse the consumed input as a type if we didnt find either of those without duplicating most path parsing logic? Though maybe I'm not thinking with the parser infra and markers of RA correctly yet</p>",
        "id": 246292614,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1626479458
    },
    {
        "content": "<p>Is there a way to maybe move into a n-lookahead context when this would otherwise error, and only accept types or up to N closing <code>&gt;</code>s before being _sure_ it's an invalid parse?</p>",
        "id": 246292991,
        "sender_full_name": "Zoey",
        "timestamp": 1626479878
    },
    {
        "content": "<p>What about having something with N+1 instances though</p>",
        "id": 246293335,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1626480170
    },
    {
        "content": "<p>Trying to rephrase... We know that there must be a matching close-<code>&gt;</code>, and we can have any number of <code>&lt;</code>/<code>&gt;</code> pairs- treat it like parathetical expressions; if we see enough closes to close all opens and we still can't parse the contents, it's a bad parse.</p>",
        "id": 246293441,
        "sender_full_name": "Zoey",
        "timestamp": 1626480275
    },
    {
        "content": "<p>The problem isnt a bad parse, the problem is how to reparse.</p>",
        "id": 246293462,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1626480310
    },
    {
        "content": "<p>Basically, we could parse an <code>NameRef</code>, then parse a <code>GenericArgList</code>, and then check if <code>=</code> and <code>:</code> follow. If those do not follow we cannot reparse what we have parsed into a <code>PathType</code> from my understanding of how the parser works, unless we duplicate the path parsing logic somewhat from my understanding. Though I'll take a look again if this can be fixed up with markers somehow</p>",
        "id": 246293473,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1626480333
    },
    {
        "content": "<p>Oh- couldn't that just be another parser on Alternative?</p>\n<div class=\"codehilite\"><pre><span></span><code>GatConstraint =\n  NameRef GenericArgList &#39;=&#39; ... | PathType\n</code></pre></div>\n<p>?</p>\n<p>Or is generalized backtracking not an option?</p>",
        "id": 246293658,
        "sender_full_name": "Zoey",
        "timestamp": 1626480539
    },
    {
        "content": "<p>Ye basically backtracking is the problem right now</p>",
        "id": 246293735,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1626480616
    },
    {
        "content": "<p>specifying the grammar for this is simple</p>",
        "id": 246293747,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1626480630
    },
    {
        "content": "<p>but the RA parser infra doesnt really support backtracking like this that well, I think</p>",
        "id": 246293751,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1626480642
    },
    {
        "content": "<p>Or well it kinda does, though in this case its a bit tricky for me to figure out right now <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 246293770,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1626480667
    },
    {
        "content": "<p>My apologies- I don't have much context outside of recursive descent parsing.</p>\n<p>I suspect you can do state extraction in the parsers and map it to <code>Either</code> at the top-level parse? That mechanism is somewhat essential I'd imagine.</p>",
        "id": 246293785,
        "sender_full_name": "Zoey",
        "timestamp": 1626480700
    },
    {
        "content": "<p>No worries <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span><br>\nOkay actually this isn't so tricky after all, it just requires a few changes at some other spots I think</p>",
        "id": 246293990,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1626480945
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> Awesome- if there's any additional info I can provide, just @ me :)</p>",
        "id": 246294289,
        "sender_full_name": "Zoey",
        "timestamp": 1626481349
    },
    {
        "content": "<p>Alright, I got it working I think</p>",
        "id": 246296957,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1626485627
    },
    {
        "content": "<p>Will clean that up tomorrow(if I can clean it up even) <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/9619\">https://github.com/rust-analyzer/rust-analyzer/pull/9619</a></p>",
        "id": 246297180,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1626485931
    },
    {
        "content": "<p>For anyone familiar with parsing and grammar inside of RA- <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/9619\">the above PR</a> is marked as ready for review.</p>",
        "id": 246351400,
        "sender_full_name": "Zoey",
        "timestamp": 1626567748
    }
]