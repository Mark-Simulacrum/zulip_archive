[
    {
        "content": "<p>What would be the proper way to turn a <code>hir::ModPath</code> into an <code>ast::Path</code>? I need to do this for updating the <code>handlers</code> code</p>",
        "id": 208862327,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1599069186
    },
    {
        "content": "<p>as far as I remember, turning it into a string and turning that into the AST using the <code>make</code> functions</p>",
        "id": 208862530,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1599069281
    },
    {
        "content": "<p>alright</p>",
        "id": 208882633,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1599078390
    },
    {
        "content": "<p>So I'm not sure what I'm supposed to do about the failing tests now, as said in <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/5935#issuecomment-685986572\">https://github.com/rust-analyzer/rust-analyzer/pull/5935#issuecomment-685986572</a> the test suite itself panics due to the change of not using the text edit api i imagine?</p>",
        "id": 208950022,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1599130910
    },
    {
        "content": "<p>I was going to just take a look at this now :)</p>",
        "id": 208950122,
        "sender_full_name": "matklad",
        "timestamp": 1599130960
    },
    {
        "content": "<p>So, the <code>insert_use</code> returns a new <code>SyntaxNode</code>, but there's nothing that actually replaces the old node with the new one</p>",
        "id": 208950267,
        "sender_full_name": "matklad",
        "timestamp": 1599131046
    },
    {
        "content": "<p>You need to do something like <code>text_edit_builder.replace(old_node.text_range(), new_node.to_string())</code>. Let me check if this works...</p>",
        "id": 208950312,
        "sender_full_name": "matklad",
        "timestamp": 1599131092
    },
    {
        "content": "<p>Oh okay, didn't mean to rush <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 208950671,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1599131309
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300586\">@veykril</span> urgh, the API there are not great.</p>\n<p>I've managed to fix <code>repalce_qualified_name_with_use</code> assist with this diff:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gh\">diff --git a/crates/assists/src/handlers/replace_qualified_name_with_use.rs b/crates/assists/src/handlers/replace_qualified_name_with_use.rs</span>\n<span class=\"gh\">index 470e5f8ff..bcf2f164f 100644</span>\n<span class=\"gd\">--- a/crates/assists/src/handlers/replace_qualified_name_with_use.rs</span>\n<span class=\"gi\">+++ b/crates/assists/src/handlers/replace_qualified_name_with_use.rs</span>\n<span class=\"gu\">@@ -2,9 +2,14 @@ use syntax::{algo::SyntaxRewriter, ast, match_ast, AstNode, SyntaxNode, TextRang</span>\n use test_utils::mark;\n\n use crate::{\n<span class=\"gd\">-    utils::{find_insert_use_container, insert_use_statement},</span>\n<span class=\"gi\">+    utils::{</span>\n<span class=\"gi\">+        find_insert_use_container,</span>\n<span class=\"gi\">+        insert_use::{insert_use, MergeBehaviour},</span>\n<span class=\"gi\">+        insert_use_statement,</span>\n<span class=\"gi\">+    },</span>\n     AssistContext, AssistId, AssistKind, Assists,\n };\n<span class=\"gi\">+use ast::make;</span>\n\n // Assist: replace_qualified_name_with_use\n //\n<span class=\"gu\">@@ -43,28 +48,25 @@ pub(crate) fn replace_qualified_name_with_use(</span>\n     };\n\n     let target = path.syntax().text_range();\n<span class=\"gi\">+    let container = find_insert_use_container(path.syntax(), ctx)?;</span>\n<span class=\"gi\">+    let syntax = container.either(|l| l.syntax().clone(), |r| r.syntax().clone());</span>\n<span class=\"gi\">+</span>\n     acc.add(\n         AssistId(&quot;replace_qualified_name_with_use&quot;, AssistKind::RefactorRewrite),\n         &quot;Replace qualified path with use&quot;,\n         target,\n         |builder| {\n<span class=\"gd\">-            let container = match find_insert_use_container(path.syntax(), ctx) {</span>\n<span class=\"gd\">-                Some(c) =&gt; c,</span>\n<span class=\"gd\">-                None =&gt; return,</span>\n<span class=\"gd\">-            };</span>\n<span class=\"gd\">-            insert_use_statement(</span>\n<span class=\"gd\">-                path.syntax(),</span>\n<span class=\"gd\">-                &amp;path_to_import.to_string(),</span>\n<span class=\"gd\">-                ctx,</span>\n<span class=\"gd\">-                builder.text_edit_builder(),</span>\n<span class=\"gd\">-            );</span>\n<span class=\"gd\">-</span>\n             // Now that we&#39;ve brought the name into scope, re-qualify all paths that could be\n             // affected (that is, all paths inside the node we added the `use` to).\n             let mut rewriter = SyntaxRewriter::default();\n<span class=\"gd\">-            let syntax = container.either(|l| l.syntax().clone(), |r| r.syntax().clone());</span>\n<span class=\"gd\">-            shorten_paths(&amp;mut rewriter, syntax, path);</span>\n<span class=\"gd\">-            builder.rewrite(rewriter);</span>\n<span class=\"gi\">+            shorten_paths(&amp;mut rewriter, syntax.clone(), path);</span>\n<span class=\"gi\">+            let new_syntax = rewriter.rewrite(&amp;syntax);</span>\n<span class=\"gi\">+            let new_syntax = insert_use(</span>\n<span class=\"gi\">+                new_syntax.clone(),</span>\n<span class=\"gi\">+                make::path_from_text(path_to_import),</span>\n<span class=\"gi\">+                Some(MergeBehaviour::Full),</span>\n<span class=\"gi\">+            );</span>\n<span class=\"gi\">+            builder.replace(syntax.text_range(), new_syntax.to_string())</span>\n         },\n     )\n }\n</code></pre></div>",
        "id": 208951878,
        "sender_full_name": "matklad",
        "timestamp": 1599132076
    },
    {
        "content": "<p>Some tests still fail, but this seems to mostly be because of ordering differences (<code>{foo, bar}</code> vs <code>{bar, foo}</code>).</p>",
        "id": 208951924,
        "sender_full_name": "matklad",
        "timestamp": 1599132115
    },
    {
        "content": "<p>yes the ordering differences I changed for my tests. I'll take a look at the other stuff then again now. This should be plenty helpful thanks</p>",
        "id": 208952034,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1599132191
    },
    {
        "content": "<p>I am so exited to see this finally being worked on :-)</p>\n<p>Auto-import which you need to fixup yourself is probably my No1 annoyance with rust-analyzer at the moment :0)</p>",
        "id": 208952236,
        "sender_full_name": "matklad",
        "timestamp": 1599132317
    },
    {
        "content": "<p>good to hear, it was also one of my biggest annoyances to be honest :D. So just having it group properly will be quite nice, but also being able to configure it to not merge everything together is something I'm looking forward to cause I'm one of the people that don't like deeply nested imports <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 208953057,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1599132813
    },
    {
        "content": "<p>/me takes mental note that making features more annoying improves contributions</p>",
        "id": 208953203,
        "sender_full_name": "matklad",
        "timestamp": 1599132902
    },
    {
        "content": "<p>Okay I managed to fix up <code>auto_import</code> and all tests pass(except one where order changed again). <code>replace_qualified_name_with_use</code> partially broke with weird invalid rust output due to nested modules, will have to check that in a bit.</p>",
        "id": 208955453,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1599134272
    },
    {
        "content": "<p>This is the output from <code>test_replace_add_use_no_anchor_in_mod_mod</code> right now</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">mod</span> <span class=\"nn\">bar</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Debug</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Debug</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 208955684,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1599134391
    },
    {
        "content": "<p>I suppose the text range that is being replaced is not entirely correct</p>",
        "id": 208955760,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1599134415
    },
    {
        "content": "<p>Yeah, I think this needs some debugging to determine the exact semantics of <code>where_</code> / <code>position</code>.</p>\n<p>In general, the problem of composing changes to syntax trees is not fully solved yet.</p>",
        "id": 208957917,
        "sender_full_name": "matklad",
        "timestamp": 1599135712
    },
    {
        "content": "<p>I got it down to ~4 failing tests, one where it panics on an assertion in test_edit, two malformed outputs and one where it inserts imports in front of inner attributes</p>",
        "id": 208958307,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1599135932
    },
    {
        "content": "<p>The assert in <code>text_edit</code> might be interesting</p>",
        "id": 208958655,
        "sender_full_name": "matklad",
        "timestamp": 1599136085
    },
    {
        "content": "<p>Basicallly, you build the edit by saying \"replace this range with that text\"</p>",
        "id": 208958677,
        "sender_full_name": "matklad",
        "timestamp": 1599136099
    },
    {
        "content": "<p>And the assert triggers if you have overlapping ranges.</p>",
        "id": 208958711,
        "sender_full_name": "matklad",
        "timestamp": 1599136112
    },
    {
        "content": "<p>Which is exactly the problem with composing changes.</p>",
        "id": 208958767,
        "sender_full_name": "matklad",
        "timestamp": 1599136140
    },
    {
        "content": "<p>Oh I see, well that will be interesting to fix I guess <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 208958820,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1599136166
    },
    {
        "content": "<p>Ah now I see the problem with the weird malformed inner module tests. The syntax node in those cases is an <code>ItemList</code> which contains the opening and closing braces, so since there are no imports in those modules I insert them with <code>InsertPosition::First</code> causing the imports to go before the braces</p>",
        "id": 208962435,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1599138023
    },
    {
        "content": "<p>Should I special case that by checking the first token is an opening brace? That seems kinda hacky so I hope there is a better option <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 208962580,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1599138084
    },
    {
        "content": "<p>I think some amount of special casing would be required</p>",
        "id": 208962817,
        "sender_full_name": "matklad",
        "timestamp": 1599138200
    },
    {
        "content": "<p><em>Someone</em> has to figure out if we are inserting into an item list, a block (which might be supported one day) or a file.</p>",
        "id": 208962851,
        "sender_full_name": "matklad",
        "timestamp": 1599138221
    },
    {
        "content": "<p>It's not entirely clear <em>where</em> such special casing needs to happen though.</p>",
        "id": 208962902,
        "sender_full_name": "matklad",
        "timestamp": 1599138242
    },
    {
        "content": "<p>Maybe <code>where_</code> should have a type like</p>\n<div class=\"codehilite\"><pre><span></span><code>enum ImportScope {\n    File(ast::File),\n    Motule(ast::ItemList),\n}\n</code></pre></div>",
        "id": 208962986,
        "sender_full_name": "matklad",
        "timestamp": 1599138272
    },
    {
        "content": "<p>Ye, that might be a good idea, I mean that is already what find_insert_use_container returns anyways + that would indeed allow easier refactoring to potentially support blocks later on I imagine. I'll check where this approach leads to</p>",
        "id": 208963382,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1599138450
    },
    {
        "content": "<p>Okay I think I fixed that problem, except that the import is now incorrectly indented.</p>",
        "id": 208971342,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1599141720
    },
    {
        "content": "<p>Alright all that's left now is the failing assert, which I'm really not sure how to fix. So as you said the problem is that the same range is being edited multiple times in the same assist \"run\" right? The solution I imagine is to only partial patch the text, but this is probably gonna be difficult to do given <code>insert_use</code> returns the entire edited new node.</p>",
        "id": 208976871,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1599143790
    },
    {
        "content": "<p>Uhu, but you might be able to fix around this elsewhere</p>",
        "id": 208977754,
        "sender_full_name": "matklad",
        "timestamp": 1599144114
    },
    {
        "content": "<p>I hit exactly the same problem in the dff in the stream above</p>",
        "id": 208977807,
        "sender_full_name": "matklad",
        "timestamp": 1599144124
    },
    {
        "content": "<p>Note how I've re-ordered <code>rewrite</code> and <code>insert_use</code></p>",
        "id": 208977845,
        "sender_full_name": "matklad",
        "timestamp": 1599144144
    },
    {
        "content": "<p>I dont think I can do that in this case, the problem is that the test inserts imports twice, where one of the text ranges of one import contains the text range of the other modified import node</p>",
        "id": 208979303,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1599144741
    },
    {
        "content": "<p>Looking at that failure now</p>",
        "id": 208987431,
        "sender_full_name": "matklad",
        "timestamp": 1599147968
    },
    {
        "content": "<p>IIRC, this assist panics with the old impl as well sometimes...</p>",
        "id": 208987466,
        "sender_full_name": "matklad",
        "timestamp": 1599147983
    },
    {
        "content": "<p>(also, <code>master</code> branch has some better asserts in that area)</p>",
        "id": 208987831,
        "sender_full_name": "matklad",
        "timestamp": 1599148115
    },
    {
        "content": "<p>Urgh, I don't see any easy way to fix this.</p>",
        "id": 208988872,
        "sender_full_name": "matklad",
        "timestamp": 1599148513
    },
    {
        "content": "<p>I think for now I am fine with just commenting-out the <code>insert_import</code> bit in that assist</p>",
        "id": 208988919,
        "sender_full_name": "matklad",
        "timestamp": 1599148532
    },
    {
        "content": "<p>I think a proper fix would be changing <em>other</em> things to do an AST-based edit, instad of a text-based one</p>",
        "id": 208988976,
        "sender_full_name": "matklad",
        "timestamp": 1599148551
    },
    {
        "content": "<p>and it also interacts with that other issue about grouping \"find-references\" result by file</p>",
        "id": 208989037,
        "sender_full_name": "matklad",
        "timestamp": 1599148566
    },
    {
        "content": "<p>Alright, I pushed the final commit then just now that comments out the use of that function for now</p>",
        "id": 208999658,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1599152896
    },
    {
        "content": "<p>Should be ready to be reviewed once more then</p>",
        "id": 208999677,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1599152908
    }
]