[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"212936\">@Emil Lauridsen</span> I've finally reproduced the \"rust analyzer is suuuper slow and runs cargo check\" issue</p>",
        "id": 186723540,
        "sender_full_name": "matklad",
        "timestamp": 1580157799
    },
    {
        "content": "<p>For me, it happens on the <code>stdarch</code> crate, if I hack <code>cache.rs</code></p>",
        "id": 186723576,
        "sender_full_name": "matklad",
        "timestamp": 1580157821
    },
    {
        "content": "<p>Looks like <code>cargo check</code> tries to check dependencies (<code>quickcheck</code> in particular), and looks like it <em>might</em> be related to build scripts</p>",
        "id": 186723643,
        "sender_full_name": "matklad",
        "timestamp": 1580157851
    },
    {
        "content": "<p>I have a hunch we might be overwhelming the main thread with progress updates, as they get a little spammy when only the current crate is being checked. Cargo reports each crate even if no work is being done for the crate, so we might want to denounce the progress events.<br>\nIf you can reliably reproduce you can give my cargo-slowdown branch a go and see if the RA_PROFILE numbers say something interesting</p>",
        "id": 186730570,
        "sender_full_name": "Emil Lauridsen",
        "timestamp": 1580162394
    },
    {
        "content": "<p>One thing I noticed is that the \"cargo check\" message in the status bar might be displayed longer than the time it takes <code>cargo check</code> to run</p>",
        "id": 186732304,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580163588
    },
    {
        "content": "<p>Could the progress notifications be delayed by the other work RA is doing?</p>",
        "id": 186732529,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580163759
    },
    {
        "content": "<p>I don’t think the problem is message flooding, I hunk the problem is<br>\nrepeatedly re-checking dependencies.</p>",
        "id": 186734617,
        "sender_full_name": "matklad",
        "timestamp": 1580165400
    },
    {
        "content": "<p>It might be a combination of things. I never saw it check too much or not finish at all, but it does appear to take longer than it should</p>",
        "id": 186734987,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580165646
    },
    {
        "content": "<p>Like 2 seconds or so, while <code>cargo check</code> runs instantly</p>",
        "id": 186735019,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580165672
    },
    {
        "content": "<p>Oh</p>",
        "id": 186735253,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580165835
    },
    {
        "content": "<p>It's doing some unbuffered reads</p>",
        "id": 186735259,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580165840
    },
    {
        "content": "<p>Ouch</p>",
        "id": 186735261,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580165841
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/G7Xt_WDU8-bxot6BtayUDWtX/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/G7Xt_WDU8-bxot6BtayUDWtX/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/G7Xt_WDU8-bxot6BtayUDWtX/pasted_image.png\"></a></div>",
        "id": 186735411,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580165978
    },
    {
        "content": "<p>It might be the output of <code>cargo metadata</code>, but I'm not sure</p>",
        "id": 186735420,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580165988
    },
    {
        "content": "<p>There's a lot of those</p>",
        "id": 186735426,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580165993
    },
    {
        "content": "<p>Fascinating!</p>",
        "id": 186735671,
        "sender_full_name": "matklad",
        "timestamp": 1580166164
    },
    {
        "content": "<p>TIL pasting a lot of text makes mutter hang</p>",
        "id": 186735813,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580166250
    },
    {
        "content": "<p>Yeah, so that's the pipe with the output of <code>cargo check</code></p>",
        "id": 186736561,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580166864
    },
    {
        "content": "<p>Filed a PR, but it's just as slow as before :(</p>",
        "id": 186737754,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580167863
    },
    {
        "content": "<p>Oh, there's a 300 ms timer on the client</p>",
        "id": 186739526,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580169520
    },
    {
        "content": "<p>That's why it seems to take so long <span aria-label=\"unamused\" class=\"emoji emoji-1f612\" role=\"img\" title=\"unamused\">:unamused:</span></p>",
        "id": 186739533,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580169528
    },
    {
        "content": "<blockquote>\n<p>I don’t think the problem is message flooding, I hunk the problem is<br>\nrepeatedly re-checking dependencies.</p>\n</blockquote>\n<p>Cargo doesn't actually re-check dependencies if they haven't changed, it just reports that the package exists and that's where we are in the progress. It uses the same message format though. But upon closer look it also reports if the package is \"fresh\", e.g. up to date, so we could probably skip reporting fresh packages. Opening a PR shortly</p>",
        "id": 186766931,
        "sender_full_name": "Emil Lauridsen",
        "timestamp": 1580204927
    },
    {
        "content": "<p>We should also avoid duplicate reports. I didn't notice any difference, but it seems like a good idea to reduce the LSP traffic</p>",
        "id": 186767462,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580205405
    },
    {
        "content": "<p>But I still don't understand why it seems to take longer in Code than from the command line. My test is pressing Ctrl-S without making any changes in a small project with a hefty amount of dependencies.</p>",
        "id": 186772625,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580209931
    },
    {
        "content": "<p>I suspect it's just a display issue (the notifications take too much time to be processed), but it might be worth adding some logging code to be sure.</p>",
        "id": 186772685,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580210025
    },
    {
        "content": "<p>At least it's not burning CPU. <code>htop</code> reports an extra 20 ms of CPU time used by the server when pressing Ctrl-S once.</p>",
        "id": 186772792,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580210132
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/Ah6gYFz2E4dGXerK9buumCRv/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/Ah6gYFz2E4dGXerK9buumCRv/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/Ah6gYFz2E4dGXerK9buumCRv/pasted_image.png\"></a></div>",
        "id": 186778884,
        "sender_full_name": "matklad",
        "timestamp": 1580215584
    },
    {
        "content": "<p>looks like we might have more concurrent rustc than we want...</p>",
        "id": 186778902,
        "sender_full_name": "matklad",
        "timestamp": 1580215608
    },
    {
        "content": "<p>Are those two running instances of <code>cargo check</code>?</p>",
        "id": 186779040,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580215761
    },
    {
        "content": "<p>You should make sure to not run it twice -- that can happen if you save twice in a row.</p>",
        "id": 186779171,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580215873
    },
    {
        "content": "<p>I have auto-save on 100ms</p>",
        "id": 186779247,
        "sender_full_name": "matklad",
        "timestamp": 1580215926
    },
    {
        "content": "<p>The code tries to kill the one that's already running, but not too hard</p>",
        "id": 186779332,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580216010
    },
    {
        "content": "<p>So it might spawn another one while it's still running</p>",
        "id": 186779358,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580216038
    },
    {
        "content": "<p>There are some other things that could trigger rebuilding, like different <code>RUSTFLAGS</code>. That can happen if you set them in your <code>.profile</code>, since Code won't read it. Picking the wrong manifest might also explain it, although I didn't see it happen.</p>",
        "id": 186779708,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580216338
    },
    {
        "content": "<p>Maybe we should add a \"submit bug report\" feature that saves things like the platform, environment variables (for both the server and in a shell), the output of <code>cargo metadata</code> and so on <span aria-label=\"pensive\" class=\"emoji emoji-1f614\" role=\"img\" title=\"pensive\">:pensive:</span>.</p>",
        "id": 186779914,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580216506
    },
    {
        "content": "<p>could we wait until the canceled one is finished before we start a new check?</p>",
        "id": 186782343,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1580218431
    },
    {
        "content": "<p>for the rebuilding problem, having a different target folder would help, though I really like being able to <code>cargo check</code> on the command line (or using emacs' cargo integration) and getting instant results because it already ran</p>",
        "id": 186782474,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1580218537
    },
    {
        "content": "<p>though admittedly that's kind of a workaround for the fact that I don't get a global error list from the LSP <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> (I think VS Code has that, right?)</p>",
        "id": 186782567,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1580218599
    },
    {
        "content": "<p>The duplicate checks might have to do with the order of drops, give me a minute</p>",
        "id": 186782629,
        "sender_full_name": "Emil Lauridsen",
        "timestamp": 1580218660
    },
    {
        "content": "<blockquote>\n<p>though admittedly that's kind of a workaround for the fact that I don't get a global error list from the LSP</p>\n</blockquote>\n<p>We actually should move away from a global list for cargo check. Rather, we should only check the crates which are currently opened. Hacking on ra_syntax with cargo check enabled is pretty painful, b/c it rebulids everyhing</p>",
        "id": 186782698,
        "sender_full_name": "matklad",
        "timestamp": 1580218687
    },
    {
        "content": "<p>but yeah, the core problem is that it <em>does</em> seem to rebuilds the deps in this case</p>",
        "id": 186782711,
        "sender_full_name": "matklad",
        "timestamp": 1580218699
    },
    {
        "content": "<p>It rebuilds depend<em>ants</em> yes, not dependencies, unless something is wonky with target</p>",
        "id": 186782810,
        "sender_full_name": "Emil Lauridsen",
        "timestamp": 1580218786
    },
    {
        "content": "<p>e.g the things that depend on the crate you're editing if they're in the same workspace</p>",
        "id": 186782885,
        "sender_full_name": "Emil Lauridsen",
        "timestamp": 1580218814
    },
    {
        "content": "<p>We could also check only the modified crate, but that's going to miss some errors and, more importantly, it might pick the wrong features and rebuild everything</p>",
        "id": 186782971,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580218870
    },
    {
        "content": "<p>I ran into that in <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/1925\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/1925\">https://github.com/rust-analyzer/rust-analyzer/issues/1925</a></p>",
        "id": 186782987,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580218883
    },
    {
        "content": "<p>Ah, ok, there's many test targets in the workspace I am working on, that's why I see a ton of rustc</p>",
        "id": 186782994,
        "sender_full_name": "matklad",
        "timestamp": 1580218895
    },
    {
        "content": "<p>There's definitely something wrong with drop order as well, that results in not waiting for the first check to cancel before starting a new one, going to fix that too</p>",
        "id": 186783164,
        "sender_full_name": "Emil Lauridsen",
        "timestamp": 1580219000
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> if are you hacking with <code>ra_syntax</code> now, please let me know...</p>",
        "id": 186783195,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580219036
    },
    {
        "content": "<p>I think <code>self.watcher = WatchThread::new(&amp;self.options, &amp;self.workspace_root);</code> is going to start a new thread without waiting for the previous one</p>",
        "id": 186783278,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580219065
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> The drop impl cancels the running process and waits for it, <strong>but</strong> it is run after creating the new watch thread, which is an issues resulting in two cargo instances</p>",
        "id": 186783325,
        "sender_full_name": "Emil Lauridsen",
        "timestamp": 1580219119
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"258149\">@std::Veetaha</span> no, I don't plant to touch ra_syntax in the nearset future</p>",
        "id": 186783345,
        "sender_full_name": "matklad",
        "timestamp": 1580219138
    },
    {
        "content": "<p>Actually the two cargo visible instances might be an artifact of how htop works</p>",
        "id": 186783418,
        "sender_full_name": "matklad",
        "timestamp": 1580219164
    },
    {
        "content": "<blockquote>\n<p>Actually the two cargo visible instances might be an artifact of how htop works</p>\n</blockquote>\n<p>It might just be a second thread yea, but there is a theoretical bug anyways</p>",
        "id": 186783469,
        "sender_full_name": "Emil Lauridsen",
        "timestamp": 1580219199
    },
    {
        "content": "<p>New PR is up for the drop issue</p>",
        "id": 186783868,
        "sender_full_name": "Emil Lauridsen",
        "timestamp": 1580219502
    },
    {
        "content": "<blockquote>\n<p>We actually should move away from a global list for cargo check. Rather, we should only check the crates which are currently opened. Hacking on ra_syntax with cargo check enabled is pretty painful, b/c it rebulids everyhing</p>\n</blockquote>\n<p>sure, I just meant global as in more than just the current file though ;)</p>",
        "id": 186784563,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1580219949
    },
    {
        "content": "<p>Yup, things are a little better after <a href=\"https://github.com/rust-lang/rust/issues/2923\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/2923\">#2923</a></p>",
        "id": 186785175,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580220332
    },
    {
        "content": "<p>With regards to checking just the current crate it's a bit of \"plague vs cholera\": longer check times but error messages when you break something in a consumer crate. It would hurt some of my workflows a bit, but if we added a \"run full check\" command as well, it wouldn't be too bad</p>",
        "id": 186785483,
        "sender_full_name": "Emil Lauridsen",
        "timestamp": 1580220516
    },
    {
        "content": "<p>Yeah, I think this needs to be configurable. Probably something like:</p>\n<ul>\n<li>&lt; 10 crates in graph: do full check by default</li>\n<li>workspace with &gt; 10 crates total, check current crate by default</li>\n<li>\n<blockquote>\n<p>200 crates: disable cargo check by default, prompt the user</p>\n</blockquote>\n</li>\n</ul>",
        "id": 186785642,
        "sender_full_name": "matklad",
        "timestamp": 1580220613
    },
    {
        "content": "<p>There is some challenge to finding the correct Cargo.toml for a given source file, but that should be solvable.</p>",
        "id": 186785736,
        "sender_full_name": "Emil Lauridsen",
        "timestamp": 1580220699
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"212936\">@Emil Lauridsen</span> We might also want to use <code>package_id</code> instead of <code>target.name</code>. The first one includes the version (and registry, unfortunately), but works for build scripts. <code>target.name</code> is <code>build-script-build</code> for those.</p>",
        "id": 186785808,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580220732
    },
    {
        "content": "<p>I also made this change:</p>\n<div class=\"codehilite\"><pre><span></span>diff --git i/editors/code/src/status_display.ts w/editors/code/src/status_display.ts\nindex c75fddf9..52f5ce95 100644\n--- i/editors/code/src/status_display.ts\n+++ w/editors/code/src/status_display.ts\n@@ -17,7 +17,7 @@ export function activateStatusDisplay(ctx: Ctx) {\n class StatusDisplay implements vscode.Disposable {\n     packageName?: string;\n\n-    private i = 0;\n+    private i: number = 0;\n     private statusBarItem: vscode.StatusBarItem;\n     private command: string;\n     private timer?: NodeJS.Timeout;\n@@ -37,11 +37,8 @@ class StatusDisplay implements vscode.Disposable {\n         this.timer =\n             this.timer ||\n             setInterval(() =&gt; {\n-                if (this.packageName) {\n-                    this.statusBarItem!.text = `${this.frame()} cargo ${this.command} [${this.packageName}]`;\n-                } else {\n-                    this.statusBarItem!.text = `${this.frame()} cargo ${this.command}`;\n-                }\n+                this.frame();\n+                this.refreshText();\n             }, 300);\n\n         this.statusBarItem.show();\n@@ -65,6 +62,14 @@ class StatusDisplay implements vscode.Disposable {\n         this.statusBarItem.dispose();\n     }\n\n+    refreshText() {\n+        if (this.packageName) {\n+            this.statusBarItem!.text = `${spinnerFrames[this.i]} cargo ${this.command} [${this.packageName}]`;\n+        } else {\n+            this.statusBarItem!.text = `${spinnerFrames[this.i]} cargo ${this.command}`;\n+        }\n+    }\n+\n     handleProgressNotification(params: WorkDoneProgressBegin | WorkDoneProgressReport | WorkDoneProgressEnd) {\n         switch (params.kind) {\n             case &#39;begin&#39;:\n@@ -74,6 +79,7 @@ class StatusDisplay implements vscode.Disposable {\n             case &#39;report&#39;:\n                 if (params.message) {\n                     this.packageName = params.message;\n+                    this.refreshText();\n                 }\n                 break;\n\n@@ -84,6 +90,6 @@ class StatusDisplay implements vscode.Disposable {\n     }\n\n     private frame() {\n-        return spinnerFrames[(this.i = ++this.i % spinnerFrames.length)];\n+        this.i = (this.i + 1) % spinnerFrames.length;\n     }\n }\n</pre></div>\n\n\n<p>It keeps the spinner refreshing on a timer, but updates the package name when it changes. It feels a bit nicer, but might be slower during the initial analysis.</p>",
        "id": 186786045,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580220892
    },
    {
        "content": "<p>Ah, another issue here is that <code>cargo</code> only tells us when an artifact finishes, not when it starts. So the crate we display in the status bar might be the one that just finished, not the one that's being checked.</p>",
        "id": 186806807,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580233605
    },
    {
        "content": "<p>FOUND IT!</p>",
        "id": 186865159,
        "sender_full_name": "matklad",
        "timestamp": 1580286803
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/commit/b8245e47e98ee4d287087f10a0d493bdc3964951\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/commit/b8245e47e98ee4d287087f10a0d493bdc3964951\">https://github.com/rust-analyzer/rust-analyzer/commit/b8245e47e98ee4d287087f10a0d493bdc3964951</a></p>",
        "id": 186865160,
        "sender_full_name": "matklad",
        "timestamp": 1580286804
    },
    {
        "content": "<p>we were scheduling diagnostics computation on the main loop</p>",
        "id": 186865166,
        "sender_full_name": "matklad",
        "timestamp": 1580286818
    },
    {
        "content": "<p>naturally, if the main loop computes diagnostics, there's nothing to cancel it</p>",
        "id": 186865179,
        "sender_full_name": "matklad",
        "timestamp": 1580286835
    },
    {
        "content": "<blockquote>\n<p>we were scheduling diagnostics computation on the main loop</p>\n</blockquote>\n<p>Oh god. that's horrible</p>",
        "id": 186865220,
        "sender_full_name": "Emil Lauridsen",
        "timestamp": 1580286844
    },
    {
        "content": "<p>great job finding it</p>",
        "id": 186865227,
        "sender_full_name": "Emil Lauridsen",
        "timestamp": 1580286850
    },
    {
        "content": "<p>it was actually easy to find, once I've got back to the situation where it's easy to reproduce</p>",
        "id": 186865247,
        "sender_full_name": "matklad",
        "timestamp": 1580286880
    },
    {
        "content": "<p>basically, </p>\n<div class=\"codehilite\"><pre><span></span>fn loop_turn(\n    ...\n) -&gt; Result&lt;()&gt; {\n    eprintln!(&quot;event = {:?}&quot;, event);\n    let _p = ra_prof::print_time(&quot;event&quot;);\n</pre></div>\n\n\n<p>was all I used for debugging, the gun was smoking:</p>\n<div class=\"codehilite\"><pre><span></span>event = AddDiagnostic(&quot;file:///home/matklad/projects/stdarch/crates/core_arch/src/x86/mod.rs&quot;, DiagnosticWithFixes { diagnostic: Diagnostic { range: Range { start: Position { line: 354, character: 0 }, end: Position { line: 354, character: 56 } }, severity: Some(Error), code: Some(String(&quot;E0545&quot;)), source: Some(&quot;rustc&quot;), message: &quot;incorrect \\&#39;issue\\&#39;&quot;, related_information: None, tags: None }, suggested_fixes: [] })\nevent: 933.389429ms\n</pre></div>",
        "id": 186865280,
        "sender_full_name": "matklad",
        "timestamp": 1580286939
    },
    {
        "content": "<p>oh boy</p>",
        "id": 186865294,
        "sender_full_name": "Emil Lauridsen",
        "timestamp": 1580286956
    },
    {
        "content": "<p>thank god it's something stupid, that's fairly easy to fix</p>",
        "id": 186865343,
        "sender_full_name": "Emil Lauridsen",
        "timestamp": 1580286973
    },
    {
        "content": "<p>Also, I have a confession to make: I can't use logs for debugging :-(</p>\n<p>In theory, one should not recompile the code and just run with appropirate log level and see the problem.</p>\n<p>In practice, it is soooo much easier for me to insert a printf than to figure out how to filter out the messages I need</p>",
        "id": 186865368,
        "sender_full_name": "matklad",
        "timestamp": 1580287015
    },
    {
        "content": "<p>I know that feeling very well</p>",
        "id": 186865481,
        "sender_full_name": "Emil Lauridsen",
        "timestamp": 1580287120
    },
    {
        "content": "<p>Also, we should probably <code>log::error!() if turn_start.elapsed() &gt;= 250ms</code>, I though we were doing that actually</p>",
        "id": 186865508,
        "sender_full_name": "matklad",
        "timestamp": 1580287166
    },
    {
        "content": "<p>@maklad What is the procedure of your debug steps ? I have the same problem for debug this kind of thing in RA.</p>",
        "id": 186865519,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1580287190
    },
    {
        "content": "<p>One day, we should do <code>if loop_start.elapsed() &gt; 16ms { panic!(\"zero tolerance for lags\") }</code>....</p>",
        "id": 186865585,
        "sender_full_name": "matklad",
        "timestamp": 1580287224
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> good question! Let me write this to the <code>docs/dev</code> once I get to work place...</p>",
        "id": 186865612,
        "sender_full_name": "matklad",
        "timestamp": 1580287275
    },
    {
        "content": "<p>Also, let me cc <span class=\"user-mention\" data-user-id=\"198819\">@David Barsky</span> on the <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/cargo.20check.20issue/near/186865368\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/cargo.20check.20issue/near/186865368\">https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/cargo.20check.20issue/near/186865368</a> and <a href=\"https://github.com/sebasmagri/env_logger/issues/144\" target=\"_blank\" title=\"https://github.com/sebasmagri/env_logger/issues/144\">https://github.com/sebasmagri/env_logger/issues/144</a>, just to plant these ideas into your head for the tracing thing</p>",
        "id": 186867861,
        "sender_full_name": "matklad",
        "timestamp": 1580289660
    },
    {
        "content": "<blockquote>\n<p>One day, we should do <code>if loop_start.elapsed() &gt; 16ms { panic!(\"zero tolerance for lags\") }</code>....</p>\n</blockquote>\n<p>That would be horrible on very slow computers, or if you paused ra for a bit of time during debugging though. It did better be disableable.</p>",
        "id": 186868409,
        "sender_full_name": "bjorn3",
        "timestamp": 1580290161
    },
    {
        "content": "<p>What about people with 240 Hz displays? <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span>  Oof. I even looked at that code, but thought that \"publishing\" diagnostics is okay. Actually, I'm not even sure what the problem is.</p>",
        "id": 186871738,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580292978
    },
    {
        "content": "<p><code>handlers::publish_diagnostics</code> also <strong>computes</strong> diagnostics</p>",
        "id": 186872032,
        "sender_full_name": "matklad",
        "timestamp": 1580293256
    },
    {
        "content": "<p>Ah, the <code>Analysis::diagnostics</code> call?</p>",
        "id": 186872058,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580293271
    },
    {
        "content": "<p>yup</p>",
        "id": 186872070,
        "sender_full_name": "matklad",
        "timestamp": 1580293281
    },
    {
        "content": "<p>Yeah, that's.. easy to miss.</p>",
        "id": 186872095,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580293321
    },
    {
        "content": "<p>Dumped my debugging workflows to <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/2940#issuecomment-579761669\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/2940#issuecomment-579761669\">https://github.com/rust-analyzer/rust-analyzer/pull/2940#issuecomment-579761669</a></p>\n<p>Nothing to smart, just stick <code>eprintln</code>s everywhere and either drive through <code>cargo test</code> (good case) or <code>cargo xtask install --server</code> (slow case).</p>",
        "id": 186886572,
        "sender_full_name": "matklad",
        "timestamp": 1580305627
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> yowza! Glad you figured that one out :)! I'm going to cc Eliza on that issue as I think that'd be <em>absolutely</em> up her wheelhouse and the 35 minute compile times she sees on linkerd2-proxy.</p>",
        "id": 186888376,
        "sender_full_name": "David Barsky",
        "timestamp": 1580307075
    },
    {
        "content": "<p>For the module/line number filtering: we <em>absolutely</em> have the infrastructure for complex filters (c.f. <a href=\"https://docs.rs/tracing-subscriber/0.2.0-alpha.4/tracing_subscriber/filter/struct.EnvFilter.html#examples\" target=\"_blank\" title=\"https://docs.rs/tracing-subscriber/0.2.0-alpha.4/tracing_subscriber/filter/struct.EnvFilter.html#examples\">https://docs.rs/tracing-subscriber/0.2.0-alpha.4/tracing_subscriber/filter/struct.EnvFilter.html#examples</a>) and support for regexes/line numbers, which is being documented in <a href=\"https://github.com/tokio-rs/tracing/pull/368/\" target=\"_blank\" title=\"https://github.com/tokio-rs/tracing/pull/368/\">https://github.com/tokio-rs/tracing/pull/368/</a>. i'm mostly unsure how that should be hooked up to an IDE.</p>",
        "id": 186889078,
        "sender_full_name": "David Barsky",
        "timestamp": 1580307618
    }
]