[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> are you online by any chance?</p>",
        "id": 251079669,
        "sender_full_name": "matklad",
        "timestamp": 1630181937
    },
    {
        "content": "<p>want chat about <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/10065\">https://github.com/rust-analyzer/rust-analyzer/issues/10065</a> I:</p>",
        "id": 251079684,
        "sender_full_name": "matklad",
        "timestamp": 1630181948
    },
    {
        "content": "<p>So, I've look at the output of <code>cargo rustc --release -- --emit=llvm-ir -Cno-prepopulate-passes -Cpasses=name-anon-globals -o out.ir</code></p>",
        "id": 251079694,
        "sender_full_name": "matklad",
        "timestamp": 1630181961
    },
    {
        "content": "<p>And apparently what happens is that drops are generated by the <code>drop</code> function from a trait's VTable</p>",
        "id": 251079756,
        "sender_full_name": "matklad",
        "timestamp": 1630182004
    },
    {
        "content": "<p>Although nothing in this crate I think actually drops <code>dyn</code> values</p>",
        "id": 251079770,
        "sender_full_name": "matklad",
        "timestamp": 1630182018
    },
    {
        "content": "<p>So, I am wondering how codegen for drops for dyn types works, and if there any way to force the codegen happen upstream?</p>",
        "id": 251079792,
        "sender_full_name": "matklad",
        "timestamp": 1630182047
    },
    {
        "content": "<p>Seems like somethin you might just know :)</p>",
        "id": 251079818,
        "sender_full_name": "matklad",
        "timestamp": 1630182083
    },
    {
        "content": "<p>let me take a quick look at the source code of the monomorphization collector.</p>",
        "id": 251080023,
        "sender_full_name": "bjorn3",
        "timestamp": 1630182334
    },
    {
        "content": "<p>creating a <code>dyn</code> value is enough to create a fully populated vtable including destructor</p>",
        "id": 251080125,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630182462
    },
    {
        "content": "<p>and I think vtables are always generated in the codegen unit that needs to use it</p>",
        "id": 251080179,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630182491
    },
    {
        "content": "<p>So that means we generate ~~~ <code>impl Drop for RootDatabase</code> in every crate starting from <code>ide_db</code>?</p>",
        "id": 251080202,
        "sender_full_name": "matklad",
        "timestamp": 1630182529
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/42a2a53ec13b0e6e915acd09a2a9a963e5fa3b92/compiler/rustc_mir/src/monomorphize/collector.rs#L1132\">https://github.com/rust-lang/rust/blob/42a2a53ec13b0e6e915acd09a2a9a963e5fa3b92/compiler/rustc_mir/src/monomorphize/collector.rs#L1132</a></p>\n<p><a href=\"https://github.com/rust-lang/rust/blob/42a2a53ec13b0e6e915acd09a2a9a963e5fa3b92/compiler/rustc_mir/src/monomorphize/collector.rs#L942\">https://github.com/rust-lang/rust/blob/42a2a53ec13b0e6e915acd09a2a9a963e5fa3b92/compiler/rustc_mir/src/monomorphize/collector.rs#L942</a></p>",
        "id": 251080285,
        "sender_full_name": "bjorn3",
        "timestamp": 1630182613
    },
    {
        "content": "<p>Yeah, vtables are always codegened in the local mono item.</p>",
        "id": 251080286,
        "sender_full_name": "bjorn3",
        "timestamp": 1630182613
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 251080287,
        "sender_full_name": "bjorn3",
        "timestamp": 1630182613
    },
    {
        "content": "<p>not just per-crate, it's per codegen unit</p>",
        "id": 251080303,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630182636
    },
    {
        "content": "<p>For usual calls, we have this code in salsa:</p>\n<p><a href=\"https://github.com/salsa-rs/salsa/blob/114d6db8f6575de9b991c3ce9944f0a679a24b85/components/salsa-macros/src/query_group.rs#L240-L248\">https://github.com/salsa-rs/salsa/blob/114d6db8f6575de9b991c3ce9944f0a679a24b85/components/salsa-macros/src/query_group.rs#L240-L248</a></p>",
        "id": 251080346,
        "sender_full_name": "matklad",
        "timestamp": 1630182693
    },
    {
        "content": "<p>so if you end up with 16 CGUs and they all contain code that casts <code>&amp;RootDatabase</code> to <code>&amp;dyn HirDatabase</code>, then you get 16 destructors and vtables</p>",
        "id": 251080348,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630182697
    },
    {
        "content": "<p>I've just verifyied that commenting that out makes rust-analyzer compiled 1.5x slower in for me</p>",
        "id": 251080357,
        "sender_full_name": "matklad",
        "timestamp": 1630182721
    },
    {
        "content": "<p>Can we write a similar shim for drop glue?</p>",
        "id": 251080415,
        "sender_full_name": "matklad",
        "timestamp": 1630182763
    },
    {
        "content": "<p>I think drop glue is codegened locally due to <code>drop_in_place</code> technically being generic.</p>",
        "id": 251080420,
        "sender_full_name": "bjorn3",
        "timestamp": 1630182773
    },
    {
        "content": "<p>And the <code>Drop</code> impl in question being on a generic type.</p>",
        "id": 251080434,
        "sender_full_name": "bjorn3",
        "timestamp": 1630182802
    },
    {
        "content": "<p>maybe you could hack something together with a newtype or something?</p>",
        "id": 251080447,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630182828
    },
    {
        "content": "<p>There's no Drop impl at all I think, it's just the \"drop all the fields\" stuff</p>",
        "id": 251080449,
        "sender_full_name": "matklad",
        "timestamp": 1630182829
    },
    {
        "content": "<p>how do the stats change if you pass <code>-Zshare-generics</code>?</p>",
        "id": 251080502,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630182868
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  115446 (100%)  4163 (100%)  (TOTAL)\n    2611 (2.3%)    13 (0.3%)  hashbrown::raw::RawTable&lt;T,A&gt;::rehash_in_place\n    2302 (2.0%)     7 (0.2%)  ide_ssr::parsing::RuleBuilder::try_add\n    2286 (2.0%)    13 (0.3%)  hashbrown::raw::RawTable&lt;T,A&gt;::resize\n    2029 (1.8%)    16 (0.4%)  core::iter::traits::iterator::Iterator::try_fold\n    1861 (1.6%)    35 (0.8%)  &lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch\n    1668 (1.4%)    16 (0.4%)  hashbrown::raw::RawTable&lt;T,A&gt;::find\n    1508 (1.3%)    12 (0.3%)  hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert\n    1450 (1.3%)     1 (0.0%)  ide_ssr::matching::Matcher::attempt_match_token_tree\n    1273 (1.1%)    12 (0.3%)  hashbrown::raw::RawTable&lt;T,A&gt;::insert\n    1248 (1.1%)    13 (0.3%)  hashbrown::raw::RawTable&lt;T,A&gt;::rehash_in_place::{{closure}}\n    1224 (1.1%)     9 (0.2%)  alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized\n    1220 (1.1%)    24 (0.6%)  core::option::Option&lt;T&gt;::map\n    1161 (1.0%)     3 (0.1%)  ide_ssr::matching::Matcher::attempt_match_opt\n    1094 (0.9%)     4 (0.1%)  &lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold\n    1042 (0.9%)    20 (0.5%)  core::mem::replace\n    1040 (0.9%)    13 (0.3%)  hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash\n     952 (0.8%)     1 (0.0%)  ide_ssr::matching::Matcher::attempt_match_ufcs_to_method_call\n     910 (0.8%)    13 (0.3%)  hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements\n     888 (0.8%)    17 (0.4%)  core::option::Option&lt;T&gt;::ok_or_else\n     884 (0.8%)    13 (0.3%)  &lt;hashbrown::raw::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next\n     882 (0.8%)     1 (0.0%)  ide_ssr::matching::Matcher::attempt_match_record_field_list\n</code></pre></div>",
        "id": 251080560,
        "sender_full_name": "matklad",
        "timestamp": 1630182961
    },
    {
        "content": "<p>in other words, much, much better</p>",
        "id": 251080599,
        "sender_full_name": "matklad",
        "timestamp": 1630182967
    },
    {
        "content": "<p>lol, that's 4X fewer ir lines</p>",
        "id": 251080639,
        "sender_full_name": "matklad",
        "timestamp": 1630183034
    },
    {
        "content": "<p>oh</p>\n<div class=\"codehilite\"><pre><span></span><code>[profile.release]\nincremental = true\n</code></pre></div>\n<p>that means you don't get 8 or 16 CGUs, but 2 per source-module (I think?), which should be a lot higher still</p>",
        "id": 251080726,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630183103
    },
    {
        "content": "<p>these might really all be because of <code>&amp;RootDatabase -&gt; &amp;dyn OtherDatabase</code> conversions and duplication of <code>salsa::Storage&lt;RootDatabase&gt;</code> drop glue, which might happen in the majority of CGUs here</p>",
        "id": 251080762,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630183174
    },
    {
        "content": "<p><code>incremental</code> doesn't change the lines, sadly</p>",
        "id": 251080888,
        "sender_full_name": "matklad",
        "timestamp": 1630183308
    },
    {
        "content": "<p>huh, that is weird</p>",
        "id": 251080945,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630183348
    },
    {
        "content": "<p>Would it be an idea to have the <code>&amp;RootDatabase -&gt; &amp;dyn OtherDatabases</code> cast inside a non-<code>#[inline]</code> function that is called everywhere?</p>",
        "id": 251081003,
        "sender_full_name": "bjorn3",
        "timestamp": 1630183442
    },
    {
        "content": "<p>Aka, non-virtual-interface pattern. I think this might work, and even probably would be a good idea, but I don't see a way to quickly code it up -- we have coercions to dyn everywhere <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 251081104,
        "sender_full_name": "matklad",
        "timestamp": 1630183545
    },
    {
        "content": "<p>I also find all of these <code>Weak::drop</code> calls interesting, where do we use <code>Weak</code>?</p>",
        "id": 251081591,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630184069
    },
    {
        "content": "<p>wow, it really is all those conversions</p>",
        "id": 251081729,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630184236
    },
    {
        "content": "<p>using <code>ManuallyDrop</code> in <code>RootDatabase</code> and implementing <code>Drop</code> by hand and we go from 535434 lines in ide_ssr to 295787</p>",
        "id": 251081755,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630184269
    },
    {
        "content": "<p><span aria-label=\"weary\" class=\"emoji emoji-1f629\" role=\"img\" title=\"weary\">:weary:</span> </p>\n<p>Every time I set up to write \"... and here's how not to hate Rust build times \", I fall down one of these rabbit holes...</p>",
        "id": 251081828,
        "sender_full_name": "matklad",
        "timestamp": 1630184321
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink  [he/him]</span> that's genious!</p>",
        "id": 251081847,
        "sender_full_name": "matklad",
        "timestamp": 1630184343
    },
    {
        "content": "<p>rustc's compilation pipeline is incredibly... uh, \"naive\" I guess? all it does well is optimize to good code once LLVM spends hours chewing though it</p>",
        "id": 251081872,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630184390
    },
    {
        "content": "<p>Wait, how does that work? I thought that proc-macros add a whole bunch of fields, no? Ah, no, that lives in <code>salsa::Runtime</code></p>",
        "id": 251081878,
        "sender_full_name": "matklad",
        "timestamp": 1630184401
    },
    {
        "content": "<p><span aria-label=\"passenger ship\" class=\"emoji emoji-1f6f3\" role=\"img\" title=\"passenger ship\">:passenger_ship:</span> it</p>",
        "id": 251081929,
        "sender_full_name": "matklad",
        "timestamp": 1630184407
    },
    {
        "content": "<p>yeah, I checked the expansion</p>",
        "id": 251081936,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630184410
    },
    {
        "content": "<p>it's just that single generic field that causes the blowup</p>",
        "id": 251081968,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630184424
    },
    {
        "content": "<p>I'll open a PR shortly</p>",
        "id": 251082020,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630184484
    },
    {
        "content": "<p>kinda \"bad\" that we have to use unsafe code just to work around build time blowup, but whatevs</p>",
        "id": 251082032,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630184506
    },
    {
        "content": "<p>opened <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/10069\">https://github.com/rust-analyzer/rust-analyzer/pull/10069</a></p>",
        "id": 251082471,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630184953
    },
    {
        "content": "<p>I wonder if something can be done by rustc</p>",
        "id": 251083041,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630185535
    },
    {
        "content": "<p>E.g. calculate the cost of drop_in_place and determine if it's suitable to inlined</p>",
        "id": 251083064,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630185560
    },
    {
        "content": "<p>also opened <a href=\"https://github.com/rust-lang/rust/issues/88438\">https://github.com/rust-lang/rust/issues/88438</a> to hopefully bring some upstream attention to this problem</p>",
        "id": 251083159,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630185627
    },
    {
        "content": "<p>I wounder if we should maybe put <code>MaybeUninit</code> hack into salsa?</p>",
        "id": 251083286,
        "sender_full_name": "matklad",
        "timestamp": 1630185785
    },
    {
        "content": "<p>Is there a standard format for call graphs? I want to take llmv IR and spit out a file such that I can quicly navigatecall-chains</p>",
        "id": 251124407,
        "sender_full_name": "matklad",
        "timestamp": 1630234394
    },
    {
        "content": "<p>It looks like most of <code>ide_ssr</code> is actually chalk</p>",
        "id": 251124417,
        "sender_full_name": "matklad",
        "timestamp": 1630234407
    },
    {
        "content": "<p>at the moment, I am ctrl+F in the .ll file, but I could use a better tool</p>",
        "id": 251124437,
        "sender_full_name": "matklad",
        "timestamp": 1630234435
    },
    {
        "content": "<p>not sure if <code>.dot</code> has better tools, but it looks like <a href=\"https://github.com/robinmoussu/cargo-callgraph\">https://github.com/robinmoussu/cargo-callgraph</a> can output that</p>",
        "id": 251129426,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630240049
    },
    {
        "content": "<p>Looking more at the llmv ir for ide_ssr, I see thinkgs like</p>\n<div class=\"codehilite\"><pre><span></span><code>core::ptr::drop_in_place::&lt;chalk_ir::Substitution&lt;hir_ty::interner::Interner&gt;&gt;\n</code></pre></div>\n<p>in general, ide_ssr seems to cogeden a lot of chalk stuff, and that stuff causes 200+ instances of fold</p>",
        "id": 251135398,
        "sender_full_name": "matklad",
        "timestamp": 1630246498
    },
    {
        "content": "<p>I haven't traced this yet, but our interner infra is suspect -- the following is in the call tree:</p>\n<div class=\"codehilite\"><pre><span></span><code>&lt;&lt;once_cell::imp::OnceCell&lt;dashmap::DashMap&lt;alloc::sync::Arc&lt;hir_ty::interner::InternedWrapper&lt;chalk_ir::TyData&lt;hir_ty::interner::Interner&gt;&gt;&gt;, (), core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;&gt;&gt;::initialize&lt;&lt;once_cell::sync::OnceCell&lt;dashmap::DashMap&lt;alloc::sync::Arc&lt;hir_ty::interner::InternedWrapper&lt;chalk_ir::TyData&lt;hir_ty::interner::Interner&gt;&gt;&gt;, (), core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;&gt;&gt;::get_or_init&lt;&lt;dashmap::DashMap&lt;alloc::sync::Arc&lt;hir_ty::interner::InternedWrapper&lt;chalk_ir::TyData&lt;hir_ty::interner::Interner&gt;&gt;&gt;, (), core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt; as core::default::Default&gt;::default&gt;::{closure#0}, &lt;once_cell::sync::OnceCell&lt;_&gt;&gt;::get_or_init::Void&gt;::{closure#0} as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once::{shim:vtable#0}\n</code></pre></div>",
        "id": 251135433,
        "sender_full_name": "matklad",
        "timestamp": 1630246553
    },
    {
        "content": "<p>yeah, it's all generic code too</p>",
        "id": 251135628,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630246766
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> it seem to bottom out in some sort of vtable as well</p>\n<p>&lt;hir_ty::replace_errors_with_variables::ErrorReplacer as chalk_ir::fold::Folder&lt;hir_ty::interner::Interner&gt;&gt;::fold_goal</p>",
        "id": 251135736,
        "sender_full_name": "matklad",
        "timestamp": 1630246884
    },
    {
        "content": "<p>this thing is only used by some vtable</p>",
        "id": 251135743,
        "sender_full_name": "matklad",
        "timestamp": 1630246893
    },
    {
        "content": "<blockquote>\n<p>yeah, it's all generic code too</p>\n</blockquote>\n<p>I think this generic code shouldn't escape beyond <code>hir</code> though</p>",
        "id": 251135800,
        "sender_full_name": "matklad",
        "timestamp": 1630246928
    },
    {
        "content": "<p>Ideally yes, but beyond wrapping everything in non-generic functions or passing <code>-Zshare-generics</code> I don't think there's a way to do that</p>",
        "id": 251135977,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630247130
    },
    {
        "content": "<p>But we <em>are</em> wrapping everything in non-generic functions</p>",
        "id": 251136051,
        "sender_full_name": "matklad",
        "timestamp": 1630247209
    },
    {
        "content": "<p>Everything in <code>hir</code> is fully concrete I belive</p>",
        "id": 251136057,
        "sender_full_name": "matklad",
        "timestamp": 1630247220
    },
    {
        "content": "<p>hmm, right</p>",
        "id": 251136082,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630247246
    },
    {
        "content": "<p><code>-Zprint-mono-items</code> might help in your investigation</p>",
        "id": 251136158,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630247303
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>&lt;ide_ssr::resolving::Resolver&gt;::resolve\n&lt;ide_ssr::resolving::ResolutionScope&gt;::resolve_path\ncore::ptr::drop_in_place::&lt;hir::Type&gt;\ncore::ptr::drop_in_place::&lt;alloc::sync::Arc&lt;hir_ty::traits::TraitEnvironment&gt;&gt;\n&lt;alloc::sync::Arc&lt;hir_ty::traits::TraitEnvironment&gt; as core::ops::drop::Drop&gt;::drop\n&lt;alloc::sync::Arc&lt;hir_ty::traits::TraitEnvironment&gt;&gt;::drop_slow\ncore::ptr::drop_in_place::&lt;hir_ty::traits::TraitEnvironment&gt;\ncore::ptr::drop_in_place::&lt;chalk_ir::Environment&lt;hir_ty::interner::Interner&gt;&gt;\ncore::ptr::drop_in_place::&lt;chalk_ir::ProgramClauses&lt;hir_ty::interner::Interner&gt;&gt;\ncore::ptr::drop_in_place::&lt;hir_def::intern::Interned&lt;hir_ty::interner::InternedWrapper&lt;alloc::vec::Vec&lt;chalk_ir::ProgramClause&lt;hir_ty::interner::Interner&gt;&gt;&gt;&gt;&gt;\n&lt;hir_def::intern::Interned&lt;hir_ty::interner::InternedWrapper&lt;alloc::vec::Vec&lt;chalk_ir::ProgramClause&lt;hir_ty::interner::Interner&gt;&gt;&gt;&gt; as core::ops::drop::Drop&gt;::drop\n&lt;hir_def::intern::Interned&lt;hir_ty::interner::InternedWrapper&lt;alloc::vec::Vec&lt;chalk_ir::ProgramClause&lt;hir_ty::interner::Interner&gt;&gt;&gt;&gt;&gt;::drop_slow\n&lt;std::collections::hash::map::HashMap&lt;alloc::sync::Arc&lt;hir_ty::interner::InternedWrapper&lt;alloc::vec::Vec&lt;chalk_ir::ProgramClause&lt;hir_ty::interner::Interner&gt;&gt;&gt;&gt;, dashmap::util::SharedValue&lt;()&gt;, core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;&gt;::shrink_to_fit\n&lt;hashbrown::map::HashMap&lt;alloc::sync::Arc&lt;hir_ty::interner::InternedWrapper&lt;alloc::vec::Vec&lt;chalk_ir::ProgramClause&lt;hir_ty::interner::Interner&gt;&gt;&gt;&gt;, dashmap::util::SharedValue&lt;()&gt;, core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;&gt;::shrink_to_fit\n&lt;hashbrown::raw::RawTable&lt;(alloc::sync::Arc&lt;hir_ty::interner::InternedWrapper&lt;alloc::vec::Vec&lt;chalk_ir::ProgramClause&lt;hir_ty::interner::Interner&gt;&gt;&gt;&gt;, dashmap::util::SharedValue&lt;()&gt;)&gt;&gt;::shrink_to::&lt;hashbrown::map::make_hasher&lt;alloc::sync::Arc&lt;hir_ty::interner::InternedWrapper&lt;alloc::vec::Vec&lt;chalk_ir::ProgramClause&lt;hir_ty::interner::Interner&gt;&gt;&gt;&gt;, alloc::sync::Arc&lt;hir_ty::interner::InternedWrapper&lt;alloc::vec::Vec&lt;chalk_ir::ProgramClause&lt;hir_ty::interner::Interner&gt;&gt;&gt;&gt;, dashmap::util::SharedValue&lt;()&gt;, core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;::{closure#0}&gt;\ncore::ptr::drop_in_place::&lt;hashbrown::raw::RawTable&lt;(alloc::sync::Arc&lt;hir_ty::interner::InternedWrapper&lt;alloc::vec::Vec&lt;chalk_ir::ProgramClause&lt;hir_ty::interner::Interner&gt;&gt;&gt;&gt;, dashmap::util::SharedValue&lt;()&gt;)&gt;&gt;\n&lt;hashbrown::raw::RawTable&lt;(alloc::sync::Arc&lt;hir_ty::interner::InternedWrapper&lt;alloc::vec::Vec&lt;chalk_ir::ProgramClause&lt;hir_ty::interner::Interner&gt;&gt;&gt;&gt;, dashmap::util::SharedValue&lt;()&gt;)&gt; as core::ops::drop::Drop&gt;::drop\n&lt;hashbrown::raw::RawTable&lt;(alloc::sync::Arc&lt;hir_ty::interner::InternedWrapper&lt;alloc::vec::Vec&lt;chalk_ir::ProgramClause&lt;hir_ty::interner::Interner&gt;&gt;&gt;&gt;, dashmap::util::SharedValue&lt;()&gt;)&gt;&gt;::drop_elements\n&lt;hashbrown::raw::Bucket&lt;(alloc::sync::Arc&lt;hir_ty::interner::InternedWrapper&lt;alloc::vec::Vec&lt;chalk_ir::ProgramClause&lt;hir_ty::interner::Interner&gt;&gt;&gt;&gt;, dashmap::util::SharedValue&lt;()&gt;)&gt;&gt;::drop\n&lt;*mut (alloc::sync::Arc&lt;hir_ty::interner::InternedWrapper&lt;alloc::vec::Vec&lt;chalk_ir::ProgramClause&lt;hir_ty::interner::Interner&gt;&gt;&gt;&gt;, dashmap::util::SharedValue&lt;()&gt;)&gt;::drop_in_place\ncore::ptr::drop_in_place::&lt;(alloc::sync::Arc&lt;hir_ty::interner::InternedWrapper&lt;alloc::vec::Vec&lt;chalk_ir::ProgramClause&lt;hir_ty::interner::Interner&gt;&gt;&gt;&gt;, dashmap::util::SharedValue&lt;()&gt;)&gt;\ncore::ptr::drop_in_place::&lt;alloc::sync::Arc&lt;hir_ty::interner::InternedWrapper&lt;alloc::vec::Vec&lt;chalk_ir::ProgramClause&lt;hir_ty::interner::Interner&gt;&gt;&gt;&gt;&gt;\n&lt;alloc::sync::Arc&lt;hir_ty::interner::InternedWrapper&lt;alloc::vec::Vec&lt;chalk_ir::ProgramClause&lt;hir_ty::interner::Interner&gt;&gt;&gt;&gt; as core::ops::drop::Drop&gt;::drop\n&lt;alloc::sync::Arc&lt;hir_ty::interner::InternedWrapper&lt;alloc::vec::Vec&lt;chalk_ir::ProgramClause&lt;hir_ty::interner::Interner&gt;&gt;&gt;&gt;&gt;::drop_slow\ncore::ptr::drop_in_place::&lt;hir_ty::interner::InternedWrapper&lt;alloc::vec::Vec&lt;chalk_ir::ProgramClause&lt;hir_ty::interner::Interner&gt;&gt;&gt;&gt;\ncore::ptr::drop_in_place::&lt;alloc::vec::Vec&lt;chalk_ir::ProgramClause&lt;hir_ty::interner::Interner&gt;&gt;&gt;\n&lt;alloc::vec::Vec&lt;chalk_ir::ProgramClause&lt;hir_ty::interner::Interner&gt;&gt; as core::ops::drop::Drop&gt;::drop\ncore::ptr::drop_in_place::&lt;[chalk_ir::ProgramClause&lt;hir_ty::interner::Interner&gt;]&gt;\ncore::ptr::drop_in_place::&lt;chalk_ir::ProgramClause&lt;hir_ty::interner::Interner&gt;&gt;\ncore::ptr::drop_in_place::&lt;chalk_ir::ProgramClauseData&lt;hir_ty::interner::Interner&gt;&gt;\ncore::ptr::drop_in_place::&lt;chalk_ir::Binders&lt;chalk_ir::ProgramClauseImplication&lt;hir_ty::interner::Interner&gt;&gt;&gt;\ncore::ptr::drop_in_place::&lt;chalk_ir::ProgramClauseImplication&lt;hir_ty::interner::Interner&gt;&gt;\ncore::ptr::drop_in_place::&lt;chalk_ir::Constraints&lt;hir_ty::interner::Interner&gt;&gt;\ncore::ptr::drop_in_place::&lt;alloc::vec::Vec&lt;chalk_ir::InEnvironment&lt;chalk_ir::Constraint&lt;hir_ty::interner::Interner&gt;&gt;&gt;&gt;\n&lt;alloc::vec::Vec&lt;chalk_ir::InEnvironment&lt;chalk_ir::Constraint&lt;hir_ty::interner::Interner&gt;&gt;&gt; as core::ops::drop::Drop&gt;::drop\ncore::ptr::drop_in_place::&lt;[chalk_ir::InEnvironment&lt;chalk_ir::Constraint&lt;hir_ty::interner::Interner&gt;&gt;]&gt;\ncore::ptr::drop_in_place::&lt;chalk_ir::InEnvironment&lt;chalk_ir::Constraint&lt;hir_ty::interner::Interner&gt;&gt;&gt;\ncore::ptr::drop_in_place::&lt;chalk_ir::Constraint&lt;hir_ty::interner::Interner&gt;&gt;\ncore::ptr::drop_in_place::&lt;chalk_ir::Lifetime&lt;hir_ty::interner::Interner&gt;&gt;\ncore::ptr::drop_in_place::&lt;hir_def::intern::Interned&lt;hir_ty::interner::InternedWrapper&lt;chalk_ir::LifetimeData&lt;hir_ty::interner::Interner&gt;&gt;&gt;&gt;\n&lt;hir_def::intern::Interned&lt;hir_ty::interner::InternedWrapper&lt;chalk_ir::LifetimeData&lt;hir_ty::interner::Interner&gt;&gt;&gt; as core::ops::drop::Drop&gt;::drop\n&lt;hir_def::intern::Interned&lt;hir_ty::interner::InternedWrapper&lt;chalk_ir::LifetimeData&lt;hir_ty::interner::Interner&gt;&gt;&gt;&gt;::drop_slow\n&lt;std::collections::hash::map::HashMap&lt;alloc::sync::Arc&lt;hir_ty::interner::InternedWrapper&lt;chalk_ir::LifetimeData&lt;hir_ty::interner::Interner&gt;&gt;&gt;, dashmap::util::SharedValue&lt;()&gt;, core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;&gt;::shrink_to_fit\n&lt;hashbrown::map::HashMap&lt;alloc::sync::Arc&lt;hir_ty::interner::InternedWrapper&lt;chalk_ir::LifetimeData&lt;hir_ty::interner::Interner&gt;&gt;&gt;, dashmap::util::SharedValue&lt;()&gt;, core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;&gt;::shrink_to_fit\n&lt;hashbrown::raw::RawTable&lt;(alloc::sync::Arc&lt;hir_ty::interner::InternedWrapper&lt;chalk_ir::LifetimeData&lt;hir_ty::interner::Interner&gt;&gt;&gt;, dashmap::util::SharedValue&lt;()&gt;)&gt;&gt;::shrink_to::&lt;hashbrown::map::make_hasher&lt;alloc::sync::Arc&lt;hir_ty::interner::InternedWrapper&lt;chalk_ir::LifetimeData&lt;hir_ty::interner::Interner&gt;&gt;&gt;, alloc::sync::Arc&lt;hir_ty::interner::InternedWrapper&lt;chalk_ir::LifetimeData&lt;hir_ty::interner::Interner&gt;&gt;&gt;, dashmap::util::SharedValue&lt;()&gt;, core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;::{closure#0}&gt;\n&lt;hashbrown::raw::RawTable&lt;(alloc::sync::Arc&lt;hir_ty::interner::InternedWrapper&lt;chalk_ir::LifetimeData&lt;hir_ty::interner::Interner&gt;&gt;&gt;, dashmap::util::SharedValue&lt;()&gt;)&gt;&gt;::resize::&lt;hashbrown::map::make_hasher&lt;alloc::sync::Arc&lt;hir_ty::interner::InternedWrapper&lt;chalk_ir::LifetimeData&lt;hir_ty::interner::Interner&gt;&gt;&gt;, alloc::sync::Arc&lt;hir_ty::interner::InternedWrapper&lt;chalk_ir::LifetimeData&lt;hir_ty::interner::Interner&gt;&gt;&gt;, dashmap::util::SharedValue&lt;()&gt;, core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;::{closure#0}&gt;\n</code></pre></div>",
        "id": 251137031,
        "sender_full_name": "matklad",
        "timestamp": 1630248295
    },
    {
        "content": "<p>Aka, <code>core::ptr::drop_in_place::&lt;hir::Type&gt;</code> is (one) of the culprits here</p>",
        "id": 251137075,
        "sender_full_name": "matklad",
        "timestamp": 1630248360
    },
    {
        "content": "<p>I smell an <code>outline_drop</code> crate coming that automates the <code>ManuallyDrop</code> hack</p>",
        "id": 251137404,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630248696
    },
    {
        "content": "<p>Using proc macros to improve compile times!</p>",
        "id": 251137636,
        "sender_full_name": "matklad",
        "timestamp": 1630248932
    },
    {
        "content": "<p>The second issue is that we have generic <code>iterate_method_candidates</code> methods on Ty. THey are generic in the closure, but they leak their body, which means that every crate ends up compileing the whole of chalk'd  fold infara</p>",
        "id": 251138112,
        "sender_full_name": "matklad",
        "timestamp": 1630249400
    },
    {
        "content": "<p>I am not a big fan of generic folders. Having read 70 megs of LLVM IR with them, I must say I am even more not a fan of them now</p>",
        "id": 251138173,
        "sender_full_name": "matklad",
        "timestamp": 1630249446
    },
    {
        "content": "<p>Heh, it's even worse than outline_drop</p>",
        "id": 251142520,
        "sender_full_name": "matklad",
        "timestamp": 1630254262
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/d15f646ff17e2da0d4e8dc2754ba83213cf1a8bb/crates/hir/src/lib.rs#L2500-L2510\">https://github.com/rust-analyzer/rust-analyzer/blob/d15f646ff17e2da0d4e8dc2754ba83213cf1a8bb/crates/hir/src/lib.rs#L2500-L2510</a></p>",
        "id": 251142522,
        "sender_full_name": "matklad",
        "timestamp": 1630254263
    },
    {
        "content": "<p>Here, we return an <code>impl Iterator</code>, which internally stores <code>Ty</code></p>",
        "id": 251142535,
        "sender_full_name": "matklad",
        "timestamp": 1630254287
    },
    {
        "content": "<p><code>Box&lt;dyn Iterator&gt;</code> it is?</p>",
        "id": 251142642,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630254370
    },
    {
        "content": "<p>And drop of that <code>Ty</code> produces measurable bloat</p>\n<div class=\"codehilite\"><pre><span></span><code>before\nafter\n  241007 (100%)  10644 (100%)  (TOTAL)\n    4498 (1.9%)     36 (0.3%)  core::iter::traits::iterator::Iterator::try_fold\n  261799 (100%)  11670 (100%)  (TOTAL)\n    5239 (2.0%)     42 (0.4%)  core::iter::traits::iterator::Iterator::try_fold\n</code></pre></div>\n<p>There are six folds in one drop</p>",
        "id": 251142648,
        "sender_full_name": "matklad",
        "timestamp": 1630254377
    },
    {
        "content": "<p>I don't think this helps -- its return postition impl trait, its already monomorphic</p>",
        "id": 251142694,
        "sender_full_name": "matklad",
        "timestamp": 1630254447
    },
    {
        "content": "<p>and drop for <code>Box&lt;dyn Trait&gt;</code> I belive is codegened in the caller?</p>",
        "id": 251142709,
        "sender_full_name": "matklad",
        "timestamp": 1630254470
    },
    {
        "content": "<p>wait, no, it <strong>is</strong> codegened into the calle with Box, and does help!</p>",
        "id": 251142776,
        "sender_full_name": "matklad",
        "timestamp": 1630254511
    },
    {
        "content": "<p>it's codegen'd into the code that casts to the trait object</p>",
        "id": 251142790,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630254526
    },
    {
        "content": "<p>Unfortunately, these build time optimizations don't show up on CI, which keeps getting slower and slower.</p>",
        "id": 251189257,
        "sender_full_name": "Laurențiu",
        "timestamp": 1630305583
    },
    {
        "content": "<p>Oh, we don't do caching there, do we?</p>",
        "id": 251189454,
        "sender_full_name": "Laurențiu",
        "timestamp": 1630305767
    },
    {
        "content": "<p>we do use caching</p>",
        "id": 251191606,
        "sender_full_name": "matklad",
        "timestamp": 1630307535
    },
    {
        "content": "<p>But we use debug builds for CI, and debugs runs with -Zshare-generics effectively</p>",
        "id": 251191637,
        "sender_full_name": "matklad",
        "timestamp": 1630307563
    },
    {
        "content": "<p>Not in the metrics workflow, but that's probably fine.</p>",
        "id": 251191641,
        "sender_full_name": "Laurențiu",
        "timestamp": 1630307566
    }
]