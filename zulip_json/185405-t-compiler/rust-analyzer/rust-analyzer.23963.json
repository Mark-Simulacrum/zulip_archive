[
    {
        "content": "<p>I was wondering what would be the best way to go about refactoring the building of <code>CallInfo::label</code>, currently we build the label using <code>completion::function_label</code> which preserves the original formatting and information (parameters + including generics and where clauses) and then we extract the parameters separately, which may or may not match exactly since they are turned into a <code>String</code> manually.</p>\n<p>Simplest solution would probably be just turning the <code>ast::FnDef</code> params directly into text, and then in <code>conv</code> implementing <code>Conv</code> for <code>ra_ide_api::CallInfo</code> and turning it into <code>lsp_types::SignatureInformation</code> where we ensure the LSP requirements that the parameters are a substring of the label, we could also turn them into offsets here if wanted.</p>\n<p>Another possible solution is to change the <code>CallInfo</code> so that it doesn't contain a single <code>label</code> but all the parts that make it and then build the label separately. e.g.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">CallInfo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Documentation for the function</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">doc</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Documentation</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Name of the function</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">name</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Parameters of the function</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">parameters</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Generic parameters</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">generic_parameters</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Predicates</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">where_predicates</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Return type</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">ret</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">active_parameter</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>This would make it easy to ensure that the parameters are actual substrings of the label, but it would mean we'd need to implement some sort of pretty printing for creating the output label.</p>",
        "id": 161243366,
        "sender_full_name": "vipentti",
        "timestamp": 1553086255
    },
    {
        "content": "<p>The letter approach seems reasonable. In general, we shouldn't rely on FnDef when making a CallInfo</p>",
        "id": 161252108,
        "sender_full_name": "matklad",
        "timestamp": 1553092098
    },
    {
        "content": "<p>Consider the case where you are calling a lambda function</p>",
        "id": 161252121,
        "sender_full_name": "matklad",
        "timestamp": 1553092110
    },
    {
        "content": "<p>It still has parameter types and return type, but they are not present in the source text. We should reconstruct them from type-inference information</p>",
        "id": 161252148,
        "sender_full_name": "matklad",
        "timestamp": 1553092137
    },
    {
        "content": "<p>So, <code>CallInfo</code> indeed should contain abstract pieces of information, and rendering them to whatever representation the client wants should be a consern of a client</p>",
        "id": 161252212,
        "sender_full_name": "matklad",
        "timestamp": 1553092175
    },
    {
        "content": "<p>I prefer the latter approach as well. Whichever way we go I think we should use the same scheme for completion and hover.</p>",
        "id": 161256052,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1553094514
    },
    {
        "content": "<p>Maybe instead of having it being specific to a <code>CallInfo</code> make something like <code>FunctionSignature</code> that contains the information that can be contained in the <code>CallInfo</code> but also be used directly by hover and completion, then make similar structure for other types as well.</p>",
        "id": 161256859,
        "sender_full_name": "vipentti",
        "timestamp": 1553095011
    },
    {
        "content": "<p>Then we can implement some sort of pretty printing that can be used for UI purposes</p>",
        "id": 161257005,
        "sender_full_name": "vipentti",
        "timestamp": 1553095086
    },
    {
        "content": "<p>So some sort of common intermediate structures for types and signatures</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">TypeWithName</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">name</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">typ</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// const, static etc.</span>\n<span class=\"w\">    </span><span class=\"n\">modifier</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 161257188,
        "sender_full_name": "vipentti",
        "timestamp": 1553095207
    },
    {
        "content": "<p>Then displaying would be the responsibility of the client, and we could have functions for turning <code>AstNodes</code> into corresponding intermediate structures</p>",
        "id": 161257314,
        "sender_full_name": "vipentti",
        "timestamp": 1553095272
    },
    {
        "content": "<p>Yeah I like the <code>FunctionSignature</code> idea. That would make it easier to say.... switch the presentation of generic arguments if the user wanted</p>",
        "id": 161258348,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1553096040
    },
    {
        "content": "<p>between <code>arg1 : T</code> vs <code>where</code> syntax or whatever</p>",
        "id": 161258413,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1553096064
    }
]