[
    {
        "content": "<p>Read the <code>resolve_path_fp_with_macro</code> that <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> sent yesterday. For anyone interested, I think this is mostly correct in broad strokes. If any mistakes are found, please let me know!</p>\n<p>These are the following path types:</p>\n<p><strong>Dollar Crate</strong></p>\n<p>Example: <code>use $crate::foo::bar</code></p>\n<p>Usage: used in macros.</p>\n<p><strong>Crate</strong></p>\n<p>Example: <code>use crate::foo::bar</code></p>\n<p>Usage: When you want to import something in the crate. It is like an absolute path from the current crate to the item you want to import.</p>\n<p><strong>Plain</strong></p>\n<p>Example: <code>use foo::bar</code></p>\n<p>Usage: You can use it to import an external dependency or a module. Local modules take precedence, here so if you had an external dependency called <code>foo</code>, you will need an absolute Path.</p>\n<p><strong>Absolute</strong></p>\n<p>Example: <code>use ::foo::bar</code></p>\n<p>Usage: You can use it to import an external dependency. It is similar to crate, however it is the absolute path at the crate graph level. <code>foo</code> in this case is a crate and not a module.</p>\n<p><strong>Super</strong></p>\n<p>Example: <code>use super::foo::bar</code></p>\n<p>Usage: If you don't want to reference the parent module, you can use Super. It is like the <code>..</code> in a path.</p>\n<hr>\n<p>The algorithm to solve a path is a two step process.</p>\n<p>The first step is processing the first segment and figuring out: - path type, the crate the path is referencing to and the namespace of the first segment.</p>\n<p><strong>Notes on Path type</strong></p>\n<p>The only path types which can reference an external dependency is Absolute and Plain. Note also that Absolute cannot use crate, so the following paths are usually not valid : <code>use ::crate::foo::bar</code> <code>use ::$crate::foo::bar</code>.</p>\n<p><strong>Notes on Which Crate</strong></p>\n<p>When we see a Plain Path, we first look if the first segment is referring to another module. If not, we then look into our external dependencies which is located in <code>extern_prelude</code>.</p>\n<p>When we see an absolute path, we immediately look into the <code>extern_prelude</code> for the crate it is referring to. Since a crate cannot depend on itself(excluding tests/dev-builds), you will not be able to reference the current crate with an absolute path.</p>\n<p>When we see a Super Path, we first look up the module which had the import statement to begin with. Then we look at it's parent, which is a field that the ModuleData data structure stores. </p>\n<p><em>Skips macros to simplify the explanation, also because I've been ignoring them while reading the codebase for simplicity, so anything I assume will most likely be wrong</em></p>\n<hr>\n<p><strong>Finished Step one</strong></p>\n<p>So given the following path <code>use foo::bar::world</code> at the end of step one, we would have:</p>\n<ul>\n<li>Processed the <code>foo</code> segment</li>\n<li>Collected the NameSpace of <code>foo</code> which also tells us the Crate, and the Item that <code>foo</code> is (module/crate/Function/etc)</li>\n</ul>\n<p>For example, If <code>foo</code> was a module the NameSpace of <code>foo</code> would be <code>ModuleDef{crate_Id : 0, module_id : 2}</code> . We can use this information to get the items which are visible from <code>foo</code>.</p>\n<p><strong>Step Two </strong>  </p>\n<p>The second step is to iterate through the other segments until we get to the end. So in <code>foo::bar::hello</code> we take the NameSpace of <code>foo</code> which was <code>ModuleDef{crate_Id : 0, module_id : 2}</code> and we use that to search for a visible item named bar. We know exactly where to look too because of the Crate_ID being present. Once we've found <code>bar</code> in the <code>foo</code> namespace, we then set the <code>bar</code> namespace as the current namespace and repeat until we are finished.</p>",
        "id": 221412448,
        "sender_full_name": "kev",
        "timestamp": 1609614098
    },
    {
        "content": "<p>For debugging and learning, I created a test in <code>crates/hir_def/src/nameres/tests.rs</code> and pasted the following in a test function:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">compute_crate_def_map</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">r</span><span class=\"err\">#</span><span class=\"s\">\"</span>\n<span class=\"s\">        //- /lib.rs crate:main deps:foo</span>\n<span class=\"s\">        mod a;</span>\n<span class=\"s\">        mod b;</span>\n<span class=\"s\">        pub mod foo;</span>\n<span class=\"s\">        pub use ::foo::hello;</span>\n\n<span class=\"s\">        //- /foo/mod.rs</span>\n<span class=\"s\">        pub mod hello;</span>\n<span class=\"s\">        pub struct Foo;</span>\n\n<span class=\"s\">        //- /a/mod.rs</span>\n<span class=\"s\">        pub mod hello;</span>\n<span class=\"s\">        pub struct Foo;</span>\n\n<span class=\"s\">        //- /b/mod.rs</span>\n<span class=\"s\">        pub mod hello;</span>\n<span class=\"s\">        pub struct Foo;</span>\n\n<span class=\"s\">        //- /foo/hello.rs</span>\n<span class=\"s\">        pub struct Baz;</span>\n\n<span class=\"s\">        //- /lib.rs crate:foo</span>\n<span class=\"s\">            pub fn hello() {};</span>\n<span class=\"s\">        \"</span><span class=\"err\">#</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 221412541,
        "sender_full_name": "kev",
        "timestamp": 1609614238
    },
    {
        "content": "<p>You can modify the use statement  to trigger different branches in <code>resolve_path_fp_with_macro</code> and add debug statements on <code>curr_ns</code> and <code>segment</code> to see the changed output</p>",
        "id": 221412609,
        "sender_full_name": "kev",
        "timestamp": 1609614314
    },
    {
        "content": "<p>I noticed that if there is an error, like the dependency is missing , then the test will silently return nothing though</p>",
        "id": 221412678,
        "sender_full_name": "kev",
        "timestamp": 1609614394
    },
    {
        "content": "<hr>\n<p>Hmm noticed I was not completely finished and am a bit perplexed as to why this line is needed: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_def/src/nameres/collector.rs#L515\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_def/src/nameres/collector.rs#L515</a></p>",
        "id": 221413338,
        "sender_full_name": "kev",
        "timestamp": 1609615270
    },
    {
        "content": "<p>If I import a function only, then I think the macros namespace would be <code>None</code> and the <code>Values</code> namespace in PerNS would also be None? But it should be seen as Resolved, unless I'm missing something with the PerNs structure?</p>",
        "id": 221413358,
        "sender_full_name": "kev",
        "timestamp": 1609615321
    },
    {
        "content": "<p>a function exists only in the values namespace, actually.</p>\n<p>let's say you import <code>foo</code> and it initially resolves to the function <code>foo</code>, then it may later still resolve to a type additionally: e.g. <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f722c68d035869839c29b6f71eb1ba4d\">something like this</a></p>",
        "id": 221416465,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1609620210
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Path.20Resolution.20in.20r-a/near/221416465\">said</a>:</p>\n<blockquote>\n<p>a function exists only in the values namespace, actually.</p>\n<p>let's say you import <code>foo</code> and it initially resolves to the function <code>foo</code>, then it may later still resolve to a type additionally: e.g. <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f722c68d035869839c29b6f71eb1ba4d\">something like this</a></p>\n</blockquote>\n<p>Yeah sorry, you are right, I was reading the debug wrong:</p>\n<div class=\"codehilite\"><pre><span></span><code>Segment : Name(Text(&quot;hello&quot;)) for Namespace : PerNs { types: None, values: Some((FunctionId(FunctionId(0)), Public)), macros: None }\n</code></pre></div>",
        "id": 221416795,
        "sender_full_name": "kev",
        "timestamp": 1609620755
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Path.20Resolution.20in.20r-a/near/221416465\">said</a>:</p>\n<blockquote>\n<p>a function exists only in the values namespace, actually.</p>\n<p>let's say you import <code>foo</code> and it initially resolves to the function <code>foo</code>, then it may later still resolve to a type additionally: e.g. <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f722c68d035869839c29b6f71eb1ba4d\">something like this</a></p>\n</blockquote>\n<p>This does not answer the initial question though? Regarding this: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_def/src/nameres/collector.rs#L515\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_def/src/nameres/collector.rs#L515</a></p>\n<p>From the code I pasted  macros and types is None, so then the import would be seen as not resolved IIUC?</p>\n<p>Hmm not sure what I am misunderstanding about that line</p>",
        "id": 221416814,
        "sender_full_name": "kev",
        "timestamp": 1609620801
    },
    {
        "content": "<p>let's say you do <code>use some_module::foo;</code>, then in the first loop of import resolution it may only resolve to a value, but later it may also resolve to a type. that's why <code>Indeterminate</code> is returned there; the way import resolution works is that it loops until everything is fully resolved or nothing changes anymore. <code>PartialResolvedImport::Resolved</code> would mean \"this is fully resolved and can't change anymore\"</p>",
        "id": 221416948,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1609620992
    },
    {
        "content": "<p>that's also why it returns <code>Resolved</code> when the import comes from a different crate; in that case, the resolution <em>can't</em> change in any future loops</p>",
        "id": 221417030,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1609621123
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Path.20Resolution.20in.20r-a/near/221416948\">said</a>:</p>\n<blockquote>\n<p>let's say you do <code>use some_module::foo;</code>, then in the first loop of import resolution it may only resolve to a value, but later it may also resolve to a type. that's why <code>Indeterminate</code> is returned there; the way import resolution works is that it loops until everything is fully resolved or nothing changes anymore. <code>PartialResolvedImport::Resolved</code> would mean \"this is fully resolved and can't change anymore\"</p>\n</blockquote>\n<p>Oh right, so Indeterminate means that it is Resolved, but there is space for other things in the other namespaces</p>",
        "id": 221417039,
        "sender_full_name": "kev",
        "timestamp": 1609621136
    },
    {
        "content": "<blockquote>\n<p>Oh right, so Indeterminate means that it is Resolved, but there is space for other things in the other namespaces</p>\n</blockquote>\n<p>well, it could be Resolved with space in other namespace if the import comes from a different crate, since we know in that case it can't change</p>",
        "id": 221417051,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1609621179
    },
    {
        "content": "<p>Indeterminate means \"maybe there'll be more if we resolve some other imports first\"</p>",
        "id": 221417097,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1609621205
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Path.20Resolution.20in.20r-a/near/221417030\">said</a>:</p>\n<blockquote>\n<p>that's also why it returns <code>Resolved</code> when the import comes from a different crate; in that case, the resolution <em>can't</em> change in any future loops</p>\n</blockquote>\n<p>Ah this was going to be my follow-up question :) </p>\n<p>do you mean that it is impossible to import a foo function and foo macro from another crate?</p>\n<p>so for example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">other_crate</span>::<span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">other_crate</span>::<span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kr\">macro</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>would be impossible, so once we resolve the function, it's impossible to resolve the macro unless it is aliased?</p>",
        "id": 221417197,
        "sender_full_name": "kev",
        "timestamp": 1609621374
    },
    {
        "content": "<p>well just the first <code>use other_crate::foo</code> will import both the function and the macro</p>",
        "id": 221417229,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1609621418
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Path.20Resolution.20in.20r-a/near/221417229\">said</a>:</p>\n<blockquote>\n<p>well just the first <code>use other_crate::foo</code> will import both the function and the macro</p>\n</blockquote>\n<p>Ah right, found my error</p>",
        "id": 221417289,
        "sender_full_name": "kev",
        "timestamp": 1609621482
    },
    {
        "content": "<p>So IIUC, </p>\n<p>When you do <code>use other_crate::foo</code> once we Resolve this, the namespace  cannot change, because it is not valid to do this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">other_crate</span>::<span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">my_mod</span>::<span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>In the above there is a namespace clash.</p>\n<p>However, if it comes from a local module, then we could possibly populate the namespace further. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">my_mod</span>::<span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span>: <span class=\"nc\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 221417482,
        "sender_full_name": "kev",
        "timestamp": 1609621769
    },
    {
        "content": "<p>So we've imported foo as a function and we've also used it as a type, so foo exists within the type and value namespace</p>",
        "id": 221417569,
        "sender_full_name": "kev",
        "timestamp": 1609621866
    },
    {
        "content": "<p><del>Hmm I think I am wrong actually, because in that instance, we did not import the foo type, we just used it as a type</del></p>\n<p>Hmm I think this makes a bit more sense:</p>\n<ul>\n<li>\n<p>So when we import a function called <code>foo</code> we put it in the Value namespace and state that it has not been fully resolved.</p>\n</li>\n<li>\n<p>It is possible to then have a <code>foo</code> macro in the same file, which would then populate the macro namespace.</p>\n</li>\n<li>\n<p>Within a function, it is possible to use the function as a type which would then populate the type namespace.</p>\n</li>\n<li>\n<p>It is not possible however to populate the type and value namespace for a function from an import.</p>\n</li>\n</ul>\n<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> does this sound remotely correct?</p>",
        "id": 221417671,
        "sender_full_name": "kev",
        "timestamp": 1609622010
    },
    {
        "content": "<p>well the point is that the <code>use my_mod::foo</code> could turn out to also be a type. for example</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">a</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"bp\">self</span>::<span class=\"n\">a</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"bp\">self</span>::<span class=\"n\">c</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">mod</span> <span class=\"nn\">b</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span>::<span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">mod</span> <span class=\"nn\">c</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span>::<span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">mod</span> <span class=\"nn\">d</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">bar</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"bp\">self</span>::<span class=\"n\">d</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>if we resolve the imports in the order as written in the first iteration, the <code>use super::foo</code> will first only resolve to the function foo because we haven't gotten to c and d yet. after a first loop, we know <code>bar</code> means the type <code>bar</code> in the top module; then in the second module, we can resolve the <code>pub use super::bar as foo</code>, which means we have an additional meaning for the <code>pub use self::c::*</code> as well</p>",
        "id": 221417923,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1609622355
    },
    {
        "content": "<p>\"using the function as a type\" does not populate the type namespace</p>",
        "id": 221417931,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1609622383
    },
    {
        "content": "<p>all of this mostly only matters in edge cases</p>",
        "id": 221417989,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1609622433
    },
    {
        "content": "<p>it might be interesting to try changing that line to return <code>Resolved</code> and see which test cases fail ;)</p>",
        "id": 221418069,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1609622523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Path.20Resolution.20in.20r-a/near/221417923\">said</a>:</p>\n<blockquote>\n<p>well the point is that the <code>use my_mod::foo</code> could turn out to also be a type. for example</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">a</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"bp\">self</span>::<span class=\"n\">a</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"bp\">self</span>::<span class=\"n\">c</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">mod</span> <span class=\"nn\">b</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span>::<span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">mod</span> <span class=\"nn\">c</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span>::<span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">mod</span> <span class=\"nn\">d</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">bar</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"bp\">self</span>::<span class=\"n\">d</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>if we resolve the imports in the order as written in the first iteration, the <code>use super::foo</code> will first only resolve to the function foo because we haven't gotten to c and d yet. after a first loop, we know <code>bar</code> means the type <code>bar</code> in the top module; then in the second module, we can resolve the <code>pub use super::bar as foo</code>, which means we have an additional meaning for the <code>pub use self::c::*</code> as well</p>\n</blockquote>\n<p>Haha trying to understand this:</p>\n<p>here </p>\n<div class=\"codehilite\"><pre><span></span><code>pub use super::bar as foo;\n</code></pre></div>\n<p>We import <code>bar</code> which is a Struct which is in the Type NameSpace and since we are aliasing it as <code>foo</code> then we now have <code>foo</code> being in Type namespace for <code>mod </code>c`</p>\n<p>So at this point, we have foo being seen as a Type in <code>mod c</code></p>\n<p>Since we have:</p>\n<div class=\"codehilite\"><pre><span></span><code>pub use self::c::*;\n</code></pre></div>\n<p>We now have foo being seen as a Type which is the <code>Bar</code> struct from <code>mod c</code> and also foo being seen as a function from <code>mod a</code></p>",
        "id": 221418591,
        "sender_full_name": "kev",
        "timestamp": 1609623253
    },
    {
        "content": "<p>sorry took me longer than I'd like to wrap my head around it</p>",
        "id": 221418598,
        "sender_full_name": "kev",
        "timestamp": 1609623286
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Path.20Resolution.20in.20r-a/near/221418069\">said</a>:</p>\n<blockquote>\n<p>it might be interesting to try changing that line to return <code>Resolved</code> and see which test cases fail ;)</p>\n</blockquote>\n<p>thanks for the idea, going to try this now</p>",
        "id": 221418620,
        "sender_full_name": "kev",
        "timestamp": 1609623320
    },
    {
        "content": "<p>The test case was really helpful haha.</p>\n<p>This is the test that fails, when we switch &amp;&amp; to ||.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[macro_export]</span><span class=\"w\"></span>\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$x</span>:<span class=\"nc\">ident</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"cp\">$x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">foo</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"bp\">self</span>::<span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">baz</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">baz</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li>\n<p><code>foo</code> is first a macro.</p>\n</li>\n<li>\n<p>Then when we do <code>foo!(foo)</code> it now becomes a type and a macro.</p>\n</li>\n<li>\n<p>We then do <code>use foo as bar</code> which means that bar is also now a type and a macro, since it just aliases <code>foo</code></p>\n</li>\n<li>\n<p>I note that <code>use foo as bar;</code> this does not make <code>bar</code> a type. It is the fact that <code>foo</code> is a type.</p>\n</li>\n<li>\n<p>We then do the same thing with <code>baz</code> with <code>use self::foo as baz</code>. So <code>baz</code> is a type and a macro. However, we also have a baz function, so <code>baz</code> is also a value</p>\n</li>\n</ul>",
        "id": 221419569,
        "sender_full_name": "kev",
        "timestamp": 1609624794
    },
    {
        "content": "<p>So If the following code was an external dep, and we imported it, we would be given:</p>\n<div class=\"codehilite\"><pre><span></span><code>            bar: t m\n            baz: t v m\n            foo: t m\n</code></pre></div>\n<p>Which is why I believe Florian said that once we resolve an external dep, we can mark it as resolved. It's namespace would not change.</p>\n<p>The snippet was taken from the test <code>fn type_value_macro_live_in_different_scopes() </code></p>",
        "id": 221419836,
        "sender_full_name": "kev",
        "timestamp": 1609625117
    }
]