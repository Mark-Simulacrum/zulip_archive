[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> split into the new stream</p>",
        "id": 163086655,
        "sender_full_name": "matklad",
        "timestamp": 1554977225
    },
    {
        "content": "<p>SO yeah, I feel like making <code>TokenSource</code> an iterator-ish thing with explicit <code>bump</code> method would work</p>",
        "id": 163086755,
        "sender_full_name": "matklad",
        "timestamp": 1554977325
    },
    {
        "content": "<p>The two probels we need to sovle are</p>\n<ul>\n<li>lookahead</li>\n<li>composite tokens</li>\n</ul>",
        "id": 163086776,
        "sender_full_name": "matklad",
        "timestamp": 1554977346
    },
    {
        "content": "<p>I think we always do a constant amount of lookahead, and that lookahead should never look <em>inside</em> of a token tree, so</p>\n<p><code>fn lookahead(&amp;self, n: usize /* n &lt;= 3*/) -&gt; SyntaxKind</code> would work</p>",
        "id": 163086866,
        "sender_full_name": "matklad",
        "timestamp": 1554977412
    },
    {
        "content": "<p>For composite tokens, we never lookahread them, IIRC, so having an</p>\n<p><code>fn at(&amp;self, composite: SyntaxKind)</code> and <code>fn bump_composite(&amp;self, kind: SyntaxKind)</code> should work</p>",
        "id": 163086906,
        "sender_full_name": "matklad",
        "timestamp": 1554977486
    },
    {
        "content": "<p>And <code>fn lookahead</code> will not read the parent / child level, right ?</p>",
        "id": 163086975,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1554977535
    },
    {
        "content": "<p>right, lookahead  is stricttly within one level</p>",
        "id": 163087020,
        "sender_full_name": "matklad",
        "timestamp": 1554977600
    },
    {
        "content": "<p>If so, i think it can be simplify a lot of current implementation of tree-traversal.</p>",
        "id": 163087226,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1554977770
    },
    {
        "content": "<p>yeah, that's the hope!</p>",
        "id": 163087247,
        "sender_full_name": "matklad",
        "timestamp": 1554977797
    },
    {
        "content": "<p>Just reiterate : </p>\n<div class=\"codehilite\"><pre><span></span>trait TokenSource {\n   fn current(&amp;self) -&gt; SyntaxKind;   // Can composite\n   fn is_at_composite(&amp;self, kind: SyntaxKind);\n   fn bump(&amp;mut self); // Can not composite\n   fn bump_composite(&amp;mut sekf, SyntaxKind); // Can composite\n   fn lookahead(&amp;self, n: usize /* n &lt;= 3*/) -&gt; SyntaxKind; // Can composite ??!\n}\n</pre></div>\n\n\n<p>right</p>",
        "id": 163087354,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1554977901
    },
    {
        "content": "<p>?</p>",
        "id": 163087364,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1554977921
    },
    {
        "content": "<p>I guess, both <code>current</code> and <code>lookahead</code> should <strong>not</strong> composite</p>",
        "id": 163087419,
        "sender_full_name": "matklad",
        "timestamp": 1554977986
    },
    {
        "content": "<p>that is, one should just call <code>is_at_composite</code> explicitelly instead</p>",
        "id": 163087480,
        "sender_full_name": "matklad",
        "timestamp": 1554978006
    },
    {
        "content": "<p>so, if parser is at <code>&lt;&lt;</code>, current returns <code>&lt;</code>, lookahead on 0 and 1 returns <code>&lt;</code>, but is_at_composite('&lt;&lt;') returns true</p>",
        "id": 163087513,
        "sender_full_name": "matklad",
        "timestamp": 1554978045
    },
    {
        "content": "<p>That's great !!!</p>",
        "id": 163087543,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1554978088
    },
    {
        "content": "<p>If so,  we maybe even do not need ttToken struct, we could compute the value on the fly.</p>",
        "id": 163087670,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1554978212
    },
    {
        "content": "<p>yeah, I guess that is true!</p>",
        "id": 163087737,
        "sender_full_name": "matklad",
        "timestamp": 1554978267
    },
    {
        "content": "<p>Okay , i think the remain problem is TreeSink trait ?</p>",
        "id": 163087743,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1554978275
    },
    {
        "content": "<p>why is it problematic?</p>",
        "id": 163087867,
        "sender_full_name": "matklad",
        "timestamp": 1554978393
    },
    {
        "content": "<p>the current TreeSink::token is defined as following: </p>\n<div class=\"codehilite\"><pre><span></span>fn token::(&amp;mut self, kind: SyntaxKind, n_tokens: u8)\n</pre></div>\n\n\n<p>So we need to roll back the cursor and traversal it again to collect the tokens, do you think there is a better solution ?</p>",
        "id": 163088001,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1554978562
    },
    {
        "content": "<p>Hm, I wonder why we need n_tokens there at all</p>",
        "id": 163088104,
        "sender_full_name": "matklad",
        "timestamp": 1554978636
    },
    {
        "content": "<p>like SyntaxKind should determine <code>n_tokens</code> exactly?</p>",
        "id": 163088108,
        "sender_full_name": "matklad",
        "timestamp": 1554978650
    },
    {
        "content": "<p>I gues, if <code>TokenSource</code> is a mutable iterator, for MBE token-sink can be 100% no-op?</p>",
        "id": 163088188,
        "sender_full_name": "matklad",
        "timestamp": 1554978745
    },
    {
        "content": "<p>like we just see how far the iterator is advanced</p>",
        "id": 163088195,
        "sender_full_name": "matklad",
        "timestamp": 1554978759
    },
    {
        "content": "<p>Why do we need treesink of TokenSource is mutable iterator ?</p>",
        "id": 163088339,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1554978906
    },
    {
        "content": "<p>Why do we need treesink if TokenSource is mutable iterator ?</p>",
        "id": 163088343,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1554978924
    },
    {
        "content": "<p>for macros, we probably don't need it at all</p>",
        "id": 163088345,
        "sender_full_name": "matklad",
        "timestamp": 1554978928
    },
    {
        "content": "<p>but for actual parser, where we have a flat list of tokens and want a syntax tree in the end, we do need tree sink</p>",
        "id": 163088361,
        "sender_full_name": "matklad",
        "timestamp": 1554978957
    },
    {
        "content": "<p>Okay, make sense.</p>",
        "id": 163088537,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1554979125
    },
    {
        "content": "<p>Thats enough for me to try implement a PR for this change,  after i finish the add LR_DOLLOR PR :)</p>",
        "id": 163088621,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1554979212
    }
]