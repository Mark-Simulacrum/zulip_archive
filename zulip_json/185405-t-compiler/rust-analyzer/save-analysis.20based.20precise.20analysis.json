[
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span>, this is the thread to discuss how we add save-analysis to rust-analyzer.I think a reasonable first step is to review analysis-related crates, fix any API issues and publish them to <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a>.</p>\n<p>Specifically, I think there might be two things to fix:</p>\n<ul>\n<li>using <code>anyhow::Errror</code> (or even <code>Box&lt;dyn Send + Sync + 'static&gt;</code>) for error handling. Save-analysis reads data from the OS, so errors are expected, and errors should be helpful.</li>\n<li>splitting analysis loading functionality from <code>AnalysisHost</code>. As I understand this, <code>AnalysisHost</code> at the moment contains a Mutext which wraps an analysis insrance and, in general, manages state. I think it's important that we start with the more minimal stateless approach, and add state as an optimization only if we really need it. Or is there already some intermediate crate, which can read analysis from disk, but doesn't use mutexes?</li>\n</ul>",
        "id": 181122950,
        "sender_full_name": "matklad",
        "timestamp": 1574177964
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> thanks for starting a topic! I was just thinking about it when you posted <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 181126391,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1574179668
    },
    {
        "content": "<p>Re errors, we definitely should either expand the definition and catch more errors or use the dynamic one, I’m good with either</p>",
        "id": 181126480,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1574179704
    },
    {
        "content": "<p>Re mutex, I’d say we should just move it out. It also messes with recursive processing of the data  as well</p>",
        "id": 181126590,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1574179776
    },
    {
        "content": "<p>I had a patch somewhere but didn’t go further with that, will need to bring it back</p>",
        "id": 181126686,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1574179806
    },
    {
        "content": "<p>Exploring the stateless approach is a good idea, as it strikes a balance between optimizing for subsequent queries and latency stemming from preprocessing the data</p>",
        "id": 181126957,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1574179932
    },
    {
        "content": "<p>Exploring the stateless approach is a good idea, as it strikes a balance between optimizing for subsequent queries and latency stemming from preprocessing the data</p>",
        "id": 181149993,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1574194570
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> and <span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span> I've been talking to <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>. They were making a case for why it makes more sense to use a \"LSP server\" instead of \"command-line tools\". The TL;DR, I think, is a few things:</p>\n<ul>\n<li>stable interface, not something ad-hoc we have to experiment with</li>\n<li>ability to stay resident means that repeated uses will be faster</li>\n<li>you could still wait to start it (and potentially ask it to quit after some time) to control memory usage</li>\n<li>closer to the existing RLS (basically it would be kind of stripped down)</li>\n</ul>\n<p>I feel like it'd be good maybe to make a hackmd and try to enumerate the arguments in various directions in a bit more depth. I suspect there are a lot of details -- eg., what exactly do we forward? (notably, I would expect we'd not forward details from open files.)</p>",
        "id": 183592961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576531873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> , <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> hack md sounds nice, I've started one here: <a href=\"https://hackmd.io/sMospvYyTtisAnLMdlrUgQ\" target=\"_blank\" title=\"https://hackmd.io/sMospvYyTtisAnLMdlrUgQ\">https://hackmd.io/sMospvYyTtisAnLMdlrUgQ</a></p>",
        "id": 183631065,
        "sender_full_name": "matklad",
        "timestamp": 1576574750
    },
    {
        "content": "<p>Filled in the document!</p>",
        "id": 183634412,
        "sender_full_name": "matklad",
        "timestamp": 1576577432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> great! I left a few comments</p>",
        "id": 183654107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576593788
    },
    {
        "content": "<p>I had a question though</p>",
        "id": 183654115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576593793
    },
    {
        "content": "<p>It seems like there's a \"third option\" too</p>",
        "id": 183654148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576593813
    },
    {
        "content": "<p>Maybe I didn't really understand what you were proposing :)</p>",
        "id": 183654249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576593858
    },
    {
        "content": "<p>The third is \"CLI tool to replace RLS\"?</p>",
        "id": 183654301,
        "sender_full_name": "matklad",
        "timestamp": 1576593910
    },
    {
        "content": "<p>Yes. I'm not sure it's better than the other two.</p>",
        "id": 183654449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576593998
    },
    {
        "content": "<p>Maybe it has the combined downsides of both :)</p>",
        "id": 183654455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576594002
    },
    {
        "content": "<p>Yeah, I guess it's a possible extension to the second one</p>",
        "id": 183654473,
        "sender_full_name": "matklad",
        "timestamp": 1576594015
    },
    {
        "content": "<p>does my description make sense?</p>",
        "id": 183654480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576594018
    },
    {
        "content": "<p>yes</p>",
        "id": 183654509,
        "sender_full_name": "matklad",
        "timestamp": 1576594036
    },
    {
        "content": "<p>I guess the key question is whether rust-analyzer actually has knowledge of save-analysis directly</p>",
        "id": 183654532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576594062
    },
    {
        "content": "<p>or not</p>",
        "id": 183654533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576594063
    },
    {
        "content": "<p>that's the <em>main</em> difference between the two CLI options, I think</p>",
        "id": 183654595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576594086
    },
    {
        "content": "<p>Hm, I think if you actually distribute CLI tools, you have to make them stable for real</p>",
        "id": 183654633,
        "sender_full_name": "matklad",
        "timestamp": 1576594113
    },
    {
        "content": "<p>while using save-analyzis internall can be sort-of an impl detail</p>",
        "id": 183654659,
        "sender_full_name": "matklad",
        "timestamp": 1576594130
    },
    {
        "content": "<p>Stability guarantees seems like a bigger difference here</p>",
        "id": 183654679,
        "sender_full_name": "matklad",
        "timestamp": 1576594144
    },
    {
        "content": "<p>yeah that was first in my list of drawbacks</p>",
        "id": 183654709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576594159
    },
    {
        "content": "<p>I'm not sure I agree that we have to support it, but it's a risk for sure</p>",
        "id": 183654730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576594173
    },
    {
        "content": "<p>what do you think about distributing rust-analyzer with rustc as the \"RLS component\"? I guess I kind of think we would want to do that <em>anyway</em></p>",
        "id": 183654816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576594209
    },
    {
        "content": "<p>Oh, if we can publish a tool and then just remove it from distribution that would probably be the sweet spot!n</p>",
        "id": 183654823,
        "sender_full_name": "matklad",
        "timestamp": 1576594216
    },
    {
        "content": "<p>Like, rust-analyzer wouldn't have to know about save-analysis, the tool can, in the future, use rustc API directly, etc etc.</p>\n<p>I love it!</p>",
        "id": 183654867,
        "sender_full_name": "matklad",
        "timestamp": 1576594252
    },
    {
        "content": "<p>in the limit this could be like <code>rustc -Zsomething</code></p>",
        "id": 183654899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576594274
    },
    {
        "content": "<p>The hard question here is who will be responsible for merging analysis of several crates into a single analysis of a workspace</p>",
        "id": 183654910,
        "sender_full_name": "matklad",
        "timestamp": 1576594280
    },
    {
        "content": "<p>but I think that will be hard to figure out because of workspaces</p>",
        "id": 183654925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576594291
    },
    {
        "content": "<p>I guess that's what you just said</p>",
        "id": 183654935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576594298
    },
    {
        "content": "<p>Yeah. At the moment, rls library which loads save analysis is responsible for merging sa from several crates</p>",
        "id": 183655012,
        "sender_full_name": "matklad",
        "timestamp": 1576594326
    },
    {
        "content": "<p>it would be hard to put that logic directly into rustc, b/c it sort-of depends on Cargo as well</p>",
        "id": 183655051,
        "sender_full_name": "matklad",
        "timestamp": 1576594351
    },
    {
        "content": "<p>what is the answer to this</p>",
        "id": 183655059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576594358
    },
    {
        "content": "<blockquote>\n<p>nikomatsakis: The LSP server itself can't require the client to save all modified documents, right? So this would require all editor plugins to be aware of these changes?</p>\n</blockquote>",
        "id": 183655066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576594361
    },
    {
        "content": "<p>referring to forcing things to save to disk</p>",
        "id": 183655072,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576594367
    },
    {
        "content": "<p>I think that's a pretty significant drawback worth highlighting :)</p>",
        "id": 183655079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576594375
    },
    {
        "content": "<blockquote>\n<p>The hard question here is who will be responsible for merging analysis of several crates into a single analysis of a workspace</p>\n</blockquote>\n<p>I guess I feel like the goal should just be to complete rust-analyzer and remove the save-analysis dependency <em>that</em> way</p>",
        "id": 183655247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576594475
    },
    {
        "content": "<p>Yeah, that's true</p>",
        "id": 183655250,
        "sender_full_name": "matklad",
        "timestamp": 1576594476
    },
    {
        "content": "<p>there should be custom per-client work for this</p>",
        "id": 183655263,
        "sender_full_name": "matklad",
        "timestamp": 1576594487
    },
    {
        "content": "<p>(though, we already ship custom clients for emacs and VS Code, and some folks ship custom clients for Vims, so I don't see this as a super-major issue)</p>",
        "id": 183655331,
        "sender_full_name": "matklad",
        "timestamp": 1576594534
    },
    {
        "content": "<p>how hard to do you think it would be to spin up the RLS and forward requests for these specific commands back and forth?</p>",
        "id": 183655348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576594544
    },
    {
        "content": "<p>it doesn't, conceptually, seem very hard</p>",
        "id": 183655352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576594547
    },
    {
        "content": "<p>(and, like, we don't save docs for <code>cargo watch</code> at all at the moment, and it somehow works ok )</p>",
        "id": 183655365,
        "sender_full_name": "matklad",
        "timestamp": 1576594552
    },
    {
        "content": "<p>medium annoying I'd say</p>",
        "id": 183655439,
        "sender_full_name": "matklad",
        "timestamp": 1576594584
    },
    {
        "content": "<p>like you'll need to deal with all kinds of io-related errors and state synchronization between the two processes, but that's not a super big deal</p>",
        "id": 183655487,
        "sender_full_name": "matklad",
        "timestamp": 1576594617
    },
    {
        "content": "<p>(there are also the drawbacks of the existing RLS design, where it doesn't play as well with custom build environments and so forth)</p>",
        "id": 183655490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576594620
    },
    {
        "content": "<p>it definitelly would be a minor issue in comparison to keeping RLS itself building and working</p>",
        "id": 183655514,
        "sender_full_name": "matklad",
        "timestamp": 1576594635
    },
    {
        "content": "<p>(I'll need to run soon<br>\nbtw)</p>",
        "id": 183655562,
        "sender_full_name": "matklad",
        "timestamp": 1576594664
    },
    {
        "content": "<p>you could of course imagine simplifying the RLS to \"just\" run cargo to get its results -- ah, but I guess that would have the same limitations regarding the VFS</p>",
        "id": 183655565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576594665
    },
    {
        "content": "<blockquote>\n<p>it definitelly would be a minor issue in comparison to keeping RLS itself building and working</p>\n</blockquote>\n<p>well, I'm not sure about this</p>",
        "id": 183655628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576594683
    },
    {
        "content": "<p>that is</p>",
        "id": 183655636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576594686
    },
    {
        "content": "<p>I think that <span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span> can speak more to it, but a lot of that work is basically maintaining <em>save analysis</em></p>",
        "id": 183655649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576594696
    },
    {
        "content": "<p>at least that's what I remember</p>",
        "id": 183655663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576594704
    },
    {
        "content": "<p>which seems like it'll be required either way</p>",
        "id": 183655674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576594709
    },
    {
        "content": "<p>Hm, maybee. But, there's still this whole separate RLS build, submodule and toolstate</p>",
        "id": 183656018,
        "sender_full_name": "matklad",
        "timestamp": 1576594900
    },
    {
        "content": "<p>although, if we really strip RLS down, we might just move it into rustc repo, which simplifies that a lot!</p>",
        "id": 183656083,
        "sender_full_name": "matklad",
        "timestamp": 1576594924
    },
    {
        "content": "<p>Yes, plausibly</p>",
        "id": 183658477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576596450
    }
]