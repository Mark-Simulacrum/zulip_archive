[
    {
        "content": "<p>I've noticed that r-a was not resolving names when inside a tests mod (that is, preceded with the attribute #[cfg(test)]). This is for a rust-project.json type project. This can be fixed by adding \"test\" to the cfg attribute but I've noticed that many projects uses this as a fake/mocking mechanism (with #[cfg(not(test))] for the real module). In this case, we would lose the analysis of the real module.<br>\nIs there anything I'm missing here? Is there any solution to have both parsed?</p>",
        "id": 206230292,
        "sender_full_name": "Thiébaud Weksteen",
        "timestamp": 1596785167
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116114\">@Paul Faria</span> , you've submitted <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/4784/commits/9c35f135b9c872e904ee1e838cfa69fc5745c45f#diff-1c8e6b45624e6ce512961af52e9a1aa3R396\">https://github.com/rust-analyzer/rust-analyzer/pull/4784/commits/9c35f135b9c872e904ee1e838cfa69fc5745c45f#diff-1c8e6b45624e6ce512961af52e9a1aa3R396</a> which explicitly adds \"test\" cfg. Any input on my question?</p>",
        "id": 206440712,
        "sender_full_name": "Thiébaud Weksteen",
        "timestamp": 1597050274
    },
    {
        "content": "<p>As I understand it, this isn't currently possible. It would break goto def functionality (which item do you route to?). It would also not be clear what functionality is available. What happens when the types, functions or fields conflict with each other?</p>\n<p>I had proposed configuring cfg items with some kind of UI, and <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> had brought up an example of a checkbox UI that could appear on Cargo.toml files. Basically having the ability to toggle the features on and off.</p>\n<p>I've definitely run into your issue before in my own crates and at work, so I understand the frustration. I could also be wrong, and the above might be possible, but I don't have enough experience with all the details to say for sure.</p>",
        "id": 206451026,
        "sender_full_name": "Paul Faria",
        "timestamp": 1597059228
    },
    {
        "content": "<p>it is kind of possible, functionality like goto def is already built with this in mind. We can have multiple configurations of a crate in the crate graph, and a file can belong to any number of them. Actually implementing that would probably not be completely trivial anyway though, and would have a performance impact since we'd have to do a lot of analysis twice.</p>",
        "id": 206453692,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1597061749
    },
    {
        "content": "<p>it would be interesting to experiment with though</p>",
        "id": 206453857,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1597061880
    },
    {
        "content": "<p>(basically, the way it works for e.g. goto def all goes back to <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/f3336509e52187a7a70a8043557a7317872e3a2f/crates/ra_hir/src/semantics/source_to_def.rs#L32-L38\">this</a>, where it tries to find a crate that actually contains the file. I'm not 100% sure it'll deal well with the case where the crate contains the file, but the actual code we're interested in is cfg'd out though)</p>",
        "id": 206454401,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1597062257
    },
    {
        "content": "<p>TIL. I assume this means we'd need to keep track of two trees? One with test on and one off? If not, how would it interact with chalk (I assume that's what's used to do the type analysis, I've never delved that deep into the RA codebase before).</p>",
        "id": 206457904,
        "sender_full_name": "Paul Faria",
        "timestamp": 1597064801
    },
    {
        "content": "<p>it's really just like two different crates in the crate graph, that happen to share files</p>",
        "id": 206459142,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1597065565
    },
    {
        "content": "<p>all the HIR is completely separate and duplicated</p>",
        "id": 206459171,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1597065587
    },
    {
        "content": "<p>Assuming we get this working, what if, as a way of mitigating performance issues, this is a feature that's defaulted off and only turned on through settings?</p>",
        "id": 206462427,
        "sender_full_name": "Paul Faria",
        "timestamp": 1597067482
    },
    {
        "content": "<p>as a first step at least, probably</p>",
        "id": 206462800,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1597067680
    },
    {
        "content": "<p>Thanks, I'll add this info to an issue on github so this can be tracked.</p>",
        "id": 206547591,
        "sender_full_name": "Thiébaud Weksteen",
        "timestamp": 1597131312
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Support.20for.20.23.5Bcfg(test).5D/near/206459142\">said</a>:</p>\n<blockquote>\n<p>it's really just like two different crates in the crate graph, that happen to share files</p>\n</blockquote>\n<p>This is actually how we're currently generating our <code>rust-project.json</code>, because I haven't worked on deduplication, yet.  And for now \"first one wins\" seems to be the behavior.</p>",
        "id": 206764100,
        "sender_full_name": "woody77",
        "timestamp": 1597273926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116114\">Paul Faria</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Support.20for.20.23.5Bcfg(test).5D/near/206451026\">said</a>:</p>\n<blockquote>\n<p>As I understand it, this isn't currently possible. It would break goto def functionality (which item do you route to?). It would also not be clear what functionality is available. What happens when the types, functions or fields conflict with each other?</p>\n<p>I had proposed configuring cfg items with some kind of UI, and <span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> had brought up an example of a checkbox UI that could appear on Cargo.toml files. Basically having the ability to toggle the features on and off.</p>\n<p>I've definitely run into your issue before in my own crates and at work, so I understand the frustration. I could also be wrong, and the above might be possible, but I don't have enough experience with all the details to say for sure.</p>\n</blockquote>\n<p>I wonder how difficult it would be to wire up a \"config-switcher\" that just reloaded rust-analyzer after switching cfgs?  (so you could switch between cfgs, and then just kick off a re-start of the language server for the workspace).  Seems like it could be implemented in the VSCode extension itself, maybe?</p>",
        "id": 206764310,
        "sender_full_name": "woody77",
        "timestamp": 1597274113
    },
    {
        "content": "<p>I was actually wondering if we could tie it into the lookup logic Florian shared above. Rather than just passing in a FileId, we could pass in a FileId and a filtering callback of some kind. Like, if there are multiple options, then use the callback to filter down and then if there are still options, fallback to a single value. I'm not sure how complicated it would be to thread that callback through to that code though. And Florian did mention this would cause perf issues. I think I'll experiment with something on the side there.</p>",
        "id": 206813191,
        "sender_full_name": "Paul Faria",
        "timestamp": 1597324636
    },
    {
        "content": "<p>I think it's more that the lookup logic needs to be able to deal with the possibility that the container exists in a certain crate, but the child that we actually want doesn't, and then we need to try the next crate</p>",
        "id": 206813464,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1597324816
    },
    {
        "content": "<p>but the config switcher thing has also been talked about and is probably the easier short-term solution</p>",
        "id": 206813486,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1597324838
    },
    {
        "content": "<p>ok, I'll focus on that then</p>",
        "id": 206813523,
        "sender_full_name": "Paul Faria",
        "timestamp": 1597324862
    },
    {
        "content": "<p>Apologies for the delay in creating that bug. Here it is: <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/6117\">https://github.com/rust-analyzer/rust-analyzer/issues/6117</a></p>",
        "id": 212042834,
        "sender_full_name": "Thiébaud Weksteen",
        "timestamp": 1601625149
    },
    {
        "content": "<p>Now that I'm back from vacation, I've had time to work on this a bit more. I'm currently able to keep track of the configurations on the initialization with cargo.toml projects (rust-project.json will be done soon too), and I've found the spot to properly load the configurations at <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/be762ccccd5a86632e60351518528d078785a3e2/crates/hir/src/semantics/source_to_def.rs#L32\">https://github.com/rust-analyzer/rust-analyzer/blob/be762ccccd5a86632e60351518528d078785a3e2/crates/hir/src/semantics/source_to_def.rs#L32</a></p>\n<p>My idea to connect the two is to add a method available on the db such that I can filter like so:</p>\n<div class=\"codehilite\"><pre><span></span><code>            .filter(|&amp;&amp;crate_id| self.db.config_active_for(crate_id))\n</code></pre></div>\n\n\n<p>In between the iter and the find_map linked above.</p>\n<p>My thought was that this makes the most sense on the <code>FileLoader</code> trait: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/be762ccccd5a86632e60351518528d078785a3e2/crates/base_db/src/lib.rs#L91\">https://github.com/rust-analyzer/rust-analyzer/blob/be762ccccd5a86632e60351518528d078785a3e2/crates/base_db/src/lib.rs#L91</a>, but it wasn't clear to me how I would keep this up to date or populate this from <code>CrateData</code> (where I'm currently storing the available features from cargo.toml). <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> any ideas on how I should approach this, or am I possibly starting at the wrong place?</p>",
        "id": 213918560,
        "sender_full_name": "Paul Faria",
        "timestamp": 1603200592
    },
    {
        "content": "<p>I don't think we should add callbacks for configuation</p>",
        "id": 213937441,
        "sender_full_name": "matklad",
        "timestamp": 1603208363
    },
    {
        "content": "<p>We need to expose the API that iterates all possible candidates, instead of returning the first one, and select the approriate candidate higher in the stack, in the ide layer</p>",
        "id": 213937570,
        "sender_full_name": "matklad",
        "timestamp": 1603208412
    },
    {
        "content": "<p>Ok, I'll give that a shot after work today.</p>",
        "id": 213954980,
        "sender_full_name": "Paul Faria",
        "timestamp": 1603215928
    },
    {
        "content": "<p>So I feel like I may have been taking the wrong approach again. I modified the approach to return a vec of matching modules, and have started bubbling that up (I tried returning impl iterator but the usage of self within the functions causes issues due to borrowing self mutably and immutably at the same time. There might be workarounds available). The issue is there's a lot of code within the various layers that assume there's only 0 or 1 modules, and then maps that data to other types. I've gotten to the point where now even multiple source analyzers are being generated since it's not clear which ids to pass to those. I feel like bubbling that complexity up might make sense if there was a way to filter which analysis to perform, but with vecs, this is causing a ton of unused information to be processed, on top of making the code higher up the stack harder to follow.</p>",
        "id": 214321572,
        "sender_full_name": "Paul Faria",
        "timestamp": 1603463867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> I wonder if I misunderstood your original suggestion. Were you implying that I should modify <code>RootDabase</code> (in the <code>ide_db</code> crate) so that when its <code>&lt;impl FileLoader for RootDabase&gt;::relevant_crates</code> is called, the filtering is done within that fn? I've tried to continue with the exposing the <code>Vec&lt;Module&gt;</code> up the call stack (rather than returning the first result from <code>source_to_def.rs:SourceToDefCtx::file_to_def</code>, but it just touches so much that it really feels like the wrong approach. Let me know if you have time this weekend or early in the morning (I'm in Eastern US) to go over things.</p>",
        "id": 214439652,
        "sender_full_name": "Paul Faria",
        "timestamp": 1603561186
    },
    {
        "content": "<p>No, I do feel that \"just return a list of things and kick the can up to the caller to select one\" is a fundamentally better approach than \"has some global config for selection\".</p>\n<p>But I think some engineering should be applied to minimize the syntactic overhead of threading this information. Infecting everything with a new viral monad (list) is indeed problematic. Generally, when you want to thread something somewhere, it's better to piggyback on some existing piece of context, which already is threaded everywhere.</p>\n<p>I think for rust-analyzer the appropriate context is the Semantics. Currently it is created with <code>pub fn new(db: &amp;DB) -&gt; Semantics&lt;DB&gt;</code>, and just from this signature it is obvious that it is agnostic about current set of CFG (well, unless we put some global current context in DB, which is the reason why we should avoid doing that)</p>\n<p>I think we should add <code>pub fn new_for_crate(db: &amp;DB, krate: CrateId) -&gt; Semantics&lt;DB&gt;</code> to allow creating semantics scoped to the current crate.<br>\nThen, somewhere in the IDE, we should have a function that returns a list of applicable <code>CrateId</code> and the one that matches best. I am not sure what that would look like exactly, in theory it should be able to do tricks like (pick the crate with test if cursor is inside tests).  After that, we can incrementally start substituting<code>Semantics::new_for_crate</code> for <code>Semantics::new</code>. When there are no crate-less usages left, we can delete thouse.</p>",
        "id": 214558601,
        "sender_full_name": "matklad",
        "timestamp": 1603709391
    },
    {
        "content": "<p>I played around with your idea of storing the <code>CrateId</code> inside of <code>Semantics</code> and it really simplifies a lot of the changes. I think in the ide layer I'll just need a way to call <code>db.relevant_crates(file_id)</code> and use that to filter by configs before creating a <code>Semantics</code>. This was incredibly helpful! I'll try some more things out after work.</p>",
        "id": 214576330,
        "sender_full_name": "Paul Faria",
        "timestamp": 1603720703
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> where is the best place to store the currently active crate for the current file? For example, with rust-project.json, we can have two crates, one with test enabled, and one with it disabled, that both include <a href=\"http://some_file.rs\">some_file.rs</a> in its list of files. Where's the best place to store that crate id so that when I do something like goto_definition, I can refer to that crate id so I know which definitions to analyze? Does <code>GlobalState</code> make sense, or does the lsp not necessarily notify the server of when the active file has changed, so there might be a risk of the context being out of sync with the UI?</p>",
        "id": 215325291,
        "sender_full_name": "Paul Faria",
        "timestamp": 1604327421
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116114\">Paul Faria</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Support.20for.20.23.5Bcfg(test).5D/near/215325291\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> where is the best place to store the currently active crate for the current file? For example, with rust-project.json, we can have two crates, one with test enabled, and one with it disabled, that both include <a href=\"http://some_file.rs\">some_file.rs</a> in its list of files.</p>\n</blockquote>\n<p>Should those really be separate crates?  Or just separate instances of the same crate in the crate graph? (or does that really mean the same thing, as I haven't dug deeply into the crate graph after it's created).</p>",
        "id": 215528822,
        "sender_full_name": "woody77",
        "timestamp": 1604450073
    },
    {
        "content": "<p>Maybe we could add a field to rust-project.json to say whether <code>test</code> is configurable or not and collapse the two?<br>\nThough there still might be cases where one file is included in multiple crates. There's currently nothing that prevents that with the rust-project.json format.</p>",
        "id": 215597907,
        "sender_full_name": "Paul Faria",
        "timestamp": 1604504202
    },
    {
        "content": "<blockquote>\n<p>where is the best place to store the currently active crate for the current file? F</p>\n</blockquote>\n<p>Well, the best choice is not to store this at all, but rather pass in as an argument with every request</p>",
        "id": 215611451,
        "sender_full_name": "matklad",
        "timestamp": 1604509531
    },
    {
        "content": "<p>Noteice how things like <code>CompletionConfig</code> are arguments, rather then some global state</p>",
        "id": 215611500,
        "sender_full_name": "matklad",
        "timestamp": 1604509551
    },
    {
        "content": "<p>So I don't think we should add any state</p>",
        "id": 215611578,
        "sender_full_name": "matklad",
        "timestamp": 1604509565
    },
    {
        "content": "<p>other than that, stuffing the required info in the <code>Config</code> struct (in rust-analyzer), and materializing the low-level config during requests seems like a good approach</p>",
        "id": 215611652,
        "sender_full_name": "matklad",
        "timestamp": 1604509596
    },
    {
        "content": "<p>I'm actually debugging something related to this at the moment:  If multiple crates in a rust-project.json contain the same file, what would change _which_ of those crates is found to be the right one?  (we've determined that adding/removing a _different_ crate from the file will cause the <code>test</code> vs. <code>rlib</code> crate to be used for a given source file, and are very confused).</p>",
        "id": 215664395,
        "sender_full_name": "woody77",
        "timestamp": 1604542139
    },
    {
        "content": "<blockquote>\n<p>what would change _which_ of those crates is found to be the right one? </p>\n</blockquote>\n<p>The relative ordering. I <em>think</em> we are not using any hashsets on the path there, so probably \"first one in projec.json wins\" works, though I am not entirely sure</p>",
        "id": 215832230,
        "sender_full_name": "matklad",
        "timestamp": 1604661325
    },
    {
        "content": "<p>Part of the mapping from file id to module id goes through <code>fn relevant_crates(&amp;self, file_id: FileId) -&gt; Arc&lt;FxHashSet&lt;CrateId&gt;&gt;</code>. I think this is where the ordering won't be guaranteed.</p>",
        "id": 215875437,
        "sender_full_name": "Paul Faria",
        "timestamp": 1604682715
    },
    {
        "content": "<p>Right!</p>",
        "id": 215875583,
        "sender_full_name": "matklad",
        "timestamp": 1604682769
    },
    {
        "content": "<p>Argh, I think we actually should change that back to a Vec</p>",
        "id": 215875623,
        "sender_full_name": "matklad",
        "timestamp": 1604682786
    },
    {
        "content": "<p>Also, I should be on top of this more next week. This week has been a bit distracting to say the least.</p>",
        "id": 215875820,
        "sender_full_name": "Paul Faria",
        "timestamp": 1604682852
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116114\">Paul Faria</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Support.20for.20.23.5Bcfg(test).5D/near/215875437\">said</a>:</p>\n<blockquote>\n<p>Part of the mapping from file id to module id goes through <code>fn relevant_crates(&amp;self, file_id: FileId) -&gt; Arc&lt;FxHashSet&lt;CrateId&gt;&gt;</code>. I think this is where the ordering won't be guaranteed.</p>\n</blockquote>\n<p>I found that, tracing through code, but wasn't sure how one other crate being added/removed would cause a hashset to change iteration order, unless it _also_ hit a threshold which caused more/less buckets to be used, thereby reshuffling across a larger/smaller set of buckets than before.</p>",
        "id": 216290155,
        "sender_full_name": "woody77",
        "timestamp": 1605051646
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Support.20for.20.23.5Bcfg(test).5D/near/215611500\">said</a>:</p>\n<blockquote>\n<p>Noteice how things like <code>CompletionConfig</code> are arguments, rather then some global state</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>  I just got some time this week to jump back. I think I was originally confused by this because <code>CompletionConfig</code> and <code>Config</code> are kept in a struct called <code>GlobalState</code>.  My intention was to keep track of the last known active crate for a file somwhere in <code>GlobalState</code>, but doesn't keeping in <code>Config</code> mean that I can't actively update the currently active crate for a file? For example, looking at how <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/rust-analyzer/src/handlers.rs#L399\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/rust-analyzer/src/handlers.rs#L399</a> works, the current design doesn't really have a way to notify <code>GlobalState</code> or <code>Config</code> the crate context of the file that will be navigated to. Or maybe I'm misreading your original intent. Would your idea be to store the crate and file associations on initialization and not allow any changes without a full refresh?</p>",
        "id": 216487604,
        "sender_full_name": "Paul Faria",
        "timestamp": 1605196751
    },
    {
        "content": "<p>Why do you need to track last active thing? Why this can't be stateless?</p>",
        "id": 216618912,
        "sender_full_name": "matklad",
        "timestamp": 1605278094
    },
    {
        "content": "<p>SO, for <code>goto_definition</code>, we should change <code>snap.analysis.goto_definition(position)</code> to <code>snap.analysis.goto_definition(position, goto_definition_config)</code>, where <code>goto_definition_config</code> is a struct contain information about how to bias crates which contain the current file</p>",
        "id": 216619189,
        "sender_full_name": "matklad",
        "timestamp": 1605278204
    },
    {
        "content": "<p>It could probably look like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">GotoDefConfig</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// If gotodef request can be resolved in the context of several crates, bias towards the crates from this set</span>\n<span class=\"w\">    </span><span class=\"n\">priority_crates</span>: <span class=\"nc\">FxHashSet</span><span class=\"o\">&lt;</span><span class=\"n\">CrateId</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216619377,
        "sender_full_name": "matklad",
        "timestamp": 1605278287
    },
    {
        "content": "<p>In the process of trying to come up with an example, I found that (at least in the small example) rust-analyzer was already doing what I was trying to make it do. I'm very clearly missing something in my mental model. I had a crate (let's call it Z) with two features, a and b. I had two other crates (use_a and use_b) the each depended on Z with a different feature enabled. They are in different directories, but I included them in the same vs code workspace. When navigating from use_a to Z, once I'm in Z,  it will always act as if only feature a is enabled. When navigating from use_b to Z, once I'm in Z, it will alwasy act as if only feature b is enabled. How/where is the information about the current feature being stored? From what I can see, only the file name is being passed through lsp, so I can't understand how the context is being managed.</p>",
        "id": 216629699,
        "sender_full_name": "Paul Faria",
        "timestamp": 1605282616
    },
    {
        "content": "<p>are you opening the whole workspace, or only the respective use crates? If the letter, then the difference is in what <code>cargo metadata</code>output looks liek</p>",
        "id": 216630191,
        "sender_full_name": "matklad",
        "timestamp": 1605282810
    },
    {
        "content": "<p>I don't have a cargo workspace, but a vs code workspace (where both crates are opened as individual directories within VS Code, done through the File -&gt; Add Folder to Workspace menu option)</p>",
        "id": 216630844,
        "sender_full_name": "Paul Faria",
        "timestamp": 1605283044
    },
    {
        "content": "<p>yeah, i think in this case we\"ll call metadata twice, with two different current_dirs, so cargo would enable two sets of flags for us</p>",
        "id": 216631831,
        "sender_full_name": "matklad",
        "timestamp": 1605283408
    },
    {
        "content": "<p>Though what level is tracking which feature set is currently active for some given file path? I think that's what I've been struggling to figure out. At least, the impression I get is that going from one of the use_* crates to Z maintains the feature set while navigating around Z. Does manually viewing one of the files in use_a or use_b switch the overall context somehow?</p>",
        "id": 216632670,
        "sender_full_name": "Paul Faria",
        "timestamp": 1605283729
    },
    {
        "content": "<p>And by manually viewing I mean selecting the file from the file list in VS Code.</p>",
        "id": 216632712,
        "sender_full_name": "Paul Faria",
        "timestamp": 1605283743
    },
    {
        "content": "<p>Hm, there shouldnt the the \"maintinig view\" effect. Maybe there are separate instances of rust-analyzer involved somehow?</p>",
        "id": 216634083,
        "sender_full_name": "matklad",
        "timestamp": 1605284230
    },
    {
        "content": "<p>Maybe it's actually two separate analyses and switching the active file changes which analysis is active?</p>",
        "id": 216634110,
        "sender_full_name": "Paul Faria",
        "timestamp": 1605284242
    },
    {
        "content": "<p>I'll take some time to review how that works with the workspaces setup. I'm guessing this is not the same as setting a root project when opening <code>rust-project.json</code> files, right? I.e. those all share the same analysis, it's not separate analyses?</p>",
        "id": 216634281,
        "sender_full_name": "Paul Faria",
        "timestamp": 1605284308
    },
    {
        "content": "<p>Well, there <em>should</em> be separate analysis anywhere</p>",
        "id": 216634826,
        "sender_full_name": "matklad",
        "timestamp": 1605284546
    },
    {
        "content": "<p>If that happens, that is a bug</p>",
        "id": 216634838,
        "sender_full_name": "matklad",
        "timestamp": 1605284552
    },
    {
        "content": "<p>But it looks like we get those...</p>",
        "id": 216634869,
        "sender_full_name": "matklad",
        "timestamp": 1605284565
    }
]