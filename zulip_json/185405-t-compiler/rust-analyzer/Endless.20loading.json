[
    {
        "content": "<p>Hi everyone,<br>\nI am a little sure if this is the right place, but feel free to remove the stream if not.<br>\nI am the creator of <a href=\"https://github.com/ajour/ajour\">Ajour</a> - a rather big Rust desktop application. I've been using <code>rust_analyzer</code> in nvim since i started the project and never had any issues. However, lately a few collaborators told me that Ajour didn't work properly with <code>rust_analyzer</code> and VSCode and sure enough when I try to edit eg: <a href=\"https://github.com/ajour/ajour/blob/master/src/gui/update.rs\">gui/update.rs</a> in VSCode it just loads endlessly and never saves the file. That same file works just fine in nvm with rust_analyzer lsp. I am unsure if this is a issue with VSCode, with RA or with Ajour.</p>",
        "id": 228038914,
        "sender_full_name": "Casper R. Storm",
        "timestamp": 1614408690
    },
    {
        "content": "<p>I can confirm. Looks like we balk on <code>gui::update::query_and_sort_catalog</code></p>",
        "id": 228039166,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614408930
    },
    {
        "content": "<p>As a workaround, you can give an explicit type to the <code>collect</code> call of <code>catalog_rows_and_score</code> (<code>.collect::&lt;Vec&lt;(CatalogRow, i64)&gt;&gt;();</code>)</p>",
        "id": 228039581,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614409457
    },
    {
        "content": "<p>That seems to do the trick, at least in a slightly minimized version of the code</p>",
        "id": 228039597,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614409487
    },
    {
        "content": "<p>Partial minimization:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">query_and_sort_catalog</span><span class=\"p\">(</span><span class=\"n\">ajour</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Ajour</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">catalog</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">ajour</span><span class=\"p\">.</span><span class=\"n\">catalog</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">query</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ajour</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">catalog_search_state</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">query</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">as_ref</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">s</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">to_lowercase</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">flavor</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">ajour</span><span class=\"p\">.</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wow</span><span class=\"p\">.</span><span class=\"n\">flavor</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">catalog_rows_and_score</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">catalog</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">addons</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">filter_map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">a</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nb\">Some</span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">game_versions</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">gc</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">gc</span><span class=\"p\">.</span><span class=\"n\">flavor</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">flavor</span><span class=\"p\">.</span><span class=\"n\">base_flavor</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">score</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">CatalogRow</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">()),</span><span class=\"w\"> </span><span class=\"n\">score</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">collect</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">catalog_rows_and_score</span><span class=\"p\">.</span><span class=\"n\">sort_by</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">addon_a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">score_a</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">addon_b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">score_b</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">score_a</span><span class=\"p\">.</span><span class=\"n\">cmp</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">score_b</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 228041335,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614411795
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/7796\">https://github.com/rust-analyzer/rust-analyzer/issues/7796</a></p>",
        "id": 228042587,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614413449
    },
    {
        "content": "<p>Looks like that's on the RA side of solving:</p>\n<div class=\"codehilite\"><pre><span></span><code>[DEBUG hir_ty::traits] solve(UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: Implemented({closure:ClosureId(3)}&lt;[?0 := () for&lt;0&gt; [?0 := (&amp;&#39;static 2&lt;[?0 := ^1.0, ?1 := (&amp;&#39;static ^1.1)]&gt;), ?1 := (&amp;&#39;static 2&lt;[?0 := ^1.2, ?1 := ^1.1]&gt;), ?2 := Ordering&lt;[]&gt;]]&gt;: FnMut&lt;2&lt;[?0 := (&amp;&#39;static 2&lt;[?0 := ^0.3, ?1 := ^0.4]&gt;), ?1 := (&amp;&#39;static 2&lt;[?0 := ^0.3, ?1 := ^0.4]&gt;)]&gt;&gt;) }, binders: [U0 with kind type, U0 with kind type, U0 with kind type, U0 with kind type, U0 with kind type] }, universes: 1 }) =&gt; None\n[INFO hir_ty::traits] trait_solve_query(Normalize(&lt;|&amp;(?0.0, &amp;?0.1), &amp;(?0.2, ?0.1)| -&gt; Ordering as FnOnce&lt;(&amp;(?0.3, ?0.4), &amp;(?0.3, ?0.4))&gt;&gt;::Output =&gt; Ordering))\n[DEBUG hir_ty::traits] solve goal: UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: AliasEq(AliasTy(?) = AdtId(EnumId(EnumId(8)))&lt;[]&gt;) }, binders: [U0 with kind type, U0 with kind type, U0 with kind type, U0 with kind type, U0 with kind type] }, universes: 1 }\n[DEBUG hir_ty::traits::chalk] impls_for_trait FnOnce\n[DEBUG hir_ty::traits::chalk] impls_for_trait returned 0 impls\n[DEBUG hir_ty::traits::chalk] impls_for_trait FnOnce\n[DEBUG hir_ty::traits::chalk] impls_for_trait returned 0 impls\n[DEBUG hir_ty::traits::chalk] impls_for_trait FnOnce\n[DEBUG hir_ty::traits::chalk] impls_for_trait returned 0 impls\n[DEBUG hir_ty::traits::chalk] impls_for_trait FnOnce\n...\n</code></pre></div>",
        "id": 228043470,
        "sender_full_name": "detrumi",
        "timestamp": 1614414496
    },
    {
        "content": "<p>Thanks for investigating and digging into the issue, <span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> &amp; <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span>.<br>\nLet me know if I can do anything to help out.</p>",
        "id": 228043479,
        "sender_full_name": "Casper R. Storm",
        "timestamp": 1614414515
    },
    {
        "content": "<p>I recall our handling of closures being less not quite great</p>",
        "id": 228043507,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614414566
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"392693\">@Casper R. Storm</span> We're able to reproduce it with a small example, so that should be enough for us to figure out the problem and fix it <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 228043577,
        "sender_full_name": "detrumi",
        "timestamp": 1614414615
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> Yeah, it's very hard to figure out what's going on when closures are involved</p>",
        "id": 228043625,
        "sender_full_name": "detrumi",
        "timestamp": 1614414715
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"392693\">@Casper R. Storm</span> in the meanwhile, you can use that workaround I mentioned to make it easier on the users. I checked and analysis completes after that change</p>",
        "id": 228043735,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614414799
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git i/src/gui/update.rs w/src/gui/update.rs</span>\n<span class=\"gh\">index 9c47a6e..b54b25a 100644</span>\n<span class=\"gd\">--- i/src/gui/update.rs</span>\n<span class=\"gi\">+++ w/src/gui/update.rs</span>\n<span class=\"gu\">@@ -2534,7 +2534,7 @@ fn query_and_sort_catalog(ajour: &amp;mut Ajour) {</span>\n                 CatalogCategory::Choice(name) =&gt; a.categories.iter().any(|c| c == name),\n             })\n             .map(|(a, score)| (CatalogRow::from(a.clone()), score))\n<span class=\"gd\">-            .collect::&lt;Vec&lt;_&gt;&gt;();</span>\n<span class=\"gi\">+            .collect::&lt;Vec&lt;(CatalogRow, i64)&gt;&gt;();</span>\n\n         let mut catalog_rows = if query.is_some() {\n             // If a query is defined, the default sort is the fuzzy match score\n</code></pre></div>",
        "id": 228043814,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614414874
    },
    {
        "content": "<p>You probably didn't run into it in <code>nvim</code> because the Code extension does things like semantic highlighting and type hints, which need trait solving</p>",
        "id": 228043829,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614414909
    },
    {
        "content": "<p>Filed <a href=\"https://github.com/rust-lang/chalk/issues/688\">chalk#688</a> with a description of the endlessly expanding query (it keeps nesting lifetimes)</p>",
        "id": 228045268,
        "sender_full_name": "detrumi",
        "timestamp": 1614416749
    }
]