[
    {
        "content": "<p>After trying to add support for writing .chalk files (<a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/5347\">https://github.com/rust-analyzer/rust-analyzer/pull/5347</a>), I was a bit surprised how much output there was: <a href=\"https://gist.github.com/detrumi/cfd07de16f9192af3ee7a13d9b04bbc0\">https://gist.github.com/detrumi/cfd07de16f9192af3ee7a13d9b04bbc0</a></p>",
        "id": 203772203,
        "sender_full_name": "detrumi",
        "timestamp": 1594674856
    },
    {
        "content": "<p>This of course writes out all impls in the program, maybe there's a way to only write out parts of the program 'related' to a goal, whatever that might mean?</p>",
        "id": 203772594,
        "sender_full_name": "detrumi",
        "timestamp": 1594675022
    },
    {
        "content": "<p>isn't that the idea of the <code>LoggingIrDatabase</code>?</p>",
        "id": 203775309,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1594676481
    },
    {
        "content": "<p>I assume we would need to wrap our db in that before solving a goal, and then write out the file afterwards. there'd need to be some way of selecting the goal</p>",
        "id": 203775394,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1594676527
    },
    {
        "content": "<p>Ah, somehow I'd totally missed that. Yeah, you're right</p>",
        "id": 203775421,
        "sender_full_name": "detrumi",
        "timestamp": 1594676552
    },
    {
        "content": "<p>And looks like you can use the Display impl for <code>LoggingRustIrDatabase</code> as well to avoid gathering ids manually</p>",
        "id": 203775567,
        "sender_full_name": "detrumi",
        "timestamp": 1594676656
    },
    {
        "content": "<p>Right, so you can indeed just do this:</p>\n<div class=\"codehilite\"><pre><span></span><code>println!(&quot;{}&quot;, LoggingRustIrDatabase::new(ChalkContext { db, krate }));\n</code></pre></div>",
        "id": 203776584,
        "sender_full_name": "detrumi",
        "timestamp": 1594677342
    },
    {
        "content": "<p>Hehe yeah</p>",
        "id": 203779819,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594679694
    },
    {
        "content": "<p>It's actually super simple :)</p>",
        "id": 203779824,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594679700
    },
    {
        "content": "<p>Well actually</p>",
        "id": 203779863,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594679729
    },
    {
        "content": "<p>You would have to do <code>let db = LoggingRustIrDatabase::new(ChalkContext { db, krate })</code></p>",
        "id": 203779880,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594679745
    },
    {
        "content": "<p>solve a goal</p>",
        "id": 203779884,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594679748
    },
    {
        "content": "<p>then print</p>",
        "id": 203779889,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594679749
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at &#39;internal error: entered unreachable code&#39;, crates/ra_hir_ty/src/traits/chalk.rs:57:9\n</code></pre></div>\n\n\n<p>Looks like the .chalk writer is hitting the <code>unreachable!()</code> in <code>RustIrDatabase::adt_repr</code></p>",
        "id": 204346857,
        "sender_full_name": "detrumi",
        "timestamp": 1595161085
    },
    {
        "content": "<p><del>Wait what, how did that <code>star</code> get there? <code>impl ::core::marker::Copy for star {}</code></del><br>\n(nvm, it's actually a <code>struct star</code> and not actually a <code>*</code>)</p>",
        "id": 204347466,
        "sender_full_name": "detrumi",
        "timestamp": 1595162107
    },
    {
        "content": "<p>huh, I missed that this method even exists, but also it doesn't seem to be actually used in Chalk for any logic? but we should just make it return default instead of calling unreachable</p>",
        "id": 204348355,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1595163369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> Sounds good, filed <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/5437\">https://github.com/rust-analyzer/rust-analyzer/pull/5437</a></p>",
        "id": 204350081,
        "sender_full_name": "detrumi",
        "timestamp": 1595165397
    }
]