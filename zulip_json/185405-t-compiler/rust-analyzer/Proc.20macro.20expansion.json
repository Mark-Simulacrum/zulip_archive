[
    {
        "content": "<p>Is it expected that for a proc macro with this call <code>bevy_ecs_macros::all_tuples! {impl_tuple_fetch, 0, 1, F, A }</code>, that the proc macro receives the following TokenStream?</p>\n<div class=\"codehilite\"><pre><span></span><code>TokenStream [Group { delimiter: Brace, stream: TokenStream [Ident { ident: &quot;impl_tuple_fetch&quot;, span: 4294967295 }, Punct { ch: &#39;,&#39;, spacing: Alone, span: 4294967295 }, Literal { kind: , symbol: &quot;0&quot;, suffix: None, span: 3 }, Punct { ch: &#39;,&#39;, spacing: Alone, span: 4294967295 }, Literal { kind: , symbol: &quot;1&quot;, suffix: None, span: 5 }, Punct { ch: &#39;,&#39;, spacing: Alone, span: 4294967295 }, Ident { ident: &quot;F&quot;, span: 4294967295 }, Punct { ch: &#39;,&#39;, spacing: Alone, span: 4294967295 }, Ident { ident: &quot;A&quot;, span: 4294967295 }], span: 0 }]\n</code></pre></div>\n<p>Note the delimiter grouping at the start</p>",
        "id": 233971916,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618075170
    },
    {
        "content": "<p>Been trying out bevy wondering why a lot of inference doesnt work and it seems that this proc macro doesnt expand(it emits <code>compile_error</code> which we also dont emit a diagnostic for) saying it expects an ident.</p>",
        "id": 233972009,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618075231
    },
    {
        "content": "<p>hmm, do we strip the outer group when you invoke it with <code>();</code>?</p>",
        "id": 233972051,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618075271
    },
    {
        "content": "<p>Nope, still contains the delimiters</p>",
        "id": 233972120,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618075323
    },
    {
        "content": "<p>Also when called with <code>[];</code></p>",
        "id": 233972177,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618075363
    },
    {
        "content": "<p>Wouldn't mind looking into this some more but in that case I need some pointers where to look since I'm not into macro stuff in RA</p>",
        "id": 233972290,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618075463
    },
    {
        "content": "<p>Okay I think the problem is in this PR <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/8443\">https://github.com/rust-analyzer/rust-analyzer/pull/8443</a>, commit prior to this works fine</p>",
        "id": 233973748,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618076791
    },
    {
        "content": "<p>oh, seems like the old code removed the outer group, but that's not documented anywhere</p>",
        "id": 233973884,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618076911
    },
    {
        "content": "<p>\"remove derives\" is not something that should happen for fn-like macros, but we do need to do that part</p>",
        "id": 233973896,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618076935
    },
    {
        "content": "<p><code>TokenBuffer</code> stripped the outer grouping before then I suppose?</p>",
        "id": 233974356,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618077430
    },
    {
        "content": "<p>yeah: <code>TokenBuffer::from_tokens(&amp;tt.token_trees);</code></p>",
        "id": 233974598,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618077653
    },
    {
        "content": "<p>disposes <code>tt.delimiter</code></p>",
        "id": 233974608,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618077660
    },
    {
        "content": "<p>and <code>let mut result = tt::Subtree::default();</code> creates a subtree without delimiter</p>",
        "id": 233974635,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618077686
    },
    {
        "content": "<p>I'm thinking we might want to revert that PR because it's also otherwise broken</p>",
        "id": 233974645,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618077703
    },
    {
        "content": "<p>does this make github unhappy or is that just me? <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/8443/revert\">https://github.com/rust-analyzer/rust-analyzer/pull/8443/revert</a></p>",
        "id": 233974839,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618077870
    },
    {
        "content": "<p>Unhappy in what sense?</p>",
        "id": 233974848,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618077894
    },
    {
        "content": "<p>opening that just redirects me to the PR without the <code>revert</code> part</p>",
        "id": 233974865,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618077908
    },
    {
        "content": "<p>Oh clicking the revert button server errors, I guess that's what you mean <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 233974889,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618077939
    },
    {
        "content": "<p>ah, yeah</p>",
        "id": 233975162,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618078215
    },
    {
        "content": "<p>reverted it</p>",
        "id": 233977640,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618080401
    }
]