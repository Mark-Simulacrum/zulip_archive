[
    {
        "content": "<p>Morning! If someone can point out to me how to write a test for <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/2799\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/2799\">https://github.com/rust-analyzer/rust-analyzer/issues/2799</a> I'd love to dig into it :)</p>",
        "id": 187250478,
        "sender_full_name": "Pascal",
        "timestamp": 1580726565
    },
    {
        "content": "<p>See <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/52456c44901c8c38c8bcb742ebe305484af8f36f/crates/ra_ide/src/diagnostics.rs#L536-L564\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/52456c44901c8c38c8bcb742ebe305484af8f36f/crates/ra_ide/src/diagnostics.rs#L536-L564\">https://github.com/rust-analyzer/rust-analyzer/blob/52456c44901c8c38c8bcb742ebe305484af8f36f/crates/ra_ide/src/diagnostics.rs#L536-L564</a> as an example of a diagnostics test</p>",
        "id": 187250606,
        "sender_full_name": "matklad",
        "timestamp": 1580726665
    },
    {
        "content": "<p>for the struct field diagnostic, there's an existing test <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/52456c44901c8c38c8bcb742ebe305484af8f36f/crates/ra_hir_ty/src/tests.rs#L294\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/52456c44901c8c38c8bcb742ebe305484af8f36f/crates/ra_hir_ty/src/tests.rs#L294\">here</a></p>",
        "id": 187250632,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1580726692
    },
    {
        "content": "<p>Yeah, actually, <span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> test is better, because it is more targeted</p>",
        "id": 187250693,
        "sender_full_name": "matklad",
        "timestamp": 1580726733
    },
    {
        "content": "<p>keep in mind that you have to define everything you use, you don't get <code>vec!</code> from the standard library</p>",
        "id": 187250723,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1580726753
    },
    {
        "content": "<p>thanks! i'll have a look now (instead of a lunch break :D)</p>",
        "id": 187250839,
        "sender_full_name": "Pascal",
        "timestamp": 1580726822
    },
    {
        "content": "<p>Hm, accutaly, I think mine proposal is a better one :D</p>\n<p>Internally, the diagnostics are expressed in terms of the macro file, and it looks like what breaks here is the transition from macro-file to the original file. Ie, we show, int he original file, ranges from macro pseudo file.</p>",
        "id": 187251208,
        "sender_full_name": "matklad",
        "timestamp": 1580727152
    },
    {
        "content": "<p>I think the way to fix this would be to change </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Diagnostic</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">highlight_range</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TextRange</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>to </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Diagnostic</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">highlight_range</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">InFile</span><span class=\"o\">&lt;</span><span class=\"n\">TextRange</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>and make sure that the call-site correctly unwraps potential maro file</p>",
        "id": 187251249,
        "sender_full_name": "matklad",
        "timestamp": 1580727219
    },
    {
        "content": "<p>that was my first guess as well. not sure how to change that but i'll try to understand it at least :)</p>",
        "id": 187251584,
        "sender_full_name": "Pascal",
        "timestamp": 1580727448
    },
    {
        "content": "<p>Yeah, unforutantely our internal APIs are not... polished.</p>",
        "id": 187251676,
        "sender_full_name": "matklad",
        "timestamp": 1580727507
    },
    {
        "content": "<p>But the core thing to understand is that we have real files (<code>FileId</code>) and pseudo files generated by macros <code>HirFileId</code>. <code>InFile&lt;T&gt;</code> is something withing a real or pseudo file. When you render something to the user, you need to make sure that you are talking in terms of ranges in the real file.</p>",
        "id": 187251751,
        "sender_full_name": "matklad",
        "timestamp": 1580727585
    },
    {
        "content": "<p>alright, how do i resolve an <code>InFile&lt;TextRange&gt;</code> to a <code>TextRange</code> in a given <code>file_id</code>? maybe i'm looking for the wrong thing, but i hoped there was a map somewhere to translate virtual file_id ranges to spans in real files (i ask because in <code>ra_ide::Diagnostic</code> i need to set a real <code>TextRange</code>)</p>",
        "id": 187256829,
        "sender_full_name": "Pascal",
        "timestamp": 1580732661
    },
    {
        "content": "<p>See <code>HirFIleId::expansion_info</code></p>",
        "id": 187258954,
        "sender_full_name": "matklad",
        "timestamp": 1580734568
    },
    {
        "content": "<p>It doesn't have API for ranges though, but it might make sense to add it.</p>",
        "id": 187258975,
        "sender_full_name": "matklad",
        "timestamp": 1580734605
    }
]