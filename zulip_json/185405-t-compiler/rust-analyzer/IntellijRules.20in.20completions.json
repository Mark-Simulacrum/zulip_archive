[
    {
        "content": "<p>I'm checking the way we complete the modules in <code>mod_.rs</code> and for test like</p>\n<div class=\"codehilite\"><pre><span></span><code>#[test]\n    fn module_partially_named() {\n        check(\n            r#&quot;\n            //- /lib.rs\n            mod a$0\n            //- /foo.rs\n            fn foo() {}\n            //- /bar/mod.rs\n            fn bar() {}\n            //- /bar/ignored_bar.rs\n            fn ignored_bar() {}\n        &quot;#,\n            expect![[r#&quot;\n                md bar;\n            &quot;#]],\n        );\n    }\n</code></pre></div>\n<p>we actually have no completions.</p>\n<p>The completion considers <code>a</code> to be the current module (returning it in the <code>let current_module = ctx.scope.module()?;</code>) and I want to determine this fact to throw this incomplete module away from the path lookups.</p>\n<p>Besides the current module, I have the <code>mod_under_caret: ast::Module</code> so checking that their names match sounds reasonable, but the name of that ast module is actually <code>aintellijRulezz</code>.<br>\nWhat's even more odd,  when I call <code>ctx.scope.module()?.definition_source(ctx.db).value</code> and extract the module ast to print, it's different to the one that the ast the completion gets.</p>\n<p>What would be a good way to understand that I'm on some odd unfinished module-like thing in this test?</p>",
        "id": 229940179,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1615501857
    },
    {
        "content": "<p>IIRC <code>intelliJRulezz</code> is an identifier we insert at the completion point (after <code>.</code>) to make things parse correctly</p>",
        "id": 229993136,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1615537986
    },
    {
        "content": "<p>^</p>",
        "id": 230001867,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1615542695
    },
    {
        "content": "<blockquote>\n<p>What's even more odd, when I call ctx.scope.module()?.definition_source(ctx.db).value and extract the module ast to print, it's different to the one that the ast the completion gets.</p>\n</blockquote>\n<p>The completion context actually has two trees, one with the synthetic inserted Identifier and one without</p>",
        "id": 230002142,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1615542835
    },
    {
        "content": "<p>from what I remember</p>",
        "id": 230002154,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1615542841
    },
    {
        "content": "<p>yeah, that's because we can parse the code with the insert identifier, but we can't really analyze it any further, so we have to use the original trees for that</p>",
        "id": 230003832,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1615543603
    },
    {
        "content": "<p>I think the inserted identifier is a red herring here though, the problem is that <code>mod a&lt;|&gt;</code> gets parsed as <code>mod a {&lt;|&gt;}</code> I guess</p>",
        "id": 230003942,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1615543675
    },
    {
        "content": "<p>I mean, the problem is that we consider <code>a</code> the current module in this situation</p>",
        "id": 230004203,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1615543802
    },
    {
        "content": "<p>Yes, all that's very fishy indeed.</p>\n<p>I have no idea where to adjust the code related to the module resolution, but feels like manually cutting out that synthetic marker is the worst, so I'm a bit clueless right now, asking for code pointers and/or the path to tackle that.</p>\n<p>As usual, a small anticipated fix turned into a long expedition <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 230009992,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1615546683
    },
    {
        "content": "<p>I would hope that if we have <code>mod a&lt;|&gt; {}</code>, we don't consider it as being inside the module (otherwise that's a straight-up bug). If not, maybe we need some special tweaking for the <code>mod a&lt;|&gt;</code> case.  I think the relevant code is <code>analyze_impl</code> / <code>find_container</code> in <code>semantics.rs</code></p>",
        "id": 230011521,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1615547418
    }
]