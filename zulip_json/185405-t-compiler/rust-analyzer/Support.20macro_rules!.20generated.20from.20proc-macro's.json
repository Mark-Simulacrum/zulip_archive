[
    {
        "content": "<p>It seems that rust-analyzer doesn't support <code>macro_rules</code> generated by the expansion of a proc-macro... Would this be supported in the future?</p>\n<p>e.g:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">quote</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">my_macro</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>rust stable/nightly properly allows you to invoke the macro, but rust-analyzer complains its unresolved.</p>",
        "id": 266715045,
        "sender_full_name": "Nick",
        "timestamp": 1641231903
    },
    {
        "content": "<p>hm, I just tried this, and it worked for me. If you can provide a reproduction please file a bug</p>",
        "id": 266715641,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1641232196
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Support.20macro_rules!.20generated.20from.20proc-macro's/near/266715641\">said</a>:</p>\n<blockquote>\n<p>hm, I just tried this, and it worked for me. If you can provide a reproduction please file a bug</p>\n</blockquote>\n<p>Ok I was able to figure it out making a reproduction, it works when the macro is used locally, but when combined with <code>#[macro_export]</code>, and importing it to another crate, RA fails:</p>\n<p><code>use some_crate::my_macro // unresolved, but compiles file</code></p>",
        "id": 266717074,
        "sender_full_name": "Nick",
        "timestamp": 1641232859
    },
    {
        "content": "<p><code>quote!</code> here is not the macro from the <code>quote</code> crate, right? Because that does not work in item position</p>",
        "id": 266820998,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1641309982
    },
    {
        "content": "<p>This is something I'd definitely expect to work (it works when making <code>quote!</code> a <code>macro_rules!</code> macro, so it should also work with an equivalent proc macro)</p>",
        "id": 266821125,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1641310061
    },
    {
        "content": "<p>I've confirmed this works fine with a pass-through proc macro</p>",
        "id": 266821304,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1641310153
    },
    {
        "content": "<p>Hmm, it also works if the proc macro only contains</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">quote</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[macro_export]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">my_macro</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 266821540,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1641310276
    }
]