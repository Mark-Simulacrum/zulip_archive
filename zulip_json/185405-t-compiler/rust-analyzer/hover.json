[
    {
        "content": "<p>Isn't this <code>exact</code> flag no longer useful in <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/af8097f7775e59fd2d61298b6d682788e870c2f9/crates/ra_ide/src/hover.rs#L30\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/af8097f7775e59fd2d61298b6d682788e870c2f9/crates/ra_ide/src/hover.rs#L30\"><code>HoverResult</code></a>? There is even no way to set it to <code>false</code> by using the public API and it is never set to <code>false</code> withing the module it is defined in.</p>",
        "id": 190671355,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584312980
    },
    {
        "content": "<p>yeah, we should remove it</p>",
        "id": 190696877,
        "sender_full_name": "matklad",
        "timestamp": 1584349971
    },
    {
        "content": "<p>There is a PR</p>",
        "id": 190697300,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584350283
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> , <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span>  am I right to suppose that the <code>Ty</code> struct declared in <code>ra_hir_ty</code> should not be visible in <code>ra_ide</code> and instead only interacted through <code>ra_hir::Type</code>?</p>",
        "id": 191370892,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584834173
    },
    {
        "content": "<p>In theory, yes.</p>",
        "id": 191386191,
        "sender_full_name": "matklad",
        "timestamp": 1584865101
    },
    {
        "content": "<p>It's not completely clear if this will work 100%</p>",
        "id": 191386193,
        "sender_full_name": "matklad",
        "timestamp": 1584865116
    },
    {
        "content": "<p>I asked because iirc the are some methods on <code>Type</code> that return structs from <code>ra_hir_ty</code>, but <code>ra_ide</code> doesn't list it as it's dependency, so we can't e.g. match the returned <code>Ty</code> enum</p>",
        "id": 191386619,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584866052
    },
    {
        "content": "<p>they should be changed to use <code>Type</code></p>",
        "id": 191386731,
        "sender_full_name": "matklad",
        "timestamp": 1584866287
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> , how would you change this method? <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/6fe956420fc63609a84dd005b8190b1f19fff280/crates/ra_hir/src/code_model.rs#L1093-L1096\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/6fe956420fc63609a84dd005b8190b1f19fff280/crates/ra_hir/src/code_model.rs#L1093-L1096\">https://github.com/rust-analyzer/rust-analyzer/blob/6fe956420fc63609a84dd005b8190b1f19fff280/crates/ra_hir/src/code_model.rs#L1093-L1096</a></p>",
        "id": 191396270,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584882993
    },
    {
        "content": "<p>I mean, what should it return instead of <code>ra_hir_ty::CallableDef</code>?</p>",
        "id": 191396293,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584883070
    },
    {
        "content": "<p>I would remove it completely, add <code>fn fn_params() -&gt; Vec&lt;(Option&lt;Name&gt;, Type)&gt;; fn fn_ret_type() -&gt; Type</code> accessors to <code>Type</code> and would fix callers to use those instead of <code>CallableDef</code></p>",
        "id": 191396354,
        "sender_full_name": "matklad",
        "timestamp": 1584883102
    },
    {
        "content": "<p>There isn't a reasonable thing we can return there, because there's no defs for things like closures</p>",
        "id": 191396371,
        "sender_full_name": "matklad",
        "timestamp": 1584883122
    },
    {
        "content": "<p>And shouln't we reexport <code>ra_hir_ty</code> stuff from <code>ra_hir</code> <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir/src/lib.rs#L63\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir/src/lib.rs#L63\">here</a>?</p>",
        "id": 191396439,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584883250
    },
    {
        "content": "<p>HirDisplay might actually be ok</p>",
        "id": 191396931,
        "sender_full_name": "matklad",
        "timestamp": 1584884053
    },
    {
        "content": "<p>I wish we had some docs on ast node types, at least an example source code that shows to which kind of symbols the node referes to. E.g. the difference between <code>Name</code> and <code>NameRef</code> is not very evident, does <code>ParenType</code> pertain to unnamed tuples or tuple structs too and all these kinds of questions arise... I suppose the <code>ast</code> api is quite stable already so we might want to better document it, <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> ?</p>",
        "id": 191405358,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584896457
    },
    {
        "content": "<p>SGTM! This probably should be added to ast_src</p>",
        "id": 191405667,
        "sender_full_name": "matklad",
        "timestamp": 1584896881
    },
    {
        "content": "<p>Maybe we could have some kind of doc tests which show example Rust code and what it parses to?</p>",
        "id": 191406064,
        "sender_full_name": "Laurențiu",
        "timestamp": 1584897336
    },
    {
        "content": "<p>We might already have something like that</p>",
        "id": 191406072,
        "sender_full_name": "Laurențiu",
        "timestamp": 1584897349
    },
    {
        "content": "<p>Yeah, that would be wonderful</p>",
        "id": 191406322,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584897645
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> , would you mind elaborating on the relationship between <code>ra_hir</code> and <code>ra_hir_def</code>? I see the data structures in <code>ra_hir::code_model</code> are almost literally copy-pasted for <code>ra_hir_def</code>:<br>\n<a href=\"/user_uploads/4715/x_T0RZ2dghhU-07TGzhg-Gfj/image.png\" target=\"_blank\" title=\"image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/x_T0RZ2dghhU-07TGzhg-Gfj/image.png\" target=\"_blank\" title=\"image.png\"><img src=\"/user_uploads/4715/x_T0RZ2dghhU-07TGzhg-Gfj/image.png\"></a></div>",
        "id": 191414848,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584909336
    },
    {
        "content": "<p><code>hir</code> is the public API of the all of the compiler logic above syntax trees. It is written in \"OO\" style. Each type is self contained (as in, it knows it's parents and full context). It should be \"clean code\".</p>\n<p><code>ra_hir_xxx</code> crates are the implementation of the compiler logic. They are written in \"ECS\" style, with relatively little abstractions. Many types are not self-contained, and explicitelly use local indexes, arenas, etc. </p>\n<p><code>ra_hir</code> is what insulates the \"we don't know how to actually write an incremental compiler\" from the ide with completions, hovers, etc.  It is a (soft, internal) boundary: <a href=\"https://www.tedinski.com/2018/02/06/system-boundaries.html\" target=\"_blank\" title=\"https://www.tedinski.com/2018/02/06/system-boundaries.html\">https://www.tedinski.com/2018/02/06/system-boundaries.html</a>.</p>",
        "id": 191446937,
        "sender_full_name": "matklad",
        "timestamp": 1584954557
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> , could you elaborate on why do we store the signature of the closure as <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/f9494f114798f66b5f2174cf518a2951a82571d3/crates/ra_hir_ty/src/lib.rs#L707-L708\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/f9494f114798f66b5f2174cf518a2951a82571d3/crates/ra_hir_ty/src/lib.rs#L707-L708\">the first parameter type</a>. It appears that we store there the function where this closure was created instead (even nested closure refers to the outer function that declares the closure tree)</p>",
        "id": 191553871,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1585008309
    },
    {
        "content": "<p>And am I right, that we don't have <code>hir</code> representation of closures? E.g. the existing <code>ra_hir::Function</code> appears to be a wrapper around <code>ra_hir_def::FunctionId</code>, but closures don't have own <code>ra_hir_def::FunctionId</code> (as they contain only the fn id of the plain function they are declared in as I mentioned above)...</p>",
        "id": 191554427,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1585008788
    },
    {
        "content": "<p>My gut feeling is that closure should desugar to a callable struct. Maybe we should introcude:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">ra_hir</span>::<span class=\"n\">Closure</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">impl_id</span>: <span class=\"nc\">ra_hir_def</span>::<span class=\"n\">ImplId</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"c1\">// closed state id maybe  ???</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 191558100,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1585012389
    },
    {
        "content": "<p>what are you actually trying to do?</p>",
        "id": 191577430,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1585038360
    },
    {
        "content": "<p>I was trying to replace <code>ra_hir::Type::as_callable() -&gt; Option&lt;ra_hir_ty::CallableDef&gt;</code> with <code>ra_hir</code>-only types. There is a comment on top of that method that it doesn't work for closures, so I wondered how we should support closures otherwise (e.g. currently we don't show neither call hierarchy, nor call info, nor inlay Param hints for closures)</p>",
        "id": 191578277,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1585038843
    },
    {
        "content": "<p>you could certainly create a <code>Closure</code> type in <code>code_model</code> that just points to the containing def and <code>ExprId</code> of the closure</p>",
        "id": 191597870,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1585050140
    },
    {
        "content": "<p>Hmm, I am thinking about how this will scale since there should be callable structs (i.e. functors), which are the ADTs that implement <code>Fn*</code> traits. But  I have a feeling we should bother and take closures and callable adts apart</p>",
        "id": 191686123,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1585092934
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>  I have a strong feeling that the <code>ra_hir::Type</code> should be an enum, but higher level than <code>ra_hir_ty::Ty</code> and hide it in its impl. We already have <code>ra_hir::Function/Struct/Enum...</code> etc. that should be the members of <code>Type</code> enum. What do you think?</p>",
        "id": 191728909,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1585134237
    },
    {
        "content": "<p>E.g. you proposed to add <code>fn_params</code> and <code>fn_ret_type</code>, but both of them should return an option, because now the <code>Type</code> is a general thing and we will and up with a bunch of <code>unwrap()</code> if we want to look at it as a function, by the way these method names are a bit misleading, because closures are not strictly-speaking functions</p>",
        "id": 191729290,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1585134467
    },
    {
        "content": "<p>types are not just defs. you'd have to mostly replicate the structure of <code>hir_ty::Ty</code>, and I don't think that would be very useful in the end</p>",
        "id": 191729479,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1585134573
    },
    {
        "content": "<p>I am not really sure.... There are a lot of intricate details about types. Like, <code>hir::Struct</code> can be either the ctor function, or a struct. Threading substitutions is tricky. </p>\n<p>My current hypothesis is that the IDE would work best with an unitype representation of type, with a methods for specific operations. </p>\n<p>Ie, for completion, I think it would be better of completion asks \"what fields are available on this type\", rather than \"match this type with a record, and iterate its fields\".</p>",
        "id": 191729513,
        "sender_full_name": "matklad",
        "timestamp": 1585134589
    },
    {
        "content": "<p>I can also imagine a type which you both can call, and which has fields, if we allow for custom Fn impls</p>",
        "id": 191729654,
        "sender_full_name": "matklad",
        "timestamp": 1585134648
    },
    {
        "content": "<p>So this means that we should move more logic from IDE into the <code>Type</code> itself</p>",
        "id": 191729737,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1585134693
    },
    {
        "content": "<p>The general design guideline is probably to try to put high-level methods directly onto the <code>Type</code>, like <code>Type::signature</code></p>",
        "id": 191729743,
        "sender_full_name": "matklad",
        "timestamp": 1585134697
    },
    {
        "content": "<blockquote>\n<p>So this means that we should move more logic from IDE into the Type itself</p>\n</blockquote>\n<p>Yup</p>",
        "id": 191729768,
        "sender_full_name": "matklad",
        "timestamp": 1585134712
    },
    {
        "content": "<p>For signature help, you probably want a function that returns the signature for the type. For things like closures, that will even involve trait solving, unless we save the signature during inference</p>",
        "id": 191729858,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1585134740
    },
    {
        "content": "<p>part of the problem there is that currently I think signature help displays the function definition as written in the AST, and that's not going to work for things like closures</p>",
        "id": 191729917,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1585134782
    },
    {
        "content": "<p>Right, this is what bothers me in the first place. The <code>FunctionSignature</code> in <code>ra_ide</code> works with <code>Function</code>, <code>Struct</code> and <code>EnumVariant</code>, but not <code>Type</code></p>",
        "id": 191729960,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1585134810
    },
    {
        "content": "<p>Thus I tried to introduce <code>Closure</code>, but failed...</p>",
        "id": 191729985,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1585134830
    },
    {
        "content": "<p>Yeah, that's why <code>Type::as_callable</code> is broken . Rather than trying to downcast the type to a specific def, we should have a function whicih returns a type's signature as a funciton</p>",
        "id": 191730264,
        "sender_full_name": "matklad",
        "timestamp": 1585134977
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>struct Signature {\n    params: Vec&lt;(Option&lt;Name&gt;, Type)&gt;\n    ret_ty: Type,\n    kind: FnOnce | FnMut | Fn\n\n    // We need a way to extract doc comment, if there is one, but I don&#39;t know what&#39;s the right API\n\n    def: Option&lt;Def&gt;\n}\n\nimpl Type {\n  fn callable_signautre(&amp;self) -&gt; Option&lt;Signature&gt;\n}\n</pre></div>",
        "id": 191730445,
        "sender_full_name": "matklad",
        "timestamp": 1585135097
    },
    {
        "content": "<p>Also, I wondered, why don't we use <code>Vec&lt;(Option&lt;Pat&gt;, Type)&gt;</code> for <code>params</code>?</p>",
        "id": 191730646,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1585135258
    },
    {
        "content": "<p>While I am looking at <code>Type</code>, seems like it might make sense to try to kill <code>Type::autoderef</code> in favor of parameters on methods like <code>fields</code> and <code>iterate methods</code></p>",
        "id": 191730650,
        "sender_full_name": "matklad",
        "timestamp": 1585135260
    },
    {
        "content": "<p>Hm, riiiight, I think that should even be a <code>Local</code> and not <code>Pat</code></p>",
        "id": 191730704,
        "sender_full_name": "matklad",
        "timestamp": 1585135299
    },
    {
        "content": "<p>The more general philosophical guideline here is that, for impl, you usually want a fully-transparent pure-data implementation.</p>\n<p>When using an API, it is however more convenient to work with opaque types without any visible internal structure.</p>",
        "id": 191730967,
        "sender_full_name": "matklad",
        "timestamp": 1585135471
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/hover/near/191730704\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/hover/near/191730704\">said</a>:</p>\n<blockquote>\n<p>Hm, riiiight, I think that should even be a <code>Local</code> and not <code>Pat</code></p>\n</blockquote>\n<p>hmm but what do we do if there's a parameter like <code>(foo, bar): (u32, i32)</code>?</p>",
        "id": 191731275,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1585135681
    },
    {
        "content": "<p>like, we don't actually care about the locals of the function, we care about the parameters, and it's not really a 1:1 mapping</p>",
        "id": 191731384,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1585135732
    },
    {
        "content": "<p>Right.... Yeah, I guess that needs to be a <code>PatId</code> in the end, plus some public accessor which return whatever an IDE needs</p>",
        "id": 191731526,
        "sender_full_name": "matklad",
        "timestamp": 1585135813
    },
    {
        "content": "<p>Hm, I guess that means that, in the limit, we should treat patterns as defs in the code-model API.....</p>\n<p>Like, there's little difference between <code>struct Foo { foo: u32, bar: u32}</code> and <code>(foo, bar): (u32, u32)</code></p>",
        "id": 191731747,
        "sender_full_name": "matklad",
        "timestamp": 1585135957
    },
    {
        "content": "<p>for something like signature help, we'd need a) either a string representation of the whole thing or an AST pointer, and b) the type, right?</p>",
        "id": 191732742,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1585136603
    },
    {
        "content": "<p>Not sure about strings and ast --- there are macros in patterns: <code>pari!(a, b): (u32, u32)</code>. We might want to render that as <code>(a, b)</code> and not as <code>pair!(a, b)</code></p>",
        "id": 191733074,
        "sender_full_name": "matklad",
        "timestamp": 1585136850
    },
    {
        "content": "<p>hmm but will the macro-expanded pattern always be more clear about what the parameter means? in the end, this is just a hint about the parameter, right, and I'm not convinced that the macro-expanded form is a better hint <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 191733173,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1585136926
    },
    {
        "content": "<p>but in the end, we won't always have a non-expanded form..</p>",
        "id": 191733207,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1585136957
    },
    {
        "content": "<p>This is actually heuristic. For some macros, some users would like to see their unexpanded form in the signature help...</p>",
        "id": 191733584,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1585137226
    },
    {
        "content": "<p>I think I'd even argue that the patterns in the function signature are mostly for documentation purposes, otherwise you can always move them into the body. That doesn't really hold for closures though</p>",
        "id": 191733889,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1585137428
    },
    {
        "content": "<p>OTOH, maybe we should just do whatever rustdoc does there</p>",
        "id": 191733925,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1585137469
    },
    {
        "content": "<p>FYI: rustdoc expands macros and shows the patterns in desugared form <br>\ne.g. this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">pair</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$a</span>: <span class=\"nc\">tt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$b</span>: <span class=\"nc\">tt</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cp\">$a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$b</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"sd\">/// My docs!</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">function</span><span class=\"p\">(</span><span class=\"n\">pair</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)</span>: <span class=\"nc\">A</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>results in </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">function</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"nc\">a</span><span class=\"w\"> </span><span class=\"p\">}</span>: <span class=\"nc\">A</span><span class=\"p\">)</span><span class=\"w\"></span>\n</pre></div>",
        "id": 191820432,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1585176443
    },
    {
        "content": "<p>Hmm, what does that ?0 mean, <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> ?<br>\n<a href=\"/user_uploads/4715/3KcsGiWvABl2q-3wnORDEz2e/image.png\" title=\"image.png\">image.png</a> This comes from <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/402bf53a09a3edbb0ff4c94bf22d94d484f81eb9/crates/ra_ide/src/display/function_signature.rs#L181\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/402bf53a09a3edbb0ff4c94bf22d94d484f81eb9/crates/ra_ide/src/display/function_signature.rs#L181\">here</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/3KcsGiWvABl2q-3wnORDEz2e/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/3KcsGiWvABl2q-3wnORDEz2e/image.png\"></a></div>",
        "id": 191823050,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1585178282
    },
    {
        "content": "<p>hm, it's a variable, that shouldn't be there</p>",
        "id": 191849680,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1585210184
    },
    {
        "content": "<p>I struggle to get parameters <code>Vec&lt;PatId&gt;</code> from <code>FunctionId</code>. It seems like this should be stored in <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/d2619bf0ca0c8c2ff8cda22beec9851887e4a4d5/crates/ra_hir_def/src/data.rs#L27\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/d2619bf0ca0c8c2ff8cda22beec9851887e4a4d5/crates/ra_hir_def/src/data.rs#L27\"><code>FunctionData</code></a> or how else can I get it? Besides that <code>FunctionData</code> is quite sparse, there is no info about function's abi, unsafety, asynchrony, and maybe more things which I haven't tried to collect yet (maybe there are some other queries for them)</p>",
        "id": 191967591,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1585270852
    },
    {
        "content": "<p>Patterns matter only for function internals (unlike parameter types), so they belong to the body</p>",
        "id": 192004306,
        "sender_full_name": "matklad",
        "timestamp": 1585308375
    },
    {
        "content": "<p>Okay, I managed to get the <code>ra_hir_def::Pat</code>s, for function parameters, but since they contain <code>Idx&lt;Pat&gt;</code> types they make no sense without the <code>Arena&lt;Pat&gt;</code>. <strong>So is it ok exposing them to <code>ra_ide</code>, or otherwise how better to encapsulate them in <code>ra_hir</code>?</strong> .<br>\nI would be thinking about smth like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">ra_hir</span>::<span class=\"n\">Pat</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">inner</span>: <span class=\"nc\">ra_hir_def</span>::<span class=\"n\">expr</span>::<span class=\"n\">Pat</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">body</span>: <span class=\"nc\">Arc</span><span class=\"o\">&lt;</span><span class=\"n\">ra_hir_def</span>::<span class=\"n\">Body</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// this is kinda bad, because we only need body.pats from it, but otherwise we would need to copy the arena</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Besides that, the primary goal of getting them was for creating a signature as referenced <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/hover/near/191730445\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/hover/near/191730445\">here</a> by <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>  and to use it in signature help afterwards.  But using it this way means displaying the <code>ra_hir_def::Pat</code> and this requires implementing <code>std::fmt::Display</code> for a number of types in <code>ra_hir_def</code>. Whilst for now the signature help uses <code>ast</code> api to display the function parameters patterns and types.</p>\n<p>So I want to clarify whether it is okay to move from <code>ast</code> impl to using the <code>ra_hir</code> api (and somehow solve how to expose <code>Pat</code>s) in this case even speaking about the long term design? (My guess is that is what we want, since using the ast api is akin manipulating the raw text but slightly more high-level).</p>",
        "id": 192099783,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1585360850
    },
    {
        "content": "<p>Hi, I was wondering if there has been any discussion or possibility of providing a feature like <a href=\"https://github.com/microsoft/vscode-cpptools/issues/1734\">https://github.com/microsoft/vscode-cpptools/issues/1734</a> to rust-analyzer? As in hovering over a macro and seeing an \"Expands to\" in the hover similar to <code>cargo expand</code>. How feasible would this be?</p>",
        "id": 232267371,
        "sender_full_name": "Ayomide Bamidele",
        "timestamp": 1617024495
    },
    {
        "content": "<p>This is definitely something we can do, we have an \"Expand macro recursively\" command already</p>",
        "id": 232267878,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617024693
    },
    {
        "content": "<p>But the output might look quite poor until we implement a formatter</p>",
        "id": 232267918,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617024714
    },
    {
        "content": "<p>On the other hand, rust macro expansion could be very long , and I don't know whether it is good to put it in hover ?</p>",
        "id": 232268143,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1617024800
    },
    {
        "content": "<p>Yeah, I suppose it depends on the macro</p>",
        "id": 232268198,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617024828
    },
    {
        "content": "<p>we might want to abbreviate the expansion is it's too long</p>",
        "id": 232268231,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617024842
    },
    {
        "content": "<p>And macros from external crates often just expand to internal code that's hard to read</p>",
        "id": 232268340,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617024868
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/hover/near/232267878\">said</a>:</p>\n<blockquote>\n<p>This is definitely something we can do, we have an \"Expand macro recursively\" command already</p>\n</blockquote>\n<p>Oh I didn't know about this, how can I use this command? My main use case is that I have a proc macro that just generates a bunch of structs and methods, and thought it would be nice if I could hover over the macro call to preview what it expands to. Though maybe if it was just for a few steps -- i.e not expanding derives inside the code that the proc macro generates because that would be very long depending on the macro</p>",
        "id": 232268685,
        "sender_full_name": "Ayomide Bamidele",
        "timestamp": 1617025012
    },
    {
        "content": "<p>Could we expand recursively until we hit a macro from a different crate?</p>",
        "id": 232268734,
        "sender_full_name": "bjorn3",
        "timestamp": 1617025029
    },
    {
        "content": "<blockquote>\n<p>My main use case is that I have a proc macro that ...</p>\n</blockquote>\n<p>That command did not support proc-macro yet, but PR is welcome ! :)</p>",
        "id": 232269006,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1617025144
    },
    {
        "content": "<p>proc macros are always from a different crate</p>",
        "id": 232269018,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617025149
    },
    {
        "content": "<p>It does work with function-like proc macros, actually! Not for custom derives though</p>",
        "id": 232269064,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617025170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/hover/near/232268734\">said</a>:</p>\n<blockquote>\n<p>Could we expand recursively until we hit a macro from a different crate?</p>\n</blockquote>\n<p>Or expand until we hit a macro that doesn't start with <code>__</code> in the name and is not the same as the current macro? That should be a relatively good heuristic for expanding token munchers and the like while keeping macros that the user would may to read.</p>",
        "id": 232269070,
        "sender_full_name": "bjorn3",
        "timestamp": 1617025173
    },
    {
        "content": "<p>The best solution here should be a \"expand more\" button ?</p>",
        "id": 232269204,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1617025223
    },
    {
        "content": "<p>For token munchers you would likely have to click on \"expand more\" for almost every token in the input without this heuristic.</p>",
        "id": 232269394,
        "sender_full_name": "bjorn3",
        "timestamp": 1617025304
    },
    {
        "content": "<p>Still seems a good idea when applied in combination with the heuristic though.</p>",
        "id": 232269471,
        "sender_full_name": "bjorn3",
        "timestamp": 1617025326
    },
    {
        "content": "<p>I remember Clion has similar feature</p>",
        "id": 232269727,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1617025432
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216201\">Edwin Cheng</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/hover/near/232269006\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>My main use case is that I have a proc macro that ...</p>\n</blockquote>\n<p>That command did not support proc-macro yet, but PR is welcome ! :)</p>\n</blockquote>\n<p>How would one go about doing this? Would you reuse the code in <code>ide/expand_macro.rs</code> or would you need to create a new <code>ide/expand_recursive_macro.rs</code>?</p>",
        "id": 232270545,
        "sender_full_name": "Ayomide Bamidele",
        "timestamp": 1617025712
    },
    {
        "content": "<p>Also, would it be worth me writing up an issue requesting this feature with some brief details about use case? :)</p>",
        "id": 232270862,
        "sender_full_name": "Ayomide Bamidele",
        "timestamp": 1617025816
    },
    {
        "content": "<p>I think reuse the code is okay. And I remember there is an issue but I can't find it now :(</p>",
        "id": 232271608,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1617026078
    },
    {
        "content": "<p>there's already <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/5949\">https://github.com/rust-analyzer/rust-analyzer/issues/5949</a></p>",
        "id": 232272564,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1617026451
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216201\">Edwin Cheng</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/hover/near/232269006\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>My main use case is that I have a proc macro that ...</p>\n</blockquote>\n<p>That command did not support proc-macro yet, but PR is welcome ! :)</p>\n</blockquote>\n<p>Just tried it with my proc-macro, it seems to work actually! No formatting though</p>",
        "id": 232273325,
        "sender_full_name": "Ayomide Bamidele",
        "timestamp": 1617026754
    },
    {
        "content": "<blockquote>\n<p>Just tried it with my proc-macro, it seems to work actually! No formatting though</p>\n</blockquote>\n<p>huh ?</p>",
        "id": 232273646,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1617026882
    },
    {
        "content": "<p>Oh, is it a  derive macro ?</p>",
        "id": 232273766,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1617026925
    },
    {
        "content": "<p>It's a function-like macro</p>",
        "id": 232273916,
        "sender_full_name": "Ayomide Bamidele",
        "timestamp": 1617027002
    }
]