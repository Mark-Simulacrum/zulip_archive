[
    {
        "content": "<p>Regarding <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/6714\">#6714</a>:<br>\nWould a possible solution be to have a section in Cargo.toml which lists the 'optional' crates which your crate depends on (primarily the <code>rustc_*</code> internal crates).</p>\n<p>That is, additionally (or even only) run <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/d50a37d3aa473937919030b39587df3d93f9bd8c/crates/project_model/src/workspace.rs#L450-L482\">adding rustc_private crates</a> to packages which have:</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[package.metadata.rust-analyzer]</span>\n<span class=\"n\">rustc_private</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n</code></pre></div>\n<p>in their <code>Cargo.toml</code></p>",
        "id": 229086673,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1615026495
    },
    {
        "content": "<p>Initial implementation in <a href=\"https://github.com/DJMcNab/rust-analyzer/tree/rustc_private_metadata\">https://github.com/DJMcNab/rust-analyzer/tree/rustc_private_metadata</a></p>",
        "id": 229093436,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1615033067
    },
    {
        "content": "<p>Now in <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/7891\">https://github.com/rust-analyzer/rust-analyzer/pull/7891</a></p>",
        "id": 229108340,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1615046439
    },
    {
        "content": "<p>Hmm, this almost sounds like we need to revamp sysroot handling to be closer to what rustc does</p>",
        "id": 229108636,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1615046702
    },
    {
        "content": "<p>It seems like it isn't entirely correct to treat the CrateGraph as purely an input to the system generated by Cargo or another build system</p>",
        "id": 229108684,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1615046737
    },
    {
        "content": "<p>That is probably so. In this case I want a minimum changeset which can even partially improve working with the <code>rustc_private</code> feature. I'm trying to work out what the root of the <code>rustc-dev</code> package is - I suspect it would be rustc_driver, but I can't be certain because the code which manages this is somewhat convoluted</p>",
        "id": 229108835,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1615046856
    },
    {
        "content": "<blockquote>\n<p>I'm trying to work out what the root of the rustc-dev package is - I suspect it would be rustc_driver</p>\n</blockquote>\n<p>What do you mean by the root?</p>",
        "id": 229112189,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615049808
    },
    {
        "content": "<p>the workspace includes things outside compiler/, including tools: <a href=\"https://github.com/rust-lang/rust/issues/76653#issuecomment-691574806\">https://github.com/rust-lang/rust/issues/76653#issuecomment-691574806</a></p>",
        "id": 229112219,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615049839
    },
    {
        "content": "<p>I mean that <code>extern crate miri;</code> then removing <code>miri</code> from <code>Cargo.toml</code> makes priroda no longer compile. <br>\nTherefore, the <code>miri</code> library crate is not included in <code>rustc-dev</code>, even though <code>rust-analyzer</code> thinks it is.<br>\nIndeed, <code>rust-analyzer</code> thinks the <code>miri</code> dependency <code>priroda</code> is using is the one from <code>rustc_dev</code>, instead of the one in <code>Cargo.toml</code><br>\nAnd neither <code>miri</code> can actually use the <code>rustc_dev</code> packages in rust-analyzer, since they aren't workspace members.</p>",
        "id": 229112719,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1615050285
    },
    {
        "content": "<p>miri is separate component:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ rustup component list | grep miri\nmiri-x86_64-unknown-linux-gnu\n</code></pre></div>",
        "id": 229112799,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615050350
    },
    {
        "content": "<p>I don't know how that interacts with rust-analyzer</p>",
        "id": 229112804,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615050357
    },
    {
        "content": "<p>The <code>miri</code> component doesn't ship <code>libmiri.rlib</code> either, only</p>\n<div class=\"codehilite\"><pre><span></span><code>file:bin/miri\nfile:bin/cargo-miri\nfile:share/doc/miri/LICENSE-APACHE\nfile:share/doc/miri/LICENSE-MIT\nfile:share/doc/miri/README.md\n</code></pre></div>\n<p>That is, it only ships binaries, so we use a direct dependency on <a href=\"https://github.com/rust-lang/miri\">https://github.com/rust-lang/miri</a></p>",
        "id": 229112998,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1615050487
    },
    {
        "content": "<p>However rust-analyzer thinks that the miri library found in <code>rustcSource/src/tools/miri</code> is the version of miri we are using, even though we have a direct path dependency</p>",
        "id": 229113091,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1615050553
    },
    {
        "content": "<p>I'm tempted to make it be required to use <code>[package.metadata.rust-analyzer] rustc_private=true</code> for using the rustc_private crates. So long as it's documented well, I feel like that would be a better state of affairs<br>\nDoing that would avoid analysing the <code>rustc_private</code> crates for every workspace if <code>rustcSource</code> is set</p>",
        "id": 229177762,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1615114202
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/7891\">https://github.com/rust-analyzer/rust-analyzer/pull/7891</a> is ready for review.</p>",
        "id": 229187661,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1615123756
    },
    {
        "content": "<blockquote>\n<p>Hmm, this almost sounds like we need to revamp sysroot handling to be closer to what rustc does</p>\n</blockquote>\n<p>I'd much rather revamp rustc's sysroot handling to be closer what rust-analyzer does. implicit deps via search paths are not the most convenient model for an IDE )</p>",
        "id": 229309013,
        "sender_full_name": "matklad",
        "timestamp": 1615214490
    },
    {
        "content": "<p>what does rust-analyzer do?</p>",
        "id": 229309159,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615214540
    },
    {
        "content": "<p>hmm, I'm not sure how we could change rustc without a big breaking change</p>",
        "id": 229309460,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1615214655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Fixed.20crate.20graphs.20and.20optional.20builtin.20crates/near/229309159\">said</a>:</p>\n<blockquote>\n<p>what does rust-analyzer do?</p>\n</blockquote>\n<p>r-a assumes that all external crates used by some crate are known in advance (passed in as a <code>CrateGraph</code>)</p>",
        "id": 229309560,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1615214699
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Fixed.20crate.20graphs.20and.20optional.20builtin.20crates/near/229309560\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Fixed.20crate.20graphs.20and.20optional.20builtin.20crates/near/229309159\">said</a>:</p>\n<blockquote>\n<p>what does rust-analyzer do?</p>\n</blockquote>\n<p>r-a assumes that all external crates used by some crate are known in advance (passed in as a <code>CrateGraph</code>)</p>\n</blockquote>\n<p>yeah I don't see how that could work without breaking changes</p>",
        "id": 229309802,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615214787
    },
    {
        "content": "<p>this needn't be breaking</p>",
        "id": 229309877,
        "sender_full_name": "matklad",
        "timestamp": 1615214817
    },
    {
        "content": "<p>We'll need that info for build std anyway, so it is coming long-term</p>",
        "id": 229309971,
        "sender_full_name": "matklad",
        "timestamp": 1615214847
    },
    {
        "content": "<p><code>build-std</code> will use different artifacts than the sysroot though, especially since people want to add feature flags to std</p>",
        "id": 229310092,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615214891
    },
    {
        "content": "<p>I don't see how those models work together - build-std is <em>optional</em></p>",
        "id": 229310130,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615214907
    },
    {
        "content": "<p>build-std does not help with rustc-internal crates I think</p>",
        "id": 229310456,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1615215048
    },
    {
        "content": "<p>We are agnostic of what process is actually used to build the code, we don't use rlibs. We only need to know deps between the crates. If something implements build-std, something knows about dependencies between sysroot crates, and can expose that info to rust-analyzer. </p>\n<p>I think it is <strong>super duper crucially</strong>  important that we have a compilation model where everything is known in advance, so I'd rather not support <code>rustc_private</code> properly than to have search-path functionality impleted, which would make maintainint the \"in advance\" property hard to maintain.</p>",
        "id": 229310871,
        "sender_full_name": "matklad",
        "timestamp": 1615215210
    },
    {
        "content": "<blockquote>\n<p>I think it is super duper crucially important that we have a compilation model where everything is known in advance, so I'd rather not support rustc_private properly than to have search-path functionality impleted, which would make maintainint the \"in advance\" property hard to maintain.</p>\n</blockquote>\n<p>I just don't see how this is compatible with how rustc_private works though :/ that info is fundamentally not available ahead of time</p>",
        "id": 229311425,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615215429
    },
    {
        "content": "<p>you could parse the crate-level attributes for <code>feature(rustc_private)</code> maybe?</p>",
        "id": 229311452,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615215444
    },
    {
        "content": "<p>It's indeed not compatible with how <code>rustc_private</code>. So there's a tradeoff between \"sane compilation model\" and \"supporting rustc_private correnctly\". I think we should pick sane compilation model here</p>",
        "id": 229311716,
        "sender_full_name": "matklad",
        "timestamp": 1615215551
    },
    {
        "content": "<p>would it be possible to handle these as some kind of 'weak' / 'lazy' dependencies? i.e. the possible set and where they come from is known beforehand, but not whether the dependency edge actually exists</p>",
        "id": 229312173,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1615215712
    },
    {
        "content": "<p>Can you talk about why you think this property is so important? \"Rustdoc will never be fully supported\" is a really bitter pill to swallow</p>",
        "id": 229312474,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615215816
    },
    {
        "content": "<p>Other tools will be broken too, like clippy and miri and potentially rustfmt. And any third party tool that uses the libraries.</p>",
        "id": 229312855,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615215957
    },
    {
        "content": "<p>It doesn't follow that rustdoc will never be supported :D</p>\n<ul>\n<li>first, we can use heuristic to shoehorn rustc_private into existing model. We already have <code>ruscSources</code>, which seems to work for some folks</li>\n<li>rustdoc can begin using the standard compilation model, where all deps are explictly declared in Cargo.toml</li>\n</ul>",
        "id": 229313204,
        "sender_full_name": "matklad",
        "timestamp": 1615216090
    },
    {
        "content": "<p>The standard compilation model doesn't allow using precompiled libraries</p>",
        "id": 229313434,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615216182
    },
    {
        "content": "<p>I worked very hard on <a href=\"https://github.com/rust-lang/rust/pull/79540\">https://github.com/rust-lang/rust/pull/79540</a> and I'm not interested in undoing it</p>",
        "id": 229313560,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615216219
    },
    {
        "content": "<p>Is there a guide for setting up rustcSources?</p>",
        "id": 229313768,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615216306
    },
    {
        "content": "<p>No, there are no docs for working with rustc private</p>",
        "id": 229316463,
        "sender_full_name": "matklad",
        "timestamp": 1615217245
    },
    {
        "content": "<p>the following works for me:</p>\n<div class=\"codehilite\"><pre><span></span><code>18:26:42|~/projects/rust/src/librustdoc|master✓\nλ pwd\n/home/matklad/projects/rust/src/librustdoc\n\n18:26:44|~/projects/rust/src/librustdoc|master✓\nλ bat -p .vscode/settings.json\n{\n    &quot;rust-analyzer.rustcSource&quot;: &quot;/home/matklad/projects/rust/Cargo.toml&quot;\n}\n\n18:26:47|~/projects/rust/src/librustdoc|master✓\nλ code .\n</code></pre></div>",
        "id": 229316491,
        "sender_full_name": "matklad",
        "timestamp": 1615217257
    },
    {
        "content": "<p>(though for some reason it doesn't resolve methods from std)</p>",
        "id": 229316623,
        "sender_full_name": "matklad",
        "timestamp": 1615217298
    },
    {
        "content": "<p>works for me = I click on <code>extern crate rustc_hir;</code> and get to its definiton</p>",
        "id": 229316715,
        "sender_full_name": "matklad",
        "timestamp": 1615217345
    },
    {
        "content": "<p>This was implemented in <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/6524\">https://github.com/rust-analyzer/rust-analyzer/pull/6524</a>, that's the best source of documentatin at the momentz</p>",
        "id": 229316797,
        "sender_full_name": "matklad",
        "timestamp": 1615217371
    },
    {
        "content": "<p>hmm, it doesn't seem to have done anything for me</p>",
        "id": 229317377,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615217559
    },
    {
        "content": "<p>let me try running <code>x.py check</code> and see if it helps</p>",
        "id": 229317396,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615217565
    },
    {
        "content": "<p>oh well oops apparently x.py check is broken with <code>download-rustc</code> lol, I think that should hopefully be fixed with <a href=\"https://github.com/rust-lang/rust/pull/82739\">https://github.com/rust-lang/rust/pull/82739</a></p>",
        "id": 229317642,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615217645
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> we could do a quick screen share session right now, if that's helpful</p>",
        "id": 229317679,
        "sender_full_name": "matklad",
        "timestamp": 1615217653
    },
    {
        "content": "<p>sure! give me a second</p>",
        "id": 229317716,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615217662
    },
    {
        "content": "<p>x.py check shouldn't be relevant I think</p>",
        "id": 229317722,
        "sender_full_name": "matklad",
        "timestamp": 1615217664
    },
    {
        "content": "<p><a href=\"https://meet.jit.si/708263872019464\">Click to join video call</a></p>",
        "id": 229317762,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615217684
    },
    {
        "content": "<p>ok cool we got rustcSources working and I'm going to write up docs for it this afternoon (either for rust-analyzer or rustc-dev-guide)</p>",
        "id": 229319407,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615218294
    },
    {
        "content": "<p>Ok, <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> now knows how to set this up, so you can ask them ^^</p>",
        "id": 229319422,
        "sender_full_name": "matklad",
        "timestamp": 1615218299
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Fixed.20crate.20graphs.20and.20optional.20builtin.20crates/near/229311716\">said</a>:</p>\n<blockquote>\n<p>It's indeed not compatible with how <code>rustc_private</code>. So there's a tradeoff between \"sane compilation model\" and \"supporting rustc_private correnctly\". I think we should pick sane compilation model here</p>\n</blockquote>\n<p>so to my understanding this is mostly \"rustc_private won't be supported automatically and you'll need to do some setup work\" which seems fine</p>",
        "id": 229319541,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615218338
    },
    {
        "content": "<p>as long as it's <em>possible</em> to get it to work</p>",
        "id": 229319599,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615218355
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Your final comment does kind of make sense, but the behaviour of running cargo check (for build scripts) was already in the code<br>\nI just added an opt-out</p>",
        "id": 229329364,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1615220821
    },
    {
        "content": "<blockquote>\n<p>Your final comment does kind of make sense, but the behaviour of running cargo check (for build scripts) was already in the code</p>\n</blockquote>\n<p>well sure, but you can always change it :P</p>",
        "id": 229329460,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615220844
    },
    {
        "content": "<p>it seems silly to require everyone who uses this feature to add the opt out themselves</p>",
        "id": 229329522,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615220859
    },
    {
        "content": "<p>Well for example, I wouldn't opt out<br>\nSince it's possible that it does improve code analysis somewhere in the rustc source.</p>",
        "id": 229329839,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1615220924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"200146\">Daniel Mcnab</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Fixed.20crate.20graphs.20and.20optional.20builtin.20crates/near/229329839\">said</a>:</p>\n<blockquote>\n<p>Well for example, I wouldn't opt out<br>\nSince it's possible that it does improve code analysis somewhere in the rustc source.</p>\n</blockquote>\n<p>but this is never the case</p>",
        "id": 229329941,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615220950
    },
    {
        "content": "<p><code>cargo check</code> will <em>never</em> work out of the box</p>",
        "id": 229329968,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615220956
    },
    {
        "content": "<p>It certainly appears to do something. The point is that it only runs <code>cargo check</code> to run build scripts.</p>",
        "id": 229330095,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1615220992
    },
    {
        "content": "<blockquote>\n<p>It certainly appears to do something. </p>\n</blockquote>\n<p>can you describe what you mean by \"do something\"?</p>",
        "id": 229330205,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615221019
    },
    {
        "content": "<p>Sure. It shows up in the bottom bar as <code>metadata rustc_mir</code> and friends<br>\nAnd it doesn't hurt, at least on my machine.<br>\nIt must have been added for a reason.</p>",
        "id": 229330338,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1615221070
    },
    {
        "content": "<blockquote>\n<p>It must have been added for a reason.</p>\n</blockquote>\n<p><a href=\"/user_uploads/4715/_IYcSPzxKB5HjvsBxPAlrjKw/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/_IYcSPzxKB5HjvsBxPAlrjKw/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/_IYcSPzxKB5HjvsBxPAlrjKw/image.png\"></a></div>",
        "id": 229330549,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615221145
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> if that is so, then would moving to <code>rustcPrivate.src</code> still make sense?<br>\nIn this world we'd remove the other setting and the lines of code which get disabled by it</p>",
        "id": 229330945,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1615221272
    },
    {
        "content": "<p>I'm still learning how to Zulip, sorry</p>",
        "id": 229330985,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1615221290
    },
    {
        "content": "<p>if we don't need to touch settings, it's better not to touch them indeed</p>",
        "id": 229331064,
        "sender_full_name": "matklad",
        "timestamp": 1615221320
    },
    {
        "content": "<p>Right, I'm updated then</p>",
        "id": 229332445,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1615221807
    },
    {
        "content": "<p>Would it make sense for <code>[package.metadata.rust-analyzer]rustc_private=true</code> to imply <code>rust-analyzer.rustcSource=\"discover\"</code> if it is otherwise unset.</p>",
        "id": 229333373,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1615222136
    },
    {
        "content": "<p>I don't think so -- this is \"nightly\" stuff, so I'd rather user opt-into settings.json somewhere</p>",
        "id": 229333487,
        "sender_full_name": "matklad",
        "timestamp": 1615222188
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Fixed.20crate.20graphs.20and.20optional.20builtin.20crates/near/229333487\">said</a>:</p>\n<blockquote>\n<p>I don't think so -- this is \"nightly\" stuff, so I'd rather user opt-into settings.json somewhere</p>\n</blockquote>\n<p>isn't the <code>package.metadata</code> already an opt-in?</p>",
        "id": 229333547,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615222204
    },
    {
        "content": "<p>Sorry for the bors spam, I know I had permission before, wasn't aware it had been removed<br>\n(Not that it shouldn't have been removed, it being removed is definitely right)</p>",
        "id": 229333825,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1615222289
    },
    {
        "content": "<p>It's a good thing this is landing today (because of the release). I can go around the respositories I know of and add this metadata so it doesn't break for people.</p>",
        "id": 229334301,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1615222447
    },
    {
        "content": "<p>No worries about bors, we pruned the perms a while ago indeed. Would be happy to grant r+ back if I get tired of r+ PRs myself :)</p>",
        "id": 229334927,
        "sender_full_name": "matklad",
        "timestamp": 1615222664
    },
    {
        "content": "<p>I don't need it - I don't expect to be actively participating too much. It's the good thing of Rust, can just jump into almost any project and being sure that your contributions are at least 'correct', for some definition thereof</p>",
        "id": 229335655,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1615222883
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"200146\">Daniel Mcnab</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Fixed.20crate.20graphs.20and.20optional.20builtin.20crates/near/229333373\">said</a>:</p>\n<blockquote>\n<p>Would it make sense for <code>[package.metadata.rust-analyzer]rustc_private=true</code> to imply <code>rust-analyzer.rustcSource=\"discover\"</code> if it is otherwise unset.</p>\n</blockquote>\n<p>I'm interested in adding this, but I'm not sure how - I got as far as</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/crates/project_model/src/workspace.rs b/crates/project_model/src/workspace.rs</span>\n<span class=\"gh\">index 1b53fcc30..47b332a32 100644</span>\n<span class=\"gd\">--- a/crates/project_model/src/workspace.rs</span>\n<span class=\"gi\">+++ b/crates/project_model/src/workspace.rs</span>\n<span class=\"gu\">@@ -443,6 +443,7 @@ fn cargo_to_crate_graph(</span>\n         // If the user provided a path to rustc sources, we add all the rustc_private crates\n         // and create dependencies on them for the crates which opt-in to that\n         if let Some(rustc_workspace) = rustc {\n<span class=\"gi\">+            rustc_workspace.build_data_config.cargo_features.rustc_source = Some(crate::RustcSource::Discover);</span>\n             handle_rustc_crates(\n                 rustc_workspace,\n                 load,\n</code></pre></div>\n<p>and gave up when it said the fields are private:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0616]: field `build_data_config` of struct `CargoWorkspace` is private\nerror[E0616]: field `cargo_features` of struct `BuildDataConfig` is private\n</code></pre></div>\n<p>Also I think this is wrong in the first place because it only runs if rustc_source was already found :/</p>",
        "id": 229387042,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615242150
    },
    {
        "content": "<p>What you'd want is to add an else branch to the <code>if has_private {if let ... {} else {/*launch discovery*/ }} </code><br>\nI'm not certain what I called the variable</p>",
        "id": 229432270,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1615274048
    },
    {
        "content": "<p>It also turns out that this code was very useful for clippy, since clippy doesn't actually use a workspace<br>\nA happy accident of improvement</p>",
        "id": 229435248,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1615276265
    },
    {
        "content": "<p>So I guess there is some reason that <code>rust-analyzer.rustcSource=\"discover\"</code> cant be the default <em>always</em>, irrespective of what the package settings say?</p>",
        "id": 230154123,
        "sender_full_name": "RalfJ",
        "timestamp": 1615631864
    },
    {
        "content": "<p>We don't want to load rustc crates for everyone who isn't working on the compiler and related tooling. This is essentially a nightly opt-in</p>",
        "id": 230154369,
        "sender_full_name": "matklad",
        "timestamp": 1615632179
    },
    {
        "content": "<p>Ah so this loads things eagerly, not just when needed? I understand, makes sense.</p>",
        "id": 230155713,
        "sender_full_name": "RalfJ",
        "timestamp": 1615633849
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> Basically, it would run <code>cargo metadata</code> on the rustc crates, but not analyse them if <code>rustc_dev</code> is installed and no crates in the current workspace (and dependency tree) use the metadata<br>\nPersonally, I think that could be a reasonable tradeoff, since I suspect the number of people who should have rustc_dev installed on their normal nightly should be small</p>",
        "id": 230159470,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1615638324
    },
    {
        "content": "<p>That would also get all crates from <a href=\"http://crates.io\">crates.io</a> which rustc depends on</p>",
        "id": 230159476,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1615638337
    }
]