[
    {
        "content": "<p>Hey, I've picked up <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/10881\">#10881</a>. This is my first time working with the RA code base, I think I'm heading in the right direction but just wanted to check that I'm not in over my head.</p>\n<p>I've got the most basic case working where no generic types are involved in the alias or concrete type and where the alias isn't part of an expression:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"cp\">$</span><span class=\"mi\">0</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"c1\">// -&gt;</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"kt\">u32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Now I'm about to add support for generics in the alias and concrete type, which seems to make up almost all of the effort of the feature. A more complex case is something like this where the lifetimes are omitted in the alias and it has the lifetimes in a different order:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">A</span><span class=\"o\">&lt;'</span><span class=\"na\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">l</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">collections</span>::<span class=\"n\">HashMap</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">r</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"cp\">$</span><span class=\"mi\">0</span><span class=\"n\">A</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"c1\">// -&gt;</span>\n<span class=\"k\">type</span> <span class=\"nc\">A</span><span class=\"o\">&lt;'</span><span class=\"na\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">l</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">collections</span>::<span class=\"n\">HashMap</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">r</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">_</span> <span class=\"nc\">std</span>::<span class=\"n\">collections</span>::<span class=\"n\">HashMap</span><span class=\"o\">&lt;&amp;'</span><span class=\"nb\">_</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n<p>My plan is to initially create the replacement by:</p>\n<ol>\n<li>Creating a copy of the alias TypeAlias: <code>A&lt;'r, 'l, T&gt;</code></li>\n<li>Substituting specified types into it from the let expression: <code>A&lt;'_, '_. _&gt;</code></li>\n<li>Creating a copy of the concrete type: <code>&amp;'l std::collections::HashMap&lt;&amp;'r str, T&gt;</code></li>\n<li>Substituting in the types in step 2: <code>&amp;'_ std::collections::HashMap&lt;&amp;'_ str, _&gt;</code></li>\n<li>I think I can elide lifetimes based on whether they were specified for A, but I'll skip that for now</li>\n</ol>\n<p>I guess the step 2 copy won't be necessary once I understand things more. I'll have to learn the right level of abstration to do this at, for example the <code>GenericArgs</code> for the concrete type are <code>&amp;'r str</code> and <code>T</code> so I'd need to figure out how to split up <code>&amp;'r</code> and <code>str</code> for the reaplacements.</p>\n<p>Does this sound reasonable, am I missing anything that would make this easier?</p>",
        "id": 274004263,
        "sender_full_name": "Steven Joruk",
        "timestamp": 1646327198
    },
    {
        "content": "<p>I don't quite follow your thinking in regards to step 1 and 2. My mental model on how this would be done all is basically:</p>\n<ol>\n<li>Create a mapping between the generics by associating the inline site generics with the type alias declaration generics.</li>\n<li>With the mapping created you can now copy the right hand side of the type alias and start substituting the things in it with your mapping.</li>\n<li>Drop all '_ lifetimes as they aren't needed(this can also be done in the substitution step already).</li>\n</ol>\n<p>So I assume your main struggle is with figuring out how to actually do the substitution from what I see here. My immediate thought on a high level here would be to <code>clone_for_update</code> the right hand side node of the type alias, then iterate the descendants of that node, check whether there are hits for those in your mapping and record the substitutions in a vec(we don't wanna substitute while iterating as that can invalidate iteration). Then apply the substitutions and you have a substituted type node you can use for the actual replacement.</p>",
        "id": 274005781,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1646327790
    },
    {
        "content": "<p><del>Taking <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ide_assists/src/handlers/inline_call.rs\"><code>inline_call</code></a> as a rough guideline should be helpful here as well, though that assist has a lot more complex handling than is required here.</del></p>",
        "id": 274005940,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1646327850
    },
    {
        "content": "<p>Ye actually that assist isnt helpful as a guideline here at all</p>",
        "id": 274006143,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1646327933
    },
    {
        "content": "<p>I haven't started trying to implement the substitution yet, but I could see it was going to be an easy thing to get wrong or duplicate effort. I'll see how I get on with your advice, thanks :).</p>",
        "id": 274006868,
        "sender_full_name": "Steven Joruk",
        "timestamp": 1646328202
    },
    {
        "content": "<p>Ye for now figure out how to create a mapping I suppose :) Feel free to ask questions as they come up, I'll try to reply when I can (it's also fine to ping me for that).</p>",
        "id": 274007004,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1646328254
    },
    {
        "content": "<p>I got stuck on a silly mistake, both <code>let a: $0A&lt;u32&gt; = f();</code> and <code>fn main() { let a: $0A&lt;u32&gt; = f();</code> return a <code>PathType</code> via <code>ctx.find_node_at_offset::&lt;ast::PathType&gt;()?</code>, but only the one within a function has generics available.</p>\n<p><code>collect_used_generics</code> in <code>extract_type_alias.rs</code> seems very useful. It looks like I need to duplicate most of it as I'll be substituting in to <code>GenericArgs</code> rather than <code>GenericParams</code>, and as part of that I'll be walking a <code>PathType</code> rather than a <code>Type</code> so I guess I need to implement <code>walk_path_type</code>. Does that sound right?</p>",
        "id": 274183107,
        "sender_full_name": "Steven Joruk",
        "timestamp": 1646424921
    },
    {
        "content": "<p>You can wrap the <code>ast::PathType</code> in <code>ast::Type::PathType</code> and then walk that directly</p>",
        "id": 274184263,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1646425567
    },
    {
        "content": "<blockquote>\n<p>I got stuck on a silly mistake, both let a: $0A&lt;u32&gt; = f(); and fn main() { let a: $0A&lt;u32&gt; = f(); return a PathType via ctx.find_node_at_offset::&lt;ast::PathType&gt;()?, but only the one within a function has generics available.</p>\n</blockquote>\n<p>What do you mean only the one within a function? You need to write your test fixtures as valid rust, if you mean that the first one is a standalone let in a source file then that won't work.</p>",
        "id": 274184364,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1646425630
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300586\">Lukas Wirth</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/assist.20to.20replace.20aliases.20with.20concrete.20types/near/274184263\">말함</a>:</p>\n<blockquote>\n<p>You can wrap the <code>ast::PathType</code> in <code>ast::Type::PathType</code> and then walk that directly</p>\n</blockquote>\n<p>Though I don't think you need to walk the type since you only need to collect the generics in the generic param list</p>",
        "id": 274184413,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1646425673
    },
    {
        "content": "<p>I am in the middle of refactoring a crate and in doing so, managed to get rust-analyzer into a state of hysteria. I've tried both Preview &amp; Non Preview variants of the VSCode plugin and both are causing the issue.</p>\n<p>In VS Code, files can not be saved <br>\n<a href=\"/user_uploads/4715/-WduMo9o5fGV_1LWzDZ-rxuo/Screen-Shot-2022-03-05-at-2.23.17-PM.png\">Screen-Shot-2022-03-05-at-2.23.17-PM.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/-WduMo9o5fGV_1LWzDZ-rxuo/Screen-Shot-2022-03-05-at-2.23.17-PM.png\" title=\"Screen-Shot-2022-03-05-at-2.23.17-PM.png\"><img src=\"/user_uploads/4715/-WduMo9o5fGV_1LWzDZ-rxuo/Screen-Shot-2022-03-05-at-2.23.17-PM.png\"></a></div><p>while the rust-analyzer process is maxing out cpu:<br>\n<a href=\"/user_uploads/4715/_Ko6IVYUWn7tfsLwlWO62drJ/Screen-Shot-2022-03-05-at-2.24.30-PM.png\">Screen-Shot-2022-03-05-at-2.24.30-PM.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/_Ko6IVYUWn7tfsLwlWO62drJ/Screen-Shot-2022-03-05-at-2.24.30-PM.png\" title=\"Screen-Shot-2022-03-05-at-2.24.30-PM.png\"><img src=\"/user_uploads/4715/_Ko6IVYUWn7tfsLwlWO62drJ/Screen-Shot-2022-03-05-at-2.24.30-PM.png\"></a></div><p>the source causing the issue is here: <a href=\"https://github.com/chanced/catalyze/tree/rust-analyzer-issue\">https://github.com/chanced/catalyze/tree/rust-analyzer-issue</a></p>",
        "id": 274260631,
        "sender_full_name": "Chance",
        "timestamp": 1646508477
    },
    {
        "content": "<p>Your types are too complex for RA's little mind</p>",
        "id": 274260696,
        "sender_full_name": "Laurențiu",
        "timestamp": 1646508545
    },
    {
        "content": "<p>I'm assuming its because I am switching it from structs to traits and partially through with that conversion. I don't know which change caused it.</p>",
        "id": 274260889,
        "sender_full_name": "Chance",
        "timestamp": 1646508765
    },
    {
        "content": "<p>Actually I can't reproduce it. What happens sometimes is that trait-heavy code makes <code>chalk</code> loop indefinitely.  But it doesn't seem to be the case here.</p>",
        "id": 274260984,
        "sender_full_name": "Laurențiu",
        "timestamp": 1646508901
    },
    {
        "content": "<p>ah, okay. <a href=\"https://github.com/chanced/catalyze/blob/rust-analyzer-issue/src/proto/uninterpreted_option.rs\">https://github.com/chanced/catalyze/blob/rust-analyzer-issue/src/proto/uninterpreted_option.rs</a> was the file I had been working on if that matters.</p>\n<p>I'll finish up the conversion sans RA and see if it'll play ball without the error-filled code.</p>",
        "id": 274261054,
        "sender_full_name": "Chance",
        "timestamp": 1646508999
    },
    {
        "content": "<p>See <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/7796\">https://github.com/rust-analyzer/rust-analyzer/issues/7796</a> for an example. The workaround there was to put an explicit type on the variable.</p>",
        "id": 274261065,
        "sender_full_name": "Laurențiu",
        "timestamp": 1646509021
    },
    {
        "content": "<p>thank you for looking into it for me. I just dropped it here incase anyone wanted to analyze. I wasn't looking for a solution but appreciate the effort!</p>",
        "id": 274261070,
        "sender_full_name": "Chance",
        "timestamp": 1646509026
    },
    {
        "content": "<p>Yeah, unfortunately it doesn't reproduce (easily?), maybe you changed the code a little before noticing it.</p>",
        "id": 274261136,
        "sender_full_name": "Laurențiu",
        "timestamp": 1646509090
    },
    {
        "content": "<p>Next time you can try running <code>rust-analyzer -v analysis-stats .</code> and see if it hangs on some function.</p>",
        "id": 274261150,
        "sender_full_name": "Laurențiu",
        "timestamp": 1646509116
    },
    {
        "content": "<p>okay, will do. I wonder if the change which is causing it is caught up in vscode cache or something as I wasn't able to save.</p>\n<p>thank you again for your time!</p>",
        "id": 274261188,
        "sender_full_name": "Chance",
        "timestamp": 1646509198
    },
    {
        "content": "<p>That happens when rust-analyzer is stuck and it can't do the format-on-save thingy. At that point you still have the old version on disk.</p>",
        "id": 274261239,
        "sender_full_name": "Laurențiu",
        "timestamp": 1646509244
    },
    {
        "content": "<p>you should be able to just <code>killall rust-analyzer</code> in that case. if the current state of the code doesn't cause the problem, it should work again then; if it does cause the problem, you have a reproduction</p>",
        "id": 274261394,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1646509470
    },
    {
        "content": "<p>And use the \"Save file without formatting\" command to actually save it.</p>",
        "id": 274261410,
        "sender_full_name": "Laurențiu",
        "timestamp": 1646509507
    },
    {
        "content": "<p>what's the best way to install rust-analyzer so that I can run <code>rust-analyzer -v analysis-stats .</code>? I tried <code>rustup +nightly component add rust-analyzer-preview</code></p>",
        "id": 274262644,
        "sender_full_name": "Chance",
        "timestamp": 1646511162
    },
    {
        "content": "<p>You can find it in <code>~/.vscode/extensions/matklad.rust-analyzer-0.4.0-dev/server/rust-analyzer</code> (but with a different version number, 0.2.something)</p>",
        "id": 274262982,
        "sender_full_name": "Laurențiu",
        "timestamp": 1646511615
    },
    {
        "content": "<p>that's able to run fine</p>\n<div class=\"codehilite\"><pre><span></span><code>❯ ~/.vscode/extensions/matklad.rust-analyzer-0.3.961/server/rust-analyzer  -v analysis-stats .\nDatabase loaded:     1.15s (metadata 884.16ms; build 213.44ms)\n  crates: 4, mods: 45, decls: 1138, fns: 876\nItem Collection:     2.69s\n/Users/chance/dev/catalyze/src/file.rs 73:39-73:41: Expected dyn MessageDescriptor, got &lt;dyn ExactSizeIterator&lt;Item = dyn MessageDescriptor&gt; as IntoIterator&gt;::Item\n/Users/chance/dev/catalyze/src/file.rs 83:34-83:36: Expected dyn EnumDescriptor, got &lt;dyn ExactSizeIterator&lt;Item = dyn EnumDescriptor&gt; as IntoIterator&gt;::Item\n/Users/chance/dev/catalyze/src/file.rs 90:39-90:41: Expected dyn ServiceDescriptor, got &lt;dyn ExactSizeIterator&lt;Item = dyn ServiceDescriptor&gt; as IntoIterator&gt;::Item\n/Users/chance/dev/catalyze/src/file.rs 107:29-109:70: Expected (), got Option&lt;()&gt;\n/Users/chance/dev/catalyze/src/proto/uninterpreted_option.rs 52:28-52:30: Expected &amp;str, got ()\n/Users/chance/dev/catalyze/src/proto/uninterpreted_option.rs 66:8-66:20: Expected Result&lt;(), Error&gt;, got &amp;T\n/Users/chance/dev/catalyze/src/proto/uninterpreted_option.rs 65:73-67:5: Expected Result&lt;(), Error&gt;, got &amp;T\n/Users/chance/dev/catalyze/src/enum.rs 58:43-58:44: Expected dyn EnumValueDescriptor, got &lt;dyn ExactSizeIterator&lt;Item = dyn EnumValueDescriptor&gt; as IntoIterator&gt;::Item\n/Users/chance/dev/catalyze/src/message.rs 96:39-96:41: Expected dyn MessageDescriptor, got &lt;dyn ExactSizeIterator&lt;Item = dyn MessageDescriptor&gt; as IntoIterator&gt;::Item\n/Users/chance/dev/catalyze/src/message.rs 103:34-103:36: Expected dyn EnumDescriptor, got &lt;dyn ExactSizeIterator&lt;Item = dyn EnumDescriptor&gt; as IntoIterator&gt;::Item\n/Users/chance/dev/catalyze/src/message.rs 110:35-110:37: Expected dyn OneofDescriptor, got &lt;dyn ExactSizeIterator&lt;Item = dyn OneofDescriptor&gt; as IntoIterator&gt;::Item\n/Users/chance/dev/catalyze/src/message.rs 117:41-117:43: Expected dyn FieldDescriptor, got &lt;dyn ExactSizeIterator&lt;Item = dyn FieldDescriptor&gt; as IntoIterator&gt;::Item\n  exprs: 7225, ??ty: 149 (2%), ?ty: 71 (0%), !ty: 12\nInference:           1.92s\nTotal:               4.61s\n</code></pre></div>",
        "id": 274263066,
        "sender_full_name": "Chance",
        "timestamp": 1646511755
    },
    {
        "content": "<p>yea, going back to the plan of fixing the problems and then trying again with rust-analyzer.</p>",
        "id": 274263077,
        "sender_full_name": "Chance",
        "timestamp": 1646511777
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span>  I'm trying to allow the alias instance to omit whatever is inferred or has defaults available in the declaraion.</p>\n<p>I have a problem though, <code>ConstParam::default_val</code> is returning <code>None</code> for this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">A</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">];</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The <code>ConstParam</code> debug output shows its syntax is for 7..25 (<code>A&lt;const N: usize = 1&gt;</code>).</p>\n<p>Is there something obvious it could be? <a href=\"https://github.com/steven-joruk/rust-analyzer/commit/ff88687a17d8a4b8321eee0bfeaf950a4f0032ba\">This is my branch</a> if it helps</p>",
        "id": 274617993,
        "sender_full_name": "Steven Joruk",
        "timestamp": 1646779060
    },
    {
        "content": "<p>Looking at the syntax tree that looks like a bug in the parser</p>",
        "id": 274618146,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1646779148
    },
    {
        "content": "<p>the expression is wrapped in a <code>ConstArg</code> while it should merely be an expression</p>",
        "id": 274618161,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1646779163
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>TYPE_ALIAS@596..634\n  TYPE_KW@596..600 \"type\"\n  WHITESPACE@600..601 \" \"\n  NAME@601..602\n    IDENT@601..602 \"A\"\n  GENERIC_PARAM_LIST@602..622\n    L_ANGLE@602..603 \"&lt;\"\n    CONST_PARAM@603..621\n      CONST_KW@603..608 \"const\"\n      WHITESPACE@608..609 \" \"\n      NAME@609..610\n        IDENT@609..610 \"N\"\n      COLON@610..611 \":\"\n      WHITESPACE@611..612 \" \"\n      PATH_TYPE@612..617\n        PATH@612..617\n          PATH_SEGMENT@612..617\n            NAME_REF@612..617\n              IDENT@612..617 \"usize\"\n      WHITESPACE@617..618 \" \"\n      EQ@618..619 \"=\"\n      WHITESPACE@619..620 \" \"\n      CONST_ARG@620..621\n        LITERAL@620..621\n          INT_NUMBER@620..621 \"1\"\n    R_ANGLE@621..622 \"&gt;\"\n  WHITESPACE@622..623 \" \"\n  EQ@623..624 \"=\"\n  WHITESPACE@624..625 \" \"\n  ARRAY_TYPE@625..633\n    L_BRACK@625..626 \"[\"\n    PATH_TYPE@626..629\n      PATH@626..629\n        PATH_SEGMENT@626..629\n          NAME_REF@626..629\n            IDENT@626..629 \"u32\"\n    SEMICOLON@629..630 \";\"\n    WHITESPACE@630..631 \" \"\n    PATH_EXPR@631..632\n      PATH@631..632\n        PATH_SEGMENT@631..632\n          NAME_REF@631..632\n            IDENT@631..632 \"N\"\n    R_BRACK@632..633 \"]\"\n  SEMICOLON@633..634 \";\"\n</code></pre></div>\n<p>is the syntax tree for your snippet</p>",
        "id": 274618200,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1646779196
    },
    {
        "content": "<p>Note the</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>      CONST_ARG@620..621\n        LITERAL@620..621\n          INT_NUMBER@620..621 \"1\"\n</code></pre></div>",
        "id": 274618263,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1646779214
    },
    {
        "content": "<p>Oh :). There's another assist that uses default_val in <a href=\"http://extract_function.rs\">extract_function.rs</a>, I guess it doesn't have at test that exercises it. The syntax tree output is so useful, I just presumed it would have been right in this case though.</p>",
        "id": 274618305,
        "sender_full_name": "Steven Joruk",
        "timestamp": 1646779263
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/parser/src/grammar/generic_params.rs#L85\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/parser/src/grammar/generic_params.rs#L85</a></p>",
        "id": 274618329,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1646779286
    },
    {
        "content": "<p>this here is wrong I am pretty sure</p>",
        "id": 274618335,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1646779292
    },
    {
        "content": "<p>Not sure if there are any specific restrictions but that should be just an expression being parsed there</p>",
        "id": 274618421,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1646779333
    },
    {
        "content": "<p>not a constarg</p>",
        "id": 274618423,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1646779335
    },
    {
        "content": "<p>I can try to fix it tomorrow if you like. Yeah it should be an expression</p>",
        "id": 274618450,
        "sender_full_name": "Steven Joruk",
        "timestamp": 1646779355
    },
    {
        "content": "<p>Feel free to :)</p>",
        "id": 274618556,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1646779432
    },
    {
        "content": "<p>The first assist is <a href=\"https://github.com/steven-joruk/rust-analyzer/commit/9fb608acaf801e703723222ed147e03d81d25ff4\">close to done</a>. I'm trying to figure out what to edit to fix the generated <a href=\"http://nodes.rs\">nodes.rs</a> though, I've just manually edited it for now.</p>",
        "id": 274912265,
        "sender_full_name": "Steven Joruk",
        "timestamp": 1646955920
    },
    {
        "content": "<p>That file is generated from our <a href=\"https://github.com/rust-analyzer/ungrammar/blob/master/rust.ungram\">ungrammar definition</a></p>",
        "id": 274913145,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1646956564
    },
    {
        "content": "<p>You don't to be editing that file though since you shouldn't be touching the grammar, <del>instead create that impl in the <code>node_ext.rs</code> file thats in the syntax crate somewhere</del> Nvm you are already doing that</p>",
        "id": 274913171,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1646956586
    }
]