[
    {
        "content": "<p>I've just read a master's thesis on implementing procedural macros in IntelliJ Rust, and I think we could reuse this approach (and even code!)</p>\n<p>The key idea is to isolate bits that use unstable compiler's API into a separate process, and write a stable IPC shim on top. This not only  doges stability problems, but also greatly increases reliability: run away proc macro won't be able to crash the IDE process.</p>\n<p>The shim is here: <a href=\"https://github.com/fedochet/rust-proc-macro-expander\" target=\"_blank\" title=\"https://github.com/fedochet/rust-proc-macro-expander\">https://github.com/fedochet/rust-proc-macro-expander</a> I believe we can basically just use it?</p>",
        "id": 166402247,
        "sender_full_name": "matklad",
        "timestamp": 1558647260
    },
    {
        "content": "<p>Also, kudos to <a href=\"https://github.com/fedochet\" target=\"_blank\" title=\"https://github.com/fedochet\">https://github.com/fedochet</a>, masters student at <a href=\"https://en.itmo.ru/\" target=\"_blank\" title=\"https://en.itmo.ru/\">https://en.itmo.ru/</a> who did all the work!</p>",
        "id": 166402285,
        "sender_full_name": "matklad",
        "timestamp": 1558647300
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span></p>",
        "id": 166402403,
        "sender_full_name": "matklad",
        "timestamp": 1558647382
    },
    {
        "content": "<p>also cc <span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span>, the overall architecture  pattern, when rustc_private bits are moved into a separate process looks like something we want for both RLSes</p>",
        "id": 166402465,
        "sender_full_name": "matklad",
        "timestamp": 1558647444
    },
    {
        "content": "<p>That's neat !</p>",
        "id": 166416713,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1558663301
    },
    {
        "content": "<p>I did dig this problem a litte bit recently, the real hard part of the problem is , there is no way to call a proc-macro directly.<br>\nFor example, imagine following proc-macro:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[proc_macro_attribute]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">attr</span>: <span class=\"nc\">TokenStream</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">item</span>: <span class=\"nc\">TokenStream</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TokenStream</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Instead of the normal usage :</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[mycrate::foo]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">wrapped_function</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>We want to call it like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">some_func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">token_stream</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mycrate</span>::<span class=\"n\">foo</span><span class=\"p\">(...);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>However, in the current stable rustc there is no way to call a proc-macro directly.<br>\nThere are some solutions and idea about it:<br>\n1. <strong>(UNSTABLE)</strong> Same as the link you provided, loading the <code>proc-macro</code> crate dylib manually, and use unstable api (i.e. <code>proc_macro::bridge</code>) to bypass it.<br>\n2. Add a compiler flag in rustc to bypass the <code>proc_macro_attribute</code> and change the crate type to <code>rlib</code>.<br>\n3. Change rustc proc-macro to use IPC and deal with that IPC manually.<br>\n4. <strong>(STABLE but complicated)</strong> Write a \"copy-on-write\" virtual file system (FUSE?) and overwrite the given proc-crate <code>Cargo.toml</code> and its source code, to mask all proc-macro related stuffs and compile it as a normal <code>rlib</code> crate.</p>",
        "id": 166421678,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1558671271
    },
    {
        "content": "<p>Personally, I want to try to implement <strong>4</strong>, and happy to use (but not implement) <strong>2</strong>. But for fast prototyping, <strong>1</strong> is okay.</p>",
        "id": 166421683,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1558671285
    },
    {
        "content": "<p>It is because seem like <code>proc_macro::bridge</code> are far from stabilized. Although this part of \"proc-macro\" slim  is out of the scope of the main <code>rust-analyzer</code> project and it just use the nightly compiler <strong>indirectly</strong>,  depends on a nightly toolchain is not ideal for me.</p>",
        "id": 166422138,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1558672001
    },
    {
        "content": "<p>Approach 4 sounds interesting! I am afraid though, that it'll have a lot of overhead. For example, it would be hard to batch expansinos of several macros. In a sense, approach 4 already exists as a <code>cargo expand</code> subcommand. </p>\n<p>Approach 1 seems fine to me:</p>\n<ul>\n<li>as the shim's scope is limited, it's OK to depend on nightly compiler</li>\n<li>we want a separate process for this long-term anyway, so this approach actually is the first step in the long-term direction</li>\n</ul>",
        "id": 166433627,
        "sender_full_name": "matklad",
        "timestamp": 1558687235
    }
]