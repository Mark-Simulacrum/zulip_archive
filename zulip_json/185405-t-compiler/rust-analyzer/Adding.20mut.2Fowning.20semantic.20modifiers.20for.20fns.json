[
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> , what are your thoughts on adding mutable and owning (Maybe a different name, but would be a new <code>HighlightModifier</code>) semantic modifiers to fns that take <code>&amp;mut self</code> and <code>self</code>, respectively? I remember when I was doing rust years ago, as a beginner, I found it hard to understand how certain method calls were changing the behavior of the borrow checker. I don't propose any default syntax highlighting yet, but thought it might be useful to experiment with.</p>",
        "id": 205482617,
        "sender_full_name": "Paul Faria",
        "timestamp": 1596118129
    },
    {
        "content": "<p>We already have <code>mutable</code></p>",
        "id": 205482681,
        "sender_full_name": "matklad",
        "timestamp": 1596118161
    },
    {
        "content": "<p>I meant new only for the <code>owning</code> one.</p>",
        "id": 205482793,
        "sender_full_name": "Paul Faria",
        "timestamp": 1596118208
    },
    {
        "content": "<p>I think highlighitng functions calls that are actually mutable might be a good idea</p>",
        "id": 205482821,
        "sender_full_name": "matklad",
        "timestamp": 1596118220
    },
    {
        "content": "<p>I wanted to distinguish between &amp;, &amp;mut and moving fns</p>",
        "id": 205482844,
        "sender_full_name": "Paul Faria",
        "timestamp": 1596118232
    },
    {
        "content": "<p>(there's more general idea of highlighing not mutable types, but rather mutation points)</p>",
        "id": 205482863,
        "sender_full_name": "matklad",
        "timestamp": 1596118240
    },
    {
        "content": "<p>I think marking consumed non-Copy things might also be a good idea</p>",
        "id": 205482922,
        "sender_full_name": "matklad",
        "timestamp": 1596118266
    },
    {
        "content": "<p>/s we can use <del>strikethrough</del>, because the thing is GONE :D</p>",
        "id": 205482971,
        "sender_full_name": "matklad",
        "timestamp": 1596118291
    },
    {
        "content": "<p>XD</p>",
        "id": 205483015,
        "sender_full_name": "Paul Faria",
        "timestamp": 1596118314
    },
    {
        "content": "<p>Back when I had the borrow visualizer prototype working, it was a red outline around the moved value.</p>",
        "id": 205483176,
        "sender_full_name": "Paul Faria",
        "timestamp": 1596118380
    },
    {
        "content": "<p>I'll play around and see what looks nice and not horribly distracting</p>",
        "id": 205483224,
        "sender_full_name": "Paul Faria",
        "timestamp": 1596118397
    },
    {
        "content": "<p>So I've been stuck on the <code>Copy</code> part of this for a while now. I (think) I have the logic down where once I have the <code>Copy</code> trait, I can validate whether the type impls <code>Copy</code> or not. However I'm stuck actually finding the <code>Copy</code> trait. My current attempt was to move <code>FamousDefs</code> from <code>ra_assists::utils</code> to a new module <code>ra_hir::utils</code>, and add a <code>core_marker_Copy</code> fn that looks for <code>core:marker:Copy</code> (very similar to the <code>From</code> and <code>Option</code> fns). However, this always fails to find <code>core</code> (and even <code>std</code>). Any thoughts on what I could do to fix this or maybe a better way to figure out whether a type is <code>Copy</code> or not?</p>",
        "id": 205592500,
        "sender_full_name": "Paul Faria",
        "timestamp": 1596203794
    },
    {
        "content": "<p>somewhere where you have a db,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">trait_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">lang_item</span><span class=\"p\">(</span><span class=\"n\">krate</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;copy&quot;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">LangItemTarget</span>::<span class=\"n\">TraitId</span><span class=\"p\">(</span><span class=\"n\">trait_</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">trait_</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 205595148,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1596205001
    },
    {
        "content": "<p>that's the way to get lang items</p>",
        "id": 205595178,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1596205018
    },
    {
        "content": "<p>Well that's so much easier than what I was trying to do <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>. I'll give that a try after work. Thanks!</p>",
        "id": 205612082,
        "sender_full_name": "Paul Faria",
        "timestamp": 1596213186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> so this doesn't seem to be working for me:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">krate</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Function</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">).</span><span class=\"n\">krate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">db</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;Crate is {:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">krate</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">lang_item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">lang_item</span><span class=\"p\">(</span><span class=\"n\">krate</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SmolStr</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">&quot;copy&quot;</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;copy lang_item? {:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lang_item</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>The above code prints these logs (where self is <code>SemanticsImpl</code>)</p>\n<div class=\"codehilite\"><pre><span></span><code>Crate is Crate { id: CrateId(0) }\ncopy lang_item? None\n</code></pre></div>",
        "id": 205685035,
        "sender_full_name": "Paul Faria",
        "timestamp": 1596294050
    },
    {
        "content": "<p>If that's in a unit test, keep in mind that you don't have the standard library and actually have to define it</p>",
        "id": 205685062,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1596294120
    },
    {
        "content": "<p>I was JUST about to ask that</p>",
        "id": 205685161,
        "sender_full_name": "Paul Faria",
        "timestamp": 1596294248
    },
    {
        "content": "<p>Ok, that's working now. Thanks!</p>",
        "id": 205685313,
        "sender_full_name": "Paul Faria",
        "timestamp": 1596294513
    },
    {
        "content": "<p>So I got stuck on <code>impl Copy for MyType {}</code> vs <code>#[derive(Copy, Clone)] struct MyType ...</code>. Is the latter supposed to be recognized as a trait impl within a unit test?</p>",
        "id": 205685887,
        "sender_full_name": "Paul Faria",
        "timestamp": 1596295465
    },
    {
        "content": "<p>What I'm doing is:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">type_of_self</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">self_param</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">krate</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Function</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">).</span><span class=\"n\">krate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">db</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">lang_item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">lang_item</span><span class=\"p\">(</span><span class=\"n\">krate</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SmolStr</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">&quot;copy&quot;</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">copy_trait</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">lang_item</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">LangItemTarget</span>::<span class=\"n\">TraitId</span><span class=\"p\">(</span><span class=\"n\">copy_trait</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">copy_trait</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">impls_trait</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">db</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">copy_trait</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>The <code>if</code> block is entered only when I have <code>impl Copy for MyType {}</code>, and not with the derive syntax. Is this just a peculiarity with the test, or would this actually be an issue on real code?</p>",
        "id": 205685947,
        "sender_full_name": "Paul Faria",
        "timestamp": 1596295580
    },
    {
        "content": "<p>you would need to define the built-in macro for the latter to be resolved</p>",
        "id": 205687732,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1596298619
    },
    {
        "content": "<p>I'd just use <code>impl Copy for MyType {}</code></p>",
        "id": 205687745,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1596298643
    },
    {
        "content": "<p>i.e. you need <a href=\"https://github.com/rust-lang/rust/blob/cfdf9d335501cc0a53ae69c940095cca7d4be0f8/library/core/src/marker.rs#L375-L381\">this boilerplate</a> so the derive can be resolved</p>",
        "id": 205687814,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1596298731
    },
    {
        "content": "<p>... I think? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> actually maybe the problem is rather that the derive expects the <code>Copy</code> trait to be at the path that it usually is</p>",
        "id": 205687842,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1596298776
    },
    {
        "content": "<p>Just got back to my desk. None of that worked... I think I'll just use the <code>impl Copy ...</code> for the test to keep it simple. Thanks so much for your help today!</p>",
        "id": 205689060,
        "sender_full_name": "Paul Faria",
        "timestamp": 1596300687
    },
    {
        "content": "<p>I.e. I tried</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">core</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">mod</span> <span class=\"nn\">marker</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">#[lang = </span><span class=\"s\">&quot;copy&quot;</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"cp\">#[rustc_builtin_macro]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">#[allow_internal_unstable(core_intrinsics, derive_clone_copy)]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"kr\">macro</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"p\">(</span><span class=\"cp\">$item</span>:<span class=\"nc\">item</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>And the derive still wasn't recognized as an <code>impl Trait</code>. I tried with the clone bounds as well and that didn't make a difference.</p>",
        "id": 205689223,
        "sender_full_name": "Paul Faria",
        "timestamp": 1596300870
    },
    {
        "content": "<p>Turns out this is all that's needed:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">mod</span> <span class=\"nn\">marker</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[lang = </span><span class=\"s\">&quot;copy&quot;</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"w\">  </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>If there is no core dep, then the <code>krate</code> for the lang item is assumed to be just the <code>crate</code> keyword.</p>",
        "id": 205689855,
        "sender_full_name": "Paul Faria",
        "timestamp": 1596301905
    },
    {
        "content": "<p>PR up here: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/5643\">https://github.com/rust-analyzer/rust-analyzer/pull/5643</a></p>",
        "id": 205691681,
        "sender_full_name": "Paul Faria",
        "timestamp": 1596304621
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116114\">Paul Faria</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Adding.20mut.2Fowning.20semantic.20modifiers.20for.20fns/near/205483224\">said</a>:</p>\n<blockquote>\n<p>I'll play around and see what looks nice and not horribly distracting</p>\n</blockquote>\n<p>I'd just ask to make it a modifier, and then theme it separately, vs. pushing textmate formatted scopes to the IDE(s).  We'll need to work to get these taken advantage of in various themes (and samples for devs to add on their own, like the examples that I have put up), but I think it's a better path forward than trying to make formatting decisions in RA itself.</p>",
        "id": 205859595,
        "sender_full_name": "woody77",
        "timestamp": 1596497989
    },
    {
        "content": "<p>That's the path I ended up on in the PR. The <code>function.mutable</code>s  get an underline since the <code>mutable</code> modifier adds an underline by default. I didn't add any styling to <code>consuming</code> (I feel like I should use a more typical rust name here like owning or moving/moved, brought up the same in the PR).</p>",
        "id": 205902792,
        "sender_full_name": "Paul Faria",
        "timestamp": 1596546033
    }
]