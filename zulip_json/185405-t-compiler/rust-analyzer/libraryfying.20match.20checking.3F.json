[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> you <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/8717#issuecomment-851506836\">pinged me</a> about the possibility of libraryfying match checking. I think this is quite feasible!</p>",
        "id": 241081458,
        "sender_full_name": "Nadrieril",
        "timestamp": 1622584944
    },
    {
        "content": "<p>exhaustiveness checking specifically is a very independent bit of code. It uses only Ty and a crate-local Pat enum</p>",
        "id": 241081515,
        "sender_full_name": "Nadrieril",
        "timestamp": 1622584983
    },
    {
        "content": "<p>AFAIK it also uses a single query, namely checking for type inhabitedness</p>",
        "id": 241081547,
        "sender_full_name": "Nadrieril",
        "timestamp": 1622585018
    },
    {
        "content": "<p>I know that there Ty is in the process of being librarified. Are there also plans to share the representation of patterns at all?</p>",
        "id": 241081671,
        "sender_full_name": "Nadrieril",
        "timestamp": 1622585087
    },
    {
        "content": "<p>What kind of knowledge does it require about <code>Ty</code>? Does it care about specific <code>TyKind</code>s at all?</p>",
        "id": 241083948,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622586704
    },
    {
        "content": "<p>Yeah it pattern-matches on <code>TyKind</code>s a ton</p>",
        "id": 241087100,
        "sender_full_name": "Nadrieril",
        "timestamp": 1622588930
    },
    {
        "content": "<p>Ah I guess another tricky bit is constants. There's a pass that converts constants into the corresponding patterns and rust-analyzer might need that for completeness. But that taps into constant evaluation which sounds like a can of worms</p>",
        "id": 241087476,
        "sender_full_name": "Nadrieril",
        "timestamp": 1622589284
    },
    {
        "content": "<p>Seems like constant evaluation can be exctacted relatively easy, no? </p>\n<p>Bascially, the match checking code can be parametrized over <code>eval</code> function</p>",
        "id": 241121078,
        "sender_full_name": "matklad",
        "timestamp": 1622623694
    },
    {
        "content": "<p>They <code>TyKind</code> feels more worrisome to me. Can the pattern-matching be moved to the caller? Ie, if it already has an internal IR of patterns, can we reformulate the code such that it's the caller who lowers <code>Ty</code> to patterns?</p>",
        "id": 241121168,
        "sender_full_name": "matklad",
        "timestamp": 1622623760
    },
    {
        "content": "<p>TyKinds don't get interpreted as patterns. They're pattern-matched throughout the code to make all sorts of decisions :/</p>",
        "id": 241124159,
        "sender_full_name": "Nadrieril",
        "timestamp": 1622625630
    },
    {
        "content": "<p>But pattern-matching TyKind should be fine once Ty is extracted to a shared library between rustc and chalk, right?</p>",
        "id": 241124930,
        "sender_full_name": "Nadrieril",
        "timestamp": 1622626109
    },
    {
        "content": "<p>Right!</p>",
        "id": 241124947,
        "sender_full_name": "matklad",
        "timestamp": 1622626124
    },
    {
        "content": "<p>So I guess it's better to re-visit this topic once types are extracted...</p>",
        "id": 241124982,
        "sender_full_name": "matklad",
        "timestamp": 1622626151
    },
    {
        "content": "<p>Cool, let's do that</p>",
        "id": 241125132,
        "sender_full_name": "Nadrieril",
        "timestamp": 1622626227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> what's the way for me to educate myself about the shared types library? </p>\n<p>I am curious about  bunch of things: do types carry identity? are they just values? how the memory management works? does \"code changes over time\" aspect of rust-analyzer affects the types?</p>",
        "id": 241125254,
        "sender_full_name": "matklad",
        "timestamp": 1622626291
    },
    {
        "content": "<p>FWIW here's what chalk currently uses <a href=\"https://docs.rs/chalk-ir/0.68.0/chalk_ir/enum.TyKind.html\">https://docs.rs/chalk-ir/0.68.0/chalk_ir/enum.TyKind.html</a> . Ty itself is parameterized over an interner</p>",
        "id": 241125469,
        "sender_full_name": "Nadrieril",
        "timestamp": 1622626411
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> I don't know many details either, there's a hackmd somewhere, but my understanding is that it's mostly supposed to look like chalk_ir</p>",
        "id": 241127558,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622627683
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/wg-traits/issues/16\">https://github.com/rust-lang/wg-traits/issues/16</a> is a good place to start I guess</p>",
        "id": 241128318,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622628198
    },
    {
        "content": "<p>We could also consider fallible implementation instead of bugging out with panic <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/9105#discussion_r644656085\">https://github.com/rust-analyzer/rust-analyzer/pull/9105#discussion_r644656085</a></p>",
        "id": 241379866,
        "sender_full_name": "Dawer",
        "timestamp": 1622721311
    },
    {
        "content": "<p>we do want to bug out in debug builds, for actual bugs. For librarification we could maybe just control it with a cargo feature</p>",
        "id": 241380760,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622721864
    },
    {
        "content": "<p>What's the scope of what rust-analyzer needs?</p>",
        "id": 242418257,
        "sender_full_name": "Nadrieril",
        "timestamp": 1623458700
    },
    {
        "content": "<p>Eventually, we need <em>everything</em>, so the question is rather \"what's the most natural scope to create a boundary between the libraries\"</p>",
        "id": 242447334,
        "sender_full_name": "matklad",
        "timestamp": 1623500141
    }
]