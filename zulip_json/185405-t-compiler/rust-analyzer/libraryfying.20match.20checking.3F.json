[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> you <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/8717#issuecomment-851506836\">pinged me</a> about the possibility of libraryfying match checking. I think this is quite feasible!</p>",
        "id": 241081458,
        "sender_full_name": "Nadrieril",
        "timestamp": 1622584944
    },
    {
        "content": "<p>exhaustiveness checking specifically is a very independent bit of code. It uses only Ty and a crate-local Pat enum</p>",
        "id": 241081515,
        "sender_full_name": "Nadrieril",
        "timestamp": 1622584983
    },
    {
        "content": "<p>AFAIK it also uses a single query, namely checking for type inhabitedness</p>",
        "id": 241081547,
        "sender_full_name": "Nadrieril",
        "timestamp": 1622585018
    },
    {
        "content": "<p>I know that there Ty is in the process of being librarified. Are there also plans to share the representation of patterns at all?</p>",
        "id": 241081671,
        "sender_full_name": "Nadrieril",
        "timestamp": 1622585087
    },
    {
        "content": "<p>What kind of knowledge does it require about <code>Ty</code>? Does it care about specific <code>TyKind</code>s at all?</p>",
        "id": 241083948,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622586704
    },
    {
        "content": "<p>Yeah it pattern-matches on <code>TyKind</code>s a ton</p>",
        "id": 241087100,
        "sender_full_name": "Nadrieril",
        "timestamp": 1622588930
    },
    {
        "content": "<p>Ah I guess another tricky bit is constants. There's a pass that converts constants into the corresponding patterns and rust-analyzer might need that for completeness. But that taps into constant evaluation which sounds like a can of worms</p>",
        "id": 241087476,
        "sender_full_name": "Nadrieril",
        "timestamp": 1622589284
    },
    {
        "content": "<p>Seems like constant evaluation can be exctacted relatively easy, no? </p>\n<p>Bascially, the match checking code can be parametrized over <code>eval</code> function</p>",
        "id": 241121078,
        "sender_full_name": "matklad",
        "timestamp": 1622623694
    },
    {
        "content": "<p>They <code>TyKind</code> feels more worrisome to me. Can the pattern-matching be moved to the caller? Ie, if it already has an internal IR of patterns, can we reformulate the code such that it's the caller who lowers <code>Ty</code> to patterns?</p>",
        "id": 241121168,
        "sender_full_name": "matklad",
        "timestamp": 1622623760
    },
    {
        "content": "<p>TyKinds don't get interpreted as patterns. They're pattern-matched throughout the code to make all sorts of decisions :/</p>",
        "id": 241124159,
        "sender_full_name": "Nadrieril",
        "timestamp": 1622625630
    },
    {
        "content": "<p>But pattern-matching TyKind should be fine once Ty is extracted to a shared library between rustc and chalk, right?</p>",
        "id": 241124930,
        "sender_full_name": "Nadrieril",
        "timestamp": 1622626109
    },
    {
        "content": "<p>Right!</p>",
        "id": 241124947,
        "sender_full_name": "matklad",
        "timestamp": 1622626124
    },
    {
        "content": "<p>So I guess it's better to re-visit this topic once types are extracted...</p>",
        "id": 241124982,
        "sender_full_name": "matklad",
        "timestamp": 1622626151
    },
    {
        "content": "<p>Cool, let's do that</p>",
        "id": 241125132,
        "sender_full_name": "Nadrieril",
        "timestamp": 1622626227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> what's the way for me to educate myself about the shared types library? </p>\n<p>I am curious about  bunch of things: do types carry identity? are they just values? how the memory management works? does \"code changes over time\" aspect of rust-analyzer affects the types?</p>",
        "id": 241125254,
        "sender_full_name": "matklad",
        "timestamp": 1622626291
    },
    {
        "content": "<p>FWIW here's what chalk currently uses <a href=\"https://docs.rs/chalk-ir/0.68.0/chalk_ir/enum.TyKind.html\">https://docs.rs/chalk-ir/0.68.0/chalk_ir/enum.TyKind.html</a> . Ty itself is parameterized over an interner</p>",
        "id": 241125469,
        "sender_full_name": "Nadrieril",
        "timestamp": 1622626411
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> I don't know many details either, there's a hackmd somewhere, but my understanding is that it's mostly supposed to look like chalk_ir</p>",
        "id": 241127558,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622627683
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/wg-traits/issues/16\">https://github.com/rust-lang/wg-traits/issues/16</a> is a good place to start I guess</p>",
        "id": 241128318,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622628198
    },
    {
        "content": "<p>We could also consider fallible implementation instead of bugging out with panic <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/9105#discussion_r644656085\">https://github.com/rust-analyzer/rust-analyzer/pull/9105#discussion_r644656085</a></p>",
        "id": 241379866,
        "sender_full_name": "Dawer",
        "timestamp": 1622721311
    },
    {
        "content": "<p>we do want to bug out in debug builds, for actual bugs. For librarification we could maybe just control it with a cargo feature</p>",
        "id": 241380760,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622721864
    },
    {
        "content": "<p>What's the scope of what rust-analyzer needs?</p>",
        "id": 242418257,
        "sender_full_name": "Nadrieril",
        "timestamp": 1623458700
    },
    {
        "content": "<p>Eventually, we need <em>everything</em>, so the question is rather \"what's the most natural scope to create a boundary between the libraries\"</p>",
        "id": 242447334,
        "sender_full_name": "matklad",
        "timestamp": 1623500141
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> a natural scope will appear when <a href=\"https://github.com/rust-lang/rust/pull/88950\">https://github.com/rust-lang/rust/pull/88950</a> gets merged: that PR makes exhaustiveness use its own pattern representation, and extracting type-dependent behavior shouldn't be too hard after that. That should be enough to get an independent crate that can tell you if a match is exhaustive.</p>",
        "id": 254611584,
        "sender_full_name": "Nadrieril",
        "timestamp": 1632434131
    },
    {
        "content": "<p>The fun part is to add more capabilities than just exhaustiveness. You mentioned exploding a <code>_</code> pattern, I imagine we also want to add missing match arms. What else could we do?</p>",
        "id": 254611702,
        "sender_full_name": "Nadrieril",
        "timestamp": 1632434185
    },
    {
        "content": "<p>Merging/Simplifying Or-patterns where possible maybe</p>",
        "id": 254612858,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632434720
    },
    {
        "content": "<p>Splitting an <code>ident</code> pattern into the constructors it can match has been requested</p>",
        "id": 254613967,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1632435252
    },
    {
        "content": "<p>This one: <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8365\">https://github.com/rust-analyzer/rust-analyzer/issues/8365</a></p>",
        "id": 254614144,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1632435354
    },
    {
        "content": "<p>Also this is really cool to see, great work :)</p>",
        "id": 254614215,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1632435372
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300586\">Lukas Wirth</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/libraryfying.20match.20checking.3F/near/254612858\">said</a>:</p>\n<blockquote>\n<p>Merging/Simplifying Or-patterns where possible maybe</p>\n</blockquote>\n<p>What would that look like? <code>Some(1) | Some(2)</code> -&gt; <code>Some(1|2)</code> for example?</p>",
        "id": 254615216,
        "sender_full_name": "Nadrieril",
        "timestamp": 1632435879
    },
    {
        "content": "<p>Ye that was my rough idea in the simplest case</p>",
        "id": 254615288,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632435922
    },
    {
        "content": "<p>Merging arms would also fall into that category, since that's practically the same thing if I'm not mistaken</p>",
        "id": 254615337,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632435950
    },
    {
        "content": "<p>what do you do with the code in each branch if you merge arms though?</p>",
        "id": 254615544,
        "sender_full_name": "Nadrieril",
        "timestamp": 1632436053
    },
    {
        "content": "<p>I guess it only makes sense if the code is the same</p>",
        "id": 254615564,
        "sender_full_name": "Nadrieril",
        "timestamp": 1632436068
    },
    {
        "content": "<p>splitting arms sounds potentially useful too</p>",
        "id": 254615573,
        "sender_full_name": "Nadrieril",
        "timestamp": 1632436078
    },
    {
        "content": "<p>Ye that would only work if the bodies of the arms are the same, we already have such an assist but it works rather naively by just <code>|</code>-ing the patterns together I think <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ide_assists/src/handlers/merge_match_arms.rs\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ide_assists/src/handlers/merge_match_arms.rs</a></p>",
        "id": 254615708,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632436169
    },
    {
        "content": "<p>why is the naive thing not good enough?</p>",
        "id": 254615788,
        "sender_full_name": "Nadrieril",
        "timestamp": 1632436203
    },
    {
        "content": "<p>It is fine this way I think, just trying to come up with possible use cases here</p>",
        "id": 254615872,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632436261
    },
    {
        "content": "<blockquote>\n<p>You mentioned exploding a _ pattern, I imagine we also want to add missing match arms. What else could we do?</p>\n</blockquote>\n<p>Some user feedback/wishes for 2 extra small things on top:</p>\n<ul>\n<li>deal with <code>Self</code> substitution to evaporate <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/6404#issuecomment-813387608\">https://github.com/rust-analyzer/rust-analyzer/issues/6404#issuecomment-813387608</a></li>\n<li>allow to expand not only <code>_</code> pattern, but also things like <code>Some(_)</code> if possible, for instance, when there's an enum wrapped in option (every time I have to unwrap some <code>Result&lt;Option&lt;Foo&gt;&gt;</code> I want this feature)</li>\n</ul>",
        "id": 254662789,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1632468469
    },
    {
        "content": "<p>Yeah, we definitely want <code>_</code> as a subpattern to be expandable too. That's where having access to the exhaustiveness algorithm is really useful actually.<br>\nSo far it seems the only thing we need for all those features is: given a <code>_</code> subpattern, tell me which values it catches. That's definitely doable, the algorithm already computes most of what we need</p>",
        "id": 254724791,
        "sender_full_name": "Nadrieril",
        "timestamp": 1632498165
    },
    {
        "content": "<p>Still, lots of work before we can get it as an independent crate</p>",
        "id": 254799441,
        "sender_full_name": "Nadrieril",
        "timestamp": 1632536399
    },
    {
        "content": "<p>Ooh, I found an assist I'd really like to have: \"simplify match expression\". E.g. on this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">do_none</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">do_0</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">do_1</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">do_wild</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>it would simplify the <code>Some</code> case and give:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">do_0</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">do_1</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">do_wild</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 255949329,
        "sender_full_name": "Nadrieril",
        "timestamp": 1633265290
    },
    {
        "content": "<p>For future reference: some issues that probably require access to the exhaustiveness algorithm:</p>\n<ul>\n<li><a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8690\">https://github.com/rust-analyzer/rust-analyzer/issues/8690</a> Replacing if-let with match can lead to match expression with non-exhaustive patterns</li>\n<li><a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/4896\">https://github.com/rust-analyzer/rust-analyzer/issues/4896</a> Incorrect \"missing match arm\" error</li>\n<li><a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8365\">https://github.com/rust-analyzer/rust-analyzer/issues/8365</a> Case splitting</li>\n<li><a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8129\">https://github.com/rust-analyzer/rust-analyzer/issues/8129</a> \"Fill match arms\" code action creates non-exhaustive match</li>\n<li><a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/9528\">https://github.com/rust-analyzer/rust-analyzer/issues/9528</a> Add fuel to match checking</li>\n</ul>",
        "id": 255950046,
        "sender_full_name": "Nadrieril",
        "timestamp": 1633266019
    },
    {
        "content": "<p>I've just published experimental update for match checking, tho it is stale already <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/10484\">https://github.com/rust-analyzer/rust-analyzer/pull/10484</a></p>\n<p>The <a href=\"https://github.com/rust-lang/rust/pull/89570\">https://github.com/rust-lang/rust/pull/89570</a>  <code>[Experiment] Split exhaustiveness logic into its own crate #89570</code>  looks very promising!</p>",
        "id": 256641425,
        "sender_full_name": "Dawer",
        "timestamp": 1633637212
    },
    {
        "content": "<p>I'm hoping we can have a shared library in the coming weeks! (tho I do have some upcoming deadlines so might get distracted)</p>",
        "id": 256757850,
        "sender_full_name": "Nadrieril",
        "timestamp": 1633707191
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245339\">@Nadrieril</span> I've created a PR with some further improvements for your branch <a href=\"https://github.com/Nadrieril/rust/pull/1\">https://github.com/Nadrieril/rust/pull/1</a>  Take a look when you get a spare time <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 258053970,
        "sender_full_name": "Dawer",
        "timestamp": 1634573372
    },
    {
        "content": "<p>oh thanks! but it's really not ready for that, a lot will change before I get it merged</p>",
        "id": 258054307,
        "sender_full_name": "Nadrieril",
        "timestamp": 1634573486
    },
    {
        "content": "<p>I'll look at your commits to see if I can keep anything once I'm done</p>",
        "id": 258054348,
        "sender_full_name": "Nadrieril",
        "timestamp": 1634573506
    },
    {
        "content": "<p>oh yeah that's good stuff</p>",
        "id": 258054964,
        "sender_full_name": "Nadrieril",
        "timestamp": 1634573719
    },
    {
        "content": "<p>I considered making allocation part of Context but I wasn't sure</p>",
        "id": 258055007,
        "sender_full_name": "Nadrieril",
        "timestamp": 1634573738
    },
    {
        "content": "<p>I like your solution, it avoids having the 'p lifetime on Context</p>",
        "id": 258055413,
        "sender_full_name": "Nadrieril",
        "timestamp": 1634573865
    },
    {
        "content": "<p>I was planning on just forcing everyone to use typed-arena ^^</p>",
        "id": 258055606,
        "sender_full_name": "Nadrieril",
        "timestamp": 1634573925
    },
    {
        "content": "<p>Idk what way is better. I was just excited with <code>&amp;'p Self</code> trick to bound HRTB lifetime <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 258056597,
        "sender_full_name": "Dawer",
        "timestamp": 1634574212
    },
    {
        "content": "<p>Ahh I just recall rustc does not have typed-arena in it's dependency tree so I wanted to give rustc the ability to use it's own arena</p>",
        "id": 258058463,
        "sender_full_name": "Dawer",
        "timestamp": 1634574888
    },
    {
        "content": "<p>yeah, that's a good reason</p>",
        "id": 258059776,
        "sender_full_name": "Nadrieril",
        "timestamp": 1634575351
    },
    {
        "content": "<p>I feel bad that I said I'd be done in a few weeks and then I haven't done it yet. Thanks for your patience, it will take some more time until I regain my energy but I'll do it eventually <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 259731695,
        "sender_full_name": "Nadrieril",
        "timestamp": 1635601343
    },
    {
        "content": "<p>No worries! In general, we don't have any expectations here around when things are getting done: <a href=\"https://internals.rust-lang.org/t/blog-post-rustacean-principles/15300/2\">https://internals.rust-lang.org/t/blog-post-rustacean-principles/15300/2</a></p>",
        "id": 259732315,
        "sender_full_name": "matklad",
        "timestamp": 1635602280
    }
]