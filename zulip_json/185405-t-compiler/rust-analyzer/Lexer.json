[
    {
        "content": "<p>Are we going to stick with using <code>rustc_lexer</code> crate in future or is this temporary?</p>",
        "id": 186345193,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1579737824
    },
    {
        "content": "<p>This is the opposite of temporary</p>",
        "id": 186345422,
        "sender_full_name": "matklad",
        "timestamp": 1579738008
    },
    {
        "content": "<p>We probably should tweak our integration with <code>rustc_lexer</code></p>",
        "id": 186345432,
        "sender_full_name": "matklad",
        "timestamp": 1579738023
    },
    {
        "content": "<p>and we <em>might</em> tweak the interface and scope of <code>rustc_lexer</code> (things like lowering an integer literal to an integer value ideally should be in <code>rustc_lexer</code>), but the overall structure should be roughly as it is today</p>",
        "id": 186345481,
        "sender_full_name": "matklad",
        "timestamp": 1579738084
    },
    {
        "content": "<p>And what would you want to tweak in our integration with <code>rustc_lexer</code> today?</p>",
        "id": 186345651,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1579738236
    },
    {
        "content": "<p>At least not dropping errors on the floor. Quite probably something else: the current contents of <code>lexer.rs</code> is basically the minimal diff which was possible to apply to thrown away our previous bespoke lexer and replace it with <code>rustc_lexer</code>. For example, </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">            </span><span class=\"n\">rustc_lexer</span>::<span class=\"n\">TokenKind</span>::<span class=\"n\">Ident</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">token_text</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">text</span><span class=\"p\">[..</span><span class=\"n\">rustc_token</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">token_text</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">&quot;_&quot;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">UNDERSCORE</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">SyntaxKind</span>::<span class=\"n\">from_keyword</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">text</span><span class=\"p\">[..</span><span class=\"n\">rustc_token</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">]).</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"n\">IDENT</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>immediately jumps at me as something we might want to change at either our or <code>rustc_lexer</code> side</p>",
        "id": 186345860,
        "sender_full_name": "matklad",
        "timestamp": 1579738488
    },
    {
        "content": "<p>I don't have time right now to investigate what <em>exactly</em> needs to be changed and how :D</p>",
        "id": 186345880,
        "sender_full_name": "matklad",
        "timestamp": 1579738519
    },
    {
        "content": "<p>Yeah, I am currently working on that not-dropping-errors-on-the-floor issue. But didn't know we had another lexer implementation it the past. Regarding that UNDERSCORE token, I'll also look at it, but after I am done with errors preserving.</p>",
        "id": 186346295,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1579739017
    },
    {
        "content": "<p>And by <em>\"lowering an integer literal to an integer value\"</em> do you mean parsing the integer token string representation like <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_syntax/src/ast/extensions.rs#L26\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_syntax/src/ast/extensions.rs#L26\">here</a>? I also wonder whether this is legal at all (I mean there may be some rust-specific features of int literals that <code>str::parse::&lt;usize&gt;()</code> may not understand...)</p>",
        "id": 186347014,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1579739775
    },
    {
        "content": "<p>That code is specifically for tupple suffixes, so it is likely more or less<br>\nok. I mean something that makes sure that 4_2f32 is 42.0</p>",
        "id": 186347477,
        "sender_full_name": "matklad",
        "timestamp": 1579740290
    },
    {
        "content": "<p>Hmm, it's hard to find a place where we parse numeric literals value... And I don't see where it is implemented now.</p>",
        "id": 186348020,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1579740958
    },
    {
        "content": "<p>we don't do that yet, but rustc does</p>",
        "id": 186369409,
        "sender_full_name": "matklad",
        "timestamp": 1579770232
    },
    {
        "content": "<p>Okay, I guess we would need to expose that as a public API on <code>rustc_lexer</code> crate. Today I'll create an issue for that at their repo in order not to forget about it.</p>",
        "id": 186373390,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1579773677
    },
    {
        "content": "<p>I think it would be much easier forget about the fact that the issue exists than about the fact that we need to refactor this eventually</p>",
        "id": 186373515,
        "sender_full_name": "matklad",
        "timestamp": 1579773761
    },
    {
        "content": "<p>I add issues into my bookmarks, so won't forget about it)</p>",
        "id": 186373819,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1579774019
    },
    {
        "content": "<p>Okay, so I created <a href=\"https://github.com/rust-lang/rust/issues/68492\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/68492\">an issue at rustc repo</a>, I hope someone will answer.</p>",
        "id": 186432659,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1579811861
    }
]