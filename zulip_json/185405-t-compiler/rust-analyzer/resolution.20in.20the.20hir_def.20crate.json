[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> I noticed the <a href=\"http://resolver.rs\">resolver.rs</a> and <a href=\"http://nameres.rs\">nameres.rs</a> were in the hir_def crate, whereas I was under the impression that they were done on the CST. So would logically be in, maybe the syntax crate. Can you see the fault in my logic ?</p>",
        "id": 219601783,
        "sender_full_name": "kev",
        "timestamp": 1607691233
    },
    {
        "content": "<p>I think so</p>",
        "id": 219601931,
        "sender_full_name": "matklad",
        "timestamp": 1607691324
    },
    {
        "content": "<p>We intentionally don't use CST for name resolution</p>",
        "id": 219601946,
        "sender_full_name": "matklad",
        "timestamp": 1607691332
    },
    {
        "content": "<p>The reason for that is that CST is very volatile -- even adding whitespace invalidates CST</p>",
        "id": 219601976,
        "sender_full_name": "matklad",
        "timestamp": 1607691355
    },
    {
        "content": "<p>So that's why we have that item-tree layer in between, which you've looked at previously -- after typing, we invalidate CST and recmopute item tree</p>",
        "id": 219602069,
        "sender_full_name": "matklad",
        "timestamp": 1607691393
    },
    {
        "content": "<p>Oh so the CST is only for parsing and then you lower it to hir, to do resolution and type checking?</p>",
        "id": 219602116,
        "sender_full_name": "kev",
        "timestamp": 1607691426
    },
    {
        "content": "<p>item tree, however, probably is the same (unless you indeed add new top-level item). So we can skip re-computing name resolution results, as they don't depend on cst directly</p>",
        "id": 219602128,
        "sender_full_name": "matklad",
        "timestamp": 1607691434
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"369769\">@kev</span> right!</p>",
        "id": 219602132,
        "sender_full_name": "matklad",
        "timestamp": 1607691441
    },
    {
        "content": "<p>Also note that the location of those files doesn't necessarily mean that they don't use data structures from a different crate â€“ nameres used to use the CST, but was still in the hir_def crate</p>",
        "id": 219602149,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607691457
    },
    {
        "content": "<p>Oh right that's a good point</p>",
        "id": 219602266,
        "sender_full_name": "kev",
        "timestamp": 1607691511
    },
    {
        "content": "<p>More specificically, the folow is like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>text (base_db) -&gt; CST (syntax) -&gt; item_tree (def) -&gt; crate_def_map (def)\n                            \\---&gt; body (def) -&gt; ty (ty)\n</code></pre></div>",
        "id": 219602310,
        "sender_full_name": "matklad",
        "timestamp": 1607691537
    },
    {
        "content": "<p>Oh I see, the <code>ty</code> probably does not deal with scoping information?</p>",
        "id": 219602559,
        "sender_full_name": "kev",
        "timestamp": 1607691674
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"369769\">@kev</span> there are two kinds of scopes</p>",
        "id": 219602593,
        "sender_full_name": "matklad",
        "timestamp": 1607691695
    },
    {
        "content": "<p>module-level scope for items. It is handled by <code>crate_def_map</code></p>",
        "id": 219602620,
        "sender_full_name": "matklad",
        "timestamp": 1607691717
    },
    {
        "content": "<p>block-level scope for local variable. It is handled by <code>body/scope</code> thing, and is pretty ad-hoc</p>",
        "id": 219602688,
        "sender_full_name": "matklad",
        "timestamp": 1607691745
    },
    {
        "content": "<p>The reson for this split is so that we can resovle names in function bodies lazily</p>",
        "id": 219602726,
        "sender_full_name": "matklad",
        "timestamp": 1607691772
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369769\">kev</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/resolution.20in.20the.20hir_def.20crate/near/219602559\">said</a>:</p>\n<blockquote>\n<p>Oh I see, the <code>ty</code> probably does not deal with scoping information?</p>\n</blockquote>\n<p>Oh, I was referring to lexical scope or block-level scope</p>",
        "id": 219602778,
        "sender_full_name": "kev",
        "timestamp": 1607691816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/resolution.20in.20the.20hir_def.20crate/near/219602726\">said</a>:</p>\n<blockquote>\n<p>The reson for this split is so that we can resovle names in function bodies lazily</p>\n</blockquote>\n<p>Hmm what do you mean by resolving names lazily?</p>",
        "id": 219602854,
        "sender_full_name": "kev",
        "timestamp": 1607691854
    },
    {
        "content": "<p>Yeah, lexical scopes is handled by <code>ExprScopes</code> which is in <code>def</code> crate, not in <code>ty</code></p>",
        "id": 219602857,
        "sender_full_name": "matklad",
        "timestamp": 1607691857
    },
    {
        "content": "<blockquote>\n<p>Hmm what do you mean by resolving names lazily?</p>\n</blockquote>\n<p>rust-analyzer resolve names in the modules eagarly. That is, after every typing, we recompute the set of names visible in every module.</p>\n<p>For function bodies however, we postpone this computation until we actually need it. So typically only bodis in the currently opened  file are processed, all other function bodies are unresolved.</p>",
        "id": 219602953,
        "sender_full_name": "matklad",
        "timestamp": 1607691925
    },
    {
        "content": "<p>Oh right, that makes sense!</p>",
        "id": 219603203,
        "sender_full_name": "kev",
        "timestamp": 1607692051
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/resolution.20in.20the.20hir_def.20crate/near/219602310\">said</a>:</p>\n<blockquote>\n<p>More specificically, the folow is like this:</p>\n<p><div class=\"codehilite\"><pre><span></span><code>text (base_db) -&gt; CST (syntax) -&gt; item_tree (def) -&gt; crate_def_map (def)\n                            \\---&gt; body (def) -&gt; ty (ty)\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Are imports resolved before the CST is transformed to body(def) is called?</p>",
        "id": 219609213,
        "sender_full_name": "kev",
        "timestamp": 1607695448
    },
    {
        "content": "<p>Expressions can be checked with just a Body, so it seems that this must be the case. Link: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_def/src/body/scope.rs#L51\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_def/src/body/scope.rs#L51</a></p>",
        "id": 219609477,
        "sender_full_name": "kev",
        "timestamp": 1607695616
    },
    {
        "content": "<p>It uses the name resolution results during body lowering (CrateDefMap)</p>",
        "id": 219609850,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607695848
    },
    {
        "content": "<p>Is there something like api-walkthrough where you can see the whole flow?</p>",
        "id": 219610208,
        "sender_full_name": "kev",
        "timestamp": 1607696053
    },
    {
        "content": "<p>There probably is, I'm just super blind :)</p>",
        "id": 219610278,
        "sender_full_name": "kev",
        "timestamp": 1607696090
    },
    {
        "content": "<p>There's a few design docs here: <a href=\"https://github.com/rust-analyzer/rust-analyzer/tree/master/docs/dev\">https://github.com/rust-analyzer/rust-analyzer/tree/master/docs/dev</a></p>\n<p>I don't think they cover what you're looking for though</p>",
        "id": 219610442,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607696183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/resolution.20in.20the.20hir_def.20crate/near/219609850\">said</a>:</p>\n<blockquote>\n<p>It uses the name resolution results during body lowering (CrateDefMap)</p>\n</blockquote>\n<p>so before the ast::Expr is lowered, it is resolved?</p>",
        "id": 219610701,
        "sender_full_name": "kev",
        "timestamp": 1607696328
    },
    {
        "content": "<p>I was under the impression that it was lowered first and then resolved</p>",
        "id": 219610788,
        "sender_full_name": "kev",
        "timestamp": 1607696394
    },
    {
        "content": "<p>Ah, no, seems like only <em>macro calls</em> in the body are really resolved if I'm reading the code correctly</p>",
        "id": 219611108,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607696551
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/resolution.20in.20the.20hir_def.20crate/near/219610442\">said</a>:</p>\n<blockquote>\n<p>There's a few design docs here: <a href=\"https://github.com/rust-analyzer/rust-analyzer/tree/master/docs/dev\">https://github.com/rust-analyzer/rust-analyzer/tree/master/docs/dev</a></p>\n<p>I don't think they cover what you're looking for though</p>\n</blockquote>\n<p>Will re-read the syntax and architecture files incase I missed anything!</p>",
        "id": 219611121,
        "sender_full_name": "kev",
        "timestamp": 1607696559
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/resolution.20in.20the.20hir_def.20crate/near/219611108\">said</a>:</p>\n<blockquote>\n<p>Ah, no, seems like only <em>macro calls</em> in the body are really resolved if I'm reading the code correctly</p>\n</blockquote>\n<p>This would make a lot of sense for me, because the tests are predominately include macro calls, without any use trees or inlined modules</p>",
        "id": 219611270,
        "sender_full_name": "kev",
        "timestamp": 1607696647
    }
]