[
    {
        "content": "<p>Hey, I'm working on <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8555\">https://github.com/rust-analyzer/rust-analyzer/issues/8555</a> - and I'm not sure how to a reference to the current <code>Module</code> the file refers to. Is there a convenient way to get this?</p>",
        "id": 235014011,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618690229
    },
    {
        "content": "<p>I think the simplest way is to go with <code>sema.scope(syntax_node).module()</code></p>",
        "id": 235014115,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618690334
    },
    {
        "content": "<p>Or I guess a way to go from a <code>hir::Type</code> to a <code>Module</code>. I'm trying to do a non-local way to get from a given variable to an <code>impl</code> block</p>",
        "id": 235014125,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618690339
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span> ohh, I'll give that a shot!</p>",
        "id": 235014133,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618690363
    },
    {
        "content": "<p>I guess part of what I'm trying to do is deprecate all uses of <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ide_assists/src/utils.rs#L310-L318\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ide_assists/src/utils.rs#L310-L318</a>, in favor of going through the hir db</p>",
        "id": 235014768,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618691008
    },
    {
        "content": "<p>\"list me all impl blocks associated with this type, so I can pick the first one\" is something which should be answerable</p>",
        "id": 235014825,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618691049
    },
    {
        "content": "<p>It appears to be somewhat difficult right now to go from \"here's a value\" to \"here are the impl blocks associated with that value's type\"</p>",
        "id": 235015005,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618691231
    },
    {
        "content": "<p>(Mostly just typing stuff out as I go, if anyone knows of better approaches / prior art on this, please do chime in!)</p>",
        "id": 235015068,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618691290
    },
    {
        "content": "<p>There is infra to query all impls for a type, you could pick one of those then and map that back to the source node</p>",
        "id": 235015094,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618691345
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 235015102,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618691355
    },
    {
        "content": "<p><a href=\"https://github.com/Veykril/rust-analyzer/blob/58a6ec549d638455f5b5447bbbc174993e51e288\\crates\\hir\\src\\lib.rs#L1571\">https://github.com/Veykril/rust-analyzer/blob/58a6ec549d638455f5b5447bbbc174993e51e288\\crates\\hir\\src\\lib.rs#L1571</a></p>",
        "id": 235015201,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618691448
    },
    {
        "content": "<p>You'd have to filter out trait impls though since you dont want those i imagine</p>",
        "id": 235015235,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618691516
    },
    {
        "content": "<p><em>oh</em> -- yeah that's a good idea!</p>",
        "id": 235015240,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618691522
    },
    {
        "content": "<p>Then there is the <code>HasSource</code> tree that maps defs back to their source node if they have one</p>",
        "id": 235015299,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618691550
    },
    {
        "content": "<p>which is implemented for <code>Impl</code> so that should work</p>",
        "id": 235015306,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618691567
    },
    {
        "content": "<p>oh, yay! -- I successfully got an impl block!</p>",
        "id": 235015600,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618691857
    },
    {
        "content": "<p>okayyyyyyy, let's gooooo</p>",
        "id": 235015605,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618691863
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span> is there a canonical way to go from a hir type to an ast type?</p>",
        "id": 235016966,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618693088
    },
    {
        "content": "<p>Uuh</p>",
        "id": 235016986,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618693112
    },
    {
        "content": "<p>I've got the <code>hir::Impl</code> but I want its position in the AST (<code>ast::Impl</code>)</p>",
        "id": 235016988,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618693115
    },
    {
        "content": "<p>not sure if this question makes sense?</p>",
        "id": 235016993,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618693119
    },
    {
        "content": "<p>going from hir::Impl to ast::Impl is simple</p>",
        "id": 235016995,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618693128
    },
    {
        "content": "<p>There is a trait for that <code>HasSource</code></p>",
        "id": 235016998,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618693138
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">HasSource</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Ast</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">source</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">db</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">HirDatabase</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">InFile</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">Ast</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 235017024,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618693183
    },
    {
        "content": "<p>so you should be able to just go with <code>impl_.source(db)</code> and get your ast::Impl out of that</p>",
        "id": 235017091,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618693206
    },
    {
        "content": "<p>oh yay, thank you!</p>",
        "id": 235017488,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618693309
    },
    {
        "content": "<p>gah, I managed to get <code>hir::Impl::all_for_type</code> to work, but now it's returning empty lists again -- not sure what I changed</p>",
        "id": 235023048,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618697794
    },
    {
        "content": "<p>think it's time to call it a day, heh</p>",
        "id": 235023051,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618697801
    },
    {
        "content": "<p>pushed the branch <a href=\"https://github.com/rust-analyzer/rust-analyzer/compare/master...yoshuawuyts:whats-a-method-to-a-method-call\">https://github.com/rust-analyzer/rust-analyzer/compare/master...yoshuawuyts:whats-a-method-to-a-method-call</a> in case I don't get around to finishing this up</p>",
        "id": 235023068,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618697824
    },
    {
        "content": "<p>I think it might be returning nothing when your type is a reference,  you would have to strip the type of references before asking for impls first.</p>",
        "id": 235024500,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618699435
    },
    {
        "content": "<p>If I recall correctly impl search doesn't like references(for some valid reasons I don't remember right now)</p>",
        "id": 235024565,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618699477
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span> what do you mean by \"stripping it of references\" -- cast it somehow?</p>",
        "id": 235024941,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618699921
    },
    {
        "content": "<p>ah no, I mean the type the <code>hir::Type</code> represents</p>",
        "id": 235024988,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618699945
    },
    {
        "content": "<p>if that is a reference type that it represetns it probably doesnt work</p>",
        "id": 235024994,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618699958
    },
    {
        "content": "<p>let me check the api quickly</p>",
        "id": 235024998,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618699966
    },
    {
        "content": "<p>oh whattttt</p>",
        "id": 235025020,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618700013
    },
    {
        "content": "<p>that worked?</p>",
        "id": 235025022,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618700017
    },
    {
        "content": "<p>I changed the signature from <code>&amp;self</code> to <code>self</code> and <em>swoosh</em> it's working again</p>",
        "id": 235025027,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618700031
    },
    {
        "content": "<p>Ye okay then my thought was correct</p>",
        "id": 235025082,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618700060
    },
    {
        "content": "<p>I think we index impls by non-reference types for simplicity</p>",
        "id": 235025092,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618700080
    },
    {
        "content": "<p>oh wow, would not have guessed that this was the issue -- been at this for a good while now haha</p>",
        "id": 235025093,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618700080
    },
    {
        "content": "<p>Ye its a bit weird <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 235025095,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618700091
    },
    {
        "content": "<p>so you wanna strip the references of the hir type</p>",
        "id": 235025099,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618700103
    },
    {
        "content": "<p>yes please!</p>",
        "id": 235025107,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618700108
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">std</span>::<span class=\"n\">iter</span>::<span class=\"n\">successors</span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">()),</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">ty</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">remove_ref</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">last</span><span class=\"p\">()</span><span class=\"w\"></span>\n</code></pre></div>\n<p>something like this</p>",
        "id": 235025109,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618700109
    },
    {
        "content": "<p>should do the trick, we should add a method for this to hir::Type at some point I think since this is done in multiple locations by now</p>",
        "id": 235025129,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618700131
    },
    {
        "content": "<p>Feel free to ask and ping if you get stuck on things like these <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 235025211,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618700194
    },
    {
        "content": "<p>Dont mind helping if I'm online that is</p>",
        "id": 235025217,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618700204
    },
    {
        "content": "<p>much appreciated!</p>",
        "id": 235025222,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618700213
    },
    {
        "content": "<p>I guess I got angry-stuck on this one -- I had it working once, so I could get it working again :P</p>",
        "id": 235025238,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618700246
    },
    {
        "content": "<p>I guess this is the problem with undocumented functions that have weird special case behaviours <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 235025239,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618700248
    },
    {
        "content": "<p>Been there</p>",
        "id": 235025248,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618700259
    },
    {
        "content": "<p>it's rarely fruitful though -- appreciate the offer to help, and will def opt to do that next time <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 235025289,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618700286
    },
    {
        "content": "<p>Getting into RA's codebase takes a bit of time, but once you got a grasp of things its a pleasure to work with in my opinion <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 235025551,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618700580
    },
    {
        "content": "<p>yeah, RA is so well structured! -- I've worked on a few compiler projects before, and RA certainly is among the easiest to work on</p>",
        "id": 235026532,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618701641
    },
    {
        "content": "<p>just got my first test passing for this assist btw -- think it's time to call it a day</p>",
        "id": 235026578,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618701688
    },
    {
        "content": "<p>goodnight, and thanks for the help!</p>",
        "id": 235026580,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618701693
    },
    {
        "content": "<p>No problem and good night <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 235026662,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618701812
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300586\">Lukas Wirth</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/get.20a.20module.20from.20a.20.60self.60.20param/near/235025239\">said</a>:</p>\n<blockquote>\n<p>I guess this is the problem with undocumented functions that have weird special case behaviours <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>it's... not a weird special case behavior though? if you have <code>impl S</code>, it's an impl for <code>S</code>, not <code>&amp;S</code>. Removing the references automatically would be the weird special case</p>",
        "id": 235056613,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1618735619
    },
    {
        "content": "<p><code>Impl::all_for_type</code> actually does have some weird special-case behavior in that it strips references from the self type in trait impls (so the other way around, it'll return <code>impl T for &amp;S</code> if you give it just<code>S</code>), because it's currently mainly built for the impl search (the \"N implementations\" code lens on structs). It's not a good general abstraction :/</p>",
        "id": 235056927,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1618736022
    },
    {
        "content": "<p>it might actually make sense to add a separate function to return only all inherent impls for a type</p>",
        "id": 235056988,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1618736087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> I'll do that as part of this patch ^__^</p>",
        "id": 235059039,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618738537
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span>  I have a question: I'm working with generated AST nodes created using <code>make::&lt;node_kind&gt;</code>. I have a method I'd like to attach to an <code>Impl</code> -- is there a good way of doing that?</p>",
        "id": 235059331,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618738825
    },
    {
        "content": "<p>I'm looking at <code>AssocItemList</code>, but not sure how to attach one node within another</p>",
        "id": 235059358,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618738865
    },
    {
        "content": "<p>ohh, now seeing <code>Impl::with_assoc_item_list</code> which returns another <code>Impl</code></p>",
        "id": 235059541,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618739059
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/get.20a.20module.20from.20a.20.60self.60.20param/near/235056613\">said</a>:</p>\n<blockquote>\n<p>it's... not a weird special case behavior though? if you have <code>impl S</code>, it's an impl for <code>S</code>, not <code>&amp;S</code>. Removing the references automatically would be the weird special case</p>\n</blockquote>\n<p>Right, I remembered this wrong, was thinking of the type fingerprints ignoring references</p>",
        "id": 235060028,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618739590
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts</span> yeah, <code>with_assoc_item_list</code> would be the current way; there's also <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> 's new in-place editing infrastructure, with which you could have something like <code>impl.add(your_function)</code>, but you'd have to add that (there's not much there yet, you can see it in <code>edit_in_place.rs</code>)</p>",
        "id": 235060944,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1618740511
    },
    {
        "content": "<p>oh cool, thanks!</p>",
        "id": 235061139,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618740731
    },
    {
        "content": "<p>hehe yeah I'm a bit hesitant to use the edit_in_place stuff right now -- so think I'll stick with manually constructing the list, and maybe refactor later</p>",
        "id": 235061156,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618740758
    },
    {
        "content": "<p>(side note: getting real close to having all common paths covered on this assist!)</p>",
        "id": 235061166,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618740782
    },
    {
        "content": "<p>Is there a good way to go from a <code>hir::Type</code> to an <code>ast::Path</code> -- e.g. I'm trying to find out where a type has been defined so I can insert an impl block after it.</p>",
        "id": 235064879,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618744899
    },
    {
        "content": "<p>cc/ <span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span></p>",
        "id": 235064885,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618744912
    },
    {
        "content": "<p>I guess <code>Type::iterate_path_candidates</code> ?</p>",
        "id": 235064973,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618744995
    },
    {
        "content": "<p>That's a good question</p>",
        "id": 235064984,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618745017
    },
    {
        "content": "<p>I think iterate_path_candidates iterates the associated things of a type, so probably not what you want</p>",
        "id": 235064997,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618745041
    },
    {
        "content": "<p>Ye that iterates the associated items</p>",
        "id": 235065048,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618745062
    },
    {
        "content": "<p>ah right you can go with <code>ty.as_adt()</code> and i think then you can use <code>HasSource::source</code> on it like you did for <code>Impl</code> already to get the file and position of the item definition</p>",
        "id": 235065067,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618745096
    },
    {
        "content": "<p>Basically that gives you the <code>Adt</code> of the type, if it represents ones. So you have to use that on the reference stripped type again</p>",
        "id": 235065116,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618745158
    },
    {
        "content": "<p>cool, I'll give that a shot!</p>",
        "id": 235065183,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618745218
    },
    {
        "content": "<p>Ah you have to match on the adt, <code>HasSource</code> is implemented for <code>Union</code>, <code>Enum</code> and <code>Struct</code> separately since the ast types differ.</p>",
        "id": 235065263,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618745320
    },
    {
        "content": "<p>Realizing this is taking up a fair bit of time; going to call it quits for now. GitHub issue is here: <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8555#issuecomment-821979973\">https://github.com/rust-analyzer/rust-analyzer/issues/8555#issuecomment-821979973</a></p>",
        "id": 235066724,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618746992
    },
    {
        "content": "<p>Progress on this is here: <a href=\"https://github.com/rust-analyzer/rust-analyzer/compare/master...yoshuawuyts:whats-a-method-to-a-method-call\">https://github.com/rust-analyzer/rust-analyzer/compare/master...yoshuawuyts:whats-a-method-to-a-method-call</a></p>",
        "id": 235066740,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618747010
    },
    {
        "content": "<p>If someone would like to finish this up, please do!</p>",
        "id": 235066744,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618747025
    },
    {
        "content": "<p>heh, guess I came back to this</p>",
        "id": 235104030,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618781997
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span> what if we had an \"edit_in_place\" helper which could be: <code>edit_or_create_impl_block</code> for any <code>Type</code>.</p>",
        "id": 235104146,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618782084
    },
    {
        "content": "<p>Would be reasonable to add I believe</p>",
        "id": 235104283,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618782206
    },
    {
        "content": "<p>The question is how to handle receiving an edited impl vs receiving a fresh impl in the assists</p>",
        "id": 235104386,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618782305
    },
    {
        "content": "<p>Since one would updated an old impl and the other would require to add an new impl node</p>",
        "id": 235104409,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618782328
    },
    {
        "content": "<p>yeah - I don't think I fully understand inserting of nodes in the tree yet</p>",
        "id": 235104741,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618782647
    },
    {
        "content": "<p>inserting nodes is in general a bit weird, I don't even remember how we do it right now. Thats probably also the reason why a lot of assists just insert via text range positions. Ideally most of that will become simpler/nicer to look at though now that we have opt-in mutable syntex trees</p>",
        "id": 235104877,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618782794
    },
    {
        "content": "<p><em>nods</em></p>",
        "id": 235104973,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618782906
    },
    {
        "content": "<p>I guess I'm starting with the basics for this for now -- opened a new branch and adding two methods to <code>Impl</code>: <code>push_front</code> and <code>push_back</code></p>",
        "id": 235105167,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618783153
    },
    {
        "content": "<p>just to get the hang of mutable immutable trees</p>",
        "id": 235105177,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618783178
    },
    {
        "content": "<p>is there like, any reason why an <code>Impl</code> may not have an <code>AssocItemList</code>?</p>",
        "id": 235105228,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618783206
    },
    {
        "content": "<p>To accommodate for incomplete syntax trees</p>",
        "id": 235105369,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618783326
    },
    {
        "content": "<p>syntax errors and the like can cause that</p>",
        "id": 235105379,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618783338
    },
    {
        "content": "<p>I don't think there's much point in having no list vs. an empty list though</p>",
        "id": 235105429,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618783394
    },
    {
        "content": "<p>if the user was to only type <code>impl Foo</code> we'd get an <code>Impl</code> node that doesnt have an <code>AssocItemList</code>  for example</p>",
        "id": 235105447,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618783402
    },
    {
        "content": "<p>an empty list has braces though, no list does not</p>",
        "id": 235105459,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618783425
    },
    {
        "content": "<p>since the braces belong the <code>AssocItemlist</code></p>",
        "id": 235105509,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618783446
    },
    {
        "content": "<p>ah, gotcha!</p>",
        "id": 235105527,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618783464
    },
    {
        "content": "<p>oh btw, rough outline still -- but if this is right I think this will turn out real nice to work with!</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">ast</span>::<span class=\"n\">Impl</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Push a node to the front of the impl block.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">push_front</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">adt</span>: <span class=\"nc\">ast</span>::<span class=\"n\">Adt</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">l_curly</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">assoc_item_list</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">l_curly_token</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">position</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Position</span>::<span class=\"n\">after</span><span class=\"p\">(</span><span class=\"n\">l_curly</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ted</span>::<span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">adt</span><span class=\"p\">.</span><span class=\"n\">syntax</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 235105545,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618783501
    },
    {
        "content": "<p>I imagine you are taking inspiration from whats already implemented for other things in <code>edit_in_place</code> right? Thats gonna be nice to have for sure</p>",
        "id": 235105627,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618783565
    },
    {
        "content": "<p>heh, yeah a little bit ^^ -- like you said there's really not much</p>",
        "id": 235105655,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618783609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300586\">Lukas Wirth</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/get.20a.20module.20from.20a.20.60self.60.20param/near/235105509\">said</a>:</p>\n<blockquote>\n<p>since the braces belong the <code>AssocItemlist</code></p>\n</blockquote>\n<p>ah okay, then it makes sense</p>",
        "id": 235105668,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618783626
    },
    {
        "content": "<p>hmmm, what if we had like a \"heal\" method for the various AST types?</p>",
        "id": 235105698,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618783682
    },
    {
        "content": "<p>e.g. a quick in-place edit that would fill out missing curlies, tokens, etc.</p>",
        "id": 235105747,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618783700
    },
    {
        "content": "<p>could be one way to get rid of the unwraps we have above</p>",
        "id": 235105789,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618783734
    },
    {
        "content": "<p>(but maybe that's over-abstracting right now haha)</p>",
        "id": 235105804,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618783766
    },
    {
        "content": "<p>I feel like thats too abstract ye</p>",
        "id": 235105860,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618783812
    },
    {
        "content": "<p>haha yeahh</p>",
        "id": 235105882,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618783837
    },
    {
        "content": "<p>for that unwrap up there you could maybe instead have an inplace edit function for <code>get_or_create_assoc_item_list</code></p>",
        "id": 235105891,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618783845
    },
    {
        "content": "<p>similar to <code>GenericParamsOwnerEdit::get_or_create_where_clause</code></p>",
        "id": 235105913,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618783878
    },
    {
        "content": "<p>Though matklad would certainly know better here given he has the grande vision of of this api <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> especially as I havent dug into it yet myself</p>",
        "id": 235105967,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618783927
    },
    {
        "content": "<p>aside from porting one small assist over</p>",
        "id": 235105972,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618783933
    },
    {
        "content": "<p>Okay, breaking this up into a few smaller steps. First PR out: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/8568\">https://github.com/rust-analyzer/rust-analyzer/pull/8568</a></p>",
        "id": 235107634,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618785887
    },
    {
        "content": "<p>I'll take a proper look tomorrow but one thing I saw is that you are pushing <code>Adt</code>s as items into the impl. That doesn't seem right.</p>",
        "id": 235108614,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618786911
    },
    {
        "content": "<p>You want to push <code>AssocItem</code>s in there</p>",
        "id": 235108679,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618786949
    },
    {
        "content": "<p>gotcha</p>",
        "id": 235108860,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618787089
    },
    {
        "content": "<p>yeah, think it's bed time for me as well -- let's pick this back up again tomorrow ^^</p>",
        "id": 235108997,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618787249
    },
    {
        "content": "<p>thanks!</p>",
        "id": 235108998,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1618787251
    }
]