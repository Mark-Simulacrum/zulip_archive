[
    {
        "content": "<p>Hello all!  I have a question about rust-analyzer with coc.vim.  I've got it setup and working correctly as far as I can see (things like tab completion and go-to definition are working well), but I'm stuck trying to get it to report errors.   Does anyone know if this is supported at the moment, and if so, is any special config needed?</p>",
        "id": 169727167,
        "sender_full_name": "Andrew Chin (eminence)",
        "timestamp": 1562350849
    },
    {
        "content": "<p>We just don't report a ton of errors at the moment: only syntax errors and <em>some</em> semnatic errors, like a missing field in a struct literal</p>",
        "id": 169727397,
        "sender_full_name": "matklad",
        "timestamp": 1562351096
    },
    {
        "content": "<p>the best way to get the full set of errors is using <code>cargo watch</code></p>",
        "id": 169727415,
        "sender_full_name": "matklad",
        "timestamp": 1562351109
    },
    {
        "content": "<p>ahh, ok.   well that answers my question then.  thanks!</p>",
        "id": 169727493,
        "sender_full_name": "Andrew Chin (eminence)",
        "timestamp": 1562351192
    },
    {
        "content": "<p>Do you get syntax errors though?</p>",
        "id": 169727848,
        "sender_full_name": "matklad",
        "timestamp": 1562351601
    },
    {
        "content": "<p>no, i didn't seem to get those either</p>",
        "id": 169728074,
        "sender_full_name": "Andrew Chin (eminence)",
        "timestamp": 1562351858
    },
    {
        "content": "<p>hmm, well now that i try it again, i do see syntax errors reported</p>",
        "id": 169728264,
        "sender_full_name": "Andrew Chin (eminence)",
        "timestamp": 1562352045
    },
    {
        "content": "<p>and i confirm that i do see errors on missing struct fields.</p>",
        "id": 169728356,
        "sender_full_name": "Andrew Chin (eminence)",
        "timestamp": 1562352171
    },
    {
        "content": "<p>so it seems like it's all working correctly</p>",
        "id": 169728363,
        "sender_full_name": "Andrew Chin (eminence)",
        "timestamp": 1562352183
    },
    {
        "content": "<p>this is pretty cool!</p>",
        "id": 169728469,
        "sender_full_name": "Andrew Chin (eminence)",
        "timestamp": 1562352299
    },
    {
        "content": "<p>Hi guys, I am trying to look into <a href=\"https://github.com/autozimu/LanguageClient-neovim/issues/848\" target=\"_blank\" title=\"https://github.com/autozimu/LanguageClient-neovim/issues/848\">https://github.com/autozimu/LanguageClient-neovim/issues/848</a> but the first problem I encountered is that I don't know how to setup all the moving bits and pieces together for productive debugging. Let me explain a bit : it is a complicated setup of editor (nvim), language client plugin, and language server. Problems can potentially happen in any of the three main components. It is not clear for me what is the most effective way of monitoring the communication between server and client? Does anybody have experience of setting dev environment for fast and efficient dev-test cycles with rust analyzer?  Any advice, even most general, is appreciated!</p>",
        "id": 170502717,
        "sender_full_name": "Ihor Antonov",
        "timestamp": 1562719296
    },
    {
        "content": "<p>For VS Code, the thing that really helps is client-side logging. VS Code shows the trace of all LSP messages, as well as any additional stderr from the server</p>",
        "id": 170523454,
        "sender_full_name": "matklad",
        "timestamp": 1562748720
    },
    {
        "content": "<p>I think setting up something like this for VIM would be wise</p>",
        "id": 170523500,
        "sender_full_name": "matklad",
        "timestamp": 1562748738
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> </p>\n<blockquote>\n<p>We just don't report a ton of errors at the moment: only syntax errors and <em>some</em> semantic errors, like a missing field in a struct literal</p>\n</blockquote>\n<p>I have noticed that RLS reports a lot of errors (I'd say everything that cargo shows). Is that because RLS has cargo \"embedded\"? For obvious reasons running cargo watch on the side is not super convenient. Is there a plan for <em>ra</em> to report all errors and what is the planned architecture?</p>",
        "id": 170569135,
        "sender_full_name": "Ihor Antonov",
        "timestamp": 1562784965
    },
    {
        "content": "<blockquote>\n<p>Hello all!  I have a question about rust-analyzer with coc.vim.  I've got it setup and working correctly as far as I can see (things like tab completion and go-to definition are working well), but I'm stuck trying to get it to report errors.   Does anyone know if this is supported at the moment, and if so, is any special config needed?</p>\n</blockquote>\n<p>do you get a freeze and further 30s timeout after using jump to definition?</p>",
        "id": 170687462,
        "sender_full_name": "qmx",
        "timestamp": 1562895817
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> what's the policy for things like vim-integration problems? Should we file gh issues too? Just discuss them here?</p>",
        "id": 170687521,
        "sender_full_name": "qmx",
        "timestamp": 1562895900
    },
    {
        "content": "<p>It probably makes sense to file issues, yeah. Looking into the problems would also help ;) Neither me nor Florian are using vim :(</p>",
        "id": 170700889,
        "sender_full_name": "matklad",
        "timestamp": 1562916194
    },
    {
        "content": "<blockquote>\n<p>For obvious reasons running cargo watch on the side is not super convenient. Is there a plan for ra to report all errors and what is the planned architecture?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"222587\">@Ihor Antonov</span>  For starters, we plan to just run <code>cargo watch</code>: that's simple and is actually faster than RLS. Currently this is implemented in VS Code on the client side. We plan to move <code>cargo watch</code> management to the language server</p>",
        "id": 170700983,
        "sender_full_name": "matklad",
        "timestamp": 1562916342
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> </p>\n<blockquote>\n<blockquote>\n<p>For obvious reasons running cargo watch on the side is not super convenient. Is there a plan for ra to report all errors and what is the planned architecture?</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"222587\">Ihor Antonov</span>  For starters, we plan to just run <code>cargo watch</code>: that's simple and is actually faster than RLS. Currently this is implemented in VS Code on the client side. We plan to move <code>cargo watch</code> management to the language server</p>\n</blockquote>\n<p>So does this mean that RA will run <code>cargo watch</code> as a child process and then bubble up errors to the editor in form of LSP diagnostics?</p>",
        "id": 170713929,
        "sender_full_name": "Ihor Antonov",
        "timestamp": 1562930477
    },
    {
        "content": "<p>More or less yes. Most likely though, we will be calling <code>cargo</code> as a subprocess, not <code>cargo watch</code>, and that we might also ask it to produce save-analysis data, in addition to just diagnostics</p>",
        "id": 170714000,
        "sender_full_name": "matklad",
        "timestamp": 1562930552
    },
    {
        "content": "<p>to clarify, the end game here is absolutely to just produce all errors on the fly from withing rust-analyze itself, using a salsa-based incremental compiler. We are very far from that at the moment though, so leveraging <code>cargo check</code> seems like a good idea in the meantime</p>",
        "id": 170714041,
        "sender_full_name": "matklad",
        "timestamp": 1562930629
    },
    {
        "content": "<p>I agree and I like it, it follows Unix philosophy</p>",
        "id": 170714755,
        "sender_full_name": "Ihor Antonov",
        "timestamp": 1562931467
    },
    {
        "content": "<p>Thanks for the clarifications</p>",
        "id": 170714759,
        "sender_full_name": "Ihor Antonov",
        "timestamp": 1562931476
    },
    {
        "content": "<p>I'm having some trouble figuring out how to enable cargo watch integration with rust-analyzer. This is already available right? I'm using coc.nvim and tried</p>\n<p>```{<br>\n    \"languageserver\": {<br>\n        \"rust\": {<br>\n            \"command\": \"ra_lsp_server\",<br>\n            \"filetypes\": [\"rust\"],<br>\n            \"rootPatterns\": [\"Cargo.toml\"]<br>\n        }<br>\n    },<br>\n    \"rust-analyzer.enableCargoWatchOnStartup\": \"ask\"<br>\n}</p>\n<div class=\"codehilite\"><pre><span></span>\n</pre></div>",
        "id": 173456492,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1566072562
    },
    {
        "content": "<p>but nothing seems to happen, I've tried using vscode and it will give me a prompt to enable cargo watch, but after clicking yes nothing visibly happens</p>",
        "id": 173456504,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1566072595
    },
    {
        "content": "<p>running cargo watch independently seems to work well</p>",
        "id": 173456547,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1566072603
    },
    {
        "content": "<p>I've also tried \"enabled\" instead of \"ask\"</p>",
        "id": 173457159,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1566073655
    },
    {
        "content": "<p>i think the settings listed on <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/2bac1bdf174a053f0727e982f0f92d068ef3c208/docs/user/README.md#settings\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/2bac1bdf174a053f0727e982f0f92d068ef3c208/docs/user/README.md#settings\">https://github.com/rust-analyzer/rust-analyzer/blob/2bac1bdf174a053f0727e982f0f92d068ef3c208/docs/user/README.md#settings</a> are only for the vscode ext. from what i can tell cargo-watch run completely separate to ra_lsp_server</p>",
        "id": 173458981,
        "sender_full_name": "Pascal",
        "timestamp": 1566076771
    },
    {
        "content": "<p>Ooh, sad face</p>",
        "id": 173459472,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1566077748
    },
    {
        "content": "<p>maybe you can make a cargo-watch vim extension based on this impl? <a href=\"https://github.com/rust-analyzer/rust-analyzer/tree/2bac1bdf174a053f0727e982f0f92d068ef3c208/editors/code/src/utils/diagnostics\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/tree/2bac1bdf174a053f0727e982f0f92d068ef3c208/editors/code/src/utils/diagnostics\">https://github.com/rust-analyzer/rust-analyzer/tree/2bac1bdf174a053f0727e982f0f92d068ef3c208/editors/code/src/utils/diagnostics</a></p>",
        "id": 173494012,
        "sender_full_name": "Pascal",
        "timestamp": 1566147473
    },
    {
        "content": "<p>I was going to set up ale-vim to just run cargo for me on save because that composes well with coc.nvim + rust-analyzer</p>",
        "id": 173563738,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1566236847
    },
    {
        "content": "<p>a vim extension for cargo watch would eventually be deprecated anyways right? My understanding is that ra-lsp will eventually have an incremental compiler built in</p>",
        "id": 173563830,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1566236898
    },
    {
        "content": "<p>Anyone know how to make <a href=\"https://github.com/autozimu/LanguageClient-neovim\" title=\"https://github.com/autozimu/LanguageClient-neovim\">https://github.com/autozimu/LanguageClient-neovim</a> work with the rust-analyzer.additionalOutDirs key?</p>",
        "id": 193402845,
        "sender_full_name": "simlay",
        "timestamp": 1586401990
    },
    {
        "content": "<p>hmm, looks like \"rust-analyzer.cargoFeatures.loadOutDirsFromCheck\": true</p>",
        "id": 193404079,
        "sender_full_name": "simlay",
        "timestamp": 1586403720
    },
    {
        "content": "<p>Well, after reading a bunch of the neovim client's docs, the file to modify is .vim/settings.json in your project directory but you can change that if you want</p>",
        "id": 193404138,
        "sender_full_name": "simlay",
        "timestamp": 1586403790
    },
    {
        "content": "<p>You'll need <code>let g:LanguageClient_loadSettings = 1</code> in your vimrc as well.</p>",
        "id": 193404147,
        "sender_full_name": "simlay",
        "timestamp": 1586403810
    },
    {
        "content": "<p>My actual goal is to get expansions for the <code>include!(concat!(env!(\"OUT_DIR\"), \"/foo.rs\"))</code> pattern.</p>",
        "id": 193404205,
        "sender_full_name": "simlay",
        "timestamp": 1586403868
    },
    {
        "content": "<p>I can't seem to get that working</p>",
        "id": 193404280,
        "sender_full_name": "simlay",
        "timestamp": 1586403962
    },
    {
        "content": "<p>One fear I have is that because I'm targeting x86_64-apple-ios, it doesn't expand</p>",
        "id": 193404321,
        "sender_full_name": "simlay",
        "timestamp": 1586403980
    },
    {
        "content": "<blockquote>\n<p>One fear I have is that because I'm targeting x86_64-apple-ios, it doesn't expand</p>\n</blockquote>\n<p>Hm, interesting! I haven't tried rust-analyzer in cross-compilation scenarios, it <em>might</em> be that you need to pass <code>--target</code> flag somehow, but I am not sure if we can override it in any case</p>",
        "id": 193413658,
        "sender_full_name": "matklad",
        "timestamp": 1586416053
    },
    {
        "content": "<p>I <em>think</em> that for loadOutDirs functionality we are running cargo for host</p>",
        "id": 193413684,
        "sender_full_name": "matklad",
        "timestamp": 1586416074
    },
    {
        "content": "<p>If you happen to feel like diving into the source code, the out dir loading happens here: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/080c983498afcac3eb54028af5c9f8bfe7f2c826/crates/ra_project_model/src/cargo_workspace.rs#L275-L319\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/080c983498afcac3eb54028af5c9f8bfe7f2c826/crates/ra_project_model/src/cargo_workspace.rs#L275-L319\">https://github.com/rust-analyzer/rust-analyzer/blob/080c983498afcac3eb54028af5c9f8bfe7f2c826/crates/ra_project_model/src/cargo_workspace.rs#L275-L319</a></p>",
        "id": 193413758,
        "sender_full_name": "matklad",
        "timestamp": 1586416142
    },
    {
        "content": "<p>Yeah, so I've got the default target for this project set in <code>.cargo/config</code> as x86_64-apple-ios. I've verified that this works by doing a <code>cargo clean</code> and then opening vim (which opens rust-analyzer), which then I assume runs <code>cargo check</code> through the <code>load_extern_resources</code> function.</p>",
        "id": 193489174,
        "sender_full_name": "simlay",
        "timestamp": 1586456267
    },
    {
        "content": "<p>At which point my version of <code>include!(concat!(env!(\"OUT_DIR\"), \"/foo.rs\"))</code> is built but I can't seem to jump to definitions in it.</p>",
        "id": 193501683,
        "sender_full_name": "simlay",
        "timestamp": 1586462351
    },
    {
        "content": "<p>Jump to definitions for include! macro is not implemented yet but completion should works.</p>",
        "id": 193508711,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1586466085
    },
    {
        "content": "<p>ah, that's good to know.</p>",
        "id": 193513189,
        "sender_full_name": "simlay",
        "timestamp": 1586468617
    }
]