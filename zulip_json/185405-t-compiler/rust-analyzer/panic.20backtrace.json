[
    {
        "content": "<p>I just realized that I never get a backtrace for panics in the server logs even though I have the <code>RUST_BACKTRACE</code> env var in the <code>extraEnv</code> settings set to <code>full</code>. Is there something else I have to do for this to work with RA?</p>",
        "id": 248989529,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1628607018
    },
    {
        "content": "<p>Hm, it works for me... Perhaps <code>debug = true</code> is needed on windows?</p>",
        "id": 248992812,
        "sender_full_name": "matklad",
        "timestamp": 1628608546
    },
    {
        "content": "<p>I don't think so, weirdly enough RA_LOG and other stuff works just fine <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 248995335,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1628609774
    },
    {
        "content": "<p>Okay maybe it does</p>",
        "id": 248996109,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1628610128
    },
    {
        "content": "<p>manually build server via xtask install gives me backtraces <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span><br>\nActually no that shouldn't make a difference since it doesn't use different build flags does it</p>",
        "id": 248996135,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1628610143
    },
    {
        "content": "<p>Just to make sure that I'm not misunderstanding but this should just work for the distributed server binaries right?</p>",
        "id": 248997607,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1628610839
    },
    {
        "content": "<p>Okay now I'm really confused, a build from <code>xtask dist</code> also just displays a backtrace even without setting the flag</p>",
        "id": 249000025,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1628611997
    },
    {
        "content": "<p>what is the build which <em>doesn</em> have backtrace?</p>",
        "id": 249001167,
        "sender_full_name": "matklad",
        "timestamp": 1628612489
    },
    {
        "content": "<p>The latest nightly</p>",
        "id": 249001195,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1628612505
    },
    {
        "content": "<p>the one from marketplace? Probably has to do with pdb files being split</p>",
        "id": 249001198,
        "sender_full_name": "matklad",
        "timestamp": 1628612506
    },
    {
        "content": "<p>(split debug info)</p>",
        "id": 249001211,
        "sender_full_name": "matklad",
        "timestamp": 1628612511
    },
    {
        "content": "<p>yes the marketplace one</p>",
        "id": 249001218,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1628612518
    },
    {
        "content": "<p>all other manually build ones work</p>",
        "id": 249001221,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1628612519
    },
    {
        "content": "<p>Also just realized we unconditionally set RUST_BACKTRACE in the server/client already</p>",
        "id": 249001319,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1628612556
    },
    {
        "content": "<p>Coming back to this, is there some way for us to fix this? That is backtraces not working on windows build artifacts downloaded from github. It's quite annoying not having them when using these. I unfortunately don't know about this matter much either.</p>",
        "id": 254689836,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632483511
    },
    {
        "content": "<p>Could we set <code>CARGO_PROFILE_RELEASE_DEBUG=1</code> when producing Windows artifacts?</p>",
        "id": 254690747,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1632484121
    },
    {
        "content": "<p>(not sure if that's the right env var)</p>",
        "id": 254690772,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1632484134
    },
    {
        "content": "<p>Are we missing the PDB?</p>",
        "id": 254691190,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632484386
    },
    {
        "content": "<p>I don't know, any way to check that?</p>",
        "id": 254696903,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632487337
    },
    {
        "content": "<p>Actually, <code>xtask install</code> doesn't copy the PDB, so maybe it's not needed?</p>",
        "id": 254697071,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632487432
    },
    {
        "content": "<p>I think a compiled exe remembers only the path of the pdb on windows, so moving the pdb file would break it in that case</p>",
        "id": 254697921,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632487845
    },
    {
        "content": "<p>Ooh, yeah</p>",
        "id": 254698158,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632487950
    },
    {
        "content": "<p>But I just tested it, removing the pdb keeps backtraces for the builds so thats not the problem either</p>",
        "id": 254698196,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632487969
    },
    {
        "content": "<p>Well, try removing the PDB and check if stack traces stop working. If they do, we need to package those</p>",
        "id": 254698197,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632487970
    },
    {
        "content": "<p>Ah.</p>",
        "id": 254698209,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632487976
    },
    {
        "content": "<p>Try <code>cargo clean -p rust-analyzer</code> too, just in case.</p>",
        "id": 254698224,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632487985
    },
    {
        "content": "<p>Nope still a backtrace</p>",
        "id": 254698304,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632488032
    },
    {
        "content": "<p>that seems weird, I thought symbols are stored only in the PDB?</p>",
        "id": 254699017,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1632488374
    },
    {
        "content": "<p>Maybe windows is playing tricks with me and is caching something so it keeps working without on self build ones</p>",
        "id": 254699063,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632488396
    },
    {
        "content": "<p>By the way, is it me, or did we start having an inordinate amount of panics in the past couple of weeks?</p>",
        "id": 254699787,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632488667
    },
    {
        "content": "<p>It feels like everything panics, completion, hover</p>",
        "id": 254699810,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632488678
    },
    {
        "content": "<p>Im only running into the nameres one usually caused through hovering(or rather codelenses in hovers), and that weird line-index panic</p>",
        "id": 254699911,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632488725
    },
    {
        "content": "<p>but ye we do panic quite a bit currently due to those</p>",
        "id": 254699940,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632488739
    },
    {
        "content": "<p>some people are apparently seeing the nameres/itemtree panic <em>a lot</em>, which is a bit worrisome</p>",
        "id": 254700064,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1632488778
    },
    {
        "content": "<p>because I still don't even have the slightest idea about what could cause it or how to reproduce it</p>",
        "id": 254700142,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1632488810
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/panic.20backtrace/near/254700064\">said</a>:</p>\n<blockquote>\n<p>some people are apparently seeing the nameres/itemtree panic <em>a lot</em>, which is a bit worrisome</p>\n</blockquote>\n<p>Thing is once it triggers it triggers always(until the crate graph has been exhausted I believe). Last time I had it every hover triggered it and each hover used a different crate, which went on until it stopped panicking at some point</p>",
        "id": 254700251,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632488854
    },
    {
        "content": "<p>wut</p>",
        "id": 254700889,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1632489098
    },
    {
        "content": "<p>Yeah, I see that one quite often, too</p>",
        "id": 254700901,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632489105
    },
    {
        "content": "<p>do we store <code>CrateId</code>s somewhere, without using the <code>crate_graph</code> query in the query that computes the result?</p>",
        "id": 254701078,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1632489161
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/10084#issuecomment-917726328\">https://github.com/rust-analyzer/rust-analyzer/issues/10084#issuecomment-917726328</a></p>",
        "id": 254701195,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632489208
    },
    {
        "content": "<p>i attached a gist here with all the panics I've caused that way</p>",
        "id": 254701220,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632489219
    },
    {
        "content": "<p>until it stopped</p>",
        "id": 254701223,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632489222
    },
    {
        "content": "<p>And as written there as well, once the issue occurred on <code>Arc</code> for me, hovering any type or trait from std triggered it</p>",
        "id": 254701694,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632489389
    },
    {
        "content": "<p>Well I guess windows is playing pranks on me, judging from <a href=\"https://doc.rust-lang.org/rustc/codegen-options/index.html#split-debuginfo\">https://doc.rust-lang.org/rustc/codegen-options/index.html#split-debuginfo</a> without a pdb file you shouldn't get backtraces on msvc right?</p>",
        "id": 254702509,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632489720
    },
    {
        "content": "<p>Well, the debug info is in the PDB, but maybe it can still print a partial stack trace without it? Not sure.</p>",
        "id": 254702956,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632489895
    },
    {
        "content": "<p>Probably but then I don't see why this doesn;t work with the CI builds <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 254702989,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632489913
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/87481\">https://github.com/rust-lang/rust/issues/87481</a></p>",
        "id": 254703656,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632490196
    },
    {
        "content": "<p>looks like this might be related</p>",
        "id": 254703670,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632490201
    },
    {
        "content": "<p>Given that we unconditionally set the env var to short in the server</p>",
        "id": 254703879,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632490276
    },
    {
        "content": "<p>Ooh</p>",
        "id": 254704132,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632490378
    },
    {
        "content": "<p>Well will check next nightly, server will allow to overwrite the env var then. If I see that right in the issue it should still work with full</p>",
        "id": 254705670,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632490988
    },
    {
        "content": "<p>Maybe we should switch from gz to zip and include the PDB on Windows</p>",
        "id": 254705740,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632491018
    },
    {
        "content": "<p>Somebody was also complaining that Windows has a working tar, but not gunzip</p>",
        "id": 254705783,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632491033
    },
    {
        "content": "<p>it has tar? huh</p>",
        "id": 254705988,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1632491111
    },
    {
        "content": "<p>using zip sounds reasonable too though</p>",
        "id": 254706011,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1632491121
    },
    {
        "content": "<p>Yeah, a weird version, not GNU tar</p>",
        "id": 254706032,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632491129
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/rust-analyzer/src/bin/main.rs#L95\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/rust-analyzer/src/bin/main.rs#L95</a></p>\n<p>Note that this line overrides any value of <code>RUST_BACKTRACE</code> set by the user. The implications are that:</p>\n<ul>\n<li>users (me included) get confused when the panic message suggest setting <code>RUST_BACKTRACE=full</code> even when it's already set</li>\n<li>windows users have no way to get a backtrace (they could get one slightly worse if they could set <code>RUST_BACKTRACE=full</code>)</li>\n</ul>\n<p>IMO rust-analyzer shouldn't override <code>RUST_BACKTRACE</code> if it's already set.</p>",
        "id": 254711681,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1632493144
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/10332\">https://github.com/rust-analyzer/rust-analyzer/pull/10332</a></p>",
        "id": 254711919,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632493226
    },
    {
        "content": "<p>Well good news is, I do get a backtrace now if set to <code>full</code>, bad news is all the frames are <code>&lt;unknown&gt;</code> <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 255045566,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632748538
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/4aJMla0T8yuF0kxo0X5VIvYr/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/4aJMla0T8yuF0kxo0X5VIvYr/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/4aJMla0T8yuF0kxo0X5VIvYr/image.png\"></a></div>",
        "id": 255045603,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632748551
    },
    {
        "content": "<p>Just switch to Linux :D</p>",
        "id": 255046412,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632748872
    },
    {
        "content": "<p>I tried to in the past but always had screen tearing problems with several distros <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 255046755,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632749014
    },
    {
        "content": "<p>So I assume we need to ship the pdb file after all</p>",
        "id": 255046783,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632749027
    },
    {
        "content": "<p>Yeah, probably</p>",
        "id": 255046852,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632749043
    },
    {
        "content": "<p>And we might want to switch to <code>full</code> backtraces for windows since <code>short</code> is currently broken on windows it seems</p>",
        "id": 255046876,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632749052
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300586\">Lukas Wirth</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/panic.20backtrace/near/255046755\">said</a>:</p>\n<blockquote>\n<p>I tried to in the past but always had screen tearing problems with several distros <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>\n</blockquote>\n<p>Wayland works pretty well these days, and the next Nvidia drivers should play much nicer with it.</p>",
        "id": 255047501,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632749298
    },
    {
        "content": "<p>NixOS plasma doesn't support wayland full out of the box <del>and both nixos and plasma required for sane linux desktop</del></p>",
        "id": 255048577,
        "sender_full_name": "matklad",
        "timestamp": 1632749709
    },
    {
        "content": "<p>Is NixOS that distro where <del>nothing works</del> most things don't work unless you spend half a day fiddling with them?</p>",
        "id": 255049754,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632750152
    },
    {
        "content": "<p>no that's every distro</p>",
        "id": 255050005,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1632750249
    },
    {
        "content": "<p>NixOS is Rust, in the sense of getting hangover first: you spend two months WTF at the alien language, but if you got it working, it is guaranteed to not break in the future. In terms of ease of upkeep, for me personally NixOS is much better than all of Arch, Windows, MacOS.</p>",
        "id": 255050307,
        "sender_full_name": "matklad",
        "timestamp": 1632750379
    },
    {
        "content": "<p>Of course, you can get best of both worlds by installing nix package manager into arch system</p>",
        "id": 255050434,
        "sender_full_name": "matklad",
        "timestamp": 1632750437
    },
    {
        "content": "<p>the NixOS command line tooling is extremely bad though, very much not Rust in that respect</p>",
        "id": 255050468,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1632750453
    },
    {
        "content": "<p>I have an Arch install that's about school age and it only stopped booting about twice (for the same reason), which is still better than what I've had on other OSes. But of course, YMMV.</p>",
        "id": 255050686,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632750544
    },
    {
        "content": "<p>Yeah, NixOS is also git. You can always <code>reset --hard </code> out of the mess the CLI creates</p>",
        "id": 255050717,
        "sender_full_name": "matklad",
        "timestamp": 1632750558
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/panic.20backtrace/near/255050686\">said</a>:</p>\n<blockquote>\n<p>I have an Arch install that's about school age and it only stopped booting about twice (for the same reason), which is still better than what I've had on other OSes. But of course, YMMV.</p>\n</blockquote>\n<p>And that was a really cool failure mode -- I wonder if Nix would have helped here: a random AUR package wanted to create <code>/lib64</code> (which is normally a symlink to <code>/usr/lib64</code>) and removed it when uninstalled. Then on the next kernel upgrade <code>mkinitcpio</code> couldn't find <code>/lib64/ld-linux-x86-64.so.2</code> and didn't include it in the image, breaking <code>init</code>.</p>",
        "id": 255051554,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632750892
    },
    {
        "content": "<p>fun!</p>",
        "id": 255051636,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1632750923
    },
    {
        "content": "<p>in theory NixOS lets you choose the older, working configuration in the bootloader, so it might have helped</p>",
        "id": 255051663,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1632750938
    },
    {
        "content": "<p>Or dunno, maybe it shouldn't randomly remove files from <code>filesystem</code> when uninstalling something else</p>",
        "id": 255051940,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632751027
    },
    {
        "content": "<p>yeah, seems bad that pacman just overwrote a file owned by another package</p>",
        "id": 255052243,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1632751135
    },
    {
        "content": "<p>but maybe the package did that in a post-install script or something?</p>",
        "id": 255052272,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1632751145
    },
    {
        "content": "<p>Opened an issue for this for now <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/10371\">https://github.com/rust-analyzer/rust-analyzer/issues/10371</a></p>",
        "id": 255073137,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632758398
    },
    {
        "content": "<p>Windows backtraces now work with our distributed binaries <a href=\"/user_uploads/4715/NkksV_8oBgWoyxtgfBd4Oo4O/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/NkksV_8oBgWoyxtgfBd4Oo4O/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/NkksV_8oBgWoyxtgfBd4Oo4O/image.png\"></a></div>",
        "id": 265679045,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1640089428
    },
    {
        "content": "<p>Well, that's not really useful, is it? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 265679665,
        "sender_full_name": "Laurențiu",
        "timestamp": 1640089831
    },
    {
        "content": "<p>line numbers would help, but that alone I think is a big improvement already</p>",
        "id": 265680184,
        "sender_full_name": "matklad",
        "timestamp": 1640090234
    },
    {
        "content": "<p>Note this is a small backtrace, let me check a full one</p>",
        "id": 265680529,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1640090456
    },
    {
        "content": "<p>Hm ye a full one doesnt really give more value <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;index out of bounds: the len is 1216 but the index is 1225&#39;, crates\\ide_db\\src\\line_index.rs:106:9\nstack backtrace:\n   0:     0x7ff7e3625989 - std::backtrace_rs::backtrace::dbghelp::trace\n                               at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c\\/library\\std\\src\\..\\..\\backtrace\\src\\backtrace\\dbghelp.rs:98\n   1:     0x7ff7e3625989 - std::backtrace_rs::backtrace::trace_unsynchronized\n                               at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c\\/library\\std\\src\\..\\..\\backtrace\\src\\backtrace\\mod.rs:66\n   2:     0x7ff7e3625989 - std::sys_common::backtrace::_print_fmt\n                               at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c\\/library\\std\\src\\sys_common\\backtrace.rs:67\n   3:     0x7ff7e3625989 - std::sys_common::backtrace::_print::impl$0::fmt\n                               at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c\\/library\\std\\src\\sys_common\\backtrace.rs:46\n   4:     0x7ff7e263b6ea - core::fmt::write\n                               at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c\\/library\\core\\src\\fmt\\mod.rs:1163\n   5:     0x7ff7e361ed78 - std::io::Write::write_fmt&lt;std::sys::windows::stdio::Stderr&gt;\n                               at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c\\/library\\std\\src\\io\\mod.rs:1696\n   6:     0x7ff7e3629352 - std::sys_common::backtrace::_print\n                               at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c\\/library\\std\\src\\sys_common\\backtrace.rs:49\n   7:     0x7ff7e3629352 - std::sys_common::backtrace::print\n                               at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c\\/library\\std\\src\\sys_common\\backtrace.rs:36\n   8:     0x7ff7e3629352 - std::panicking::default_hook::closure$1\n                               at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c\\/library\\std\\src\\panicking.rs:210\n   9:     0x7ff7e3628df2 - std::panicking::default_hook\n                               at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c\\/library\\std\\src\\panicking.rs:227\n  10:     0x7ff7e363785f - std::thread::local::LocalKey&lt;T&gt;::with::heb856dac08ec33dc\n  11:     0x7ff7e3629a57 - std::panicking::rust_panic_with_hook\n                               at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c\\/library\\std\\src\\panicking.rs:628\n  12:     0x7ff7e3629585 - std::panicking::begin_panic_handler::closure$0\n                               at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c\\/library\\std\\src\\panicking.rs:521\n  13:     0x7ff7e3626bb7 - std::sys_common::backtrace::__rust_end_short_backtrace&lt;std::panicking::begin_panic_handler::closure$0,never$&gt;\n                               at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c\\/library\\std\\src\\sys_common\\backtrace.rs:139\n  14:     0x7ff7e36294ef - std::panicking::begin_panic_handler\n                               at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c\\/library\\std\\src\\panicking.rs:517\n  15:     0x7ff7e36e9240 - core::panicking::panic_fmt\n                               at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c\\/library\\core\\src\\panicking.rs:100\n  16:     0x7ff7e36e9207 - core::panicking::panic_bounds_check\n                               at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c\\/library\\core\\src\\panicking.rs:76\n  17:     0x7ff7e34403d5 - rust_analyzer::from_proto::text_range::h09e0fbf88a8cf0a3\n  18:     0x7ff7e34ef4bc - rust_analyzer::handlers::handle_code_action::h880f9415417de21b\n  19:     0x7ff7e3338ec9 - std::panicking::try::h9c16c01663e9fa26\n  20:     0x7ff7e33777be - &lt;F as threadpool::FnBox&gt;::call_box::h53a788545aae2141\n  21:     0x7ff7e368d8fe - std::sys_common::backtrace::__rust_begin_short_backtrace::h47f5af48b4247456\n  22:     0x7ff7e368e4f8 - std::thread::Builder::spawn::h8836438f7fae766c\n  23:     0x7ff7e363237c - alloc::boxed::impl$44::call_once\n                               at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c\\library\\alloc\\src\\boxed.rs:1691\n  24:     0x7ff7e363237c - alloc::boxed::impl$44::call_once\n                               at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c\\library\\alloc\\src\\boxed.rs:1691\n  25:     0x7ff7e363237c - std::sys::windows::thread::impl$0::new::thread_start\n                               at /rustc/f1edd0429582dd29cccacaf50fd134b05593bd9c\\/library\\std\\src\\sys\\windows\\thread.rs:58\n  26:     0x7ffa7e107034 - BaseThreadInitThunk\n  27:     0x7ffa7e2a2651 - RtlUserThreadStart\n</code></pre></div>",
        "id": 265680797,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1640090650
    }
]