[
    {
        "content": "<p>It seems to me that <code>support::child</code> will stop working correctly when something can contain multiple children of the same type. For example, <code>LetStmt</code> can contain several children that are <code>MacroCall</code>s: The pattern, the ascribed type, and the initializing expression.</p>\n<p>It seems to work <em>today</em>, only because neither <code>Pat</code> nor <code>Type</code> have a <code>MacroCall</code> variant, only <code>Expr</code> does.</p>\n<p>Is that right? Why has this not been a problem so far?</p>",
        "id": 223128046,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610981069
    },
    {
        "content": "<p>This analysis is correct!</p>",
        "id": 223128523,
        "sender_full_name": "matklad",
        "timestamp": 1610981312
    },
    {
        "content": "<p>I think we fix it manually in several select cases {for example, for impl trait/type}</p>",
        "id": 223128610,
        "sender_full_name": "matklad",
        "timestamp": 1610981356
    },
    {
        "content": "<p>I wonder if perhaps we should nest macro calls into specific nodes? <code>MacroItem</code>, <code>MacroStmt</code>, <code>MacroExpr</code></p>",
        "id": 223128740,
        "sender_full_name": "matklad",
        "timestamp": 1610981429
    },
    {
        "content": "<p>Ah, we already do that for <code>Pat</code>, so I'll go for that</p>",
        "id": 223130064,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610982037
    }
]