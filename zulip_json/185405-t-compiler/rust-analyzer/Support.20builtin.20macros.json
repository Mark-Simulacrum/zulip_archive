[
    {
        "content": "<p>I am starting to work on adding builtin macros. (e.g: <code>concat!</code>) . My initial thought is to create each custom <code>MacroDef</code> for each builtin macros and registers these in the beginning of module collecting phase. Basically changing MacroDef as following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">MacroDefId</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">MacroDefSource</span><span class=\"p\">(</span><span class=\"n\">MacroDefSource</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">MacroDefBuiltin</span><span class=\"p\">(...)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// `MacroDefSource` is the normal MacroDef</span>\n<span class=\"cp\">#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">MacroDefSource</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">krate</span>: <span class=\"nc\">CrateId</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">ast_id</span>: <span class=\"nc\">AstId</span><span class=\"o\">&lt;</span><span class=\"n\">ast</span>::<span class=\"n\">MacroCall</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Another option is to add a new type <code>ModuleDef::BultinMacro</code> and handle it separately (Although I hadn't figured out the whole path for how to do it)</p>\n<p>Do anyone have any idea?</p>",
        "id": 179901934,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1572929763
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> After studying how rustc implement <code>concat!</code> macro, I finally understand what you mean \"include! and concat! seem to use \"eager expansion\" of some sorts.\". </p>\n<p>For example: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">a</span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">concat</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"o\">!</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"o\">!</span><span class=\"p\">()));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>When we try to expand <code>concat!</code>, we have to expand <code>foo!()</code> and <code>bar!()</code> first. And this order is different from what normal mbe is handled.</p>",
        "id": 179946332,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1572969866
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> yeah, I think we need to extend <code>MacroDefId</code>. I imagine, in the end it might want to look like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">enum</span> <span class=\"nc\">MacroDefId</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">DeclarativeMacro</span><span class=\"p\">(</span><span class=\"n\">DeclarativeMacro</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">ProcMacro</span><span class=\"p\">(</span><span class=\"n\">ProcMacro</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">BuiltinMacro</span><span class=\"p\">(</span><span class=\"n\">BuiltinMacro</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I think it makes sense to just hard-code bulitin macrod right now for simplicity (so, don't add them to <code>ModuleDef</code>), but, long term, I think nameres should be aware of such macros.</p>",
        "id": 180016506,
        "sender_full_name": "matklad",
        "timestamp": 1573034008
    },
    {
        "content": "<p>And yeah, the hardest part about build-in macros is that they are not necessary restricted to <code>tt -&gt; tt</code> interface, and might do all sorts of weird call-backs into the compiler. I <em>hope</em> we can handle them clearly withing <code>hir_expand</code> framework, but we must brace ourselves for the worst just in case :)</p>",
        "id": 180016607,
        "sender_full_name": "matklad",
        "timestamp": 1573034105
    },
    {
        "content": "<p>I just checked, seem like there are only 2 builtin macros which use eagar expansion. So my first MVP will be implement <code>line!</code> macro first. It seem like not depending on anything complicated.</p>",
        "id": 180130180,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1573132486
    },
    {
        "content": "<p>Another question:, I found that for every builtin macro, An attribute <code>rustc_builtin_macro</code> must be used.  <a href=\"https://github.com/rust-lang/rust/blob/50f8aadd746ebc929a752e5ffb133936ee75c52f/src/libcore/macros.rs#L1121\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/50f8aadd746ebc929a752e5ffb133936ee75c52f/src/libcore/macros.rs#L1121\">link</a>. But I don't know it is a good idea depends on it to recognize the input path as bultin-macro because I don't know how stable it is. </p>\n<p>On the other hand, it simplifies the whole builtin macro name resolution alot; We could just mark the macro in name resolution phase as builtin, and handle it in <code>ModCollector</code>.</p>",
        "id": 180130185,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1573132493
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> that attribute is a relatively new <a href=\"https://github.com/rust-lang/rust/commit/cbcc7dd182b9bf67d664508b82284c5539ef8819#diff-a5a0682c18717c9e06e867e1cf2abeb8\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/cbcc7dd182b9bf67d664508b82284c5539ef8819#diff-a5a0682c18717c9e06e867e1cf2abeb8\">addition</a>, but I think we can rely on it</p>",
        "id": 180130299,
        "sender_full_name": "matklad",
        "timestamp": 1573132595
    },
    {
        "content": "<p>Even if it breaks later, we can just fix the code</p>",
        "id": 180130320,
        "sender_full_name": "matklad",
        "timestamp": 1573132608
    },
    {
        "content": "<p>I figure out how to do eager macro expansion in current infrastructure finally and implemented <code>concat!</code>. However I canâ€™t test it in whole def collection phase since thereâ€™s no way to expand it before <code>include!</code> is implemented. ðŸ™„</p>",
        "id": 180629066,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1573654283
    },
    {
        "content": "<p>hm..... Should we have dedicated macro expansion tests for built-in macros?</p>",
        "id": 180629211,
        "sender_full_name": "matklad",
        "timestamp": 1573654380
    },
    {
        "content": "<p>Yes, sure we should. However, the actual problem here is: To test the macro name resolution in <code>items</code> scope, we have to start with a macro which expand to <code>Macro::Items</code>, <code>concat</code> itself only expands to <code>expr</code>. Of course I can write a test for it without triggering eager expansion but it is not ideal.</p>",
        "id": 180637584,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1573659039
    },
    {
        "content": "<p>Hm, and I guess, we need name-resolution to write non-trivial test cases? </p>\n<p>Like, it seems like it should be possible to test macro expansion without nameres, in theory, but in practice you need name resolution for interesting test cases</p>",
        "id": 180637738,
        "sender_full_name": "matklad",
        "timestamp": 1573659134
    },
    {
        "content": "<blockquote>\n<p>Like, it seems like it should be possible to test macro expansion without nameres, in theory, but in practice you need name resolution for interesting test cases</p>\n</blockquote>\n<p>Yes, and FYI :  in <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/2244\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/2244\">#2244</a>, I added some <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/f3bc12b6fb2ecdd38a3814512d1acb86a3f32c04/crates/ra_hir_expand/src/builtin_macro.rs#L192\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/f3bc12b6fb2ecdd38a3814512d1acb86a3f32c04/crates/ra_hir_expand/src/builtin_macro.rs#L192\">trivial tests</a> without name resolutions.</p>",
        "id": 180795687,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1573782932
    },
    {
        "content": "<p>After that PR, I will work on <code>include!</code>, but I have some questions :</p>",
        "id": 180795955,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1573783319
    },
    {
        "content": "<ol>\n<li>If I understand correctly, currently the file loading is \"push\" model: It insert files at the beginning of project loading. However, how do I handle the following case (which exists in my other project):</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">font</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">include_bytes</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;DejaVuSans.ttf&quot;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]);</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I don't think we push all files in <code>SourceRoot</code>, right?</p>",
        "id": 180795962,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1573783322
    },
    {
        "content": "<ol start=\"2\">\n<li>Imagine to support something like this (<a href=\"https://github.com/intellij-rust/intellij-rust/pull/4542\" target=\"_blank\" title=\"https://github.com/intellij-rust/intellij-rust/pull/4542\">https://github.com/intellij-rust/intellij-rust/pull/4542</a>): <br>\nThe <code>HirFileId</code> of the expanded include! macro is <code>{MacroFile(MacroCallId(lib.rs:include!(concat(..)))}</code> . Note that we don't have the information of <code>hello.rs</code> in the chain of <code>HirFileId</code>. </li>\n</ol>\n<p>Any idea how to handle it correctly ?</p>",
        "id": 180796587,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1573784238
    },
    {
        "content": "<p>Yeah, the model is push-based. Specifically, rust-analyzer need to know that a file exists before reading it. I've spend about a week trying to transition to a fully-pull based model, but figured out that, ideally, we want a hybrid model.</p>\n<p>The <em>set</em> of files is push based, while the contents is pulled. The main reason for this is that, for file watching to be reliable, you need to scan for all files anyway. In particular, if you subscribe to a glob using watchman, it will immediately send all file paths to you as <em>modified</em>.</p>",
        "id": 180805405,
        "sender_full_name": "matklad",
        "timestamp": 1573797893
    },
    {
        "content": "<p>So, for <code>DejaVuSans.ttf</code>, the user will have to explicitly configure rust-analyzer to care about files with <code>.ttf</code> extension</p>",
        "id": 180805426,
        "sender_full_name": "matklad",
        "timestamp": 1573797942
    },
    {
        "content": "<ol start=\"2\">\n<li>My gut feeling that maybe we <em>shouldn't</em> create <code>{MacroFile(MacroCallId(lib.rs:include!(concat(..)))}</code>? Like, when we made <code>CallID</code> with <code>include!</code>, we already know that it is special. So perhaps we can expand it at that point and use <code>FilleId</code>?</li>\n</ol>",
        "id": 180805586,
        "sender_full_name": "matklad",
        "timestamp": 1573798157
    },
    {
        "content": "<blockquote>\n<p>My gut feeling that maybe we shouldn't create {MacroFile(MacroCallId(lib.rs:include!(concat(..)))}? Like, when we made CallID with include!, we already know that it is special. So perhaps we can expand it at that point and use FilleId? </p>\n</blockquote>\n<p>It is an interesting solution, let me try to implement it first and see if there is any problem. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 180809647,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1573803866
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>  I'm trying to implement the new eager expansion method, I have a question: As the new expanded syntax node is not belonged to any HirFileId, This <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/ebfba461123928363da55e75195d76314c51fa7e/crates/ra_syntax/src/ptr.rs#L20\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/ebfba461123928363da55e75195d76314c51fa7e/crates/ra_syntax/src/ptr.rs#L20\">line</a> of code basically must fail. How do I solve this ?</p>",
        "id": 180896435,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1573880573
    },
    {
        "content": "<p>(Deleted)</p>",
        "id": 180899204,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1573884843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> I think you souldn't create <code>SyntaxNodePtr</code>s into the eagarly expanded tokens at all</p>",
        "id": 180904409,
        "sender_full_name": "matklad",
        "timestamp": 1573895404
    },
    {
        "content": "<p>I didn't create it, but it is created by other place I didn't know ...I am tracing it now</p>",
        "id": 180904417,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1573895481
    },
    {
        "content": "<p>@maklad I am thinking how to handle builtin macro and eager macro in a general way, let me show some code first: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[derive(Debug, Clone, PartialEq, Eq, Hash)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">MacroCallLoc</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">def</span>: <span class=\"nc\">MacroDefId</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">ast_id</span>: <span class=\"nc\">AstId</span><span class=\"o\">&lt;</span><span class=\"n\">ast</span>::<span class=\"n\">MacroCall</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">ctx</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">MacroCallSiteCtxId</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(Debug, Clone, PartialEq, Eq, Hash)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">MacroCallSiteCtx</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">CurrentFile</span><span class=\"p\">(</span><span class=\"n\">FileId</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Eager</span><span class=\"p\">(</span><span class=\"n\">Arc</span><span class=\"o\">&lt;</span><span class=\"n\">tt</span>::<span class=\"n\">Subtree</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">MacroCallSiteCtxId</span><span class=\"p\">(</span><span class=\"n\">salsa</span>::<span class=\"n\">InternId</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>My reasoning of this change is, a lot of builtin macros depends on some kind of call site context, such as File Position, Name resolution, Error reporting data etc. If we think of macro expansion as pure token manipulation only, this kind of context should be provided outside of macro_expand. (For example, we COULD compute file position by using <code>MacroCallId::ast_id</code> inside <code>macro_expand</code>) .</p>",
        "id": 182085886,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1574923034
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> I would avoid add Context to as a query-parameter: it seems like it can be huge, and would be a bad fit for storage</p>",
        "id": 182091015,
        "sender_full_name": "matklad",
        "timestamp": 1574930374
    },
    {
        "content": "<p>INstead, I would do something like this:</p>\n<div class=\"codehilite\"><pre><span></span>trait AstDatabase {\n    #[salsa::inter]\n    fn intern_eager_expansion(tt: tt::Subtree) -&gt; EagerExpansionId\n}\n\nenum MacroCallId {\n    Lazy(our current id here)\n    Eager(EagerExpansionId)\n}\n</pre></div>",
        "id": 182091133,
        "sender_full_name": "matklad",
        "timestamp": 1574930491
    },
    {
        "content": "<p>That way, when you are processing some code and face an eager macro, you can expand it to token tree using whatever context you have on the stack, and then, to produce appropriate <code>HirFIleId</code> for source maps and such, you can intern the <strong>result</strong> of expanion into an id</p>",
        "id": 182091211,
        "sender_full_name": "matklad",
        "timestamp": 1574930563
    },
    {
        "content": "<p>Do you think we should move out the builtin macro expansion out of <code>macro_expand</code> such that:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// In ra_hir_expand/src/db.rs</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">TokenExpander</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">expand</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">db</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">AstDatabase</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">id</span>: <span class=\"nc\">MacroCallId</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">tt</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">tt</span>::<span class=\"n\">Subtree</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">tt</span>::<span class=\"n\">Subtree</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mbe</span>::<span class=\"n\">ExpandError</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Eager</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">lookup_eager</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">),</span><span class=\"w\">  </span><span class=\"c1\">// return it directly</span>\n<span class=\"w\">            </span><span class=\"n\">Lazy</span><span class=\"p\">(</span><span class=\"n\">rules</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">rules</span><span class=\"p\">.</span><span class=\"n\">expand</span><span class=\"p\">(</span><span class=\"n\">tt</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>And we expand the completed  <em>result</em>  of builtin macros as eager expansion at the call site ? For example, the eager id of <code>concat!(\"a\", \"b\")</code> is pointing to <code>\"ab\"</code> instead of<code> (\"a\",\"b\")</code> directly?</p>",
        "id": 182092024,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1574931446
    },
    {
        "content": "<blockquote>\n<p>For example, the eager id of concat!(\"a\", \"b\") is pointing to \"ab\" instead of (\"a\",\"b\") directly?</p>\n</blockquote>\n<p>I <em>think</em> this should work this way, but I can't explain why this would be better, so it might be actually worse. But I do feel that it's a better approach</p>",
        "id": 182092104,
        "sender_full_name": "matklad",
        "timestamp": 1574931541
    },
    {
        "content": "<blockquote>\n<p>Do you think we should move out the builtin macro expansion out of macro_expand such that:</p>\n</blockquote>\n<p>Heh, maybe! I <strong>know</strong> that we should provide a nice single entry-point for macro expansion (like we do for <code>Resolver</code>). Currently we do macro expansion in def collector and body::lower, which is not great, and when we support macros in types we will have to expand macros from various places in <code>hir_ty</code>. It's pretty bad that at the moment every macro expansion is basically \"do it yourself\". There's a nascent expander for expressions, but it is really not well thought out. </p>\n<p>We need to add a proper expander, that works in all contexts, deals with hygiene properly, and handles both eager and lazy macros. But I didn't have a chance yet to think how it's API should looks like. It probably should live in the <code>hir_expand</code> crate and get name resolution info via callback.</p>",
        "id": 182092377,
        "sender_full_name": "matklad",
        "timestamp": 1574931837
    },
    {
        "content": "<p>(oh, and it should handle derives (and maybe even cfg's ?) as well)</p>",
        "id": 182092426,
        "sender_full_name": "matklad",
        "timestamp": 1574931863
    },
    {
        "content": "<p>Yes, and one of key point I didn't think of before I implement <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/4946169a96f3d442f463724af481fdb760381ccb/crates/ra_hir/src/source_binder.rs#L546\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/4946169a96f3d442f463724af481fdb760381ccb/crates/ra_hir/src/source_binder.rs#L546\"><code>to_macro_file_kind</code></a>, we could know the final Node Kind a MacroCallId will expand without parent context. So in theory the whole macro_expand works could be self-contained.</p>",
        "id": 182093094,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1574932563
    },
    {
        "content": "<p>Since <a href=\"https://github.com/rust-lang/cargo/pull/7622\" target=\"_blank\" title=\"https://github.com/rust-lang/cargo/pull/7622\">https://github.com/rust-lang/cargo/pull/7622</a> is landed,  seem like it is possible to implement <code>env!</code> builtin macro now, right ?</p>",
        "id": 187010068,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1580405577
    },
    {
        "content": "<p>right!</p>",
        "id": 187010107,
        "sender_full_name": "matklad",
        "timestamp": 1580405628
    },
    {
        "content": "<p>And of course another roadblock is eager macro ..</p>",
        "id": 187010109,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1580405634
    },
    {
        "content": "<p>I remember there is a discussion about eager macro and salsa..</p>",
        "id": 187010185,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1580405681
    },
    {
        "content": "<p>which actually didn't happen. Still, It think the idea with just interning eager macro expansions would work</p>",
        "id": 187010227,
        "sender_full_name": "matklad",
        "timestamp": 1580405733
    },
    {
        "content": "<p>Okay !</p>",
        "id": 187010303,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1580405774
    },
    {
        "content": "<p>We add <code>EagerMaro(id)</code> variant to <code>MacroCallid</code>, and we add <code>#[salsa::inten] fn intern_eager_expansion(result: tt::Subtree) -&gt; EagerMacroId</code></p>",
        "id": 187010306,
        "sender_full_name": "matklad",
        "timestamp": 1580405779
    },
    {
        "content": "<p>If I remember correctly, Currently we have three places to resolve ast::MacroCall MacroCallId :</p>\n<ol>\n<li>Item collection phase</li>\n<li>Lowering body</li>\n<li>SourceAnalyzer</li>\n</ol>\n<p>Do we want to refactoring it to a single place first ? I did tried that but without success :(</p>",
        "id": 187010736,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1580406113
    },
    {
        "content": "<p>Yeah, creating a single expander would be helpful!</p>",
        "id": 187010870,
        "sender_full_name": "matklad",
        "timestamp": 1580406233
    },
    {
        "content": "<p>Let me try again, but recently there is some awkward situation in HK (the damn virus) and maybe it would a little bit slower :(</p>",
        "id": 187011452,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1580406548
    },
    {
        "content": "<p><span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> </p>\n<p>Be sure to keep yourself safe!</p>",
        "id": 187011523,
        "sender_full_name": "matklad",
        "timestamp": 1580406600
    },
    {
        "content": "<p>sure! thanks <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> !</p>",
        "id": 187011637,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1580406645
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\npub enum MacroCallId {\n    LazyMacro(LazyMacroId),\n    EagerMacro(EagerMacroId),\n}\n</pre></div>\n\n\n<p>I am not satisfied the name of <code>LazyMacro</code> ,  Would it be better if I name it to <code>OrdinaryMacro</code> instead ?</p>",
        "id": 189430188,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1583062463
    }
]