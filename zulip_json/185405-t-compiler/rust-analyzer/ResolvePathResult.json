[
    {
        "content": "<p>We have this struct:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">super</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">ResolvePathResult</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">super</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">resolved_def</span>: <span class=\"nc\">PerNs</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">super</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">segment_index</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">super</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">reached_fixedpoint</span>: <span class=\"nc\">ReachedFixedPoint</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">super</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">krate</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">CrateId</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>...and I'm wondering what the fields other than <code>resolved_def</code> mean exactly. The different namespaces in <code>resolved_def</code> could come from different crates, so having only one <code>krate</code> field seems insufficient, and basically all the remaining fields also seem like they would only make sense for each individual namespace, not the whole result. What am I missing here?</p>",
        "id": 223560543,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611258141
    },
    {
        "content": "<p><code>reached_fixedpoint</code> already takes into account all the namespaces, I think -- we've only reached a fixpoint if all namespaces can't change. <code>segment_index</code> is also for all namespaces because you don't resolve the path in each namespace separately -- all the intermediate results are only in the types namespace anyway</p>",
        "id": 223573228,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1611264657
    },
    {
        "content": "<p>as for <code>krate</code>... I don't think it's necessarily the crate that the defs originally come from</p>",
        "id": 223573538,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1611264823
    },
    {
        "content": "<p>I think the only use for it is to detect that if we have an import from another crate, it'll always already be fully resolved . So it doesn't really matter that it's inaccurate</p>",
        "id": 223573739,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1611264923
    },
    {
        "content": "<p>maybe it could be refactored to just use <code>reached_fixedpoint</code> though?</p>",
        "id": 223573780,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1611264942
    },
    {
        "content": "<p>I guess I'd try seeing what happens if we don't do that check</p>",
        "id": 223573898,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1611265006
    },
    {
        "content": "<p>I see, that makes sense</p>",
        "id": 223577298,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611266679
    }
]