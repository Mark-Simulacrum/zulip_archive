[
    {
        "content": "<p>I'm having a somewhat hard time to understand the code in <code>SyntaxRewriter</code>, but it seems to me that if the rewriter has exactly one replacement, <code>rewrite_root</code> will return the to-be-replaced node, but then calling <code>rewrite</code> with that node won't do anything because that only looks at children. Am I misunderstanding this or is this a bug in <code>SyntaxRewriter</code>?</p>\n<p>(<code>AssistBuilder::rewrite</code> uses it in this way and doesn't seem to work correctly because of it)</p>",
        "id": 200773993,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592065717
    },
    {
        "content": "<p>Indeed looks like a bug!</p>",
        "id": 200774151,
        "sender_full_name": "matklad",
        "timestamp": 1592065945
    },
    {
        "content": "<p>Not suuuper trivial to fix though -- the obvious solution \"allow <code>rewrite</code> to rewrite the node itself\" doesn't work API wise, as rewriting might turn a single node into a bunch of node</p>",
        "id": 200774177,
        "sender_full_name": "matklad",
        "timestamp": 1592066022
    },
    {
        "content": "<p>So, I think <code>rewrite_root</code> needs to look at lca of \"parents\" of replacements</p>",
        "id": 200774216,
        "sender_full_name": "matklad",
        "timestamp": 1592066044
    },
    {
        "content": "<p>Hmm, yeah</p>",
        "id": 200774250,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592066127
    },
    {
        "content": "<p>Calling <code>.parent().unwrap()</code> on the result of <code>least_common_ancestor</code> seems to return the same node again</p>",
        "id": 200774296,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592066180
    },
    {
        "content": "<p>Oh, because the closure never gets invoked when there's only one replacement</p>",
        "id": 200774306,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592066217
    },
    {
        "content": "<p>seems weird -- parent never returns the node itself</p>",
        "id": 200774311,
        "sender_full_name": "matklad",
        "timestamp": 1592066228
    },
    {
        "content": "<p>right!</p>",
        "id": 200774316,
        "sender_full_name": "matklad",
        "timestamp": 1592066240
    },
    {
        "content": "<p>I think you need <code>.map(|it| it.parent().unwrap_or(it))</code> <em>before</em> the fold</p>",
        "id": 200774324,
        "sender_full_name": "matklad",
        "timestamp": 1592066261
    },
    {
        "content": "<p>Seems to work, thanks!</p>",
        "id": 200774463,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592066422
    }
]