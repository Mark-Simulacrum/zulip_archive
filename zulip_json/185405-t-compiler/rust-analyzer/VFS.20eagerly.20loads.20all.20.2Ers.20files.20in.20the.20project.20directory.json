[
    {
        "content": "<p>is there a way to tell RA not to look in hidden folders?</p>",
        "id": 223152667,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610995228
    },
    {
        "content": "<p><a href=\"http://docs.rs\">docs.rs</a> really does need those folders to run</p>",
        "id": 223152672,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610995233
    },
    {
        "content": "<p>they aren't in cargo.toml, rust-analyzer is picking them up on its own somehow</p>",
        "id": 223152699,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610995255
    },
    {
        "content": "<p>I see it's in <code>workspace.exclude</code> already, perhaps we should respect that</p>",
        "id": 223152823,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610995335
    },
    {
        "content": "<p>we had to patch tera to work around this, it was taking multiple minutes to startup because <code>globwalk</code> would recurse into ignored directories</p>",
        "id": 223152985,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610995464
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/docs.rs/pull/861/files#r446669961\">https://github.com/rust-lang/docs.rs/pull/861/files#r446669961</a></p>",
        "id": 223153180,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610995596
    },
    {
        "content": "<p>We have support for that internally<code>Directories::exclude</code> , but the plumbing is missing</p>",
        "id": 223153184,
        "sender_full_name": "matklad",
        "timestamp": 1610995599
    },
    {
        "content": "<p>I'm interested in fixing this if you can give me some instructions on getting started :)</p>",
        "id": 223153685,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610995940
    },
    {
        "content": "<p>(looking)</p>",
        "id": 223154044,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610996201
    },
    {
        "content": "<p>/me has all today free because of the holiday</p>",
        "id": 223154069,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610996230
    },
    {
        "content": "<p>I think you'll have to add a workspace-wide <code>exclude</code> field to <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/08efb8a94360735f505699021eaa901464c76f4a/crates/project_model/src/cargo_workspace.rs#L35-L39\"><code>CargoWorkspace</code></a>.</p>\n<p>Then <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/08efb8a94360735f505699021eaa901464c76f4a/crates/rust-analyzer/src/reload.rs#L327-L348\">this code</a> needs to be changed to append the workspace's <code>exclude</code> list to <code>dirs.exclude</code>.</p>",
        "id": 223154215,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610996340
    },
    {
        "content": "<p>Some conversion of path types might be needed</p>",
        "id": 223154230,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610996353
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/running.20RA.20on.20docs.2Ers/near/223154215\">said</a>:</p>\n<blockquote>\n<p>I think you'll have to add a workspace-wide <code>exclude</code> field to <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/08efb8a94360735f505699021eaa901464c76f4a/crates/project_model/src/cargo_workspace.rs#L35-L39\"><code>CargoWorkspace</code></a>.</p>\n<p>Then <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/08efb8a94360735f505699021eaa901464c76f4a/crates/rust-analyzer/src/reload.rs#L327-L348\">this code</a> needs to be changed to append the workspace's <code>exclude</code> list to <code>dirs.exclude</code>.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> I'm confused - isn't that already happening here? <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/08efb8a94360735f505699021eaa901464c76f4a/crates/rust-analyzer/src/reload.rs#L335\">https://github.com/rust-analyzer/rust-analyzer/blob/08efb8a94360735f505699021eaa901464c76f4a/crates/rust-analyzer/src/reload.rs#L335</a><br>\nOr is <code>root.exclude</code> different from the workspace?</p>",
        "id": 223168622,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611008237
    },
    {
        "content": "<p><code>root</code> is from <code>.to_roots()</code></p>",
        "id": 223168688,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611008298
    },
    {
        "content": "<p>It's per-package I think</p>",
        "id": 223168703,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611008321
    },
    {
        "content": "<p>oh I see, it doesn't include the workspace itself</p>",
        "id": 223168712,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611008329
    },
    {
        "content": "<p>ok, makes sense</p>",
        "id": 223168715,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611008332
    },
    {
        "content": "<p>should I handle this for JSON projects too? Or only <code>ProjectWorkspace::Cargo</code>?</p>",
        "id": 223168734,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611008358
    },
    {
        "content": "<p>just Cargo should be fine for now</p>",
        "id": 223168810,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611008417
    },
    {
        "content": "<p>rust-project.json can already specify per-package include and exclude lists</p>",
        "id": 223168823,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611008436
    },
    {
        "content": "<p>so external build systems could just use that</p>",
        "id": 223168830,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611008449
    },
    {
        "content": "<p>should I use PathBuf or AbsPathBuf for the exclude?</p>",
        "id": 223168951,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611008566
    },
    {
        "content": "<p><code>AbsPathBuf</code> seems to make sense, the other code paths also use that</p>",
        "id": 223169087,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611008702
    },
    {
        "content": "<p>hmm, I'm confused how I actually get this info from cargo_metadata - I don't see <code>exclude</code> on either <a href=\"https://docs.rs/cargo_metadata/0.12.3/cargo_metadata/struct.Metadata.html\"><code>Metadata</code></a> or <a href=\"https://docs.rs/cargo_metadata/0.12.3/cargo_metadata/struct.Package.html\"><code>Package</code></a></p>",
        "id": 223169189,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611008777
    },
    {
        "content": "<p>I do see <code>workspace_members</code>, maybe I could convince RA to use that directly?</p>",
        "id": 223169204,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611008806
    },
    {
        "content": "<p>hmm, perhaps Cargo doesn't output the relevant data?</p>",
        "id": 223169233,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611008852
    },
    {
        "content": "<p>let me start by seeing what packages cargo-metadata is actually picking up</p>",
        "id": 223169240,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611008862
    },
    {
        "content": "<p>I suppose it is only meant to help Cargo with workspace discovery</p>",
        "id": 223169243,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611008864
    },
    {
        "content": "<p>cargo metadata should respect those settings already</p>",
        "id": 223169250,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611008880
    },
    {
        "content": "<p>ok something is very fishy because <code>cargo metadata</code> reports 412 packages whether <code>.rustwide</code> exists or not</p>",
        "id": 223169345,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611008951
    },
    {
        "content": "<p>so somehow RA is getting packages from a source other than cargo metadata</p>",
        "id": 223169358,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611008965
    },
    {
        "content": "<p>I wish I could diff the memory usage between two RA processes somehow :/</p>",
        "id": 223169418,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611009007
    },
    {
        "content": "<p><code>diff /proc/&lt;pid1&gt;/mem /proc/pid2/mem</code></p>",
        "id": 223169443,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611009061
    },
    {
        "content": "<p>I think the problem here is that r-a subscribes to every directory containing a Cargo project in the workspace</p>",
        "id": 223169548,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611009125
    },
    {
        "content": "<p>Because we want to listen to file changes, and load all .rs files into the VFS</p>",
        "id": 223169557,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611009149
    },
    {
        "content": "<p>cargo metadata doesn't tell us which <em>files</em> are part of the projects (it can't)</p>",
        "id": 223169578,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611009182
    },
    {
        "content": "<p>so we have to assume that all .rs files in the project dir are part of it</p>",
        "id": 223169601,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611009201
    },
    {
        "content": "<p>and even that isn't enough, since it fails to account for complex <code>#[path]</code> usage, which makes <code>std::arch</code> fail to resolve</p>",
        "id": 223169619,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611009229
    },
    {
        "content": "<p>can you get it by walking the <code>mod</code> tree maybe?</p>",
        "id": 223169676,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611009256
    },
    {
        "content": "<p>maybe I should read <code>docs/dev</code></p>",
        "id": 223169687,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611009281
    },
    {
        "content": "<p>yeah, I'd love to be able to just start with <code>lib.rs</code> and gradually discover files, but I think that conflicts with other goals</p>",
        "id": 223169735,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611009331
    },
    {
        "content": "<p>huh this might also mean that <code>include_str!</code>/<code>include_bytes!</code> with any non-<code>.rs</code> file won't ever work</p>",
        "id": 223169811,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611009377
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/running.20RA.20on.20docs.2Ers/near/223169811\">said</a>:</p>\n<blockquote>\n<p>huh this might also mean that <code>include_str!</code>/<code>include_bytes!</code> with any non-<code>.rs</code> file won't ever work</p>\n</blockquote>\n<p>without walking the mod tree, you mean?</p>",
        "id": 223169833,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611009398
    },
    {
        "content": "<p>with the current setup, yes</p>",
        "id": 223169842,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611009410
    },
    {
        "content": "<p>let me try this :D</p>",
        "id": 223169852,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611009421
    },
    {
        "content": "<p>hmm actually I don't know how to test - RA knows that include_str is always a string even if it doesn't know the contents</p>",
        "id": 223169942,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611009525
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/eOexOy9J_iCG2DuftqUO74ga/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/eOexOy9J_iCG2DuftqUO74ga/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/eOexOy9J_iCG2DuftqUO74ga/image.png\"></a></div>",
        "id": 223169953,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611009549
    },
    {
        "content": "<p>so what I'm hearing is this requires major architectural changes</p>",
        "id": 223170060,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611009661
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> :D</p>",
        "id": 223170066,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611009666
    },
    {
        "content": "<p>the actual contents don't matter much in practice, which is good for us</p>",
        "id": 223170071,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611009674
    },
    {
        "content": "<p>many built-in derives are just dummys</p>",
        "id": 223170089,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611009697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/running.20RA.20on.20docs.2Ers/near/223170066\">said</a>:</p>\n<blockquote>\n<p>hey <span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> :D</p>\n</blockquote>\n<p>how do you feel about walking about the mod tree instead of picking up every .rs file in the project directory? <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/running.20RA.20on.20docs.2Ers/near/223169548\">https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/running.20RA.20on.20docs.2Ers/near/223169548</a></p>",
        "id": 223170103,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611009711
    },
    {
        "content": "<p>hmm I wonder if rustc could tell us which files are part of the project</p>",
        "id": 223170152,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611009733
    },
    {
        "content": "<p>isn't there <code>--emit=dep-info</code> or something?</p>",
        "id": 223170160,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611009743
    },
    {
        "content": "<p>oh well look at that:</p>\n<div class=\"codehilite\"><pre><span></span><code>&gt; rustc --emit=dep-info src/main.rs\n&gt; cat main.d\nmain.d: src/main.rs src/x.txt\n\nsrc/main.rs:\nsrc/x.txt:\n</code></pre></div>",
        "id": 223170192,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611009793
    },
    {
        "content": "<p>seems annoying to parse though</p>",
        "id": 223170284,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611009878
    },
    {
        "content": "<p>how would you load files from within compiler crates though?</p>",
        "id": 223170289,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611009883
    },
    {
        "content": "<p>you can't just load from disk, you might have to ask the client</p>",
        "id": 223170298,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611009893
    },
    {
        "content": "<p>I don't follow</p>",
        "id": 223170305,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611009902
    },
    {
        "content": "<p>when would a file not be on disk?</p>",
        "id": 223170312,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611009909
    },
    {
        "content": "<p>when it's being edited</p>",
        "id": 223170317,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611009917
    },
    {
        "content": "<p>rust-analyzer has to look at the in-editor file, not what's on disk</p>",
        "id": 223170326,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611009931
    },
    {
        "content": "<p>oh oof</p>",
        "id": 223170328,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611009936
    },
    {
        "content": "<p>can rust-analyzer associate the in-memory file with the filename somehow?</p>",
        "id": 223170335,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611009944
    },
    {
        "content": "<p>I was thinking it'd be possible to basically \"register interest\" in a path from the compiler crates, and fetch those files from outside salsa</p>",
        "id": 223170397,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611009987
    },
    {
        "content": "<p>And feed their contents back in via <code>FileTextQuery</code>, like we do now</p>",
        "id": 223170409,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611010002
    },
    {
        "content": "<p>However, this is cursed</p>",
        "id": 223170422,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611010010
    },
    {
        "content": "<p>what makes that cursed?</p>",
        "id": 223170445,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611010029
    },
    {
        "content": "<p>At least it doesn't feel right to me to use an external fixed-point loop to drive the whole compiler</p>",
        "id": 223170450,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611010033
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> that's how mod trees work though</p>",
        "id": 223170469,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611010053
    },
    {
        "content": "<p>it'd probably also be slow</p>",
        "id": 223170473,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611010057
    },
    {
        "content": "<p>theoretically I think you could have them go on forever if you have</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// x.rs</span>\n<span class=\"cp\">#[path = </span><span class=\"s\">\"x.rs\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"k\">mod</span> <span class=\"nn\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>or something</p>",
        "id": 223170494,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611010077
    },
    {
        "content": "<p>yup:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: circular modules: recurse.rs -&gt; recurse.rs\n --&gt; recurse.rs:3:1\n  |\n3 | mod x;\n  | ^^^^^^\n</code></pre></div>",
        "id": 223170564,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611010120
    },
    {
        "content": "<p>here's another idea: rather than reading every .rs file into memory, could you just register that it exists? and load the contents lazily?</p>",
        "id": 223170688,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611010212
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/running.20RA.20on.20docs.2Ers/near/223170397\">said</a>:</p>\n<blockquote>\n<p>I was thinking it'd be possible to basically \"register interest\" in a path from the compiler crates, and fetch those files from outside salsa</p>\n</blockquote>\n<p>that's what I meant to say with this</p>",
        "id": 223170755,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611010304
    },
    {
        "content": "<p>neat, that sounds easier than redesigning the whole abstraction</p>",
        "id": 223170801,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611010327
    },
    {
        "content": "<p>where does the actual file loading happen?</p>",
        "id": 223170808,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611010338
    },
    {
        "content": "<p><code>vfs</code>?</p>",
        "id": 223170818,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611010356
    },
    {
        "content": "<p>oh no the contents is already an Option, that means we'll have <code>Option&lt;Option&gt;</code> <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 223170921,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611010483
    },
    {
        "content": "<p><code>vfs::loader::Handle</code> is the file loading interface</p>",
        "id": 223171142,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611010728
    },
    {
        "content": "<p>ok, <code>load_sync</code> is the thing actually reading files off disk</p>",
        "id": 223171149,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611010741
    },
    {
        "content": "<p>well, the one for on-disk files at least</p>",
        "id": 223171153,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611010746
    },
    {
        "content": "<p>which is implemented in <code>vfs-notify</code></p>",
        "id": 223171155,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611010748
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">mem_docs</span><span class=\"p\">.</span><span class=\"n\">contains_key</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">vfs_path</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">contents</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">loader</span><span class=\"p\">.</span><span class=\"n\">handle</span><span class=\"p\">.</span><span class=\"n\">load_sync</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">vfs</span><span class=\"p\">.</span><span class=\"n\">set_file_contents</span><span class=\"p\">(</span><span class=\"n\">vfs_path</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">contents</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>does this <em>need</em> to call <code>set_file_contents</code> immediately?</p>",
        "id": 223171244,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611010814
    },
    {
        "content": "<p>hmm that's actually called in not many places</p>\n<div class=\"codehilite\"><pre><span></span><code>crates/vfs/src/lib.rs\n5://! [`set_file_contents`]. All changes to VFS are logged, and can be retrieved via\n35://! [`set_file_contents`]: Vfs::set_file_contents\n155:    pub fn set_file_contents(&amp;mut self, path: VfsPath, contents: Option&lt;Vec&lt;u8&gt;&gt;) -&gt; bool {\n\ncrates/rust-analyzer/src/reload.rs\n250:                    vfs.set_file_contents(vfs_path.clone(), contents);\n\ncrates/rust-analyzer/src/main_loop.rs\n275:                                    vfs.set_file_contents(path, contents);\n536:                        .set_file_contents(path, Some(params.text_document.text.into_bytes()));\n568:                    vfs.set_file_contents(path.clone(), Some(text.into_bytes()));\n\ncrates/rust-analyzer/src/cli/load_cargo.rs\n45:        vfs.set_file_contents(path.clone(), contents);\n77:                    vfs.set_file_contents(path.into(), contents);\n</code></pre></div>",
        "id": 223171299,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611010885
    },
    {
        "content": "<p>so my idea is that instead of calling <code>set_file_contents</code> immediately, I add a new <code>set_file_state</code> which only stores whether the file exists or not</p>",
        "id": 223171382,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611010947
    },
    {
        "content": "<p>and then <code>get</code> and <code>get_mut</code> load it lazily</p>",
        "id": 223171387,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611010954
    },
    {
        "content": "<p>that does require <code>get</code> to take <code>&amp;mut self</code> though</p>",
        "id": 223171395,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611010961
    },
    {
        "content": "<p>or to do <code>RefCell</code> dances</p>",
        "id": 223171407,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611010970
    },
    {
        "content": "<p>hmm, running <code>vfs.iter()</code> requires all the files to be loaded eagerly so RA can tell whether they exist or not</p>",
        "id": 223172232,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611011838
    },
    {
        "content": "<p>why does .iter() need to skip deleted files? I see it's only used by <code>FileSetConfig::partition</code></p>",
        "id": 223172245,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611011866
    },
    {
        "content": "<p>wow your test suite runs <em>fast</em></p>",
        "id": 223172458,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611012111
    },
    {
        "content": "<p>this is super impressive</p>",
        "id": 223172466,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611012116
    },
    {
        "content": "<p>wish me luck <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/crates/vfs/src/lib.rs b/crates/vfs/src/lib.rs</span>\n<span class=\"gh\">index f84b9a7b5..d85288780 100644</span>\n<span class=\"gd\">--- a/crates/vfs/src/lib.rs</span>\n<span class=\"gi\">+++ b/crates/vfs/src/lib.rs</span>\n<span class=\"gu\">@@ -153,7 +153,7 @@ impl Vfs {</span>\n     pub fn iter(&amp;self) -&gt; impl Iterator&lt;Item = (FileId, &amp;VfsPath)&gt; + '_ {\n         (0..self.data.len())\n             .map(|it| FileId(it as u32))\n<span class=\"gd\">-            .filter(move |&amp;file_id| self.get(file_id).exists())</span>\n<span class=\"gi\">+            //.filter(move |&amp;file_id| self.get(file_id).exists())</span>\n             .map(move |file_id| {\n                 let path = self.interner.lookup(file_id);\n                 (file_id, path)\n</code></pre></div>",
        "id": 223172545,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611012194
    },
    {
        "content": "<p>oh hmm it actually passes the test suite with that change ??</p>",
        "id": 223172686,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611012341
    },
    {
        "content": "<p>now I'm even more confused</p>",
        "id": 223172688,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611012348
    },
    {
        "content": "<p>ok so I have another question: <code>file_id</code> also filters for deleted files. But files can be deleted at any time, right? So doesn't the caller still need to handle the case where the file was deleted after calling <code>file_id</code>?</p>",
        "id": 223172959,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611012643
    },
    {
        "content": "<p>/me goes to delete that call too</p>",
        "id": 223172969,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611012654
    },
    {
        "content": "<p>/me is worried that there are just no tests for deleted files</p>",
        "id": 223173056,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611012729
    },
    {
        "content": "<p><code>&gt; fd test | xargs rg delete</code> seems to support this conclusion :(</p>",
        "id": 223173079,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611012775
    },
    {
        "content": "<p>I'm not too sure on this but I believe that file-related testing isn't too prevalent in the codebase</p>",
        "id": 223173354,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1611013080
    },
    {
        "content": "<p>At least the VFS crate doesn't seem to have a lot of tests <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 223173411,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1611013107
    },
    {
        "content": "<p>does RA have integration tests? or just unit tests?</p>",
        "id": 223173446,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611013173
    },
    {
        "content": "<p>I'm not sure tbh, not that I can immediately think of. But I also haven't peeked at all the crates properly yet so far.</p>",
        "id": 223173714,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1611013467
    },
    {
        "content": "<p>Ah there seem to be a few in the main rust-analyzer crate(in <code>crates\\rust-analyzer\\tests\\rust-analyzer</code>)</p>",
        "id": 223173728,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1611013488
    },
    {
        "content": "<p>ok and the last obstacle is somehow I need to get a <code>loader</code> into <code>Vfs</code></p>",
        "id": 223174406,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611014253
    },
    {
        "content": "<p>my first idea was to move it from <code>GlobalState</code> to the Vfs struct, and make it public so it's still accessible, but that breaks because <code>Handle</code> is only in the top-level rust-analyzer crate:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0412]: cannot find type `Handle` in this scope\n  --&gt; crates/vfs/src/lib.rs:69:17\n   |\n69 |     pub loader: Handle&lt;Box&lt;dyn loader::Handle&gt;, Receiver&lt;loader::Message&gt;&gt;,\n   |                 ^^^^^^ not found in this scope\n</code></pre></div>\n<p>(<code>loader::Handle</code> is something different)</p>",
        "id": 223174492,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611014337
    },
    {
        "content": "<p>hmm I guess I don't need the whole <code>loader</code>, just the handle</p>",
        "id": 223174517,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611014397
    },
    {
        "content": "<p>oh boooo the borrow checker doesn't understand the borrow is released if I return early</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0499]: cannot borrow `*self` as mutable more than once at a time\n   --&gt; crates/vfs/src/lib.rs:240:13\n    |\n233 |     fn get_or_load(&amp;mut self, file_id: FileId) -&gt; &amp;mut FileContents {\n    |                    - let&#39;s call the lifetime of this reference `&#39;1`\n234 |         if let Some(contents) = &amp;mut self.data[file_id.0 as usize] {\n    |                                      --------- first mutable borrow occurs here\n235 |             return contents;\n    |                    -------- returning this value requires that `self.data` is borrowed for `&#39;1`\n...\n240 |             self.set_id_contents(file_id, contents);\n    |             ^^^^ second mutable borrow occurs here\n</code></pre></div>",
        "id": 223174926,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611014813
    },
    {
        "content": "<p>polonius when will you save us</p>",
        "id": 223175026,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1611014923
    },
    {
        "content": "<p>Iirc there is a comment somewhere in RA that annotates a double hashmap index cause of the same borrowck problem <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 223175054,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1611014992
    },
    {
        "content": "<p>well the difference is this has to do computation in the middle :/ so it can't hold the same borrow the whole time</p>",
        "id": 223175104,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611015016
    },
    {
        "content": "<p>(the computation being <code>set_id_contents</code>)</p>",
        "id": 223175108,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611015027
    },
    {
        "content": "<p>wtf why does this work in playground <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=08b05ad9f9d41d93d75b57b1285f4309\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=08b05ad9f9d41d93d75b57b1285f4309</a></p>",
        "id": 223175124,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611015046
    },
    {
        "content": "<p>oh apparently the borrow checker only runs if you don't have unreachable code</p>",
        "id": 223175154,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611015122
    },
    {
        "content": "<p>that seems silly</p>",
        "id": 223175190,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611015124
    },
    {
        "content": "<p>anyway, mcve: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4dafaf60879fd4ad9886cf56010b51f2\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4dafaf60879fd4ad9886cf56010b51f2</a></p>",
        "id": 223175203,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611015157
    },
    {
        "content": "<p>I don't think you can get around doing a check first whether its none and then having to index a second time <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 223175408,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1611015436
    },
    {
        "content": "<p>oh well that's not bad</p>",
        "id": 223175414,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611015460
    },
    {
        "content": "<p>well this turned into an absolute mess but uhhh it does compile</p>",
        "id": 223177193,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611017686
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/7344\">https://github.com/rust-analyzer/rust-analyzer/pull/7344</a></p>",
        "id": 223180333,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611021750
    },
    {
        "content": "<p>I don't think we should do lazy loading, that'd be XY problem</p>",
        "id": 223199165,
        "sender_full_name": "matklad",
        "timestamp": 1611045713
    },
    {
        "content": "<p>(we need to add lazy loading some day, but not today, as this won't help this issue --- we'll just lazy-load files when indexing)</p>",
        "id": 223199270,
        "sender_full_name": "matklad",
        "timestamp": 1611045788
    },
    {
        "content": "<p>Instead, we should add <code>files_excludeDirs: Vec&lt;PathBuf&gt; = [],</code> in <a href=\"http://config.rs\">config.rs</a></p>",
        "id": 223199412,
        "sender_full_name": "matklad",
        "timestamp": 1611045918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> right but the exclude info is not available from cargo metadata. It only gives the packages themselves, not the info it used to decide on the packages</p>",
        "id": 223234491,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611066999
    },
    {
        "content": "<p>We need to support exclude in <code>settings.json</code> anyway</p>",
        "id": 223234591,
        "sender_full_name": "matklad",
        "timestamp": 1611067049
    },
    {
        "content": "<p>so we might as well do this now as the simplest thing for the problem at hand</p>",
        "id": 223234700,
        "sender_full_name": "matklad",
        "timestamp": 1611067086
    },
    {
        "content": "<p>Hmm, ok. I'd rather configure it twice than not be able to use rust-analyzer</p>",
        "id": 223234800,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611067137
    },
    {
        "content": "<p>This should help <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/7451\">https://github.com/rust-analyzer/rust-analyzer/pull/7451</a></p>",
        "id": 224091653,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611690075
    },
    {
        "content": "<p>Has there been any movement on getting <code>excludeDirs</code> to work? <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/7755\">The github issue seems to be open still</a>, and I haven't been able to figure it out. I tried changing <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/3926f60cb525592400018b0afb0c0553dabfdb32/crates/rust-analyzer/src/reload.rs#L438\">this</a> to explicitly add <code>global_excludes</code> to <code>dirs.exclude</code>, but then I just get a wall of <code>file with a cargo diagnostic was not in vfs</code> errors which takes just as long to process, so I guess flycheck is still looking for the directory I'm trying to ignore.</p>",
        "id": 240093362,
        "sender_full_name": "Chris B",
        "timestamp": 1621881758
    },
    {
        "content": "<p>No, no progerss here. I think it should be relatively striaght forward to fix for someone unfamiliar with the code. Let me add some pointers.</p>",
        "id": 240095417,
        "sender_full_name": "matklad",
        "timestamp": 1621882639
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/7755#issuecomment-847266325\">https://github.com/rust-analyzer/rust-analyzer/issues/7755#issuecomment-847266325</a></p>",
        "id": 240096204,
        "sender_full_name": "matklad",
        "timestamp": 1621882930
    },
    {
        "content": "<p>Thanks. I got the first half working, but the FileSystemWatcher thing is specified by glob patterns that <a href=\"https://github.com/microsoft/vscode/issues/27051\">apparently won't ever support negation</a>. In the cases where the glob pattern encompasses the directories the user wants to ignore, are you okay with walking the package root and sending glob patterns that work around the one to be ignored?</p>",
        "id": 240110172,
        "sender_full_name": "Chris B",
        "timestamp": 1621889519
    },
    {
        "content": "<p>We first need to figure out if <code>FIleSystemWatcher</code> is relevant at all -- I think that it should obey VS Code's <code>exclude</code> out of the box, so we don't need any changes there</p>",
        "id": 240160734,
        "sender_full_name": "matklad",
        "timestamp": 1621933927
    },
    {
        "content": "<p>Basically, we need to test, if we set-up files.exclude and rust-analyzer.exclude, <em>why</em> are we not ignoring files? Is this because VFS does traversal? Or is it because watcher sends notifications to us?</p>",
        "id": 240160818,
        "sender_full_name": "matklad",
        "timestamp": 1621933994
    },
    {
        "content": "<p>In my case the main issue was <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/3926f60cb525592400018b0afb0c0553dabfdb32/crates/rust-analyzer/src/reload.rs#L458\">here</a>; if you want to exclude a subdirectory of an included directory, the current logic won't catch it. It should be something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>    if dirs.include.iter().any(|incl| incl.starts_with(excl) || excl.starts_with(incl)) {\n</code></pre></div>\n<p>The other thing was from Flycheck; vscode makes it look like the default checkOnSave command is just <code>check</code>, but it actually includes <code>all-targets</code>. I couldn't understand why RA was picking up a mod annotated with #[cfg(test)] just using <code>cargo check</code>, but that explains it. Users might find it helpful if the default in package.json was something that indicated \"your command here\" since the actual one invoked includes the manfiest and is project-specific.</p>",
        "id": 240187211,
        "sender_full_name": "Chris B",
        "timestamp": 1621949462
    },
    {
        "content": "<p>Hm, yeah, the first ones sounds like a bug! Could you send a PR?</p>",
        "id": 240196986,
        "sender_full_name": "matklad",
        "timestamp": 1621953386
    },
    {
        "content": "<p>Sure thing.  <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/8994\">https://github.com/rust-analyzer/rust-analyzer/pull/8994</a></p>",
        "id": 240203289,
        "sender_full_name": "Chris B",
        "timestamp": 1621955831
    }
]