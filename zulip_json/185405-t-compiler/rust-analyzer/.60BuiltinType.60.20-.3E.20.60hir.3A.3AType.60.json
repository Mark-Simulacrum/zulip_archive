[
    {
        "content": "<p>Is there a way to go from a <code>BuiltinType</code> to an <code>hir::Type</code> in the IDE crates? I can't seem to find any</p>",
        "id": 226029344,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1613065393
    },
    {
        "content": "<p>I wonder if there should be a way? Maybe whiever thing gave you BuiltinType should have handed <code>Type</code> in the first place?</p>",
        "id": 226029547,
        "sender_full_name": "matklad",
        "timestamp": 1613065485
    },
    {
        "content": "<p>Seems easier if ther's only one type</p>",
        "id": 226029575,
        "sender_full_name": "matklad",
        "timestamp": 1613065497
    },
    {
        "content": "<p>So it'd be <code>ModuleDef::BuiltinType(Type)</code>?</p>",
        "id": 226030084,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1613065682
    },
    {
        "content": "<p>hm no... it might make sense to have a <code>ModuleDef::ty()</code></p>",
        "id": 226030309,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1613065758
    },
    {
        "content": "<p>hmm, how does <code>Type</code> currently represent builtin types? they have no defining crate, but <code>Type</code> requires one</p>",
        "id": 226030526,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1613065829
    },
    {
        "content": "<p>Yeah, I feel it should be <code>ModuleDef::BuildinType(code_model::something)</code></p>",
        "id": 226030750,
        "sender_full_name": "matklad",
        "timestamp": 1613065913
    },
    {
        "content": "<p>the krate doesn't need to be the defining one I think, rather the one where the type currently 'lives'</p>",
        "id": 226030833,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1613065929
    },
    {
        "content": "<p>where <code>something</code> can be either <code>Adt</code> (<code>i32</code> is structy) or a dedicated BuildInType with a <code>.ty()</code> method</p>",
        "id": 226030962,
        "sender_full_name": "matklad",
        "timestamp": 1613065978
    },
    {
        "content": "<p>I'm pretty sure the current <code>Type</code> isn't the ideal abstraction, but I'm not sure how to do it better <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 226031210,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1613066067
    },
    {
        "content": "<p>\"where the type currently 'lives'\"? so the crate from which the type is used?</p>",
        "id": 226031912,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1613066346
    },
    {
        "content": "<p>assuming this is about the completion issue, it should be the crate and trait environment from the place where we're completing</p>",
        "id": 226031958,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1613066367
    },
    {
        "content": "<p>i.e. you'd use <code>Type::new_with_resolver</code> to create it with the resolver from there</p>",
        "id": 226032020,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1613066402
    },
    {
        "content": "<p>the other code paths seem to use the defining crate</p>",
        "id": 226032476,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1613066546
    },
    {
        "content": "<p>the other code paths are \"give me the type in the environment of its definition\"</p>",
        "id": 226032669,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1613066634
    },
    {
        "content": "<p>hmm, only for obtaining the initial <code>Type</code> though</p>",
        "id": 226032681,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1613066640
    },
    {
        "content": "<p>and then the current crate is passed later</p>",
        "id": 226032763,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1613066657
    },
    {
        "content": "<p>it probably doesn't really matter much what you use in this case</p>",
        "id": 226032980,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1613066747
    },
    {
        "content": "<p>although, we do need the crate to find impls, so it does matter somewhat</p>",
        "id": 226033319,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1613066868
    },
    {
        "content": "<p>not terribly happy with this but it seems to work <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/7644\">https://github.com/rust-analyzer/rust-analyzer/pull/7644</a></p>",
        "id": 226039519,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1613069637
    }
]