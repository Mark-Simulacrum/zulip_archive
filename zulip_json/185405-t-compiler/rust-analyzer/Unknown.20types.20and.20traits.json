[
    {
        "content": "<p>Do we assume that unknown types implement every trait in scope?</p>",
        "id": 256074239,
        "sender_full_name": "Laurențiu",
        "timestamp": 1633360037
    },
    {
        "content": "<p>I think so, yes</p>",
        "id": 256074432,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1633360102
    },
    {
        "content": "<p>At least every trait with a blanket impl that could apply to an unconstrained type variable</p>",
        "id": 256074474,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1633360121
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/OVVIRswyozi1WESJoGpNS5CZ/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/OVVIRswyozi1WESJoGpNS5CZ/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/OVVIRswyozi1WESJoGpNS5CZ/image.png\"></a></div>",
        "id": 256074518,
        "sender_full_name": "Laurențiu",
        "timestamp": 1633360141
    },
    {
        "content": "<p>These seem a bit excessive. And why does <code>proc_macro</code> show up in there, it's not added as a dependency?</p>",
        "id": 256074834,
        "sender_full_name": "Laurențiu",
        "timestamp": 1633360249
    },
    {
        "content": "<p>Looks like we add <code>proc_macro</code> as a dependency to <em>every</em> crate</p>",
        "id": 256075386,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1633360450
    },
    {
        "content": "<p>I remember there was a reason for that</p>",
        "id": 256075475,
        "sender_full_name": "Laurențiu",
        "timestamp": 1633360487
    },
    {
        "content": "<p>I think proc_macro <em>is</em> available to any crate? Ther's nighlyt <code>proc_macro::is_available</code> to test if it'll just blow-up at runtmie</p>",
        "id": 256075765,
        "sender_full_name": "matklad",
        "timestamp": 1633360593
    },
    {
        "content": "<p>Hmm, it needs an <code>extern crate proc_macro</code></p>",
        "id": 256075894,
        "sender_full_name": "Laurențiu",
        "timestamp": 1633360642
    },
    {
        "content": "<p>Doesn't a proc-macro crate only need the <code>lib.proc-macro</code> cargo key?</p>",
        "id": 256076090,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1633360702
    },
    {
        "content": "<p>no, apparently it's <em>never</em> in the prelude</p>",
        "id": 256076931,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1633361034
    },
    {
        "content": "<p>which is great, because that's easy to fix now</p>",
        "id": 256076993,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1633361051
    },
    {
        "content": "<p>ah, wait, I was using 2015 edition</p>",
        "id": 256077210,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1633361138
    },
    {
        "content": "<p>I don't see where exactly we're adding it as a dep</p>",
        "id": 256077251,
        "sender_full_name": "Laurențiu",
        "timestamp": 1633361158
    },
    {
        "content": "<p>yeah, it's only in the prelude for <code>proc-macro</code> crates</p>",
        "id": 256077333,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1633361177
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Unknown.20types.20and.20traits/near/256077251\">said</a>:</p>\n<blockquote>\n<p>I don't see where exactly we're adding it as a dep</p>\n</blockquote>\n<p>In <code>sysroot.rs</code></p>",
        "id": 256077344,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1633361182
    },
    {
        "content": "<p>or rather in <code>workspace.rs</code>, which uses that</p>",
        "id": 256077393,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1633361205
    },
    {
        "content": "<p>Mostly unrelated, is anyone against dropping support for pre-1.47 sysroots?</p>",
        "id": 256079589,
        "sender_full_name": "Laurențiu",
        "timestamp": 1633361975
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> I don't think it's even worth discusssing anything that's older than <code>stable - 2</code> or something.</p>",
        "id": 256080200,
        "sender_full_name": "matklad",
        "timestamp": 1633362190
    },
    {
        "content": "<p>unknown types (i.e. type variables) being considered to possibly implement every type is correct. The problem is just with the specific case of type variables as method receivers, where rustc would bail with a \"the type needs to be known at this point\"</p>",
        "id": 256080528,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1633362319
    },
    {
        "content": "<p>this seems correct to me (if a bit noisy): you could always add an appropriate type annotation in the <em>next</em> line to make it compile</p>",
        "id": 256080719,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1633362395
    },
    {
        "content": "<p>if you have a <code>Foo&lt;T&gt;</code> and a method that's implemented for <code>Foo&lt;T&gt; where T: SomeTrait</code>, it's completely fine to call that method before <code>T</code> is known, it will just result in an obligation that needs to be proved later</p>",
        "id": 256080721,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1633362397
    },
    {
        "content": "<p>you can't add the type annotation in the next line in the case of <code>let x; x.&lt;|&gt;</code>, rustc will complain about the unknown type</p>",
        "id": 256080845,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1633362447
    },
    {
        "content": "<p>hmm, I thought that was fine for trait method... apparently not</p>",
        "id": 256081205,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1633362590
    }
]