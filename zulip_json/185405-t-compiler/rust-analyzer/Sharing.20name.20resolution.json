[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> , here's a sketch of name-res API I've been investigating over the weekend: <a href=\"https://gist.github.com/matklad/145c88131282e8392e64d088ee8a50e4\">https://gist.github.com/matklad/145c88131282e8392e64d088ee8a50e4</a></p>",
        "id": 205147497,
        "sender_full_name": "matklad",
        "timestamp": 1595872218
    },
    {
        "content": "<p>I think this subset can be shared between rustc &amp; ra in theory</p>",
        "id": 205147513,
        "sender_full_name": "matklad",
        "timestamp": 1595872233
    },
    {
        "content": "<p>where subset:</p>\n<p>The set of scopes which store <code>Map&lt;Name, PerNs&lt;Def&gt;&gt;</code>, imports (<code>(Vec&lt;Name&gt;, glob or name or alias)</code>) and has operations for:</p>\n<ul>\n<li>creating a new scope</li>\n<li>seeding a new name in given namespaces in scope</li>\n<li>adding new import to scope</li>\n</ul>\n<p>This thing should be enough to run the fixed-point loop (the most interesting part)</p>",
        "id": 205147682,
        "sender_full_name": "matklad",
        "timestamp": 1595872323
    },
    {
        "content": "<p>It doesn't know anything about AST (scopes are just bags of names, defs are opaque), hygiene (which is encapsulated into <code>==</code> of names) and which def belongs to which namespaces (the client specifies namespaces explicitely)</p>",
        "id": 205147797,
        "sender_full_name": "matklad",
        "timestamp": 1595872401
    },
    {
        "content": "<p>Cool! I guess a good first step would be to make r-a always pass the scope to resolve names in then?</p>",
        "id": 205148129,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595872580
    },
    {
        "content": "<p>Not sure, I might be overlooking things.  My plan for this was to create an <a href=\"http://ires.rs\">ires.rs</a> module in hir_def, with the constraint that it <em>doesnt</em> import db directly, and see how much of name resolution can we spill there.</p>",
        "id": 205149646,
        "sender_full_name": "matklad",
        "timestamp": 1595873403
    },
    {
        "content": "<p>One open question is how to <em>use</em> this thing after names are resolved ? Should we drain scopes back into ModuleDats, or should we use them as is?</p>",
        "id": 205149894,
        "sender_full_name": "matklad",
        "timestamp": 1595873558
    },
    {
        "content": "<p>Should this module extraction succeeded, it would be fun to think about moving this to a crate, with the usual tradeoff:</p>\n<ul>\n<li>either you make everything generic over a type family (which is bad)</li>\n<li>or you pick a set of specific types which is good enough for all consumers (which might be impossible)</li>\n</ul>",
        "id": 205150123,
        "sender_full_name": "matklad",
        "timestamp": 1595873679
    }
]