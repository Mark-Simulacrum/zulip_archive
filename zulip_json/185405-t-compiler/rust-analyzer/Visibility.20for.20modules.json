[
    {
        "content": "<p>I could use the new visibility infra for the auto-import functionality <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/2180\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/2180\">https://github.com/rust-analyzer/rust-analyzer/issues/2180</a><br>\nBut for that, I need to have the visibility data for modules at least (functions would be great to have either, but not that necessary for an initial auto import implementation).</p>\n<p>It looks like I need to implement the <code>HasVisibility</code> trait for the <code>ra_hir::code_model::Module</code> struct.<br>\nIf I understand it correctly, currently only the <code>ra_hir_def::nameres::raw::ModuleData</code> contains the data I need, but I have no idea how to get it with the <code>ra_hir::code_model::Module</code> data.<br>\nThere's also <code>ra_hir_def::nameres::ModuleData</code> struct which I can retrieve with the <code>ra_hir::code_model::Module</code> data, but there's no visibility data in 2 out of 3 places where this object is constructed and I have no clue on how to get it.</p>\n<p>So, any hints on how can I get that working?</p>",
        "id": 184434684,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1577650276
    },
    {
        "content": "<p>I think adding <code>HasVisibility</code> to <code>Module</code> would be the wrong approach for this. The visibility you're interested in should be that of a certain <em>path</em>, not the module itself. E.g.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">mod</span> <span class=\"nn\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">mod</span> <span class=\"nn\">bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">foo</span>::<span class=\"n\">bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>so in general, items can appear in many modules (everywhere they're <code>use</code>d) and have a different visibility in each of those places. I think to find a path to import a certain item, we need to consider each of those places and whether it's visible from where we're importing.</p>",
        "id": 184434932,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1577650773
    },
    {
        "content": "<p>Btw, I was planning on working on this (finding paths to an item) to use it to qualify paths in assists, but I have to admit I haven't gotten to it yet</p>",
        "id": 184435010,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1577650910
    },
    {
        "content": "<p>That is what we want in the end, right.</p>\n<p>The issue with this approach currently is that we don't have any reexport infra at all (<a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/2180#issuecomment-569218100\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/2180#issuecomment-569218100\">https://github.com/rust-analyzer/rust-analyzer/issues/2180#issuecomment-569218100</a>) and the only information we have currently is the <code>ra_hir::code_model::Module</code> and an information on the parent modules that contain it.</p>\n<p>So now we can implement a very limited version of the auto imports, for cases where all modules are publicly available hence my initial question.<br>\nOr do you think we should go with the reexports instead?</p>",
        "id": 184435125,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1577651132
    },
    {
        "content": "<p>the <code>resolve_module_path</code> method of <code>Resolver</code> returns a <code>PerNs</code> which contains the correct visibility for the end of the path. the publically visible methods don't return that yet though. Also the visibility of the intermediate segments isn't considered yet (I'm not sure whether it should)</p>",
        "id": 184435170,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1577651187
    },
    {
        "content": "<p>I would suggest you keep it as simple as possible at first ;)</p>",
        "id": 184435185,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1577651230
    },
    {
        "content": "<p>even if it means that we'll import some wrong paths at first</p>",
        "id": 184435188,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1577651261
    },
    {
        "content": "<p>ah wait, <code>resolve_module_path_in_items</code> is public and also returns the <code>PerNs</code></p>",
        "id": 184435235,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1577651297
    },
    {
        "content": "<p>Yes, the easiest way would be great to have. <br>\nThe methods you've suggested seem cool, but a bit more complex compared to what I've expected indeed :)</p>\n<p>I can get the <code>ra_syntax::ast::generated::Visibility</code> easily from the <code>ra_hir::code_model::Module</code>  with the  following snippet:</p>\n<div class=\"codehilite\"><pre><span></span>let visibility: Option&lt;Visibility&gt; = module\n                        .declaration_source(db)\n                        .and_then(|module_declaration| module_declaration.value.visibility());\n</pre></div>\n\n\n<p>That's why I hoped that the proper Visibility object is easy to get.</p>",
        "id": 184435368,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1577651590
    },
    {
        "content": "<p>what exactly do you want to do currently? build a path to import and then check whether it's visible? in that case I would suggest resolving it and checking the returned visibility</p>",
        "id": 184435416,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1577651688
    },
    {
        "content": "<p>I'm not sure we should add a 'get visibility' API to <code>Module</code> at all, because it'd often be the wrong thing to use</p>",
        "id": 184435431,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1577651749
    },
    {
        "content": "<p>Yes, exactly, to check that every module in the <code>use foo::bar::baz</code> is visible from the place we add the import to.<br>\nI'll try resolving it, thank you.</p>",
        "id": 184435474,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1577651802
    },
    {
        "content": "<blockquote>\n<p>is visible from the place we add the import to</p>\n</blockquote>\n<p>Just to clarify: under \"visible\" I mean the visibility from the module declaration, since we don't have the reexport support.</p>",
        "id": 184435530,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1577651914
    },
    {
        "content": "<p>I personally think for a MVP of auto-import we wouldn't even need to do that -- not showing the assist if the path would not be visible vs. showing it and importing a 'wrong' (not visible) path is not that much of an improvement IMO, and in the future we will want to handle this differently (by generating a different path) anyway</p>",
        "id": 184435578,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1577652003
    },
    {
        "content": "<p>Makes sense, I guess.<br>\nIn that case I've got a hacky implementation that can add those imports already <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>  and all that's left is to refactor this mess.</p>",
        "id": 184435637,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1577652126
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> , I'll go with the laziest approach to start with</p>",
        "id": 184436511,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1577653998
    }
]