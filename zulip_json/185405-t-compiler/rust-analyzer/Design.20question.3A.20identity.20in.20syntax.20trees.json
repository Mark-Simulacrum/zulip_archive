[
    {
        "content": "<p>Discussion for <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/3129\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/3129\">https://github.com/rust-analyzer/rust-analyzer/issues/3129</a></p>",
        "id": 188107098,
        "sender_full_name": "matklad",
        "timestamp": 1581601660
    },
    {
        "content": "<p>That's basically about the same core question all other again:</p>\n<ul>\n<li>do we explicitely pass context along with the things</li>\n</ul>\n<p>or</p>\n<ul>\n<li>do we store context as a field in the thing</li>\n</ul>\n<p>?</p>",
        "id": 188107220,
        "sender_full_name": "matklad",
        "timestamp": 1581601739
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> in case you have some brilliant idea how to deal with it.</p>",
        "id": 188108152,
        "sender_full_name": "matklad",
        "timestamp": 1581602378
    },
    {
        "content": "<p>no brilliant idea, but I feel like if we do generate mirrored APIs for <code>InFile&lt;AstNode&gt;</code>s (and maybe add further context and give it a better name than <code>InFile</code>), we can get an acceptable API</p>",
        "id": 188110618,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581604163
    },
    {
        "content": "<blockquote>\n<p>maybe add further context </p>\n</blockquote>\n<p><code>Ctx&lt;T&gt;</code> ? :)</p>",
        "id": 188110669,
        "sender_full_name": "matklad",
        "timestamp": 1581604198
    },
    {
        "content": "<p>Note that generating API would require to duplicate AST traits, like <code>TypeParamsOwner</code> as well</p>",
        "id": 188110770,
        "sender_full_name": "matklad",
        "timestamp": 1581604246
    },
    {
        "content": "<p>yeah, and duplicating hand-written extensions :(</p>",
        "id": 188111053,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581604424
    },
    {
        "content": "<p>maybe we could invert it to <code>SyntaxNode&lt;Context&gt;</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 188111128,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581604460
    },
    {
        "content": "<p>so the current syntax nodes would be <code>SyntaxNode&lt;()&gt;</code></p>",
        "id": 188111159,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581604478
    },
    {
        "content": "<p>Yeah, that's another option</p>",
        "id": 188111175,
        "sender_full_name": "matklad",
        "timestamp": 1581604499
    },
    {
        "content": "<p>I'd even say we can make it on-generic, by using <code>SyntaxNode&lt;u64&gt;</code>, because everybody should use indexes anyway</p>",
        "id": 188111210,
        "sender_full_name": "matklad",
        "timestamp": 1581604525
    },
    {
        "content": "<p>And I think that's how most compiles work: sytnax generally remmebers a file it originated from, which is usually good enough for identity</p>",
        "id": 188111326,
        "sender_full_name": "matklad",
        "timestamp": 1581604589
    },
    {
        "content": "<p>I think Swift's libsyntax is an expcetion: they don't store the original file, or any other bits of context</p>",
        "id": 188111350,
        "sender_full_name": "matklad",
        "timestamp": 1581604612
    },
    {
        "content": "<p>I feel like if we define <code>type SyntaxNode = SyntaxNode&lt;()&gt;</code> the parameter probably wouldn't be annoying</p>",
        "id": 188111358,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581604621
    },
    {
        "content": "<p>And i really, really love that design, abstractly. But I don't see we how that would square with API we want...</p>",
        "id": 188111402,
        "sender_full_name": "matklad",
        "timestamp": 1581604659
    },
    {
        "content": "<p>so what kind of API does swift have?</p>",
        "id": 188111479,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581604699
    },
    {
        "content": "<p>I belive that haven't move semantic analysis over libsyntax yet, so they don't have an API which requires identity at all</p>",
        "id": 188111537,
        "sender_full_name": "matklad",
        "timestamp": 1581604763
    },
    {
        "content": "<p>ah <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 188111557,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581604787
    },
    {
        "content": "<p>I think they do have strong pointer identity of trees though, so, in theory, they can use pointer-keyed hash maps</p>",
        "id": 188111641,
        "sender_full_name": "matklad",
        "timestamp": 1581604841
    },
    {
        "content": "<p>It's also interesting how we hit this problem because of macros. </p>\n<p>Before, you were generally working with syntax from a single file, so there was no need for fine-grained tweaking of the context.</p>\n<p>Now, you can hold several trees simulatenously, which originate from different macros, and kind-a need to pair a tree with ctx...</p>",
        "id": 188112237,
        "sender_full_name": "matklad",
        "timestamp": 1581605241
    },
    {
        "content": "<p>btw,</p>\n<blockquote>\n<p>It does not actually yield a true global identity, because the same file can be included twice into a module tree of a crate (Note how this makes syntax&lt;-&gt;semantics not a bijection, which is painful to deal with).</p>\n</blockquote>\n<p>should that maybe lead to different <code>HirFileId</code>s?</p>",
        "id": 188112592,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581605410
    },
    {
        "content": "<p>if we have multiple copies of a whole crate in the crate graph because of e.g. configurations, does that lead to different <code>HirFileId</code>s?</p>",
        "id": 188112746,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581605500
    },
    {
        "content": "<p>Yeah, I think we need to somehow fix it, and to make HirFileId unambgious. Last time I've looked into it I've hit a chicken and egg problem though</p>",
        "id": 188112881,
        "sender_full_name": "matklad",
        "timestamp": 1581605563
    },
    {
        "content": "<p>Basically, what we need is to include a <code>ModuleId</code> into <code>HIrFileId</code>. However, we can't get a <code>ModuleId</code> before we parse it's file into <code>raw</code> items. </p>\n<p>And the query to get <code>raw</code> items needs a file id!</p>",
        "id": 188112941,
        "sender_full_name": "matklad",
        "timestamp": 1581605614
    },
    {
        "content": "<p>Looked at Roslyn, I think their magic is relying on trees identity: <a href=\"http://sourceroslyn.io/#Microsoft.CodeAnalysis.CSharp/Compilation/SyntaxTreeSemanticModel.cs,1710\" target=\"_blank\" title=\"http://sourceroslyn.io/#Microsoft.CodeAnalysis.CSharp/Compilation/SyntaxTreeSemanticModel.cs,1710\">http://sourceroslyn.io/#Microsoft.CodeAnalysis.CSharp/Compilation/SyntaxTreeSemanticModel.cs,1710</a></p>",
        "id": 188117430,
        "sender_full_name": "matklad",
        "timestamp": 1581608106
    },
    {
        "content": "<p>And that's actually is interesting, because, unlike <code>SyntaxNode&lt;Context&gt;</code>, the context is meaningless. Ie, does this mean that we don't even need an index, and just <code>SyntaxNode&lt;impl Eq&gt;</code>?</p>",
        "id": 188117798,
        "sender_full_name": "matklad",
        "timestamp": 1581608309
    },
    {
        "content": "<p>Ok, I think I am onto something!</p>",
        "id": 188118520,
        "sender_full_name": "matklad",
        "timestamp": 1581608757
    },
    {
        "content": "<p>So, this is the proposal:</p>\n<ul>\n<li>We add an <code>u32</code> field, <code>tree_identity</code>, to <code>rowan::SyntaxNode</code>. By default it is assigned to <code>0</code>, but there's an option to provide your own value when constructing a tree.  All nodes within a tree share a <code>tree_identity</code></li>\n<li>Rowan takes this <code>tree_identity</code> into account when implementing <code>Eq</code> &amp; <code>Hash</code>, with the rule that if you parse the three twice from the same string and the same identity, the correspoinding nodes will be equal, and nodes with different identities will always be distinct (this last part is what is not satisfied by rowan today). This gives us essentially \"pointer identity\", except that it's fine to reparse trees</li>\n<li>We add <code>rowan::SyntaxNode::identity_key</code>, which returns an opaque <code>Copy</code> key which you can, eg, store in a hash map without holding the whole tree</li>\n<li>In <code>hir</code>, we assign tree identities to macro files and file-root modules. I think this requires the use of salsa interning, but this is an implementation detail. We only need to make sure that id does not change if the module did not change, we won't use <code>lookup_</code> query at all. </li>\n<li>the API to get types of things will be based on trees with identities. <ul>\n<li>you start with asking for a syntax tree for a particular file. A tree with <em>some</em> identity is returned (this is inheritnly ambigious due to aliasing modules)</li>\n<li>in the tree, you find an ast::Expr</li>\n<li>you find an ast::FnDef which contains the expression</li>\n<li>you ask for hir::Function for this ast::FnDef. This works, roughly, by listing all functions and finding the one which originates from the same <code>tree_identity</code> and position. </li>\n<li>we typecheck the function, getting a map from <code>SyntaxNode</code>s to types, whcih includes all macro-expanded files</li>\n<li>we look the result up in the map</li>\n</ul>\n</li>\n</ul>",
        "id": 188124603,
        "sender_full_name": "matklad",
        "timestamp": 1581612151
    },
    {
        "content": "<p>I remember you saying that green node doesn't have an identity and is easily interned, but red one has through the parent pointer. I guess these properties are preserved with your proposal, aren't they? And if Syntax Node already has an identity, making it global seems reasonable</p>",
        "id": 188127916,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581614104
    },
    {
        "content": "<p>Exactly! Green node still is identity less. SyntaxNode gets a real identity (currently, it has identity within the file, and comparison of nodes across files is just ill-defined and might return <code>true</code>)</p>",
        "id": 188128205,
        "sender_full_name": "matklad",
        "timestamp": 1581614320
    },
    {
        "content": "<p>Heh, looks like ub when you put it like that)</p>",
        "id": 188128375,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581614419
    },
    {
        "content": "<p>yeah, that might actually work out <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 188128418,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581614447
    },
    {
        "content": "<p>But, are there sensible caveats?</p>",
        "id": 188128605,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581614578
    },
    {
        "content": "<p>Maybe it is ridiculous, but what is an estimate of increased memory usage? I remember you being concerned about usize vs u32 for TextUnit</p>",
        "id": 188128752,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581614661
    },
    {
        "content": "<p>We don't increase the size of GreenNodes, the size of SyntaxNodes does not matter that much as there are few of them, and otherwise we add roughly one u32 + interning metadata per file/macro</p>",
        "id": 188129058,
        "sender_full_name": "matklad",
        "timestamp": 1581614876
    },
    {
        "content": "<p>Ok, I am experiemnting with it right now, and I have a problem: I need a thing, which is exactly like SourceBinder and SourceAnalyzer, but different from those, and I need a name for it <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 188462417,
        "sender_full_name": "matklad",
        "timestamp": 1582041232
    },
    {
        "content": "<p>shouldn't we be able to get rid of <code>SourceAnalyzer</code> with this <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> </p>\n<p>also, what does the new thing do?</p>",
        "id": 188462635,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1582041377
    },
    {
        "content": "<p>The same, but without <code>InFile&lt;T&gt;</code></p>",
        "id": 188462815,
        "sender_full_name": "matklad",
        "timestamp": 1582041501
    },
    {
        "content": "<p>well, it doesn't do anything yet, because it doesn't exist, but I think we should be able to cut own <strong>a lot</strong> of <code>InFile</code>s with it</p>",
        "id": 188462849,
        "sender_full_name": "matklad",
        "timestamp": 1582041530
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/n0kc6ze_-A6-h9HyR1OheK_p/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/n0kc6ze_-A6-h9HyR1OheK_p/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/n0kc6ze_-A6-h9HyR1OheK_p/pasted_image.png\"></a></div>",
        "id": 188463115,
        "sender_full_name": "matklad",
        "timestamp": 1582041714
    },
    {
        "content": "<p>The above is what we have now, the bellow is what I want</p>",
        "id": 188463173,
        "sender_full_name": "matklad",
        "timestamp": 1582041729
    },
    {
        "content": "<p>why not <code>token.descend_into_macros(&amp;source_binder)</code> / <code>token.ancestors_with_macros</code>?</p>",
        "id": 188463275,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1582041807
    },
    {
        "content": "<p>That would require an extension trait</p>",
        "id": 188463356,
        "sender_full_name": "matklad",
        "timestamp": 1582041844
    },
    {
        "content": "<p>That's actually exactly how C# API looks like I think: <a href=\"https://github.com/dotnet/roslyn/wiki/Getting-Started-C%23-Semantic-Analysis\" target=\"_blank\" title=\"https://github.com/dotnet/roslyn/wiki/Getting-Started-C%23-Semantic-Analysis\">https://github.com/dotnet/roslyn/wiki/Getting-Started-C%23-Semantic-Analysis</a></p>",
        "id": 188463457,
        "sender_full_name": "matklad",
        "timestamp": 1582041915
    },
    {
        "content": "<p>And yes, I hope this new thing subsumes bothe SourceBinder and SourceAnalyzer</p>",
        "id": 188463487,
        "sender_full_name": "matklad",
        "timestamp": 1582041936
    },
    {
        "content": "<p>Also, as a minor point, I think we <em>should</em> use caches like in <code>SourceBinder</code>, but we should hide them behind <code>RefCell</code>, so that we dont' need <code>mut</code> al over the place</p>",
        "id": 188463637,
        "sender_full_name": "matklad",
        "timestamp": 1582042018
    },
    {
        "content": "<p>how about calling it <code>RustAnalyzer</code> <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 188463674,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1582042041
    },
    {
        "content": "<p>more seriously, maybe just <code>Analyzer</code></p>",
        "id": 188463687,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1582042051
    },
    {
        "content": "<p>Note that we already have <code>Analysis</code>. I acutally think that <code>SemanticModel</code> / <code>Semantics</code> might be a good name.</p>",
        "id": 188463766,
        "sender_full_name": "matklad",
        "timestamp": 1582042088
    },
    {
        "content": "<p>Because that's what it is -- semantics ascribed to syntax</p>",
        "id": 188463774,
        "sender_full_name": "matklad",
        "timestamp": 1582042100
    },
    {
        "content": "<p>I'm not a fan of <code>SemanticModel</code> because it doesn't seem to contain the actual model</p>",
        "id": 188463951,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1582042236
    },
    {
        "content": "<p><code>SemanticApi</code>?</p>",
        "id": 188464001,
        "sender_full_name": "matklad",
        "timestamp": 1582042266
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Design.20question.3A.20identity.20in.20syntax.20trees/near/188464001\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Design.20question.3A.20identity.20in.20syntax.20trees/near/188464001\">said</a>:</p>\n<blockquote>\n<p><code>SemanticApi</code>?</p>\n</blockquote>\n<p>That doesn't seem too unreasonable</p>",
        "id": 188464788,
        "sender_full_name": "Emil Lauridsen",
        "timestamp": 1582042735
    },
    {
        "content": "<p>I like that more... though I think <code>Semantics</code> might also be fine</p>",
        "id": 188464812,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1582042748
    },
    {
        "content": "<p>does it actually contain any context, apart from the source binder cache thing?</p>",
        "id": 188464922,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1582042808
    },
    {
        "content": "<p>Yeah, i guess the main Q is whether this API flies at all. It might, and if it does, it should simplify <strong>everything</strong> a lot (also, I am scared by amount of refactorig this will require to complete)</p>",
        "id": 188464962,
        "sender_full_name": "matklad",
        "timestamp": 1582042835
    },
    {
        "content": "<blockquote>\n<p>does it actually contain any context, apart from the source binder cache thing?</p>\n</blockquote>\n<p>Yeah, I imagine it would contain a ton of hash maps keyed by SyntaxNodes</p>",
        "id": 188465005,
        "sender_full_name": "matklad",
        "timestamp": 1582042861
    },
    {
        "content": "<p>I'm a big fan of designing APIs by writing the usage code first, and then iterating from there, so it seems like a good starting point</p>",
        "id": 188465057,
        "sender_full_name": "Emil Lauridsen",
        "timestamp": 1582042895
    },
    {
        "content": "<p>At least, it'll have something like <code>HashMap&lt;TreeId, HirFileId&gt;</code></p>",
        "id": 188465058,
        "sender_full_name": "matklad",
        "timestamp": 1582042895
    },
    {
        "content": "<p>hmm I thought that would be in the db?</p>",
        "id": 188465086,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1582042914
    },
    {
        "content": "<p>or the db contains the other direction, and this needs to reverse it?</p>",
        "id": 188465145,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1582042935
    },
    {
        "content": "<p>I guess I'll just wait how it actually looks ;)</p>",
        "id": 188465216,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1582042980
    },
    {
        "content": "<p>In general, I'd expect the other direction</p>",
        "id": 188465230,
        "sender_full_name": "matklad",
        "timestamp": 1582042985
    },
    {
        "content": "<p>well, acutally, I don't really know myself yet :)</p>",
        "id": 188465319,
        "sender_full_name": "matklad",
        "timestamp": 1582043032
    },
    {
        "content": "<p>But rowan branch with ids is <a href=\"https://github.com/rust-analyzer/rowan/tree/identity\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rowan/tree/identity\">https://github.com/rust-analyzer/rowan/tree/identity</a></p>",
        "id": 188465408,
        "sender_full_name": "matklad",
        "timestamp": 1582043065
    },
    {
        "content": "<blockquote>\n<p>well, acutally, I don't really know myself yet :)</p>\n</blockquote>\n<p>So, I think the general idea is rougthly what we already do with <code>SourceBinder</code>. </p>\n<p>We <strong>store</strong> things like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Parent</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">children</span>: <span class=\"nc\">FxHashMap</span><span class=\"o\">&lt;</span><span class=\"n\">Name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Child</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>and, in general, we want to do look up by <code>Child</code>. We do this recursively -- we lookup parent, than <em>inver</em>  and cache (in semantics) the children map and lookup the node by id it it</p>",
        "id": 188465846,
        "sender_full_name": "matklad",
        "timestamp": 1582043312
    },
    {
        "content": "<p>so it's still just a cache, right?</p>",
        "id": 188465933,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1582043363
    },
    {
        "content": "<p>right</p>",
        "id": 188465959,
        "sender_full_name": "matklad",
        "timestamp": 1582043378
    },
    {
        "content": "<p>basically, the three lines starting from here <a href=\"http://sourceroslyn.io/#Microsoft.CodeAnalysis.CSharp/Compilation/SyntaxTreeSemanticModel.cs,1708\" target=\"_blank\" title=\"http://sourceroslyn.io/#Microsoft.CodeAnalysis.CSharp/Compilation/SyntaxTreeSemanticModel.cs,1708\">sourceroslyn.io/#Microsoft.CodeAnalysis.CSharp/Compilation/SyntaxTreeSemanticModel.cs,1708</a>, is the solution to all our API problems</p>",
        "id": 188466047,
        "sender_full_name": "matklad",
        "timestamp": 1582043409
    },
    {
        "content": "<p>hopefully :D</p>",
        "id": 188466059,
        "sender_full_name": "matklad",
        "timestamp": 1582043418
    },
    {
        "content": "<p>ah, nope, the core is actually the outer for</p>",
        "id": 188466103,
        "sender_full_name": "matklad",
        "timestamp": 1582043442
    },
    {
        "content": "<p><a href=\"http://sourceroslyn.io/#Microsoft.CodeAnalysis.CSharp/Compilation/SyntaxTreeSemanticModel.cs,1695\" target=\"_blank\" title=\"http://sourceroslyn.io/#Microsoft.CodeAnalysis.CSharp/Compilation/SyntaxTreeSemanticModel.cs,1695\">http://sourceroslyn.io/#Microsoft.CodeAnalysis.CSharp/Compilation/SyntaxTreeSemanticModel.cs,1695</a></p>",
        "id": 188466115,
        "sender_full_name": "matklad",
        "timestamp": 1582043450
    },
    {
        "content": "<p>Did a minimal thing here: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/3222\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/3222\">https://github.com/rust-analyzer/rust-analyzer/pull/3222</a></p>",
        "id": 188472715,
        "sender_full_name": "matklad",
        "timestamp": 1582047452
    },
    {
        "content": "<p>The funniest thing is that I think we don't need a strong identity for this to work. I need to think through this tomorrow, but it looks like the fact that we store syntax nodes in the cache solves the potential problem when we get two different trees due to LRU.</p>",
        "id": 188472904,
        "sender_full_name": "matklad",
        "timestamp": 1582047562
    },
    {
        "content": "<p>And yes, semancits creates source binder which creates source analyzer =/</p>",
        "id": 188473038,
        "sender_full_name": "matklad",
        "timestamp": 1582047637
    },
    {
        "content": "<p>Would strong identity still be worth having?</p>",
        "id": 188480625,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1582052617
    },
    {
        "content": "<p>well, this approach only works if we only obtain syntax nodes through the <code>Semantics</code> thing, right?</p>",
        "id": 188481772,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1582053406
    },
    {
        "content": "<p>Right. I was thinking it could be useful for someone else</p>",
        "id": 188486749,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1582056778
    },
    {
        "content": "<blockquote>\n<p>well, this approach only works if we only obtain syntax nodes through the Semantics thing, right?</p>\n</blockquote>\n<p>I think this is true for any identity based approach. If all you have is an identity, the only way to get something out of it is to look it up in a hashmap which was created by an entity that returned you this thing with identity</p>",
        "id": 188494902,
        "sender_full_name": "matklad",
        "timestamp": 1582062496
    },
    {
        "content": "<p>Lol, turns out rowan has a bug, in that it tries to use pointer equality, but unfortunately there's one more level of indiretcion, and i was comparing pointers to pointers :)</p>",
        "id": 189020298,
        "sender_full_name": "matklad",
        "timestamp": 1582638416
    },
    {
        "content": "<p>You should add a test for that...</p>",
        "id": 189021464,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1582639297
    },
    {
        "content": "<p>Was it wrong or only slower?</p>",
        "id": 189021532,
        "sender_full_name": "Laurențiu",
        "timestamp": 1582639335
    },
    {
        "content": "<p>wrong</p>",
        "id": 189021578,
        "sender_full_name": "matklad",
        "timestamp": 1582639364
    },
    {
        "content": "<p>But what changed? It still compares <code>ptr() == ptr()</code>...</p>",
        "id": 189021795,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1582639533
    },
    {
        "content": "<p>it's now a <code>*const NodeData</code>, rather than <code>*const *const NodeData</code></p>",
        "id": 189022056,
        "sender_full_name": "matklad",
        "timestamp": 1582639724
    },
    {
        "content": "<p>We can compare <code>*const NodeData</code> pointerwise because they are interned right?</p>",
        "id": 189022875,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1582640358
    }
]