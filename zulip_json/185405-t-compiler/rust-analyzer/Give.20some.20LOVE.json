[
    {
        "content": "<p>I just wanted to thank every one who has worked on Rust-Analyzer!! Today I was working on a Clippy lint and I renamed the lint that was inside of the <code>declare_clippy_lint</code> macro, RA succeeded! So expanding macros and linking to rustc internal crates THE PROGRESS IS AMAZING</p>",
        "id": 249841573,
        "sender_full_name": "DevinR528",
        "timestamp": 1629289939
    },
    {
        "content": "<p>This is indeed cool. I am wondering how does it even work? Is there any blog about completions inside proc-macro ?</p>",
        "id": 250027696,
        "sender_full_name": "technic93",
        "timestamp": 1629397872
    },
    {
        "content": "<p>no, only one that explains why it <em>doesn't</em> work <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span> <a href=\"https://rust-analyzer.github.io/blog/2020/03/30/macros-vs-rename.html\">https://rust-analyzer.github.io/blog/2020/03/30/macros-vs-rename.html</a></p>",
        "id": 250028225,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1629398094
    },
    {
        "content": "<p>well, not completion, but renames</p>",
        "id": 250028336,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1629398139
    },
    {
        "content": "<p>completion in macros works because we speculatively expand any macros the cursor is in: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/59aa0918662c62159ad591ed281dab026875fb04/crates/ide_completion/src/context.rs#L187-L219\">https://github.com/rust-analyzer/rust-analyzer/blob/59aa0918662c62159ad591ed281dab026875fb04/crates/ide_completion/src/context.rs#L187-L219</a></p>",
        "id": 250028378,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1629398160
    },
    {
        "content": "<p>It's hard to follow that code. Is there a TL;DR how you can trace back from the cursor to the transformed (by proc_macro) AST?</p>",
        "id": 250028808,
        "sender_full_name": "technic93",
        "timestamp": 1629398349
    },
    {
        "content": "<p>OK, do you want to say that you inject some special token into the tree before calling the macro, and then search that token in the output?</p>",
        "id": 250030371,
        "sender_full_name": "technic93",
        "timestamp": 1629399068
    },
    {
        "content": "<p>Yes, rust-analyzer keeps a map between input and output tokens for all macro invocations. We use the expansion result to figure out what to complete.</p>",
        "id": 250031219,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1629399427
    },
    {
        "content": "<p>Sorry for bothering you with stupid questions. But how is it possible? Is there some internal ids that are preserved inside proc-macro or do you search for some segments of AST that didn't change after transformation?</p>",
        "id": 250031871,
        "sender_full_name": "technic93",
        "timestamp": 1629399636
    },
    {
        "content": "<p>We just assign IDs to the input tokens. The macro naturally preserves them, so we can find them again in the output.</p>",
        "id": 250032607,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1629399779
    },
    {
        "content": "<p>Aha, wow. Didn't know that there are some internal ids hidden inside.</p>",
        "id": 250032813,
        "sender_full_name": "technic93",
        "timestamp": 1629399838
    },
    {
        "content": "<p>Thanks for explanations!</p>",
        "id": 250032884,
        "sender_full_name": "technic93",
        "timestamp": 1629399851
    }
]