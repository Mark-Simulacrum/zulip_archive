[
    {
        "content": "<p>We are now at just about 80% of expressions in RA itself having a complete type inferred <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> :</p>\n<div class=\"codehilite\"><pre><span></span>Database loaded, 21 roots\nCrates in this dir: 27\nTotal modules found: 230\nTotal declarations: 3760\nTotal functions: 2480\nTotal expressions: 49160\nExpressions of unknown type: 8156 (16%)\nExpressions of partially unknown type: 2432 (4%)\n</pre></div>\n\n\n<p>Of course there'll be some that are wrong (I can think of a few things), but I think it's nice progress :) For rustc, we're at 69%.</p>",
        "id": 159228558,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1550926880
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 159228629,
        "sender_full_name": "matklad",
        "timestamp": 1550927016
    },
    {
        "content": "<p>That means that one doesn't need traits 80% of the time, right? :)</p>",
        "id": 159228635,
        "sender_full_name": "matklad",
        "timestamp": 1550927038
    },
    {
        "content": "<p>Seems that way ;)</p>\n<p>(Though there's quite a few things in the code model API that we should probably put into traits...)</p>",
        "id": 159228995,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1550927672
    },
    {
        "content": "<p>oh yeah. We have like a dozen of <code>fn module(&amp;self)</code> :D</p>",
        "id": 159229010,
        "sender_full_name": "matklad",
        "timestamp": 1550927729
    },
    {
        "content": "<p>We do use quite a bit of traits for ast though</p>",
        "id": 159229017,
        "sender_full_name": "matklad",
        "timestamp": 1550927761
    },
    {
        "content": "<p>Hey! I'm currently working on <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/887\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/887\">rust-analyzer#887</a> to add Const / Static inference. I've gotten to a point where the inference works when the const is defined in the module scope (outside <code>fn test()</code>) but failing when the const is defined inside the function. I noticed that <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/7ffff9c74caae108db53366e3b90857b7c405c6c/crates/ra_hir/src/expr.rs#L931-L938\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/7ffff9c74caae108db53366e3b90857b7c405c6c/crates/ra_hir/src/expr.rs#L931-L938\">https://github.com/rust-analyzer/rust-analyzer/blob/7ffff9c74caae108db53366e3b90857b7c405c6c/crates/ra_hir/src/expr.rs#L931-L938</a> has TODO regarding consts etc. Can I attempt to add support for block defined consts together with <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/887\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/887\">rust-analyzer#887</a> or should that be done in a separate PR ?</p>",
        "id": 159317908,
        "sender_full_name": "vipentti",
        "timestamp": 1551078820
    },
    {
        "content": "<p>I would keep that separate, it's almost completely independent of constants: Block-level items need to be handled during import resolution (in <code>nameres.rs</code>). The TODO you're linking to is about handling the bodies of constants, i.e. what I wrote at the end of <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/887\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/887\">rust-analyzer#887</a> :)</p>",
        "id": 159319531,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551081446
    },
    {
        "content": "<p>Ah yes, thanks!</p>",
        "id": 159319655,
        "sender_full_name": "vipentti",
        "timestamp": 1551081607
    }
]