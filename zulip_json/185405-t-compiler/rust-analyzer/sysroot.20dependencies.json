[
    {
        "content": "<p>So, I found the reason why we don't find the <code>impl&lt;T&gt; Deref for Arc&lt;T&gt;</code> -- we can't resolve <code>core::ops::Deref</code> from <code>alloc</code> because we don't have a dependency from <code>alloc</code> to <code>core</code>. We currently only have dependencies from <code>std</code> to other crates in the sysroot. I assume this is just an oversight? I'll try hard-coding the <code>alloc</code> -&gt; <code>core</code> dependency as well and see what happens.</p>",
        "id": 168079328,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1560455401
    },
    {
        "content": "<p>Yeah, that's an oversight. The question is, how we should infer the dependencies? I'd say just hard-coding them would be good enough: we did that in IntelliJ, and, while ocassionally this was annoying when the sysroot was restructured, in general its a low-maintainance thing</p>",
        "id": 168084753,
        "sender_full_name": "matklad",
        "timestamp": 1560459644
    },
    {
        "content": "<p>how does rustc actually know the dependencies? does cargo pass them to it somehow?</p>",
        "id": 168085042,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1560459862
    },
    {
        "content": "<p>I think sysroot crates use <code>extern crate</code>. So, rustc sees <code>extern crate foo</code> and looks for <code>foo</code> in sysroot</p>",
        "id": 168085918,
        "sender_full_name": "matklad",
        "timestamp": 1560460541
    },
    {
        "content": "<p>in other words, the deps are sort-of ambiently defined</p>",
        "id": 168085930,
        "sender_full_name": "matklad",
        "timestamp": 1560460559
    },
    {
        "content": "<p>To faithully mimic it, we must add something like <code>sysroot: FxHashMap&lt;Name, Crate&gt;</code> to <code>CrateGraph</code>. But I think that sysroot concept is not really necessary, and I prefer to just expliceitelly list what depends on what</p>",
        "id": 168085998,
        "sender_full_name": "matklad",
        "timestamp": 1560460614
    },
    {
        "content": "<p>oh, right... yeah, I agree then</p>",
        "id": 168087521,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1560462069
    },
    {
        "content": "<p>though it might be not too hard to write a tool which automatically outputs the dependencies in the sysroot <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 168087608,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1560462146
    },
    {
        "content": "<p>Yeah, I <em>think</em> one even can perhaps run <code>cargo metadata</code> in rustc and extract that info. Altenatively, one can copy-paste from <a href=\"https://github.com/intellij-rust/intellij-rust/blob/f5ffcd619472574e94c8a7babc05db8b9f2ea421/src/main/kotlin/org/rust/cargo/util/RustCrateUtil.kt#L37-L72\" target=\"_blank\" title=\"https://github.com/intellij-rust/intellij-rust/blob/f5ffcd619472574e94c8a7babc05db8b9f2ea421/src/main/kotlin/org/rust/cargo/util/RustCrateUtil.kt#L37-L72\">https://github.com/intellij-rust/intellij-rust/blob/f5ffcd619472574e94c8a7babc05db8b9f2ea421/src/main/kotlin/org/rust/cargo/util/RustCrateUtil.kt#L37-L72</a> :D</p>",
        "id": 168087777,
        "sender_full_name": "matklad",
        "timestamp": 1560462287
    },
    {
        "content": "<p>FWIW sysroot deps will hopefully soon be in dep-info <a href=\"https://github.com/rust-lang/rust/pull/61727\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61727\">https://github.com/rust-lang/rust/pull/61727</a></p>",
        "id": 168097364,
        "sender_full_name": "simulacrum",
        "timestamp": 1560473129
    },
    {
        "content": "<p>w/o sysroot you don't really get to \"just compile\" crates that depend on alloc/std/core/proc_macro unless you explicitly always give crates access to them</p>",
        "id": 168097409,
        "sender_full_name": "simulacrum",
        "timestamp": 1560473174
    },
    {
        "content": "<p>at least in the rustc model</p>",
        "id": 168097412,
        "sender_full_name": "simulacrum",
        "timestamp": 1560473182
    }
]