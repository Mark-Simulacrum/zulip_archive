[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> are you around? I have a question about our handing of impls. Currently, we load both impl headers and items at the same time, I want to defer loading of times</p>",
        "id": 189790627,
        "sender_full_name": "matklad",
        "timestamp": 1583414886
    },
    {
        "content": "<p>But I am recolling that, during type inference, we do things like \"given a method name, find all methods with this name, and look up their traits\"</p>",
        "id": 189790658,
        "sender_full_name": "matklad",
        "timestamp": 1583414914
    },
    {
        "content": "<p>Do you know what exactly I am remembering? :-) I <em>think</em> I've seen this \"method name -&gt; impl\" code somewhere in rustc...</p>",
        "id": 189790691,
        "sender_full_name": "matklad",
        "timestamp": 1583414945
    },
    {
        "content": "<p>The reason I am asking is that, if we need this operation, than lazy-loading of impl bodies won't work :-(</p>",
        "id": 189790719,
        "sender_full_name": "matklad",
        "timestamp": 1583414969
    },
    {
        "content": "<p>well, for traits, we just go through all traits in scope and check whether they have a given method name. But for traits we don't need to look at impl bodies at all</p>",
        "id": 189790896,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1583415115
    },
    {
        "content": "<p>for inherent methods, we get all inherent impls that might match our receiver type and go through them to find a method with the given name</p>",
        "id": 189790965,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1583415151
    },
    {
        "content": "<p>Ahhh, right</p>",
        "id": 189790966,
        "sender_full_name": "matklad",
        "timestamp": 1583415151
    },
    {
        "content": "<p>Right, up front we need to know methods of <strong>traits</strong> and <strong>inherent</strong> impls.... This is sad</p>",
        "id": 189791069,
        "sender_full_name": "matklad",
        "timestamp": 1583415232
    },
    {
        "content": "<p>well, we don't need to know the inherent impl methods upfront, only when we have a method call on a type that matches the impl ;)</p>",
        "id": 189791160,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1583415294
    },
    {
        "content": "<p>Yeah, there's still might be significant wins here... I'll try to split <code>ImplData</code> into <code>ImplHeader</code> and <code>ImplItems = Vec&lt;AssocItemId&gt;</code> and see how it goes</p>",
        "id": 189791362,
        "sender_full_name": "matklad",
        "timestamp": 1583415450
    },
    {
        "content": "<p>Hm, switching to ImpHeader is actually trivial, but, for some reason,  it doesn't bring perf benefits I hoped for...</p>",
        "id": 189793103,
        "sender_full_name": "matklad",
        "timestamp": 1583416499
    },
    {
        "content": "<p><span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> so further investigation shows that this is not \"we parse bodies\", but actually \"we parse at all\". Just increasing LRU capacity makes stuff much faster</p>",
        "id": 189795009,
        "sender_full_name": "matklad",
        "timestamp": 1583417649
    },
    {
        "content": "<p>so... the problem is that we parse multiple times because we query the different things that lower from AST at different times? so it might be better to just put raw items and impl data into the same query?</p>",
        "id": 189797074,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1583418852
    },
    {
        "content": "<p>yeah, this is exactly what I am thinking about... </p>\n<p>Basically, we merge all various <code>x_data</code> and <code>raw_items</code> query into a single query which takes a file and produces an \"ast\" of items. </p>\n<p>For <code>crate_def_map</code> query, we additionally project this ast to include only names, visibilities, and children for module and enums.</p>",
        "id": 189797870,
        "sender_full_name": "matklad",
        "timestamp": 1583419320
    },
    {
        "content": "<p>We also call this thing \"FileStub\", because at this stage it becomes exactly the StubIndex from IntelliJ</p>",
        "id": 189798007,
        "sender_full_name": "matklad",
        "timestamp": 1583419389
    },
    {
        "content": "<p>It is also unclear how exactly does it square with expressions in types...</p>",
        "id": 189798048,
        "sender_full_name": "matklad",
        "timestamp": 1583419418
    },
    {
        "content": "<p>And it's also unclear if this <em>should</em> be a win?</p>\n<p>Like, right now we don't construct <code>StructData</code>s for various internal items at all. Why is it so hard to not compute things twice, but at the same to promptly forget and drop most of the freshly computed things?</p>",
        "id": 189798946,
        "sender_full_name": "matklad",
        "timestamp": 1583420002
    },
    {
        "content": "<p>... is that a rhetorical question? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 189801949,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1583421679
    },
    {
        "content": "<p>Yeah...</p>",
        "id": 189802117,
        "sender_full_name": "matklad",
        "timestamp": 1583421803
    },
    {
        "content": "<p>all in all I'd guess if we go through the AST anyway, collecting <code>StructData</code>s etc. shouldn't be much overhead, and they don't take much memory either, I hope</p>",
        "id": 189802469,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1583422026
    },
    {
        "content": "<p>Did a small experiment only for impls: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/3477\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/3477\">https://github.com/rust-analyzer/rust-analyzer/pull/3477</a></p>",
        "id": 189807572,
        "sender_full_name": "matklad",
        "timestamp": 1583424798
    },
    {
        "content": "<p>It is measurably faster, although it still does a ton of parsing: when we constuct <code>impls_in_trait</code>, we look at the generics at the <em>target</em> of the impl, and that still does parsin</p>",
        "id": 189807700,
        "sender_full_name": "matklad",
        "timestamp": 1583424854
    },
    {
        "content": "<p>measurable = 30%</p>\n<p>I guess we need to refactor out all our Data's <span aria-label=\"weary\" class=\"emoji emoji-1f629\" role=\"img\" title=\"weary\">:weary:</span></p>",
        "id": 189808762,
        "sender_full_name": "matklad",
        "timestamp": 1583425476
    },
    {
        "content": "<p>Re parsing, I recall we parse a lot and spend a surprising amount of time hashing syntax nodes. There's a fixme in rowan about it.</p>",
        "id": 189809713,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1583425952
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/3485\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/3485\">https://github.com/rust-analyzer/rust-analyzer/issues/3485</a>. Would be interested in feedback</p>",
        "id": 189880234,
        "sender_full_name": "matklad",
        "timestamp": 1583491387
    },
    {
        "content": "<p>What do you mean by stubs?</p>",
        "id": 189881012,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1583492100
    },
    {
        "content": "<p><a href=\"https://www.jetbrains.org/intellij/sdk/docs/basics/indexing_and_psi_stubs.html\" target=\"_blank\" title=\"https://www.jetbrains.org/intellij/sdk/docs/basics/indexing_and_psi_stubs.html\">https://www.jetbrains.org/intellij/sdk/docs/basics/indexing_and_psi_stubs.html</a></p>",
        "id": 189885601,
        "sender_full_name": "matklad",
        "timestamp": 1583496318
    },
    {
        "content": "<p><a href=\"https://www.jetbrains.org/intellij/sdk/docs/basics/indexing_and_psi_stubs/stub_indexes.html\" target=\"_blank\" title=\"https://www.jetbrains.org/intellij/sdk/docs/basics/indexing_and_psi_stubs/stub_indexes.html\">https://www.jetbrains.org/intellij/sdk/docs/basics/indexing_and_psi_stubs/stub_indexes.html</a></p>",
        "id": 189885606,
        "sender_full_name": "matklad",
        "timestamp": 1583496325
    },
    {
        "content": "<p>Starting drafting the stubs thing at <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/3720\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/3720\">https://github.com/rust-analyzer/rust-analyzer/pull/3720</a></p>",
        "id": 191762892,
        "sender_full_name": "matklad",
        "timestamp": 1585149994
    },
    {
        "content": "<p>Okay, thats one more level of IR...</p>",
        "id": 191767400,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1585151499
    },
    {
        "content": "<p>I wonder what the implications for memory consumption will be.</p>",
        "id": 191769038,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1585151991
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"258149\">std::Veetaha</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Lazy.20impl.20bodies/near/191769038\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Lazy.20impl.20bodies/near/191769038\">said</a>:</p>\n<blockquote>\n<p>I wonder what the implications for memory consumption will be.</p>\n</blockquote>\n<p>You say <del>tomato</del> IR, I say let's dump this into SQLite/LSIF :-)</p>",
        "id": 191779818,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1585156120
    }
]