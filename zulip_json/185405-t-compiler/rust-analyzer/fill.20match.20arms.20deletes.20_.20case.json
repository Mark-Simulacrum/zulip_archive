[
    {
        "content": "<p>I'd like to try fixing this issue: <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/4165\">https://github.com/rust-analyzer/rust-analyzer/issues/4165</a>.<br>\nWhen using the <code>fill match arms</code> assist on</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">E</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"c1\">// ...</span>\n<span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">E</span>::<span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>rust-analyzer replaces the _ with <code>E::B =&gt; {}, E::C =&gt; {}</code>.</p>\n<p>As <code>tspiteri</code> mentions, there are 3 ways of handling the instead:</p>\n<div class=\"codehilite\"><pre><span></span><code>1.    E::B | E::C =&gt; 2,\n2.    E::B =&gt; 2,\n      E::C =&gt; 2,\n3.    _ =&gt; 2\n</code></pre></div>\n\n\n<p>Which one should I be implementing?</p>",
        "id": 199604774,
        "sender_full_name": "dubi steinkek",
        "timestamp": 1591181653
    },
    {
        "content": "<p>So, I think we should check if the <code>=&gt; expr</code> is a trival expression (there's some code for this in the assist already) and, if it is the case, we <em>should</em> remove the arm.</p>\n<p>Otherwise, I think we should insert missing arms with <code>{}</code> before the wildcard</p>",
        "id": 199604951,
        "sender_full_name": "matklad",
        "timestamp": 1591181789
    },
    {
        "content": "<p>so, </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">E</span>::<span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">E</span>::<span class=\"n\">B</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">E</span>::<span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 199604975,
        "sender_full_name": "matklad",
        "timestamp": 1591181811
    },
    {
        "content": "<p>Why do you think we should remove the arm? That is not what I would be expecting as a user.</p>",
        "id": 199605197,
        "sender_full_name": "dubi steinkek",
        "timestamp": 1591181975
    },
    {
        "content": "<p>If the arm is trivial, I would expect it to be removed. What else woudl you do with a trivial arm, if you are going to fill others anyway?</p>",
        "id": 199605584,
        "sender_full_name": "matklad",
        "timestamp": 1591182223
    },
    {
        "content": "<p>Maybe you know there is only one match arm left, and want to have an explicit match arm instead of a placeholder</p>",
        "id": 199605796,
        "sender_full_name": "dubi steinkek",
        "timestamp": 1591182342
    },
    {
        "content": "<p>i.e. replace</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">some_option</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">panic</span><span class=\"o\">!</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>with </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">some_option</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">panic</span><span class=\"o\">!</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 199605876,
        "sender_full_name": "dubi steinkek",
        "timestamp": 1591182381
    },
    {
        "content": "<p>I'd say if the has <em>jsut</em> panic, it's fine to remove it. It has something else, its not trivial and won't be remoed</p>",
        "id": 199605975,
        "sender_full_name": "matklad",
        "timestamp": 1591182461
    },
    {
        "content": "<p>okay, I see. You said there is some code for checking whether an expression is trivial but I can't find it, what exactly should I look for?</p>",
        "id": 199606593,
        "sender_full_name": "dubi steinkek",
        "timestamp": 1591183018
    },
    {
        "content": "<p>or to determine whether the code is trivial should I just check whether the expression is a block or not?</p>",
        "id": 199606608,
        "sender_full_name": "dubi steinkek",
        "timestamp": 1591183040
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/7e2bca4ec356655fe47d50b466c34c34e7cae565/crates/ra_assists/src/handlers/fill_match_arms.rs#L77-L82\">https://github.com/rust-analyzer/rust-analyzer/blob/7e2bca4ec356655fe47d50b466c34c34e7cae565/crates/ra_assists/src/handlers/fill_match_arms.rs#L77-L82</a></p>",
        "id": 199606677,
        "sender_full_name": "matklad",
        "timestamp": 1591183095
    },
    {
        "content": "<p>Looks like I am remembering incorrectly -- it doesn't try to check if the expression to the right of <code>=&gt;</code> is \"trivial\"</p>",
        "id": 199606702,
        "sender_full_name": "matklad",
        "timestamp": 1591183117
    },
    {
        "content": "<p>It looks like <code>is_trivial</code> was removed in <a href=\"https://github.com/rust-analyzer/rust-analyzer/commit/6087c014608108e2b971608e214a74759743e95e\">https://github.com/rust-analyzer/rust-analyzer/commit/6087c014608108e2b971608e214a74759743e95e</a>. If I understand correctly an expression is not trivial if it is wrapped in block, right? So that shouln't be too hard to check.</p>",
        "id": 199607208,
        "sender_full_name": "dubi steinkek",
        "timestamp": 1591183559
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">expression_is_trivial</span><span class=\"p\">(</span><span class=\"n\">expr</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">ast</span>::<span class=\"n\">Expr</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ast</span>::<span class=\"n\">Expr</span>::<span class=\"n\">ArrayExpr</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ast</span>::<span class=\"n\">Expr</span>::<span class=\"n\">ReturnExpr</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ast</span>::<span class=\"n\">Expr</span>::<span class=\"n\">CallExpr</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ast</span>::<span class=\"n\">Expr</span>::<span class=\"n\">MethodCallExpr</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ast</span>::<span class=\"n\">Expr</span>::<span class=\"n\">RangeExpr</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ast</span>::<span class=\"n\">Expr</span>::<span class=\"n\">MacroCall</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ast</span>::<span class=\"n\">Expr</span>::<span class=\"n\">Literal</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ast</span>::<span class=\"n\">Expr</span>::<span class=\"n\">TupleExpr</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">exprs</span><span class=\"p\">().</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">e</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">expression_is_trivial</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">e</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ast</span>::<span class=\"n\">Expr</span>::<span class=\"n\">BoxExpr</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">expr</span><span class=\"p\">().</span><span class=\"n\">map_or</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">e</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">expression_is_trivial</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">e</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ast</span>::<span class=\"n\">Expr</span>::<span class=\"n\">RefExpr</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">expr</span><span class=\"p\">().</span><span class=\"n\">map_or</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">e</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">expression_is_trivial</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">e</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ast</span>::<span class=\"n\">Expr</span>::<span class=\"n\">PrefixExpr</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">expr</span><span class=\"p\">().</span><span class=\"n\">map_or</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">e</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">expression_is_trivial</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">e</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ast</span>::<span class=\"n\">Expr</span>::<span class=\"n\">CastExpr</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">expr</span><span class=\"p\">().</span><span class=\"n\">map_or</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">e</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">expression_is_trivial</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">e</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>how about this?</p>",
        "id": 199608166,
        "sender_full_name": "dubi steinkek",
        "timestamp": 1591184307
    },
    {
        "content": "<p>I'd maybe just used <code>expr.text() == \"{}\" || expr.text() == \"()\" || expr.text() == \"todo!()\"</code>, should be good enoguh</p>",
        "id": 199608256,
        "sender_full_name": "matklad",
        "timestamp": 1591184391
    },
    {
        "content": "<p>okay <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 199608323,
        "sender_full_name": "dubi steinkek",
        "timestamp": 1591184433
    }
]