[
    {
        "content": "<p>rust-analyzer is eating all my goddamn memory</p>",
        "id": 199208570,
        "sender_full_name": "Sydney Acksman",
        "timestamp": 1590784458
    },
    {
        "content": "<p>Who wants a 23 GB core dump file from it running on Ubuntu?</p>",
        "id": 199208684,
        "sender_full_name": "Sydney Acksman",
        "timestamp": 1590784539
    },
    {
        "content": "<p>What size of a project have you opened with RA?</p>",
        "id": 199208797,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1590784587
    },
    {
        "content": "<p>It's not too big, it's just lol-html <a href=\"https://github.com/cloudflare/lol-html\">https://github.com/cloudflare/lol-html</a></p>",
        "id": 199208995,
        "sender_full_name": "Sydney Acksman",
        "timestamp": 1590784688
    },
    {
        "content": "<p>Are you using vscode?</p>",
        "id": 199209148,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1590784794
    },
    {
        "content": "<p>Yep</p>",
        "id": 199209276,
        "sender_full_name": "Sydney Acksman",
        "timestamp": 1590784845
    },
    {
        "content": "<p>Try running <code>Rust Analyzer: Status</code> command<br>\n<a href=\"/user_uploads/4715/fx4KLIDK1v0MQ5dxB1HJ1O2X/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/fx4KLIDK1v0MQ5dxB1HJ1O2X/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/fx4KLIDK1v0MQ5dxB1HJ1O2X/image.png\"></a></div>",
        "id": 199209312,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1590784878
    },
    {
        "content": "<p>Alright I'll try it once it happens again. Shouldn't be too long...</p>",
        "id": 199209352,
        "sender_full_name": "Sydney Acksman",
        "timestamp": 1590784902
    },
    {
        "content": "<p>&lt;kbd&gt;Ctrl+Shift+P&lt;/kbd&gt;</p>",
        "id": 199209359,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1590784906
    },
    {
        "content": "<p>Oh wait it has live updates, nice</p>",
        "id": 199209466,
        "sender_full_name": "Sydney Acksman",
        "timestamp": 1590784938
    },
    {
        "content": "<p>Caught it using almost 15 GB</p>\n<div class=\"codehilite\"><pre><span></span><code>workspaces:\n140 packages loaded\n\nanalysis:\n2429 (33mb) files\n154143 (14mb) symbols\n1495 trees, 159 retained\n1052527 trees, 186 retained (macros)\n\n\nmemory:\n0b allocated 0b resident\ngc 16227 seconds ago\n\nrequests:\n 12488 textDocument/codeAction             2ms\n*12473 textDocument/codeAction             2ms\n 12474 textDocument/documentHighlight      0ms\n 12475 textDocument/codeAction             2ms\n 12477 textDocument/codeAction             2ms\n 12478 textDocument/codeAction             5ms\n 12481 textDocument/codeAction             2ms\n 12482 textDocument/codeAction             2ms\n 12483 textDocument/codeAction             2ms\n 12486 textDocument/codeAction             2ms\n</code></pre></div>",
        "id": 199416011,
        "sender_full_name": "Sydney Acksman",
        "timestamp": 1591041925
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> could this be something with interning the proc macros output?<br>\n<code>1052527 trees, 186 retained (macros)</code> seems ridiculous, but I may be wrong...</p>",
        "id": 199417333,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1591042677
    },
    {
        "content": "<p>proc macor enabled ?</p>",
        "id": 199417460,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1591042739
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/0BD1xV1j0uYDHZ06k3PPAcgX/image.png\">image.png</a> <br>\nnope</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/0BD1xV1j0uYDHZ06k3PPAcgX/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/0BD1xV1j0uYDHZ06k3PPAcgX/image.png\"></a></div>",
        "id": 199417555,
        "sender_full_name": "Sydney Acksman",
        "timestamp": 1591042796
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240522\">@Sydney Acksman</span>, also, what if you run <code>Rust Analyzer: run garbage collection</code> when you catch such a spike? (I am really just blindly guessing, I'd love if we could get some kind of stable reproduction....)</p>",
        "id": 199417633,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1591042821
    },
    {
        "content": "<p>Sometimes it collects, but if the garbage becomes too much it just doesn't work and I have to kill it.</p>",
        "id": 199417685,
        "sender_full_name": "Sydney Acksman",
        "timestamp": 1591042853
    },
    {
        "content": "<p>Collects as in \"all the gigabytes are freed\"?</p>",
        "id": 199417837,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1591042943
    },
    {
        "content": "<p>Yep.</p>",
        "id": 199417846,
        "sender_full_name": "Sydney Acksman",
        "timestamp": 1591042951
    },
    {
        "content": "<p>Hmm, that's at least something...</p>",
        "id": 199417868,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1591042972
    },
    {
        "content": "<p>Proc macro is not gc-abled. So I think it is not related. What platform you are in ? Are you working on Win32 related API? (winapi crate is one of the crate used macro heavily)</p>",
        "id": 199418069,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1591043066
    },
    {
        "content": "<p>Also, what version are you running?<br>\n<a href=\"user_uploads/4715/8NzqmrSEtDbR7LoXTA3H5aq-/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"user_uploads/4715/8NzqmrSEtDbR7LoXTA3H5aq-/image.png\" title=\"image.png\"><img src=\"user_uploads/4715/8NzqmrSEtDbR7LoXTA3H5aq-/image.png\"></a></div>",
        "id": 199418081,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1591043073
    },
    {
        "content": "<p>Ubuntu with VS Code<br>\nVersion is 05-25</p>",
        "id": 199418172,
        "sender_full_name": "Sydney Acksman",
        "timestamp": 1591043111
    },
    {
        "content": "<p>Cores are throwing work at each other non-stop. <a href=\"/user_uploads/4715/6MoeD4gmDDrEeKsynSApV7jE/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/6MoeD4gmDDrEeKsynSApV7jE/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/6MoeD4gmDDrEeKsynSApV7jE/image.png\"></a></div>",
        "id": 199418266,
        "sender_full_name": "Sydney Acksman",
        "timestamp": 1591043161
    },
    {
        "content": "<p>Wow, that's hot :D</p>",
        "id": 199418498,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1591043253
    },
    {
        "content": "<p>Plugged in laptop knows no bounds (except max operating temp)</p>",
        "id": 199418650,
        "sender_full_name": "Sydney Acksman",
        "timestamp": 1591043306
    },
    {
        "content": "<p>Is there any output in here (there should be <code>Rust Analyzer</code> entry, without the <code>Language Server Trace</code> channel)?<br>\n<a href=\"/user_uploads/4715/XR0L_2pCAr8zloUgfCSktX4I/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/XR0L_2pCAr8zloUgfCSktX4I/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/XR0L_2pCAr8zloUgfCSktX4I/image.png\"></a></div>",
        "id": 199418758,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1591043363
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[ERROR rust_analyzer::main_loop] overly long loop turn: 1.68208508s\n\nthread &#39;&lt;unknown&gt;&#39; has overflowed its stack\nfatal runtime error: stack overflow\n[Info  - 3:21:16 PM] Connection to server got closed. Server will restart.\n\nthread &#39;&lt;unknown&gt;&#39; has overflowed its stack\nfatal runtime error: stack overflow\n[Info  - 3:25:20 PM] Connection to server got closed. Server will restart.\n\nthread &#39;&lt;unknown&gt;&#39; has overflowed its stack\nfatal runtime error: stack overflow\n[Info  - 3:28:49 PM] Connection to server got closed. Server will restart.\n</code></pre></div>",
        "id": 199418937,
        "sender_full_name": "Sydney Acksman",
        "timestamp": 1591043427
    },
    {
        "content": "<p>There's a lot of \"long loop turn\" entries. Some as long as 479 seconds (which may be my computer going to sleep).</p>",
        "id": 199418989,
        "sender_full_name": "Sydney Acksman",
        "timestamp": 1591043461
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unknown&gt;&#39; has overflowed its stack\nfatal runtime error: stack overflow\n[Info  - 3:28:49 PM] Connection to server got closed. Server will restart.\n</code></pre></div>\n\n\n<p>Are there many more entires of this?</p>",
        "id": 199419044,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1591043492
    },
    {
        "content": "<p>Yep, 2 more above the loop turns</p>",
        "id": 199419156,
        "sender_full_name": "Sydney Acksman",
        "timestamp": 1591043533
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unknown&gt;&#39; has overflowed its stack\nfatal runtime error: stack overflow\n[Info  - 3:06:07 PM] Connection to server got closed. Server will restart.\n\nthread &#39;&lt;unknown&gt;&#39; has overflowed its stack\nfatal runtime error: stack overflow\n[Info  - 3:09:08 PM] Connection to server got closed. Server will restart.\n</code></pre></div>",
        "id": 199419201,
        "sender_full_name": "Sydney Acksman",
        "timestamp": 1591043558
    },
    {
        "content": "<p>Hm, I would expect there to be hundreds of such log entries. I am not sure how we handle the stack overflow of proc macros (or maybe it is our bad? cc <span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> ), but maybe this could lead to some memory leak?</p>",
        "id": 199419299,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1591043616
    },
    {
        "content": "<p>Also, the fact that we run proc macro server when proc macros are disabled is strange...</p>",
        "id": 199419414,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1591043663
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247335\">@Veetaha</span> Why you think it is proc-macro?</p>",
        "id": 199419469,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1591043698
    },
    {
        "content": "<p>Maybe <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/4453\">https://github.com/rust-analyzer/rust-analyzer/issues/4453</a></p>",
        "id": 199419534,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1591043733
    },
    {
        "content": "<p>Hmm, yes I'm wrong, it seems like <code>vscode-lanugageclient</code> restarts <code>rust-analyzer</code></p>",
        "id": 199419637,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1591043785
    },
    {
        "content": "<p>Are you doing anything... interesting when it occurs? or editing a particular file?</p>",
        "id": 199426109,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1591046781
    },
    {
        "content": "<p>I'm on windows and memory usage is fairly low</p>",
        "id": 199426142,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1591046801
    },
    {
        "content": "<p>I've found a file that causes it: <a href=\"https://github.com/cloudflare/lol-html/blob/master/src/rewriter/mod.rs\">https://github.com/cloudflare/lol-html/blob/master/src/rewriter/mod.rs</a></p>",
        "id": 199428533,
        "sender_full_name": "Sydney Acksman",
        "timestamp": 1591048247
    },
    {
        "content": "<p>Just holding this file open leaks memory like crazy.</p>",
        "id": 199428576,
        "sender_full_name": "Sydney Acksman",
        "timestamp": 1591048274
    },
    {
        "content": "<p>What happend you comment this line ? <a href=\"https://github.com/cloudflare/lol-html/blob/344063e669731f8151a4b506d85f3fa4cc0fbd8a/src/rewriter/mod.rs#L533\">https://github.com/cloudflare/lol-html/blob/344063e669731f8151a4b506d85f3fa4cc0fbd8a/src/rewriter/mod.rs#L533</a></p>",
        "id": 199429162,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1591048711
    },
    {
        "content": "<p>Nothing, it's still leaking</p>",
        "id": 199430048,
        "sender_full_name": "Sydney Acksman",
        "timestamp": 1591049311
    },
    {
        "content": "<p>One more question, you use using cargo nightly ?</p>",
        "id": 199430305,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1591049501
    },
    {
        "content": "<p>No, cargo is 1.43.0</p>",
        "id": 199430632,
        "sender_full_name": "Sydney Acksman",
        "timestamp": 1591049728
    },
    {
        "content": "<p>I guess it is related to proc-macro ? But I can't confirm that, maybe need time to investigate. But recently I don't have much time available ..</p>",
        "id": 199430931,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1591049962
    },
    {
        "content": "<p>I have the same behavior:<br>\n<a href=\"/user_uploads/4715/UJloAcrbWamKLu0p8Yqko1XQ/image.png\">image.png</a> <br>\nWhat is weird is that closing vscode doesn't help. For some reason there is a stray <code>rust-analyzer</code> process left. I wonder who doesn't cleanup <code>vscode-languageclient</code> or <code>we</code>?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/UJloAcrbWamKLu0p8Yqko1XQ/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/UJloAcrbWamKLu0p8Yqko1XQ/image.png\"></a></div>",
        "id": 199433027,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1591051688
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240522\">@Sydney Acksman</span>  thanks for the repo!</p>",
        "id": 199433077,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1591051760
    },
    {
        "content": "<p>Openned an issue <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/4698\">here</a></p>",
        "id": 199433870,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1591052314
    },
    {
        "content": "<p>Why would it be related to proc macros? They're disabled and <code>parse_macro</code> seems to be related to MBE? And it seemed to me that MBE tends to expand or parse too much.</p>",
        "id": 199455070,
        "sender_full_name": "Laurențiu",
        "timestamp": 1591080467
    },
    {
        "content": "<p>I can reproduce it too</p>",
        "id": 199482825,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1591100632
    },
    {
        "content": "<p>Hey, <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink  [he/him]</span> , did you get a chance to further look into <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/7330\">https://github.com/rust-analyzer/rust-analyzer/issues/7330</a> ?</p>",
        "id": 230510237,
        "sender_full_name": "matklad",
        "timestamp": 1615900851
    },
    {
        "content": "<p>Not much, I'm not really sure what the best interning solution is yet</p>",
        "id": 230511799,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1615901504
    },
    {
        "content": "<p><code>internment</code> offers Arc-based interning like I mentioned in that issue, so probably that</p>",
        "id": 230511913,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1615901547
    },
    {
        "content": "<p>Yeah, that might work. Although I am wonder if there are any \"out-of-the-box\" solutions here? I've been watching hand made hero (a guy codes a game from scratch, using only a C compiler, bare hands and loads of almond milk), and one interesting point made there is that RAII is bad, because it encourages creation and destruction of items \"one by one\". In reality though, you almost always want \"many\" of something, which you want to create and destroy in waves. Sort-of low-level \"pets vs cattle\" thing. </p>\n<p>That's exactly what happens with type refs, paths, and other similar things. They are individually allocated droplets of heap data pointing at each other, but I think most of the time we want either:</p>\n<ul>\n<li>create a bunch of them and persist them in db</li>\n<li>create them in some temporary scratch space</li>\n</ul>\n<p>I wonder if we should add a mutex-protected slot-map to DB to allocae things?</p>",
        "id": 230515458,
        "sender_full_name": "matklad",
        "timestamp": 1615902950
    },
    {
        "content": "<p>hmm, interesting</p>",
        "id": 230518692,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1615904071
    },
    {
        "content": "<p>though that sounds less out-of-the-box than just using an existing crate</p>",
        "id": 230518731,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1615904089
    },
    {
        "content": "<p>is the concern here that RAII of individual interned handles is too expensive because they contain <code>Arc</code>s?</p>",
        "id": 230518845,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1615904129
    },
    {
        "content": "<p>It's more that now everything needs to include the code to drop the things in case of panic, as opposed to bumpallo-like freeing in bunch.</p>",
        "id": 230520012,
        "sender_full_name": "matklad",
        "timestamp": 1615904532
    },
    {
        "content": "<p>The salsa interning provides a way to do something like that</p>",
        "id": 230520674,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1615904751
    },
    {
        "content": "<p>I wanted to add non-salsa interning because it is inconvenient to need a db everytime I want to intern or access interned data</p>",
        "id": 230520841,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1615904793
    },
    {
        "content": "<p>Hm, I think therading the context might be the right soln long-term. I am not a huge fan of truly global tables.</p>",
        "id": 230521379,
        "sender_full_name": "matklad",
        "timestamp": 1615904966
    },
    {
        "content": "<blockquote>\n<p>99mb FileItemTreeQuery</p>\n</blockquote>\n<p>First time I got it under 100 MB <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 233126892,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617586355
    },
    {
        "content": "<blockquote>\n<p>80mb FileItemTreeQuery</p>\n</blockquote>\n<p>Interning is making the memory usage stats inaccurate, but I'm counting this as a success anyways.</p>\n<p>Item trees now use \"only\" as much memory as the raw source code.</p>",
        "id": 233130249,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617590205
    },
    {
        "content": "<p>Impressive work <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink  [he/him]</span> !</p>\n<p>This will be the <em>smooooooolst</em> release of rust-analyzer</p>",
        "id": 233154613,
        "sender_full_name": "matklad",
        "timestamp": 1617616197
    }
]