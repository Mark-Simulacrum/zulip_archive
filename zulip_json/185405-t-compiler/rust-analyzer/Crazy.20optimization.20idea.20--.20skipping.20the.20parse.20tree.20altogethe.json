[
    {
        "content": "<p>We are at the point where parsing takes substantional amount of time. I <em>think</em> the main thing we need a parse tree for is the item tree. </p>\n<p>I wonder if we should think about producing it <em>without</em> parse tree at all... It seems approximately feasible to use evented parsing for this purpose, instead of a true syntax tree</p>",
        "id": 204204083,
        "sender_full_name": "matklad",
        "timestamp": 1594991738
    },
    {
        "content": "<p>Can the MBE stuff be disabled? I wonder how much faster parsing would get.</p>",
        "id": 204205763,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594992681
    },
    {
        "content": "<p>I think only by commenting it out</p>",
        "id": 204205886,
        "sender_full_name": "matklad",
        "timestamp": 1594992747
    },
    {
        "content": "<p>But where? :D</p>",
        "id": 204206004,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594992812
    },
    {
        "content": "<p>That I don't know without looking :)</p>",
        "id": 204206024,
        "sender_full_name": "matklad",
        "timestamp": 1594992831
    },
    {
        "content": "<p>Yeah, it's 10s vs. 18s, so not that much of a win</p>",
        "id": 204206275,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594992978
    },
    {
        "content": "<p>OTOH, we don't have that many macros (besides  <code>expect!</code> and <code>match_ast!</code>), so it's still a considerable speedup</p>",
        "id": 204206521,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594993125
    },
    {
        "content": "<p>(I stubbed out <code>mbe_expander::expand_rules</code>)</p>",
        "id": 204206586,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594993162
    },
    {
        "content": "<p>hm?</p>",
        "id": 204207065,
        "sender_full_name": "matklad",
        "timestamp": 1594993421
    },
    {
        "content": "<p>It's almost twice as fast?</p>",
        "id": 204207075,
        "sender_full_name": "matklad",
        "timestamp": 1594993430
    },
    {
        "content": "<p>Yeah, something like that</p>",
        "id": 204207083,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594993436
    },
    {
        "content": "<p>that feels like very much of a win :D</p>",
        "id": 204207137,
        "sender_full_name": "matklad",
        "timestamp": 1594993449
    },
    {
        "content": "<p>Meh, not even an order of magnitude :-)</p>",
        "id": 204207164,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594993465
    },
    {
        "content": "<p>On one hand, according to the argument you often make, skipping bodies would make us less likely to optimize the parser itself</p>",
        "id": 204207213,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594993501
    },
    {
        "content": "<p>On the other hand, <code>analysis-stats</code> still has to parse the bodies, so it's not like we'd no longer know how slow it is</p>",
        "id": 204207269,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594993533
    },
    {
        "content": "<p>On the third hand, I think you wanted diagnostics support for files that aren't open, so we'd still need the bodies for that</p>",
        "id": 204207373,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594993585
    },
    {
        "content": "<p>THe number of files in the current crate is far fewer than the total number of files</p>",
        "id": 204207433,
        "sender_full_name": "matklad",
        "timestamp": 1594993614
    },
    {
        "content": "<p>Like, bodies in libstd are completely uninteresting</p>",
        "id": 204207454,
        "sender_full_name": "matklad",
        "timestamp": 1594993627
    },
    {
        "content": "<p>Oh, right</p>",
        "id": 204207459,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594993629
    },
    {
        "content": "<p>Filed <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/5426\">https://github.com/rust-analyzer/rust-analyzer/issues/5426</a> for a small thing, if it makes sense</p>",
        "id": 204208864,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594994351
    },
    {
        "content": "<p>Does the parser have an event-based interface already or does it construct the syntax tree directly?</p>",
        "id": 204209564,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594994714
    },
    {
        "content": "<p>It does have an event-based interface</p>",
        "id": 204209710,
        "sender_full_name": "matklad",
        "timestamp": 1594994783
    },
    {
        "content": "<p>(see TreeSink trait)</p>",
        "id": 204209721,
        "sender_full_name": "matklad",
        "timestamp": 1594994789
    },
    {
        "content": "<p>I'm doing planning for specific support for delayed parsing in rowan/sorbus, so here's a quick question:</p>\n<p>Does the syntax tree need to hold on to the string contents of the skipped body (to facilitate parsing it later, on-demand), or is sticking a thunk of \"skipped N bytes\" enough?</p>",
        "id": 204253192,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1595016890
    },
    {
        "content": "<p>I'd love (at a mem-usage level, less so the implementation level <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span>) to be able to skip storing these huge unparsed strings, if we can always just refer back to a \"whole file\" view to do the full parse later</p>",
        "id": 204253336,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1595016981
    },
    {
        "content": "<p>Or if there are situations where we know with high probability that we won't need to parse the item bodies later</p>",
        "id": 204253368,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1595017006
    },
    {
        "content": "<p>(actually, no, <a href=\"https://github.com/CAD97/sorbus/pull/68\">the implementation of text-free thunks</a> was a lot simpler than I thought it was going to be.)</p>",
        "id": 204258782,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1595019791
    },
    {
        "content": "<p>It does have cost, though, so I definitely don't want to merge it unless r-a has a chance of using it.</p>",
        "id": 204258914,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1595019848
    },
    {
        "content": "<p>I think \"tree is a value\" is a very valuable design choice.</p>",
        "id": 204259084,
        "sender_full_name": "matklad",
        "timestamp": 1595019957
    },
    {
        "content": "<p>So, I'd say sorbus should store just <code>Box&lt;FnOnce() -&gt; GreenNode&gt;</code> as a thunk</p>",
        "id": 204259150,
        "sender_full_name": "matklad",
        "timestamp": 1595019978
    },
    {
        "content": "<p>THat way, client can store text, store tokens, remmeber the context like edition, etc</p>",
        "id": 204259175,
        "sender_full_name": "matklad",
        "timestamp": 1595019997
    },
    {
        "content": "<p>That does seem optimal, it's just that sticking a <code>Box&lt;dyn FnOnce&gt;</code> into the tree is difficult since its not erasable, and then synchronization issues as well</p>",
        "id": 204259872,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1595020423
    },
    {
        "content": "<p>As far as I can tell so far it's not possible for sorbus (as currently architectured) to do an <code>ArcSwap</code>-like trick to mostly transparently swap out a thunk for a real value</p>\n<p>Why? Because we're doing pointer un/erasure (on unsized types) and pointer mangling, which is definitely _not_ synchronized</p>",
        "id": 204260107,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1595020510
    },
    {
        "content": "<p>We can just stick in an extra layer of indirection, but <code>Box&lt;Box&lt;dyn Fn&gt;&gt;</code> feels wrong for a reasonable reason</p>",
        "id": 204260376,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1595020678
    }
]