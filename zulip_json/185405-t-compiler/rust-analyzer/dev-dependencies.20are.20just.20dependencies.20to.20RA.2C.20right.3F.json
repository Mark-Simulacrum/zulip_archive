[
    {
        "content": "<p>If I'm reading <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/ba8620398713d6f116dd1cce1a7e1cd6e3f97461/crates/project_model/src/cargo_workspace.rs#L300\">https://github.com/rust-analyzer/rust-analyzer/blob/ba8620398713d6f116dd1cce1a7e1cd6e3f97461/crates/project_model/src/cargo_workspace.rs#L300</a> correctly, all of a crates deps are nodes in the dependency graph, and the <code>DependencyKind</code> distinction as determined by <code>cargo-metadata</code> is ignored.</p>\n<p>And so when you're looking at a file, the symbols are coming from both the crate itself, and all of its <code>dependencies</code> and <code>dev-dependencies</code> from <code>Cargo.toml</code>?</p>",
        "id": 237887565,
        "sender_full_name": "woody77",
        "timestamp": 1620420365
    },
    {
        "content": "<p>Yeah, this seems correct</p>",
        "id": 237887919,
        "sender_full_name": "matklad",
        "timestamp": 1620420555
    },
    {
        "content": "<p>we actually want to do proper splitting of the crate into test and non-test in this sprint, but, IIRC, no one is actively working on it</p>",
        "id": 237887978,
        "sender_full_name": "matklad",
        "timestamp": 1620420594
    },
    {
        "content": "<p>I took a brief look today but haven't made much progress</p>",
        "id": 237890259,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620421649
    },
    {
        "content": "<p>(there's a very weird bug when using RA on rustc that I was hoping to fix with this, but I'm not sure it's the same one)</p>",
        "id": 237890317,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620421681
    },
    {
        "content": "<p>haha..  And I have a change for GN to do the opposite in its <code>rust-project.json</code> generation that I've been working on:  combining the test and non-test <code>crate</code> entries together.</p>",
        "id": 238507079,
        "sender_full_name": "woody77",
        "timestamp": 1620838190
    },
    {
        "content": "<p>Mostly because what we see is that the test-only deps all end up as unresolved symbols, as a source file gets mapped to the first-found crate entry, which is usually a non-test entry.</p>",
        "id": 238507251,
        "sender_full_name": "woody77",
        "timestamp": 1620838255
    },
    {
        "content": "<p>But if there's work to support multiple \"crates\" per file, with different configs (at least for test), that's _great_, and I'll hold off any more work in that direction.</p>",
        "id": 238507343,
        "sender_full_name": "woody77",
        "timestamp": 1620838304
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"301314\">woody77</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/dev-dependencies.20are.20just.20dependencies.20to.20RA.2C.20right.3F/near/238507251\">said</a>:</p>\n<blockquote>\n<p>Mostly because what we see is that the test-only deps all end up as unresolved symbols, as a source file gets mapped to the first-found crate entry, which is usually a non-test entry.</p>\n</blockquote>\n<p>we should fix this to choose the crate with the most enabled features (or some other heuristic)</p>",
        "id": 238507741,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620838489
    },
    {
        "content": "<p>we'll need it when we instantiate a crate multiple times anyways</p>",
        "id": 238507783,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620838513
    },
    {
        "content": "<p>I know <span class=\"user-mention\" data-user-id=\"116114\">@Paul Faria</span> has been thinking off and on about how to select a \"configuration\".</p>",
        "id": 238524308,
        "sender_full_name": "woody77",
        "timestamp": 1620845066
    },
    {
        "content": "<p>TBH, our <code>rust-project.json</code> is unlikely to be what was really what was originally intended, as we often have 4 or more entries for the same <code>root_module</code> source file (<code>lib.rs</code> or <code>main.rs</code>):</p>\n<ul>\n<li>target</li>\n<li>target unit-tests</li>\n<li>host</li>\n<li>host unit-tests</li>\n</ul>",
        "id": 238524686,
        "sender_full_name": "woody77",
        "timestamp": 1620845206
    },
    {
        "content": "<p>I should be getting more time to work on this starting next week. I've also started working on a doc to help align the questions and goals. I think I was trying to tackle too many problems at once the last time I worked on this</p>",
        "id": 238524691,
        "sender_full_name": "Paul Faria",
        "timestamp": 1620845208
    },
    {
        "content": "<p>The 4 targets above was what caused me a lot of trouble last time. It wasn't clear, given only a file path and a line, how to map which of the 4 crates above the query should be done against.</p>",
        "id": 238524995,
        "sender_full_name": "Paul Faria",
        "timestamp": 1620845314
    },
    {
        "content": "<p>And so one of my side investigations has been to take all ~5700 <code>crate</code> entries and combine the duplicate <code>root_modules</code> into the 3700 or so \"crates\" that RA is expecting.</p>",
        "id": 238525290,
        "sender_full_name": "woody77",
        "timestamp": 1620845418
    },
    {
        "content": "<p>Also, RA, during initialization, only lists the unique <code>root_modules</code> when going through its \"indexing\" phase, not the full count of the <code>crate</code> entries.</p>",
        "id": 238525435,
        "sender_full_name": "woody77",
        "timestamp": 1620845475
    },
    {
        "content": "<p>it should index all crates in the constructed crate graph</p>",
        "id": 238526875,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620846013
    },
    {
        "content": "<p>there's now a \"View Crate Graph\" command, maybe that helps debug?</p>",
        "id": 238527001,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620846052
    },
    {
        "content": "<p>One of the sources of duplication we have is that our build (and therefore our rust-project.json) is a mix of \"host\" and \"target\" compilation, using different arguments for rustc (different architectures, optimization, etc).</p>",
        "id": 241600235,
        "sender_full_name": "woody77",
        "timestamp": 1622845692
    },
    {
        "content": "<p>So there's a fair bit of duplication vs. what Cargo.toml contains.  and I've been sorting out how to best merge everything into fewer entries, that looks more like what RA expects from a Cargo.toml project)</p>",
        "id": 241600295,
        "sender_full_name": "woody77",
        "timestamp": 1622845793
    }
]