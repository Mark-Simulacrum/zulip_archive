[
    {
        "content": "<p><a href=\"https://github.com/IWANABETHATGUY/rowan-json\">https://github.com/IWANABETHATGUY/rowan-json</a>, i write a simple rowan-json parser , now i want to remove the token that equal to \"test\",</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rowan_json</span>::<span class=\"n\">syntax</span>::<span class=\"n\">SyntaxNode</span>::<span class=\"n\">new_root</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">green_node</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// let mutable_root = root.clone_for_update();</span>\n<span class=\"w\">    </span><span class=\"c1\">// mutable_root.first_child().unwrap().index();</span>\n<span class=\"w\">    </span><span class=\"c1\">// println!(\"{}\", mutable_root);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">preorder_with_tokens</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">event</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">rowan</span>::<span class=\"n\">WalkEvent</span>::<span class=\"n\">Enter</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">SyntaxKind</span>::<span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">string</span><span class=\"p\">[</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">text_range</span><span class=\"p\">()]</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">r#\"\"test\"\"#</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">parent</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">clone_for_update</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"c1\">// res.splice_children(index..index+1, vec![]);</span>\n<span class=\"w\">                    </span><span class=\"c1\">// println!(\"{}\", res);</span>\n<span class=\"w\">                    </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">splice_children</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">..</span><span class=\"n\">index</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[]);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">rowan</span>::<span class=\"n\">WalkEvent</span>::<span class=\"n\">Leave</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// println!(\"leave {:?}, \", node.kind());</span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>you could clone the repo and <code>cargo run</code>, expect to have json string remove all \"test\", but actual get </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"o\">{</span>\n  <span class=\"s2\">\"test\"</span>: <span class=\"s2\">\"result\"</span>,\n  <span class=\"s2\">\"that\"</span>: <span class=\"m\">2</span>,\n  <span class=\"s2\">\"array\"</span>: <span class=\"o\">[</span><span class=\"s2\">\"test\"</span>, <span class=\"s2\">\"\\u2222\"</span>, <span class=\"m\">20</span><span class=\"o\">]</span>,\n  <span class=\"s2\">\"res\"</span>: <span class=\"o\">{}</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>how should I do that?</p>",
        "id": 261214644,
        "sender_full_name": "IWANABETHATGUY",
        "timestamp": 1636696049
    },
    {
        "content": "<p>You can straight up remove something by using <code>detach</code> on it</p>",
        "id": 261235489,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1636713502
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300586\">Lukas Wirth</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/rowan.20change.20syntax.20node/near/261235489\">said</a>:</p>\n<blockquote>\n<p>You can straight up remove something by using <code>detach</code> on it</p>\n</blockquote>\n<p>Some(<a href=\"mailto:String@4..10\">String@4..10</a> \"\\\"test\\\"\")<br>\nthread 'main' panicked at 'immutable tree: {<br>\n  \"test\": \"result\",<br>\n  \"that\": 2,<br>\n  \"array\": [\"test\", \"\\u2222\", 20],<br>\n  \"res\": {}<br>\n}',<br>\nnew error</p>",
        "id": 261242151,
        "sender_full_name": "IWANABETHATGUY",
        "timestamp": 1636718198
    },
    {
        "content": "<p>You need to <code>clone_for_update</code> the tree first</p>",
        "id": 261243379,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1636719018
    },
    {
        "content": "<p>by default trees are immutable, with the function you clone a tree into a mutable copy of it that you can modifiy</p>",
        "id": 261243400,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1636719031
    },
    {
        "content": "<p>clone_for_update will craete a new tree, but how to patch the change to <br>\n<span class=\"user-mention silent\" data-user-id=\"300586\">Lukas Wirth</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/rowan.20change.20syntax.20node/near/261243400\">said</a>:</p>\n<blockquote>\n<p>by default trees are immutable, with the function you clone a tree into a mutable copy of it that you can modifiy</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rowan_json</span>::<span class=\"n\">syntax</span>::<span class=\"n\">SyntaxNode</span>::<span class=\"n\">new_root</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">green_node</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// let mutable_root = root.clone_for_update();</span>\n<span class=\"w\">    </span><span class=\"c1\">// mutable_root.first_child().unwrap().index();</span>\n<span class=\"w\">    </span><span class=\"c1\">// println!(\"{}\", mutable_root);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">preorder_with_tokens</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">event</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">rowan</span>::<span class=\"n\">WalkEvent</span>::<span class=\"n\">Enter</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">SyntaxKind</span>::<span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">string</span><span class=\"p\">[</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">text_range</span><span class=\"p\">()]</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">r#\"\"test\"\"#</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">clone_parent</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">parent</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">clone_for_update</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">clone_parent</span><span class=\"p\">.</span><span class=\"n\">children_with_tokens</span><span class=\"p\">().</span><span class=\"n\">nth</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">detach</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"c1\">// println!(\"{}\", clone_parent);</span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">rowan</span>::<span class=\"n\">WalkEvent</span>::<span class=\"n\">Leave</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// println!(\"leave {:?}, \", node.kind());</span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>result shows below</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"o\">{</span>\n  <span class=\"s2\">\"test\"</span>: <span class=\"s2\">\"result\"</span>,\n  <span class=\"s2\">\"that\"</span>: <span class=\"m\">2</span>,\n  <span class=\"s2\">\"array\"</span>: <span class=\"o\">[</span><span class=\"s2\">\"test\"</span>, <span class=\"s2\">\"\\u2222\"</span>, <span class=\"m\">20</span><span class=\"o\">]</span>,\n  <span class=\"s2\">\"res\"</span>: <span class=\"o\">{}</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>i clone_for_update for every parent node, but finally tree did't change at all. So how to get a CST tree that delete all  <code>test</code> string node</p>",
        "id": 261244089,
        "sender_full_name": "IWANABETHATGUY",
        "timestamp": 1636719531
    },
    {
        "content": "<p>Ah, you need to clone the root tree, and then traverse down to the node you want to delete in <strong><em>the cloned</em></strong> tree</p>",
        "id": 261244180,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1636719594
    },
    {
        "content": "<p>basically <code>clone_for_update</code> gives you a completely separate, fresh tree, so cloning multiple nodes will give you nodes of completely separate trees.</p>",
        "id": 261244246,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1636719624
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rowan_json</span>::<span class=\"n\">syntax</span>::<span class=\"n\">SyntaxNode</span>::<span class=\"n\">new_root</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">green_node</span><span class=\"p\">).</span><span class=\"n\">clone_for_update</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// let mutable_root = root.clone_for_update();</span>\n<span class=\"w\">    </span><span class=\"c1\">// mutable_root.first_child().unwrap().index();</span>\n<span class=\"w\">    </span><span class=\"c1\">// println!(\"{}\", mutable_root);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">preorder_with_tokens</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">event</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">rowan</span>::<span class=\"n\">WalkEvent</span>::<span class=\"n\">Enter</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">SyntaxKind</span>::<span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">string</span><span class=\"p\">[</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">text_range</span><span class=\"p\">()]</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">r#\"\"test\"\"#</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">parent</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">parent</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">parent</span><span class=\"p\">.</span><span class=\"n\">children_with_tokens</span><span class=\"p\">().</span><span class=\"n\">nth</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">detach</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"c1\">// println!(\"{}\", clone_parent);</span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">rowan</span>::<span class=\"n\">WalkEvent</span>::<span class=\"n\">Leave</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// println!(\"leave {:?}, \", node.kind());</span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>should work</p>",
        "id": 261244371,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1636719711
    },
    {
        "content": "<p>note though that if you iterate over a mutable tree and modify it like here , you will likely end up with spurious panics(iterating and mutating something at the same time is never a good idea), so ideally if you plan to modify more than one node in this case you should collect all nodes you wanna remove/change first</p>",
        "id": 261244456,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1636719756
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300586\">Lukas Wirth</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/rowan.20change.20syntax.20node/near/261244456\">said</a>:</p>\n<blockquote>\n<p>note though that if you iterate over a mutable tree and modify it like here , you will likely end up with spurious panics(iterating and mutating something at the same time is never a good idea), so ideally if you plan to modify more than one node in this case you should collect(in a vec or something) all nodes you wanna remove/change first, then do the actual removal/mutation in a separate pass</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">include_str!</span><span class=\"p\">(</span><span class=\"s\">\"../assets/test.json\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Parser</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"p\">.</span><span class=\"n\">parse</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rowan_json</span>::<span class=\"n\">syntax</span>::<span class=\"n\">SyntaxNode</span>::<span class=\"n\">new_root</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">green_node</span><span class=\"p\">).</span><span class=\"n\">clone_for_update</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// let mutable_root = root.clone_for_update();</span>\n<span class=\"w\">    </span><span class=\"c1\">// mutable_root.first_child().unwrap().index();</span>\n<span class=\"w\">    </span><span class=\"c1\">// println!(\"{}\", mutable_root);</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">range_list</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">preorder_with_tokens</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">event</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">rowan</span>::<span class=\"n\">WalkEvent</span>::<span class=\"n\">Enter</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">SyntaxKind</span>::<span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"c1\">// println!(\"{}\", clone_parent);</span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">rowan</span>::<span class=\"n\">WalkEvent</span>::<span class=\"n\">Leave</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">string</span><span class=\"p\">[</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">text_range</span><span class=\"p\">()]</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">r#\"\"test\"\"#</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">range_list</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">text_range</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// println!(\"leave {:?}, \", node.kind());</span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">range_list</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">range_list</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">for_each</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">range</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">covering_element</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">range</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">as_token</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">detach</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I use two pass to mutate the syntax tree, first pass collect range, second pass detach node.<br>\nbut actual result is :</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"o\">{</span>\n  : <span class=\"s2\">\"result\"</span>,\n  <span class=\"s2\">\"that\"</span>: <span class=\"m\">2</span>,\n  <span class=\"s2\">\"array\"</span>: <span class=\"o\">[</span><span class=\"s2\">\"test\"</span>, <span class=\"s2\">\"\\u2222\"</span>, <span class=\"m\">20</span><span class=\"o\">]</span>,\n  <span class=\"s2\">\"res\"</span>: <span class=\"o\">{}</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>expected is</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"o\">{</span>\n  : <span class=\"s2\">\"result\"</span>,\n  <span class=\"s2\">\"that\"</span>: <span class=\"m\">2</span>,\n  <span class=\"s2\">\"array\"</span>: <span class=\"o\">[</span><span class=\"s2\">\"\\u2222\"</span>, <span class=\"m\">20</span><span class=\"o\">]</span>,\n  <span class=\"s2\">\"res\"</span>: <span class=\"o\">{}</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>`\"test\" in array should be remove too.</p>",
        "id": 261260627,
        "sender_full_name": "IWANABETHATGUY",
        "timestamp": 1636727976
    },
    {
        "content": "<p>You shouldn't refetch the nodes via the text ranges, you can just save the nodes/tokens themselves in the vector</p>",
        "id": 261261316,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1636728291
    },
    {
        "content": "<p>so your range_list should be a Vec of SyntaxNode/SyntaxToken/SyntaxElement, whichever you use here</p>",
        "id": 261261415,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1636728342
    },
    {
        "content": "<p>it fails right now because you fetch the first match via range, delete that and that deletion moves the  text ranges so the second range lookup fails, but these lookups are unnecessary</p>",
        "id": 261261532,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1636728381
    },
    {
        "content": "<p>Since you already have the nodes before, so no need to convert between text range and node back and forth</p>",
        "id": 261261570,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1636728403
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300586\">Lukas Wirth</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/rowan.20change.20syntax.20node/near/261261415\">said</a>:</p>\n<blockquote>\n<p>so your range_list should be a Vec of SyntaxNode/SyntaxToken/SyntaxElement, whichever you use here</p>\n</blockquote>\n<p>That was awesome, Thanks a lot</p>",
        "id": 261261691,
        "sender_full_name": "IWANABETHATGUY",
        "timestamp": 1636728455
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300586\">Lukas Wirth</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/rowan.20change.20syntax.20node/near/261261415\">said</a>:</p>\n<blockquote>\n<p>so your range_list should be a Vec of SyntaxNode/SyntaxToken/SyntaxElement, whichever you use here</p>\n</blockquote>\n<p>forgive me, another stupid question</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">include_str!</span><span class=\"p\">(</span><span class=\"s\">\"../assets/test.json\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Parser</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"p\">.</span><span class=\"n\">parse</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rowan_json</span>::<span class=\"n\">syntax</span>::<span class=\"n\">SyntaxNode</span>::<span class=\"n\">new_root</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">green_node</span><span class=\"p\">).</span><span class=\"n\">clone_for_update</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// let mutable_root = root.clone_for_update();</span>\n<span class=\"w\">    </span><span class=\"c1\">// mutable_root.first_child().unwrap().index();</span>\n<span class=\"w\">    </span><span class=\"c1\">// println!(\"{}\", mutable_root);</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">range_list</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">preorder_with_tokens</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">event</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">rowan</span>::<span class=\"n\">WalkEvent</span>::<span class=\"n\">Enter</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">SyntaxKind</span>::<span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"c1\">// println!(\"{}\", clone_parent);</span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">rowan</span>::<span class=\"n\">WalkEvent</span>::<span class=\"n\">Leave</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">string</span><span class=\"p\">[</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">text_range</span><span class=\"p\">()]</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">r#\"\"test\"\"#</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">range_list</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// println!(\"leave {:?}, \", node.kind());</span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">range_list</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">range_list</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">for_each</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">range</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">.</span><span class=\"n\">as_token</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">replace_with</span><span class=\"p\">(</span><span class=\"n\">GreenToken</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">SyntaxKind</span>::<span class=\"nb\">String</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"s\">r#\"\"that\"\"#</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>what if i want to replace the String token with <code>\"test\"</code> string token, what should i do?</p>",
        "id": 261263084,
        "sender_full_name": "IWANABETHATGUY",
        "timestamp": 1636729029
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300586\">Lukas Wirth</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/rowan.20change.20syntax.20node/near/261261316\">said</a>:</p>\n<blockquote>\n<p>You shouldn't refetch the nodes via the text ranges, you can just save the nodes/tokens themselves in the vector</p>\n</blockquote>\n<p>I Would like to add more document about how to mutate the syntax node,  please forgive me.</p>",
        "id": 261263961,
        "sender_full_name": "IWANABETHATGUY",
        "timestamp": 1636729317
    },
    {
        "content": "<p>I assume the <code>replace_with</code> panics?</p>",
        "id": 261264510,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1636729525
    },
    {
        "content": "<p>or what is the problem here</p>",
        "id": 261264524,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1636729532
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300586\">Lukas Wirth</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/rowan.20change.20syntax.20node/near/261264524\">said</a>:</p>\n<blockquote>\n<p>or what is the problem here</p>\n</blockquote>\n<p>actually nothing happen, <br>\nthe finally json stirng is </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"o\">{</span>\n  <span class=\"s2\">\"test\"</span>: <span class=\"s2\">\"result\"</span>,\n  <span class=\"s2\">\"that\"</span>: <span class=\"m\">2</span>,\n  <span class=\"s2\">\"array\"</span>: <span class=\"o\">[</span><span class=\"s2\">\"test\"</span>, <span class=\"s2\">\"\\u2222\"</span>, <span class=\"m\">20</span><span class=\"o\">]</span>,\n  <span class=\"s2\">\"res\"</span>: <span class=\"o\">{}</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>the same as original json string, but expected is </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"o\">{</span>\n  <span class=\"s2\">\"that\"</span>: <span class=\"s2\">\"result\"</span>,\n  <span class=\"s2\">\"that\"</span>: <span class=\"m\">2</span>,\n  <span class=\"s2\">\"array\"</span>: <span class=\"o\">[</span><span class=\"s2\">\"that\"</span>, <span class=\"s2\">\"\\u2222\"</span>, <span class=\"m\">20</span><span class=\"o\">]</span>,\n  <span class=\"s2\">\"res\"</span>: <span class=\"o\">{}</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 261265715,
        "sender_full_name": "IWANABETHATGUY",
        "timestamp": 1636729942
    },
    {
        "content": "<p>Ah, <code>replace_with</code> isnt mutable stuff, that function returns a new modified copy of the tree</p>",
        "id": 261266194,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1636730083
    },
    {
        "content": "<p>You need to use splice/splice_children</p>",
        "id": 261266325,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1636730133
    },
    {
        "content": "<p>See <a href=\"https://github.com/Veykril/rust-analyzer/blob/0082fd785536fd94d0a093cd619a8e571167b439\\crates\\syntax\\src\\ted.rs#L141\">https://github.com/Veykril/rust-analyzer/blob/0082fd785536fd94d0a093cd619a8e571167b439\\crates\\syntax\\src\\ted.rs#L141</a></p>",
        "id": 261266336,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1636730141
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300586\">Lukas Wirth</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/rowan.20change.20syntax.20node/near/261266336\">said</a>:</p>\n<blockquote>\n<p>See <a href=\"https://github.com/Veykril/rust-analyzer/blob/0082fd785536fd94d0a093cd619a8e571167b439\\crates\\syntax\\src\\ted.rs#L141\">https://github.com/Veykril/rust-analyzer/blob/0082fd785536fd94d0a093cd619a8e571167b439\\crates\\syntax\\src\\ted.rs#L141</a></p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">parent</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">splice_children</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">()</span><span class=\"o\">..</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">NodeOrToken</span>::<span class=\"n\">Token</span><span class=\"p\">(</span><span class=\"n\">SyntaxToken</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"c1\">// NodeOrToken::Token(node.clone()),</span>\n<span class=\"w\">                </span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>so how could i create a new SyntaxToken?</p>",
        "id": 261270818,
        "sender_full_name": "IWANABETHATGUY",
        "timestamp": 1636732061
    },
    {
        "content": "<p>I think you have to go through <code>SyntaxNode::new_root</code>(<code>SyntaxNode::new_root_mut</code> in your case)then fetch the token through that</p>",
        "id": 261271898,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1636732499
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300586\">Lukas Wirth</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/rowan.20change.20syntax.20node/near/261271898\">said</a>:</p>\n<blockquote>\n<p>I think you have to go through <code>SyntaxNode::new_root</code>(<code>SyntaxNode::new_root_mut</code> in your case)then fetch the token through that</p>\n</blockquote>\n<p>Thanks again, but I am wonder why there is not a contructor to build a new SyntaxToken, fetch the SyntaxToken from <code>new_root</code> is not efficient.</p>",
        "id": 261333798,
        "sender_full_name": "IWANABETHATGUY",
        "timestamp": 1636770194
    }
]