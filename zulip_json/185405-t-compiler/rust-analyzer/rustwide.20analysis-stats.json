[
    {
        "content": "<p>It might be a fun project to run the RA analysis over a set of popular Rust repost on GitHub to find any crashes/hangs. But we might as wall wait until <code>chalk</code> is tested in <code>rustc</code></p>",
        "id": 228064306,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614439318
    },
    {
        "content": "<p>rust-craterizer?</p>",
        "id": 228064363,
        "sender_full_name": "matklad",
        "timestamp": 1614439362
    },
    {
        "content": "<p>We still need to get all rustc tests green for Chalk integration</p>",
        "id": 228064447,
        "sender_full_name": "detrumi",
        "timestamp": 1614439449
    },
    {
        "content": "<p>But after that, yeah that's a good way to find issues</p>",
        "id": 228064495,
        "sender_full_name": "detrumi",
        "timestamp": 1614439475
    },
    {
        "content": "<p>Note that a good first step would be not crashing with <code>rust-analyzer analysis-stats --parallel --with-deps .</code> on parity's substrate</p>",
        "id": 228065070,
        "sender_full_name": "matklad",
        "timestamp": 1614440125
    },
    {
        "content": "<p>Currently dies with</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;index out of bounds: the len is 1 but the index is 4&#39;, crates/hir_def/src/visibility.rs:170:37\nstack backtrace:\n   0: rust_begin_unwind\n             at /rustc/cb75ad5db02783e8b0222fee363c5f63f7e2cf5b/library/std/src/panicking.rs:493:5\n   1: core::panicking::panic_fmt\n             at /rustc/cb75ad5db02783e8b0222fee363c5f63f7e2cf5b/library/core/src/panicking.rs:92:14\n   2: core::panicking::panic_bounds_check\n             at /rustc/cb75ad5db02783e8b0222fee363c5f63f7e2cf5b/library/core/src/panicking.rs:69:5\n   3: hir_def::visibility::Visibility::max\n   4: hir_def::nameres::collector::DefCollector::update_recursive\n   5: hir_def::nameres::collector::DefCollector::record_resolved_import\n   6: hir_def::nameres::collector::DefCollector::resolve_imports\n   7: hir_def::nameres::collector::collect_defs\n   8: hir_def::nameres::DefMap::block_def_map_query\n</code></pre></div>\n<p>(cc <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink  [he/him]</span> )</p>",
        "id": 228065112,
        "sender_full_name": "matklad",
        "timestamp": 1614440164
    },
    {
        "content": "<p>(visibility there reminrds me of that bug with macros)</p>",
        "id": 228065147,
        "sender_full_name": "matklad",
        "timestamp": 1614440189
    },
    {
        "content": "<p>Repro:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">Tr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Tr</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>...except it, again, doesn't happen when making this a test <span aria-label=\"angry cat\" class=\"emoji emoji-1f63e\" role=\"img\" title=\"angry cat\">:angry_cat:</span></p>",
        "id": 228073397,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1614449201
    },
    {
        "content": "<p>it would be neat if we could print query stacks during panic like rustc can</p>",
        "id": 228073493,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1614449307
    },
    {
        "content": "<p>That one doesn't panic for me</p>",
        "id": 228073792,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614449608
    },
    {
        "content": "<p>oh lemme guess, only happens in submodules again</p>",
        "id": 228075359,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1614451325
    },
    {
        "content": "<p>yup</p>",
        "id": 228075381,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1614451364
    },
    {
        "content": "<p>what seems to happen is that the item's visibility gets resolved to the containing module, because we treat the default visibility as <code>pub(self)</code>, and <code>self</code> resolves to the containing module</p>",
        "id": 228076160,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1614452296
    },
    {
        "content": "<p><code>Visibility::max</code> does not handle visibilities from outside the given <code>DefMap</code> (which I think is correct) and panics</p>",
        "id": 228076174,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1614452338
    },
    {
        "content": "<p>The substrate codebase now runs into the chalk recurson limit:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;overflow depth reached&#39;, /home/jonas/.cargo/registry/src/github.com-1ecc6299db9ec823/chalk-recursive-0.59.0/src/stack.rs:51:13\nstack backtrace:\n   0: std::panicking::begin_panic\n   1: chalk_recursive::stack::Stack::push\n   2: &lt;chalk_recursive::recursive::Solver&lt;I&gt; as chalk_recursive::solve::SolveDatabase&lt;I&gt;&gt;::solve_goal\n   3: chalk_recursive::fulfill::Fulfill&lt;I,Solver&gt;::prove\n   4: chalk_recursive::fulfill::Fulfill&lt;I,Solver&gt;::solve\n</code></pre></div>\n<p>It then pegs a core for hours while using 50 GB of RAM, it might be stuck in chalk or the type inference code:</p>\n<div class=\"codehilite\"><pre><span></span><code>(gdb) bt\n#0  0x000056188c21f325 in &lt;salsa::derived::DerivedStorage&lt;Q,MP&gt; as salsa::plumbing::QueryStorageOps&lt;Q&gt;&gt;::try_fetch ()\n#1  0x000056188c0c4e55 in &lt;DB as hir_ty::db::HirDatabase&gt;::trait_solve::__shim ()\n#2  0x000056188ba8d8f9 in &lt;DB as hir_ty::db::HirDatabase&gt;::trait_solve ()\n#3  0x000056188c18b705 in hir_ty::infer::InferenceContext::resolve_ty_as_possible::hdcbd7f0297ba5860 ()\n#4  0x000056188c082eab in hir_ty::infer::unify::Canonicalized&lt;T&gt;::apply_solution ()\n#5  0x000056188c18b925 in hir_ty::infer::InferenceContext::resolve_ty_as_possible::hdcbd7f0297ba5860 ()\n#6  0x000056188c082eab in hir_ty::infer::unify::Canonicalized&lt;T&gt;::apply_solution ()\n#7  0x000056188c18b925 in hir_ty::infer::InferenceContext::resolve_ty_as_possible::hdcbd7f0297ba5860 ()\n#8  0x000056188c082eab in hir_ty::infer::unify::Canonicalized&lt;T&gt;::apply_solution ()\n#9  0x000056188c18b925 in hir_ty::infer::InferenceContext::resolve_ty_as_possible::hdcbd7f0297ba5860 ()\n#10 0x000056188c082eab in hir_ty::infer::unify::Canonicalized&lt;T&gt;::apply_solution ()\n#11 0x000056188c18b925 in hir_ty::infer::InferenceContext::resolve_ty_as_possible::hdcbd7f0297ba5860 ()\n#12 0x000056188c082eab in hir_ty::infer::unify::Canonicalized&lt;T&gt;::apply_solution ()\n#13 0x000056188c18b925 in hir_ty::infer::InferenceContext::resolve_ty_as_possible::hdcbd7f0297ba5860 ()\n#14 0x000056188c082eab in hir_ty::infer::unify::Canonicalized&lt;T&gt;::apply_solution ()\n#15 0x000056188c18b925 in hir_ty::infer::InferenceContext::resolve_ty_as_possible::hdcbd7f0297ba5860 ()\n#16 0x000056188c082eab in hir_ty::infer::unify::Canonicalized&lt;T&gt;::apply_solution ()\n#17 0x000056188c18b925 in hir_ty::infer::InferenceContext::resolve_ty_as_possible::hdcbd7f0297ba5860 ()\n#18 0x000056188c1791a7 in hir_ty::infer::path::&lt;impl hir_ty::infer::InferenceContext&gt;::infer_path ()\n#19 0x000056188c17af73 in hir_ty::infer::expr::&lt;impl hir_ty::infer::InferenceContext&gt;::infer_expr_inner ()\n#20 0x000056188c17b653 in hir_ty::infer::expr::&lt;impl hir_ty::infer::InferenceContext&gt;::infer_expr_inner ()\n#21 0x000056188c179c15 in hir_ty::infer::expr::&lt;impl hir_ty::infer::InferenceContext&gt;::infer_expr ()\n#22 0x000056188c17e6a1 in hir_ty::infer::expr::&lt;impl hir_ty::infer::InferenceContext&gt;::infer_expr_inner ()\n</code></pre></div>",
        "id": 228795532,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1614872815
    },
    {
        "content": "<p>Should've used \"stress testing trait inference\" as an example of blockchain application on reddit</p>",
        "id": 228795908,
        "sender_full_name": "matklad",
        "timestamp": 1614872929
    }
]