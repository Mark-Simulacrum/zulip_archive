[
    {
        "content": "<p>When I tab complete something (using VSCode), I often will get a list of suggestions that are just based on text suggestions (they have the 'abc' icon next to the suggestion).  This list of completions comes up immediately, without delay.  If I dismiss the tab complete menu and then immediately bring it up again with ctrl+space, the list of suggestions is then what I expect from RA (that is, full of the methods and fields that I expect).  This is not a new issue, but only recently have I been annoyed enough to report it.  Is this a known issue, or has anyone else experienced this?</p>",
        "id": 269462223,
        "sender_full_name": "Andrew Chin (eminence)",
        "timestamp": 1643223189
    },
    {
        "content": "<p>It's a known issue</p>",
        "id": 269462385,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1643223247
    },
    {
        "content": "<p>Ah, very good.  ok thanks</p>",
        "id": 269462551,
        "sender_full_name": "Andrew Chin (eminence)",
        "timestamp": 1643223319
    },
    {
        "content": "<p>Do you use copilot?</p>",
        "id": 269464332,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1643223948
    },
    {
        "content": "<p>I'm having the same issue and I don't use copilot <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 269465881,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1643224544
    },
    {
        "content": "<p>Do you also immediately get text based suggestions or only after a delay?</p>",
        "id": 269467943,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1643225364
    },
    {
        "content": "<p>The immediate part made me think of vscodes default <code>\"editor.suggest.snippetsPreventQuickSuggestions\": true</code> setting which can cause copilot to straight up prevent completions, hence why I asked</p>",
        "id": 269468092,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1643225408
    },
    {
        "content": "<p>no, i don't use copilot.  the text-based suggestions come up instantly</p>",
        "id": 269468629,
        "sender_full_name": "Andrew Chin (eminence)",
        "timestamp": 1643225641
    },
    {
        "content": "<p>(generally automatically after i press <code>.</code>)</p>",
        "id": 269468722,
        "sender_full_name": "Andrew Chin (eminence)",
        "timestamp": 1643225664
    },
    {
        "content": "<p>Hmm, can you set the following in your vscode settings, restart the server, do the completion and check the server logs?</p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"w\">    </span><span class=\"nt\">\"rust-analyzer.server.extraEnv\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nt\">\"RA_PROFILE\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"handle_completion=*\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 269469040,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1643225785
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/LTj3VZHcdReNyYUSPKR0Bm0A/image.png\">image.png</a> These logs that is(the tab only exists if there are logs in it)</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/LTj3VZHcdReNyYUSPKR0Bm0A/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/LTj3VZHcdReNyYUSPKR0Bm0A/image.png\"></a></div>",
        "id": 269469104,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1643225819
    },
    {
        "content": "<p>will do.  this issue is surprisingly hard to reproduce on-demand, but it happens often enough that i'm sure i'll run into it soon enough</p>",
        "id": 269469137,
        "sender_full_name": "Andrew Chin (eminence)",
        "timestamp": 1643225833
    },
    {
        "content": "<p>It's odd that the text based ones happen immediately, they usually appear if we take too long calculating completions but that should cause a noticable delay</p>",
        "id": 269469230,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1643225879
    },
    {
        "content": "<p>my mental model might be wrong, but it feels like RA takes a little bit of time to generate the completions, but VS isn't waiting for RA and just shows the text-based completions</p>",
        "id": 269469334,
        "sender_full_name": "Andrew Chin (eminence)",
        "timestamp": 1643225913
    },
    {
        "content": "<p>(i checked my settings and I don't see <code>snippetsPreventQuickSuggestiosn</code> anywhere)</p>",
        "id": 269469449,
        "sender_full_name": "Andrew Chin (eminence)",
        "timestamp": 1643225974
    },
    {
        "content": "<p>fwiw, this behaviour is something I observe quite often when \"typing over\" the first suggestion popup because I want to narrow the list of candidates</p>",
        "id": 269469742,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1643226088
    },
    {
        "content": "<p>hm, i see a new \"Rust Analyzer Language Server Trace\" option in the VSCode \"Output\" tab, but it's empty</p>",
        "id": 269470187,
        "sender_full_name": "Andrew Chin (eminence)",
        "timestamp": 1643226267
    },
    {
        "content": "<p><code>Trace</code> is the wrong one, you want the non trace one, but as said  it only exists if there have been logging events for it</p>",
        "id": 269470245,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1643226294
    },
    {
        "content": "<p>from a quick check: starting from <code>thing</code> without a <code>.</code>, typing <code>.</code> immediately brings up the correct r-a list of suggestions. Typing on slowly letter by letter narrows it as you'd expect. Typing on quickly shows no list at all. Typing on slowly _and then quickly_ also doesn't show any list either, or shows the VSC list once you get to a few letters.</p>",
        "id": 269470279,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1643226313
    },
    {
        "content": "<p>Ye that problem is known</p>",
        "id": 269470325,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1643226334
    },
    {
        "content": "<p>I don't remember the current state of things for that problem unfortunately</p>",
        "id": 269470439,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1643226371
    },
    {
        "content": "<p>also, if i can capture this problem in a video, would that be useful to the team?</p>",
        "id": 269470507,
        "sender_full_name": "Andrew Chin (eminence)",
        "timestamp": 1643226410
    },
    {
        "content": "<p>From <code>thing.</code> the VSC list is always there for fast typing - it seems like once it is in that mode the r-a list just doesn't come back (while the VSC list is active)</p>",
        "id": 269470511,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1643226412
    },
    {
        "content": "<p>That sounds odd, though I also have text based suggestions disabled entirely for rust files <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 269470737,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1643226505
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"222286\">Andrew Chin (eminence)</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/tab.20completion.20'abc'.20suggestions/near/269470507\">말함</a>:</p>\n<blockquote>\n<p>also, if i can capture this problem in a video, would that be useful to the team?</p>\n</blockquote>\n<p>probably not</p>",
        "id": 269470856,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1643226549
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/7560\">https://github.com/rust-analyzer/rust-analyzer/issues/7560</a> is the issue for this i think</p>",
        "id": 269470863,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1643226553
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300586\">Lukas Wirth</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/tab.20completion.20'abc'.20suggestions/near/269467943\">said</a>:</p>\n<blockquote>\n<p>Do you also immediately get text based suggestions or only after a delay?</p>\n</blockquote>\n<p>There is no delay:<br>\n<a href=\"/user_uploads/4715/nPKz2DLbK5Zg0eN-W72yhkQd/Peek-2022-01-26-23-03.gif\">Peek-2022-01-26-23-03.gif</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/nPKz2DLbK5Zg0eN-W72yhkQd/Peek-2022-01-26-23-03.gif\" title=\"Peek-2022-01-26-23-03.gif\"><img src=\"/user_uploads/4715/nPKz2DLbK5Zg0eN-W72yhkQd/Peek-2022-01-26-23-03.gif\"></a></div><p>(when RA suggestion show up it's me hitting esc to hide the \"abc\" suggestions and ^space to show the RA suggestions)</p>",
        "id": 269473199,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1643227488
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300586\">Lukas Wirth</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/tab.20completion.20'abc'.20suggestions/near/269469040\">said</a>:</p>\n<blockquote>\n<p>Hmm, can you set the following in your vscode settings, restart the server, do the completion and check the server logs?</p>\n<p><div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"w\">    </span><span class=\"nt\">\"rust-analyzer.server.extraEnv\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nt\">\"RA_PROFILE\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"handle_completion=*\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Even with this setting and after triggering RA siggestions, \"Rust Analuzer Language Server\" doesn't seem to appear in the output <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 269476021,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1643228521
    },
    {
        "content": "<p>Ah that might be the wrong format, try <code>handle_completion&gt;10</code> then</p>",
        "id": 269477220,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1643229032
    },
    {
        "content": "<p>Yep, that works.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>some logs, if they help</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>   55ms - handle_completion\n       44ms - CompletionContext::new\n           33ms - descend_into_macros\n               33ms - Semantics::analyze_impl\n                   31ms - SourceBinder::to_module_def\n                       31ms - crate_def_map:wait\n                        0   - crate_def_map:wait (2 calls)\n                        0   - relevant_crates (1 calls)\n                    0   - crate_def_map:wait (2 calls)\n           10ms - CompletionContext::expand_and_fill (1 calls)\n            0   - Semantics::analyze_impl (1 calls)\n            0   - crate_def_map:wait (1 calls)\n       11ms - complete_unqualified_path\n           11ms - CompletionContext::process_all_names\n               11ms - render_resolution\n                   11ms - infer:wait @ test\n                0   - crate_def_map:wait (1 calls)\n            0   - item::Builder::build (3 calls)\n        0   - item::Builder::build (23 calls)\n  102ms - handle_completion\n       90ms - complete_unqualified_path\n           90ms - CompletionContext::process_all_names\n                0   - crate_def_map:wait (227 calls)\n               64ms - parse_query (33 calls)\n                6ms - render_resolution (151 calls)\n               20ms - ???\n            0   - item::Builder::build (3 calls)\n        2ms - CompletionContext::new (1 calls)\n        0   - SourceBinder::to_module_def (1 calls)\n        7ms - import_on_the_fly (1 calls)\n        0   - item::Builder::build (23 calls)\n  194ms - handle_completion\n       41ms - CompletionContext::new\n           34ms - descend_into_macros\n               34ms - Semantics::analyze_impl\n                   34ms - SourceBinder::to_module_def\n                       34ms - crate_def_map:wait\n                        0   - crate_def_map:wait (2 calls)\n                        0   - relevant_crates (1 calls)\n                    0   - crate_def_map:wait (2 calls)\n            6ms - CompletionContext::expand_and_fill (1 calls)\n            0   - Semantics::analyze_impl (1 calls)\n            0   - crate_def_map:wait (1 calls)\n       96ms - complete_unqualified_path\n           96ms - CompletionContext::process_all_names\n               93ms - render_resolution\n                   93ms - infer:wait @ test\n                    0   - crate_def_map:wait (1 calls)\n                    0   - item::Builder::build (1 calls)\n                0   - crate_def_map:wait (202 calls)\n                2ms - render_resolution (150 calls)\n            0   - item::Builder::build (3 calls)\n       55ms - import_on_the_fly @ bot\n           55ms - import_assets::search_for_imports\n               55ms - import_assets::search_for\n                   55ms - import_assets::path_applicable_imports\n                        9ms - find_path_prefixed (50 calls)\n                       36ms - get_name_definition (26 calls)\n                        9ms - items_with_name (1 calls)\n                    0   - import_assets::scope_definitions (1 calls)\n        0   - SourceBinder::to_module_def (1 calls)\n        0   - item::Builder::build (23 calls)\n  347ms - handle_completion\n       43ms - CompletionContext::new\n           36ms - descend_into_macros\n               36ms - Semantics::analyze_impl\n                   36ms - SourceBinder::to_module_def\n                       36ms - crate_def_map:wait\n                        0   - crate_def_map:wait (2 calls)\n                        0   - relevant_crates (1 calls)\n                    0   - crate_def_map:wait (2 calls)\n            6ms - CompletionContext::expand_and_fill (1 calls)\n            0   - Semantics::analyze_impl (1 calls)\n            0   - crate_def_map:wait (1 calls)\n       91ms - Semantics::analyze_impl\n           91ms - infer:wait @ test\n            0   - SourceBinder::to_module_def (1 calls)\n            0   - crate_def_map:wait (1 calls)\n       91ms - iterate_method_candidates\n           29ms - trait_solve::wait\n               29ms - trait_solve_query @ Ord\n                    0   - crate_def_map:wait (1 calls)\n                   28ms - impl_datum (14 calls)\n           16ms - trait_solve::wait\n               16ms - trait_solve_query @ Eq\n                    0   - crate_def_map:wait (1 calls)\n                   15ms - impl_datum (14 calls)\n           18ms - trait_solve::wait\n               18ms - trait_solve_query @ PartialOrd\n                    0   - crate_def_map:wait (1 calls)\n                   18ms - impl_datum (14 calls)\n           13ms - trait_solve::wait\n               13ms - trait_solve_query @ PartialEq\n                    0   - crate_def_map:wait (1 calls)\n                   12ms - impl_datum (16 calls)\n            0   - crate_def_map:wait (444 calls)\n            0   - deref (1 calls)\n            0   - generic_params_query (134 calls)\n            6ms - render_method (102 calls)\n            3ms - trait_solve::wait (32 calls)\n      119ms - import_on_the_fly @\n          119ms - import_assets::search_for_imports\n              119ms - import_assets::search_for\n                  119ms - import_assets::trait_applicable_items\n                       11ms - items_with_name @ Name: , crate: AssocItemsOnly, assoc items: Some(\"teloxide_core\"), limit: Some(40)\n                           11ms - find_items\n                                2ms - crate_symbols (1 calls)\n                                8ms - query_external_importables (1 calls)\n                       92ms - iterate_method_candidates\n                           29ms - lang_item_query\n                               29ms - crate_lang_items_query\n                                   29ms - collect_lang_item (1016 calls)\n                                    0   - crate_def_map:wait (3 calls)\n                           17ms - trait_solve::wait\n                               17ms - trait_solve_query @ Datelike\n                                   17ms - lang_item_query\n                                       17ms - crate_lang_items_query\n                                           17ms - collect_lang_item (635 calls)\n                                            0   - crate_def_map:wait (1 calls)\n                                    0   - crate_def_map:wait (2 calls)\n                           36ms - trait_solve::wait\n                               36ms - trait_solve_query @ Read\n                                   35ms - lang_item_query\n                                       35ms - crate_lang_items_query\n                                           35ms - collect_lang_item (484 calls)\n                                            0   - crate_def_map:wait (7 calls)\n                                    0   - crate_def_map:wait (2 calls)\n                                    0   - impl_datum (1 calls)\n                            0   - crate_def_map:wait (756 calls)\n                            0   - deref (1 calls)\n                            0   - find_path_prefixed (2 calls)\n                            0   - generic_params_query (290 calls)\n                            3ms - trait_solve::wait (60 calls)\n                        0   - applicable_inherent_traits (1 calls)\n                        0   - deref (2 calls)\n                        0   - env_traits (1 calls)\n                       15ms - get_name_definition (40 calls)\n                    0   - import_assets::scope_definitions (1 calls)\n            0   - Semantics::analyze_impl (1 calls)\n        0   - Semantics::analyze_impl (1 calls)\n        0   - complete_unqualified_path (1 calls)\n        0   - crate_def_map:wait (236 calls)\n        0   - deref (1 calls)\n        0   - find_path_prefixed (3 calls)\n        0   - item::Builder::build (18 calls)\n        0   - lang_item_query (1 calls)\n        0   - trait_solve::wait (3 calls)\n</code></pre></div>\n</div></div>\n<p><del>Though it seems unrelated, because I just haven't seen a suggestions from a 92ms query, but have seen them from a 146ms one.</del></p>",
        "id": 269478066,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1643229392
    },
    {
        "content": "<p>Another related issue <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/10187\">https://github.com/rust-analyzer/rust-analyzer/issues/10187</a></p>",
        "id": 269717414,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1643367155
    }
]