[
    {
        "content": "<p>Logical continuation of [rust-analyzer is slow :-(](<a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/rust-analyzer.20is.20slow.20.3A-()\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/rust-analyzer.20is.20slow.20.3A-()\">https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/rust-analyzer.20is.20slow.20.3A-()</a>.</p>\n<p>After my recent optimizations, I can no longer reproduce slow on enter. However other folks can! I expect that this is due to my laptop being to fast (it's a relatively beefy machine). </p>\n<p>I'd love to add \"slow connection mode\" to rust-analyzer, which restricts the amount of CPU it can use. How should I implement this thing?</p>\n<p>Ideally, I'd love to do some syscall from within rust-analyzer procces, like \"self-limit me to at most 30% CPU\". In theory, I can use cgroups and/or thread affinity for that.  However, I've looked into this today, and I don't think I can easily write this thing: existing cgroups bindings are pretty low-level and require me to know more about cgroups than I want at this moment. And the set_affinity syscall works on per-thread basis. </p>\n<p>Do folks have any suggestions for self-restricting CPU in as little lines of code as possible? Should I .... just exec myself using some Linux command-line utility?</p>",
        "id": 167969313,
        "sender_full_name": "matklad",
        "timestamp": 1560360766
    },
    {
        "content": "<p>you can also set the nice to a larger value, but I'm not sure it's a good idea</p>",
        "id": 167969678,
        "sender_full_name": "Laurențiu",
        "timestamp": 1560361030
    },
    {
        "content": "<p>if you throttle RA, you'll end up waiting more for it to return the results</p>",
        "id": 167969705,
        "sender_full_name": "Laurențiu",
        "timestamp": 1560361057
    },
    {
        "content": "<p>maybe a better approach is to wait a little before processing the client requests? like that old \"wait 250ms before showing completions\" trick</p>",
        "id": 167969886,
        "sender_full_name": "Laurențiu",
        "timestamp": 1560361181
    },
    {
        "content": "<p>Hm, I think CPU throttling is exactly what I want here? Like, I want to expose existing slow bits of code, and I don't know where they are, so I don't know where to insert the sleep calls</p>",
        "id": 167970049,
        "sender_full_name": "matklad",
        "timestamp": 1560361305
    },
    {
        "content": "<p>Ah, got it. I thought you wanted to slow down RA to help people with slower computers, but it's for testing.</p>",
        "id": 167970165,
        "sender_full_name": "Laurențiu",
        "timestamp": 1560361379
    },
    {
        "content": "<p>yeah, I want to slow RA to help people with fast computers :D</p>",
        "id": 167970206,
        "sender_full_name": "matklad",
        "timestamp": 1560361397
    },
    {
        "content": "<p><a href=\"https://scoutapm.com/blog/restricting-process-cpu-usage-using-nice-cpulimit-and-cgroups\" target=\"_blank\" title=\"https://scoutapm.com/blog/restricting-process-cpu-usage-using-nice-cpulimit-and-cgroups\">https://scoutapm.com/blog/restricting-process-cpu-usage-using-nice-cpulimit-and-cgroups</a></p>",
        "id": 167970330,
        "sender_full_name": "Laurențiu",
        "timestamp": 1560361465
    },
    {
        "content": "<p><code>cpulimit</code>?</p>",
        "id": 167970333,
        "sender_full_name": "Laurențiu",
        "timestamp": 1560361467
    },
    {
        "content": "<p>it even works for processes that are already running</p>",
        "id": 167970387,
        "sender_full_name": "Laurențiu",
        "timestamp": 1560361503
    },
    {
        "content": "<blockquote>\n<p>It does this by sending SIGSTOP and SIGCONT signals to the process.</p>\n</blockquote>",
        "id": 167970429,
        "sender_full_name": "Laurențiu",
        "timestamp": 1560361545
    },
    {
        "content": "<p><span aria-label=\"joy cat\" class=\"emoji emoji-1f639\" role=\"img\" title=\"joy cat\">:joy_cat:</span></p>",
        "id": 167970451,
        "sender_full_name": "Laurențiu",
        "timestamp": 1560361559
    },
    {
        "content": "<p>yeah, I figure cgroups are a better approach today. And I also want to do this from withing a process.</p>\n<p>Really, I'd love to use <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> crate with the following API:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">hardmode</span>::<span class=\"n\">limit_cpu_frac</span><span class=\"p\">(</span><span class=\"mf\">0.3</span><span class=\"p\">)</span><span class=\"w\"></span>\n</pre></div>",
        "id": 167970567,
        "sender_full_name": "matklad",
        "timestamp": 1560361623
    },
    {
        "content": "<p>Is anyone interested in building ^^ :)</p>",
        "id": 167970616,
        "sender_full_name": "matklad",
        "timestamp": 1560361658
    },
    {
        "content": "<p>as a debugging aid, that <code>cpulimit</code> thing seems nice</p>",
        "id": 167970626,
        "sender_full_name": "Laurențiu",
        "timestamp": 1560361666
    },
    {
        "content": "<p>I mean it's awful, but.. :D</p>",
        "id": 167970651,
        "sender_full_name": "Laurențiu",
        "timestamp": 1560361676
    },
    {
        "content": "<p>But the api looks really cool its tempting xD</p>",
        "id": 167970781,
        "sender_full_name": "Nbiba Bedis",
        "timestamp": 1560361774
    },
    {
        "content": "<p>for the Irust crate</p>",
        "id": 167970890,
        "sender_full_name": "Nbiba Bedis",
        "timestamp": 1560361829
    },
    {
        "content": "<p>A rust repl</p>",
        "id": 167970893,
        "sender_full_name": "Nbiba Bedis",
        "timestamp": 1560361830
    },
    {
        "content": "<p>for the Irust crate</p>",
        "id": 167970894,
        "sender_full_name": "Nbiba Bedis",
        "timestamp": 1560361830
    },
    {
        "content": "<p>you can use cgroups via Docker (in this case with <code>--cpus=XX</code>). <code>systemd-run</code> should work too I think</p>",
        "id": 167974424,
        "sender_full_name": "marcogroppo",
        "timestamp": 1560364206
    },
    {
        "content": "<p>I think you can also create a cgroup manually (you need to be root), then assign RA to it while it's running</p>",
        "id": 167975979,
        "sender_full_name": "Laurențiu",
        "timestamp": 1560365409
    },
    {
        "content": "<p>I posted a couple of traces on the \"slow on enter\" issue. The computer I was using is a quad core (8 hyperthread) 2.4GHz laptop with 28GB of RAM. Rust, the standard library, VS Code, and rust-analyzer are all on an SSD, but the project is on a hard drive. I just set up Event Tracing for Windows on this machine, and managed to record a trace when enter took a couple seconds to appear. It looks like nothing else is using the CPU during the time, just rust-analyzer using 100% of a single core.</p>",
        "id": 168064701,
        "sender_full_name": "Jordan Miner",
        "timestamp": 1560445758
    },
    {
        "content": "<p>Hm, interesting! That's are more powerful setup than mine, except for  hard-drive part</p>",
        "id": 168064845,
        "sender_full_name": "matklad",
        "timestamp": 1560445840
    },
    {
        "content": "<p>If I'm using Windows Performance Analyzer right, it looks like a lot of time is spent in starting threads? Have you tried it on Windows? Maybe the panic implementation is different on Windows or Windows is a lot slower at creating threads?<br>\n<a href=\"/user_uploads/4715/dkChTzOu0SKdImdp-aajocgo/slow-on-enter1.png\" target=\"_blank\" title=\"slow-on-enter1.png\">slow-on-enter1.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/dkChTzOu0SKdImdp-aajocgo/slow-on-enter1.png\" target=\"_blank\" title=\"slow-on-enter1.png\"><img src=\"/user_uploads/4715/dkChTzOu0SKdImdp-aajocgo/slow-on-enter1.png\"></a></div>",
        "id": 168065235,
        "sender_full_name": "Jordan Miner",
        "timestamp": 1560446139
    },
    {
        "content": "<p>The blue vertical line in the graph is the keyboard enter event.</p>",
        "id": 168065298,
        "sender_full_name": "Jordan Miner",
        "timestamp": 1560446163
    },
    {
        "content": "<p>hm, fascinating!</p>",
        "id": 168065542,
        "sender_full_name": "matklad",
        "timestamp": 1560446366
    },
    {
        "content": "<p>let me reboot into widndows and check....</p>",
        "id": 168065565,
        "sender_full_name": "matklad",
        "timestamp": 1560446389
    },
    {
        "content": "<p>isn't it spending time in diagnostics?</p>",
        "id": 168066481,
        "sender_full_name": "Laurențiu",
        "timestamp": 1560447005
    },
    {
        "content": "<p>also collecting backtraces for <code>failure</code></p>",
        "id": 168066585,
        "sender_full_name": "Laurențiu",
        "timestamp": 1560447075
    },
    {
        "content": "<p>do you see any panics in the log window? sometimes RA seems to get stuck for a while throwing an awful lot of panics or errors</p>",
        "id": 168066702,
        "sender_full_name": "Laurențiu",
        "timestamp": 1560447144
    },
    {
        "content": "<p>I see one panic in the log window, and it doesn't show any symbols in the stack trace.</p>",
        "id": 168067078,
        "sender_full_name": "Jordan Miner",
        "timestamp": 1560447406
    },
    {
        "content": "<blockquote>\n<p>Windows is a lot slower at creating thread? </p>\n</blockquote>\n<p>Windows is much slower at creating threads and <del>panics</del> unwinds are also more expensive due to SEH.</p>",
        "id": 168067125,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1560447435
    },
    {
        "content": "<p>why do you say it's spending a lot of time creating threads?</p>",
        "id": 168067140,
        "sender_full_name": "Laurențiu",
        "timestamp": 1560447462
    },
    {
        "content": "<p>Yeah, I was wrong about that. I think it is spending a decent amount of time collecting backtraces, but I'm trying ti figure out how much.</p>",
        "id": 168068015,
        "sender_full_name": "Jordan Miner",
        "timestamp": 1560448040
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198951\">@Jordan Miner</span> you are my hero! <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 168068396,
        "sender_full_name": "matklad",
        "timestamp": 1560448268
    },
    {
        "content": "<p>I've just tried this on windows, and yeah, that's backtraces we collect during cancellation</p>",
        "id": 168068420,
        "sender_full_name": "matklad",
        "timestamp": 1560448287
    },
    {
        "content": "<p>wait, isn't cancellation using panics? those look like backtraces from <code>failure</code></p>",
        "id": 168070221,
        "sender_full_name": "Laurențiu",
        "timestamp": 1560449396
    },
    {
        "content": "<p>And I think it's unlikely for that to have a real impact on interactivity</p>",
        "id": 168071271,
        "sender_full_name": "Laurențiu",
        "timestamp": 1560450004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> you are also correct I think! We convert cancellation to <code>failure::Error</code> and I thing that's actually the point where we collect the backtrace, not the original <code>resue_unwind</code></p>",
        "id": 168071429,
        "sender_full_name": "matklad",
        "timestamp": 1560450117
    }
]