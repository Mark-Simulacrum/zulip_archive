[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> is there a reason we don't use <code>anyhow</code> in <code>ra_proc_macro*</code> crates like we do in <code>ra_project_model</code>?</p>",
        "id": 194678895,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587391369
    },
    {
        "content": "<p>Personally I just prevent to use any external crate as possible when I implement a new feature initially. But I think it is okay to change it to use anyhow.</p>",
        "id": 194679185,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587391509
    },
    {
        "content": "<p>I actually think that anyhow would be a bad fit there</p>",
        "id": 194679250,
        "sender_full_name": "matklad",
        "timestamp": 1587391548
    },
    {
        "content": "<p>The code isn't in cache for me, but I'd expect something like <code>io::Result&lt;Result&lt;tt::TokenTree, ExpansionError&gt;&gt;</code></p>",
        "id": 194679385,
        "sender_full_name": "matklad",
        "timestamp": 1587391601
    },
    {
        "content": "<p>Ie, we have to failure modes, which we need to distinguish between:</p>\n<ul>\n<li>the external process died (and for that an io::Error is the appropriate type)</li>\n<li>macro expansion failed because the input or macro is malformed. For that, we should have a dedicated error type, maybe shared by mbe and proc-macro, maybe unique to proc macro</li>\n</ul>",
        "id": 194679560,
        "sender_full_name": "matklad",
        "timestamp": 1587391683
    },
    {
        "content": "<p>Good point</p>",
        "id": 194679640,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587391725
    },
    {
        "content": "<p>By the way, I've just tried proc macros support with <a href=\"https://docs.rs/soa_derive/0.8.0/soa_derive/\" title=\"https://docs.rs/soa_derive/0.8.0/soa_derive/\"><code>soa_derive</code></a> crate and got </p>\n<div class=\"codehilite\"><pre><span></span>Fail to find proc macro. Error: Unknown(\n    &quot;Empty result&quot;,\n)\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> any assumptions?</p>",
        "id": 194679869,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587391834
    },
    {
        "content": "<p>The code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">soa_derive</span>::<span class=\"n\">StructOfArray</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"c1\">// #[macro_use]</span>\n<span class=\"c1\">// extern crate soa_derive;</span>\n\n<span class=\"cp\">#[derive(StructOfArray)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Cheese</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">smell</span>: <span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">color</span>: <span class=\"p\">(</span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">with_mushrooms</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">name</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CheeseVec</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 194679945,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587391878
    },
    {
        "content": "<p>Any usage code example ?</p>",
        "id": 194679946,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587391879
    },
    {
        "content": "<p>Um... no, but let me check now</p>",
        "id": 194680141,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587391987
    },
    {
        "content": "<p>Works for me</p>",
        "id": 194680562,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587392180
    },
    {
        "content": "<blockquote>\n<p>how do we handle incorrect syntax in proc macros?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"258149\">@std::Veetaha</span>  We don't handle it in proc-macro part, we handle it in expanded <br>\nmacro</p>",
        "id": 194680583,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587392188
    },
    {
        "content": "<p>I works for me too.</p>",
        "id": 194680950,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587392368
    },
    {
        "content": "<p>I mean, \"works\" as in \"doesn't crash\", but it doesn't seem to resolve the generated code</p>",
        "id": 194681135,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587392443
    },
    {
        "content": "<p>Okay, I'll try to debug this bit, unfortunately, there is too little info.<br>\nMaybe I forgot something? I added these guys:</p>\n<div class=\"codehilite\"><pre><span></span>    &quot;rust-analyzer.procMacro.enabled&quot;: true,\n    &quot;rust-analyzer.cargo.loadOutDirsFromCheck&quot;: true,\n</pre></div>\n\n\n<p>and ran <code>cargo build</code></p>",
        "id": 194681141,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587392445
    },
    {
        "content": "<p>Are you on Linux?</p>",
        "id": 194681219,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587392475
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span>  don't you see any error message  in output?</p>",
        "id": 194681222,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587392476
    },
    {
        "content": "<p>On linux, right</p>",
        "id": 194681234,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587392485
    },
    {
        "content": "<p>Nope, but I only have the server trace one, not the extension log</p>",
        "id": 194681286,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587392507
    },
    {
        "content": "<p>Do you have the proc macro process?</p>",
        "id": 194681384,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587392541
    },
    {
        "content": "<p>It shows up as <code>rust-analyzer proc-macro</code></p>",
        "id": 194681423,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587392558
    },
    {
        "content": "<p>By running <code>ps -a</code> I haven't found any of this</p>",
        "id": 194681651,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587392650
    },
    {
        "content": "<p>I wonder how we ship this server, is this a separate binary?</p>",
        "id": 194681746,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587392695
    },
    {
        "content": "<p>No, it's the same one, with an extra parameter</p>",
        "id": 194681959,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587392763
    },
    {
        "content": "<p>No, we reuse the same binary</p>",
        "id": 194681982,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587392771
    },
    {
        "content": "<p>Well, put a sleep were it starts, then try to <code>strace</code> it</p>",
        "id": 194682044,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587392798
    },
    {
        "content": "<p>It's going to open the proc macro library, then look up a symbol inside it</p>",
        "id": 194682138,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587392836
    },
    {
        "content": "<p>See how it's called (e.g. <code>target/debug/deps/libsoa_derive_internal-227cd67b09461a28.so</code>) and what symbols it exports</p>",
        "id": 194682308,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587392896
    },
    {
        "content": "<p>Ah, never worked with <code>strace</code>)</p>",
        "id": 194682347,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587392913
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>nm -S target/debug/deps/libsoa_derive_internal-227cd67b09461a28.so | rg decl                                                                                          ✔\n00000000004d73f0 0000000000000010 D __rustc_proc_macro_decls_4b07614003dcdb39fa49471d12911d65__\n</pre></div>",
        "id": 194682354,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587392916
    },
    {
        "content": "<p><code>sudo strace -fp &lt;PID&gt;</code></p>",
        "id": 194682419,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587392939
    },
    {
        "content": "<p>or <code>sudo strace -e trace=open,openat -fp &lt;PID&gt;</code> to trace only <code>open()</code> calls</p>",
        "id": 194682468,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587392961
    },
    {
        "content": "<p>Or you could add some dbg! in <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/90f837829d4f2c1054751de2de695ba1c0b8ae5c/crates/ra_proc_macro/src/process.rs#L48\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/90f837829d4f2c1054751de2de695ba1c0b8ae5c/crates/ra_proc_macro/src/process.rs#L48\">https://github.com/rust-analyzer/rust-analyzer/blob/90f837829d4f2c1054751de2de695ba1c0b8ae5c/crates/ra_proc_macro/src/process.rs#L48</a></p>",
        "id": 194682645,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587393013
    },
    {
        "content": "<p>I just flipped this on and everything slowed to a crawl</p>",
        "id": 194682727,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1587393049
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216201\">Edwin Cheng</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/proc-macro/near/194682645\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/proc-macro/near/194682645\">said</a>:</p>\n<blockquote>\n<p>Or you could add some dbg! in <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/90f837829d4f2c1054751de2de695ba1c0b8ae5c/crates/ra_proc_macro/src/process.rs#L48\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/90f837829d4f2c1054751de2de695ba1c0b8ae5c/crates/ra_proc_macro/src/process.rs#L48\">https://github.com/rust-analyzer/rust-analyzer/blob/90f837829d4f2c1054751de2de695ba1c0b8ae5c/crates/ra_proc_macro/src/process.rs#L48</a></p>\n</blockquote>\n<p>Yeah, well, <code>strace</code> is my golden hammer.</p>",
        "id": 194682971,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587393135
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203366\">Jeremy Kolb</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/proc-macro/near/194682727\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/proc-macro/near/194682727\">said</a>:</p>\n<blockquote>\n<p>I just flipped this on and everything slowed to a crawl</p>\n</blockquote>\n<p>Do you have <code>cargo check</code> disabled?</p>",
        "id": 194683064,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587393170
    },
    {
        "content": "<p>I wish i could use <code>strace</code> or any trace in Windows :(</p>",
        "id": 194683094,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587393183
    },
    {
        "content": "<p>Why not using linux?</p>",
        "id": 194683191,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587393219
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203366\">Jeremy Kolb</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/proc-macro/near/194682727\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/proc-macro/near/194682727\">said</a>:</p>\n<blockquote>\n<p>I just flipped this on and everything slowed to a crawl</p>\n</blockquote>\n<p>which project?</p>",
        "id": 194683194,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587393220
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216201\">Edwin Cheng</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/proc-macro/near/194683094\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/proc-macro/near/194683094\">said</a>:</p>\n<blockquote>\n<p>I wish i could use <code>strace</code> or any trace in Windows :(</p>\n</blockquote>\n<p><a href=\"http://www.rohitab.com/apimonitor\" title=\"http://www.rohitab.com/apimonitor\">http://www.rohitab.com/apimonitor</a> (or Procmon for simpler stuff)</p>",
        "id": 194683216,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587393233
    },
    {
        "content": "<p>If I am using linux, who tests RA in Windows ? :)</p>",
        "id": 194683333,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587393272
    },
    {
        "content": "<p>I have to use Windows for my company works</p>",
        "id": 194683375,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587393288
    },
    {
        "content": "<p>Bruh, just install Ubuntu alongside Widows)</p>",
        "id": 194683460,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587393318
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216201\">Edwin Cheng</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/proc-macro/near/194683333\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/proc-macro/near/194683333\">said</a>:</p>\n<blockquote>\n<p>If I am using linux, who tests RA in Windows ? :)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"203366\">@Jeremy Kolb</span> use Windows too btw</p>",
        "id": 194683471,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587393322
    },
    {
        "content": "<blockquote>\n<p>If I am using linux, who tests RA in Windows ? :)</p>\n</blockquote>\n<p>This actually is hugely important. I am so glad that you are using windows and <span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <del>parenthesis</del> Emacs -- testing these integrations would be very hard otherwise.</p>",
        "id": 194684068,
        "sender_full_name": "matklad",
        "timestamp": 1587393569
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> is this expected that we will have more <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/2e0b7b0159ed922693db48f3f94ed95b1827494a/crates/ra_proc_macro/src/lib.rs#L49\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/2e0b7b0159ed922693db48f3f94ed95b1827494a/crates/ra_proc_macro/src/lib.rs#L49\"><code>ProcMacroClientKind</code>s </a> in future?</p>",
        "id": 194686822,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587394769
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"258149\">std::Veetaha</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/proc-macro/near/194686822\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/proc-macro/near/194686822\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216201\">Edwin Cheng</span> is this expected that we will have more <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/2e0b7b0159ed922693db48f3f94ed95b1827494a/crates/ra_proc_macro/src/lib.rs#L49\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/2e0b7b0159ed922693db48f3f94ed95b1827494a/crates/ra_proc_macro/src/lib.rs#L49\"><code>ProcMacroClientKind</code>s </a> in future?</p>\n</blockquote>\n<p>wasm , hopefully</p>",
        "id": 194687011,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587394835
    },
    {
        "content": "<p>Yes I am on Windows and have check enabled. After restarting vscode I did notice a rogue <code>rust-analyzer</code> process lying around that I had to kill. Might be related.</p>",
        "id": 194688537,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1587395504
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/proc-macro/near/194684068\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/proc-macro/near/194684068\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>If I am using linux, who tests RA in Windows ? :)</p>\n</blockquote>\n<p>This actually is hugely important. I am so glad that you are using windows and <span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <del>parenthesis</del> Emacs -- testing these integrations would be very hard otherwise.</p>\n</blockquote>\n<p>yeah , Emacs is another important <strong>OS</strong> we have to test .</p>",
        "id": 194690967,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587396350
    },
    {
        "content": "<p>I also like how <code>gnome-builder</code> was recently tried as an LSP client</p>",
        "id": 194691213,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1587396432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> is there a reason why <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/2e0b7b0159ed922693db48f3f94ed95b1827494a/crates/ra_proc_macro_srv/src/dylib.rs#L190\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/2e0b7b0159ed922693db48f3f94ed95b1827494a/crates/ra_proc_macro_srv/src/dylib.rs#L190\"><code>list_macros</code> returns a <code>Result</code></a>? I don't see any fallable operation in it</p>",
        "id": 194694132,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587397585
    },
    {
        "content": "<p>Yes, it should return the list directly.</p>",
        "id": 194694474,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587397720
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> , what about merging the <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/cd6d788c159240e3910b5df92b641f93d1cf79a5/crates/ra_proc_macro/src/process.rs#L20-L29\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/cd6d788c159240e3910b5df92b641f93d1cf79a5/crates/ra_proc_macro/src/process.rs#L20-L29\"><code>ProcMacroProcessThread</code></a> with <code>ProcMacroProcessSrv</code>? This way we also get rid of the weak pointer. As I can tell for now this struct has no logic apart from holding the <code>jod_thread</code></p>",
        "id": 194712580,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587406291
    },
    {
        "content": "<p>Um.. sound reasonable. I really forget why I design the structure like this.</p>",
        "id": 194713327,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587406666
    },
    {
        "content": "<p>Yeah, there is probably something caveat-y underneath...</p>",
        "id": 194713540,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587406767
    },
    {
        "content": "<p>Ah</p>",
        "id": 194713983,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587406976
    },
    {
        "content": "<p>I remember now, it is because we hold an arc pointer for each proc-macro and we might destroyed the thread but proc-macro itself still held by crates. We use the weak pointer to separate that thread and proc-macros</p>",
        "id": 194714265,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587407143
    },
    {
        "content": "<p>This ownership story is quite complicated. I wonder if we can avoid it.</p>",
        "id": 194714480,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587407260
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> shouldn't we pass the same arguments to the proc macro process in <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/cd6d788c159240e3910b5df92b641f93d1cf79a5/crates/ra_proc_macro/src/process.rs#L48-L71\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/cd6d788c159240e3910b5df92b641f93d1cf79a5/crates/ra_proc_macro/src/process.rs#L48-L71\"><code>fn restart()</code> as we do in <code>fn run()</code></a>?</p>",
        "id": 194726674,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587413640
    },
    {
        "content": "<p>Yeah, it is a bug , nice catch !</p>",
        "id": 194726838,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587413707
    },
    {
        "content": "<p>I will submit a PR after <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/4061\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/4061\">https://github.com/rust-analyzer/rust-analyzer/pull/4061</a> is merged.</p>",
        "id": 194728534,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587414584
    },
    {
        "content": "<p>I also wonder if there is any data race possible. Like can't RA send several requests to proc marco srv in parallel? LSP (or JSON RPC in general, not sure) uses request ids for example...</p>",
        "id": 194730264,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587415338
    },
    {
        "content": "<p>The send request is blocking from client to server.</p>",
        "id": 194730396,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587415402
    },
    {
        "content": "<p>Yeah, it's blocking, but can't RA <code>send_task()</code> in parallel threads such that both threads are blocked, but then some of them randomly can get the response it was not awaiting for.</p>",
        "id": 194730553,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587415461
    },
    {
        "content": "<p>Here is my imaginary workflow:</p>\n<ol>\n<li>RA thead <code>foo</code> sends request <code>1</code> and waits for the response.</li>\n<li>Proc macro srv is blocked processing this request.</li>\n<li>RA thread <code>bar</code> send request <code>2</code> and waits for the response.</li>\n<li>Proc macro srv writes response for request <code>1</code> to <code>stdout</code>.</li>\n<li>RA thread <code>bar</code> reads the stdout with the response for request <code>1</code> (BUG)</li>\n</ol>",
        "id": 194730818,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587415584
    },
    {
        "content": "<p>Note that we send the <code>task_sender</code> channel into the thread channel,  the thread use that channel to send back the response.</p>",
        "id": 194731259,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587415775
    },
    {
        "content": "<p>And we only have a single worker thread in client side.</p>",
        "id": 194731492,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587415869
    },
    {
        "content": "<p>Oh, right, now I see...</p>",
        "id": 194731709,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587415971
    },
    {
        "content": "<p>Hmh, I think we (me) broke something, now one core is constantly 100% and no hints in the edittor appear....</p>",
        "id": 194737797,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587419268
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/XvvxqQQyFb0d-IqMve4SxGgM/image.png\" title=\"image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/XvvxqQQyFb0d-IqMve4SxGgM/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/XvvxqQQyFb0d-IqMve4SxGgM/image.png\"></a></div>",
        "id": 194737808,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587419275
    },
    {
        "content": "<p>Okay it just took some time and everything stabilized..</p>",
        "id": 194737933,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587419352
    },
    {
        "content": "<p>Don't know how, but now I don't get that \"Empty response error\"</p>",
        "id": 194738048,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587419410
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216201\">Edwin Cheng</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/proc-macro/near/194731492\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/proc-macro/near/194731492\">said</a>:</p>\n<blockquote>\n<p>And we only have a single worker thread in client side.</p>\n</blockquote>\n<p>Wouldn't it be worth being able to support multiple concurrent expansions?  I know it came from <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/3738#discussion_r399637997\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/3738#discussion_r399637997\">https://github.com/rust-analyzer/rust-analyzer/pull/3738#discussion_r399637997</a>.</p>",
        "id": 194762490,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587447476
    },
    {
        "content": "<p>iirc, currently RA  are concurrent but not parallel, which means if there are multiple requests from lsp client, <strong>AND</strong> they changed salsa db, RA will cancel former request. I think single worker thread in proc-macro client fit this design. But of course I only have vague understanding in this part.</p>",
        "id": 194762825,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587447983
    },
    {
        "content": "<p>And note that if everything implemented correctly, a request to proc-macro expansion must be triggered by a new salsa db invocation, which must change the db itself.</p>",
        "id": 194762915,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587448099
    },
    {
        "content": "<p>But a single LSP request (e.g. type hints) might expand multiple proc macros anyway</p>",
        "id": 194762920,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587448115
    },
    {
        "content": "<p>Yes, but these requests must be synchronized  in current design.</p>",
        "id": 194762984,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587448219
    },
    {
        "content": "<p>Got it, thanks</p>",
        "id": 194763315,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587448695
    },
    {
        "content": "<p>But there is a rare case here: two concurrent request is asking for expansion at the same time (the salsa db is not modified yet),  that is the potential  bug mentioned. But as I answered previously, we pass a sender channel to the worker thread for replying to prevent this bug.</p>",
        "id": 194763617,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587449146
    },
    {
        "content": "<p>Well, I was looking at it as a potential optimization, not a bug <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 194765770,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587451615
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"258149\">std::Veetaha</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/proc-macro/near/194679945\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/proc-macro/near/194679945\">said</a>:</p>\n<blockquote>\n<p>The code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">soa_derive</span>::<span class=\"n\">StructOfArray</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"c1\">// #[macro_use]</span>\n<span class=\"c1\">// extern crate soa_derive;</span>\n\n<span class=\"cp\">#[derive(StructOfArray)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Cheese</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">smell</span>: <span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">color</span>: <span class=\"p\">(</span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">with_mushrooms</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">name</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CheeseVec</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n</blockquote>\n<p>Huh. I'm pretty sure it wasn't working at the time, but now I even get completions in spite of <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/4029\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/4029\">https://github.com/rust-analyzer/rust-analyzer/pull/4029</a>:</p>\n<p><a href=\"/user_uploads/4715/OA-3xNU5t6KWXpEqZxpxpjQ0/image.png\" title=\"image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/OA-3xNU5t6KWXpEqZxpxpjQ0/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/OA-3xNU5t6KWXpEqZxpxpjQ0/image.png\"></a></div>",
        "id": 194953373,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587571441
    },
    {
        "content": "<p>Really the performance of proc_macro_srv is not very impressive, I wish we could paralellize it...</p>",
        "id": 195000993,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587596034
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> I just found out why sometimes the proc-macro srv will be deadlocked. It is because we load and unload dlls for each request. However, currently rustc TLS is <a href=\"https://github.com/rust-lang/rust/blob/413a12909f3b149af17d75268ed4a136afb82c36/src/libstd/sys_common/thread_local.rs#L230\" title=\"https://github.com/rust-lang/rust/blob/413a12909f3b149af17d75268ed4a136afb82c36/src/libstd/sys_common/thread_local.rs#L230\">leaky</a> , such that if we do it a lot of time, all TLS index will be consumed and it will be deadlocked inside panic (it is because panic itself is using TLS too).</p>",
        "id": 195102586,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587667339
    },
    {
        "content": "<p>The maxium number of TLS in Windows are small (<a href=\"https://docs.microsoft.com/en-us/windows/win32/procthread/thread-local-storage?redirectedfrom=MSDN\" title=\"https://docs.microsoft.com/en-us/windows/win32/procthread/thread-local-storage?redirectedfrom=MSDN\">1,088</a>), so basically it will be hit for sure..</p>",
        "id": 195102810,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587667443
    },
    {
        "content": "<p>A simplest solution is we spawn a thread for each request and join it. Another solution will be we cached all dlls ..</p>",
        "id": 195103188,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587667639
    },
    {
        "content": "<p>I !<span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> TLS</p>",
        "id": 195105326,
        "sender_full_name": "matklad",
        "timestamp": 1587668561
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> why do we need to unload dlls? I'd expect to keep all proc macros in memory all the time</p>",
        "id": 195105421,
        "sender_full_name": "matklad",
        "timestamp": 1587668614
    },
    {
        "content": "<p>(but it probably make sense to lazy-load them)</p>",
        "id": 195105438,
        "sender_full_name": "matklad",
        "timestamp": 1587668626
    },
    {
        "content": "<p>My initial thought was saving memory for the dll, but it seems to be not a good idea now :)</p>",
        "id": 195105635,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587668733
    },
    {
        "content": "<p>On macOS you are not supposed to unload dylibs. In fact I believe you have to call dlclose twice to actually unload it. Otherwise it will be kept open and reused the next time you use dlopen. Even if the dylib has changed since.</p>",
        "id": 195113268,
        "sender_full_name": "bjorn3",
        "timestamp": 1587672606
    },
    {
        "content": "<p>Can someone tell me why <code>proc_macro</code> support needs<code> loadOutDirsFromCheck</code> option enabled? I might be a noob for asking this but why are out dirs even checked for? Is it not always target?</p>",
        "id": 195124028,
        "sender_full_name": "pksunkara",
        "timestamp": 1587678763
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254853\">@pksunkara</span> Although it is always target, but we dont't know the full path. Additionally, e.g. if using <code>sccache</code>, it might be not in <code>target</code>...</p>",
        "id": 195138208,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587691225
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span>, smol question. Am I right that we use a separate process for proc macro expanding to prevent crashing the rust-analyzer process if something really bad happens inside of a proc macro, and are there any other raesons?</p>",
        "id": 195286424,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587823668
    },
    {
        "content": "<p>That's the main reason. I think</p>",
        "id": 195286472,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587823702
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> I am getting this error with today's nightly, did you see it before?</p>\n<div class=\"codehilite\"><pre><span></span>thread &#39;main&#39; panicked at &#39;Cannot create expander for /home/veetaha/dev/rust-analyzer/target/debug/deps/libserde_repr-33c31e7306fd2bdf.so: &quot;Dynamic loading not supported&quot;&#39;, crates/ra_proc_macro_srv/src/lib.rs:45:31\n</pre></div>",
        "id": 195287524,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587825563
    },
    {
        "content": "<p>No.. oh ... um...</p>",
        "id": 195287683,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587825813
    },
    {
        "content": "<p>Do we compile our nightly binary with musl?</p>",
        "id": 195287689,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587825830
    },
    {
        "content": "<p><a href=\"https://git.musl-libc.org/cgit/musl/tree/src/ldso/dlopen.c\" title=\"https://git.musl-libc.org/cgit/musl/tree/src/ldso/dlopen.c\">https://git.musl-libc.org/cgit/musl/tree/src/ldso/dlopen.c</a></p>",
        "id": 195287779,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587825948
    },
    {
        "content": "<p>FXXXXK</p>",
        "id": 195287810,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587825962
    },
    {
        "content": "<blockquote>\n<p>FXXXXK</p>\n</blockquote>\n<p>Not sure what this means )<br>\nHmm, this is very strange that musl doesn't support dlopen loading...</p>",
        "id": 195287899,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587826147
    },
    {
        "content": "<p>I guess we do <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/fc57358efda7c028cbe8a438446cce5f540f48ca/.github/workflows/release.yaml#L42\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/fc57358efda7c028cbe8a438446cce5f540f48ca/.github/workflows/release.yaml#L42\">compile it with musl</a><br>\nI also wonder why this was not appearing before, something has changed...</p>",
        "id": 195287979,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587826265
    },
    {
        "content": "<p>Just some dirty words to express my angry of the mess of handling platform depends dlls and tls related stuffs.</p>",
        "id": 195288039,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587826347
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"258149\">std::Veetaha</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/proc-macro/near/195287979\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/proc-macro/near/195287979\">said</a>:</p>\n<blockquote>\n<p>I guess we do <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/fc57358efda7c028cbe8a438446cce5f540f48ca/.github/workflows/release.yaml#L42\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/fc57358efda7c028cbe8a438446cce5f540f48ca/.github/workflows/release.yaml#L42\">compile it with musl</a><br>\nI also wonder why this was not appearing before, something has changed...</p>\n</blockquote>\n<p>We don't run test with the nightly build, I think .</p>",
        "id": 195288049,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587826386
    },
    {
        "content": "<p>Wait, so are proc macros working for anyone using the marketplace release?</p>",
        "id": 195289698,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587828823
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> I don't think it is working except Windows users</p>",
        "id": 195327036,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587894535
    },
    {
        "content": "<p>Should we build the binaries on <code>glibc</code>?</p>",
        "id": 195328781,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587897484
    },
    {
        "content": "<p>I wonder how can the toolchain work on an alpine host. But it does.</p>",
        "id": 195329151,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587898280
    },
    {
        "content": "<p>If building for <code>glibc</code>, please build using an old system, otherwise I can't run them on my debian system, as you can't run an executable compiled for  newer version of <code>glibc</code> on an older system.</p>",
        "id": 195329225,
        "sender_full_name": "bjorn3",
        "timestamp": 1587898423
    },
    {
        "content": "<p>GitHub Actions seems to support Ubuntu 16.04. Is that old enough? But yeah, binary compatibility across distros is a mess.</p>",
        "id": 195329393,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587898778
    },
    {
        "content": "<p>Does it matter at all against which glibc we are building? We don’t use C<br>\ncode, so I think only the version of glibc used to build rust standard<br>\nlibrary matters?</p>\n<p>Hm, actually, I think I am missing some large piece of knowledge here...<br>\nWhy build-time version of glibc matters at all? Like, what matters is the<br>\nheader files(because we link glibc dynamically), and I assume Rust just has<br>\nsome extern C declarations which are fixed?</p>",
        "id": 195329759,
        "sender_full_name": "matklad",
        "timestamp": 1587899468
    },
    {
        "content": "<p>You might have a point there. My <code>rust-analyzer</code> binary (built on Arch with <code>glibc 2.31</code> appears to work on Ubuntu 14.04 (with <code>glibc 2.19</code>).</p>",
        "id": 195330930,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587901343
    },
    {
        "content": "<p>Since Sundays is usually \"merge day\", let me file a PR to switch to <code>x86_64-unknown-linux-gnu</code> to have something exciting in the next release <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>. Maybe we could even include <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/4153\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/4153\">https://github.com/rust-analyzer/rust-analyzer/pull/4153</a></p>",
        "id": 195331099,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587901659
    },
    {
        "content": "<p>I am prepping a big \"relase\" post on monday, so I'll fold this into the <em>next</em> release, and not this one :)</p>",
        "id": 195331495,
        "sender_full_name": "matklad",
        "timestamp": 1587902338
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> I realize you're busy, but what do you say about merging <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/4157\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/4157\">https://github.com/rust-analyzer/rust-analyzer/pull/4157</a> soon-ish to have it bake before Monday? It also resolves <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/4143\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/4143\">https://github.com/rust-analyzer/rust-analyzer/pull/4143</a>, but on the other hand it breaks bors on every open PR <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span>.</p>",
        "id": 195599232,
        "sender_full_name": "Laurențiu",
        "timestamp": 1588095156
    },
    {
        "content": "<p>that's a fun thread: <a href=\"https://users.rust-lang.org/t/loading-dynamic-libraries-from-memory/41697\" title=\"https://users.rust-lang.org/t/loading-dynamic-libraries-from-memory/41697\">https://users.rust-lang.org/t/loading-dynamic-libraries-from-memory/41697</a></p>",
        "id": 195615479,
        "sender_full_name": "matklad",
        "timestamp": 1588102864
    },
    {
        "content": "<p>Nice, I hope someone will publish a crate for that &lt;3. </p>\n<p>And here are some other fun and (non practical) solutions (projects): </p>\n<ul>\n<li>Embedding an x86 VM and binding all allowed syscalls.</li>\n<li>Passing some magic RUSC_FLAGS to <code>cargo check</code> to make it generating LLVM IR for the proc-macro dll , and embedding a LLVM jit interpreter to run that.</li>\n</ul>",
        "id": 195664005,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1588140027
    },
    {
        "content": "<p>Is anyone using nightly instead of source builds on Linux? I wonder if they still work.</p>",
        "id": 195664550,
        "sender_full_name": "Laurențiu",
        "timestamp": 1588140484
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216201\">Edwin Cheng</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/proc-macro/near/195664005\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/proc-macro/near/195664005\">said</a>:</p>\n<blockquote>\n<ul>\n<li>Pass some magic RUSC_FLAGS to <code>cargo check</code> to make it general LLVM IR for the proc-macro dll , and embedding a LLVM jit interpreter to run that.</li>\n</ul>\n</blockquote>\n<p>Well, there's <code>miri</code>...</p>",
        "id": 195664576,
        "sender_full_name": "Laurențiu",
        "timestamp": 1588140537
    },
    {
        "content": "<p>x86towasm sounds like a name of a project which should exist :D</p>",
        "id": 195665161,
        "sender_full_name": "matklad",
        "timestamp": 1588141268
    }
]