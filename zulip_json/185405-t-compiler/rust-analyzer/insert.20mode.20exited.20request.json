[
    {
        "content": "<p>say I am in command mode.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">X</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I enter insert mode and type <code>foo: i32</code> and exit insert mode</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">X</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>: <span class=\"kt\">i32</span><span class=\"cp\">$</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>now I want rust analyzer to _somehow_ fix all uses of <code>X</code>. <br>\nany suggestions how to implement this</p>",
        "id": 242219010,
        "sender_full_name": "Manmeet Singh",
        "timestamp": 1623336543
    },
    {
        "content": "<p>We have a feature where you use a structure field that doesn't exist, you get a diagnostic and a fix to add it to the struct definition</p>",
        "id": 242219305,
        "sender_full_name": "Laurențiu",
        "timestamp": 1623336646
    },
    {
        "content": "<p>But there's no way to add it to every usage of the struct</p>",
        "id": 242219553,
        "sender_full_name": "Laurențiu",
        "timestamp": 1623336735
    },
    {
        "content": "<p>another example will be with function arguments</p>",
        "id": 242219688,
        "sender_full_name": "Manmeet Singh",
        "timestamp": 1623336799
    },
    {
        "content": "<p>somewhat similar to <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/6499\">6499</a></p>",
        "id": 242219717,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1623336810
    },
    {
        "content": "<p>but I don't know if one insert mode operation would be the right granularity for this</p>",
        "id": 242219847,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1623336849
    },
    {
        "content": "<p>I think it will good enough for most of cases. we can always have explicit start and end requests</p>",
        "id": 242220114,
        "sender_full_name": "Manmeet Singh",
        "timestamp": 1623336960
    },
    {
        "content": "<p>I'd like to experiment with  change signature \"auto-refactor\".</p>\n<ul>\n<li>firtst a code-action is used to initiate signature-change operation, by adding a comment duplicating the old signature</li>\n<li>second, the user edits signature of the item</li>\n<li>third, a second code-action looks a  the old signature in the comment, at the new signature in the code, and fixes up all the call-sites.</li>\n</ul>",
        "id": 242220220,
        "sender_full_name": "matklad",
        "timestamp": 1623336992
    },
    {
        "content": "<p>oh commenting is a good idea</p>",
        "id": 242220497,
        "sender_full_name": "Manmeet Singh",
        "timestamp": 1623337088
    }
]