[
    {
        "content": "<p>In <a href=\"https://github.com/nrf-rs/nrf-hal\">nrf-hal</a>, we have several facade crates that all depend on one implementation crate, each enabling a different feature of it. rust-analyzer thus will always enable every feature when editing the implementation crate (nrf-hal-common), even if this is not enabled in the settings.</p>\n<p>Because the features aren't additive (as is common in embedded crates), this causes things to break badly when editing, so only very few modules are actually picked up by r-a. Is there any way to disable this \"feature merging\" from <code>cargo metadata</code> (I assume)? Or should I write my own project.json?</p>",
        "id": 222307605,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610377389
    },
    {
        "content": "<p>I guess <code>rust-analyzer.cargo.allFeatures</code> doesn't help here?</p>",
        "id": 222307853,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1610377484
    },
    {
        "content": "<p>It's already turned off</p>",
        "id": 222307972,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610377551
    },
    {
        "content": "<p>hmm, seems like I have to manually specify where all dependencies are if I make use of <code>rust-project.json</code>, that's not going to work</p>",
        "id": 222308986,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610377959
    },
    {
        "content": "<p>When within a compilation graph a crate is depended on multiple times, the used feature set is the union of all the features that the individual dependent crates require. <code>cargo metadata</code> causes all crates in the current workspace to become part of the same compilation graph when run on a workspace <code>Cargo.toml</code> it seems, thus causing this feature unification.</p>",
        "id": 222309273,
        "sender_full_name": "bjorn3",
        "timestamp": 1610378077
    },
    {
        "content": "<p>yeah</p>",
        "id": 222309318,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610378100
    },
    {
        "content": "<p>Same seems to happen for any member of a workspace.</p>",
        "id": 222309392,
        "sender_full_name": "bjorn3",
        "timestamp": 1610378131
    },
    {
        "content": "<p>I wonder if we should just add a quickfix to the unconfigured-code diagnostic that modifies the <code>cfg</code> flags used for analysis</p>",
        "id": 222309540,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610378179
    },
    {
        "content": "<p>With the caveat that <code>cargo check</code> is not affected</p>",
        "id": 222309564,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610378188
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> I think, fundamentally, we need to cajole <code>cargo metadata</code> into behaving how we want</p>",
        "id": 222312777,
        "sender_full_name": "matklad",
        "timestamp": 1610379413
    },
    {
        "content": "<p>There's no good way to do that (even with the new resolver)</p>",
        "id": 222312854,
        "sender_full_name": "matklad",
        "timestamp": 1610379447
    },
    {
        "content": "<p>yeah, its behavior makes sense to me here</p>",
        "id": 222312982,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610379497
    },
    {
        "content": "<p>ther's a bad way though -- I believe we can <code>cd</code> in a specific directory</p>",
        "id": 222313069,
        "sender_full_name": "matklad",
        "timestamp": 1610379529
    },
    {
        "content": "<p>I don't think there would really be a way to run <code>cargo check</code> in a way that works in this workspace, other than running it once for each facade crate</p>",
        "id": 222313100,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610379544
    },
    {
        "content": "<p>(just <code>-p</code> won't work, because cargo is horrible and cwd matters)</p>",
        "id": 222313169,
        "sender_full_name": "matklad",
        "timestamp": 1610379576
    },
    {
        "content": "<p>hmm, I tried opening just <code>nrf-hal-common</code> in VS Code but the same happened, it's still looking at the whole workspace config</p>",
        "id": 222313188,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610379581
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Overriding.20the.20workspace.20feature.20set/near/222313169\">said</a>:</p>\n<blockquote>\n<p>(just <code>-p</code> won't work, because cargo is horrible and cwd matters)</p>\n</blockquote>\n<p>Hmm, this does work for <code>cargo check</code> at least, does <code>cargo metadata</code> behave differently?</p>",
        "id": 222313291,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610379614
    },
    {
        "content": "<p>we pass <code>--workspace</code> manually</p>",
        "id": 222313305,
        "sender_full_name": "matklad",
        "timestamp": 1610379617
    },
    {
        "content": "<blockquote>\n<p>Hmm, this does work for cargo check at least, does cargo metadata behave differently?</p>\n</blockquote>",
        "id": 222313360,
        "sender_full_name": "matklad",
        "timestamp": 1610379636
    },
    {
        "content": "<p>not entirely -- it'll also unify-in features of the package in cwd</p>",
        "id": 222313447,
        "sender_full_name": "matklad",
        "timestamp": 1610379672
    },
    {
        "content": "<p>this is no-op in virtual manifests thougt</p>",
        "id": 222313490,
        "sender_full_name": "matklad",
        "timestamp": 1610379691
    },
    {
        "content": "<p>so yeah, I believe we need to add code for \"run <code>cargo metadata</code> many times and unify crate graphs\"</p>",
        "id": 222313678,
        "sender_full_name": "matklad",
        "timestamp": 1610379767
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Overriding.20the.20workspace.20feature.20set/near/222313447\">said</a>:</p>\n<blockquote>\n<p>not entirely -- it'll also unify-in features of the package in cwd</p>\n</blockquote>\n<p>oh wow you're right, how odd</p>",
        "id": 222313758,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610379808
    },
    {
        "content": "<p>not looking forward to these kinds of changes, they'll probably break r-a for many users and increase memory usage a lot in some cases <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 222313904,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610379861
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/project_model/src/workspace.rs#L294-L444\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/project_model/src/workspace.rs#L294-L444</a></p>",
        "id": 222313910,
        "sender_full_name": "matklad",
        "timestamp": 1610379863
    },
    {
        "content": "<p>this the \"bit\" where \"unify metadatas\" thing needs to happen</p>",
        "id": 222313990,
        "sender_full_name": "matklad",
        "timestamp": 1610379900
    },
    {
        "content": "<blockquote>\n<p>not looking forward to these kinds of changes, they'll probably break r-a for many users and increase memory usage a lot in some cases <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>",
        "id": 222314032,
        "sender_full_name": "matklad",
        "timestamp": 1610379919
    },
    {
        "content": "<p>I mean, they'll be opt-in</p>",
        "id": 222314084,
        "sender_full_name": "matklad",
        "timestamp": 1610379940
    },
    {
        "content": "<p>I imagine you could extend <code>linkedProjects</code> section to include full cargo command</p>",
        "id": 222314272,
        "sender_full_name": "matklad",
        "timestamp": 1610380007
    },
    {
        "content": "<p>so, for nrf-hal, you'll link each of the crates</p>",
        "id": 222314372,
        "sender_full_name": "matklad",
        "timestamp": 1610380053
    },
    {
        "content": "<p>actually, without \"and unify crate graph\", this should be easy to pull off</p>",
        "id": 222314493,
        "sender_full_name": "matklad",
        "timestamp": 1610380088
    }
]