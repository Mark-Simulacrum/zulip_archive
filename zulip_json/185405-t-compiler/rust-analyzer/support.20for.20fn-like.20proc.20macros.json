[
    {
        "content": "<p>Hi, I am interested in tackling <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/5265\">https://github.com/rust-analyzer/rust-analyzer/issues/5265</a>. Would someone who is familiar with the current state of proc macro support be willing to give some tips on what needs to change and where to get started? Thank you! :)</p>",
        "id": 217647851,
        "sender_full_name": "nitsky",
        "timestamp": 1606147900
    },
    {
        "content": "<p>It seems to me that something like that would only be possible if the proc macro \"cooperates\" and propagates the input identifiers instead of creating new ones. That way we can at least theoretically map between input and output tokens via <code>mbe::TokenMap</code>.</p>\n<p>I don't know if this actually works correctly with proc macros though.</p>",
        "id": 217770627,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606232494
    },
    {
        "content": "<p>do we expand fn-like proc macros? I'm confused what the actual problem is now, is it expanding them or making IDE features work inside of them? If it's the latter, and we're expanding them already, Jonas is right. But the macros <em>should</em> already be doing that, if they want correct error spans in rustc, right? In that case the question does become whether we're tracking that correctly all the way through</p>",
        "id": 217771079,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1606232680
    },
    {
        "content": "<p>Yeah we should be expanding them now (not <em>correctly</em>, mind you, but simple cases should work)</p>",
        "id": 217771213,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606232745
    },
    {
        "content": "<p>(renamed the issue to clarify what is being requested)</p>",
        "id": 217771346,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606232790
    },
    {
        "content": "<p>I have to admit I don't really know in detail how span tracking works in proc macros, don't they nowadays usually stringify and re-parse their input? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 217771457,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1606232832
    },
    {
        "content": "<p>or is that not the case anymore</p>",
        "id": 217771495,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1606232857
    },
    {
        "content": "<p>I'm not sure either, syn might consume the tokens from the <code>TokenStream</code> directly</p>",
        "id": 217771631,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606232900
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> Using the <code>syn</code> and <code>quote</code> crates it is straightforward to propagate the input identifiers, and blocks wrapped in curly braces are passed through verbatim.</p>",
        "id": 217775127,
        "sender_full_name": "nitsky",
        "timestamp": 1606234249
    },
    {
        "content": "<p>I am already observing some rudimentary support for fn-like proc macros in rust analyzer: the type of the return value is available on hover, even when there is no type annotation nearby that could be hinting it.</p>",
        "id": 217775740,
        "sender_full_name": "nitsky",
        "timestamp": 1606234407
    },
    {
        "content": "<p>yeah, that's what you'd expect when we can expand the macro, but not track the tokens through the expansion</p>",
        "id": 217775866,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1606234444
    },
    {
        "content": "<p>for IDE features to work <em>inside</em> the macro call, we need to know the connection between the tokens written in the source code, and the tokens in the expanded code. And that probably doesn't work right now</p>",
        "id": 217775993,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1606234491
    },
    {
        "content": "<p>that makes sense</p>",
        "id": 217776204,
        "sender_full_name": "nitsky",
        "timestamp": 1606234570
    },
    {
        "content": "<p>I am observing that the rust compiler is keeping track of that correctly. Red squiggles end up in the right places when there are errors.</p>",
        "id": 217776271,
        "sender_full_name": "nitsky",
        "timestamp": 1606234603
    },
    {
        "content": "<p>that's good in the sense that it should at least be possible to do, then ;)</p>",
        "id": 217776306,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1606234622
    },
    {
        "content": "<p>can you provide any guidance on where in the rust analyzer I could start digging to add this support?</p>",
        "id": 217776375,
        "sender_full_name": "nitsky",
        "timestamp": 1606234658
    },
    {
        "content": "<p>we also already do it for macro_rules macros, so the infrastructure exists already. So the missing piece should \"just\" be to keep track in the proc-macro specific parts</p>",
        "id": 217776514,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1606234701
    },
    {
        "content": "<p>One thing that isn't going to work is IDE support in incomplete proc macro input. The macro has to expand successfully or we don't get any output from it.</p>",
        "id": 217776767,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606234811
    },
    {
        "content": "<p>ah, that's true :(</p>",
        "id": 217776793,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1606234826
    },
    {
        "content": "<p>ya, but at least getting it working for when the macro expands successfully would be a big step.</p>",
        "id": 217776906,
        "sender_full_name": "nitsky",
        "timestamp": 1606234881
    },
    {
        "content": "<p>what if the macro was designed to be fault-tolerant, i.e. it expanded to produce partial rust code?</p>",
        "id": 217777088,
        "sender_full_name": "nitsky",
        "timestamp": 1606234944
    },
    {
        "content": "<p>then it should work, but it's doubtful that many proc macros are.</p>",
        "id": 217777453,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1606235097
    },
    {
        "content": "<p>syn would have to be able to parse incomplete code too</p>",
        "id": 217777499,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606235122
    },
    {
        "content": "<p>Thanks, I'm going to start looking into this and will let you know how it goes.</p>",
        "id": 217777707,
        "sender_full_name": "nitsky",
        "timestamp": 1606235205
    },
    {
        "content": "<p>I can't tell you exactly what to do, but I'd start around <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/b769f5da6e51d1da2c981f00c48fb2585f933138/crates/proc_macro_api/src/process.rs#L61-L66\">here</a>. This function gets a <code>Subtree</code> and returns an expanded <code>Subtree</code>. The tokens in this subtree have <code>TokenId</code>s, and those need to be preserved. <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> am I missing something, or do fn-like proc macros also expand through <code>custom_derive</code>?</p>",
        "id": 217777715,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1606235209
    },
    {
        "content": "<p>yes, it's a gross hack :D</p>",
        "id": 217777746,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606235228
    },
    {
        "content": "<p>you can use custom derives as <code>!</code>-macros and vice-versa</p>",
        "id": 217777796,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606235250
    },
    {
        "content": "<p>thanks :)</p>",
        "id": 217777938,
        "sender_full_name": "nitsky",
        "timestamp": 1606235304
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> it seems that the changes you made in the last few days to proc-macros have to some extent implemented this feature!</p>",
        "id": 219144450,
        "sender_full_name": "nitsky",
        "timestamp": 1607378412
    },
    {
        "content": "<p>uh, yeah, this seems to work wayyyy better than expected</p>",
        "id": 219144516,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607378445
    },
    {
        "content": "<p>I wonder if it was the token remapping fix that did this</p>",
        "id": 219144534,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607378457
    },
    {
        "content": "<p>They now basically work as well as MBE macros, at least in the cases I've tested</p>",
        "id": 219144571,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607378482
    },
    {
        "content": "<p>thanks! :) I am testing now and so far a lot is working.</p>",
        "id": 219144768,
        "sender_full_name": "nitsky",
        "timestamp": 1607378569
    },
    {
        "content": "<p>I am seeing a lot of \"proc macro server crashed\" errors, I will try to get something small and reproducible and file an issue.</p>",
        "id": 219145074,
        "sender_full_name": "nitsky",
        "timestamp": 1607378719
    },
    {
        "content": "<p>Is there a way of rebooting the proc macro server without restarting RA?</p>",
        "id": 219145167,
        "sender_full_name": "nitsky",
        "timestamp": 1607378763
    },
    {
        "content": "<p>Not currently, no</p>",
        "id": 219145192,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607378775
    },
    {
        "content": "<p>But it prints the panic message to stderr</p>",
        "id": 219145223,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607378791
    },
    {
        "content": "<p>So it should show up in the output panel</p>",
        "id": 219145239,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607378800
    },
    {
        "content": "<p>I think we could send a <code>window/showMessageRequest</code> to the client and prompt a restart if someone wanted to implement that</p>",
        "id": 219206521,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1607434489
    },
    {
        "content": "<p>Yes, that would be good</p>",
        "id": 219206911,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607434729
    }
]