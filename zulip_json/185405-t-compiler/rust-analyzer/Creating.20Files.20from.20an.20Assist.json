[
    {
        "content": "<p>I'm trying to implement an assist that extracts inline modules to a a file. ( <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/5054\">https://github.com/rust-analyzer/rust-analyzer/issues/5054</a> )</p>\n<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> referenced two starting points, but I'm bumping up against some limitations because assists currently don't have the machinery for adding new files.</p>\n<p>I have an idea how to implement it, but I thought I'd ask if this sounds reasonable first:</p>\n<ul>\n<li>extend <code>ra_ide_db::source_change::FileSystemEdit::CreateFile</code>with a <code>contents: Option&lt;String&gt;</code> </li>\n</ul>\n<p>For LSP this  would be expanded to 2 separate document changes in <code>snippet_workspace_edit()</code> ( <code>lsp_types::CreateFile</code> + a edit with the initial content )</p>\n<ul>\n<li>\n<p>change <code>AssistBuilder</code> to hold a full <code>SourceChange</code> instead of <code>Vec&lt;SourceFileEdit&gt;</code></p>\n</li>\n<li>\n<p>add <code>AssistBuilder::create_file(&amp;mut self, relative_path: String, contents: String)</code>, witht the relative path anchored at <code>AssistBuilder::file_id</code></p>\n</li>\n</ul>",
        "id": 203083505,
        "sender_full_name": "theduke",
        "timestamp": 1594114710
    },
    {
        "content": "<p>Yup, these all sounds resonnable</p>",
        "id": 203083640,
        "sender_full_name": "matklad",
        "timestamp": 1594114826
    },
    {
        "content": "<p>The only bit I am unusre about is the last one, about <code>create_file</code>:</p>\n<ul>\n<li>It's not super clear how to represent \"relative to a file\" paths in rust-analyzer (we do this in an ad hoc manner at the moment)</li>\n<li>The fact that there's \"current\" file in assist builder might be an accident of historical designt</li>\n</ul>",
        "id": 203083701,
        "sender_full_name": "matklad",
        "timestamp": 1594114891
    },
    {
        "content": "<p>but I don't have any strictly better proposals of hand</p>",
        "id": 203083709,
        "sender_full_name": "matklad",
        "timestamp": 1594114903
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214681\">@theduke</span> I guess one thing though is that let's <em>first</em> refactor assist to hold <code>SourceChange</code> and send that as a PR without functional changes.</p>",
        "id": 203083786,
        "sender_full_name": "matklad",
        "timestamp": 1594114939
    },
    {
        "content": "<p>Than it would be easier to review file addition API</p>",
        "id": 203083800,
        "sender_full_name": "matklad",
        "timestamp": 1594114948
    },
    {
        "content": "<p>Can do, but I just did that and it's a tiny diff</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gh\">diff --git a/crates/ra_assists/src/assist_context.rs b/crates/ra_assists/src/assist_context.rs</span>\n<span class=\"gh\">index 3640bb4d2..f34c6dfde 100644</span>\n<span class=\"gd\">--- a/crates/ra_assists/src/assist_context.rs</span>\n<span class=\"gi\">+++ b/crates/ra_assists/src/assist_context.rs</span>\n<span class=\"gu\">@@ -7,7 +7,7 @@ use hir::Semantics;</span>\n use ra_db::{FileId, FileRange};\n use ra_fmt::{leading_indent, reindent};\n use ra_ide_db::{\n<span class=\"gd\">-    source_change::{SourceChange, SourceFileEdit},</span>\n<span class=\"gi\">+    source_change::{SourceChange, SourceFileEdit, FileSystemEdit},</span>\n     RootDatabase,\n };\n use ra_syntax::{\n<span class=\"gu\">@@ -176,7 +176,7 @@ pub(crate) struct AssistBuilder {</span>\n     edit: TextEditBuilder,\n     file_id: FileId,\n     is_snippet: bool,\n<span class=\"gd\">-    edits: Vec&lt;SourceFileEdit&gt;,</span>\n<span class=\"gi\">+    change: SourceChange,</span>\n }\n\n impl AssistBuilder {\n<span class=\"gu\">@@ -185,7 +185,7 @@ impl AssistBuilder {</span>\n             edit: TextEditBuilder::default(),\n             file_id,\n             is_snippet: false,\n<span class=\"gd\">-            edits: Vec::new(),</span>\n<span class=\"gi\">+            change: SourceChange::default(),</span>\n         }\n     }\n\n<span class=\"gu\">@@ -197,8 +197,8 @@ impl AssistBuilder {</span>\n         let edit = mem::take(&amp;mut self.edit).finish();\n         if !edit.is_empty() {\n             let new_edit = SourceFileEdit { file_id: self.file_id, edit };\n<span class=\"gd\">-            assert!(!self.edits.iter().any(|it| it.file_id == new_edit.file_id));</span>\n<span class=\"gd\">-            self.edits.push(new_edit);</span>\n<span class=\"gi\">+            assert!(!self.change.source_file_edits.iter().any(|it| it.file_id == new_edit.file_id));</span>\n<span class=\"gi\">+            self.change.source_file_edits.push(new_edit);</span>\n         }\n     }\n\n<span class=\"gu\">@@ -265,10 +265,10 @@ impl AssistBuilder {</span>\n\n     fn finish(mut self) -&gt; SourceChange {\n         self.commit();\n<span class=\"gd\">-        let mut res: SourceChange = mem::take(&amp;mut self.edits).into();</span>\n<span class=\"gi\">+        let mut change = mem::take(&amp;mut self.change);</span>\n         if self.is_snippet {\n<span class=\"gd\">-            res.is_snippet = true;</span>\n<span class=\"gi\">+            change.is_snippet = true;</span>\n         }\n<span class=\"gd\">-        res</span>\n<span class=\"gi\">+        change</span>\n     }\n }\n</code></pre></div>",
        "id": 203084027,
        "sender_full_name": "theduke",
        "timestamp": 1594115110
    },
    {
        "content": "<blockquote>\n<p>Can do, but I just did that and it's a tiny diff</p>\n</blockquote>\n<p>The tinyer the diff, the merrier  I am :-)</p>",
        "id": 203084108,
        "sender_full_name": "matklad",
        "timestamp": 1594115169
    },
    {
        "content": "<p>hehe, alright I'll open a separate PR then</p>",
        "id": 203084150,
        "sender_full_name": "theduke",
        "timestamp": 1594115212
    },
    {
        "content": "<p>Should I also do two separate PRs for the create file changes and the actual new assist?</p>",
        "id": 203086405,
        "sender_full_name": "theduke",
        "timestamp": 1594117264
    },
    {
        "content": "<p>Either way is fine</p>",
        "id": 203086647,
        "sender_full_name": "matklad",
        "timestamp": 1594117542
    },
    {
        "content": "<p>How would I get the current file name in an assist?<br>\nAs in, somehow turn a <code>FileId</code> into a path</p>\n<p>I've been jumping around the code for a while and can't really find a way</p>\n<p>I need it to determine the target path</p>\n<p>eg for  <code>mod x{}</code> :</p>\n<ul>\n<li>inside <code>mod.rs</code> =&gt; <code>./x.rs</code></li>\n<li>inside <code>some_parent.rs</code> =&gt; <code>./some_parent/x.rs</code></li>\n</ul>",
        "id": 203099157,
        "sender_full_name": "theduke",
        "timestamp": 1594127257
    },
    {
        "content": "<p>Seems like that would require a quite a lot of new plumbing since it needs a new method on: </p>\n<ul>\n<li><code>FileLoader</code></li>\n<li><code>FileLoaderDelegate</code></li>\n<li><code>SourceDatabaseExt</code></li>\n<li><code>SourceDatabase</code></li>\n</ul>\n<p>Unless I'm missing some existing helper method somewhere (which I probably am)</p>",
        "id": 203102240,
        "sender_full_name": "theduke",
        "timestamp": 1594128766
    },
    {
        "content": "<p>So, the general answer that you don't :)</p>",
        "id": 203103268,
        "sender_full_name": "matklad",
        "timestamp": 1594129239
    },
    {
        "content": "<p>We deliberatelly don't expose full file paths to internals</p>",
        "id": 203103299,
        "sender_full_name": "matklad",
        "timestamp": 1594129250
    },
    {
        "content": "<p>so that we don't accidently rely on files being on disk or something like that</p>",
        "id": 203103335,
        "sender_full_name": "matklad",
        "timestamp": 1594129266
    },
    {
        "content": "<p>We have <code>is_mod_rs</code> on <code>Module</code> for this, and you can look at the <code>Module</code>'s name. I think that should be enough</p>",
        "id": 203103567,
        "sender_full_name": "matklad",
        "timestamp": 1594129357
    },
    {
        "content": "<p>Makes sense. Yeah is_mod_rs is all I need.</p>",
        "id": 203111564,
        "sender_full_name": "theduke",
        "timestamp": 1594133064
    },
    {
        "content": "<blockquote>\n<p>so that we don't accidently rely on files being on disk </p>\n</blockquote>\n<p>To clarify, this is not about \"files phisicaly being stored on a hard drive\", but about \"path represents an inode\". I can imagine  some remote analysis scenarios, where files are purely virtual, and don't correspond to an existing FS at all. This might be overenginering though, but maybe not :)</p>",
        "id": 203112584,
        "sender_full_name": "matklad",
        "timestamp": 1594133530
    },
    {
        "content": "<p>No it makes sense to have an abstraction from complete files<br>\nalso  when considering more complicated refactorings</p>",
        "id": 203113525,
        "sender_full_name": "theduke",
        "timestamp": 1594133995
    },
    {
        "content": "<p>I'm thinking about how to test the new assist</p>",
        "id": 203113610,
        "sender_full_name": "theduke",
        "timestamp": 1594134011
    },
    {
        "content": "<p>Good question!</p>",
        "id": 203113657,
        "sender_full_name": "matklad",
        "timestamp": 1594134029
    },
    {
        "content": "<p>right now, all the tests simply create a mock file, manually get the source code, apply the assist and that's it</p>",
        "id": 203113678,
        "sender_full_name": "theduke",
        "timestamp": 1594134037
    },
    {
        "content": "<p>You can create mulitfile fixtures</p>",
        "id": 203113718,
        "sender_full_name": "matklad",
        "timestamp": 1594134062
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/fix_visibility.rs#L510-L524\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/fix_visibility.rs#L510-L524</a></p>",
        "id": 203113752,
        "sender_full_name": "matklad",
        "timestamp": 1594134073
    },
    {
        "content": "<p>But I think you can assert only a single file</p>",
        "id": 203113773,
        "sender_full_name": "matklad",
        "timestamp": 1594134083
    },
    {
        "content": "<p>yeah, and the <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/tests.rs#L84\">test code</a> only applies a single edit manually</p>",
        "id": 203114042,
        "sender_full_name": "theduke",
        "timestamp": 1594134186
    },
    {
        "content": "<p>I guess <code>rename</code> would also touch and test multiple files, but that doesn't seem to be in <code>ra_assists::handlers</code> ?</p>",
        "id": 203114310,
        "sender_full_name": "theduke",
        "timestamp": 1594134296
    },
    {
        "content": "<p>ah, <code>ra_ide::references::rename</code></p>",
        "id": 203114424,
        "sender_full_name": "theduke",
        "timestamp": 1594134341
    },
    {
        "content": "<p>The <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/references/rename.rs#L280\">rename check</a> does more or less the same thing</p>",
        "id": 203114859,
        "sender_full_name": "theduke",
        "timestamp": 1594134482
    },
    {
        "content": "<p>but it would be really nice to have something like <code>SourceChange::apply(db) -&gt; RootDatabase</code></p>",
        "id": 203115136,
        "sender_full_name": "theduke",
        "timestamp": 1594134604
    },
    {
        "content": "<p>or whatever the right target would be</p>",
        "id": 203115179,
        "sender_full_name": "theduke",
        "timestamp": 1594134629
    },
    {
        "content": "<p>I think that should be a testing utility, which returns a set of modified files (so that you don't need to compare files which are not changed)</p>",
        "id": 203115393,
        "sender_full_name": "matklad",
        "timestamp": 1594134734
    },
    {
        "content": "<p>And, in tests, I think you should have access to file paths</p>",
        "id": 203115422,
        "sender_full_name": "matklad",
        "timestamp": 1594134746
    }
]