[
    {
        "content": "<p>I've been thinking how to write more focused type checking tests (where just one or a few specific expressions are being tested). One thing I'd like to do is validate them against rustc, i.e. make sure that rustc infers the same type for that expression. I'm currently considering two ways:<br>\n1. a macro that defines a test: The end result would maybe look somewhat like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">ty_test</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">method_resolution_trait_before_autoderef</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">u128</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i8</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">u128</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_type</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">.</span><span class=\"n\">foo</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">u128</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">});</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>and it would on the one hand include that code in the actual test (with <code>assert_type</code> expanding to something that fails to build if the type doesn't match), and on the other hand use <code>stringify</code> to generate a test that runs RA's type inference on the code and checks that the asserted type is correct (with a different definition of <code>assert_type</code>).<br>\n2. use <code>compiletest</code> and test via diagnostics: We'd need to first add diagnostics for type checking errors (maybe toggleable somehow), and then we'd implement enough of <code>compiletest</code> to compare RA's diagnostics to the ones defined in the test file, so something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">u128</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i8</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">u128</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i8</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"p\">.</span><span class=\"n\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// ~ERROR mismatched types</span>\n</pre></div>\n\n\n<p>The nice thing about this would be that it could be used for other diagnostics as well, but the error annotations in the compiletest files would have to be written to match both rustc's and RA's diagnostics, which would probably be complicated. Also it'd make the tests somewhat dependent on rustc's error messages.</p>\n<p>What do you think?</p>",
        "id": 163314723,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1555244235
    },
    {
        "content": "<p>Good questions!</p>\n<p>Having focused unit-test would be really helpful. Long run, I imagine having our own well-factored test-suite  will be better than direct comparison with rustc (especially if we are aiming at merging with rustc typchecker: it would be a shame if sharing type-checking code makes all the tests void :D ). I also feel like we shouldn't rely on <code>compiletest</code>, at lest directly: there's going to be a <strong>huge</strong> number of tests, and any communication with compiler is bound to make them slower. So, I'd game for something like <code>insta</code>, but where the <em>gold</em> values to compare against could be generated by using rustc, once. </p>\n<p>If we are going to have astronomical number of tests here, than maybe going full-data would be beneficial? Basically, using the same setup we use for parsing --- a <code>.data</code> folder with cases and gold results.</p>",
        "id": 163316951,
        "sender_full_name": "matklad",
        "timestamp": 1555248190
    },
    {
        "content": "<p>Do we actually get a big long-term value out of validation with rustc? </p>\n<p>I imagine the value here is \"we can confidently replace typechecker in the compiler\", but I imagine we could write comparison test when actually switching the typecher (and even than, I'd imagine we'd just run both typechecker simultaneously for some time to check the results on real code).</p>\n<p>For \"making sure that type-checker works mostly correct\", I feel like just writing test by hand will be faster.</p>\n<p>What would help is a <em>minimal</em> corpus of rust code that exercises type-checker in an interesting way. I think reusing IntelliJ test-suite  would be a smart move here, it should be pretty well factored</p>",
        "id": 163317155,
        "sender_full_name": "matklad",
        "timestamp": 1555248592
    },
    {
        "content": "<p>My goal isn't to directly compare to rustc, but rather to make sure that the 'gold' value is the same as in rustc (or in other words, to be able to run the same test against rustc's type checker)</p>",
        "id": 163317270,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1555248725
    },
    {
        "content": "<p>Hm, actually, I think there could be a <strong>huge</strong> value in the compiler-independent rust-typecheker test suite!</p>",
        "id": 163317278,
        "sender_full_name": "matklad",
        "timestamp": 1555248762
    },
    {
        "content": "<p>so e.g. in the first example, the test defines what type is expected, but it's written in a way that it wouldn't even compile if the expected type is not the same one as rustc would infer</p>",
        "id": 163317290,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1555248795
    },
    {
        "content": "<p>as a way to 'prove' that the expectation is actually correct ;) (since e.g. I didn't know beforehand in which order autoderefs happen vs. looking at extension methods)</p>",
        "id": 163317343,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1555248854
    },
    {
        "content": "<p>Yeah, I see how this could be useful in various corner cases. OTOH, for, for example, autoderef one can write a test-case manually and see. That is, such cases seems pretty rare to me</p>",
        "id": 163317375,
        "sender_full_name": "matklad",
        "timestamp": 1555248940
    },
    {
        "content": "<p>coming back to the idea of the compiler-independent test-suite: let's say that a test is a rust-file (possibly with special mark-up, like <code>&lt;|&gt;</code> thing),  and the result of the test is a human-readable representation of the type.</p>\n<p>We than have a \"driver\" which feeds this into rust-analyzer, and a driver which feeds it into <code>rustc</code>. </p>\n<p>By not depending on precise diagnostics, this should actually be feasible to implement</p>",
        "id": 163317498,
        "sender_full_name": "matklad",
        "timestamp": 1555249090
    },
    {
        "content": "<p>I guess we can invent something for non-denotable types like closures?</p>",
        "id": 163317502,
        "sender_full_name": "matklad",
        "timestamp": 1555249109
    },
    {
        "content": "<p>The benefit I see in this setup is that the test-suite is 100% text files, so it could be reused by other projects with minimal effort</p>",
        "id": 163317520,
        "sender_full_name": "matklad",
        "timestamp": 1555249177
    },
    {
        "content": "<p>I imagine it will be possible to always write tests without having to denote non-denotable types</p>",
        "id": 163317561,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1555249203
    },
    {
        "content": "<p>(another reason is btw that I'm always annoyed that I'm writing rust code inside a string inside rust code, without any editor support ;) )</p>",
        "id": 163317589,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1555249267
    },
    {
        "content": "<p>the tests could use an attribute like <code>#[expected_type(i128)]</code>, we'd just have to turn that into tests compileable with rustc as well</p>",
        "id": 163317642,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1555249339
    },
    {
        "content": "<p>cool! Yeah, a \"special\" mark-up could be a magic macro call!</p>\n<p>And it could expand to <code>let _: $ty = $expr;</code> in rustc</p>",
        "id": 163317660,
        "sender_full_name": "matklad",
        "timestamp": 1555249405
    },
    {
        "content": "<p>LIke, <code>expect_ty!(2 + 90, i32)</code></p>",
        "id": 163317662,
        "sender_full_name": "matklad",
        "timestamp": 1555249424
    },
    {
        "content": "<p>with which we're almost at my option 1 ;)</p>",
        "id": 163317714,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1555249475
    },
    {
        "content": "<p>except with separate files</p>",
        "id": 163317719,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1555249502
    },
    {
        "content": "<p>Yeah.... I feel like option 1 wouldn't work for <strong>all</strong> of the cases. Specifically, I think we might want to specify lang-items inside the tests</p>",
        "id": 163317812,
        "sender_full_name": "matklad",
        "timestamp": 1555249640
    },
    {
        "content": "<p>There's also a tradeoff:</p>\n<p>inline test data, like in macro or in a string literal, is easier to work with</p>\n<p>out-of-line data in the directory is easier to reuse in some yet-unknown projects</p>",
        "id": 163317877,
        "sender_full_name": "matklad",
        "timestamp": 1555249723
    },
    {
        "content": "<p>yeah</p>",
        "id": 163318122,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1555250119
    },
    {
        "content": "<p>I'll write the test in the straight-forward way for now anyway, we need a bit better macro support before we can do this :)</p>",
        "id": 163318176,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1555250201
    },
    {
        "content": "<p>FWIW, long-term, specifying tests in strings should give use more editor support than specifying them in macros</p>",
        "id": 163318730,
        "sender_full_name": "matklad",
        "timestamp": 1555251007
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/hBTRYQ3RDOWqTevNjCmRdlUI/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/hBTRYQ3RDOWqTevNjCmRdlUI/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/hBTRYQ3RDOWqTevNjCmRdlUI/pasted_image.png\"></a></div>",
        "id": 163318732,
        "sender_full_name": "matklad",
        "timestamp": 1555251011
    },
    {
        "content": "<p>though I am not sure how this whole \"Language Injection\" workflow should work in the LSP setting...</p>",
        "id": 163318756,
        "sender_full_name": "matklad",
        "timestamp": 1555251081
    }
]