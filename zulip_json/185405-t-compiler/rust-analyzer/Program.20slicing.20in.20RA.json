[
    {
        "content": "<p>Hi everyone. I'm Will, a CS PhD student at Stanford. My research is about using psychological principles to improve programming tools.</p>\n<p>I'm interested in building a <a href=\"https://en.wikipedia.org/wiki/Program_slicing\">program slicer</a> for Rust integrated into rust-analyzer. The core concept is that you could click a variable and query for the set of operations that are needed to compute the variable. A simple conservative analysis would be to include any code that mutably borrows that variable.</p>\n<p>In order to implement this strategy, I need access to borrow information. But from my understanding, RA doesn't implement borrow checking, only type checking. Would I need to fully reimplement the Rust borrow checker to get borrow information? Or put another way, is my only choice to build a separate plugin against rustc_private that could somehow be invoked by RA?</p>",
        "id": 228018712,
        "sender_full_name": "Will Crichton",
        "timestamp": 1614386565
    },
    {
        "content": "<p>I'm probably missing something, but do you actually need borrow checking? Mutable borrows are already expressed in the type system and for a correct program you don't need the borrow checker to evaluate it</p>",
        "id": 228035922,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614404844
    },
    {
        "content": "<p>Yeah, I don't think you need full borrow checker here</p>",
        "id": 228045855,
        "sender_full_name": "matklad",
        "timestamp": 1614417545
    },
    {
        "content": "<p>though, you might need control flow analysis, which we don't have either</p>",
        "id": 228045887,
        "sender_full_name": "matklad",
        "timestamp": 1614417580
    },
    {
        "content": "<p>You might want to take a look at how we decide if we should underline the variable during highlighting: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ide/src/syntax_highlighting/highlight.rs#L333-L335\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ide/src/syntax_highlighting/highlight.rs#L333-L335</a></p>",
        "id": 228045946,
        "sender_full_name": "matklad",
        "timestamp": 1614417614
    },
    {
        "content": "<p>The first approximation of a program slice would be the set of all expressions, where the variable is underined</p>",
        "id": 228045954,
        "sender_full_name": "matklad",
        "timestamp": 1614417646
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/Ua-_ezKB6cK3ZFV-RFLOvE8h/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/Ua-_ezKB6cK3ZFV-RFLOvE8h/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/Ua-_ezKB6cK3ZFV-RFLOvE8h/image.png\"></a></div>",
        "id": 228046037,
        "sender_full_name": "matklad",
        "timestamp": 1614417756
    },
    {
        "content": "<p>(we actually need to improme that to <em>not</em> underline the varible when it is used immutably)</p>",
        "id": 228046058,
        "sender_full_name": "matklad",
        "timestamp": 1614417803
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span>  I think you need some kind of  borrow information. Here's a simple example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"o\">*</span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>A program slicer needs to know that line 3 affects the value of <code>x</code>. Or at least, that <code>w</code> has a mutable borrow on <code>x</code>, and so mutations to <code>w</code> could affect <code>x</code>. </p>\n<p>Right now, it's possible in RA to find all references to a variable. So I can identify that <code>x</code> is used on line 2. But the fact that <code>w</code> mutably borrows <code>x</code> is not computed.</p>\n<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span><del> can you explain when the highlighting you linked is activated? Can't seem to get underlining to appear in my own IDE.</del> Nevermind, it's because I was using a different theme :-) the underlining doesn't seem to show up on Solarized Light.</p>",
        "id": 228062737,
        "sender_full_name": "Will Crichton",
        "timestamp": 1614437589
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"265377\">@Will Crichton</span> the IDE needs support for \"semantic tokens\" LSP feature, and the color scheme needs to have support for mutable token kind</p>",
        "id": 228063618,
        "sender_full_name": "matklad",
        "timestamp": 1614438601
    },
    {
        "content": "<p>ah, I see now, that's a good example! Yeah, at the moment rust-analyzer can only say: \"hey, in line <code>let w = &amp;mut x</code>, you are going to mutate <code>x</code>\". It won't be able to infer that <code>*w = 2</code> is a specific mutation to x</p>",
        "id": 228063725,
        "sender_full_name": "matklad",
        "timestamp": 1614438684
    },
    {
        "content": "<p>So yeah, if you need that level of precision, you either need to add borrow checker to rust-analyzer, or to build on top of <code>rustc</code></p>",
        "id": 228063807,
        "sender_full_name": "matklad",
        "timestamp": 1614438767
    },
    {
        "content": "<p>What about mutating values through <code>Rc</code>?</p>",
        "id": 228063840,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614438795
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>  Are there any features in RA that do round-trips to rustc? It's ok for now if the slicing takes a few seconds to run. I'm thinking that adding borrow checks to RA is probably too much for me right now.</p>\n<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> this analysis would definitely not be complete, ie won't work with interior mutability.</p>",
        "id": 228063844,
        "sender_full_name": "Will Crichton",
        "timestamp": 1614438804
    },
    {
        "content": "<p>No, not really, we are by design avoid calling into rustc</p>",
        "id": 228063897,
        "sender_full_name": "matklad",
        "timestamp": 1614438845
    },
    {
        "content": "<p>: ' ( alright, well I'll shelve this idea for now and just implement a standalone analysis.</p>",
        "id": 228063969,
        "sender_full_name": "Will Crichton",
        "timestamp": 1614438947
    },
    {
        "content": "<p>Would <code>polonius</code> help with this?</p>",
        "id": 228064036,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614438984
    },
    {
        "content": "<p>Hmm possibly. If I could drop-in a borrow checker and just implement the initial fact generation, that seems like less works. Great point, I will check it out.</p>",
        "id": 228064135,
        "sender_full_name": "Will Crichton",
        "timestamp": 1614439096
    },
    {
        "content": "<p>But I don't think it's seen much work lately</p>",
        "id": 228064157,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614439148
    },
    {
        "content": "<p>I don't think Polonius is complete enough to be useful here</p>",
        "id": 228064183,
        "sender_full_name": "detrumi",
        "timestamp": 1614439182
    },
    {
        "content": "<p>I will add -- as a research project, my initial goal is not to build the most robust program slicer possible.  Rather, I want to find situations in everyday Rust development that would benefit from slicing. So long as the tool works for a few key cases, that's a good start. </p>\n<p>After this phase, if slicing seems to be really useful, then we could figure out a longer-term integration strategy.</p>",
        "id": 228064299,
        "sender_full_name": "Will Crichton",
        "timestamp": 1614439307
    },
    {
        "content": "<p>If that doesn't pan out, can I interest you in a test case minimization tool? <span aria-label=\"joy cat\" class=\"emoji emoji-1f639\" role=\"img\" title=\"joy cat\">:joy_cat:</span></p>",
        "id": 228064690,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614439699
    },
    {
        "content": "<p>A quick question: does RA have precise information about lifetime constraints? For example, in the following snippet:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"p\">.];</span><span class=\"w\"></span>\n<span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The last statement would add a constraint that the anonymous lifetime associated with <code>y</code> should outlive the anonymous lifetime associated with <code>r</code>. As far as I know, Polonius is missing this information and it is critical.</p>",
        "id": 228067227,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1614442522
    },
    {
        "content": "<p>By “missing” I mean that this information is computed by Rustc and given to Polonius as input.</p>",
        "id": 228067309,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1614442622
    },
    {
        "content": "<p>r-a does not compute that at the moment</p>",
        "id": 228067323,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1614442634
    },
    {
        "content": "<p>no, rust-analyzer doesn't deal with lifetimes at all yet, basically. There's a large amount of plumbing that would need to be implemented before we can even start thinking about polonius integration</p>",
        "id": 228067324,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1614442635
    },
    {
        "content": "<p>and a prerequisite to that is switching to Chalk's type representation fully</p>",
        "id": 228067400,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1614442718
    },
    {
        "content": "<p>I see. Thanks!</p>",
        "id": 228067405,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1614442729
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Program.20slicing.20in.20RA/near/228067400\">said</a>:</p>\n<blockquote>\n<p>and a prerequisite to that is switching to Chalk's type representation fully</p>\n</blockquote>\n<p>Is there an incremental path to that? A part that somebody other than you could implement?</p>",
        "id": 228067604,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614442926
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"265377\">@Will Crichton</span> So, it seems that you will have to build on top of Rustc. If you are aiming for a research prototype, one option would be to hack something on top of <a href=\"https://github.com/viperproject/prusti-dev\">Prusti</a>, which should have most of the information you need or at least some ideas how to get it.</p>",
        "id": 228067620,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1614442952
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116109\">Vytautas Astrauskas</span> What's the advantage of using Prusti vs. rustc_private? Are there more slicing-relevant analyses than in rustc? Or is the analysis information more conveniently accessed/ documented?</p>",
        "id": 228068445,
        "sender_full_name": "Will Crichton",
        "timestamp": 1614443859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"265377\">Will Crichton</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Program.20slicing.20in.20RA/near/228068445\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116109\">Vytautas Astrauskas</span> What's the advantage of using Prusti vs. rustc_private? Are there more slicing-relevant analyses than in rustc? Or is the analysis information more conveniently accessed/ documented?</p>\n</blockquote>\n<p>The borrow checker information is buried deep inside the Rustc and Prusti uses <a href=\"https://github.com/viperproject/prusti-dev/blob/e207038b94cb8e5499b309de7ec52765b6e2404b/prusti-interface/src/environment/borrowck/regions.rs#L25-L43\">extremely ugly hacks</a> to get that information out. If you build on top of Prusti, you will not need to reimplement them. Of course, if you know a better way of getting out the borrow information, then I would be super happy to hear that because maintaining this code is a pain.</p>",
        "id": 228069017,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1614444448
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"265377\">@Will Crichton</span> If you would like to have a call to discuss what Prusti does and whether/how that could be useful for you, let me know.</p>",
        "id": 228069744,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1614445241
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu Nicola</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Program.20slicing.20in.20RA/near/228067604\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Program.20slicing.20in.20RA/near/228067400\">said</a>:</p>\n<blockquote>\n<p>and a prerequisite to that is switching to Chalk's type representation fully</p>\n</blockquote>\n<p>Is there an incremental path to that? A part that somebody other than you could implement?</p>\n</blockquote>\n<p>Hmm actually I think the best approach is to gradually move the API of things like <code>Ty</code> to be the same as the Chalk version, to reduce the size of the final step of actually switching</p>",
        "id": 228081108,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1614457764
    },
    {
        "content": "<p>I'll try to work on that a bit</p>",
        "id": 228094505,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614473876
    }
]