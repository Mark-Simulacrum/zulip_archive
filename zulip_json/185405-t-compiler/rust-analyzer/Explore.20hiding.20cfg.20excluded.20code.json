[
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> , I was thinking about looking into dimming code that is not compiled with cfg, so, e.g. if you have some code that's</p>\n<div class=\"codehilite\"><pre><span></span><code>#[cfg(not(test))]\nstruct A { ... }\n\n#[cfg(test)]\nstruct A { ... }\n</code></pre></div>\n\n\n<p>then one of the two could be hidden with styling. At least for vs code, that's not currently possible outside of <code>Diagnostic::Unused</code>, which doesn't seem like an appropriate usage of that tag. Do you think it's still worth that effort or add in the initial support as a possible motivator to get some support in vs code for some additional dimming outside of the diagnostic tag?</p>",
        "id": 201142160,
        "sender_full_name": "Paul Faria",
        "timestamp": 1592401344
    },
    {
        "content": "<p>Implementation wise, I think I could build off the work the work that was done with doctests in terms of replacing the highlighting stacks.</p>",
        "id": 201142573,
        "sender_full_name": "Paul Faria",
        "timestamp": 1592401539
    },
    {
        "content": "<p>I prefer to think not in terms of VS Code, but in terms of some hypothetical \"perfect\" IDE client. It's better if clients catch up with the server, than vice verse :)</p>\n<p>For cfg, I think we need to do two things:</p>\n<ul>\n<li>stop appling <code>UnresovledReference</code> Tag, and fall-back on the syntax-based tag (generlizing doctest infra for this)</li>\n<li>applying <code>| Disabled</code> modification</li>\n</ul>",
        "id": 201143651,
        "sender_full_name": "matklad",
        "timestamp": 1592402025
    },
    {
        "content": "<p>The harder bit is figuring out <em>which</em> code is disabled, and what does it mean at all... </p>\n<p>Like, you can have a single crate both with and without <code>--test</code> enabled. SHould this disable <code>#[cfg(test)]</code> code?</p>",
        "id": 201143752,
        "sender_full_name": "matklad",
        "timestamp": 1592402068
    },
    {
        "content": "<p>In my ideal world, it would disable <code>#[cfg(test)]</code> code when the cursor is in an item that does not have <code>#[cfg(test)]</code> on it</p>",
        "id": 201144557,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592402427
    },
    {
        "content": "<p>This actually relates to a conversation I was having with <span class=\"user-mention\" data-user-id=\"301314\">@woody77</span> . We were thinking of a way to toggle cfg items on and off through some kind of command rather than changing a settings config. I've run into this myself in some of my own projects where some feature flags conflict with each other, and <code>--all-features</code> isn't a possible solution.</p>",
        "id": 201145600,
        "sender_full_name": "Paul Faria",
        "timestamp": 1592402876
    },
    {
        "content": "<p>The ideal UI woudl be <a href=\"https://github.com/intellij-rust/intellij-rust/pull/5189\">https://github.com/intellij-rust/intellij-rust/pull/5189</a></p>",
        "id": 201145929,
        "sender_full_name": "matklad",
        "timestamp": 1592403017
    },
    {
        "content": "<p>Oh wow I was thinking of checkboxes too! but I didn't think to place it in Cargo.toml</p>",
        "id": 201146039,
        "sender_full_name": "Paul Faria",
        "timestamp": 1592403072
    },
    {
        "content": "<p>One area where this could get confusing is if you're navigating multiple crates</p>",
        "id": 201146065,
        "sender_full_name": "Paul Faria",
        "timestamp": 1592403088
    },
    {
        "content": "<p>For example, in one of my crates I have subfolders with test crates that depend on the main crate with different features toggled on and off.</p>",
        "id": 201146123,
        "sender_full_name": "Paul Faria",
        "timestamp": 1592403112
    },
    {
        "content": "<p>Navigating through the code there, my preference would be that the context of the flags in the crates  that I'm jumping to would depend on where I jumped from. But from an internals perspective, that sounds like something that's very hard to get right.</p>",
        "id": 201146301,
        "sender_full_name": "Paul Faria",
        "timestamp": 1592403171
    },
    {
        "content": "<p>Unless maybe there's a way to say, \"show all code as if this crate was the main crate\". I imagine multi-crate scenarios like this are somewhat rare</p>",
        "id": 201146524,
        "sender_full_name": "Paul Faria",
        "timestamp": 1592403251
    },
    {
        "content": "<blockquote>\n<p>But from an internals perspective, that sounds like something that's very hard to get right.</p>\n</blockquote>\n<p>That's actually how it is implemnted internally already</p>",
        "id": 201146664,
        "sender_full_name": "matklad",
        "timestamp": 1592403313
    },
    {
        "content": "<p>The impl parts are not that difficult, you just have to allow for several instances of a crate in the crate graph</p>",
        "id": 201146720,
        "sender_full_name": "matklad",
        "timestamp": 1592403333
    },
    {
        "content": "<p>Oh I had no clue that was in place already.</p>",
        "id": 201146837,
        "sender_full_name": "Paul Faria",
        "timestamp": 1592403371
    },
    {
        "content": "<p>The hard thing is UI: reconsiling the fact that the user sees \"a struct\" with a fact that this struct corresponds to 2-3 <code>hir::Struct</code> in different crates internally</p>",
        "id": 201146848,
        "sender_full_name": "matklad",
        "timestamp": 1592403374
    },
    {
        "content": "<p>Which part of the code should I read to get a better understanding of how this works?</p>",
        "id": 201147074,
        "sender_full_name": "Paul Faria",
        "timestamp": 1592403478
    },
    {
        "content": "<p>I also realized, regarding the checkbox UI you linked from intellij, we'd need an alternate implementation for supporting json projects.</p>",
        "id": 201147220,
        "sender_full_name": "Paul Faria",
        "timestamp": 1592403532
    },
    {
        "content": "<p>So, the reason <em>why</em> it works is that we don't restrict CrateGraph to only have a single Crate for each root modules</p>",
        "id": 201147349,
        "sender_full_name": "matklad",
        "timestamp": 1592403590
    },
    {
        "content": "<p>And if you are already in the context of a specific Crate, then you get correct dependnecies, etc</p>",
        "id": 201147459,
        "sender_full_name": "matklad",
        "timestamp": 1592403625
    },
    {
        "content": "<p>The only trick happens when you translate a raw position (file <a href=\"http://foo.rs\">foo.rs</a>, line 92, offset 62) into a crate with this file</p>",
        "id": 201147515,
        "sender_full_name": "matklad",
        "timestamp": 1592403649
    },
    {
        "content": "<p>Here, at the moment we basically \"guess\": pick the first crate which matches</p>",
        "id": 201147619,
        "sender_full_name": "matklad",
        "timestamp": 1592403707
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir/src/semantics/source_to_def.rs#L30-L39\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir/src/semantics/source_to_def.rs#L30-L39</a></p>",
        "id": 201147621,
        "sender_full_name": "matklad",
        "timestamp": 1592403708
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Explore.20hiding.20cfg.20excluded.20code/near/201146720\">said</a>:</p>\n<blockquote>\n<p>The impl parts are not that difficult, you just have to allow for several instances of a crate in the crate graph</p>\n</blockquote>\n<p>Catching up _very_ belatedly...  This has been on my mind a bunch, recently, as for us, our (current) rust-project.json is a dependency graph of crates to compile, and crates can be listed multiple times, with different sets of enabled features.  I've been trying to decide if we should compress that down or not into something that looks more like Cargo.toml, where each crate is listed as a set of potential features, or the summation of all enabled features in all uses (but then what to do with conflicts).</p>\n<p>I really like the ability we currently seem like we have, where we can put the stdlib into the crate graph multiple times, for different architectures (since we're building both host and embedded-target (aka cross-compilation) in the same tree), and that the graph can know which particular target arch/os we're compiling for.</p>\n<p>But the UI side is hard.  In the graph, it seems easy to know that for a struct that's only in the graph once, that all of its symbols are quite clear.  But once you jump from that struct, to one of the types that it uses, which is in a file that matches multiple places in the graph...  now what?</p>\n<p>Hence <span class=\"user-mention\" data-user-id=\"116114\">@Paul Faria</span> and I talking about how we'd go about marking which config sets to enable (although with a compiled-target approach, RA is able to know how many places in the graph that something exists, and but I'm not sure if we can send back multiple options based on features (vs. files that might match).</p>",
        "id": 201917592,
        "sender_full_name": "woody77",
        "timestamp": 1593042436
    },
    {
        "content": "<p>(sorry for reviving a long-dormant discussion.)</p>\n<p>I was speaking to <span class=\"user-mention\" data-user-id=\"224941\">@Carl Lerche</span> about vending Loom (<a href=\"https://github.com/tokio-rs/loom\">https://github.com/tokio-rs/loom</a>) through a loom-rt crate. One of the biggest gotchas with Loom is the work needed for consumers to set up the dev-dependecy'd Loom that (optionally) replaces std's sync and thread imports based on feature flags. it's not the best experience. What I wanted to ask: I know the checkboxes might be optimal approach for some feature flags, but given predicable <em>scope</em> of swapped imports, can rust-analyzer try to import loom-vended types in <code>#[cfg(loom)]</code> target and std's types in <code>#[cfg(not(loom)]</code>?</p>",
        "id": 220731521,
        "sender_full_name": "David Barsky",
        "timestamp": 1608669365
    },
    {
        "content": "<p>(feel free to reparent my comment)</p>",
        "id": 220731553,
        "sender_full_name": "David Barsky",
        "timestamp": 1608669395
    }
]