[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>fn main() {\n    foo(y, x, ,z);\n}\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"call_expr\"><pre><span></span><code>          PATH_EXPR@16..19\n            PATH@16..19\n              PATH_SEGMENT@16..19\n                NAME_REF@16..19\n                  IDENT@16..19 \"foo\"\n          ARG_LIST@19..29\n            L_PAREN@19..20 \"(\"\n            PATH_EXPR@20..21\n              PATH@20..21\n                PATH_SEGMENT@20..21\n                  NAME_REF@20..21\n                    IDENT@20..21 \"y\"\n            COMMA@21..22 \",\"\n            WHITESPACE@22..23 \" \"\n            PATH_EXPR@23..24\n              PATH@23..24\n                PATH_SEGMENT@23..24\n                  NAME_REF@23..24\n                    IDENT@23..24 \"x\"\n            COMMA@24..25 \",\"        &lt;-------- two commas here\n            WHITESPACE@25..26 \" \"\n            COMMA@26..27 \",\"         &lt;-------- two commas here\n            PATH_EXPR@27..28\n              PATH@27..28\n                PATH_SEGMENT@27..28\n                  NAME_REF@27..28\n                    IDENT@27..28 \"z\"\n            R_PAREN@28..29 \")\"\n</code></pre></div>",
        "id": 253673023,
        "sender_full_name": "gfreezy",
        "timestamp": 1631839817
    },
    {
        "content": "<p>Should we produce the ast like this?</p>",
        "id": 253673069,
        "sender_full_name": "gfreezy",
        "timestamp": 1631839869
    },
    {
        "content": "<p>yeah, the syntax tree is more or less unstructured and will collect any extra tokens in the node they appear in</p>",
        "id": 253673680,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1631840342
    }
]