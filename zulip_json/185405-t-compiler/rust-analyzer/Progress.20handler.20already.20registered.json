[
    {
        "content": "<p>I'm getting this error occasionally: \"Progress handler for token rustAnalyzer/indexing already registered\"</p>\n<p>I'm fairly sure this did not happen when I worked on that, were there any recent changes that could have caused this?</p>",
        "id": 218460094,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606846283
    },
    {
        "content": "<p>My guess is a reindexing is happening? Reading the spec I think we're doing it wrong</p>",
        "id": 218466374,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1606849323
    },
    {
        "content": "<p>The code should handle this correctly, even in the presence of cancelation</p>",
        "id": 218466568,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606849401
    },
    {
        "content": "<blockquote>\n<p>Servers can also initiate progress reporting using the window/workDoneProgress/create request. This is useful if the server needs to report progress outside of a request (for example the server needs to re-index a database). The returned token can then be used to report progress using the same notifications used as for client initiated progress. A token obtained using the create request should only be used once (e.g. only one begin, many report and one end notification should be sent to it).</p>\n</blockquote>",
        "id": 218466839,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1606849510
    },
    {
        "content": "<p>Reading that leads me to believe that the token has to be unique for each indexing operation</p>",
        "id": 218466868,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1606849530
    },
    {
        "content": "<p>It does, but we should only run one indexing operation at once</p>",
        "id": 218466895,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606849550
    },
    {
        "content": "<p>This is why <code>cargo check</code> indicators are numbered when you have a workspace open, to ensure uniqueness</p>",
        "id": 218466996,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606849584
    },
    {
        "content": "<p>Okay. I thought it also ran indexing again</p>",
        "id": 218467025,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1606849602
    },
    {
        "content": "<p>It is rerun on every keypress, but should get canceled first</p>",
        "id": 218467110,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606849653
    },
    {
        "content": "<p>Actually... should we only send a begin notification if the create request is successful (and maybe log an error if the request fails)?</p>",
        "id": 218467501,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1606849844
    },
    {
        "content": "<p>I'm not saying that's the issue but it might help us track it down. Things could be out of order in some weird way too</p>",
        "id": 218467604,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1606849911
    },
    {
        "content": "<p>huh, looking at <code>GlobalState::report_progress</code>, couldn't that end up sending the notification before the request has been processed or something?</p>",
        "id": 218467769,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606849998
    },
    {
        "content": "<p>I think so... I think we need to wait for the reply of the create (and that it's happy) to make sure it's good to go. It's actually a little weird to me that the client doesn't reply with a token but...</p>",
        "id": 218468413,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1606850352
    },
    {
        "content": "<p>After reading the code I believe the request will be sent on the wire but you're right in that it doesn't mean the client has finished processed it. Still that wouldn't explain the error message (assuming that it's correct)</p>",
        "id": 218470337,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1606851296
    },
    {
        "content": "<p>yeah, the sending order is correct</p>",
        "id": 218470563,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606851399
    },
    {
        "content": "<p>but we don't check the response before sending notifications</p>",
        "id": 218470584,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606851415
    },
    {
        "content": "<p>That's a bug. We also ignore any errors when registering capabilities for <code>didSave</code></p>",
        "id": 218471163,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1606851706
    },
    {
        "content": "<p>Do we have an issue for this at GitHub?  (I didn't see one).</p>\n<p>I'm seeing this (and some of our devs are seeing it constantly), as well as this, which I assume is different?</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;\n\nFailed to lookup FN@1951..2703 in this Semantics.\nMake sure to use only query nodes, derived from this instance of Semantics.\nroot node:   SOURCE_FILE@0..9482\nknown nodes: SOURCE_FILE@0..9482\n\n&#39;, crates/hir/src/semantics.rs:556:13\n</code></pre></div>",
        "id": 218498293,
        "sender_full_name": "woody77",
        "timestamp": 1606866395
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116114\">@Paul Faria</span> (fyi)</p>",
        "id": 218498306,
        "sender_full_name": "woody77",
        "timestamp": 1606866409
    },
    {
        "content": "<p>Is that on the last release or nightly/master?</p>",
        "id": 218498770,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606866839
    },
    {
        "content": "<p>I'm pretty sure that's different. I haven't run across it. Can you get a better trace?</p>",
        "id": 218554957,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1606915597
    },
    {
        "content": "<p>I can reliably reproduce the duplicate tokens if I use vscode's Search functionality and click on a new file to open while indexing is happening</p>",
        "id": 218581062,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1606926287
    },
    {
        "content": "<p>In fact... every time I switch to a new editor reindexing starts and we try to create new tokens</p>",
        "id": 218581232,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1606926355
    },
    {
        "content": "<p>Sorry that's every time I open a new document and sometimes an existing one</p>",
        "id": 218581473,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1606926440
    },
    {
        "content": "<p>Ah, so it was caused by <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/6637\">https://github.com/rust-analyzer/rust-analyzer/pull/6637</a></p>",
        "id": 218582243,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606926745
    },
    {
        "content": "<p>Maybe it's just missing the <code>self.status == Status::Ready</code> check</p>",
        "id": 218582335,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606926785
    },
    {
        "content": "<p>Maybe... if indexing is cancelled do we automatically send a WorkDoneProgressEnd to the client?</p>",
        "id": 218583578,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1606927313
    },
    {
        "content": "<p>Yes</p>",
        "id": 218584172,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606927552
    },
    {
        "content": "<p>though maybe that code path should just reuse <code>apply_document_changes</code></p>",
        "id": 218584247,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606927573
    },
    {
        "content": "<p>(nevermind, that doesn't make sense)</p>",
        "id": 218601446,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606934824
    },
    {
        "content": "<p>It only reliably reproduces when out_dirs/proc macro support is enabled</p>",
        "id": 218605319,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606936642
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/6701\">https://github.com/rust-analyzer/rust-analyzer/pull/6701</a> fixes the problem for me, though I unfortunately still don't fully understand what was going on</p>",
        "id": 218605558,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606936771
    },
    {
        "content": "<p>I can't reproduce it after your change</p>",
        "id": 218618891,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1606942823
    },
    {
        "content": "<p>nice</p>",
        "id": 218619062,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606942903
    },
    {
        "content": "<p>I'm not seeing either of the above with yesterday's (today's) nightly (although that doesn't include pull/6701...</p>",
        "id": 218620171,
        "sender_full_name": "woody77",
        "timestamp": 1606943410
    }
]