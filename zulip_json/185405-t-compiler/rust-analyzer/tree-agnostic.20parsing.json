[
    {
        "content": "<p>I've went ahead and extracted rust-analyzer's parser to a separate crate, which depends neither on syntax trees nor on tokens: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/867\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/867\">https://github.com/rust-analyzer/rust-analyzer/pull/867</a></p>",
        "id": 159057283,
        "sender_full_name": "matklad",
        "timestamp": 1550746029
    },
    {
        "content": "<p>The interface is these two traits:</p>\n<div class=\"codehilite\"><pre><span></span>pub trait TokenSource {\n    fn token_kind(&amp;self, pos: usize) -&gt; SyntaxKind;\n    fn is_token_joint_to_next(&amp;self, pos: usize) -&gt; bool;\n    fn is_keyword(&amp;self, pos: usize, kw: &amp;str) -&gt; bool;\n}\npub trait TreeSink {\n    fn leaf(&amp;mut self, kind: SyntaxKind, n_tokens: u8);\n    fn start_branch(&amp;mut self, kind: SyntaxKind, root: bool);\n    fn finish_branch(&amp;mut self, root: bool);\n    fn error(&amp;mut self, error: ParseError);\n}\n</pre></div>",
        "id": 159057317,
        "sender_full_name": "matklad",
        "timestamp": 1550746081
    },
    {
        "content": "<p>That is kinda cool,  because parser does not know about the underlying text, comments and whitespace (it doesn't know even token's offsets!), but the tree is still full-fidelity, and parsing is still error-tolerant.</p>",
        "id": 159057531,
        "sender_full_name": "matklad",
        "timestamp": 1550746243
    },
    {
        "content": "<p>This seems to actually work: macros can parse token-trees withoug going through toString now: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/885\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/885\">https://github.com/rust-analyzer/rust-analyzer/pull/885</a></p>",
        "id": 159232194,
        "sender_full_name": "matklad",
        "timestamp": 1550933587
    }
]