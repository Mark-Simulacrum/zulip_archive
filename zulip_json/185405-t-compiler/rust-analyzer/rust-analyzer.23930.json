[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> What does the <code>recovery_set</code> do ? Match arm has </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">eat</span><span class=\"p\">(</span><span class=\"n\">PIPE</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">patterns</span>::<span class=\"n\">pattern_r</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TokenSet</span>::<span class=\"n\">empty</span><span class=\"p\">());</span><span class=\"w\"></span>\n</pre></div>",
        "id": 159986828,
        "sender_full_name": "vipentti",
        "timestamp": 1551776380
    },
    {
        "content": "<p>They control behavior when an unexpcted token is enountered</p>",
        "id": 159986894,
        "sender_full_name": "matklad",
        "timestamp": 1551776416
    },
    {
        "content": "<p>for <code>struct Foo bar</code>, you'll want to consume the <code>bar</code> token as an erroneous token</p>",
        "id": 159986911,
        "sender_full_name": "matklad",
        "timestamp": 1551776438
    },
    {
        "content": "<p>for <code>struct Foo fn</code>, you want to <strong>not</strong> consume <code>fn</code>, such that it can be parsed as a part of the folowing function for code liks this:</p>\n<div class=\"codehilite\"><pre><span></span>struct Foo\n\nfn bar() {}\n</pre></div>",
        "id": 159986946,
        "sender_full_name": "matklad",
        "timestamp": 1551776473
    },
    {
        "content": "<p>recovery_set is the set of tokens you can't consume</p>",
        "id": 159986954,
        "sender_full_name": "matklad",
        "timestamp": 1551776492
    },
    {
        "content": "<p>using the grammar language, it is something aking to a <code>FOLLOW</code> set</p>",
        "id": 159986963,
        "sender_full_name": "matklad",
        "timestamp": 1551776515
    },
    {
        "content": "<p>Aha! Thanks, so I think when it comes to piped patterns both conditionals and matches can parse the first piped pattern with empty recovery set ?</p>",
        "id": 159987020,
        "sender_full_name": "vipentti",
        "timestamp": 1551776564
    },
    {
        "content": "<p>e.g. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">eat</span><span class=\"p\">(</span><span class=\"n\">PIPE</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">pattern_r</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TokenSet</span>::<span class=\"n\">empty</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"c1\">// loop here for rest of the piped patterns</span>\n</pre></div>",
        "id": 159987174,
        "sender_full_name": "vipentti",
        "timestamp": 1551776705
    },
    {
        "content": "<p>Yeah, I think something like this should work</p>",
        "id": 159987185,
        "sender_full_name": "matklad",
        "timestamp": 1551776723
    },
    {
        "content": "<p>though, we probably might want to be more careful in lets</p>",
        "id": 159987202,
        "sender_full_name": "matklad",
        "timestamp": 1551776739
    },
    {
        "content": "<p>for <code>match</code>, we have <code>{}</code>, so error recovery is not imiportant</p>",
        "id": 159987209,
        "sender_full_name": "matklad",
        "timestamp": 1551776754
    },
    {
        "content": "<p>for let, I expect the following should parse resonably:</p>\n<div class=\"codehilite\"><pre><span></span>let\n\nlet foo = 92;\n</pre></div>\n\n\n<p>That is, the second let should be recognized as such</p>",
        "id": 159987264,
        "sender_full_name": "matklad",
        "timestamp": 1551776785
    },
    {
        "content": "<p>I think we have a test for this</p>",
        "id": 159987266,
        "sender_full_name": "matklad",
        "timestamp": 1551776789
    },
    {
        "content": "<p>Yeah, 0019_let_recover</p>",
        "id": 159987368,
        "sender_full_name": "vipentti",
        "timestamp": 1551776896
    },
    {
        "content": "<p>So, I think the recovery set should be a parameter of the function</p>",
        "id": 159987423,
        "sender_full_name": "matklad",
        "timestamp": 1551776984
    },
    {
        "content": "<p>we set it to smth for let, and leave it empy for match</p>",
        "id": 159987437,
        "sender_full_name": "matklad",
        "timestamp": 1551776998
    },
    {
        "content": "<p>hmm, I wonder what would be proper value for the conditional let pattern recovery set, it only occurs when you have <code>if</code> or <code>while</code> followed by <code>let</code></p>",
        "id": 159987924,
        "sender_full_name": "vipentti",
        "timestamp": 1551777544
    },
    {
        "content": "<p>the same as for usual <code>let</code> I suppose</p>",
        "id": 159987940,
        "sender_full_name": "matklad",
        "timestamp": 1551777574
    }
]