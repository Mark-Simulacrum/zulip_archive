[
    {
        "content": "<p>I'm seeking for some low hanging fruit to get my hands wet.</p>",
        "id": 210373286,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600339900
    },
    {
        "content": "<p>Heh, I wouldn't call this low-hanging :)</p>",
        "id": 210373370,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1600339964
    },
    {
        "content": "<p>Attribute macros have to integrate with name resolution, since we can't add an item that still has unresolved attributes on it (they could be macros that change/delete the item).</p>\n<p>I guess a relatively simple thing to do would be to extend name resolution to look at attributes, and to somehow add rustc's list of built-in attributes to rust-analyzer. I'm not totally sure what the best way to do that is, since they can change in arbitrary ways between nightly releases.</p>",
        "id": 210373636,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1600340124
    },
    {
        "content": "<p>Thanks! So i think i needs to deal with builtin attributes first. One thing that annoys me a little is that i'm almost using <code>thiserror</code> in every crate i writes, but <code>rust-analyzer</code> currently cannot auto-complete <code>thiserror::Error</code> for me. So i think i'll start from supporting <code>proc_macro_derive</code> attribute first.</p>",
        "id": 210391677,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600350367
    },
    {
        "content": "<p>So this code in <code>thiserror</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#[proc_macro_derive(Error, attributes(backtrace, error, from, source))]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">derive_error</span><span class=\"p\">(</span><span class=\"n\">input</span>: <span class=\"nc\">TokenStream</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TokenStream</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">parse_macro_input</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">DeriveInput</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">expand</span>::<span class=\"n\">derive</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">input</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap_or_else</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">.</span><span class=\"n\">to_compile_error</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>is a function and provides a <a href=\"https://docs.rs/thiserror/1.0.20/thiserror/#derives\">\"Derive Macro\"</a> at the same time</p>",
        "id": 210392117,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600350576
    },
    {
        "content": "<p>Ah, yeah, that's because name resolution of proc macros isn't done by rust-analyzer, but by querying Cargo and the proc-macro server, so it doesn't integrate well. I've been meaning to change that, but IIRC @\\<strong>matklad</strong> had objections.</p>",
        "id": 210392149,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1600350592
    },
    {
        "content": "<p>ok...</p>",
        "id": 210392387,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600350686
    },
    {
        "content": "<p>But i think <code>proc_macro_derive</code> itself is not a proc-macro but a builtin attribute? Do we want to see it as a proc_macro itself in ra?</p>",
        "id": 210392627,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600350799
    },
    {
        "content": "<p>No, that should be built-in</p>",
        "id": 210393123,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1600351036
    },
    {
        "content": "<p>We have to add the name used in that attribute to the name resolution scope</p>",
        "id": 210393204,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1600351080
    },
    {
        "content": "<p>yeah</p>",
        "id": 210393301,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600351107
    },
    {
        "content": "<p>I imagine this would be enough for <code>Error</code> to come out when auto-completion.</p>",
        "id": 210393746,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600351265
    },
    {
        "content": "<p>So, if i do this change, should i create a <code>builtin_attribute.rs</code> module under <code>hir_expand</code>?</p>",
        "id": 210394603,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600351622
    },
    {
        "content": "<p>That's one way to do it, yeah. rustc has a file like that, and it would be nice to have a way to keep them in sync more easily, but that can be done later.</p>",
        "id": 210394908,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1600351748
    },
    {
        "content": "<p>Thanks, i'll experiment to see what i can get :)</p>",
        "id": 210397030,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600352637
    },
    {
        "content": "<p>In case you want to get closer to practice, one good implication of that would be the attribute completion: currently it's all hardcoded.</p>",
        "id": 210412257,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1600358968
    },
    {
        "content": "<p>Yeah, would be neat to find some way to load attribute and lint names from the sysroot at some point. But first this info has to actually be shipped through rustup.</p>",
        "id": 210422745,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1600363837
    },
    {
        "content": "<p>(I noticed that the new \"unresolved import\" diagnostics are quite intrusive when macros are being imported, so maybe I'll come up with a fix for that, or mark them as experimental)</p>",
        "id": 210422974,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1600363929
    },
    {
        "content": "<p>I'm tracing through the code, and found that... it seems to me that, to properly support attributes, i'll need to \"detach\" the current derive-supporting code, implement builtin attributes dispatching, and then \"reattach\" the <code>derive(..)</code> support to it as a special case...</p>",
        "id": 210425476,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600365010
    },
    {
        "content": "<p>does <code>nameres</code> stand for <code>name resolution</code>? it seems it's actually doing most of the expansion work</p>",
        "id": 210425812,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600365153
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116458\">Charles Lew</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/What.20is.20needed.20for.20supporting.20attribute.20proc.20macro.3F/near/210425812\">said</a>:</p>\n<blockquote>\n<p>does <code>nameres</code> stand for <code>name resolution</code>? it seems it's actually doing most of the expansion work</p>\n</blockquote>\n<p>yeah, it should call into other crates to expand any macros</p>",
        "id": 210428780,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1600366475
    },
    {
        "content": "<p>I've been working on the name resolution changes for proc macros I mentioned: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/6033\">https://github.com/rust-analyzer/rust-analyzer/pull/6033</a></p>",
        "id": 210539199,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1600444417
    }
]