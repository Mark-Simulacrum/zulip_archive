[
    {
        "content": "<p>Would it be a worthwhile goal to hardcode support for <a href=\"https://github.com/dtolnay/watt\" target=\"_blank\" title=\"https://github.com/dtolnay/watt\">Watt</a> procedural macros. Conceivably, we could match on the 'standard' pattern shown in the readme (with different names), although this could be somewhat brittle.<br>\nThis would have advantages in terms of allowing some basic proc macro support, without needing the full compiler toolchain setup. Additionally, these proc macros are almost certainly <em>guaranteed</em> to be deterministic, which is good for salsa.</p>",
        "id": 180906401,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1573899288
    },
    {
        "content": "<p>I definitely think that some form of Watt is a promising way to handle proc macros. Didn't have a change to thing this through yet</p>",
        "id": 180906465,
        "sender_full_name": "matklad",
        "timestamp": 1573899392
    },
    {
        "content": "<p>I'm just trying to work out what the actual API surface for the tokenstream passed into webassembly looks like</p>",
        "id": 180906600,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1573899707
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"200146\">@Daniel Mcnab</span> isn't it just <a href=\"https://docs.rs/crate/proc-macro2/1.0.6\" target=\"_blank\" title=\"https://docs.rs/crate/proc-macro2/1.0.6\">https://docs.rs/crate/proc-macro2/1.0.6</a> ?</p>",
        "id": 180906655,
        "sender_full_name": "matklad",
        "timestamp": 1573899772
    },
    {
        "content": "<p>In theory, but I'm just trying to work out how we would actually construct one to pass into wasm</p>",
        "id": 180906712,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1573899847
    },
    {
        "content": "<p>I suppose we could actually entirely reuse Watt's implementation if we could work out how to make a <code>proc_macro::TokenStream</code>.<br>\nAhah - <a href=\"https://doc.rust-lang.org/proc_macro/struct.TokenStream.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/proc_macro/struct.TokenStream.html\"><code>impl From&lt;TokenTree&gt; for TokenStream</code></a> exists.</p>",
        "id": 180907035,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1573900472
    },
    {
        "content": "<p>Although I don't think we already have the conversions to <code>proc_macro::TokenTree</code>, so those would need to be written too.</p>",
        "id": 180907113,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1573900638
    },
    {
        "content": "<p>Maybe for the starter, convert TokenTree to text and parse that text to TokenStream ?</p>",
        "id": 180907649,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1573901663
    },
    {
        "content": "<p>Our tokens have ids, so I don't think that building a proper bridge betwen wasm and host would be difficult -- just a question of consrcuting the required side-tables</p>",
        "id": 180907707,
        "sender_full_name": "matklad",
        "timestamp": 1573901767
    },
    {
        "content": "<p>Or, somewhat equivalent, it's trivial to impl Ser/De for TokenStream</p>",
        "id": 180907711,
        "sender_full_name": "matklad",
        "timestamp": 1573901801
    },
    {
        "content": "<p>So just to confirm - this is something which is at least theoretically desirable?<br>\nI'm going to start hacking on it, but may need some help understanding how to integrate it and when to expand them.  I think the implementation itself should be fairly easy, although I suppose I also need to work out what crate/it should go in or if it should go in a new crate. <br>\nI presume the first step is to ensure  proc macros are in the macro namespace, based on collecting proc_macro attributes?<br>\nDoes anyone know if proc macro derives/attribute macros share the same macro namespace as bang macros?</p>",
        "id": 180915974,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1573917654
    },
    {
        "content": "<p>Yeah, running proc-macro2 proc-macros via wasm is probably more promising than external process. The hard bit here is integration with cargo</p>",
        "id": 180916317,
        "sender_full_name": "matklad",
        "timestamp": 1573918149
    },
    {
        "content": "<p>Macros which use Watt are already compiled to wasm, which makes our lives easier. What I'm hacking on at the moment is to only add support for watt macros, as a stopgap to experiment. That is - see how a full proc macro expansion would implement with our existing infra  and to try and discover if wasm macros could have any unforeseen issues for us (which I doubt)</p>",
        "id": 180916439,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1573918382
    },
    {
        "content": "<p>As a bonus, it might be worthwhile trying to remove syn entirely from our direct dependency graph</p>",
        "id": 180916453,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1573918438
    },
    {
        "content": "<p>But that is a separate, loosely related experiment.</p>",
        "id": 180916571,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1573918607
    },
    {
        "content": "<p>It might also be worth seeing what <span class=\"user-mention silent\" data-user-id=\"119235\">David Tolnay</span> (silent mention)  thinks about this, as the author of watt.</p>",
        "id": 180916858,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1573919151
    },
    {
        "content": "<p>OK - I've been hacking on this but have hit a snag at <code>impl HasSource&lt;Ast=ast::MacroCall&gt; for MacroDef</code>, because I've changed MacroDefId to support procedural macros, which only have an <code>ast::FnDef</code>.</p>",
        "id": 180961027,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1574003789
    },
    {
        "content": "<p>Hm, yeah, I guess <code>HasSource</code> doesn't make much sense for <code>MacroDef</code> in a proc-macro world</p>",
        "id": 180961043,
        "sender_full_name": "matklad",
        "timestamp": 1574003863
    },
    {
        "content": "<p>Or, rather, we should rename current <code>MacroDef</code> to <code>DeclarativeMacroDef</code>, implment <code>HasSource</code> for that, and introduce a new enum for <code>MacroDef { proc, decl} </code></p>",
        "id": 180961089,
        "sender_full_name": "matklad",
        "timestamp": 1574003894
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 180961092,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1574003932
    },
    {
        "content": "<p>This also allows us to be more flexible if the declaration for compiler builtin macros changes.</p>",
        "id": 180961419,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1574004588
    },
    {
        "content": "<p>I presume that <code>Hygiene.def_crate</code> is <code>None</code> for proc macros?</p>",
        "id": 180966394,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1574013814
    },
    {
        "content": "<p>I actually don't know for sure, but I think <code>$crate</code> indeed doesn't have any special meaning for proc macros</p>",
        "id": 180969138,
        "sender_full_name": "matklad",
        "timestamp": 1574018957
    },
    {
        "content": "<p>I suppose it can't make sense, given a proc macro crate can't export anything</p>",
        "id": 180969191,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1574019034
    },
    {
        "content": "<p>I'm just trying to implement the basic infrastructure for procedural macros, and I'm not sure what makes sense as a layout.<br>\nClearly, in <code>PerNs</code> we need an <code>AnyMacroDefId</code>, but I'm not sure whether it should be split by <code>procedural</code> vs <code>declarative</code> or <code>FnLike</code> / <code>Attribute</code>/ <code>Derive</code>. In terms of data structure sharing, it makes some sense to split on <code>procedural</code> vs <code>declarative</code> (so they can share the <code>AstId&lt;ast::MacroCall&gt;</code>, but in terms of functionality it makes sense to split by how they are used.</p>",
        "id": 181027590,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1574092535
    },
    {
        "content": "<p>This is just for name resolution - I'm not implementing expansion yet.<br>\nAlso, I'm not certain if we should check if a crate has <code>proc-macro=true</code> or just always check for the <code>proc_macro</code> attributes. I think it makes sense to check the crate type, but I'm not sure</p>",
        "id": 181027714,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1574092620
    },
    {
        "content": "<p>Ahah - this is a bit like <code>ImplItem</code></p>",
        "id": 181034278,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1574096627
    },
    {
        "content": "<p>Is it possible to upcast an <code>AstId&lt;Something&gt;</code> to an <code>AstId&lt;An enum which contains Something&gt;</code> without an <code>AstDatabase</code>?</p>",
        "id": 181095207,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1574156368
    }
]