[
    {
        "content": "<p>I've almost nerdsnipped myself with this, but decided to write up an issue with mentoring instructions in the end: <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/2267\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/2267\">https://github.com/rust-analyzer/rust-analyzer/issues/2267</a> :)</p>",
        "id": 180870102,
        "sender_full_name": "matklad",
        "timestamp": 1573850799
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> <a href=\"https://github.com/google/rerast\" target=\"_blank\" title=\"https://github.com/google/rerast\">https://github.com/google/rerast</a> may help here, I'm transforming generated code with it these days.</p>",
        "id": 180902153,
        "sender_full_name": "csmoe",
        "timestamp": 1573890901
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> the idea is exactly to build rerast-like thin, but using rust-analyzer's types, which I believe I fundamentally more suitable for this kind of things in the limit (ie, when we finishing implementing all the things we yet have to add...)</p>",
        "id": 180904298,
        "sender_full_name": "matklad",
        "timestamp": 1573895272
    },
    {
        "content": "<p>How can I parse a String into an expr syntax tree node? And also, should ssr be performed on the concrete or abstract syntax tree?</p>",
        "id": 181240344,
        "sender_full_name": "Felix Kohlgrüber",
        "timestamp": 1574278091
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"222148\">@Felix Kohlgrüber</span> <code>SourceFile::parse</code> in ra_syntax defines parsing of files</p>",
        "id": 181240528,
        "sender_full_name": "matklad",
        "timestamp": 1574278217
    },
    {
        "content": "<p>I think a similar method could be defined for <code>ast::Expr</code>, but you'll need <code>parse_fragment</code> function as an entry point</p>",
        "id": 181240596,
        "sender_full_name": "matklad",
        "timestamp": 1574278261
    },
    {
        "content": "<p>We don't have traditional AST (what is called <code>ast</code> is, in fact, a typed concrete syntax tree)</p>",
        "id": 181240632,
        "sender_full_name": "matklad",
        "timestamp": 1574278284
    },
    {
        "content": "<p>So I think it makes sense to run ssr on concrete syntax tree, with maybe some hacks for more abstract comparison (like, not taking the order of fields into account, etc)</p>",
        "id": 181240734,
        "sender_full_name": "matklad",
        "timestamp": 1574278332
    },
    {
        "content": "<p>One more interesting bit is that, because <em>replace</em> bit has to happen at the CST level, you sort-of need to run the search on the CST as well</p>",
        "id": 181240774,
        "sender_full_name": "matklad",
        "timestamp": 1574278363
    },
    {
        "content": "<p>Ok thx, got it!</p>",
        "id": 181240946,
        "sender_full_name": "Felix Kohlgrüber",
        "timestamp": 1574278457
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"222148\">@Felix Kohlgrüber</span> actually, I thik you can also use <code>make::expr_from_string</code> -- it's hacky, but works</p>",
        "id": 181241221,
        "sender_full_name": "matklad",
        "timestamp": 1574278642
    },
    {
        "content": "<p><code>expr_from_text</code> that is</p>",
        "id": 181241327,
        "sender_full_name": "matklad",
        "timestamp": 1574278699
    },
    {
        "content": "<p>ah ok, that should work. Thanks!</p>",
        "id": 181241504,
        "sender_full_name": "Felix Kohlgrüber",
        "timestamp": 1574278818
    },
    {
        "content": "<p>@matklad In the issue description, you wrote that writing a custom parser for the patterns might be better than using regex. Could you explain why you think so?</p>",
        "id": 181241852,
        "sender_full_name": "Felix Kohlgrüber",
        "timestamp": 1574279059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> Ok so this is how mentions work. Sry, I'm new to zulip.</p>",
        "id": 181241880,
        "sender_full_name": "Felix Kohlgrüber",
        "timestamp": 1574279095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"222148\">@Felix Kohlgrüber</span> mainly because <code>regex</code> is a big dependency. We have it in the crate graph already (which is regrettable, I believe at least two of the three uses are completely unnecessary) , but core crates like <code>ra_ide_api</code> do not have this dependency</p>",
        "id": 181242045,
        "sender_full_name": "matklad",
        "timestamp": 1574279185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> ok, sounds reasonable. I'll hand-roll my own ;-)</p>",
        "id": 181242215,
        "sender_full_name": "Felix Kohlgrüber",
        "timestamp": 1574279293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>  I have several questions:</p>\n<ol>\n<li>\n<p>You started from<code>Source { file_id: $file_id:expr, ast: $ast:expr }</code>  but later used </p>\n<blockquote>\n<p>replace <code>$ident:fragment</code> with <code>__search_pattern_ident</code> is <code> file_id: $file_id:expr</code>, should it be <code>$&lt;something&gt;:expr</code>?</p>\n</blockquote>\n</li>\n<li>\n<p>Is any way to sanitize  temporary names except of using <code>__search_pattern_&lt;ident1&gt;</code>, <code>__search_pattern_&lt;ident2&gt;</code> and etc?</p>\n</li>\n<li>I tried convert it to  macros declaration and parse, it works but I get <code>ast::TokenTree</code>, may be there is a way to convert  <code>ast::TokenTree</code> or use it during search?</li>\n<li>If I need to write code to replace <code>$file_id:expr</code>  should it be done just by string functions or there is a better way,? </li>\n<li>Do you have any example how to compare trees?</li>\n</ol>",
        "id": 186092674,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1579519286
    },
    {
        "content": "<p>little bit more details for 3:</p>\n<ol>\n<li>convert a pattern to <code>macro_rules! { ({}) =&gt; ()  }</code></li>\n<li>parse</li>\n<li>replace  $file_id:expr by placeholders</li>\n<li>convert back to string</li>\n<li>parse again as expt</li>\n</ol>\n<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>  what do you think?</p>",
        "id": 186279708,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1579694389
    },
    {
        "content": "<p>Don’t have time to really dig into this right now, but I don’t think we<br>\nneed to parse anything as Macro here. I think just a text-based search for<br>\npatterns should be enough for the initial impl, and should be easier to<br>\nimpl</p>",
        "id": 186281274,
        "sender_full_name": "matklad",
        "timestamp": 1579695795
    },
    {
        "content": "<p>I've found that <code>expr_from_text</code> and <code>TextEdit</code> do not work together, because <code>expr_from_text</code> returns part of <code>\"const C: () = {};\"</code> with absolute offsets, so I need the full string back to make an edit. <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>  what do you think? I can just use <code>ast_from_text</code> same way as <code>expr_from_text</code> but it doesn't look right, or maybe there is a way to get relative offsets (<code>TextRange</code>)?</p>",
        "id": 187350277,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1580815590
    },
    {
        "content": "<p>Hm, good question!</p>\n<p>Let me see if I can quicly fix <code>expr_from_text</code>, this seems like a footgun</p>",
        "id": 187350571,
        "sender_full_name": "matklad",
        "timestamp": 1580815908
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116925\">@mikhail-m1</span> should be fixed by <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/3009\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/3009\">https://github.com/rust-analyzer/rust-analyzer/pull/3009</a></p>",
        "id": 187353764,
        "sender_full_name": "matklad",
        "timestamp": 1580819063
    },
    {
        "content": "<p>I little bit stuck with </p>\n<blockquote>\n<p>Implement the driver, which visits all files in the current project and builds a SourceEdit</p>\n</blockquote>\n<p>could you send me an example? I've tried to do something like: <code>for krate in Crate::all(db)</code> but looks like it iterates over some files outside of workspace.</p>",
        "id": 187549388,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1580997397
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/ea9d18ba836a7228f7310e1bc77c0918f0191a42/crates/ra_ide/src/symbol_index.rs#L94-L98\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/ea9d18ba836a7228f7310e1bc77c0918f0191a42/crates/ra_ide/src/symbol_index.rs#L94-L98\">https://github.com/rust-analyzer/rust-analyzer/blob/ea9d18ba836a7228f7310e1bc77c0918f0191a42/crates/ra_ide/src/symbol_index.rs#L94-L98</a></p>\n<p>This is walks all local files for the purpose of index building</p>",
        "id": 187549477,
        "sender_full_name": "matklad",
        "timestamp": 1580997476
    },
    {
        "content": "<p>Is any way to apply <code>SourceChange</code> without vs code?</p>",
        "id": 187630288,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1581073660
    },
    {
        "content": "<p>Nope, there's no code for that</p>",
        "id": 187630609,
        "sender_full_name": "matklad",
        "timestamp": 1581074005
    },
    {
        "content": "<p>There's a way to apply text edit to a file though</p>",
        "id": 187630619,
        "sender_full_name": "matklad",
        "timestamp": 1581074015
    },
    {
        "content": "<blockquote>\n<p>There's a way to apply text edit to a file though</p>\n</blockquote>\n<p>next step, I have <code>SourceFileEdit</code> and it contains file_id, I can get file text and apply <code>TextEdit</code>  but I need to write it back and for it I need full path,  how can I get it? If I get it right, there are no full paths in Salsa, so I can do something similar to <code>ra_cli/src/analysis_bench.rs</code> or may be even build a map file_id -&gt; full path, but may be I've missed something.</p>",
        "id": 187721050,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1581176189
    },
    {
        "content": "<p>This generally should work like ra_analysis_cli.</p>",
        "id": 187757283,
        "sender_full_name": "matklad",
        "timestamp": 1581251381
    },
    {
        "content": "<p>Wait, I am confusing myself</p>",
        "id": 187757328,
        "sender_full_name": "matklad",
        "timestamp": 1581251424
    },
    {
        "content": "<p>I am thinking right now about a CLI tool for ssr, but I think the original plan was simply to expose this to VS Code? </p>\n<p>Yeah, I guess we can do both a CLI and a VS Code action, and I would go with what's simpler. I <em>think</em> VS Code action might be simpler</p>",
        "id": 187757349,
        "sender_full_name": "matklad",
        "timestamp": 1581251509
    },
    {
        "content": "<p>I created a working prototype for vscode only. It make changes in all files at once, but <code>undo</code> works only for current file. Rename's behavior is the same so I will leave it. I will try to clean it up and and create a PR soon. One more question, how should I call it? is <code>Ssr</code> enough or it's better to use <code>StructuralSearchReplace</code> everywhere?</p>",
        "id": 187765355,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1581267657
    },
    {
        "content": "<p>SSR is server-side rendering ;)</p>",
        "id": 187766375,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581269729
    },
    {
        "content": "<p>I think structural search replace in IntelliJ existing before client side<br>\nrendering was a thing :-)</p>",
        "id": 187766538,
        "sender_full_name": "matklad",
        "timestamp": 1581270041
    },
    {
        "content": "<p>Well, I'd go better for <code>SSR</code> only if it is pervasive and we leave the comment on its meaning near the definition.</p>",
        "id": 187766592,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581270154
    },
    {
        "content": "<blockquote>\n<p>One more question, how should I call it? is Ssr enough or it's better to use StructuralSearchReplace everywhere?</p>\n</blockquote>\n<p>Internally I would prefer ssr, for all user-visible strings we should use structural search replace</p>",
        "id": 187798952,
        "sender_full_name": "matklad",
        "timestamp": 1581325960
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>  considering your <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/3099#issuecomment-584716007\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/3099#issuecomment-584716007\">comment</a>, have you put <code>$&lt;name&gt;:expr</code> to the second part as shown?  In this case it should be related how <code>expr_from_text</code> handle incorrect code.</p>",
        "id": 187931394,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1581440947
    },
    {
        "content": "<p>As I understand <code>expr_from_text</code> is never fails, but output for incorrect code may be weird.</p>",
        "id": 187931538,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1581441030
    },
    {
        "content": "<p>my bad, I indeed have done that</p>",
        "id": 187931552,
        "sender_full_name": "matklad",
        "timestamp": 1581441040
    },
    {
        "content": "<p>I will check it later</p>",
        "id": 187931613,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1581441070
    },
    {
        "content": "<p>I've checked it, it actually works great if you use the right syntax <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 187931788,
        "sender_full_name": "matklad",
        "timestamp": 1581441165
    },
    {
        "content": "<p>I mean I will check what is the output from <code>expr_from_text</code> for <code>foo(name:expr)</code></p>",
        "id": 187932314,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1581441495
    },
    {
        "content": "<p>Would you mind if I tweet about this work-in-progress today or tomorrow? </p>\n<p>I've just tried it with the original <code>InFile</code> example, it works, and I am super excited!</p>",
        "id": 187932757,
        "sender_full_name": "matklad",
        "timestamp": 1581441757
    },
    {
        "content": "<p>yeah, of course, feel free to share it</p>",
        "id": 187945448,
        "sender_full_name": "mikhail-m1",
        "timestamp": 1581449566
    }
]