[
    {
        "content": "<p>Can't find the topic of what to do with cases like <code>macro_rules! oom { oom!(); oom!(); }</code>, but we discussed that at today's salsa chato-thone, and figured out  somewhat workable solution</p>",
        "id": 261300595,
        "sender_full_name": "matklad",
        "timestamp": 1636745868
    },
    {
        "content": "<p><a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Infinitely.20recursing.20.20duplicating.20empty.20expansions\">https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Infinitely.20recursing.20.20duplicating.20empty.20expansions</a></p>",
        "id": 261300742,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1636745921
    },
    {
        "content": "<p>What we could do is we can make salsa itself track a (global) limit for each macro expaions/definiton. Once the limit is reached in <em>any</em> query, salsa just panics and unwinds. </p>\n<p>At that point, we have two choices: </p>\n<ul>\n<li>just say that we indeed panicked on the macro, and treat it as any other panic (except for not displaying the stack trace)</li>\n<li>apply temporary modification to the db to prevent this macro from breaking things. As  strawman, salsa panics with \"oom overflowed the stack\", at which point we literaly <code>.set</code> the text of file with <code>oom</code> defintion to say <code>macro_rules! oom { /*nothing*/}</code> and re-run the top-level salsa query. After the user edits some file, we can revert our modification</li>\n</ul>",
        "id": 261301054,
        "sender_full_name": "matklad",
        "timestamp": 1636746080
    },
    {
        "content": "<p>Does this have to happen in salsa? The <code>DefCollector</code> could also track that limit and add a diagnostic when it's exceeded, I think</p>",
        "id": 261308688,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1636750145
    }
]