[
    {
        "content": "<p>ping <span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span></p>",
        "id": 163575844,
        "sender_full_name": "matklad",
        "timestamp": 1555517544
    },
    {
        "content": "<p>So, I think that we can make a relatively easy bridge between <strong>current</strong> architecture of RLS and RLS2</p>",
        "id": 163576443,
        "sender_full_name": "matklad",
        "timestamp": 1555517941
    },
    {
        "content": "<p>The problem is that it'll work only for <strong>current</strong> arch which works via save-analysis</p>",
        "id": 163576477,
        "sender_full_name": "matklad",
        "timestamp": 1555517965
    },
    {
        "content": "<p>And it wouldn't be transferable to querying compiler's front-end bits</p>",
        "id": 163576565,
        "sender_full_name": "matklad",
        "timestamp": 1555518005
    },
    {
        "content": "<p>On the high-level, current RLS does two things:</p>\n<ul>\n<li>it calls rustc in just the right way to produce save-analysis</li>\n<li>it transforms save-analysis results into LSP</li>\n</ul>",
        "id": 163576630,
        "sender_full_name": "matklad",
        "timestamp": 1555518053
    },
    {
        "content": "<p>The reason why we can't just plug it into rust-analyzer is that RLS uses #[rustc_private], and I believe that RA should be built on stable</p>",
        "id": 163576686,
        "sender_full_name": "matklad",
        "timestamp": 1555518104
    },
    {
        "content": "<p>so we might use something out of process to generate JSON blobs</p>",
        "id": 163576760,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555518131
    },
    {
        "content": "<p>which we can then load and lower using stable toolchain</p>",
        "id": 163576765,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555518137
    },
    {
        "content": "<p>is that what you're suggesting?</p>",
        "id": 163576769,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555518141
    },
    {
        "content": "<p>However, if rustc is not in process, and we communicate with it via IPC, that could work</p>",
        "id": 163576770,
        "sender_full_name": "matklad",
        "timestamp": 1555518142
    },
    {
        "content": "<p>yeah, precisely</p>",
        "id": 163576778,
        "sender_full_name": "matklad",
        "timestamp": 1555518147
    },
    {
        "content": "<p>so essentially 'stabilize' (as in make it build on stable) rls-data/rls-analysis and work from there</p>",
        "id": 163576802,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555518165
    },
    {
        "content": "<p>sort of</p>",
        "id": 163576830,
        "sender_full_name": "matklad",
        "timestamp": 1555518181
    },
    {
        "content": "<p>there's a small caveat - we use rustc_serialize</p>",
        "id": 163576838,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555518183
    },
    {
        "content": "<p>rustc_serialize is totally usable from stable</p>",
        "id": 163576868,
        "sender_full_name": "matklad",
        "timestamp": 1555518200
    },
    {
        "content": "<p>and rustc_serialize and libserialize on <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> diverged slightly, especially wrt <code>PathBuf</code> handling</p>",
        "id": 163576871,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555518201
    },
    {
        "content": "<p>or was it completely removed?</p>",
        "id": 163576894,
        "sender_full_name": "matklad",
        "timestamp": 1555518216
    },
    {
        "content": "<p>hm, need to make sure if we use libserialize in librustc_save_analysis</p>",
        "id": 163576922,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555518241
    },
    {
        "content": "<p>ah hm so we're using <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> rustc-serialize it seems inside the librustc_save_analysis</p>",
        "id": 163577020,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555518288
    },
    {
        "content": "<p>so there's hope IIUC!</p>",
        "id": 163577027,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555518294
    },
    {
        "content": "<p>well, at work, we can read json to string and thrown regexes onto it /s</p>",
        "id": 163577068,
        "sender_full_name": "matklad",
        "timestamp": 1555518327
    },
    {
        "content": "<p>that is, this seems surmountable</p>",
        "id": 163577086,
        "sender_full_name": "matklad",
        "timestamp": 1555518343
    },
    {
        "content": "<p>but fair, assuming we get into a somewhat stable deserializable data format for SA, I believe we're good to go</p>",
        "id": 163577151,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555518376
    },
    {
        "content": "<p>The bigger problem here is that we should make the data format itself stable</p>",
        "id": 163577152,
        "sender_full_name": "matklad",
        "timestamp": 1555518377
    },
    {
        "content": "<p>Like, it should be at least de-facto stable, such that different nightlies work</p>",
        "id": 163577174,
        "sender_full_name": "matklad",
        "timestamp": 1555518398
    },
    {
        "content": "<p>tbf I think we should just version the format with Rust minor edition and make it not backwards-compatible</p>",
        "id": 163577178,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555518402
    },
    {
        "content": "<p>(we can future proof here by making everything optional, etc, protobuf style)</p>",
        "id": 163577189,
        "sender_full_name": "matklad",
        "timestamp": 1555518416
    },
    {
        "content": "<p>hm</p>",
        "id": 163577191,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555518417
    },
    {
        "content": "<p>and yeah, version numbers totally would help here</p>",
        "id": 163577208,
        "sender_full_name": "matklad",
        "timestamp": 1555518427
    },
    {
        "content": "<p>However, I am not sure if we want to make it formally stable</p>",
        "id": 163577234,
        "sender_full_name": "matklad",
        "timestamp": 1555518451
    },
    {
        "content": "<p>Like, if people depend on it, we'll have to maintain it forever, etc</p>",
        "id": 163577319,
        "sender_full_name": "matklad",
        "timestamp": 1555518485
    },
    {
        "content": "<p>no I don't think so</p>",
        "id": 163577352,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555518519
    },
    {
        "content": "<p>I  think it's ok to make semver-exeption in this case and require some awful flags/env-vars to activate this, a-la RUSTC_BOOTSTRAP</p>",
        "id": 163577356,
        "sender_full_name": "matklad",
        "timestamp": 1555518522
    },
    {
        "content": "<p>if anything, something more akin to LSIF should be 'stable'</p>",
        "id": 163577369,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555518530
    },
    {
        "content": "<p>then there's the question of memory usage</p>",
        "id": 163577412,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555518554
    },
    {
        "content": "<p>IIRC you're fighting with it</p>",
        "id": 163577419,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555518559
    },
    {
        "content": "<p>and... it's not going to get better if we decide to plug in SA on top of RLS 2.0</p>",
        "id": 163577447,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555518577
    },
    {
        "content": "<p>yeah, that's my point: we <strong>do</strong> want some form of save-analysis long-term: it'll be hugely useful for non-interactive  usages, but we <strong>don't</strong> want current form</p>",
        "id": 163577463,
        "sender_full_name": "matklad",
        "timestamp": 1555518589
    },
    {
        "content": "<p>Is SA that big?</p>",
        "id": 163577545,
        "sender_full_name": "matklad",
        "timestamp": 1555518607
    },
    {
        "content": "<p>I feel that by implementing <code>SourceManager</code>,  we should be able to drastically cut the memory usage of analyzer</p>",
        "id": 163577580,
        "sender_full_name": "matklad",
        "timestamp": 1555518638
    },
    {
        "content": "<p>well for one I believe rustc_serialization takes ~35 megs of json blob for primary package jsons</p>",
        "id": 163577590,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555518649
    },
    {
        "content": "<p>which is transformed into 6-10 megs worth of hash map data - can't recall if that's only for primary crates or for the entirety of rls-analysis</p>",
        "id": 163577626,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555518674
    },
    {
        "content": "<p>and I feel like we could have a flag for enabling <code>save-analysis</code>, on by default. SO you'll get good experience for small projects, but, for bigger proejcts and smaller ram, you can live only with analyzer parts</p>",
        "id": 163577649,
        "sender_full_name": "matklad",
        "timestamp": 1555518702
    },
    {
        "content": "<p>this is just order of magnitude measure, would have to measure precisely again what's done what</p>",
        "id": 163577655,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555518710
    },
    {
        "content": "<p>heh, 35megs is peanuts, in ra we have GIGs of trees ;(</p>",
        "id": 163577704,
        "sender_full_name": "matklad",
        "timestamp": 1555518723
    },
    {
        "content": "<p><span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> I think that would be ideal</p>",
        "id": 163577718,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555518724
    },
    {
        "content": "<p>damn that's... a lot</p>",
        "id": 163577731,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555518738
    },
    {
        "content": "<p>wouldn't have expected that much</p>",
        "id": 163577736,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555518746
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>workspaces:\n411 packages loaded\n\nanalysis:\n28122 (106mb) files\n131239 (11mb) symbols\n1175 trees, 80 (43mb) retained\n\n\nmemory:\n342mb allocated 1499mb resident\ngc 852 seconds ago\n</pre></div>",
        "id": 163577752,
        "sender_full_name": "matklad",
        "timestamp": 1555518757
    },
    {
        "content": "<p>is it due to expansion? do we hold separate instance per expansion pass  for macros?</p>",
        "id": 163577755,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555518759
    },
    {
        "content": "<p>well, actually it did get better after gc and rowan work</p>",
        "id": 163577769,
        "sender_full_name": "matklad",
        "timestamp": 1555518769
    },
    {
        "content": "<p>this is from rustc</p>",
        "id": 163577778,
        "sender_full_name": "matklad",
        "timestamp": 1555518775
    },
    {
        "content": "<blockquote>\n<p>is it due to expansion? </p>\n</blockquote>\n<p>I think this is mostly due to poor GC for syntax trees. We never need to keep many syntax trees in memory simultaneously, but currently we do ;(</p>",
        "id": 163577859,
        "sender_full_name": "matklad",
        "timestamp": 1555518824
    },
    {
        "content": "<p>And yeah, limiting memory usage is an absolute blocker for any real release of ra</p>",
        "id": 163577933,
        "sender_full_name": "matklad",
        "timestamp": 1555518861
    },
    {
        "content": "<p>So, I think we can deal with quirky JSON and megabyes of data</p>",
        "id": 163577958,
        "sender_full_name": "matklad",
        "timestamp": 1555518884
    },
    {
        "content": "<p>The stability issue is what worries me most</p>",
        "id": 163577986,
        "sender_full_name": "matklad",
        "timestamp": 1555518903
    },
    {
        "content": "<p>Do you think it would be feasible to make save-analysis data \"stable, but only for RLS\"? <code>struct rustc { friend class RLS; };</code> basically</p>",
        "id": 163578040,
        "sender_full_name": "matklad",
        "timestamp": 1555518955
    },
    {
        "content": "<p>The same \"stability loophole\" would be required for IPC VFS bit as well.</p>",
        "id": 163578501,
        "sender_full_name": "matklad",
        "timestamp": 1555519314
    },
    {
        "content": "<p>Hm, otoh, for the poc, we can totally restrict ourselves to nightly, to just test out if it work</p>",
        "id": 163578571,
        "sender_full_name": "matklad",
        "timestamp": 1555519343
    },
    {
        "content": "<p>that is, save-analysis bits would be available only on nightly <code>rustc</code>, and we'll use <code>-Z</code> flags to access JSON &amp; VFS</p>",
        "id": 163578640,
        "sender_full_name": "matklad",
        "timestamp": 1555519402
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> that's how we currently work around this in stable toolchain</p>",
        "id": 163579131,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555519730
    },
    {
        "content": "<p>we have a <code>rls-rustc</code> shim which is able to run on stable but can emit save-analysis</p>",
        "id": 163579166,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555519752
    },
    {
        "content": "<p>as in, it doesn't require <code>-Z</code> flag</p>",
        "id": 163579178,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555519762
    },
    {
        "content": "<p>for one I'd like to stop using rustc_serialize for save-analysis as a cleanup</p>",
        "id": 163579208,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555519795
    },
    {
        "content": "<p>IIRC there was a problem with serde being in the sysroot which cause some problems, don't know the details</p>",
        "id": 163579286,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555519819
    },
    {
        "content": "<p><a href=\"#narrow/stream/131828-t-compiler/topic/serde.20in.20the.20compiler\" title=\"#narrow/stream/131828-t-compiler/topic/serde.20in.20the.20compiler\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/serde.20in.20the.20compiler</a></p>",
        "id": 163579325,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555519847
    },
    {
        "content": "<p>yeah, purging rustc_serialize from rustc would be awesome</p>",
        "id": 163579377,
        "sender_full_name": "matklad",
        "timestamp": 1555519875
    },
    {
        "content": "<p>If we have an easily serde-deserializable data we can then toy with making it work on stable and so forth</p>",
        "id": 163579382,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555519878
    },
    {
        "content": "<p>I don't think that's feasible since there are some edge cases (metadata serialization) where it'd require more work to make serde support a very niche case</p>",
        "id": 163579423,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555519913
    },
    {
        "content": "<p>but at least for JSON (de)serialization we should definitely switch to serde</p>",
        "id": 163579462,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555519924
    },
    {
        "content": "<p>I guess pigging-in serde should help with perf in that we could switch from JSON to bincode</p>",
        "id": 163579549,
        "sender_full_name": "matklad",
        "timestamp": 1555520013
    },
    {
        "content": "<p>to save memory</p>",
        "id": 163579555,
        "sender_full_name": "matklad",
        "timestamp": 1555520017
    },
    {
        "content": "<p>might be useful for \"stability\" as well: it's much easier to use JSON accidentally, than with some binary blob of whatever</p>",
        "id": 163579630,
        "sender_full_name": "matklad",
        "timestamp": 1555520045
    },
    {
        "content": "<p>using binary format is also high on the list of things to experiment with for RLS 1.0 so that'd be good as well</p>",
        "id": 163579689,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555520105
    },
    {
        "content": "<p>I'd like to take a look at the higher-level picture here</p>",
        "id": 163579733,
        "sender_full_name": "matklad",
        "timestamp": 1555520160
    },
    {
        "content": "<p>moving rustc out of RLS process does seem like a step backwards</p>",
        "id": 163579788,
        "sender_full_name": "matklad",
        "timestamp": 1555520176
    },
    {
        "content": "<p>However it probably isn't: save-analysis just looks like a less than ideal interface between compiler and IDE, and hiding it behind a query, as far as I understand, won't change the picture drastically</p>",
        "id": 163579840,
        "sender_full_name": "matklad",
        "timestamp": 1555520234
    },
    {
        "content": "<p>yes, we talked about this with Niko as well</p>",
        "id": 163579952,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555520314
    },
    {
        "content": "<p>I believe that we should pursue this as a next step, at least for the 1.0 version</p>",
        "id": 163579967,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555520329
    },
    {
        "content": "<p>This = ?</p>",
        "id": 163579996,
        "sender_full_name": "matklad",
        "timestamp": 1555520353
    },
    {
        "content": "<p>moving rustc out of RLS process</p>",
        "id": 163580034,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555520391
    },
    {
        "content": "<p>and just preparing to serve save-analysis or <em>some</em> data back from this <em>analysis rustc</em> invocation</p>",
        "id": 163580089,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555520413
    },
    {
        "content": "<p>so, it seems like we should just do it?</p>\n<ul>\n<li>we make rustc better by killing rustc_serialize</li>\n<li>we make existing RLS easier to maintain</li>\n<li>we provide foundation for 1=2 merger</li>\n</ul>",
        "id": 163580155,
        "sender_full_name": "matklad",
        "timestamp": 1555520484
    },
    {
        "content": "<p>1 &amp; 2 seems like no-brainer wins</p>",
        "id": 163580169,
        "sender_full_name": "matklad",
        "timestamp": 1555520503
    },
    {
        "content": "<p>one bit I am worried about is perf... But looks like IPC overhead is just negligible in comparison to actual data processing?</p>",
        "id": 163580285,
        "sender_full_name": "matklad",
        "timestamp": 1555520595
    },
    {
        "content": "<p>again, we can't really <em>kill</em> rustc_serialize as it will be used in rustc for metadata serialization from what I know</p>",
        "id": 163580303,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555520627
    },
    {
        "content": "<p>actually, I was pleasantly surprised by just how fast cargo-watch in ra turns out in practice, especially after @<strong>_Edwin Cheng</strong> 's refactoring</p>",
        "id": 163580306,
        "sender_full_name": "matklad",
        "timestamp": 1555520632
    },
    {
        "content": "<p>but it'd be nice to just push it into a corner and use it only for the niche case needed by rustc</p>",
        "id": 163580361,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555520645
    },
    {
        "content": "<p>Hm, curious, why it is needed for metadata serialization?</p>",
        "id": 163580378,
        "sender_full_name": "matklad",
        "timestamp": 1555520660
    },
    {
        "content": "<p>the format is unstable, so we can change it to something more easily serdable?</p>",
        "id": 163580384,
        "sender_full_name": "matklad",
        "timestamp": 1555520677
    },
    {
        "content": "<p>not really sure, I'm sure eddy knows more details</p>",
        "id": 163580394,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555520688
    },
    {
        "content": "<p>but it came up once or twice</p>",
        "id": 163580401,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555520702
    },
    {
        "content": "<p>seemed like it'd be more work to shoehorn serde's design to solve rustc's problem (which might've changed now? this discussion was surely more than half a year ago)</p>",
        "id": 163580445,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555520740
    },
    {
        "content": "<p>but definitely, I think we should converge somehow with this <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 163580465,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555520759
    },
    {
        "content": "<p>I guess, we can wrap up the discussion?</p>",
        "id": 163580540,
        "sender_full_name": "matklad",
        "timestamp": 1555520811
    },
    {
        "content": "<p>yeah</p>",
        "id": 163580558,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555520823
    },
    {
        "content": "<p>as you're saying, I believe IPC overhead is negligible</p>",
        "id": 163580579,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555520838
    },
    {
        "content": "<p>I say we do it and measure overhead then, if any</p>",
        "id": 163580593,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555520847
    },
    {
        "content": "<p>sgmt!</p>",
        "id": 163580608,
        "sender_full_name": "matklad",
        "timestamp": 1555520859
    },
    {
        "content": "<p>however I believe we can actually profit off this if we switch to binary serialization</p>",
        "id": 163580612,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555520860
    },
    {
        "content": "<p>yeah, that was my though as well: in general, by teasing apart things and creating boundaries, you can easier optimize stuff!</p>\n<p>One hope I have for my lexer work is to (in the far-future) generate the lexer as a giant utf-8-decoding state machine. Should be much easier once lexer is independent of ParseSess and the rest of the jungle :D</p>",
        "id": 163580753,
        "sender_full_name": "matklad",
        "timestamp": 1555520959
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> I'm really sorry for constantly putting off work for 2.0 -  let me work on this first, seeing as there are no people who know their way around save-analysis, short of nrc <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 163580755,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555520960
    },
    {
        "content": "<p>haha, yeah</p>",
        "id": 163580765,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555520974
    },
    {
        "content": "<p>I'm really interested in the lexer-as-a-library, please let me know if I can help</p>",
        "id": 163580787,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555520995
    },
    {
        "content": "<p>I'd really like to start librarifying things and splitting them off or even sharing, soon <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 163580876,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555521017
    },
    {
        "content": "<p>yeah, that PR about toolstate is sad :( </p>\n<p>I guess I might be able to put more work into the overall tooling after my Rust course ends</p>",
        "id": 163580880,
        "sender_full_name": "matklad",
        "timestamp": 1555521019
    },
    {
        "content": "<p>JFYI, the lexer work is here: <a href=\"https://github.com/rust-lang/rust/pull/59706\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59706\">https://github.com/rust-lang/rust/pull/59706</a></p>",
        "id": 163580924,
        "sender_full_name": "matklad",
        "timestamp": 1555521067
    },
    {
        "content": "<p>oh, this is actually closer than I thought, from what I can understand from the comments</p>",
        "id": 163581038,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555521137
    },
    {
        "content": "<p>nice! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 163581044,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555521140
    },
    {
        "content": "<p>Serde in the compiler discussion: <a href=\"#narrow/stream/131828-t-compiler/topic/serde.20in.20the.20compiler/near/163581456\" title=\"#narrow/stream/131828-t-compiler/topic/serde.20in.20the.20compiler/near/163581456\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/serde.20in.20the.20compiler/near/163581456</a></p>",
        "id": 163581509,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555521467
    },
    {
        "content": "<p>What's the advantage of rust-analyzer using save analysis?</p>",
        "id": 163602941,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1555537029
    },
    {
        "content": "<p>The data comes from the compiler so it should be more complete</p>",
        "id": 163606010,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555539646
    },
    {
        "content": "<p>This is nice because in theory it should handle (proc) macro expansions and whatnot</p>",
        "id": 163606018,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555539660
    },
    {
        "content": "<p>and by bridging the gap I think we get a more featureful(?) product and the work can improve the save-analysis backend which is important in itself for potential code indexer usage or in the future to make rustc handle lazy/on-demand work better</p>",
        "id": 163606111,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555539733
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> <a href=\"https://github.com/rust-lang/rust/pull/60053\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60053\">https://github.com/rust-lang/rust/pull/60053</a> it seems that... serde just works? this would be terrific</p>",
        "id": 163606130,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1555539774
    },
    {
        "content": "<p>for newer rust-folk, whats a more laymans explanation of the benefits?</p>",
        "id": 163606664,
        "sender_full_name": "Nick Lawrence",
        "timestamp": 1555540361
    },
    {
        "content": "<p>Rust analyzer currently works by re-implementing part of the compiler like parsing and type inference. Save-analysis works by asking, e.g, type inference info from the existing rustc. First approach is faster and scales better (due to careful choice of ide-oriented high-level architecture), but it handles only a fraction of the language now.</p>",
        "id": 163630232,
        "sender_full_name": "matklad",
        "timestamp": 1555574082
    },
    {
        "content": "<p>so is this like a temporary thing until rls 2.0 can share code with the compiler for macro expansion, name resolution and so on?</p>",
        "id": 163650181,
        "sender_full_name": "Laurențiu",
        "timestamp": 1555593426
    },
    {
        "content": "<p>yeah!</p>",
        "id": 163650397,
        "sender_full_name": "matklad",
        "timestamp": 1555593579
    },
    {
        "content": "<p>and even if it's able to read the analysis files, rust analyzer doesn't know what to do with them?</p>",
        "id": 163650569,
        "sender_full_name": "Laurențiu",
        "timestamp": 1555593697
    },
    {
        "content": "<p>right now, at least</p>",
        "id": 163650579,
        "sender_full_name": "Laurențiu",
        "timestamp": 1555593704
    }
]