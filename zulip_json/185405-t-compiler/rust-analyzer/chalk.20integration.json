[
    {
        "content": "<p>This is kind of a minor point in the grand scheme of things, but chalk is currently nightly-only, while rust-analyzer builds on stable. Some of that is probably easy to fix and I'd be happy to do it (it would be an opportunity to get a bit more familiar with the chalk codebase), but chalk also seems to use specialization, which I assume won't be so easy to get around? <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 160041045,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551820695
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> mmh I don't think chalk is actually doing something useful with specialization</p>",
        "id": 160041412,
        "sender_full_name": "scalexm",
        "timestamp": 1551820992
    },
    {
        "content": "<p>(I didn't even know we had the feature flag activated)</p>",
        "id": 160041460,
        "sender_full_name": "scalexm",
        "timestamp": 1551821031
    },
    {
        "content": "<p>Ah yeah, apparently it's only used for a Debug implementation</p>",
        "id": 160042318,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551821713
    },
    {
        "content": "<p>Moving to stable seems fine to me</p>",
        "id": 160046769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551824864
    },
    {
        "content": "<p>I'll make a PR soon then, hopefully ;)</p>\n<p>Meanwhile... I currently only have the vaguest idea how integrating chalk would actually look -- i.e. what data would rust-analyzer have to provide, and what forms of queries would it make. I've read the material in the rustc guide, but if I understand you correctly, e.g. the lowering logic would come from chalk. Is the <code>rust_ir</code> module in chalk basically the input for the lowering? And on the query side, would canonicalization happen in chalk?</p>\n<p>This might be material for another meeting, but maybe you can give me some pointers already ;)</p>\n<p>(btw, I wonder if we could integrate the chalk repl into RA, once the lowering works, so one could make trait queries about the whole program...)</p>",
        "id": 160128711,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551902084
    },
    {
        "content": "<p>Integrating with the chalk repl would be really cool, especially if it could answer queries about the current context</p>",
        "id": 160129627,
        "sender_full_name": "detrumi",
        "timestamp": 1551902699
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> Ideally, yes the lowering logic etc would come from chalk. I believe the best thing would be to have the <code>rust_ir</code> module somehow shared between chalk and RLS 2.0 (as an independent crate), so that RLS 2.0 just has to feed chalk with all the Rust constructs in the crate being analyzed</p>",
        "id": 160381843,
        "sender_full_name": "scalexm",
        "timestamp": 1552162286
    },
    {
        "content": "<p>integration with the chalk repl is a good idea, and would be straightforward if we managed to share that <code>rust_ir</code> thing</p>",
        "id": 160381874,
        "sender_full_name": "scalexm",
        "timestamp": 1552162322
    },
    {
        "content": "<p>I think just using a <code>git</code> dependency in Cargo.toml should work for sharing?</p>",
        "id": 160381901,
        "sender_full_name": "matklad",
        "timestamp": 1552162354
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> yes it would work, but I was thinking more about refactoring and enhancing that module so that it is indeed easily shareable and covers most needs</p>",
        "id": 160381913,
        "sender_full_name": "scalexm",
        "timestamp": 1552162408
    },
    {
        "content": "<p>So in the <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span> meeting today we discussed the idea of having a session to kind of brainstorm this out</p>",
        "id": 160514894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552336015
    },
    {
        "content": "<p>we could do this tomorrow at at 15:00 UTC-04:00 (Boston time), if that works for everyone</p>",
        "id": 160514935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552336058
    },
    {
        "content": "<p>I'd probably block out two hours just to give us more time to think things over ...</p>",
        "id": 160515007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552336085
    },
    {
        "content": "<p>well, maybe I'll schedule that onto my calendar regardless -- not sure if it needs to be a compile-team calendar event, but I guess there's no harm</p>",
        "id": 160515047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552336133
    },
    {
        "content": "<p>(I added it to my personal calendar, anyway)</p>",
        "id": 160515207,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552336231
    },
    {
        "content": "<p>15:00 tomorrow Boston time works for me</p>",
        "id": 160515527,
        "sender_full_name": "scalexm",
        "timestamp": 1552336501
    },
    {
        "content": "<p>Works for me!</p>",
        "id": 160522936,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552342431
    },
    {
        "content": "<p>works for me as well. Let's make a calendar event? It's easy to forget or misconvert the timezones :)</p>",
        "id": 160549155,
        "sender_full_name": "matklad",
        "timestamp": 1552375939
    },
    {
        "content": "<p>I don't see it on the calendar, but that should be in 20 minutes</p>",
        "id": 160597657,
        "sender_full_name": "detrumi",
        "timestamp": 1552415969
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ping, is there a meeting?</p>",
        "id": 160599827,
        "sender_full_name": "matklad",
        "timestamp": 1552417452
    },
    {
        "content": "<p>Yeah, give me a few. Sorry, I didn't make it a \"global calendar event\"</p>",
        "id": 160599890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552417513
    },
    {
        "content": "<p>I need ~5 minut :)</p>",
        "id": 160599907,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552417528
    },
    {
        "content": "<p>pinging <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> &amp; <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> in advance</p>",
        "id": 160600019,
        "sender_full_name": "matklad",
        "timestamp": 1552417609
    },
    {
        "content": "<p>OK, I'm back</p>",
        "id": 160600722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552418109
    },
    {
        "content": "<p>I didn't really have a <em>super concrete</em> plan here</p>",
        "id": 160600733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552418119
    },
    {
        "content": "<p>which is partly why I didn't schedule a firm meeting</p>",
        "id": 160600748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552418129
    },
    {
        "content": "<p>sorry, today has of course been messier than anticipated</p>",
        "id": 160600764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552418154
    },
    {
        "content": "<p>so my mind is a bit scattered</p>",
        "id": 160600772,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552418160
    },
    {
        "content": "<p>I guess I can imagine a few ways forward:</p>",
        "id": 160600818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552418169
    },
    {
        "content": "<ul>\n<li>do a bit of \"exploratory hacking\" while sharing screen, e.g., over Zoom, maybe record for later :)</li>\n</ul>",
        "id": 160600831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552418185
    },
    {
        "content": "<ul>\n<li>discuss over Zulip a bit instead, perhaps taking notes in a dropbox paper</li>\n</ul>",
        "id": 160600849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552418206
    },
    {
        "content": "<p>I'm sort of leaning towards the latter -- i.e., maybe we could sketch out first what we think a Chalk integration would look like</p>",
        "id": 160600860,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552418218
    },
    {
        "content": "<p>I'm fine with option 2</p>",
        "id": 160600877,
        "sender_full_name": "scalexm",
        "timestamp": 1552418226
    },
    {
        "content": "<p>then we can kind of try to map that to RLS?</p>",
        "id": 160600882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552418229
    },
    {
        "content": "<p>Here is a <a href=\"https://paper.dropbox.com/doc/Chalk-RLS-integration--AZOAaGqTORQAptU93qcCqIuOAg-QCJelXDeaq7GV6jVQln4j\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Chalk-RLS-integration--AZOAaGqTORQAptU93qcCqIuOAg-QCJelXDeaq7GV6jVQln4j\">dropbox paper document</a></p>",
        "id": 160600908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552418260
    },
    {
        "content": "<p>whops</p>",
        "id": 160601045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552418351
    },
    {
        "content": "<p>sorry, that wasn't meant to be posted here :)</p>",
        "id": 160601079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552418380
    },
    {
        "content": "<p>So this integration, is it changing Chalk to be usable for RLS, changing the RLS so it can use Chalk, or both?</p>",
        "id": 160601163,
        "sender_full_name": "detrumi",
        "timestamp": 1552418424
    },
    {
        "content": "<p>I expect it'll be some of both</p>",
        "id": 160601199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552418460
    },
    {
        "content": "<p>I was just thinking about where to start..</p>",
        "id": 160601214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552418468
    },
    {
        "content": "<p>...I guess we know that (a) we want to share the lowering code</p>",
        "id": 160601245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552418504
    },
    {
        "content": "<p>so maybe we can elaborate a bit what it needs</p>",
        "id": 160601276,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552418522
    },
    {
        "content": "<p>this is code which basically takes the set of traits + impls and produces a set of rules</p>",
        "id": 160601311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552418533
    },
    {
        "content": "<p>Presumably, this needs to speak about types as well?</p>",
        "id": 160601346,
        "sender_full_name": "matklad",
        "timestamp": 1552418571
    },
    {
        "content": "<p>Yes</p>",
        "id": 160601560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552418710
    },
    {
        "content": "<p>so one other thing is that</p>",
        "id": 160601652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552418763
    },
    {
        "content": "<p>we have to be able to do the lowering \"piecemeal\"</p>",
        "id": 160601659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552418769
    },
    {
        "content": "<p>i.e., we have to be able to lower the impls for one specific trait</p>",
        "id": 160601674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552418783
    },
    {
        "content": "<p>so I guess that means we have something like this:</p>\n<ul>\n<li>some shared way to represent an impl:<br>\n    - this means representing types, where clauses, etc -- we can find the complete list in chalk-ir</li>\n</ul>",
        "id": 160601739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552418853
    },
    {
        "content": "<p>I'm debating how chalk lowering should integrate here. One option is</p>",
        "id": 160601753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552418870
    },
    {
        "content": "<p>it can export some salsa queries</p>",
        "id": 160601758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552418880
    },
    {
        "content": "<p>but it needs a way to \"call out\" into the context</p>",
        "id": 160601821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552418900
    },
    {
        "content": "<p>we were planning on porting chalk to use salsa more deeply internally anyway</p>",
        "id": 160601832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552418909
    },
    {
        "content": "<p>this is an interesting design question :)</p>",
        "id": 160601839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552418919
    },
    {
        "content": "<p>i.e., I could imagine that we have a chalk library that exports some salsa queries, one of which is for a \"context object\" that we can use to query the AST</p>",
        "id": 160601872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552418944
    },
    {
        "content": "<p>then the RLS can implement this one</p>",
        "id": 160601882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552418949
    },
    {
        "content": "<p>and so can some unit tester</p>",
        "id": 160601886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552418952
    },
    {
        "content": "<p>(I wonder if we'll hit some obstacle trying do that)</p>",
        "id": 160601895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552418961
    },
    {
        "content": "<p>context won't be a real query, right?</p>",
        "id": 160601916,
        "sender_full_name": "matklad",
        "timestamp": 1552418983
    },
    {
        "content": "<p>well it's more like a \"constant\"</p>",
        "id": 160601923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552418995
    },
    {
        "content": "<p>Just an <code>DB: AsRef&lt;Context&gt;</code> or smth like that?</p>",
        "id": 160601928,
        "sender_full_name": "matklad",
        "timestamp": 1552418999
    },
    {
        "content": "<p>ah well I guess that's the trick we can use duh</p>",
        "id": 160601932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419001
    },
    {
        "content": "<p>that is, we can just add a trait of our own</p>",
        "id": 160601992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419009
    },
    {
        "content": "<p>something like this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">ChalkCallbacks</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">ast_of_an_impl</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Ast</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[salsa::query_database]</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">ChalkDatabase</span>: <span class=\"nc\">ChalkCallbacks</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 160602069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419044
    },
    {
        "content": "<p>then RLS 2.0 can just implement those callbacks in terms of whatever queries it wants</p>",
        "id": 160602081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419055
    },
    {
        "content": "<p>SGMT</p>",
        "id": 160602098,
        "sender_full_name": "matklad",
        "timestamp": 1552419066
    },
    {
        "content": "<p>OK, that's good</p>",
        "id": 160602228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419144
    },
    {
        "content": "<p>so let's look a bit more closely at what the IR looks like I guess?</p>",
        "id": 160602243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419155
    },
    {
        "content": "<p>yeah, that is interesting</p>",
        "id": 160602284,
        "sender_full_name": "matklad",
        "timestamp": 1552419183
    },
    {
        "content": "<p>that would probably be pretty similar to what's currently in chalk's <code>rust_ir</code>, I guess?</p>",
        "id": 160602302,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552419195
    },
    {
        "content": "<p>yep I was just opening up that github repository</p>",
        "id": 160602328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419217
    },
    {
        "content": "<p>you mean chalk_ir?</p>",
        "id": 160602333,
        "sender_full_name": "matklad",
        "timestamp": 1552419219
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> no, <a href=\"https://github.com/rust-lang-nursery/chalk/blob/master/src/rust_ir.rs\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/chalk/blob/master/src/rust_ir.rs\">https://github.com/rust-lang-nursery/chalk/blob/master/src/rust_ir.rs</a></p>",
        "id": 160602394,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552419244
    },
    {
        "content": "<p>so actually chalk lowering <strong>currently</strong> works in 2 phases</p>",
        "id": 160602421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419273
    },
    {
        "content": "<p>first, we have this parser</p>",
        "id": 160602427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419276
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/chalk/blob/master/chalk-parse/src/ast.rs\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/chalk/blob/master/chalk-parse/src/ast.rs\">it produces an AST</a></p>",
        "id": 160602461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419293
    },
    {
        "content": "<p>we process this somewhat to produce something analogous to the HIR, that is (part of) what lives in chalk-ir</p>",
        "id": 160602493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419311
    },
    {
        "content": "<p>er, yes, maybe that's <a href=\"https://github.com/rust-lang-nursery/chalk/blob/master/src/rust_ir.rs\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/chalk/blob/master/src/rust_ir.rs\">rust_ir</a>, sorry</p>",
        "id": 160602508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419329
    },
    {
        "content": "<p>anyway I think we <strong>definitely</strong> don't want this AST</p>",
        "id": 160602518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419339
    },
    {
        "content": "<p>yeah</p>",
        "id": 160602537,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552419357
    },
    {
        "content": "<p>we probably want to refactor rust-ir to be more a set of queries</p>",
        "id": 160602589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419366
    },
    {
        "content": "<p>than a big data structure</p>",
        "id": 160602596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419368
    },
    {
        "content": "<p>yes</p>",
        "id": 160602602,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552419375
    },
    {
        "content": "<p>the stuff in rust-ir actually seems to me like it would be mostly pretty straightforward to provide from rust-analyzer</p>",
        "id": 160602627,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552419406
    },
    {
        "content": "<p>(there's a few details I'm not so sure about)</p>",
        "id": 160602651,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552419427
    },
    {
        "content": "<blockquote>\n<p>the stuff in rust-ir actually seems to me like it would be mostly pretty straightforward to provide from rust-analyzer</p>\n</blockquote>\n<p>yeah I think overall should not be so hard</p>",
        "id": 160602774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419515
    },
    {
        "content": "<p>question: which of these things exist already?</p>",
        "id": 160602798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419540
    },
    {
        "content": "<p>i.e., is there a concept of (say) a <code>TraitRef</code> and so on?</p>",
        "id": 160602811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419547
    },
    {
        "content": "<p>although I have one general question... chalk is pretty focused on the perspective of one crate, right? I'm not sure how much difference it will really make, but whether an impl is local or external depends on what's the 'current' crate</p>",
        "id": 160602818,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552419560
    },
    {
        "content": "<p>I guess in the parser probably</p>",
        "id": 160602821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419561
    },
    {
        "content": "<blockquote>\n<p>although I have one general question... chalk is pretty focused on the perspective of one crate, right? I'm not sure how much difference it will really make, but whether an impl is local or external depends on what's the 'current' crate</p>\n</blockquote>\n<p>well, this is presently true, but I think we could change that</p>",
        "id": 160602833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419579
    },
    {
        "content": "<p>almost nothing cares about that but coherence</p>",
        "id": 160602845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419592
    },
    {
        "content": "<p>yeah, there's not much of a HIR for traits and bounds so far in RA</p>",
        "id": 160602853,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552419599
    },
    {
        "content": "<p>I imagine what we will want is to have a \"crate id\" associated with things</p>",
        "id": 160602910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419612
    },
    {
        "content": "<p>and to define the coherence goals as relative to a crate</p>",
        "id": 160602923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419625
    },
    {
        "content": "<p>that seems good</p>",
        "id": 160602930,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552419633
    },
    {
        "content": "<p>so that when we ask \"is X local\" we can instead ask \"same crate or not\", I guess</p>",
        "id": 160602970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419664
    },
    {
        "content": "<p>definitely a good question, something to investigate</p>",
        "id": 160602975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419670
    },
    {
        "content": "<p>I'm going to rework this paper document to try and extract some of this :)</p>",
        "id": 160602985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419681
    },
    {
        "content": "<p>As I see, chalk's ir is heavily id-based (like, <code>TraitRef</code> is id)</p>",
        "id": 160603257,
        "sender_full_name": "matklad",
        "timestamp": 1552419864
    },
    {
        "content": "<p>yes</p>",
        "id": 160603268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419875
    },
    {
        "content": "<p>presumably, ids are currently assigned by chanlks parser</p>",
        "id": 160603277,
        "sender_full_name": "matklad",
        "timestamp": 1552419884
    },
    {
        "content": "<p>actually I don't think so</p>",
        "id": 160603284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419893
    },
    {
        "content": "<p>how this should work with RLS2, where we have our own ids?</p>",
        "id": 160603292,
        "sender_full_name": "matklad",
        "timestamp": 1552419897
    },
    {
        "content": "<p>I think they are assigned by the intermediate \"lowering\" step that creates rust-ir</p>",
        "id": 160603300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419902
    },
    {
        "content": "<p>well, I think RLS will be producing the rust-ir level information</p>",
        "id": 160603330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419915
    },
    {
        "content": "<p>directly</p>",
        "id": 160603335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419919
    },
    {
        "content": "<p>so it will just create its own ids</p>",
        "id": 160603343,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419924
    },
    {
        "content": "<p>one question would be whether we should be generic over the id type</p>",
        "id": 160603351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419932
    },
    {
        "content": "<p>or whether we should try to extract the id into some shared crate</p>",
        "id": 160603376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419942
    },
    {
        "content": "<p>along with (say) the representation of types</p>",
        "id": 160603384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419946
    },
    {
        "content": "<p>that both RLS + chalk can depend upon</p>",
        "id": 160603393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552419953
    },
    {
        "content": "<p>if the IDs are just numbers on both sides, we could also just convert between the types, right</p>",
        "id": 160603478,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552419987
    },
    {
        "content": "<p>chalk uses a single <code>ItemId</code> for different, right?</p>",
        "id": 160603483,
        "sender_full_name": "matklad",
        "timestamp": 1552419991
    },
    {
        "content": "<p>RLS2 uses different ids for different types</p>",
        "id": 160603495,
        "sender_full_name": "matklad",
        "timestamp": 1552420003
    },
    {
        "content": "<p>hm, otoh chalk uses usize for id, and we use u32, so we can use 32 bits for type tag :)</p>",
        "id": 160603526,
        "sender_full_name": "matklad",
        "timestamp": 1552420033
    },
    {
        "content": "<blockquote>\n<p>if the IDs are just numbers on both sides, we could also just convert between the types, right</p>\n</blockquote>\n<p>yes, that's an option too, just annoying</p>",
        "id": 160603631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552420095
    },
    {
        "content": "<p>ok let's leave this as an \"open question\" for now, but we can certainly interconvert</p>",
        "id": 160603648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552420106
    },
    {
        "content": "<blockquote>\n<p>RLS2 uses different ids for different types</p>\n</blockquote>\n<p>we could probably adopt this too</p>",
        "id": 160603657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552420119
    },
    {
        "content": "<p>I would expect that there'd be some converting between datastructures anyway, since chalk cares about different things</p>",
        "id": 160603664,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552420124
    },
    {
        "content": "<p>I don't think chalk has <em>that</em> many ids</p>",
        "id": 160603666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552420125
    },
    {
        "content": "<p>yes, I agree there will be some, just not 100% sure which ones</p>",
        "id": 160603689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552420144
    },
    {
        "content": "<p>I feel like it may be good to share notions where we can</p>",
        "id": 160603694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552420152
    },
    {
        "content": "<p>relatedly -- <code>rust_ir</code> has something called \"structs\", but in the real world, that would be structs/enums/unions, right?</p>",
        "id": 160603700,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552420158
    },
    {
        "content": "<p>yeah, interconverting seems easiest to start with: a bit more code to write, a bit less mutual dependency</p>",
        "id": 160603710,
        "sender_full_name": "matklad",
        "timestamp": 1552420161
    },
    {
        "content": "<blockquote>\n<p>relatedly -- <code>rust_ir</code> has something called \"structs\", but in the real world, that would be structs/enums/unions, right?</p>\n</blockquote>\n<p>yeah, it's just \"nominal types\"</p>",
        "id": 160603718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552420169
    },
    {
        "content": "<blockquote>\n<p>I feel like it may be good to share notions where we can</p>\n</blockquote>\n<p>so to elaborate a bit, I am specifically think about types, and the reason is that chalk has to do things like unifying types and so forth. And types embed IDs.</p>",
        "id": 160603739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552420191
    },
    {
        "content": "<p>if you start with converting, there's the danger that it'll get harder to share later</p>",
        "id": 160603743,
        "sender_full_name": "detrumi",
        "timestamp": 1552420194
    },
    {
        "content": "<blockquote>\n<p>I feel like it may be good to share notions where we can</p>\n</blockquote>\n<p>I actually not 100% sold on this one. If we are in separate repos, sharing \"volatile\" things could be a pain</p>",
        "id": 160603816,
        "sender_full_name": "matklad",
        "timestamp": 1552420227
    },
    {
        "content": "<p>I guess we can say this:</p>",
        "id": 160603817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552420227
    },
    {
        "content": "<ul>\n<li>figure out what the things that chalk uses its ids for</li>\n<li>compare against RLS ids</li>\n<li>see if we can introduce newtypes</li>\n</ul>",
        "id": 160603835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552420260
    },
    {
        "content": "<p>i.e., I'd prefer if we are not interconverting enums to flat integers at least</p>",
        "id": 160603853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552420276
    },
    {
        "content": "<p>and anyway it might make chalk cleaner</p>",
        "id": 160603858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552420281
    },
    {
        "content": "<blockquote>\n<p>I actually not 100% sold on this one. If we are in separate repos, sharing \"volatile\" things could be a pain</p>\n</blockquote>\n<p>I agree. I just don't think that the notion of an id is volatile, but I agree it is not clear cut</p>",
        "id": 160603903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552420318
    },
    {
        "content": "<blockquote>\n<p>so to elaborate a bit, I am specifically think about types, and the reason is that chalk has to do things like unifying types and so forth. And types embed IDs.</p>\n</blockquote>\n<p>and yeah, this <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> I guess some of this comes back to whether we expect to share types etc. I think that, eventually, we really want the type checker and trait solver to be sharing the definition of types. And I think those types must embed IDs. But it's possible that all of this should be \"external\" to RLS and hence it's ok to interconvert IDs at the boundary. </p>\n<p>Seems like we can figure it out a bit as we go.</p>",
        "id": 160604032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552420412
    },
    {
        "content": "<p>To start we won't be sharing anyway</p>",
        "id": 160604047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552420426
    },
    {
        "content": "<p>How \"Ty\" type is called in chalk?</p>",
        "id": 160604108,
        "sender_full_name": "matklad",
        "timestamp": 1552420447
    },
    {
        "content": "<p>I want to glance at what we want to share</p>",
        "id": 160604133,
        "sender_full_name": "matklad",
        "timestamp": 1552420469
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/chalk/blob/fc2d9ced016701d86c6bc5d95e124f1bc8020645/chalk-ir/src/lib.rs#L148-L161\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/chalk/blob/fc2d9ced016701d86c6bc5d95e124f1bc8020645/chalk-ir/src/lib.rs#L148-L161\">this is probably the type you mean</a></p>",
        "id": 160604150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552420497
    },
    {
        "content": "<p>that is sort of the equivalent of rustc's <code>Ty&lt;'tcx&gt;</code></p>",
        "id": 160604171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552420511
    },
    {
        "content": "<p>(I also don't think it's perfect :)</p>",
        "id": 160604183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552420520
    },
    {
        "content": "<p>Sharing exactly same type representations seems good to me</p>",
        "id": 160604514,
        "sender_full_name": "matklad",
        "timestamp": 1552420745
    },
    {
        "content": "<p>I was just reading over the <a href=\"https://github.com/rust-lang-nursery/chalk/blob/master/src/rust_ir.rs\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/chalk/blob/master/src/rust_ir.rs\">rust-ir definition</a></p>",
        "id": 160604544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552420760
    },
    {
        "content": "<p>I guess that, right now, it also uses that same version of <code>Ty</code> to e.g. represent the types in an impl header</p>",
        "id": 160604567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552420776
    },
    {
        "content": "<p>(I was trying to remember if we had another variant somewhere)</p>",
        "id": 160604580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552420789
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> or <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> -- where in rust-analyzer is the representation of an impl?</p>",
        "id": 160604661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552420814
    },
    {
        "content": "<p>(ps, I'm feeling pretty good about this, it seems like we're starting to have a concrete-ish set of action items)</p>",
        "id": 160604683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552420831
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir/src/impl_block.rs#L118\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir/src/impl_block.rs#L118\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir/src/impl_block.rs#L118</a></p>",
        "id": 160604704,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552420850
    },
    {
        "content": "<p>(that's unresolved, as all the 'HIR' structures in RA)</p>",
        "id": 160604757,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552420896
    },
    {
        "content": "<p>where is <code>TypeRef</code> to be found?</p>",
        "id": 160604901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552420998
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir/src/type_ref.rs#L40\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir/src/type_ref.rs#L40\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir/src/type_ref.rs#L40</a> ;)</p>",
        "id": 160604923,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552421017
    },
    {
        "content": "<p>yep, I just found it, thanks</p>",
        "id": 160604934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552421027
    },
    {
        "content": "<p>these file names are totally unpredictable ;)</p>",
        "id": 160604943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552421035
    },
    {
        "content": "<p>so that's still very close to the AST</p>",
        "id": 160605007,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552421058
    },
    {
        "content": "<p>Yes.</p>",
        "id": 160605014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552421063
    },
    {
        "content": "<p>I was interpreting this as basically the AST</p>",
        "id": 160605023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552421071
    },
    {
        "content": "<p>I mean I know it's not <em>literally</em></p>",
        "id": 160605026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552421075
    },
    {
        "content": "<p>but it's \"syntactic\" in nature</p>",
        "id": 160605032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552421080
    },
    {
        "content": "<p>Yeah, this is position-independent AST</p>",
        "id": 160605059,
        "sender_full_name": "matklad",
        "timestamp": 1552421103
    },
    {
        "content": "<p>it seems fine, we would translate that (combined with name resolution information) into what chalk wants</p>",
        "id": 160605062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552421104
    },
    {
        "content": "<p>It's not just ids to make name-resolution lazy</p>",
        "id": 160605088,
        "sender_full_name": "matklad",
        "timestamp": 1552421126
    },
    {
        "content": "<p>How would we integrate with name resolution?</p>",
        "id": 160605096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552421137
    },
    {
        "content": "<p>e.g. for the target type of an impl there's a method that returns the actual (name-resolved) <code>Ty</code>: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir/src/impl_block.rs#L83\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir/src/impl_block.rs#L83\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir/src/impl_block.rs#L83</a></p>",
        "id": 160605192,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552421200
    },
    {
        "content": "<p>I'd expect there to be a similar name-resolved <code>TraitRef</code> (maybe it needs a different name) in RA that the target trait would be lowered to</p>",
        "id": 160605254,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552421251
    },
    {
        "content": "<p>So the Chalk inputs would always be fully resolved?</p>",
        "id": 160605338,
        "sender_full_name": "detrumi",
        "timestamp": 1552421312
    },
    {
        "content": "<p>Good question!</p>",
        "id": 160605355,
        "sender_full_name": "matklad",
        "timestamp": 1552421330
    },
    {
        "content": "<p>I imagine that we might save some computation if not eagarly resolving</p>",
        "id": 160605376,
        "sender_full_name": "matklad",
        "timestamp": 1552421345
    },
    {
        "content": "<p>like, imagine <code>impl Foo for (Bar, Baz)</code></p>",
        "id": 160605383,
        "sender_full_name": "matklad",
        "timestamp": 1552421357
    },
    {
        "content": "<p>I guess there are cases when it's enough to know that target is a tuple, without understanding what <code>Bar</code> and <code>Baz</code> mean exactly</p>",
        "id": 160605415,
        "sender_full_name": "matklad",
        "timestamp": 1552421386
    },
    {
        "content": "<p>that seems like a lot of complication though</p>",
        "id": 160605416,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552421386
    },
    {
        "content": "<p>well, it's plausible</p>",
        "id": 160605420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552421390
    },
    {
        "content": "<p>can Chalk handle missing information?</p>",
        "id": 160605421,
        "sender_full_name": "detrumi",
        "timestamp": 1552421392
    },
    {
        "content": "<p>sort of</p>",
        "id": 160605422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552421397
    },
    {
        "content": "<p>I imagine in the beginning we might not need to worry about this <strong>but</strong></p>",
        "id": 160605471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552421406
    },
    {
        "content": "<p>when you ask Chalk to prove some predicate (e.g., is <code>Trait</code> implemented for <code>Ty</code>),</p>",
        "id": 160605495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552421430
    },
    {
        "content": "<p>one of the first thing it does is to callback into the context and ask for a <strong>superset</strong> of the rules that might be used to prove that</p>",
        "id": 160605508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552421445
    },
    {
        "content": "<p>this is probably the hook we would use to trigger lowering</p>",
        "id": 160605515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552421455
    },
    {
        "content": "<p>so it is plausible that we could say (for example) \"lower the impls of trait Foo that are for tuples\"</p>",
        "id": 160605533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552421472
    },
    {
        "content": "<p>(or which might be)</p>",
        "id": 160605537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552421475
    },
    {
        "content": "<p>rustc uses a similar sort of trick, categorizing impls into some big bins</p>",
        "id": 160605547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552421491
    },
    {
        "content": "<p>basically a hashing trick</p>",
        "id": 160605559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552421506
    },
    {
        "content": "<p>so yeah it's plausible that, while Chalk does want name resolution for the impls it requests info about, it may not require access to all the impls</p>",
        "id": 160605624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552421540
    },
    {
        "content": "<p>yeah, we have something called <code>TyFingerprint</code> for this</p>",
        "id": 160605630,
        "sender_full_name": "matklad",
        "timestamp": 1552421548
    },
    {
        "content": "<p>fully resolved types for subset of impls look good</p>",
        "id": 160605671,
        "sender_full_name": "matklad",
        "timestamp": 1552421587
    },
    {
        "content": "<p>seems to me like that would be done on the level of queries, right? e.g. chalk would ask for 'impls of trait <code>Foo</code> with target type fingerprint <code>Tuple</code>'</p>",
        "id": 160605692,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552421613
    },
    {
        "content": "<p>this is roughly what I had in mind, yeah</p>",
        "id": 160605704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552421630
    },
    {
        "content": "<p>Do we need some kind of type-interning infrastructure?</p>",
        "id": 160605715,
        "sender_full_name": "matklad",
        "timestamp": 1552421639
    },
    {
        "content": "<p>Or are types just basically PODs with derived Eq and possible duplicates?</p>",
        "id": 160605787,
        "sender_full_name": "matklad",
        "timestamp": 1552421664
    },
    {
        "content": "<p>well, we don't at first, as I think that neither chalk nor RLS currently uses type interning</p>",
        "id": 160605808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552421693
    },
    {
        "content": "<p>I suspect eventually we'll want something but it can wait</p>",
        "id": 160605829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552421705
    },
    {
        "content": "<p>maybe based on <a href=\"https://github.com/salsa-rs/salsa/pull/150\" target=\"_blank\" title=\"https://github.com/salsa-rs/salsa/pull/150\">https://github.com/salsa-rs/salsa/pull/150</a> :)</p>",
        "id": 160605847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552421725
    },
    {
        "content": "<p>so the question above about missing information reminded me, what about dealing with incomplete types? e.g. we might have an <code>Option&lt;{unknown}&gt;</code> because there was a syntax error in there somehow, in the ideal case we'd still know it implements certain traits</p>",
        "id": 160605978,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552421822
    },
    {
        "content": "<p>hmm that's a good point</p>",
        "id": 160606003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552421842
    },
    {
        "content": "<p>Maybe both could work the same way</p>",
        "id": 160606013,
        "sender_full_name": "detrumi",
        "timestamp": 1552421859
    },
    {
        "content": "<p>it seems like we should add some form of \"error\" variant to chalk's notion of a type</p>",
        "id": 160606014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552421860
    },
    {
        "content": "<p>in RA we have <code>Ty::Unknown</code>, but I don't know if that makes sense in chalk</p>",
        "id": 160606017,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552421863
    },
    {
        "content": "<p>I don't see why not</p>",
        "id": 160606026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552421877
    },
    {
        "content": "<p>this probably could be just a fresh inference variant though?</p>",
        "id": 160606083,
        "sender_full_name": "matklad",
        "timestamp": 1552421897
    },
    {
        "content": "<p>yeah so I'm debating a bit</p>",
        "id": 160606091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552421906
    },
    {
        "content": "<p>like, ErrorType is more or less <code>unimplemented!</code></p>",
        "id": 160606096,
        "sender_full_name": "matklad",
        "timestamp": 1552421911
    },
    {
        "content": "<p>at some level you'll have to represent errors</p>",
        "id": 160606099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552421915
    },
    {
        "content": "<p>it might be that you can 'lower' them into uses of inference variables etc <em>but</em></p>",
        "id": 160606113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552421928
    },
    {
        "content": "<p>I am wary</p>",
        "id": 160606115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552421930
    },
    {
        "content": "<p>because of spurious errors?</p>",
        "id": 160606140,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552421951
    },
    {
        "content": "<p>I've found that trying to \"model\" errors as \"normal things\" leads to complications later and confusing error messages</p>",
        "id": 160606142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552421953
    },
    {
        "content": "<p>yeah, it's rare that it's a <em>perfect fit</em></p>",
        "id": 160606148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552421961
    },
    {
        "content": "<p>I think e.g. it'd be pretty straight-forward to add an error variant to the \"type\"</p>",
        "id": 160606172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552421977
    },
    {
        "content": "<p>we could represent it as inference variables, but with a special tag so we don't report any diagnostics from it?</p>",
        "id": 160606192,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552421995
    },
    {
        "content": "<p>I feel like at that point it'd be better to just have an error variant</p>",
        "id": 160606262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552422018
    },
    {
        "content": "<p>but a more interesting question, perhaps, is how it propagates to the results</p>",
        "id": 160606272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552422031
    },
    {
        "content": "<p>chalk also has a notion of being \"unable to prove\" things</p>",
        "id": 160606283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552422039
    },
    {
        "content": "<p>(i.e., neither true nor false)</p>",
        "id": 160606290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552422048
    },
    {
        "content": "<p>I think with the error variant you'd just have to be careful not to treat two errors as the same type, but I have no idea if that's actually a problem in chalk ;)</p>",
        "id": 160606301,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552422059
    },
    {
        "content": "<p>so it might be that this is a useful thing here -- i.e., if you are asked whether <code>&lt;error&gt; = u32</code>, the answer is <code>¯\\_(ツ)_/¯</code> (which was actually our <code>Debug</code> impl for this \"can't prove\" concept, at least for a time)</p>",
        "id": 160606340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552422087
    },
    {
        "content": "<p>this also comes up with overflow, as it happens</p>",
        "id": 160606418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552422127
    },
    {
        "content": "<p>e.g., if types get too big, we will introduce approximation</p>",
        "id": 160606426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552422139
    },
    {
        "content": "<p>winding up with <code>CannotProve</code> results</p>",
        "id": 160606433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552422146
    },
    {
        "content": "<p>anyway it's a good question and we should experiment with it</p>",
        "id": 160606470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552422179
    },
    {
        "content": "<p>OK, i'm looking over the notes i've been collecting in <a href=\"https://paper.dropbox.com/doc/Chalk-RLS-integration--AZOAaGqTORQAptU93qcCqIuOAg-QCJelXDeaq7GV6jVQln4j\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Chalk-RLS-integration--AZOAaGqTORQAptU93qcCqIuOAg-QCJelXDeaq7GV6jVQln4j\">this paper</a></p>",
        "id": 160606525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552422235
    },
    {
        "content": "<p>Maybe have an enum with error and \"unable to prove\" variants, or something</p>",
        "id": 160606583,
        "sender_full_name": "detrumi",
        "timestamp": 1552422252
    },
    {
        "content": "<p>I've added a few lines, hope you don't mind ;)</p>",
        "id": 160606584,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552422252
    },
    {
        "content": "<p>we've got a number of \"refactorings and questions\", some pointers into the RLS source, and a few notes on the overall flow</p>",
        "id": 160606588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552422256
    },
    {
        "content": "<blockquote>\n<p>I've added a few lines, hope you don't mind ;)</p>\n</blockquote>\n<p>oh please add away :)</p>",
        "id": 160606600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552422262
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> one question about those lines though:</p>\n<blockquote>\n<ul>\n<li>Things to add:<ul>\n<li><code>TraitRef</code> type for resolved traits</li>\n<li>representation of bounds</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>do we want to add those things into the RLS? Or will we just be creating them when chalk asks for them and hence we should use chalk's data structures?</p>",
        "id": 160607020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552422312
    },
    {
        "content": "<p>yeah I wouldn't expect bounds as part of RLS</p>",
        "id": 160607058,
        "sender_full_name": "detrumi",
        "timestamp": 1552422350
    },
    {
        "content": "<p>I think we need to have a 'HIR' for them in RA</p>",
        "id": 160607063,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552422356
    },
    {
        "content": "<p>because we don't want to go back to the AST when chalk asks for them</p>",
        "id": 160607123,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552422380
    },
    {
        "content": "<p>Not sure we need a separate HIR, it could be just a method on ImplBlock</p>",
        "id": 160607145,
        "sender_full_name": "matklad",
        "timestamp": 1552422398
    },
    {
        "content": "<p>yes, and a few enums to represent them</p>",
        "id": 160607180,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552422427
    },
    {
        "content": "<blockquote>\n<p>I think we need to have a 'HIR' for them in RA</p>\n</blockquote>\n<p>I see, ok.</p>",
        "id": 160607181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552422428
    },
    {
        "content": "<p>I'm basically trying to figure out what is a good set of \"next steps\" here. I feel like this is starting to take shape. It</p>",
        "id": 160607200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552422450
    },
    {
        "content": "<p>I've got one thing remaining that's not very clear yet</p>",
        "id": 160607221,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552422470
    },
    {
        "content": "<p>to me ;)</p>",
        "id": 160607228,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552422478
    },
    {
        "content": "<p>which is how queries from RLS to chalk will look</p>",
        "id": 160607280,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552422493
    },
    {
        "content": "<p>I guess the most important one, which we want for completion, is \"impl_ty_trait(Ty, TraitRef) -&gt; bool\"?</p>",
        "id": 160607378,
        "sender_full_name": "matklad",
        "timestamp": 1552422595
    },
    {
        "content": "<p>Wouldn't you want a list of traits that a type implements instead?</p>",
        "id": 160607502,
        "sender_full_name": "detrumi",
        "timestamp": 1552422653
    },
    {
        "content": "<p>trait-ref, in my usage, usually includes the self type</p>",
        "id": 160607503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552422654
    },
    {
        "content": "<p>jfyi</p>",
        "id": 160607505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552422655
    },
    {
        "content": "<p>but yeah I doubt that's the most important one</p>",
        "id": 160607520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552422663
    },
    {
        "content": "<p>for one thing, in the general case, the queries can involve variables, and so the answer you get back is not a bool</p>",
        "id": 160607559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552422686
    },
    {
        "content": "<p>but includes values for the variables etc</p>",
        "id": 160607564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552422691
    },
    {
        "content": "<p>it's more like \"Is that trait implemented for these types and -- if so -- what is an exact substitution\"</p>",
        "id": 160607594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552422708
    },
    {
        "content": "<p>so e.g. you can ask <code>Vec&lt;?T&gt;: Foo</code> and maybe you get back <code>Yes, if ?T = Bar</code></p>",
        "id": 160607611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552422721
    },
    {
        "content": "<p>or <code>No</code> (meaning -- not for <strong>any</strong> values of <code>?T</code>)</p>",
        "id": 160607669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552422737
    },
    {
        "content": "<p>or Maybe (meaning -- for <em>some</em> values of <code>?T</code>, but we couldn't find an unambig answer)</p>",
        "id": 160607689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552422762
    },
    {
        "content": "<p>anyway it's probably a good idea to step back and ask what the RLS would like to ask</p>",
        "id": 160607695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552422769
    },
    {
        "content": "<p>irrespective of how chalk works</p>",
        "id": 160607698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552422772
    },
    {
        "content": "<p>Can it answer <code>Vec&lt;u32&gt;: Foo&lt;?T&gt;</code></p>",
        "id": 160607719,
        "sender_full_name": "matklad",
        "timestamp": 1552422789
    },
    {
        "content": "<p>(i am thinking about code compltion)</p>",
        "id": 160607731,
        "sender_full_name": "matklad",
        "timestamp": 1552422805
    },
    {
        "content": "<p>certainly in rustc's <strong>method resolution</strong> code, we do ask questions kind of like the one <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> posed, where the bool represents kind of \"could this be true, for <strong>some</strong> types\"? so maybe that is a useful one for the RLS</p>",
        "id": 160607740,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552422815
    },
    {
        "content": "<blockquote>\n<p>Wouldn't you want a list of traits that a type implements instead?</p>\n</blockquote>\n<p>my thinking on that is currently that we'd go through all the traits that are in scope and ask whether they're implemented by the type, separately</p>",
        "id": 160607762,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552422830
    },
    {
        "content": "<p>we will know the type precisely, so there shouldn't be <code>?</code> on the left hand side</p>",
        "id": 160607766,
        "sender_full_name": "matklad",
        "timestamp": 1552422834
    },
    {
        "content": "<blockquote>\n<p>Can it answer <code>Vec&lt;u32&gt;: Foo&lt;?T&gt;</code></p>\n</blockquote>\n<p>I'm not sure I follow :)</p>",
        "id": 160607770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552422838
    },
    {
        "content": "<blockquote>\n<p>we will know the type precisely, so there shouldn't be <code>?</code> on the left hand side</p>\n</blockquote>\n<p>why would you know the type precisely?</p>",
        "id": 160607818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552422846
    },
    {
        "content": "<p>I mean a lot of times you won't</p>",
        "id": 160607828,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552422851
    },
    {
        "content": "<p>yeah</p>",
        "id": 160607833,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552422856
    },
    {
        "content": "<p>because there will be inference variables whose result is not known</p>",
        "id": 160607838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552422859
    },
    {
        "content": "<p>code completion runs on fully type-checked code</p>",
        "id": 160607850,
        "sender_full_name": "matklad",
        "timestamp": 1552422873
    },
    {
        "content": "<p>e.g., <code>let mut x = None; x.foo(</code> then <code>x</code> has type <code>Option&lt;?T&gt;</code></p>",
        "id": 160607854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552422875
    },
    {
        "content": "<p>we need the <code>implements</code> query to get that fully type-checked code though ;)</p>",
        "id": 160607881,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552422901
    },
    {
        "content": "<p>yeah</p>",
        "id": 160607904,
        "sender_full_name": "matklad",
        "timestamp": 1552422912
    },
    {
        "content": "<p>so, what I am trying to say that there are two modes for questions</p>",
        "id": 160607917,
        "sender_full_name": "matklad",
        "timestamp": 1552422925
    },
    {
        "content": "<p>questions during type inference (presumably the same as in rustc)</p>",
        "id": 160607933,
        "sender_full_name": "matklad",
        "timestamp": 1552422938
    },
    {
        "content": "<p>questions during completion (might be different)</p>",
        "id": 160607949,
        "sender_full_name": "matklad",
        "timestamp": 1552422951
    },
    {
        "content": "<p>anyway so yeah maybe we take the \"method resolution\" to be the main goal, makes sense, and I think in that case the main interface rustc uses is the \"evaluate\" one, which basically asks whether an impl <em>might</em> exist. I suppose we also have to implement searches around the <code>Deref</code> trait (which is a similar query, ultimately)</p>",
        "id": 160607958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552422958
    },
    {
        "content": "<p>So Chalk has a choice when it finds inconclusive results: it can ask for more type info, or it can just return what it has</p>",
        "id": 160608044,
        "sender_full_name": "detrumi",
        "timestamp": 1552422998
    },
    {
        "content": "<p>(as an aside, moving the method resolution algorithm into shared code is another (long-term) goal of mine)</p>",
        "id": 160608056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423006
    },
    {
        "content": "<blockquote>\n<p>So Chalk has a choice when it finds inconclusive results: it can ask for more type info, or it can just return what it has</p>\n</blockquote>\n<p>presently, no. It always gives back a result. If you want to add more type info, you can formulate another query.</p>",
        "id": 160608084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423025
    },
    {
        "content": "<p>so it's more that you, as the one posing the queries, have a choice :)</p>",
        "id": 160608117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423049
    },
    {
        "content": "<p>Ah right, that's effectively the same</p>",
        "id": 160608154,
        "sender_full_name": "detrumi",
        "timestamp": 1552423075
    },
    {
        "content": "<p>(actually, at the lowest level interface, which probably isn't the one RLS wants but it <em>may</em> be, chalk yields back an iterator of answers, and you can choose whether to keep asking for more)</p>",
        "id": 160608237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423112
    },
    {
        "content": "<p>we then have a wrapper that tries to decide how long it makes sense to keep pulling</p>",
        "id": 160608252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423127
    },
    {
        "content": "<blockquote>\n<p>(as an aside, moving the method resolution algorithm into shared code is another (long-term) goal of mine)</p>\n</blockquote>\n<p>BTW, do we expect to keep type inference inside RLS2, or is it a good occasion to start moving it out?</p>",
        "id": 160608260,
        "sender_full_name": "matklad",
        "timestamp": 1552423140
    },
    {
        "content": "<p>My expectation is that the type checker that is \"invoking\" chalk will always have its own \"type inference context\", basically. Whether that type checker lives in RLS2 or some shared library is another question.</p>",
        "id": 160608342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423201
    },
    {
        "content": "<p>So I guess the question is -- how do we get more precise about the queries we need</p>",
        "id": 160608415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423223
    },
    {
        "content": "<p>maybe we should make our first goal</p>",
        "id": 160608424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423237
    },
    {
        "content": "<p>be integrating with the existing type checker</p>",
        "id": 160608431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423242
    },
    {
        "content": "<p>vs completions -- not sure how different that is</p>",
        "id": 160608438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423250
    },
    {
        "content": "<p>my main point is that the existing type checker, well, <em>exists</em></p>",
        "id": 160608445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423256
    },
    {
        "content": "<p>so we can see the goal as primarily being one of helping it assign types better</p>",
        "id": 160608467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423276
    },
    {
        "content": "<p>for the time being</p>",
        "id": 160608472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423280
    },
    {
        "content": "<p>yeah. I'd game to integrate <em>something</em>, and than see what we need as we go</p>",
        "id": 160608481,
        "sender_full_name": "matklad",
        "timestamp": 1552423286
    },
    {
        "content": "<p>so that means that a good starting point is to kind of enumerate where in the type-checker trait resolution would fit in. The obvious place is method resolution, but there are other spots-- e.g., proving where clauses</p>",
        "id": 160608507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423319
    },
    {
        "content": "<p>I guess that the current type-checker doesn't probably make much effort at doing that since that is <em>mostly</em> useful for finding errors (but not entirely, it can inform inference too)</p>",
        "id": 160608559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423348
    },
    {
        "content": "<p>e.g., <code>fn foo&lt;A, B&gt;(x: A) -&gt; B where A: Deref&lt;Target = B&gt;</code></p>",
        "id": 160608568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423359
    },
    {
        "content": "<p>yeah, proving where-clauses is actually pretty interesting e.g. for chains of iterator methods</p>",
        "id": 160608572,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552423364
    },
    {
        "content": "<p>yep, another great example</p>",
        "id": 160608581,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423376
    },
    {
        "content": "<p>that might be a mildly easier starting point</p>",
        "id": 160608590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423383
    },
    {
        "content": "<p>where-clauses I mean</p>",
        "id": 160608596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423388
    },
    {
        "content": "<p>though really once we have anything working I think integrating more won't be super hard</p>",
        "id": 160608603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423406
    },
    {
        "content": "<p>so the way I had envisioned this working in rustc, and I think it would work the same in RLS</p>",
        "id": 160608612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423415
    },
    {
        "content": "<p>As an \"end goal\", completion &amp; goto def working for iterator chains would be pretty great</p>",
        "id": 160608683,
        "sender_full_name": "matklad",
        "timestamp": 1552423452
    },
    {
        "content": "<p>method resolution feels to me like the more useful starting point though (for iterator chains, we need both anyway)</p>",
        "id": 160608688,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552423458
    },
    {
        "content": "<p>is that we'd have a few queries, sort of like</p>\n<ul>\n<li><code>fn chalk_engine(&amp;self) -&gt; ChalkEngine</code> -- this is a <strong>volatile</strong> query, so it gets recreated every revision<ul>\n<li>it will store the incremental chalk state, which is distinct from salsa's incremental state</li>\n</ul>\n</li>\n<li><code>fn prove(&amp;self, g: CanonicalGoal) -&gt; CanonicalResult</code></li>\n</ul>",
        "id": 160608698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423488
    },
    {
        "content": "<p>a <a href=\"https://rust-lang.github.io/rustc-guide/traits/canonical-queries.html\" target=\"_blank\" title=\"https://rust-lang.github.io/rustc-guide/traits/canonical-queries.html\">\"canonical\" goal</a> is one where the unresolved inference variables have been rewritten</p>",
        "id": 160608721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423508
    },
    {
        "content": "<p>this <a href=\"https://rust-lang.github.io/rustc-guide/traits/canonical-queries.html\" target=\"_blank\" title=\"https://rust-lang.github.io/rustc-guide/traits/canonical-queries.html\">rustc-guide chapter</a> gives more details on that</p>",
        "id": 160608771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423560
    },
    {
        "content": "<p>yeah, the canonicalization is actually another thing I was wondering about -- will RLS need to do that, or can chalk help? I'm not sure if it's even actually complicated to implement</p>",
        "id": 160608822,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552423568
    },
    {
        "content": "<p>anyway, the idea is that <code>prove</code> will -- internally -- access the chalk-engine and pull out enough answers to come up with a conclusion.</p>",
        "id": 160608836,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423580
    },
    {
        "content": "<blockquote>\n<p>yeah, the canonicalization is actually another thing I was wondering about -- will RLS need to do that, or can chalk help? I'm not sure if it's even actually complicated to implement</p>\n</blockquote>\n<p>this is why I keep talking about sharing the repr of types</p>",
        "id": 160608859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423596
    },
    {
        "content": "<p>if we are doing that, then we should be able to share the code chalk uses to do it</p>",
        "id": 160608873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423606
    },
    {
        "content": "<p>not that it's super hard</p>",
        "id": 160608879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423612
    },
    {
        "content": "<p>but it'd be good to share</p>",
        "id": 160608885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423618
    },
    {
        "content": "<blockquote>\n<p>anyway, the idea is that <code>prove</code> will -- internally -- access the chalk-engine and pull out enough answers to come up with a conclusion.</p>\n</blockquote>\n<p>anyway, the type checker's main job then is basically to keep a list of 'unproven things'. It keeps trying to prove. If the attempt <strong>succeeds</strong>, the item can be removed from the list. We also get back some \"substitutions\" we can apply as a result that can help inference along (even an ambiguous result might be able to tell us <em>some</em> things)</p>",
        "id": 160608928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423663
    },
    {
        "content": "<p>I <em>think</em> this is roughly what we did in rustc ;) <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> would remember better</p>",
        "id": 160609009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423708
    },
    {
        "content": "<p>And those substitutions would work on the shared AST?</p>",
        "id": 160609045,
        "sender_full_name": "detrumi",
        "timestamp": 1552423732
    },
    {
        "content": "<p>I could imagine trying to \"mock this up\" in RLS 2.0 to start</p>",
        "id": 160609060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423737
    },
    {
        "content": "<p>perhaps with some hand-coded rules, like .. idk .. <code>Vec&lt;T&gt;: Clone</code> if <code>T: Clone</code></p>",
        "id": 160609086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423752
    },
    {
        "content": "<p>not sure if that's worth the trouble :)</p>",
        "id": 160609095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423758
    },
    {
        "content": "<blockquote>\n<p>And those substitutions would work on the shared AST?</p>\n</blockquote>\n<p>they would apply to the types from the goal -- i.e., if we asked <code>vec::IntoIter&lt;Vec&lt;u32&gt;&gt;: Iterator&lt;Item=?X&gt;</code>, the result might include the substitution <code>?X = u32</code></p>",
        "id": 160609135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423800
    },
    {
        "content": "<p>Do we want to discuss technical details about sharing? Like what code lives where, what do we use instead git-submodules, etc? :)</p>",
        "id": 160609223,
        "sender_full_name": "matklad",
        "timestamp": 1552423836
    },
    {
        "content": "<p>Hmm. I was expecting to publish stuff through <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a>, I guess</p>",
        "id": 160609322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423903
    },
    {
        "content": "<p>but maybe we don't want to do that to start</p>",
        "id": 160609333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423911
    },
    {
        "content": "<p>A plausible first step would be:</p>\n<ul>\n<li>extract a <code>rust_ty</code> crate in the chalk repo with <code>ty</code> repr</li>\n<li>switch RLS to use that via git dependency</li>\n</ul>",
        "id": 160609381,
        "sender_full_name": "matklad",
        "timestamp": 1552423923
    },
    {
        "content": "<p>I'd start with RLS2 using git-deps to depend on (stable) crates of chalk repo</p>",
        "id": 160609426,
        "sender_full_name": "matklad",
        "timestamp": 1552423947
    },
    {
        "content": "<p><a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> seems to be an overhead</p>",
        "id": 160609460,
        "sender_full_name": "matklad",
        "timestamp": 1552423977
    },
    {
        "content": "<p>seems fine</p>",
        "id": 160609490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552423992
    },
    {
        "content": "<p>I'm debating about the idea of starting out by sharing types. I .. kind of like it maybe.</p>",
        "id": 160609503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552424002
    },
    {
        "content": "<p>I don't know about switching RA to using chalk's type representation immediately</p>",
        "id": 160609506,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552424006
    },
    {
        "content": "<p>It's certainly a goal to work towards</p>",
        "id": 160609566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552424039
    },
    {
        "content": "<blockquote>\n<p>I don't know about switching RA to using chalk's type representation immediately</p>\n</blockquote>\n<p>Because that representation could change based on how the RLS is going to use it?</p>",
        "id": 160609665,
        "sender_full_name": "detrumi",
        "timestamp": 1552424099
    },
    {
        "content": "<p>Or because RA's representation is too different?</p>",
        "id": 160609697,
        "sender_full_name": "detrumi",
        "timestamp": 1552424129
    },
    {
        "content": "<p>because it will be a huge change if we try to do it all at once, yes</p>",
        "id": 160609779,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552424174
    },
    {
        "content": "<p>(I actually tried it a bit)</p>",
        "id": 160609791,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552424185
    },
    {
        "content": "<p>yeah, it's probably a good idea to try and dig into that task separately</p>",
        "id": 160609798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552424196
    },
    {
        "content": "<p>I'm going to have to go soon</p>",
        "id": 160609810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552424202
    },
    {
        "content": "<p>but try to break it into some steps</p>",
        "id": 160609817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552424207
    },
    {
        "content": "<p>On the chalk side, I think a good first step is work on refactoring the lowering code</p>",
        "id": 160609833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552424222
    },
    {
        "content": "<p>with an eye towards integration into RLS</p>",
        "id": 160609852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552424228
    },
    {
        "content": "<p>if someone were interested, i'd be interested in trying to collaborate with someone</p>",
        "id": 160609894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552424263
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> what would be the better first-step? Explicit mapping beween all RA types and all chalks types?</p>",
        "id": 160609908,
        "sender_full_name": "matklad",
        "timestamp": 1552424279
    },
    {
        "content": "<p>i.e., I'd like to schedule some pair prog time to start playing with that, then I can go get real busy and not have any time, and that person (or people) can carry on ;)</p>",
        "id": 160609912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552424280
    },
    {
        "content": "<p>I think we need to at least solve the <code>ItemId</code> question before we can share the representation, and to do that it would probably be helpful to first implement it as a conversion, yes</p>",
        "id": 160609969,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552424300
    },
    {
        "content": "<p>my guess would be that the way to do the transition would be</p>",
        "id": 160609990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552424329
    },
    {
        "content": "<p>to first try and refactor the <strong>RLS definition</strong> to be closer to the chalk definition</p>",
        "id": 160610001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552424339
    },
    {
        "content": "<p>bit by bit</p>",
        "id": 160610004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552424340
    },
    {
        "content": "<p>we may encounter challenges along the way</p>",
        "id": 160610016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552424346
    },
    {
        "content": "<p>eventually, if we can get it to be the same, <em>then</em> we can take the dependency</p>",
        "id": 160610028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552424358
    },
    {
        "content": "<p>yeah, that seems good to me</p>",
        "id": 160610034,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552424366
    },
    {
        "content": "<p>one very simple first step there</p>",
        "id": 160610056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552424389
    },
    {
        "content": "<p>the <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/97a87bf3a68338b1acc2b7a02dfa43096bf47e05/crates/ra_hir/src/ty.rs#L23-L27\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/97a87bf3a68338b1acc2b7a02dfa43096bf47e05/crates/ra_hir/src/ty.rs#L23-L27\">rust-analyzer Ty</a> has a ton of variants for things like bool etc (like rustc itself)</p>",
        "id": 160610133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552424412
    },
    {
        "content": "<p>but chalk basically lumps <strong>all</strong> of those together into \"applied\" to an id</p>",
        "id": 160610147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552424427
    },
    {
        "content": "<p>(so e.g. there is an id for <code>bool</code>, which in chalk terms if a \"struct\" :P)</p>",
        "id": 160610155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552424440
    },
    {
        "content": "<p>(that terminology should obviously change)</p>",
        "id": 160610165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552424448
    },
    {
        "content": "<blockquote>\n<p>and that person (or people) can carry on ;)</p>\n</blockquote>\n<p>I personally am stuck with macros for some time, but I definitely will be watching for this :)</p>",
        "id": 160610177,
        "sender_full_name": "matklad",
        "timestamp": 1552424460
    },
    {
        "content": "<p>anyway, but yeah trying to consolidate those variants and make things more uniform</p>",
        "id": 160610184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552424464
    },
    {
        "content": "<p>so, on a meta point</p>",
        "id": 160610206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552424483
    },
    {
        "content": "<p>one thing we've been thinking about in the Traits Working Group</p>",
        "id": 160610208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552424490
    },
    {
        "content": "<p>is that we are going to wind up with kind of \"subworking groups\" that are operating somewhat independently</p>",
        "id": 160610222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552424504
    },
    {
        "content": "<p>this feels like an obvious one</p>",
        "id": 160610225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552424509
    },
    {
        "content": "<p>I'm not saying we actually go \"form a working group\"</p>",
        "id": 160610230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552424515
    },
    {
        "content": "<p>but just thinking that we might want a kind of regular meeting time</p>",
        "id": 160610273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552424523
    },
    {
        "content": "<p>we're getting towards work items here</p>",
        "id": 160610287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552424535
    },
    {
        "content": "<p>I'm compiling some <a href=\"https://paper.dropbox.com/doc/Chalk-RLS-integration--AZOAaGqTORQAptU93qcCqIuOAg-QCJelXDeaq7GV6jVQln4j#:uid=966729034471911231328712&amp;h2=immediate-work-items-and-steps\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Chalk-RLS-integration--AZOAaGqTORQAptU93qcCqIuOAg-QCJelXDeaq7GV6jVQln4j#:uid=966729034471911231328712&amp;h2=immediate-work-items-and-steps\">immediate work items and steps</a> from the rest of the doc</p>",
        "id": 160610492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552424715
    },
    {
        "content": "<p>but maybe that's not useful</p>",
        "id": 160610623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552424799
    },
    {
        "content": "<p>maybe a better way is to put the [ ] work items into the top two sections :)</p>",
        "id": 160610636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552424809
    },
    {
        "content": "<p>(Sorry, I’ve been semi-following the conv since it’s dinner time here) I’d probably be game to do some refactoring on chalk</p>",
        "id": 160610755,
        "sender_full_name": "scalexm",
        "timestamp": 1552424886
    },
    {
        "content": "<p>It would probably be easier than writing code in rustc since I have little time currently, at least I don’t have to deal with rebasing and bors etc</p>",
        "id": 160610807,
        "sender_full_name": "scalexm",
        "timestamp": 1552424928
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> would you be available around (say) 14:00 UTC-04:00 tomorrow? (probably 19:00 your time?)</p>",
        "id": 160610864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552424973
    },
    {
        "content": "<p>19:00 might be hard, 20:00 is better</p>",
        "id": 160610888,
        "sender_full_name": "scalexm",
        "timestamp": 1552424998
    },
    {
        "content": "<p>ok, how about this -- I'll do some experimentation starting earlier, and we'll sync up at 20:00?</p>",
        "id": 160610964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552425035
    },
    {
        "content": "<p>Sounds good!</p>",
        "id": 160610974,
        "sender_full_name": "scalexm",
        "timestamp": 1552425043
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> by everyone!</p>\n<p>Thanks for organizing convo <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> , its very helpful!</p>",
        "id": 160611056,
        "sender_full_name": "matklad",
        "timestamp": 1552425118
    },
    {
        "content": "<p>Yes, this was great. <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> Thanks all.</p>",
        "id": 160611115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552425136
    },
    {
        "content": "<blockquote>\n<p>is that we are going to wind up with kind of \"subworking groups\" that are operating somewhat independently</p>\n</blockquote>\n<p>to continue along this vein -- maybe we should make a Zulip steam like <code>t-compiler/wg-rls-2.0/chalk</code>?</p>",
        "id": 160611282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552425269
    },
    {
        "content": "<p>I wanted to call it \"rls 2.0 <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> chalk\", but I'm not sure if stream names can have emojis</p>",
        "id": 160611316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552425300
    },
    {
        "content": "<p>I guess I could test it :)</p>",
        "id": 160611333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552425307
    },
    {
        "content": "<p>I'd like to contribute, but I'm not sure what to work on since I'm not too familiar with RA/Chalk yet. Maybe the Ids?</p>",
        "id": 160612304,
        "sender_full_name": "detrumi",
        "timestamp": 1552425985
    },
    {
        "content": "<p>The \"refactor to match\" would probably change Chalk's single Id type to separate Ids like RA, right?</p>",
        "id": 160612390,
        "sender_full_name": "detrumi",
        "timestamp": 1552426063
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> actually I wanted to ping you</p>",
        "id": 160612500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552426146
    },
    {
        "content": "<p>I think the ids would be a great choice, yes</p>",
        "id": 160612520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552426155
    },
    {
        "content": "<blockquote>\n<p>I guess I could test it :)</p>\n</blockquote>\n<p>tested..emojis don't work</p>",
        "id": 160612671,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552426239
    },
    {
        "content": "<p>Please don't add that to the Zulip feature wishlist, I fear they won't take us seriously any more <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 160612906,
        "sender_full_name": "detrumi",
        "timestamp": 1552426436
    },
    {
        "content": "<blockquote>\n<p>to continue along this vein -- maybe we should make a Zulip steam like <code>t-compiler/wg-rls-2.0/chalk</code>?</p>\n</blockquote>\n<p>I'm going to make it -- if for no other reason than that it will make it easier for me to respond to people who are talking about the chalk integration plan :)</p>",
        "id": 160617251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552430204
    }
]