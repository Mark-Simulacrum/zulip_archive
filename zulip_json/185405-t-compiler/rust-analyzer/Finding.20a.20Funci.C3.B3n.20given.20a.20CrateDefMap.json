[
    {
        "content": "<p>A related question I also had was given a CrateDefMap and a path to a function. How would I get the data and the body of that function?</p>\n<p>An example I had in mind was:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"w\">      </span><span class=\"k\">fn</span> <span class=\"nf\">a</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_j</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">     </span><span class=\"k\">fn</span> <span class=\"nf\">b</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I have a crateDefMap structure and I know the path to <code>a</code> is <code>foo::a</code> . Is there a way to recover the data on <code>a</code> such as it's visibility and it's content such as the let statement?</p>",
        "id": 221363970,
        "sender_full_name": "kev",
        "timestamp": 1609527567
    },
    {
        "content": "<hr>\n<p>Oh so this is related because I was following the logic of the DefCollector which calls the ModCollector.</p>\n<p>The ModCollector finds a function here: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_def/src/nameres/collector.rs#L1042\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_def/src/nameres/collector.rs#L1042</a></p>\n<p>and extracts a DefData object from the found function. I noticed, the DefData object has the function name.</p>\n<p>This line is then called: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_def/src/nameres/collector.rs#L1168\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_def/src/nameres/collector.rs#L1168</a></p>\n<p>Where the FunctionID is added to the module ItemScope(L1169), then the visibility is resolved relative to the module the function was defined in(L1170-1174) then on L115-1179 we update the namespaces, but I'm not too sure what is exactly happening here with the GlobImports types and ItemScope types.</p>",
        "id": 221364555,
        "sender_full_name": "kev",
        "timestamp": 1609528417
    },
    {
        "content": "<p><code>CrateDefMap</code> has a <code>resolve_path</code> function that you could use for this, but it's unlikely to be the right thing to use</p>",
        "id": 221364608,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1609528464
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Finding.20a.20Funci.C3.B3n.20given.20a.20CrateDefMap/near/221364608\">said</a>:</p>\n<blockquote>\n<p><code>CrateDefMap</code> has a <code>resolve_path</code> function that you could use for this, but it's unlikely to be the right thing to use</p>\n</blockquote>\n<p>Is it because we no longer will need the function names once the DefMap is constructed?</p>",
        "id": 221364763,
        "sender_full_name": "kev",
        "timestamp": 1609528745
    },
    {
        "content": "<p>it just kind of depends on where that path actually comes from</p>",
        "id": 221364887,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1609528965
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369769\">kev</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Finding.20a.20Funci.C3.B3n.20given.20a.20CrateDefMap/near/221364763\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Finding.20a.20Funci.C3.B3n.20given.20a.20CrateDefMap/near/221364608\">said</a>:</p>\n<blockquote>\n<p><code>CrateDefMap</code> has a <code>resolve_path</code> function that you could use for this, but it's unlikely to be the right thing to use</p>\n</blockquote>\n<p>Is it because we no longer will need the function names once the DefMap is constructed?</p>\n</blockquote>\n<p>For example, given:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">hello</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">world</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">world</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Since <code>hello</code> calls <code>world</code> when I go to resolve <code>hello</code> I would need some way to access <code>world</code> wherever it is. I thought that this would be via it's name unless we somehow know the FunctionID for <code>world</code> when we are resolving <code>hello</code></p>",
        "id": 221364889,
        "sender_full_name": "kev",
        "timestamp": 1609528975
    },
    {
        "content": "<p>resolving <code>world</code> in that situation happens through a <code>Resolver</code>, which uses the <code>CrateDefMap</code> but also handles stuff like generics, local bindings etc.</p>",
        "id": 221365026,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1609529244
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Finding.20a.20Funci.C3.B3n.20given.20a.20CrateDefMap/near/221365026\">said</a>:</p>\n<blockquote>\n<p>resolving <code>world</code> in that situation happens through a <code>Resolver</code>, which uses the <code>CrateDefMap</code> but also handles stuff like generics, local bindings etc.</p>\n</blockquote>\n<p>Oh I see, I guess since they are both from the same module, this can be resolved quite easily using the ItemScope which has a HashMap from Name to ModuleDefID.</p>\n<p>If they are not in the same module, then I guess since there is also a HashMap linking ModuleNames to ModuleIDs then that case is also fine.</p>\n<p>If they are not in the same Crate, then I guess you can look into the <code>extern_prelude</code> which has the CrateName and the ModuleDefId which would the FunctionID. From the CrateName you can get the CrateID and subsequently the CrateMap for that Crate.</p>\n<p>Is this correct?</p>",
        "id": 221365307,
        "sender_full_name": "kev",
        "timestamp": 1609529664
    },
    {
        "content": "<p>that's roughly what's happening. See the <code>resolve_path_fp_with_macro</code> function, which does the actual work of resolving paths using the CrateDefMap</p>",
        "id": 221365520,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1609530013
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Finding.20a.20Funci.C3.B3n.20given.20a.20CrateDefMap/near/221365520\">said</a>:</p>\n<blockquote>\n<p>that's roughly what's happening. See the <code>resolve_path_fp_with_macro</code> function, which does the actual work of resolving paths using the CrateDefMap</p>\n</blockquote>\n<p>Ah okay thanks for the help, still debugging <code>resolve_path_fp_with_macro</code> with a test case to see how it works, I think my initial confusion has been cleared. Thank you</p>",
        "id": 221365828,
        "sender_full_name": "kev",
        "timestamp": 1609530506
    }
]