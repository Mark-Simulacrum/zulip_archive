[
    {
        "content": "<p>Hi all, sorry if this is the wrong place to post this, but I've been working on this issue <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/9457\">https://github.com/rust-analyzer/rust-analyzer/issues/9457</a>. (adding of an unnecessary else diagnostic).</p>\n<p>I'm slightly stuck on an implementation detail, namely, I'm not sure how to check for a <code>return</code> in the <code>then_branch: ExprId</code> field after destructuring an <code>Expr::If</code> from the body expression. Is there an existing method to extract the body expression of the <code>then_branch</code> or would a better approach be necessary?</p>",
        "id": 244835575,
        "sender_full_name": "Tedmund Ho",
        "timestamp": 1625365339
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/tEf9tLiU7B2Ez5J-gP7q5f2N/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/tEf9tLiU7B2Ez5J-gP7q5f2N/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/tEf9tLiU7B2Ez5J-gP7q5f2N/image.png\"></a></div><p>I'm looking at possible changes to this validation function, but am stuck in the actual new <code>check_for_unnecessary_else</code> function I'm trying to implement.</p>",
        "id": 244835714,
        "sender_full_name": "Tedmund Ho",
        "timestamp": 1625365638
    },
    {
        "content": "<p>I <em>think</em> looking at the type of <code>then_branch</code> should help, as it should be <code>!</code> (cc <span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span> , I think the work you did on tail expressions might intersect with this?)</p>",
        "id": 244851130,
        "sender_full_name": "matklad",
        "timestamp": 1625391620
    },
    {
        "content": "<p>I don't think looking at the type would work. Since the type of the block is of the last expression and usually that doesn't exist since the tail return is a statement, so that would evaluate to <code>()</code> if I'm not mistaken?</p>",
        "id": 244853109,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1625395084
    },
    {
        "content": "<p>So ye I think the tail walking logic would help out here, basically just walk the tail expression or tail statement if no expression exists and check that all tails returned are returns or breaks basically.</p>",
        "id": 244853141,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1625395145
    },
    {
        "content": "<p>&lt;<a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/108b56f354f1f5647bdaa229100bef11aae4e464/crates/ide_db/src/helpers.rs#L212-L319\">https://github.com/rust-analyzer/rust-analyzer/blob/108b56f354f1f5647bdaa229100bef11aae4e464/crates/ide_db/src/helpers.rs#L212-L319</a>&gt; You can use this to walk the tail expressions, though you will have to move this to some other place as <code>ide_db</code> isnt a dependency of <code>hir_ty</code></p>",
        "id": 244853191,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1625395210
    },
    {
        "content": "<p>That can probably be moved to <code>syntax/src/ast/node_ext.rs</code></p>",
        "id": 244853207,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1625395268
    },
    {
        "content": "<p>you shouldn't try to determine whether the block diverges in a diagnostic, we do that during type inference</p>",
        "id": 244853563,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1625395875
    },
    {
        "content": "<p>we can add that to the inference result</p>",
        "id": 244853565,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1625395895
    },
    {
        "content": "<p>add a new map <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/108b56f354f1f5647bdaa229100bef11aae4e464/crates/hir_ty/src/infer.rs#L149\">here</a>, move <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/108b56f354f1f5647bdaa229100bef11aae4e464/crates/hir_ty/src/infer/expr.rs#L38-L41\">this</a> into <code>infer_expr_inner</code> <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/108b56f354f1f5647bdaa229100bef11aae4e464/crates/hir_ty/src/infer/expr.rs#L806\">here</a>, and write <code>self.diverges</code> into the new map after that in the end of <code>infer_expr_inner</code></p>",
        "id": 244853700,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1625396136
    },
    {
        "content": "<p>finally add a <code>expr_diverges</code> (probably just returning bool) analogous to <code>type_of_expr</code> to <code>Semantics</code></p>",
        "id": 244853814,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1625396329
    },
    {
        "content": "<p>well, if you're implementing it in <code>hir_ty</code> you don't need the <code>Semantics</code> change, though I don't think diagnostics like that (or like <code>ReplaceFilterMapNextWithFindMap</code>) should live there</p>",
        "id": 244853907,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1625396455
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> sorry but could you break down how checking if an expression 'diverges' is relevant for the implementation? Unfortunately I'm not very familiar with the terminologies used, nor seem to be able to find much mention of it in the guide/comments.</p>",
        "id": 244855526,
        "sender_full_name": "Tedmund Ho",
        "timestamp": 1625398813
    },
    {
        "content": "<p>'diverges' means it doesn't reach the end normally, so \"the then-block always diverges\" is exactly the condition you need for the diagnostic</p>",
        "id": 244855557,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1625398901
    },
    {
        "content": "<p>(the block could diverge because it has a <code>return</code> statement, but also e.g. because it unconditionally calls <code>panic!</code>)</p>",
        "id": 244855606,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1625398962
    },
    {
        "content": "<p>Oh, I see, thanks for the explanation!</p>",
        "id": 244855912,
        "sender_full_name": "Tedmund Ho",
        "timestamp": 1625399480
    },
    {
        "content": "<p>Hello, I've stumbled upon another slight confusion with regards to some definitions;</p>\n<p>In the current type inference implementation, it seems that an <code>Expr::If</code> is evaluated to have diverged if either the condition diverges or <em>both</em> arms diverge. (<a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/e5c1c8cf2fcfae3e15c8bcf5256e84cad3bd3436/crates/hir_ty/src/infer/expr.rs#L149\">https://github.com/rust-analyzer/rust-analyzer/blob/e5c1c8cf2fcfae3e15c8bcf5256e84cad3bd3436/crates/hir_ty/src/infer/expr.rs#L149</a>)</p>\n<p>This means that the example in the <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/9457\">original issue</a> would actually be treated as not having diverged (i.e. <code>Diverges::Maybe</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\">  </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">do_something_else</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but this would be treated as having diverged (i.e. <code>Diverges::Always</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\">  </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">do_something_else</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I've written some small tests to verify this and it seems like this may be the case. Is this the intended behaviour?</p>",
        "id": 244890211,
        "sender_full_name": "Tedmund Ho",
        "timestamp": 1625454848
    },
    {
        "content": "<p>That's the whole if. You want to look at the then branch.</p>",
        "id": 244890931,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1625456002
    }
]