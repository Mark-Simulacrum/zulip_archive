[
    {
        "content": "<p>I'd be interested in working on <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/3750\">https://github.com/rust-analyzer/rust-analyzer/issues/3750</a> aka shortening iterator type hints, but frankly speaking I'm missing quite a lot of knowledge when it comes to working with the hirdb. How would I  go about actually checking if a type implements the Iterator trait and how would I find the iterator trait in the first place as it is no lang item?</p>",
        "id": 211916688,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1601561728
    },
    {
        "content": "<p>I cannot help you with the original question alas, but would like to warn you that testing this feature might be hard: RA does not use stdlib in its regular tests, so there will be no Iterator trait and related.</p>",
        "id": 212044288,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1601626059
    },
    {
        "content": "<p>Ye that I know as well, so I figured using crate names in the tests via the comment annotations but those seem to break the inlay hints for some reason.</p>",
        "id": 212044458,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1601626171
    },
    {
        "content": "<p>It's hard to say what's broken without seeing the test code, but if you decided to emulate the actual Iterator trait this way, this might be very hard, see <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/5997#issuecomment-694173448\">https://github.com/rust-analyzer/rust-analyzer/pull/5997#issuecomment-694173448</a></p>",
        "id": 212045869,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1601627104
    },
    {
        "content": "<p>Ah I see that makes sense, well with broken I meant type resolution just completely failed when I tried using the comment annotation syntax.</p>",
        "id": 212046593,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1601627572
    },
    {
        "content": "<p>I'm tackling this once more and got the test structure to not fail type resolution for me now( I imagine I just made a few dumb mistakes before), and now I have both the struct to check whether it implements Iterator and the Iterator trait itself. But the question is still there as to how to check if the struct implements said trait and if it does figure out what the the impl's <code>Item</code> type is. <code>Type::impls_trait</code> doesn't really work as I don't know the <code>Item</code> associated type's type.</p>",
        "id": 212429983,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1601992204
    },
    {
        "content": "<p>I imagine to do this one would require things that aren't exposed directly atm, similar to how <code>Type::impls_future</code> works? But even then that would only help in figuring out if it implements the trait, that still leaves the task of figuring out the item type.</p>",
        "id": 212430331,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1601992386
    },
    {
        "content": "<p><code>Type::impls_trait</code> should work to check whether the type implements <code>Iterator</code>. Normalizing the associated type would be a separate step. We could add a method to <code>Type</code> that takes a <code>TypeAlias</code> (and <code>&amp;[Type]</code> for potential type parameters for the trait) and does the normalization, it'd look pretty similar to <code>impls_trait</code> except it'd use <code>Obligation::Projection</code></p>",
        "id": 212431096,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1601992706
    },
    {
        "content": "<blockquote>\n<p>Type::impls_trait should work to check whether the type implements Iterator</p>\n</blockquote>\n<p>Ah okay you are right this works, my specific test case didn't seem to work due to how function pointer types work(looks like <code>fn foo() -&gt; Option&lt;i32&gt;</code> is not considered equal with the type arg <code>fn() -&gt; Option&lt;i32&gt;</code>)</p>",
        "id": 212432455,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1601993289
    },
    {
        "content": "<p>yes, those are different types</p>",
        "id": 212435875,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1601994628
    },
    {
        "content": "<p>(every function has its own type; which is not the same as the function pointer type, but can be coerced to that)</p>",
        "id": 212436647,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1601994950
    },
    {
        "content": "<p>That they are different types I knew, but I thought the coercion would allow the impl to work <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> Well not that it matters.</p>",
        "id": 212438803,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1601995825
    },
    {
        "content": "<p>Im having trouble understanding how to use the ProjectionPredicate now tho:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">normalize_trait_assoc_type</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">db</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">HirDatabase</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">trait_</span>: <span class=\"nc\">Trait</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">args</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">alias</span>: <span class=\"nc\">TypeAlias</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Substs</span>::<span class=\"n\">build_for_def</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">trait_</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">fill</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">t</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">()))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">predicate</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ProjectionPredicate</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">projection_ty</span>: <span class=\"nc\">ProjectionTy</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">associated_ty</span>: <span class=\"nc\">alias</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">parameters</span>: <span class=\"nc\">subst</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">ty</span>: <span class=\"o\">&lt;---</span><span class=\"w\"> </span><span class=\"o\">???</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Canonical</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">value</span>: <span class=\"nc\">hir_ty</span>::<span class=\"n\">InEnvironment</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">environment</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">hir_ty</span>::<span class=\"n\">Obligation</span>::<span class=\"n\">Projection</span><span class=\"p\">(</span><span class=\"n\">predicate</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">kinds</span>: <span class=\"nc\">Arc</span>::<span class=\"n\">new</span><span class=\"p\">([]),</span><span class=\"w\"> </span><span class=\"o\">&lt;---</span><span class=\"w\"> </span><span class=\"o\">???</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">trait_solve</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">krate</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">goal</span><span class=\"p\">).</span><span class=\"n\">is_some</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>This is what I roughly have, I think I got most of it right but there are two parts Im uncertain about/I dont really understand what to do with them( annotated with <code>&lt;---</code>)</p>",
        "id": 212438947,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1601995898
    },
    {
        "content": "<p>nope, coercions only apply in certain places where the target type is known <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 212438967,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1601995908
    },
    {
        "content": "<p>Tried to understand it better by looking at other places that use the ProjectionPredicate but that didn't help too much. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 212439320,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1601996052
    },
    {
        "content": "<p>ah yeah, what you need is to put a variable into the <code>ty</code> so that you get as an answer what the normalized type is. So I think that would need to be <code>Ty::Bound(BoundVar::new(DebruijnIndex::INNERMOST, 0))</code>. And then <code>kinds</code> defines what kind of variable that is, so you need one element there with <code>TyKind::General</code></p>",
        "id": 212439441,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1601996105
    },
    {
        "content": "<p>Ah perfect this seems to work, I had the <code>BoundVar</code> part before but ended up with an oob panic probably cause I was missing the <code>kinds</code> var. Thanks a lot <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 212440667,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1601996597
    }
]