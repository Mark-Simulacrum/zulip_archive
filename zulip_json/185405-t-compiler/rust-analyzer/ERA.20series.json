[
    {
        "content": "<p>Hey, I've recorded a couple of \"real\" explaining rust-analyzer videos!</p>",
        "id": 246260958,
        "sender_full_name": "matklad",
        "timestamp": 1626459886
    },
    {
        "content": "<p>Here's the playlist: <a href=\"https://www.youtube.com/playlist?list=PLhb66M_x9UmrqXhQuIpWC5VgTdrGxMx3y\">https://www.youtube.com/playlist?list=PLhb66M_x9UmrqXhQuIpWC5VgTdrGxMx3y</a></p>\n<p>First two videos are:</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=I3RXottNwk0&amp;list=PLhb66M_x9UmrqXhQuIpWC5VgTdrGxMx3y\">overview</a><div class=\"youtube-video message_inline_image\"><a data-id=\"I3RXottNwk0\" href=\"https://www.youtube.com/watch?v=I3RXottNwk0&amp;list=PLhb66M_x9UmrqXhQuIpWC5VgTdrGxMx3y\"><img src=\"https://uploads.zulipusercontent.net/7f9d3cdaa9eeee980c487335df26800eca0b1e9c/68747470733a2f2f692e7974696d672e636f6d2f76692f493352586f74744e776b302f64656661756c742e6a7067\"></a></div></li>\n<li><a href=\"https://www.youtube.com/watch?v=SaSULKoSlWI&amp;list=PLhb66M_x9UmrqXhQuIpWC5VgTdrGxMx3y\">vfs</a><div class=\"youtube-video message_inline_image\"><a data-id=\"SaSULKoSlWI\" href=\"https://www.youtube.com/watch?v=SaSULKoSlWI&amp;list=PLhb66M_x9UmrqXhQuIpWC5VgTdrGxMx3y\"><img src=\"https://uploads.zulipusercontent.net/956c71ab01d5d52cb23aa5ddde20ddff0334fe02/68747470733a2f2f692e7974696d672e636f6d2f76692f536153554c4b6f536c57492f64656661756c742e6a7067\"></a></div></li>\n</ul>",
        "id": 246261248,
        "sender_full_name": "matklad",
        "timestamp": 1626460054
    },
    {
        "content": "<p>I wonder how long that playlist will be in hours in the end given how big RA is <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 246279894,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1626469718
    },
    {
        "content": "<p>New video: the IDE crate: <a href=\"https://www.youtube.com/watch?v=5l31PsZJ2Cc\">https://www.youtube.com/watch?v=5l31PsZJ2Cc</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"5l31PsZJ2Cc\" href=\"https://www.youtube.com/watch?v=5l31PsZJ2Cc\"><img src=\"https://uploads.zulipusercontent.net/6c31b67d587f5ca08e4cc871b2b089892b1c4196/68747470733a2f2f692e7974696d672e636f6d2f76692f356c333150735a4a3243632f64656661756c742e6a7067\"></a></div>",
        "id": 246379402,
        "sender_full_name": "matklad",
        "timestamp": 1626615665
    },
    {
        "content": "<p>I really like your desktop background.</p>",
        "id": 246381034,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1626617864
    },
    {
        "content": "<p>New video: the main loop: <a href=\"https://www.youtube.com/watch?v=bfE_ZVDLHmo\">https://www.youtube.com/watch?v=bfE_ZVDLHmo</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"bfE_ZVDLHmo\" href=\"https://www.youtube.com/watch?v=bfE_ZVDLHmo\"><img src=\"https://uploads.zulipusercontent.net/d5dccd2a3c86941894788ab6f0ab6fc1f608270b/68747470733a2f2f692e7974696d672e636f6d2f76692f6266455f5a56444c486d6f2f64656661756c742e6a7067\"></a></div>",
        "id": 246510133,
        "sender_full_name": "matklad",
        "timestamp": 1626726831
    },
    {
        "content": "<p>Next video: the crate graph: <a href=\"https://www.youtube.com/watch?v=STiKE1ES2fQ\">https://www.youtube.com/watch?v=STiKE1ES2fQ</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"STiKE1ES2fQ\" href=\"https://www.youtube.com/watch?v=STiKE1ES2fQ\"><img src=\"https://uploads.zulipusercontent.net/251aa2ef7382a08c3d25225ab91e5cc1394cca35/68747470733a2f2f692e7974696d672e636f6d2f76692f5354694b453145533266512f64656661756c742e6a7067\"></a></div>",
        "id": 246643851,
        "sender_full_name": "matklad",
        "timestamp": 1626812334
    },
    {
        "content": "<p>I've been watching this series for a while.I'd like to know if it makes sense to share my own notes from the videos with others. These notes are my own interpretation of the content and include a summary of the important points in the video.</p>",
        "id": 246763430,
        "sender_full_name": "Mahdi Faramarzpour",
        "timestamp": 1626893898
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"424024\">@Mahdi Faramarzpour</span> most definitely! I bet it'll be useful to someone!</p>",
        "id": 246833673,
        "sender_full_name": "matklad",
        "timestamp": 1626952524
    },
    {
        "content": "<p>So how should I do that?<br>\nI can prepare them as .md files, but where should I post them?</p>",
        "id": 246834554,
        "sender_full_name": "Mahdi Faramarzpour",
        "timestamp": 1626953329
    },
    {
        "content": "<p>I suggest using this stream as a point of coordination. </p>\n<p>I guess, keeping them in some kind of a repo might be smart as well -- maybe other folks would want to expand on notes</p>",
        "id": 246834611,
        "sender_full_name": "matklad",
        "timestamp": 1626953402
    },
    {
        "content": "<p><a href=\"https://github.com/mahdi-frms/rust-analyzer-notes\">https://github.com/mahdi-frms/rust-analyzer-notes</a></p>",
        "id": 246849271,
        "sender_full_name": "Mahdi Faramarzpour",
        "timestamp": 1626961897
    },
    {
        "content": "<p>Next video: the base database: <a href=\"https://youtu.be/m1EXCpIHSKA\">https://youtu.be/m1EXCpIHSKA</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"m1EXCpIHSKA\" href=\"https://youtu.be/m1EXCpIHSKA\"><img src=\"https://uploads.zulipusercontent.net/5699aeb43f67ce1a8511dcc1b92a85e3b8fa9a3a/68747470733a2f2f692e7974696d672e636f6d2f76692f6d31455843704948534b412f64656661756c742e6a7067\"></a></div>",
        "id": 247023928,
        "sender_full_name": "matklad",
        "timestamp": 1627069949
    },
    {
        "content": "<p>27:00 it's embarrassing when your software is so fast that you can't even show that big-O algorithmic improvement leads to faster code.</p>",
        "id": 247024801,
        "sender_full_name": "matklad",
        "timestamp": 1627070453
    },
    {
        "content": "<p>I've got a question about VFS lecture...<br>\nThree reasons were provided in this video for using a vfs rather than the OS filesystem, one being the repeatable read property.<br>\nThe idea is, Rust Analyzer needs more memory than a compiler. For that, it tends to forget about the derived data.<br>\nSo I open a file in a library crate for a 'go to definition', and close it. Thus, RA parses it but when I closed the file, RA forgot about the parsing result. Now it was said that if we rely on OS filesystem and we want to get back that derived data, the file might have changed and we'll get inconsistency, which is something I do not get really. What sort of inconsistency? If it has really changed, why do we need that old derived data?</p>",
        "id": 247346004,
        "sender_full_name": "Mahdi Faramarzpour",
        "timestamp": 1627398390
    },
    {
        "content": "<p>Here's a semi-hypothetical example:</p>\n<p>Let's say that file contained a <code>pub struct Foo</code> at line 92. When parsing the file, rust-analyzer will store the fact that there's an entity with name <code>Foo</code> at that line in the index of all names. But, to same memory, it wouldn't store it visibility</p>\n<p>Now, let's say you invoke \"workspace symbol\" functionality, and give <code>Foo</code> as a query. You ask the index about known <code>Foo</code>s and get that one from stdlib back. When displaying results to the user, you want to learn about visibility (to, eg, show a different icon). You then fetch the next of the file, and go to the line 92. This is the point where you need this line to still contain the <code>Foo</code> struct. </p>\n<p>In other words, if we forgot <em>everything</em>, then, yeah, this wouldn't be a problem. However we forget only partially -- we hang onto some derived stuff. And that derived data might become inconsistent.</p>",
        "id": 247347076,
        "sender_full_name": "matklad",
        "timestamp": 1627398843
    },
    {
        "content": "<p>Maybe it's this scenario:</p>\n<ul>\n<li>we're computing a query on file A</li>\n<li>for that, we need to run a query on file B</li>\n<li>we drop some information about file A here</li>\n<li>for the query on B we need to run a query on A</li>\n<li>A changes on disk</li>\n<li>we re-read and, but have an inconsistent view of what's in A</li>\n</ul>",
        "id": 247347383,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1627398972
    },
    {
        "content": "<p>To give a real-life example of this, we generally identify symbols by their positions: \"function <code>foo</code> is the third item in this file\".  We used to have a bug where we didn't persist the results of proc macros. And there was a procc macro, whose output dependend on hash-map iteration order, and thus it generated items in different oreded with different runs.</p>\n<p>So it happened that we looked at the expansion of this macro, marked that we have a function at the third position, then forgot the expansion, then re-calculated expansion (when, eg, we decided to look at the fn body), but there weren't a function at that position</p>",
        "id": 247347474,
        "sender_full_name": "matklad",
        "timestamp": 1627399012
    },
    {
        "content": "<p>So we got a panic for this unwrap:</p>\n<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/3a59b56324db99475ea2027cb94f82785b16ad14/crates/hir_expand/src/ast_id_map.rs#L112\">https://github.com/rust-analyzer/rust-analyzer/blob/3a59b56324db99475ea2027cb94f82785b16ad14/crates/hir_expand/src/ast_id_map.rs#L112</a></p>",
        "id": 247347587,
        "sender_full_name": "matklad",
        "timestamp": 1627399063
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> <span class=\"user-mention\" data-user-id=\"203546\">@Lauren»õiu</span>  thanks for the answers.<br>\nSo that's generally because we partially forget, not totally.</p>",
        "id": 247348595,
        "sender_full_name": "Mahdi Faramarzpour",
        "timestamp": 1627399533
    },
    {
        "content": "<p>We had an issue for compressing the source code (<a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/869\">https://github.com/rust-analyzer/rust-analyzer/issues/869</a>), but I'm not sure what I measured there :(</p>",
        "id": 247349000,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1627399728
    },
    {
        "content": "<p>We're at 638 MB RSS today, despite probably having more code</p>",
        "id": 247349035,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1627399747
    },
    {
        "content": "<p>Next video: syntax overview <a href=\"https://youtu.be/8jryEJRnPfU\">https://youtu.be/8jryEJRnPfU</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"8jryEJRnPfU\" href=\"https://youtu.be/8jryEJRnPfU\"><img src=\"https://uploads.zulipusercontent.net/2a25b9e31877881fb8532b71406ef479c2e8ba64/68747470733a2f2f692e7974696d672e636f6d2f76692f386a7279454a526e5066552f64656661756c742e6a7067\"></a></div>",
        "id": 247382213,
        "sender_full_name": "matklad",
        "timestamp": 1627415499
    },
    {
        "content": "<p>I'm not getting the actual difference between a crate, FileSet and SourceRoot:</p>\n<ul>\n<li>I think SourceRoot is just a FileSet with a boolean flag, right?</li>\n<li>Each file belongs to only one FileSet, thus one SourceRoot, right?</li>\n<li>I thought crates have a one-to-one relation with FileSet/SourceRoots, is that true?</li>\n</ul>\n<p>by crate I mean the nodes in CrateGraph.</p>",
        "id": 247783529,
        "sender_full_name": "Mahdi Faramarzpour",
        "timestamp": 1627703349
    },
    {
        "content": "<p>1&amp;2 are correct, 3 is not: a single source root can host many crates</p>",
        "id": 247791189,
        "sender_full_name": "matklad",
        "timestamp": 1627716440
    },
    {
        "content": "<p>in particular, a single cargo package (directory with Cargo.toml) is a single source root, but it contains many crates -- </p>\n<ul>\n<li>src/lib.rs crate</li>\n<li>src/lib.rs  with <code>--test</code> crate</li>\n<li>src/bin/* crates</li>\n<li>examples/* crates</li>\n<li>tests/* crates</li>\n</ul>",
        "id": 247791252,
        "sender_full_name": "matklad",
        "timestamp": 1627716530
    },
    {
        "content": "<p>So, what if I open a whole cargo workspace? (like RA source directory) then all of that becomes one SourceRoot or each package becomes a SourceRoot?</p>",
        "id": 247793262,
        "sender_full_name": "Mahdi Faramarzpour",
        "timestamp": 1627719848
    },
    {
        "content": "<p>eachc packeage becomes a source root</p>",
        "id": 247794498,
        "sender_full_name": "matklad",
        "timestamp": 1627721995
    },
    {
        "content": "<p>and I think for sysroot (libstd, libcore and their deps) we use a single source root</p>",
        "id": 247794561,
        "sender_full_name": "matklad",
        "timestamp": 1627722018
    },
    {
        "content": "<p>Got it now, thanks.</p>",
        "id": 247794670,
        "sender_full_name": "Mahdi Faramarzpour",
        "timestamp": 1627722217
    },
    {
        "content": "<p>question about the base db lecture:<br>\nwhat is the <code>SourceDatabaseExt</code> exposing that the <code>FileLoader</code>is not doing so?</p>",
        "id": 247892079,
        "sender_full_name": "Mahdi Faramarzpour",
        "timestamp": 1627878169
    },
    {
        "content": "<p><code>fn source_root(&amp;self, id: SourceRootId) -&gt; Arc&lt;SourceRoot&gt;</code></p>\n<p>With SdbExt, you can get a list of files in the same source root at the current file. It let's you discover files without knowing their paths. </p>\n<p>In file loader, the only way to get a new file is <code>fn resolve_path(&amp;self, path: AnchoredPath) -&gt; Option&lt;FileId&gt;;</code>, where AnchoredPath is a pair of <code>FileId</code> and  a utf8 path. That is,  to get a FileId, you need to know its path first.</p>",
        "id": 247902230,
        "sender_full_name": "matklad",
        "timestamp": 1627895127
    },
    {
        "content": "<p>My real problem is that I sort of don't understand how you're using the whole thing <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> <br>\nMaybe I should see how Salsa and RootDatabase work.</p>",
        "id": 247904030,
        "sender_full_name": "Mahdi Faramarzpour",
        "timestamp": 1627897057
    },
    {
        "content": "<p>BTW I think that would be good to cover RootDatabase and it's API in the next videos.</p>",
        "id": 247905228,
        "sender_full_name": "Mahdi Faramarzpour",
        "timestamp": 1627898175
    },
    {
        "content": "<p>Next video: got carried away and started implementing rowan from scratch: <a href=\"https://youtu.be/n5LDjWIAByM\">https://youtu.be/n5LDjWIAByM</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"n5LDjWIAByM\" href=\"https://youtu.be/n5LDjWIAByM\"><img src=\"https://uploads.zulipusercontent.net/49e1bd0222b62e2a198c39fea35aab8ef1f7802d/68747470733a2f2f692e7974696d672e636f6d2f76692f6e354c446a57494142794d2f64656661756c742e6a7067\"></a></div>",
        "id": 248626775,
        "sender_full_name": "matklad",
        "timestamp": 1628264350
    },
    {
        "content": "<blockquote>\n<p>got carried away and started implementing rowan from scratch</p>\n</blockquote>\n<p>That would be nice if you could provide us with the code!</p>",
        "id": 248759595,
        "sender_full_name": "Mahdi Faramarzpour",
        "timestamp": 1628411266
    },
    {
        "content": "<p>Next video: ast &amp; syntax pointers <a href=\"https://youtu.be/Qe3sidZQt0c\">https://youtu.be/Qe3sidZQt0c</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"Qe3sidZQt0c\" href=\"https://youtu.be/Qe3sidZQt0c\"><img src=\"https://uploads.zulipusercontent.net/d711ed467ec7d0eeba43ca80118ad198f82d0407/68747470733a2f2f692e7974696d672e636f6d2f76692f5165337369645a517430632f64656661756c742e6a7067\"></a></div>",
        "id": 248780616,
        "sender_full_name": "matklad",
        "timestamp": 1628444405
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> , the pandemic i made a goal to myself to write a C++ frontend in rust, to learn rust and i had finished writing a lot of the lexing and parsing  but now with your recent videos,  I found that writing it in the rowan style is better than the \"correct by construction\" style i was going for. Thanks for all you do :)</p>",
        "id": 248814989,
        "sender_full_name": "Antwan Gaggi",
        "timestamp": 1628495267
    },
    {
        "content": "<p>Next video: looking at the real rowan: <a href=\"https://youtu.be/95REqdGceOg\">https://youtu.be/95REqdGceOg</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"95REqdGceOg\" href=\"https://youtu.be/95REqdGceOg\"><img src=\"https://uploads.zulipusercontent.net/d1dee270fab08674003eb5f48d6e838fb3970dd6/68747470733a2f2f692e7974696d672e636f6d2f76692f3935524571644763654f672f64656661756c742e6a7067\"></a></div>",
        "id": 250339602,
        "sender_full_name": "matklad",
        "timestamp": 1629719090
    },
    {
        "content": "<p>Next video, where we set out to make our green node cache a bit faster only to discover that it was actually buggy: <a href=\"https://youtu.be/bVoHUzswKog\">https://youtu.be/bVoHUzswKog</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"bVoHUzswKog\" href=\"https://youtu.be/bVoHUzswKog\"><img src=\"https://uploads.zulipusercontent.net/ded9083a4da182653438229aa612bad8decd1e79/68747470733a2f2f692e7974696d672e636f6d2f76692f62566f48557a73774b6f672f64656661756c742e6a7067\"></a></div><div class=\"codehilite\"><pre><span></span><code>                                 total        max_live     live\n// Before\nrowan::green::node::GreenNode    11_490_337   2_368_324    2_248_819\nrowan::green::token::GreenToken   5_010_578     996_854      995_180\n\n// After\nrowan::green::node::GreenNode    9_736_627    1_996_919    1_903_262\nrowan::green::token::GreenToken  3_353_833      689_048      687_887\n</code></pre></div>",
        "id": 250362548,
        "sender_full_name": "matklad",
        "timestamp": 1629730276
    },
    {
        "content": "<p>next video:  red trees in rowan: <a href=\"https://youtu.be/Ddx68iKc8To\">https://youtu.be/Ddx68iKc8To</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"Ddx68iKc8To\" href=\"https://youtu.be/Ddx68iKc8To\"><img src=\"https://uploads.zulipusercontent.net/7cff6549cb287b5357156d09d8d8fc5073354e59/68747470733a2f2f692e7974696d672e636f6d2f76692f4464783638694b6338546f2f64656661756c742e6a7067\"></a></div>",
        "id": 251274999,
        "sender_full_name": "matklad",
        "timestamp": 1630349076
    },
    {
        "content": "<p>next video: parser's API <a href=\"https://youtu.be/-9axmeRStVI\">https://youtu.be/-9axmeRStVI</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"-9axmeRStVI\" href=\"https://youtu.be/-9axmeRStVI\"><img src=\"https://uploads.zulipusercontent.net/65289c4766ec56e96962e59e752b7a86fe48eceb/68747470733a2f2f692e7974696d672e636f6d2f76692f2d3961786d6552537456492f64656661756c742e6a7067\"></a></div>",
        "id": 252203904,
        "sender_full_name": "matklad",
        "timestamp": 1630949298
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> when you commented out the handling of tombstone forward parents in <code>parser::event::process</code>, you also commented out <code>forward_parents.push</code>, which is what caused all those tests to fail. I tried making it  panic when it encounters a tombstone forward parent, and it only made one test fail: <code>nameres::tests::incremental::typing_inside_a_function_should_not_invalidate_def_map</code>.  I‚Äôm not sure why only this test triggers this edge case, but it might be worth looking into.</p>",
        "id": 252245584,
        "sender_full_name": "Aramis Razzaghipour",
        "timestamp": 1630984863
    },
    {
        "content": "<p>next video: intro to grammar: <a href=\"https://www.youtube.com/watch?v=8MivuzaKM34\">https://www.youtube.com/watch?v=8MivuzaKM34</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"8MivuzaKM34\" href=\"https://www.youtube.com/watch?v=8MivuzaKM34\"><img src=\"https://uploads.zulipusercontent.net/c621f18f26acc47a824e788c5eee65dbb42c703c/68747470733a2f2f692e7974696d672e636f6d2f76692f384d6976757a614b4d33342f64656661756c742e6a7067\"></a></div>",
        "id": 254071392,
        "sender_full_name": "matklad",
        "timestamp": 1632152805
    },
    {
        "content": "<p>next video: error resilient parsing: <a href=\"https://m.youtube.com/watch?v=0HlrqwLjCxA&amp;list=PLhb66M_x9UmrqXhQuIpWC5VgTdrGxMx3y&amp;index=15\">https://m.youtube.com/watch?v=0HlrqwLjCxA&amp;list=PLhb66M_x9UmrqXhQuIpWC5VgTdrGxMx3y&amp;index=15</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"0HlrqwLjCxA\" href=\"https://m.youtube.com/watch?v=0HlrqwLjCxA&amp;list=PLhb66M_x9UmrqXhQuIpWC5VgTdrGxMx3y&amp;index=15\"><img src=\"https://uploads.zulipusercontent.net/d18cfdfc36ee25fc20f25d5d1fedfdec2f40cdcf/68747470733a2f2f692e7974696d672e636f6d2f76692f30486c7271774c6a4378412f64656661756c742e6a7067\"></a></div>",
        "id": 254101957,
        "sender_full_name": "matklad",
        "timestamp": 1632164969
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249509\">@Aramis Razzaghipour</span> ok, it took me only a day to understand why that <code>if kind != TOMBSTONE</code> is there</p>",
        "id": 254849105,
        "sender_full_name": "matklad",
        "timestamp": 1632584651
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> oh wow, was there a good reason?</p>",
        "id": 254885504,
        "sender_full_name": "Aramis Razzaghipour",
        "timestamp": 1632619083
    },
    {
        "content": "<p>That culminated in <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/10354\">https://github.com/rust-analyzer/rust-analyzer/pull/10354</a></p>\n<p>Basically, the problem is that prasing attributes in expressions is pain in the neck. When we parse attributes in an item, we just give an incomplete marker which contains attrs to the item-parsing code. So, when you parse, eg, fn, you complete that marker and get an fn with attributes. </p>\n<p>We can't do the same for expressions -- by the time we close the expression, we don't yet know if attrs belong to this expressions or to some of its' forward parents: <code>#[attr] expr</code> vs <code>#[attr] expr?</code>.</p>\n<p>So, the original logic for that had <code>undo_completion</code> call. Basically, we parse attrs, than we parse expression, and then we just drop expresison's start and manually shuffle events in the vec to start the expr before attrs. </p>\n<p>The problem with that manual shufflig is that it broke forward parent links. Before shuffling, you had</p>\n<div class=\"codehilite\"><pre><span></span><code>outer_attrs    some_expr    top_expr\n                  +----------^\n</code></pre></div>\n<p>and after you got</p>\n<div class=\"codehilite\"><pre><span></span><code>top_expr    some_expr    TOMBSTONE\n                +----------^\n</code></pre></div>",
        "id": 254913280,
        "sender_full_name": "matklad",
        "timestamp": 1632645717
    },
    {
        "content": "<p>and it was by luck that top_expr ended up <em>before</em> some expr</p>",
        "id": 254913336,
        "sender_full_name": "matklad",
        "timestamp": 1632645743
    },
    {
        "content": "<p>I've changed undo_completion to not shuffle things in place, and to use forward parent links to get the desired tree strucutre (and renamed to <code>extend_to</code>)</p>",
        "id": 254913404,
        "sender_full_name": "matklad",
        "timestamp": 1632645813
    },
    {
        "content": "<p>To be fair, I hate <code>extend_to</code>, I wish we somehow achieved what we need here using only existing APIs....</p>",
        "id": 254913521,
        "sender_full_name": "matklad",
        "timestamp": 1632645934
    },
    {
        "content": "<p>next video: tying rowan and the parser together <a href=\"https://youtu.be/GqdKUNm4lCI\">https://youtu.be/GqdKUNm4lCI</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"GqdKUNm4lCI\" href=\"https://youtu.be/GqdKUNm4lCI\"><img src=\"https://uploads.zulipusercontent.net/22bf27b5cec413a3e81e0cd79405ef190add70d8/68747470733a2f2f692e7974696d672e636f6d2f76692f4771644b554e6d346c43492f64656661756c742e6a7067\"></a></div>",
        "id": 254918675,
        "sender_full_name": "matklad",
        "timestamp": 1632650691
    },
    {
        "content": "<p>thank you for the detailed explanation, that‚Äôs really interesting</p>",
        "id": 254922480,
        "sender_full_name": "Aramis Razzaghipour",
        "timestamp": 1632654293
    },
    {
        "content": "<p>next video: AST &amp; Ungrammar: <a href=\"https://youtu.be/EIXb9mX_o9s\">https://youtu.be/EIXb9mX_o9s</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"EIXb9mX_o9s\" href=\"https://youtu.be/EIXb9mX_o9s\"><img src=\"https://uploads.zulipusercontent.net/29acb6de63048e930ed6b5c188716a3db1590113/68747470733a2f2f692e7974696d672e636f6d2f76692f45495862396d585f6f39732f64656661756c742e6a7067\"></a></div>",
        "id": 255873375,
        "sender_full_name": "matklad",
        "timestamp": 1633183256
    },
    {
        "content": "<p>Hi, I'm trying to understand how the main loop / vfs works. <br>\nOn top of <code>vfs-notify</code> crate file there's a note which says that it's not an ideal implementation, and disabled by default, <code>files_watcher = \"client\"</code> indeed. <br>\nSo, </p>\n<ol>\n<li>Does the <code>GlobalState.loader</code> and all the related code irrelevant in case of vscode and client watcher enabled? </li>\n<li>Same thing with the <code>vfs::loader::Handle / Message</code>. </li>\n</ol>\n<p>Videos are awesome, would be great to have one on the <code>project_model</code> crate and on the <code>fetch_workspaces</code> / <code>switch_workspaces</code> functions you've skipped when talking about the <code>GlobalState</code>.</p>",
        "id": 256438872,
        "sender_full_name": "Maxim Kurnikov",
        "timestamp": 1633536891
    },
    {
        "content": "<p>next video: token trees as macro expansion interface: <a href=\"https://youtu.be/GPyTaoI_x3c\">https://youtu.be/GPyTaoI_x3c</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"GPyTaoI_x3c\" href=\"https://youtu.be/GPyTaoI_x3c\"><img src=\"https://uploads.zulipusercontent.net/d6c4058eaf48d1be8db84cbf699fa1b4e65c9506/68747470733a2f2f692e7974696d672e636f6d2f76692f47507954616f495f7833632f64656661756c742e6a7067\"></a></div>",
        "id": 256971424,
        "sender_full_name": "matklad",
        "timestamp": 1633887412
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"222044\">@Maxim Kurnikov</span> sorry, missed the notification. We indeed try to rely on client implementation for file watching. <em>However</em>, the original \"walk all the files recursively\" we still have to do ourselves.</p>",
        "id": 256972159,
        "sender_full_name": "matklad",
        "timestamp": 1633888126
    },
    {
        "content": "<p>That's actually what I want to have as an API: a thing which gives you a consistent view of the file system, where you don't have to marry watching and traversal yourself.</p>",
        "id": 256972183,
        "sender_full_name": "matklad",
        "timestamp": 1633888168
    },
    {
        "content": "<blockquote>\n<p>Same thing with the vfs::loader::Handle / Message.</p>\n</blockquote>\n<p>These still work even with client watching! What clint tells to us is just that a file has changed. The actual work of loading it's contents into memory is done by us. So the overal flow is like this:</p>\n<ul>\n<li>clint sends <code>DidChangeFIle</code>notification</li>\n<li>We call <code>Handle::invalidate</code> to notify VFS that the file nedes to be reftch</li>\n<li>On the background thread, we re-read the file from disk and send the message with new contet to the main loop.</li>\n<li>In the main loop, we fetch the message and apply the state change.</li>\n</ul>",
        "id": 256972397,
        "sender_full_name": "matklad",
        "timestamp": 1633888351
    },
    {
        "content": "<p>next video: ids, HirFileId and AstIdMap: <a href=\"https://youtu.be/GLUSClU4xnI\">https://youtu.be/GLUSClU4xnI</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"GLUSClU4xnI\" href=\"https://youtu.be/GLUSClU4xnI\"><img src=\"https://uploads.zulipusercontent.net/e25006997e825f9eaafc800de033d2b1a3d10cb8/68747470733a2f2f692e7974696d672e636f6d2f76692f474c5553436c5534786e492f64656661756c742e6a7067\"></a></div>",
        "id": 259798486,
        "sender_full_name": "matklad",
        "timestamp": 1635701034
    },
    {
        "content": "<p>Not a video yet, but a useful bit of context on how salsa and macro expansion mesh up together: <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/IDEs.20vs.20Macros/near/262872190\">https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/IDEs.20vs.20Macros/near/262872190</a></p>",
        "id": 262872848,
        "sender_full_name": "matklad",
        "timestamp": 1638019278
    },
    {
        "content": "<p>next video: ItemTree <a href=\"https://youtu.be/qvIZZf5dmTE\">https://youtu.be/qvIZZf5dmTE</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"qvIZZf5dmTE\" href=\"https://youtu.be/qvIZZf5dmTE\"><img src=\"https://uploads.zulipusercontent.net/4cd67d1a025893dde17c82469b3324d46310c7c3/68747470733a2f2f692e7974696d672e636f6d2f76692f7176495a5a6635646d54452f64656661756c742e6a7067\"></a></div>",
        "id": 262882637,
        "sender_full_name": "matklad",
        "timestamp": 1638032172
    },
    {
        "content": "<p>next video: live coding AstIdMap optimization <a href=\"https://youtu.be/wvEgymUm7cY\">https://youtu.be/wvEgymUm7cY</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"wvEgymUm7cY\" href=\"https://youtu.be/wvEgymUm7cY\"><img src=\"https://uploads.zulipusercontent.net/346d5623371d615988470abc059fe66735c2fc4b/68747470733a2f2f692e7974696d672e636f6d2f76692f77764567796d556d3763592f64656661756c742e6a7067\"></a></div>",
        "id": 262886272,
        "sender_full_name": "matklad",
        "timestamp": 1638037290
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> I'm sorry for offtop, but how do you open this \"Select Runnable\" window in vscode? I tried searching it in google, settings and alike but couldn't find it <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p><a href=\"/user_uploads/4715/ehcg_k7QMbJ02d1PloYJfk7Z/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/ehcg_k7QMbJ02d1PloYJfk7Z/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/ehcg_k7QMbJ02d1PloYJfk7Z/image.png\"></a></div>",
        "id": 264003939,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1638885295
    },
    {
        "content": "<p>F1, Rust Analyzer: Run</p>",
        "id": 264004259,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1638885431
    }
]