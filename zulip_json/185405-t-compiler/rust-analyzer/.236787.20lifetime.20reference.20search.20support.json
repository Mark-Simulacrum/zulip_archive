[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> regarding your <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/6787#pullrequestreview-549151508\">comment</a> for the PR</p>\n<blockquote>\n<p>The search code feels like something that should be done at the hir level, but is done in the IDE instead. I think we should be able to re-use the generic \"find text&amp;resovle\" infrastructure here.</p>\n</blockquote>\n<p>I am unsure what exactly you mean with that, are you referring to the <code>symbol_index</code> infrastructure?</p>\n<p>Regarding the other <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/6787#discussion_r540134215\">comment</a> you propose handling this similar to how <code>NameRef</code>s or <code>Name</code>s are handled in <code>goto_definition</code> and the like if I understood this correctly?</p>",
        "id": 219485051,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607613161
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span> so the way search works is that you only need to implement goto definition.</p>",
        "id": 219485224,
        "sender_full_name": "matklad",
        "timestamp": 1607613229
    },
    {
        "content": "<p>And then the serach should work magially</p>",
        "id": 219485245,
        "sender_full_name": "matklad",
        "timestamp": 1607613238
    },
    {
        "content": "<p>Because the default impl for \"search references to <code>foo</code>\" just lists all the refrences, and checks which of them resolve to <code>foo</code></p>",
        "id": 219485335,
        "sender_full_name": "matklad",
        "timestamp": 1607613266
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ide_db/src/search.rs#L282\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ide_db/src/search.rs#L282</a></p>",
        "id": 219485434,
        "sender_full_name": "matklad",
        "timestamp": 1607613320
    },
    {
        "content": "<p><code>&amp;def == self.def</code> is the main trick</p>",
        "id": 219485459,
        "sender_full_name": "matklad",
        "timestamp": 1607613331
    },
    {
        "content": "<p>So, if <code>NameRefClass::classify</code> works for lifetimes, than search should also work</p>",
        "id": 219485565,
        "sender_full_name": "matklad",
        "timestamp": 1607613364
    },
    {
        "content": "<p>But lifetimes aren't NameRefs, they are solely lifetime tokens nested in various other nodes.</p>",
        "id": 219485810,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607613477
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 219485906,
        "sender_full_name": "matklad",
        "timestamp": 1607613507
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Name =\n  &#39;ident&#39;\n\nNameRef =\n  &#39;ident&#39; | &#39;int_number&#39;\n</code></pre></div>\n<p><a href=\"https://github.com/rust-analyzer/ungrammar/blob/master/rust.ungram#L23-L27\">https://github.com/rust-analyzer/ungrammar/blob/master/rust.ungram#L23-L27</a></p>",
        "id": 219486005,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607613555
    },
    {
        "content": "<p>That's part of why my PR is so big and well, kind of messy to be fair <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 219486086,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607613599
    },
    {
        "content": "<p>Hm, so there are two points here:</p>\n<ul>\n<li>the search should probably still work using the general algorithm for other references</li>\n</ul>",
        "id": 219486172,
        "sender_full_name": "matklad",
        "timestamp": 1607613619
    },
    {
        "content": "<p>But it's unclear if we should extend NameClass and NameRefClass to handle lifetimes...</p>",
        "id": 219486249,
        "sender_full_name": "matklad",
        "timestamp": 1607613651
    },
    {
        "content": "<p>I guess, we can take two paths:</p>\n<ul>\n<li>change the syntax, so that  the tree looks like</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><code>    LABEL@5617..5620\n      NAME@...\n        LIFETIME@5617..5619 &quot;\\&#39;a&quot;\n      COLON@5619..5620 &quot;:&quot;\n</code></pre></div>",
        "id": 219486409,
        "sender_full_name": "matklad",
        "timestamp": 1607613721
    },
    {
        "content": "<p>(which would require distinguising between label definitions and label usages...</p>",
        "id": 219486516,
        "sender_full_name": "matklad",
        "timestamp": 1607613753
    },
    {
        "content": "<p>(ah, we already do that)</p>",
        "id": 219486561,
        "sender_full_name": "matklad",
        "timestamp": 1607613773
    },
    {
        "content": "<ul>\n<li>keep the syntax as is, but change just <code>NameClasss</code></li>\n</ul>",
        "id": 219486648,
        "sender_full_name": "matklad",
        "timestamp": 1607613807
    },
    {
        "content": "<p>That is, adding something like <code>NameRefClass::classify_lifetime</code> in addition to just classify</p>",
        "id": 219486716,
        "sender_full_name": "matklad",
        "timestamp": 1607613835
    },
    {
        "content": "<p>Labels are hygienic by the way, so <code>Name{Ref}</code> seems appropriate</p>",
        "id": 219486930,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607613908
    },
    {
        "content": "<p>Without thinking too much about this, I'd keep lifetimes as a separate syntactic category from names, but treat them the same at the NameClass layer</p>",
        "id": 219487038,
        "sender_full_name": "matklad",
        "timestamp": 1607613952
    },
    {
        "content": "<p>But <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> 's point is a good one, yeah...</p>",
        "id": 219487082,
        "sender_full_name": "matklad",
        "timestamp": 1607613962
    },
    {
        "content": "<p>The intuiton behind NameClass/Ref is \"which you can fine-refernces from/goto definition to\"</p>",
        "id": 219487175,
        "sender_full_name": "matklad",
        "timestamp": 1607613997
    },
    {
        "content": "<p>So there's a bit of type-erasure happening there.</p>",
        "id": 219487195,
        "sender_full_name": "matklad",
        "timestamp": 1607614010
    },
    {
        "content": "<p>I guess, even if we go with ast change, we still need NameClass change, so it makes sense to start with the second approach</p>",
        "id": 219487299,
        "sender_full_name": "matklad",
        "timestamp": 1607614051
    },
    {
        "content": "<p>I have doubts about ast::Name  for lifetimes because, with inline lifetimes (propsed feature) like <code>fn foo(r: &amp;'a str) -&gt; 'a</code> we loose <em>syntactic</em> distinciton between names and name refs for lifetimes anyway.</p>",
        "id": 219487539,
        "sender_full_name": "matklad",
        "timestamp": 1607614126
    },
    {
        "content": "<p>So for now I should just go with the <code>Name{Ref}Class::classify_lifetime</code> approach then? It seems better for now in general to me as well as if the <code>ast::Name{Ref}</code> could as you said be done later on still</p>",
        "id": 219487880,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607614247
    },
    {
        "content": "<p>Yup!</p>",
        "id": 219487958,
        "sender_full_name": "matklad",
        "timestamp": 1607614272
    },
    {
        "content": "<p>You'll need to add those two functions</p>",
        "id": 219487980,
        "sender_full_name": "matklad",
        "timestamp": 1607614281
    },
    {
        "content": "<p>and you need to modify reference search code in places where it does <code>match_ast! { Name | NameRef}</code> to also handle <code>Lifetime</code></p>",
        "id": 219488034,
        "sender_full_name": "matklad",
        "timestamp": 1607614308
    },
    {
        "content": "<p>Just to make sure I got it right, <code>NameClass</code> would be used for(in this case) label/lifetime definitions and <code>NameRefClass</code> for those that well reference labels/lifetimes?</p>",
        "id": 219488311,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607614377
    },
    {
        "content": "<p>Exactly!</p>",
        "id": 219488412,
        "sender_full_name": "matklad",
        "timestamp": 1607614406
    },
    {
        "content": "<p>Aight <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 219488480,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607614438
    },
    {
        "content": "<p>(and in the future with inline lifetimes, we'd have a funky <code>NameClass</code> which stores a bunch of  lifetime references)</p>",
        "id": 219488588,
        "sender_full_name": "matklad",
        "timestamp": 1607614465
    },
    {
        "content": "<p>(we actually should have the same today for patterns like <code>(Some(x), None) | (None, Some(x))</code>. Here, <code>x</code> is a <code>NameClass</code> which is repred by two <code>ast::Name</code>s</p>",
        "id": 219488684,
        "sender_full_name": "matklad",
        "timestamp": 1607614511
    },
    {
        "content": "<p>the fact that we don't do this is a bug, )</p>",
        "id": 219488730,
        "sender_full_name": "matklad",
        "timestamp": 1607614527
    },
    {
        "content": "<p>Oh interesting I never thought about the fact that <code>Or</code> patterns actually introduce a name with multiple definition locations</p>",
        "id": 219489774,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607614979
    },
    {
        "content": "<p>Hm so if I see this right this requires me to add lifetime/label to <code>ide_db::Definition</code> as <code>NameClass</code> has a function to always return such a Definition, would that in turn require me  to represent lifetimes in the <code>hir::code_model</code>?</p>",
        "id": 219514957,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607625403
    },
    {
        "content": "<p>or rather would it be a good idea/is it even possible to represent lifetimes and labels in the code_model there</p>",
        "id": 219515274,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607625542
    },
    {
        "content": "<p>Yes, you'd need to add Definition</p>",
        "id": 219516283,
        "sender_full_name": "matklad",
        "timestamp": 1607626017
    },
    {
        "content": "<p>And adding lifetimes to code model is also something which we should do long-term</p>",
        "id": 219516306,
        "sender_full_name": "matklad",
        "timestamp": 1607626032
    },
    {
        "content": "<p>Then I'll first dig around and see if I can try adding lifetimes to the code model first, touching the hir sounds like a fun task in general as I haven't worked much with it yet. Will follow up with my original PR afterwards then</p>",
        "id": 219525226,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607630154
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 219525404,
        "sender_full_name": "matklad",
        "timestamp": 1607630233
    },
    {
        "content": "<p>What exactly is the different between <code>hir::Ty</code> and <code>hir::TypeRef</code>? Trying to figure out how to I should model <code>Lifetime</code>s in hir by looking at how the rest is modeled but that those two confuse me a bit</p>",
        "id": 219583804,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607680656
    },
    {
        "content": "<p>The main difference is that it's <code>ty::Ty</code> and <code>def::TypeRef</code>.</p>",
        "id": 219584133,
        "sender_full_name": "matklad",
        "timestamp": 1607680859
    },
    {
        "content": "<p><code>Ty</code> is a type. <code>TypeRef</code> is more  like a type \"syntax\", it is undersolved</p>",
        "id": 219584192,
        "sender_full_name": "matklad",
        "timestamp": 1607680901
    },
    {
        "content": "<p>That is, in </p>\n<div class=\"codehilite\"><pre><span></span><code>mod a {\n    struct Foo;\n    fn f(_: Foo) {}\n}\n\nmod b {\n    struct Foo;\n    fn f(_: Foo) {}\n}\n</code></pre></div>",
        "id": 219584294,
        "sender_full_name": "matklad",
        "timestamp": 1607680936
    },
    {
        "content": "<p>The <code>Ty</code>s of two paramers are different</p>",
        "id": 219584305,
        "sender_full_name": "matklad",
        "timestamp": 1607680945
    },
    {
        "content": "<p>But TypeRef's are the same</p>",
        "id": 219584315,
        "sender_full_name": "matklad",
        "timestamp": 1607680954
    },
    {
        "content": "<p>I guess, a short way to say that is:</p>\n<p><code>Ty</code> is a fully-resolved type, <code>TypeRef</code> is an AST for a type syntax node.</p>",
        "id": 219584356,
        "sender_full_name": "matklad",
        "timestamp": 1607680981
    },
    {
        "content": "<p>Yeah. Also, <code>Ty</code> can represent types that can only come up during type inference and can't be written in Rust syntax, e.g. inference variables, function types and lots more</p>",
        "id": 219585377,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1607681687
    },
    {
        "content": "<p>Ah I see now, thanks</p>",
        "id": 219585751,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607681945
    },
    {
        "content": "<p><code>Ty</code> will at some point be completely replaced by Chalk's <code>Ty</code>, though we may have another intermediate form that's like a <code>TypeRef</code> but with resolved names. For lifetimes, I guess we will need to have a <code>LifetimeRef</code> that's just a name, and then a resolved <code>Lifetime</code> that's either <code>Static</code> or <code>Parameter(LifetimeParamId)</code></p>",
        "id": 219585907,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1607682065
    },
    {
        "content": "<p>or maybe we don't need the unresolved form yet</p>",
        "id": 219586140,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1607682192
    },
    {
        "content": "<p>we don't need to worry about the type-system / borrow-checker level representation since we won't get into that before completely moving to the Chalk representation for that</p>",
        "id": 219586309,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1607682275
    },
    {
        "content": "<p>As in integrating lifetimes into <code>Ty</code>?</p>",
        "id": 219586444,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607682372
    },
    {
        "content": "<p>yeah</p>",
        "id": 219586659,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1607682533
    },
    {
        "content": "<p>Alright</p>",
        "id": 219586670,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607682541
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/.236787.20lifetime.20reference.20search.20support/near/219586309\">said</a>:</p>\n<blockquote>\n<p>we don't need to worry about the type-system / borrow-checker level representation since we won't get into that before completely moving to the Chalk representation for that</p>\n</blockquote>",
        "id": 219590101,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607684292
    },
    {
        "content": "<p>I guess this also refer to the TypeBounds and such, as in <code>T: 'a</code>?</p>",
        "id": 219590136,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607684313
    },
    {
        "content": "<p>Yeah</p>",
        "id": 219591670,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1607684927
    },
    {
        "content": "<p>well actually <code>TypeBound</code> is the equivalent of <code>TypeRef</code>, so we'll want to have lifetimes in there at some point, I don't know if it's necessary for your purposes though</p>",
        "id": 219592010,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1607685039
    },
    {
        "content": "<p>if we do it similarly to types, we'll probably want a <code>resolve_lifetime</code> method on <code>Resolver</code> that can then be directly used by the code model stuff</p>",
        "id": 219592992,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1607685604
    },
    {
        "content": "<p>so, the main thing to do actually seems to be adding lifetimes to <code>GenericParams</code>, giving them IDs, and implementing resolution for them in <code>Resolver</code></p>",
        "id": 219593481,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1607685887
    },
    {
        "content": "<p>Alright, pushed a PR with the changes I have for now <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/6818\">https://github.com/rust-analyzer/rust-analyzer/pull/6818</a><br>\nThis doesn't contain <code>Resolver</code> stuff yet as I'll have to see how I'd use that here first</p>",
        "id": 219604329,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607692643
    },
    {
        "content": "<p>So I need to change the <code>SourceMap</code> definition that that GenericDefId returns for the <code>HasChildSource</code> trait, which currently is</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">SourceMap</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ArenaMap</span><span class=\"o\">&lt;</span><span class=\"n\">LocalTypeParamId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Either</span><span class=\"o\">&lt;</span><span class=\"n\">ast</span>::<span class=\"n\">Trait</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ast</span>::<span class=\"n\">TypeParam</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I need this to also support Lifetimes now, but Im unsure how I can manage that since I cannot have a key type for the ArenaMap that represents GenericParameters overall</p>",
        "id": 219769525,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607878468
    },
    {
        "content": "<p>at least not the way they are handled currently</p>",
        "id": 219769535,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607878488
    },
    {
        "content": "<p>Since lifetime and type parameters are stored seperately in two different arenas</p>",
        "id": 219769548,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607878510
    },
    {
        "content": "<p><code>type SourceMap = (ArenaMap&lt;...&gt;, ArenaMap&lt;...&gt;)</code>?</p>",
        "id": 219769560,
        "sender_full_name": "matklad",
        "timestamp": 1607878530
    },
    {
        "content": "<p>probably needs a name as well :D</p>",
        "id": 219769563,
        "sender_full_name": "matklad",
        "timestamp": 1607878543
    },
    {
        "content": "<p>HasChildSource requires its return type to be a single ArenaMap unfortunately</p>",
        "id": 219769572,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607878559
    },
    {
        "content": "<p>which is the problem Im running into <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 219769614,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607878573
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">HasChildSource</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">ChildId</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Value</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">child_source</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">db</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">DefDatabase</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">InFile</span><span class=\"o\">&lt;</span><span class=\"n\">ArenaMap</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">ChildId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Value</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 219769619,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607878582
    },
    {
        "content": "<p>I <em>think</em> this is a non-essential trait</p>",
        "id": 219769653,
        "sender_full_name": "matklad",
        "timestamp": 1607878676
    },
    {
        "content": "<p>Ye Im looking through its usage right now I don't think this impl is really required to exist here</p>",
        "id": 219769698,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607878698
    },
    {
        "content": "<p>in a sense that <code>ChildBySource</code> is the one you need to impl</p>",
        "id": 219769706,
        "sender_full_name": "matklad",
        "timestamp": 1607878708
    },
    {
        "content": "<p>For GenericDefId its sole usage seems to be the <code>ChildBySource</code> yep</p>",
        "id": 219769711,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607878718
    },
    {
        "content": "<p>and <code>HasChildSource</code> should be only a shortcut for that</p>",
        "id": 219769712,
        "sender_full_name": "matklad",
        "timestamp": 1607878719
    },
    {
        "content": "<p>Alright, guess that answers the question <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 219769721,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607878744
    },
    {
        "content": "<p>(tbh, I don't remember how that child source infra is setup exactly. I feel like it could be simplified considerably)</p>",
        "id": 219769725,
        "sender_full_name": "matklad",
        "timestamp": 1607878761
    },
    {
        "content": "<p>But this is also one of the more fun bits of rust-analyzer. The ultimate target of that infra is <code>source_to_def.rs</code> module, and that's the magic that binds IDE and compiler together</p>",
        "id": 219769788,
        "sender_full_name": "matklad",
        "timestamp": 1607878825
    },
    {
        "content": "<p>Aight opened one PR for some hir additions <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/6862\">https://github.com/rust-analyzer/rust-analyzer/pull/6862</a><br>\n<code>HasChildSource</code> is actually being used by one other thing which is the <code>HasSource</code> impl for TypeParams, so I replaced it with a normal method instead. I've annotated that part in the PR as a review as I don't think its the best option.</p>",
        "id": 219782224,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607894848
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span> re <code>HasChildSource</code>, would chaging <code>ChildId</code> from assoc type to a trait's type paramter fix the problem?</p>",
        "id": 219845355,
        "sender_full_name": "matklad",
        "timestamp": 1607954939
    },
    {
        "content": "<p>but the current impl also looks OK enough</p>",
        "id": 219845397,
        "sender_full_name": "matklad",
        "timestamp": 1607954968
    },
    {
        "content": "<p>That might work, I can try testing that out after the PR, don't wanna change too much now.</p>",
        "id": 219852522,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607957906
    },
    {
        "content": "<p>sgtm!</p>",
        "id": 219852668,
        "sender_full_name": "matklad",
        "timestamp": 1607957969
    },
    {
        "content": "<p>r=me with <code>FIXME</code>s added for the follow up items (chaing HasChildSource and using <code>ast::Lifetime</code>)</p>",
        "id": 219852833,
        "sender_full_name": "matklad",
        "timestamp": 1607958018
    },
    {
        "content": "<p>Moving <code>ChildId</code> to a generic param worked flawlessly <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> <br>\nRegarding typing lifetimes in the ast, I wonder if making it a node would be a nice idea? In that case we could have a <code>Lifetime</code> node and a <code>Label</code>node right?</p>",
        "id": 219867276,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607963906
    },
    {
        "content": "<p>I think we need a node here, and not a token, yeah</p>",
        "id": 219867572,
        "sender_full_name": "matklad",
        "timestamp": 1607964022
    },
    {
        "content": "<p>Sort of how <code>ast::Name</code> wraps <code>ident</code> token, <code>ast::LIfetime</code> would wrap <code>Lifetime</code> token</p>",
        "id": 219867607,
        "sender_full_name": "matklad",
        "timestamp": 1607964047
    },
    {
        "content": "<p>But we probably don't need to distinguish between Names and NameRefs for lifetimes (due to that future feature with implicit introduction of lifetimes)</p>",
        "id": 219867686,
        "sender_full_name": "matklad",
        "timestamp": 1607964088
    },
    {
        "content": "<p>Oh right, Label already exists as a node, though break and continue don't use the node but the lifetime token only.<br>\nWhat should we do about the <code>SyntaxKind</code> though, because both the node and token would want the ident <code>LIFETIME</code> in this case right? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 219870552,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607965315
    },
    {
        "content": "<p>But lable includes <code>:</code>, no?</p>",
        "id": 219870634,
        "sender_full_name": "matklad",
        "timestamp": 1607965337
    },
    {
        "content": "<p>I guess we can rename token to <code>lifetime_ident</code></p>",
        "id": 219870752,
        "sender_full_name": "matklad",
        "timestamp": 1607965391
    },
    {
        "content": "<p>because it is a kind of <code>ident</code></p>",
        "id": 219870779,
        "sender_full_name": "matklad",
        "timestamp": 1607965399
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/ungrammar/blob/master/rust.ungram#L457-L460\">https://github.com/rust-analyzer/ungrammar/blob/master/rust.ungram#L457-L460</a></p>\n<div class=\"codehilite\"><pre><span></span><code>Label =\n  &#39;lifetime&#39;\n</code></pre></div>\n<p>doesn't seem to be the case</p>",
        "id": 219870831,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607965426
    },
    {
        "content": "<p>that's a bug I think</p>",
        "id": 219870861,
        "sender_full_name": "matklad",
        "timestamp": 1607965441
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>LOOP_EXPR@840..882\n  LABEL@840..843\n    LIFETIME@840..842 &quot;\\&#39;a&quot;\n    COLON@842..843 &quot;:&quot;\n  WHITESPACE@843..844 &quot; &quot;\n  LOOP_KW@844..848 &quot;loop&quot;\n  WHITESPACE@848..849 &quot; &quot;\n  BLOCK_EXPR@849..882\n    L_CURLY@849..850 &quot;{&quot;\n    WHITESPACE@850..863 &quot;\\n            &quot;\n    EXPR_STMT@863..872\n      BREAK_EXPR@863..871\n        BREAK_KW@863..868 &quot;break&quot;\n        WHITESPACE@868..869 &quot; &quot;\n        LIFETIME@869..871 &quot;\\&#39;a&quot;\n      SEMICOLON@871..872 &quot;;&quot;\n    WHITESPACE@872..881 &quot;\\n        &quot;\n    R_CURLY@881..882 &quot;}&quot;\n</code></pre></div>",
        "id": 219870915,
        "sender_full_name": "matklad",
        "timestamp": 1607965449
    },
    {
        "content": "<p>Ye I just realized the grammar doesn't specify the colon at all for loop labels</p>",
        "id": 219870969,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607965477
    },
    {
        "content": "<p>Feel free to send a PR for that (bumping minor in Cargo.toml to auto-publish)</p>",
        "id": 219871013,
        "sender_full_name": "matklad",
        "timestamp": 1607965506
    },
    {
        "content": "<p>for the colon or the colon as well as lifetime nodes?</p>",
        "id": 219872159,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607966042
    },
    {
        "content": "<p>For the colon definitelly. And for the lifetime node, once you are happy with the naming scheme</p>",
        "id": 219872273,
        "sender_full_name": "matklad",
        "timestamp": 1607966080
    },
    {
        "content": "<p><code>lifetime_ident</code> seems good to me, fits well together with ident, <a href=\"https://github.com/rust-analyzer/ungrammar/pull/15\">https://github.com/rust-analyzer/ungrammar/pull/15</a></p>",
        "id": 219872739,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607966286
    }
]