[
    {
        "content": "<p><a href=\"/user_uploads/4715/i_PT_7CCkzR1vkBGcINzMftC/image.png\" title=\"image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/i_PT_7CCkzR1vkBGcINzMftC/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/i_PT_7CCkzR1vkBGcINzMftC/image.png\"></a></div><p>Here, we somehow fail to resolve <code>.enumerate()</code> (because impl trait syntax is involved), but <em>somehow</em> we manage to correctly resolve the <code>.map</code> call. I don't know how to explain this :D</p>",
        "id": 194561323,
        "sender_full_name": "matklad",
        "timestamp": 1587240179
    },
    {
        "content": "<p>This is simple, Watson, <code>idx</code> type is deduced from usage.</p>",
        "id": 194562034,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587241469
    },
    {
        "content": "<p>But how is the <code>.map</code> type deduced?</p>",
        "id": 194562041,
        "sender_full_name": "matklad",
        "timestamp": 1587241494
    },
    {
        "content": "<p>From symbol index?</p>",
        "id": 194562049,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587241512
    },
    {
        "content": "<p>Like, the inlay hint says <code>Map&lt;{unknown}, |...| -&gt; Ty&gt;</code></p>",
        "id": 194562050,
        "sender_full_name": "matklad",
        "timestamp": 1587241518
    },
    {
        "content": "<p>Symbol index is not used during type inference. And I bet there are a bunch of <code>map</code>s</p>",
        "id": 194562054,
        "sender_full_name": "matklad",
        "timestamp": 1587241558
    },
    {
        "content": "<p>Bruh, isn't symbol index kinda the last resort? Maybe you are lucky to get exactly Iterator.map...</p>",
        "id": 194562164,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587241732
    },
    {
        "content": "<p>we find <code>Iterator::map</code> as a candidate, get an ambiguous result for the trait solving (because we don't have any self type / it's a variable), so we use it</p>",
        "id": 194567643,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1587250204
    },
    {
        "content": "<p>during method resolution, it's enough if the self type <em>may</em> implement the trait</p>",
        "id": 194567648,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1587250239
    },
    {
        "content": "<p>Fun fact: ra manages to infer the type where rustc bails...<br>\n<a href=\"user_uploads/4715/AdZLMVC6zRfTluUmR7X8R5ky/image.png\" title=\"user_uploads/4715/AdZLMVC6zRfTluUmR7X8R5ky/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"user_uploads/4715/AdZLMVC6zRfTluUmR7X8R5ky/image.png\" title=\"image.png\"><img src=\"user_uploads/4715/AdZLMVC6zRfTluUmR7X8R5ky/image.png\"></a></div>",
        "id": 194716609,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587408241
    },
    {
        "content": "<p>well, you might note it doesn't resolve <code>contains</code>, so it didn't infer the type at that point either</p>",
        "id": 194719332,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1587409564
    },
    {
        "content": "<p>if we emitted diagnostics for this, we would as well at that point</p>",
        "id": 194719437,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1587409636
    },
    {
        "content": "<p>both RA and rustc continue afterwards and find out the type, but by then it's too late</p>",
        "id": 194719596,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1587409719
    },
    {
        "content": "<p>you might actually be able to see that by doing something like <code>let () = is_derive_registrar_symbol;</code> later, though rustc might be too smart about emitting type errors when there were errors further up, not sure</p>",
        "id": 194719748,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1587409800
    },
    {
        "content": "<p>we could totally offer a quick fix for this though <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 194719850,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1587409845
    },
    {
        "content": "<p>in fact the assist for it already exists, doesn't it</p>",
        "id": 194719880,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1587409860
    }
]