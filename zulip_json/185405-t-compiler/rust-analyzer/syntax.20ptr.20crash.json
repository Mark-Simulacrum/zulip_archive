[
    {
        "content": "<p>This has been a long time I have been seeing this damn crash:</p>\n<div class=\"codehilite\"><pre><span></span>thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;can&#39;t resolve local ptr to SyntaxNode: SyntaxNodePtr { range: [1170; 1322), kind: ENUM_DEF }&#39;, crates/ra_syntax/src/ptr.rs:30:28\nstack backtrace:\n   0: &lt;unknown&gt;\n   1: &lt;unknown&gt;\n   ... //  50+ lines of unknown\n   note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace\n</pre></div>\n\n\n<p>Even though I have <code>RUST_BACKTRACE=full</code> set in my <code>.profile</code> and it is clearly in my env wherever I check, but the stacktrace shows <code>unknown</code> for some reason. <span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span>  do you have any ideas on how to get some payload from this error?</p>",
        "id": 193242619,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1586291043
    },
    {
        "content": "<p>You need to enable debug symbols in the release build profile (add <code>debug = true</code> to debug section of cargo.toml)</p>",
        "id": 193243173,
        "sender_full_name": "Emil Lauridsen",
        "timestamp": 1586291333
    },
    {
        "content": "<p>Ah, I wish nightly build included debug symbols, because this error happens rarely and I cannot reproduce it ...</p>",
        "id": 193243387,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1586291424
    },
    {
        "content": "<p>You don't need the debug sections for symbol names in the backtrace. You only need an unstripped binary. The backtrace is generated using <code>.eh_frame</code> (necessary for panic=unwind) and the symbol table. Debuginfo only gives you the file and line of the error.</p>",
        "id": 193245823,
        "sender_full_name": "bjorn3",
        "timestamp": 1586292500
    },
    {
        "content": "<p>Okay, so how do I enable the stacktrace in Cargo.toml in the better way  <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span>?</p>",
        "id": 193249099,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1586293913
    },
    {
        "content": "<p>If you don't explicitly strip the binary, <code>RUST_BACKTRACE</code> should work just fine. CI does run strip binaries: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/d89c189ad1efe87e54855e6488184d7a3825a534/xtask/src/dist.rs#L63\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/d89c189ad1efe87e54855e6488184d7a3825a534/xtask/src/dist.rs#L63\">https://github.com/rust-analyzer/rust-analyzer/blob/d89c189ad1efe87e54855e6488184d7a3825a534/xtask/src/dist.rs#L63</a> so backtraces don't work for releases build on CI.</p>",
        "id": 193249694,
        "sender_full_name": "bjorn3",
        "timestamp": 1586294172
    },
    {
        "content": "<p>Hmm, you are right, maybe we shouldn't strip the binary at least for nightlies?</p>",
        "id": 193254136,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1586297020
    },
    {
        "content": "<p>Does it give a big performance increase?</p>",
        "id": 193254276,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1586297098
    },
    {
        "content": "<p>Stripping should only affect binary size.</p>",
        "id": 193254969,
        "sender_full_name": "bjorn3",
        "timestamp": 1586297594
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> your word against?</p>",
        "id": 193255948,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1586298375
    },
    {
        "content": "<p>As aside: I suspect <a href=\"https://gist.github.com/Veetaha/7c1dc7823ede84349e5ee7654db65f80\" title=\"https://gist.github.com/Veetaha/7c1dc7823ede84349e5ee7654db65f80\">this crash</a> happens when you change the code in libraries (i.e. code from <a href=\"http://crates.io\" title=\"http://crates.io\">crates.io</a>) and then when the auto-import is triggered you get stale symbols from <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/d89c189ad1efe87e54855e6488184d7a3825a534/crates/ra_ide_db/src/symbol_index.rs#L91\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/d89c189ad1efe87e54855e6488184d7a3825a534/crates/ra_ide_db/src/symbol_index.rs#L91\"><code>SymbolsDatabase::library_symbols()</code></a> and the syntax ptr that previously referred to some struct or enum no longer resolves. I think this might be connected with <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/d89c189ad1efe87e54855e6488184d7a3825a534/crates/ra_ide_db/src/change.rs#L209-L213\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/d89c189ad1efe87e54855e6488184d7a3825a534/crates/ra_ide_db/src/change.rs#L209-L213\"><code>Durability::HIGH</code></a> that we set for library symbols, i.e. maybe this is a <code>salsa</code> bug, or what is more likely we messed up the inputs durability and they don't invalidate the <code>library_symbols()</code> query...</p>",
        "id": 193262554,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1586303568
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/AQg5Mg_yXWIkJs3Auw1M8ZcC/panic.gif\" title=\"panic.gif\">panic.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/AQg5Mg_yXWIkJs3Auw1M8ZcC/panic.gif\" title=\"panic.gif\"><img src=\"/user_uploads/4715/AQg5Mg_yXWIkJs3Auw1M8ZcC/panic.gif\"></a></div>",
        "id": 193262582,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1586303596
    },
    {
        "content": "<p>I don't think that's supposed to work. We assume that the dependencies don't change, as far as I know.</p>",
        "id": 193273299,
        "sender_full_name": "Laurențiu",
        "timestamp": 1586317920
    }
]