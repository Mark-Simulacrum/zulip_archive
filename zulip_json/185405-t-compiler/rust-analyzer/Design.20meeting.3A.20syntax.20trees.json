[
    {
        "content": "<p>The meeting will happen at Wednesday, 20th, 14:00 -- 15:00 UTC, in this Zulip stream. </p>\n<p>The goal of the meeting is to nail down the API of syntax trees for rls 2.0/compiler.</p>\n<p>Required reading:</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/apple/swift/tree/master/lib/Syntax\" target=\"_blank\" title=\"https://github.com/apple/swift/tree/master/lib/Syntax\">Swift libsyntax</a> -- the design of full-fidelity syntax trees I'd like to use for rls-2.0</p>\n</li>\n<li>\n<p><a href=\"https://github.com/rust-analyzer/rowan\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rowan\">rowan</a> -- rust library I use for implementing syntax trees.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/bd2b4ef2d1c631215523f79a8138cfa8cbd3f70e/crates/ra_syntax/src/syntax_node.rs\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/bd2b4ef2d1c631215523f79a8138cfa8cbd3f70e/crates/ra_syntax/src/syntax_node.rs\">raw</a> and <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/bd2b4ef2d1c631215523f79a8138cfa8cbd3f70e/crates/ra_syntax/src/ast.rs\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/bd2b4ef2d1c631215523f79a8138cfa8cbd3f70e/crates/ra_syntax/src/ast.rs\">typed</a> syntax tree API which exist in rust-analyzer today.</p>\n</li>\n</ul>\n<p>rowan/SyntaxNode is pretty close to Swift libsyntax, the two main differences are:</p>\n<ul>\n<li>to get the specific node (say, struct's name), we iterate children instead of getting the nth child directly</li>\n<li>\"trivia\" nodes are just usual nodes in the tree, they are not attached to tokens.</li>\n</ul>",
        "id": 158793436,
        "sender_full_name": "matklad",
        "timestamp": 1550489828
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> reminder , meeting starts in one hour!</p>",
        "id": 158972444,
        "sender_full_name": "matklad",
        "timestamp": 1550667959
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> meeting time!</p>",
        "id": 158976748,
        "sender_full_name": "matklad",
        "timestamp": 1550671320
    },
    {
        "content": "<p>Let's see who is here</p>",
        "id": 158976817,
        "sender_full_name": "matklad",
        "timestamp": 1550671344
    },
    {
        "content": "<p>/me</p>",
        "id": 158976823,
        "sender_full_name": "matklad",
        "timestamp": 1550671348
    },
    {
        "content": "<p>/me admits they have not done the homework. <span aria-label=\"embarrassed\" class=\"emoji emoji-1f633\" role=\"img\" title=\"embarrassed\">:embarrassed:</span></p>",
        "id": 158976825,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550671348
    },
    {
        "content": "<p>o/</p>",
        "id": 158976827,
        "sender_full_name": "matklad",
        "timestamp": 1550671351
    },
    {
        "content": "<p>I'm here, might not be 100% present though and I don't know how much I can contribute on this topic ;)</p>",
        "id": 158976870,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1550671384
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 158976945,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1550671437
    },
    {
        "content": "<p>Ok, so let's get started!</p>",
        "id": 158977069,
        "sender_full_name": "matklad",
        "timestamp": 1550671491
    },
    {
        "content": "<p>We should also invite <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> in case they don't know about this meeting yet</p>",
        "id": 158977078,
        "sender_full_name": "mw",
        "timestamp": 1550671501
    },
    {
        "content": "<p>Pinged the whole of WG-grammar on discord just in case</p>",
        "id": 158977267,
        "sender_full_name": "matklad",
        "timestamp": 1550671601
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> , based on my cursory review of Swift lib/Syntax vs rowan, my first question is: Rowan seems to be abstracted over what concrete syntax the client might want</p>",
        "id": 158977278,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550671611
    },
    {
        "content": "<p>Yep!</p>",
        "id": 158977303,
        "sender_full_name": "matklad",
        "timestamp": 1550671627
    },
    {
        "content": "<p>is lib/Syntax similar? Or does it hard-code knowledge of Swift syntax itself in that library?</p>",
        "id": 158977304,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550671628
    },
    {
        "content": "<p>It's even slightly more subtle than that</p>",
        "id": 158977316,
        "sender_full_name": "matklad",
        "timestamp": 1550671642
    },
    {
        "content": "<p>both rowan and swift libsyntax use a single type as the underlying storage for all nodes</p>",
        "id": 158977347,
        "sender_full_name": "matklad",
        "timestamp": 1550671670
    },
    {
        "content": "<p>Specifically, swift uses this \"DST\" type to store any node: <a href=\"https://github.com/apple/swift/blob/e066d452e8128d9ac5d457d6c6a81d67e850541d/include/swift/Syntax/RawSyntax.h#L221-L223\" target=\"_blank\" title=\"https://github.com/apple/swift/blob/e066d452e8128d9ac5d457d6c6a81d67e850541d/include/swift/Syntax/RawSyntax.h#L221-L223\">https://github.com/apple/swift/blob/e066d452e8128d9ac5d457d6c6a81d67e850541d/include/swift/Syntax/RawSyntax.h#L221-L223</a></p>",
        "id": 158977422,
        "sender_full_name": "matklad",
        "timestamp": 1550671713
    },
    {
        "content": "<p>It looks like this in memory:</p>\n<div class=\"codehilite\"><pre><span></span>kind|n_children|child1|child2|child3\n</pre></div>",
        "id": 158977458,
        "sender_full_name": "matklad",
        "timestamp": 1550671749
    },
    {
        "content": "<p>where <code>kind</code> is an <code>u16</code> tag for the specific node kind (Class Declaration, sum expression etc)</p>",
        "id": 158977483,
        "sender_full_name": "matklad",
        "timestamp": 1550671786
    },
    {
        "content": "<p>The <code>concrete syntax the client might want</code> is then a new-type wrapper around this node, which adds static info like \"the first child is expected to be an identifier\".</p>",
        "id": 158977594,
        "sender_full_name": "matklad",
        "timestamp": 1550671862
    },
    {
        "content": "<p>does this make sense?</p>",
        "id": 158977643,
        "sender_full_name": "matklad",
        "timestamp": 1550671911
    },
    {
        "content": "<p>i think so</p>",
        "id": 158977657,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550671921
    },
    {
        "content": "<p>Great!</p>\n<p>So, the primary question is \"would a similar implementation work everywhere in the compiler?\".</p>\n<p>I defenitelly like it for IDE, for the following reasons:</p>\n<ul>\n<li>you have comments &amp; whitespace in children</li>\n<li>you can get to each node's parent</li>\n<li>there's a \"common super type\" of all syntax nodes, so you can traverse the tree as you like</li>\n</ul>",
        "id": 158977809,
        "sender_full_name": "matklad",
        "timestamp": 1550672016
    },
    {
        "content": "<p>Note that this impl is not really customizable: if you want to associated additional info with syntax nodes, you'll have to use some sort of a side-table.</p>",
        "id": 158977904,
        "sender_full_name": "matklad",
        "timestamp": 1550672078
    },
    {
        "content": "<p>Does Swift use this approach in their compiler as well or just IDE? I guess why wouldn't it work?</p>",
        "id": 158977932,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1550672105
    },
    {
        "content": "<p>from the point of incremental compilation you usually want to restrict the amount of data that can be accessed without tracking</p>",
        "id": 158977963,
        "sender_full_name": "mw",
        "timestamp": 1550672133
    },
    {
        "content": "<p>IIRC, libsytax is a new thing, and they are in the process of transitioning compiler to it.</p>",
        "id": 158977970,
        "sender_full_name": "matklad",
        "timestamp": 1550672141
    },
    {
        "content": "<p>i.e. if you get the parent of a node, it should go through a query</p>",
        "id": 158978022,
        "sender_full_name": "mw",
        "timestamp": 1550672165
    },
    {
        "content": "<p>One note about comments/whitespace: it feels to me like such things should be...recoverable, but not necessarily something we want 99% of the time.</p>",
        "id": 158978049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550672191
    },
    {
        "content": "<blockquote>\n<p>Note that this impl is not really customizable: if you want to associated additional info with syntax nodes, you'll have to use some sort of a side-table.</p>\n</blockquote>\n<p>But this part feels ok to me</p>",
        "id": 158978077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550672214
    },
    {
        "content": "<p>most queries probably don't directly access the syntax, but an intermediate representation  generated from it by another query?</p>",
        "id": 158978120,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1550672236
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span>  true, yeah. I expect that perhaps you might not want to use syntax trees <strong>directly</strong> at all. syntax node remembers absolute offset , and that's bad for incremental</p>",
        "id": 158978123,
        "sender_full_name": "matklad",
        "timestamp": 1550672240
    },
    {
        "content": "<p>so yeah, what <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> , there could be an intermediate lowred representation (<strong>A</strong>ST)</p>",
        "id": 158978160,
        "sender_full_name": "matklad",
        "timestamp": 1550672278
    },
    {
        "content": "<p>yes, some sort of reduced representation for specific purposes would solve that problem</p>",
        "id": 158978181,
        "sender_full_name": "mw",
        "timestamp": 1550672282
    },
    {
        "content": "<p>I'm not entirely convinced. It depends on what the minimum amount of work you want to do is</p>",
        "id": 158978267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550672325
    },
    {
        "content": "<p>re \"recoverability\", the biggest drawback of such trees is memory footprint. like, every token like <code>+</code> is a separate allocation.</p>",
        "id": 158978271,
        "sender_full_name": "matklad",
        "timestamp": 1550672329
    },
    {
        "content": "<p>in particular, if you have your base representation with absolute offsets etc, you will have to recompute the entire tree for each parse</p>",
        "id": 158978302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550672345
    },
    {
        "content": "<p>maybe that's ok</p>",
        "id": 158978305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550672347
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> when you say comments+whitespace should be recoverable, are you saying you object to having <del>them always</del> their representation embedded in parse tree? even if e.g. we did not guarantee their presence?</p>",
        "id": 158978309,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550672348
    },
    {
        "content": "<p>also, memory allocation</p>",
        "id": 158978315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550672350
    },
    {
        "content": "<p>could we have two parsers: one that immediately produces the reduced form and another one that is invoked only when needed?</p>",
        "id": 158978337,
        "sender_full_name": "mw",
        "timestamp": 1550672366
    },
    {
        "content": "<p>the fast one wouldn't need to be error tolerant even? not sure</p>",
        "id": 158978449,
        "sender_full_name": "mw",
        "timestamp": 1550672421
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I'm not saying I <em>object</em>, but I'm not sure it's a good idea. I think that maybe an initial parse should be something that is relatively incremental friendly and contains the information we want most often, and perhaps there is a follow-on query that gives a more detailed tree when needed (as <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> sort of suggested).</p>",
        "id": 158978450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550672423
    },
    {
        "content": "<p>In other words, the right setup might not be to have a \"maximal\" tree at the \"base\"</p>",
        "id": 158978470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550672450
    },
    {
        "content": "<p>^ I like the approach for fast parsing and then lazily geting more details when necessary</p>",
        "id": 158978473,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1550672451
    },
    {
        "content": "<blockquote>\n<p>the fast one wouldn't need to be error tolerant even? not sure</p>\n</blockquote>\n<p>it does still need to be error tolerant -- we want to e.g. still run type inference on incomplete code</p>",
        "id": 158978524,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1550672487
    },
    {
        "content": "<p>I guess that would be possible, but with non-trivial accidental complexity.</p>",
        "id": 158978543,
        "sender_full_name": "matklad",
        "timestamp": 1550672501
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> yes, that's why I was hesitant about that assumption</p>",
        "id": 158978552,
        "sender_full_name": "mw",
        "timestamp": 1550672513
    },
    {
        "content": "<p>I wonder how much to we <strong>need</strong> to optimize syntax trees?</p>",
        "id": 158978554,
        "sender_full_name": "matklad",
        "timestamp": 1550672514
    },
    {
        "content": "<p>I mean, if we through them away before typechecking, they won't affect high water mark memory usage</p>",
        "id": 158978639,
        "sender_full_name": "matklad",
        "timestamp": 1550672550
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> you said that the full syntax tree uses a lot of memory. is it also expensive to generate?</p>",
        "id": 158978640,
        "sender_full_name": "mw",
        "timestamp": 1550672550
    },
    {
        "content": "<p>I agree that it would make things more complicated</p>",
        "id": 158978698,
        "sender_full_name": "mw",
        "timestamp": 1550672593
    },
    {
        "content": "<p>The last time I've done measurements, I think ra_syntax parser was about 2x slower than current libsyntax, and most slowness was constructing the data structure .</p>",
        "id": 158978714,
        "sender_full_name": "matklad",
        "timestamp": 1550672611
    },
    {
        "content": "<p>we could try to generate both parsers from a single grammar definition</p>",
        "id": 158978751,
        "sender_full_name": "mw",
        "timestamp": 1550672642
    },
    {
        "content": "<p>not sure how much manual intervention error correction needs</p>",
        "id": 158978803,
        "sender_full_name": "mw",
        "timestamp": 1550672660
    },
    {
        "content": "<p>well, I think we still want a single data type for the syntax tree?</p>",
        "id": 158978831,
        "sender_full_name": "matklad",
        "timestamp": 1550672684
    },
    {
        "content": "<p>Or do we? Could we directly produced a lowered representation?</p>",
        "id": 158978872,
        "sender_full_name": "matklad",
        "timestamp": 1550672715
    },
    {
        "content": "<p>For \"lowered represenation\", I was thinking about something more ECS-style, where there's no real tree, but things like <code>FunctionId</code>, <code>StructId</code>, etc,</p>",
        "id": 158978972,
        "sender_full_name": "matklad",
        "timestamp": 1550672765
    },
    {
        "content": "<p>it should be possible to directly produce something as abstract as the compiler's current libsyntax</p>",
        "id": 158978978,
        "sender_full_name": "mw",
        "timestamp": 1550672767
    },
    {
        "content": "<p>In the ID setup, lazyly lowering function body should be doable (In fact, rust-analzyer does something like this now)</p>",
        "id": 158979007,
        "sender_full_name": "matklad",
        "timestamp": 1550672790
    },
    {
        "content": "<p>that should be possible too, I think?</p>",
        "id": 158979009,
        "sender_full_name": "mw",
        "timestamp": 1550672793
    },
    {
        "content": "<p>for the \"batch\" compiler case we only need the \"lowered\" version unless there's an error, right?</p>",
        "id": 158979065,
        "sender_full_name": "mw",
        "timestamp": 1550672837
    },
    {
        "content": "<p>@matklad the \"lowered representation\" you mention is the equivalent of our current <code>DefId</code> setup that we end up with post-name resolution, right?</p>",
        "id": 158979095,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1550672859
    },
    {
        "content": "<blockquote>\n<p>it should be possible to directly produce something as abstract as the compiler's current libsyntax</p>\n</blockquote>\n<p>Yeah, but than I think you'll end up in situation where you have to duplicate code between \"full\" and \"reduced\" syntax trees, if they are different type.</p>",
        "id": 158979100,
        "sender_full_name": "matklad",
        "timestamp": 1550672861
    },
    {
        "content": "<blockquote>\n<p>that we end up with post-name resolution, right?</p>\n</blockquote>\n<p>I'd say post macro-expansion</p>",
        "id": 158979168,
        "sender_full_name": "matklad",
        "timestamp": 1550672889
    },
    {
        "content": "<p>also about tokens for macros, the lossless format would allow us to easily create those from the CST, right?</p>",
        "id": 158979194,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1550672913
    },
    {
        "content": "<p>I'd love to be able to end up with incrementally-stable entity ids after just parsing but not sure how much macro expansion will throw wrench into that</p>",
        "id": 158979250,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1550672958
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span> it should be easy to recover tokens themselves. Recovering hygiene info would be less direct, because there wouldn't be hygiene directly in the tree.</p>",
        "id": 158979268,
        "sender_full_name": "matklad",
        "timestamp": 1550672967
    },
    {
        "content": "<p>right</p>",
        "id": 158979304,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1550672994
    },
    {
        "content": "<p>(hope I didn't mix multiple concerns there)</p>",
        "id": 158979415,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1550673031
    },
    {
        "content": "<p>Can I step back a second and ask a meta question? I'm feeling a <em>touch</em> confused about the goals for this meeting but also the overall place that these trees fit into the plan. I'm wondering if a good goal for the meeting -- rather than settling on a <em>fixed</em> design -- would be to generate one or two basic options and have people try to elaborate those into more detailed proposals, so that we could then meet again to discuss them in more depth?</p>",
        "id": 158979434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550673047
    },
    {
        "content": "<p>Or maybe we'll centralize on one approach, not sure.</p>",
        "id": 158979468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550673067
    },
    {
        "content": "<p>I'm feeling a bit confused about all the considerations</p>",
        "id": 158979477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550673073
    },
    {
        "content": "<p>do we have our constraints listed somewhere?</p>",
        "id": 158979479,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550673075
    },
    {
        "content": "<p>Good question!</p>",
        "id": 158979525,
        "sender_full_name": "matklad",
        "timestamp": 1550673106
    },
    {
        "content": "<p>a list of constraints might be a good intermediate goal</p>",
        "id": 158979534,
        "sender_full_name": "mw",
        "timestamp": 1550673113
    },
    {
        "content": "<p>/me is not even sure what the exhaustive list of requirements is.</p>",
        "id": 158979591,
        "sender_full_name": "nagisa",
        "timestamp": 1550673128
    },
    {
        "content": "<p>(but that might have been elaborated at some all hands meeting that I’ve forgot about/missed)</p>",
        "id": 158979632,
        "sender_full_name": "nagisa",
        "timestamp": 1550673162
    },
    {
        "content": "<p>I would <strong>love</strong> to get the general idea about design sooner rather than later: if we are sure how trees should look like, we can do fun things like port rustft, etc...</p>",
        "id": 158979651,
        "sender_full_name": "matklad",
        "timestamp": 1550673183
    },
    {
        "content": "<p>for constrains, the list on swift libsyntax looks good</p>",
        "id": 158979685,
        "sender_full_name": "matklad",
        "timestamp": 1550673213
    },
    {
        "content": "<p>can you reproduce it here or put a direct link?</p>",
        "id": 158979750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550673247
    },
    {
        "content": "<p>this? <a href=\"https://github.com/apple/swift/tree/master/lib/Syntax#design-and-implementation-guidelines\" target=\"_blank\" title=\"https://github.com/apple/swift/tree/master/lib/Syntax#design-and-implementation-guidelines\">https://github.com/apple/swift/tree/master/lib/Syntax#design-and-implementation-guidelines</a></p>",
        "id": 158979766,
        "sender_full_name": "mw",
        "timestamp": 1550673260
    },
    {
        "content": "<p><a href=\"https://github.com/apple/swift/tree/master/lib/Syntax#design-and-implementation-guidelines\" target=\"_blank\" title=\"https://github.com/apple/swift/tree/master/lib/Syntax#design-and-implementation-guidelines\">https://github.com/apple/swift/tree/master/lib/Syntax#design-and-implementation-guidelines</a></p>",
        "id": 158979767,
        "sender_full_name": "matklad",
        "timestamp": 1550673261
    },
    {
        "content": "<p>yep</p>",
        "id": 158979770,
        "sender_full_name": "matklad",
        "timestamp": 1550673264
    },
    {
        "content": "<p>the \"full-fidelity\" bit is defenitlly a must-have for an IDE</p>",
        "id": 158979819,
        "sender_full_name": "matklad",
        "timestamp": 1550673304
    },
    {
        "content": "<p>but what does that mean inthe presence of macros ?</p>",
        "id": 158979834,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550673315
    },
    {
        "content": "<p>is the assumption there you're only talking about printing pre-expansion? We want the parse tree to be able to represent both pre- and post-expanded state</p>",
        "id": 158979859,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550673343
    },
    {
        "content": "<p>(i'm looking at: \"\"full fidelity\" - parsing a source file and printing the syntax tree should result in the same file.\")</p>",
        "id": 158979921,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550673369
    },
    {
        "content": "<p>Yeah, that defenitlly should hold for code typed-in by the user</p>",
        "id": 158979956,
        "sender_full_name": "matklad",
        "timestamp": 1550673393
    },
    {
        "content": "<p>but if the main point is that one should always be able to <em>recover</em> something identical to the original, then fine</p>",
        "id": 158979960,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550673396
    },
    {
        "content": "<p>in a similar vain: do we need to do macro expansion on the full fidelity tree?</p>",
        "id": 158979975,
        "sender_full_name": "mw",
        "timestamp": 1550673409
    },
    {
        "content": "<p>That probably means that macros should not modify tree in-place, but rather record that a specific macro expansion expands to a new tree</p>",
        "id": 158980001,
        "sender_full_name": "matklad",
        "timestamp": 1550673423
    },
    {
        "content": "<p>(But the implication would then be that there should be enough information post-expansion to recover the pre-expanded form)</p>",
        "id": 158980014,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550673426
    },
    {
        "content": "<p>or that: that we wouldn't modify tree in place</p>",
        "id": 158980034,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550673439
    },
    {
        "content": "<p>That is, IDE should be able to get both the syntax tree represneting the token tree of macro invocation, and the syntax tree representing the <strong>result</strong> of invocation</p>",
        "id": 158980055,
        "sender_full_name": "matklad",
        "timestamp": 1550673458
    },
    {
        "content": "<p>Back to requirements list:</p>\n<p>I do want a homogeneous traversal API, with parent, first_child, next_sibling methods.</p>",
        "id": 158980268,
        "sender_full_name": "matklad",
        "timestamp": 1550673579
    },
    {
        "content": "<p>In IDE contexts, such API are useful because you typically start at the token at the cursor and need to traverse the tree <strong>bottom up</strong> to do useful stuff. This is in contrast to usual compiler functionality, where you traverse the tree <strong>top down</strong>.</p>",
        "id": 158980403,
        "sender_full_name": "matklad",
        "timestamp": 1550673649
    },
    {
        "content": "<p>I think being able to walk a tree of syntax without having to \"know\" the types deeply is a good constraint</p>",
        "id": 158980439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550673671
    },
    {
        "content": "<p>It's not entirely clear to me whether the tree should be a data structure you get back from a single query, or whether it should be something you explore <em>via</em> queries</p>",
        "id": 158980470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550673694
    },
    {
        "content": "<p>So basically a parent pointer, which in this case has to be of a universal dynamic node type?</p>",
        "id": 158980492,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1550673708
    },
    {
        "content": "<p>I think this <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> is sort of what you meant by \"ECS-like\" earlier?</p>",
        "id": 158980497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550673710
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yeah</p>",
        "id": 158980546,
        "sender_full_name": "matklad",
        "timestamp": 1550673723
    },
    {
        "content": "<p>e.g., if you had some kind of \"syntax node id\", you might be able to ask for things like \"give me the parent of this id\"</p>",
        "id": 158980559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550673729
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> one thing I personally am not very clear on is what rust-analysis is currently using and what problems you see with it</p>",
        "id": 158980644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550673787
    },
    {
        "content": "<p>part of this is that I've been too busy to do my homework</p>",
        "id": 158980657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550673796
    },
    {
        "content": "<p>This assumes salsa-style incremental parsing, right?</p>",
        "id": 158980662,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1550673800
    },
    {
        "content": "<p>If we use absolute offsets for each node/id, how do we guarantee stability across multiple reparses (so that we don't thrash the entire incremental cache if ids change)?</p>",
        "id": 158980693,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1550673839
    },
    {
        "content": "<p>not necessarily, I mean the way I would probably handle this in salsa is to have some initial function that does the parse, producing a result, but expect most users to interact with it through queries that pull out bits of it</p>",
        "id": 158980697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550673841
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ra does the same thing as Swift's new syntax library (which is the same thing as Roslyn's desing)</p>",
        "id": 158980740,
        "sender_full_name": "matklad",
        "timestamp": 1550673845
    },
    {
        "content": "<p>if we want things to be incremental it kind of has to go through queries, right?</p>",
        "id": 158980750,
        "sender_full_name": "mw",
        "timestamp": 1550673852
    },
    {
        "content": "<p>well, the implementation detail differ, but the general structure is the same.</p>",
        "id": 158980765,
        "sender_full_name": "matklad",
        "timestamp": 1550673867
    },
    {
        "content": "<p>That is, I do not use queries for parsing.</p>",
        "id": 158980781,
        "sender_full_name": "matklad",
        "timestamp": 1550673881
    },
    {
        "content": "<p>that general structure being:</p>\n<ul>\n<li>a lower layer that contains all the details (Concrete Syntax Tree, so to speak)</li>\n<li>higher layers that abstract these into ASTs</li>\n</ul>",
        "id": 158980808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550673895
    },
    {
        "content": "<p>?</p>",
        "id": 158980824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550673903
    },
    {
        "content": "<p>Yeah</p>",
        "id": 158980830,
        "sender_full_name": "matklad",
        "timestamp": 1550673907
    },
    {
        "content": "<p>so a separate pass that can be incremental on its own and produces a stable-referencable(?) IDs/nodes?</p>",
        "id": 158980838,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1550673915
    },
    {
        "content": "<p>It seems like the macro expansion is also more at the AST level, right?</p>",
        "id": 158980846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550673929
    },
    {
        "content": "<p>By this I mean: you want to be able to get an AST with the results of macro expansion eventually. But you don't necessarily expect to get a <em>concrete syntax tree</em> with said results.</p>",
        "id": 158980888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550673962
    },
    {
        "content": "<p>Of course, you'd like to be able to serialize it back out perhaps for debugging, refactoring, etc (I can imagine a \"expand macro\" feature in an IDE, for example)</p>",
        "id": 158980939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550673981
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> sort-of: macro expansion works on tokens, which are close to CST than to AST</p>",
        "id": 158980962,
        "sender_full_name": "matklad",
        "timestamp": 1550674006
    },
    {
        "content": "<p>The output of macro expansion needs to  be parsable, tho</p>",
        "id": 158980972,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1550674013
    },
    {
        "content": "<p>It would make sense for macro expansion to occur as <em>part</em> of lowering into the AST</p>",
        "id": 158980977,
        "sender_full_name": "nagisa",
        "timestamp": 1550674015
    },
    {
        "content": "<p>that is, I imagine AST does not really cares about trailing commas, but macros do</p>",
        "id": 158980993,
        "sender_full_name": "matklad",
        "timestamp": 1550674024
    },
    {
        "content": "<p>I know in some cases today the output is not, so that's something to have in mind</p>",
        "id": 158981003,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1550674028
    },
    {
        "content": "<p>so that you have the whatever libsyntax provides initially as a holistic representation of source and AST as the macro-expanded form.</p>",
        "id": 158981029,
        "sender_full_name": "nagisa",
        "timestamp": 1550674047
    },
    {
        "content": "<p>Well, <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>, I imagine that AST notes may be \"unexpanded macro\", which contains tokens, but once they are expanded, they are parsed. And moreover in order to even <em>do</em> macro expansion, we need to do name resolution, which presumably wants to be based on the AST, right?</p>",
        "id": 158981124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550674095
    },
    {
        "content": "<p>I'm still not clear on the interaction between macro expansion an name resolution</p>",
        "id": 158981221,
        "sender_full_name": "mw",
        "timestamp": 1550674170
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> macro expansion can introduce new names into the scope which then influence expansion of the macros elsewhere(?)</p>",
        "id": 158981263,
        "sender_full_name": "nagisa",
        "timestamp": 1550674202
    },
    {
        "content": "<p>does it need the full name resolution logic or some rather reduced subset?</p>",
        "id": 158981297,
        "sender_full_name": "mw",
        "timestamp": 1550674203
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> I'm not sure exactly the sense of your question, but basic idea is that:</p>\n<p>to expand <code>foo::bar!</code>, you have to resolve the path <code>foo::bar</code></p>",
        "id": 158981318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550674208
    },
    {
        "content": "<p>And, of course ,that may generate new names that affect later paths.</p>",
        "id": 158981345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550674227
    },
    {
        "content": "<p>are macros hygienic?</p>",
        "id": 158981348,
        "sender_full_name": "mw",
        "timestamp": 1550674229
    },
    {
        "content": "<p>right, but I don't think we should directly produce AST from the result of macro expansion. I imagine the flow where macro expands to a token-tree, which is then passed to a parser that produces a \"full-fidelity\" tree (with dummy whitespace) whihc is then feeded back into AST-lowering procedure</p>",
        "id": 158981358,
        "sender_full_name": "matklad",
        "timestamp": 1550674237
    },
    {
        "content": "<p>from the technical standpoint name resolution can be done as part of the same lowering/expansion procedure. We would need multiple passes, but that is something we need today anyway.</p>",
        "id": 158981404,
        "sender_full_name": "nagisa",
        "timestamp": 1550674287
    },
    {
        "content": "<blockquote>\n<p>are macros hygienic?</p>\n</blockquote>\n<p>Today, the answer is \"sort of\" -- not at the item level, in particular. But maybe worth asking why you're asking =)</p>",
        "id": 158981421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550674299
    },
    {
        "content": "<p>Maybe the way to think of name/lowering/expansion is as an atomic unit for now -- it's hard enough for us to wrap our head around things</p>",
        "id": 158981441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550674322
    },
    {
        "content": "<p>really, atomic unit?</p>",
        "id": 158981495,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550674331
    },
    {
        "content": "<p>and once we have some idea of that, think about how to make it incrementally re-execute?</p>",
        "id": 158981496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550674332
    },
    {
        "content": "<p>I was about to say</p>",
        "id": 158981500,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550674336
    },
    {
        "content": "<p>that in terms of IDE design</p>",
        "id": 158981504,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550674340
    },
    {
        "content": "<p>we may want to build in the assumption that the UX is going to interact with a tree that is not yet fully expanded</p>",
        "id": 158981516,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550674354
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>are macros hygienic?</p>\n</blockquote>\n<p>Today, the answer is \"sort of\" -- not at the item level, in particular. But maybe worth asking why you're asking =)</p>\n</blockquote>\n<p>does name resolution of macro names have to take hygiene into account or can it be something really simple</p>",
        "id": 158981523,
        "sender_full_name": "mw",
        "timestamp": 1550674359
    },
    {
        "content": "<p>but no need to go into this in detail now..</p>",
        "id": 158981544,
        "sender_full_name": "mw",
        "timestamp": 1550674372
    },
    {
        "content": "<p>yeah, it seems like we're getting a bit astray somehow.</p>",
        "id": 158981560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550674382
    },
    {
        "content": "<p>I guess my feeling <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> is that if Rosyln / Swift are taking an approach, we'd do well to follow suit -- or at least have strong reasons to deviate.</p>",
        "id": 158981597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550674410
    },
    {
        "content": "<p>but I'm not 100% sure what that means :)</p>",
        "id": 158981620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550674426
    },
    {
        "content": "<p>Yeah, I feel the same, that's why I kinda started the meeting in the \"explore a particular solution\" mood :)</p>",
        "id": 158981701,
        "sender_full_name": "matklad",
        "timestamp": 1550674451
    },
    {
        "content": "<p>heh :)</p>",
        "id": 158981719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550674466
    },
    {
        "content": "<p>Does Swift have token-based macros as well?</p>",
        "id": 158981722,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1550674472
    },
    {
        "content": "<p>I remember <span class=\"user-mention\" data-user-id=\"132906\">@Jonathan Turner</span> mentioning that for Typescript (and maybe C#) macros were not supported in order to make IDE support doable</p>",
        "id": 158981725,
        "sender_full_name": "mw",
        "timestamp": 1550674476
    },
    {
        "content": "<p>so doing somthing becuase roslyn does it might not be a good idea because they have different constraints</p>",
        "id": 158981743,
        "sender_full_name": "mw",
        "timestamp": 1550674499
    },
    {
        "content": "<p>(I suppose an ongoing macro expansion could perhaps be lumped in with user edits ... as in, whatever the <del>code</del> IDE+parser-library does to deal with user edits, it might also handle the changes injected by macro expansion in the same way ... and therefore we should not need to design for macros up front....)</p>",
        "id": 158981776,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550674520
    },
    {
        "content": "<p>Yeah, \"can we macro expand to roslyn tree\" is a core question whihc might kill the design</p>",
        "id": 158981800,
        "sender_full_name": "matklad",
        "timestamp": 1550674541
    },
    {
        "content": "<p>Ideally I'd like us to support everything that rustc does - I know that it was very annoying not being able to accurately find definitions introduced by C-style macros in C++</p>",
        "id": 158981807,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1550674544
    },
    {
        "content": "<p>So, stepping back, it feels to me like we should be doing more <em>reviewing</em> of what you've built in rust-analyzer <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>. I know you producd that video and other content. I wonder if it would be useful to schedule more \"interactive\" discussion of this kind?</p>",
        "id": 158981826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550674558
    },
    {
        "content": "<p>Basically I think we don't share quite enough context at the moment</p>",
        "id": 158981898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550674582
    },
    {
        "content": "<p>Doing the \"homework\" above would be prerequisite :D</p>",
        "id": 158981905,
        "sender_full_name": "matklad",
        "timestamp": 1550674591
    },
    {
        "content": "<p>Or maybe it's just me :)</p>",
        "id": 158981910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550674593
    },
    {
        "content": "<p>Fair :)</p>",
        "id": 158981929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550674607
    },
    {
        "content": "<p>Maybe we need to form some homework study groups...</p>",
        "id": 158981960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550674629
    },
    {
        "content": "<p>...also, I can just step back, as I'm pretty busy right now</p>",
        "id": 158981975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550674642
    },
    {
        "content": "<p>you can pair up with <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> :)</p>",
        "id": 158981981,
        "sender_full_name": "matklad",
        "timestamp": 1550674649
    },
    {
        "content": "<p>So looks like it's time to wrap-up the meeting!</p>",
        "id": 158982102,
        "sender_full_name": "matklad",
        "timestamp": 1550674709
    },
    {
        "content": "<p>What do you think are good next steps?</p>",
        "id": 158982144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550674731
    },
    {
        "content": "<p>1) to write down a more specific list of constaints for design</p>",
        "id": 158982192,
        "sender_full_name": "matklad",
        "timestamp": 1550674761
    },
    {
        "content": "<p>2) study rosly approach in more detail to figure out if it is a good fit. Specifically, macro &amp; hygiene might be tricky</p>",
        "id": 158982327,
        "sender_full_name": "matklad",
        "timestamp": 1550674813
    },
    {
        "content": "<p>3) maaaby explore alternative set ups when the tree itself is salsa-based? I kinda belive in rosly trees though</p>",
        "id": 158982395,
        "sender_full_name": "matklad",
        "timestamp": 1550674848
    },
    {
        "content": "<p>So I really like the idea of \"pairing up\" in some sense</p>",
        "id": 158982403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550674851
    },
    {
        "content": "<p>I feel like I would like to delve more deeply but I'm trying to think about what will make it actually happen</p>",
        "id": 158982436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550674873
    },
    {
        "content": "<p>certainly scheduling some time helps :)</p>",
        "id": 158982443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550674878
    },
    {
        "content": "<p>I guess I'd be game to e.g. schedule an hour to sit down with someone (or a few people) and try to walk through what happens when (say) something is parsed in rust-analyzer?</p>",
        "id": 158982490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550674908
    },
    {
        "content": "<p>I'm mostly thinking about the \"homework\" phenomenon and ways to help it get done</p>",
        "id": 158982554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550674939
    },
    {
        "content": "<p>fwiw, I have very little time to actually spend on this. at least in the first half of the year :(</p>",
        "id": 158982558,
        "sender_full_name": "mw",
        "timestamp": 1550674941
    },
    {
        "content": "<blockquote>\n<p>3) maaaby explore alternative set ups when the tree itself is salsa-based? I kinda belive in rosly trees though</p>\n</blockquote>\n<p>I feel like this is maybe not important -- in particular, I think that we'll need some \"root parse\" action</p>",
        "id": 158982580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550674963
    },
    {
        "content": "<p>I can totally do this! But it's better be \"a few people\", I do want to improve bus-factor here</p>",
        "id": 158982584,
        "sender_full_name": "matklad",
        "timestamp": 1550674964
    },
    {
        "content": "<p>I plan to spend time on this</p>",
        "id": 158982643,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550675005
    },
    {
        "content": "<p>I've got time I could sink into this wg if there's a desire for some more regular hands.</p>",
        "id": 158982646,
        "sender_full_name": "davidtwco",
        "timestamp": 1550675006
    },
    {
        "content": "<p>I've not followed discussions closely so far but I can catch up.</p>",
        "id": 158982685,
        "sender_full_name": "davidtwco",
        "timestamp": 1550675037
    },
    {
        "content": "<p>So I schedule a sync video meeting for me, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>, <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  and <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> with the goal of diving in into the current impl</p>",
        "id": 158982804,
        "sender_full_name": "matklad",
        "timestamp": 1550675105
    },
    {
        "content": "<p>I'd also love to participate, if you don't mind</p>",
        "id": 158982837,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1550675128
    },
    {
        "content": "<p>Seems good -- I don't think I'll have much time for writing code just now so I'd put myself as lower priority, but I'm definitely game to listen in and kibbitz</p>",
        "id": 158982841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550675131
    },
    {
        "content": "<p>anyone else is welcome to join of course!</p>",
        "id": 158982844,
        "sender_full_name": "matklad",
        "timestamp": 1550675134
    },
    {
        "content": "<p>Wasn't sure what we were voting for :)</p>",
        "id": 158982847,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1550675139
    },
    {
        "content": "<p>Great!</p>",
        "id": 158982853,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1550675144
    },
    {
        "content": "<p>I am ready to write the code! I just need to know that to write :D</p>",
        "id": 158982865,
        "sender_full_name": "matklad",
        "timestamp": 1550675157
    },
    {
        "content": "<p>I'll also try to schedule time to actually watch after the fact otherwise -- I know <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> you also made that other video, which I just realized I should prob just put time on my calendar for (I found it hard to find a slot otherwise)</p>",
        "id": 158982928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550675185
    },
    {
        "content": "<p>Yeah, I think fleshing out the design and current problems with our approach is the trickiest part of it all :(</p>",
        "id": 158982930,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1550675188
    },
    {
        "content": "<p>Ok, I think the meeting is officially over than!</p>",
        "id": 158982962,
        "sender_full_name": "matklad",
        "timestamp": 1550675220
    },
    {
        "content": "<p>Gotta run, off to do more homework on the topic</p>",
        "id": 158982974,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1550675226
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 158982977,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1550675231
    },
    {
        "content": "<p>thanks for setting this up <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> and putting up with those of us who are playing catch up</p>",
        "id": 158983020,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550675264
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Thanks!</p>",
        "id": 158983024,
        "sender_full_name": "mw",
        "timestamp": 1550675270
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> stream/poll for rust-analyzer syntax/parsing code walkthrough: <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/rust-analyzer.20syntax.20trees.20deep.20dive\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/rust-analyzer.20syntax.20trees.20deep.20dive\">https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/rust-analyzer.20syntax.20trees.20deep.20dive</a></p>",
        "id": 158990735,
        "sender_full_name": "matklad",
        "timestamp": 1550680431
    },
    {
        "content": "<p>Notes: <a href=\"https://github.com/rust-lang/compiler-team/pull/6\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/pull/6\">https://github.com/rust-lang/compiler-team/pull/6</a></p>",
        "id": 158993366,
        "sender_full_name": "matklad",
        "timestamp": 1550682438
    },
    {
        "content": "<p>Filed <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/862\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/862\">rust-analyzer#862</a> with list of the requirements.  It's called <code>\"Finalize\" design of syntax trees</code> and I hope to close it \"soon-ish\".</p>\n<p>With syntax trees in place, we can do some bold experiments, like porting rustfmt to them (which would fix an annoyng \"can't format if there are syntax errors\" issue) or producing rustc AST out of them.</p>",
        "id": 158996252,
        "sender_full_name": "matklad",
        "timestamp": 1550684690
    }
]