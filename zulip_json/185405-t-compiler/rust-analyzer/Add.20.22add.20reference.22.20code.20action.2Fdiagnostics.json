[
    {
        "content": "<p>Hi. What are the shortcomings of current type system implementation in <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_ty/src/diagnostics/expr.rs#L156-L160\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_ty/src/diagnostics/expr.rs#L156-L160</a>? I think that's a blocking FIXME for <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/6814\">https://github.com/rust-analyzer/rust-analyzer/issues/6814</a></p>",
        "id": 219703464,
        "sender_full_name": "ivan770",
        "timestamp": 1607771395
    },
    {
        "content": "<p>Pretty much everything under <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3AA-ty\">https://github.com/rust-analyzer/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3AA-ty</a></p>",
        "id": 219708278,
        "sender_full_name": "Laurențiu",
        "timestamp": 1607778664
    },
    {
        "content": "<p>Type inference works mostly fine if you're not doing anything too fancy trait-wise, but it's annoying to have false positives for warning/error diagnostics, so the idea is to avoid that</p>",
        "id": 219708343,
        "sender_full_name": "Laurențiu",
        "timestamp": 1607778748
    },
    {
        "content": "<p>you can run <code>rust-analyzer analysis-stats -v .</code> in some project (that presumably type-checks) to see examples</p>",
        "id": 219709923,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1607781237
    },
    {
        "content": "<p>I don't think that blocks 6814 though, we just should only emit the diagnostic if we have a quickfix. If we have a type mismatch and adding the reference seems to fix the type mismatch, I'd say it's pretty unlikely to be a false positive</p>",
        "id": 219709977,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1607781333
    },
    {
        "content": "<p>hmm looking at the type mismatches in RA right now, it seems our main problem is some kind of problem with coercion to <code>dyn Trait</code>... I wonder if I looked into that before <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 219710034,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1607781422
    },
    {
        "content": "<p>Is it ok to promote <code>once-cell</code> from <code>dev-dependencies</code> to <code>dependencies</code>? Since <code>iter</code> method of <code>ArenaMap</code> doesn't have <code>ExactSizeIterator</code> I can't find any way to get if we have type mismatches without calling <code>iter</code> twice</p>",
        "id": 219960051,
        "sender_full_name": "ivan770",
        "timestamp": 1608028285
    },
    {
        "content": "<p>Related: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/6853#discussion_r543212866\">https://github.com/rust-analyzer/rust-analyzer/pull/6853#discussion_r543212866</a></p>",
        "id": 219960072,
        "sender_full_name": "ivan770",
        "timestamp": 1608028306
    },
    {
        "content": "<p>yup, it should be fine</p>",
        "id": 219960089,
        "sender_full_name": "matklad",
        "timestamp": 1608028318
    },
    {
        "content": "<p>Ok, thanks!</p>",
        "id": 219960190,
        "sender_full_name": "ivan770",
        "timestamp": 1608028363
    },
    {
        "content": "<p>hmm, is there some borrow checking issue there? otherwise it should be completely fine to call <code>body_with_source_map</code> inside the <code>filter_map</code>, it'll be very fast and presumably there won't be many calls anyway</p>",
        "id": 219962683,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1608029884
    },
    {
        "content": "<p>If you are asking about those 3 references above whole iterator logic - yep, borrowck is angry about borrowing <code>self</code> instead of it's fields</p>",
        "id": 219962802,
        "sender_full_name": "ivan770",
        "timestamp": 1608029979
    },
    {
        "content": "<p>Moving <code>body_with_source_map</code> to <code>filter_map</code> would only remove <code>owner</code>, while leaving <code>infer</code> and <code>sink</code> intact</p>",
        "id": 219962931,
        "sender_full_name": "ivan770",
        "timestamp": 1608030054
    },
    {
        "content": "<p>I'm asking about the use of <code>Lazy</code></p>",
        "id": 219964108,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1608030722
    },
    {
        "content": "<p>Hmm. Removing <code>Lazy</code> still leaves us with <code>owner</code> because  of borrowck, but I can return <code>once-cell</code> back to <code>dev-dependencies</code></p>",
        "id": 219967125,
        "sender_full_name": "ivan770",
        "timestamp": 1608032658
    }
]