[
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> , I'm looking into adding better support for the <code>core</code> and <code>alloc</code> traits when analyzing a project that uses <code>rust-project.json</code>. <code>core</code> is especially tricky because its <code>extern crate core;</code> statement is added by <code>#![no_std]</code>.</p>\n<p>We can solve this outside of RA by just including <code>core</code> and <code>alloc</code> as automatic dependencies in all roots, even if unused. Though it is adding unnecessary dependencies for the vast majority of crates.</p>\n<p>I was wondering if it would make sense to have them specialized in <code>rust-project.json</code> since they're not included in the list of externs passed to rustc. Either through some kind of flag or matching by name.</p>",
        "id": 205187328,
        "sender_full_name": "Paul Faria",
        "timestamp": 1595899113
    },
    {
        "content": "<p>So, it’s not „them“, it’s „sysrroot crate don‘t have to be explicitly specified on he command line“. rust-analyzer deliberately lacks the concept of sysroot and requires every dependency to be explicit. So, just adding them to all te crates is how this should work</p>",
        "id": 205202785,
        "sender_full_name": "matklad",
        "timestamp": 1595919001
    },
    {
        "content": "<p>Ok, and I assume that means there's no harm in leaving in, for example, <code>std</code> in a <code>no_std</code> context. Is that a safe assumption to make?</p>",
        "id": 205238705,
        "sender_full_name": "Paul Faria",
        "timestamp": 1595944859
    },
    {
        "content": "<p>Yup, that is a safe assumption</p>",
        "id": 205238906,
        "sender_full_name": "matklad",
        "timestamp": 1595944926
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 205240652,
        "sender_full_name": "Paul Faria",
        "timestamp": 1595945698
    },
    {
        "content": "<p>hmm, couldn't it influence import path generation?</p>",
        "id": 205243086,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1595946814
    },
    {
        "content": "<p>I think you can <code>extern crate std</code> in an otherwise <code>![no_std] </code> crate?<br>\n`</p>",
        "id": 205243275,
        "sender_full_name": "matklad",
        "timestamp": 1595946925
    },
    {
        "content": "<p>Yes, you can explicitly import any sysroot crate. <code>#![no_std]</code> just disables the implicit <code>extern crate std</code> and changes the prelude to refer to libcore instead of libstd.</p>",
        "id": 205243503,
        "sender_full_name": "bjorn3",
        "timestamp": 1595947038
    },
    {
        "content": "<p>the import path code looks at presence of <code>#![no_std]</code> to decide which crate to prefer</p>",
        "id": 205243525,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595947053
    },
    {
        "content": "<p>On embedded targets libstd literally is not present though</p>",
        "id": 205243632,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595947094
    },
    {
        "content": "<p>Ok, so our assumption that we can just directly provide <code>core</code> and <code>std</code> as deps for all crates in <code>rust-project.json</code> is the correct path forward?</p>",
        "id": 205265835,
        "sender_full_name": "woody77",
        "timestamp": 1595957428
    }
]