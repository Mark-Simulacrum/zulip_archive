[
    {
        "content": "<p>Hey! I wanted to call attention to the VS Code July update, which has shipped the now-stable <a href=\"https://code.visualstudio.com/updates/v1_59#_testing-apis\">Native Test UI</a>. I've update the <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/3601\">tracking issue (#3601)</a> with all the links.</p>\n<p>I think it would be amazing to provide integrations for this. A full guide how to build for this is available <a href=\"https://code.visualstudio.com/api/extension-guides/testing\">here</a>. Maybe someone would be interested in prototyping something for this?</p>",
        "id": 248602072,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1628251504
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> oh haha, nice -- thanks for merging both issues ^^</p>",
        "id": 248602232,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1628251602
    },
    {
        "content": "<p>Yeah, I had a suspicion that I am opening a dupe, but I didn't acted on it!</p>",
        "id": 248602286,
        "sender_full_name": "matklad",
        "timestamp": 1628251649
    },
    {
        "content": "<p>Thanks for adding a lot of context to the issuer, that's super helpful!</p>",
        "id": 248602302,
        "sender_full_name": "matklad",
        "timestamp": 1628251671
    },
    {
        "content": "<p>haha, yay glad it's good</p>",
        "id": 248602515,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1628251808
    },
    {
        "content": "<p>would it be useful to direct folks towards this (e.g. via twitter, etc?) in case anyone's interested in prototyping this?</p>",
        "id": 248602535,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1628251830
    },
    {
        "content": "<p>Seems fine! It's not E-easy, but perhaps indeed a <code>good-first-issue</code> (for adventerous folks)</p>",
        "id": 248602623,
        "sender_full_name": "matklad",
        "timestamp": 1628251914
    },
    {
        "content": "<p>cool, yay!</p>",
        "id": 248602868,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1628252124
    },
    {
        "content": "<p>I wanted to support VSCode Native UI tests for a wile, and even did a prototype using early test API. But there is a <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/5765\">WIP PR</a> and looks like it's not abandoned, so I'm just waiting :)</p>",
        "id": 248843049,
        "sender_full_name": "vsrs",
        "timestamp": 1628514542
    },
    {
        "content": "<p>reviewing that might be helpful :0)</p>",
        "id": 248843361,
        "sender_full_name": "matklad",
        "timestamp": 1628514660
    },
    {
        "content": "<p>I'll try to help :)</p>",
        "id": 248843845,
        "sender_full_name": "vsrs",
        "timestamp": 1628514848
    },
    {
        "content": "<p>Hey! It's been over two months since the native test UI was introduced in VS Code, and we're still short of an implementation. The PR at <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/5765\">#5765</a> has been making some progress, but from what I gather it's unclear how much longer it'll need.</p>\n<p>Ryan and I have 3 days next week to work on something we think is important (MS internal hackathon), and we were wondering what we could do to help land an MVP to support Native Testing into Rust-Analyzer during that period. Perhaps there's a subset of <a href=\"https://github.com/rust-lang/rust/issues/5765\">#5765</a> / or a set of incremental PRs we can make to help land this feature? Any input on how we can help here would be helpful, as this is something we'd love to get working!</p>\n<p>cc/ @matklad</p>",
        "id": 256419324,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1633530103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> ^</p>",
        "id": 256419520,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1633530168
    },
    {
        "content": "<p>Yeah, I think it might be good to learn form <a href=\"https://github.com/rust-lang/rust/issues/5765\">#5765</a> (cc <span class=\"user-mention\" data-user-id=\"263228\">@Mr Smeet</span>) and slice the elephant into shippable hamburgers already. </p>\n<p>The main issue here is around the fact that the API in VS Code expects a global, live view of all the tests in the project. This is not something we should try to support -- gathering live semantic information across the whole codebase is not scalable. </p>\n<p>So, the elements of the solution we should provide on the server side are:</p>\n<ul>\n<li>expose the information about the cargo project structure (which packages and targets are there)</li>\n<li>expose information about available tests in a specific file (this is already available via runnables)</li>\n</ul>\n<p>The VS Code side of things should combine these two sources of information and feed them into the test UI. Additionally, VS Code side should be in charge of actually running <code>cargo test</code>, collecting test results, and displaying which tests were run after the fact.</p>",
        "id": 256424444,
        "sender_full_name": "matklad",
        "timestamp": 1633532033
    },
    {
        "content": "<p>It would also be nice to check if there's any progerss on support for this on the LSP side</p>",
        "id": 256424873,
        "sender_full_name": "matklad",
        "timestamp": 1633532167
    },
    {
        "content": "<p>Yay, thanks! Yeah that all sounds like something we should be able to do!</p>",
        "id": 256425276,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1633532307
    },
    {
        "content": "<p>Now finished vscode side, partially finished castom LSP method ( excluding enum pucking, I am just pass but serde doc clear), olso now I am partially implement salsa ide database for runnable</p>",
        "id": 256426924,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1633532876
    },
    {
        "content": "<p>Some code staged I try push it tomorrow</p>",
        "id": 256427402,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1633533033
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298653\">@vsrs</span> yep, help and review are welcome. Also I disagree with <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> about that Ra can't provide live semantic, also I think Ra itself should run test and provide run configuration.</p>",
        "id": 256428013,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1633533261
    },
    {
        "content": "<p>It is also useful for implementation live rerun tracking, semantic history or runs, extension Ra in future for different run configuration and etc</p>",
        "id": 256428294,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1633533366
    },
    {
        "content": "<p>Now LSP side run method it is just like tree algebra interaction operation - I write clear simple comment on Vs code side methods</p>",
        "id": 256428506,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1633533443
    },
    {
        "content": "<p>I started working on this even before the api stabilized, on the one hand it is a little unpleasant for me that it took so long, but it took me a little more time to understand the code base of the project and some internal agreements.  It also hooked up a surprisingly large amount of code.</p>",
        "id": 256428910,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1633533580
    },
    {
        "content": "<p>I am currently working on separating the ide view and the salsa view of the tests (the db implementation itself). What I haven't done yet is Sals integration. I mean the code that is needed for my salsa db to start working in the same way as the example works with the symbol database or something else. I would be very grateful if someone gave hints, it would save a day or two</p>",
        "id": 256508678,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1633569024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/VS.20Code.20test.20UI.20integration/near/256424444\">said</a>:</p>\n<blockquote>\n<ul>\n<li>expose the information about the cargo project structure (which packages and targets are there)</li>\n</ul>\n</blockquote>\n<p>Hey, we're looking at how to do this. We'd love some pointers on how we could best go about this. The way we understand this it should be exposed from the <code>ide</code> crate, but not sure what that should look like, or what the parts underneath it would be. Some pointers would be great!</p>\n<p>cc/ <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span></p>",
        "id": 257181054,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1634034688
    },
    {
        "content": "<p>Yeah, indeed. This should <em>not</em> be exposed from the <code>ide</code> crate, as that, by design, knows nothing about Cargo.</p>",
        "id": 257183904,
        "sender_full_name": "matklad",
        "timestamp": 1634036434
    },
    {
        "content": "<p>This functionality should be implemented directly in the <code>rust-analyzer</code> crate. </p>\n<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/1cca1fa5bff7bdb4060be938a949380df4e210c7/crates/rust-analyzer/src/handlers.rs#L1434-L1450\">https://github.com/rust-analyzer/rust-analyzer/blob/1cca1fa5bff7bdb4060be938a949380df4e210c7/crates/rust-analyzer/src/handlers.rs#L1434-L1450</a> </p>\n<p>would be a good example of a similarish thing to look at -- that also is a feature which exposes (some part of) cargo model via LSP</p>",
        "id": 257184022,
        "sender_full_name": "matklad",
        "timestamp": 1634036501
    },
    {
        "content": "<p>I'm currently working on a delta update and am almost done with the patch. <br>\nTo be honest, I do not agree with many of Kladov's statements. This is neither good nor bad. It's just the way I see it as a convenient tool for me.<br>\nI have already made comments more than once about why the engineering solutions proposed by Kladov are bad from my point of view.<br>\nFor example, let's take the suggestion that VS Code should run tests.<br>\nThen we have a problem with what to do if the user has closed the program. What about the fact that RA is a backend that can work with other frontends. What about other features like automatic restarts and test histories.</p>",
        "id": 267862729,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1642077518
    },
    {
        "content": "<p>About scaling, I also gave quite reasonable comments.  If necessary, I am ready to discuss and explain why it scales and why we should do it this way and not otherwise.<br>\nIn short, I talked to people in many chats and asked which behavior was more convenient for them. And they all chose my model. In any case, my implementation will remain as it is, because I still have some amount of effort that I am willing to put into the current code. But there is no other model to implement, given that I find it wrong</p>",
        "id": 267862992,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1642077695
    },
    {
        "content": "<p>Ultimately, I want to see advanced features and my understanding of scalability suggests that it will take a few seconds on a cold start for medium projects and a couple of minutes for large projects. But even so, this is only a cold start, we have an incrementality, which means that all this will not be expandable within the file or in corner cases of the type of macros</p>",
        "id": 267863247,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1642077843
    },
    {
        "content": "<p>There is more information in PR, which is currently closed by Kladov, due to the fact that the implementation does not satisfy its release. But I hope, as we have stipulated that after the demonstration of the work. He will change the decision to merge</p>",
        "id": 267863328,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1642077914
    },
    {
        "content": "<p>Now i need use <a href=\"https://github.com/godcodehunter/rust-analyzer/blob/fe3d4658d5b7eaecb143c4d271b476ce3f67c536/crates/rust-analyzer/src/lsp_ext.rs#L532\">https://github.com/godcodehunter/rust-analyzer/blob/fe3d4658d5b7eaecb143c4d271b476ce3f67c536/crates/rust-analyzer/src/lsp_ext.rs#L532</a> inside <a href=\"https://github.com/godcodehunter/rust-analyzer/blob/test-and-run-vs-integration/crates/ide_db/src/runnables.rs\">https://github.com/godcodehunter/rust-analyzer/blob/test-and-run-vs-integration/crates/ide_db/src/runnables.rs</a> for prepare delta updates. But how i can do it?</p>",
        "id": 267863877,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1642078240
    },
    {
        "content": "<p>If directly add dependency rust-analyzer we got cycles error <br>\nerror: cyclic package dependency: package <code>ide v0.0.0 (/home/mrsmith/Desktop/rust-analyzer/crates/ide)</code> depends on itself. Cycle:<br>\npackage <code>ide v0.0.0 (/home/mrsmith/Desktop/rust-analyzer/crates/ide)</code><br>\n    ... which satisfies path dependency <code>ide</code> (locked to 0.0.0) of package <code>rust-analyzer v0.0.0 (/home/mrsmith/Desktop/rust-analyzer/crates/rust-analyzer)</code><br>\n    ... which satisfies path dependency <code>rust-analyzer</code> (locked to 0.0.0) of package <code>ide_db v0.0.0 (/home/mrsmith/Desktop/rust-analyzer/crates/ide_db)</code><br>\n    ... which satisfies path dependency <code>ide_db</code> (locked to 0.0.0) of package <code>ide_assists v0.0.0 (/home/mrsmith/Desktop/rust-analyzer/crates/ide_assists)</code><br>\n    ... which satisfies path dependency <code>ide_assists</code> (locked to 0.0.0) of package <code>ide v0.0.0 (/home/mrsmith/Desktop/rust-analyzer/crates/ide)</code></p>",
        "id": 267864073,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1642078343
    },
    {
        "content": "<p><code>ide_db</code> definitely should not depend on <code>rust-analyzer</code>, the cycle there is expected since both would depend on each other as well</p>",
        "id": 267870469,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1642081689
    },
    {
        "content": "<p>It seems rather odd that <code>ide</code>(or <code>ide_db</code> in this case) would need to know about requests</p>",
        "id": 267870565,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1642081755
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300586\">Lukas Wirth</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/VS.20Code.20test.20UI.20integration/near/267870565\">said</a>:</p>\n<blockquote>\n<p>It seems rather odd that <code>ide</code>(or <code>ide_db</code> in this case) would need to know about requests</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><code>trait ChangeObserver {\n    fn delete(&amp;mut self, item: &amp;T);\n    fn append(&amp;mut self);\n    fn update(&amp;mut self);\n}\n\nstruct DeltaSynchronizer {\n    patch: rust_analyzer::lsp_ext::Patch,\n}\n\nimpl ChangeObserver for DeltaSynchronizer {\n    fn delete(&amp;mut self, item: &amp;RunnableView) {\n        self.patch.delete.push(item as usize);\n    }\n\n    fn append(&amp;mut self, ) {\n        todo!()\n    }\n\n    fn update() {\n        todo!()\n    }\n}\n\nstruct Executor {\n    current_status: FxHashMap&lt;,&gt;,\n    executing: ,\n}\n\nimpl Executor {\n    fn handle_request(params: &amp;rust_analyzer::lsp_ext::RunTestsParams) {\n\n    }\n}\n</code></pre></div>\n<p>Briefly what I want to do <br>\nYes, I understand that what I'm trying to do is wrong. I'm rather looking for advice on how I could do it differently.</p>",
        "id": 267871750,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1642082315
    },
    {
        "content": "<p>The problem is that I don‚Äôt really want to copy types, because in general, the extension was made as implementation-dependent, but it‚Äôs not entirely clear yet how to do it differently. From the ideas of how it could be done quickly, just create copies of the types and convert them</p>",
        "id": 267872085,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1642082449
    },
    {
        "content": "<p>I just want to get rid of the problem of refactoring and separating the interface and types later. In general, this is the place where I would like to consult with someone</p>",
        "id": 267872213,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1642082514
    },
    {
        "content": "<p>Or maybe I should consider this code as part of rust-analyzer crate</p>",
        "id": 267872478,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1642082626
    },
    {
        "content": "<p>Instead of pulling the lsp_ext type you could just model a new type that has the things you want, then convert that to the <code>lsp_ext</code> type in the <code>rust_analyzer</code> crate</p>",
        "id": 267879681,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1642085734
    },
    {
        "content": "<p>Hmm, I think the best way is to separate the explicit running (something like run_tests) of the tests and all the work related to processing the request into separate parts of the code.</p>",
        "id": 267961410,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1642128405
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span> <br>\nWhat should I do if I need to save data somewhere when processing a request in main_loop?<br>\nI'll explain, first I'm creating a subscription system. That is, the client can subscribe to changes in certain data.<br>\nAccordingly, I need to store subscriptions associated with each client somewhere. Further, the test tree subscription uses a special structure - the date synchronizer. And also I have a structure that stores test runs.</p>",
        "id": 268133861,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1642264316
    },
    {
        "content": "<p>For example <br>\n.on::&lt;lsp_ext::SubscriptionRequest&gt;(|this, params| {<br>\n                let param = params.data_objects[0];<br>\n                let unknown = Vec::new();<br>\n                match param {<br>\n                    \"tests_view\" =&gt; /* there i must associate subscription to tests_view with client */ ,<br>\n                    _ =&gt; unknown.push(param),<br>\n                }<br>\n                Ok(())<br>\n            })?</p>",
        "id": 268133953,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1642264420
    },
    {
        "content": "<p>How does the Rust Analyzer keep track of the current client, or do we create own copy of the Rust Analyzer for each client?</p>",
        "id": 268140394,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1642272434
    },
    {
        "content": "<p>Each editor spawns it's own rust-analyzer process. There is no ipc between different rust-analyzer processes at the moment. (May be nice for vim though to avoid having to restart it every time you reopen vim)</p>",
        "id": 268140723,
        "sender_full_name": "bjorn3",
        "timestamp": 1642272867
    },
    {
        "content": "<p>Now what i am designed - I am add new field to GlobalState <br>\npub(crate) followed_data: std::collections::HashSet&lt;FollowedData&gt;,<br>\nIt is contain just data identifier now is it just a String, so we just add for what data we subscribe but now i am try come up with how subscription start should work <br>\nin short i have </p>\n<div class=\"codehilite\"><pre><span></span><code>trait ChangeObserver&lt;T, U&gt; {\n    fn delete(&amp;mut self, target: &amp;T, item: &amp;T);\n    fn append(&amp;mut self, target: &amp;T, item: &amp;T);\n    fn update(&amp;mut self, target: &amp;T, update: U);\n}\n\nstruct DeltaSynchronizer {\n    patch: rust_analyzer::lsp_ext::Patch,\n}\n\nimpl ChangeObserver&lt;RunnableView, &gt; for DeltaSynchronizer {\n    fn delete(&amp;mut self, target: &amp;RunnableView, item: &amp;RunnableView) {\n        self.patch.delete.push(item as usize);\n    }\n\n    fn append(&amp;mut self, target: &amp;RunnableView, item: &amp;RunnableView) {\n        todo!()\n    }\n\n    fn update(&amp;mut self,) {\n        todo!()\n    }\n}\n</code></pre></div>\n<p>that track all changes after salsa complite work</p>",
        "id": 268182460,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1642337166
    },
    {
        "content": "<p>Main question where synhronizer should be placed and what code and how should it create</p>",
        "id": 268182467,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1642337206
    },
    {
        "content": "<p>Do we have some established way of doing asynchronous tasks? I plan to run tests in a separate process using cargo<br>\nFor example i plane use something like tokio::spawn( async move { let res = kek.await(); callback(res); }); or with FutureExt like tokio::spawn(kek.await.then(callback))</p>",
        "id": 269327533,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1643146154
    },
    {
        "content": "<p>There is a thread pool used for most requests</p>",
        "id": 269394895,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1643196249
    },
    {
        "content": "<p>Yes, I looked at the code yesterday. But let's imagine that we need to create about 30 test executions. If i correct remember Command use classic fork+exec+pipe implementation so... that code always blocking</p>",
        "id": 269429673,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1643211103
    },
    {
        "content": "<p>Default for thread pool use cpu_thread num as init num thread for pool My machine has 32 threads, but they will be exhausted after up 30 command</p>",
        "id": 269429969,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1643211217
    },
    {
        "content": "<p>hmm, why do we have to spawn so many tests manually? cargo already parallelizes them</p>",
        "id": 269432085,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1643212031
    },
    {
        "content": "<p>To be able to control the execution, that is, to kill separately</p>",
        "id": 269434878,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1643212845
    },
    {
        "content": "<p>I resolve this, Child have non blocking try_wait so we can use just one thread for all process</p>",
        "id": 269434977,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1643212885
    },
    {
        "content": "<p>Hello. Such a question who understands the structure of casts and the global state?<br>\nI need access to db at executor (<a href=\"https://github.com/godcodehunter/rust-analyzer/blob/test-and-run-vs-integration/crates/rust-analyzer/src/executor.rs\">https://github.com/godcodehunter/rust-analyzer/blob/test-and-run-vs-integration/crates/rust-analyzer/src/executor.rs</a>), executor places at global state (<a href=\"https://github.com/godcodehunter/rust-analyzer/blob/test-and-run-vs-integration/crates/rust-analyzer/src/global_state.rs\">https://github.com/godcodehunter/rust-analyzer/blob/test-and-run-vs-integration/crates/rust-analyzer/src/global_state.rs</a>) because it mast need live permanently, but analysis can get by call analysis_host. So any idea how correct it can be resolved?</p>",
        "id": 275901748,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1647684052
    },
    {
        "content": "<p>Guys, I have a question. Right now I'm working on the last problem that needs to be solved for testing. <br>\nIn short, I need to solve the following problem.<br>\nImagine we just have the result of calculating the queue in salsa (for example Vec&lt;usize&gt;). How could we reuse the same data structure when calculating, suppose by reference  (&amp;Vec&lt;usize&gt;).</p>",
        "id": 277724578,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1649076031
    },
    {
        "content": "<p>I'm not sure I understand question, what do you mean with reuse</p>",
        "id": 277724701,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1649076103
    },
    {
        "content": "<p>I mean that I need to change the same object by reference in order to track its changes.</p>",
        "id": 277724884,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1649076186
    },
    {
        "content": "<p>I plane wrap object by wrapper that collect all changes. But for this to be possible it must be the same object in memory</p>",
        "id": 277725066,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1649076271
    },
    {
        "content": "<p>Just image you have tree of all test, and after some salsa work only one brunch changed so i try as i can explain idea</p>",
        "id": 277725161,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1649076336
    },
    {
        "content": "<p>The value you get back from salsa queries are always clones of the query result. I don't think you can do diff based work like that with our current setup.</p>",
        "id": 277725322,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1649076406
    },
    {
        "content": "<p>Well, maybe I could get around this by using a global variable?</p>",
        "id": 277725407,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1649076471
    },
    {
        "content": "<p>No :)</p>",
        "id": 277725489,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1649076499
    },
    {
        "content": "<p>Hmm, that problem</p>",
        "id": 277725520,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1649076521
    },
    {
        "content": "<p>Global mutable state is pretty much never an option for us here.</p>",
        "id": 277725522,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1649076522
    },
    {
        "content": "<p>The best you could try to do is save data in the <code>GlobalState</code> struct, but even there I am not sure how well you could do things like that</p>",
        "id": 277725550,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1649076546
    },
    {
        "content": "<p>I am not familiar with that part of the codebase</p>",
        "id": 277725561,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1649076554
    },
    {
        "content": "<p>I'm asking about a fundamental possibility until I find a better option</p>",
        "id": 277725578,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1649076566
    },
    {
        "content": "<p>Well, for now, I store the executable tests there and their results in a data structure Executor that interact with  vs code through lsp.</p>",
        "id": 277725787,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1649076660
    },
    {
        "content": "<p>But the key problem is the transfer of changes.</p>",
        "id": 277725885,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1649076715
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span> Is there any place where I can find people familiar with salsa?</p>",
        "id": 277726044,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1649076770
    },
    {
        "content": "<p>There is <a href=\"https://salsa.zulipchat.com\">https://salsa.zulipchat.com</a>, but I don't think you'll find much there either.</p>",
        "id": 277726116,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1649076815
    },
    {
        "content": "<p>Well, at least I'll try.  Thanks</p>",
        "id": 277726223,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1649076854
    },
    {
        "content": "<p>if you want to send diffs to the client, the right thing to do is to do the diffing and keep a copy for that in the code that sends the LSP messages</p>",
        "id": 277728637,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1649077957
    },
    {
        "content": "<p>i.e. keep the copy in some struct in <code>GlobalState</code></p>",
        "id": 277728694,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1649077991
    }
]