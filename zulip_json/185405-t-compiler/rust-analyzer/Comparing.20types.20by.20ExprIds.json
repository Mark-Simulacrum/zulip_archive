[
    {
        "content": "<p>Hi. I'm new to RA development, so there is a question I can't find any answer to - how do I compare types by ExprIds? I'm currently trying to implement <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/6739\">https://github.com/rust-analyzer/rust-analyzer/issues/6739</a> by checking for missing tail expression, and comparing last statement type with body type.</p>",
        "id": 219221272,
        "sender_full_name": "ivan770",
        "timestamp": 1607441956
    },
    {
        "content": "<p>You need to look up its type in the <code>InferenceResult</code></p>",
        "id": 219221406,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607442023
    },
    {
        "content": "<p>Thanks, it worked! Looks like I have some naive implementation, though it seems to be working <a href=\"/user_uploads/4715/KT82fNXOA1z-QJOHybH2MxSV/demo.mp4\">demo.mp4</a></p>",
        "id": 219228100,
        "sender_full_name": "ivan770",
        "timestamp": 1607444877
    },
    {
        "content": "<p>Can I get some code review please? <a href=\"https://github.com/ivan770/rust-analyzer/commit/cb66bb8ff9609d4fc3702ac1ed6197802b54e473\">https://github.com/ivan770/rust-analyzer/commit/cb66bb8ff9609d4fc3702ac1ed6197802b54e473</a><br>\n<a href=\"/user_uploads/4715/5ZeQlYrObud_VkrICi9t6Fj_/demo2.mp4\">demo2.mp4</a></p>",
        "id": 219246079,
        "sender_full_name": "ivan770",
        "timestamp": 1607453347
    },
    {
        "content": "<p>neat!</p>",
        "id": 219246277,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607453442
    },
    {
        "content": "<p>The code looks pretty good to me. If you submit a PR we can do a proper review.</p>",
        "id": 219248699,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1607454641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> Hi. Can you help me a bit with that part? <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/6769#discussion_r540146705\">https://github.com/rust-analyzer/rust-analyzer/pull/6769#discussion_r540146705</a><br>\nI can't find any way to obtain ExprStmt, as AstNode casts don't work here because of different kinds.</p>",
        "id": 219491040,
        "sender_full_name": "ivan770",
        "timestamp": 1607615488
    },
    {
        "content": "<p>Hm, riiight, good question</p>",
        "id": 219491347,
        "sender_full_name": "matklad",
        "timestamp": 1607615608
    },
    {
        "content": "<p>We don't actually store info about <em>statements</em> in the source map yet</p>",
        "id": 219491392,
        "sender_full_name": "matklad",
        "timestamp": 1607615628
    },
    {
        "content": "<p>I guess that means that we should stick to an <code>ast::Expr</code> here</p>",
        "id": 219491460,
        "sender_full_name": "matklad",
        "timestamp": 1607615642
    },
    {
        "content": "<p>Then, in the fix, where you care getting the <code>;</code>, you can write <code>expr.syntax().parent().and_then(ast::ExprStmt::cast).and_then(|it| it.semicolon_token())</code>.</p>",
        "id": 219491639,
        "sender_full_name": "matklad",
        "timestamp": 1607615703
    },
    {
        "content": "<p>Thanks, it worked!</p>",
        "id": 219493990,
        "sender_full_name": "ivan770",
        "timestamp": 1607616666
    }
]