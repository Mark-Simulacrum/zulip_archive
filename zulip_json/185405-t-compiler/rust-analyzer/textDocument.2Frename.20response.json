[
    {
        "content": "<p>Hi! I noticed that the response that comes back from rust-analyzer when issuing a textDocument/rename on a document that needs N edits in it is a list of N <code>TextDocumentEdit</code>s with a single <code>TextEdit</code> in it.</p>\n<blockquote>\n<p>A TextDocumentEdit describes all changes on a version Si and after they are applied move the document to version Si+1. So the creator of a TextDocumentEdit doesnâ€™t need to sort the array of edits or do any kind of ordering</p>\n</blockquote>\n<p>The LSP specification there implies to me that applying a <code>TextDocumentEdit</code> \"changes\" the version of the document, so applying subsequent <code>TextDocumentEdit</code>s on it without going back to the server is potentially invalid. This is in fact an issue right now in LanguageClient-neovim, and I suppose we could solve it by grouping the edits by the text document's uri, but I feel like that is not the way it's intended to be used. </p>\n<p>Is there any reason that that is not a single <code>TextDocumentEdit</code> with N <code>TextEdit</code>s instead of the current response?</p>\n<p>(btw, I can open an issue, just wanted to check if there's some reason that I'm missing for it to reply in that way)</p>",
        "id": 200947801,
        "sender_full_name": "Martin Asquino",
        "timestamp": 1592256250
    },
    {
        "content": "<p>I think that's just the way it's currently implemented. I don't think we check <code>workspace.workspaceEdit.documentChanges</code> either</p>",
        "id": 200949196,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1592257028
    },
    {
        "content": "<p>Not sure what you mean by <code>check</code> there, but it seems like VSCode handles this rename correctly, so I suspect there is some additional handling of the results there. I haven't checked this myself though, I just have checked the vim side of this, but the person who raised this issue claims it works in VSCode with the rust-analyzer extension.</p>\n<p>In any case, do you think is something that needs fixing then? Should I open an issue about it?</p>",
        "id": 200949458,
        "sender_full_name": "Martin Asquino",
        "timestamp": 1592257206
    },
    {
        "content": "<p>I'm going off this here: <a href=\"https://microsoft.github.io/language-server-protocol/specifications/specification-3-16/#workspaceEdit\">https://microsoft.github.io/language-server-protocol/specifications/specification-3-16/#workspaceEdit</a></p>",
        "id": 200949515,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1592257259
    },
    {
        "content": "<p>I'm wondering if  this affects \"undo\" behavior. Are you seeing any weirdness? It may be worth filing an issue as it sounds like suboptimal behavior</p>",
        "id": 200949865,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1592257446
    },
    {
        "content": "<p>It kinda does yeah. To undo a rename in vim you have to press <code>u</code> once for each change in the document, whereas in other servers you just press it once and it rolls back that rename.</p>",
        "id": 200949945,
        "sender_full_name": "Martin Asquino",
        "timestamp": 1592257498
    },
    {
        "content": "<p>But more importantly, it's messing up the edits themselves when there are two edits in the same line, because if the leftmost edit is applied first then the range for the rightmost one is incorrect.</p>",
        "id": 200950086,
        "sender_full_name": "Martin Asquino",
        "timestamp": 1592257566
    },
    {
        "content": "<p>LanguageClient-neovim handles this when there are multiple edits in a single TextDocumentEdit by sorting the edits in a document by character, and applying them from right to left. But it can't be done as it is now because there's effectively a single edit for each TextDocumentEdit.</p>",
        "id": 200950183,
        "sender_full_name": "Martin Asquino",
        "timestamp": 1592257624
    },
    {
        "content": "<p>filed <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/4901\">https://github.com/rust-analyzer/rust-analyzer/issues/4901</a></p>",
        "id": 200951239,
        "sender_full_name": "Martin Asquino",
        "timestamp": 1592258289
    },
    {
        "content": "<p>Btw, forgive me if any of that comes as a criticism, my english sometimes fails in correctness, but I have nothing but admiration for the work you folks are doing with rust-analyzer. <span aria-label=\"bow\" class=\"emoji emoji-1f647\" role=\"img\" title=\"bow\">:bow:</span></p>",
        "id": 200951319,
        "sender_full_name": "Martin Asquino",
        "timestamp": 1592258358
    },
    {
        "content": "<p>Good catch! thanks for filing the issue :)</p>",
        "id": 201030160,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1592320477
    }
]