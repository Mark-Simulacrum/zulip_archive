[
    {
        "content": "<p>So, a few days ago I removed logic that always highlighted attributes as attributes even if they didn't resolve, as we no resolve builtin(inert) attributes, but it turns out this is still required due to (derive) helper attributes, as these will now not get mapped down into the macro expansion resulting in unresolved references.<br>\nThis can be easily fixed for derive helpers specifically, as derive attributes actually have to declare these upfront, but for general attributes we don't have this, example being salsa using a bunch of helper attributes in its input for the query configurations.<br>\nNow I was wondering if it would make sense to nudge proc-macro authors to expose or map these helper attributes down to aid IDEs. What I mean with this is, taking salsa as an example again, when you have the following snippet here:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[salsa::query_group(HirDatabaseStorage)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">HirDatabase</span>: <span class=\"nc\">DefDatabase</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Upcast</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">DefDatabase</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[salsa::invoke(infer_wait)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[salsa::transparent]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">infer</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">def</span>: <span class=\"nc\">DefWithBodyId</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Arc</span><span class=\"o\">&lt;</span><span class=\"n\">InferenceResult</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Salsa could expose a dummy attribute that doesn't do anything under the paths <code>salsa::invoke</code> and <code>salsa::transparent</code> which we would simply resolve as we can't map them down to anything other in the macro expansion. This has the nice side benefit that the helpers can even be documented, providing docs on hover at the expense of having to expose more attributes from the main crate(in this case on the top level even).</p>\n<p>cc <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/10935\">rust-analyzer#10935</a></p>",
        "id": 263763005,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1638702595
    },
    {
        "content": "<p>We might want to check on the IntelliJ folks here though and check what they do with these unresolved helper attributes and whether they could make use of this as well.</p>",
        "id": 263763132,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1638702786
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> I surely would love <code>#[salsa::]</code> to get code completion as well...</p>",
        "id": 263764345,
        "sender_full_name": "matklad",
        "timestamp": 1638704688
    },
    {
        "content": "<p>That's another aspect that might <em>just</em> work then as well? Since we can't downmap those attributes we will do completion inside the attribute input which is just a well formed item, so that should just work. I'll try experimenting with that.</p>",
        "id": 263764796,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1638705443
    },
    {
        "content": "<p>Apparently we never even had completions for attributes in the first place? <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>",
        "id": 263772362,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1638716495
    },
    {
        "content": "<p>Well after adding attribute completions to r-a, this seems to work together with an adjustment to salsa that makes it not error out on unknown helper attributes <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <a href=\"/user_uploads/4715/s2Ww506HVr1wq6ipTgjXVBzg/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/s2Ww506HVr1wq6ipTgjXVBzg/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/s2Ww506HVr1wq6ipTgjXVBzg/image.png\"></a></div>",
        "id": 263772634,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1638716847
    },
    {
        "content": "<p>(Note that r-a doesn't seem to take <code>compile_error!</code> spans into account here properly <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> )</p>",
        "id": 263772666,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1638716876
    }
]