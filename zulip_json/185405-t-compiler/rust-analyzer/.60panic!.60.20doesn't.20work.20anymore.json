[
    {
        "content": "<p>The definition of <code>panic!</code> was changed, so now it's broken in rust-analyzer:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[rustc_builtin_macro = </span><span class=\"s\">\"std_panic\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"cp\">#[stable(feature = </span><span class=\"s\">\"rust1\"</span><span class=\"cp\">, since = </span><span class=\"s\">\"1.0.0\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[allow_internal_unstable(edition_panic)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[cfg_attr(not(test), rustc_diagnostic_item = </span><span class=\"s\">\"std_panic_macro\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">panic</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Expands to either `$crate::panic::panic_2015` or `$crate::panic::panic_2021`</span>\n<span class=\"w\">    </span><span class=\"c1\">// depending on the edition of the caller.</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$($arg</span>:<span class=\"nc\">tt</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cm\">/* compiler built-in */</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This is the only use of <code>#[rustc_builtin_macro = \"std_panic\"]</code> with a string argument, for some reason.</p>",
        "id": 232962056,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617404729
    },
    {
        "content": "<p>Ah, that's because in libcore it uses <code>core_panic</code> instead</p>",
        "id": 232962088,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617404758
    },
    {
        "content": "<p>Doesn't seem hard to implement, I'll work on this</p>",
        "id": 232965799,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617408015
    },
    {
        "content": "<p>We seem to have problems parsing (?) this macro though:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"kr\">macro</span><span class=\"w\"> </span><span class=\"n\">panic_2015</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">$crate</span>::<span class=\"n\">panicking</span>::<span class=\"n\">panic</span><span class=\"p\">(</span><span class=\"s\">\"explicit panic\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$msg</span>:<span class=\"nc\">literal</span><span class=\"w\"> </span><span class=\"cp\">$(,</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">$crate</span>::<span class=\"n\">panicking</span>::<span class=\"n\">panic</span><span class=\"p\">(</span><span class=\"cp\">$msg</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$msg</span>:<span class=\"nc\">expr</span><span class=\"w\"> </span><span class=\"cp\">$(,</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">$crate</span>::<span class=\"n\">panicking</span>::<span class=\"n\">panic_str</span><span class=\"p\">(</span><span class=\"cp\">$msg</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$fmt</span>:<span class=\"nc\">expr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$($arg</span>:<span class=\"nc\">tt</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">$crate</span>::<span class=\"n\">panicking</span>::<span class=\"n\">panic_fmt</span><span class=\"p\">(</span><span class=\"cp\">$crate</span>::<span class=\"fm\">format_args!</span><span class=\"p\">(</span><span class=\"cp\">$fmt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$($arg</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">panic_2015</span><span class=\"o\">!</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Do we support macro 2.0 with multiple branches?</p>",
        "id": 232967206,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617409546
    },
    {
        "content": "<p>The code says yes</p>",
        "id": 232968146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617410617
    },
    {
        "content": "<p>Ah, it expects <code>;</code> to separate the rules, not <code>,</code></p>",
        "id": 232968659,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617411240
    },
    {
        "content": "<p>we really need to report better errors for malformed macro definitions, the parser has them</p>",
        "id": 232968759,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617411344
    },
    {
        "content": "<p>Landed everything in <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/8304\">https://github.com/rust-analyzer/rust-analyzer/pull/8304</a></p>",
        "id": 232970534,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617413300
    }
]