[
    {
        "content": "<p>Hi! My name is Andrzej and I'm a new contributor to RA. I'm a recent CS graduate (University of Warsaw, Poland) fascinated with programming languages design &amp; dev tooling. Some time ago I stumbled upon matklad 's ERA series and I started binge watching it :D Last week I submitted my first PR and now I'd like to tackle something more ambitious: <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/10295\">https://github.com/rust-analyzer/rust-analyzer/issues/10295</a>, but I will need some guidance.</p>",
        "id": 254074873,
        "sender_full_name": "Andrzej Głuszak",
        "timestamp": 1632154101
    },
    {
        "content": "<p>both problems describes in the issue arise from the fact that the assist currently doesn't rely on semantic information. Relevant pieces of code: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ide_assists/src/handlers/generate_getter.rs#L103\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ide_assists/src/handlers/generate_getter.rs#L103</a><br>\n<a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ide_assists/src/utils.rs#L466\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ide_assists/src/utils.rs#L466</a></p>",
        "id": 254075156,
        "sender_full_name": "Andrzej Głuszak",
        "timestamp": 1632154207
    },
    {
        "content": "<p>You want to query the <code>Semantics</code> for the relevant info here, that is you want to lower the field type ast node to the <code>hir::Type</code> version first with which you can then do the proper checks</p>",
        "id": 254075359,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632154296
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/f1d7f98ed07b9934286b9c4809dd4d7a47537879\\crates\\hir\\src\\semantics.rs#L266\">This</a> should give you the <code>hir::Type</code></p>",
        "id": 254075522,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632154360
    },
    {
        "content": "<p>For checking that <code>String</code> refers to the actual std string type you want to make use of <a href=\"https://github.com/Veykril/rust-analyzer/blob/f1d7f98ed07b9934286b9c4809dd4d7a47537879\\crates\\ide_db\\src\\helpers.rs#L129\"><code>FamousDefs</code></a> to fetch the std String type and compare it, though there is a problem here in that this only contains <code>core</code> definitions currently while we need <code>alloc</code>/<code>std</code> for this</p>",
        "id": 254075967,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632154556
    },
    {
        "content": "<p>I'd like to replace this aptly named function <code>useless_type_special_case</code>with following logic:</p>\n<ol>\n<li>resolve the type using ctx's <code>Semantics</code></li>\n<li>check if the type implements Copy, if yes, we don't need to return a reference</li>\n<li>check if the type implements <code>AsRef&lt;T&gt;</code>, <code>AsRef&lt;[T]&gt;</code> or <code>AsRef&lt;str&gt;</code> - if yes, return <code>self.field.as_ref()</code></li>\n<li>handle the Option case, which appears to be a bit harder</li>\n</ol>",
        "id": 254075977,
        "sender_full_name": "Andrzej Głuszak",
        "timestamp": 1632154558
    },
    {
        "content": "<p>All of those should be doable(maybe not that easily for 3) via querying <code>FamousDefs</code> with the required paths and sources added I believe(doesn't need the <code>std</code>/<code>alloc</code> problem I just mentioned after all if you rely on <code>AsRef</code> actually)</p>",
        "id": 254076254,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632154671
    },
    {
        "content": "<p>1 is easy, as <span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span> wrote, 2 I also figured out, but the rest is not that straightforward</p>",
        "id": 254076274,
        "sender_full_name": "Andrzej Głuszak",
        "timestamp": 1632154679
    },
    {
        "content": "<p>What's the option case(4)?</p>",
        "id": 254076415,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632154735
    },
    {
        "content": "<p>For 3 you should be able to do something like <code>ty.impls_trait(db, as_ref_trait, &amp;[str_primitive_ty])</code> to check for <code>AsRef&lt;str&gt;</code></p>",
        "id": 254076891,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632154928
    },
    {
        "content": "<p>I need to check if the type is Option&lt;&amp;T&gt; for some T - the hard part is figuring out how to handle generic type params, but that's as hard as in 3, but I also don't understand why Option's as_ref does something different than AsRef's one, despite having the same name</p>",
        "id": 254076926,
        "sender_full_name": "Andrzej Głuszak",
        "timestamp": 1632154942
    },
    {
        "content": "<p>Where you would get the <code>as_ref_trait</code> and <code>str_primitive_ty</code> via <code>FamousDefs</code></p>",
        "id": 254076946,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632154949
    },
    {
        "content": "<p>I mean, Option doesn't implement AsRef</p>",
        "id": 254077017,
        "sender_full_name": "Andrzej Głuszak",
        "timestamp": 1632154981
    },
    {
        "content": "<p>but that's related to the language itself, not RA :P</p>",
        "id": 254077050,
        "sender_full_name": "Andrzej Głuszak",
        "timestamp": 1632154996
    },
    {
        "content": "<p>Because Option's <code>as_ref</code> returns an Option again, while the <code>AsRef</code> trait requires to return a reference to something</p>",
        "id": 254077052,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632154997
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300586\">Lukas Wirth</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Semantic.20generate.20getter.20.26.20introduciton/near/254076946\">said</a>:</p>\n<blockquote>\n<p>Where you would get the <code>as_ref_trait</code> and <code>str_primitive_ty</code> via <code>FamousDefs</code></p>\n</blockquote>\n<p>yeah, that's the easier part, but what about generic params?</p>",
        "id": 254077276,
        "sender_full_name": "Andrzej Głuszak",
        "timestamp": 1632155083
    },
    {
        "content": "<p>regarding FamousDefs, why isn't is_copy implemented in terms of it?</p>\n<div class=\"codehilite\"><pre><span></span><code>pub fn is_copy(&amp;self, db: &amp;dyn HirDatabase) -&gt; bool {\n        let lang_item = db.lang_item(self.krate, SmolStr::new(&quot;copy&quot;));\n        let copy_trait = match lang_item {\n            Some(LangItemTarget::TraitId(it)) =&gt; it,\n            _ =&gt; return false,\n        };\n        self.impls_trait(db, copy_trait.into(), &amp;[])\n    }\n</code></pre></div>",
        "id": 254077395,
        "sender_full_name": "Andrzej Głuszak",
        "timestamp": 1632155141
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"436269\">Andrzej Głuszak</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Semantic.20generate.20getter.20.26.20introduciton/near/254077276\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"300586\">Lukas Wirth</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Semantic.20generate.20getter.20.26.20introduciton/near/254076946\">said</a>:</p>\n<blockquote>\n<p>Where you would get the <code>as_ref_trait</code> and <code>str_primitive_ty</code> via <code>FamousDefs</code></p>\n</blockquote>\n<p>yeah, that's the easier part, but what about generic params?</p>\n</blockquote>\n<p>I don't think we expose anything for that on the IDE layer/from <code>hir</code> yet</p>",
        "id": 254077421,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632155156
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"436269\">Andrzej Głuszak</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Semantic.20generate.20getter.20.26.20introduciton/near/254077395\">said</a>:</p>\n<blockquote>\n<p>regarding FamousDefs, why isn't is_copy implemented in terms of it?</p>\n<p><div class=\"codehilite\"><pre><span></span><code>pub fn is_copy(&amp;self, db: &amp;dyn HirDatabase) -&gt; bool {\n        let lang_item = db.lang_item(self.krate, SmolStr::new(&quot;copy&quot;));\n        let copy_trait = match lang_item {\n            Some(LangItemTarget::TraitId(it)) =&gt; it,\n            _ =&gt; return false,\n        };\n        self.impls_trait(db, copy_trait.into(), &amp;[])\n    }\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Because the <code>hir</code> crate doesn't know about <code>FamousDefs</code>,  it's defined in <code>ide_db</code> which depends on <code>hir</code> itself</p>",
        "id": 254077549,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632155205
    },
    {
        "content": "<p>okay, so why is <code>is_copy</code> defined there? I mean, I was wondering if I should define <code>is_as_ref</code> there as well, because my use case seems to be very similar. It irks me that there are only some methods defined directly on a <code>hir::Type</code></p>",
        "id": 254078367,
        "sender_full_name": "Andrzej Głuszak",
        "timestamp": 1632155544
    },
    {
        "content": "<p>I mean, there are (at least) two ways to check if a type implements <code>Copy</code> - one by using <code>is_copy</code> (which doesn't use FamousTypes) and the second one by querying <code>impls_trait</code>with a value from FamousTypes</p>",
        "id": 254078637,
        "sender_full_name": "Andrzej Głuszak",
        "timestamp": 1632155646
    },
    {
        "content": "<p>Those are just short cuts, I think the proper API should only expose <code>impls_trait</code>, but we currently don't offer a way for the ide layer to query <code>lang_items</code> I believe</p>",
        "id": 254078671,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632155659
    },
    {
        "content": "<p>So ye technically there are two ways to look for the <code>Copy</code> trait in general, via the lang item or via its core/std path(which can be invalid in <code>no_core</code> projects)</p>",
        "id": 254078792,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632155705
    },
    {
        "content": "<p>for AsRef you want to go through FamousDefs</p>",
        "id": 254078866,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632155730
    },
    {
        "content": "<p>okay, thanks!</p>",
        "id": 254078914,
        "sender_full_name": "Andrzej Głuszak",
        "timestamp": 1632155755
    },
    {
        "content": "<p>Note that you need to duplicate  the trait definition into the file here <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/f1d7f98ed07b9934286b9c4809dd4d7a47537879\\crates\\test_utils\\src\\minicore.rs#L10\">https://github.com/rust-analyzer/rust-analyzer/blob/f1d7f98ed07b9934286b9c4809dd4d7a47537879\\crates\\test_utils\\src\\minicore.rs#L10</a></p>",
        "id": 254079100,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632155827
    },
    {
        "content": "<p>for testing purposes(just the signatures of things is enough, bodies don't matter)</p>",
        "id": 254079144,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632155849
    },
    {
        "content": "<p>That's the file FamousDefs uses when run inside tests so we don't have to depend on the <em>huge</em> core/std source when running unit tests</p>",
        "id": 254079242,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632155883
    },
    {
        "content": "<p>I figured out how to handle generic cases :)</p>",
        "id": 254115332,
        "sender_full_name": "Andrzej Głuszak",
        "timestamp": 1632170814
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span> I finished that PR and I'd be grateful for a code review :) <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/10563\">https://github.com/rust-analyzer/rust-analyzer/pull/10563</a></p>",
        "id": 257914827,
        "sender_full_name": "Andrzej Głuszak",
        "timestamp": 1634473568
    }
]