[
    {
        "content": "<p>Hey, a couple of folks (60fps &amp; discord) independently reached out to me about <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/3767\">https://github.com/rust-analyzer/rust-analyzer/issues/3767</a>, and that's a fun issue to think about. </p>\n<p>In a nutshell, we can't goto definition inside the <code>include!</code> macro. In some sense, this is expected behavior. From a programming model point of view, <code>include!</code> is indistinguishable from a proc macro which creates the tokens out of thin air (imagine <code>proc_include</code> which does <code>std::fs::read(path).unwrap().parse::&lt;TokenStream&gt;().unwrap()</code>).</p>\n<p>From a user's perspective though, the IDE clearly should just \"see through\" this macro. I wonder if anyone has idea  about how to special case this best?</p>",
        "id": 242926744,
        "sender_full_name": "matklad",
        "timestamp": 1623870129
    },
    {
        "content": "<p>In rustc the spans of the tokens are from the included file, not the macro invocation itself afaik.</p>",
        "id": 242927015,
        "sender_full_name": "bjorn3",
        "timestamp": 1623870245
    },
    {
        "content": "<p>Maybe something like parse the included file as if it is a regular module and then take the tokens from this module and place them at the macro invocation site? Does that make sense?</p>",
        "id": 242927167,
        "sender_full_name": "bjorn3",
        "timestamp": 1623870305
    },
    {
        "content": "<p>yeah, rustc has an easier time here since it just loads all files into its source map and can then address any part of any file with a <code>Span</code></p>",
        "id": 242930733,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1623871915
    },
    {
        "content": "<p>I think we might be able to special-case this in the builtin macro logic by adding an extra <code>TokenMap</code> there</p>",
        "id": 242930988,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1623872015
    },
    {
        "content": "<p>we already track included files there</p>",
        "id": 242931019,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1623872028
    },
    {
        "content": "<p>Hi. I was taking a look at this issue, since I rely quite heavily on generated source files and not having \"Go to definition\" is slightly annoying.</p>\n<p>In terms of implementing this, I would appreciate an opinion on whether it makes more sense to look immediately at special casing the builtin macro logic as suggested above, or if resolving <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/9403\">https://github.com/rust-analyzer/rust-analyzer/issues/9403</a> would be a better strategy first? (I saw this issue referenced in <a class=\"stream-topic\" data-stream-id=\"185405\" href=\"/#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/tonic.3A.3Ainclude_proto.21\">#t-compiler/rust-analyzer &gt; tonic::include_proto!</a> which seemed to refer to basically the same issue?)</p>",
        "id": 261231648,
        "sender_full_name": "James Hinshelwood",
        "timestamp": 1636711025
    }
]