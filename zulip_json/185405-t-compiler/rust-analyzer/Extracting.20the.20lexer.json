[
    {
        "content": "<p>I’ve just realized that a relatively easy part of the compiler to extract would be the lexer. I imagine it could have a relatively pure interface which works for both rustc and rls2 (the current interface in rustc is very impure and, for example, depends on string interning). Note that in and of itself, extracting lexer would’t be benefitial: it’s a stable and easy part. But his would be a good precedent</p>",
        "id": 162264211,
        "sender_full_name": "matklad",
        "timestamp": 1554142617
    },
    {
        "content": "<p>Should we spend time on this?</p>",
        "id": 162264265,
        "sender_full_name": "matklad",
        "timestamp": 1554142654
    },
    {
        "content": "<p>It might be a good starting point to get things to line up</p>",
        "id": 162419497,
        "sender_full_name": "detrumi",
        "timestamp": 1554290516
    },
    {
        "content": "<p>For details like string interning, should those line up as well, or can it be abstracted over?</p>",
        "id": 162419582,
        "sender_full_name": "detrumi",
        "timestamp": 1554290583
    },
    {
        "content": "<p>It feels like rustc does many things differently for performance, which makes it hard to extract. But maybe that's just a problem with the current implementation?</p>",
        "id": 162419663,
        "sender_full_name": "detrumi",
        "timestamp": 1554290662
    },
    {
        "content": "<p>I hope there's a purely-functional interface to the lexer, which should achieve both  good perf and flexibility, required for IDE</p>",
        "id": 162419850,
        "sender_full_name": "matklad",
        "timestamp": 1554290861
    },
    {
        "content": "<p>In particular, I think the lexer could return string slices, and leave the interning to the calling code</p>",
        "id": 162419857,
        "sender_full_name": "matklad",
        "timestamp": 1554290881
    },
    {
        "content": "<p>makes sense</p>",
        "id": 162420074,
        "sender_full_name": "detrumi",
        "timestamp": 1554291008
    },
    {
        "content": "<p>So, I've looked closer at the lexer and I think we should do it. My plan is to produce an <code>rust_lexer</code> crate, which has zero/few dependencies (we might pull something in for XID_Start), with roughly the following interface:</p>\n<div class=\"codehilite\"><pre><span></span>pub enum LexerError {\n    BareCRinComment { position: usize },\n    ....\n}\n\npub struct Token {\n     kind: TokenKind,\n     len: usize,\n}\n\n#[repr(u8)] // fieldless\npub enum TokenKind {\n    Shebang,\n    Comment,\n    Whitespace,\n    ....\n    Error,\n}\n\npub fn next_token(src: &amp;str, is_file_start: bool, errors: &amp;mut Vec&lt;LexerError&gt;) -&gt; Token {\n    assert!(!src.is_empty());\n    ....\n}\n</pre></div>\n\n\n<p>RLS2 will consume the tokens and build up a concrete syntax tree.</p>\n<p>rustc will consume the tokens and build the rich rustc tokens, with spans, interned identifiers, escaped strings, etc. </p>\n<p>the crate will live in rust-lang/rust repo. Long term, I think we should add an <code>/libs</code> top-level dir, alongside with <code>/src</code>, where we store librarified compiler which you can build without <code>x.py</code>, LLVM and bootstraping. </p>\n<p><span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> thoughts?</p>",
        "id": 162515922,
        "sender_full_name": "matklad",
        "timestamp": 1554377927
    },
    {
        "content": "<p>Note that immediate benefit from extracting the lexer would be negligible: it's a simple bit of code which rests with few modifications. However, I find it important to actually start the \"from the ground up\" librarification, and this seems like a good case .</p>",
        "id": 162516045,
        "sender_full_name": "matklad",
        "timestamp": 1554378007
    },
    {
        "content": "<p>In the short term, having it live inside rust-lang/rust would probably mean that it requires <code>x.py</code> and bootstrapping, which is a bit too much overhead for such a small library. And for the long term, that'd mean that <code>x.py</code> would also have to call cargo to build the <code>/libs</code> crates, wouldn't that complicate the build process further?</p>",
        "id": 162519270,
        "sender_full_name": "detrumi",
        "timestamp": 1554380836
    },
    {
        "content": "<p>But I guess moving the lexer to a separate repo (and to <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a>?) would make changes harder, since it would be spread across multiple repositories</p>",
        "id": 162519400,
        "sender_full_name": "detrumi",
        "timestamp": 1554380939
    },
    {
        "content": "<p>Yeah, this plan is to publish it to crates,io, so that rust-analyzer can just pick it up. The /libs setup will complicate the build, but not too much x.py already uses cargo to build everything</p>",
        "id": 162519878,
        "sender_full_name": "matklad",
        "timestamp": 1554381326
    },
    {
        "content": "<p>proposed API: <a href=\"https://github.com/rust-lang/rust/pull/59706\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59706\">https://github.com/rust-lang/rust/pull/59706</a></p>",
        "id": 162558147,
        "sender_full_name": "matklad",
        "timestamp": 1554404995
    }
]