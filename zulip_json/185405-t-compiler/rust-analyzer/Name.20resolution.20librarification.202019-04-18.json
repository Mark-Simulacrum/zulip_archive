[
    {
        "content": "<p>Hello <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span></p>",
        "id": 163648789,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555592504
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 163648803,
        "sender_full_name": "matklad",
        "timestamp": 1555592519
    },
    {
        "content": "<p>Shall we begin? Since the doodle pool was not too popular, I expect the most interested parties are represented :-)</p>",
        "id": 163648996,
        "sender_full_name": "matklad",
        "timestamp": 1555592617
    },
    {
        "content": "<p>sure</p>",
        "id": 163649012,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555592627
    },
    {
        "content": "<p>though I'll say up front: I don't have too much to report (mostly some questions about objectives/scope/requirements)</p>",
        "id": 163649097,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555592659
    },
    {
        "content": "<p>and given that I didn't finish pre-triage for the compiler meeting in an hour</p>",
        "id": 163649104,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555592667
    },
    {
        "content": "<p>I don't have any planed agenda for the meeting as well</p>",
        "id": 163649105,
        "sender_full_name": "matklad",
        "timestamp": 1555592668
    },
    {
        "content": "<p>I might want to just keep this pretty short?</p>",
        "id": 163649121,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555592682
    },
    {
        "content": "<p>Sure, seems fine!</p>",
        "id": 163649141,
        "sender_full_name": "matklad",
        "timestamp": 1555592693
    },
    {
        "content": "<p>I've only started a little bit with name resolution librarification stuff</p>",
        "id": 163649148,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555592700
    },
    {
        "content": "<p>let me start with a couple of ... claims? hypotheses.</p>",
        "id": 163649199,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555592735
    },
    {
        "content": "<p>sure, go ahead!</p>",
        "id": 163649215,
        "sender_full_name": "matklad",
        "timestamp": 1555592749
    },
    {
        "content": "<p>1. We want to create a name resolution library that can be used as a reference spec for how name resolution should behave, on <em>correct programs</em></p>",
        "id": 163649297,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555592795
    },
    {
        "content": "<p>the reason I add that bit at the end, is because <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> made a comment some time ago that a bulk of the complexity in nameres comes from supporting diagnostics for the error cases</p>",
        "id": 163649345,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555592830
    },
    {
        "content": "<p>but we want at least detect erroneous programs?</p>",
        "id": 163649360,
        "sender_full_name": "matklad",
        "timestamp": 1555592850
    },
    {
        "content": "<p>I imagine we don't want to claim that a given program is valid</p>",
        "id": 163649440,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555592895
    },
    {
        "content": "<p>when, based at least on nameres algorithm, it is not valid</p>",
        "id": 163649453,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555592906
    },
    {
        "content": "<p>yeah, that's what I had in mind, sounds good!</p>",
        "id": 163649503,
        "sender_full_name": "matklad",
        "timestamp": 1555592942
    },
    {
        "content": "<p>I have imagined a couple different ways to try to construct such an artifact</p>",
        "id": 163649538,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555592964
    },
    {
        "content": "<p>at this point, my intention is to make a name-resolver that runs in parallel with the existing one</p>",
        "id": 163649553,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555592989
    },
    {
        "content": "<p>and the two compare their results</p>",
        "id": 163649559,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555592994
    },
    {
        "content": "<p>for the correct cases</p>",
        "id": 163649564,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555592997
    },
    {
        "content": "<p>while the reference name-resolver makes no attempt to match diagnostic quality for the incorrect cases</p>",
        "id": 163649637,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555593024
    },
    {
        "content": "<p>by \"runs in parallel\"</p>",
        "id": 163649695,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555593070
    },
    {
        "content": "<p>I don't actually mean on parallel cores</p>",
        "id": 163649703,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555593076
    },
    {
        "content": "<p>Seems good, longish-term. Short-term, I expect plugging into rustc would be a ton of work. Another way to get <em>something</em> useful is by plugging into rust-analyzer first.</p>",
        "id": 163649719,
        "sender_full_name": "matklad",
        "timestamp": 1555593096
    },
    {
        "content": "<p>but rather than the code is just added to corresponding points in the control flow of the compiler</p>",
        "id": 163649730,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555593108
    },
    {
        "content": "<p>Yes, that is the place where I have been wondering about strategy here</p>",
        "id": 163649793,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555593126
    },
    {
        "content": "<p>namely, plugging into <code>rustc</code> <em>is</em> a ton of work</p>",
        "id": 163649807,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555593135
    },
    {
        "content": "<p>Could we perhaps reuse save-analysis for comparison?</p>",
        "id": 163649815,
        "sender_full_name": "matklad",
        "timestamp": 1555593149
    },
    {
        "content": "<p>oh that's an interesting idea</p>",
        "id": 163649845,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555593175
    },
    {
        "content": "<p>Like, we don't plug code into rustc, we ask rustc to dump data, and then run test-suite against that data</p>",
        "id": 163649869,
        "sender_full_name": "matklad",
        "timestamp": 1555593191
    },
    {
        "content": "<p>We'll need a parser for rust, of course, but there are a couple available :)</p>",
        "id": 163649905,
        "sender_full_name": "matklad",
        "timestamp": 1555593222
    },
    {
        "content": "<p>I had been assuming that a reason it made sense to plug into rustc was that this would simultanously: 1. yield the testing infrastructure (since its just a mode you turn on via a rustc flag), and 2. yield a software artifact that we would be semi-confident in at the outset (since it was written to match the control-flow of rustc itself)</p>",
        "id": 163649975,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555593254
    },
    {
        "content": "<p>but I hadn't considered that save-analysis gives us an alternative path for testing</p>",
        "id": 163649985,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555593274
    },
    {
        "content": "<p>so, lets try the thought experiment then</p>",
        "id": 163650030,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555593321
    },
    {
        "content": "<p>Plugging direrctly into rustc runs the risk of replicating rustc's interface, which may not be ideal</p>",
        "id": 163650034,
        "sender_full_name": "matklad",
        "timestamp": 1555593325
    },
    {
        "content": "<p>right, that is the risk: How to make something general purpose enough that it can be reused elsewhere</p>",
        "id": 163650063,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555593351
    },
    {
        "content": "<p>do you think it makes sense to try to plan ahead for eventual integration with rustc (the aforementioned testing strategy, lets call it Just-in-Time Testing)</p>",
        "id": 163650156,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555593407
    },
    {
        "content": "<p>because I was semi-concerned about the <em>opposite</em> problem: If i start with Rust-analyzer's nameresolver</p>",
        "id": 163650190,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555593436
    },
    {
        "content": "<p>I may end up with something that I cannot effectively plug into <code>rustc</code> ?</p>",
        "id": 163650205,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555593448
    },
    {
        "content": "<p>though I suppose this is somewhat silly</p>",
        "id": 163650217,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555593461
    },
    {
        "content": "<p>I think no, we shouldn't aim at integration from the outset: integration with rustc is a huge chunk of work, probably <em>larger</em> than just doing the thing from scratch.</p>",
        "id": 163650291,
        "sender_full_name": "matklad",
        "timestamp": 1555593486
    },
    {
        "content": "<p>i.e. anything that can work for an IDE (and that produces correct results), should be able to be hacked on in <em>some</em> manner to integrate with a batch compiler.</p>",
        "id": 163650294,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555593488
    },
    {
        "content": "<p>okay. I can go along with that</p>",
        "id": 163650318,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555593503
    },
    {
        "content": "<p>certainly sounds more palatable to me for the short term.</p>",
        "id": 163650331,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555593516
    },
    {
        "content": "<p>basically, the biggest value we can get here is wild experimentaion</p>",
        "id": 163650351,
        "sender_full_name": "matklad",
        "timestamp": 1555593534
    },
    {
        "content": "<p>another question that has arisen when I've posed the first claim above, that all we need to care about initially is replicating the behavior on <em>correct programs</em></p>",
        "id": 163650370,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555593550
    },
    {
        "content": "<p>right</p>",
        "id": 163650385,
        "sender_full_name": "matklad",
        "timestamp": 1555593569
    },
    {
        "content": "<p>that has led some to point out \"IDE's may want to produce diagnostic suggestions on incorrect programs\"</p>",
        "id": 163650392,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555593577
    },
    {
        "content": "<p>suggesting the changes the user might want to make</p>",
        "id": 163650404,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555593585
    },
    {
        "content": "<p>so there's a question of how much of that to plan ahead for</p>",
        "id": 163650417,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555593594
    },
    {
        "content": "<p>Do you have any thoughts there? Or is that something you think we can worry about <em>after</em> we get something running that only worries about correct programs?</p>",
        "id": 163650485,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555593621
    },
    {
        "content": "<p>Good question! An interesting aspect of dagnostics in IDE is that they should be structural (like in structured logging)</p>",
        "id": 163650508,
        "sender_full_name": "matklad",
        "timestamp": 1555593650
    },
    {
        "content": "<p>So, you don't print spans on stderr, you produce some blob of data specific to the problem, and handle these data in the \"fixes\" layer, completely outside of resolver</p>",
        "id": 163650551,
        "sender_full_name": "matklad",
        "timestamp": 1555593687
    },
    {
        "content": "<p>hmm. interesting</p>",
        "id": 163650574,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555593701
    },
    {
        "content": "<p>the fixes layer isn't expected to need to extract information from the Error value it gets from the resolver?</p>",
        "id": 163650596,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555593718
    },
    {
        "content": "<p>I was assuming it might want e.g. a way to see nearby names (\"near\" in the sense of string-matching)</p>",
        "id": 163650662,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555593736
    },
    {
        "content": "<p>it is expected: it should downcast error to a specific variant</p>",
        "id": 163650668,
        "sender_full_name": "matklad",
        "timestamp": 1555593739
    },
    {
        "content": "<p>Okay</p>",
        "id": 163650693,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555593765
    },
    {
        "content": "<p>smth like this: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide_api/src/diagnostics.rs#L39-L49\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide_api/src/diagnostics.rs#L39-L49\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide_api/src/diagnostics.rs#L39-L49</a></p>",
        "id": 163650694,
        "sender_full_name": "matklad",
        "timestamp": 1555593765
    },
    {
        "content": "<p>my current thinking, in any case, is that if the API is designed appropriately, then we should be able to swap in different name resolution libraries</p>",
        "id": 163650781,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555593816
    },
    {
        "content": "<p>where the library acting as the reference spec would produce Error objects that are practically <code>()</code></p>",
        "id": 163650801,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555593837
    },
    {
        "content": "<p>Yeah, seems resonable: create allowance for reporting errors, but report an ZST <code>struct NameresError;</code></p>",
        "id": 163650888,
        "sender_full_name": "matklad",
        "timestamp": 1555593878
    },
    {
        "content": "<p>actually, could we step back a bit</p>",
        "id": 163650899,
        "sender_full_name": "matklad",
        "timestamp": 1555593891
    },
    {
        "content": "<p>sure</p>",
        "id": 163650910,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555593899
    },
    {
        "content": "<p>What do we mean that we say \"name resolution\"?</p>",
        "id": 163650929,
        "sender_full_name": "matklad",
        "timestamp": 1555593909
    },
    {
        "content": "<p>heh</p>",
        "id": 163650940,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555593917
    },
    {
        "content": "<p>There's I think two rather orhogonal slices to the thing</p>",
        "id": 163650956,
        "sender_full_name": "matklad",
        "timestamp": 1555593925
    },
    {
        "content": "<p>the first one is \"modules &amp; imports\" bit, with fixed point, etc</p>",
        "id": 163650969,
        "sender_full_name": "matklad",
        "timestamp": 1555593943
    },
    {
        "content": "<p>right</p>",
        "id": 163650983,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555593954
    },
    {
        "content": "<p>the second one is lexical scope stuff</p>",
        "id": 163650985,
        "sender_full_name": "matklad",
        "timestamp": 1555593955
    },
    {
        "content": "<p>which ... <em>might</em> have some overlap today?</p>",
        "id": 163651037,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555593970
    },
    {
        "content": "<p>I remember seeing some bug recently pointing out that you can write <code>impl</code> blocks within a <code>fn</code></p>",
        "id": 163651047,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555593983
    },
    {
        "content": "<p>oh yeah</p>",
        "id": 163651061,
        "sender_full_name": "matklad",
        "timestamp": 1555593994
    },
    {
        "content": "<p>Imports are also a \"lexical scope stuff\" with uniform paths.<br>\nBut with fixed point, etc!</p>",
        "id": 163651074,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1555594004
    },
    {
        "content": "<p>oh hi <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> !</p>",
        "id": 163651105,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555594026
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> !</p>\n<p>Hm, but even local imports look only for items?</p>",
        "id": 163651115,
        "sender_full_name": "matklad",
        "timestamp": 1555594035
    },
    {
        "content": "<p>Like, you can have \"modules and imports\" inside functions, but it's still doesn't really intersect with lexical scopes?</p>",
        "id": 163651152,
        "sender_full_name": "matklad",
        "timestamp": 1555594072
    },
    {
        "content": "<p>In other words, would erasing expressions in function bodies change the meaning of items in function bodies?</p>",
        "id": 163651216,
        "sender_full_name": "matklad",
        "timestamp": 1555594104
    },
    {
        "content": "<p>Right now imports referring to local variables / generic parameters are actively reported as errors.</p>",
        "id": 163651265,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1555594151
    },
    {
        "content": "<p>(Rather than skipping local variables and searching for items in outer scopes.)</p>",
        "id": 163651288,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1555594179
    },
    {
        "content": "<p>With successful compilation imports can only refer to items, yes (+ preludes, built-in things, etc).</p>",
        "id": 163651403,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1555594239
    },
    {
        "content": "<p>playground example: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=faf6ea2a0543aa5eac9b503ca0a8b757\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=faf6ea2a0543aa5eac9b503ca0a8b757\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=faf6ea2a0543aa5eac9b503ca0a8b757</a></p>\n<p>Yeah, that's... interesting</p>",
        "id": 163651448,
        "sender_full_name": "matklad",
        "timestamp": 1555594272
    },
    {
        "content": "<p>But I'd ideally want to unify the name search algorithm between early and late resolution, there are fewer differences than similarity now.</p>",
        "id": 163651466,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1555594291
    },
    {
        "content": "<p>the reason why I seek this separation is that, in IDE, we <strong>really</strong> want to avoid name resolving function bodies</p>",
        "id": 163651474,
        "sender_full_name": "matklad",
        "timestamp": 1555594299
    },
    {
        "content": "<p>until we actually need to, eg, typecheck the function</p>",
        "id": 163651484,
        "sender_full_name": "matklad",
        "timestamp": 1555594318
    },
    {
        "content": "<p>isn't it enough to just delay such name resolution?</p>",
        "id": 163651535,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555594329
    },
    {
        "content": "<p>I suppose so. Like, they don't have to be two algoithms, they can be a single algorithm, operating on different sets of data</p>",
        "id": 163651574,
        "sender_full_name": "matklad",
        "timestamp": 1555594364
    },
    {
        "content": "<p>or is there some reason to avoid it, beyond latency?</p>",
        "id": 163651577,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555594366
    },
    {
        "content": "<p>Big-O complexity, basically</p>",
        "id": 163651590,
        "sender_full_name": "matklad",
        "timestamp": 1555594380
    },
    {
        "content": "<p>okay</p>",
        "id": 163651606,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555594389
    },
    {
        "content": "<p>there are <strong>far</strong> more body code than top-level code</p>",
        "id": 163651609,
        "sender_full_name": "matklad",
        "timestamp": 1555594392
    },
    {
        "content": "<p>I'd ignore erroneous imports referring to locals for a start, it's an extremely corner case.</p>",
        "id": 163651763,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1555594527
    },
    {
        "content": "<p>it seems to me like we should be able to delay such work until you want to e.g. type-check or resolve trait impls.</p>",
        "id": 163651770,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555594539
    },
    {
        "content": "<p>Yeah.... I guess this is all for my \"stepping a step back\": we should try to find ways to be lazy with nameres.</p>",
        "id": 163651775,
        "sender_full_name": "matklad",
        "timestamp": 1555594543
    },
    {
        "content": "<p>with regards to using RA as the basis for an initial nameres library</p>",
        "id": 163651896,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555594631
    },
    {
        "content": "<p>well, not as basis, as a client: I feel the lib should be independent, and have its own IR, like chalk</p>",
        "id": 163651921,
        "sender_full_name": "matklad",
        "timestamp": 1555594664
    },
    {
        "content": "<p>sure</p>",
        "id": 163651932,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555594670
    },
    {
        "content": "<p>my understanding is that RA today does not attempt to produce results that are always correct</p>",
        "id": 163652013,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555594725
    },
    {
        "content": "<p>That's very true</p>",
        "id": 163652026,
        "sender_full_name": "matklad",
        "timestamp": 1555594740
    },
    {
        "content": "<p>do you think it would be better to have a nameres library that has multiple modes, in terms of how fast it gives results vs the correctness of those results</p>",
        "id": 163652156,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555594832
    },
    {
        "content": "<p>or do you think its better to focus on correctness alone</p>",
        "id": 163652167,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555594844
    },
    {
        "content": "<p>and assume that we'll figure out ways to keep the latency under control?</p>",
        "id": 163652174,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555594861
    },
    {
        "content": "<p>What would \"fast\" mode do?</p>",
        "id": 163652184,
        "sender_full_name": "matklad",
        "timestamp": 1555594866
    },
    {
        "content": "<p>it might fail to resolve</p>",
        "id": 163652191,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555594876
    },
    {
        "content": "<p>due to not expanding macros, for example</p>",
        "id": 163652198,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555594884
    },
    {
        "content": "<p>I feel it's crucial to aim for \"100% correct if we fix all the bugs\"</p>",
        "id": 163652283,
        "sender_full_name": "matklad",
        "timestamp": 1555594933
    },
    {
        "content": "<p>okay</p>",
        "id": 163652289,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555594944
    },
    {
        "content": "<p>and it's very important to have lazyness, or, at least, incrementality</p>",
        "id": 163652310,
        "sender_full_name": "matklad",
        "timestamp": 1555594963
    },
    {
        "content": "<p>Basically, re-nameresolving after you modify function body should be fast</p>",
        "id": 163652329,
        "sender_full_name": "matklad",
        "timestamp": 1555594980
    },
    {
        "content": "<p>sure. I had said in the past that I figured one way to go here would be to have an asynchronous interface</p>",
        "id": 163652355,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555595004
    },
    {
        "content": "<p>If we can't do both \"correct\" and \"lazy enough\", that would be a pretty difficult position to be</p>",
        "id": 163652363,
        "sender_full_name": "matklad",
        "timestamp": 1555595017
    },
    {
        "content": "<p>with respect to the whole idea of using the same code base for compiler and ide, etc</p>",
        "id": 163652374,
        "sender_full_name": "matklad",
        "timestamp": 1555595034
    },
    {
        "content": "<p>I agree with that</p>",
        "id": 163652428,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555595058
    },
    {
        "content": "<p>I mostly was curious if, based on your work so far, if you thought that such a goal was not achievable in the first place.</p>",
        "id": 163652464,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555595078
    },
    {
        "content": "<p>(I suppose if you thought that, then we wouldn't be having this conversation at all)</p>",
        "id": 163652483,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555595094
    },
    {
        "content": "<p>I am now feeling more optimistic than initially :0)</p>",
        "id": 163652505,
        "sender_full_name": "matklad",
        "timestamp": 1555595113
    },
    {
        "content": "<p>okay. So I think the main action items I would like to look at</p>",
        "id": 163652531,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555595142
    },
    {
        "content": "<p>Salsa works wonders, and our (super-buggy) fixed-point iteration loop actually achives the required lazyness/latency</p>",
        "id": 163652537,
        "sender_full_name": "matklad",
        "timestamp": 1555595146
    },
    {
        "content": "<p>is to try to factor out code from RA that does name-resolution, and that validates its result against save-analysis</p>",
        "id": 163652627,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555595185
    },
    {
        "content": "<p>if I can get something running (and that presumably yields test failures on the appropirate cases exercising the bugs)</p>",
        "id": 163652666,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555595215
    },
    {
        "content": "<p>then that would be a proof-of-concept for what we're talking about here</p>",
        "id": 163652697,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555595245
    },
    {
        "content": "<p>Right?</p>",
        "id": 163652699,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555595247
    },
    {
        "content": "<p>sgmt</p>",
        "id": 163652703,
        "sender_full_name": "matklad",
        "timestamp": 1555595251
    },
    {
        "content": "<p>though, I would add a step before that</p>",
        "id": 163652715,
        "sender_full_name": "matklad",
        "timestamp": 1555595261
    },
    {
        "content": "<p>(and the main issue might be if its too tightly tied to rust-analyzer API stuff)</p>",
        "id": 163652716,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555595261
    },
    {
        "content": "<ul>\n<li>scetch the IR required for name res</li>\n</ul>",
        "id": 163652724,
        "sender_full_name": "matklad",
        "timestamp": 1555595276
    },
    {
        "content": "<p>(but being too tightly tied to rust-analyzer seems like a far better scenario than being too tightly tied to rustc API)</p>",
        "id": 163652773,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555595287
    },
    {
        "content": "<blockquote>\n<ul>\n<li>scetch the IR required for name res</li>\n</ul>\n</blockquote>\n<p>ah yes, okay</p>",
        "id": 163652786,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555595305
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> if you feel like you need to run to that other thing, I feel we've discussed the most important bits :)</p>",
        "id": 163652813,
        "sender_full_name": "matklad",
        "timestamp": 1555595345
    },
    {
        "content": "<p>I think I do need to try to spend the next 10 minutes doing prep for the meeting that starts in 10 minutes.</p>",
        "id": 163652830,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555595365
    },
    {
        "content": "<p>thanks for this discussion, it has been super helpful food</p>",
        "id": 163652854,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555595379
    },
    {
        "content": "<p>for thought</p>",
        "id": 163652857,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555595381
    },
    {
        "content": "<p>I'll write notes and post them to rust-lang/compiler-team repo</p>",
        "id": 163652877,
        "sender_full_name": "matklad",
        "timestamp": 1555595400
    },
    {
        "content": "<p>Thanks for participating <span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span>  and <span class=\"user-mention silent\" data-user-id=\"123856\">Vadim Petrochenkov</span> !</p>",
        "id": 163652956,
        "sender_full_name": "matklad",
        "timestamp": 1555595421
    }
]