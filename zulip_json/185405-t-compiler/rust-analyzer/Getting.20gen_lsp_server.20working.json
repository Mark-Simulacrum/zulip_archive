[
    {
        "content": "<p>I'm trying to figure out why I can't get <code>gen_lsp_server</code> working and it appears to be hanging on the threaded stdin/stdout logic in <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/gen_lsp_server/src/stdio.rs\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/gen_lsp_server/src/stdio.rs\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/gen_lsp_server/src/stdio.rs</a>. I think it is because we are doing something on both the stdin and the stdout at the same time.</p>\n<p>I managed to get it down to a minimal case using code stolen from that crate (<a href=\"https://github.com/dmoonfire/minimal-rust-lsp/blob/master/src/main.rs\" target=\"_blank\" title=\"https://github.com/dmoonfire/minimal-rust-lsp/blob/master/src/main.rs\">https://github.com/dmoonfire/minimal-rust-lsp/blob/master/src/main.rs</a>) but I'm not sure how to get around the blocking error. If I comment lines 37-42, it works fine but that obviously isn't what it was indented.</p>\n<p>I found a few other examples of it, but the only one that I understood uses <code>futures</code> which doesn't appear to be used by <code>gen_lsp_server</code>. Since I have to work with private structs in that crate, I figured I would have to match the libraries used in that example so futures doesn't have a future unless something changes.</p>\n<p>Any chance someone can point me to a way of figuring this out?</p>",
        "id": 166215054,
        "sender_full_name": "D. Moonfire",
        "timestamp": 1558474506
    },
    {
        "content": "<p>WHere exactly does it hang?</p>",
        "id": 166243803,
        "sender_full_name": "matklad",
        "timestamp": 1558510279
    },
    {
        "content": "<p>If that's the join call, than the issue might be an unclosed stdout on the other side</p>",
        "id": 166243815,
        "sender_full_name": "matklad",
        "timestamp": 1558510304
    },
    {
        "content": "<p><a href=\"https://github.com/dmoonfire/minimal-rust-lsp/blob/9a971993f46204dbc895638efd819e3486aa8303/src/main.rs#L25\" target=\"_blank\" title=\"https://github.com/dmoonfire/minimal-rust-lsp/blob/9a971993f46204dbc895638efd819e3486aa8303/src/main.rs#L25\">https://github.com/dmoonfire/minimal-rust-lsp/blob/9a971993f46204dbc895638efd819e3486aa8303/src/main.rs#L25</a></p>",
        "id": 166243817,
        "sender_full_name": "matklad",
        "timestamp": 1558510306
    },
    {
        "content": "<p>The way I would debug this is to add logging to the lowest possible level, stdio transport, to figure out which message can't get through</p>",
        "id": 166243876,
        "sender_full_name": "matklad",
        "timestamp": 1558510346
    },
    {
        "content": "<p>It was on the <code>let req = match receiver.recv() {</code> call. However I decided to try something and switched logging libraries (to handle the <code>trace!</code>) and made sure all the logging output was going to stderr. Apparently the logging library (simple_logger) was conflicting with the <code>stdout.lock()</code>, which makes sense in hindsight. Thank you.</p>",
        "id": 166268507,
        "sender_full_name": "D. Moonfire",
        "timestamp": 1558532785
    }
]