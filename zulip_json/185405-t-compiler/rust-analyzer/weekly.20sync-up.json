[
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 174782334,
        "sender_full_name": "matklad",
        "timestamp": 1567513241
    },
    {
        "content": "<p>So, yeah, last Friday I spent some time reading into Chalk and (somewhat) into the RLS</p>",
        "id": 174782378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567513279
    },
    {
        "content": "<p>Trying to remember the lay of the land</p>",
        "id": 174782389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567513299
    },
    {
        "content": "<p>I came up with a number of improvements and steps that we could take in/around Chalk, but they're kind of low-level specifics.</p>",
        "id": 174782468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567513359
    },
    {
        "content": "<p>I guess it's worth stepping back a bit to review our overall goals over this week etc</p>",
        "id": 174782492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567513408
    },
    {
        "content": "<p>I'd say the high order bit right now is fixing the \"chalk spins CPU at 100%\" problem</p>",
        "id": 174782498,
        "sender_full_name": "matklad",
        "timestamp": 1567513416
    },
    {
        "content": "<p>Well, depends I guess ;)</p>",
        "id": 174782559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567513454
    },
    {
        "content": "<p>Yeah, reviewing goals seems right, but let me quickly note that happend on the ra side recently</p>",
        "id": 174782569,
        "sender_full_name": "matklad",
        "timestamp": 1567513465
    },
    {
        "content": "<p>go for it</p>",
        "id": 174782581,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567513477
    },
    {
        "content": "<ul>\n<li>I mostly did cleanups and refactorings</li>\n<li>florian integrated more chalk bits around associated types</li>\n<li>the notify library, which we use for watching files, is abandoned.</li>\n</ul>",
        "id": 174782628,
        "sender_full_name": "matklad",
        "timestamp": 1567513529
    },
    {
        "content": "<p>The last bit is interesting, in that I think starts are aligned perfectly to make us reconsider file watching and general interractions with file system. I'd love to transition to lazy file loading</p>",
        "id": 174782705,
        "sender_full_name": "matklad",
        "timestamp": 1567513572
    },
    {
        "content": "<p>(hence that question in salsa's zulip)</p>",
        "id": 174782722,
        "sender_full_name": "matklad",
        "timestamp": 1567513589
    },
    {
        "content": "<p>Yeah, that is interesting</p>",
        "id": 174782747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567513616
    },
    {
        "content": "<p>oh, and, on rustc side, I do first small steps to make rustc parser use the same token model as proc-macros use (with jointness)</p>",
        "id": 174782752,
        "sender_full_name": "matklad",
        "timestamp": 1567513622
    },
    {
        "content": "<p>that's all I can remember I guess?</p>",
        "id": 174782759,
        "sender_full_name": "matklad",
        "timestamp": 1567513626
    },
    {
        "content": "<p>So I guess one question is -- we had planned to have a compiler team meeting. One of my immediate goals was to .. figure out what to be discussing there.</p>",
        "id": 174782845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567513693
    },
    {
        "content": "<p>I guess I can see a few things to do</p>",
        "id": 174782907,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567513755
    },
    {
        "content": "<p>Say more?</p>",
        "id": 174783033,
        "sender_full_name": "matklad",
        "timestamp": 1567513843
    },
    {
        "content": "<p>Well I don't think we're going to be in a position to propose a detailed technical propsal around chalk -- but we could focus on improving the experience in rust-analyzer and try to give an overview of where it is and discuss the idea of trying to extract chalk/type-checker into shared library, and maybe float out some of the challenges there.</p>",
        "id": 174783040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567513847
    },
    {
        "content": "<p>I was vacillating about how much it makes sense to try and propose specific technical designs</p>",
        "id": 174783074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567513907
    },
    {
        "content": "<p>But I think the answer is probably <del>not at all</del> relatively little, at least not yet</p>",
        "id": 174783079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567513914
    },
    {
        "content": "<p>I am not sure: I think, at least in general terms, everyone is on board with the idea. So, I think it would be valuable to:</p>\n<ul>\n<li>highlight specific problems/prerequisites </li>\n<li>find interested folks on the compiler side of things</li>\n</ul>",
        "id": 174783175,
        "sender_full_name": "matklad",
        "timestamp": 1567513985
    },
    {
        "content": "<blockquote>\n<p>I'd say the high order bit right now is fixing the \"chalk spins CPU at 100%\" problem</p>\n</blockquote>\n<p>On this topic, one thing I was thinking about was that it'd be nice to have a mode for RA (or chalk, perhaps) where it can basically dump out a self-contained <code>foo.chalk</code> file that tracks the goal(s) it is solving, so that we can easily reproduce these problems and isolate them</p>",
        "id": 174783208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567514019
    },
    {
        "content": "<p>Would that really be more useful than dumping the rust source-code?</p>",
        "id": 174783321,
        "sender_full_name": "matklad",
        "timestamp": 1567514096
    },
    {
        "content": "<p>seems like yes</p>",
        "id": 174783336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567514108
    },
    {
        "content": "<p>it could be minimzed more readily, I think, and it's smaller than the rust source code</p>",
        "id": 174783363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567514133
    },
    {
        "content": "<p>Like, I think it doesn't really help with isolation: a small source file and a small goal look pretty equivalent to me? You can <code>dbg!(goal)</code> at the entry to chalk to see the actual goal.</p>",
        "id": 174783380,
        "sender_full_name": "matklad",
        "timestamp": 1567514147
    },
    {
        "content": "<p>it's more about the \"environment\" around the goal</p>",
        "id": 174783465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567514191
    },
    {
        "content": "<p>And for minimization the biggest problem seems to the the envirionment with a lot of traits, and minimizing that seems not easy either way?</p>",
        "id": 174783467,
        "sender_full_name": "matklad",
        "timestamp": 1567514192
    },
    {
        "content": "<p>right now you have to debug that from within rust-analyzer</p>",
        "id": 174783469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567514194
    },
    {
        "content": "<p>I'd like to be able to create stronger boundaries, so that you can debug and test chalk problems without really knowing much about rust-analyzer</p>",
        "id": 174783497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567514227
    },
    {
        "content": "<p>I feel like that's some of the <em>promise</em> of library-ification is to enable these sorts of boundaries</p>",
        "id": 174783518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567514247
    },
    {
        "content": "<p>(speaking as someone who feels \"uncomfortable\" in the r-a code base, I can attest it'd be nice if there were some standalone file I could load up into chalk)</p>",
        "id": 174783534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567514270
    },
    {
        "content": "<p>that's true :)</p>",
        "id": 174783538,
        "sender_full_name": "matklad",
        "timestamp": 1567514275
    },
    {
        "content": "<p>that said I agree it's maybe more of a \"side goal\"</p>",
        "id": 174783591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567514291
    },
    {
        "content": "<p>One thing to note about the Chalk-spinning-problem is that we're currently still producing a lot of 'broken' clauses (because of name resolution bugs or missing features), so in the cases I've looked into the problem seemed to me to be that it was enumerating solutions for some subgoal where in the end the final goal had no solution. My point being, maybe these problems aren't really representative of 'real' situations, where usually only a few clauses/impls are broken like that :)</p>",
        "id": 174783607,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1567514307
    },
    {
        "content": "<blockquote>\n<p>I am not sure: I think, at least in general terms, everyone is on board with the idea. So, I think it would be valuable to:</p>\n<ul>\n<li>highlight specific problems/prerequisites </li>\n<li>find interested folks on the compiler side of things</li>\n</ul>\n</blockquote>\n<p>in any case you're probably right about this</p>",
        "id": 174783608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567514308
    },
    {
        "content": "<p>Actually, I think figuring out such things should be the primary goal !</p>",
        "id": 174783616,
        "sender_full_name": "matklad",
        "timestamp": 1567514322
    },
    {
        "content": "<p>It seems like retrofit such inspectability would be hard after the fact</p>",
        "id": 174783646,
        "sender_full_name": "matklad",
        "timestamp": 1567514353
    },
    {
        "content": "<p>the main problem I see here is that we want pull-based interface from chalk: there isn't a \"world\" that we can just <code>serde_json::to_string</code>, we have a bunch of callbacks...</p>",
        "id": 174783670,
        "sender_full_name": "matklad",
        "timestamp": 1567514388
    },
    {
        "content": "<p>well, chalk pulls info from r-a;</p>",
        "id": 174783735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567514408
    },
    {
        "content": "<p>I was imagining that a given engine incarnation would gradually dump the info it pulls as it pulls it into a file</p>",
        "id": 174783745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567514418
    },
    {
        "content": "<p>along with goals</p>",
        "id": 174783747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567514421
    },
    {
        "content": "<p>so you could kind of load that up and \"replay\"</p>",
        "id": 174783753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567514429
    },
    {
        "content": "<p>so, a very relevant question -- I think recently you were asking <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> about integration vs unit tests</p>",
        "id": 174783767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567514444
    },
    {
        "content": "<p>I guess a real question is</p>",
        "id": 174783801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567514473
    },
    {
        "content": "<p>suppose we encountered some bug in chalk via rust-analyzer, would we want to (as I'm vagualy proposing) extract out a <code>.chalk</code>  file and add that as a unit test to chalk,</p>",
        "id": 174783826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567514495
    },
    {
        "content": "<p>or try to reduce it to Rust source</p>",
        "id": 174783829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567514500
    },
    {
        "content": "<p>I think in general I tend towards the latter because it's more \"canonical\"</p>",
        "id": 174783843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567514519
    },
    {
        "content": "<p>but I think in some ideal world we'd have relatively robust, Rust-like interfaces</p>",
        "id": 174783917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567514559
    },
    {
        "content": "<p>anyway, that's kind of a bigger scope than I was initially imagining :) beacuse you wouldn't want like serialized chalk data structures, but some Rust-subset or something that captures the problem setup I guess?</p>",
        "id": 174783950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567514584
    },
    {
        "content": "<p>plausible, just more complex</p>",
        "id": 174783972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567514600
    },
    {
        "content": "<p>So, I think what we really want for tests is \"data in, data out\" setup</p>",
        "id": 174784055,
        "sender_full_name": "matklad",
        "timestamp": 1567514650
    },
    {
        "content": "<p>Boundary which is not data, but is an interface (callbacks, etc) is much harder to keep stable</p>",
        "id": 174784085,
        "sender_full_name": "matklad",
        "timestamp": 1567514681
    },
    {
        "content": "<blockquote>\n<p>One thing to note about the Chalk-spinning-problem is that we're currently still producing a lot of 'broken' clauses  ...</p>\n</blockquote>\n<p>interesting, btw, I hadn't realize that.</p>",
        "id": 174784109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567514713
    },
    {
        "content": "<blockquote>\n<p>So, I think what we really want for tests is \"data in, data out\" setup</p>\n</blockquote>\n<p>Yes for sure this</p>",
        "id": 174784113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567514723
    },
    {
        "content": "<p>And I think also that the \"data in\" has to be pretty high-level</p>",
        "id": 174784119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567514730
    },
    {
        "content": "<p>So, for thinkgs like lexing or parsing where the input and output data has simple format, unit-tests and this boundary seem OK</p>",
        "id": 174784121,
        "sender_full_name": "matklad",
        "timestamp": 1567514733
    },
    {
        "content": "<p>Something like a <code>.chalk</code> file is actually pretty plausible (i.e., some subset of Rust syntax)</p>",
        "id": 174784128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567514744
    },
    {
        "content": "<p>Seems so</p>",
        "id": 174784248,
        "sender_full_name": "matklad",
        "timestamp": 1567514814
    },
    {
        "content": "<p>It seems like this should be part of the \"things we figure out\" when deciding on a good library boundary</p>",
        "id": 174784253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567514822
    },
    {
        "content": "<p>(BTW, I like how Swift .SIL is a real well-defined intermediate langauge which you can read from string)</p>",
        "id": 174784291,
        "sender_full_name": "matklad",
        "timestamp": 1567514840
    },
    {
        "content": "<p>I'd like to see MIR becoming comparably stable (and spec'd)</p>",
        "id": 174784316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567514865
    },
    {
        "content": "<p>In any case, to circle back a bit, re: chalk spinning and being slow</p>",
        "id": 174784325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567514874
    },
    {
        "content": "<p>So one thing that <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> pointed out to me was issues around normalization; I have specific thoughts on those, but I'll try to write them out in chalk issues / on that channel</p>",
        "id": 174784389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567514897
    },
    {
        "content": "<p>But more deeply I am wondering about two options:</p>",
        "id": 174784407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567514906
    },
    {
        "content": "<ul>\n<li>Some kind of \"cutoff\" mechanism, fuel-esque</li>\n<li>Investing the specific problems first</li>\n</ul>",
        "id": 174784433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567514931
    },
    {
        "content": "<p>I think for fuel (as I wrote somewhere) what I'd want to do is to refactor chalk's loop to not do looping, so that fuel can be enforced more at the r-a level (stop pulling for answers after enough iterations)</p>",
        "id": 174784479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567514974
    },
    {
        "content": "<p>(though <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> had some concerns, we can discuss that a bit separately)</p>",
        "id": 174784510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567514996
    },
    {
        "content": "<p>the main question is: prioritize the general mechanism first? or solve the specific bugs?</p>",
        "id": 174784571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567515011
    },
    {
        "content": "<p>it feels like the general mechanism will be needed at the end of the day no matter what</p>",
        "id": 174784579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567515019
    },
    {
        "content": "<p>Specific bugs should have priority</p>",
        "id": 174784590,
        "sender_full_name": "matklad",
        "timestamp": 1567515028
    },
    {
        "content": "<p>fuel can too easily mask bugs</p>",
        "id": 174784599,
        "sender_full_name": "matklad",
        "timestamp": 1567515037
    },
    {
        "content": "<p>Interesting</p>",
        "id": 174784606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567515039
    },
    {
        "content": "<blockquote>\n<p>fuel can too easily mask bugs</p>\n</blockquote>\n<p>yeah so this is what I was wrestling back and forth with :)</p>",
        "id": 174784633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567515066
    },
    {
        "content": "<blockquote>\n<p>(though <span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> had some concerns, we can discuss that a bit separately)</p>\n</blockquote>\n<p>not so much concerns as, I couldn't figure out a good way to do it ;)</p>",
        "id": 174784881,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1567515253
    },
    {
        "content": "<blockquote>\n<p>My point being, maybe these problems aren't really representative of 'real' situations, where usually only a few clauses/impls are broken like that :)</p>\n</blockquote>\n<p>It still would be nice if chalk degraded gracefully in such cases. Like, if you mistyped a dependency name in Cargo.toml you still can get a lot of broken code even for \"normal\" projects</p>",
        "id": 174784885,
        "sender_full_name": "matklad",
        "timestamp": 1567515255
    },
    {
        "content": "<p>yeah, it would probably be fine if that was caught by fuel though</p>",
        "id": 174784965,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1567515338
    },
    {
        "content": "<p>fine, yeah, but not perfect. I think ideally fuel should be required only for explicitelly adversary code, like \"look at my type-level Turing machine!\". For random garbage, I intuitively feel that arriving an \"there's no answer\" should be fast</p>",
        "id": 174785155,
        "sender_full_name": "matklad",
        "timestamp": 1567515490
    },
    {
        "content": "<p>I'm trying to summarize up some of our thoughts so far</p>\n<p>1. For meeting, we should be thinking about identifying key technical challenges and maybe proposing specific boundaries to explore<br>\n    - interesting question: what do unit tests look like? How can we enable people to be experts on one side but not the other? <br>\n2. For chalk and r-a etc, let's look at r-a pain points and try to diagnose them<br>\n    - fuel is a somewhat lower priority<br>\n3. experience from the second point kind of feeds into the first</p>",
        "id": 174785174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567515524
    },
    {
        "content": "<p>seems like zulip's markdown parser doesn't like my mixed bullet/numbered/indented lists but hopefully can you read that :)</p>",
        "id": 174785201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567515562
    },
    {
        "content": "<p>4. file IO is another acute pain point at the moment, which needs attention</p>",
        "id": 174785318,
        "sender_full_name": "matklad",
        "timestamp": 1567515647
    },
    {
        "content": "<p>As far as specific boundaries for libraries, I think that there is an obvious one that encompasses:</p>\n<ul>\n<li>chalk + type inference + <em>maybe</em> coercion</li>\n</ul>\n<p>and then there's another level up that includes the type checker. The distinction I am drawing is basically that the type checker requires us to model the HIR and the full set of Rust expressions.</p>",
        "id": 174785379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567515685
    },
    {
        "content": "<blockquote>\n<p>How can we enable people to be experts on one side but not the other? </p>\n</blockquote>\n<p>Unit tests should also help tremendously with rebuild times: i guess building only chalk is much faster than building ra + chalk (and we really should be splitting our <code>ra_hir</code> which does <em>everything</em> into crates )</p>",
        "id": 174785403,
        "sender_full_name": "matklad",
        "timestamp": 1567515714
    },
    {
        "content": "<blockquote>\n<p>4. file IO is another acute pain point at the moment, which needs attention</p>\n</blockquote>\n<p>yes and this is partially a salsa problem, right? We can discuss a bit more about how to model \"lazy inputs\" on the salsa side, it doesn't seem all <em>that</em> hard to me</p>",
        "id": 174785407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567515718
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  what do you mean by \"type inference\" separate from type checking there?</p>",
        "id": 174785479,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1567515755
    },
    {
        "content": "<p>Yeah, salsa's part seems easy, what is hard is cross-platform file watching</p>",
        "id": 174785483,
        "sender_full_name": "matklad",
        "timestamp": 1567515759
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> I mean encompassing operations like <code>T1 &lt;: T2</code> (make T1 and subtype of T2) and \"coerce T1 to T2\"</p>",
        "id": 174785531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567515804
    },
    {
        "content": "<p>basically, you can think of type-checking as \"generating a bunch of constraints\" and \"solving a bunch of constraints\" -- I am separating out the <em>solving</em> part</p>",
        "id": 174785555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567515822
    },
    {
        "content": "<p>the <em>generation</em> comes from walking the HIR</p>",
        "id": 174785567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567515833
    },
    {
        "content": "<p>ah ok</p>",
        "id": 174785570,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1567515838
    },
    {
        "content": "<p>OK. So I think I'll have some more time to devote to this late this afternoon or tomorrow. I'm going to try to convert some of my current thoughts into a vague paper doc and send it to y'all for feedback -- and maybe hack a bit on chalk because I can't help myself :P</p>",
        "id": 174785677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567515889
    },
    {
        "content": "<blockquote>\n<p>Yeah, salsa's part seems easy, what is hard is cross-platform file watching</p>\n</blockquote>\n<p>I feel I <em>personally</em> don't have much to contribute to that latter bit :)</p>",
        "id": 174785700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567515912
    },
    {
        "content": "<p>That's a good example of the kind of thing I endeavor not to learn :P</p>",
        "id": 174785723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567515931
    },
    {
        "content": "<p>I'd rather not to as well, but I fear I had to :D</p>",
        "id": 174785769,
        "sender_full_name": "matklad",
        "timestamp": 1567515962
    },
    {
        "content": "<p>that and linkers</p>",
        "id": 174785827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567515974
    },
    {
        "content": "<p>In all seriousness, though, and I guess we want to be sure to keep in mind use cases like FB, where there are too many files -- but I guess that's somewhat addressed just by laziness.</p>",
        "id": 174785859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567515999
    },
    {
        "content": "<p>Yeah, that's another recent conversation that convinced me that the current eager model is no right</p>",
        "id": 174785897,
        "sender_full_name": "matklad",
        "timestamp": 1567516032
    },
    {
        "content": "<p>(I suggest we table file-watching discussion though, for the lack of relevant expertise among participants :) )</p>",
        "id": 174785948,
        "sender_full_name": "matklad",
        "timestamp": 1567516071
    },
    {
        "content": "<blockquote>\n<p>and maybe hack a bit on chalk because I can't help myself :P</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I've noticed that \"trivial\" prs like \"update deps\" are not merged into chalk on a timely basis. Do you think we should try to actively seek chalks co-maintainer?</p>",
        "id": 174786290,
        "sender_full_name": "matklad",
        "timestamp": 1567516273
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so concerning using Chalk's <code>Ty</code> from RA, there are a few points that come to mind:<br>\n - I think we need a <code>Ty::Error</code> in Chalk (I currently handle this in a not-great way that may actually be contributing to the hangs)<br>\n - it would be nice if we could get rid of the <code>lalrpop_intern::InternedString</code> in <code>UnselectedProjectionTy</code>, maybe we could just introduce a new Id type for associated type names? I'd be up for trying that out</p>",
        "id": 174786315,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1567516290
    },
    {
        "content": "<p>we could and probably should remove the \"unselected\" stuff for now</p>",
        "id": 174830858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567545886
    },
    {
        "content": "<p>In term of reproducing a problem, I've spend the last hour looking at the cycling error (in macro expansion) on <code>CrateId(52)</code> somewhere in rustc. I guess a nice first step would be to add <code>crate.dbg(db)</code> method, which prints actually useful information. I am somewhat proud by the fact that so little information is exposed to our HIR, but debugging is a pain in the back due to this</p>",
        "id": 175150433,
        "sender_full_name": "matklad",
        "timestamp": 1567880666
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> so I'm around now-ish at last</p>",
        "id": 175263348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568049869
    },
    {
        "content": "<p>You still around?</p>",
        "id": 175263354,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568049874
    },
    {
        "content": "<p>yep!</p>",
        "id": 175263365,
        "sender_full_name": "matklad",
        "timestamp": 1568049882
    },
    {
        "content": "<p>So, some things that has happend:</p>\n<ul>\n<li>new mode to use client-provided file watching capabilities instead of notify</li>\n</ul>",
        "id": 175263446,
        "sender_full_name": "matklad",
        "timestamp": 1568049949
    },
    {
        "content": "<ul>\n<li>looking into watchman API to have something editor-indenepdent and Facebook grade. Still don't see the bottom :)</li>\n</ul>",
        "id": 175263514,
        "sender_full_name": "matklad",
        "timestamp": 1568049981
    },
    {
        "content": "<p>what is \"watchman\"?</p>",
        "id": 175263534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568050003
    },
    {
        "content": "<p>i.e., is that some pre-existing library?</p>",
        "id": 175263548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568050018
    },
    {
        "content": "<ul>\n<li>some initial debug-priting infra for hir, so that <code>println!(\"{:?}\")</code> shows not <code>Crate(CrateId(92))</code> but <code>Crate(name: \"foo\", path: \"src/lib.rs\" )</code></li>\n</ul>",
        "id": 175263565,
        "sender_full_name": "matklad",
        "timestamp": 1568050032
    },
    {
        "content": "<p>Watchman is Facebooks daemon for file watching</p>",
        "id": 175263572,
        "sender_full_name": "matklad",
        "timestamp": 1568050045
    },
    {
        "content": "<p>Ie, it is sort of a \"library\" for file watching, but it exists in a separate process, because OS APIs are horrible and it's hard to make a library</p>",
        "id": 175263676,
        "sender_full_name": "matklad",
        "timestamp": 1568050094
    },
    {
        "content": "<ul>\n<li>we've got some nice macro name resolution improvements from <a href=\"https://github.com/uHOOCCOOHu\" target=\"_blank\" title=\"https://github.com/uHOOCCOOHu\">https://github.com/uHOOCCOOHu</a></li>\n</ul>",
        "id": 175263735,
        "sender_full_name": "matklad",
        "timestamp": 1568050142
    },
    {
        "content": "<ul>\n<li><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> added more trait stff (<a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/1786\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/1786\">https://github.com/rust-analyzer/rust-analyzer/pull/1786</a>)</li>\n</ul>",
        "id": 175263886,
        "sender_full_name": "matklad",
        "timestamp": 1568050218
    },
    {
        "content": "<ul>\n<li>I've looked deeper into transofrming rustc's parser to jointness token model, and realised that rust-analyzer's parse also deals with jointness in a questionable way, so fixing that atm</li>\n</ul>",
        "id": 175263955,
        "sender_full_name": "matklad",
        "timestamp": 1568050267
    },
    {
        "content": "<p>And I think that's all bigger things that have happend since last week</p>",
        "id": 175264004,
        "sender_full_name": "matklad",
        "timestamp": 1568050305
    },
    {
        "content": "<p>ok. On my part not much has happened :) but I'm thinking about this upcoming Fri meeting</p>",
        "id": 175264014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568050315
    },
    {
        "content": "<p>On Friday I was <em>mostly</em> focused on looking into some soundness related problems unrelated to rust-analyzer :)</p>",
        "id": 175264092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568050358
    },
    {
        "content": "<p>That and reviewing various PRs</p>",
        "id": 175264103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568050376
    },
    {
        "content": "<p>Anyway I'm going to try and draw up a start of a plan today sketching out how the type checker could be separated out, and also give some feedback in/around rust-analyzer/chalk problems.</p>",
        "id": 175264304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568050529
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> what's the prep I need to do for Friday meeting? Short update about rust-analyzer + rough plan for librarification (are doing/can do/should do/must do table)?</p>",
        "id": 175264378,
        "sender_full_name": "matklad",
        "timestamp": 1568050568
    },
    {
        "content": "<p>Anything else?</p>",
        "id": 175264383,
        "sender_full_name": "matklad",
        "timestamp": 1568050573
    },
    {
        "content": "<p>That's what I'm trying to figure out</p>",
        "id": 175264397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568050582
    },
    {
        "content": "<p>Let's start creating some kind of rough sketch</p>",
        "id": 175264412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568050594
    },
    {
        "content": "<p><a href=\"https://hackmd.io/_ixQrAr5TKafV9m8eSU_VA\" target=\"_blank\" title=\"https://hackmd.io/_ixQrAr5TKafV9m8eSU_VA\">https://hackmd.io/_ixQrAr5TKafV9m8eSU_VA</a></p>",
        "id": 175264434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568050611
    },
    {
        "content": "<p>I think we've probably said a fair amount of things</p>",
        "id": 175264441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568050619
    },
    {
        "content": "<p>in our overall approach</p>",
        "id": 175264443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568050622
    },
    {
        "content": "<p>that would be good to document and try to get feedback on</p>",
        "id": 175264453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568050629
    },
    {
        "content": "<p>ok, I'll jump to the hack.md document then!</p>",
        "id": 175264582,
        "sender_full_name": "matklad",
        "timestamp": 1568050723
    },
    {
        "content": "<p>great; I'm trying to figure out how to organize it, so feel free to edit</p>",
        "id": 175264651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568050766
    },
    {
        "content": "<p>Oh, I've also noticed that there's a GSOC happening in Swift, whose goal is to move swift compiler over to Swift's libsyntax. Basically, the same which we'll need to do in rustc. I've contacted the person who does GSOC and asked them to blog about their experience :)</p>",
        "id": 175264938,
        "sender_full_name": "matklad",
        "timestamp": 1568050926
    },
    {
        "content": "<p>Nice</p>",
        "id": 175265149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568051071
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> one of the things I am wondering about</p>",
        "id": 175267150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568052166
    },
    {
        "content": "<p>to what extent does it make sense to try and code libraries \"generically\", so that they are not tied to a specific representation of types, HIR, etc</p>",
        "id": 175267202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568052191
    },
    {
        "content": "<p>and to what extent should we just be sharing the definitions</p>",
        "id": 175267217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568052196
    },
    {
        "content": "<p>I'd love to be concrete if we can</p>",
        "id": 175267250,
        "sender_full_name": "matklad",
        "timestamp": 1568052216
    },
    {
        "content": "<p>I agree</p>",
        "id": 175267261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568052224
    },
    {
        "content": "<p>That suggests that an area of focus might be on figuring out how to share the <em>actual definitions</em></p>",
        "id": 175267281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568052237
    },
    {
        "content": "<p>And I think with index-based structure you can acutlally do that: you can always key additional info by index</p>",
        "id": 175267342,
        "sender_full_name": "matklad",
        "timestamp": 1568052252
    },
    {
        "content": "<p>I think this is also one of the harder problems though</p>",
        "id": 175267348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568052255
    },
    {
        "content": "<p>But I am not sure how interning and lifetimes should work for indices</p>",
        "id": 175267365,
        "sender_full_name": "matklad",
        "timestamp": 1568052273
    },
    {
        "content": "<p>right</p>",
        "id": 175267368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568052279
    },
    {
        "content": "<p>I was thinking of calling this out as a \"challenge\"</p>",
        "id": 175267374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568052286
    },
    {
        "content": "<p>Especially, how index assignment works across modifications</p>",
        "id": 175267414,
        "sender_full_name": "matklad",
        "timestamp": 1568052325
    },
    {
        "content": "<p>I guess, we can just try to move <code>Ty</code> out of <code>ra_hir</code> to <code>ra_ty</code>, which doesn't have access to DB, and see what breaks?</p>",
        "id": 175267518,
        "sender_full_name": "matklad",
        "timestamp": 1568052379
    },
    {
        "content": "<p>seems like a first step</p>",
        "id": 175267992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568052736
    },
    {
        "content": "<p>I added a few more thoughts in the \"managing code\" section</p>",
        "id": 175268026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568052760
    },
    {
        "content": "<p>see if you think they make sense :)</p>",
        "id": 175268034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568052767
    },
    {
        "content": "<p>Makes sense, though I feel like we miss the word we want to use instead of \"unit tests\". We want IR data-driven tests:  input is a serialized IR, output is also a piece of data we match against, and the actual <code>#[test]</code> function just pipies input IR via component</p>",
        "id": 175268540,
        "sender_full_name": "matklad",
        "timestamp": 1568053055
    },
    {
        "content": "<p>THat is, thests are not really unit, they test subsytem as a whole, and critically, the are data based, though input data is not necessary rust syntax (to avoid dependency on the parser)</p>",
        "id": 175268623,
        "sender_full_name": "matklad",
        "timestamp": 1568053098
    },
    {
        "content": "<p>yeah, that sounds right</p>",
        "id": 175268687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568053158
    },
    {
        "content": "<p>I think a lot of things are pointing to</p>",
        "id": 175268691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568053162
    },
    {
        "content": "<p>the correct selection of the <em>component boundary</em> is key</p>",
        "id": 175268699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568053169
    },
    {
        "content": "<p>I'm thinking about e.g. <span class=\"user-mention\" data-user-id=\"126931\">@centril</span>'s comments about wanting to audit correctness from a language perspective</p>",
        "id": 175268722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568053186
    },
    {
        "content": "<p>I feel like if the component boundaries are well-chosen, that actually becomes potentially <em>easier</em></p>",
        "id": 175268793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568053209
    },
    {
        "content": "<blockquote>\n<p>the correct selection of the <em>component boundary</em> is key</p>\n</blockquote>\n<p>an example of an ungreat boundary, I think, is probably \"type unification\"</p>",
        "id": 175268850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568053263
    },
    {
        "content": "<p>like, it makes sense to collect the full set of things together I listed</p>",
        "id": 175268874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568053286
    },
    {
        "content": "<p>because they are approaching the level of concepts that might appear in a language spec</p>",
        "id": 175268993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568053349
    },
    {
        "content": "<p>(at least, to my mind.)</p>",
        "id": 175269008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568053356
    },
    {
        "content": "<p>the more I think about it, though, the more I think it makes sense to dive a bit into what sharing types would mean</p>",
        "id": 175269160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568053471
    },
    {
        "content": "<p>The open question is \"do such boundaries exist?\" :) Compiler as a whole is obv a <em>great</em> bounary: text on the input, binary on the output, a perfect black-box inside</p>",
        "id": 175269175,
        "sender_full_name": "matklad",
        "timestamp": 1568053487
    },
    {
        "content": "<p>I am not altogether sure that extracting bits out of the middle would be net positive. I hope it would be</p>",
        "id": 175269222,
        "sender_full_name": "matklad",
        "timestamp": 1568053534
    },
    {
        "content": "<p>Yes, my hypothesis is that such boundaries exist, but they are fairly high-level</p>",
        "id": 175269306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568053581
    },
    {
        "content": "<p>And further that exploiting them will be super useful :)</p>",
        "id": 175269323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568053593
    },
    {
        "content": "<p>But I suppose there is a degenerate plan in which we use such boundaries only internally, in the code</p>",
        "id": 175269335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568053606
    },
    {
        "content": "<p>I think this plan argues for a mono-repo and for integration tests only</p>",
        "id": 175269349,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568053617
    },
    {
        "content": "<p>Specifically, there's a lot of truth to  <a href=\"https://www.tedinski.com/2018/02/06/system-boundaries.html#boundaries-arent-free\" target=\"_blank\" title=\"https://www.tedinski.com/2018/02/06/system-boundaries.html#boundaries-arent-free\">https://www.tedinski.com/2018/02/06/system-boundaries.html#boundaries-arent-free</a></p>",
        "id": 175269370,
        "sender_full_name": "matklad",
        "timestamp": 1568053632
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> ok I'm finding this to be a somewhat useful brain dump. Something I think would help -- maybe a list of questions we would like help to answer. Or maybe we should figure out the question and a proposed answer and look for feedback.</p>",
        "id": 175270055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568054065
    },
    {
        "content": "<p>I think from the <em>traits/types</em> side of thing, I would like to try and lay out a \"trail\" of steps to take, maybe a dep graph. I'm going to try and sketch out what that means :)</p>",
        "id": 175270106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568054109
    },
    {
        "content": "<p>\"Who wants to help out? :)\" is a good question</p>",
        "id": 175270117,
        "sender_full_name": "matklad",
        "timestamp": 1568054115
    },
    {
        "content": "<p>lol</p>",
        "id": 175270121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568054118
    },
    {
        "content": "<p>fair enough!</p>",
        "id": 175270126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568054124
    },
    {
        "content": "<p>one question I had in mind was something like</p>",
        "id": 175270141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568054130
    },
    {
        "content": "<p>is there some .. \"time limit\"? Are there bits of work we can frontload that would help us to figure out if we're going in the right direction?</p>",
        "id": 175270224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568054167
    },
    {
        "content": "<p>but that question is not \"well formed\" yet I think</p>",
        "id": 175270236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568054174
    },
    {
        "content": "<p>I'm basically experiencing a measure of self doubt around \"is this a good use of time vs trying to soup up rust's existing systems in place\", I suspect.</p>",
        "id": 175270288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568054224
    },
    {
        "content": "<p>soup up: stir the soup until it nicely separates itself into original components? :)</p>",
        "id": 175270424,
        "sender_full_name": "matklad",
        "timestamp": 1568054333
    },
    {
        "content": "<p>But yeah, I also has \"if this even the right direction\" feeling: adding boundaries has costs</p>",
        "id": 175270453,
        "sender_full_name": "matklad",
        "timestamp": 1568054372
    },
    {
        "content": "<p>I think part of the way to answer that question is choosing the order to attack things</p>",
        "id": 175270471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568054396
    },
    {
        "content": "<p>and then re-evaluating</p>",
        "id": 175270481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568054401
    },
    {
        "content": "<p>uguh. I think that means \"go for the easiest boundary first\"</p>",
        "id": 175270573,
        "sender_full_name": "matklad",
        "timestamp": 1568054442
    },
    {
        "content": "<p>that's what I'm wondering, indeed</p>",
        "id": 175271776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568055222
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> I've realised that we've never actually announced this, but we are trying to have a weekly sync-up in this channel at this time</p>",
        "id": 175814403,
        "sender_full_name": "matklad",
        "timestamp": 1568642483
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> are you around?</p>",
        "id": 175814406,
        "sender_full_name": "matklad",
        "timestamp": 1568642489
    },
    {
        "content": "<p>yep</p>",
        "id": 175814413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568642499
    },
    {
        "content": "<p>although it may be wise to make a fresh topic for each week :)</p>",
        "id": 175814426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568642509
    },
    {
        "content": "<p>I'm kind of around</p>",
        "id": 175814437,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1568642519
    },
    {
        "content": "<p>I'm a bit distracted because I'm trying to get to the bottom of an async-await thing right now</p>",
        "id": 175814478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568642525
    },
    {
        "content": "<p>but I would like to follow up on the friday meeting</p>",
        "id": 175814490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568642538
    },
    {
        "content": "<p>I guess makes sense to start with general updates, if there are any since last time we talked</p>",
        "id": 175814536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568642573
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  I think that the same topic would actually be nicer, now? It's easier to caught up with prev meetings and do historical digging</p>",
        "id": 175814537,
        "sender_full_name": "matklad",
        "timestamp": 1568642576
    },
    {
        "content": "<p>no strong opinion</p>",
        "id": 175814551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568642584
    },
    {
        "content": "<p>ok, let's stick with status quo, unless anyone objects</p>",
        "id": 175814580,
        "sender_full_name": "matklad",
        "timestamp": 1568642608
    },
    {
        "content": "<p>updates:</p>",
        "id": 175814581,
        "sender_full_name": "matklad",
        "timestamp": 1568642610
    },
    {
        "content": "<ul>\n<li>we have a design meeting in t-compiler</li>\n</ul>",
        "id": 175814592,
        "sender_full_name": "matklad",
        "timestamp": 1568642626
    },
    {
        "content": "<ul>\n<li>some cleanups and refactoring of macro expansion in rust-analyzer</li>\n</ul>",
        "id": 175814660,
        "sender_full_name": "matklad",
        "timestamp": 1568642650
    },
    {
        "content": "<ul>\n<li>cleanups of name resolution</li>\n</ul>",
        "id": 175814671,
        "sender_full_name": "matklad",
        "timestamp": 1568642655
    },
    {
        "content": "<ul>\n<li>some parser fixes</li>\n</ul>",
        "id": 175814724,
        "sender_full_name": "matklad",
        "timestamp": 1568642705
    },
    {
        "content": "<ul>\n<li>one interesting architectural bit: we are inventing inheritance for IDs</li>\n</ul>",
        "id": 175814756,
        "sender_full_name": "matklad",
        "timestamp": 1568642724
    },
    {
        "content": "<p>Specifically, we have an <code>enum Adt { Struct(Struct), Enum(Enum), Union(Union) } </code></p>",
        "id": 175814799,
        "sender_full_name": "matklad",
        "timestamp": 1568642759
    },
    {
        "content": "<p>and <code>enum ModuleDef {Adt(Adt), Function(Function), ...}</code></p>",
        "id": 175814857,
        "sender_full_name": "matklad",
        "timestamp": 1568642777
    },
    {
        "content": "<p>and transitive <code>Into</code>impls: <code>Struct -&gt; Adt</code>, <code>Adt -&gt; ModuleDef</code>, <code>Struct -&gt; ModuleDef</code>.</p>",
        "id": 175814890,
        "sender_full_name": "matklad",
        "timestamp": 1568642803
    },
    {
        "content": "<p>but we also have e.g. <code>TypableDef</code> which includes a subset of those, so it's kind of multiple inheritance ;)</p>",
        "id": 175814938,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1568642834
    },
    {
        "content": "<p>ohhh, <a href=\"https://github.com/uHOOCCOOHu\" target=\"_blank\" title=\"https://github.com/uHOOCCOOHu\">https://github.com/uHOOCCOOHu</a> added completion for macros, so there's no need to type out <code>unimplemented</code> any more <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 175814983,
        "sender_full_name": "matklad",
        "timestamp": 1568642875
    },
    {
        "content": "<blockquote>\n<ul>\n<li>one interesting architectural bit: we are inventing inheritance for IDs</li>\n</ul>\n</blockquote>\n<p>I was anticipating that this would happen, if we had \"strongly typed ids\"</p>",
        "id": 175815069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568642914
    },
    {
        "content": "<p>So on my side, I started doing some work on chalk, specifically looking at what it would take to alter the interface to be more \"selective\" when it asks for impls</p>",
        "id": 175815119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568642949
    },
    {
        "content": "<p>oh, I worked on closure types, but that's now a bit blocked on (at least a small subset of) <a href=\"https://github.com/rust-lang/chalk/issues/241\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/241\">https://github.com/rust-lang/chalk/issues/241</a> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 175815129,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1568642959
    },
    {
        "content": "<p>Yeah, I was just going to say, I opened <a href=\"https://github.com/rust-lang/chalk/issues/241\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/241\">https://github.com/rust-lang/chalk/issues/241</a> -- and I see <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> left some comments I've not yet read :)</p>",
        "id": 175815168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568642990
    },
    {
        "content": "<p>I have to look more closely at my initial results. I made some preliminary changes in that direction and I'm getting some failing tests, but I don't know that the failures are significant.</p>",
        "id": 175815246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568643020
    },
    {
        "content": "<p>(They have to do with how we model coherence specifically, and there is probably a way to circumvent them)</p>",
        "id": 175815269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568643047
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> we should be able to land some changes that, while not perfect, help a lot in practice relatively soon. My <em>hope</em> for today was that I would sketch out a small series of steps around chalk, prioritizing (a) support for dyn and impl types, which is started, (b) the <code>RustIrDatabase</code> traits, (c) and steps to improve how we are handling lazy norm (although I think there are some open questions, as I wrote) -- but I'm not sure if those are the best priorities.</p>",
        "id": 175815433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568643148
    },
    {
        "content": "<p>One thing I was wondering is whether my change to flounder when self type is unknown helped with the \"chalk never terminates\" bugs</p>",
        "id": 175815461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568643163
    },
    {
        "content": "<p>I haven't seen any \"chalk never terminates\" bugs since the change that makes all traits non-enumerable</p>",
        "id": 175815509,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1568643208
    },
    {
        "content": "<p>It did, yeah: at least, there's a clean improvement in runtime from <code>oo</code> to <code>10s</code> for that PR</p>",
        "id": 175815528,
        "sender_full_name": "matklad",
        "timestamp": 1568643215
    },
    {
        "content": "<p>there are some reports of crashes inside Chalk, which I haven't looked into in detail yet</p>",
        "id": 175815574,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1568643241
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/1805\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/1805\">https://github.com/rust-analyzer/rust-analyzer/issues/1805</a></p>",
        "id": 175815653,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1568643268
    },
    {
        "content": "<p>it's very possible that this is some error in the Chalk lowering code in RA ;)</p>",
        "id": 175815725,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1568643311
    },
    {
        "content": "<p>ah, interesting</p>",
        "id": 175815731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568643314
    },
    {
        "content": "<p>one thing i'd like to do for chalk that's been on my radar for some time</p>",
        "id": 175815749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568643329
    },
    {
        "content": "<p>is to try and make some \"Benchmarks\"</p>",
        "id": 175815756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568643333
    },
    {
        "content": "<p>the code was never really written with perf in mind</p>",
        "id": 175815797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568643362
    },
    {
        "content": "<p>it'd be nice to have e.g. some realistic-ish setup with some number of traits and a real query that we can run <code>perf</code> on and use to measure changes</p>",
        "id": 175815864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568643384
    },
    {
        "content": "<p>just something to keep in mind if you come across some queries that seem plausible</p>",
        "id": 175815878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568643396
    },
    {
        "content": "<p>that said, this is exactly the sort of thing that I would think a \"chalk extractor\" could do a great job on (and I'd still like to add that at some point, on the chalk side)</p>",
        "id": 175815897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568643422
    },
    {
        "content": "<p>anyway, do my priorities sound plausible?</p>\n<blockquote>\n<p>(a) support for dyn and impl types, which is started, (b) the RustIrDatabase traits, (c) and steps to improve how we are handling lazy norm </p>\n</blockquote>",
        "id": 175815918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568643435
    },
    {
        "content": "<p>I think <code>ra_cli analys-bench</code> is a pretty realistic  example (but it is bound to rust-analyzer of course)</p>",
        "id": 175815944,
        "sender_full_name": "matklad",
        "timestamp": 1568643454
    },
    {
        "content": "<p>It would be interesting to tie \"dumping chalk IR as we go\" idea from prev meeting into <code>analysis-bench</code>, so that you can record a real sample, and then use it to bench chalk, without ra</p>",
        "id": 175816049,
        "sender_full_name": "matklad",
        "timestamp": 1568643500
    },
    {
        "content": "<p>yeah; I think the chalk side is the right side to do it on</p>",
        "id": 175816130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568643563
    },
    {
        "content": "<p>it'd be nice to be able to do it for rustc  too, for example</p>",
        "id": 175816149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568643571
    },
    {
        "content": "<p>anyway, <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>, what is status arond parser work?</p>",
        "id": 175816262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568643617
    },
    {
        "content": "<p>I've yet to catch up with that discussion from friday</p>",
        "id": 175816270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568643621
    },
    {
        "content": "<p>Remembered two more things:</p>\n<ul>\n<li>\n<p>I've gave an improvised talk about rust-analyzer at the local Rust meetup. As a result, <span class=\"user-mention\" data-user-id=\"200750\">@Vlad</span> and I are thinking that it's time to start drafting RFCs about leaking <code>impl</code>s out of function bodies (there's a thread in wg-traits here on zulip)</p>\n</li>\n<li>\n<p>It looks like we are slowly distilling one more core abstraction in rust-analyzer: an <code>Source&lt;T&gt;</code>, which is an syntax tree bit, pinned to a particular place (crate &amp; module) in the crate. That is, syntax tree is a value type, and <code>Source&lt;SyntaxTree&gt;</code> is an identity type.</p>\n</li>\n</ul>",
        "id": 175816274,
        "sender_full_name": "matklad",
        "timestamp": 1568643623
    },
    {
        "content": "<blockquote>\n<ul>\n<li>I've gave an improvised talk about rust-analyzer at the local Rust meetup. As a result, <span class=\"user-mention silent\" data-user-id=\"200750\">Vlad</span> and I are thinking that it's time to start drafting RFCs about leaking <code>impl</code>s out of function bodies (there's a thread in wg-traits here on zulip)</li>\n</ul>\n</blockquote>\n<p>Yes. In particular, I would expect to change this at a rust edition boundary</p>",
        "id": 175816302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568643646
    },
    {
        "content": "<p>(I was thinking about that earlier, that we ought to be preparing for such a change well in advance)</p>",
        "id": 175816347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568643672
    },
    {
        "content": "<p>re parser: nothing new on the rustc side, but rust-analyzer now handles composed tokens in the way I want rustc to handle them, so I know have the model to change rustc</p>",
        "id": 175816350,
        "sender_full_name": "matklad",
        "timestamp": 1568643673
    },
    {
        "content": "<p>I don't quite understand what you mean about <code>Source&lt;T&gt;</code> yet</p>",
        "id": 175816384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568643695
    },
    {
        "content": "<p>editor's note: <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Source.3CT.3E.20refactoring\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Source.3CT.3E.20refactoring\">responses about <code>Source&lt;T&gt;</code> broken out into a separate topic</a></p>",
        "id": 175816768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568643946
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>, <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> are you around for a weekly sync-up ? :)</p>",
        "id": 176370745,
        "sender_full_name": "matklad",
        "timestamp": 1569247280
    },
    {
        "content": "<p>I'm around</p>",
        "id": 176370890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569247367
    },
    {
        "content": "<p>Stuff that happened this week:</p>\n<ul>\n<li>rust-analyzer has a website (currently in the stealf-mode): <a href=\"https://rust-analyzer.github.io/\" target=\"_blank\" title=\"https://rust-analyzer.github.io/\">https://rust-analyzer.github.io/</a>. The idea is to put user docs and blog posts there. </li>\n<li><span class=\"user-mention\" data-user-id=\"220059\">@Jasper De Sutter</span> implemented a web-version of rust-analyzer a while back, and I've finally merged it: <a href=\"https://rust-analyzer.github.io/wasm-demo.html\" target=\"_blank\" title=\"https://rust-analyzer.github.io/wasm-demo.html\">https://rust-analyzer.github.io/wasm-demo.html</a></li>\n</ul>",
        "id": 176370925,
        "sender_full_name": "matklad",
        "timestamp": 1569247404
    },
    {
        "content": "<p>Nice</p>",
        "id": 176370936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569247419
    },
    {
        "content": "<p>\"web version\" of rust-analyzer?</p>",
        "id": 176370942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569247424
    },
    {
        "content": "<p><a href=\"https://rust-analyzer.github.io/wasm-demo.html\" target=\"_blank\" title=\"https://rust-analyzer.github.io/wasm-demo.html\">https://rust-analyzer.github.io/wasm-demo.html</a></p>",
        "id": 176370952,
        "sender_full_name": "matklad",
        "timestamp": 1569247430
    },
    {
        "content": "<p>(warning: 5 MB download)</p>",
        "id": 176371007,
        "sender_full_name": "matklad",
        "timestamp": 1569247444
    },
    {
        "content": "<p>That's very cool :)</p>",
        "id": 176371043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569247474
    },
    {
        "content": "<ul>\n<li>I've been refactoring macro-by-example in rust-analyzer and rustc (to make sure that mbe in rustc doesn't loose jointness info)</li>\n</ul>",
        "id": 176371077,
        "sender_full_name": "matklad",
        "timestamp": 1569247503
    },
    {
        "content": "<ul>\n<li><span class=\"user-mention\" data-user-id=\"212617\">@Geobomatic</span> added assist to switch between <code>\"foo\"</code> and <code>r#\"foo\"#</code></li>\n<li><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> added more associated types stuff, and is about to give new salsa's cycle recovery support a try</li>\n</ul>",
        "id": 176371218,
        "sender_full_name": "matklad",
        "timestamp": 1569247605
    },
    {
        "content": "<ul>\n<li>misc parser fixed</li>\n</ul>",
        "id": 176371249,
        "sender_full_name": "matklad",
        "timestamp": 1569247623
    },
    {
        "content": "<p>We also had a pretty interesting discussion about joint rls/rust-analyzer strategy. We didn't come up with a strategy, but made this nice markdown doc: <a href=\"https://hackmd.io/S5wub4mfToSnnLGvK3I-ew\" target=\"_blank\" title=\"https://hackmd.io/S5wub4mfToSnnLGvK3I-ew\">https://hackmd.io/S5wub4mfToSnnLGvK3I-ew</a></p>",
        "id": 176371304,
        "sender_full_name": "matklad",
        "timestamp": 1569247674
    },
    {
        "content": "<p>I think that's it?</p>",
        "id": 176371356,
        "sender_full_name": "matklad",
        "timestamp": 1569247687
    },
    {
        "content": "<p>OK. My update is shorter, I guess. I landed a small update to chalk's IR, removing the <code>all_structs</code> callback, and I plan to work a bit more today to refine the \"request impl\" callback, and also to help push the dyn/impl integration forward.</p>",
        "id": 176371386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569247718
    },
    {
        "content": "<p>Oh, one more thing: while working on mbe, I've realized that this could be another candidate for rather painless librarification. Maybe</p>",
        "id": 176371441,
        "sender_full_name": "matklad",
        "timestamp": 1569247781
    },
    {
        "content": "<p>Ah, interesting</p>",
        "id": 176371466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569247802
    },
    {
        "content": "<p>I've thought about that before</p>",
        "id": 176371512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569247804
    },
    {
        "content": "<p>In theory the interface for mbe are token trees, which is a relatively thing data-structure</p>",
        "id": 176371515,
        "sender_full_name": "matklad",
        "timestamp": 1569247806
    },
    {
        "content": "<p>But I had kind of forgotten it</p>",
        "id": 176371520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569247808
    },
    {
        "content": "<p>Yeah; there is some interaction with name resolution, but there is also a part that can be factored out from that I suppose</p>",
        "id": 176371540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569247821
    },
    {
        "content": "<p>In practice, the token trees in rustc contain AST, and that throws quite a wrench in the works</p>",
        "id": 176371567,
        "sender_full_name": "matklad",
        "timestamp": 1569247835
    },
    {
        "content": "<p>Indeed</p>",
        "id": 176371586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569247846
    },
    {
        "content": "<p>I have also disliked that</p>",
        "id": 176371594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569247852
    },
    {
        "content": "<p>Particularly since it's visible (in edge cases)</p>",
        "id": 176371597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569247857
    },
    {
        "content": "<p>It's basically an efficiency optimization, which I think we could/should do in other ways</p>",
        "id": 176371615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569247874
    },
    {
        "content": "<p>Is it visible in non-backwards compatible way?</p>",
        "id": 176371640,
        "sender_full_name": "matklad",
        "timestamp": 1569247894
    },
    {
        "content": "<p>Hmm so I think something else I should prioritize is doing a bit of work in/around rust-analyzer's type checker. I guess I can start by reviewing what <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> did around associated types.</p>",
        "id": 176371658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569247918
    },
    {
        "content": "<p>Like, we can't today re-parse $var:expr as something else, but it seems like if we allow reparsing, that would only increase the set of accepted programs</p>",
        "id": 176371704,
        "sender_full_name": "matklad",
        "timestamp": 1569247926
    },
    {
        "content": "<blockquote>\n<p>Is it visible in non-backwards compatible way?</p>\n</blockquote>\n<p>depends what you mean by \"non backawrds compatible\" -- I guess the question is \"compatible with <em>what</em>\"</p>",
        "id": 176371715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569247934
    },
    {
        "content": "<p>Compatible with current stable behavior</p>",
        "id": 176371741,
        "sender_full_name": "matklad",
        "timestamp": 1569247954
    },
    {
        "content": "<p>if you had some stream of tokens that could be parsed as <em>either</em> an expression <em>or</em> a type</p>",
        "id": 176371748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569247959
    },
    {
        "content": "<p>no, I mean, what <em>future</em> behavior are you imagining</p>",
        "id": 176371759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569247971
    },
    {
        "content": "<p>I think that you could observe e.g. <code>macro_rules! foo { ($x:expr) =&gt; { .. } ($x:ty) =&gt; { .. } }</code></p>",
        "id": 176371793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569247995
    },
    {
        "content": "<p>Ah. So, I imagine that we store <code>$var:expr</code> as a token tree with virtual delimiters</p>",
        "id": 176371822,
        "sender_full_name": "matklad",
        "timestamp": 1569248005
    },
    {
        "content": "<p>right, and I think that might not be enough to be fully compatible</p>",
        "id": 176371837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569248020
    },
    {
        "content": "<p>though it is arguably a bug-fix</p>",
        "id": 176371849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569248029
    },
    {
        "content": "<p>it's the kind of change where the behavior is sort of loosely documented :)</p>",
        "id": 176371876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569248043
    },
    {
        "content": "<p>we definitelly should make sure that <code>macro</code> thing doesn't use the AST</p>",
        "id": 176371922,
        "sender_full_name": "matklad",
        "timestamp": 1569248062
    },
    {
        "content": "<p>macro 2.0 that is</p>",
        "id": 176371935,
        "sender_full_name": "matklad",
        "timestamp": 1569248074
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 176371946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569248076
    },
    {
        "content": "<p>( I have to run a bit early today btw -- but I'll be back around hacking on traits and rust-analyzer this afternoon )</p>",
        "id": 176371971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569248089
    },
    {
        "content": "<p>So, are you still actively investigating parsing extraction?</p>",
        "id": 176372000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569248118
    },
    {
        "content": "<p>I'm trying to understand the \"status\" of that</p>",
        "id": 176372010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569248132
    },
    {
        "content": "<p>sort-of</p>",
        "id": 176372020,
        "sender_full_name": "matklad",
        "timestamp": 1569248140
    },
    {
        "content": "<p>I am actively trying to move the parser to the token-tree modelN</p>",
        "id": 176372046,
        "sender_full_name": "matklad",
        "timestamp": 1569248153
    },
    {
        "content": "<p>(which is a part of that)</p>",
        "id": 176372055,
        "sender_full_name": "matklad",
        "timestamp": 1569248158
    },
    {
        "content": "<p>I haven't looked further than that</p>",
        "id": 176372108,
        "sender_full_name": "matklad",
        "timestamp": 1569248176
    },
    {
        "content": "<p>the rustc parser?</p>",
        "id": 176372119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569248192
    },
    {
        "content": "<p>or r-a parser?</p>",
        "id": 176372123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569248194
    },
    {
        "content": "<p>that does seem like a good first step</p>",
        "id": 176372129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569248198
    },
    {
        "content": "<p>rustc parser</p>",
        "id": 176372131,
        "sender_full_name": "matklad",
        "timestamp": 1569248199
    },
    {
        "content": "<blockquote>\n<p>Ah. So, I imagine that we store <code>$var:expr</code> as a token tree with virtual delimiters</p>\n</blockquote>\n<p>to be clear: I think I'd prefer to try this model first,</p>",
        "id": 176372155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569248212
    },
    {
        "content": "<p>r-a parser uses token tree model like the one is <code>proc_macro</code></p>",
        "id": 176372167,
        "sender_full_name": "matklad",
        "timestamp": 1569248219
    },
    {
        "content": "<p>because I <em>think</em> it's more what users would expect</p>",
        "id": 176372171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569248221
    },
    {
        "content": "<p>but I think the \"fix\" to match rustc is also not that terrible</p>",
        "id": 176372182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569248230
    },
    {
        "content": "<p>it'd kind of be that the \"virtual delimeters\" also encode the fragment</p>",
        "id": 176372188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569248237
    },
    {
        "content": "<p>i.e., there are virtual \"type\" delimeters, virtual \"expr\" delimeters</p>",
        "id": 176372200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569248252
    },
    {
        "content": "<p>I should probably make some proof of concept test case for what I'm talking about</p>",
        "id": 176372207,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569248261
    },
    {
        "content": "<p>Yeah, I think I undestand what you are talking about</p>",
        "id": 176372319,
        "sender_full_name": "matklad",
        "timestamp": 1569248324
    },
    {
        "content": "<p>It wouldn't be hard to implement indeed</p>",
        "id": 176372342,
        "sender_full_name": "matklad",
        "timestamp": 1569248334
    },
    {
        "content": "<p>but it would mean that <code>mbe</code> model is not quite <code>proc_macro2</code> tokens, which is a rather big problem, even if the difference is small</p>",
        "id": 176372383,
        "sender_full_name": "matklad",
        "timestamp": 1569248368
    },
    {
        "content": "<p>Though, perhaps we can store this info on the side</p>",
        "id": 176372404,
        "sender_full_name": "matklad",
        "timestamp": 1569248381
    },
    {
        "content": "<p>not very realistic, but <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8271db061493e750a9b1cd60e4e9864d\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8271db061493e750a9b1cd60e4e9864d\">here is an example</a></p>",
        "id": 176372537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569248454
    },
    {
        "content": "<p>oh, maybe not, I guess that doesn't parse as an expr for us</p>",
        "id": 176372580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569248486
    },
    {
        "content": "<p>well I think I can make one but it takes some work :P</p>",
        "id": 176372588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569248492
    },
    {
        "content": "<p>yeah, I did the same: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e9a29816fa71e6abb09fb349f4053d5a\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e9a29816fa71e6abb09fb349f4053d5a\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e9a29816fa71e6abb09fb349f4053d5a</a></p>",
        "id": 176372590,
        "sender_full_name": "matklad",
        "timestamp": 1569248493
    },
    {
        "content": "<p>ah yeah duh there you go</p>",
        "id": 176372614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569248511
    },
    {
        "content": "<p>great</p>",
        "id": 176372616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569248512
    },
    {
        "content": "<p>ok, I gotta run though, bbiab</p>",
        "id": 176372619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569248517
    },
    {
        "content": "<p>heah, yeh, mine is better :D</p>",
        "id": 176372623,
        "sender_full_name": "matklad",
        "timestamp": 1569248518
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 176372673,
        "sender_full_name": "matklad",
        "timestamp": 1569248531
    },
    {
        "content": "<p>hey, <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span>, it's time for another weekly sink up. I have to run really soon, so I'll give just a brife update, and try to follow up later</p>",
        "id": 176934478,
        "sender_full_name": "matklad",
        "timestamp": 1569852090
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 176934849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569852296
    },
    {
        "content": "<p>Things that happened since last week:</p>\n<ul>\n<li>support for closures ( <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> )</li>\n<li>support for coercions ( <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> <a href=\"https://github.com/uHOOCCOOHu\" target=\"_blank\" title=\"https://github.com/uHOOCCOOHu\">https://github.com/uHOOCCOOHu</a>)</li>\n<li>resolving <code>$crate</code> from macro by example (<a href=\"https://github.com/uHOOCCOOHu\" target=\"_blank\" title=\"https://github.com/uHOOCCOOHu\">https://github.com/uHOOCCOOHu</a> is on a roll!) </li>\n<li>I am refactoring API for modifying syntax trees, looking closely at Rosnlyn's syntax tree rewrites. At the moment, I am scaling down elaborate infra we have to the simplest thing that could work.</li>\n<li>on the rustc side, I am wrangling with token jointness in macro by example</li>\n</ul>",
        "id": 176934864,
        "sender_full_name": "matklad",
        "timestamp": 1569852304
    },
    {
        "content": "<p>Can I get some links to the closures/coercions PRs etc?</p>",
        "id": 176934917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569852337
    },
    {
        "content": "<p>Or is it best to read the source</p>",
        "id": 176934920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569852340
    },
    {
        "content": "<p>I guess I can find them on the repo</p>",
        "id": 176934927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569852344
    },
    {
        "content": "<p>Also, I will be traveling this week: giving a \"Rust as a High Level Langauge\" talk in Toulouse, so I might be slow to repond.</p>",
        "id": 176934941,
        "sender_full_name": "matklad",
        "timestamp": 1569852354
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> commit hash is <a href=\"https://github.com/rust-lang/rust/commit/c7420ddaaa76741d1eebe393406b38ba5596e54a\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/c7420ddaaa76741d1eebe393406b38ba5596e54a\">c7420ddaaa76741d1eebe393406b38ba5596e54a</a></p>",
        "id": 176935022,
        "sender_full_name": "matklad",
        "timestamp": 1569852391
    },
    {
        "content": "<p>a better link: <a href=\"https://github.com/rust-analyzer/rust-analyzer/commit/c7420ddaaa76741d1eebe393406b38ba5596e54a\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/commit/c7420ddaaa76741d1eebe393406b38ba5596e54a\">https://github.com/rust-analyzer/rust-analyzer/commit/c7420ddaaa76741d1eebe393406b38ba5596e54a</a></p>",
        "id": 176935102,
        "sender_full_name": "matklad",
        "timestamp": 1569852454
    },
    {
        "content": "<p>thanks</p>",
        "id": 176935140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569852480
    },
    {
        "content": "<p>on my side not a lot to tell, I plan to work more on the chalk changes that <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> alluded to today, along with some other things. I also started thinking about what it might look like to extract types into a library that many could share.</p>",
        "id": 176935439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569852625
    },
    {
        "content": "<p>seems like one of the hardest questions to answer will come up with interning and other such details, and how generic we want to be about that</p>",
        "id": 176935485,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569852658
    },
    {
        "content": "<p>rust doesn't make it <em>super</em> easy to extract over these sorts of things, though I think in this case it could plausibly be done.</p>",
        "id": 176935512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569852674
    },
    {
        "content": "<p>though mostly I've been pondering how to cleanup chalk to address the normalization and \"known self type\" cases</p>",
        "id": 176935550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569852698
    },
    {
        "content": "<p>Hello <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> , time for another update.</p>",
        "id": 177521728,
        "sender_full_name": "matklad",
        "timestamp": 1570456835
    },
    {
        "content": "<p>Not a lot of stuff happened this week, but the highlight is the support for <code>#[cfg()]</code> attributes for conditional compilation by <a href=\"https://github.com/oxalica\" target=\"_blank\" title=\"https://github.com/oxalica\">https://github.com/oxalica</a>: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/1928\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/1928\">https://github.com/rust-analyzer/rust-analyzer/pull/1928</a></p>",
        "id": 177521805,
        "sender_full_name": "matklad",
        "timestamp": 1570456896
    },
    {
        "content": "<p>Some other things:</p>\n<ul>\n<li>we've replaced type-based visitor for AST nodes with a macro, which does \"dynamic cast\"</li>\n<li>in <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/1807\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/1807\">#1807</a>,  cronokirby implemented \"apply De Morgan Law\" assist</li>\n<li>goffrie did a couple of fixes to the parser</li>\n<li>lnicola implemented support for diverging blocks</li>\n</ul>",
        "id": 177522163,
        "sender_full_name": "matklad",
        "timestamp": 1570457118
    },
    {
        "content": "<p>I think I want to look at supporting dynamic reloading of the crate graph next:</p>\n<ul>\n<li>as a side effect, this'll move us to a lazy VFS, which is an interesting design problem</li>\n<li>people are consistenly confused by rust-analyzer not picking up changes to Cargo.toml, it would be cool if we did something about this</li>\n</ul>",
        "id": 177522371,
        "sender_full_name": "matklad",
        "timestamp": 1570457262
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> , any updates on your side?</p>",
        "id": 177522505,
        "sender_full_name": "matklad",
        "timestamp": 1570457331
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> sorry -- a neighbor came by with an emergency</p>",
        "id": 177522529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570457355
    },
    {
        "content": "<p>was afk</p>",
        "id": 177522538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570457357
    },
    {
        "content": "<p>just got back, let me catch up</p>",
        "id": 177522543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570457360
    },
    {
        "content": "<p>OK, so, updates: </p>\n<ul>\n<li>we're making progress on dyn/impl Trait (thanks to <span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span>)</li>\n<li>I am planning today to make some initial proposals regarding factoring out a shared type  library</li>\n<li>and we're planning to establish a kind of regular design meeting, though the timeslot has to be figured out, that will help us in \"disseminating\" knowledge</li>\n</ul>",
        "id": 177522727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570457472
    },
    {
        "content": "<p>I spent most of my time last week exploring some non-RLS-related trait things (e.g., upcasts in rustc and what it takes to unblock const generics)</p>",
        "id": 177522747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570457492
    },
    {
        "content": "<p>(The good news being that I think I see the path, but we'll see)</p>",
        "id": 177522758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570457506
    },
    {
        "content": "<p>That reminds me... At the all hands, when we were discussing traits, there was an idea that, to unblock immediate progress on rustc side, we (well, you I presume :) ) should pause chalk work and instead augment the current trait solver.</p>\n<p>I am curious what's the final plan here: are we doing GATs and stuff before chalkification?</p>",
        "id": 177522912,
        "sender_full_name": "matklad",
        "timestamp": 1570457636
    },
    {
        "content": "<p>I'm still kind of trying to figure that out. My current plan is to pursue two main things:</p>\n<ul>\n<li>Some form of lazy norm on rustc side -- this unblocks const generics primarily but maybe some other things</li>\n<li>Chalk integration and improvements through rust-analyzer primarily</li>\n</ul>",
        "id": 177522989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570457690
    },
    {
        "content": "<p>Once we have lazy norm going, the next step would probably be figuring out some details of the \"universe story\" on rustc side; I did some of that work already. That might <em>then</em> enable GATs on the rustc side, but I'm not entirely sure. I remember the last time I did work on this I felt like it would be hard</p>",
        "id": 177523042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570457734
    },
    {
        "content": "<p>(I also opened a lot of issues around refactoring chalk last week, incidentally, but I need to prioritize them a bit)</p>",
        "id": 177523163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570457799
    },
    {
        "content": "<p>Belated sync for this week:</p>\n<ul>\n<li>I've been tied up with migration to lazy VFS, which is not yet finished. I've uncovered interesting case where purely lazy VFS won't be enough: for \"find all references\", we want to do a text search first, and that wants to traverse files eagarly</li>\n<li>Completing paths to generic types in the type context now automatically adds <code>&lt;&gt;</code></li>\n<li>We now has a less hacky routing to change indentation based on the syntax tree, and not on the string</li>\n<li>The code to resolve <code>mod foo;</code> to file is refactored and handled more edge cases correctly now</li>\n<li><code>Self</code> is correcty resolve in adt definitions</li>\n<li>Type inference code is split across several module</li>\n</ul>",
        "id": 178108271,
        "sender_full_name": "matklad",
        "timestamp": 1571063627
    },
    {
        "content": "<p>Next week, next syncup!</p>",
        "id": 178657457,
        "sender_full_name": "matklad",
        "timestamp": 1571666435
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 178657705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571666598
    },
    {
        "content": "<p>Update from last week:</p>\n<ul>\n<li>We had a trait design meeting where we talked about some of our possible plans for what a generic type library might look like. While flying to Rust Belt Rust, I also started working on this -- so far it's going reasonably well. My particular goal with this refactoring is to help improve the \"must know self type\" issue that is related to rust-analyzer</li>\n</ul>",
        "id": 178657878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571666716
    },
    {
        "content": "<p>I unfortunately don't have a lot of too report this week: I've been trying different thing, and they didn't quite work out.</p>\n<p>In particular, I've made all preliminary refactoings for a lazy VFS, only to realise that we probably don't actually want a fully lazy VFS. We want to load file texts lazily, but the set of files should be loaded eagarly. This is how watchman works, and this I think is the only reliable way to get file watching right. </p>\n<p>I've also looked into splitting hir database of rust-analyzer into several crates. The results are mixed:</p>\n<ul>\n<li>it's defiitelly possible to do the splitting</li>\n<li>it's unclear how the split API should look like: neither <code>id.foo(db)</code> nor <code>db.foo(id)</code> are quite a fit</li>\n<li>it's somewhat unclear along which lines the API should be split, as there are at least two dimensions: before types / after types and top level  / function bodies</li>\n</ul>",
        "id": 178657920,
        "sender_full_name": "matklad",
        "timestamp": 1571666737
    },
    {
        "content": "<ul>\n<li>I also talked a fair amount to <span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span> at RBR about our overall IDE strategy and how to better \"harmonize\" rust-analyzer, RLS, and rustc development. We didn't  reach a firm conclusion yet except that we needed to setup some more time to talk about this with you present, <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>, and that we probably had to start devoting bigger blocks of time to talk it all out.</li>\n</ul>",
        "id": 178658021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571666791
    },
    {
        "content": "<p>Hmm, ok, I will try to catch up a bit on that discussion</p>",
        "id": 178658081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571666824
    },
    {
        "content": "<p>(the splitting of the crate)</p>",
        "id": 178658087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571666829
    },
    {
        "content": "<p>Oh, there is another thing, which is that we landed <em>some</em> support for <code>dyn Trait</code> and <code>impl Trait</code>, but it's quite broken</p>",
        "id": 178658118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571666849
    },
    {
        "content": "<p>Indeed we ought to figure this particular elephant in the room out</p>",
        "id": 178658120,
        "sender_full_name": "matklad",
        "timestamp": 1571666851
    },
    {
        "content": "<p>Yeah. I was finding it useful to try and explore various \"scenarios\"</p>",
        "id": 178658156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571666871
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yeah, <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> already has a WIP PR which integrates that with rust-analyzer, which doens't quite work yet</p>",
        "id": 178658180,
        "sender_full_name": "matklad",
        "timestamp": 1571666882
    },
    {
        "content": "<p>e.g., if we go \"all in\" on rust-analyzer, what does that look like? which of the things we might want to do on rustc conflict with that? What is the opposite extreme? What's in the middle?</p>",
        "id": 178658234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571666896
    },
    {
        "content": "<p>OK, I see a topic that looks like I need to catch up on it</p>",
        "id": 178658251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571666912
    },
    {
        "content": "<blockquote>\n<ul>\n<li>We had a trait design meeting where we talked about some of our possible plans for what a generic type library might look like. </li>\n</ul>\n</blockquote>\n<p>on this topic, not sure if you followed that at all <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>?</p>",
        "id": 178658272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571666924
    },
    {
        "content": "<p>Nope, I think I've missed that</p>",
        "id": 178658295,
        "sender_full_name": "matklad",
        "timestamp": 1571666942
    },
    {
        "content": "<p>the relevant thing to rust-analyzer is that -- at <em>least</em> to start and maybe permanently -- I want to have traits that let you interact with types generically, without regard to their concrete representation</p>",
        "id": 178658328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571666966
    },
    {
        "content": "<p>Like, I think I wasn't pinged, do you have a link to the zulip thread?</p>",
        "id": 178658347,
        "sender_full_name": "matklad",
        "timestamp": 1571666975
    },
    {
        "content": "<p>one sec</p>",
        "id": 178658356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571666980
    },
    {
        "content": "<p>here are the <a href=\"https://github.com/rust-lang/wg-traits/blob/master/minutes/design-2019-10-16.md\" target=\"_blank\" title=\"https://github.com/rust-lang/wg-traits/blob/master/minutes/design-2019-10-16.md\">notes on the meeting</a></p>",
        "id": 178658375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571666997
    },
    {
        "content": "<p>there are links to the topic but also significant points</p>",
        "id": 178658404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667002
    },
    {
        "content": "<blockquote>\n<p>the relevant thing to rust-analyzer is that -- at <em>least</em> to start and maybe permanently -- I want to have traits that let you interact with types generically, without regard to their concrete representation</p>\n</blockquote>\n<p>there are two reasons to do this:</p>\n<ul>\n<li>it allows us to bridge rustc and other crates in an incremental fashion</li>\n<li>it also helps us to write more concrete code in some cases, where we want to divide out \"categories\" of types -- a lot of the discussion in the meeting was about one instance of this, in chalk. In this case, you might even have only one actual underlying \"type representation\", but you write the code against generics nonetheless.</li>\n</ul>",
        "id": 178658516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667073
    },
    {
        "content": "<p>I'm exploring this</p>",
        "id": 178658517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667075
    },
    {
        "content": "<p>(I expect to put more time into that today)</p>",
        "id": 178658536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667089
    },
    {
        "content": "<p>If that makes more progress, I am definitely interested in trying to work with <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> to factor out the type checker from RLS into something more independent (maybe even integrate it into the chalk repository, not sure -- it depends on what we decide the \"scope\" of the chalk repo should be)</p>",
        "id": 178658609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667133
    },
    {
        "content": "<p>Aha, the typefamaly pattern seems like a hammer big enough to handle every librarification</p>",
        "id": 178658612,
        "sender_full_name": "matklad",
        "timestamp": 1571667136
    },
    {
        "content": "<p>Yes, I've found it a very powerful pattern in the past</p>",
        "id": 178658628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667147
    },
    {
        "content": "<p>Right now though what I'm trying to do</p>",
        "id": 178658660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667175
    },
    {
        "content": "<p>is refactor some of the parts of chalk that are quite messy <em>anyway</em></p>",
        "id": 178658665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667182
    },
    {
        "content": "<p>my goal is that the code reads <em>nicer</em> with the generics than without</p>",
        "id": 178658676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667188
    },
    {
        "content": "<p>and helps to avoid some kinds of bugs</p>",
        "id": 178658683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667193
    },
    {
        "content": "<p>we'll see if I can achieve that ;)</p>",
        "id": 178658691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667196
    },
    {
        "content": "<p>my main concern is undue complexity; otoh I think that people who hack on chalk should probably be pretty comfortable with traits :P</p>",
        "id": 178658709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667211
    },
    {
        "content": "<p>one of the nice things though of the \"one true underlying type\" thing</p>",
        "id": 178658728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667228
    },
    {
        "content": "<p>is that you can kind of \"cut off\" the generics at any point</p>",
        "id": 178658738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667236
    },
    {
        "content": "<p>i.e., in my chalk branch right now, the low-level code is generic, but at some point everybody just hardcodes on \"type family\"</p>",
        "id": 178658791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667253
    },
    {
        "content": "<p>(this lets me convert crate by crate)</p>",
        "id": 178658795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667256
    },
    {
        "content": "<p>I would also be concerned about separate compilation. But yeah, if, in the end, we have some concrete representation, that fixes this problem.</p>",
        "id": 178658832,
        "sender_full_name": "matklad",
        "timestamp": 1571667291
    },
    {
        "content": "<p>there is certainly the issue of compilation time and monomorphization, but -- yes -- keeping the number of concrete representations minimal means there aren't really multiple copies in the end</p>",
        "id": 178658874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667328
    },
    {
        "content": "<p>(though you do defer some of that compilation to the \"leaf crate\")</p>",
        "id": 178658895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667346
    },
    {
        "content": "<p>(hopefully incremental helps with this, if not, we should figure out <em>why not</em>)</p>",
        "id": 178658916,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667360
    },
    {
        "content": "<p>this reminds me -- I've really failed to keep up with salsa, as you no doubt saw</p>",
        "id": 178658967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667369
    },
    {
        "content": "<p>but you had mentioned something about <code>&amp;dyn Foo</code> not working for rust-analyzer?</p>",
        "id": 178658982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667381
    },
    {
        "content": "<p><code>&amp;(dyn AstDatabase + DefDatabase)</code> not working, yeah</p>",
        "id": 178659010,
        "sender_full_name": "matklad",
        "timestamp": 1571667403
    },
    {
        "content": "<p>yeah that <em>certainly</em> won't work</p>",
        "id": 178659020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667413
    },
    {
        "content": "<p>And there's a separate issue of creating mock databses for tests</p>",
        "id": 178659037,
        "sender_full_name": "matklad",
        "timestamp": 1571667425
    },
    {
        "content": "<p>actually the work that <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> has been doing on trait upcast could be quite relevant here</p>",
        "id": 178659048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667431
    },
    {
        "content": "<p>I remember that when I was pushing <code>&amp;dyn</code> changes through Lark</p>",
        "id": 178659070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667445
    },
    {
        "content": "<p>not having trait upcast was a horrible pain</p>",
        "id": 178659073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667449
    },
    {
        "content": "<p>basically, you need concrete db not only in the leaf trait, but also in the tests for intermediate crates, and creating that mock everytime is boilerplaty</p>",
        "id": 178659096,
        "sender_full_name": "matklad",
        "timestamp": 1571667460
    },
    {
        "content": "<p>maybe because we were using a large hierarchy of salsa traits</p>",
        "id": 178659110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667471
    },
    {
        "content": "<blockquote>\n<p>basically, you need concrete db not only in the leaf trait, but also in the tests for intermediate crates, and creating that mock everytime is boilerplaty</p>\n</blockquote>\n<p>yeah I think in Lark I moved the tests by and large to the leaf crate</p>",
        "id": 178659198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667495
    },
    {
        "content": "<p>so as to have a single \"mock db\"</p>",
        "id": 178659217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667509
    },
    {
        "content": "<p>I certainly remember encountering this problem</p>",
        "id": 178659224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667516
    },
    {
        "content": "<p>Yeah, I also feel that salsa atm pushes me towards this direction, but I think that's horrible long-term</p>",
        "id": 178659237,
        "sender_full_name": "matklad",
        "timestamp": 1571667523
    },
    {
        "content": "<p>I'm not actually sure that's true</p>",
        "id": 178659267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667544
    },
    {
        "content": "<p>basically, if you fix a bug in a low-level crate, you need to recompile the whole tower to test it</p>",
        "id": 178659278,
        "sender_full_name": "matklad",
        "timestamp": 1571667549
    },
    {
        "content": "<p>But I guess I agree I'd prefer to make the choice for other reasons</p>",
        "id": 178659285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667553
    },
    {
        "content": "<p>Yeah, that part is not great I guess</p>",
        "id": 178659295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667560
    },
    {
        "content": "<p>I am actually not sure if it's a good idea to split databases over several crates.....</p>",
        "id": 178659422,
        "sender_full_name": "matklad",
        "timestamp": 1571667607
    },
    {
        "content": "<p>the other option</p>",
        "id": 178659441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667617
    },
    {
        "content": "<p>which I've experimented with in chalk</p>",
        "id": 178659461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667625
    },
    {
        "content": "<p>is just having <em>regular traits</em> basically</p>",
        "id": 178659477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667634
    },
    {
        "content": "<p>I can see a design where there's only a single database crate that does everytihng, and all other code lives in separate crates, and uses traits to interface to DB without knowning about salsa at all</p>",
        "id": 178659496,
        "sender_full_name": "matklad",
        "timestamp": 1571667646
    },
    {
        "content": "<p>yeah, that</p>",
        "id": 178659507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667652
    },
    {
        "content": "<p>I thnk this is a better fit (at minimum) for library-ification</p>",
        "id": 178659525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667663
    },
    {
        "content": "<p>For librarification, definitelly yes. For rust-analyzer itself, not sure</p>",
        "id": 178659598,
        "sender_full_name": "matklad",
        "timestamp": 1571667721
    },
    {
        "content": "<p>What's the reason to use a DB above using traits directly in the first place?</p>",
        "id": 178659657,
        "sender_full_name": "detrumi",
        "timestamp": 1571667739
    },
    {
        "content": "<p>currently, hir is pretty slow to compile and pretty big. I'd love to slice it into at least \"types\" and \"not types\"</p>",
        "id": 178659663,
        "sender_full_name": "matklad",
        "timestamp": 1571667744
    },
    {
        "content": "<blockquote>\n<p>What's the reason to use a DB above using traits directly in the first place?</p>\n</blockquote>\n<p>there isn't really a very good one that I can see, except that it's slightly less repetitive maybe</p>",
        "id": 178659780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667809
    },
    {
        "content": "<p>I could definitely be persuaded that it makes more sense to just use plain traits all the way down</p>",
        "id": 178659873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667846
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> </p>\n<ul>\n<li>to avoid boilerplate of making a pure trait and DB trait</li>\n<li>to make testing easier (as DB provides a natural impl for the traits)</li>\n</ul>",
        "id": 178659882,
        "sender_full_name": "matklad",
        "timestamp": 1571667848
    },
    {
        "content": "<p>but yeah, maybe just using traits is the way to go....</p>",
        "id": 178659910,
        "sender_full_name": "matklad",
        "timestamp": 1571667866
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> regarding testing, I guess another way to go about reducing boilerplate would be to have macros or things that help you to generate the impls</p>",
        "id": 178659930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667881
    },
    {
        "content": "<p>I haven't thought much about it</p>",
        "id": 178659932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667884
    },
    {
        "content": "<p>it doesn't really feel like <em>salsa's</em> fault to me</p>",
        "id": 178659940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667889
    },
    {
        "content": "<p>I think Rust in general is not very good at this kind of re-use</p>",
        "id": 178659957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667903
    },
    {
        "content": "<p>It's kind of an OO strength and -- lacking specialization and a few other things -- we don't quite have the tools you want</p>",
        "id": 178659984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667915
    },
    {
        "content": "<p>But regardless it is a limitation</p>",
        "id": 178660035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667941
    },
    {
        "content": "<p>I think the main reason I was thinking that pulling tests to the \"root\" is ok is the old tension of integration vs unit testing.</p>",
        "id": 178660069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667959
    },
    {
        "content": "<p>To some extent it's nice for the tests to be kind of independent of  the precise nature of your division into crates -- but to some extent that's also <em>not</em> nice, esp. for practical compilation time reasons.</p>",
        "id": 178660145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571667981
    },
    {
        "content": "<p>Hm, I am not sure. I think, if salsa created a concrete DB (which are composed together in single inheritance style), I would be able to write</p>\n<div class=\"codehilite\"><pre><span></span>fn mock_db(fixture: &amp;str) -&gt; TheDbStruct\n</pre></div>\n\n\n<p>in the intermediate crate, and then use it in the final crate</p>",
        "id": 178660173,
        "sender_full_name": "matklad",
        "timestamp": 1571668004
    },
    {
        "content": "<p>if your crates are sufficiently coarse, and thus change infrequently, it's probably better to have the tests be linked to them</p>",
        "id": 178660178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571668009
    },
    {
        "content": "<p>hmm, ok, I see, maybe there is some way for us to make the databases more composable in this way</p>",
        "id": 178660260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571668066
    },
    {
        "content": "<p>this reminds me that you also had some other comments about state that I never fully understood</p>",
        "id": 178660317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571668087
    },
    {
        "content": "<p>we probably need to create some kind of hackmd to help us track these concerns a bit</p>",
        "id": 178660358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571668120
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> it seems like we need a meeting/design document for \"physical architecture of salsa-based compilers\"?</p>",
        "id": 178660364,
        "sender_full_name": "matklad",
        "timestamp": 1571668125
    },
    {
        "content": "<p>yes, exactly</p>",
        "id": 178660376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571668133
    },
    {
        "content": "<p>Heh, great minds think alike</p>",
        "id": 178660392,
        "sender_full_name": "matklad",
        "timestamp": 1571668143
    },
    {
        "content": "<p>I'd like to go now and think about other things but I'd like to not forget this, and to maybe schedule an hour to talk it out</p>",
        "id": 178660403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571668152
    },
    {
        "content": "<p>or, as they say in Russia, у дураков мысли сходятся</p>",
        "id": 178660412,
        "sender_full_name": "matklad",
        "timestamp": 1571668155
    },
    {
        "content": "<p>I think I'll open a thread on the salsa repository to just write down some thougts: that way, we won't forget this</p>",
        "id": 178660640,
        "sender_full_name": "matklad",
        "timestamp": 1571668297
    },
    {
        "content": "<p>good starting point</p>",
        "id": 178660745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571668368
    },
    {
        "content": "<p>ok, great chat :) ttyl</p>",
        "id": 178660761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571668379
    },
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> , it's time for weekly sync-up</p>",
        "id": 179233394,
        "sender_full_name": "matklad",
        "timestamp": 1572271318
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 179233396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572271321
    },
    {
        "content": "<p>A bunch off things happened recently</p>",
        "id": 179233451,
        "sender_full_name": "matklad",
        "timestamp": 1572271333
    },
    {
        "content": "<p>Most importantly, we've finally <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/1892\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/1892\">merged find usages</a>, implemented by <a href=\"https://github.com/viorina\" target=\"_blank\" title=\"https://github.com/viorina\">https://github.com/viorina</a></p>",
        "id": 179233513,
        "sender_full_name": "matklad",
        "timestamp": 1572271392
    },
    {
        "content": "<p>It does the classic IDE trick of using text-search to over-approximate the set of matchings, and then confirming the matches using the real analysis</p>",
        "id": 179233557,
        "sender_full_name": "matklad",
        "timestamp": 1572271429
    },
    {
        "content": "<p>We don't have a trigram index yet, so the text-search phase is brute force</p>",
        "id": 179233632,
        "sender_full_name": "matklad",
        "timestamp": 1572271465
    },
    {
        "content": "<p>As a consequence, it's now possible to invoke \"rename\" for functions, and it mostly works :)</p>",
        "id": 179233690,
        "sender_full_name": "matklad",
        "timestamp": 1572271505
    },
    {
        "content": "<p>Another biggish thing is that we now generate assists docs and tests from \"doc comments\". And in general I did some cleanup around assists. We have a whole bunch of them now:</p>\n<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/assists.md\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/assists.md\">https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/assists.md</a></p>\n<p>(and a couple new were added this week)</p>",
        "id": 179233812,
        "sender_full_name": "matklad",
        "timestamp": 1572271590
    },
    {
        "content": "<p>Find usages also was a stress-test for our type inference, which uncovered that infinite allocation in chalk problem. I don't think the root cause if fixed yet, but I've improved our profiling infrastructure a bit:</p>\n<ul>\n<li>hierarchical profiling now shows unaccounted for time</li>\n<li>batch analysis has an option to analyze dependencies as well</li>\n</ul>",
        "id": 179233978,
        "sender_full_name": "matklad",
        "timestamp": 1572271710
    },
    {
        "content": "<p>Finally, I've put the VFS work on pause without actually finishing it: it seems like I am stuck a bit, as I don't see a design that feels right, and, if we speak about various tradeoff-based designs, the one we have already seems OK. I want  to come back to this later and just try to write direct bindings to watchman, but I have sunk way to many days into this, and I think I need to swticht to something else to make progress</p>",
        "id": 179234194,
        "sender_full_name": "matklad",
        "timestamp": 1572271848
    },
    {
        "content": "<p>Oh, and <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and I had a productive discussion about splitting salsa-database across the crates, I hope to do something concrete in this area this week</p>",
        "id": 179234252,
        "sender_full_name": "matklad",
        "timestamp": 1572271892
    },
    {
        "content": "<p>That's all for me I guess?</p>",
        "id": 179234272,
        "sender_full_name": "matklad",
        "timestamp": 1572271912
    },
    {
        "content": "<p>Cool --</p>",
        "id": 179234404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572272009
    },
    {
        "content": "<p>Ahhh, one more thing: <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> implemented client-side shortening of type hints, which helps a lot with \"as long as a screen\" infered types :)</p>",
        "id": 179234415,
        "sender_full_name": "matklad",
        "timestamp": 1572272017
    },
    {
        "content": "<p>I've been working on some changes to chalk, some of which it seems like <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> has integrated</p>",
        "id": 179234434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572272029
    },
    {
        "content": "<p>the overall goal is to rework how we handle associated types so that we never ask \"open-ended\" requests for \"all impls of a trait\"</p>",
        "id": 179234494,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572272052
    },
    {
        "content": "<p>though we're not there yet</p>",
        "id": 179234506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572272060
    },
    {
        "content": "<p>it's also I think laying the foundations for a \"shared type\" library that both rustc / rust-analyzer can employ</p>",
        "id": 179234523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572272077
    },
    {
        "content": "<p>though I want to do a bit more digging in that direction</p>",
        "id": 179234538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572272084
    },
    {
        "content": "<p>I <em>also</em> think it's related to that bug you uncovered</p>",
        "id": 179234543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572272090
    },
    {
        "content": "<blockquote>\n<p>Ahhh, one more thing: <span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> implemented client-side shortening of type hints, which helps a lot with \"as long as a screen\" infered types <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>\n</blockquote>\n<p>Good to hear it's useful <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 179234544,
        "sender_full_name": "detrumi",
        "timestamp": 1572272090
    },
    {
        "content": "<p>but I've not 100% proven that</p>",
        "id": 179234546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572272093
    },
    {
        "content": "<p>(that is, I think that bug is caused by the current logic in unification -- which would be removed in the new scheme -- causing a kind of \"infinite set of goals to prove\")</p>",
        "id": 179234598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572272123
    },
    {
        "content": "<p>there has been some good PRs in this direction, with <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> ( <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>) implementing a derive for chalk's <code>Fold</code> trait, and <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> working on simplifying some of rust's context traits</p>",
        "id": 179234726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572272182
    },
    {
        "content": "<p>(as an aside, I am thinking about trying to rip out the chalk integration that's in rustc now and rework it so that it hooks into the chalk-solve crate, like rust-analyzer does)</p>",
        "id": 179234771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572272218
    },
    {
        "content": "<p>anyway, we still didn't fix the bugs around <code>dyn Trait</code> but hopefully soon</p>",
        "id": 179234793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572272240
    },
    {
        "content": "<p>so that we can combine that logic with rust-analyzer</p>",
        "id": 179234802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572272247
    },
    {
        "content": "<p>Exciting, given that we want to use <code>dyn Trait</code> inside rust-analyzer more, when splitting stuff across crates :)</p>",
        "id": 179234886,
        "sender_full_name": "matklad",
        "timestamp": 1572272291
    },
    {
        "content": "<blockquote>\n<p>the overall goal is to rework how we handle associated types so that we never ask \"open-ended\" requests for \"all impls of a trait\"</p>\n</blockquote>\n<p>on this topic, I was thinking that it hopefully soon I can turn to looking more into rust-analyzer's type checker and how to best integrate it with check (and ultimately create a shared library), because I think it's going to take some experimentation to get that truly working</p>",
        "id": 179234902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572272302
    },
    {
        "content": "<blockquote>\n<p>Exciting, given that we want to use <code>dyn Trait</code> inside rust-analyzer more, when splitting stuff across crates :)</p>\n</blockquote>\n<p>Yay =) I think there's not that much work to do, I'm not sure if <span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> has had a chance to look into it yet</p>",
        "id": 179234921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572272329
    },
    {
        "content": "<p>(I'll check if they're busy, because I think it wouldn't take me long to prep the PR anyhow, but I don't want to steal it from them -- and it might be more work than I think)</p>",
        "id": 179234948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572272362
    },
    {
        "content": "<p>Oh, one more thing: we are receiving more \"rust-analyzer eats 8GB of ram after two hours of usage\" issues recently.  I haven't seen this myself (as I pretty-much rebuild rust-analyzer once in ten minutes anyway), but it might be a symptom of something wrong with GC</p>",
        "id": 179235081,
        "sender_full_name": "matklad",
        "timestamp": 1572272445
    },
    {
        "content": "<p>hmm</p>",
        "id": 179235155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572272508
    },
    {
        "content": "<p>Would be cool to be able \"print, how much space each table occupies\" to debug this issues, but I don't think we can esily implement this at the moment</p>",
        "id": 179235162,
        "sender_full_name": "matklad",
        "timestamp": 1572272512
    },
    {
        "content": "<p>What's blocking is the \"heapsize\" support?</p>",
        "id": 179235291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572272600
    },
    {
        "content": "<p>the fact that heapsize on <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> is pretty much dead, and the new one in Servo is not public</p>",
        "id": 179235369,
        "sender_full_name": "matklad",
        "timestamp": 1572272644
    },
    {
        "content": "<p>Although perhaps we should look at just the <em>number</em> of keys/values?</p>",
        "id": 179235420,
        "sender_full_name": "matklad",
        "timestamp": 1572272687
    },
    {
        "content": "<blockquote>\n<p>the fact that heapsize on <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> is pretty much dead, and the new one in Servo is not public</p>\n</blockquote>\n<p>I'm guessing they can't just open-source it?</p>",
        "id": 179235467,
        "sender_full_name": "detrumi",
        "timestamp": 1572272720
    },
    {
        "content": "<p>\"just\" means making sure that the API actually makes sense outside of Servo</p>",
        "id": 179235549,
        "sender_full_name": "matklad",
        "timestamp": 1572272777
    },
    {
        "content": "<p>Ah, of course</p>",
        "id": 179235570,
        "sender_full_name": "detrumi",
        "timestamp": 1572272806
    },
    {
        "content": "<p>Like, it seems like this is a pretty solvable problem, but someone needs to apply necessary labor (and a good API/macro design taste) to actually provide a production-ready solution</p>",
        "id": 179235600,
        "sender_full_name": "matklad",
        "timestamp": 1572272825
    },
    {
        "content": "<p>IIRC, HeapSize was <em>just</em> dumped to <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a>, and it's not maintained because it turned out to be not that great</p>",
        "id": 179235638,
        "sender_full_name": "matklad",
        "timestamp": 1572272871
    },
    {
        "content": "<p>But yeah, approximating it should be fine too as long as you identify the cause</p>",
        "id": 179235736,
        "sender_full_name": "detrumi",
        "timestamp": 1572272927
    },
    {
        "content": "<p>(for posterity, the new heapsizeof is here <a href=\"https://github.com/servo/servo/blob/master/components/malloc_size_of/lib.rs\" target=\"_blank\" title=\"https://github.com/servo/servo/blob/master/components/malloc_size_of/lib.rs\">https://github.com/servo/servo/blob/master/components/malloc_size_of/lib.rs</a>)</p>",
        "id": 179235743,
        "sender_full_name": "matklad",
        "timestamp": 1572272938
    },
    {
        "content": "<p>Is there a plan to defeat compile times? It's getting pretty bad with running tests.</p>",
        "id": 179235982,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1572273112
    },
    {
        "content": "<p>Sort of. The immediate things I want to do are:</p>\n<ul>\n<li>split hir into N &gt; 1 crates</li>\n<li>use <code>dyn DB</code> inside <code>hir</code> more</li>\n<li>change testing strategy such that <code>MockDatabase</code> is not compiled for non-test usage</li>\n</ul>\n<p>Long term, I'd love to see if we can make <code>salsa</code>-based API less generic, but I think it makes sense to look into that after by-reference values (<span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> wants to change salsa sot hat queries return <code>&amp;Thing</code> and not <code>Arc&lt;Thing&gt;</code>).</p>",
        "id": 179236250,
        "sender_full_name": "matklad",
        "timestamp": 1572273294
    },
    {
        "content": "<p>Large crates are really having a big impact on compile times, it seems. Hopefully that can be improved on rustc's side in the future, as splitting things up each time is a lot of work</p>",
        "id": 179236646,
        "sender_full_name": "detrumi",
        "timestamp": 1572273547
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> By less generic, do you mean the <code>&amp;impl Database</code> parameters?</p>",
        "id": 179236900,
        "sender_full_name": "detrumi",
        "timestamp": 1572273689
    },
    {
        "content": "<p>Yeah, and the fact that test and read database are different types</p>",
        "id": 179236999,
        "sender_full_name": "matklad",
        "timestamp": 1572273726
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span>, time for another sync up!</p>",
        "id": 179841027,
        "sender_full_name": "matklad",
        "timestamp": 1572879983
    },
    {
        "content": "<p>I think the two biggest changes this week are:</p>\n<ul>\n<li>more chalk work by <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> , so we now complete and resolve static method calls </li>\n<li>the great split of <code>ra_hir</code> into crates has begun</li>\n</ul>",
        "id": 179841113,
        "sender_full_name": "matklad",
        "timestamp": 1572880058
    },
    {
        "content": "<p>I can probably say a bit about the second one</p>",
        "id": 179841139,
        "sender_full_name": "matklad",
        "timestamp": 1572880070
    },
    {
        "content": "<p>First of all, the split is not complete, so the code is really not great at places. FOr example, we have <code>DefDatabase</code> and <code>DefDatabase2</code>...</p>",
        "id": 179841278,
        "sender_full_name": "matklad",
        "timestamp": 1572880144
    },
    {
        "content": "<p>What we do have, however, is three crates instead of one:</p>\n<ul>\n<li><code>hir_expand</code></li>\n<li><code>hir_def</code></li>\n<li><code>hir</code></li>\n</ul>\n<p><code>hir_expand</code> deals with macro expansion. Specifically, it defines the core datatypes required to talk about all Rust source code (some of which might be generated from macros). I originally didn't intend to split this part out, but I really really like how it looks now.</p>\n<p>It's interesting how macro expansion does not depend on name-resolution even in terms of dependencies between crates: this is beccause we encode resovled macro definition into the id of a macro call</p>",
        "id": 179841475,
        "sender_full_name": "matklad",
        "timestamp": 1572880294
    },
    {
        "content": "<p><code>hir_def</code> is a work-in-progress -- it should contain everything srictly between macro expansion and types. At the moment, it only has module-level name resolution. I want to move expression lowering to <code>hir_def</code> as well. <code>hir_def</code> is written with ECS API, where one operates with raw IDs</p>",
        "id": 179841622,
        "sender_full_name": "matklad",
        "timestamp": 1572880394
    },
    {
        "content": "<p><code>hir</code> currently contains everything else. I think that, after <code>hir_def</code> is done, we should split <code>hir</code> into <code>hir_ty</code> and <code>hir</code>, and make <code>hir</code> a strict facade over <code>hir_x</code> crates.</p>",
        "id": 179841738,
        "sender_full_name": "matklad",
        "timestamp": 1572880449
    },
    {
        "content": "<p>One thing we've lost from the split is <code>AstDb</code> / <code>DefDb</code> separation, which we used to enforce via <code>require</code> salsa clause. That is, we put some effort to make sure you can't accidently invoke a \"brittle\" query form a robust query previously, but this work is undone by the split.</p>",
        "id": 179841846,
        "sender_full_name": "matklad",
        "timestamp": 1572880546
    },
    {
        "content": "<p>For testing, the idea is to have a <code>#[cfg(test)]</code> MockDatabse for each hir crate (renamed <code>TestDb</code>, as it is not really a mock), which share most of the fixture-related code via a <code>WithFixture</code> trait, defined in the root <code>ra_db</code> crate</p>",
        "id": 179841959,
        "sender_full_name": "matklad",
        "timestamp": 1572880619
    },
    {
        "content": "<p>the observation here is that various hir layers never add new <em>inputs</em>, so you only need to define fixtures at the bottom layer</p>",
        "id": 179842005,
        "sender_full_name": "matklad",
        "timestamp": 1572880653
    },
    {
        "content": "<p>Some of the less groundshaking changes:</p>\n<ul>\n<li>we now show deprecated status of the item in the completion (it is fetched from ast at the moment, should convert it to hir some day)</li>\n<li>docs are correctly attached to statics</li>\n<li>better hover for macros</li>\n<li>don't insert braces after completing macro inside a use statemetn</li>\n<li>some fixes for import-path routine</li>\n</ul>",
        "id": 179842267,
        "sender_full_name": "matklad",
        "timestamp": 1572880829
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> sorry I'm late, I should've written, I had to run at the last minute (I've also been heads down on something this morning)</p>",
        "id": 179842337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572880885
    },
    {
        "content": "<p>I'm going to catch up in a bit though</p>",
        "id": 179842355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572880904
    },
    {
        "content": "<p>oh, <span class=\"user-mention\" data-user-id=\"132829\">@Christopher Durham</span> is also doing some crazy unsafe experiments with rowan, with an effort to cut down the number of allocations even more. I haven't had a chance to review it properly, but the latest approach with boxed and interned tokens seems really promising</p>",
        "id": 179842363,
        "sender_full_name": "matklad",
        "timestamp": 1572880910
    },
    {
        "content": "<p>And I am excited to see <span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> back! Looks like we are about to see some progress on macro front soon :)</p>",
        "id": 179842426,
        "sender_full_name": "matklad",
        "timestamp": 1572880934
    },
    {
        "content": "<p>I think I can piggyback off <span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> 's work for macro signature help</p>",
        "id": 179843186,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1572881476
    },
    {
        "content": "<p>I need to run soon, so let me give a short async update:</p>\n<ul>\n<li><span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> added ranges tracking to macro expansion. We now can correlate ranges in macro_call with ranges in the expansion result. So, goto definition on a macro-genereted struct now points to the identifier, and not to the macro call as a whole. </li>\n<li><span class=\"user-mention\" data-user-id=\"246514\">@Martin Asquino</span> refactored handling of the deprecated attribute to hir. This also unlock more clear handing of doc comments, via deshugaring to attributes (at the moment, doc comments are first-class in ra)</li>\n<li><span class=\"user-mention\" data-user-id=\"204219\">@Matthias247</span> implemented nameresolution support for no-std crates</li>\n<li><span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> started implemented builtin macros, the `line! is already done</li>\n<li><span class=\"user-mention\" data-user-id=\"203366\">@Jeremy Kolb</span> did a whole bunch of crate updates and improved hover for builtin types</li>\n<li>I am continuing with splitting hir into crates. No major splits happened this weak, but I've cleaned up a bunch of interfaces (or, rather, introduced the interfaces in the first place).</li>\n<li>We also experimentally disabled debug-info in dev builds of rust-analyzer, as it makes incremental less efective, and doesn't really help if you debug with <code>dbg!</code> and <code>eprintln!</code></li>\n</ul>",
        "id": 180429652,
        "sender_full_name": "matklad",
        "timestamp": 1573484134
    },
    {
        "content": "<p>The most interesting bit today is probably the first point. The main problem there was to identify tokens in the expended code as coming from either the call or the definition. My understanding that in rustc this is handled by each token having a <em>global</em> unique span.</p>\n<p>In rust-analyzer, tokens are locally numbered with small interegers, and, when you substitute captures into a macro template, you shift the numbers of the tokens in captures, sort-of how you do subst in lambda-calculus with de-Bruijn indices</p>",
        "id": 180429935,
        "sender_full_name": "matklad",
        "timestamp": 1573484331
    },
    {
        "content": "<p>Ok, I am leaving, will catch up later :) <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 180430353,
        "sender_full_name": "matklad",
        "timestamp": 1573484598
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> thanks for the update! On the chalk side, <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> has been doing great work refactoring and fixing various bugs. I just remembered that I need to investigate that infinite loop. One good thing is that the work he's been doing is helping to pave way for fuel.</p>",
        "id": 180430355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573484598
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> I've forgot about today's sync-up, but let me make an async update</p>\n<ul>\n<li><a href=\"https://github.com/chmln\" target=\"_blank\" title=\"https://github.com/chmln\">https://github.com/chmln</a> implemented feature flags to disable postifx completions</li>\n<li>expression lowering and scopes were moved to <code>hir_def</code>. <code>Resolver</code> I think is the sole big thing that is in <code>hir</code>, which I would like to move to <code>hir_def</code>. That means that <code>hir</code> at the moment is mostly about types, and it might make sense to start looking into extracting <code>hir_ty</code> out of it.</li>\n<li><span class=\"user-mention\" data-user-id=\"117482\">@Pascal</span> implemented proper error reporting for <code>cargo xtask install</code></li>\n<li><span class=\"user-mention\" data-user-id=\"203366\">@Jeremy Kolb</span> did a bunch of cleanups of windows builds </li>\n<li><a href=\"https://github.com/rep-nop\" target=\"_blank\" title=\"https://github.com/rep-nop\">https://github.com/rep-nop</a> added <code>add_new</code> assist, so that there's no need to pull in <code>derive(new)</code> for a couple of news</li>\n<li>we've disabled all debug info for both debug and release builds of rust-analyzer</li>\n<li>I've refactored handling of <code>impl</code>s and made them more similar to other, named items. This surprisingly removed quite a lot of code</li>\n<li><span class=\"user-mention\" data-user-id=\"198321\">@Geoffry Song</span> fixed parsing of the <code>as</code> cast operator</li>\n<li><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> upgraded chalk, so we have <code>dyn</code> and <code>impl</code> support!</li>\n<li>I've also did a bit of refactoring around tracking macro ranges; in particular, I made more of the IDE features aware of macros. That means that <code>goto</code> definition now works for code that is inside macro calls (at least in some cases, there's many more bugs we need to iron out to make this robust). This also opens a door to making more IDE features to work inside macros, and in fact <span class=\"user-mention\" data-user-id=\"203366\">@Jeremy Kolb</span> did this for hover and goto type def earlier today!</li>\n<li><span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> is doing more work on supporting macros, in particular, on supporting <strong>eager</strong> built-in macros (I haven't caught up with this work yet :( )</li>\n<li>Finally, we've switched (with the help from <span class=\"user-mention\" data-user-id=\"132829\">@Christopher Durham</span> ) the CI from travis to github actions</li>\n</ul>",
        "id": 181053895,
        "sender_full_name": "matklad",
        "timestamp": 1574109891
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> time for the next sync up!</p>",
        "id": 181830258,
        "sender_full_name": "matklad",
        "timestamp": 1574694257
    },
    {
        "content": "<p>Things that happened last week:</p>\n<ul>\n<li><span class=\"user-mention\" data-user-id=\"203366\">@Jeremy Kolb</span> did a bunch of work to unlock more features in macros</li>\n<li><span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> fixed several problems with macro expansion</li>\n<li><span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> implemented \"expand macro\" action it the LSP and VS Code (and <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> implemented the Emacs side)</li>\n<li>we did a minor upgrade of the rowan library, which included a semi-rewrite by <span class=\"user-mention\" data-user-id=\"132829\">@Christopher Durham</span> , which brought down memory usage of sytnax trees further down by 15%</li>\n<li><a href=\"https://github.com/kiljacken\" target=\"_blank\" title=\"https://github.com/kiljacken\">https://github.com/kiljacken</a> move type-hints truncation code to server-side</li>\n<li>I did a whole bunch of refactorings all over the place. Again, I am tweaking the way IDs and mapping to source in a pretty fundamental way. Still have no idea if this is the right approach or not</li>\n<li>Name resolution is fully encapsulated into the <code>hir_def</code> crate</li>\n</ul>\n<p>.. let me post this while I type some more...</p>",
        "id": 181830979,
        "sender_full_name": "matklad",
        "timestamp": 1574694676
    },
    {
        "content": "<p>Can I suggest that you post these somewhere outside Zulip, too? Like a TWiRA?</p>",
        "id": 181831454,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1574694970
    },
    {
        "content": "<p>I bet it would get you more contributors</p>",
        "id": 181831472,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1574694984
    },
    {
        "content": "<ul>\n<li>comment continuation feature is now less annoying  (it doesn't continue line non-doc comements)</li>\n<li><span class=\"user-mention\" data-user-id=\"203366\">@Jeremy Kolb</span> and <span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> added support for <code>stringify!</code>, <code>compiler_error!</code> and <code>column!</code> build-in macros (compielr_error does not actually report an error)</li>\n<li>I've refactored lang-items to use hir attributes and not syntax when looking for <code>#[lang]</code></li>\n<li><a href=\"https://github.com/norcalli\" target=\"_blank\" title=\"https://github.com/norcalli\">https://github.com/norcalli</a> implemented some support for rust-analyer in neovim on neovim side</li>\n<li><a href=\"https://github.com/bravomikekilo\" target=\"_blank\" title=\"https://github.com/bravomikekilo\">https://github.com/bravomikekilo</a> implemented <strong>invert if</strong> assist</li>\n<li>finally, I've started moving all type-related things to a separate crate!</li>\n</ul>",
        "id": 181831630,
        "sender_full_name": "matklad",
        "timestamp": 1574695099
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"226095\">@Dirkjan Ochtman</span> yeah, in general it definitely makes sense to talk more about what we do in rust-analyzer. We definitelly should start TWiRA once we have a release process, but maybe we can start it even before that....</p>",
        "id": 181831829,
        "sender_full_name": "matklad",
        "timestamp": 1574695278
    },
    {
        "content": "<p>I don't think it needs to be anything more than what you've got in this stream already :)</p>",
        "id": 181831877,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1574695306
    },
    {
        "content": "<p>It needs at least some frontend work on <a href=\"https://github.com/rust-analyzer/rust-analyzer.github.io\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer.github.io\">https://github.com/rust-analyzer/rust-analyzer.github.io</a> to separate long-form blog post from weakly updates</p>",
        "id": 181832012,
        "sender_full_name": "matklad",
        "timestamp": 1574695378
    },
    {
        "content": "<p>Wow, that's a lot of work in a week's time <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 181832172,
        "sender_full_name": "detrumi",
        "timestamp": 1574695470
    },
    {
        "content": "<p>Note that one observation I did while refactorings is that, at the moment, the code is very prone to repeated climbings up the tree of defs. </p>\n<p>For example, processing a record literal might call <code>field.ty</code> for each field, and <em>each</em> of those calls would fetch the parent struct, create name resolution ctx for it, etc... I feel this might become a problem, not due to any perf problems, but due to un-normalized data storage (basically, the same info is rederived several times). </p>\n<p>Instead, I am trying to switch to a more Kotlin-like approach: when we need to learn a bit of info about <em>thing</em>, we look at its parent, process all the children and store the info into a map. </p>\n<p>To get a bit of info about specific child, we load the map and do a lookup using a local ID.</p>",
        "id": 181833317,
        "sender_full_name": "matklad",
        "timestamp": 1574696212
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> -- back from vacation, still catching up</p>",
        "id": 182354336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575299623
    },
    {
        "content": "<p>guessing no sync this week?</p>",
        "id": 182354348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575299630
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'll make an async sync later this week. I've moved to Berlin over the weeked, and still catching up with emails :)</p>",
        "id": 182354488,
        "sender_full_name": "matklad",
        "timestamp": 1575299683
    },
    {
        "content": "<p><code>ra_ide</code> compiles extremely slow</p>",
        "id": 182518229,
        "sender_full_name": "ice1000",
        "timestamp": 1575425630
    },
    {
        "content": "<p>I wish it can be split into even smaller ones</p>",
        "id": 182518236,
        "sender_full_name": "ice1000",
        "timestamp": 1575425639
    },
    {
        "content": "<p>Did you try <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/1987#issuecomment-546928766\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/1987#issuecomment-546928766\">these linking flags</a>?</p>",
        "id": 182533113,
        "sender_full_name": "detrumi",
        "timestamp": 1575445997
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> </p>\n<p>Hey, so here's belated update for this week.</p>\n<p>First, as per <span class=\"user-mention\" data-user-id=\"226095\">@Dirkjan Ochtman</span> advice, I've moved \"the laundry list of things that changed since last week\" to the rust-analyzer website. You can read it here:  <a href=\"https://rust-analyzer.github.io/thisweek/2019/12/04/changelog-1.html\" target=\"_blank\" title=\"https://rust-analyzer.github.io/thisweek/2019/12/04/changelog-1.html\">https://rust-analyzer.github.io/thisweek/2019/12/04/changelog-1.html</a>. For some reason, the format is eerie similar to <a href=\"https://intellij-rust.github.io/thisweek/\" target=\"_blank\" title=\"https://intellij-rust.github.io/thisweek/\">this week in IntelliJ Rust</a>. I will make it a point to publish an update there each Monday before the sync-up (which should save everyone's time, as I routinely take like 15 minutes to just type this stuff). </p>\n<p>With this in mind, I suggest re purposing this slot for a more free-form discussion of latest things. <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> how would you feel about this? </p>\n<p>In particular, the highlight of this week is the introduction of a separate<code>hir_ty</code> crate, which deals with all type-related things. It should make it easier to move more of the types to <code>chalk</code>.</p>",
        "id": 182559548,
        "sender_full_name": "matklad",
        "timestamp": 1575469358
    },
    {
        "content": "<p>reddit: <a href=\"https://www.reddit.com/r/rust/comments/e603vf/rustanalyzer_changelog_1/\" target=\"_blank\" title=\"https://www.reddit.com/r/rust/comments/e603vf/rustanalyzer_changelog_1/\">https://www.reddit.com/r/rust/comments/e603vf/rustanalyzer_changelog_1/</a></p>",
        "id": 182560668,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1575470252
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> I rest my case that this at least generates nice amounts of PR :)</p>",
        "id": 182665118,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1575557069
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> repurposing for freeform discussion seems good to me</p>",
        "id": 182803446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575665570
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 182962979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575903661
    },
    {
        "content": "<p>hello <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> !</p>",
        "id": 182963032,
        "sender_full_name": "matklad",
        "timestamp": 1575903696
    },
    {
        "content": "<p>this week changes are here: <a href=\"https://github.com/rust-analyzer/rust-analyzer.github.io/blob/3779a91eff76547ac1f347e8ac7e2ee933343ff7/thisweek/_posts/2019-12-09-changelog-2.md\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer.github.io/blob/3779a91eff76547ac1f347e8ac7e2ee933343ff7/thisweek/_posts/2019-12-09-changelog-2.md\">https://github.com/rust-analyzer/rust-analyzer.github.io/blob/3779a91eff76547ac1f347e8ac7e2ee933343ff7/thisweek/_posts/2019-12-09-changelog-2.md</a></p>",
        "id": 182963042,
        "sender_full_name": "matklad",
        "timestamp": 1575903703
    },
    {
        "content": "<p>(will be on the website once the build is finished -- forgot to push the changes, and forgot to check that I am looking at the deopolied site and not 127.0.0.1 one when checking)</p>",
        "id": 182963145,
        "sender_full_name": "matklad",
        "timestamp": 1575903744
    },
    {
        "content": "<p>So you were talking about repurposing the slot for \"freeform design discussion\"</p>",
        "id": 182963206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575903788
    },
    {
        "content": "<p>I was noticing that we have this upcoming meeting on Friday to discuss IDE/library-ification</p>",
        "id": 182963234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575903805
    },
    {
        "content": "<p>And I was thinking I should touch base with you, <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> and <span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span> to try and figure out what we plan to <em>say</em> exactly</p>",
        "id": 182963255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575903821
    },
    {
        "content": "<p>The highlights are:</p>\n<ul>\n<li>support of build-in derive macros, in a semi-proper way (as actual macros which expand to source code, and not just fake impls)</li>\n<li>some refactorings around mapping sources and hir with each other</li>\n</ul>",
        "id": 182963257,
        "sender_full_name": "matklad",
        "timestamp": 1575903822
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> right. I think we want to \"pitch\" the plan with integrating rust-analyzer with save-analysis, and continuing library-ification (as opposed to slowly boiling rustc itself)</p>",
        "id": 182963394,
        "sender_full_name": "matklad",
        "timestamp": 1575903908
    },
    {
        "content": "<p>Yeah. I'm wondering if you've done any more investigation into your idea of command-line tools</p>",
        "id": 182963422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575903926
    },
    {
        "content": "<p>your blog post is of course part of the story here</p>",
        "id": 182963449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575903943
    },
    {
        "content": "<p>We had a link to a \"master\" hackmd that linked to other notes and things</p>",
        "id": 182963460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575903955
    },
    {
        "content": "<p>Do you happen to have it off hand?</p>",
        "id": 182963464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575903958
    },
    {
        "content": "<p>Also go-to def works within println! etc now, which I'm pretty happy about :)</p>",
        "id": 182963469,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1575903961
    },
    {
        "content": "<p>not much: the only thing I did was to briefly check why loading save-analysis from disk is slow.</p>",
        "id": 182963526,
        "sender_full_name": "matklad",
        "timestamp": 1575903985
    },
    {
        "content": "<p>And looks like the main reason is that JSON we currently use is just <strong>super</strong> verbose. zipping save-analysis gives 97% compression (the zip is 3% of original)</p>",
        "id": 182963579,
        "sender_full_name": "matklad",
        "timestamp": 1575904025
    },
    {
        "content": "<p><a href=\"https://hackmd.io/9qrJYdSLTK2MWG4-pbmpWw\" target=\"_blank\" title=\"https://hackmd.io/9qrJYdSLTK2MWG4-pbmpWw\">This is \"master\" hackmd I was talking about</a></p>",
        "id": 182963639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575904068
    },
    {
        "content": "<p>don't have link to master hack md :(</p>",
        "id": 182963643,
        "sender_full_name": "matklad",
        "timestamp": 1575904071
    },
    {
        "content": "<blockquote>\n<p>And looks like the main reason is that JSON we currently use is just <strong>super</strong> verbose. zipping save-analysis gives 97% compression (the zip is 3% of original)</p>\n</blockquote>\n<p>fascinating</p>",
        "id": 182963707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575904083
    },
    {
        "content": "<p>can we zip/unzip in process :)</p>",
        "id": 182963765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575904112
    },
    {
        "content": "<p>not sure if that would actually help</p>",
        "id": 182963773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575904116
    },
    {
        "content": "<p>presumably not</p>",
        "id": 182963788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575904123
    },
    {
        "content": "<p>I'd rather we not encode each span as <code>{ \"start_column\": 0, \"end_column\": 1, \"start_line\": 0, \"end_line\": 1}</code></p>",
        "id": 182963852,
        "sender_full_name": "matklad",
        "timestamp": 1575904158
    },
    {
        "content": "<p>heh you think we could use a few fewer characters? :)</p>",
        "id": 182963903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575904188
    },
    {
        "content": "<p>still it seems to me like the real question is</p>",
        "id": 182963967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575904203
    },
    {
        "content": "<p>can we move save-analysis to something more universal</p>",
        "id": 182963985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575904209
    },
    {
        "content": "<p>e.g., that LSP-based proposal</p>",
        "id": 182963996,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575904215
    },
    {
        "content": "<p>I have no idea how they compare</p>",
        "id": 182964003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575904218
    },
    {
        "content": "<p>anywaY I'm going to make a new hackmd, maybe we can briefly draft an agenda for discussion and key bullet points</p>",
        "id": 182964047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575904241
    },
    {
        "content": "<p>I think we can, and we should, long-term</p>",
        "id": 182964048,
        "sender_full_name": "matklad",
        "timestamp": 1575904241
    },
    {
        "content": "<p><a href=\"https://hackmd.io/w8OIoc7iQsuTrBlRV1xKMQ\" target=\"_blank\" title=\"https://hackmd.io/w8OIoc7iQsuTrBlRV1xKMQ\">hackmd</a></p>",
        "id": 182964113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575904285
    },
    {
        "content": "<p>It's tricky how we want to adopt rust-analyzer as the \"official\" IDE (which requires some stability), while at the same time library-ifying some parts (which is as of yet easier because rust-analyzer is still experimental and can change easier)</p>",
        "id": 182965969,
        "sender_full_name": "detrumi",
        "timestamp": 1575905374
    },
    {
        "content": "<p>Yes, there is some tension there,</p>",
        "id": 182966191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575905493
    },
    {
        "content": "<p>and I think one question might be</p>",
        "id": 182966194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575905496
    },
    {
        "content": "<p>how far can we get before doing so?</p>",
        "id": 182966215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575905507
    },
    {
        "content": "<p>that is, how much can/must we \"library-ify\"?</p>",
        "id": 182966371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575905538
    },
    {
        "content": "<p>at the same time, I don't know, I'm not <em>that</em> worried about it</p>",
        "id": 182966501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575905546
    },
    {
        "content": "<p>I guess in part because I think rust-analyzer delivers a lot of value \"as is\"</p>",
        "id": 182966590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575905553
    },
    {
        "content": "<p>and we can \"gate\" access to some parts of it conceivably</p>",
        "id": 182966667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575905560
    },
    {
        "content": "<p>e.g., that is one reason to use save-analysis to start</p>",
        "id": 182966687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575905572
    },
    {
        "content": "<p>still, I think we should identify this as a tension and thing to discuss maybe?</p>",
        "id": 182966697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575905579
    },
    {
        "content": "<p>I'm debating the best use of the \"agenda\"</p>",
        "id": 182966708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575905584
    },
    {
        "content": "<p>Yeah, using gates can be a tool to get the best of both worlds</p>",
        "id": 182966743,
        "sender_full_name": "detrumi",
        "timestamp": 1575905607
    },
    {
        "content": "<p>btw, I'm not 100% sure what falls under save analysis</p>",
        "id": 182967042,
        "sender_full_name": "detrumi",
        "timestamp": 1575905756
    },
    {
        "content": "<p>OK, this was pretty producitve <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> -- I'm going to have to run, I have some errands to do locally</p>",
        "id": 182967206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575905845
    },
    {
        "content": "<p>bye <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ! I too feel this was productive!</p>",
        "id": 182967316,
        "sender_full_name": "matklad",
        "timestamp": 1575905890
    },
    {
        "content": "<p>we can try to clarify the doc and/or pick a final discussion agenda at the end?</p>",
        "id": 182967333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575905902
    },
    {
        "content": "<p>I think we should advertise this doc in a broader topic on <a class=\"stream\" data-stream-id=\"131828\" href=\"/#narrow/stream/131828-t-compiler\">#t-compiler</a> and solicit people to add questions and things to the end</p>",
        "id": 182967351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575905911
    },
    {
        "content": "<p>and/or ask for \"points of information\" over the week</p>",
        "id": 182967354,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575905913
    },
    {
        "content": "<p>sorry, those msgs sent a bit out of order</p>",
        "id": 182967373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575905923
    },
    {
        "content": "<p>but maybe you get the idea :)</p>",
        "id": 182967376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575905925
    },
    {
        "content": "<p>yeah</p>",
        "id": 182967384,
        "sender_full_name": "matklad",
        "timestamp": 1575905930
    },
    {
        "content": "<p>I'll do the advertising</p>",
        "id": 182967428,
        "sender_full_name": "matklad",
        "timestamp": 1575905955
    },
    {
        "content": "<p>OK -- I had this draft I was about to post, but I'll happily let you do it:</p>\n<blockquote>\n<p>HiT-compiler/meeting -- a few of us from <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> took a stab at creating <a href=\"https://hackmd.io/w8OIoc7iQsuTrBlRV1xKMQ?edit\" target=\"_blank\" title=\"https://hackmd.io/w8OIoc7iQsuTrBlRV1xKMQ?edit\">a hackmd</a> for the upcoming design meeting this Friday. The topic is our plans regarding rust-analyzer, the \"official\" choice of IDE, and rustc. The document summarizes our current thinking and also includes a section at the end for the discussion agenda. My hope is that people can review the doc now, before-hand. You can ask questions here if there are things that are unclear or could be calrified, and perhaps leave ideas for broader discussion topics in the document. Then we can prune the agenda on Thu or so before the actual meeting.</p>\n</blockquote>",
        "id": 182967664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575906080
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> gosh, how could I have missed goto-def in println? Pushed a new commit to the changelog</p>",
        "id": 182968003,
        "sender_full_name": "matklad",
        "timestamp": 1575906265
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> maybe remove the <code>?edit</code> from the url?</p>",
        "id": 182968799,
        "sender_full_name": "detrumi",
        "timestamp": 1575906666
    },
    {
        "content": "<p>I see ?edit as a bit of social engineering, actually encouriging folks to leave suggestions :)</p>",
        "id": 182969009,
        "sender_full_name": "matklad",
        "timestamp": 1575906773
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/2492\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/2492\">#2492</a> 2492, <a href=\"https://github.com/rust-lang/rust/issues/2494\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/2494\">#2494</a> goto definition and syntax highlighting work properly for type parameters</p>\n</blockquote>\n<p>Typo, double 2492?</p>",
        "id": 182972238,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1575908479
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> This week's changelog is up: <a href=\"https://rust-analyzer.github.io/thisweek/2019/12/16/changelog-3.html\" target=\"_blank\" title=\"https://rust-analyzer.github.io/thisweek/2019/12/16/changelog-3.html\">https://rust-analyzer.github.io/thisweek/2019/12/16/changelog-3.html</a></p>",
        "id": 183556550,
        "sender_full_name": "matklad",
        "timestamp": 1576508529
    },
    {
        "content": "<p>I don't have anything specific to discuss I think, and I am moving between laptops, so I suggest to keep this week more async :)</p>",
        "id": 183556643,
        "sender_full_name": "matklad",
        "timestamp": 1576508592
    },
    {
        "content": "<p>One of the things on my mind is what follow-up we need from last week's meeting, <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span></p>",
        "id": 183556824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576508696
    },
    {
        "content": "<p>(By this I mean Friday)</p>",
        "id": 183556873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576508723
    },
    {
        "content": "<p>Yeah, it's true that we need some follow up. Actually, I think there are two followup:</p>\n<ul>\n<li>there were a bunch of questions about parsing specifically, it's on me to organize technical discussion here</li>\n<li>we maybe need a better way to build a consensus around the general plan</li>\n</ul>",
        "id": 183557062,
        "sender_full_name": "matklad",
        "timestamp": 1576508805
    },
    {
        "content": "<p>the second one is more important, but much less clear</p>",
        "id": 183557080,
        "sender_full_name": "matklad",
        "timestamp": 1576508816
    },
    {
        "content": "<p>Yes.</p>",
        "id": 183557124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576508839
    },
    {
        "content": "<p>I think you can generalize the first bullet a bit</p>",
        "id": 183557132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576508843
    },
    {
        "content": "<p>basically I think we should be laying out clearer plans around specific library-ification efforts</p>",
        "id": 183557159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576508861
    },
    {
        "content": "<p>I <em>feel</em> there are might be two possible answers:</p>\n<ul>\n<li>RFC</li>\n<li>thread on internals</li>\n</ul>\n<p>Maybe pre-RFC thread on internals?</p>",
        "id": 183557160,
        "sender_full_name": "matklad",
        "timestamp": 1576508861
    },
    {
        "content": "<p>For the second point, you mean?</p>",
        "id": 183557182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576508876
    },
    {
        "content": "<p>yeah</p>",
        "id": 183557199,
        "sender_full_name": "matklad",
        "timestamp": 1576508881
    },
    {
        "content": "<p>first one doesn't make tooo much sense unless we have consensus on the general direction</p>",
        "id": 183557283,
        "sender_full_name": "matklad",
        "timestamp": 1576508906
    },
    {
        "content": "<p>I don't think RFC is right</p>",
        "id": 183557288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576508908
    },
    {
        "content": "<p>Yes</p>",
        "id": 183557296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576508913
    },
    {
        "content": "<p>I thikn there's probably room to discuss specifically with <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> as well</p>",
        "id": 183557315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576508924
    },
    {
        "content": "<p>I guess I'm not <em>exactly</em> sure which parts of the plan are controversial</p>",
        "id": 183557331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576508938
    },
    {
        "content": "<p>at the highest level I think the plan was</p>\n<ul>\n<li>bring parts of RLS into rust-analyzer and start to recommend that</li>\n<li>use library-ification both to reduce code duplication and to get the \"full\" versions of various analyses</li>\n</ul>",
        "id": 183557434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576509000
    },
    {
        "content": "<p>it seemed like a lot of the discussion was more about how to achieve the first bullet</p>",
        "id": 183557491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576509007
    },
    {
        "content": "<p>but maybe I'm not correct there, I'm not entirely sure</p>",
        "id": 183557508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576509015
    },
    {
        "content": "<p>uhu</p>",
        "id": 183557511,
        "sender_full_name": "matklad",
        "timestamp": 1576509017
    },
    {
        "content": "<p>I <em>think</em> <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> was uncomfortable with not removing save-analysis completely</p>",
        "id": 183557589,
        "sender_full_name": "matklad",
        "timestamp": 1576509072
    },
    {
        "content": "<blockquote>\n<p>I thikn there's probably room to discuss specifically with @eddyb as well</p>\n</blockquote>\n<p>Should we setup a video maybe?</p>",
        "id": 183557694,
        "sender_full_name": "matklad",
        "timestamp": 1576509124
    },
    {
        "content": "<p>I think that might make sense, yes</p>",
        "id": 183557729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576509152
    },
    {
        "content": "<p>I would probably start there</p>",
        "id": 183557742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576509158
    },
    {
        "content": "<blockquote>\n<p>I <em>think</em> <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> was uncomfortable with not removing save-analysis completely</p>\n</blockquote>\n<p>yes, I think this may be true</p>",
        "id": 183557774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576509183
    },
    {
        "content": "<p>I'm pondering this</p>",
        "id": 183557941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576509290
    },
    {
        "content": "<p>I guess I feel like the goal of using save-analysis was primarily that it exists and it lets us minimize the time until useful features</p>",
        "id": 183557968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576509313
    },
    {
        "content": "<p>and then turn the focus more to library-ification and \"cleaning up\" the \"native\" approach</p>",
        "id": 183558003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576509332
    },
    {
        "content": "<p>I think the latter is what <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> really wants</p>",
        "id": 183558012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576509339
    },
    {
        "content": "<p>(and I agree)</p>",
        "id": 183558028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576509350
    },
    {
        "content": "<p>In other words, it seems like we share a goal, and we're arguing about the steps towards it</p>",
        "id": 183558354,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576509545
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> there's also one more aspect of sava-analysis which is bad long-term, but which we find very useful right now. It is data that can be used outside of rustc process</p>",
        "id": 183558364,
        "sender_full_name": "matklad",
        "timestamp": 1576509553
    },
    {
        "content": "<p>This is good <strong>right now</strong>, because it allows us to have some of the correctness of RLS without build complexities of RLS</p>",
        "id": 183558410,
        "sender_full_name": "matklad",
        "timestamp": 1576509585
    },
    {
        "content": "<p>but it is wrong long-term, as it moves us further away from in-process lazy-analysis</p>",
        "id": 183558485,
        "sender_full_name": "matklad",
        "timestamp": 1576509615
    },
    {
        "content": "<p>Still, even sharing a goal, there's room for dispute, which comes back to the basic question -- we're kind of taking the \"long path\" towards a unified world, to some extent, and maybe <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> prefers to take the most direction path</p>",
        "id": 183558510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576509631
    },
    {
        "content": "<p>Well, it looks like it moves us away, but I want to argue that it is exactly the quick and dirty hack we can use while we are building proper solution properly</p>",
        "id": 183558529,
        "sender_full_name": "matklad",
        "timestamp": 1576509645
    },
    {
        "content": "<p>Yes.</p>",
        "id": 183558660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576509742
    },
    {
        "content": "<p>OK, so, let's try to talk to eddyb -- maybe we can arrange a time this week</p>",
        "id": 183558681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576509756
    },
    {
        "content": "<blockquote>\n<p>but it is wrong long-term, as it moves us further away from in-process lazy-analysis</p>\n</blockquote>\n<p>is there actually consensus on this? With librarification, the end state would never be that 'RLS2' calls in-process queries from rustc, would it? At least my understanding is that the idea there is that code-sharing between the compiler would be achieved by sharing libraries, not the whole compiler. So I don't know if this is really just a disagreement about how to get to the end state</p>",
        "id": 183562090,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1576511710
    },
    {
        "content": "<blockquote>\n<p>With librarification, the end state would never be that 'RLS2' calls in-process queries from rustc, would it?</p>\n</blockquote>\n<p>In my mind, in the end state RLS2 and rustc are indistinguishable. In particular, they do use the same query infrastructure (but maybe in a slightly different ways)</p>",
        "id": 183567110,
        "sender_full_name": "matklad",
        "timestamp": 1576514741
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> , <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> it's that time again!</p>",
        "id": 184109848,
        "sender_full_name": "matklad",
        "timestamp": 1577113258
    },
    {
        "content": "<p>This week's changelog: <a href=\"https://rust-analyzer.github.io/thisweek/2019/12/23/changelog-4.html\" target=\"_blank\" title=\"https://rust-analyzer.github.io/thisweek/2019/12/23/changelog-4.html\">https://rust-analyzer.github.io/thisweek/2019/12/23/changelog-4.html</a></p>",
        "id": 184109860,
        "sender_full_name": "matklad",
        "timestamp": 1577113268
    },
    {
        "content": "<p>(quite a bunch of changes there)</p>",
        "id": 184109866,
        "sender_full_name": "matklad",
        "timestamp": 1577113275
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 184109880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113293
    },
    {
        "content": "<p>I'm skimming the change-log</p>",
        "id": 184109892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113308
    },
    {
        "content": "<p>My main update is that I've been working on drafting the \"what does a type library look like\" docs</p>",
        "id": 184109901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113320
    },
    {
        "content": "<p>As well as various chalk updates</p>",
        "id": 184109946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113329
    },
    {
        "content": "<p>I see that <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> already rebased over some of the various tweaks to chalk-ir, I expect more to come</p>",
        "id": 184109967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113352
    },
    {
        "content": "<p>Yeah, we've updated to chalk master yesterday</p>",
        "id": 184110006,
        "sender_full_name": "matklad",
        "timestamp": 1577113389
    },
    {
        "content": "<p>I think the hihglight of this week is super-preliminary support for items, nested in functions</p>",
        "id": 184110022,
        "sender_full_name": "matklad",
        "timestamp": 1577113415
    },
    {
        "content": "<p>I'm trying to figure out the best way to \"get ahead\" of these changes and to structure such a document; my ambition is of course that we also use this as the basis for a \"portable\" type-checking library</p>",
        "id": 184110025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113421
    },
    {
        "content": "<p>Ie, we actually create hir for such items, and do a suuuuper crude name resolution for them.</p>",
        "id": 184110035,
        "sender_full_name": "matklad",
        "timestamp": 1577113437
    },
    {
        "content": "<p>One thing that might be good for us to talk briefly about are the next steps after last week's meeting and the subsequent discussion</p>",
        "id": 184110087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113456
    },
    {
        "content": "<p>+1</p>",
        "id": 184110099,
        "sender_full_name": "matklad",
        "timestamp": 1577113475
    },
    {
        "content": "<p>Also, I'd love to check in with <span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span> about rls-save-analysis crate refactorings. Did you get a chance to do the cleanups you wanted?</p>",
        "id": 184110120,
        "sender_full_name": "matklad",
        "timestamp": 1577113511
    },
    {
        "content": "<p>Yeah, I was wondering about that -- I think maybe the two of <em>us</em> aren't quite the right audience for the 'next steps' discussion, seems like we probably want at least <span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span> and maybe a bit more</p>",
        "id": 184110145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113541
    },
    {
        "content": "<blockquote>\n<p>One thing that might be good for us to talk briefly about are the next steps</p>\n</blockquote>\n<p>Is it correct to assume that t-compiler has a rough agreement on the overall plan?</p>",
        "id": 184110147,
        "sender_full_name": "matklad",
        "timestamp": 1577113547
    },
    {
        "content": "<p>I don't entirely know but I think so</p>",
        "id": 184110204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113568
    },
    {
        "content": "<p>no one explicitelly disagreed, and <span class=\"user-mention silent\" data-user-id=\"119031\">Esteban Küber</span> explictelly agreed, modulo diagnostics, so I'd lean towards yes</p>",
        "id": 184110220,
        "sender_full_name": "matklad",
        "timestamp": 1577113579
    },
    {
        "content": "<p>By \"the overall plan\" I think you're referring to <a class=\"stream-topic\" data-stream-id=\"131828\" href=\"/#narrow/stream/131828-t-compiler/topic/design.20meeting.202019-12-13.20follow-up\">#t-compiler &gt; design meeting 2019-12-13 follow-up</a></p>",
        "id": 184110222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113581
    },
    {
        "content": "<p>yup</p>",
        "id": 184110232,
        "sender_full_name": "matklad",
        "timestamp": 1577113589
    },
    {
        "content": "<p>Yeah</p>",
        "id": 184110233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113590
    },
    {
        "content": "<p>One of the questions I'm pondering is what to do with that plan</p>",
        "id": 184110247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113598
    },
    {
        "content": "<p>I feel like it's even a bit bigger than t-compiler, it feels like something that should be at least \"raised\" with core team and reflected on the roadmap, for example, but I'm kind of trying to do that</p>",
        "id": 184110264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113618
    },
    {
        "content": "<p>Agree</p>",
        "id": 184110283,
        "sender_full_name": "matklad",
        "timestamp": 1577113644
    },
    {
        "content": "<p>Anyway let's assume there is general agreement</p>",
        "id": 184110284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113645
    },
    {
        "content": "<p>For the time being</p>",
        "id": 184110289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113651
    },
    {
        "content": "<p>I still think that maybe this is [pre-]RFC worthy</p>",
        "id": 184110294,
        "sender_full_name": "matklad",
        "timestamp": 1577113659
    },
    {
        "content": "<p>I actually agree with that</p>",
        "id": 184110300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113665
    },
    {
        "content": "<p>and was debating about drafting one</p>",
        "id": 184110301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113668
    },
    {
        "content": "<p>Though one of the questions is just what it should cover</p>",
        "id": 184110364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113686
    },
    {
        "content": "<p>In particular I'm not sure how deep to go on the technical details --</p>",
        "id": 184110397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113719
    },
    {
        "content": "<p>Anyway the main unresolved <em>technical</em> question, I think, is how to actually manage the \"transition\" to rust-analyzer</p>",
        "id": 184110415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113743
    },
    {
        "content": "<p>I think we should cover architecture in broad strokes, but explicitelly avoid digging into technical details</p>",
        "id": 184110419,
        "sender_full_name": "matklad",
        "timestamp": 1577113746
    },
    {
        "content": "<p>I think there are some \"branding\" questions -- e.g., is this \"RLS 2.0\" etc?</p>",
        "id": 184110426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113754
    },
    {
        "content": "<p>That is something I expect the core team may have opinions and insight into</p>",
        "id": 184110430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113761
    },
    {
        "content": "<p>(And/or other folks)</p>",
        "id": 184110436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113768
    },
    {
        "content": "<blockquote>\n<p>I think we should cover architecture in broad strokes, but explicitelly avoid digging into technical details</p>\n</blockquote>\n<p>I lean this way as well</p>",
        "id": 184110438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113772
    },
    {
        "content": "<p>maybe we should create a hackmd to start drafting? and/or a repo</p>",
        "id": 184110451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113787
    },
    {
        "content": "<p>Though, we <em>should</em> solve the immediate technical question of save-analysis libary vs rls process, and preferably sooner rather than later</p>",
        "id": 184110511,
        "sender_full_name": "matklad",
        "timestamp": 1577113810
    },
    {
        "content": "<p>Agreed as well :)</p>",
        "id": 184110517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113817
    },
    {
        "content": "<p>We did the starting point of <a href=\"https://hackmd.io/sMospvYyTtisAnLMdlrUgQ\" target=\"_blank\" title=\"https://hackmd.io/sMospvYyTtisAnLMdlrUgQ\">enumerating some of the design space</a></p>",
        "id": 184110531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113832
    },
    {
        "content": "<blockquote>\n<p>maybe we should create a hackmd to start drafting? and/or a repo</p>\n</blockquote>\n<p>Yes! I think hackmd might be easier?</p>",
        "id": 184110532,
        "sender_full_name": "matklad",
        "timestamp": 1577113832
    },
    {
        "content": "<p>BTW</p>",
        "id": 184110540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113841
    },
    {
        "content": "<p>we should link all these things into that \"master\" hackmd</p>",
        "id": 184110545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113847
    },
    {
        "content": "<p>/me goes to look for it</p>",
        "id": 184110549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113856
    },
    {
        "content": "<p>(we could also use hackmd's tagging metadata feature...)</p>",
        "id": 184110559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113865
    },
    {
        "content": "<p>and we should link the \"master\" hackmd from somewhere, because I, offhand, don't know how to find it :)</p>",
        "id": 184110572,
        "sender_full_name": "matklad",
        "timestamp": 1577113892
    },
    {
        "content": "<blockquote>\n<p>We did the starting point of <a href=\"https://hackmd.io/sMospvYyTtisAnLMdlrUgQ\" target=\"_blank\" title=\"https://hackmd.io/sMospvYyTtisAnLMdlrUgQ\">enumerating some of the design space</a></p>\n</blockquote>\n<p>I feel like this is where <span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span>'s take would be useful</p>",
        "id": 184110575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113895
    },
    {
        "content": "<p>I guess I'll just bookmark</p>",
        "id": 184110577,
        "sender_full_name": "matklad",
        "timestamp": 1577113898
    },
    {
        "content": "<p>hold on, i'm finding and linking things together :)</p>",
        "id": 184110589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113909
    },
    {
        "content": "<p>I think another key point re: the technical design is the question of whether rust-analyzer will be distributed via rustup etc</p>",
        "id": 184110653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113941
    },
    {
        "content": "<p>yep</p>",
        "id": 184110662,
        "sender_full_name": "matklad",
        "timestamp": 1577113957
    },
    {
        "content": "<p>in particular, if it's going to be \"implicitly\" tied to rustc via save-analysis ...</p>",
        "id": 184110663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113958
    },
    {
        "content": "<p>but I think in general we should consider \"rustup distribution\" a feature</p>",
        "id": 184110667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113968
    },
    {
        "content": "<p>i.e., that is a feature of RLS, and we want to maintain parity with it, if the goal is to minimally disrupt user experience</p>",
        "id": 184110671,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113981
    },
    {
        "content": "<p>I plan to try publish some binary releases directlyt o GitHub, jut to experiment</p>",
        "id": 184110680,
        "sender_full_name": "matklad",
        "timestamp": 1577113988
    },
    {
        "content": "<p><em>ideally</em> people would just do <code>rustup udpate</code> and get rust-analyzer</p>",
        "id": 184110690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577113999
    },
    {
        "content": "<p>without knowing the difference</p>",
        "id": 184110695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577114001
    },
    {
        "content": "<p>right?</p>",
        "id": 184110696,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577114002
    },
    {
        "content": "<p>THe interesting bit is that rust-analyzer doesn't <em>have</em> to be distributed via rustup, as we don't need nightly</p>",
        "id": 184110698,
        "sender_full_name": "matklad",
        "timestamp": 1577114006
    },
    {
        "content": "<p>well</p>",
        "id": 184110702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577114014
    },
    {
        "content": "<blockquote>\n<p>right?</p>\n</blockquote>\n<p>I am not sure actually</p>",
        "id": 184110709,
        "sender_full_name": "matklad",
        "timestamp": 1577114019
    },
    {
        "content": "<p>I feel like that is less true if it is consuming save-analysis data directly</p>",
        "id": 184110715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577114027
    },
    {
        "content": "<p>it may not need <em>nightly</em>, but it will break if it is not using the version of rustc it expets</p>",
        "id": 184110761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577114042
    },
    {
        "content": "<p>Like, the ideal workflow for VS Code is to install extension via a marketplace, and let the extension download stuff</p>",
        "id": 184110768,
        "sender_full_name": "matklad",
        "timestamp": 1577114046
    },
    {
        "content": "<p>well I guess I don't know how the RLS upgrades itself now etc</p>",
        "id": 184110775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577114059
    },
    {
        "content": "<p>That is, what matter for user experience is not the server binary, but the editor plugin, and we can't distribute that via rustup</p>",
        "id": 184110800,
        "sender_full_name": "matklad",
        "timestamp": 1577114082
    },
    {
        "content": "<p>PS link to the <a href=\"https://hackmd.io/9qrJYdSLTK2MWG4-pbmpWw\" target=\"_blank\" title=\"https://hackmd.io/9qrJYdSLTK2MWG4-pbmpWw\">master hackmd document</a></p>",
        "id": 184110819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577114105
    },
    {
        "content": "<p>I think that we should try weekly releases outside of rustup first, and, if that's not convenient/breaks in practice, switch to rustup</p>",
        "id": 184110926,
        "sender_full_name": "matklad",
        "timestamp": 1577114187
    },
    {
        "content": "<p>would we expect people to manually upgrade?</p>",
        "id": 184110936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577114203
    },
    {
        "content": "<p>anyway this seems like another detail to resolve for sure</p>",
        "id": 184110948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577114216
    },
    {
        "content": "<p>We expect the extension to automatically upgrade</p>",
        "id": 184110950,
        "sender_full_name": "matklad",
        "timestamp": 1577114219
    },
    {
        "content": "<p>editor extension that is</p>",
        "id": 184110962,
        "sender_full_name": "matklad",
        "timestamp": 1577114235
    },
    {
        "content": "<p>maybe we can start to update that \"master\" document with the broad outlines  of the plan and the \"things to resolve\"</p>",
        "id": 184110968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577114240
    },
    {
        "content": "<p>/me tries to do that</p>",
        "id": 184111006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577114265
    },
    {
        "content": "<p>or maybe that's \"unresolved questions\" section of the RFC draft? Maybe too technical for it though</p>",
        "id": 184111069,
        "sender_full_name": "matklad",
        "timestamp": 1577114293
    },
    {
        "content": "<p>I do think this point is potentially germane to the RFC</p>",
        "id": 184111159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577114390
    },
    {
        "content": "<p>I think the RFC should be about what \"end users of Rust have to know\"</p>",
        "id": 184111173,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577114402
    },
    {
        "content": "<p>you could have the editor extension notify the user when the server needs an upgrade</p>",
        "id": 184111273,
        "sender_full_name": "Darin Morrison",
        "timestamp": 1577114504
    },
    {
        "content": "<p>Personally I think this should be as \"minimally disruptive\" for folks as possible</p>",
        "id": 184111336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577114547
    },
    {
        "content": "<p>But I don't exactly know what that means</p>",
        "id": 184111345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577114558
    },
    {
        "content": "<p>I'm trying to think about the best way to start broadening up the conversation on these points, and include the right folks</p>",
        "id": 184111456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577114654
    },
    {
        "content": "<p>internals thread is an option</p>",
        "id": 184111461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577114657
    },
    {
        "content": "<p>I'm not 100% sure who the \"right folks\" are</p>",
        "id": 184111472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577114668
    },
    {
        "content": "<p>Yeah you don't want to spam them but you could, on first install, ask if they want updates. I've seen other extensions do that.</p>",
        "id": 184111518,
        "sender_full_name": "Darin Morrison",
        "timestamp": 1577114709
    },
    {
        "content": "<p>Pre-rfc thread seems good. I think the set of \"right folks\" is open hear: we've already did the technical discussion with t-compiler</p>",
        "id": 184111571,
        "sender_full_name": "matklad",
        "timestamp": 1577114763
    },
    {
        "content": "<p>BTW, created a <a href=\"https://hackmd.io/NKMNjAYoRE6AP_XRot3z0w\" target=\"_blank\" title=\"https://hackmd.io/NKMNjAYoRE6AP_XRot3z0w\">hackmd</a> for the RFC drafting</p>",
        "id": 184111619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577114793
    },
    {
        "content": "<p>well, we might want to have a round of conversation with core as well, but, after that, internals seems like the right audience</p>",
        "id": 184111620,
        "sender_full_name": "matklad",
        "timestamp": 1577114794
    },
    {
        "content": "<p>yeah that sounds correct, but I think we should do some \"pre-gaming\" to select the questions where we most want feedback</p>",
        "id": 184111626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577114809
    },
    {
        "content": "<p>Hm, yeah, now that I think of it, it might be a good idea to talk to core before pre-RFC</p>",
        "id": 184111643,
        "sender_full_name": "matklad",
        "timestamp": 1577114831
    },
    {
        "content": "<p>I can certainly send a quick e-mail</p>",
        "id": 184111648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577114842
    },
    {
        "content": "<p>Given that it's the holidays I wouldn't expect a lot of responses</p>",
        "id": 184111659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577114849
    },
    {
        "content": "<p>Do we want to expedite something before the holidays end though?</p>",
        "id": 184111717,
        "sender_full_name": "matklad",
        "timestamp": 1577114883
    },
    {
        "content": "<p>That said I think an internals thread is also an ok next step -- but prior to that it probably makes sense to have a bit more of a \"RFC draft\" to point people at -- not finishing, and we should draft the internals message itself</p>",
        "id": 184111722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577114885
    },
    {
        "content": "<p>I don't think there's a reason to stress</p>",
        "id": 184111728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577114895
    },
    {
        "content": "<p>For full context, I'm also putting in some effort onto the roadmap discussion, and I think it's ok to discuss this a bit in that light</p>",
        "id": 184111742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577114910
    },
    {
        "content": "<p>I have already raised it a number of times there</p>",
        "id": 184111755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577114932
    },
    {
        "content": "<p>Oh, right, this is very roadmap related</p>",
        "id": 184111757,
        "sender_full_name": "matklad",
        "timestamp": 1577114936
    },
    {
        "content": "<p>/me realizes that its that time of the year again</p>",
        "id": 184111769,
        "sender_full_name": "matklad",
        "timestamp": 1577114950
    },
    {
        "content": "<p>I'm debating the right way to describe this plan for RFC summary, seems like a very good exercise</p>",
        "id": 184111856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577115018
    },
    {
        "content": "<p>So, what  about this plan:</p>\n<ul>\n<li>you write a quick email to core, just to check that nobody thinks this all is an insane idea to discuss</li>\n<li>we write a draft RFC</li>\n<li>we open an internals thread with a draft RFC linked</li>\n</ul>",
        "id": 184111882,
        "sender_full_name": "matklad",
        "timestamp": 1577115052
    },
    {
        "content": "<p>sounds like a plan; I don't know how much time I will have this week, plannin to mostly take vacation</p>",
        "id": 184111909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577115083
    },
    {
        "content": "<p>I'm around today but maybe not after today</p>",
        "id": 184111917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577115093
    },
    {
        "content": "<p>I can certainly send an e-mail to core tho</p>",
        "id": 184111918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577115097
    },
    {
        "content": "<p>Yeah, I think we should target discussion after new year, there's no particular rush</p>",
        "id": 184111988,
        "sender_full_name": "matklad",
        "timestamp": 1577115136
    },
    {
        "content": "<p>right</p>",
        "id": 184112004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577115158
    },
    {
        "content": "<p>I'm practicing being more \"zen\" :)</p>",
        "id": 184112010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577115162
    },
    {
        "content": "<p>I am also not sure about my availabilyty for the next two weeks, and I also plan to implement that standard lazy types RFC...</p>",
        "id": 184112025,
        "sender_full_name": "matklad",
        "timestamp": 1577115181
    },
    {
        "content": "<p>ok. I will put in some time today, I don't think the RFC has to be \"done\" to start discussing</p>",
        "id": 184112051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577115207
    },
    {
        "content": "<p>but it needs at least enough bullets that people don't \"fill in the blanks\"</p>",
        "id": 184112067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577115218
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 184112068,
        "sender_full_name": "matklad",
        "timestamp": 1577115218
    },
    {
        "content": "<p>It might not be the best time to open RFC during hollidays though, as those folks who use Rust profeccionally might be on vacation from RUst things</p>",
        "id": 184112146,
        "sender_full_name": "matklad",
        "timestamp": 1577115282
    },
    {
        "content": "<p>or it might actually be the opposite vacation =&gt; more time for bikeshedding</p>",
        "id": 184112155,
        "sender_full_name": "matklad",
        "timestamp": 1577115301
    },
    {
        "content": "<p>I'm not planning on opening it until next week</p>",
        "id": 184112351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577115528
    },
    {
        "content": "<p>if then :)</p>",
        "id": 184112352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577115531
    },
    {
        "content": "<p>anyway not this week</p>",
        "id": 184112358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577115542
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> not sure if you're around this week. I am but I'm a bit busy just now</p>",
        "id": 184477636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577718145
    },
    {
        "content": "<p>It's time for the last update for this year <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"confetti\" class=\"emoji emoji-1f38a\" role=\"img\" title=\"confetti\">:confetti:</span> </p>\n<p>Changelog is up, as usual: <a href=\"https://rust-analyzer.github.io/thisweek/2019/12/30/changelog-5.html\" target=\"_blank\" title=\"https://rust-analyzer.github.io/thisweek/2019/12/30/changelog-5.html\">https://rust-analyzer.github.io/thisweek/2019/12/30/changelog-5.html</a></p>\n<p>I don't have much to report personally, as I was traveling</p>",
        "id": 184477641,
        "sender_full_name": "matklad",
        "timestamp": 1577718151
    },
    {
        "content": "<p>But others were hard at work, so we landed a number of big features still!</p>\n<ul>\n<li><code>cargo watch</code> is moved to the server side, and now should work with emacs</li>\n<li>for vs code, we now use a standard way to customize the color theme</li>\n<li>and we support visibility during name resolution</li>\n</ul>",
        "id": 184477683,
        "sender_full_name": "matklad",
        "timestamp": 1577718237
    },
    {
        "content": "<p>I didn't get a change to fill-in the pre-RFC from the previous week sadly :(</p>",
        "id": 184477741,
        "sender_full_name": "matklad",
        "timestamp": 1577718261
    },
    {
        "content": "<p>Yeah, that's on my to-do list for today</p>",
        "id": 184477794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577718318
    },
    {
        "content": "<p>Sounds like I should also upgrade my r-a installation</p>",
        "id": 184477806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577718327
    },
    {
        "content": "<p>cargo watch would be nice :)</p>",
        "id": 184477810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577718332
    },
    {
        "content": "<p>I did I think send an e-mail to core team as we discussed</p>",
        "id": 184477831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577718360
    },
    {
        "content": "<p>but i've not checked my email to see if anyone responded :P</p>",
        "id": 184477872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577718369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> I put some more work into updating <a href=\"https://hackmd.io/NKMNjAYoRE6AP_XRot3z0w?edit\" target=\"_blank\" title=\"https://hackmd.io/NKMNjAYoRE6AP_XRot3z0w?edit\">the draft RFC</a>, though it's by no means complete</p>",
        "id": 184566277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577826880
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> -- you around this week?</p>",
        "id": 184913362,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578323056
    },
    {
        "content": "<p>So, let's have our first weekly update of the decade, <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span>!</p>\n<p><a href=\"https://rust-analyzer.github.io/thisweek/2020/01/06/changelog-6.html\" target=\"_blank\" title=\"https://rust-analyzer.github.io/thisweek/2020/01/06/changelog-6.html\">https://rust-analyzer.github.io/thisweek/2020/01/06/changelog-6.html</a></p>\n<p>I sadly don't have a lot of to report this time: it was a mix of vacation and blogging about spinlocks for me :(</p>",
        "id": 184913371,
        "sender_full_name": "matklad",
        "timestamp": 1578323061
    },
    {
        "content": "<p>yup!</p>",
        "id": 184913380,
        "sender_full_name": "matklad",
        "timestamp": 1578323069
    },
    {
        "content": "<p>I haven't looked into the RFC yet, but I am going to do it today</p>",
        "id": 184913411,
        "sender_full_name": "matklad",
        "timestamp": 1578323095
    },
    {
        "content": "<p>OK. I don't have a ton to report. I had an epic conversation with <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> about traits, chalk, etc, and I am thinking a lot about next steps, but that's probably best discussed in <a class=\"stream\" data-stream-id=\"144729\" href=\"/#narrow/stream/144729-wg-traits\">#wg-traits</a>.</p>",
        "id": 184913580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578323208
    },
    {
        "content": "<p>I was wondering one thing, though</p>",
        "id": 184913584,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578323211
    },
    {
        "content": "<p>In general, you've several times relayed a wish to get more involvement from other t-compiler folks</p>",
        "id": 184913595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578323225
    },
    {
        "content": "<p>yesssssss</p>",
        "id": 184913619,
        "sender_full_name": "matklad",
        "timestamp": 1578323248
    },
    {
        "content": "<p>I'm still feeling a bit unsure how to \"engineer\" that :) I guess one question I had was what you thought such involvement would look like. I am imagining feedback on various design questions ?</p>",
        "id": 184913729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578323324
    },
    {
        "content": "<p>I guess also potentially directly hacking on rust-analyzer :)</p>",
        "id": 184913760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578323354
    },
    {
        "content": "<p>It seems like getting aggressive about library-ification (as we are hoping) is the best way forward here</p>",
        "id": 184913773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578323367
    },
    {
        "content": "<p>I think directly hacking is more important, as it is a way to get design feedback with teeth, so to say</p>",
        "id": 184913849,
        "sender_full_name": "matklad",
        "timestamp": 1578323402
    },
    {
        "content": "<p>I'm inclined to agree</p>",
        "id": 184913931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578323453
    },
    {
        "content": "<blockquote>\n<p>It seems like getting aggressive about library-ification (as we are hoping) is the best way forward here</p>\n</blockquote>\n<p>Yes. It helps <strong>tremendously</strong> that folks can work on chalk, for example</p>",
        "id": 184913946,
        "sender_full_name": "matklad",
        "timestamp": 1578323463
    },
    {
        "content": "<p>Though I do think that there's a lot of importatn design question about state management in rust-analyzer itself, and that won't be covered by librariification</p>",
        "id": 184913988,
        "sender_full_name": "matklad",
        "timestamp": 1578323500
    },
    {
        "content": "<p>one thing we've talked about is trying to spend more time planning out roadmaps, I wonder if it would be helpful to schedule some longer sessions (I think a lot of time is needed, e.g. potentially in the 2-4 hour region) to kind of \"dump out\" the thinking and plan out steps</p>",
        "id": 184913993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578323503
    },
    {
        "content": "<p>felix and I did such a session in a cafe on friday for traits</p>",
        "id": 184914004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578323511
    },
    {
        "content": "<p>and I'm still pondering it :)</p>",
        "id": 184914006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578323514
    },
    {
        "content": "<p>side note: I feel like I owe you a lot of feedback re: salsa + encapsulation etc</p>",
        "id": 184914074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578323531
    },
    {
        "content": "<p>not sure if you've talked much about the parser?</p>",
        "id": 184914088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578323550
    },
    {
        "content": "<p>No, I didn't get to parser stuff still</p>",
        "id": 184914105,
        "sender_full_name": "matklad",
        "timestamp": 1578323565
    },
    {
        "content": "<blockquote>\n<p>Though I do think that there's a lot of importatn design question about state management in rust-analyzer itself, and that won't be covered by librariification</p>\n</blockquote>\n<p>yeah; the initial steps are fairly modest somehow</p>",
        "id": 184914109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578323567
    },
    {
        "content": "<p>I do think that planning roadmaps is important, but I feel that, for more technical roadmaps, some preliminary hacking is pre-requsite</p>",
        "id": 184914168,
        "sender_full_name": "matklad",
        "timestamp": 1578323620
    },
    {
        "content": "<p>yeah it's a difficult mix</p>",
        "id": 184914249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578323653
    },
    {
        "content": "<p>OK, well, something to think about I guess. Anyway, I think we should try to finish up that RFC in any case, but I'm not sure how much it directly helps at getting people to hack some on rust-analyzer more.</p>",
        "id": 184914444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578323789
    },
    {
        "content": "<p>FWIW, the general involvment with rust-analyzer is pretty great!</p>",
        "id": 184914485,
        "sender_full_name": "matklad",
        "timestamp": 1578323825
    },
    {
        "content": "<p>Yes! I shouldn't have written \"people\" so broadly</p>",
        "id": 184914509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578323841
    },
    {
        "content": "<p>Probably bigger than what I can confortably review thoroughly already :)</p>",
        "id": 184914512,
        "sender_full_name": "matklad",
        "timestamp": 1578323843
    },
    {
        "content": "<p>(Did you see <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>'s comments about writing up the steps to use rust-analyzer with rustc for various editors in the rustc-guide btw?)</p>",
        "id": 184914518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578323846
    },
    {
        "content": "<blockquote>\n<p>Probably bigger than what I can confortably review thoroughly already :)</p>\n</blockquote>\n<p>yeah, that's always a problem :)</p>",
        "id": 184914525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578323851
    },
    {
        "content": "<p>It wasn't that  bad with IntelliJ Rust -- probably fewer people know both kotlin &amp; rust</p>",
        "id": 184914628,
        "sender_full_name": "matklad",
        "timestamp": 1578323887
    },
    {
        "content": "<p>Should have written rust-anlayzer in agda to solve this \"problem\" :D</p>",
        "id": 184914652,
        "sender_full_name": "matklad",
        "timestamp": 1578323903
    },
    {
        "content": "<p>Heh, that wouldn't have stopped me</p>",
        "id": 184914692,
        "sender_full_name": "detrumi",
        "timestamp": 1578323926
    },
    {
        "content": "<p>But it seems like it's mostly you reviewing things, so that's a bottleneck</p>",
        "id": 184914756,
        "sender_full_name": "detrumi",
        "timestamp": 1578323961
    },
    {
        "content": "<blockquote>\n<p>comments about writing up the steps to use rust-analyzer with rustc for various editors in the rustc-guide btw?</p>\n</blockquote>\n<p>No, I only saw the poll</p>",
        "id": 184914775,
        "sender_full_name": "matklad",
        "timestamp": 1578323978
    },
    {
        "content": "<p>tbh, I haven't hacked on rustc in a while, so I am not sure I know the best tips for rust-anlayzer/rustc combo right now :)</p>",
        "id": 184914867,
        "sender_full_name": "matklad",
        "timestamp": 1578324017
    },
    {
        "content": "<p>I'm thinking I might take up the task of writing up such docs</p>",
        "id": 184917150,
        "sender_full_name": "pnkfelix",
        "timestamp": 1578325369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> (fyi, might be a bit late today)</p>",
        "id": 185500052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578927388
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> this week's notes: <a href=\"https://rust-analyzer.github.io/thisweek/2020/01/13/changelog-7.html\" target=\"_blank\" title=\"https://rust-analyzer.github.io/thisweek/2020/01/13/changelog-7.html\">https://rust-analyzer.github.io/thisweek/2020/01/13/changelog-7.html</a></p>",
        "id": 185500637,
        "sender_full_name": "matklad",
        "timestamp": 1578927749
    },
    {
        "content": "<p>I am super excited about today's release!</p>",
        "id": 185500659,
        "sender_full_name": "matklad",
        "timestamp": 1578927769
    },
    {
        "content": "<p>The most interesting bit, procedurally, is that we have binary releases now. Once we also add auto-update to the editor plugin, we'll be able to better answer the question about the best distribution strategy</p>",
        "id": 185500823,
        "sender_full_name": "matklad",
        "timestamp": 1578927895
    },
    {
        "content": "<p>I also opened a request for design meeting about parser library-ification: <a href=\"https://github.com/rust-lang/compiler-team/issues/237\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/issues/237\">https://github.com/rust-lang/compiler-team/issues/237</a></p>\n<p>In that proposal are links to the summary document about rust-analyzer's current approach to sytnax trees, as well as a plan I have in mind for sharing the parser</p>",
        "id": 185501087,
        "sender_full_name": "matklad",
        "timestamp": 1578928064
    },
    {
        "content": "<p>Also, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I feel we should probably move forward with the rls/rust-analyzer RFC. I think I've added various bits of background info to the hackmd document</p>",
        "id": 185501178,
        "sender_full_name": "matklad",
        "timestamp": 1578928118
    },
    {
        "content": "<blockquote>\n<p>I also opened a request for design meeting about parser library-ification: <a href=\"https://github.com/rust-lang/compiler-team/issues/237\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/issues/237\">https://github.com/rust-lang/compiler-team/issues/237</a></p>\n</blockquote>\n<p>That mentions merging the parsers for <code>ra</code> and <code>rustc</code>. Does that mean I should stop making PRs for the parser, since it's about to be in flux?</p>",
        "id": 185502762,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1578929029
    },
    {
        "content": "<blockquote>\n<p>Does that mean I should stop making PRs for the parser, since it's about to be in flux?</p>\n</blockquote>\n<p>Nope, I hope we can change everything incrementally and in small steps, without huge all-breaking PRs</p>",
        "id": 185502943,
        "sender_full_name": "matklad",
        "timestamp": 1578929124
    },
    {
        "content": "<p>On my side, I've been thinking a lot about the strategy for extracting a type library, and I'm beginning to question a bit the plan I had. In particular, I've been thinking it would make sense to start adjusting rustc to move it towards the proposed design -- as well perhaps as adding the bridge I was contemplating before -- and try to \"meet in the middle\" and then extract to a shared library.</p>",
        "id": 185503001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578929156
    },
    {
        "content": "<p>The same sort of applies to the trait solver strategy and other things</p>",
        "id": 185503056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578929165
    },
    {
        "content": "<p>I agree re: the RFC, <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>, I guess I'll look over it -- I think it's probably ready to be posted soon? It seems to me that on the 'big picture' there aren't really many unknowns</p>",
        "id": 185503129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578929206
    },
    {
        "content": "<p>I did a get few more e-mails from some core folks. <span class=\"user-mention\" data-user-id=\"256841\">@Nick Cameron</span> in particular mentioned the fact that we ought to try and ensure a seamless transition, and I agree</p>",
        "id": 185503216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578929252
    },
    {
        "content": "<p>Yeah, transition is a hard bit</p>",
        "id": 185503402,
        "sender_full_name": "matklad",
        "timestamp": 1578929362
    },
    {
        "content": "<p>I think we should have at least some transitionary period, when both are available, so that the users can switch when they are ready</p>",
        "id": 185503451,
        "sender_full_name": "matklad",
        "timestamp": 1578929401
    },
    {
        "content": "<p>but that makes automatic transition harder</p>",
        "id": 185503514,
        "sender_full_name": "matklad",
        "timestamp": 1578929415
    },
    {
        "content": "<p>I'd be interested in benchmarking the parsers as well, I've noticed <code>ra</code> is usually faster than running cargo check</p>",
        "id": 185503544,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1578929436
    },
    {
        "content": "<p>not sure how much of that is due to semantic analysis</p>",
        "id": 185503560,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1578929445
    },
    {
        "content": "<p>rust-analyzer parser was about 2X slower than rustc last time I've checked it (which was more than a year ago I guess?e)</p>",
        "id": 185503613,
        "sender_full_name": "matklad",
        "timestamp": 1578929477
    },
    {
        "content": "<p>Makes sense, because rustc's parser probably has been optimized for a long time</p>",
        "id": 185503804,
        "sender_full_name": "detrumi",
        "timestamp": 1578929563
    },
    {
        "content": "<p>For transition, I feel that accepting the RFC will take a non-trivial amount of time, during which we could figure out the details better. </p>\n<p>I still have a hypothesis that maybe we want to do something different from a <code>rustup component</code> :)</p>",
        "id": 185503843,
        "sender_full_name": "matklad",
        "timestamp": 1578929587
    },
    {
        "content": "<p>Oh, one more chalk related thing: I've got an idea how to isolate chalk's panics and make them less painful: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/2818\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/2818\">https://github.com/rust-analyzer/rust-analyzer/pull/2818</a></p>\n<p>Basiacally, wrap <code>catch_unwind</code> around trait solver and return <code>None</code> on panics. This is tricker than expected, because chalk itself is not unwind safe, so we also have to reset the sate on panic</p>",
        "id": 185504435,
        "sender_full_name": "matklad",
        "timestamp": 1578929931
    },
    {
        "content": "<p>Oh, I totally forgot to mention that <span class=\"user-mention silent\" data-user-id=\"212936\">Emil Lauridsen</span> heroically triaged all the issues on the repo, closed a bunch of obsolted ones, and worked with original issue reporters to get more info! This work sadly is invisible in <code>git log --merges</code> (that's why I missed it :( ), but is hugely important!</p>",
        "id": 185506480,
        "sender_full_name": "matklad",
        "timestamp": 1578931138
    },
    {
        "content": "<p>Note that thete's no sync up today: there's a holliday in USA, and Ferrous All Hands in Berlin</p>",
        "id": 186109427,
        "sender_full_name": "matklad",
        "timestamp": 1579532888
    },
    {
        "content": "<p>There <strong>is</strong> a release however, and I hope to get to writing release notes later today :)</p>",
        "id": 186109450,
        "sender_full_name": "matklad",
        "timestamp": 1579532912
    },
    {
        "content": "<p>Could you please elaborate on when and who is taking part in sync-ups and its process? Or if there is some reference info about them?</p>",
        "id": 186123305,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1579544157
    },
    {
        "content": "<p>The only mandatory participants are <span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> and <span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> , but anyone else is free to join</p>",
        "id": 186123408,
        "sender_full_name": "matklad",
        "timestamp": 1579544245
    },
    {
        "content": "<p>In general, our development process is mostly chaotic and not super well defined, but it tends to work out OK in practice</p>",
        "id": 186123439,
        "sender_full_name": "matklad",
        "timestamp": 1579544281
    },
    {
        "content": "<p>As for when, it's the same time every monday</p>",
        "id": 186123491,
        "sender_full_name": "detrumi",
        "timestamp": 1579544297
    },
    {
        "content": "<p>okay, <em><code>the</code></em> same time, thank you!</p>",
        "id": 186123966,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1579544745
    },
    {
        "content": "<p>And this week there are Mozilla all-hands, so we'll have only a short sync up I guess</p>",
        "id": 186689704,
        "sender_full_name": "matklad",
        "timestamp": 1580137392
    },
    {
        "content": "<p>The changelog is up here: <a href=\"https://rust-analyzer.github.io/thisweek/2020/01/27/changelog-9.html\" target=\"_blank\" title=\"https://rust-analyzer.github.io/thisweek/2020/01/27/changelog-9.html\">https://rust-analyzer.github.io/thisweek/2020/01/27/changelog-9.html</a></p>",
        "id": 186689714,
        "sender_full_name": "matklad",
        "timestamp": 1580137400
    },
    {
        "content": "<p>As it was all-hands week for me last week, I didn't do many useful things. However, this release includes auto import, and semantic syntax highlighting inside macro calls.</p>",
        "id": 186689849,
        "sender_full_name": "matklad",
        "timestamp": 1580137476
    },
    {
        "content": "<p>It almost makes me think that I am not that useful for rust-analyzer anymore <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 186690032,
        "sender_full_name": "matklad",
        "timestamp": 1580137569
    },
    {
        "content": "<p>There's always room to do more <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 186690540,
        "sender_full_name": "detrumi",
        "timestamp": 1580137842
    },
    {
        "content": "<p>(also, shouldn't we ping people for the sync up?)</p>",
        "id": 186690561,
        "sender_full_name": "detrumi",
        "timestamp": 1580137852
    },
    {
        "content": "<p>yeah, let's do this <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span></p>",
        "id": 186690757,
        "sender_full_name": "matklad",
        "timestamp": 1580137944
    },
    {
        "content": "<p>Actually, there's some thing I'd like to throw in the air...</p>\n<p>It looks like we've accumulated a bunch of cases where rust-analyzer breaks. I think the primary case here is chalk, but I've also seen some utf8-boundary error  somewhere, and we also ocasionaaly have panicy assists. </p>\n<p>By itself, I think panics are OK: they are pretty isolated, and actually test, in practice, the resilience of rust-analyzer. What I don't really like though, is the fact that we've accumulated enougth panics to make it hard to notice new bugs/regressions</p>",
        "id": 186692189,
        "sender_full_name": "matklad",
        "timestamp": 1580138777
    },
    {
        "content": "<p>I wonder if we should maybe start moving towards zero bugs policy? Or at least zero panics?</p>",
        "id": 186692245,
        "sender_full_name": "matklad",
        "timestamp": 1580138819
    },
    {
        "content": "<p>Isn't that kinda tricky because the errors are hard to track down?</p>",
        "id": 186692472,
        "sender_full_name": "detrumi",
        "timestamp": 1580138958
    },
    {
        "content": "<p>Do you mean by moving towards zero panics that fixing bugs should be the priority?</p>",
        "id": 186692575,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580139005
    },
    {
        "content": "<p>Yeah</p>",
        "id": 186692595,
        "sender_full_name": "matklad",
        "timestamp": 1580139015
    },
    {
        "content": "<p>Basically, prioritizing fixes (even obscure ones, like \"this needs to be fixed in chalk\" over feature work)</p>",
        "id": 186692627,
        "sender_full_name": "matklad",
        "timestamp": 1580139042
    },
    {
        "content": "<p>What if the fix requires a larger change, as often happens? Put a workaround in place to avoid crashing?</p>",
        "id": 186692745,
        "sender_full_name": "detrumi",
        "timestamp": 1580139119
    },
    {
        "content": "<p>(at first, while working on a real solution)</p>",
        "id": 186692805,
        "sender_full_name": "detrumi",
        "timestamp": 1580139135
    },
    {
        "content": "<p>Well, removing bugs is always reasonable! I will try to finish with my changes to <code>ra_syntax</code> and take a look at adding sanititizers to better tackle issues with memory corruptions. Or does one think this wouldn't help/be possible?</p>",
        "id": 186693025,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580139265
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/2904\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/2904\">issue</a></p>",
        "id": 186693147,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580139339
    },
    {
        "content": "<p>Could legitimate panics be hid by us using panics for cancellation?</p>",
        "id": 186693338,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1580139435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203366\">@Jeremy Kolb</span> nope, we specifically rethrough anything that is not the <code>Canceled</code> zst</p>",
        "id": 186693367,
        "sender_full_name": "matklad",
        "timestamp": 1580139465
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"258149\">@std::Veetaha</span> i think that might help we have a repro. What confuses me though is that our fuzz tests (<code>cargo xtask fuzz-tests</code>) don't seem to catch anything....</p>",
        "id": 186693478,
        "sender_full_name": "matklad",
        "timestamp": 1580139514
    },
    {
        "content": "<p>concerning the Chalk problems, if you think it's the better trade-off, we could upgrade to current master and temporarily lose <code>impl Trait</code> support, but probably fix some panics and improve performance</p>",
        "id": 186693487,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1580139523
    },
    {
        "content": "<p>I'm currently working on refactoring <code>impl Trait</code> handling on rust-analyzer side to prepare for the Chalk changes (and also to make it more correct), but it will take some more time</p>",
        "id": 186693528,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1580139555
    },
    {
        "content": "<p>(I've realized that we need to handle argument-position impl trait by basically lowering to type variables anyway)</p>",
        "id": 186693636,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1580139624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>  It seems that these fuzz tests generate overly-random data, I saw we could configure the fuzzer to emit something more like a rust source code.<br>\nIt is called <a href=\"https://rust-fuzz.github.io/book/cargo-fuzz/structure-aware-fuzzing.html\" target=\"_blank\" title=\"https://rust-fuzz.github.io/book/cargo-fuzz/structure-aware-fuzzing.html\">structure-aware fuzzing</a></p>",
        "id": 186693713,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580139688
    },
    {
        "content": "<p>Ah, that's good to know for implementing impl trait on chalk's side</p>",
        "id": 186693837,
        "sender_full_name": "detrumi",
        "timestamp": 1580139750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> I think I prefer to move slowly with chalk in this case: upgrading to master might fix some, but uncover other bugs :)</p>",
        "id": 186693936,
        "sender_full_name": "matklad",
        "timestamp": 1580139830
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> we might still use the impl Trait support for arguments when type-checking the function itself, I'm not sure... we could use the type param lowering there as well, I don't know yet what will work better</p>",
        "id": 186694020,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1580139881
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> there's quite a bit to be gained in this case though, not just the panic fix but also fuel support</p>",
        "id": 186694091,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1580139928
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> what would be overall less work? </p>\n<ul>\n<li>move now, lose <code>impl Trait</code>, add it back later</li>\n<li>do refactorings, move together with <code>impl Trait</code> later</li>\n</ul>",
        "id": 186694223,
        "sender_full_name": "matklad",
        "timestamp": 1580140000
    },
    {
        "content": "<p>To cut on round-trips, I think it makes sense to do whatever needs the less work overall, because optimizing for your time seems very reasonable :D</p>",
        "id": 186694332,
        "sender_full_name": "matklad",
        "timestamp": 1580140074
    },
    {
        "content": "<p>it's the same amount of work, I think</p>",
        "id": 186694431,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1580140138
    },
    {
        "content": "<p>my refactorings are mostly independent, and upgrading now would mostly just involve deactivating a few tests</p>",
        "id": 186694476,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1580140165
    },
    {
        "content": "<p>Hm, yeah, I don't have any opinion then :)</p>",
        "id": 186694527,
        "sender_full_name": "matklad",
        "timestamp": 1580140195
    },
    {
        "content": "<p>I guess we could at least see what effect the Chalk upgrade has on <code>analysis-stats</code> (performance and analysis wise)</p>",
        "id": 186695125,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1580140545
    },
    {
        "content": "<p>Yeah, and also run it with <code>--with-deps</code>, to make sure nothing breaks horribly...</p>",
        "id": 186695212,
        "sender_full_name": "matklad",
        "timestamp": 1580140575
    },
    {
        "content": "<blockquote>\n<p>I guess we could at least see what effect the Chalk upgrade has on <code>analysis-stats</code> (performance and analysis wise)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> I am <em>not</em> part of this wg, just a <em>very</em> big fan and user of rust-analyzer! That being said: your draft PR (<a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/2872\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/2872\">https://github.com/rust-analyzer/rust-analyzer/pull/2872</a>) would unblock me (and probably several others) to use newer rust-analyzers on the main <code>tracing</code> repository, as <code>ra</code> crashes with the chalk bug(s) that jack fixed. I don't mind the lack of <code>impl Trait</code> because y'all have landed _so_ many amazing features in the last month and a half and I'm <em>really</em> eager to try them out.</p>",
        "id": 186697268,
        "sender_full_name": "David Barsky",
        "timestamp": 1580141801
    },
    {
        "content": "<p>(I hope this does not come off as me asking you to do work! i'm just a customer/user who is voicing _one_ (hopefully easily ignorable!) opinion. y'all obviously have <em>far</em> more context than I on this project.</p>",
        "id": 186697414,
        "sender_full_name": "David Barsky",
        "timestamp": 1580141887
    },
    {
        "content": "<p>the work is already done anyway ;)</p>",
        "id": 186698143,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1580142312
    },
    {
        "content": "<p>Understood! I have <em>no clue</em> how much effort it would be to disable the <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/2872/checks?check_run_id=396690282#step:9:665\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/2872/checks?check_run_id=396690282#step:9:665\">failing tests</a> and I don't want to assume anything.</p>",
        "id": 186698490,
        "sender_full_name": "David Barsky",
        "timestamp": 1580142516
    },
    {
        "content": "<p>especially for a project that people contribute their own time to.</p>",
        "id": 186698545,
        "sender_full_name": "David Barsky",
        "timestamp": 1580142547
    },
    {
        "content": "<p>I commented on the Chalk upgrade PR, but I personally recommend dropping <code>impl Trait</code> support for now in favor of upgrading</p>",
        "id": 186702712,
        "sender_full_name": "Jack Huey",
        "timestamp": 1580144846
    },
    {
        "content": "<p>Partly because the recent changes should fix a host of problems (mostly related to truncation) and allow limiting Chalk solving time.</p>",
        "id": 186702792,
        "sender_full_name": "Jack Huey",
        "timestamp": 1580144884
    },
    {
        "content": "<p>And partly because even though <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> is working on <code>impl Trait</code>, there still is some design work to do I think</p>",
        "id": 186702820,
        "sender_full_name": "Jack Huey",
        "timestamp": 1580144908
    },
    {
        "content": "<p><a href=\"https://www.reddit.com/r/rust/comments/eus0cj/rustanalyzer_changelog_9/\" target=\"_blank\" title=\"https://www.reddit.com/r/rust/comments/eus0cj/rustanalyzer_changelog_9/\">https://www.reddit.com/r/rust/comments/eus0cj/rustanalyzer_changelog_9/</a></p>",
        "id": 186710665,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1580149694
    },
    {
        "content": "<p>current Chalk master does not crash (or hang) when analyzing RA, even if I set max size to 10. And setting fuel to 100 saves about 10% runtime on analysis, and doesn't seem to have much of an effect on unknown types (in fact it has slightly fewer unknown types than when I use 1000, which is probably because Chalk has less time to find ambiguities <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> )</p>",
        "id": 186724389,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1580158315
    },
    {
        "content": "<p>If you don't set any fuel, does it still crash or hang?</p>",
        "id": 186729824,
        "sender_full_name": "Jack Huey",
        "timestamp": 1580161845
    },
    {
        "content": "<p>This makes me super happy to hear</p>",
        "id": 186729892,
        "sender_full_name": "Jack Huey",
        "timestamp": 1580161905
    },
    {
        "content": "<p>I haven't tried it without fuel</p>",
        "id": 186733512,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1580164497
    },
    {
        "content": "<p>my two cents as an outsider: I notice bugs in RA much more than I notice missing features. I'd much rather not have random errors pointing to imports instead of code than better type hints or anything like that</p>",
        "id": 187026770,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1580415741
    },
    {
        "content": "<p>also, I've put a fair amount of time into fuzzing <a href=\"https://github.com/jyn514/rcc/\" target=\"_blank\" title=\"https://github.com/jyn514/rcc/\">https://github.com/jyn514/rcc/</a>, so let me know if you want help with that :) Just giving AFL a bunch of valid [Rust] inputs usually gets good results</p>",
        "id": 187026845,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1580415836
    },
    {
        "content": "<p>AFAIK structure-aware fuzzing doesn't work very well with self-recursive data types, you can't <code>#[derive(Arbitrary)]</code> or anything like that</p>",
        "id": 187026960,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1580415908
    },
    {
        "content": "<p>Take a star mate! Could you please elaborate on what AFL means?</p>",
        "id": 187030048,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580418056
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"258149\">@std::Veetaha</span> <a href=\"https://github.com/rust-fuzz/afl.rs/\" target=\"_blank\" title=\"https://github.com/rust-fuzz/afl.rs/\">https://github.com/rust-fuzz/afl.rs/</a></p>",
        "id": 187030123,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1580418118
    },
    {
        "content": "<p>and this is what my fuzz setup looks like: <a href=\"https://github.com/jyn514/rcc/tree/master/fuzz\" target=\"_blank\" title=\"https://github.com/jyn514/rcc/tree/master/fuzz\">https://github.com/jyn514/rcc/tree/master/fuzz</a></p>",
        "id": 187030193,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1580418152
    },
    {
        "content": "<p>although I've tried using <a href=\"https://github.com/rust-fuzz/honggfuzz-rs\" target=\"_blank\" title=\"https://github.com/rust-fuzz/honggfuzz-rs\">hfuzz</a> lately: <a href=\"https://github.com/jyn514/rcc/blob/hfuzz/fuzz/hfuzz.rs\" target=\"_blank\" title=\"https://github.com/jyn514/rcc/blob/hfuzz/fuzz/hfuzz.rs\">https://github.com/jyn514/rcc/blob/hfuzz/fuzz/hfuzz.rs</a></p>",
        "id": 187030243,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1580418196
    },
    {
        "content": "<p>What is the advantage of <code>hfuzz?</code></p>",
        "id": 187030590,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580418429
    },
    {
        "content": "<p>If you look at my issues page it's caught 12 _different_ panics in the last 2 weeks</p>",
        "id": 187030711,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1580418500
    },
    {
        "content": "<p>Honestly not much, a friend recommended it but it seems pretty similar to AFL</p>",
        "id": 187030727,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1580418520
    },
    {
        "content": "<p>I don't think he's on Zulip or I'd tag him</p>",
        "id": 187030749,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1580418540
    },
    {
        "content": "<p>I wish I knew what was the secret...</p>",
        "id": 187030886,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580418629
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> weekly sync-up time! </p>\n<p>We have the tenth changelog today: <a href=\"https://rust-analyzer.github.io/thisweek/2020/02/03/changelog-10.html\" target=\"_blank\" title=\"https://rust-analyzer.github.io/thisweek/2020/02/03/changelog-10.html\">https://rust-analyzer.github.io/thisweek/2020/02/03/changelog-10.html</a></p>",
        "id": 187269386,
        "sender_full_name": "matklad",
        "timestamp": 1580742062
    },
    {
        "content": "<p>It is mostly stability&amp;fixes release, a lot of bugs were fixed around <code>cargo check</code> (thanks <span class=\"user-mention\" data-user-id=\"212936\">@Emil Lauridsen</span>!) and we've upgraded chalk to the fuel-enabled version!</p>",
        "id": 187269505,
        "sender_full_name": "matklad",
        "timestamp": 1580742131
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> are you around?</p>",
        "id": 187269519,
        "sender_full_name": "matklad",
        "timestamp": 1580742151
    },
    {
        "content": "<p>Another bigish thing is that I've finally get to learning more about sorbet, and it is really cool. I highly recommend reading the source code <a href=\"https://github.com/sorbet/sorbet\" target=\"_blank\" title=\"https://github.com/sorbet/sorbet\">https://github.com/sorbet/sorbet</a></p>",
        "id": 187269595,
        "sender_full_name": "matklad",
        "timestamp": 1580742238
    },
    {
        "content": "<p>Their architecture is much simpler than ours, but doesn't handle LSP use-case too well.</p>",
        "id": 187269658,
        "sender_full_name": "matklad",
        "timestamp": 1580742262
    },
    {
        "content": "<p>FYI: Niko has <a href=\"#narrow/stream/131828-t-compiler/topic/daughter.20sick\" title=\"#narrow/stream/131828-t-compiler/topic/daughter.20sick\">notified</a> that he would not be available today</p>",
        "id": 187272321,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580743908
    },
    {
        "content": "<p>I'm still working on refactoring impl trait and type parameters in general, it's getting quite big, but in the end I think it'll get us closer to Chalk and fix a few bugs</p>",
        "id": 187272898,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1580744217
    },
    {
        "content": "<p>I'm studying our VSCode extension codebase and VSCode api docs in parallel, hope to work on downloading github releases soon. Besides this I'd like to finish with this tech debt <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/2911/files#diff-b69d408968a5d30bec690c680ffcd1adR110\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/2911/files#diff-b69d408968a5d30bec690c680ffcd1adR110\">here</a> after merging the linked PR</p>",
        "id": 187273269,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580744455
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> , I am surprised that you decided to <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/3001/files\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/3001/files\">remove seedrandom</a> this is literally a package with 0 dependencies</p>",
        "id": 187273443,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580744562
    },
    {
        "content": "<p>it has zero dependnecies, but I've spend like 3x time figuring out how do you actually import seedrandom from seedrandom than it take me to write hashString and randomU32numbers :D</p>",
        "id": 187273667,
        "sender_full_name": "matklad",
        "timestamp": 1580744705
    },
    {
        "content": "<p>Yeah, the module system in TypeScript is very complicated and uneven, though that <code>esModuleInterop</code> was actually a good flag</p>",
        "id": 187273788,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580744784
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> how did you end up with studying sorbet and why this project in particular? Did you randomly saw that talk on YouTube?</p>",
        "id": 187275789,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580746010
    },
    {
        "content": "<p>If I have time this week I want to take a look at the latest semantic highlighting lsp bits</p>",
        "id": 187276830,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1580746594
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"258149\">@std::Veetaha</span> there was a link to sorbet in the top of <a href=\"http://lobste.rs\" target=\"_blank\" title=\"http://lobste.rs\">lobste.rs</a> recently, and then the author of olishell said that everyone must read sorbet's source code, and I trust their opinion</p>",
        "id": 187277668,
        "sender_full_name": "matklad",
        "timestamp": 1580747078
    },
    {
        "content": "<p>Now that it seems like cargo check is finally cooling down stability wise, I'd love to dive deeper into the infer infrastructure and chalk, and hopefully get custom BinOp inference working barring upstream issues.</p>",
        "id": 187277991,
        "sender_full_name": "Emil Lauridsen",
        "timestamp": 1580747234
    },
    {
        "content": "<p>the upstream issues (<a href=\"https://github.com/rust-lang-nursery/chalk/issues/234\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/chalk/issues/234\">chalk#234</a>) are still there, so it might work, but in many cases it might not give results :(</p>",
        "id": 187278243,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1580747352
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> it's Monday again!</p>",
        "id": 187823323,
        "sender_full_name": "matklad",
        "timestamp": 1581347152
    },
    {
        "content": "<p><a href=\"https://rust-analyzer.github.io/thisweek/2020/02/10/changelog-11.html\" target=\"_blank\" title=\"https://rust-analyzer.github.io/thisweek/2020/02/10/changelog-11.html\">https://rust-analyzer.github.io/thisweek/2020/02/10/changelog-11.html</a></p>",
        "id": 187823330,
        "sender_full_name": "matklad",
        "timestamp": 1581347154
    },
    {
        "content": "<p>(Note that the actual release is still in progress; I feel like I should start cutting releases earlier, rust-analyzer moves fast and it takes a long time to catch up with all the stuff :-) )</p>",
        "id": 187823426,
        "sender_full_name": "matklad",
        "timestamp": 1581347209
    },
    {
        "content": "<p>I was just wondering whether we should mention in the change log that we kind of had impl trait support and removed it</p>",
        "id": 187823440,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581347221
    },
    {
        "content": "<p>I think we've mentioned it in the previous one?</p>",
        "id": 187823467,
        "sender_full_name": "matklad",
        "timestamp": 1581347243
    },
    {
        "content": "<p>Not in Changelog 10, I think</p>",
        "id": 187823501,
        "sender_full_name": "detrumi",
        "timestamp": 1581347275
    },
    {
        "content": "<p>I don't think we did</p>",
        "id": 187823505,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581347279
    },
    {
        "content": "<p>it just says \"update Chalk. This should fix some cases of extremely slow trait checking.\"</p>",
        "id": 187823546,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581347288
    },
    {
        "content": "<p>I can send a PR</p>",
        "id": 187823557,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581347301
    },
    {
        "content": "<p>(for the current one)</p>",
        "id": 187823574,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581347309
    },
    {
        "content": "<p>sure, that would be nice!</p>",
        "id": 187823587,
        "sender_full_name": "matklad",
        "timestamp": 1581347317
    },
    {
        "content": "<p>Can we mention <code>nodejs 10</code> -&gt; <code>nodejs 12</code> requirements change?</p>",
        "id": 187823596,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581347322
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 187823630,
        "sender_full_name": "matklad",
        "timestamp": 1581347345
    },
    {
        "content": "<p>That's quite the requirement, isn't nodejs 10 the default on ubuntu and such?</p>",
        "id": 187823664,
        "sender_full_name": "detrumi",
        "timestamp": 1581347375
    },
    {
        "content": "<p>And we need to update the documentation on installing via marketplace. Currently it says users to download <code>.vsix</code> file from the latest GitHub release</p>",
        "id": 187823668,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581347376
    },
    {
        "content": "<p>(though maybe it's fine since it's only when you build from source)</p>",
        "id": 187823845,
        "sender_full_name": "detrumi",
        "timestamp": 1581347484
    },
    {
        "content": "<p>I doubt that Ubuntu ships nodejs and npm at all</p>",
        "id": 187823851,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581347487
    },
    {
        "content": "<p>An <code>apt-cache search nodejs</code>  on my ubuntu 18.04 is showing me 8?</p>",
        "id": 187823863,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1581347496
    },
    {
        "content": "<p>Yes ubuntu ships nodejs and npm</p>",
        "id": 187823883,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1581347510
    },
    {
        "content": "<p>So, highlights of the last week:</p>\n<ul>\n<li><span class=\"user-mention silent\" data-user-id=\"258149\">std::Veetaha</span> implemented downloading of binary releases (long awaited feature!)</li>\n<li>I've published the first version of extension to the marketplace. As this is the first publish, I expect things to break horribly for the next couple of releases</li>\n<li><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> rewritten our handing of type parameters</li>\n</ul>",
        "id": 187824023,
        "sender_full_name": "matklad",
        "timestamp": 1581347585
    },
    {
        "content": "<p>Well yes, this won't be such a breaking change for everyone, since this is to build from sources</p>",
        "id": 187824033,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581347589
    },
    {
        "content": "<p>Does the binary release work with the vscode remote extension?</p>",
        "id": 187824130,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1581347647
    },
    {
        "content": "<p>This week I plan to focus on releases and docs, to try to make sure that by the next release the process is solid, and not as manual as today.</p>",
        "id": 187824137,
        "sender_full_name": "matklad",
        "timestamp": 1581347655
    },
    {
        "content": "<p>We also had a meeting with t-compiler about parser library-ification. Looks like everyone is on board in general terms, and that we should just do this work.</p>",
        "id": 187824179,
        "sender_full_name": "matklad",
        "timestamp": 1581347694
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> are you around? I'd love to sync up regarding the RFC :)</p>",
        "id": 187824347,
        "sender_full_name": "matklad",
        "timestamp": 1581347795
    },
    {
        "content": "<p>@matklad I would like discuss our validation logic in <code>ra_syntax</code> it you have time...</p>",
        "id": 187825683,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581348578
    },
    {
        "content": "<p>sure!</p>",
        "id": 187825851,
        "sender_full_name": "matklad",
        "timestamp": 1581348671
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> hmm the asciidoc seems to be broken in the first \"new features\" point?</p>",
        "id": 187826833,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581349293
    },
    {
        "content": "<p>also I assume \"kbd::[Enter]\" isn't supposed to look like that</p>",
        "id": 187826903,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581349326
    },
    {
        "content": "<p>and it'd probably be nicer to make \"Marketplace\" a link instead of having the full URL in the text</p>",
        "id": 187826955,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581349357
    },
    {
        "content": "<blockquote>\n<p>hmm the asciidoc seems to be broken in the first \"new features\" point?</p>\n</blockquote>\n<p>Ah, so it's not the syntax highlighting in my editor that is broken <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 187827232,
        "sender_full_name": "matklad",
        "timestamp": 1581349516
    },
    {
        "content": "<p>also, while I'm making suggestions anyway... maybe we could add the two sentences \"rust-analyzer is an experimental modular compiler frontend for the Rust language. It is a part of a larger rls-2.0 effort to create excellent IDE support for Rust.\" to the beginning of each changelog and the home page? since it seems otherwise there's always someone on reddit who complains that the changelog doesn't say what RA is ;)</p>",
        "id": 187827348,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581349570
    },
    {
        "content": "<p>yeah, this is exactly something I want to fix this week</p>",
        "id": 187827403,
        "sender_full_name": "matklad",
        "timestamp": 1581349615
    },
    {
        "content": "<p>Also, on the home page of the website we can remove the sentence that rust-analyzer should be built from sources</p>",
        "id": 187827486,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581349667
    },
    {
        "content": "<p>Yeah, I plan to just rewrite all the docs from scratch</p>",
        "id": 187827939,
        "sender_full_name": "matklad",
        "timestamp": 1581349865
    },
    {
        "content": "<p>By the way, regarding rendering templates, there is much more Rust-y typesafe way of doing this: <a href=\"https://github.com/djc/askama\" target=\"_blank\" title=\"https://github.com/djc/askama\">https://github.com/djc/askama</a></p>",
        "id": 187828137,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581349982
    },
    {
        "content": "<p>yeah, I know, I don't think though that templating engine (and, specifically, compile-time templating engine) makes sense for our use-case</p>",
        "id": 187828474,
        "sender_full_name": "matklad",
        "timestamp": 1581350172
    },
    {
        "content": "<p>Not sure where to ask, but I have a project that has 3 members in the [workspace] section of the top level Cargo file. Now it seems my editor isn't capable to handeling this properly. I'm using nvim+coc with the rust-analyzer plugin. When switching back to the RLS plugin it does work as expected. Is this a current limitation of the rust-analyzer (tested it with the release of a few days ago)?</p>",
        "id": 187832107,
        "sender_full_name": "Sander van Harmelen",
        "timestamp": 1581352370
    },
    {
        "content": "<p>That's roghtly the right place!</p>\n<p>rust-analyzer itself <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/29f5e7eebf606c1929d5a77ad66624cd4f3fcf49/Cargo.toml#L1-L2\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/29f5e7eebf606c1929d5a77ad66624cd4f3fcf49/Cargo.toml#L1-L2\">is a workspace</a>, so that use-case should be supported:.</p>",
        "id": 187832226,
        "sender_full_name": "matklad",
        "timestamp": 1581352454
    },
    {
        "content": "<p>What exactly does not work?</p>",
        "id": 187832245,
        "sender_full_name": "matklad",
        "timestamp": 1581352472
    },
    {
        "content": "<p>Hmm... Ok... Well it just stopped (when I changed my setup to a workspace configuration) giving we diagnostics. But let me revert back and see if I can see anything specific</p>",
        "id": 187832389,
        "sender_full_name": "Sander van Harmelen",
        "timestamp": 1581352571
    },
    {
        "content": "<p>We should provide diagnostics via <code>cargo check</code> in this situation, yeah</p>",
        "id": 187832429,
        "sender_full_name": "matklad",
        "timestamp": 1581352608
    },
    {
        "content": "<p>Yeah, as always it does seem to work now. I did close everything and reboot my mac since yesterday, so maybe that fixed something. Anyway, thanks for the confirmation that it should be supported. Good to know!</p>",
        "id": 187833022,
        "sender_full_name": "Sander van Harmelen",
        "timestamp": 1581353014
    },
    {
        "content": "<p>Glad to hear that it works now :)</p>",
        "id": 187833134,
        "sender_full_name": "matklad",
        "timestamp": 1581353081
    },
    {
        "content": "<p>Heh, easy bug</p>",
        "id": 187833150,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581353093
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span>, today's release is out (after four tries): <a href=\"https://rust-analyzer.github.io/thisweek/2020/02/17/changelog-12.html\" target=\"_blank\" title=\"https://rust-analyzer.github.io/thisweek/2020/02/17/changelog-12.html\">https://rust-analyzer.github.io/thisweek/2020/02/17/changelog-12.html</a></p>",
        "id": 188385120,
        "sender_full_name": "matklad",
        "timestamp": 1581951961
    },
    {
        "content": "<p>I think the highlight of the week is the awesome work <span class=\"user-mention\" data-user-id=\"258149\">@std::Veetaha</span> have been doing on the TypeScript extension. Specifically, it now downloads and upstes the server binary, which means that our release process is more or less finished!</p>\n<p>We probably need to setup nightly builds as well some time, but that's lower priority</p>",
        "id": 188385238,
        "sender_full_name": "matklad",
        "timestamp": 1581952058
    },
    {
        "content": "<p>We've also got some refreshing of the docs: <a href=\"https://rust-analyzer.github.io/manual.html\" target=\"_blank\" title=\"https://rust-analyzer.github.io/manual.html\">https://rust-analyzer.github.io/manual.html</a>.</p>\n<p>It currently includes only installation instructions, we should move feature and asssits docs to this new place as well</p>",
        "id": 188385344,
        "sender_full_name": "matklad",
        "timestamp": 1581952126
    },
    {
        "content": "<p>And we should probably use more recent screenshot of that download notification anyhow)</p>",
        "id": 188385668,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581952352
    },
    {
        "content": "<p>I personally would like to dedicate this week to paying down some technical debt:</p>\n<ul>\n<li>adding proper identity to rowan syntax tree</li>\n<li>refreshing our highlighting infra.  <span class=\"user-mention\" data-user-id=\"203366\">@Jeremy Kolb</span> is re-railing it on the new LSP protocol proposed extension; after that, I'd like to make sure that we make use of ranges and that in general that highlighting code is reasonable, it hasn't been touched in significant ways for a long time</li>\n<li>we get an exploratory PR by <span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> which changes lowering of expressions to be more reliable with respect to source map. I'd love to pick up this work, if possible. </li>\n<li>we have <strong>a lot</strong> of technical debt around handing configuration</li>\n<li>and I also want to move impl collection to crate_def_map</li>\n</ul>",
        "id": 188385686,
        "sender_full_name": "matklad",
        "timestamp": 1581952377
    },
    {
        "content": "<p>And I would also want to raise a discussion on moving semantic errors reporting to ra_parser, though I always end up postponing this...</p>",
        "id": 188385893,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581952524
    },
    {
        "content": "<p>Yep, we at least need to bring that syntax error refactoring PR over the finish line</p>",
        "id": 188385994,
        "sender_full_name": "matklad",
        "timestamp": 1581952568
    },
    {
        "content": "<p>I think I will skip the part of adding tests for semantic validation and I'll just add some tests to that weird (to me) bug with merging errors on reprasing (which our current test don't test in anyway) and then I'll merge it.</p>",
        "id": 188386093,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581952655
    },
    {
        "content": "<p>Paying down tech debt is a really great idea</p>",
        "id": 188386327,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1581952821
    },
    {
        "content": "<p>would implementing the lsp configuration bits help the config design? i feel like some stuff might fall out of that</p>",
        "id": 188386669,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1581953059
    },
    {
        "content": "<p>Probably!</p>",
        "id": 188386678,
        "sender_full_name": "matklad",
        "timestamp": 1581953072
    },
    {
        "content": "<p>I still haven't looked at how LSP configuration should be handled :-(</p>",
        "id": 188386698,
        "sender_full_name": "matklad",
        "timestamp": 1581953087
    },
    {
        "content": "<p>@matklad <a href=\"https://github.com/microsoft/language-server-protocol/issues/676\" target=\"_blank\" title=\"https://github.com/microsoft/language-server-protocol/issues/676\">https://github.com/microsoft/language-server-protocol/issues/676</a> gives some clarification</p>",
        "id": 188386850,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1581953209
    },
    {
        "content": "<p>whereas things sent in the initialize request are more like command line arguments</p>",
        "id": 188386884,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1581953250
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/3139\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/3139\">#3139</a> bump VS Code requirenment to 1.41. </p>\n</blockquote>\n<p>This is 1.42 actually <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span></p>",
        "id": 188387343,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581953617
    },
    {
        "content": "<p>fixed, thanks!</p>",
        "id": 188387423,
        "sender_full_name": "matklad",
        "timestamp": 1581953674
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/3174\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/3174\">#3174</a>, <a href=\"https://github.com/rust-lang/rust/issues/3174\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/3174\">#3174</a> improve debugging settings for VS Code extension.</p>\n</blockquote>\n<p>Here is a typo</p>",
        "id": 188387502,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581953751
    },
    {
        "content": "<p>Is it normal that some of the RA crates take ages to codegen?</p>",
        "id": 188389644,
        "sender_full_name": "Laurențiu",
        "timestamp": 1581955593
    },
    {
        "content": "<p>I guess they depend on generics-heavy code? I'm thinking of <code>ra_ide</code>, <code>ra_assists</code>, <code>ra_lsp_server</code> and <code>ra_ide_db</code>, mostly</p>",
        "id": 188389744,
        "sender_full_name": "Laurențiu",
        "timestamp": 1581955674
    },
    {
        "content": "<p>Yeah, I was just looking at <code>-Z timing</code> earlier today</p>",
        "id": 188389796,
        "sender_full_name": "matklad",
        "timestamp": 1581955701
    },
    {
        "content": "<p><code>ra_syntax</code> builds in 8.6s, while <code>ra_assists</code> takes 74.8s</p>",
        "id": 188389803,
        "sender_full_name": "Laurențiu",
        "timestamp": 1581955719
    },
    {
        "content": "<p>I think that's expected: <code>ra_assists</code> is the first crate to monomorphise the ton of db queries</p>",
        "id": 188389848,
        "sender_full_name": "matklad",
        "timestamp": 1581955772
    },
    {
        "content": "<p>This is how it looks now:</p>\n<p><a href=\"/user_uploads/4715/biBX36ucI0UqAEywhDIWpLGo/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/biBX36ucI0UqAEywhDIWpLGo/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/biBX36ucI0UqAEywhDIWpLGo/pasted_image.png\"></a></div>",
        "id": 188390410,
        "sender_full_name": "Laurențiu",
        "timestamp": 1581956240
    },
    {
        "content": "<p>How did you build that tree?</p>",
        "id": 188390448,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581956273
    },
    {
        "content": "<p><code>cargo build -Z timings --release</code></p>",
        "id": 188390519,
        "sender_full_name": "Laurențiu",
        "timestamp": 1581956322
    },
    {
        "content": "<p>is that still nightly only?</p>",
        "id": 188390557,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1581956351
    },
    {
        "content": "<p>You could argue that <code>ra_cli</code> is not needed when building the LSP server, but..</p>",
        "id": 188390561,
        "sender_full_name": "Laurențiu",
        "timestamp": 1581956355
    },
    {
        "content": "<p>Uh, I don't know. I think every <code>-Z</code> flag is nightly-only.</p>",
        "id": 188390583,
        "sender_full_name": "Laurențiu",
        "timestamp": 1581956379
    },
    {
        "content": "<p>Maybe some generic code (the queries) is instantiated in every one of those crates? Could it be extracted into a separate crate that the others would depend upon instead?</p>",
        "id": 188390720,
        "sender_full_name": "Laurențiu",
        "timestamp": 1581956488
    },
    {
        "content": "<p>Yeah, I think this is actually what might happen <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> </p>\n<p>Without <code>-Zshare-generics</code> with <code>--release</code>, each crate does its own instantiatiosn</p>",
        "id": 188390847,
        "sender_full_name": "matklad",
        "timestamp": 1581956609
    },
    {
        "content": "<p>Let me try that quickly</p>",
        "id": 188390970,
        "sender_full_name": "Laurențiu",
        "timestamp": 1581956679
    },
    {
        "content": "<p>ugh this reminds me of the \"instantiate all possibly C++ templates in one .cpp file\"</p>",
        "id": 188391107,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1581956809
    },
    {
        "content": "<p>Yeah, bit better: <a href=\"/user_uploads/4715/5fSITi39XIJtCzCnwIoQhTUO/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/5fSITi39XIJtCzCnwIoQhTUO/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/5fSITi39XIJtCzCnwIoQhTUO/pasted_image.png\"></a></div>",
        "id": 188391137,
        "sender_full_name": "Laurențiu",
        "timestamp": 1581956844
    },
    {
        "content": "<p>They're more than twice as fast now and the full build is 1m 29s vs. 2m 33s.</p>",
        "id": 188391156,
        "sender_full_name": "Laurențiu",
        "timestamp": 1581956863
    },
    {
        "content": "<p>wow is that from a clean build?</p>",
        "id": 188391239,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1581956920
    },
    {
        "content": "<p>Yeah</p>",
        "id": 188391248,
        "sender_full_name": "Laurențiu",
        "timestamp": 1581956931
    },
    {
        "content": "<p>(Sorry for hijacking the weekly sync thread, I tried to disjoin it, but I don't have permissions or I don't know how to)</p>",
        "id": 188391277,
        "sender_full_name": "Laurențiu",
        "timestamp": 1581956974
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> what was that? Just <code>-Zshare-generics</code>?</p>",
        "id": 188391515,
        "sender_full_name": "matklad",
        "timestamp": 1581957161
    },
    {
        "content": "<p>Are there any noticiable perf difference with <code>analysis-stats</code>?</p>",
        "id": 188391530,
        "sender_full_name": "matklad",
        "timestamp": 1581957178
    },
    {
        "content": "<p>Yeah, it's much slower:</p>\n<div class=\"codehilite\"><pre><span></span>Database loaded, 191 roots, 158.113416ms\nCrates in this dir: 30\nTotal modules found: 386\nTotal declarations: 6345\nTotal functions: 4740\nItem Collection: 9.852548272s, 0b allocated 0b resident\nTotal expressions: 132346\nExpressions of unknown type: 5431 (4%)\nExpressions of partially unknown type: 3953 (2%)\nType mismatches: 266\nInference: 22.71735936s, 0b allocated 0b resident\nTotal: 32.569912625s, 0b allocated 0b resident\n\nDatabase loaded, 191 roots, 1.343697027s\nCrates in this dir: 30\nTotal modules found: 386\nTotal declarations: 6345\nTotal functions: 4740\nItem Collection: 12.167735551s, 0b allocated 0b resident\nTotal expressions: 132346\nExpressions of unknown type: 5423 (4%)\nExpressions of partially unknown type: 3861 (2%)\nType mismatches: 266\nInference: 34.395031049s, 0b allocated 0b resident\nTotal: 46.562773422s, 0b allocated 0b resident\n</pre></div>",
        "id": 188392333,
        "sender_full_name": "Laurențiu",
        "timestamp": 1581957916
    },
    {
        "content": "<p>Best of three runs. With <code>-Z share-generics</code> the first run was the fastest, which explains the larger \"database loaded\" time. The second run was:</p>\n<div class=\"codehilite\"><pre><span></span>Database loaded, 191 roots, 178.380958ms\nCrates in this dir: 30\nTotal modules found: 386\nTotal declarations: 6345\nTotal functions: 4740\nItem Collection: 12.137240132s, 0b allocated 0b resident\nTotal expressions: 132346\nExpressions of unknown type: 5429 (4%)\nExpressions of partially unknown type: 3944 (2%)\nType mismatches: 266\nInference: 34.593159173s, 0b allocated 0b resident\nTotal: 46.730405574s, 0b allocated 0b resident\n</pre></div>",
        "id": 188392451,
        "sender_full_name": "Laurențiu",
        "timestamp": 1581958009
    },
    {
        "content": "<p>Oups, <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> almost missed today's sync up ;)</p>",
        "id": 188934060,
        "sender_full_name": "matklad",
        "timestamp": 1582556854
    },
    {
        "content": "<p>Today's changelog: <a href=\"https://rust-analyzer.github.io/thisweek/2020/02/24/changelog-13.html\" target=\"_blank\" title=\"https://rust-analyzer.github.io/thisweek/2020/02/24/changelog-13.html\">https://rust-analyzer.github.io/thisweek/2020/02/24/changelog-13.html</a></p>",
        "id": 188934079,
        "sender_full_name": "matklad",
        "timestamp": 1582556869
    },
    {
        "content": "<p>It is a mostly quiet release with refactorings and bugfixes</p>",
        "id": 188934153,
        "sender_full_name": "matklad",
        "timestamp": 1582556899
    },
    {
        "content": "<p>Unfortunatelly, I wasn't able to complete many refactorings I've planed for the previous week</p>",
        "id": 188934229,
        "sender_full_name": "matklad",
        "timestamp": 1582556961
    },
    {
        "content": "<p>But the biggest one, <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/3222\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/3222\">https://github.com/rust-analyzer/rust-analyzer/pull/3222</a>, shapes quite nicely so far</p>",
        "id": 188934244,
        "sender_full_name": "matklad",
        "timestamp": 1582556971
    },
    {
        "content": "<p><code>rust-analyzer.lspServerPath</code> was actually <code>raLspServerPath</code>...</p>",
        "id": 188934873,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1582557396
    },
    {
        "content": "<p>Do people really use such  simple assits like remove mut? It's simple to just press <code>Ctrl+Backspace</code> to remove the mut symbol in one go. Such assists (even maybe useful for someone) clutter the assists selection menu. Should we provide feature flags for them?</p>",
        "id": 188935425,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1582557762
    },
    {
        "content": "<p>I use it, because it deals with whitespace. This assist is only available only when the cursor is on the <code>mut</code>, so it dosn't clutters things that much</p>",
        "id": 188935753,
        "sender_full_name": "matklad",
        "timestamp": 1582557980
    },
    {
        "content": "<p>that's the most cool thing about asssist UX: they are only available in context where they make sense</p>",
        "id": 188935773,
        "sender_full_name": "matklad",
        "timestamp": 1582558006
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> if we could reliably detect whether the <code>mut</code> is unused, would you only show the assist in those cases?</p>",
        "id": 188936653,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1582558585
    },
    {
        "content": "<p>The lsp allows for that. I think the next vscode release will allow for displaying assists disabled with a reason why it's not available.</p>",
        "id": 188937014,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1582558894
    },
    {
        "content": "<p>Does it work when you place the caret on variable name symbol too? Otherwise for me this is just a shortcut which is not faster then <code>Ctrl+Backspace</code></p>",
        "id": 188937648,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1582559300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> so I believe this needs to be both a quick fix for an error, but also an asssit/refactoring</p>",
        "id": 188937667,
        "sender_full_name": "matklad",
        "timestamp": 1582559318
    },
    {
        "content": "<p>The original usecase which prompted me was turning <code>fn smth(&amp;mut self)</code> int <code>fn smth(&amp;self)</code></p>",
        "id": 188937711,
        "sender_full_name": "matklad",
        "timestamp": 1582559351
    },
    {
        "content": "<blockquote>\n<p>Otherwise for me this is just a shortcut which is not faster then Ctrl+Backspace</p>\n</blockquote>\n<p>It is faster for me, because I don't have to fix up the whitespace</p>",
        "id": 188937740,
        "sender_full_name": "matklad",
        "timestamp": 1582559373
    },
    {
        "content": "<p>I press <code>Ctrl+Backspace</code> two times or <code>Ctrl+Backspace .. Ctrl+Delete</code>. For the assits its not faster, you press <code>Alt+Enter</code> and go through the list of assits to find <code>remove mut</code></p>",
        "id": 188937872,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1582559437
    },
    {
        "content": "<p>Well I won't argue if it's faster for you. You said that not all users want all features, that's why we implement feature flags</p>",
        "id": 188938059,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1582559556
    },
    {
        "content": "<p>Hi, seems the vscode marketplace plugin is not updated since 24 Feb. Should we update it?</p>",
        "id": 189425016,
        "sender_full_name": "ice1000",
        "timestamp": 1583050687
    },
    {
        "content": "<p>Updates are done weekly, on Monday, around 1600 CET</p>",
        "id": 189426707,
        "sender_full_name": "matklad",
        "timestamp": 1583054518
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> there's some annoying problems with release today, it'll be slightly late :(</p>",
        "id": 189498692,
        "sender_full_name": "matklad",
        "timestamp": 1583161369
    },
    {
        "content": "<p>What's wrong?</p>",
        "id": 189498747,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1583161393
    },
    {
        "content": "<p>Oh, I see this is about the semantic highlighting</p>",
        "id": 189498930,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1583161479
    },
    {
        "content": "<p>Many things are wrong:</p>\n<ul>\n<li>you can't just comment out <code>propsedApi: \"true\"</code> in package.json, because json does not have comments</li>\n<li>uploading artifact fails with some errors</li>\n<li>and I think some other issue I've forgout about</li>\n</ul>",
        "id": 189499038,
        "sender_full_name": "matklad",
        "timestamp": 1583161546
    },
    {
        "content": "<p>I'm surprised that can't be commented out. I thought they supported comments</p>",
        "id": 189499299,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1583161687
    },
    {
        "content": "<p>VS does, npm does not</p>",
        "id": 189499331,
        "sender_full_name": "matklad",
        "timestamp": 1583161709
    },
    {
        "content": "<p>Maybe we should not hurry? The world is not going nowhere without the release at 5 pm</p>",
        "id": 189499333,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1583161709
    },
    {
        "content": "<p>Making releases on time is much easier for me than making releases \"when it's ready\"</p>",
        "id": 189499382,
        "sender_full_name": "matklad",
        "timestamp": 1583161743
    },
    {
        "content": "<p>anyway, that probably doesn't fir the weekly sync-up discussion</p>",
        "id": 189499414,
        "sender_full_name": "matklad",
        "timestamp": 1583161764
    },
    {
        "content": "<p>I mean, let's just give it a good thought to tackle the deployment bugs and not put hotfixes to release branch</p>",
        "id": 189499493,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1583161804
    },
    {
        "content": "<p>So, the two biggest highlights of this week are:</p>\n<ul>\n<li>new implementation of syntax highlighting! I am super excited to finally see this in VS Code, as this is the feature which exercise IDEs best (you need to do everything to highlight anything). I also hope that it'll get to other editors soon enought. </li>\n<li>the new <code>hir::Semantics</code> API for conveniently bridging syntax-based IDE world and semantics-based hir world</li>\n</ul>",
        "id": 189499722,
        "sender_full_name": "matklad",
        "timestamp": 1583161950
    },
    {
        "content": "<blockquote>\n<p>I mean, let's just give it a good thought to tackle the deployment bugs and not put hotfixes to release branch</p>\n</blockquote>\n<p>For me it's easier to get the releas out of the door and then fix stuff in between releases. I am also not feeling too comfortable arguing about philosophical issues regarding the release process :)</p>",
        "id": 189499953,
        "sender_full_name": "matklad",
        "timestamp": 1583162097
    },
    {
        "content": "<p>But isn't the release already out?</p>",
        "id": 189500380,
        "sender_full_name": "Laurențiu",
        "timestamp": 1583162308
    },
    {
        "content": "<p>Yup, it's out now! It just required some manual pushing to get to this state :D</p>",
        "id": 189500450,
        "sender_full_name": "matklad",
        "timestamp": 1583162344
    },
    {
        "content": "<p>Is hir::Semantics the implementation of SyntaxNode global identity?</p>",
        "id": 189500466,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1583162354
    },
    {
        "content": "<p>Ah :D</p>",
        "id": 189500467,
        "sender_full_name": "Laurențiu",
        "timestamp": 1583162354
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"258149\">@std::Veetaha</span> yeah, sort of. I really should blog about this pattern, as it is quite unusual, and is used in both Roslyn and Kotlin</p>",
        "id": 189500577,
        "sender_full_name": "matklad",
        "timestamp": 1583162411
    },
    {
        "content": "<p>Hmm, that didn't take so much to rewrite as you initially supposed, I guess</p>",
        "id": 189500685,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1583162501
    },
    {
        "content": "<p>@matklad you forgot to mention the change log :)</p>\n<p><a href=\"https://rust-analyzer.github.io/thisweek/2020/03/02/changelog-14.html\" target=\"_blank\" title=\"https://rust-analyzer.github.io/thisweek/2020/03/02/changelog-14.html\">https://rust-analyzer.github.io/thisweek/2020/03/02/changelog-14.html</a></p>",
        "id": 189501195,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1583162802
    },
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> time for another weekly sync up</p>",
        "id": 190071625,
        "sender_full_name": "matklad",
        "timestamp": 1583762656
    },
    {
        "content": "<p>(which might be an hour earlier, depending on DST in your timezone)</p>",
        "id": 190071642,
        "sender_full_name": "matklad",
        "timestamp": 1583762668
    },
    {
        "content": "<p>I was just wondering</p>",
        "id": 190071653,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1583762679
    },
    {
        "content": "<p>Today's release: <a href=\"https://rust-analyzer.github.io/thisweek/2020/03/09/changelog-15.html\" target=\"_blank\" title=\"https://rust-analyzer.github.io/thisweek/2020/03/09/changelog-15.html\">https://rust-analyzer.github.io/thisweek/2020/03/09/changelog-15.html</a></p>",
        "id": 190071657,
        "sender_full_name": "matklad",
        "timestamp": 1583762685
    },
    {
        "content": "<p>Thanks to work by <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> and <span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span>  (and many others, really) we now do code completion inside macro calls. This feels like a milestone to me :D</p>",
        "id": 190071751,
        "sender_full_name": "matklad",
        "timestamp": 1583762743
    },
    {
        "content": "<p>very cool indeed</p>",
        "id": 190071885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583762805
    },
    {
        "content": "<p>Another curios thing is that we've <strong>disabled</strong> caching of Chalk, which improved perf and memory usage</p>",
        "id": 190071928,
        "sender_full_name": "matklad",
        "timestamp": 1583762825
    },
    {
        "content": "<p>I've also mostly finished the most pressing cleanups/refactorings, and am wondering what should I personally focus on next</p>",
        "id": 190072051,
        "sender_full_name": "matklad",
        "timestamp": 1583762885
    },
    {
        "content": "<p>Do you have a kind of \"short list\"?</p>",
        "id": 190072141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583762947
    },
    {
        "content": "<p>Here are some things I want to do:</p>\n<ul>\n<li><a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/3485\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/3485\">https://github.com/rust-analyzer/rust-analyzer/issues/3485</a> -- another IR to work-around the problem that LRU doesn't really work that great for from-scratch analysis </li>\n<li>adding support for reference values in sasal (&amp;T instaead of Arc&lt;T&gt;)</li>\n<li>making rust-analyzer less generic to improve compile times</li>\n<li>refactoring the way we handle configuration, it is confusing to users</li>\n<li>starting to actually write some code for parser library-ification</li>\n</ul>",
        "id": 190072282,
        "sender_full_name": "matklad",
        "timestamp": 1583763020
    },
    {
        "content": "<p>I'm skimming that 1st issue</p>",
        "id": 190072361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583763084
    },
    {
        "content": "<p>I think I'd love to prioritize improving compile times (as it slows down everyone working on rust-analyzer), but the problem here is that I don't have any specific ideas here, except \"make salsa database a concrete type\"</p>",
        "id": 190072540,
        "sender_full_name": "matklad",
        "timestamp": 1583763191
    },
    {
        "content": "<p>I'm also wondering about -- more generally -- the idea of replacing RLS with rust-analyzer and what that really takes. We've kind of stalled out on that (sorry), but it seems like we're in a sort of weird spot where it's clear that rust-analyzer has the momentum but we've not talked about the overall transition story.</p>",
        "id": 190072598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583763234
    },
    {
        "content": "<p>How much have you tried profiling compilation?</p>",
        "id": 190072651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583763248
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> for the context, we've recently refactored rust-analyzer's IDE laye into <code>ra_ide_db</code>, which defines a concrete salsa database, and <code>ra_assist</code>, <code>ra_ide</code> crates, whcih provides features using that concrete DB</p>",
        "id": 190072668,
        "sender_full_name": "matklad",
        "timestamp": 1583763254
    },
    {
        "content": "<p>The problem with that is that now, I think, all three crates monomorphise type inference for the same types</p>",
        "id": 190072716,
        "sender_full_name": "matklad",
        "timestamp": 1583763283
    },
    {
        "content": "<p>(in `--release)</p>",
        "id": 190072723,
        "sender_full_name": "matklad",
        "timestamp": 1583763288
    },
    {
        "content": "<blockquote>\n<p>How much have you tried profiling compilation?</p>\n</blockquote>\n<p>I've done <code>cargo -Z timings</code>, and it shows that each of the three crates I've mentioned above takes huge time to compile</p>",
        "id": 190072820,
        "sender_full_name": "matklad",
        "timestamp": 1583763344
    },
    {
        "content": "<p>TBH, I don't feel the compile times are a problem for me personally right now. Check is fast enough, I usually run single tests while developing, then all the tests for the crate, and a full <code>cargo test</code> once the PR is ready</p>",
        "id": 190072836,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1583763353
    },
    {
        "content": "<p>I build in release pretty often, and it's easy 3-ish minutes after modifications to non-leaf crates.</p>",
        "id": 190072938,
        "sender_full_name": "matklad",
        "timestamp": 1583763387
    },
    {
        "content": "<p>I agree that it's not <strong>too</strong> bad at the moment, but it also won't get better unless we make it.</p>",
        "id": 190072970,
        "sender_full_name": "matklad",
        "timestamp": 1583763410
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/190072820\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/190072820\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>How much have you tried profiling compilation?</p>\n</blockquote>\n<p>I've done <code>cargo -Z timings</code>, and it shows that each of the three crates I've mentioned above takes huge time to compile</p>\n</blockquote>\n<p>I was thinking more of the self-profile</p>",
        "id": 190073249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583763568
    },
    {
        "content": "<p>I believe it should be possible to drill in and get more details</p>",
        "id": 190073273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583763584
    },
    {
        "content": "<p>and validate e.g. the hypothesis</p>",
        "id": 190073280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583763587
    },
    {
        "content": "<p>that it is due to things being monomorphized multiple times</p>",
        "id": 190073302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583763594
    },
    {
        "content": "<p>if it is, I'm not sure what I'd recommend but I wonder if we can come up with some kind of strategy that makes that less problematic</p>",
        "id": 190073364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583763609
    },
    {
        "content": "<p>Yeah, it's a very good call to actually validate what's happening</p>",
        "id": 190073398,
        "sender_full_name": "matklad",
        "timestamp": 1583763633
    },
    {
        "content": "<p>side note that feel like -- perhaps because of my emacs setup -- I'm not experienced <em>any</em> of these improvements</p>",
        "id": 190073416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583763642
    },
    {
        "content": "<p>when I use rust-analyzer on rustc, it's (honestly) a big step back from CTAGS in terms of successful jump-to-def, for example</p>",
        "id": 190073454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583763666
    },
    {
        "content": "<p>part of this is that I can't jump-to-def from compilation errors and a few other places, because rust-analyzer isn't \"hooked in\" there, I could probably fix this</p>",
        "id": 190073493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583763688
    },
    {
        "content": "<p>I'm wondering ifmy setup is wrong, but I'm also thinking that I will try to change my dev workflow for things like chalk to use vscode</p>",
        "id": 190073524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583763703
    },
    {
        "content": "<p>because I feel like I have less of a \"visceral\" feel for what the problems are</p>",
        "id": 190073542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583763713
    },
    {
        "content": "<p>(or lack of problems)</p>",
        "id": 190073549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583763718
    },
    {
        "content": "<p>though it also reminds me of <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>'s thoughts about documenting the \"best practices\" for setting up a rustc rust-analyzer experience</p>",
        "id": 190073646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583763748
    },
    {
        "content": "<p>(in various editors)</p>",
        "id": 190073662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583763757
    },
    {
        "content": "<p>Yeah, for goto def, we literally <em>fall-back</em> to ctags-like index, so it shouldn't be that bad</p>",
        "id": 190073728,
        "sender_full_name": "matklad",
        "timestamp": 1583763798
    },
    {
        "content": "<p>I'm also curious <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> whether you see any value to trying to finish off that RFC we were working on. Specifically, I think the RFC would be about the plan to (1) embrace rust-analyzer as the  editor of choice; (2) discuss how we will transition from RLS to rust-analyzer (e.g., rustup integration); (3) ratify perhaps the idea of <em>not</em> using save-analysis (and hence losing precise find-all-usages for the time being). At least (3) seemed to be the way you were leaning when we last discussed it and I think that I've come around to it.</p>",
        "id": 190073864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583763853
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/190073728\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/190073728\">said</a>:</p>\n<blockquote>\n<p>Yeah, for goto def, we literally <em>fall-back</em> to ctags-like index, so it shouldn't be that bad</p>\n</blockquote>\n<p>I'll try to take more careful note of where it doesn't work</p>",
        "id": 190073919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583763892
    },
    {
        "content": "<p>If you are interested in trying to finish off the RFC, I think we could try to schedule some block of time to work on it. If you think it's not a good use of time, I'd like to briefly hear why =)</p>",
        "id": 190074002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583763939
    },
    {
        "content": "<p>though I can imagine reasons</p>",
        "id": 190074009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583763945
    },
    {
        "content": "<p>It might also make sense to chat directly with <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> about emacs support. I've honestly haven't tried anything besides goto def</p>",
        "id": 190074010,
        "sender_full_name": "matklad",
        "timestamp": 1583763946
    },
    {
        "content": "<p>I do think it's a good idea to finish the RFC, for the purpose of informing community.</p>",
        "id": 190074085,
        "sender_full_name": "matklad",
        "timestamp": 1583763970
    },
    {
        "content": "<p>I'd like to put some time into that</p>",
        "id": 190074139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583763996
    },
    {
        "content": "<p>I am not sure the RFC process will help us decide on any open questions, but it might</p>",
        "id": 190074164,
        "sender_full_name": "matklad",
        "timestamp": 1583764011
    },
    {
        "content": "<p>I'm curious if you think it'd be better for the two of us to e.g. schedule a 2h block or something to try and finish it off, or if it'd be better to work a bit independently</p>",
        "id": 190074194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583764025
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/190074164\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/190074164\">said</a>:</p>\n<blockquote>\n<p>I am not sure the RFC process will help us decide on any open questions, but it might</p>\n</blockquote>\n<p>maybe not the RFC process itself BUT</p>",
        "id": 190074221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583764032
    },
    {
        "content": "<p>I think the process of writing out the questions</p>",
        "id": 190074227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583764039
    },
    {
        "content": "<p>and perhaps touching base with others on tools team etc</p>",
        "id": 190074247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583764049
    },
    {
        "content": "<p>very well could :)</p>",
        "id": 190074254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583764053
    },
    {
        "content": "<p>that might hapen in RFC thread but might also happen before</p>",
        "id": 190074265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583764059
    },
    {
        "content": "<blockquote>\n<p>e.g. schedule a 2h block or something to try and finish it off,</p>\n</blockquote>\n<p>Yeah, I think some sync time would be helpful, especially if we literally agree to just publish the thing after two hours end :)</p>",
        "id": 190074380,
        "sender_full_name": "matklad",
        "timestamp": 1583764101
    },
    {
        "content": "<p>Ie, it is helpful to both once again survery the ground (we've sort-of changed our mind last time, we might do it once again) and to put a deadline</p>",
        "id": 190074477,
        "sender_full_name": "matklad",
        "timestamp": 1583764144
    },
    {
        "content": "<p>OK, let's block out some time.</p>",
        "id": 190074730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583764265
    },
    {
        "content": "<p>I'm looking at my calendar :)</p>",
        "id": 190074759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583764278
    },
    {
        "content": "<p>tomorrow starting at the same time as this sync could work</p>",
        "id": 190075141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583764445
    },
    {
        "content": "<p>Works for me!</p>",
        "id": 190075219,
        "sender_full_name": "matklad",
        "timestamp": 1583764490
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/190073249\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/190073249\">said</a>:</p>\n<div class=\"codehilite\"><pre><span></span>I was thinking more of the self-profile\n</pre></div>\n\n\n<p>I tried that, but I'm not sure how to interpret the output. It looks like ThinLTO takes about half of the compile time (40s) of that/those crates and it has poor parallelism, but I might be looking at it the wrong way.</p>",
        "id": 190117077,
        "sender_full_name": "Laurențiu",
        "timestamp": 1583787603
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> it's a sync-up time again</p>",
        "id": 190725648,
        "sender_full_name": "matklad",
        "timestamp": 1584367326
    },
    {
        "content": "<p>Today's release notes: <a href=\"https://rust-analyzer.github.io/thisweek/2020/03/16/changelog-16.html\" target=\"_blank\" title=\"https://rust-analyzer.github.io/thisweek/2020/03/16/changelog-16.html\">https://rust-analyzer.github.io/thisweek/2020/03/16/changelog-16.html</a></p>",
        "id": 190725722,
        "sender_full_name": "matklad",
        "timestamp": 1584367362
    },
    {
        "content": "<p>There is a bunch of exciting stuff happening. So much, in fact, that I am not sure I am on top of everything (had a busy week last week)</p>",
        "id": 190725780,
        "sender_full_name": "matklad",
        "timestamp": 1584367392
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> and <span class=\"user-mention\" data-user-id=\"212936\">@Emil Lauridsen</span> are doing amazing work at supporting <code>include!(concat!(env!))</code> macro.</p>\n<p><span class=\"user-mention\" data-user-id=\"258149\">@std::Veetaha</span> implemented nightly updates</p>\n<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> did some exciting work with making macro by example expansion resilient to errors (which helps completion)</p>\n<p>And I've investigated compile times a bit, with moderate success.</p>",
        "id": 190726175,
        "sender_full_name": "matklad",
        "timestamp": 1584367596
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and me also worked a bit on the RFC about further IDE support</p>",
        "id": 190726254,
        "sender_full_name": "matklad",
        "timestamp": 1584367645
    },
    {
        "content": "<p>FYI with vscode 1.43.1 it looks like you'll have to be on a default theme (or opt into it in a custom theme) to get semantic highlighting until they open it up: <a href=\"https://github.com/microsoft/vscode/pull/92737\" target=\"_blank\" title=\"https://github.com/microsoft/vscode/pull/92737\">https://github.com/microsoft/vscode/pull/92737</a></p>",
        "id": 190729361,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1584369076
    },
    {
        "content": "<p>Yeah, recently switched to <code>vscode-insiders</code> to test that. This is the killer feature for me, big thanks <span class=\"user-mention\" data-user-id=\"203366\">@Jeremy Kolb</span> !</p>",
        "id": 190730759,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584369594
    },
    {
        "content": "<p>I also started work on resurrecting a recursive solver for Chalk, as a possible solution to the associated types problem, before getting side-tracked with the macros thing <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> so I hope to finish the macros PR soon and get back to that</p>",
        "id": 190731182,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1584369747
    },
    {
        "content": "<p>I am working on a proc-macro support POC (custom-derive) , I think I will finish in these 2 weeks :)</p>",
        "id": 190731645,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1584369958
    },
    {
        "content": "<p>Also a note about nightlys. There is a slight problem that the weekly release is published from the fresh master branch, but the current nightly release doesn't contain last changes. This means that by switching to the nightly channel right now you are going to downgrade to the version without nightlys support ;D</p>",
        "id": 190732064,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584370092
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> ! It's time for another sync-up</p>",
        "id": 191476694,
        "sender_full_name": "matklad",
        "timestamp": 1584972160
    },
    {
        "content": "<p>The release is still in progress: have to do some last-minute yaml fixes</p>",
        "id": 191476752,
        "sender_full_name": "matklad",
        "timestamp": 1584972192
    },
    {
        "content": "<p>The three biggest things this week, I think, are:</p>\n<ul>\n<li>\"finished\" support for <code>include!(concat!(env!(OUT_DIR)))</code>, by relying on <code>cargo check</code> to learn about <code>OUT_DIR</code></li>\n<li>Improvements to macro expansion, which now recovers from errors, which helps completion</li>\n<li>we've switched to using <code>&amp;dyn DB</code> internally, in order to reduce compile times</li>\n</ul>",
        "id": 191477016,
        "sender_full_name": "matklad",
        "timestamp": 1584972319
    },
    {
        "content": "<p>Release failed :c</p>",
        "id": 191477068,
        "sender_full_name": "matklad",
        "timestamp": 1584972343
    },
    {
        "content": "<p>haha, classic</p>",
        "id": 191477203,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584972396
    },
    {
        "content": "<p>Was changing to <code>&amp;dyn DB</code> difficult, <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> ?</p>",
        "id": 191477378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584972467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> not really.</p>",
        "id": 191477635,
        "sender_full_name": "matklad",
        "timestamp": 1584972572
    },
    {
        "content": "<p>We were unable to do that originally because we had some cleverness around the <code>requires</code></p>",
        "id": 191477689,
        "sender_full_name": "matklad",
        "timestamp": 1584972597
    },
    {
        "content": "<p>But, when we split our hir into many crates early this year, we removed <code>requires</code> in favor of simpler design</p>",
        "id": 191477784,
        "sender_full_name": "matklad",
        "timestamp": 1584972626
    },
    {
        "content": "<p>So now switch was possible, albeit it required some explicit upcasting of trait objetcs</p>",
        "id": 191477844,
        "sender_full_name": "matklad",
        "timestamp": 1584972659
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/aaa6961aa6d19b405dd2e837a09ac96ed6ace995/crates/ra_hir_ty/src/db.rs#L23\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/aaa6961aa6d19b405dd2e837a09ac96ed6ace995/crates/ra_hir_ty/src/db.rs#L23\">https://github.com/rust-analyzer/rust-analyzer/blob/aaa6961aa6d19b405dd2e837a09ac96ed6ace995/crates/ra_hir_ty/src/db.rs#L23</a></p>",
        "id": 191477882,
        "sender_full_name": "matklad",
        "timestamp": 1584972682
    },
    {
        "content": "<p>(<code>Upcast&lt;dyn DefDB&gt;</code> is the upcasing bit)</p>",
        "id": 191477915,
        "sender_full_name": "matklad",
        "timestamp": 1584972702
    },
    {
        "content": "<p>interesting</p>",
        "id": 191478275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584972864
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> the (not super rigorously measured) effects of the switch are:</p>\n<ul>\n<li>33% faster release build</li>\n<li>slightly worse/same perf</li>\n<li>no changes for debug build</li>\n<li>slightly smaller binary</li>\n</ul>",
        "id": 191478295,
        "sender_full_name": "matklad",
        "timestamp": 1584972872
    },
    {
        "content": "<p>really interesting</p>",
        "id": 191478341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584972902
    },
    {
        "content": "<p>33% faster is a pretty big deal</p>",
        "id": 191478357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584972910
    },
    {
        "content": "<p>Ideally, there could be a compiler option not to monomorphize stuff)</p>",
        "id": 191478496,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584972979
    },
    {
        "content": "<p>yup. cargo timing measures are here: <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/1987#issuecomment-598663651\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/1987#issuecomment-598663651\">https://github.com/rust-analyzer/rust-analyzer/issues/1987#issuecomment-598663651</a></p>",
        "id": 191478502,
        "sender_full_name": "matklad",
        "timestamp": 1584972986
    },
    {
        "content": "<p>belated changelog: <a href=\"https://rust-analyzer.github.io/thisweek/2020/03/23/changelog-17.html\" target=\"_blank\" title=\"https://rust-analyzer.github.io/thisweek/2020/03/23/changelog-17.html\">https://rust-analyzer.github.io/thisweek/2020/03/23/changelog-17.html</a></p>",
        "id": 191481993,
        "sender_full_name": "matklad",
        "timestamp": 1584974355
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>, what do you think about the proposal from <code>bjorn</code> to use <a href=\"https://github.com/rust-lang/rust/blob/f4c675c476c18b1a11041193f2f59d695b126bc8/src/tools/compiletest/src/read2.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/f4c675c476c18b1a11041193f2f59d695b126bc8/src/tools/compiletest/src/read2.rs\">this bit of code from rustc</a>. Its obvious that the <code>read2()</code> function should be extracted into a reusable module. How do you see doing it?</p>",
        "id": 191483162,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584974838
    },
    {
        "content": "<p>I think, <em>ideally</em>, this should be somehow exposed on <code>std::process::Command</code> directly, as that's needed for implementation of <code>.output</code> anyway. For the time being, I'm fine with either copy-pasting that bit of code from cargo, or publishing a read2 micro crate. </p>\n<p>I'd also love to be able to completely bypass the need to read stdout and stderr in lockstep, but I don't know of that's possible</p>",
        "id": 191484448,
        "sender_full_name": "matklad",
        "timestamp": 1584975345
    },
    {
        "content": "<p>See also <a href=\"https://github.com/joshtriplett/io-mux\" target=\"_blank\" title=\"https://github.com/joshtriplett/io-mux\">https://github.com/joshtriplett/io-mux</a>, which might be a bit more reliable wrt. ordering (but is Linux-only)</p>",
        "id": 191485152,
        "sender_full_name": "Laurențiu",
        "timestamp": 1584975624
    },
    {
        "content": "<p>ohh, the API is kindof what we want, but the impl is overkill</p>",
        "id": 191485355,
        "sender_full_name": "matklad",
        "timestamp": 1584975709
    },
    {
        "content": "<p>It's not so bad, except for the Linux-only part. That was a <a href=\"https://github.com/joshtriplett/io-mux/issues/7\" target=\"_blank\" title=\"https://github.com/joshtriplett/io-mux/issues/7\">fun one</a> to figure out.</p>",
        "id": 191485449,
        "sender_full_name": "Laurențiu",
        "timestamp": 1584975745
    },
    {
        "content": "<blockquote>\n<p>I'd also love to be able to completely bypass the need to read stdout and stderr in lockstep, but I don't know of that's possible</p>\n</blockquote>\n<p>What's bad in this <code>read2()</code> do you see?</p>",
        "id": 191487470,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584976497
    },
    {
        "content": "<p>It's very hard to read like this while preserving the ordering. The code there reads from both pipes, but with no ordering guarantees.</p>",
        "id": 191488370,
        "sender_full_name": "Laurențiu",
        "timestamp": 1584976816
    },
    {
        "content": "<p>(note, due to DST shift, the sync-up starts in an hour)</p>",
        "id": 192251196,
        "sender_full_name": "matklad",
        "timestamp": 1585573143
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> hey, it's time for another meeting!</p>",
        "id": 192259387,
        "sender_full_name": "matklad",
        "timestamp": 1585576874
    },
    {
        "content": "<p>Current changelog: <a href=\"https://rust-analyzer.github.io/thisweek/2020/03/30/changelog-18.html\" title=\"https://rust-analyzer.github.io/thisweek/2020/03/30/changelog-18.html\">https://rust-analyzer.github.io/thisweek/2020/03/30/changelog-18.html</a></p>",
        "id": 192259400,
        "sender_full_name": "matklad",
        "timestamp": 1585576882
    },
    {
        "content": "<p>Some highlights:</p>\n<ul>\n<li>this release \"just worked\", without me pushing last-minute changes to <code>release.yml</code></li>\n<li><span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> did a lot of preliminary work for integrating proc macros</li>\n<li>(not big, but important heads up): I've added an <code>stdx</code> crate for dumping misc utilities. Currently, it deals with formatting. I've wanted to move <code>jthread</code> support to it as well, but it is required in the VFS and needs to be a separate crate for this reason.</li>\n<li>I am hacking on the new IR which, in theory, should improve performance by making sure that we parse code only once in a typical case</li>\n</ul>",
        "id": 192259890,
        "sender_full_name": "matklad",
        "timestamp": 1585577061
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> hows the recursive solver going? :)</p>",
        "id": 192259982,
        "sender_full_name": "matklad",
        "timestamp": 1585577112
    },
    {
        "content": "<p>it's making some kind of progress, there's still a bunch of test failures in Chalk, and performance isn't great, but it does seem to fix <a href=\"https://github.com/rust-lang-nursery/chalk/issues/234\" title=\"https://github.com/rust-lang-nursery/chalk/issues/234\">chalk#234</a> right now...</p>",
        "id": 192260443,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1585577308
    },
    {
        "content": "<p>this is becoming ridiculously awesome</p>",
        "id": 192261069,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1585577590
    },
    {
        "content": "<p>Minor note that we are beginning another chalk sprint</p>",
        "id": 192261098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585577618
    },
    {
        "content": "<p>we posted a <a href=\"https://blog.rust-lang.org/inside-rust/2020/03/28/traits-sprint-1.html\" title=\"https://blog.rust-lang.org/inside-rust/2020/03/28/traits-sprint-1.html\">summary</a> of last sprint and our current thoughts around goals, but I guess this is a chance to ask <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> if there are particular things that would help with rust-analyzer -- it'd be good for you and I to sync up some more on the recursive solver, and I guess the other thing would be to put some energy into salsa in terms of extsending the model to support caching?</p>",
        "id": 192261248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585577689
    },
    {
        "content": "<p>(I am reminded I've been hiding from the salsa zulip :eep:)</p>",
        "id": 192261279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585577710
    },
    {
        "content": "<p>I wish :eep: was an emoji</p>",
        "id": 192261299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585577717
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/192261248\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/192261248\">said</a>:</p>\n<blockquote>\n<p>it'd be good for you and I to sync up some more on the recursive solver, and I guess the other thing would be to put some energy into salsa in terms of extsending the model to support caching?</p>\n</blockquote>\n<p>that pretty much, I think <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 192261372,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1585577760
    },
    {
        "content": "<p>Yeah, at some point soon (tm), I'd like to maybe rethink salsa's abstractions...</p>",
        "id": 192261485,
        "sender_full_name": "matklad",
        "timestamp": 1585577786
    },
    {
        "content": "<p>Specifically, one think I stumble on repeatedly is that we store tree-shaped data in salsa</p>",
        "id": 192261535,
        "sender_full_name": "matklad",
        "timestamp": 1585577814
    },
    {
        "content": "<p>Say more?</p>",
        "id": 192261573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585577834
    },
    {
        "content": "<p>(but yes I'm open to revisiting or at least repackaging the core ideas...)</p>",
        "id": 192261611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585577853
    },
    {
        "content": "<p>So, our core <code>crate_def_map</code> query, which takes a crate id as an input, returns a tree of module</p>",
        "id": 192261637,
        "sender_full_name": "matklad",
        "timestamp": 1585577866
    },
    {
        "content": "<p>btw <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> I was hoping that we could finish that RFC this week. I also talked some to <span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span> about it.</p>",
        "id": 192261666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585577879
    },
    {
        "content": "<p>or a lower-level query which takes a file id, and returns a tree of items</p>",
        "id": 192261667,
        "sender_full_name": "matklad",
        "timestamp": 1585577881
    },
    {
        "content": "<p>So, the layout in memory is a bunch of small trees</p>",
        "id": 192261730,
        "sender_full_name": "matklad",
        "timestamp": 1585577898
    },
    {
        "content": "<p>I'd love to see the layout as a bunch of arrays instead</p>",
        "id": 192261759,
        "sender_full_name": "matklad",
        "timestamp": 1585577914
    },
    {
        "content": "<p>Ie, all modules from all lcrates are stored in a single vec.</p>",
        "id": 192261777,
        "sender_full_name": "matklad",
        "timestamp": 1585577928
    },
    {
        "content": "<p>ahem, SQLite <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 192261847,
        "sender_full_name": "Laurențiu",
        "timestamp": 1585577966
    },
    {
        "content": "<p>/me runs away and hides</p>",
        "id": 192261857,
        "sender_full_name": "Laurențiu",
        "timestamp": 1585577970
    },
    {
        "content": "<p>well, yes, persistence is obviously another <strong>huge</strong> missing wall in the whole rust-analyzer castle....</p>",
        "id": 192261983,
        "sender_full_name": "matklad",
        "timestamp": 1585578025
    },
    {
        "content": "<p>so, you could \"easily enough\" represent those trees as vectors</p>",
        "id": 192262040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585578054
    },
    {
        "content": "<p>then you have a \"bunch of vectors\"</p>",
        "id": 192262057,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585578061
    },
    {
        "content": "<blockquote>\n<p>I was hoping that we could finish that RFC this week</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> are there any specific action items for me in this regard</p>",
        "id": 192262065,
        "sender_full_name": "matklad",
        "timestamp": 1585578066
    },
    {
        "content": "<p>(this is what we did in Lark for things like fn bodies)</p>",
        "id": 192262075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585578070
    },
    {
        "content": "<blockquote>\n<p>so, you could \"easily enough\" represent those trees as vectors</p>\n</blockquote>\n<p>yes, that's what I actually do</p>",
        "id": 192262101,
        "sender_full_name": "matklad",
        "timestamp": 1585578080
    },
    {
        "content": "<p>is that something you've considered and rejected? not satisfying enough..?</p>",
        "id": 192262112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585578085
    },
    {
        "content": "<p>ok</p>",
        "id": 192262115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585578086
    },
    {
        "content": "<p>this is purely a matter of performance?</p>",
        "id": 192262131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585578094
    },
    {
        "content": "<p>But, still, a bunch of vectors seems somehow <em>wrong</em></p>",
        "id": 192262138,
        "sender_full_name": "matklad",
        "timestamp": 1585578098
    },
    {
        "content": "<p>that's not obvious to me :)</p>",
        "id": 192262150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585578108
    },
    {
        "content": "<p>but ok</p>",
        "id": 192262154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585578110
    },
    {
        "content": "<p>I'd like to understand better what seems to be missing</p>",
        "id": 192262210,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585578125
    },
    {
        "content": "<p>One specific problem is that you'd then need to add explicit projections on top</p>",
        "id": 192262230,
        "sender_full_name": "matklad",
        "timestamp": 1585578139
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/192262065\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/192262065\">said</a>:</p>\n<blockquote>\n<p>are there any specific action items for me in this regard</p>\n</blockquote>\n<p>maybe not, I think we may be just basically \"ready\" to post</p>",
        "id": 192262238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585578145
    },
    {
        "content": "<blockquote>\n<p>One specific problem is that you'd then need to add explicit projections on top</p>\n</blockquote>\n<p>I was thinking about a cool (but unsure if sound) scheme with reverse, push queries. </p>\n<p>Basically, you run \"lower_file\" query, and that query calls a bunch of <code>set_</code> queries to create children structs, function, modules</p>",
        "id": 192262372,
        "sender_full_name": "matklad",
        "timestamp": 1585578224
    },
    {
        "content": "<p>so, eg, a struct remebers that it was created as a side-effect of lowering file with specific ID.</p>",
        "id": 192262472,
        "sender_full_name": "matklad",
        "timestamp": 1585578253
    },
    {
        "content": "<p>Reminds me a bit of adapton. It sounds plausible but I'm not sure yet what those set queries would do</p>",
        "id": 192268215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585580484
    },
    {
        "content": "<p>I still tend to favor a more uniform, pull-based setup, I guess one question I have is: is this primarily an ergonomics concern? An efficiency one?</p>",
        "id": 192268290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585580510
    },
    {
        "content": "<p>Anyway, maybe we should split this conversation out to somewhere else I guess</p>",
        "id": 192268319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585580518
    },
    {
        "content": "<p>/me has to run right now anyway, bbl</p>",
        "id": 192268371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585580523
    },
    {
        "content": "<p>I guess it is primary ergonomics. Definining arenas <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/3720/files#diff-b68642e4e4f3f675f63e95bfbd57b885R22-R38\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/3720/files#diff-b68642e4e4f3f675f63e95bfbd57b885R22-R38\">like this</a> seems like a busy-work. I'd love to be able to code and think in terms of entities, without defining storage explicitely.</p>",
        "id": 192268694,
        "sender_full_name": "matklad",
        "timestamp": 1585580656
    },
    {
        "content": "<p>Hello <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> !</p>",
        "id": 193045328,
        "sender_full_name": "matklad",
        "timestamp": 1586181604
    },
    {
        "content": "<p>Today's changelog is here: <a href=\"https://rust-analyzer.github.io/thisweek/2020/04/06/changelog-19.html\" title=\"https://rust-analyzer.github.io/thisweek/2020/04/06/changelog-19.html\">https://rust-analyzer.github.io/thisweek/2020/04/06/changelog-19.html</a></p>",
        "id": 193045369,
        "sender_full_name": "matklad",
        "timestamp": 1586181612
    },
    {
        "content": "<p>Notable things:</p>\n<ul>\n<li>the second release in a row without manual .yml massaging!</li>\n</ul>",
        "id": 193045438,
        "sender_full_name": "matklad",
        "timestamp": 1586181640
    },
    {
        "content": "<ul>\n<li>reworked configuration and initialization sequence (which is breaking for extensions)</li>\n</ul>",
        "id": 193045483,
        "sender_full_name": "matklad",
        "timestamp": 1586181659
    },
    {
        "content": "<ul>\n<li>more work by <span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> on proc-macro support</li>\n</ul>",
        "id": 193045538,
        "sender_full_name": "matklad",
        "timestamp": 1586181680
    },
    {
        "content": "<p>And, most significant I think, <a href=\"https://github.com/rust-lang/rust/pull/70761\" title=\"https://github.com/rust-lang/rust/pull/70761\">https://github.com/rust-lang/rust/pull/70761</a> by <span class=\"user-mention\" data-user-id=\"279832\">@Luca Barbieri</span></p>",
        "id": 193045581,
        "sender_full_name": "matklad",
        "timestamp": 1586181708
    },
    {
        "content": "<p>This out-of-the blue PR ports rustc to use <code>ra_parser</code> and <code>ra_syntax</code> syntax trees.</p>",
        "id": 193045675,
        "sender_full_name": "matklad",
        "timestamp": 1586181735
    },
    {
        "content": "<p>fascinating</p>",
        "id": 193045750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586181766
    },
    {
        "content": "<p>I've tried it out and indeed was able to compile a non-trivial crate with ra as a parser :D</p>",
        "id": 193045853,
        "sender_full_name": "matklad",
        "timestamp": 1586181806
    },
    {
        "content": "<p>Note that PR is rather a proof of concept that something on the road to merging I think</p>",
        "id": 193045928,
        "sender_full_name": "matklad",
        "timestamp": 1586181834
    },
    {
        "content": "<p>So the main limitation is that it can't parse Rust 2015 syntax, because rust-analyzer only supports the 2018 edition currently</p>",
        "id": 193046017,
        "sender_full_name": "detrumi",
        "timestamp": 1586181854
    },
    {
        "content": "<p>But it shows that the appoarch of lowering concrece syntax tree to ast (as opposed to even-based parsing approahc) is viable, and actually not that bad, diff wise</p>",
        "id": 193046050,
        "sender_full_name": "matklad",
        "timestamp": 1586181874
    },
    {
        "content": "<p>the PR adds about 3k likes to rustc</p>",
        "id": 193046082,
        "sender_full_name": "matklad",
        "timestamp": 1586181884
    },
    {
        "content": "<p>not that bad in the sense of \"code complexity\"?</p>",
        "id": 193046116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586181897
    },
    {
        "content": "<p>idk, merging it might avoid bitrot, though it also adds some cost to keep it up to date</p>",
        "id": 193046122,
        "sender_full_name": "detrumi",
        "timestamp": 1586181899
    },
    {
        "content": "<p>one obvious concern I would have is build times</p>",
        "id": 193046130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586181903
    },
    {
        "content": "<p>build times of rustc itself, or compile times of code compiled with rustc?</p>",
        "id": 193046216,
        "sender_full_name": "matklad",
        "timestamp": 1586181939
    },
    {
        "content": "<p>the latter</p>",
        "id": 193046235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586181946
    },
    {
        "content": "<p>i.e., adding another IR to be converted requires more allocation, etc,</p>",
        "id": 193046260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586181954
    },
    {
        "content": "<p>The latter is my main concern as well indeed.</p>",
        "id": 193046273,
        "sender_full_name": "matklad",
        "timestamp": 1586181957
    },
    {
        "content": "<p>so I would expect it to be slower</p>",
        "id": 193046296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586181962
    },
    {
        "content": "<p>I think we can now answer \"how much slower\" actually</p>",
        "id": 193046399,
        "sender_full_name": "matklad",
        "timestamp": 1586181993
    },
    {
        "content": "<p>With the caveat that the PR is enables only for real files, as far as i understand. All code generated by macros is still parsed with the old parser</p>",
        "id": 193046486,
        "sender_full_name": "matklad",
        "timestamp": 1586182025
    },
    {
        "content": "<p>I think the changelog entry with the <code>code-insiders</code> invocation is missing <code>--enable-proposed-api</code></p>",
        "id": 193046490,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1586182026
    },
    {
        "content": "<p>though hopefully we can change that tomorrow when the new stable vscode is supposed to be out</p>",
        "id": 193046539,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1586182047
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203366\">@Jeremy Kolb</span> fixed!</p>",
        "id": 193046591,
        "sender_full_name": "matklad",
        "timestamp": 1586182070
    },
    {
        "content": "<p>we can certainly test the perf of the current PR, if that's what you mean</p>",
        "id": 193046592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586182071
    },
    {
        "content": "<p>yup, that's what I mean, but I am not sure if that would be useful, if we don't use this approach in the first place</p>",
        "id": 193046768,
        "sender_full_name": "matklad",
        "timestamp": 1586182133
    },
    {
        "content": "<p>Like, I do think that eventually we should remove ast and just use cst.</p>",
        "id": 193046797,
        "sender_full_name": "matklad",
        "timestamp": 1586182150
    },
    {
        "content": "<p>But for transition the event thing seems somewhat more promising.</p>",
        "id": 193046825,
        "sender_full_name": "matklad",
        "timestamp": 1586182165
    },
    {
        "content": "<p>So, one thing I was thinking about for this week is to try and get back into salsa a bit, and in particular to look into what it would take to support the recursive solver that <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> has been working on \"properly\"</p>",
        "id": 193046836,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586182171
    },
    {
        "content": "<p>(On that note, I still don't fully understand what you were talking about last time, but I guess maybe we should revisit that over in the Salsa zulip)</p>",
        "id": 193046889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586182198
    },
    {
        "content": "<p>Oh, that actually remins me about a bit which has seen little progress: I wasn't able to put a lot of time into the new item-tree ir unfortunately.</p>",
        "id": 193047019,
        "sender_full_name": "matklad",
        "timestamp": 1586182232
    },
    {
        "content": "<blockquote>\n<p>(On that note, I still don't fully understand what you were talking about last time, but I guess maybe we should revisit that over in the Salsa zulip)</p>\n</blockquote>\n<p>+1</p>",
        "id": 193047159,
        "sender_full_name": "matklad",
        "timestamp": 1586182305
    },
    {
        "content": "<p>Oh and</p>",
        "id": 193047657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586182498
    },
    {
        "content": "<p>we should mention that <code>x.py</code> in the compiler should now support things better</p>",
        "id": 193047689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586182511
    },
    {
        "content": "<p>Is there a rustc-dev-guide chaper guiding folks in how to setup and use rust-analyezr with rusc?</p>",
        "id": 193047739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586182531
    },
    {
        "content": "<p>I remember <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> talking about it; if so, it would want to include the <code>.vscode/settings.toml</code> etc.</p>",
        "id": 193047774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586182545
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> ^^ ?</p>",
        "id": 193047778,
        "sender_full_name": "matklad",
        "timestamp": 1586182548
    },
    {
        "content": "<p>It's not like \"particularly hard\" to do</p>",
        "id": 193047808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586182558
    },
    {
        "content": "<p>But I do think having a list of steps would be really nice</p>",
        "id": 193047862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586182565
    },
    {
        "content": "<p>I haven't written anything on that yet</p>",
        "id": 193047906,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586182580
    },
    {
        "content": "<p>I had wanted to do a survey of the common editors</p>",
        "id": 193047936,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586182590
    },
    {
        "content": "<p>and I think that sent me down the rabbit hole of exploring neovim</p>",
        "id": 193047956,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586182603
    },
    {
        "content": "<p>(I think part of the problem is that there are different instructions depending on which variant of vim one uses? Not sure if that is still true, but when I was looking it seemed to be the case, and so I wanted to figure out which variant of vim was the best one to document...)</p>",
        "id": 193048075,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586182662
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> yeah, that's the biggest problem, every editor requires n, where n &gt;= 1 instructions</p>",
        "id": 193048229,
        "sender_full_name": "matklad",
        "timestamp": 1586182723
    },
    {
        "content": "<p>For rust-analyzer, I just made the manual easy to edit, hoping that folks would crowd-write it.</p>",
        "id": 193048310,
        "sender_full_name": "matklad",
        "timestamp": 1586182753
    },
    {
        "content": "<p>I would definitelyl suggest we just get started with at <em>least</em> documenting vscode :)</p>",
        "id": 193048363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586182780
    },
    {
        "content": "<p>That said</p>",
        "id": 193048366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586182781
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> the cargo watch functionality, is that built into the <em>VSCode plugin</em> or is it also part of the LSP server itself in some way?</p>",
        "id": 193048465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586182807
    },
    {
        "content": "<p>I remember us talking about moving it around</p>",
        "id": 193048476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586182810
    },
    {
        "content": "<p>That's now LSP-level functionality</p>",
        "id": 193048512,
        "sender_full_name": "matklad",
        "timestamp": 1586182832
    },
    {
        "content": "<p>So, it should be supported in any editor</p>",
        "id": 193048526,
        "sender_full_name": "matklad",
        "timestamp": 1586182840
    },
    {
        "content": "<p>Presumably the way that that \"Cargo watch\" command gets customized would also depend on your editor, though?</p>",
        "id": 193048563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586182861
    },
    {
        "content": "<p>e.g., the emacs plugin may just not support it?</p>",
        "id": 193048586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586182866
    },
    {
        "content": "<p>So, the LSP has the concept of configuration built-in, and, if editor supports LSP, it should be able to set arbitrary options</p>",
        "id": 193048758,
        "sender_full_name": "matklad",
        "timestamp": 1586182931
    },
    {
        "content": "<p>but it is indeed true that this would be per-editor config. IE, we don't really have a <code>rust-analyzer.toml</code> config file.</p>",
        "id": 193048819,
        "sender_full_name": "matklad",
        "timestamp": 1586182968
    },
    {
        "content": "<p>Which is sort-of a limitation of the protocol:</p>\n<ul>\n<li>it specifies the way to configure servers from the editor</li>\n<li>but it doesn't specify the on-disk storage format, each editor is expected to store config in their own format</li>\n</ul>\n<p>I think we can bend the protocol here, and merge <code>rust-analyzer.toml</code> with whatever the editor sends us</p>",
        "id": 193049018,
        "sender_full_name": "matklad",
        "timestamp": 1586183053
    },
    {
        "content": "<p>What is the purpose of <code>rust-analyzer.toml</code>? To override the single flycheck command?</p>",
        "id": 193049264,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1586183164
    },
    {
        "content": "<p>To have something you can put into a git repo, which would be picked up by all editors, and not just by vs code</p>",
        "id": 193049482,
        "sender_full_name": "matklad",
        "timestamp": 1586183247
    },
    {
        "content": "<p>we could, but it's not clear it's necessary, I guess we'd want to check if e.g. the emacs lsp-mode etc supports some way to set options</p>",
        "id": 193049680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586183325
    },
    {
        "content": "<p>I bet it does</p>",
        "id": 193049681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586183326
    },
    {
        "content": "<p>it does (via the normal emacs way, so you could have a <code>.dir-locals.el</code>)</p>",
        "id": 193050010,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1586183429
    },
    {
        "content": "<p>I think configuring the editor is a very personal thing. Not everyone would like to use that <code>x.py</code> script and she should not be forced to. Just documenting the recommended setup seems alright.</p>",
        "id": 193050679,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1586183697
    },
    {
        "content": "<p>We might need to start collecting LSP bits we're missing in different editors too. We mostly ignore client caps right now and just assume things like \"markdown is supported\"</p>",
        "id": 193051301,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1586183929
    },
    {
        "content": "<p>I think there are many settings where it would make sense to configure them per repo, like files to ignore</p>",
        "id": 193051393,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1586183967
    },
    {
        "content": "<p>This also seems arrogant to put <code>rust-analyzer.toml</code> to the repo, whilst some folks may be using intelij</p>",
        "id": 193051626,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1586184046
    },
    {
        "content": "<p><code>rust-analyzer.toml</code> in no way precludes adding <code>.idea</code>. Honestly, I feel like the benefit of sharable config should be abundantly clear :)</p>",
        "id": 193052024,
        "sender_full_name": "matklad",
        "timestamp": 1586184208
    },
    {
        "content": "<p>Only if people don't save personal configs in this <code>.idea</code> folder ...</p>",
        "id": 193053768,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1586184903
    },
    {
        "content": "<p>The fact that we commit .vscode folder already looks weird. So each time when we modify the debug configs for vscode we have to keep an eye on not committing this change.<br>\nThe better approach would be to have a separate dir say <code>recommended-editor-configs</code> where people can look and copy the editor configs they want and be able to tweak them</p>",
        "id": 193054922,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1586185362
    },
    {
        "content": "<p>I guess we can agree to disagree on the merits of sharing project config :)</p>",
        "id": 193055468,
        "sender_full_name": "matklad",
        "timestamp": 1586185574
    },
    {
        "content": "<p>And I want to report there are around 2 more PRs to complete the proc-macro custom derive feature.</p>",
        "id": 193055901,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1586185768
    },
    {
        "content": "<p>the whole point is that you only put the settings you do want to share into the <code>rust-analyzer.toml</code> ;)</p>",
        "id": 193055904,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1586185769
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216201\">Edwin Cheng</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/193055901\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/193055901\">said</a>:</p>\n<blockquote>\n<p>And I want to report there are around 2 more PRs to complete the proc-macro custom derive feature.</p>\n</blockquote>\n<p>with this and all the Chalk work going on, I'm hopeful we'll have pretty complete type inference (modulo bugs) in a few months :)</p>",
        "id": 193057369,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1586186379
    },
    {
        "content": "<p>I am scared about perf though <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 193057494,
        "sender_full_name": "matklad",
        "timestamp": 1586186423
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> I remember you mentioned you want some setup around --bench , e.g. auto-compare some source files. Do you remember which issue is it ? I would like to work on that task after these PRs.</p>",
        "id": 193058282,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1586186756
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/492\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/492\">https://github.com/rust-analyzer/rust-analyzer/issues/492</a> ?</p>",
        "id": 193058453,
        "sender_full_name": "matklad",
        "timestamp": 1586186810
    },
    {
        "content": "<p>yes, thank you!</p>",
        "id": 193058689,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1586186890
    },
    {
        "content": "<blockquote>\n<p>\"editor.semanticHighlighting.enabled\": false</p>\n</blockquote>\n<p>Is this right? (from the changelog)</p>",
        "id": 193226483,
        "sender_full_name": "Laurențiu",
        "timestamp": 1586283079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/193050010\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/193050010\">said</a>:</p>\n<blockquote>\n<p>it does (via the normal emacs way, so you could have a <code>.dir-locals.el</code>)</p>\n</blockquote>\n<p>ps, <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span>, got any links or things to \"apropos for\" in order to find out how to set \"custom settings\" in emacs-lsp?</p>",
        "id": 193775620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586787175
    },
    {
        "content": "<p>ouch, forgot to mention that there's no weekly today because there's a holiday here.</p>",
        "id": 193775962,
        "sender_full_name": "matklad",
        "timestamp": 1586787390
    },
    {
        "content": "<p>there's a bunch of <a href=\"https://github.com/emacs-lsp/lsp-mode/blob/5c94fbd04cd082b5d303e9b3e0332d3ba01b4ad9/lsp-rust.el#L327-L416\" title=\"https://github.com/emacs-lsp/lsp-mode/blob/5c94fbd04cd082b5d303e9b3e0332d3ba01b4ad9/lsp-rust.el#L327-L416\">customization variables</a>, e.g. <code>lsp-rust-analyzer-cargo-watch-command</code>, you just have to make sure to set them before the server gets started. Also note that the setting names changed somewhat recently, there's been a commit in emacs-lsp to adapt to that but I haven't tested it since then. And I don't know whether the settings are complete</p>",
        "id": 193775977,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1586787404
    },
    {
        "content": "<p>(but actually, because I feel as asleep after writing an article on the Pratt parsing)</p>",
        "id": 193775991,
        "sender_full_name": "matklad",
        "timestamp": 1586787416
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/193775977\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/193775977\">said</a>:</p>\n<blockquote>\n<p>there's a bunch of <a href=\"https://github.com/emacs-lsp/lsp-mode/blob/5c94fbd04cd082b5d303e9b3e0332d3ba01b4ad9/lsp-rust.el#L327-L416\" title=\"https://github.com/emacs-lsp/lsp-mode/blob/5c94fbd04cd082b5d303e9b3e0332d3ba01b4ad9/lsp-rust.el#L327-L416\">customization variables</a>, e.g. <code>lsp-rust-analyzer-cargo-watch-command</code>, you just have to make sure to set them before the server gets started. Also note that the setting names changed somewhat recently, there's been a commit in emacs-lsp to adapt to that but I haven't tested it since then. And I don't know whether the settings are complete</p>\n</blockquote>\n<p>ah wacky</p>",
        "id": 193776581,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586787771
    },
    {
        "content": "<p>I somehow expected a more generic mechanism</p>",
        "id": 193776592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586787778
    },
    {
        "content": "<p>but ok, that makes sense</p>",
        "id": 193776594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586787780
    },
    {
        "content": "<p>also, <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>, seems ok, I'm still catching up on notifications anyway</p>",
        "id": 193776610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586787790
    },
    {
        "content": "<p>always takes me more time than I leave for it</p>",
        "id": 193776623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586787796
    },
    {
        "content": "<p>I've been continuing to test the recursive Chalk solver and implemented a bunch of fixes in RA, which I'm turning into PRs, hence the bunch of PRs right now <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 193777548,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1586788390
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/193775977\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/193775977\">said</a>:</p>\n<blockquote>\n<p>there's a bunch of <a href=\"https://github.com/emacs-lsp/lsp-mode/blob/5c94fbd04cd082b5d303e9b3e0332d3ba01b4ad9/lsp-rust.el#L327-L416\" title=\"https://github.com/emacs-lsp/lsp-mode/blob/5c94fbd04cd082b5d303e9b3e0332d3ba01b4ad9/lsp-rust.el#L327-L416\">customization variables</a>, ...</p>\n</blockquote>\n<p>I'm always asking myself whether I should keep my LSP customizations in <code>custom.el</code> (therefore changing them with <code>M-x customize-variable</code>) or write them in my <code>personal/mysettings.el</code>. Currently I have custom settings a bit here and a bit there and it looks messy. Any suggestions?<br>\nThis is more a generic emacs question ... anyway, thanks :-)</p>",
        "id": 193782062,
        "sender_full_name": "apiraino",
        "timestamp": 1586791029
    },
    {
        "content": "<p>I don't use <code>customize-variable</code> and just put stuff into my user config function, but I use spacemacs so <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 193869446,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1586855672
    },
    {
        "content": "<p>When I used to use emacs heavily (with prelude and vanilla config at different times) I also find <code>M-x customize-variable</code> to be more of a problem than a solution</p>",
        "id": 193872278,
        "sender_full_name": "matklad",
        "timestamp": 1586857310
    },
    {
        "content": "<p>Oups, almost missed weekly sync-up <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> !</p>",
        "id": 194680183,
        "sender_full_name": "matklad",
        "timestamp": 1587392010
    },
    {
        "content": "<p>So, we have a humongous release today, <a href=\"https://rust-analyzer.github.io/thisweek/2020/04/20/changelog-21.html\" title=\"https://rust-analyzer.github.io/thisweek/2020/04/20/changelog-21.html\">https://rust-analyzer.github.io/thisweek/2020/04/20/changelog-21.html</a>, thanks to work by <span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> and <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> over the past several weeks</p>",
        "id": 194680299,
        "sender_full_name": "matklad",
        "timestamp": 1587392052
    },
    {
        "content": "<p>release contains <em>both</em> new trait solver and procedural macros support.</p>",
        "id": 194680331,
        "sender_full_name": "matklad",
        "timestamp": 1587392075
    },
    {
        "content": "<p>Only support Custom-derive for now :)</p>",
        "id": 194680375,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587392097
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span>  how do we handle incorrect syntax in proc macros?</p>",
        "id": 194680441,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587392131
    },
    {
        "content": "<p>I am extremely happy to see custom derive working!</p>\n<p>Like, for the past four years or something I was thinking \"one day, we'll expand proc macros in an IDE\", and today is that day.</p>",
        "id": 194680480,
        "sender_full_name": "matklad",
        "timestamp": 1587392151
    },
    {
        "content": "<p>oooh</p>",
        "id": 194680605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587392198
    },
    {
        "content": "<p>the recursive solver is shipping, eh? Very exciting</p>",
        "id": 194680681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587392252
    },
    {
        "content": "<p>On my side, I feel like I've done comparatively little :)</p>\n<p>I am still in the process of solving the accidentally linear lookup in the sytnax trees, and the item-tree IR work is still on hold :(</p>",
        "id": 194680831,
        "sender_full_name": "matklad",
        "timestamp": 1587392304
    },
    {
        "content": "<p>So, I've been saying this for weeks, but I mean it now</p>",
        "id": 194680859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587392323
    },
    {
        "content": "<p>(lol)</p>",
        "id": 194680873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587392329
    },
    {
        "content": "<blockquote>\n<p>the recursive solver is shipping, eh? </p>\n</blockquote>\n<p>Yes! And the impact is very visible.</p>",
        "id": 194680876,
        "sender_full_name": "matklad",
        "timestamp": 1587392331
    },
    {
        "content": "<p>I want to advance this IDE RFC</p>",
        "id": 194680884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587392335
    },
    {
        "content": "<p>last week I got pretty distracted</p>",
        "id": 194680894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587392339
    },
    {
        "content": "<p>I was going to read it over today and .. probably open it up? I'm not sure if there's any further consulting that makes sense, can't think what it would be right now</p>",
        "id": 194680939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587392359
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/194680876\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/194680876\">said</a>:</p>\n<blockquote>\n<p>Yes! And the impact is very visible.</p>\n</blockquote>\n<p>Very cool.</p>",
        "id": 194680964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587392374
    },
    {
        "content": "<p>There's been a lot of activity in/around chalk</p>",
        "id": 194680974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587392381
    },
    {
        "content": "<p>Even if there are, we can do this after opening the RFC</p>",
        "id": 194680984,
        "sender_full_name": "matklad",
        "timestamp": 1587392385
    },
    {
        "content": "<p>Right</p>",
        "id": 194680997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587392393
    },
    {
        "content": "<p>I also want to write a \"rust-analyzer is relased\" blog post this week, and publish it next week.</p>",
        "id": 194681072,
        "sender_full_name": "matklad",
        "timestamp": 1587392410
    },
    {
        "content": "<p>What language features are most problematic for RLS in terms of chalk etc at this juncture?</p>",
        "id": 194681113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587392434
    },
    {
        "content": "<p>Maybe in/around async I/O?</p>",
        "id": 194681129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587392441
    },
    {
        "content": "<p>Like, we never had a proper announcement, with a short run-down of features, quick start, etc. I think combining that with RFC would be beneficial.</p>",
        "id": 194681142,
        "sender_full_name": "matklad",
        "timestamp": 1587392445
    },
    {
        "content": "<p>Ah, yeah, good idea.</p>",
        "id": 194681158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587392452
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>the recursive solver is shipping, eh? </p>\n</blockquote>\n<p>Yes! And the impact is very visible.</p>\n</blockquote>\n<p>also in terms of performance though <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> a timely review of <a href=\"https://github.com/rust-lang/chalk/issues/404\" title=\"https://github.com/rust-lang/chalk/issues/404\">rust-lang/chalk#404</a> would be helpful there</p>",
        "id": 194681264,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1587392498
    },
    {
        "content": "<blockquote>\n<p>What language features are most problematic for RLS in terms of chalk etc at this juncture?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> knows more, but, as a user, I see unresolved types with <code>dyn Trait</code> and <code>impl Trait</code> syntaxes</p>",
        "id": 194681265,
        "sender_full_name": "matklad",
        "timestamp": 1587392498
    },
    {
        "content": "<p>eek, yeah, will get on that today!</p>",
        "id": 194681402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587392547
    },
    {
        "content": "<p>I was just going to say <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> that maybe you and I can spend some time today discussing the caching/salsa story more generally</p>",
        "id": 194681438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587392566
    },
    {
        "content": "<p>Does it make sense for me to hop onto that discussion?</p>",
        "id": 194681520,
        "sender_full_name": "matklad",
        "timestamp": 1587392601
    },
    {
        "content": "<p>Sure!</p>",
        "id": 194681556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587392620
    },
    {
        "content": "<p>Maybe later today?</p>",
        "id": 194681561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587392623
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/194681265\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/194681265\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> knows more, but, as a user, I see unresolved types with <code>dyn Trait</code> and <code>impl Trait</code> syntaxes</p>\n</blockquote>\n<p>yeah, <code>impl Trait</code> support should be ready soon though, for <code>dyn Trait</code> the problem is super traits, and there's nothing ongoing there... apart from that, the ongoing work on built-in impls will have a big impact I think, and then the only thing that comes to mind is support for integer/float variables</p>",
        "id": 194681648,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1587392649
    },
    {
        "content": "<p>I think we also want the ability to get a specific impl from chalk, and not just the yes/no answer</p>",
        "id": 194681734,
        "sender_full_name": "matklad",
        "timestamp": 1587392689
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/194681438\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/194681438\">said</a>:</p>\n<blockquote>\n<p>I was just going to say <span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> that maybe you and I can spend some time today discussing the caching/salsa story more generally</p>\n</blockquote>\n<p>yeah, my other PR (<a href=\"https://github.com/rust-lang/chalk/issues/403\" title=\"https://github.com/rust-lang/chalk/issues/403\">rust-lang/chalk#403</a>) is kind of related to that btw</p>",
        "id": 194681748,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1587392698
    },
    {
        "content": "<p>Like, I belive for <code>goto definition</code> for method we want to land on the impl, if possible, and not on the trait.</p>",
        "id": 194681807,
        "sender_full_name": "matklad",
        "timestamp": 1587392720
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/194681734\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/194681734\">said</a>:</p>\n<blockquote>\n<p>I think we also want the ability to get a specific impl from chalk, and not just the yes/no answer</p>\n</blockquote>\n<p>can you say more about why? I've specifically avoided giving that info and don't intend to change that, but it can be done in other ways</p>",
        "id": 194681815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587392723
    },
    {
        "content": "<p>ok, so, if the question you want to answer is more like \"what is the precise version of this method that will run\"</p>",
        "id": 194681877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587392746
    },
    {
        "content": "<p>that is something we can/should add to chalk, but not that way, it'd be modeled I think more like an associated type normalization</p>",
        "id": 194681972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587392767
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/194681748\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/194681748\">said</a>:</p>\n<blockquote>\n<p>yeah, my other PR (<a href=\"https://github.com/rust-lang/chalk/issues/403\" title=\"https://github.com/rust-lang/chalk/issues/403\">rust-lang/chalk#403</a>) is kind of related to that btw</p>\n</blockquote>\n<p>yep I saw that</p>",
        "id": 194682023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587392786
    },
    {
        "content": "<p>TO be clear, this is not something urgently needed, but I'd love to see it eventually</p>",
        "id": 194682031,
        "sender_full_name": "matklad",
        "timestamp": 1587392791
    },
    {
        "content": "<p>well, I do think it'll be needed as rustc integration proceeds too</p>",
        "id": 194682062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587392805
    },
    {
        "content": "<p>so it makes sense to work on</p>",
        "id": 194682077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587392810
    },
    {
        "content": "<p>in any case it's sort of \"technicality\", the distinction I'm drawing</p>",
        "id": 194682105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587392819
    },
    {
        "content": "<p>but in rustc when you ask a question like <code>T: Foo</code> you get back an answer that is a specific impl, and I'd like to avoid making that the interface. But we obviously need the ability to figure out \"what version of this method will actually run\"</p>",
        "id": 194682164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587392846
    },
    {
        "content": "<p>the idea is to leverage the fact that every function definition written by a user has a unique type associated with it</p>",
        "id": 194682222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587392874
    },
    {
        "content": "<blockquote>\n<p>Like, I belive for <code>goto definition</code> for method we want to land on the impl, if possible, and not on the trait.</p>\n</blockquote>\n<p>Why not both :)</p>",
        "id": 194682228,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1587392876
    },
    {
        "content": "<p>there should be a command to go to the trait as well, but if you go to the impl, you can still easily go up to the trait, but not the other way around</p>",
        "id": 194682377,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1587392924
    },
    {
        "content": "<p>Yeah.... somethimes I even think about exposing some sort of \"chain of evidence\" in the UI, which explains how a particular type implements a trait.</p>",
        "id": 194682388,
        "sender_full_name": "matklad",
        "timestamp": 1587392928
    },
    {
        "content": "<p>yeah, that would be cool</p>",
        "id": 194682430,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1587392942
    },
    {
        "content": "<p>I have so many thoughts about this</p>",
        "id": 194682499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587392972
    },
    {
        "content": "<p>Like how IntelliJ does this somewat implicitelly, remmebering the current subsitution when doing goto defitinition (waves hands furiously)</p>",
        "id": 194682504,
        "sender_full_name": "matklad",
        "timestamp": 1587392974
    },
    {
        "content": "<p>well maybe <em>that</em> many :P</p>",
        "id": 194682531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587392985
    },
    {
        "content": "<p>mostly I have ideas of things I would like to find better ways to help users see, navigate, and understand</p>",
        "id": 194682562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587392997
    },
    {
        "content": "<p>but I'm not sure how hard that is to do in contexts like VSCode</p>",
        "id": 194682633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587393010
    },
    {
        "content": "<p>certainly the \"chain of evidence\" is on there, in any case.</p>",
        "id": 194682678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587393025
    },
    {
        "content": "<p>/me can't wait until the basics are in place, and we can experiement with fancy visualisations and stuff</p>",
        "id": 194682704,
        "sender_full_name": "matklad",
        "timestamp": 1587393038
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/194682504\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/194682504\">said</a>:</p>\n<blockquote>\n<p>Like how IntelliJ does this somewat implicitelly, remmebering the current subsitution when doing goto defitinition (waves hands furiously)</p>\n</blockquote>\n<p>that reminds me that I would also love to do a similar thing for macros -- basically if you go to definition on a macro call, remember the parameters, so you could expand it further</p>",
        "id": 194682750,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1587393059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> are there any action items for me with respect to the RFC?</p>",
        "id": 194682947,
        "sender_full_name": "matklad",
        "timestamp": 1587393126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/194682750\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/194682750\">said</a>:</p>\n<blockquote>\n<p>that reminds me that I would also love to do a similar thing for macros -- basically if you go to definition on a macro call, remember the parameters, so you could expand it further</p>\n</blockquote>\n<p>oh man it would be <strong>so great</strong>  to see the series of expansions and recursions this way...</p>",
        "id": 194684125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587393600
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span>, it's that time of Monday again!</p>",
        "id": 195421570,
        "sender_full_name": "matklad",
        "timestamp": 1587996274
    },
    {
        "content": "<p>There's a ton of technical things which were done this week, but I am mostly excited about more general project life things</p>",
        "id": 195421693,
        "sender_full_name": "matklad",
        "timestamp": 1587996342
    },
    {
        "content": "<p>We did a real release: <a href=\"https://rust-analyzer.github.io/blog/2020/04/20/first-release.html\" title=\"https://rust-analyzer.github.io/blog/2020/04/20/first-release.html\">https://rust-analyzer.github.io/blog/2020/04/20/first-release.html</a> (long overdue)</p>",
        "id": 195421710,
        "sender_full_name": "matklad",
        "timestamp": 1587996353
    },
    {
        "content": "<p>Also, the rust-analyzer RFC seems to be extremely well received (we'v collected more <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> than even nll :D )</p>",
        "id": 195421820,
        "sender_full_name": "matklad",
        "timestamp": 1587996392
    },
    {
        "content": "<p>The usual release notes are here:</p>\n<p><a href=\"https://rust-analyzer.github.io/thisweek/2020/04/27/changelog-22.html\" title=\"https://rust-analyzer.github.io/thisweek/2020/04/27/changelog-22.html\">https://rust-analyzer.github.io/thisweek/2020/04/27/changelog-22.html</a></p>",
        "id": 195421882,
        "sender_full_name": "matklad",
        "timestamp": 1587996425
    },
    {
        "content": "<p>How will our life change after this alpha release?</p>",
        "id": 195422055,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587996484
    },
    {
        "content": "<p>I wouldn't expect any changes</p>",
        "id": 195422089,
        "sender_full_name": "matklad",
        "timestamp": 1587996505
    },
    {
        "content": "<p>More github issues most likely</p>",
        "id": 195422240,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1587996556
    },
    {
        "content": "<p>Though, because of the RFC, I think we need to spend more time making sure that rust-analyzer \"just works\" in other editors as well.</p>",
        "id": 195422243,
        "sender_full_name": "matklad",
        "timestamp": 1587996557
    },
    {
        "content": "<p>(I've already started this week)</p>",
        "id": 195422255,
        "sender_full_name": "matklad",
        "timestamp": 1587996563
    },
    {
        "content": "<p>oh, yeah, <span class=\"user-mention\" data-user-id=\"203366\">@Jeremy Kolb</span> is 100% right. TBH, I don't look at every issue myself anymore, a lot of them get closed by the point I get to them in my mailbox</p>",
        "id": 195422409,
        "sender_full_name": "matklad",
        "timestamp": 1587996620
    },
    {
        "content": "<p>For that, I actually want to deflect some part of the torrent of questions to urlo: <a href=\"https://internals.rust-lang.org/t/discussion-forum-for-dev-tools-rust-analyzer/12160/5\" title=\"https://internals.rust-lang.org/t/discussion-forum-for-dev-tools-rust-analyzer/12160/5\">https://internals.rust-lang.org/t/discussion-forum-for-dev-tools-rust-analyzer/12160/5</a></p>",
        "id": 195422491,
        "sender_full_name": "matklad",
        "timestamp": 1587996662
    },
    {
        "content": "<p>Another bigish issue from this week is that proc-macros are broken on musl, because it can't dlopen</p>",
        "id": 195422657,
        "sender_full_name": "matklad",
        "timestamp": 1587996726
    },
    {
        "content": "<p>But how does rustc work on musl?</p>",
        "id": 195422707,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587996746
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> is asking the right questions...</p>",
        "id": 195422775,
        "sender_full_name": "matklad",
        "timestamp": 1587996776
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/195422243\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/195422243\">said</a>:</p>\n<blockquote>\n<p>Though, because of the RFC, I think we need to spend more time making sure that rust-analyzer \"just works\" in other editors as well.</p>\n</blockquote>\n<p>If these are due to LSP weirdness assign to me and I can take a look.</p>",
        "id": 195422793,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1587996784
    },
    {
        "content": "<p>wait, I think it doesn't? Like, rustc links glibc dynamically I think?</p>",
        "id": 195422842,
        "sender_full_name": "matklad",
        "timestamp": 1587996812
    },
    {
        "content": "<p>I think we should try shipping glibc binaries and see if anyone complains. But maybe it's not the right moment</p>",
        "id": 195422853,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587996817
    },
    {
        "content": "<p>I think doing that next week would be OK! It might probably make sense to switch the nightly asap even</p>",
        "id": 195422975,
        "sender_full_name": "matklad",
        "timestamp": 1587996852
    },
    {
        "content": "<p>There's also this annoying slow allocator problem...</p>",
        "id": 195423011,
        "sender_full_name": "matklad",
        "timestamp": 1587996865
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203366\">@Jeremy Kolb</span> yup, I think that would be mostly it</p>",
        "id": 195423094,
        "sender_full_name": "matklad",
        "timestamp": 1587996888
    },
    {
        "content": "<p>I don't think it's slow on musl, but rather that the glibc one is pretty fast these days</p>",
        "id": 195423115,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587996897
    },
    {
        "content": "<p>Also, kudos to <span class=\"user-mention\" data-user-id=\"203366\">@Jeremy Kolb</span> for being on top of many small things, like version updates and what not. They rarely get into release notes, which is really unforutnate :(</p>",
        "id": 195423212,
        "sender_full_name": "matklad",
        "timestamp": 1587996931
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/195422842\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/195422842\">said</a>:</p>\n<blockquote>\n<p>wait, I think it doesn't? Like, rustc links glibc dynamically I think?</p>\n</blockquote>\n<p>There's a rust package on Alpine and I don't think it pulls in glibc</p>",
        "id": 195423244,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587996945
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> will you be able to look at ast docs pr some time this week?</p>",
        "id": 195423447,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1587997018
    },
    {
        "content": "<p>That's not impossible :)</p>",
        "id": 195423544,
        "sender_full_name": "matklad",
        "timestamp": 1587997060
    },
    {
        "content": "<p>IIUC, rustc musl host use dynamic-musl and glibc .</p>",
        "id": 195423691,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587997107
    },
    {
        "content": "<blockquote>\n<p>@Jeremy Kolb yup, I think that would be mostly it</p>\n</blockquote>\n<p>The annoying thing would be our custom code-action format.  I am warming up to the idea of using the text snippets as internal representation, but that would require some extensive changes to out assist infra. Which are necessary anyway, as our cursor placement in assists is pretty stupid in majority of cases</p>",
        "id": 195423780,
        "sender_full_name": "matklad",
        "timestamp": 1587997155
    },
    {
        "content": "<p>Yeah that plays into server-side command execution. I saw your proposal for cursor position... I hope that gets in somehow</p>",
        "id": 195424054,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1587997271
    },
    {
        "content": "<p>I wonder if we could also enable jemalloc for the releases</p>",
        "id": 195430474,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587999938
    },
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> , it's time for a weekly sync up again!</p>",
        "id": 196183618,
        "sender_full_name": "matklad",
        "timestamp": 1588600960
    },
    {
        "content": "<p>It was a quiet week (in comparision to couple of previous ones) with mostly feature polishing and internal refactorings</p>",
        "id": 196183731,
        "sender_full_name": "matklad",
        "timestamp": 1588601014
    },
    {
        "content": "<p>We now have a tracking issue for rust-analyzer LSP RFC: <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/4224#issue-610020082\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/4224#issue-610020082\">https://github.com/rust-analyzer/rust-analyzer/issues/4224#issue-610020082</a></p>",
        "id": 196183885,
        "sender_full_name": "matklad",
        "timestamp": 1588601073
    },
    {
        "content": "<p>This week, I'd like to tackle our use of custom <code>rust-analyzer.applySourceChange</code> comand, which hurts interoperability</p>",
        "id": 196184013,
        "sender_full_name": "matklad",
        "timestamp": 1588601139
    },
    {
        "content": "<p>I also want to refactor our internal representation of code changes -- it seems like using snippets as <strong>the</strong> data structure is a better approach than our separate <code>caret_offset: TextSize</code> field (which was cargo-culted from IntelliJ)</p>",
        "id": 196184165,
        "sender_full_name": "matklad",
        "timestamp": 1588601198
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/196183885\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/196183885\">said</a>:</p>\n<blockquote>\n<p>We now have a tracking issue for rust-analyzer LSP RFC: <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/4224#issue-610020082\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/4224#issue-610020082\">https://github.com/rust-analyzer/rust-analyzer/issues/4224#issue-610020082</a></p>\n</blockquote>\n<p>great</p>",
        "id": 196184838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588601478
    },
    {
        "content": "<p>I have a question to raise</p>",
        "id": 196184851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588601483
    },
    {
        "content": "<p>How are we tracking the issues and feedback that arise in terms of potential blockers around the RLS -&gt; rust-analyzer transition</p>",
        "id": 196184934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588601519
    },
    {
        "content": "<p>I think you created an issue for that?</p>",
        "id": 196184987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588601524
    },
    {
        "content": "<p>Yes, there's currently one issue which is sort of grab-bag for everything</p>",
        "id": 196185101,
        "sender_full_name": "matklad",
        "timestamp": 1588601568
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/4224\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/4224\">https://github.com/rust-analyzer/rust-analyzer/issues/4224</a></p>",
        "id": 196185145,
        "sender_full_name": "matklad",
        "timestamp": 1588601583
    },
    {
        "content": "<p>(the same issue)</p>",
        "id": 196185153,
        "sender_full_name": "matklad",
        "timestamp": 1588601587
    },
    {
        "content": "<p>We currently don't do any kind of organized tracking. Should probably do that, though I kind of want to tackle the technical issue of custom edit command first.</p>",
        "id": 196185317,
        "sender_full_name": "matklad",
        "timestamp": 1588601643
    },
    {
        "content": "<p>Oh, we also briefly chatted with <span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span> about merging the VS Code extensions.</p>",
        "id": 196185372,
        "sender_full_name": "matklad",
        "timestamp": 1588601667
    },
    {
        "content": "<p>One think we are debated in the moment is where this unified VS Code extension should live -- at the moment its in the separate repo, but rust-analyzer one is in-tree</p>",
        "id": 196185480,
        "sender_full_name": "matklad",
        "timestamp": 1588601708
    },
    {
        "content": "<p>There’s also WIP to support RA in the RLS extension, which should not require much work to be in an acceptable state</p>",
        "id": 196185857,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588601844
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span> that's sweet! Is there a link?</p>",
        "id": 196185914,
        "sender_full_name": "matklad",
        "timestamp": 1588601864
    },
    {
        "content": "<p>Nothing shippable nor uploaded upstream, just hacking away locally</p>",
        "id": 196186069,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588601919
    },
    {
        "content": "<p>Also, one thing I want to note that, after switching Chalk to recursive solver, I enjoy using rust-analyzer so much more. Like, it doesn't feel like hit-and-miss anymore, it's <em>mostly</em> hit, and now, when, eg, I don't get completions I expect, I start to look for bug in my code and not a bug in rust-analyzer :D</p>",
        "id": 196186101,
        "sender_full_name": "matklad",
        "timestamp": 1588601934
    },
    {
        "content": "<p>I’ll link whenever I have something working, which will be this week</p>",
        "id": 196186112,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1588601939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> does using a snippet representation get you around the need for a custom LSP request?</p>",
        "id": 196186465,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1588602074
    },
    {
        "content": "<p>sort of</p>",
        "id": 196186525,
        "sender_full_name": "matklad",
        "timestamp": 1588602111
    },
    {
        "content": "<p>we'll be able to reuse \"standard\" API, but, because snippets are not supported in edits yet, we'd have to hack our custom handler for a standard command</p>",
        "id": 196186662,
        "sender_full_name": "matklad",
        "timestamp": 1588602149
    },
    {
        "content": "<p>(natutally, if client advertises the capability)</p>",
        "id": 196186683,
        "sender_full_name": "matklad",
        "timestamp": 1588602161
    },
    {
        "content": "<p>@matklad semi related: we still need to be able to change server caps based on the client</p>",
        "id": 196188934,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1588603035
    },
    {
        "content": "<p>Hey, I won't be able to make this sync up, though the release is up :)</p>",
        "id": 197151694,
        "sender_full_name": "matklad",
        "timestamp": 1589206734
    },
    {
        "content": "<p>More generally, I am doing some client work this week, so I won't be fully available :-)</p>",
        "id": 197154451,
        "sender_full_name": "matklad",
        "timestamp": 1589207912
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> it's sync-up time!</p>",
        "id": 197940423,
        "sender_full_name": "matklad",
        "timestamp": 1589811269
    },
    {
        "content": "<p>Today's changelog is here: <a href=\"https://rust-analyzer.github.io/thisweek/2020/05/18/changelog-25.html\">https://rust-analyzer.github.io/thisweek/2020/05/18/changelog-25.html</a></p>",
        "id": 197940511,
        "sender_full_name": "matklad",
        "timestamp": 1589811301
    },
    {
        "content": "<p>I've also blogged about my vision for longer-term plans here: <a href=\"https://rust-analyzer.github.io/blog/2020/05/18/next-few-years.html\">https://rust-analyzer.github.io/blog/2020/05/18/next-few-years.html</a></p>",
        "id": 197940591,
        "sender_full_name": "matklad",
        "timestamp": 1589811338
    },
    {
        "content": "<p><em>years</em>?!</p>",
        "id": 197940669,
        "sender_full_name": "simulacrum",
        "timestamp": 1589811369
    },
    {
        "content": "<p>Well, I don't usually make plans, but when I do....</p>",
        "id": 197940736,
        "sender_full_name": "matklad",
        "timestamp": 1589811405
    },
    {
        "content": "<p>Though, realistically, I feel that we'll need a few years to get to a steady state with respect to IDE support.</p>",
        "id": 197940884,
        "sender_full_name": "matklad",
        "timestamp": 1589811469
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> is the <code>TextMate</code> plugin maintained in the r-a repo?</p>",
        "id": 197940959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589811484
    },
    {
        "content": "<p>I guess, the lower bound is \"time to merge chalk\" :)</p>",
        "id": 197940975,
        "sender_full_name": "matklad",
        "timestamp": 1589811492
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> that's not <em>plugin</em>, it's a \"grammar\" file in a format, which is called TextMate</p>",
        "id": 197941063,
        "sender_full_name": "matklad",
        "timestamp": 1589811522
    },
    {
        "content": "<p>(have we merged the RFC yet? I think I have to ping people again)</p>",
        "id": 197941078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589811525
    },
    {
        "content": "<p>I see</p>",
        "id": 197941087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589811529
    },
    {
        "content": "<p>/me pours one out for the TextMate editor</p>",
        "id": 197941105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589811539
    },
    {
        "content": "<p>Nope, the RFC is in FCP RN I think</p>",
        "id": 197941114,
        "sender_full_name": "matklad",
        "timestamp": 1589811542
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/4431\">https://github.com/rust-analyzer/rust-analyzer/pull/4431</a> is interesting</p>",
        "id": 197941211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589811586
    },
    {
        "content": "<p>the \"don't garbage collect\" in particular</p>",
        "id": 197941227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589811594
    },
    {
        "content": "<p>maybe I don't understand what you mean by that</p>",
        "id": 197941332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589811622
    },
    {
        "content": "<p>So, used to store results of proc macro expansion in LRU</p>",
        "id": 197941388,
        "sender_full_name": "matklad",
        "timestamp": 1589811649
    },
    {
        "content": "<p>This breaks if proc-macro is non-deterministic (breaks as in, we get panics in rust-analyzer afterwards)</p>",
        "id": 197941454,
        "sender_full_name": "matklad",
        "timestamp": 1589811680
    },
    {
        "content": "<p>I'm skimming blog post btw, lots of interesting things to chew on there</p>",
        "id": 197941484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589811698
    },
    {
        "content": "<p>it reminds me that I want to put in more time trying to create a \"prioritization document\" for compiler team</p>",
        "id": 197941507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589811712
    },
    {
        "content": "<p>In terms of RFC progress:</p>\n<ul>\n<li><span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span> added initial support for rust-analyzer to RLS extensions</li>\n<li>I implemented initial version of code actions which do not rely on our custom extension</li>\n<li><span class=\"user-mention\" data-user-id=\"203366\">@Jeremy Kolb</span> fixed a bunch of various minor spec incompatabilities</li>\n</ul>",
        "id": 197941810,
        "sender_full_name": "matklad",
        "timestamp": 1589811849
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/197941454\">said</a>:</p>\n<blockquote>\n<p>This breaks if proc-macro is non-deterministic (breaks as in, we get panics in rust-analyzer afterwards)</p>\n</blockquote>\n<p>actually can you say a bit more about this?</p>",
        "id": 197941857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589811874
    },
    {
        "content": "<p>that surprises me mildly</p>",
        "id": 197941865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589811880
    },
    {
        "content": "<p>SO, let's say proc-macro produces <code>struct Foo; enum Bar;</code></p>",
        "id": 197941893,
        "sender_full_name": "matklad",
        "timestamp": 1589811902
    },
    {
        "content": "<p>I think I would expect that, if the procedural macro result is dropped, then we would re-execute it, and if it comes up with a different answer this time, it would be marked \"red\", which would in turn cause further ...</p>",
        "id": 197941903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589811905
    },
    {
        "content": "<p>oh, hmm, maybe I see it</p>",
        "id": 197941922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589811919
    },
    {
        "content": "<p>We intern id for <code>Foo</code> which says that it's the first thing in a file</p>",
        "id": 197941947,
        "sender_full_name": "matklad",
        "timestamp": 1589811932
    },
    {
        "content": "<p>we than LRU the tree out</p>",
        "id": 197941967,
        "sender_full_name": "matklad",
        "timestamp": 1589811942
    },
    {
        "content": "<p>the asserts perhaps come from us concluding that, because all inputs have not changed, the output can't have changed</p>",
        "id": 197941970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589811943
    },
    {
        "content": "<p>inputs have <em>not</em> changed</p>",
        "id": 197942041,
        "sender_full_name": "matklad",
        "timestamp": 1589811963
    },
    {
        "content": "<p>sorry, I meant to write <em>have not</em></p>",
        "id": 197942051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589811971
    },
    {
        "content": "<p>Basically, the changed_at and  validated_at are up to date, it's just that the value is missing.</p>",
        "id": 197942081,
        "sender_full_name": "matklad",
        "timestamp": 1589811993
    },
    {
        "content": "<p>ok, so, if you have a graph like this</p>\n<p>Input -&gt; ProcMacro -&gt; Derived</p>",
        "id": 197942091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812001
    },
    {
        "content": "<p>and Derived is cached</p>",
        "id": 197942099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812005
    },
    {
        "content": "<p>we might reuse that cached result</p>",
        "id": 197942111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812009
    },
    {
        "content": "<p>then demand ProcMacro and re-execute</p>",
        "id": 197942124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812015
    },
    {
        "content": "<p>but the two are now inconsistent</p>",
        "id": 197942131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812021
    },
    {
        "content": "<p>sure, that makes sense</p>",
        "id": 197942137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812026
    },
    {
        "content": "<p>right so we are effectively treating <code>ProcMacro</code> as \"volatile</p>",
        "id": 197942196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812061
    },
    {
        "content": "<p>ie., the salsa way should be to treat it as having an untracked input</p>",
        "id": 197942207,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812069
    },
    {
        "content": "<p>(this is precisely why we don't collect volatile things until a new round)</p>",
        "id": 197942225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812081
    },
    {
        "content": "<p>correct?</p>",
        "id": 197942276,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812087
    },
    {
        "content": "<p>Not sure: untracked input would force us to re-execute it on every change, right?</p>",
        "id": 197942339,
        "sender_full_name": "matklad",
        "timestamp": 1589812118
    },
    {
        "content": "<p>Ie, it would be sound, but it would be inefficient, in a pretty horrible way, as proc macros are the things which we really want to cache agressively.</p>",
        "id": 197942455,
        "sender_full_name": "matklad",
        "timestamp": 1589812184
    },
    {
        "content": "<p>yes correct</p>",
        "id": 197942482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812196
    },
    {
        "content": "<p>I think it's the sound thing</p>",
        "id": 197942544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812210
    },
    {
        "content": "<p>an alternative would be</p>",
        "id": 197942591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812228
    },
    {
        "content": "<p>given durabilities and all</p>",
        "id": 197942601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812235
    },
    {
        "content": "<p>to have them take an input from some \"pseudo-input\" with high durability, meant to represent randomness</p>",
        "id": 197942630,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812250
    },
    {
        "content": "<p>anyway ok I getthe problem, it's an intersting one, and I think there  is a kind of <em>contract</em> here that we should be trying to specify</p>",
        "id": 197942674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812268
    },
    {
        "content": "<p>i.e., do we expect proc macros to be deterministic, and how much do we \"tolerate\" them when they are not?</p>",
        "id": 197942710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812282
    },
    {
        "content": "<p>the batch compiler cares too after all</p>",
        "id": 197942736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812291
    },
    {
        "content": "<p>Yeah... I feel like the answer is \"non deterministic proc macro is a bug\", but that really needs a WM to enforce</p>",
        "id": 197942860,
        "sender_full_name": "matklad",
        "timestamp": 1589812325
    },
    {
        "content": "<p>it seems like we're saying: </p>\n<ul>\n<li>we expect them to be deterministic, and it is a bug to do otherwise</li>\n<li><em>but</em> we try to be resilient, and hence if we are forced to re-execute, we assume that the output may change</li>\n</ul>",
        "id": 197942861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812325
    },
    {
        "content": "<p>which isn't <em>really</em> a concept that salsa <em>quite</em> has, I think, durabilities don't <em>quite</em> capture it</p>",
        "id": 197942892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812345
    },
    {
        "content": "<p>Yeah. To be clear, I think our current scheme where we just don't LRU is also sound.</p>",
        "id": 197942958,
        "sender_full_name": "matklad",
        "timestamp": 1589812378
    },
    {
        "content": "<p>I think it's sound. The question would be \"what should you do if you did LRU\"</p>",
        "id": 197943003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812400
    },
    {
        "content": "<p>(as a reminder, we don't run any other form of GC besides LRU, which seems super wrong, but also seems to work OK?)</p>",
        "id": 197943007,
        "sender_full_name": "matklad",
        "timestamp": 1589812403
    },
    {
        "content": "<p>and the answer \"assume result will change\"</p>",
        "id": 197943008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812404
    },
    {
        "content": "<p>( i.e., you have to re-execute and compare a hash or whatever, not that we have hashes, in order to re-use later results )</p>",
        "id": 197943067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812434
    },
    {
        "content": "<p>Hm, not sure</p>",
        "id": 197943127,
        "sender_full_name": "matklad",
        "timestamp": 1589812451
    },
    {
        "content": "<p>I would say you'd have to somehow proactively tear down depndent queries?</p>",
        "id": 197943187,
        "sender_full_name": "matklad",
        "timestamp": 1589812475
    },
    {
        "content": "<p>the alternative seems to be ICEing</p>",
        "id": 197943200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812480
    },
    {
        "content": "<p>should there be an RFC or at least some documentation in the reference that explicitly says that proc macros should be deterministic (even if we can't enforce it)? also relatedly, it's not defined anywhere whether proc macros are allowed to e.g. read files or the network, or is it?</p>",
        "id": 197943251,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1589812504
    },
    {
        "content": "<p>I'm not saying it would have to be <em>proactive</em></p>",
        "id": 197943252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812504
    },
    {
        "content": "<p>I guess, what I am trying to say is that we just can't LRU proc macros.</p>",
        "id": 197943259,
        "sender_full_name": "matklad",
        "timestamp": 1589812506
    },
    {
        "content": "<p>I don't think we're disagreeing in particular</p>",
        "id": 197943294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812532
    },
    {
        "content": "<p>I do feel an RFC is appropriate</p>",
        "id": 197943300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812536
    },
    {
        "content": "<p>I think what I'm saying is:</p>",
        "id": 197943317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812543
    },
    {
        "content": "<p>/me thinks how to phrase it</p>",
        "id": 197943420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812583
    },
    {
        "content": "<p>so we have a few options</p>",
        "id": 197943496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812627
    },
    {
        "content": "<p>we can say that</p>\n<ul>\n<li>procedural macros must be deterministic</li>\n</ul>",
        "id": 197943506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812635
    },
    {
        "content": "<p>if that were <em>really</em> true, then you could LRU</p>",
        "id": 197943526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812645
    },
    {
        "content": "<p>but we know it's not true in practice, for a variety of reasons</p>",
        "id": 197943541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812655
    },
    {
        "content": "<p>we can still <em>say</em> it, but it seems like we're not willing to ICE and crash as a result of a buggy proc macro</p>",
        "id": 197943599,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812682
    },
    {
        "content": "<p>so what we can say instead is:</p>\n<ul>\n<li>procedural macros must produce \"equivalent\" output given equal inputs. </li>\n</ul>\n<p>This means we reserve the right not to re-run them, essentially, and to re-use the cached output.</p>",
        "id": 197943673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812717
    },
    {
        "content": "<p>However, if we don't have cached output (or we throw it away, or whatever), then we can't really assume they would produce precisely the same output the next time.</p>",
        "id": 197943705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812738
    },
    {
        "content": "<p>This is, if nothing else, a matter of empirical observation.</p>",
        "id": 197943767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812771
    },
    {
        "content": "<p>We might still say that it's <em>wrong</em> even if we <em>tolerate</em> it, but I guess that people will continue to write buggy proc macros that we have to cope with unless we die a horrible death when they do.</p>",
        "id": 197943873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812809
    },
    {
        "content": "<p>Yup, I agree with this characterisation.</p>",
        "id": 197943898,
        "sender_full_name": "matklad",
        "timestamp": 1589812818
    },
    {
        "content": "<p>And yeah, \"dying a horrible death\" is not really an option for IDE unfortunately</p>",
        "id": 197944024,
        "sender_full_name": "matklad",
        "timestamp": 1589812869
    },
    {
        "content": "<p>I do think this should be in an RFC, I think it'd be great to summarize the experiences, and perhaps also note some of the implications for use cases like network access :)</p>",
        "id": 197944077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812894
    },
    {
        "content": "<p>e.g., a procedural macro that does that sort of thing probably needs some way to \"explicitly\" change an input if they want to force a refresh</p>",
        "id": 197944123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812914
    },
    {
        "content": "<p>In particular, the batch compiler</p>",
        "id": 197944179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812927
    },
    {
        "content": "<p>ought to be able to re-use proc macro results without re-executing as well</p>",
        "id": 197944201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812936
    },
    {
        "content": "<p>and since it persists to disk, that could last a lot longer</p>",
        "id": 197944230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812952
    },
    {
        "content": "<p>I am not sure this needs to be the RLS/rust-analyzer RFC though....</p>",
        "id": 197944248,
        "sender_full_name": "matklad",
        "timestamp": 1589812961
    },
    {
        "content": "<p>I .. see it as a compiler team RFC?</p>",
        "id": 197944277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589812975
    },
    {
        "content": "<p>yup. I believe <span class=\"user-mention\" data-user-id=\"213049\">@Jeremy Fitzhardinge</span> was also interested in the topic of deterministic proc macros.</p>",
        "id": 197944344,
        "sender_full_name": "matklad",
        "timestamp": 1589813003
    },
    {
        "content": "<p>I guess I see rust-analyzer as becoming a compiler team project, and hence this sort of decision applies to the \"unified architecture\" we are ultimately envisioning</p>",
        "id": 197944357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589813010
    },
    {
        "content": "<p>Yes, it obviously applies to questions of distribution as well</p>",
        "id": 197944397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589813033
    },
    {
        "content": "<p>What do you mean by \"distribution\"?</p>",
        "id": 197944556,
        "sender_full_name": "matklad",
        "timestamp": 1589813078
    },
    {
        "content": "<p>Sorry, I meant distributing builds across a cluster or something</p>",
        "id": 197944702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589813135
    },
    {
        "content": "<p>parallelizing</p>",
        "id": 197944715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589813142
    },
    {
        "content": "<p>I think that's <span class=\"user-mention\" data-user-id=\"213049\">@Jeremy Fitzhardinge</span>'s \"angle\" here</p>",
        "id": 197944742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589813157
    },
    {
        "content": "<p>it's worth pointing out actually that the rule we just gave above</p>",
        "id": 197944808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589813171
    },
    {
        "content": "<p>is probably already embodied in cargo</p>",
        "id": 197944815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589813176
    },
    {
        "content": "<p>Ahh, yeah, cloud build systems.</p>",
        "id": 197944819,
        "sender_full_name": "matklad",
        "timestamp": 1589813180
    },
    {
        "content": "<p>i.e., cargo won't rebuild your crate</p>",
        "id": 197944847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589813192
    },
    {
        "content": "<p>unless it seems some diffs</p>",
        "id": 197944860,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589813198
    },
    {
        "content": "<p>proc macros do not have anyway to output dependencies to cargo today, yes</p>",
        "id": 197944899,
        "sender_full_name": "simulacrum",
        "timestamp": 1589813218
    },
    {
        "content": "<p>I remember having some problems with this actualy because I was abusing proc macros to generate tests by scraping files from the file system :)</p>",
        "id": 197944906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589813221
    },
    {
        "content": "<p>(was reading the extended build systems à la carte on the weekend, it is still good read on salsa-like issues)</p>",
        "id": 197944910,
        "sender_full_name": "matklad",
        "timestamp": 1589813222
    },
    {
        "content": "<p>I haven't read the extended version yet...</p>",
        "id": 197944937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589813234
    },
    {
        "content": "<p>So who is going to write the RFC? :P</p>",
        "id": 197945011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589813265
    },
    {
        "content": "<p>it'd be good to at least take some notes on this conversation somewhere</p>",
        "id": 197945029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589813274
    },
    {
        "content": "<p>I guess, I can draft some notes and maybe collaborate with <span class=\"user-mention\" data-user-id=\"213049\">@Jeremy Fitzhardinge</span> ?</p>",
        "id": 197945230,
        "sender_full_name": "matklad",
        "timestamp": 1589813352
    },
    {
        "content": "<p>I am not sure we can really write an RFC which can be implemented today, but \"declaration of intent\" RFC seems good</p>",
        "id": 197945294,
        "sender_full_name": "matklad",
        "timestamp": 1589813380
    },
    {
        "content": "<p>In my view the RFC is clarifying the <strong>expectations</strong>, it's not something that can be \"implemented\" in any one place (multiple tools etc may come to depend onit)</p>",
        "id": 197945470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589813436
    },
    {
        "content": "<p>Hm I would probably feel better about such an rfc if it suggested adding proc macro apis to explicitly indicate dependencies</p>",
        "id": 197945814,
        "sender_full_name": "simulacrum",
        "timestamp": 1589813595
    },
    {
        "content": "<p>I believe <span class=\"user-mention\" data-user-id=\"132829\">@Christopher Durham</span> has done some work on adding <em>file</em> dependencies to proc-macros?</p>",
        "id": 197946021,
        "sender_full_name": "matklad",
        "timestamp": 1589813676
    },
    {
        "content": "<p>If you count reminding people that I want an API for it as work, then yes</p>",
        "id": 197954102,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1589816883
    },
    {
        "content": "<p>The \"minimum\" API for proc-macro external dependencies would be just to bolt on the buildscript <code>cargo:rerun-if-changed</code> annotations</p>",
        "id": 197954627,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1589817143
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span>  <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> !</p>",
        "id": 198671847,
        "sender_full_name": "matklad",
        "timestamp": 1590415302
    },
    {
        "content": "<p>This week's changelog: <a href=\"https://rust-analyzer.github.io/thisweek/2020/05/25/changelog-26.html\">https://rust-analyzer.github.io/thisweek/2020/05/25/changelog-26.html</a></p>",
        "id": 198671856,
        "sender_full_name": "matklad",
        "timestamp": 1590415312
    },
    {
        "content": "<p>This week we've mostly worked on intrnal stuff:</p>\n<ul>\n<li>we landed another Chalk upgrade, which made our type inference more precise</li>\n<li>we refactored a lot of LSP-layer stuff. In particular, we now use snippets to specify cursor position</li>\n<li>more generally, we documented (and cleaned up in the process) almost all our extensions to the protocol</li>\n</ul>",
        "id": 198672109,
        "sender_full_name": "matklad",
        "timestamp": 1590415456
    },
    {
        "content": "<p>Oh, the FCP for the RFC has ended, so <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> , do want to hit the merge button? </p>\n<p><a href=\"https://github.com/rust-lang/rfcs/pull/2912\">https://github.com/rust-lang/rfcs/pull/2912</a></p>",
        "id": 198672788,
        "sender_full_name": "matklad",
        "timestamp": 1590415889
    },
    {
        "content": "<p>There was an additional concern about singling out VS Code as the primary implementation, and an additional technical question about the location of VS Code plugin.</p>",
        "id": 198672925,
        "sender_full_name": "matklad",
        "timestamp": 1590415965
    },
    {
        "content": "<p>For location, I think moving rust-analyzer vs code plugin to the existing rls-vscode repo makes sense, at least until we deprecate RLS.</p>",
        "id": 198672983,
        "sender_full_name": "matklad",
        "timestamp": 1590416003
    },
    {
        "content": "<p>You haven't mentioned \"toggle inlay hints\" and inlayHinst in lsp extensions</p>",
        "id": 198672994,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1590416008
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"258149\">@std::Veetaha</span> I belive they are for the next release?</p>",
        "id": 198673060,
        "sender_full_name": "matklad",
        "timestamp": 1590416042
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/kiECtVqq8BBkT-CkwxbzRA8J/image.png\">image.png</a> ?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/kiECtVqq8BBkT-CkwxbzRA8J/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/kiECtVqq8BBkT-CkwxbzRA8J/image.png\"></a></div>",
        "id": 198673135,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1590416086
    },
    {
        "content": "<p>We now publish release from last night's nightly, so PRs merged today will be released next week</p>",
        "id": 198673143,
        "sender_full_name": "matklad",
        "timestamp": 1590416090
    },
    {
        "content": "<p>(and the tag is just wrong :D )</p>",
        "id": 198673158,
        "sender_full_name": "matklad",
        "timestamp": 1590416102
    },
    {
        "content": "<p>wait, no, if the tag is wrong, that means that changelogs are wrong <span aria-label=\"fear\" class=\"emoji emoji-1f628\" role=\"img\" title=\"fear\">:fear:</span> ?</p>",
        "id": 198673220,
        "sender_full_name": "matklad",
        "timestamp": 1590416147
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/4319\">https://github.com/rust-analyzer/rust-analyzer/issues/4319</a></p>",
        "id": 198673302,
        "sender_full_name": "matklad",
        "timestamp": 1590416181
    },
    {
        "content": "<p>Should really look into fixing that....</p>",
        "id": 198673315,
        "sender_full_name": "matklad",
        "timestamp": 1590416188
    },
    {
        "content": "<p>As part of the \"two step\" LSP initialization I also snuck in server info so the server name and version are passed to the client. We should be able to use that for bug tracking</p>",
        "id": 198686061,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1590424927
    },
    {
        "content": "<p>We also fall back properly on code actions if using an older client (not sure if that fixed anything in the wild but if someone's code actions mysteriously start showing up now....)</p>",
        "id": 198686137,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1590425011
    },
    {
        "content": "<blockquote>\n<p>We should be able to use that for bug tracking</p>\n</blockquote>\n<p>Don't we already have \"Rust Analyzer: server version\" command for that?</p>",
        "id": 198688384,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1590427124
    },
    {
        "content": "<p>Definitely. But if someone dumps logs of LSP requests or something...</p>",
        "id": 198754909,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1590496597
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> !</p>",
        "id": 199373559,
        "sender_full_name": "matklad",
        "timestamp": 1591020618
    },
    {
        "content": "<p>We have a new release: <a href=\"https://rust-analyzer.github.io/thisweek/2020/06/01/changelog-27.html\">https://rust-analyzer.github.io/thisweek/2020/06/01/changelog-27.html</a></p>",
        "id": 199373573,
        "sender_full_name": "matklad",
        "timestamp": 1591020625
    },
    {
        "content": "<p>I can name two highlights of the week (but maybe I am missing some)</p>",
        "id": 199373643,
        "sender_full_name": "matklad",
        "timestamp": 1591020662
    },
    {
        "content": "<ul>\n<li>chalk updates and incremental improvements to type inference, which mean that there are fewer and fewer cases where we fail to infer types</li>\n</ul>",
        "id": 199373691,
        "sender_full_name": "matklad",
        "timestamp": 1591020700
    },
    {
        "content": "<ul>\n<li>improved manual, which contans the full(-ish) list of features, with links to the source: <a href=\"https://rust-analyzer.github.io/manual.html#features\">https://rust-analyzer.github.io/manual.html#features</a></li>\n</ul>",
        "id": 199373808,
        "sender_full_name": "matklad",
        "timestamp": 1591020752
    },
    {
        "content": "<p>The RFC is now merged, so I think we should now tackle the next steps of merging RLS and rust-analyzer:</p>\n<ul>\n<li>distribution via rustup</li>\n<li>unifing the extensions</li>\n</ul>",
        "id": 199373934,
        "sender_full_name": "matklad",
        "timestamp": 1591020837
    },
    {
        "content": "<p>I think we can do 1. right now (I guess I need to ask <span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span> what are specific steps here).</p>\n<p>For 2., I'd love to clean up our inlay hints and runnables LSP extensions first, and then we should be ready to go</p>",
        "id": 199374067,
        "sender_full_name": "matklad",
        "timestamp": 1591020888
    },
    {
        "content": "<p>I also would like to opimize the meta process around rust-analyzer, which sounds hard:</p>",
        "id": 199374110,
        "sender_full_name": "matklad",
        "timestamp": 1591020911
    },
    {
        "content": "<ul>\n<li>It seems like we no longer have enough review bandwidth, which, on the one hand, a good problem to have, but, on the other hand, is still a problem :-(</li>\n</ul>",
        "id": 199374173,
        "sender_full_name": "matklad",
        "timestamp": 1591020941
    },
    {
        "content": "<ul>\n<li>it seems like it's hard to share \"institutional\" knowledge about how rust-analyzer works. That is, during reviews I sometimes find myself saying things like \"we shouldn't add dependency on module X to module Y here\", but I think there's no way a new contributor can figure this out.</li>\n</ul>",
        "id": 199374350,
        "sender_full_name": "matklad",
        "timestamp": 1591021018
    },
    {
        "content": "<p>hmm</p>",
        "id": 199374385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591021046
    },
    {
        "content": "<p>(sorry, was reading manuals)</p>",
        "id": 199374398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591021053
    },
    {
        "content": "<p>In general, i am interested in hearing how we can more effectively channel a lot of work people are willing to do on rust-analyzer :D</p>",
        "id": 199374400,
        "sender_full_name": "matklad",
        "timestamp": 1591021053
    },
    {
        "content": "<p>those are indeed hard problems :)</p>",
        "id": 199374406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591021057
    },
    {
        "content": "<p>I feel like the \"trick\" with reviewer bandwidth is to have more reviewers</p>",
        "id": 199374441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591021080
    },
    {
        "content": "<p>which... as you can tell by a glance at rustc's list of pending PRs... is sometimes not so easy</p>",
        "id": 199374529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591021118
    },
    {
        "content": "<p>Yeah, and the trick to \"more reviewers\" is sharing \"institutional knowledge\" :)</p>",
        "id": 199374579,
        "sender_full_name": "matklad",
        "timestamp": 1591021148
    },
    {
        "content": "<p>lol, yes,</p>",
        "id": 199374587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591021153
    },
    {
        "content": "<p>I feel like efforts like the rustc-dev-guide (and chalk book) are maybe helpful here but I'm not 100% sure how much</p>",
        "id": 199374615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591021176
    },
    {
        "content": "<p>this specific example -- showing some kind of \"structure\" between models that is latent in the code -- is an interesting one that has sort of prodded me to want to use more crates than I would otherwise have used</p>",
        "id": 199374710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591021212
    },
    {
        "content": "<p>(we're debating exactly this question around chalk)</p>",
        "id": 199374737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591021234
    },
    {
        "content": "<p>I personally don't worry a lot about \"code quality\" aspect of review -- as long as code has tests, it should be fine to refactor it in subsequent PRs (but I am willing to change my optinion here, if people think otherwise). </p>\n<p>What I worry more is drive-by \"architecture\" changes, which expand API of certain things, in ways which are not always appropriate. But figuring out what's appropriate is kind of hard...</p>",
        "id": 199374754,
        "sender_full_name": "matklad",
        "timestamp": 1591021251
    },
    {
        "content": "<p>/me nods</p>",
        "id": 199374827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591021296
    },
    {
        "content": "<p>to what extent do you think the arch. can be written down or documented,</p>",
        "id": 199374910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591021327
    },
    {
        "content": "<p>vs you not really knowing what those constraints are until you see them violated :)</p>",
        "id": 199374934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591021340
    },
    {
        "content": "<p>We already have it documented, in architecture.md document</p>",
        "id": 199374946,
        "sender_full_name": "matklad",
        "timestamp": 1591021345
    },
    {
        "content": "<p>The problem is, I haven't updated it in a year or so...</p>",
        "id": 199374970,
        "sender_full_name": "matklad",
        "timestamp": 1591021359
    },
    {
        "content": "<p>My immediate action items are:</p>\n<ul>\n<li>refresh the doc, so that it makes sense</li>\n<li>make a point to always write down every \"architecture\" comment I do during review</li>\n</ul>",
        "id": 199375025,
        "sender_full_name": "matklad",
        "timestamp": 1591021399
    },
    {
        "content": "<p>I am also entertaining the idea of generating architecture docs from code, the same way we now generate feature documentation</p>",
        "id": 199375061,
        "sender_full_name": "matklad",
        "timestamp": 1591021431
    },
    {
        "content": "<p>interesting</p>",
        "id": 199375118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591021444
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 199375363,
        "sender_full_name": "Laurențiu",
        "timestamp": 1591021594
    },
    {
        "content": "<p>Also, orthogonally, I again was thinking about how I'd love salsa to be more like ECS (with entitities in flat vectors), and didn't come to any conclusions about what exactly do I want</p>",
        "id": 199375366,
        "sender_full_name": "matklad",
        "timestamp": 1591021597
    },
    {
        "content": "<p>I've been thinking about salsa too, not sure if you saw some of my notes</p>",
        "id": 199375406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591021620
    },
    {
        "content": "<p>I think not</p>",
        "id": 199375429,
        "sender_full_name": "matklad",
        "timestamp": 1591021634
    },
    {
        "content": "<p>I want to do a few things</p>",
        "id": 199375445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591021642
    },
    {
        "content": "<p>/me listens</p>",
        "id": 199375463,
        "sender_full_name": "matklad",
        "timestamp": 1591021654
    },
    {
        "content": "<p>one of them is to simplify the thread handling so that by default we assume queries are idempotent</p>",
        "id": 199375485,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591021670
    },
    {
        "content": "<p>meaning that if two threads start executing same query at same time it just runs twice</p>",
        "id": 199375534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591021685
    },
    {
        "content": "<p>with a side layer for declaring \"synchronized\" queries where that is inappropriate -- I think that rust-analyzer would need this around procedural macros</p>",
        "id": 199375557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591021707
    },
    {
        "content": "<p>(does rust-analyzer actually <em>run</em> procedural macros? I remember us talking about it at some point)</p>",
        "id": 199375569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591021718
    },
    {
        "content": "<p>Yup, we now run procedural macros!</p>",
        "id": 199375584,
        "sender_full_name": "matklad",
        "timestamp": 1591021728
    },
    {
        "content": "<p>(derive only)</p>",
        "id": 199375590,
        "sender_full_name": "matklad",
        "timestamp": 1591021732
    },
    {
        "content": "<p>I thought so</p>",
        "id": 199375595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591021733
    },
    {
        "content": "<p>anyway that is partly just to simplify the code but also</p>",
        "id": 199375612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591021745
    },
    {
        "content": "<blockquote>\n<p>need this around procedural macros</p>\n</blockquote>\n<p>And also around the main <code>crate_def_map</code> query</p>",
        "id": 199375627,
        "sender_full_name": "matklad",
        "timestamp": 1591021753
    },
    {
        "content": "<p>the more important change would be added support for \"fixed-point queries\" that can accommodate cycles</p>",
        "id": 199375644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591021766
    },
    {
        "content": "<p>which would allow us to move some of that logic out from chalk and into salsa</p>",
        "id": 199375668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591021777
    },
    {
        "content": "<p>and start to cache chalk queries</p>",
        "id": 199375673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591021781
    },
    {
        "content": "<p>I think it's \"quite doable\"</p>",
        "id": 199375683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591021787
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/199375627\">said</a>:</p>\n<blockquote>\n<p>And also around the main <code>crate_def_map</code> query</p>\n</blockquote>\n<p>say a bit more? what is this query?</p>",
        "id": 199375700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591021802
    },
    {
        "content": "<p>This query computes the set of names visible inside each module</p>",
        "id": 199375755,
        "sender_full_name": "matklad",
        "timestamp": 1591021817
    },
    {
        "content": "<p>So, import resolution and macro expansion</p>",
        "id": 199375771,
        "sender_full_name": "matklad",
        "timestamp": 1591021823
    },
    {
        "content": "<p>It is clear, at this point, that this is basically the single thing that matter to make IDE work well</p>",
        "id": 199375796,
        "sender_full_name": "matklad",
        "timestamp": 1591021845
    },
    {
        "content": "<p>Like, everything else you could do somehow, and it would work, because you can always do bite-sized chunks of work</p>",
        "id": 199375839,
        "sender_full_name": "matklad",
        "timestamp": 1591021870
    },
    {
        "content": "<p>why would it require sychronization</p>",
        "id": 199375853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591021876
    },
    {
        "content": "<p>because it's quite expensive?</p>",
        "id": 199375876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591021888
    },
    {
        "content": "<p>Yup</p>",
        "id": 199375881,
        "sender_full_name": "matklad",
        "timestamp": 1591021891
    },
    {
        "content": "<p>I feel it would be just expensive CPU time.</p>",
        "id": 199375887,
        "sender_full_name": "matklad",
        "timestamp": 1591021899
    },
    {
        "content": "<p>yeah, those are basically the two reasons to want to synchronize: expensive and/or not truly deterministic</p>",
        "id": 199375898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591021907
    },
    {
        "content": "<p>(I need to profile things, but my gut feeling is that the most expensive bit today is macro-by-example expansion, as that manipulates heavy data structures)</p>",
        "id": 199375991,
        "sender_full_name": "matklad",
        "timestamp": 1591021945
    },
    {
        "content": "<p>and it's not very incrementalizable, right?</p>",
        "id": 199376020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591021966
    },
    {
        "content": "<p>Hm, no, each macro expansion incrementalizes well-enough</p>",
        "id": 199376074,
        "sender_full_name": "matklad",
        "timestamp": 1591021994
    },
    {
        "content": "<p>I wonder if it would make sense to talk through how it works again</p>",
        "id": 199376081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591021997
    },
    {
        "content": "<p>no, sorry, I meant the query as a whole</p>",
        "id": 199376097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591022005
    },
    {
        "content": "<p>I am thinking more about from-scrach perf, and the amount of stuff we need to store in memory</p>",
        "id": 199376103,
        "sender_full_name": "matklad",
        "timestamp": 1591022008
    },
    {
        "content": "<p>The query as a whole is incrementalizable well enough I would think</p>",
        "id": 199376162,
        "sender_full_name": "matklad",
        "timestamp": 1591022041
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/199375839\">said</a>:</p>\n<blockquote>\n<p>Like, everything else you could do somehow, and it would work, because you can always do bite-sized chunks of work</p>\n</blockquote>\n<p>maybe I didn't understand this sentence</p>",
        "id": 199376234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591022060
    },
    {
        "content": "<p>Everything else works on either per-file or per-function basis</p>",
        "id": 199376285,
        "sender_full_name": "matklad",
        "timestamp": 1591022083
    },
    {
        "content": "<p>And is embarassigbly parallel and easy to make lazy</p>",
        "id": 199376330,
        "sender_full_name": "matklad",
        "timestamp": 1591022105
    },
    {
        "content": "<p>right so that suggests that it's not as incrementalizable as you might like</p>",
        "id": 199376359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591022125
    },
    {
        "content": "<p>maybe that is not the right word</p>",
        "id": 199376367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591022131
    },
    {
        "content": "<p>For resolving imports and expanding macros, I feel we just have to do it fast</p>",
        "id": 199376384,
        "sender_full_name": "matklad",
        "timestamp": 1591022141
    },
    {
        "content": "<p>what I meant is, if you need to resolve \"one name\" or something, do you ultimately have to do the entire crate etc</p>",
        "id": 199376412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591022157
    },
    {
        "content": "<p>I guess, the problem is \"the input is big\"</p>",
        "id": 199376428,
        "sender_full_name": "matklad",
        "timestamp": 1591022162
    },
    {
        "content": "<p>I don't think that this is an insurmontable problem -- processing the whole crate could be made fast enough, but it requires some careful coding</p>",
        "id": 199376565,
        "sender_full_name": "matklad",
        "timestamp": 1591022232
    },
    {
        "content": "<p>For example, we need to do something non-trivial to correctly parallelize the thing</p>",
        "id": 199376606,
        "sender_full_name": "matklad",
        "timestamp": 1591022258
    },
    {
        "content": "<p>that reminds me that</p>",
        "id": 199376628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591022272
    },
    {
        "content": "<p>if we did the things I wanted to do above re: chalk and salsa integration</p>",
        "id": 199376676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591022286
    },
    {
        "content": "<p>ideally, we should process all crates in parallel (which is constrained by DAG of deps), but we should also start parallely parsing each crate before fully resolving all deps</p>",
        "id": 199376690,
        "sender_full_name": "matklad",
        "timestamp": 1591022296
    },
    {
        "content": "<p>I think it would be parallelized as well and not require any state that salsa doesn't manage</p>",
        "id": 199376703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591022300
    },
    {
        "content": "<p>(and salsa would be much less heavyweight in terms of how it manages threads in the common case, since it would basically just be a map that you first read and only write at the end)</p>",
        "id": 199376767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591022344
    },
    {
        "content": "<p>More generally, I think the next big thing to tackle in rust-analyzer experiment is to make sure that we can saturate at least 4 cores :)</p>",
        "id": 199376780,
        "sender_full_name": "matklad",
        "timestamp": 1591022352
    },
    {
        "content": "<p>not particularly related to name resolution, although it'd be interesting to think whether the model can be stretched in some way to accommodate name resolution, since that is fundamentally also a fixed point process</p>",
        "id": 199376800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591022372
    },
    {
        "content": "<p>I don't think (right now) you are re-using anything in between name resolutions apart from the expansions of macros, is that right?</p>",
        "id": 199376852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591022402
    },
    {
        "content": "<p>Not really</p>",
        "id": 199376899,
        "sender_full_name": "matklad",
        "timestamp": 1591022416
    },
    {
        "content": "<p>There's an IR between syntax and name res</p>",
        "id": 199376909,
        "sender_full_name": "matklad",
        "timestamp": 1591022426
    },
    {
        "content": "<p>(the set of defs in the current file)</p>",
        "id": 199376932,
        "sender_full_name": "matklad",
        "timestamp": 1591022437
    },
    {
        "content": "<p>We re-use this IR</p>",
        "id": 199376944,
        "sender_full_name": "matklad",
        "timestamp": 1591022443
    },
    {
        "content": "<p>(And I have been itching to rewrite this IR for like three months already)</p>",
        "id": 199376983,
        "sender_full_name": "matklad",
        "timestamp": 1591022467
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/199374579\">said</a>:</p>\n<blockquote>\n<p>Yeah, and the trick to \"more reviewers\" is sharing \"institutional knowledge\" :)</p>\n</blockquote>\n<p>Yes I try when I have free time to review some PRs to help. But I'm not always confident and don't want to make a bad review. So this kind of documentations could be very useful :)</p>",
        "id": 199386698,
        "sender_full_name": "Coenen Benjamin",
        "timestamp": 1591027177
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/199373691\">said</a>:</p>\n<blockquote>\n<ul>\n<li>chalk updates and incremental improvements to type inference, which mean that there are fewer and fewer cases where we fail to infer types</li>\n</ul>\n</blockquote>\n<p>Chalk is moving so fast at the moment that I'm not even keeping up with integrating all the new features -- we still have to integrate the integer/float variables support, and array types for example (and opaque types are in progress, of course)</p>",
        "id": 199392671,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1591029969
    },
    {
        "content": "<p>Lol yes, <strong>everything</strong> moves so fast now :)</p>",
        "id": 199392774,
        "sender_full_name": "matklad",
        "timestamp": 1591030023
    },
    {
        "content": "<p>Btw the integer/float variable support is great. (From my experience updating the rustc integration)</p>",
        "id": 199396539,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591031845
    },
    {
        "content": "<p>My bandwidth has certainly reduced</p>",
        "id": 199396875,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1591032012
    },
    {
        "content": "<p>Maybe it will be the year of Rust IDE</p>",
        "id": 199396914,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1591032037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/199374067\">said</a>:</p>\n<blockquote>\n<p>For 2., I'd love to clean up our inlay hints and runnables LSP extensions first, and then we should be ready to go</p>\n</blockquote>\n<p>I'm a bit concerned with the current runnables status and usage. My gut feeling is that it is a cool feature currently used wrong.</p>\n<p>At first glance, it fits great for running tests, but it is not (IMHO). We need not only to run a test but also to gather results and show them in the UI or start a debugger. With runnables there are more problems than profit, especially with debug sessions.</p>\n<p>I think this concept is better suited for, for example, <code>cargo asm</code> or <code>cargo expand</code> integration. I.e. for any <em>shell</em> command that needs a context-specific function\\module name.</p>\n<p>Yes, this includes <code>cargo test...</code>. But it should not be the main way to run\\debug tests.</p>",
        "id": 199482796,
        "sender_full_name": "vsrs",
        "timestamp": 1591100613
    },
    {
        "content": "<p>@vsrs I think there's some truth to that. It would be nice if we could provide some sort of standard \"debugger engine hooks\" or conform to some standard \"test adapter api\" for those types of things.</p>",
        "id": 199483159,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1591100805
    },
    {
        "content": "<p>Hello <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> , it's time for another syncup</p>",
        "id": 200101518,
        "sender_full_name": "matklad",
        "timestamp": 1591625064
    },
    {
        "content": "<p>This week's changelog: <a href=\"https://rust-analyzer.github.io/thisweek/2020/06/08/changelog-28.html\">https://rust-analyzer.github.io/thisweek/2020/06/08/changelog-28.html</a></p>",
        "id": 200101634,
        "sender_full_name": "matklad",
        "timestamp": 1591625118
    },
    {
        "content": "<p>There's a bunch of stuff in this release, my personal favorite one is support for <code>-&gt; impl Trait</code> :)</p>",
        "id": 200101776,
        "sender_full_name": "matklad",
        "timestamp": 1591625173
    },
    {
        "content": "<p>Proceduraly, I did some work on documenting more of the review and contributing process, in hope to make the review process, ideally, embarrassingly parallel.</p>",
        "id": 200101929,
        "sender_full_name": "matklad",
        "timestamp": 1591625265
    },
    {
        "content": "<p>We also have an in-progress PR which adds rust-analyzer to rust-lang/rust project: <a href=\"https://github.com/rust-lang/rust/pull/72978#issuecomment-640163536\">https://github.com/rust-lang/rust/pull/72978#issuecomment-640163536</a></p>",
        "id": 200102026,
        "sender_full_name": "matklad",
        "timestamp": 1591625302
    },
    {
        "content": "<p>It fails with a completely bewildering issue, so if anyone knows whats going on, please speak up :)</p>",
        "id": 200102088,
        "sender_full_name": "matklad",
        "timestamp": 1591625328
    },
    {
        "content": "<p>This is so that we do builds/releases with rust-lang/rust infra or what?</p>",
        "id": 200102093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591625329
    },
    {
        "content": "<p>Yep, and shipping with rustup as an end-goal</p>",
        "id": 200102127,
        "sender_full_name": "matklad",
        "timestamp": 1591625349
    },
    {
        "content": "<p>We also switched to using chalk from <code>crates.io</code>, and I think that maybe it makes sense to talk though our long-term plan here?</p>",
        "id": 200102199,
        "sender_full_name": "matklad",
        "timestamp": 1591625396
    },
    {
        "content": "<p>Ie, to have the dreaded \"monorepo\" meeting, instead of postponing it :)</p>",
        "id": 200102283,
        "sender_full_name": "matklad",
        "timestamp": 1591625417
    },
    {
        "content": "<p>lol yes perhaps</p>",
        "id": 200102288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591625423
    },
    {
        "content": "<p>it's probably not \"the meeting\"</p>",
        "id": 200102336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591625447
    },
    {
        "content": "<p>at minimum, the time slot we normally use is not one that <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> is able to attend afaik</p>",
        "id": 200102379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591625466
    },
    {
        "content": "<p>and I know that he's got strong opinions</p>",
        "id": 200102404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591625482
    },
    {
        "content": "<p>and would probably like to take part in the discussion</p>",
        "id": 200102423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591625491
    },
    {
        "content": "<p>I personally am  focusing on non-cargo build systems and VFS right now -- it's about time we get these foundational bits right :)</p>",
        "id": 200102430,
        "sender_full_name": "matklad",
        "timestamp": 1591625495
    },
    {
        "content": "<p>that said, I personally think we can kick this can down the road a bit further</p>",
        "id": 200102469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591625513
    },
    {
        "content": "<blockquote>\n<p>that said, I personally think we can kick this can down the road a bit further</p>\n</blockquote>\n<p>Yeah, I think I agree :)</p>",
        "id": 200102556,
        "sender_full_name": "matklad",
        "timestamp": 1591625536
    },
    {
        "content": "<p>i.e., we're still gathering data on the new clippy submodule integration etc, though I think that <em>seems</em> to be working out fairly well</p>",
        "id": 200102557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591625539
    },
    {
        "content": "<p>and I think that offers a tantalizing middle ground</p>",
        "id": 200102598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591625560
    },
    {
        "content": "<p>plus the \"ship a chalk every week\" infra is quite new etc</p>",
        "id": 200102639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591625579
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/200102430\">said</a>:</p>\n<blockquote>\n<p>I personally am  focusing on non-cargo build systems and VFS right now -- it's about time we get these foundational bits right :)</p>\n</blockquote>\n<p>interesting</p>",
        "id": 200102651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591625584
    },
    {
        "content": "<p>say a bit more?</p>",
        "id": 200102678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591625595
    },
    {
        "content": "<p>(I think local imports and having to restart the server after project structure changes are the issues with most duplicates on the tracker.)</p>",
        "id": 200102726,
        "sender_full_name": "Laurențiu",
        "timestamp": 1591625625
    },
    {
        "content": "<p>For non-cargo use-cases -- mostly documenting and ironing out bugs in our rust-project.json thing:</p>\n<p><a href=\"https://rust-analyzer.github.io/manual.html#non-cargo-based-projects\">https://rust-analyzer.github.io/manual.html#non-cargo-based-projects</a></p>",
        "id": 200102747,
        "sender_full_name": "matklad",
        "timestamp": 1591625635
    },
    {
        "content": "<p>For VFS -- figuring out the right abstraction in terms of salsa queries and stored data, so that we can easily plug watchman and solve painful problems like dynamic changes to the set of crates.</p>",
        "id": 200102895,
        "sender_full_name": "matklad",
        "timestamp": 1591625686
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> there's actually something I want to chat about with respect to VFS and salsa</p>",
        "id": 200102939,
        "sender_full_name": "matklad",
        "timestamp": 1591625707
    },
    {
        "content": "<p>Question:</p>\n<p>Suppose user creates a new file in <code>src</code> directory, <code>foo.rs</code>. How do we figure out that we don't have to recheck every <code>mod m;</code> declaration form a standard library?</p>",
        "id": 200103097,
        "sender_full_name": "matklad",
        "timestamp": 1591625763
    },
    {
        "content": "<p>(in theory, new file in user's src directory <em>could</em> affect module structure of creates from std or <a href=\"http://crates.io\">crates.io</a>)</p>",
        "id": 200103150,
        "sender_full_name": "matklad",
        "timestamp": 1591625790
    },
    {
        "content": "<blockquote>\n<p>(I think local imports and having to restart the server after project structure changes are the issues with most duplicates on the tracker.)</p>\n</blockquote>\n<p>yeah, it feels like we get one of those almost every day <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> makes me almost want to look into local imports, but there's still some type system stuff I want to focus on</p>",
        "id": 200103396,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1591625891
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/200103150\">said</a>:</p>\n<blockquote>\n<p>(in theory, new file in user's src directory <em>could</em> affect module structure of creates from std or <a href=\"http://crates.io\">crates.io</a>)</p>\n</blockquote>\n<p>how?</p>",
        "id": 200103458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591625917
    },
    {
        "content": "<p>it could have had a <code>#[path]</code> attribute, for example</p>",
        "id": 200103539,
        "sender_full_name": "matklad",
        "timestamp": 1591625951
    },
    {
        "content": "<p>(maybe we should fork that out into its own topic but I feel like I'm a bit confused by the question so far) :)</p>",
        "id": 200103555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591625957
    },
    {
        "content": "<p>well, having a path attribute would not alter the structure of the a crate in std..?</p>",
        "id": 200103581,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591625968
    },
    {
        "content": "<p>it might read a file from a crate in std</p>",
        "id": 200103610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591625978
    },
    {
        "content": "<p>The module might go from unresolved to resolved state</p>",
        "id": 200103627,
        "sender_full_name": "matklad",
        "timestamp": 1591625990
    },
    {
        "content": "<p>I'm not sure what that means</p>",
        "id": 200103707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626014
    },
    {
        "content": "<p>yeah, let me rephrase this</p>",
        "id": 200103726,
        "sender_full_name": "matklad",
        "timestamp": 1591626024
    },
    {
        "content": "<p>So, when we create a new file, we need to recalculate <em>some</em> module declarations</p>",
        "id": 200103753,
        "sender_full_name": "matklad",
        "timestamp": 1591626039
    },
    {
        "content": "<p>Because this might be a file for a module which was unresolved before</p>",
        "id": 200103791,
        "sender_full_name": "matklad",
        "timestamp": 1591626052
    },
    {
        "content": "<p>OK, now I'm starting to see. You are saying:</p>",
        "id": 200103817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626069
    },
    {
        "content": "<p>How do we limit the set of module declrations we need to check?</p>",
        "id": 200103823,
        "sender_full_name": "matklad",
        "timestamp": 1591626071
    },
    {
        "content": "<p>Imagine that libstd had a <code>#[path]</code></p>",
        "id": 200103828,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626075
    },
    {
        "content": "<p>that somehow reached into the user's source directory</p>",
        "id": 200103844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626082
    },
    {
        "content": "<p>and they created a new file</p>",
        "id": 200103851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626085
    },
    {
        "content": "<p>obviously this is not the case</p>",
        "id": 200103872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626097
    },
    {
        "content": "<p>but how do we know this based on <em>salsa</em>?</p>",
        "id": 200103885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626105
    },
    {
        "content": "<p>Exactly!</p>",
        "id": 200103967,
        "sender_full_name": "matklad",
        "timestamp": 1591626126
    },
    {
        "content": "<p>Interesting question. I can imagine a few ways go about it, but it also reminds me of the question of \"lazy inputs\"</p>",
        "id": 200104053,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626162
    },
    {
        "content": "<p>My current thinking (and current impl) is that we construct explict \"sets of files\" outside of salsa, and that each crates has a single \"set of files\"</p>",
        "id": 200104093,
        "sender_full_name": "matklad",
        "timestamp": 1591626177
    },
    {
        "content": "<p>Ie, we upfront sepcify the super-set of files which can comprise the crate</p>",
        "id": 200104145,
        "sender_full_name": "matklad",
        "timestamp": 1591626206
    },
    {
        "content": "<p>And yes, this is inherently in tension with the desire to be lazy</p>",
        "id": 200104209,
        "sender_full_name": "matklad",
        "timestamp": 1591626237
    },
    {
        "content": "<blockquote>\n<p>Ie, we upfront sepcify the super-set of files which can comprise the crate</p>\n</blockquote>\n<p>And this is very much <em>not</em> how rustc works currently</p>",
        "id": 200104307,
        "sender_full_name": "matklad",
        "timestamp": 1591626267
    },
    {
        "content": "<p>right so ..</p>",
        "id": 200104415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626315
    },
    {
        "content": "<p>I guess that the not-lazy version I was imagining is basically the same or similar</p>",
        "id": 200104439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626328
    },
    {
        "content": "<p>that you might have an \"input\" which is a list of filenames per directory for example</p>",
        "id": 200104461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626341
    },
    {
        "content": "<p>and we can monitor what is referenced</p>",
        "id": 200104481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626353
    },
    {
        "content": "<p>but it seems like what we really would prefer is that</p>",
        "id": 200104493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626359
    },
    {
        "content": "<p>we have a \"lazy\" input where we ask if a file exists and read it only then, and then remember</p>",
        "id": 200104560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626375
    },
    {
        "content": "<p>and then when modifications occur, we check against the files that have been read thus far</p>",
        "id": 200104587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626383
    },
    {
        "content": "<p>I sort of remember hacking up something like this for lark</p>",
        "id": 200104596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626387
    },
    {
        "content": "<p>but I think it's a pattern that salsa probably ought to support natively</p>",
        "id": 200104617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626398
    },
    {
        "content": "<p>I think I hacked it up with a \"dummy\" input</p>",
        "id": 200104629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626402
    },
    {
        "content": "<p>i.e., we had a side cache that you could read from and when you did we registered a read against some dummy input that was always <code>()</code>, I forget.</p>",
        "id": 200104685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626428
    },
    {
        "content": "<p>I am not exactly sure that we need this. The problem with purely lazy model is that you can't diagnose the problem that user crated <code>foo.rs</code>, but forgot about <code>mod foo;</code>, becuse you just don't see <code>foo.rs</code></p>",
        "id": 200104695,
        "sender_full_name": "matklad",
        "timestamp": 1591626432
    },
    {
        "content": "<p>but it seems easy enough for salsa to support this with some form of callback</p>",
        "id": 200104705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626437
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/200104695\">said</a>:</p>\n<blockquote>\n<p>I am not exactly sure that we need this. The problem with purely lazy model is that you can't diagnose the problem that user crated <code>foo.rs</code>, but forgot about <code>mod foo;</code>, becuse you just don't see <code>foo.rs</code></p>\n</blockquote>\n<p>indeed. this seems sort of inherent, no? but in any case I would imagine a kind of hybrid</p>",
        "id": 200104769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626463
    },
    {
        "content": "<p>where you <em>can</em> set value but you can also wait until they are demanded?</p>",
        "id": 200104864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626489
    },
    {
        "content": "<p>I guess a good question woul be to step back and ask what constraints we're trying to solve exactly</p>",
        "id": 200104901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626504
    },
    {
        "content": "<p>you mentioned one question, I'm not sure whether you also wanted to avoid scanning directories aggressively</p>",
        "id": 200104930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626515
    },
    {
        "content": "<p>Scanning I think should be OK</p>",
        "id": 200105003,
        "sender_full_name": "matklad",
        "timestamp": 1591626546
    },
    {
        "content": "<p>The problem is that sometimes you might not know what to scan.</p>",
        "id": 200105045,
        "sender_full_name": "matklad",
        "timestamp": 1591626570
    },
    {
        "content": "<p>Ie, if the project includes <code>#[path = \"/some/completely/unrelated/dir\"] mod foo;</code></p>",
        "id": 200105090,
        "sender_full_name": "matklad",
        "timestamp": 1591626592
    },
    {
        "content": "<p>yeah so that maybe fits this hybrid model</p>",
        "id": 200105108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626601
    },
    {
        "content": "<p>though it makes the question of \"Give me the keys\" a bit trickier</p>",
        "id": 200105186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626616
    },
    {
        "content": "<p>I also was thinking about basically hacking this around....</p>\n<p>When we try to read something which is ourside of the current set of dirs, we get back a <code>None</code>, but we also arrange to call <code>.set</code> on the next iteration of the event loop.</p>",
        "id": 200105315,
        "sender_full_name": "matklad",
        "timestamp": 1591626679
    },
    {
        "content": "<p>That's interesting</p>",
        "id": 200105610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626795
    },
    {
        "content": "<p>I guess there is also a legit question of</p>",
        "id": 200105678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626823
    },
    {
        "content": "<p>what range of things we <em>want</em> a path to be able to access anyway</p>",
        "id": 200105694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626829
    },
    {
        "content": "<p>I wonder if rustc imposes any limitations</p>",
        "id": 200105715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626840
    },
    {
        "content": "<p>I feel like I'd prefer that sources can't read files from random locations when building myself :)</p>",
        "id": 200105774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626853
    },
    {
        "content": "<p>I'm thinking what a lazy input really means</p>",
        "id": 200105831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626875
    },
    {
        "content": "<p>I guess it's basically a \"volatile query\"</p>",
        "id": 200105841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626881
    },
    {
        "content": "<p>(like, in its most pure form)</p>",
        "id": 200105854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626888
    },
    {
        "content": "<p>Yes, there's also build-system desire to know the set of files upfront. For example, rust+buck generally already list the set of files per crate.</p>",
        "id": 200105883,
        "sender_full_name": "matklad",
        "timestamp": 1591626908
    },
    {
        "content": "<p>that's probably not what we want because it implies that we have to 'poll' each file to know if they changed, vs being informed up front by vscode?</p>",
        "id": 200105905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626921
    },
    {
        "content": "<blockquote>\n<p>nikomatsakis: I'm thinking what a lazy input really means<br>\nnikomatsakis: I guess it's basically a \"volatile query\"</p>\n</blockquote>\n<p>Not really I think</p>",
        "id": 200105967,
        "sender_full_name": "matklad",
        "timestamp": 1591626956
    },
    {
        "content": "<p>today, if you have an input, and you read an invalid key, you get a panic</p>",
        "id": 200106039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626970
    },
    {
        "content": "<p>the hybrid I could imagine would be that you get a callback</p>",
        "id": 200106048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626975
    },
    {
        "content": "<p>(but you still have to invoke <code>set</code> for any <em>changes</em>)</p>",
        "id": 200106075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591626986
    },
    {
        "content": "<p>I think I've implemented that at some point already?</p>",
        "id": 200106091,
        "sender_full_name": "matklad",
        "timestamp": 1591626993
    },
    {
        "content": "<p>maybe it all seems familiar</p>",
        "id": 200106106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591627000
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/200105967\">said</a>:</p>\n<blockquote>\n<p>Not really I think</p>\n</blockquote>\n<p>in what way not?</p>",
        "id": 200106122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591627005
    },
    {
        "content": "<p><a href=\"https://salsa-rs.github.io/salsa/common_patterns/on_demand_inputs.html\">https://salsa-rs.github.io/salsa/common_patterns/on_demand_inputs.html</a></p>",
        "id": 200106144,
        "sender_full_name": "matklad",
        "timestamp": 1591627015
    },
    {
        "content": "<blockquote>\n<p>in what way not?</p>\n</blockquote>\n<p>We don't have to make the query volatile. We need a contract that the caller would start <code>.set</code>ing the key after we've first looked at it.</p>",
        "id": 200106237,
        "sender_full_name": "matklad",
        "timestamp": 1591627059
    },
    {
        "content": "<p>yes, ok, so that is what I listed above</p>",
        "id": 200106257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591627067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/200106075\">said</a>:</p>\n<blockquote>\n<p>(but you still have to invoke <code>set</code> for any <em>changes</em>)</p>\n</blockquote>\n<p>ie here</p>",
        "id": 200106288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591627080
    },
    {
        "content": "<p>and yes I think you can model it today with some synthetic reads, much like that page suggests</p>",
        "id": 200106350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591627093
    },
    {
        "content": "<p>so is that not what you want?</p>",
        "id": 200106356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591627098
    },
    {
        "content": "<p>I don't know what I want, that the problem :)</p>",
        "id": 200106383,
        "sender_full_name": "matklad",
        "timestamp": 1591627113
    },
    {
        "content": "<p>Like, the eager model with explicit sets of files seems very compelling</p>",
        "id": 200106412,
        "sender_full_name": "matklad",
        "timestamp": 1591627125
    },
    {
        "content": "<p>But so does the lazy one , for complementary reasons :D</p>",
        "id": 200106450,
        "sender_full_name": "matklad",
        "timestamp": 1591627142
    },
    {
        "content": "<p>(and I think in lazy model the problem \"how do we avoid rechecking std when new file is created in src\" remains)</p>",
        "id": 200106544,
        "sender_full_name": "matklad",
        "timestamp": 1591627194
    },
    {
        "content": "<p>well, not entirely?</p>",
        "id": 200106704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591627252
    },
    {
        "content": "<p>by that I mean</p>",
        "id": 200106718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591627259
    },
    {
        "content": "<p>if there is a <code>#[path]</code>, then there will be an edge to <code>FileContents(/whatever/the/path/is)</code></p>",
        "id": 200106748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591627271
    },
    {
        "content": "<p>and so if there is no <code>set</code> that effects this path, you're ok</p>",
        "id": 200106771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591627281
    },
    {
        "content": "<p>Hm.... that makes sense I guess</p>",
        "id": 200106804,
        "sender_full_name": "matklad",
        "timestamp": 1591627299
    },
    {
        "content": "<p>or am I missing something?</p>",
        "id": 200106807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591627299
    },
    {
        "content": "<p>Hm, yeah, it works if we do path normalization. The potential problem here is that <code>foo/bar</code> and <code>foo/baz/../bar</code> <em>might</em> be different things</p>",
        "id": 200107016,
        "sender_full_name": "matklad",
        "timestamp": 1591627393
    },
    {
        "content": "<p>yeah, ok, I hadn't considered that</p>",
        "id": 200107269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591627491
    },
    {
        "content": "<p>you do need some notion of \"truepath\"</p>",
        "id": 200107304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591627506
    },
    {
        "content": "<p>My current plant is to do both lazy and eager:</p>\n<ul>\n<li>the \"compiler\" part sees only the lazy API, \"get text of this file by path\"</li>\n<li>what we actually store in salsa are file-sets, and the lazy API is implemented on top of them</li>\n<li>additionally, IDE is allowed to do \"list all files\"</li>\n<li>somehow this all is married to the file watching infrastrucure...</li>\n</ul>",
        "id": 200107527,
        "sender_full_name": "matklad",
        "timestamp": 1591627600
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/200107304\">said</a>:</p>\n<blockquote>\n<p>you do need some notion of \"truepath\"</p>\n</blockquote>\n<p>this feels inherent</p>",
        "id": 200107833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591627717
    },
    {
        "content": "<p>without canonicalization of some kind, I don't think you can have a \"watcher\" setup</p>",
        "id": 200107867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591627731
    },
    {
        "content": "<p>ok I sort of take that back</p>",
        "id": 200107949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591627762
    },
    {
        "content": "<p>I guess that the most generic watcher could be dealing with the canonicalization problem in its own way, sort of hiding it from you, but anyway if you have \"set\" operations coming in, you need a way to match up the path that is being set with the ones that have been read</p>",
        "id": 200108113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591627813
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> !</p>\n<p>This week's changelog is here: <a href=\"https://rust-analyzer.github.io/thisweek/2020/06/15/changelog-29.html\">https://rust-analyzer.github.io/thisweek/2020/06/15/changelog-29.html</a></p>",
        "id": 200892381,
        "sender_full_name": "matklad",
        "timestamp": 1592229660
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/0STObVqMevmFqr0L44oTwFKH/extract-enum.gif\">extract-enum.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/0STObVqMevmFqr0L44oTwFKH/extract-enum.gif\" title=\"extract-enum.gif\"><img src=\"/user_uploads/4715/0STObVqMevmFqr0L44oTwFKH/extract-enum.gif\"></a></div>",
        "id": 200892448,
        "sender_full_name": "matklad",
        "timestamp": 1592229681
    },
    {
        "content": "<p>I'd say this is the highlight of the week from the technical perspective -- it's the first refactoring which is non-local (it calls find usages inside)</p>",
        "id": 200892534,
        "sender_full_name": "matklad",
        "timestamp": 1592229713
    },
    {
        "content": "<p>It looks like there's a huge \"semantic search &amp; replace\" infrastructure that should be developed around that :)</p>",
        "id": 200892671,
        "sender_full_name": "matklad",
        "timestamp": 1592229748
    },
    {
        "content": "<p>I've also made some progress with the VFS rewrite. The new API is here, and I am pretty happy with how it looks: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/4891\">https://github.com/rust-analyzer/rust-analyzer/pull/4891</a></p>",
        "id": 200892829,
        "sender_full_name": "matklad",
        "timestamp": 1592229815
    },
    {
        "content": "<p>Though there's still a lot of work to make rust-analyzer actually use it.</p>",
        "id": 200892870,
        "sender_full_name": "matklad",
        "timestamp": 1592229832
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/200892534\">said</a>:</p>\n<blockquote>\n<p>I'd say this is the highlight of the week from the technical perspective -- it's the first refactoring which is non-local (it calls find usages inside)</p>\n</blockquote>\n<p>ah, really cool</p>",
        "id": 200892944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592229849
    },
    {
        "content": "<p>The \"ship rust-analyzer with rustup\" work is currently blocked on implementation -- we need to make vendoring inside rust-lang/rust work with rust-analyzer (it is non-trivial, as rust-analyzer is a separate workspace). If someone wants to take over the PR adding rust-analyzer to rustc, please free to do this :) I think I'll be busy with VFS for at least several days yet</p>",
        "id": 200893150,
        "sender_full_name": "matklad",
        "timestamp": 1592229929
    },
    {
        "content": "<p>Ohhh, there's another cool thing I've almost forgot</p>",
        "id": 200893195,
        "sender_full_name": "matklad",
        "timestamp": 1592229950
    },
    {
        "content": "<p>(which PR is that?)</p>",
        "id": 200893264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592229967
    },
    {
        "content": "<p>We now do syntax highlighting (with type inference and such) of code inside doc comments.</p>",
        "id": 200893265,
        "sender_full_name": "matklad",
        "timestamp": 1592229967
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/200893264\">said</a>:</p>\n<blockquote>\n<p>(which PR is that?)</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/pull/72978\">https://github.com/rust-lang/rust/pull/72978</a></p>",
        "id": 200893342,
        "sender_full_name": "bjorn3",
        "timestamp": 1592229999
    },
    {
        "content": "<p>PR; <a href=\"https://github.com/rust-lang/rust/pull/72978\">https://github.com/rust-lang/rust/pull/72978</a></p>",
        "id": 200893345,
        "sender_full_name": "matklad",
        "timestamp": 1592230002
    },
    {
        "content": "<blockquote>\n<p>We now do syntax highlighting (with type inference and such) of code inside doc comments.</p>\n</blockquote>\n<p>We do that by creating an instance of a separate salsa DB for each doc comment</p>",
        "id": 200893415,
        "sender_full_name": "matklad",
        "timestamp": 1592230043
    },
    {
        "content": "<p>And there's an interesting problem here -- because this is a separate instance, this nested syntax highlighting is not really cancellable.</p>",
        "id": 200893534,
        "sender_full_name": "matklad",
        "timestamp": 1592230087
    },
    {
        "content": "<p>It seems like we might need some first-class salsa support for \"ephemeral\" inputs.</p>",
        "id": 200893613,
        "sender_full_name": "matklad",
        "timestamp": 1592230116
    },
    {
        "content": "<p>This is something we want during code completion as well: we'd love to type-check the code <em>as if</em> it had a fake identifier inserted at the position of the cursor.</p>",
        "id": 200893742,
        "sender_full_name": "matklad",
        "timestamp": 1592230177
    },
    {
        "content": "<p>We curetntly are able to \"as if\" parse the code (because parsing is a function and not a query), but we actually <em>want</em> to type-check it as well.</p>",
        "id": 200893922,
        "sender_full_name": "matklad",
        "timestamp": 1592230248
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/200893415\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>We now do syntax highlighting (with type inference and such) of code inside doc comments.</p>\n</blockquote>\n<p>We do that by creating an instance of a separate salsa DB for each doc comment</p>\n</blockquote>\n<p>woah</p>",
        "id": 200894082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592230323
    },
    {
        "content": "<p>I guuss what I expected for that was that you would actually literally insert the token into the inputs</p>",
        "id": 200894124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592230349
    },
    {
        "content": "<p>but I suppose that would have to happen \"outside\" of a query</p>",
        "id": 200894152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592230356
    },
    {
        "content": "<p>I don't fully understand why we need to do that actually, instead of 'just' checking them as something like a separate file</p>",
        "id": 200894243,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1592230395
    },
    {
        "content": "<p>this seems somewhat connected to \"lazy\" inputs</p>",
        "id": 200894286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592230415
    },
    {
        "content": "<p>well, only somewhat</p>",
        "id": 200894307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592230424
    },
    {
        "content": "<p>but yes I feel like for code comments at least you might have some kind of \"code identifier\" that you can give to that code block</p>",
        "id": 200894380,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592230445
    },
    {
        "content": "<p>Hm, actually we might be able to do what <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> suggests at least for doc comments. Have another variant for <code>HirFileId</code>, which is \"the text of this doc comment\"</p>",
        "id": 200894386,
        "sender_full_name": "matklad",
        "timestamp": 1592230448
    },
    {
        "content": "<p>yeah, basically</p>",
        "id": 200894409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592230461
    },
    {
        "content": "<p>Though I don't like how this is very invasive</p>",
        "id": 200894433,
        "sender_full_name": "matklad",
        "timestamp": 1592230476
    },
    {
        "content": "<p>in salsa, at least, we had some kind of identifier for each \"Item\" that we are processing, and it might be like \"the method inside this impl block in side this file\" or whatever</p>",
        "id": 200894521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592230513
    },
    {
        "content": "<p>Like, <code>HirFielId</code> is a very core type inside the \"compiler\", and it seems <em>wrong</em> to have to change it just for the purposes of handing doc comments, which, strictly speaking, exist outside of the langauge.</p>",
        "id": 200894531,
        "sender_full_name": "matklad",
        "timestamp": 1592230517
    },
    {
        "content": "<p>it seems like it would be natural to extend that to doc comments</p>",
        "id": 200894537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592230519
    },
    {
        "content": "<p>I can see that point, although to me it feels... \"right\" :)</p>",
        "id": 200894573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592230538
    },
    {
        "content": "<p>like, you want to be able to say \"where the code came from\"..</p>",
        "id": 200894585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592230547
    },
    {
        "content": "<p>How would we go about fake idents for completions?</p>",
        "id": 200894618,
        "sender_full_name": "matklad",
        "timestamp": 1592230558
    },
    {
        "content": "<p>yeah, it feels right to me as well -- similarly to how we handle all crates in one DB, even though the actual compiler has a single-crate view</p>",
        "id": 200894687,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1592230578
    },
    {
        "content": "<p>fake idents I'm not so sure, I'm not 100% sure why you want/need them anyway yet I have to admit</p>",
        "id": 200894726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592230599
    },
    {
        "content": "<p>can you remind me the motivation?</p>",
        "id": 200894742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592230613
    },
    {
        "content": "<p>Like, we can add yet another variant to <code>HirFileId</code> which is \"file, like <code>foo.rs</code>, but there's <code>intellijRulez</code> token inserted at offset 42\", but feels even more in the wrong direction to me :)</p>",
        "id": 200894759,
        "sender_full_name": "matklad",
        "timestamp": 1592230621
    },
    {
        "content": "<p>can you just step back and explain to me how the cycle works for a sec? like, when do you decide to insert those tokens?</p>",
        "id": 200894818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592230650
    },
    {
        "content": "<blockquote>\n<p>nikomatsakis: can you remind me the motivation?</p>\n</blockquote>\n<p>imagine the following code:</p>\n<div class=\"codehilite\"><pre><span></span><code>foo == /* cursor here*/\n</code></pre></div>",
        "id": 200894822,
        "sender_full_name": "matklad",
        "timestamp": 1592230652
    },
    {
        "content": "<p>/me imagines. \"ok\"</p>",
        "id": 200894909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592230683
    },
    {
        "content": "<p>we want to get the type of the right hand side do suggest nice completions. It's much easier to do if there's a phisical rhs there</p>",
        "id": 200894926,
        "sender_full_name": "matklad",
        "timestamp": 1592230690
    },
    {
        "content": "<p>do we always want to do this</p>",
        "id": 200894941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592230698
    },
    {
        "content": "<p>or did the user hit some key that prompted us to provide completions?</p>",
        "id": 200894957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592230709
    },
    {
        "content": "<p>even more so when we're completing something like <code>dbg!(/* cursor */)</code> -- we need to macro-expand the macro as if it actually contained something</p>",
        "id": 200894964,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1592230717
    },
    {
        "content": "<p>This happens here:</p>\n<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/5b013e5665a34fd757fd6c48dc912606c0915b2c/crates/ra_ide/src/completion/completion_context.rs#L92-L99\">https://github.com/rust-analyzer/rust-analyzer/blob/5b013e5665a34fd757fd6c48dc912606c0915b2c/crates/ra_ide/src/completion/completion_context.rs#L92-L99</a></p>",
        "id": 200894975,
        "sender_full_name": "matklad",
        "timestamp": 1592230723
    },
    {
        "content": "<p>The <code>HirFileId</code> could have a variant that represents the concatenation of multiple file parts. For example for</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"sd\">/// fn a() {</span>\n<span class=\"sd\">/// }</span>\n</code></pre></div>\n\n\n<p>it would be <code>Concat([file.rs:1:4-1:13, file.rs:2:4-2:13])</code> while for</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"o\">&lt;|&gt;</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>it would be <code>Concat([file.rs:1:1-1:2, &lt;fake_ident&gt;:1:1-1:1])</code>.</p>",
        "id": 200895080,
        "sender_full_name": "bjorn3",
        "timestamp": 1592230760
    },
    {
        "content": "<blockquote>\n<p>or did the user hit some key that prompted us to provide completions?</p>\n</blockquote>\n<p>usually yes, the user hit some key</p>",
        "id": 200895188,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1592230809
    },
    {
        "content": "<p>From our perspective, the LSP client asked us to provide completions at this point</p>",
        "id": 200895385,
        "sender_full_name": "matklad",
        "timestamp": 1592230916
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> for completions, we don't want to put that into the DB though -- it's not worth caching. Also it's not a different file with different content like with doc comments, it's the same file 'in an alternative world' -- so it's in the same place in the module tree and so on</p>",
        "id": 200895642,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1592231033
    },
    {
        "content": "<p>So what I imagined is that when we were asked to provide completions</p>",
        "id": 200895713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231059
    },
    {
        "content": "<p>we would insert some special token into the token stream</p>",
        "id": 200895726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231069
    },
    {
        "content": "<p>and then just compute completions</p>",
        "id": 200895763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231084
    },
    {
        "content": "<p>which would incrementally recompute type-check etc</p>",
        "id": 200895778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231091
    },
    {
        "content": "<p>in the same way as if the user had actually typed something</p>",
        "id": 200895794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231098
    },
    {
        "content": "<p>This works best to the extent that incremental re-parsing, etc works efficiently, of course</p>",
        "id": 200895927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231140
    },
    {
        "content": "<p>I think that's basically what we want, except that we can throw away all the changes to the DB afterwards?</p>",
        "id": 200895943,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1592231149
    },
    {
        "content": "<p>And the \"we would insert some special token into the token stream\" works by calling the actual <code>.set</code> outside of the query?</p>",
        "id": 200896009,
        "sender_full_name": "matklad",
        "timestamp": 1592231163
    },
    {
        "content": "<p>well I think then you just re-modify the input to remove the token</p>",
        "id": 200896016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231164
    },
    {
        "content": "<p>right</p>",
        "id": 200896032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231172
    },
    {
        "content": "<p>it's just a normal edit</p>",
        "id": 200896036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231175
    },
    {
        "content": "<p>also, it seems... not thread-safe</p>",
        "id": 200896075,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1592231195
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/200896016\">said</a>:</p>\n<blockquote>\n<p>well I think then you just re-modify the input to remove the token</p>\n</blockquote>\n<p>note: you could imagine salsa doing a different caching mechanism to make this more efficient</p>",
        "id": 200896079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231198
    },
    {
        "content": "<p>I am not sure about literal modification --- it'll cancel in-progress higlighting and such</p>",
        "id": 200896094,
        "sender_full_name": "matklad",
        "timestamp": 1592231207
    },
    {
        "content": "<p>all <code>set</code> calls occur when no other queries are ongoing</p>",
        "id": 200896104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231210
    },
    {
        "content": "<p>so yeah it would cancel those sorts of things</p>",
        "id": 200896117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231218
    },
    {
        "content": "<p>I can believe it's not a good strategy :)</p>",
        "id": 200896145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231227
    },
    {
        "content": "<p>it's just the strategy I imagined</p>",
        "id": 200896152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231232
    },
    {
        "content": "<p>yeah, didn't mean literal data races, but things like that</p>",
        "id": 200896158,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1592231233
    },
    {
        "content": "<p>I guess, I want exactly this: ability to call <code>.set</code> without advancing global revision counter, and, more generally, keep the DB itself logically immutable</p>",
        "id": 200896192,
        "sender_full_name": "matklad",
        "timestamp": 1592231251
    },
    {
        "content": "<p>I guess that another way to look at it would be</p>",
        "id": 200896209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231261
    },
    {
        "content": "<p>yes, a \"diff\" file-id</p>",
        "id": 200896215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231264
    },
    {
        "content": "<p>i.e., this file is the same as that one but with some modification (the \"logical cursor\") or whatever</p>",
        "id": 200896241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231276
    },
    {
        "content": "<p>but that wouldn't leverage any incremental re-computation necessarily</p>",
        "id": 200896297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231288
    },
    {
        "content": "<p>that I think is the approach that <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> was kind of rejecting, though for a different reason</p>",
        "id": 200896321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231303
    },
    {
        "content": "<p>but also if you <em>literally</em> did it the wa I was just describing it's still a set in salsa terms</p>",
        "id": 200896359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231322
    },
    {
        "content": "<p>so it would still have all the bad side-effects</p>",
        "id": 200896374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231330
    },
    {
        "content": "<p>it sounds like what you want is the ability to create a \"forked\" database</p>",
        "id": 200896392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231341
    },
    {
        "content": "<p>(I can't help thniking that what we want here is \"negative\" durability for such transient inputs. Basically, everytying whcih depends on transient input can't be trusted in the next revision and should be teared down)</p>",
        "id": 200896394,
        "sender_full_name": "matklad",
        "timestamp": 1592231342
    },
    {
        "content": "<p>all of this is reminding me of some of my more ambituous ideas for reworking salsa to be more parallel friendly</p>",
        "id": 200896447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231367
    },
    {
        "content": "<p>where it took more of a \"persistent data-structure\" like approach</p>",
        "id": 200896467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231374
    },
    {
        "content": "<p>(which would make e.g. forking quite trivial, \"just clone\")</p>",
        "id": 200896583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231409
    },
    {
        "content": "<p>interesting</p>",
        "id": 200896611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231419
    },
    {
        "content": "<p>side note that</p>",
        "id": 200896703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231457
    },
    {
        "content": "<p>i am about to open a PR that fixes up the recursive solver's handling of negative goals</p>",
        "id": 200896741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231474
    },
    {
        "content": "<p>(in chalk)</p>",
        "id": 200896750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231478
    },
    {
        "content": "<p>at which point I wanted to return to the question of how to better integrate salsa / chalk, I realize now my old scheme didn't accommodate negative goals, but I think it can be fixed somehow :)</p>",
        "id": 200896801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231502
    },
    {
        "content": "<p>point being that it seems like we're due to kind of have some deeper talks about salsa and look again at the model with fresh eyes</p>",
        "id": 200896833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231519
    },
    {
        "content": "<p>Yesss</p>",
        "id": 200896889,
        "sender_full_name": "matklad",
        "timestamp": 1592231531
    },
    {
        "content": "<p>I know you've got an accruing list of \"desiderata\", <span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span></p>",
        "id": 200896903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231542
    },
    {
        "content": "<p>I want more parallelism and less Arcs, which, admitedly, seem to be contradictory goals :D</p>",
        "id": 200896921,
        "sender_full_name": "matklad",
        "timestamp": 1592231560
    },
    {
        "content": "<p>maybe we should schedule some times to do some voice chats this week?</p>",
        "id": 200896925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231563
    },
    {
        "content": "<p>lol, maybe true</p>",
        "id": 200896936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231570
    },
    {
        "content": "<p>I have a few thoughts about parallelism</p>",
        "id": 200896986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231591
    },
    {
        "content": "<blockquote>\n<p>maybe we should schedule some times to do some voice chats this week?</p>\n</blockquote>\n<p>Yup, I think some semi-structured chatting might be useful.</p>",
        "id": 200897000,
        "sender_full_name": "matklad",
        "timestamp": 1592231600
    },
    {
        "content": "<p>maybe we can start by just collecting ideas into a doc and things</p>",
        "id": 200897014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231604
    },
    {
        "content": "<p>to get a high-level view</p>",
        "id": 200897036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> could you just start the doc?</p>",
        "id": 200897194,
        "sender_full_name": "matklad",
        "timestamp": 1592231686
    },
    {
        "content": "<p>making it now</p>",
        "id": 200897205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231692
    },
    {
        "content": "<p>we can maybe chat a bit in salsa zulip too</p>",
        "id": 200897225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231697
    },
    {
        "content": "<p>not sure which is a better place ;)</p>",
        "id": 200897245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231704
    },
    {
        "content": "<p><a href=\"https://hackmd.io/o07mw34ITEiXgRaouTb4Yw\">hackmd \"Salsa 2020\"</a></p>",
        "id": 200897342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592231751
    },
    {
        "content": "<p>Perfect name!</p>",
        "id": 200897550,
        "sender_full_name": "matklad",
        "timestamp": 1592231829
    },
    {
        "content": "<p>Hello <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> , its Monday again!</p>",
        "id": 201609199,
        "sender_full_name": "matklad",
        "timestamp": 1592834575
    },
    {
        "content": "<p>Today's changelog is here: <a href=\"https://rust-analyzer.github.io/thisweek/2020/06/22/changelog-30.html\">https://rust-analyzer.github.io/thisweek/2020/06/22/changelog-30.html</a></p>",
        "id": 201609226,
        "sender_full_name": "matklad",
        "timestamp": 1592834591
    },
    {
        "content": "<p>We have a bunch of fixes for type inference, cool new UI for exploring types by <span class=\"user-mention\" data-user-id=\"298653\">@vsrs</span> , almost working VFS.</p>",
        "id": 201609445,
        "sender_full_name": "matklad",
        "timestamp": 1592834681
    },
    {
        "content": "<p>Another highlight is that <a href=\"https://github.com/davidlattimore\">https://github.com/davidlattimore</a>, the author of rerast, is doing some awesome work merging rerast into rust-analyzer</p>",
        "id": 201609534,
        "sender_full_name": "matklad",
        "timestamp": 1592834741
    },
    {
        "content": "<p>Oh, <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> is also doing a bunch of perf work around memory usage and item tree refactoring.</p>",
        "id": 201609646,
        "sender_full_name": "matklad",
        "timestamp": 1592834784
    },
    {
        "content": "<p>No progress on shipping rust-analyzer via rustup -- no particular blockers, it's just that no one got to figuring the vendoring stuff.</p>",
        "id": 201609864,
        "sender_full_name": "matklad",
        "timestamp": 1592834891
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> would you like to discuss \"Salsa 2020\"  a bit more today?</p>",
        "id": 201610042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592834995
    },
    {
        "content": "<p>Yup!</p>",
        "id": 201610095,
        "sender_full_name": "matklad",
        "timestamp": 1592835004
    },
    {
        "content": "<p>I did fill the document. The biggest addition I have is \"priorites\"</p>",
        "id": 201610134,
        "sender_full_name": "matklad",
        "timestamp": 1592835026
    },
    {
        "content": "<p>I singled out only two really big things:</p>\n<ul>\n<li>compile times (I fear that the current generic setup doesn't make it easy to achieve separate compilation)</li>\n<li>parallelism</li>\n</ul>",
        "id": 201610193,
        "sender_full_name": "matklad",
        "timestamp": 1592835067
    },
    {
        "content": "<p>(the documet in question: <a href=\"https://hackmd.io/o07mw34ITEiXgRaouTb4Yw\">https://hackmd.io/o07mw34ITEiXgRaouTb4Yw</a>)</p>",
        "id": 201610251,
        "sender_full_name": "matklad",
        "timestamp": 1592835113
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> could we schedule a time to chat in a little bit maybe?</p>",
        "id": 201610572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592835289
    },
    {
        "content": "<p>I'm trying to finish up my \"morning prep\"</p>",
        "id": 201610577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592835293
    },
    {
        "content": "<p>although actually maybe now is not the worst time</p>",
        "id": 201610587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592835300
    },
    {
        "content": "<p>I have to read what you wrote</p>",
        "id": 201610591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592835302
    },
    {
        "content": "<p>I do think a chat/call would be useful.</p>",
        "id": 201610670,
        "sender_full_name": "matklad",
        "timestamp": 1592835351
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> how long are you around today?</p>",
        "id": 201612983,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592836431
    },
    {
        "content": "<p>for at least 4 hours more</p>",
        "id": 201613385,
        "sender_full_name": "matklad",
        "timestamp": 1592836626
    },
    {
        "content": "<p>OK, I'll ping you in a bit!</p>",
        "id": 201613929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592836877
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> would you be up to have a quick zoom chat soon?</p>",
        "id": 201621799,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592840311
    },
    {
        "content": "<p>any time basically</p>",
        "id": 201621813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592840317
    },
    {
        "content": "<p>yup, in 3 minutes!</p>",
        "id": 201622101,
        "sender_full_name": "matklad",
        "timestamp": 1592840466
    },
    {
        "content": "<p>Nope, audio is non-existig :(</p>",
        "id": 201633618,
        "sender_full_name": "matklad",
        "timestamp": 1592845702
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> it's sync-up time!</p>",
        "id": 202313518,
        "sender_full_name": "matklad",
        "timestamp": 1593439633
    },
    {
        "content": "<p>Changelog: <a href=\"https://rust-analyzer.github.io/thisweek/2020/06/29/changelog-31.html\">https://rust-analyzer.github.io/thisweek/2020/06/29/changelog-31.html</a></p>",
        "id": 202313544,
        "sender_full_name": "matklad",
        "timestamp": 1593439649
    },
    {
        "content": "<p>Notable changes:</p>\n<ul>\n<li>rust analyzer now infers more than 99% of expressions for rust-analyzer code base</li>\n<li><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> implemented new near-source-level IR, item tree, with much perf improvements</li>\n<li>new VFS</li>\n<li>I've rewritten the main loop that drives LSP server, to hopefully make it more understandable. In general, I've cleaned up and uniformalized concurrency quite a bit, we now using something resembling actor pattern consistently</li>\n</ul>",
        "id": 202313831,
        "sender_full_name": "matklad",
        "timestamp": 1593439774
    },
    {
        "content": "<p>(concurrency nerds might want to chime in on <a href=\"https://trio.discourse.group/t/sizing-the-channel-deadlock-freedom-vs-back-pressure/311\">https://trio.discourse.group/t/sizing-the-channel-deadlock-freedom-vs-back-pressure/311</a>, there's still some unresolved questions left)</p>",
        "id": 202314182,
        "sender_full_name": "matklad",
        "timestamp": 1593439911
    },
    {
        "content": "<p>There are also some ongoing refactors for our test suite</p>",
        "id": 202314463,
        "sender_full_name": "matklad",
        "timestamp": 1593440032
    },
    {
        "content": "<p>I've published <a href=\"https://marketplace.visualstudio.com/items?itemName=vsrs.cross-rust-analyzer\">cross-rust-analyzer</a> as well. Perhaps it makes sense to update the repo link in the changelog to the extension link.</p>",
        "id": 202314477,
        "sender_full_name": "vsrs",
        "timestamp": 1593440037
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298653\">@vsrs</span> could you PR?</p>",
        "id": 202314540,
        "sender_full_name": "matklad",
        "timestamp": 1593440048
    },
    {
        "content": "<p>sure, but i don't know where are the changelog sources?</p>",
        "id": 202314722,
        "sender_full_name": "vsrs",
        "timestamp": 1593440113
    },
    {
        "content": "<blockquote>\n<p>There are also some ongoing refactors for our test suite</p>\n</blockquote>\n<ul>\n<li>\n<p>Now, there's mostly one way to parse fixture which specifies the set of file to analyze. It auto-magically switcheds between single file and multifile mode based on the presense of <code>//-</code> marker comment. </p>\n</li>\n<li>\n<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/5101\">https://github.com/rust-analyzer/rust-analyzer/pull/5101</a> propses a new snapshot testing library</p>\n</li>\n<li>rn I am refactoring ty tests to be more data driven</li>\n</ul>",
        "id": 202314773,
        "sender_full_name": "matklad",
        "timestamp": 1593440137
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298653\">@vsrs</span>  <a href=\"https://github.com/rust-analyzer/rust-analyzer.github.io\">https://github.com/rust-analyzer/rust-analyzer.github.io</a></p>",
        "id": 202314836,
        "sender_full_name": "matklad",
        "timestamp": 1593440154
    },
    {
        "content": "<p>Yesterday I found some time to categorize assists and fix call hierarchy</p>",
        "id": 202315216,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1593440281
    },
    {
        "content": "<p>Right, I saw the PR, did get to revieing it yet :)</p>",
        "id": 202315591,
        "sender_full_name": "matklad",
        "timestamp": 1593440400
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/202314540\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"298653\">vsrs</span> could you PR?</p>\n</blockquote>\n<p>Done. <a href=\"https://github.com/rust-analyzer/rust-analyzer.github.io/pull/55\">https://github.com/rust-analyzer/rust-analyzer.github.io/pull/55</a></p>",
        "id": 202317177,
        "sender_full_name": "vsrs",
        "timestamp": 1593440942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> sorry I missed the sync today, this all sounds exciting though!</p>",
        "id": 202329726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593446030
    },
    {
        "content": "<p>Today's sync will be an hour late (so, in ~1hr) -- <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> is late with prepping  relnotes <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 202992821,
        "sender_full_name": "matklad",
        "timestamp": 1594043809
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 203001188,
        "sender_full_name": "matklad",
        "timestamp": 1594047918
    },
    {
        "content": "<p>This week's changelog is up: <a href=\"https://rust-analyzer.github.io/thisweek/2020/07/06/changelog-32.html\">https://rust-analyzer.github.io/thisweek/2020/07/06/changelog-32.html</a></p>",
        "id": 203001208,
        "sender_full_name": "matklad",
        "timestamp": 1594047928
    },
    {
        "content": "<ul>\n<li>a bunch of SSR improvements by <span class=\"user-mention silent\" data-user-id=\"198560\">David Lattimore</span> </li>\n<li>primitive types from chalk</li>\n<li>initial support for dynamic project loading</li>\n<li>a whole bunch of tests are rewriten to be more data-driven. Fewer tests now depend on snpashot testing now, and some of those that still do use <code>expect!</code> now. I really like the new snapshot updating experience :D</li>\n</ul>",
        "id": 203001431,
        "sender_full_name": "matklad",
        "timestamp": 1594048030
    },
    {
        "content": "<p>Oh, you can now grab rust-analyzer from <a href=\"https://static.rust-lang.org/dist/rust-nightly-x86_64-unknown-linux-gnu.tar.gz\">https://static.rust-lang.org/dist/rust-nightly-x86_64-unknown-linux-gnu.tar.gz</a> !</p>",
        "id": 203001468,
        "sender_full_name": "matklad",
        "timestamp": 1594048051
    },
    {
        "content": "<p>Hopefully, the next nightly would even contain rustup component</p>",
        "id": 203001509,
        "sender_full_name": "matklad",
        "timestamp": 1594048072
    },
    {
        "content": "<p>(which reminds me that I probably should setup automated rust-analzyer upgrade in rust-lang/rust repo</p>",
        "id": 203001583,
        "sender_full_name": "matklad",
        "timestamp": 1594048090
    },
    {
        "content": "<p>We should make a framework out of this (at some point)</p>",
        "id": 203016062,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1594055581
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span></p>",
        "id": 203718045,
        "sender_full_name": "matklad",
        "timestamp": 1594648850
    },
    {
        "content": "<p>It was a productive week, we have bunch of things in today's release:</p>\n<p><a href=\"https://rust-analyzer.github.io/thisweek/2020/07/13/changelog-33.html\">https://rust-analyzer.github.io/thisweek/2020/07/13/changelog-33.html</a></p>",
        "id": 203718115,
        "sender_full_name": "matklad",
        "timestamp": 1594648887
    },
    {
        "content": "<p>The highlights are:</p>\n<ul>\n<li><code>rustup component add rust-analyzer-preview</code></li>\n<li>rust-analyzer watches for changes in Cargo.toml and reloads automatically</li>\n<li>chalk upgrade</li>\n<li>salsa that compiles fast</li>\n</ul>",
        "id": 203718280,
        "sender_full_name": "matklad",
        "timestamp": 1594648962
    },
    {
        "content": "<p>We are also moving vscode extension to the rust-lang/vscode-rust repo: <a href=\"https://github.com/rust-lang/vscode-rust/pull/816\">https://github.com/rust-lang/vscode-rust/pull/816</a></p>",
        "id": 203718372,
        "sender_full_name": "matklad",
        "timestamp": 1594649010
    },
    {
        "content": "<p>That Chalk upgrade looks awesome tbh</p>",
        "id": 203718815,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594649257
    },
    {
        "content": "<p>The highlight of my week</p>",
        "id": 203718828,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594649267
    },
    {
        "content": "<p>Yup, it is just so <strong>awesome</strong> that chalk and rust-analyzer are developed independently, and both are moving fast!</p>\n<p>Yay modularization!</p>",
        "id": 203719177,
        "sender_full_name": "matklad",
        "timestamp": 1594649459
    },
    {
        "content": "<p>I haven't looked closely at the PR but our development workflow will be to <code>npm install</code> the client separately? Will there be some sort of integration testing between server/client in the <code>vscode-rust</code> repo?</p>",
        "id": 203719265,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1594649498
    },
    {
        "content": "<p>I am curious just how much of a speedup <a href=\"https://github.com/rust-lang/chalk/pull/566\">https://github.com/rust-lang/chalk/pull/566</a> is going to bring</p>",
        "id": 203719274,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594649503
    },
    {
        "content": "<blockquote>\n<p>but our development workflow will be to npm install the client separately?</p>\n</blockquote>\n<p>Good question, I haven't thought about that deeply. TBH, I almost never run the actual typesript extension myself, so I personally don't mind a lot that there's an extra step here</p>",
        "id": 203719721,
        "sender_full_name": "matklad",
        "timestamp": 1594649710
    },
    {
        "content": "<blockquote>\n<p>Will there be some sort of integration testing between server/client in the vscode-rust repo?</p>\n</blockquote>\n<p>Not that we have such tests today :P</p>",
        "id": 203719738,
        "sender_full_name": "matklad",
        "timestamp": 1594649724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I'll run analysis stats unless somebody beats me to it :D</p>",
        "id": 203719861,
        "sender_full_name": "matklad",
        "timestamp": 1594649772
    },
    {
        "content": "<p>That would be awesome</p>",
        "id": 203719896,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594649792
    },
    {
        "content": "<p>I'm looking forward to that even just for cleaning up the logs <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 203720668,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1594650123
    },
    {
        "content": "<p>I'm expecting breakage with the recent change in the semantic tokens protocol but am waiting to see how it's handled in vscode first</p>",
        "id": 203720674,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1594650126
    },
    {
        "content": "<p>\"If you run less code, there's less code to debug\" is a profound insight!</p>",
        "id": 203720963,
        "sender_full_name": "matklad",
        "timestamp": 1594650253
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/203720668\">said</a>:</p>\n<blockquote>\n<p>I'm looking forward to that even just for cleaning up the logs <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>Oh for sure. I actually am using the branch to debug the cycle issue <span class=\"user-mention silent\" data-user-id=\"116118\">Matthew Jasper</span> posted</p>",
        "id": 203721238,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594650382
    },
    {
        "content": "<p>That being said, do you want to review/merge that PR <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span>?</p>",
        "id": 203721270,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594650396
    },
    {
        "content": "<p>I'm not sure when Niko is going to be around and have time to review</p>",
        "id": 203721294,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594650419
    },
    {
        "content": "<p>Ah, so the signature of <code>RustIrDatabase::impls_for_trait</code> has changed, so it's not trivial for me to benchmark</p>",
        "id": 203721295,
        "sender_full_name": "matklad",
        "timestamp": 1594650419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> sure, I can probably take a look later today</p>",
        "id": 203721320,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1594650434
    },
    {
        "content": "<p>I guess, <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> might want to do this then :D</p>",
        "id": 203721334,
        "sender_full_name": "matklad",
        "timestamp": 1594650440
    },
    {
        "content": "<p>I guess <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> needs to rebase his PR</p>",
        "id": 203721371,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1594650466
    },
    {
        "content": "<p>whoops okay</p>",
        "id": 203721400,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594650480
    },
    {
        "content": "<p>Okay rebased</p>",
        "id": 203721629,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594650587
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>Before:\nParallel Inference: 12.637288447s,\n\nAfter:\nParallel Inference: 10.732962004s,\n</code></pre></div>",
        "id": 203724087,
        "sender_full_name": "matklad",
        "timestamp": 1594651632
    },
    {
        "content": "<p>So, it is quite a bit faster, if we see 20% improvement in end-to-end bench</p>",
        "id": 203724143,
        "sender_full_name": "matklad",
        "timestamp": 1594651656
    },
    {
        "content": "<p>That's not bad at all</p>",
        "id": 203727710,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594653328
    },
    {
        "content": "<p>On to the next 20% then</p>",
        "id": 203739154,
        "sender_full_name": "detrumi",
        "timestamp": 1594658963
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 203764072,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1594670707
    },
    {
        "content": "<p>Hey, I am not feeling great today, so I won’t participate in the sync up, but the release is out :)</p>",
        "id": 204424938,
        "sender_full_name": "matklad",
        "timestamp": 1595253414
    },
    {
        "content": "<p>Feel better!</p>",
        "id": 204426001,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1595253930
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span></p>",
        "id": 205120477,
        "sender_full_name": "matklad",
        "timestamp": 1595858543
    },
    {
        "content": "<p>Here's this week's changelog: <a href=\"https://rust-analyzer.github.io/thisweek/2020/07/27/changelog-35.html\">https://rust-analyzer.github.io/thisweek/2020/07/27/changelog-35.html</a></p>",
        "id": 205120490,
        "sender_full_name": "matklad",
        "timestamp": 1595858552
    },
    {
        "content": "<p>Couple of highlights:</p>\n<ul>\n<li>SSR improvements</li>\n<li>we fully replaced <code>insta</code> with <code>expect</code> for snapshot testing</li>\n<li>we now track various metrics at <a href=\"https://rust-analyzer.github.io/metrics/\">https://rust-analyzer.github.io/metrics/</a></li>\n</ul>",
        "id": 205120704,
        "sender_full_name": "matklad",
        "timestamp": 1595858657
    },
    {
        "content": "<p>VS Code extension merging is still in progress</p>",
        "id": 205120784,
        "sender_full_name": "matklad",
        "timestamp": 1595858709
    },
    {
        "content": "<p>I've also started poking rustc's parser with a sharp stick today :) Trying to find a first-step towards parse library-ification</p>",
        "id": 205120925,
        "sender_full_name": "matklad",
        "timestamp": 1595858782
    },
    {
        "content": "<p>Also, it's a first time in a long while I am using rust-analyzer with rustc code base, and the progress is nice</p>",
        "id": 205125001,
        "sender_full_name": "matklad",
        "timestamp": 1595860739
    },
    {
        "content": "<p>Auto-importing stuff feels almost to good</p>",
        "id": 205125031,
        "sender_full_name": "matklad",
        "timestamp": 1595860749
    },
    {
        "content": "<p>And even auto-reload when adding new crate works!</p>",
        "id": 205125061,
        "sender_full_name": "matklad",
        "timestamp": 1595860761
    },
    {
        "content": "<p>Metrics dashboard looks really cool! Would it be possible to split the build/analysis graphs into categories? (e.g. separate build/link times)</p>",
        "id": 205126966,
        "sender_full_name": "detrumi",
        "timestamp": 1595861618
    },
    {
        "content": "<p>Yes, but I think that probably isn't required.  Total is enough to catch regressions. For investigation, you'll get more info re-running stuff locally</p>",
        "id": 205127149,
        "sender_full_name": "matklad",
        "timestamp": 1595861698
    },
    {
        "content": "<p>And there's a benefit in having <em>fewer</em> graphs on the page</p>",
        "id": 205127220,
        "sender_full_name": "matklad",
        "timestamp": 1595861729
    },
    {
        "content": "<p>Showing the commit hashes would be useful, because right now the horizontal axis doesn't say much</p>",
        "id": 205127246,
        "sender_full_name": "Laurențiu",
        "timestamp": 1595861741
    },
    {
        "content": "<p>Well, it says 1, 2, 3, 4.... isn't that useful? :D</p>",
        "id": 205127369,
        "sender_full_name": "matklad",
        "timestamp": 1595861788
    },
    {
        "content": "<p>There's info about commit hashes, host machine, time, etc in the data</p>",
        "id": 205127414,
        "sender_full_name": "matklad",
        "timestamp": 1595861808
    },
    {
        "content": "<p>But I haven't looked into how to plug that into plotly.js</p>",
        "id": 205127450,
        "sender_full_name": "matklad",
        "timestamp": 1595861829
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/metrics/blob/f9d246925e87e6786228cfec09773a9fb46d8320/index.html#L52-L55\">https://github.com/rust-analyzer/metrics/blob/f9d246925e87e6786228cfec09773a9fb46d8320/index.html#L52-L55</a></p>",
        "id": 205127617,
        "sender_full_name": "matklad",
        "timestamp": 1595861902
    },
    {
        "content": "<p>I think there should be API to add hover info to the labels</p>",
        "id": 205127679,
        "sender_full_name": "matklad",
        "timestamp": 1595861926
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span></p>",
        "id": 205797491,
        "sender_full_name": "matklad",
        "timestamp": 1596463422
    },
    {
        "content": "<p>Here's this week chagelog: <a href=\"https://rust-analyzer.github.io/thisweek/2020/08/03/changelog-36.html\">https://rust-analyzer.github.io/thisweek/2020/08/03/changelog-36.html</a></p>",
        "id": 205797608,
        "sender_full_name": "matklad",
        "timestamp": 1596463468
    },
    {
        "content": "<p>did we get the nightly update going again? I can take a look at disabling riscv for you if not</p>",
        "id": 205797693,
        "sender_full_name": "simulacrum",
        "timestamp": 1596463516
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> no, I haven't got to that yet</p>",
        "id": 205797717,
        "sender_full_name": "matklad",
        "timestamp": 1596463540
    },
    {
        "content": "<p>If yo could disable riscv, that would be helpful and I think more effective!</p>",
        "id": 205797740,
        "sender_full_name": "matklad",
        "timestamp": 1596463558
    },
    {
        "content": "<p>great! will do so in a bit</p>",
        "id": 205797794,
        "sender_full_name": "simulacrum",
        "timestamp": 1596463569
    },
    {
        "content": "<p>Though, until we flip the VS Code extension from matklad.rust-analyzer to rust-lang.rust, I wouldn't worry too much about frequently updating nightlies</p>",
        "id": 205797832,
        "sender_full_name": "matklad",
        "timestamp": 1596463603
    },
    {
        "content": "<p>ah okay</p>",
        "id": 205797894,
        "sender_full_name": "simulacrum",
        "timestamp": 1596463644
    },
    {
        "content": "<p>The highlight of this week is Rust ungrammar: <a href=\"https://github.com/rust-analyzer/ungrammar/blob/master/rust.ungram\">https://github.com/rust-analyzer/ungrammar/blob/master/rust.ungram</a></p>",
        "id": 205797918,
        "sender_full_name": "matklad",
        "timestamp": 1596463663
    },
    {
        "content": "<p>We now fully specify structure of Rust's concrete syntax trees.</p>\n<p>I <em>hope</em> that, using ungrammar, we'll be able to slowly bridge rustc's and rust-analyzer syntax trees. I want them both to be generated from ungrammar.</p>",
        "id": 205798034,
        "sender_full_name": "matklad",
        "timestamp": 1596463736
    },
    {
        "content": "<p>Though, it might be a bad IDE -- rustc's tree is a sufficiently abstract syntax tree, and generating it from CST grammar might be too annoying.</p>",
        "id": 205798094,
        "sender_full_name": "matklad",
        "timestamp": 1596463776
    },
    {
        "content": "<p>There's also an MCP in progress for estabilishing parse library-ification working group: <a href=\"https://github.com/rust-lang/compiler-team/issues/338\">https://github.com/rust-lang/compiler-team/issues/338</a></p>",
        "id": 205798188,
        "sender_full_name": "matklad",
        "timestamp": 1596463825
    },
    {
        "content": "<p>Finally, I am on vacation from Thursday to Tuesday. I wonder if <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> would want to be a release manager next Monday?</p>",
        "id": 205798254,
        "sender_full_name": "matklad",
        "timestamp": 1596463873
    },
    {
        "content": "<p>I think I can do that, yeah. Just need some instructions.</p>",
        "id": 205798320,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596463917
    },
    {
        "content": "<p>I'll try to add them to dev/readme, but most things are automated</p>\n<div class=\"codehilite\"><pre><span></span><code>$ git clone rust-analyzer\n$ git clone rust-analyzer.github.io\n$ pushd rust-analyzer; cargo xtask release; popd\n$ cd rust-analyzer.github.io;\n$ emacs (ls thisweek/_posts | tail -n1)\n$ git push\n</code></pre></div>",
        "id": 205798660,
        "sender_full_name": "matklad",
        "timestamp": 1596464068
    },
    {
        "content": "<p>This releases latest nightly as stable, so there are no any kind of additional pre-flight checks</p>",
        "id": 205798760,
        "sender_full_name": "matklad",
        "timestamp": 1596464129
    },
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 206463433,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1597068017
    },
    {
        "content": "<p>This week's changelog: <a href=\"https://rust-analyzer.github.io/thisweek/2020/08/10/changelog-37.html\">https://rust-analyzer.github.io/thisweek/2020/08/10/changelog-37.html</a></p>",
        "id": 206463442,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1597068024
    },
    {
        "content": "<p>(I ran this week's release since Aleksey is on holidays)</p>",
        "id": 206463476,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1597068042
    },
    {
        "content": "<p>We got a bunch of nice improvements and bug fixes in this release. No major refactorings or anything fundamental though, as one might expect.</p>",
        "id": 206463642,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1597068135
    },
    {
        "content": "<p>Hmm, have I missed some organizational changes in rust-analyzer?</p>",
        "id": 206472204,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1597072347
    },
    {
        "content": "<p><a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/205798254\">https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/205798254</a></p>",
        "id": 206472306,
        "sender_full_name": "Laurențiu",
        "timestamp": 1597072418
    },
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> it's Monday again</p>",
        "id": 207148601,
        "sender_full_name": "matklad",
        "timestamp": 1597673605
    },
    {
        "content": "<p>I am back from <span aria-label=\"palm tree\" class=\"emoji emoji-1f334\" role=\"img\" title=\"palm tree\">:palm_tree:</span> vacation :)</p>",
        "id": 207148634,
        "sender_full_name": "matklad",
        "timestamp": 1597673622
    },
    {
        "content": "<p>This week's changelog: <a href=\"https://rust-analyzer.github.io/thisweek/2020/08/17/changelog-38.html\">https://rust-analyzer.github.io/thisweek/2020/08/17/changelog-38.html</a></p>",
        "id": 207148669,
        "sender_full_name": "matklad",
        "timestamp": 1597673641
    },
    {
        "content": "<p>/me remembers the need to update rust-analzyer in rust-lang/rust</p>",
        "id": 207148795,
        "sender_full_name": "matklad",
        "timestamp": 1597673690
    },
    {
        "content": "<p>Let's see if this update sticks. The musl build should work, at least.</p>",
        "id": 207148894,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1597673743
    },
    {
        "content": "<p>This was relatively quite week, I think the biggest change is that we've removed <code>ra_</code> prefixes from crate names</p>",
        "id": 207148912,
        "sender_full_name": "matklad",
        "timestamp": 1597673756
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/5347\">#5347</a> add rust-analyzer dump-chalk command.</p>\n</blockquote>\n<p>(from the changelog) That ended up being changed to a <code>CHALK_PRINT</code> setting instead to print chalk programs in log output</p>",
        "id": 207149203,
        "sender_full_name": "detrumi",
        "timestamp": 1597673893
    },
    {
        "content": "<p>I'd like to work on improving support within <code>macro_rules</code> blocks. Is there anyone I could work with to ensure I'm going down the right path for the design? Re <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Analysis.20within.20macro_rules/near/206934479\">https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Analysis.20within.20macro_rules/near/206934479</a></p>",
        "id": 207149610,
        "sender_full_name": "Paul Faria",
        "timestamp": 1597674123
    },
    {
        "content": "<p>ouch, I should get back to this, still cleaning up vacation backlog, thanks for reminidng me!</p>",
        "id": 207149746,
        "sender_full_name": "matklad",
        "timestamp": 1597674237
    },
    {
        "content": "<p>No worries, I also wasn't sure if I was pinging the right person, so I thought it might be better to ask during the sync-up.</p>",
        "id": 207149924,
        "sender_full_name": "Paul Faria",
        "timestamp": 1597674316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/207149203\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/5347\">#5347</a> add rust-analyzer dump-chalk command.</p>\n</blockquote>\n<p>(from the changelog) That ended up being changed to a <code>CHALK_PRINT</code> setting instead to print chalk programs in log output</p>\n</blockquote>\n<p>Ooh nice. I'm excited to see how this helps/changes debugging</p>",
        "id": 207151049,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597674846
    },
    {
        "content": "<p>Some names aren't being shown in the output yet, but eventually you'll be able to take that output and drop it into the chalk cli directly</p>",
        "id": 207151330,
        "sender_full_name": "detrumi",
        "timestamp": 1597674998
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span></p>",
        "id": 207847274,
        "sender_full_name": "matklad",
        "timestamp": 1598278122
    },
    {
        "content": "<p>This week's changelog is up: <a href=\"https://rust-analyzer.github.io/thisweek/2020/08/24/changelog-39.html\">https://rust-analyzer.github.io/thisweek/2020/08/24/changelog-39.html</a></p>",
        "id": 207847289,
        "sender_full_name": "matklad",
        "timestamp": 1598278132
    },
    {
        "content": "<p>Nothing to big happened in this release, although today, thanks to the awesome work by <span class=\"user-mention\" data-user-id=\"254853\">@pksunkara</span>, we published a bunch of auto-published crates to <a href=\"http://crates.io\">crates.io</a></p>",
        "id": 207847359,
        "sender_full_name": "matklad",
        "timestamp": 1598278193
    },
    {
        "content": "<p>There's some progress on various parser/lexer bits in rust-lang/rustc, but it is suuuper slow</p>",
        "id": 207847420,
        "sender_full_name": "matklad",
        "timestamp": 1598278215
    },
    {
        "content": "<p>And I am also trying to sneak some snapshot tests into rustc :D </p>\n<p><a href=\"https://github.com/rust-lang/rust/pull/75773\">https://github.com/rust-lang/rust/pull/75773</a></p>",
        "id": 207847504,
        "sender_full_name": "matklad",
        "timestamp": 1598278269
    },
    {
        "content": "<p>Oh, I forgot the actual big thing</p>",
        "id": 207847729,
        "sender_full_name": "matklad",
        "timestamp": 1598278406
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/vscode-rust/pull/840\">https://github.com/rust-lang/vscode-rust/pull/840</a></p>",
        "id": 207847730,
        "sender_full_name": "matklad",
        "timestamp": 1598278406
    },
    {
        "content": "<p>there's now a WIP PR merging typescript extensions!</p>",
        "id": 207847760,
        "sender_full_name": "matklad",
        "timestamp": 1598278419
    },
    {
        "content": "<p>I'm back from vacation so I'll resume the work this week =)</p>",
        "id": 207848296,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1598278657
    },
    {
        "content": "<p>This week's changelog is up: <a href=\"https://rust-analyzer.github.io/thisweek/2020/08/31/changelog-40.html\">https://rust-analyzer.github.io/thisweek/2020/08/31/changelog-40.html</a> <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 208572334,
        "sender_full_name": "Laurențiu",
        "timestamp": 1598887439
    },
    {
        "content": "<p>OMG, <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> I completely forgot about the sync-up</p>",
        "id": 208572442,
        "sender_full_name": "matklad",
        "timestamp": 1598887477
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 208572450,
        "sender_full_name": "matklad",
        "timestamp": 1598887483
    },
    {
        "content": "<p>So, yeah, we have a bunch of stuff coming together this week</p>",
        "id": 208572487,
        "sender_full_name": "matklad",
        "timestamp": 1598887504
    },
    {
        "content": "<ul>\n<li>Heroic efforts by <span class=\"user-mention\" data-user-id=\"254853\">@pksunkara</span> bore fruit -- rust-analyzer crates are now published to <a href=\"http://crates.io\">crates.io</a> (without semver guarantees)</li>\n<li>wg-parselib is a thing now (and we did a bunch of preliminary refactors already)!</li>\n<li>We finally merged the work by <span class=\"user-mention\" data-user-id=\"244843\">@Zac Pullar-Strecker</span> , so we now parse doc comments and can make sense of the links within them</li>\n</ul>",
        "id": 208572694,
        "sender_full_name": "matklad",
        "timestamp": 1598887607
    },
    {
        "content": "<p>Oh, and I'll be on vacation the next two weeks :P</p>",
        "id": 208572918,
        "sender_full_name": "matklad",
        "timestamp": 1598887695
    },
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span>! Sorry for the delay today, but the release should be happening now. As was mentioned last week, Aleksey is on holidays, so I'm doing the release.</p>",
        "id": 209305644,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1599491388
    },
    {
        "content": "<p>I'll also review some PRs to keep the queue clean, but probably only later this week.</p>",
        "id": 209305780,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1599491462
    },
    {
        "content": "<p>Hello <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span>! <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> </p>\n<p>This week's changelog: <a href=\"https://rust-analyzer.github.io/thisweek/2020/09/14/changelog-42.html\">https://rust-analyzer.github.io/thisweek/2020/09/14/changelog-42.html</a></p>\n<p>Notably, we now support async blocks, a much requested feature, but there's a bunch of other cool stuff in there as well.</p>",
        "id": 210009244,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1600092245
    },
    {
        "content": "<p>Aleksey is still on holidays this week, but should be back for next week's release. I'll try to continue with the PR reviews until then.</p>",
        "id": 210009542,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1600092406
    },
    {
        "content": "<p>If I'm not mistaken, the configuration for the MergeBehaviour isn't actually in this release? At least vscode doesnt seem to recognize the config option in the settings.json and it doesnt seem to be in the extensions package.json either. Did the release not actually pick that PR up or did I make a mistake in my PR <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>? <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/5985\">5985</a></p>",
        "id": 210059704,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1600115810
    },
    {
        "content": "<p>Oh! I think releasing will just promote the already-built nightly binary, so the PR isn't included.</p>",
        "id": 210060703,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1600116289
    },
    {
        "content": "<p>Ah okay that would make sense</p>",
        "id": 210060774,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1600116337
    },
    {
        "content": "<p>I'll remove it from the changelog</p>",
        "id": 210060919,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1600116390
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300586\">@veykril</span> since you're here, I didn't test your PR, but I'm not sure what the options mean. Which one is the \"last layer\", and can I use <code>last</code> to only merge one level of imports but without nesting them (e.g. <code>use std::io::{self, Read}</code> but not <code>use std::{fs, io::{self, Read}}</code>? I suspect that \"last layer\" can't really be ambiguous, though.</p>",
        "id": 210094278,
        "sender_full_name": "Laurențiu",
        "timestamp": 1600151288
    },
    {
        "content": "<p>Yes thats what is basically meant with it, I knew the wording wasn't the best, but I couldn't think of a good concise way to describe that behaviour. It basically is meant to only merge imports if the resulting import only contains one level of nesting.</p>",
        "id": 210098751,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1600155411
    },
    {
        "content": "<p>Basically it's supposed to do what was asked in this issue <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/3831\">https://github.com/rust-analyzer/rust-analyzer/issues/3831</a></p>",
        "id": 210098868,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1600155513
    },
    {
        "content": "<p>So it's \"merge, but don't nest\". Cool, I've always wanted that.</p>",
        "id": 210099254,
        "sender_full_name": "Laurențiu",
        "timestamp": 1600155833
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> it's the meeting time again!</p>",
        "id": 210745576,
        "sender_full_name": "matklad",
        "timestamp": 1600697059
    },
    {
        "content": "<p>I am back from vacation and trying to catch up</p>",
        "id": 210745639,
        "sender_full_name": "matklad",
        "timestamp": 1600697088
    },
    {
        "content": "<p>Looks like I am not really necessary to keep the pace of development of rust-analyzer, that's great!</p>\n<p>I am especially impressed that we've shipped async blocks!</p>",
        "id": 210745727,
        "sender_full_name": "matklad",
        "timestamp": 1600697125
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> for picking up the org stuff!</p>",
        "id": 210745765,
        "sender_full_name": "matklad",
        "timestamp": 1600697144
    },
    {
        "content": "<p>I guess, there's nothing too specific I can call out this week (still doing the catch up), but if I am needed to review or unblock something, feel free to agressively re-ping me!</p>",
        "id": 210745971,
        "sender_full_name": "matklad",
        "timestamp": 1600697225
    },
    {
        "content": "<p>This week's changelog is up: <a href=\"https://rust-analyzer.github.io/thisweek/2020/09/28/changelog-44.html\">https://rust-analyzer.github.io/thisweek/2020/09/28/changelog-44.html</a> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 211508952,
        "sender_full_name": "Laurențiu",
        "timestamp": 1601307359
    },
    {
        "content": "<p>Hello <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span>, it's that time again!</p>\n<p>Today's changelog  is up!</p>\n<p><a href=\"https://rust-analyzer.github.io/thisweek/2020/10/12/changelog-46.html\">https://rust-analyzer.github.io/thisweek/2020/10/12/changelog-46.html</a></p>\n<ul>\n<li>I've got married :-) Getting married was the reason why I was less present during the recent couple of weeks, I should be more available now!</li>\n<li>lots of quality improvements this week:<ul>\n<li>configurable auto import (to nest or not to nest)</li>\n<li>fix compat with 1.47</li>\n<li>shortened hints for Iterators <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> </li>\n<li>plain-text support in hover</li>\n</ul>\n</li>\n</ul>\n<p>No progress on parser library-ification sadly, I hope to get back to it next week.</p>",
        "id": 213041928,
        "sender_full_name": "matklad",
        "timestamp": 1602511269
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> wow congratulations! <span aria-label=\"ring\" class=\"emoji emoji-1f48d\" role=\"img\" title=\"ring\">:ring:</span></p>",
        "id": 213041967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602511297
    },
    {
        "content": "<p>Congrats <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span></p>",
        "id": 213041980,
        "sender_full_name": "Coenen Benjamin",
        "timestamp": 1602511307
    },
    {
        "content": "<p>Congratulations!</p>",
        "id": 213042077,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1602511335
    },
    {
        "content": "<p>congratulations <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 213042116,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1602511351
    },
    {
        "content": "<p>Congratulations!</p>",
        "id": 213044293,
        "sender_full_name": "Laurențiu",
        "timestamp": 1602512421
    },
    {
        "content": "<p>Congratulations!</p>",
        "id": 213044745,
        "sender_full_name": "bjorn3",
        "timestamp": 1602512683
    },
    {
        "content": "<p>Congratulations!!</p>",
        "id": 213050318,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1602515226
    },
    {
        "content": "<p>Oh, congrats!</p>",
        "id": 213055377,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1602517808
    },
    {
        "content": "<p>I'm a bit late, but Congratulations!</p>",
        "id": 213291157,
        "sender_full_name": "Paul Faria",
        "timestamp": 1602683646
    },
    {
        "content": "<p>Oh my, congrats :D</p>",
        "id": 213296156,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1602685690
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> it's Monday again!</p>",
        "id": 213790274,
        "sender_full_name": "matklad",
        "timestamp": 1603116434
    },
    {
        "content": "<p>Today's changelog: <a href=\"https://rust-analyzer.github.io/thisweek/2020/10/19/changelog-47.html\">https://rust-analyzer.github.io/thisweek/2020/10/19/changelog-47.html</a></p>",
        "id": 213790288,
        "sender_full_name": "matklad",
        "timestamp": 1603116441
    },
    {
        "content": "<p>There's quite a bunch of \"improve quality &amp; polish\" changes, I like that!</p>",
        "id": 213790342,
        "sender_full_name": "matklad",
        "timestamp": 1603116463
    },
    {
        "content": "<p>In the highlights, we have a new TextMate grammar, rewrote our build automation to use xshell (and I want to better automate all other builds: <a href=\"https://github.com/rust-analyzer/lsp-server/blob/master/xtask/src/main.rs\">https://github.com/rust-analyzer/lsp-server/blob/master/xtask/src/main.rs</a>) and introduces S-actionable and S-unactionable issue labels</p>",
        "id": 213790708,
        "sender_full_name": "matklad",
        "timestamp": 1603116602
    },
    {
        "content": "<p>I'm seeing some undefined responses coming back from inlay hints on master :(</p>",
        "id": 213793922,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1603117866
    },
    {
        "content": "<p>Hm, is there an issue for that?</p>",
        "id": 213794240,
        "sender_full_name": "matklad",
        "timestamp": 1603117984
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/6285\">https://github.com/rust-analyzer/rust-analyzer/issues/6285</a></p>",
        "id": 213794336,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1603118020
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> !</p>\n<p>It's that time again (actually, it is different time this time, due to DST shenanigans)</p>",
        "id": 214578232,
        "sender_full_name": "matklad",
        "timestamp": 1603721587
    },
    {
        "content": "<p>Today's changelog: <a href=\"https://rust-analyzer.github.io/thisweek/2020/10/26/changelog-48.html\">https://rust-analyzer.github.io/thisweek/2020/10/26/changelog-48.html</a></p>",
        "id": 214578282,
        "sender_full_name": "matklad",
        "timestamp": 1603721608
    },
    {
        "content": "<p>We have a whole bunch of features and bugfixes. Additionaly, <span class=\"user-mention\" data-user-id=\"245854\">@popzxc</span> is working on refactoring our completion infrastructure</p>",
        "id": 214578420,
        "sender_full_name": "matklad",
        "timestamp": 1603721655
    },
    {
        "content": "<p>There's one notable bug-fix: <code>cfg_if</code> now works in std, which unlocks platform-specific  modules.</p>\n<p>The implemenation is ungreat -- we just pick random cfg-if from the crate graph and snap it onto std crates. It's not super clear what the proper fix should look like</p>",
        "id": 214578523,
        "sender_full_name": "matklad",
        "timestamp": 1603721717
    },
    {
        "content": "<p>See the writeup at <a href=\"#narrow/stream/131828-t-compiler/topic/Moving.20.2Flibrary.20to.20a.20new.20worksapce\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/Moving.20.2Flibrary.20to.20a.20new.20worksapce</a> which proposes some direction for this issue</p>",
        "id": 214578625,
        "sender_full_name": "matklad",
        "timestamp": 1603721761
    },
    {
        "content": "<p>Hmm</p>",
        "id": 214579996,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603722385
    },
    {
        "content": "<p>I don't think I realized that <a class=\"stream-topic\" data-stream-id=\"131828\" href=\"/#narrow/stream/131828-t-compiler/topic/Moving.20.2Flibrary.20to.20a.20new.20worksapce\">#t-compiler &gt; Moving /library to a new worksapce</a> could help with IDEs</p>",
        "id": 214580087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603722434
    },
    {
        "content": "<p>By itself, it would help a bit, it also needs \"and vendor <a href=\"http://crates.io\">crates.io</a> deps of stdlib into rust-src component\" to be truly useufl</p>",
        "id": 214580338,
        "sender_full_name": "matklad",
        "timestamp": 1603722553
    },
    {
        "content": "<p>It would also help with <code>-Zbuild-std</code>, I assume</p>",
        "id": 214582055,
        "sender_full_name": "Laurențiu",
        "timestamp": 1603723306
    },
    {
        "content": "<p>There seem to be a lot of issues related to the new TM grammar. Having an up to date grammar is great but maybe we need to figure out how to make it more testable or disable it by default until it's a little more baked?</p>",
        "id": 214599286,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1603730315
    },
    {
        "content": "<p>We fixed a bunch of issues in this release, so I think it would be better now, and more or less fine after a couple of releases more.</p>",
        "id": 214599561,
        "sender_full_name": "matklad",
        "timestamp": 1603730411
    },
    {
        "content": "<p>I don't think there's a way to simultaneously:</p>\n<ul>\n<li>let everyone test-drive the improvements to give feedback</li>\n<li>don't change anything</li>\n</ul>\n<p>With our rapid release cycle and ability to easily <em>not</em> upgrade the extensions, I think we should favor \"break things fast\" approach</p>",
        "id": 214599808,
        "sender_full_name": "matklad",
        "timestamp": 1603730504
    },
    {
        "content": "<p>I wonder if all those issues were reported against stable or against nightly?</p>",
        "id": 214599990,
        "sender_full_name": "matklad",
        "timestamp": 1603730562
    },
    {
        "content": "<p>In theory, nightly should act as a buffer here</p>",
        "id": 214600081,
        "sender_full_name": "matklad",
        "timestamp": 1603730595
    },
    {
        "content": "<p>That's fair. We have a really good test framework for the rust side of things. TS needs more test love.</p>",
        "id": 214600112,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1603730609
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/6137\">https://github.com/rust-analyzer/rust-analyzer/pull/6137</a> was merged 14 days ago, so it was in.. one stable release?</p>",
        "id": 214600179,
        "sender_full_name": "Laurențiu",
        "timestamp": 1603730638
    },
    {
        "content": "<p>Hm I'm not sure about stable vs nightly. I think if it was on stable we'd see more complaints on reddit</p>",
        "id": 214600280,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1603730671
    },
    {
        "content": "<p>It's not just what we have, its what we <em>could</em> have. I belive most of the Rust stuff is unit-testable, while most of TS stuff is only testable by folks reported bugs</p>",
        "id": 214600302,
        "sender_full_name": "matklad",
        "timestamp": 1603730681
    },
    {
        "content": "<p>maybe its time to introduce <code>beta</code>:</p>\n<ul>\n<li>stagger stable by one week</li>\n<li>on release, promote nightly to beta</li>\n<li>on release, promote beta to stable</li>\n</ul>\n<p>When installing extension, opt-in 10% of the users into beta.</p>\n<p>That should give us a much better coverage</p>",
        "id": 214600547,
        "sender_full_name": "matklad",
        "timestamp": 1603730777
    },
    {
        "content": "<p>However, to make this really deliver value, we would need beta backport process, and that's a lot of process!</p>",
        "id": 214600590,
        "sender_full_name": "matklad",
        "timestamp": 1603730799
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> this week changelog: <a href=\"https://rust-analyzer.github.io/thisweek/2020/11/02/changelog-49.html\">https://rust-analyzer.github.io/thisweek/2020/11/02/changelog-49.html</a></p>",
        "id": 215330319,
        "sender_full_name": "matklad",
        "timestamp": 1604329650
    },
    {
        "content": "<p>This was a pretty quite week :)</p>",
        "id": 215330353,
        "sender_full_name": "matklad",
        "timestamp": 1604329664
    },
    {
        "content": "<p>and pretty quiet sync-up ;)</p>",
        "id": 215340889,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1604333940
    },
    {
        "content": "<p>If I find the time and no one else gets to it I might try and move completion over to the resolve model or <code>experimental/resolveCodeAction</code> -&gt; <code>codeAction/resolve</code></p>",
        "id": 215348869,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1604337146
    },
    {
        "content": "<p>I don't think its worth it</p>",
        "id": 215349043,
        "sender_full_name": "matklad",
        "timestamp": 1604337234
    },
    {
        "content": "<p>This needs profiling, but I <em>think</em> that most of the work happens when computing available compleitons, and not when rendering them</p>",
        "id": 215349165,
        "sender_full_name": "matklad",
        "timestamp": 1604337278
    },
    {
        "content": "<p>(as opposed to assists)</p>",
        "id": 215349181,
        "sender_full_name": "matklad",
        "timestamp": 1604337284
    },
    {
        "content": "<p>The code action change needs to be done anyway</p>",
        "id": 215350846,
        "sender_full_name": "Laurențiu",
        "timestamp": 1604337993
    },
    {
        "content": "<p>Yeah, we should move codeAction, but I tink we should keep completion as is</p>",
        "id": 215350955,
        "sender_full_name": "matklad",
        "timestamp": 1604338045
    },
    {
        "content": "<p>Makes sense</p>",
        "id": 215351281,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1604338202
    },
    {
        "content": "<p>This week's changelog: <a href=\"https://rust-analyzer.github.io/thisweek/2020/11/09/changelog-50.html\">https://rust-analyzer.github.io/thisweek/2020/11/09/changelog-50.html</a></p>",
        "id": 216097495,
        "sender_full_name": "Laurențiu",
        "timestamp": 1604934949
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> :)</p>",
        "id": 216097687,
        "sender_full_name": "matklad",
        "timestamp": 1604935034
    },
    {
        "content": "<p>DST is confusing, but I think this it's the right hour?</p>",
        "id": 216097798,
        "sender_full_name": "Laurențiu",
        "timestamp": 1604935083
    },
    {
        "content": "<p>We have a whole bunch of improvements by <span class=\"user-mention silent\" data-user-id=\"300586\">Lukas Wirth</span> , both new assists, as well as internal improvements to assist infra, to make tree difss smaller, to prevent cursor from moving</p>",
        "id": 216097941,
        "sender_full_name": "matklad",
        "timestamp": 1604935133
    },
    {
        "content": "<p>There's also a bunch of work on TextMate grammar by <span class=\"user-mention\" data-user-id=\"358204\">@Dusty Pomerleau</span> . Hopefully, this will end up being upstreamed to VS Code</p>",
        "id": 216098127,
        "sender_full_name": "matklad",
        "timestamp": 1604935228
    },
    {
        "content": "<p>We've also enabled <code>-Dunreacheable_pub</code> globally inside rust-analyzer, so no more pub field on priv struct shortcut :D</p>",
        "id": 216098275,
        "sender_full_name": "matklad",
        "timestamp": 1604935291
    },
    {
        "content": "<p>And there also was a re-work for our literals grammar</p>",
        "id": 216098332,
        "sender_full_name": "matklad",
        "timestamp": 1604935321
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> this weeks changelog: <a href=\"https://rust-analyzer.github.io/thisweek/2020/11/16/changelog-51.html\">https://rust-analyzer.github.io/thisweek/2020/11/16/changelog-51.html</a></p>",
        "id": 216883790,
        "sender_full_name": "matklad",
        "timestamp": 1605539512
    },
    {
        "content": "<p>Mostly bugfixs and polish again, but we did gain one new major feature</p>",
        "id": 216883913,
        "sender_full_name": "matklad",
        "timestamp": 1605539551
    },
    {
        "content": "<p>Now <code>#[feature(rustc_private)]</code> is supported (but you need to set the path to sources of the compiler in the settings)</p>",
        "id": 216883987,
        "sender_full_name": "matklad",
        "timestamp": 1605539581
    },
    {
        "content": "<p>ah nice</p>",
        "id": 216884009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605539588
    },
    {
        "content": "<p>Hey, I am teaching some folks Rust today, so no weekly syncup</p>",
        "id": 217621114,
        "sender_full_name": "matklad",
        "timestamp": 1606134177
    },
    {
        "content": "<p>but, well, we have auto-import during completion now! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 217621134,
        "sender_full_name": "matklad",
        "timestamp": 1606134194
    },
    {
        "content": "<p>Just so it's here, the latest changelog is up at <a href=\"https://rust-analyzer.github.io/thisweek/2020/11/23/changelog-52.html\">https://rust-analyzer.github.io/thisweek/2020/11/23/changelog-52.html</a></p>",
        "id": 217646549,
        "sender_full_name": "Laurențiu",
        "timestamp": 1606147393
    },
    {
        "content": "<p>This week's changelog: <a href=\"https://rust-analyzer.github.io/thisweek/2020/11/30/changelog-53.html\">https://rust-analyzer.github.io/thisweek/2020/11/30/changelog-53.html</a></p>",
        "id": 218319425,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1606757909
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> hey, this week's changelog is up: <a href=\"https://rust-analyzer.github.io/thisweek/2020/12/07/changelog-54.html\">https://rust-analyzer.github.io/thisweek/2020/12/07/changelog-54.html</a></p>",
        "id": 219089990,
        "sender_full_name": "matklad",
        "timestamp": 1607353260
    },
    {
        "content": "<p>The highlight of the week is macro diagnostics and general cleanup by <span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span></p>",
        "id": 219090132,
        "sender_full_name": "matklad",
        "timestamp": 1607353326
    },
    {
        "content": "<p>(I've been quitely hacking away on the \"sharing config between various editors\" problem, hope to have a solution this week)</p>",
        "id": 219090164,
        "sender_full_name": "matklad",
        "timestamp": 1607353351
    },
    {
        "content": "<p><span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 219863983,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1607962487
    },
    {
        "content": "<p>Oh right!</p>",
        "id": 219864295,
        "sender_full_name": "matklad",
        "timestamp": 1607962632
    },
    {
        "content": "<p>I intended to make a <em>sneaky</em> sync-up: we are in the Christmas mode, so no pings</p>",
        "id": 219864345,
        "sender_full_name": "matklad",
        "timestamp": 1607962658
    },
    {
        "content": "<p><em>but</em> I've got sucked into implemented removal for a double linked list</p>",
        "id": 219864402,
        "sender_full_name": "matklad",
        "timestamp": 1607962679
    },
    {
        "content": "<p>This week's changelog makes me proud <span aria-label=\"blushing\" class=\"emoji emoji-1f633\" role=\"img\" title=\"blushing\">:blushing:</span> </p>\n<p><a href=\"https://rust-analyzer.github.io/thisweek/2020/12/14/changelog-55.html\">https://rust-analyzer.github.io/thisweek/2020/12/14/changelog-55.html</a></p>",
        "id": 219864479,
        "sender_full_name": "matklad",
        "timestamp": 1607962701
    },
    {
        "content": "<p><strong>soo</strong> much great features &amp; fixes in there!</p>",
        "id": 219864496,
        "sender_full_name": "matklad",
        "timestamp": 1607962712
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/6769\">#6769</a>, <a href=\"https://github.com/rust-lang/rust/issues/6841\">#6841</a> Remove this semicolon fix:</p>\n</blockquote>\n<p>this is really nice :D</p>",
        "id": 219864738,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607962808
    },
    {
        "content": "<p>Highlights are:</p>\n<ul>\n<li>Lazy resolution of edits in completion</li>\n<li>Fixed critical accidently quadratic perf bug in SyntaxRewriter</li>\n<li>A bunch of macro improvements by <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span></li>\n<li>LSP Configuration now has a single source of truth -- <a href=\"http://config.rs\">config.rs</a></li>\n</ul>",
        "id": 219864751,
        "sender_full_name": "matklad",
        "timestamp": 1607962814
    },
    {
        "content": "<p>Finally, I am unreasonably excited about mutable immutable syntax trees</p>",
        "id": 219864786,
        "sender_full_name": "matklad",
        "timestamp": 1607962834
    },
    {
        "content": "<p>(that's why I am implementing the darn doubly-linked list <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span> <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span> <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span> )</p>",
        "id": 219864841,
        "sender_full_name": "matklad",
        "timestamp": 1607962857
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/219864841\">said</a>:</p>\n<blockquote>\n<p>(that's why I am implementing the darn doubly-linked list <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span> <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span> <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span> )</p>\n</blockquote>\n<p>isn't there a crate for that?</p>",
        "id": 219864868,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607962872
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 219864921,
        "sender_full_name": "matklad",
        "timestamp": 1607962895
    },
    {
        "content": "<p>I have 2dimensional linked lists which needs to sorted along X dimension</p>",
        "id": 219864949,
        "sender_full_name": "matklad",
        "timestamp": 1607962910
    },
    {
        "content": "<p>Not sure if it's possible to factorize that nicely...</p>",
        "id": 219865032,
        "sender_full_name": "matklad",
        "timestamp": 1607962941
    },
    {
        "content": "<p>(aaaand I think in the end the whole thing needs to be raw-pointer based. Efficient&amp;Ergonomic syntax trees are scary)</p>",
        "id": 219865105,
        "sender_full_name": "matklad",
        "timestamp": 1607962973
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/219864751\">said</a>:</p>\n<blockquote>\n<p>Highlights are:</p>\n</blockquote>\n<p>also the Chalk update, which improves performance quite a bit</p>",
        "id": 219865478,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1607963136
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> reddit will either love you or hate you after you land that</p>",
        "id": 219865576,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1607963173
    },
    {
        "content": "<p>TBH, it's not <em>that</em> much worse than what we already have in rowan</p>",
        "id": 219865755,
        "sender_full_name": "matklad",
        "timestamp": 1607963262
    },
    {
        "content": "<p>I feel like folks just don't reallize how horrifyingly it is implemented inside :D</p>",
        "id": 219865831,
        "sender_full_name": "matklad",
        "timestamp": 1607963293
    },
    {
        "content": "<p>(and <em>that</em> is the real reason why we have this ast -&gt; SyntaxNode -&gt; cursor -&gt; GreenNode abstraction stacking -- to discourage folks from looking inside /s )</p>",
        "id": 219865924,
        "sender_full_name": "matklad",
        "timestamp": 1607963331
    },
    {
        "content": "<p>LSP 3.16 was officially released today and I have a PR up in lsp-types. We've been running on the proposed version for a while and I've been creating issues along the way for things we could take advantage of. If anyone else sees some useful opportunities (changelog: <a href=\"https://microsoft.github.io/language-server-protocol/specifications/specification-current/#version_3_16_0\">https://microsoft.github.io/language-server-protocol/specifications/specification-current/#version_3_16_0</a>) that I've missed please file issues or PRs</p>",
        "id": 219865964,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1607963345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> so true, yeah!</p>",
        "id": 219865977,
        "sender_full_name": "matklad",
        "timestamp": 1607963350
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203366\">@Jeremy Kolb</span> thanks for being on top of that!</p>",
        "id": 219866029,
        "sender_full_name": "matklad",
        "timestamp": 1607963370
    },
    {
        "content": "<p>Ok, I've just made the first smoke test of editing API work!</p>",
        "id": 219866154,
        "sender_full_name": "matklad",
        "timestamp": 1607963408
    },
    {
        "content": "<p>ship it!</p>",
        "id": 219866611,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1607963605
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> (hopefully) the last release of the year is out: <a href=\"https://rust-analyzer.github.io/thisweek/2020/12/28/changelog-57.html\">https://rust-analyzer.github.io/thisweek/2020/12/28/changelog-57.html</a>. Some of the larger features include better pattern and enum completion, extract and rename module assists, lifetime and label search/rename/go to definition and pre-built Apple M1 binaries. Also a bunch of MBE and proc macro fixes.</p>",
        "id": 221067042,
        "sender_full_name": "Laurențiu",
        "timestamp": 1609168531
    },
    {
        "content": "<p>Also, someone broke the auto-update feature of the Code extension <span aria-label=\"oh no\" class=\"emoji emoji-1f615\" role=\"img\" title=\"oh no\">:oh_no:</span></p>",
        "id": 221068328,
        "sender_full_name": "Laurențiu",
        "timestamp": 1609169697
    },
    {
        "content": "<p>The <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/7037\"><code>${0:_}</code></a> being inserted after applying some of the actions is also a bit sad.</p>",
        "id": 221087000,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1609185392
    },
    {
        "content": "<p>Today's changelog: <a href=\"https://rust-analyzer.github.io/thisweek/2021/01/04/changelog-58.html\">https://rust-analyzer.github.io/thisweek/2021/01/04/changelog-58.html</a></p>",
        "id": 221534908,
        "sender_full_name": "Laurențiu",
        "timestamp": 1609773331
    },
    {
        "content": "<p>Today's changelog: <a href=\"https://rust-analyzer.github.io/thisweek/2021/01/11/changelog-59.html\">https://rust-analyzer.github.io/thisweek/2021/01/11/changelog-59.html</a></p>",
        "id": 222309650,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1610378229
    },
    {
        "content": "<p>Biggest update: <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> re-installs sync-up in the t-compiler calendar</p>",
        "id": 222312319,
        "sender_full_name": "matklad",
        "timestamp": 1610379221
    },
    {
        "content": "<p>I've also started to work on that syntax tree redesign in <a href=\"https://github.com/rust-analyzer/rowan/tree/clone-for-update\">https://github.com/rust-analyzer/rowan/tree/clone-for-update</a></p>",
        "id": 222314713,
        "sender_full_name": "matklad",
        "timestamp": 1610380176
    },
    {
        "content": "<p>Today's changelog: <a href=\"https://rust-analyzer.github.io/thisweek/2021/01/18/changelog-60.html\">https://rust-analyzer.github.io/thisweek/2021/01/18/changelog-60.html</a></p>",
        "id": 223130256,
        "sender_full_name": "Laurențiu",
        "timestamp": 1610982079
    },
    {
        "content": "<p>As a remilder, we are having a steering meeting today!</p>",
        "id": 223130266,
        "sender_full_name": "matklad",
        "timestamp": 1610982082
    },
    {
        "content": "<p>But yeah, there's a changelog, as usual )</p>",
        "id": 223130336,
        "sender_full_name": "matklad",
        "timestamp": 1610982101
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span></p>",
        "id": 223908429,
        "sender_full_name": "matklad",
        "timestamp": 1611586888
    },
    {
        "content": "<p>we have a lot for this week: <a href=\"https://rust-analyzer.github.io/thisweek/2021/01/25/changelog-61.html\">https://rust-analyzer.github.io/thisweek/2021/01/25/changelog-61.html</a></p>",
        "id": 223908554,
        "sender_full_name": "matklad",
        "timestamp": 1611586923
    },
    {
        "content": "<p>I wonder if our steering process has anything to do with it <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 223908605,
        "sender_full_name": "matklad",
        "timestamp": 1611586945
    },
    {
        "content": "<p>Yeah, that meeting was fairly motivating for me</p>",
        "id": 223908726,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611586993
    },
    {
        "content": "<p>The highlights: <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> is working on supporting local items, <span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span> is working through some of the long-overdue refactors and <span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> is pushing proc macros forward</p>",
        "id": 223908915,
        "sender_full_name": "matklad",
        "timestamp": 1611587059
    },
    {
        "content": "<p>(I was mostly busy with rowan stuff. It got a bit faster&amp;smaller, one seemengly major optimization turned out to be useless, <em>but</em> we now have <code>countme</code> infra)</p>",
        "id": 223909113,
        "sender_full_name": "matklad",
        "timestamp": 1611587151
    },
    {
        "content": "<p>ohhhhh</p>",
        "id": 223909191,
        "sender_full_name": "matklad",
        "timestamp": 1611587170
    },
    {
        "content": "<p>of course, <span class=\"user-mention\" data-user-id=\"231447\">@Kirill Bulatov</span> shipped assoc item auto-import, <em>and</em> they are helping Microsoft to upstream inlay hints!</p>",
        "id": 223909300,
        "sender_full_name": "matklad",
        "timestamp": 1611587222
    },
    {
        "content": "<p>trait associated items completion are very useful one !</p>",
        "id": 223909529,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1611587308
    },
    {
        "content": "<p>who is rowan?</p>",
        "id": 223910446,
        "sender_full_name": "oliver",
        "timestamp": 1611587710
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rowan/\">https://github.com/rust-analyzer/rowan/</a></p>",
        "id": 223910465,
        "sender_full_name": "Laurențiu",
        "timestamp": 1611587718
    },
    {
        "content": "<p>And I'm slowly trying to go through the remaining issues and see if there's anything we can close</p>",
        "id": 223910675,
        "sender_full_name": "Laurențiu",
        "timestamp": 1611587808
    },
    {
        "content": "<p>Thank you so much for this <span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> !</p>",
        "id": 223910749,
        "sender_full_name": "matklad",
        "timestamp": 1611587853
    },
    {
        "content": "<p>what is the tl;dr for 'helping MS upstream inlay hints'?</p>",
        "id": 223910943,
        "sender_full_name": "oliver",
        "timestamp": 1611587943
    },
    {
        "content": "<p>The type hints we show after variable declarations and in other places are basically a hack, and they work only in Code because they're not standardized yet. Upstreaming means adding them to LSP, so every editor can use them, and we no longer need client-side code to render them. It might even fix the janky cursor movement around them.</p>",
        "id": 223911124,
        "sender_full_name": "Laurențiu",
        "timestamp": 1611588009
    },
    {
        "content": "<p>well.. I get type hints in Vim, but there is probably nuance</p>",
        "id": 223911209,
        "sender_full_name": "oliver",
        "timestamp": 1611588048
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/HqNtNGc3y0Sp4V5yFSNWe55S/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/HqNtNGc3y0Sp4V5yFSNWe55S/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/HqNtNGc3y0Sp4V5yFSNWe55S/image.png\"></a></div>",
        "id": 223911332,
        "sender_full_name": "Laurențiu",
        "timestamp": 1611588104
    },
    {
        "content": "<p>These ones</p>",
        "id": 223911346,
        "sender_full_name": "Laurențiu",
        "timestamp": 1611588108
    },
    {
        "content": "<p>If you're using coc.nvim, that's a fork of the Code extension, so it supports more stuff than most other clients</p>",
        "id": 223911431,
        "sender_full_name": "Laurențiu",
        "timestamp": 1611588133
    },
    {
        "content": "<p>that explains it</p>",
        "id": 223911472,
        "sender_full_name": "oliver",
        "timestamp": 1611588156
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/UI9KVvIf_qSFkXKxJ1AQARdb/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/UI9KVvIf_qSFkXKxJ1AQARdb/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/UI9KVvIf_qSFkXKxJ1AQARdb/image.png\"></a></div>",
        "id": 223911918,
        "sender_full_name": "oliver",
        "timestamp": 1611588341
    },
    {
        "content": "<p>so overall not as fully featured as what's presented in Code</p>",
        "id": 223915547,
        "sender_full_name": "oliver",
        "timestamp": 1611589732
    },
    {
        "content": "<p>It's only been implemented recently</p>",
        "id": 223915669,
        "sender_full_name": "Laurențiu",
        "timestamp": 1611589788
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/223909113\">said</a>:</p>\n<blockquote>\n<p>(I was mostly busy with rowan stuff. It got a bit faster&amp;smaller, one seemengly major optimization turned out to be useless, <em>but</em> we now have <code>countme</code> infra)</p>\n</blockquote>\n<p>Out of curiosity what was the optimization and why did it end up being useless?</p>",
        "id": 223937629,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1611598407
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 223937945,
        "sender_full_name": "bjorn3",
        "timestamp": 1611598560
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203366\">@Jeremy Kolb</span> we use structural shading between green nods -- all identical tokens in a file point to the same green node. This is done per file. I wanted to introduce a global read-only cache with frequent tokens -- keywords, punctuation, etc</p>",
        "id": 223938061,
        "sender_full_name": "matklad",
        "timestamp": 1611598602
    },
    {
        "content": "<p>so that literarly all syntax trees share the same <code>true</code> node. Turns out, this is not a big win in comparison to just per-file caching</p>",
        "id": 223938287,
        "sender_full_name": "matklad",
        "timestamp": 1611598690
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> I think matklad might be away or busy, so I'll do the honours today. The changelog post is up at <a href=\"https://rust-analyzer.github.io/thisweek/2021/02/01/changelog-62.html\">https://rust-analyzer.github.io/thisweek/2021/02/01/changelog-62.html</a></p>",
        "id": 224737407,
        "sender_full_name": "Laurențiu",
        "timestamp": 1612191635
    },
    {
        "content": "<p>The big items this week are async proc macro loading (by <strong>Edwin Cheng</strong>), references code lens (<strong>vsrs</strong>) and a lot of ongoing work for local item support done by <strong>Jonas Schievink</strong> .</p>",
        "id": 224737594,
        "sender_full_name": "Laurențiu",
        "timestamp": 1612191706
    },
    {
        "content": "<p>In addition, I've labelled more issues, so everyone can have a pick at an <code>S-actionable</code> (or <code>S-unactionable</code>) one</p>",
        "id": 224738449,
        "sender_full_name": "Laurențiu",
        "timestamp": 1612192000
    },
    {
        "content": "<p>last time I checked, all open issues were labeled actually! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 224739498,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1612192437
    },
    {
        "content": "<p><del>I think there's two remaining ones, but nothing too important.</del> Oh, somebody labelled them in the meanwhile.</p>",
        "id": 224739940,
        "sender_full_name": "Laurențiu",
        "timestamp": 1612192621
    },
    {
        "content": "<p>Hey, I am busy this Monday as well, could anyone cut a release? :)</p>",
        "id": 225526001,
        "sender_full_name": "matklad",
        "timestamp": 1612780754
    },
    {
        "content": "<p>Umm, yeah, I'll try</p>",
        "id": 225527281,
        "sender_full_name": "Laurențiu",
        "timestamp": 1612781584
    },
    {
        "content": "<p>@matklad r? <a href=\"https://github.com/rust-analyzer/rust-analyzer.github.io/commit/8a57b0a174b4e4d7d507defcf17c6cb096072153\">https://github.com/rust-analyzer/rust-analyzer.github.io/commit/8a57b0a174b4e4d7d507defcf17c6cb096072153</a></p>",
        "id": 225531665,
        "sender_full_name": "Laurențiu",
        "timestamp": 1612784352
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 225531819,
        "sender_full_name": "matklad",
        "timestamp": 1612784439
    },
    {
        "content": "<p>Hello <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span>, today's changelog is up at <a href=\"https://rust-analyzer.github.io/thisweek/2021/02/08/changelog-63.html\">https://rust-analyzer.github.io/thisweek/2021/02/08/changelog-63.html</a>.</p>\n<p>The bigger changes this week are two new assists, \"extract function\" and \"generate enum match methods\", even more work on local item support and a bunch of architecture and LSP client config docs.</p>",
        "id": 225555846,
        "sender_full_name": "Laurențiu",
        "timestamp": 1612796474
    },
    {
        "content": "<p>We also managed to update the version distributed with <code>rustup</code>. The previous one was from last September.</p>",
        "id": 225558127,
        "sender_full_name": "Laurențiu",
        "timestamp": 1612797336
    },
    {
        "content": "<p>Just to mention, we've got an initial discussion about inlay hints upstreaming, nothing really new happened, the guys seemed enthusiastic enough to work on our particular related pain points, I'll work on using that new API in RA to give them better feedback.</p>",
        "id": 225562035,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1612798871
    },
    {
        "content": "<p>Did they fix the cursor movement across the hints?</p>",
        "id": 225562205,
        "sender_full_name": "Laurențiu",
        "timestamp": 1612798930
    },
    {
        "content": "<p>Let's see how long would it take Microsoft to ship the feature <span class=\"user-mention\" data-user-id=\"231447\">@Kirill Bulatov</span> did for fun :)</p>",
        "id": 225562339,
        "sender_full_name": "matklad",
        "timestamp": 1612798994
    },
    {
        "content": "<p>No, they did not fix the caret before we've spoken, but now they consider doing this and it seems like a small change from their side, so maybe it gets better soon.</p>",
        "id": 225563159,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1612799344
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"231447\">@Kirill Bulatov</span> is there an actual vscode issue that this is all being tracked in from their side or is the defacto location the issue in our repo?</p>",
        "id": 225564631,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1612799966
    },
    {
        "content": "<p>Nothing but our repo and their frozen issue with tons of \"I'd love that feature\" comments.<br>\nI'll create a few after I get something working for RA.</p>",
        "id": 225565025,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1612800117
    },
    {
        "content": "<p>I think that this will be the thirdish feature in vscode that has largely come out of rust-analyzer.</p>",
        "id": 225565081,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1612800130
    },
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span>, it's that time again!</p>",
        "id": 226393730,
        "sender_full_name": "matklad",
        "timestamp": 1613401252
    },
    {
        "content": "<p>Heres's the <code>0b1000000</code> changelog: <a href=\"https://rust-analyzer.github.io/thisweek/2021/02/15/changelog-64.html\">https://rust-analyzer.github.io/thisweek/2021/02/15/changelog-64.html</a></p>",
        "id": 226393826,
        "sender_full_name": "matklad",
        "timestamp": 1613401309
    },
    {
        "content": "<p>it's huuuge!</p>",
        "id": 226393839,
        "sender_full_name": "matklad",
        "timestamp": 1613401313
    },
    {
        "content": "<p>We shipped inner items!</p>",
        "id": 226393902,
        "sender_full_name": "matklad",
        "timestamp": 1613401335
    },
    {
        "content": "<p>I also have one announcement to make...</p>",
        "id": 226394087,
        "sender_full_name": "matklad",
        "timestamp": 1613401437
    },
    {
        "content": "<p><a href=\"https://matklad.github.io/2021/02/15/NEAR.html\">https://matklad.github.io/2021/02/15/NEAR.html</a></p>",
        "id": 226394139,
        "sender_full_name": "matklad",
        "timestamp": 1613401450
    },
    {
        "content": "<p>I am joining NEAR (sharded proof of stake public blockchain)! TL;DR: I’ll be spending 60% of my time on WASM runtime for smart contracts and 40% on rust-analyzer :)</p>",
        "id": 226394177,
        "sender_full_name": "matklad",
        "timestamp": 1613401468
    },
    {
        "content": "<p>I am also making some progress on mutable syntax trees</p>",
        "id": 226394474,
        "sender_full_name": "matklad",
        "timestamp": 1613401606
    },
    {
        "content": "<p>I am excited about the API for editing trees, it really becomes world's simpler. At the same time, I am not thrilled about the perf impact</p>",
        "id": 226394577,
        "sender_full_name": "matklad",
        "timestamp": 1613401668
    },
    {
        "content": "<p>I am seeing 10% overall regression on analysis stats. I think it's ok, in the grand scheme of things, but it really grinds my gears that mutability is not zero cost )</p>",
        "id": 226394699,
        "sender_full_name": "matklad",
        "timestamp": 1613401730
    },
    {
        "content": "<p>It also seems that today I was nerd-sniped into designing an actor library by <span class=\"user-mention\" data-user-id=\"218683\">@Alice Ryhl</span> , so we might gain some more strumture aroound threar joining</p>",
        "id": 226394836,
        "sender_full_name": "matklad",
        "timestamp": 1613401801
    },
    {
        "content": "<p>That's it for me!</p>",
        "id": 226394884,
        "sender_full_name": "matklad",
        "timestamp": 1613401809
    },
    {
        "content": "<p>The changelog wasn't posted on twitter yet</p>",
        "id": 226395294,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1613402035
    },
    {
        "content": "<p>Congrats on the job! I'm glad they'll let you work on rust-analyzer.</p>",
        "id": 226395303,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1613402040
    },
    {
        "content": "<p>If I find the time I might try to implement the new completion item labelling</p>",
        "id": 226395348,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1613402045
    },
    {
        "content": "<p>I already mentioned it, but I made a PoC Grafana dashboard with our analysis-stats metrics, it's at <a href=\"https://grafana.dend.ro/d/XF6z6oPMk/rust-analyzer-metrics?orgId=1\">https://grafana.dend.ro/d/XF6z6oPMk/rust-analyzer-metrics?orgId=1</a></p>",
        "id": 226396636,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613402710
    },
    {
        "content": "<p>It doesn't sync yet, but it's a bit hacky anyway, so I don't know if anyone will use it</p>",
        "id": 226396681,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613402738
    },
    {
        "content": "<p>it def looks prettier than what we use.</p>",
        "id": 226396898,
        "sender_full_name": "matklad",
        "timestamp": 1613402843
    },
    {
        "content": "<p>It's more about supporting zoom than being pretty, but I suspect we could implement that in the old one so it stays a static web page</p>",
        "id": 226397010,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613402888
    },
    {
        "content": "<p>It's Plotly anyway, because the Grafana plots don't support random values on the X axis</p>",
        "id": 226397040,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613402913
    },
    {
        "content": "<p>I've hooked up a proto branch with the proposed hints API used:<br>\n<a href=\"https://github.com/rust-analyzer/rust-analyzer/compare/master...SomeoneToIgnore:upstream-inlay-hints?expand=1\">https://github.com/rust-analyzer/rust-analyzer/compare/master...SomeoneToIgnore:upstream-inlay-hints?expand=1</a></p>\n<p>Currently feels pretty far behind the decorators we have: no our issues are solved, a few more added on top.<br>\nI've also reached out and shared the feedback, proposing to do some tracking on it, that was the hardest task of the whole week <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span><br>\nI'll do my best to keep it rolling and will be waiting and adjusting the code as the time goes.</p>\n<p>Maybe next week I'm finally able to spend some time on the completion at last.</p>",
        "id": 226397474,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1613403142
    },
    {
        "content": "<p>iirc, that was the case with our orignal impl of highlightingz</p>",
        "id": 226397580,
        "sender_full_name": "matklad",
        "timestamp": 1613403209
    },
    {
        "content": "<p>it flickered badly</p>",
        "id": 226397592,
        "sender_full_name": "matklad",
        "timestamp": 1613403215
    },
    {
        "content": "<p>So, I wouldn't worry too much about \"point in time\" quality</p>",
        "id": 226397669,
        "sender_full_name": "matklad",
        "timestamp": 1613403245
    },
    {
        "content": "<p>That diff looks great, though</p>",
        "id": 226398108,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613403479
    },
    {
        "content": "<p>Well this time Code just updates the hints after ~500ms no matter what I try, so no flickering for me <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> <br>\nHopefully that's me not knowing how to code in TS rather than some inner issue.</p>\n<p>Anyway, at the current state, only completions to the left are displayed, so all our <code>: Type</code> completions are messed up, also, due to some issues with vscode-preview (maybe?) I'm unable to apply our syntax highlighting stub (had to comment it out) and the build does not work well with the <code>-next</code> lsp version too that was added recently.<br>\nAll that combined hints that I'll most probably skip a few weeks before announcing any further progress here.</p>",
        "id": 226398413,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1613403613
    },
    {
        "content": "<p>Oh I THINK the semantic highlight workaround can either be removed now or... really really soon. I think I saw that implemented somewhere</p>",
        "id": 226400481,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1613404705
    },
    {
        "content": "<p>I think this covers it: <a href=\"https://github.com/microsoft/vscode-languageserver-node/commit/dae62de921d25964e8732411ca09e532dde992f5\">https://github.com/microsoft/vscode-languageserver-node/commit/dae62de921d25964e8732411ca09e532dde992f5</a> and we're now on that client version.</p>",
        "id": 226400712,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1613404808
    },
    {
        "content": "<p>I'll verify before removing the workaround...</p>",
        "id": 226401933,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1613405104
    },
    {
        "content": "<p>Slightly improved metrics dashboard is up: <a href=\"https://rust-analyzer.github.io/metrics/\">https://rust-analyzer.github.io/metrics/</a></p>",
        "id": 226792665,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613645139
    },
    {
        "content": "<p>oh this is nice!</p>",
        "id": 226797268,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1613648013
    },
    {
        "content": "<p>Next useful thing would be to synchronize the zoom level</p>",
        "id": 226797288,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613648042
    },
    {
        "content": "<p>It would be neat to see commit details beyond the sha</p>",
        "id": 226978465,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1613748371
    },
    {
        "content": "<p>You mean like a PR#?</p>",
        "id": 226980848,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613749246
    },
    {
        "content": "<p>I was thinking either the commit message on hover or a clickable link to the commit in github?</p>",
        "id": 226992217,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1613753322
    },
    {
        "content": "<p>Release is out, changelog PR is up</p>",
        "id": 227230572,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613980813
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203366\">Jeremy Kolb</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/226992217\">said</a>:</p>\n<blockquote>\n<p>I was thinking either the commit message on hover or a clickable link to the commit in github?</p>\n</blockquote>\n<p>Clicking on a graph now copies the commit URL to clipboard</p>",
        "id": 227233231,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613982653
    },
    {
        "content": "<p>Hello, <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span>, this week's changelog is up at <a href=\"https://rust-analyzer.github.io/thisweek/2021/02/22/changelog-65.html\">https://rust-analyzer.github.io/thisweek/2021/02/22/changelog-65.html</a></p>",
        "id": 227278851,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614006027
    },
    {
        "content": "<p>This was a smaller release; the biggest changes are an improved \"extract function\" assist, an UTF-8 offsets protocol extension (not available yet in Code) and automatic server downloads when doing remote development on Alpine. There was also a nice <code>chalk</code> upgrade and better support for completion with <code>dyn Trait</code></p>",
        "id": 227279382,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614006211
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu Nicola</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/227233231\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"203366\">Jeremy Kolb</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/226992217\">said</a>:</p>\n<blockquote>\n<p>I was thinking either the commit message on hover or a clickable link to the commit in github?</p>\n</blockquote>\n<p>Clicking on a graph now copies the commit URL to clipboard</p>\n</blockquote>\n<p>ooh this is perfect, thanks for working on this!</p>",
        "id": 227279668,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1614006316
    },
    {
        "content": "<p>Actually, I asked for help on that one (thought it turns out that using <code>position: fixed</code> isn't rocket science)</p>",
        "id": 227279909,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614006402
    },
    {
        "content": "<p>Hello, <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span>! This week's changelog is up at <a href=\"https://rust-analyzer.github.io/thisweek/2021/03/01/changelog-66.html\">https://rust-analyzer.github.io/thisweek/2021/03/01/changelog-66.html</a>. We have a couple of nice assists, some local item fixes and <code>vec!</code> is finally inferred again.</p>",
        "id": 228244739,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614610865
    },
    {
        "content": "<p>(and we have a steering mtng in the neighbouring channel<br>\n)</p>",
        "id": 228245119,
        "sender_full_name": "matklad",
        "timestamp": 1614610987
    },
    {
        "content": "<p>Hello <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span>! This week we've got some assist changes, a new MBE matcher and other fixes, and work towards using the <code>chalk</code> types in RA. Full changelog at <a href=\"https://rust-analyzer.github.io/thisweek/2021/03/08/changelog-67.html\">https://rust-analyzer.github.io/thisweek/2021/03/08/changelog-67.html</a>.</p>",
        "id": 229312285,
        "sender_full_name": "Laurențiu",
        "timestamp": 1615215737
    },
    {
        "content": "<p>Hello, <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span>! This week's changelog is up at <a href=\"https://rust-analyzer.github.io/thisweek/2021/03/15/changelog-68.html\">https://rust-analyzer.github.io/thisweek/2021/03/15/changelog-68.html</a>. We have some very nice assists, MBE optimizations and fixes and some <code>chalk</code> work, but please skim the full changelog for everything.</p>",
        "id": 230359279,
        "sender_full_name": "Laurențiu",
        "timestamp": 1615820576
    },
    {
        "content": "<p>our changelogs have grown really large, seems like we're landing a lot of stuff</p>",
        "id": 230359431,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1615820625
    },
    {
        "content": "<p>good problem to have</p>",
        "id": 230359620,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1615820677
    },
    {
        "content": "<p>I guess I'm also trimming fewer PRs than matklad.</p>",
        "id": 230359739,
        "sender_full_name": "Laurențiu",
        "timestamp": 1615820719
    },
    {
        "content": "<p>yeah, and stuff like the chalk PRs could probably be summed up with one line (\"further Chalk integration\")</p>",
        "id": 230359836,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1615820758
    },
    {
        "content": "<p>no, we legitimately increased the pace of development</p>",
        "id": 230359855,
        "sender_full_name": "matklad",
        "timestamp": 1615820762
    },
    {
        "content": "<p>i've been trying to catch up with my inbox since morning, and I am not succeeding :)</p>",
        "id": 230359947,
        "sender_full_name": "matklad",
        "timestamp": 1615820789
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/weekly.20sync-up/near/230359836\">said</a>:</p>\n<blockquote>\n<p>yeah, and stuff like the chalk PRs could probably be summed up with one line (\"further Chalk integration\")</p>\n</blockquote>\n<p>I do that sometimes.</p>",
        "id": 230360136,
        "sender_full_name": "Laurențiu",
        "timestamp": 1615820856
    },
    {
        "content": "<p>but yeah, it'd be good to find less labor-intensive soulution for changelog trimming and compression. It's valuable for the users to keep the logs short</p>",
        "id": 230360137,
        "sender_full_name": "matklad",
        "timestamp": 1615820857
    },
    {
        "content": "<p>I've started adding some marker comments to the PRs so we can classify them automatically</p>",
        "id": 230360321,
        "sender_full_name": "Laurențiu",
        "timestamp": 1615820903
    },
    {
        "content": "<p>Do we want to enable proc macros by default? We now have version check merged, so that should work nicely?</p>",
        "id": 230360335,
        "sender_full_name": "matklad",
        "timestamp": 1615820910
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> saw that! Could you document them in the docs? I think, ideally, the author of PR should leave a chanegelog  note.</p>",
        "id": 230360444,
        "sender_full_name": "matklad",
        "timestamp": 1615820948
    },
    {
        "content": "<p>Sure, but maybe after actually implementing that? Just in case we need to change the format. OTOH, it's not like we care too much about backwards compatibility on those.</p>",
        "id": 230360727,
        "sender_full_name": "Laurențiu",
        "timestamp": 1615821044
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>  <a href=\"https://github.com/rust-lang/rust/issues/8033\">#8033</a> would be make sure the version check (it is a warning actually) will actually work in all platform.</p>",
        "id": 230366539,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1615822952
    },
    {
        "content": "<p>I forgot about this, but I guess y'all know it by know. Today's changelog is up at <a href=\"https://rust-analyzer.github.io/thisweek/2021/03/22/changelog-69.html\">https://rust-analyzer.github.io/thisweek/2021/03/22/changelog-69.html</a>.</p>",
        "id": 231369936,
        "sender_full_name": "Laurențiu",
        "timestamp": 1616441139
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> changelog is up at <a href=\"https://rust-analyzer.github.io/thisweek/2021/03/29/changelog-70.html\">https://rust-analyzer.github.io/thisweek/2021/03/29/changelog-70.html</a>. The big items are initial Macros 2.0 support and the fix for a recently-introduced memory leak.</p>",
        "id": 232263542,
        "sender_full_name": "Laurențiu",
        "timestamp": 1617022845
    },
    {
        "content": "<p>I'll tweet</p>",
        "id": 232263823,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617022979
    },
    {
        "content": "<p><a href=\"https://twitter.com/rust_analyzer/status/1376520337551204357\">https://twitter.com/rust_analyzer/status/1376520337551204357</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/rust_analyzer/status/1376520337551204357\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1217461647377420289/HXHa6hZU_normal.jpg\"></a><p>Changelog #70 is out!\n\nThis release features initial Macros 2.0 support, a fix for a recently introduced memory leak, as well as a new \"move item\" command.\n\n<a href=\"https://t.co/WhFL0M2v55\">https://rust-analyzer.github.io/thisweek/2021/03/29/changelog-70.html</a> <a href=\"https://t.co/YuBGBXMcd6\">https://twitter.com/rust_analyzer/status/1376520337551204357/photo/1</a></p><span>- rust-analyzer (@rust_analyzer)</span></div></div>",
        "id": 232263949,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617023025
    },
    {
        "content": "<p>Random policy question: When are we dropping the \"experimental\" in the description of r-a? I feel like we've moved past that stage already :)</p>",
        "id": 232264400,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617023195
    },
    {
        "content": "<p>Sounds good to me</p>",
        "id": 232264623,
        "sender_full_name": "Laurențiu",
        "timestamp": 1617023290
    },
    {
        "content": "<p>Yeah, let's drop experimental! That's <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> but also <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span> Ideally, we should've switched from experimental straight to <code>rustc --lsp</code></p>",
        "id": 232266576,
        "sender_full_name": "matklad",
        "timestamp": 1617024153
    },
    {
        "content": "<p>Seems like I can't edit the twitter profile</p>",
        "id": 232267301,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617024472
    },
    {
        "content": "<p>Edited the description</p>",
        "id": 232268735,
        "sender_full_name": "matklad",
        "timestamp": 1617025029
    },
    {
        "content": "<p>people have already noticed <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span>  <a href=\"https://www.reddit.com/r/rust/comments/mfptzg/rustanalyzer_drop_experimental/\">https://www.reddit.com/r/rust/comments/mfptzg/rustanalyzer_drop_experimental/</a></p>",
        "id": 232279653,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617029090
    },
    {
        "content": "<p>That's me :)</p>",
        "id": 232279863,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1617029164
    },
    {
        "content": "<p>Hello, <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span>. The latest changelog is up at <a href=\"https://rust-analyzer.github.io/thisweek/2021/04/05/changelog-71.html\">https://rust-analyzer.github.io/thisweek/2021/04/05/changelog-71.html</a>. We have a couple of new assists, some nice quality-of-life improvements and Jonas did a lot of work on interning stuff to reduce the memory usage.</p>",
        "id": 233175045,
        "sender_full_name": "Laurențiu",
        "timestamp": 1617631203
    },
    {
        "content": "<p>We also have a steering meeting next week, so it's a good place to look back, and look forward, and have some thoughts before the next Monday!</p>",
        "id": 233175967,
        "sender_full_name": "matklad",
        "timestamp": 1617631678
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>🏻</p>",
        "id": 233176048,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1617631704
    },
    {
        "content": "<p>By the looks of it, we actually did everything we wanted to in this sprint?</p>",
        "id": 233176050,
        "sender_full_name": "matklad",
        "timestamp": 1617631706
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8313\">#8313</a> is still in progres , right ?</p>",
        "id": 233176937,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1617632100
    },
    {
        "content": "<p>Ah, right, but we are making great progress on that one!</p>",
        "id": 233177087,
        "sender_full_name": "matklad",
        "timestamp": 1617632166
    },
    {
        "content": "<p>And \"Fix major bugs in local items resolution\" is done by Jonas too</p>",
        "id": 233177202,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1617632241
    },
    {
        "content": "<p>Tweeted the release <a href=\"https://twitter.com/rust_analyzer/status/1379081098219683846\">https://twitter.com/rust_analyzer/status/1379081098219683846</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/rust_analyzer/status/1379081098219683846\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1217461647377420289/HXHa6hZU_normal.jpg\"></a><p>Changelog #71 is out!\n\nThis release features 2 new assists, many bug fixes, and improvements to memory usage.\n\n<a href=\"https://t.co/Q4x7z2gNE5\">https://rust-analyzer.github.io/thisweek/2021/04/05/changelog-71.html</a> <a href=\"https://t.co/qRDRrtLHBj\">https://twitter.com/rust_analyzer/status/1379081098219683846/photo/1</a></p><span>- rust-analyzer (@rust_analyzer)</span></div></div>",
        "id": 233179992,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617633558
    },
    {
        "content": "<p>congrats all on another release, moving the RLS world forward one week at a time</p>",
        "id": 233180920,
        "sender_full_name": "Andrew Chin (eminence)",
        "timestamp": 1617634007
    },
    {
        "content": "<p>there's a steering meeting today, right?</p>",
        "id": 234142156,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618227167
    },
    {
        "content": "<p>Yep</p>",
        "id": 234142460,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1618227338
    },
    {
        "content": "<p>Hello <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> (can we rename this?), today's changelog is up at <a href=\"https://rust-analyzer.github.io/thisweek/2021/04/12/changelog-72.html\">https://rust-analyzer.github.io/thisweek/2021/04/12/changelog-72.html</a>. In short, it's just awesome.</p>",
        "id": 234163402,
        "sender_full_name": "Laurențiu",
        "timestamp": 1618236076
    },
    {
        "content": "<p>and small!</p>",
        "id": 234163477,
        "sender_full_name": "matklad",
        "timestamp": 1618236103
    },
    {
        "content": "<p>though, we are having weekly/steering meeting in an hour, not right now.</p>",
        "id": 234163728,
        "sender_full_name": "matklad",
        "timestamp": 1618236181
    },
    {
        "content": "<p>Oops, must be a timezone/DST thing</p>",
        "id": 234163856,
        "sender_full_name": "Laurențiu",
        "timestamp": 1618236215
    },
    {
        "content": "<p>is the meeting time written down anywhere?</p>",
        "id": 234164130,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618236303
    },
    {
        "content": "<p>No, AFAIK</p>",
        "id": 234164168,
        "sender_full_name": "Laurențiu",
        "timestamp": 1618236316
    },
    {
        "content": "<p>hm</p>",
        "id": 234164239,
        "sender_full_name": "matklad",
        "timestamp": 1618236346
    },
    {
        "content": "<p>I am just a slave to the calendar: </p>\n<p><a href=\"/user_uploads/4715/AYVdVE153NwsNQlkBb-ixo3G/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/AYVdVE153NwsNQlkBb-ixo3G/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/AYVdVE153NwsNQlkBb-ixo3G/image.png\"></a></div>",
        "id": 234164260,
        "sender_full_name": "matklad",
        "timestamp": 1618236358
    },
    {
        "content": "<p>It's in the Rust calendar at least</p>",
        "id": 234164292,
        "sender_full_name": "detrumi",
        "timestamp": 1618236364
    },
    {
        "content": "<p><a href=\"https://calendar.google.com/calendar?cid=NnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZ3JvdXAuY2FsZW5kYXIuZ29vZ2xlLmNvbQ\">https://calendar.google.com/calendar?cid=NnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZ3JvdXAuY2FsZW5kYXIuZ29vZ2xlLmNvbQ</a></p>",
        "id": 234164400,
        "sender_full_name": "matklad",
        "timestamp": 1618236398
    },
    {
        "content": "<p>I think that's the magic link</p>",
        "id": 234164421,
        "sender_full_name": "matklad",
        "timestamp": 1618236405
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/weekly.20sync-up/near/234164260\">said</a>:</p>\n<blockquote>\n<p>I am just a slave to the calendar: </p>\n<p><a href=\"/user_uploads/4715/AYVdVE153NwsNQlkBb-ixo3G/image.png\">image.png</a></p>\n</blockquote>\n<p>Wow, how did you make it show in <strong>my</strong> timezone?</p>",
        "id": 234164518,
        "sender_full_name": "Laurențiu",
        "timestamp": 1618236440
    },
    {
        "content": "<p>ah, it is</p>",
        "id": 234164521,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618236440
    },
    {
        "content": "<p>it was definitely an hour earlier last few times (for Europe at least)</p>",
        "id": 234164794,
        "sender_full_name": "detrumi",
        "timestamp": 1618236508
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu</span> I'm behind your back!</p>",
        "id": 234164912,
        "sender_full_name": "matklad",
        "timestamp": 1618236559
    },
    {
        "content": "<p>My fault only :-)</p>",
        "id": 234164913,
        "sender_full_name": "Laurențiu",
        "timestamp": 1618236559
    },
    {
        "content": "<p>(not really, but close enough to be in the same TZ)</p>",
        "id": 234164932,
        "sender_full_name": "matklad",
        "timestamp": 1618236572
    },
    {
        "content": "<p>but the calendar doesn't say what time zone the event is locked to</p>",
        "id": 234164959,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618236583
    },
    {
        "content": "<p>I think it just shows in your local timezone</p>",
        "id": 234165000,
        "sender_full_name": "Laurențiu",
        "timestamp": 1618236599
    },
    {
        "content": "<p>yeah</p>",
        "id": 234165103,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618236622
    },
    {
        "content": "<p>but there has to be some time zone the meeting itself moves along with</p>",
        "id": 234165173,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618236645
    },
    {
        "content": "<p>or some sort of time spec like \"UTC\"</p>",
        "id": 234165219,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618236664
    },
    {
        "content": "<p>ah, moscow standard time</p>",
        "id": 234165308,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618236696
    },
    {
        "content": "<p>/me imagines an alternative timeline, where there's only a single timezone, but everyone is using tabs with custom width</p>",
        "id": 234165323,
        "sender_full_name": "matklad",
        "timestamp": 1618236702
    },
    {
        "content": "<p>it only says when printing the event :/</p>",
        "id": 234165339,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618236710
    },
    {
        "content": "<p>daylight saving indentation</p>",
        "id": 234165426,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618236730
    },
    {
        "content": "<p>TIL I'm on the same TZ as Moscow, at least sometimes</p>",
        "id": 234165620,
        "sender_full_name": "Laurențiu",
        "timestamp": 1618236793
    },
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span>, latest changelog is up at <a href=\"https://rust-analyzer.github.io/thisweek/2021/04/19/changelog-73.html\">https://rust-analyzer.github.io/thisweek/2021/04/19/changelog-73.html</a>, we've got a new assist, a <code>cargo check</code> hack that broke Windows project loading, and lazier diagnostics</p>",
        "id": 235200046,
        "sender_full_name": "Laurențiu",
        "timestamp": 1618845941
    },
    {
        "content": "<p>I guess <code>cargo check</code> hack that broke windows would be a good test for our (yet to be written) point release infra...</p>",
        "id": 235204212,
        "sender_full_name": "matklad",
        "timestamp": 1618847578
    },
    {
        "content": "<p>Another update is that I've emailed core team about moving rust-analyzer to the rust-lang org, waiting for the reply now</p>",
        "id": 235204746,
        "sender_full_name": "matklad",
        "timestamp": 1618847805
    },
    {
        "content": "<p>What's the process for joining the <code>rust-lang</code> org?</p>",
        "id": 235208866,
        "sender_full_name": "Laurențiu",
        "timestamp": 1618849328
    },
    {
        "content": "<p>normally you join a team or working group</p>",
        "id": 235208984,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618849371
    },
    {
        "content": "<p>I guess I'll find out when we get there</p>",
        "id": 235209069,
        "sender_full_name": "Laurențiu",
        "timestamp": 1618849407
    },
    {
        "content": "<p>I think this might even be automated? So we'd sync team memberships in rust-lang/teams and it should work</p>",
        "id": 235209074,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618849409
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/weekly.20sync-up/near/235208984\">said</a>:</p>\n<blockquote>\n<p>normally you join a team or working group</p>\n</blockquote>\n<p>And then open a PR to <a href=\"https://github.com/rust-lang/team/\">https://github.com/rust-lang/team/</a> to add yourself. Once it is merged by a member of the core team, you will automatically be invited by <code>@rust-lang-owner</code>.</p>",
        "id": 235209080,
        "sender_full_name": "bjorn3",
        "timestamp": 1618849414
    },
    {
        "content": "<p>it looks like, with const generics getting used more heavily in the ecosystem, we might want to prioritize supporting them</p>",
        "id": 236164777,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1619440344
    },
    {
        "content": "<p>specifically we have to come up with a good approach for <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/7434\">https://github.com/rust-analyzer/rust-analyzer/issues/7434</a></p>",
        "id": 236164912,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1619440395
    },
    {
        "content": "<p>so... I think the general approach would be to come up with some kind of ID that can address all of these consts, right? and then make queries like <code>body</code> and <code>infer</code> take those IDs</p>",
        "id": 236166404,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1619441026
    },
    {
        "content": "<p>I'm thinking more and more we need some kind of general \"Node ID\" like rustc has</p>",
        "id": 236166503,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1619441057
    },
    {
        "content": "<p>there are some plans to move rustc towards hierarchical-ish node IDs for better incrementality, that seems like something we might want to have too</p>",
        "id": 236168173,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1619441782
    },
    {
        "content": "<p>we currently have the \"bdfs\" logic that makes AstIds more robust, something like that could work here too</p>",
        "id": 236168333,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1619441860
    },
    {
        "content": "<p>Hm, aren't we alerady using  general ids to identify bodies?</p>",
        "id": 236170197,
        "sender_full_name": "matklad",
        "timestamp": 1619442575
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/-tLherpR-euT5VOedN3er2WL/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/-tLherpR-euT5VOedN3er2WL/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/-tLherpR-euT5VOedN3er2WL/image.png\"></a></div>",
        "id": 236170223,
        "sender_full_name": "matklad",
        "timestamp": 1619442587
    },
    {
        "content": "<p>We have id's for const bodies and for function bodies, extending that shouldn't be too hard?</p>",
        "id": 236170332,
        "sender_full_name": "matklad",
        "timestamp": 1619442615
    },
    {
        "content": "<p>yup that should work</p>",
        "id": 236171668,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1619443114
    },
    {
        "content": "<p>I'm just wondering what the best way to obtain those IDs is</p>",
        "id": 236171730,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1619443134
    },
    {
        "content": "<p>like, we could just use AstIds like I did for blocks, but that kind of uses them for even more stuff they're not really supposed to be used for, right?</p>",
        "id": 236171882,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1619443186
    },
    {
        "content": "<p>and also might be problematic if you have <code>Thing&lt;T&gt;</code> where <code>T</code> is actually a <code>const T: usize</code> from the parent</p>",
        "id": 236172020,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1619443228
    },
    {
        "content": "<p>so every type parameter <em>might</em> be a const parameter and thus needs an ID</p>",
        "id": 236172060,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1619443248
    },
    {
        "content": "<p>I think the \"extending IDs to all consts\" part is the hardest part of this, yes</p>",
        "id": 236176628,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1619444876
    },
    {
        "content": "<p>because we can have const bodies nested deep in types</p>",
        "id": 236176684,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1619444893
    },
    {
        "content": "<p>OTOH if we collect them out-of-band while constructing <code>TypeRef</code>s maybe it's not that hard</p>",
        "id": 236176838,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1619444977
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/weekly.20sync-up/near/236172060\">said</a>:</p>\n<blockquote>\n<p>so every type parameter <em>might</em> be a const parameter and thus needs an ID</p>\n</blockquote>\n<p>not completely necessarily... <code>T</code> should not be lowered to a Chalk <code>ConcreteConst</code> anyway</p>",
        "id": 236177161,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1619445098
    },
    {
        "content": "<p>I think that actually works out. const args can only be a const parameter, a literal, or <code>{ something }</code>. Only a const parameter can be confused with a type, but that will be lowered to <code>ConstValue::Placeholder</code> and doesn't need a body</p>",
        "id": 236179178,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1619445847
    },
    {
        "content": "<p>or, wait, can it be a const</p>",
        "id": 236179258,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1619445876
    },
    {
        "content": "<p>yes <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> so that makes it more complicated</p>",
        "id": 236179338,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1619445903
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/weekly.20sync-up/near/236176838\">said</a>:</p>\n<blockquote>\n<p>OTOH if we collect them out-of-band while constructing <code>TypeRef</code>s maybe it's not that hard</p>\n</blockquote>\n<p>We do want to collect them as bodies so that IDE stuff works, right?</p>",
        "id": 236180529,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1619446325
    },
    {
        "content": "<p>yeah, I mean something like while lowering AST to <code>TypeRef</code>s, keep an <code>Arena&lt;Expr&gt;</code> where we collect those bodies for all types in the def and use the IDs from that</p>",
        "id": 236181603,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1619446741
    },
    {
        "content": "<p>Hm, that's really annoying... </p>\n<p>If I were running a non-incremental compiler, I'd just have a global <code>bodies: Vec&lt;Body&gt;</code> and I'd push a body onto this list every time I needed to lower something. So the type refs would contain <code>BodyId</code>s, and that would be enough to globally identify a thing. </p>\n<p>In salsa, that's not really possible...</p>",
        "id": 236185710,
        "sender_full_name": "matklad",
        "timestamp": 1619448192
    },
    {
        "content": "<p>yeah, but we can do it per-def</p>",
        "id": 236186470,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1619448443
    },
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span>, this is the usual Monday ping. Today's changelog is up at <a href=\"https://rust-analyzer.github.io/thisweek/2021/04/26/changelog-74.html\">https://rust-analyzer.github.io/thisweek/2021/04/26/changelog-74.html</a>. We have (hopefully) two new assists, support for macros in type positions, and a lot of fixes including one for hangs on project loading.</p>",
        "id": 236188804,
        "sender_full_name": "Laurențiu",
        "timestamp": 1619449234
    },
    {
        "content": "<p>Hello <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span>, today's changelog is up at <a href=\"https://rust-analyzer.github.io/thisweek/2021/05/03/changelog-75.html\">https://rust-analyzer.github.io/thisweek/2021/05/03/changelog-75.html</a>. It's been a quiet week, but we  have some nice first contributions and a couple of fixes.</p>",
        "id": 237174303,
        "sender_full_name": "Laurențiu",
        "timestamp": 1620054080
    },
    {
        "content": "<p>Also we (hopefully) fixed the annoying token already registered issue!</p>",
        "id": 237174542,
        "sender_full_name": "matklad",
        "timestamp": 1620054124
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink  [he/him]</span> we have \"attribute proc macros\" in the steering issue, is it correct that you are tacking that?</p>",
        "id": 237175433,
        "sender_full_name": "matklad",
        "timestamp": 1620054285
    },
    {
        "content": "<p>somewhat, I'm not actively working on it at the moment</p>",
        "id": 237175541,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620054309
    },
    {
        "content": "<p>I think to make progress on that I need to figure out how to do attribute stripping correctly, I'll open another thread about that</p>",
        "id": 237175681,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620054342
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink  [he/him]</span> do u think it is related to <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8092\">https://github.com/rust-analyzer/rust-analyzer/issues/8092</a> ?</p>",
        "id": 237177576,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1620054801
    },
    {
        "content": "<p>not immediately, no</p>",
        "id": 237178571,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620055072
    },
    {
        "content": "<p>So is it orthogonal? I would like to make a pr to fix it… but I don’t know if whats the plan there.</p>",
        "id": 237179281,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1620055352
    },
    {
        "content": "<p>I think it's orthogonal yeah, feel free to work on it</p>",
        "id": 237179660,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620055507
    },
    {
        "content": "<p>hmm, well, maybe with the proposal in <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Attribute.20stripping.20for.20proc.20macros/near/237179615\">https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Attribute.20stripping.20for.20proc.20macros/near/237179615</a> it might be affected</p>",
        "id": 237179762,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620055545
    },
    {
        "content": "<p>Hello, <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span>, today's changelog is up at <a href=\"https://rust-analyzer.github.io/thisweek/2021/05/10/changelog-76.html\">https://rust-analyzer.github.io/thisweek/2021/05/10/changelog-76.html</a>. We now load <code>.cargo/config.toml</code>, auto-insert <code>}</code> in use trees, and got a couple of performance fixes.</p>",
        "id": 238156621,
        "sender_full_name": "Laurențiu",
        "timestamp": 1620658824
    },
    {
        "content": "<p>I'm still slowly working on replacing our unification code by Chalk's by the way, which also necessitates some changes to coercion and how we're handling obligations</p>",
        "id": 238156984,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1620658951
    },
    {
        "content": "<p>On my side, I am replacing SyntaxRewriter usages with mutable trees and wonder what should be the next big task for me</p>",
        "id": 238157322,
        "sender_full_name": "matklad",
        "timestamp": 1620659065
    },
    {
        "content": "<p>Last week, we also eliminated almost all broken windows by the way!</p>",
        "id": 238157370,
        "sender_full_name": "matklad",
        "timestamp": 1620659084
    },
    {
        "content": "<p>I'm looking into attribute macros yet again</p>",
        "id": 238157618,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620659186
    },
    {
        "content": "<p>Hello, <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span>, in today's <a href=\"https://rust-analyzer.github.io/thisweek/2021/05/17/changelog-77.html\">release</a> we have array length inference support, auto-indent in use trees, and a nice assortment of fixes.</p>",
        "id": 239104612,
        "sender_full_name": "Laurențiu",
        "timestamp": 1621263620
    },
    {
        "content": "<p>And we have a steering meeting next week!</p>",
        "id": 239105652,
        "sender_full_name": "matklad",
        "timestamp": 1621263985
    },
    {
        "content": "<p>So, it's time to start thinking \"deeply\" about the bigger picture!</p>\n<p>I am personally torn between two epics: </p>\n<ul>\n<li>extracing rust-analyzer's parser as a stand-alone crate</li>\n<li>prototyping the tree-based HIR</li>\n</ul>",
        "id": 239105877,
        "sender_full_name": "matklad",
        "timestamp": 1621264070
    },
    {
        "content": "<p>This week we've also almost completely switched to mutable syntax trees.</p>",
        "id": 239106508,
        "sender_full_name": "matklad",
        "timestamp": 1621264275
    },
    {
        "content": "<p>Are you no longer using <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/dev/syntax.md\">the rowan/red-green scheme</a> , or is it a modification of that?<br>\nI know that doc is old, but what I read in master a few days ago seems to be along the same lines.</p>",
        "id": 239108940,
        "sender_full_name": "Chris B",
        "timestamp": 1621264963
    },
    {
        "content": "<p>Re: Extraction of libraries, extracting the match-checking algorithm is something that could be relatively straightforward</p>",
        "id": 239109223,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621265059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink  [he/him]</span> that's an interesting thought -- do you mean from rustc?</p>",
        "id": 239112677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621266285
    },
    {
        "content": "<p>yeah, r-a's is not as advanced</p>",
        "id": 239112738,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621266312
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/8717#issuecomment-831865759\">related discussion</a></p>",
        "id": 239117973,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1621268156
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"412662\">@Chris B</span> it's a modification of that. The red layer is now mutable (via interior mutability). So you can do side-effectful things like <code>node.remove();</code> What happens internally is that a green tree gets respine, in functional style, and all live red node start pointing to the updated green nodesz</p>",
        "id": 239118952,
        "sender_full_name": "matklad",
        "timestamp": 1621268511
    },
    {
        "content": "<p>What would be the big parts we'd have to address for the librarification of RA's parser?</p>",
        "id": 239123623,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1621270340
    },
    {
        "content": "<p>after <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8856\">rust-analyzer/rust-analyzer#8856</a>, I think the Chalk move is finally properly done, so I might be looking at introducing more type-based diagnostics afterwards (and fixing the remaining type mismatches (a big part of them comes from missing attribute macro support, though))</p>",
        "id": 239124212,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1621270569
    },
    {
        "content": "<p>or maybe <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/4558\">rust-analyzer/rust-analyzer#4558</a>, or const generics <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 239124307,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1621270611
    },
    {
        "content": "<p>great work!</p>",
        "id": 239124966,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621270877
    },
    {
        "content": "<p>We also need some reusable lint infra, so that we don't have to implement <code>#[allow]</code> directives etc. for every single lint</p>",
        "id": 239125055,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621270921
    },
    {
        "content": "<p>yep</p>",
        "id": 239125496,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1621271090
    },
    {
        "content": "<p>I would like to push for <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/4558\">rust-analyzer/rust-analyzer#4558</a>. It could be quite a big project, depending on how that happens.</p>",
        "id": 239127994,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1621272136
    },
    {
        "content": "<p>Random question:  should we have random video meetings about rust-analyzer? Sort of office hours, just to talk about stuff?</p>",
        "id": 239149705,
        "sender_full_name": "matklad",
        "timestamp": 1621281255
    },
    {
        "content": "<p>we could do that, would that be helpful?</p>",
        "id": 239152723,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621282409
    },
    {
        "content": "<p>maybe if the recording gets published it could help draw more people in</p>",
        "id": 239162440,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621286494
    },
    {
        "content": "<p>Hello <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span>. Today's changelog is up at <a href=\"https://rust-analyzer.github.io/thisweek/2021/05/24/changelog-78.html\">https://rust-analyzer.github.io/thisweek/2021/05/24/changelog-78.html</a>, with improved workspace symbol lookup, auto-detection of import styles, improved \"generate getter\" assist, and loads of internal changes. Also, there's a steering meeting today.</p>",
        "id": 240062720,
        "sender_full_name": "Laurențiu",
        "timestamp": 1621868403
    },
    {
        "content": "<p>Hello, <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span>, this week's changelog is up at <a href=\"https://rust-analyzer.github.io/thisweek/2021/05/31/changelog-79.html\">https://rust-analyzer.github.io/thisweek/2021/05/31/changelog-79.html</a>. We have some support for stand-alone files, \"Go to implementations\" for trait functions, cleaner completion lists, and a lot of other improvements.</p>",
        "id": 240843317,
        "sender_full_name": "Laurențiu",
        "timestamp": 1622473229
    },
    {
        "content": "<p>On my side, I started a bit with refactoring diagnostics. I want to finish this base refctor this week. Although there's a bunch of broken windows as well, which need looking into</p>",
        "id": 240843946,
        "sender_full_name": "matklad",
        "timestamp": 1622473574
    },
    {
        "content": "<p>Does anyone want to pick items of <a href=\"https://github.com/rust-analyzer/rust-analyzer/labels/Broken%20Window\">https://github.com/rust-analyzer/rust-analyzer/labels/Broken%20Window</a> ?</p>",
        "id": 240844001,
        "sender_full_name": "matklad",
        "timestamp": 1622473616
    },
    {
        "content": "<p>I can try looking into the quadratic issue</p>",
        "id": 240844187,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1622473718
    },
    {
        "content": "<p>I accidentally made attribute macros work, I wonder what the right way to roll them out is?</p>",
        "id": 240844720,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622474017
    },
    {
        "content": "<p>Maybe we should gate them behind an extra setting for now?</p>",
        "id": 240844747,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622474035
    },
    {
        "content": "<p>I think that makes sense</p>",
        "id": 240846311,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622474963
    },
    {
        "content": "<p>just keep them 'experimental' for a week or two to iron out bugs</p>",
        "id": 240846416,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622475005
    },
    {
        "content": "<p>at least until we don't see any obvious ones ;)</p>",
        "id": 240846449,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622475025
    },
    {
        "content": "<p>I suggest accidentally rolling them out on Sunday, so that there's no way back.</p>",
        "id": 240847843,
        "sender_full_name": "matklad",
        "timestamp": 1622475901
    },
    {
        "content": "<p>I suggest adding  top-level <code>experimental</code> config flag -- so that users have it enabled and get new stuff without case by case opt in.</p>",
        "id": 240848028,
        "sender_full_name": "matklad",
        "timestamp": 1622476016
    },
    {
        "content": "<p>There is a bug in our latest release, detached Rust files opening is not working despite the changelist.</p>\n<p>The fix is trivial: <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/9082\">https://github.com/rust-analyzer/rust-analyzer/issues/9082</a> is it worth to make another release with it?</p>",
        "id": 240862150,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1622487014
    },
    {
        "content": "<p>Yeah, let's make a release</p>",
        "id": 240864623,
        "sender_full_name": "matklad",
        "timestamp": 1622489109
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>22:25:19|~/projects/rust-analyzer|master✓\nλ git switch release\nBranch &#39;release&#39; set up to track remote branch &#39;release&#39; from &#39;upstream&#39;.\nSwitched to a new branch &#39;release&#39;\n\n22:25:26|~/projects/rust-analyzer|release✓\nλ git status --short --branch\n## release...upstream/release\n\n22:25:27|~/projects/rust-analyzer|release✓\nλ git pull --rebase\nremote: Enumerating objects: 41, done.\nremote: Counting objects: 100% (41/41), done.\nremote: Compressing objects: 100% (19/19), done.\nremote: Total 41 (delta 23), reused 35 (delta 21), pack-reused 0\nUnpacking objects: 100% (41/41), 186.84 KiB | 1.05 MiB/s, done.\nFrom github.com:rust-analyzer/rust-analyzer\n + 97e69e52d...8ea7f771a gh-pages   -&gt; upstream/gh-pages  (forced update)\n   020610f45..42dfdb87c  master     -&gt; upstream/master\n   4cb4b23dc..42dfdb87c  staging    -&gt; upstream/staging\nAlready up to date.\n\n22:25:31|~/projects/rust-analyzer|release✓\nλ git status --short --branch\n## release...upstream/release\n\n22:25:31|~/projects/rust-analyzer|release✓\nλ git cherry-pick a127b10d0087c19c299ccfcb5b9f3af4615411f8\nerror: commit a127b10d0087c19c299ccfcb5b9f3af4615411f8 is a merge but no -m option was given.\nfatal: cherry-pick failed\n\n22:25:44|~/projects/rust-analyzer|release✓\nλ git status --short --branch\n## release...upstream/release\n\n22:25:45|~/projects/rust-analyzer|release✓\nλ git cherry-pick 60e7817\n[release 28e32fe40] Fix opening single files\n Author: Kirill Bulatov &lt;mail4score@gmail.com&gt;\n Date: Mon May 31 21:37:08 2021 +0300\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\n22:25:59|~/projects/rust-analyzer|release✓\nλ git status --short --branch\n## release...upstream/release [ahead 1]\n\n22:26:00|~/projects/rust-analyzer|release✓\nλ git status --short --branch\n## release...upstream/release [ahead 1]\n\n22:26:02|~/projects/rust-analyzer|release✓\nλ git push\nEnumerating objects: 11, done.\nCounting objects: 100% (11/11), done.\nDelta compression using up to 24 threads\nCompressing objects: 100% (5/5), done.\nWriting objects: 100% (6/6), 510 bytes | 510.00 KiB/s, done.\nTotal 6 (delta 4), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (4/4), completed with 4 local objects.\nTo github.com:rust-analyzer/rust-analyzer.git\n   f43839812..28e32fe40  release -&gt; release\n</code></pre></div>",
        "id": 240864719,
        "sender_full_name": "matklad",
        "timestamp": 1622489194
    },
    {
        "content": "<p>I'll give <a href=\"https://code.visualstudio.com/api/working-with-extensions/testing-extension\">https://code.visualstudio.com/api/working-with-extensions/testing-extension</a> a try as my next task then.<br>\n(not sure how that's supposed to work without the binary though)</p>",
        "id": 240867287,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1622491576
    },
    {
        "content": "<p>Good question. I was thinking even that perhaps the time has come to move the code extension to another repo?</p>",
        "id": 240867516,
        "sender_full_name": "matklad",
        "timestamp": 1622491786
    },
    {
        "content": "<p>That way, we can write horrible slow integration tests, without interfering with rust-analyzer's usual test suite.</p>",
        "id": 240867582,
        "sender_full_name": "matklad",
        "timestamp": 1622491817
    },
    {
        "content": "<p>Hello, <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> , this week's changelog is at <a href=\"https://rust-analyzer.github.io/thisweek/2021/06/07/changelog-80.html\">https://rust-analyzer.github.io/thisweek/2021/06/07/changelog-80.html</a>. We have initial support for attribute proc macros, some support for the 2021 edition, some hover changes, and a lot of assist fixes. We also enabled proc macros in the CI metrics, so there's a nice drop there.</p>",
        "id": 241789585,
        "sender_full_name": "Laurențiu",
        "timestamp": 1623078014
    },
    {
        "content": "<p>Umm, this is a bit awkward. I post the changelog link to the other thread so Jonas or matklad can tweet it, so by the weekly meeting time pretty much everyone has already seen it :-).</p>",
        "id": 241789755,
        "sender_full_name": "Laurențiu",
        "timestamp": 1623078082
    },
    {
        "content": "<p>My update: still ill, but better. PSA: even if you and your SO are both total recluses and basically never leave the house, do get a covid shot anyways :)</p>",
        "id": 241791017,
        "sender_full_name": "matklad",
        "timestamp": 1623078535
    },
    {
        "content": "<p>I've been restructuring <code>CompletionContext</code> a bit more(most of which I did the week prior to last though), it doesn't have a ton of different fields anymore now.</p>",
        "id": 241791370,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623078659
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/weekly.20sync-up/near/241791017\">said</a>:</p>\n<blockquote>\n<p>My update: still ill, but better. PSA: even if you and your SO are both total recluses and basically never leave the house, do get a covid shot anyways :)</p>\n</blockquote>\n<p>And <strong>do</strong> get a Covid shot even if you were sick. Not everyone gets long-lasting immunity from it.</p>",
        "id": 241793132,
        "sender_full_name": "Laurențiu",
        "timestamp": 1623079315
    },
    {
        "content": "<p>Glad to hear that you're doing better. Nothing from me... I'm busy with work and non-rust things</p>",
        "id": 241804314,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1623083819
    },
    {
        "content": "<p>I have apparently made attribute macros even redder than before<br>\n<a href=\"/user_uploads/4715/9MBcKOPlOWsJNls_MLhQLvTE/screenshot-2021-06-07-194413.png\">screenshot-2021-06-07-194413.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/9MBcKOPlOWsJNls_MLhQLvTE/screenshot-2021-06-07-194413.png\" title=\"screenshot-2021-06-07-194413.png\"><img src=\"/user_uploads/4715/9MBcKOPlOWsJNls_MLhQLvTE/screenshot-2021-06-07-194413.png\"></a></div>",
        "id": 241813798,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1623087878
    },
    {
        "content": "<p>I didn't even know a keyword could be an <code>unresolvedReference</code>??</p>",
        "id": 241813839,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1623087902
    },
    {
        "content": "<p>Hello <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span>, today's changelog is up at  <a href=\"https://rust-analyzer.github.io/thisweek/2021/06/14/changelog-81.html\">https://rust-analyzer.github.io/thisweek/2021/06/14/changelog-81.html</a>. We have a big diagnostics refactoring, better completions and \"Go to definition\" and more attribute proc macro fixes.</p>",
        "id": 242610352,
        "sender_full_name": "Laurențiu",
        "timestamp": 1623682874
    },
    {
        "content": "<p>Ominously, just as Niko is removing GC support from salsa, I've noticed a couple of fresh complaints about memory usage :D</p>",
        "id": 242610567,
        "sender_full_name": "matklad",
        "timestamp": 1623682936
    },
    {
        "content": "<p>Just tried clearing the memory twice, it says 107 mb remaining (I don't recall what that is), but the process itself is at 921 MB RSS.</p>",
        "id": 242611325,
        "sender_full_name": "Laurențiu",
        "timestamp": 1623683215
    },
    {
        "content": "<p>That may be fragmented memory causing the memory allocator to be unable to return contiguous chunks of memory &gt;= 1 page to the OS.</p>",
        "id": 242612272,
        "sender_full_name": "bjorn3",
        "timestamp": 1623683566
    },
    {
        "content": "<p>Is there a good way to measure fragmentation? I've heard a lot of horror stories about it, and I think, given our allocation habits, we should be hitting the worst possible case here.</p>",
        "id": 242612735,
        "sender_full_name": "matklad",
        "timestamp": 1623683754
    },
    {
        "content": "<p>That sounds likely -- \"Server status\" also shows 107 MB, so maybe that's what the allocator says we're using.</p>",
        "id": 242612804,
        "sender_full_name": "Laurențiu",
        "timestamp": 1623683765
    },
    {
        "content": "<p>It's not great by any means, but if we can tweak the allocator to always use mmap, we can run a workload and compare its memory usage profile (peak or sampled) with that of the unmodified version. The difference should be caused by external fragmentation.</p>",
        "id": 242616016,
        "sender_full_name": "Laurențiu",
        "timestamp": 1623684974
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/weekly.20sync-up/near/242612735\">said</a>:</p>\n<blockquote>\n<p>Is there a good way to measure fragmentation? I've heard a lot of horror stories about it, and I think, given our allocation habits, we should be hitting the worst possible case here.</p>\n</blockquote>\n<p>From <a href=\"https://www.joyfulbikeshedding.com/blog/2019-03-14-what-causes-ruby-memory-bloat.html\">https://www.joyfulbikeshedding.com/blog/2019-03-14-what-causes-ruby-memory-bloat.html</a>: <a href=\"https://github.com/FooBarWidget/heap_dumper_visualizer\">https://github.com/FooBarWidget/heap_dumper_visualizer</a></p>",
        "id": 242618315,
        "sender_full_name": "bjorn3",
        "timestamp": 1623685808
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/weekly.20sync-up/near/242616016\">said</a>:</p>\n<blockquote>\n<p>It's not great by any means, but if we can tweak the allocator to always use mmap, we can run a workload and compare its memory usage profile (peak or sampled) with that of the unmodified version. The difference should be caused by external fragmentation.</p>\n</blockquote>\n<p>Never mind, that makes no sense.</p>",
        "id": 242649178,
        "sender_full_name": "Laurențiu",
        "timestamp": 1623699685
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/weekly.20sync-up/near/242618315\">said</a>:</p>\n<blockquote>\n<p>From <a href=\"https://www.joyfulbikeshedding.com/blog/2019-03-14-what-causes-ruby-memory-bloat.html\">https://www.joyfulbikeshedding.com/blog/2019-03-14-what-causes-ruby-memory-bloat.html</a>: <a href=\"https://github.com/FooBarWidget/heap_dumper_visualizer\">https://github.com/FooBarWidget/heap_dumper_visualizer</a></p>\n</blockquote>\n<p><code>malloc_trim</code> does sound interesting, I guess we could also call it when clearing the memory.</p>",
        "id": 242693830,
        "sender_full_name": "Laurențiu",
        "timestamp": 1623739693
    },
    {
        "content": "<p>hey <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span>, it's time for another weekly sync up!</p>",
        "id": 243395392,
        "sender_full_name": "matklad",
        "timestamp": 1624287669
    },
    {
        "content": "<p>Looking at the changelog for the past week reveals an interesting pattern: <a href=\"https://rust-analyzer.github.io/thisweek/2021/06/21/changelog-82.html\">https://rust-analyzer.github.io/thisweek/2021/06/21/changelog-82.html</a></p>",
        "id": 243395451,
        "sender_full_name": "matklad",
        "timestamp": 1624287699
    },
    {
        "content": "<p>We were refactoring a lot of tests! I think this is really cool -- it really means that we focus on long-term things, rather on \"getting things done right now\"!</p>",
        "id": 243395630,
        "sender_full_name": "matklad",
        "timestamp": 1624287756
    },
    {
        "content": "<p>We also have better tests, which is a nice side benefit <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span> !</p>",
        "id": 243395661,
        "sender_full_name": "matklad",
        "timestamp": 1624287771
    },
    {
        "content": "<p>On my side, I've also came back to thinking about managing concurrency in rust-analyzer, and came up with this: </p>\n<p><a href=\"https://github.com/matklad/devils/blob/63eb7e4a60b3b5c777340a0429ab64be12290188/src/lib.rs#L1-L137\">https://github.com/matklad/devils/blob/63eb7e4a60b3b5c777340a0429ab64be12290188/src/lib.rs#L1-L137</a></p>",
        "id": 243396065,
        "sender_full_name": "matklad",
        "timestamp": 1624287893
    },
    {
        "content": "<p>I am not sure if this library will graduate from <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> 's fooling with structured concurrency to actually being part of rust-analyzer, but this dosen't seem completely unreasonable to me at this point</p>",
        "id": 243396196,
        "sender_full_name": "matklad",
        "timestamp": 1624287942
    },
    {
        "content": "<p>oh, very cool, will take a look later</p>",
        "id": 243396236,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624287958
    },
    {
        "content": "<p>I guess, that's it on my side. Anyone has anything fun to report?</p>",
        "id": 243396437,
        "sender_full_name": "matklad",
        "timestamp": 1624288032
    },
    {
        "content": "<p>didn't get to work much on r-a last week, but now I'm fooling around with on-type formatting again</p>",
        "id": 243396595,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624288087
    },
    {
        "content": "<p>Nothing from me.</p>",
        "id": 243396692,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1624288130
    },
    {
        "content": "<p>Refactored a bunch of tests, thats about it for me</p>",
        "id": 243397553,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1624288474
    },
    {
        "content": "<p>Also I made no new progress on the quadratic highlighting issue unfortunately</p>",
        "id": 243397581,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1624288488
    },
    {
        "content": "<p>Right, I wanted to say that I'll take over that!</p>",
        "id": 243397630,
        "sender_full_name": "matklad",
        "timestamp": 1624288508
    },
    {
        "content": "<p>Nothing actionable from me.</p>\n<p>I've tried running <code>db.parse</code> during the cache warm-up to speed up completions even more, but looks like that has no effect on the profile traces: they still are reparsed during completion (reparse is done for completion renders, to be precise).<br>\nStuck on digging that, but almost sure it's due to macro expansion.</p>\n<p>So far revolve around there, thinking on why that many reparses of different files are needed for completion renders and why they are not interned.</p>",
        "id": 243398365,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1624288833
    },
    {
        "content": "<p>Yeah, this sounds like <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8754\">https://github.com/rust-analyzer/rust-analyzer/issues/8754</a> -- havent' investigated that fully myself yet</p>",
        "id": 243398525,
        "sender_full_name": "matklad",
        "timestamp": 1624288899
    },
    {
        "content": "<p>I haven't looked at the LSP diagnostic pull model yet but it's documented here <a href=\"https://github.com/microsoft/vscode-languageserver-node/blob/main/protocol/src/common/proposed.diagnostics.md\">https://github.com/microsoft/vscode-languageserver-node/blob/main/protocol/src/common/proposed.diagnostics.md</a> It should be available client-side once <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/9359\">https://github.com/rust-analyzer/rust-analyzer/pull/9359</a> is in</p>",
        "id": 243401724,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1624290095
    },
    {
        "content": "<p>Hello, <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span>, today's changelog is up at <a href=\"https://rust-analyzer.github.io/thisweek/2021/06/28/changelog-83.html\">https://rust-analyzer.github.io/thisweek/2021/06/28/changelog-83.html</a>. We have some nice performance improvements for IDE features, better <code>cfg</code> completion and loop and function exit point highlighting.</p>",
        "id": 244157884,
        "sender_full_name": "Laurențiu",
        "timestamp": 1624892446
    },
    {
        "content": "<p>just for some additional visibility, I've opened a PR to add some more people to the wg-rls-2 working group member list and give them <code>@bors r+</code> rights so that more people can sync the submodule <a href=\"https://github.com/rust-lang/team/pull/598\">https://github.com/rust-lang/team/pull/598</a></p>",
        "id": 244158433,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624892690
    },
    {
        "content": "<p>not a complete list, but the usual suspects that do or may want to do releases and submodule syncs are in there</p>",
        "id": 244158521,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624892731
    },
    {
        "content": "<p>But isn't it frowned upon to self-<code>r+</code> PRs to <code>rust-lang/rust</code>?</p>",
        "id": 244158659,
        "sender_full_name": "Laurențiu",
        "timestamp": 1624892778
    },
    {
        "content": "<p>yeah, but submodule updates are an exception IIRC</p>",
        "id": 244158805,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624892844
    },
    {
        "content": "<p>any code changes do need to be reviewed</p>",
        "id": 244158837,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624892857
    },
    {
        "content": "<p>Ah, okay</p>",
        "id": 244158967,
        "sender_full_name": "Laurențiu",
        "timestamp": 1624892902
    },
    {
        "content": "<p>I am on vacation this week, so I’ll be partially available! Last week I made some progress on the hir2.0 design. Where the progress is defined as finding assumptions that RA makes which are just wrong.</p>\n<p>An interesting one is <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/9403\">https://github.com/rust-analyzer/rust-analyzer/issues/9403</a> — today, during macro expansion, we assume that we “map” input tokens to output tokens, but that’s not what actually takes place, and we need to do something about it.</p>",
        "id": 244161461,
        "sender_full_name": "matklad",
        "timestamp": 1624893940
    },
    {
        "content": "<p>I'm still somewhat confused about what this means concretely</p>",
        "id": 244162305,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624894274
    },
    {
        "content": "<p>but I get that something like <code>Span::join</code> isn't really implementable with what we have now</p>",
        "id": 244162381,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624894305
    },
    {
        "content": "<p>I've followed the issue about macros loosely. It made me think of something we have at work: there is a DSL that contains import statements that semantically do not import namespaces, but instead sections of a file (more like a pre-processor / C[++] imports). Perhaps it could be an interesting thought experiment to think of macros less as the expansion of the tokens the macro is invoked with and more as \"importing\" (in the pre-processor sense of the word) code, except not from a file but from thin air through how the macro is defined. Macro arguments represent connection points between the old invocation code and the new generated code, kind of in the way of templating. Except templates can also be proc macros, so... it's definitely not a perfect analogy I'm putting together here <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>Since I'm otherwise not that involved, I can't really relate to specifics anyways, just had this come to mind because I worked with our imports at work recently. Food for thought.</p>",
        "id": 244164966,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1624895308
    },
    {
        "content": "<p>We already treat macro expansion results as virtual files</p>",
        "id": 244165968,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624895706
    },
    {
        "content": "<p>Hello <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span>, new changelog is up at <a href=\"https://rust-analyzer.github.io/thisweek/2021/07/05/changelog-84.html\">https://rust-analyzer.github.io/thisweek/2021/07/05/changelog-84.html</a>. We have an improved \"Replace <code>if let</code> with match assist\", better closure type inference and a couple of other goodies.</p>",
        "id": 244946245,
        "sender_full_name": "Laurențiu",
        "timestamp": 1625497308
    },
    {
        "content": "<p>Hello <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span>, today's changelog is up at <a href=\"https://rust-analyzer.github.io/thisweek/2021/07/12/changelog-85.html\">https://rust-analyzer.github.io/thisweek/2021/07/12/changelog-85.html</a>, with improved assists and type inference fixes. Steering meeting the today in other thread.</p>",
        "id": 245698275,
        "sender_full_name": "Laurențiu",
        "timestamp": 1626102006
    },
    {
        "content": "<p>Hello, <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span>, today's changelog is up at <a href=\"https://rust-analyzer.github.io/thisweek/2021/07/19/changelog-86.html\">https://rust-analyzer.github.io/thisweek/2021/07/19/changelog-86.html</a>. We have multiple proc macro ABI support, \"Go to type definition\" improvements and a Windows update workaround.</p>",
        "id": 246466385,
        "sender_full_name": "Laurențiu",
        "timestamp": 1626706868
    },
    {
        "content": "<p>I am excited about <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/9550\">https://github.com/rust-analyzer/rust-analyzer/pull/9550</a>! Such a great feature!</p>",
        "id": 246466609,
        "sender_full_name": "matklad",
        "timestamp": 1626706935
    },
    {
        "content": "<p>And a first contribution, too :-)</p>",
        "id": 246466727,
        "sender_full_name": "Laurențiu",
        "timestamp": 1626706985
    },
    {
        "content": "<p>On my side, I think I am at my 20th \"It'll take me half an hour to add tests to project-model\"! Getting there though</p>",
        "id": 246466776,
        "sender_full_name": "matklad",
        "timestamp": 1626707008
    },
    {
        "content": "<p>Oh, and I've started <a href=\"https://www.youtube.com/playlist?list=PLhb66M_x9UmrqXhQuIpWC5VgTdrGxMx3y\">https://www.youtube.com/playlist?list=PLhb66M_x9UmrqXhQuIpWC5VgTdrGxMx3y</a> ! Probably should start plugging that link into the docs</p>",
        "id": 246466933,
        "sender_full_name": "matklad",
        "timestamp": 1626707068
    },
    {
        "content": "<p>I'm working on adding unit tests for proc macros, it turned out somewhat annoying</p>",
        "id": 246467616,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626707400
    },
    {
        "content": "<p>We need to obtain an in-process macro server, but the arrangement of the <code>proc_macro_api</code> and <code>proc_macro_srv</code> crates makes this a bit hard</p>",
        "id": 246467733,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626707442
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/weekly.20sync-up/near/246466609\">said</a>:</p>\n<blockquote>\n<p>I am excited about <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/9550\">https://github.com/rust-analyzer/rust-analyzer/pull/9550</a>! Such a great feature!</p>\n</blockquote>\n<p>Yeah, this is pretty cool!</p>",
        "id": 246467939,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626707539
    },
    {
        "content": "<p>though I'm wondering about the long-term maintainability of this</p>",
        "id": 246467968,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626707552
    },
    {
        "content": "<p>Why do we want in-process? Just to make things faster? Big <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> from me!</p>",
        "id": 246467997,
        "sender_full_name": "matklad",
        "timestamp": 1626707566
    },
    {
        "content": "<p>presumably we'll delete old ABIs once they're no longer used by stable rust</p>",
        "id": 246468002,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626707567
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/weekly.20sync-up/near/246467997\">said</a>:</p>\n<blockquote>\n<p>Why do we want in-process? Just to make things faster? Big <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> from me!</p>\n</blockquote>\n<p>because I don't think you can reliably spawn a binary target from a unit test, at least not without artifact dependencies</p>",
        "id": 246468080,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626707607
    },
    {
        "content": "<p>this one <a href=\"https://rust-lang.github.io/rfcs/3028-cargo-binary-dependencies.html\">https://rust-lang.github.io/rfcs/3028-cargo-binary-dependencies.html</a></p>",
        "id": 246468143,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626707637
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink  [he/him]</span> you can spawn the binary from the same crate.</p>",
        "id": 246468151,
        "sender_full_name": "matklad",
        "timestamp": 1626707642
    },
    {
        "content": "<p>ah no, that's only for integration tests</p>",
        "id": 246468222,
        "sender_full_name": "matklad",
        "timestamp": 1626707660
    },
    {
        "content": "<p>yeah</p>",
        "id": 246468242,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626707669
    },
    {
        "content": "<p>and I'd really love to have proc macros available in unit tests too</p>",
        "id": 246468269,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626707683
    },
    {
        "content": "<p>Yeah, anyway, in-process feels better to me -- \"no IPC/IO in tests\" i think served us well so far</p>",
        "id": 246468353,
        "sender_full_name": "matklad",
        "timestamp": 1626707718
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink  [he/him]</span> as someone more familiar with <code>rustc</code>, would it be possible to extract some form of an ap published crate for proc macro server, which rustc and ra can re-use, like we did for lexer?</p>",
        "id": 246468525,
        "sender_full_name": "matklad",
        "timestamp": 1626707781
    },
    {
        "content": "<p>To be honest, I wish very hard that that \"just happens\", but I am trying not to think about me driving that effort :)</p>",
        "id": 246468633,
        "sender_full_name": "matklad",
        "timestamp": 1626707841
    },
    {
        "content": "<p>yes, me too :D</p>",
        "id": 246468754,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626707887
    },
    {
        "content": "<p>it should be possible to extract the proc_macro_bridge into its own crate</p>",
        "id": 246468778,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626707899
    },
    {
        "content": "<p>but, that still leaves the question of how to deal with breakage in its interface</p>",
        "id": 246468814,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626707921
    },
    {
        "content": "<p>in the long term, I don't think we have much choice but to sync with nightly rust, like clippy and rustfmt do</p>",
        "id": 246468900,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626707957
    },
    {
        "content": "<p>I actually started doing this extraction, but wasn't really sure what it'd buy us in the short term</p>",
        "id": 246469237,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626708103
    },
    {
        "content": "<p>By \"interface\" you mean the <code>API</code> of the crate, or the <code>ABI</code> of proc-macros?</p>",
        "id": 246469263,
        "sender_full_name": "matklad",
        "timestamp": 1626708115
    },
    {
        "content": "<p>the crate's public API</p>",
        "id": 246469295,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626708123
    },
    {
        "content": "<p>I don't think there are a lot of short-term wins -- short-term, it's <strong>always</strong> easier just to copy-paste stuff in. I do think long-term this would be worthwhile. LIke, in the end, this code will be shared, and we can share it today, so we might as well get started!</p>",
        "id": 246469432,
        "sender_full_name": "matklad",
        "timestamp": 1626708175
    },
    {
        "content": "<p>I think we can just chase the API -- shouldn't be harder than chasing the API <em>and</em> updating vendored sources. One way to make it easier is to add a test upstraem which exercises the API we use. That way, upstream folks will notice when they break API and could be more mindful about that. </p>\n<p>For <code>rustc_lexer</code>, the sharing worked out alright I thinkz</p>",
        "id": 246469757,
        "sender_full_name": "matklad",
        "timestamp": 1626708287
    },
    {
        "content": "<blockquote>\n<p>in the long term, I don't think we have much choice but to sync with nightly rust, like clippy and rustfmt do</p>\n</blockquote>\n<p>Maaaybe. I'd still would like to try the other way around, and adsorb rustc into rust-analyzer \"repo\". Its so much easier to live without bootstrapping and x.py shenanigans.</p>",
        "id": 246470043,
        "sender_full_name": "matklad",
        "timestamp": 1626708407
    },
    {
        "content": "<p>The difference with <code>rustc_lexer</code> is that we can update that whenever we want</p>",
        "id": 246470306,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626708495
    },
    {
        "content": "<p>Ah, and, for proc_maccro, we need to update every time the ABI changes... yeah, that's a good point <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 246470414,
        "sender_full_name": "matklad",
        "timestamp": 1626708543
    },
    {
        "content": "<p><code>proc_macro</code> on the other hand is tied to a specific Rust version, so we can either lock our support down to one individual Rust version, or add a copy for each version we support</p>",
        "id": 246470427,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626708548
    },
    {
        "content": "<p>don't think there's a way around that unless rustc stabilizes the proc macro ABI or internal API, which will never happen</p>",
        "id": 246470536,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626708592
    },
    {
        "content": "<blockquote>\n<p>or add a copy for each version we support</p>\n</blockquote>\n<p>This I think shouldn't be hard? Cargo allows linking in mutiple major versions. We are going to get an upleasent compile time hit of course, but I wouldn't worry too much about that: seems like two versions (latest stable + latest nightly) should cover most cases .</p>",
        "id": 246470922,
        "sender_full_name": "matklad",
        "timestamp": 1626708735
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> bit late, sorry, but today's changelog is up at <a href=\"https://rust-analyzer.github.io/thisweek/2021/07/26/changelog-87.html\">https://rust-analyzer.github.io/thisweek/2021/07/26/changelog-87.html</a>, with better completions and <code>derive</code> path resolution.</p>",
        "id": 247217080,
        "sender_full_name": "Laurențiu",
        "timestamp": 1627312745
    },
    {
        "content": "<p>hmm, <code>derive</code> resolution only seems to work in certain cases</p>",
        "id": 247218664,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1627313386
    },
    {
        "content": "<p>in other news, I am yet again staring into the name resolution abyss</p>",
        "id": 247218900,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1627313490
    },
    {
        "content": "<p>this time, to fix our legacy macro scoping</p>",
        "id": 247218962,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1627313516
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/weekly.20sync-up/near/247218664\">said</a>:</p>\n<blockquote>\n<p>hmm, <code>derive</code> resolution only seems to work in certain cases</p>\n</blockquote>\n<p>Looks like this is due to clashing namespaces again, all derives that also have their trait in the prelude fail to resolve cause the code finds the trait instead of the macro while it expects a macro</p>",
        "id": 247361411,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1627405369
    },
    {
        "content": "<p>I won't be able to join this sync-up since I have a call with a client at that time</p>",
        "id": 247929056,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1627916147
    },
    {
        "content": "<p>Hi, <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span>, if you haven't seen it, the changelog is up at <a href=\"https://rust-analyzer.github.io/thisweek/2021/08/02/changelog-88.html\">https://rust-analyzer.github.io/thisweek/2021/08/02/changelog-88.html</a>, with \"hover range\" to see the type of an expression and <code>#[doc(hidden)]</code> items hidden from completion.</p>",
        "id": 247929781,
        "sender_full_name": "Laurențiu",
        "timestamp": 1627916472
    },
    {
        "content": "<p>On my side, I've decided to stop working on cool stuff until I fix all broken windows</p>",
        "id": 247929922,
        "sender_full_name": "matklad",
        "timestamp": 1627916538
    },
    {
        "content": "<p>I haven't done much this week :(</p>",
        "id": 247930336,
        "sender_full_name": "Laurențiu",
        "timestamp": 1627916714
    },
    {
        "content": "<p>I was camping all week and away from computers</p>",
        "id": 247930423,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1627916751
    },
    {
        "content": "<p>I've been working on a bunch of assist improvements</p>",
        "id": 247930426,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1627916753
    },
    {
        "content": "<p>I love the new hover extension</p>",
        "id": 247930493,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1627916790
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203366\">Jeremy Kolb</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/weekly.20sync-up/near/247930493\">said</a>:</p>\n<blockquote>\n<p>I love the new hover extension</p>\n</blockquote>\n<p>currently adding the coercion info on hover on top of that(without syntax highlighting unfortunately)</p>",
        "id": 247930708,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1627916901
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/pUWDoZ8SBATkgP085bwSIIXm/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/pUWDoZ8SBATkgP085bwSIIXm/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/pUWDoZ8SBATkgP085bwSIIXm/image.png\"></a></div>",
        "id": 247930758,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1627916929
    },
    {
        "content": "<p>that's super cool!</p>",
        "id": 247940184,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1627922525
    }
]