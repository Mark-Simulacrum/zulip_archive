[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>  is this the desired behaviour that <code>RA_LSP_DEBUG</code> env var overrides path from user settings in vscode extension?<br>\n<a href=\"https://github.com/rust-analyzer/rust-analyzer/commit/1800bfb6e67ab7187f0fa51ca8241e904922ecd8#diff-519236f72123ff858d99b50e506bf6ccR30\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/commit/1800bfb6e67ab7187f0fa51ca8241e904922ecd8#diff-519236f72123ff858d99b50e506bf6ccR30\">https://github.com/rust-analyzer/rust-analyzer/commit/1800bfb6e67ab7187f0fa51ca8241e904922ecd8#diff-519236f72123ff858d99b50e506bf6ccR30</a></p>",
        "id": 187682457,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581111283
    },
    {
        "content": "<p>Can anyone please also explain what is the logic behind these if statements?<br>\n<a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/5397f05bfe7f3b18229a65040c6685e762b2f9a3/editors/code/src/config.ts#L90-L116\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/5397f05bfe7f3b18229a65040c6685e762b2f9a3/editors/code/src/config.ts#L90-L116\">https://github.com/rust-analyzer/rust-analyzer/blob/5397f05bfe7f3b18229a65040c6685e762b2f9a3/editors/code/src/config.ts#L90-L116</a></p>",
        "id": 187683626,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581112248
    },
    {
        "content": "<p>If we find <code>cargo-watch.enable</code>in the config then a field with the value and default to <code>true</code>?</p>",
        "id": 187684019,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1581112556
    },
    {
        "content": "<p>But <code>.has()</code> already checks that the config value is present, that default would never be set then I guess ...</p>",
        "id": 187684225,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581112704
    },
    {
        "content": "<p>We leave it null if not in config, to use server default if I recall</p>",
        "id": 187685330,
        "sender_full_name": "Emil Lauridsen",
        "timestamp": 1581113618
    },
    {
        "content": "<p>Hmm, I see we have 3 sources of truth for default values.</p>\n<ol>\n<li>Default values in <code>package.json</code></li>\n<li>Inline config member variables initializers</li>\n<li>Default values in <code>config.get(\"path\", value)</code></li>\n</ol>\n<p>This is very confusing ...</p>",
        "id": 187686421,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581114677
    },
    {
        "content": "<p>Yes, the env var should override the config</p>",
        "id": 187757171,
        "sender_full_name": "matklad",
        "timestamp": 1581251157
    },
    {
        "content": "<blockquote>\n<p>Hmm, I see we have 3 sources of truth for default values.</p>\n</blockquote>\n<p>Some of this is unfortunatelly inherent in the fact that there's no cross-editor way to handle configs...</p>\n<p>Long-term, we should add a <code>cargo xtask</code> which would take rust struct as a source of truth and generate the relevant secion of package.json (or the relevant config for any other editor)</p>",
        "id": 187757270,
        "sender_full_name": "matklad",
        "timestamp": 1581251302
    },
    {
        "content": "<p>We also should integrate proper path-dependent and dynamic configs. </p>\n<p>In short, the current configuration handling lacks design at all.</p>",
        "id": 187757276,
        "sender_full_name": "matklad",
        "timestamp": 1581251335
    },
    {
        "content": "<p>Yes, I was thinking about our  <code>class Config</code> it definitely needs amount of rework, its design a bit obstructs the introduction of <code>Download latest language server</code> command. I decided to move this feature to new PR and not bother doing it now, because it is likely to add to many changes to code.</p>",
        "id": 187758313,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581253597
    },
    {
        "content": "<p>Should we merge the PR then?</p>",
        "id": 187758418,
        "sender_full_name": "matklad",
        "timestamp": 1581253833
    },
    {
        "content": "<p>I think all the important bits are already in place?</p>",
        "id": 187758423,
        "sender_full_name": "matklad",
        "timestamp": 1581253857
    },
    {
        "content": "<p>Hmm, I just have a question. I was wondering on how to add graceful termination when language server is not available.<br>\nBut we just eat this error and continue execution like this was a nothing <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/aa5f80aed1464881575fe635557c3965313a7ecf/editors/code/src/main.ts#L39-L43\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/aa5f80aed1464881575fe635557c3965313a7ecf/editors/code/src/main.ts#L39-L43\">here</a></p>\n<p>Shoud we throw an error from <code>activate()</code> call here instead?</p>",
        "id": 187758550,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581254161
    },
    {
        "content": "<p>I think if the user than chacnges the settings, we should be able to activate the server allright?</p>",
        "id": 187758641,
        "sender_full_name": "matklad",
        "timestamp": 1581254292
    },
    {
        "content": "<p>Ie, if we failed at startup, it doesn't mean that we've failed for good?</p>",
        "id": 187758644,
        "sender_full_name": "matklad",
        "timestamp": 1581254308
    },
    {
        "content": "<p>Not saying that the current handing is reasonable, just that throwing in the towel in activate might not be the right thing to do</p>",
        "id": 187758654,
        "sender_full_name": "matklad",
        "timestamp": 1581254336
    },
    {
        "content": "<p>Hmm, yes, didn't think about that</p>",
        "id": 187758661,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581254351
    },
    {
        "content": "<p>I am also a bit scared to merge this today, if we are making a release soon ;)</p>",
        "id": 187758675,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581254379
    },
    {
        "content": "<p>Isn't it exactly the point of the realease to figure out which stuff is broken? :)</p>",
        "id": 187758723,
        "sender_full_name": "matklad",
        "timestamp": 1581254442
    },
    {
        "content": "<p>Well, if you think of release this way, I won't argue...</p>",
        "id": 187758785,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581254550
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> I see we have no place to put images (to reference them in markdown doc) in our repo. What is you recommendation on this?</p>",
        "id": 187759330,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581255519
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/567\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/567\">https://github.com/rust-analyzer/rust-analyzer/issues/567</a></p>",
        "id": 187759389,
        "sender_full_name": "matklad",
        "timestamp": 1581255610
    },
    {
        "content": "<p>ахаха</p>",
        "id": 187759395,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581255635
    },
    {
        "content": "<p>ога :-)</p>",
        "id": 187759398,
        "sender_full_name": "matklad",
        "timestamp": 1581255645
    },
    {
        "content": "<p>I am getting a random <code>EBUSY</code> error with this on windows, sometimes it appears, but other times not. This is very hard to debug... It happens when we already downloaded the binary, and run <code>./ra_lsp_server-windows.exe --version</code><br>\nDoes anyone have any ideas?<br>\n<a href=\"https://user-images.githubusercontent.com/36276403/74103894-85125d80-4b58-11ea-8125-2a9c1dab34f5.png\" target=\"_blank\" title=\"https://user-images.githubusercontent.com/36276403/74103894-85125d80-4b58-11ea-8125-2a9c1dab34f5.png\">https://user-images.githubusercontent.com/36276403/74103894-85125d80-4b58-11ea-8125-2a9c1dab34f5.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://user-images.githubusercontent.com/36276403/74103894-85125d80-4b58-11ea-8125-2a9c1dab34f5.png\" target=\"_blank\" title=\"https://user-images.githubusercontent.com/36276403/74103894-85125d80-4b58-11ea-8125-2a9c1dab34f5.png\"><img src=\"https://user-images.githubusercontent.com/36276403/74103894-85125d80-4b58-11ea-8125-2a9c1dab34f5.png\"></a></div>",
        "id": 187761200,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581259382
    },
    {
        "content": "<p>What's the return code/stderr after spawing?</p>",
        "id": 187761247,
        "sender_full_name": "matklad",
        "timestamp": 1581259464
    },
    {
        "content": "<p><code>null</code> =)</p>",
        "id": 187761250,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581259485
    },
    {
        "content": "<p>The syscall failed and didn't spawn anything I guess</p>",
        "id": 187761259,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581259519
    },
    {
        "content": "<p>what's the value of <code>.error</code>?</p>",
        "id": 187761446,
        "sender_full_name": "matklad",
        "timestamp": 1581259908
    },
    {
        "content": "<p><a href=\"https://nodejs.org/api/child_process.html#child_process_child_process_spawnsync_command_args_options\" target=\"_blank\" title=\"https://nodejs.org/api/child_process.html#child_process_child_process_spawnsync_command_args_options\">https://nodejs.org/api/child_process.html#child_process_child_process_spawnsync_command_args_options</a></p>",
        "id": 187761447,
        "sender_full_name": "matklad",
        "timestamp": 1581259913
    },
    {
        "content": "<blockquote>\n<p>error &lt;Error&gt; The error object if the child process failed or timed out.</p>\n</blockquote>",
        "id": 187761485,
        "sender_full_name": "matklad",
        "timestamp": 1581259924
    },
    {
        "content": "<p>Its logged on the screenshot,</p>",
        "id": 187761496,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581259981
    },
    {
        "content": "<p>{ \"code\": \"EBUSY\", \"errno\": \"EBUSY\", \"syscall\": \"spawnSync &lt;path_to_binary&gt;\" }</p>",
        "id": 187761502,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581260030
    },
    {
        "content": "<p>My wild guess: What if you disabled <code>await fs.chmod(installationPath, 0o755); // Set (rwx, r_x, r_x) permissions</code> ?</p>",
        "id": 187761547,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1581260095
    },
    {
        "content": "<p>I see I cannot reproduce the error now...</p>",
        "id": 187761548,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581260095
    },
    {
        "content": "<p>I can try conditionally disabling <code>chmod</code>, though it is not reproducing now (</p>",
        "id": 187761563,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581260148
    },
    {
        "content": "<p>Maybe cause by Windows Defender ? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 187761731,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1581260478
    },
    {
        "content": "<p>No, this is gone, it doesn't appear... ;(</p>",
        "id": 187761734,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581260492
    },
    {
        "content": "<p>Rebooted my laptop, reinstalled everything from scratch, and no more error... I guess if it was Windows Defender or any other thing it saved some state and doesn't try  to prevent the binary from running anymore</p>",
        "id": 187762153,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581261307
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> I see we ship <code>.vsix</code> file via GitHub releases. While I am amending the docs, should I mention this in <code>Installation from prebuilt binaries</code> chapter?</p>",
        "id": 187767125,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581271308
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> , may I ask you to elaborate on the chosen versioning scheme? I am now working on versioning the installed prebuilt binary, so this is actual. Do we stick with <code>YYYY-MM-DD</code>?</p>",
        "id": 188160563,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581633826
    },
    {
        "content": "<p>Ideally, we should not care names and just pick the chronologically latest<br>\nrelease.</p>\n<p>It might be prudent to filter out names with nightly though, for fwd compat</p>",
        "id": 188163148,
        "sender_full_name": "matklad",
        "timestamp": 1581635963
    },
    {
        "content": "<p><code>nightly</code> as suffix or just as a substring at any position?</p>",
        "id": 188163453,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581636222
    },
    {
        "content": "<p>as a substring would be better I think</p>",
        "id": 188163539,
        "sender_full_name": "matklad",
        "timestamp": 1581636284
    },
    {
        "content": "<p>My only input here is that <code>YYYY-MM-DD</code> defeats the default of <code>0.1</code> from a source install so vscode automatically stomps <code>cargo xtask install</code></p>",
        "id": 188176067,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1581652371
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203366\">@Jeremy Kolb</span> do you  now any docs about versions for VS Code?</p>",
        "id": 188191550,
        "sender_full_name": "matklad",
        "timestamp": 1581673545
    },
    {
        "content": "<p>let me just try this with -dev</p>",
        "id": 188191594,
        "sender_full_name": "matklad",
        "timestamp": 1581673565
    },
    {
        "content": "<p>Ok, even setting version to <code>0.2.0</code> doesn't not prevent VS Code from auto-updating. Quick googling hasn't revealed the proper solution here. I wonder if folks might know a workaround?</p>",
        "id": 188196416,
        "sender_full_name": "matklad",
        "timestamp": 1581678327
    },
    {
        "content": "<p>Also, a meta question: is there a Zulip / Discourse instance for developers of VS Code plugins? I feel I can make use of an area for shouting questions at people :)</p>",
        "id": 188196473,
        "sender_full_name": "matklad",
        "timestamp": 1581678370
    },
    {
        "content": "<p>From the readme: <a href=\"https://gitter.im/Microsoft/vscode\" target=\"_blank\" title=\"https://gitter.im/Microsoft/vscode\">https://gitter.im/Microsoft/vscode</a></p>",
        "id": 188196717,
        "sender_full_name": "bjorn3",
        "timestamp": 1581678632
    },
    {
        "content": "<p>Not sure how relevant it is for ext authors though</p>",
        "id": 188196756,
        "sender_full_name": "bjorn3",
        "timestamp": 1581678687
    },
    {
        "content": "<p>But <span class=\"user-mention\" data-user-id=\"203366\">@Jeremy Kolb</span> , you mentioned that turning off auto-updates fixes this...</p>",
        "id": 188196884,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581678814
    },
    {
        "content": "<p>Well, it's a bit like saying that not using VS Code fixes it :) </p>\n<p>Or can you disable auto-update for a <em>specifc</em> extension?</p>",
        "id": 188196954,
        "sender_full_name": "matklad",
        "timestamp": 1581678878
    },
    {
        "content": "<p>I'm not surprised that vscode sees that the latest version doesn't match the installed one and tries to update</p>",
        "id": 188196955,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581678881
    },
    {
        "content": "<p>But how it determines \"the latest\"? Like, I've build extension today, with a higher version number, and it still isn't considered the latest</p>",
        "id": 188196993,
        "sender_full_name": "matklad",
        "timestamp": 1581678927
    },
    {
        "content": "<p>I think only Stackoverflow is to the rescue here...</p>",
        "id": 188197345,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581679279
    },
    {
        "content": "<p>FYI: regarding the <code>stream.pipeline()</code>. My report to nodejs team brought some fruits. <a href=\"https://github.com/nodejs/node/issues/31776\" target=\"_blank\" title=\"https://github.com/nodejs/node/issues/31776\">It is confirmed to be a bug in filesystem core module</a></p>",
        "id": 188203103,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581684774
    },
    {
        "content": "<p>And this actually boggles my mind. Like, how is it possible that a piece of core infrastructure fails to properly close the file before signalling that the file is closed?</p>",
        "id": 188204050,
        "sender_full_name": "matklad",
        "timestamp": 1581685630
    },
    {
        "content": "<p>It's piece of cake. One lecturer in our university, who is very into NodeJS community told us that the nodejs core is very convoluted and messy. There are a cases when people write some core module, but then leave the project and noone knows how that code functions thereafter, even new PR to that codebase may dangle for a long while because people just can't review them properly.</p>",
        "id": 188204660,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581686148
    },
    {
        "content": "<p>@matklad I did some digging yesterday and didn't turn anything up. I half expect it's something weird like injecting <code>\"enableProposedApi: \"true\"</code> in the json file.</p>",
        "id": 188204897,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1581686332
    },
    {
        "content": "<p>I think the reason is much simpler</p>",
        "id": 188205614,
        "sender_full_name": "matklad",
        "timestamp": 1581686917
    },
    {
        "content": "<p><code>xtask install</code> is hard-coded to install file named <code>rust-analyzer-0.1.0.vsix</code></p>",
        "id": 188205625,
        "sender_full_name": "matklad",
        "timestamp": 1581686937
    },
    {
        "content": "<p>that would make more sense</p>",
        "id": 188205660,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1581686999
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 188206886,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1581688028
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Deployment.20and.20installation/near/188205625\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Deployment.20and.20installation/near/188205625\">said</a>:</p>\n<blockquote>\n<p><code>xtask install</code> is hard-coded to install file named <code>rust-analyzer-0.1.0.vsix</code></p>\n</blockquote>\n<p>fixed that</p>",
        "id": 188222382,
        "sender_full_name": "matklad",
        "timestamp": 1581698094
    },
    {
        "content": "<p>I'd suggest to also describe why the version in package.json must be bigger in the comment</p>",
        "id": 188222822,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581698361
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/editors/code/package.json#L8\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/editors/code/package.json#L8\">https://github.com/rust-analyzer/rust-analyzer/blob/master/editors/code/package.json#L8</a></p>",
        "id": 188223233,
        "sender_full_name": "matklad",
        "timestamp": 1581698634
    },
    {
        "content": "<p>the exact <em>why</em> is in the commit message, which is reachable via <code>git blame</code>.</p>",
        "id": 188223353,
        "sender_full_name": "matklad",
        "timestamp": 1581698688
    },
    {
        "content": "<p>Yeah, not a fan of git blaming tho</p>",
        "id": 188223918,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581699107
    },
    {
        "content": "<p>I actually think that comments in commits are more valuable than comments directly in code, as they don't bit rot as badly. See also <a href=\"https://mislav.net/2014/02/hidden-documentation/\" target=\"_blank\" title=\"https://mislav.net/2014/02/hidden-documentation/\">https://mislav.net/2014/02/hidden-documentation/</a></p>",
        "id": 188224089,
        "sender_full_name": "matklad",
        "timestamp": 1581699231
    },
    {
        "content": "<p>@matklad That version change fixed my issue!</p>",
        "id": 188225027,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1581699881
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Deployment.20and.20installation/near/188224089\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Deployment.20and.20installation/near/188224089\">said</a>:</p>\n<blockquote>\n<p>I actually think that comments in commits are more valuable than comments directly in code, as they don't bit rot as badly. See also <a href=\"https://mislav.net/2014/02/hidden-documentation/\" target=\"_blank\" title=\"https://mislav.net/2014/02/hidden-documentation/\">https://mislav.net/2014/02/hidden-documentation/</a></p>\n</blockquote>\n<p>crutches =)</p>",
        "id": 188226471,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1581700961
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"263228\">@Mr Smeet</span> I would refrain from making comments which contain purely value judgment, without any substance of actual discussion: significant number of people participate in this zulip, and such comment spend time of some number of those people, and also risk provoking unproductive discussions.</p>",
        "id": 188226732,
        "sender_full_name": "matklad",
        "timestamp": 1581701156
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Deployment.20and.20installation/near/188226732\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Deployment.20and.20installation/near/188226732\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"263228\">Mr Smeet</span> I would refrain from making comments which contain purely value judgment, without any substance of actual discussion: significant number of people participate in this zulip, and such comment spend time of some number of those people, and also risk provoking unproductive discussions.</p>\n</blockquote>\n<p>Ok, sorry. I just think there is some more correct solution, with pass setting for test instance or something like this</p>",
        "id": 188226986,
        "sender_full_name": "Mr Smeet",
        "timestamp": 1581701350
    },
    {
        "content": "<p>Wow</p>",
        "id": 188230063,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581703519
    },
    {
        "content": "<p>Sorry if I am to abrasive here, I should have expressed that in a  friendlier way :(</p>\n<p>I just think that's it's important to try to keep discussion on topic, and to minimize pings and notifications;  one2many amplification is a significant issue, imo</p>",
        "id": 188230554,
        "sender_full_name": "matklad",
        "timestamp": 1581703902
    },
    {
        "content": "<p>That's a good wow, thank you for keeping the propper atmosphere in discussions</p>",
        "id": 188230565,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581703908
    },
    {
        "content": "<p>yeah, it's just that it is exactly a \"value judgement without actual content for discussion\", which pings me ;)</p>",
        "id": 188230651,
        "sender_full_name": "matklad",
        "timestamp": 1581703956
    }
]