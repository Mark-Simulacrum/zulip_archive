[
    {
        "content": "<p>Hi, I have an idea for a feature that might already be tracked, but I'm not finding it anywhere.<br>\nWhen I write <code>mod nonexistent_module;</code> I get a code action for creating the module, which will create a new file.<br>\nI'm interested in writing a module with the <code>mod nonexistent_module { ... }</code> syntax, and then once it's in a sufficiently complex state, I can move the contents of the <code>mod</code> \"...\" into a new file.<br>\nWould that feature be hard to add? I think it would really help my team understand Rust's module system incrementally, so we can write our code in modules by default (using <code>mod name { ... }</code>) and move them into their own files \"safely\" as they become sufficiently complex. It would also make the process of refactoring large amounts of interdependent code a little easier by allowing you to do all the module organization and dependency resolving in one file, and incrementally break the file up into modules.</p>",
        "id": 196998044,
        "sender_full_name": "Cole Lawrence",
        "timestamp": 1589039992
    },
    {
        "content": "<p>Yes, I've been waiting for this feature for a long time, but never got to actually implementing it.</p>",
        "id": 197000703,
        "sender_full_name": "matklad",
        "timestamp": 1589043145
    },
    {
        "content": "<p>Shouldn't be hard to add (it should be an <code>assist</code>), though, at the moment, we do some refactorings in the area, so some slight merge conflicts are expected</p>",
        "id": 197000712,
        "sender_full_name": "matklad",
        "timestamp": 1589043177
    },
    {
        "content": "<p>Hooray for more helpful assists!</p>",
        "id": 197045848,
        "sender_full_name": "Timo Freiberg",
        "timestamp": 1589105037
    }
]