[
    {
        "content": "<p>I'm looking into how to fix <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/9142\">https://github.com/rust-analyzer/rust-analyzer/issues/9142</a>, aaand this looks potentially quite difficult, since any syntactical item might actually be a macro call. There doesn't happen to be a convenient place to check for this and have everything magically work, right?</p>",
        "id": 241652098,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622920477
    },
    {
        "content": "<p>Yeah, I think this is fundamentally tricky.....</p>\n<p>Basically, the problem with this is that <code>source2def(src).src == src</code> equality <em>does not</em> hold with attributes</p>",
        "id": 241688594,
        "sender_full_name": "matklad",
        "timestamp": 1622981243
    },
    {
        "content": "<p>That is, we start with annotated fn node, but should get a def whose source is actually in an expanded file</p>",
        "id": 241688658,
        "sender_full_name": "matklad",
        "timestamp": 1622981304
    },
    {
        "content": "<p>well in principle, there just is no def for the original fn ast node, is there?</p>",
        "id": 241689560,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622982663
    },
    {
        "content": "<p>it's like calling <code>to_def</code> on a macro call</p>",
        "id": 241689618,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622982746
    },
    {
        "content": "<p>so I guess that the IDE functionality should first be descending into the macro calls, but it doesn't because it's only looking for <code>MacroCall</code> nodes? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 241689868,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622983152
    },
    {
        "content": "<blockquote>\n<p>there just is no def for the original fn ast node, is there?</p>\n</blockquote>\n<p>unless the node gets passed through completely by the attribute of course, then it might be arguable that there is... but I'm not sure whether it would be necessary or helpful to do that</p>",
        "id": 241689949,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622983263
    },
    {
        "content": "<p>i.e. in <code>descend_into_macros</code>, we need to not just look for <code>MacroCall</code>s, but also any ancestors annotated with proc macro attributes?</p>",
        "id": 241690063,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622983395
    },
    {
        "content": "<p>yeah I played around with <code>descend_into_macros</code> the other day, that might get us some of the way there already</p>",
        "id": 241690167,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622983537
    },
    {
        "content": "<p>I've changed <code>descend_into_macros</code> to work with attribute macro, and it seems to work when printing the original and remapped token. I've also changed <code>syntax_highlighting.rs</code> to account for attribute macros and descend into them, but somehow all identifiers in the invocation stay unresolved. Any idea what might cause this? Do we have any way to debug the token mapping?</p>",
        "id": 241838081,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1623098667
    },
    {
        "content": "<p>This is now largely fixed, but some way to debug <code>TokenMap</code> operations would still be nice</p>",
        "id": 242061560,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1623244116
    }
]