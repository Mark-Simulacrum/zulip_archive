[
    {
        "content": "<p>I need to go from the types in the <code>tt</code> crate, back to CST nodes, in order to reparse an attribute. Is there any preexisting way to do so? If not, what would be the best place to put this functionality? Do we even want to allow this?</p>\n<p>I've seen <code>ast::Path::parse</code> etc., but those only work with macro fragments.</p>",
        "id": 220381254,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608303509
    },
    {
        "content": "<p>Hm....</p>",
        "id": 220381311,
        "sender_full_name": "matklad",
        "timestamp": 1608303549
    },
    {
        "content": "<p>My gut feeling is that we should do exactly the opposite</p>",
        "id": 220381327,
        "sender_full_name": "matklad",
        "timestamp": 1608303559
    },
    {
        "content": "<p>Attributes should be parasable out of <code>tt</code>s</p>",
        "id": 220381346,
        "sender_full_name": "matklad",
        "timestamp": 1608303568
    },
    {
        "content": "<p>(I think they actually are?)</p>",
        "id": 220381363,
        "sender_full_name": "matklad",
        "timestamp": 1608303574
    },
    {
        "content": "<p>I could make them parseable from <code>tt</code> types, I think</p>",
        "id": 220381478,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608303620
    },
    {
        "content": "<p>They only contain <code>tt</code> types, at least, so it should be possible</p>",
        "id": 220381509,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608303637
    },
    {
        "content": "<p>Could you tell why you need that?</p>",
        "id": 220381625,
        "sender_full_name": "matklad",
        "timestamp": 1608303681
    },
    {
        "content": "<p>Is this <code>cfg_attr</code>?</p>",
        "id": 220381654,
        "sender_full_name": "matklad",
        "timestamp": 1608303691
    },
    {
        "content": "<p>Yeah</p>",
        "id": 220381721,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608303718
    },
    {
        "content": "<p>I'm trying to avoid having two parsers for this syntax, so I wanted to reuse the existing one</p>",
        "id": 220381810,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608303753
    },
    {
        "content": "<p>Uhu...</p>",
        "id": 220381910,
        "sender_full_name": "matklad",
        "timestamp": 1608303796
    },
    {
        "content": "<p>Hm, otoh, making a <code>fragment</code> for that would also work</p>",
        "id": 220381972,
        "sender_full_name": "matklad",
        "timestamp": 1608303830
    },
    {
        "content": "<p>The <code>make</code> API also <em>sometimes</em> provides raw parsers, maybe it should be added there? Not entirely sure what the difference between that and the <code>parse</code> functions is, the latter look macro-specific</p>",
        "id": 220383092,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608304335
    },
    {
        "content": "<p>Looks like this is not going to work with <code>None</code> delimiters in any case</p>",
        "id": 220383238,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608304433
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> all raw parsers in <code>make</code> should be private</p>",
        "id": 220384556,
        "sender_full_name": "matklad",
        "timestamp": 1608305105
    },
    {
        "content": "<p>Currently there's these:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"n\">text</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">ast</span>::<span class=\"n\">Name</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ast_from_text</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"mod {};\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">name_ref</span><span class=\"p\">(</span><span class=\"n\">text</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">ast</span>::<span class=\"n\">NameRef</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ast_from_text</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"fn f() {{ {}; }}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">ty</span><span class=\"p\">(</span><span class=\"n\">text</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">ast</span>::<span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ast_from_text</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"impl {} for D {{}};\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 220384609,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608305134
    },
    {
        "content": "<p>The last one is a bug</p>",
        "id": 220385075,
        "sender_full_name": "matklad",
        "timestamp": 1608305352
    },
    {
        "content": "<p>The first two are not really parsers -- they produce a single indivisible node</p>",
        "id": 220385136,
        "sender_full_name": "matklad",
        "timestamp": 1608305374
    },
    {
        "content": "<p>I guess, <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> needs to document the invariants of <code>make</code>  module somewhere</p>",
        "id": 220385419,
        "sender_full_name": "matklad",
        "timestamp": 1608305514
    },
    {
        "content": "<p>Ah, right</p>",
        "id": 220385428,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608305521
    },
    {
        "content": "<p>Also, urgh, I wish there was some way to enforce \"this shouldn't happen\" properties in code...</p>",
        "id": 220385529,
        "sender_full_name": "matklad",
        "timestamp": 1608305560
    },
    {
        "content": "<p>keeping raw text methods of <code>make</code> priviate is a constant struggle</p>",
        "id": 220385591,
        "sender_full_name": "matklad",
        "timestamp": 1608305584
    },
    {
        "content": "<p>See also comment on <code>Name::new_text</code></p>",
        "id": 220385649,
        "sender_full_name": "matklad",
        "timestamp": 1608305612
    },
    {
        "content": "<p>yeah I did see that one</p>",
        "id": 220385760,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608305649
    },
    {
        "content": "<p>but <code>make::name(\"bla\").as_name()</code> sidesteps that</p>",
        "id": 220385791,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608305668
    },
    {
        "content": "<p>Not really, <code>AsName</code> shouldn't exported to the IDE</p>",
        "id": 220386112,
        "sender_full_name": "matklad",
        "timestamp": 1608305815
    },
    {
        "content": "<p>(I think...)</p>",
        "id": 220386119,
        "sender_full_name": "matklad",
        "timestamp": 1608305818
    },
    {
        "content": "<p>(but also enforcing <code>AsName</code> should be inaccessible in <code>crates/ide</code> is hard)</p>",
        "id": 220386208,
        "sender_full_name": "matklad",
        "timestamp": 1608305861
    },
    {
        "content": "<p>Right, so we don't expose text parsers in <code>make</code> to prevent the IDE from parsing raw strings, not the compiler crates?</p>",
        "id": 220386297,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608305886
    },
    {
        "content": "<p>Not really</p>",
        "id": 220386368,
        "sender_full_name": "matklad",
        "timestamp": 1608305917
    },
    {
        "content": "<p>The primary goal here is that we want to switch to a fully-typed API in the future</p>",
        "id": 220386408,
        "sender_full_name": "matklad",
        "timestamp": 1608305931
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/.60tt.3A.3ATokenTree.60.20to.20.60ast.3A.3ATokenTree.60/near/220386208\">said</a>:</p>\n<blockquote>\n<p>(but also enforcing <code>AsName</code> should be inaccessible in <code>crates/ide</code> is hard)</p>\n</blockquote>\n<p>I feel like adding a comment that explains this would already go a long way</p>",
        "id": 220386410,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608305932
    },
    {
        "content": "<p>Where we just assemble AST nodes from smaller AST nodes</p>",
        "id": 220386464,
        "sender_full_name": "matklad",
        "timestamp": 1608305954
    },
    {
        "content": "<p>We don't do this today because that's a whole lot of code to write by hand, and <code>parse . format!</code> is just shorter</p>",
        "id": 220386530,
        "sender_full_name": "matklad",
        "timestamp": 1608305983
    },
    {
        "content": "<p>THere' WIP PR by <span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span> which uses ungrammar for that.</p>",
        "id": 220386620,
        "sender_full_name": "matklad",
        "timestamp": 1608306007
    },
    {
        "content": "<p><em>if</em> we expose raw text API, then refactoring later will be more painful. And we'll add a bunch of stringly-typed code patterns, which I think we should try to avoid.</p>",
        "id": 220386732,
        "sender_full_name": "matklad",
        "timestamp": 1608306058
    },
    {
        "content": "<p>So it seems like the <code>ast::Path::parse</code> et al should also be removed, since it parses a raw <code>&amp;str</code>, right?</p>",
        "id": 220394846,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608309345
    },
    {
        "content": "<p>Well, not really</p>",
        "id": 220395244,
        "sender_full_name": "matklad",
        "timestamp": 1608309490
    },
    {
        "content": "<p>Parsing a <code>Path</code> from string is a valid operation to ahve</p>",
        "id": 220395277,
        "sender_full_name": "matklad",
        "timestamp": 1608309501
    },
    {
        "content": "<p>(and, for example, intra-doc links fundamentally require it)</p>",
        "id": 220395306,
        "sender_full_name": "matklad",
        "timestamp": 1608309514
    },
    {
        "content": "<p>It's just the connection of making new AST nodes and parsing is a hack which shouldn't be exposed</p>",
        "id": 220395377,
        "sender_full_name": "matklad",
        "timestamp": 1608309543
    },
    {
        "content": "<p>Hmm, okay, not sure I understand</p>",
        "id": 220395492,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608309584
    },
    {
        "content": "<p>So imaging a <code>make</code> API which allows only creating tokens from strings</p>",
        "id": 220395740,
        "sender_full_name": "matklad",
        "timestamp": 1608309674
    },
    {
        "content": "<p>and all composite nodes require constituent elements</p>",
        "id": 220395771,
        "sender_full_name": "matklad",
        "timestamp": 1608309688
    },
    {
        "content": "<p>SO, to create <code>(A, B)</code>, you write <code>make::tuple_type(vec![a, b])</code></p>",
        "id": 220395829,
        "sender_full_name": "matklad",
        "timestamp": 1608309715
    },
    {
        "content": "<p>and that internallly assembles a tree using existing trees</p>",
        "id": 220395909,
        "sender_full_name": "matklad",
        "timestamp": 1608309734
    },
    {
        "content": "<p>Yeah, that does makes sense to me</p>",
        "id": 220395910,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608309734
    },
    {
        "content": "<p>In that world, the operation <code>parsre this bit of text as type</code> isn't really expressible and necessary.  If you want to create a type, you create it from smaller types</p>",
        "id": 220395995,
        "sender_full_name": "matklad",
        "timestamp": 1608309775
    },
    {
        "content": "<p>I just wonder why going from <code>&amp;str</code> to <code>ast::Path</code> is fine, since that's clearly not a token</p>",
        "id": 220396022,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608309788
    },
    {
        "content": "<p>Becausee that's parsing and not node creation</p>",
        "id": 220396060,
        "sender_full_name": "matklad",
        "timestamp": 1608309808
    },
    {
        "content": "<p>Hm, where <code>Path::parse</code> is actually defined?</p>",
        "id": 220396147,
        "sender_full_name": "matklad",
        "timestamp": 1608309843
    },
    {
        "content": "<p>It shoudl allow to return an error</p>",
        "id": 220396172,
        "sender_full_name": "matklad",
        "timestamp": 1608309849
    },
    {
        "content": "<p>while all <code>make</code> functions are infailable.</p>",
        "id": 220396191,
        "sender_full_name": "matklad",
        "timestamp": 1608309858
    },
    {
        "content": "<p>Ah, okay, so it needs to return a <code>Result</code></p>",
        "id": 220396215,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608309869
    },
    {
        "content": "<p>It does, I mean</p>",
        "id": 220396224,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608309873
    },
    {
        "content": "<p>Or a <code>ParseResult</code> would also work, I suppose</p>",
        "id": 220396243,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608309886
    },
    {
        "content": "<p>Ah, here it is</p>",
        "id": 220396247,
        "sender_full_name": "matklad",
        "timestamp": 1608309888
    },
    {
        "content": "<p><code>pub fn parse(text: &amp;str) -&gt; Result&lt;Self, ()&gt; {</code></p>",
        "id": 220396250,
        "sender_full_name": "matklad",
        "timestamp": 1608309890
    },
    {
        "content": "<p>Yeah, it needs some way to signal an error</p>",
        "id": 220396274,
        "sender_full_name": "matklad",
        "timestamp": 1608309904
    },
    {
        "content": "<p>This is one of the \"won't fix \" bugs today</p>",
        "id": 220396299,
        "sender_full_name": "matklad",
        "timestamp": 1608309915
    },
    {
        "content": "<p>Alright, yeah, that <em>does</em> make sense</p>",
        "id": 220396311,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608309920
    },
    {
        "content": "<p>Sometimes nodes are syntactically invalid. If you use invalid type to make, say, a <code>let x: ty = todo!()</code> expressions, and you go via <code>format!</code> in the middle</p>",
        "id": 220396365,
        "sender_full_name": "matklad",
        "timestamp": 1608309955
    },
    {
        "content": "<p>you might not parse <code>let x: </code> as a proper let statement</p>",
        "id": 220396421,
        "sender_full_name": "matklad",
        "timestamp": 1608309965
    },
    {
        "content": "<p>Node base editing should fix that problem</p>",
        "id": 220396436,
        "sender_full_name": "matklad",
        "timestamp": 1608309975
    },
    {
        "content": "<p>So, that sounds like we should replace calls to <code>make::ty</code> with <code>ast::Type::parse</code> then, right?</p>",
        "id": 220396522,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608310022
    },
    {
        "content": "<p>Not exactly</p>",
        "id": 220396692,
        "sender_full_name": "matklad",
        "timestamp": 1608310096
    },
    {
        "content": "<p>rather, with <code>make::ty_unit</code>, <code>make::ty_path</code>, etc</p>",
        "id": 220396722,
        "sender_full_name": "matklad",
        "timestamp": 1608310118
    },
    {
        "content": "<p>let me show a quick pr...</p>",
        "id": 220396782,
        "sender_full_name": "matklad",
        "timestamp": 1608310150
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/6931\">https://github.com/rust-analyzer/rust-analyzer/pull/6931</a></p>",
        "id": 220396946,
        "sender_full_name": "matklad",
        "timestamp": 1608310223
    },
    {
        "content": "<p>Something like this</p>",
        "id": 220396956,
        "sender_full_name": "matklad",
        "timestamp": 1608310226
    },
    {
        "content": "<p>Basically, strongly-type the thing</p>",
        "id": 220396965,
        "sender_full_name": "matklad",
        "timestamp": 1608310233
    },
    {
        "content": "<p>rather than stringly-type the thing</p>",
        "id": 220396992,
        "sender_full_name": "matklad",
        "timestamp": 1608310249
    },
    {
        "content": "<p>yeah, that makes sense when possible</p>",
        "id": 220396999,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608310251
    },
    {
        "content": "<p>but this use here goes from <code>Type</code> to <code>ast::Type</code> <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/assists/src/ast_transform.rs#L109\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/assists/src/ast_transform.rs#L109</a></p>",
        "id": 220397138,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608310314
    },
    {
        "content": "<p>yeah...</p>",
        "id": 220397196,
        "sender_full_name": "matklad",
        "timestamp": 1608310326
    },
    {
        "content": "<p>I suppose we could make that a method on <code>Type</code></p>",
        "id": 220397199,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608310328
    },
    {
        "content": "<p>or something</p>",
        "id": 220397209,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608310333
    },
    {
        "content": "<p>Looking at that now, and urgh.</p>",
        "id": 220397211,
        "sender_full_name": "matklad",
        "timestamp": 1608310334
    },
    {
        "content": "<p>I <em>think</em> dispaly source code should return a SyntaxNode / ast::Something</p>",
        "id": 220397239,
        "sender_full_name": "matklad",
        "timestamp": 1608310351
    },
    {
        "content": "<p>probably</p>",
        "id": 220397248,
        "sender_full_name": "matklad",
        "timestamp": 1608310354
    },
    {
        "content": "<p><code>HirDispaly::    fn display_source_code&lt;'a&gt;</code> is the culprit here</p>",
        "id": 220397303,
        "sender_full_name": "matklad",
        "timestamp": 1608310377
    },
    {
        "content": "<p>ah, yeah</p>",
        "id": 220397383,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608310409
    },
    {
        "content": "<p>Well, I think it's fine to call <code>parse</code> inside <code>display_source_code</code> :D</p>",
        "id": 220398029,
        "sender_full_name": "matklad",
        "timestamp": 1608310635
    },
    {
        "content": "<p>and plan to think about this propertly later</p>",
        "id": 220398062,
        "sender_full_name": "matklad",
        "timestamp": 1608310647
    },
    {
        "content": "<p>but yeah, I <em>think</em> that we probably should describe hir rendering in terms of syntax trees. This shoudl be more composable with complex refactors</p>",
        "id": 220398211,
        "sender_full_name": "matklad",
        "timestamp": 1608310685
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> submitted <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/7017\">https://github.com/rust-analyzer/rust-analyzer/pull/7017</a> with doc clarifications</p>",
        "id": 220775418,
        "sender_full_name": "matklad",
        "timestamp": 1608717817
    }
]