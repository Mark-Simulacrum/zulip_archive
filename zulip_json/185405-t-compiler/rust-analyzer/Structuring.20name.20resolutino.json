[
    {
        "content": "<p>I've been doing various refactorings around our name res and noticed that handling of globs and legacy macros works rougthly like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">modules</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">modules</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"n\">some_other_module</span><span class=\"p\">).</span><span class=\"n\">import_from</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>That is, when doing fixed-point shenanigans we simultaneously iterate and mutate scopes. This obviously doesn't work out due to this annoying borrow checker, so we insert a bunch of clones in various places. I wonder if that's a sign that we need some more explicit work-list style approach.</p>\n<p>Basically, we split each iteration into two parts:</p>\n<div class=\"codehilite\"><pre><span></span>fn compute_diff(&amp;self) -&gt; Diff;\nfn apply_diff(&amp;mut self, diff: Diff);\n</pre></div>\n\n\n<p>That way, we solve the ailasing problem, and maybe also make the code clearer, as iterations become indipendent of each other.</p>\n<p>Granted, the <code>Diff</code> thing would probably be isomorphic to the cloning we do today, but it will be an explicit struct one can <code>eprintln!(\"{:?}\")</code>, instead of a number of local <code>.clone</code>s all other the place</p>",
        "id": 183946211,
        "sender_full_name": "matklad",
        "timestamp": 1576856470
    },
    {
        "content": "<p>sounds like a good idea to me</p>",
        "id": 183946742,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1576856835
    },
    {
        "content": "<p>I always like 'reifying' things ;)</p>",
        "id": 183947454,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1576857280
    }
]