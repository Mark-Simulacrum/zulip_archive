[
    {
        "content": "<p>I was looking at adding support for union literals (<a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/11568\">https://github.com/rust-analyzer/rust-analyzer/issues/11568</a>), which are of course very similar to structs, and while trying to refactor some stuff out of crates/ide_completion/src/render/struct_literal.rs to avoid just copying it all wholesale, I noticed that it's all <em>similar</em> to the enum variant code but not similar enough to actually deduplicate. Additionally, I realized that means that the actual user experience is different when auto-completing struct literals versus enum variants - specifically, you get <code>Struct{ a: (), b: ()}</code> for structs and just <code>Enum::Variant</code> for enums.<br>\nAt least from the bit of looking I've done so far, it seems like it should be pretty simple to unify behaviors for structs, enum variants, and (eventually) unions, but I'd like to know if there's a good reason not to do this or a good reason why it hasn't been done already before I just dive in.</p>",
        "id": 275063156,
        "sender_full_name": "Morgan Wolfe",
        "timestamp": 1647042295
    },
    {
        "content": "<p>No you are right, enum variants are pretty much just structs (I think we store both in the HIR under the same thing which is just a variant), the reason we don't have \"complete\" enum variant completions yet is just that it wasn't implemented yet</p>",
        "id": 275064131,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1647043123
    },
    {
        "content": "<p>So unifying these sounds like a great idea</p>",
        "id": 275064140,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1647043137
    },
    {
        "content": "<p>Cool beans. I'll get right on it</p>",
        "id": 275064328,
        "sender_full_name": "Morgan Wolfe",
        "timestamp": 1647043248
    }
]