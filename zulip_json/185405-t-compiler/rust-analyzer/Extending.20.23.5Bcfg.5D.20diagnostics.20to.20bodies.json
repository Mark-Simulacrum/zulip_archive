[
    {
        "content": "<p>Now that we diagnose inactive <code>#[cfg]</code>s on the item level, I'd like to extend this to bodies. One issue with this is that we cannot associate the diagnostic with the post-lowering <code>ExprId</code> etc., because those don't exist for unconfigured expressions/fields/etc., so this can't work like type check diagnostics. And storing <code>SyntaxNodePtr</code>s in the <code>Body</code> would invalidate it on every change that happens before the body in its file (right?).</p>\n<p>Would it be a good idea to instead collect these diagnostics in the <code>BodySourceMap</code>? This already contains <code>SyntaxNodePtr</code>s so it shouldn't affect caching.</p>",
        "id": 214317261,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1603461889
    },
    {
        "content": "<p>Now that I think about it, I've added <code>SyntaxNodePtr</code>s to <code>CrateDefMap</code> for unconfigured items. That should probably be changed. I think I couldn't use <code>AstId</code> because I wanted something that erased the type of AST node, but that might be unnecessary.</p>",
        "id": 214317526,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1603462007
    },
    {
        "content": "<p><code>AstId</code> stores something erased interally</p>",
        "id": 214323098,
        "sender_full_name": "matklad",
        "timestamp": 1603464570
    },
    {
        "content": "<p>For cfged-out expressions, perhaps we need just a special kind of expression? <code>Disable { what: Expr}</code>?</p>",
        "id": 214323215,
        "sender_full_name": "matklad",
        "timestamp": 1603464620
    },
    {
        "content": "<p>hm, probably not the expression , but statement</p>",
        "id": 214323256,
        "sender_full_name": "matklad",
        "timestamp": 1603464644
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Extending.20.23.5Bcfg.5D.20diagnostics.20to.20bodies/near/214323098\">said</a>:</p>\n<blockquote>\n<p><code>AstId</code> stores something erased interally</p>\n</blockquote>\n<p>Yeah, I think I ignored that because it's not <code>pub</code></p>",
        "id": 214324578,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1603465310
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Extending.20.23.5Bcfg.5D.20diagnostics.20to.20bodies/near/214323256\">said</a>:</p>\n<blockquote>\n<p>hm, probably not the expression , but statement</p>\n</blockquote>\n<p>The problem is that <code>#[cfg]</code>s can be on a lot more than just statements or expressions</p>",
        "id": 214324665,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1603465334
    },
    {
        "content": "<p>It can be on fields and function call arguments for example</p>",
        "id": 214324721,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1603465370
    },
    {
        "content": "<p>And on match arms</p>",
        "id": 214324726,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1603465373
    },
    {
        "content": "<p>Riiight</p>",
        "id": 214324758,
        "sender_full_name": "matklad",
        "timestamp": 1603465395
    },
    {
        "content": "<p>It doesn't really sound very clean to add special cases to all of those just for one diagnostic</p>",
        "id": 214324769,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1603465400
    },
    {
        "content": "<p>Well, I imagine that, if we have semantic model for disabled things, we can also provide best effort completion, for example</p>",
        "id": 214324828,
        "sender_full_name": "matklad",
        "timestamp": 1603465441
    },
    {
        "content": "<p>but yeah, this fundamentally goes against the grain of the language</p>",
        "id": 214324886,
        "sender_full_name": "matklad",
        "timestamp": 1603465456
    },
    {
        "content": "<p>true</p>",
        "id": 214324890,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1603465462
    },
    {
        "content": "<p>so, it probably doesn't make sense to try to handle that at this stage</p>",
        "id": 214324913,
        "sender_full_name": "matklad",
        "timestamp": 1603465473
    },
    {
        "content": "<p>Yeah, I guess we should just stuff the info in the SourceMap</p>",
        "id": 214324966,
        "sender_full_name": "matklad",
        "timestamp": 1603465503
    },
    {
        "content": "<p>We should probably also have some more incrementality tests for this sort of stuff, since otherwise we'd almost never notice these subtle problems (ItemTree is also missing these)</p>",
        "id": 214324976,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1603465506
    },
    {
        "content": "<p>It's kinda hard to make a general incremental tests here though, which would trigger when we make unexpected changes.</p>",
        "id": 214327165,
        "sender_full_name": "matklad",
        "timestamp": 1603466552
    },
    {
        "content": "<p>Yeah, it's a bit tricky. But something like \"prepending a newline to this file doesn't invalidate item bodies\" seems like a useful thing to test for.</p>",
        "id": 214327935,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1603466965
    },
    {
        "content": "<p>If something does break a test like that at least we won't <em>accidentally</em> regress it</p>",
        "id": 214327979,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1603466990
    },
    {
        "content": "<p>For the item tree this seems fairly useful, because its entire point is to avoid reparsing stuff, so that should be easy-ish to check</p>",
        "id": 214328116,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1603467036
    },
    {
        "content": "<p>Item tree is indirectly checked by nameres</p>",
        "id": 214328181,
        "sender_full_name": "matklad",
        "timestamp": 1603467066
    },
    {
        "content": "<p>Oh, did we add a test for that?</p>",
        "id": 214328225,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1603467093
    },
    {
        "content": "<p><code>typing_inside_a_macro_should_not_invalidate_def_map</code></p>",
        "id": 214328445,
        "sender_full_name": "matklad",
        "timestamp": 1603467192
    },
    {
        "content": "<p>Yeah, although that predates ItemTree</p>",
        "id": 214328582,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1603467263
    },
    {
        "content": "<p>It doesn't check that the ItemTree actually avoids parsing the source file twice</p>",
        "id": 214328621,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1603467284
    },
    {
        "content": "<p>\"Parsing twice\" in a sense \"not redo the same work for impls\" is not something this test is intended to test</p>",
        "id": 214328737,
        "sender_full_name": "matklad",
        "timestamp": 1603467354
    },
    {
        "content": "<p>\"Parsing twice\" is re-parsing after source code change I think is inevitable?</p>",
        "id": 214328796,
        "sender_full_name": "matklad",
        "timestamp": 1603467369
    },
    {
        "content": "<p>That's sort of how item tree works -- we re-parse and rebuild it, but we stop there, a the tree is not changed</p>",
        "id": 214328827,
        "sender_full_name": "matklad",
        "timestamp": 1603467390
    },
    {
        "content": "<p>Yeah, but previously we'd reparse the input twice, once for nameres, and once for item data queries</p>",
        "id": 214328927,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1603467441
    },
    {
        "content": "<p>I suppose it would not really be testing incrementality</p>",
        "id": 214329066,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1603467498
    },
    {
        "content": "<p>correct, it'll be testing LRU capacity</p>",
        "id": 214329220,
        "sender_full_name": "matklad",
        "timestamp": 1603467600
    },
    {
        "content": "<p>Though, yeah, I guess we can actully test this</p>",
        "id": 214329275,
        "sender_full_name": "matklad",
        "timestamp": 1603467609
    },
    {
        "content": "<p>At least in theory, something like <code>typing_inside_function_body_doesn't recompute crate_impls</code></p>",
        "id": 214329316,
        "sender_full_name": "matklad",
        "timestamp": 1603467641
    }
]