[
    {
        "content": "<p>If I have <code>(b != 0x09 &amp;&amp; b != 0x0A &amp;&amp; b != 0x0D)</code>, should I be able to change that into <code>!(b == 0x09 || b == 0x0A || b == 0x0D)</code> ? I'm just getting it to apply to two of the terms.</p>",
        "id": 228875334,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1614903801
    },
    {
        "content": "<p>Yes. I think clippy will yell at you for this pattern though, and suggest something like <code>![0x09, 0x0A, 0x0D].contains(&amp;b)</code>, or I guess <code>!b\"\\t\\r\\n\".contains(&amp;b)</code> if I remember my ascii. (EDIT: misread the context, this is off-topic)</p>",
        "id": 228912627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614932218
    },
    {
        "content": "<p>the assist currently only applies it for the two terms that are part of the operator your cursor is on</p>",
        "id": 228917398,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614934327
    },
    {
        "content": "<p>You absolutely should, if you can not, that's a bug in <a href=\"https://github.com/matklad/rust-analyzer/blob/142f9a03fd4bad366439b18d8de7f2237bed65ab/crates/ide_assists/src/handlers/apply_demorgan.rs#L1\">https://github.com/matklad/rust-analyzer/blob/142f9a03fd4bad366439b18d8de7f2237bed65ab/crates/ide_assists/src/handlers/apply_demorgan.rs#L1</a></p>",
        "id": 228918482,
        "sender_full_name": "matklad",
        "timestamp": 1614934487
    },
    {
        "content": "<p>My experience mirror's <span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span>'s — it only applies to the two terms around the one operator. I <em>am</em> using this via emacs, so I'd appreciate it if someone with Visual Studio could confirm if it affects them as well. If it does, I'll file an issue.</p>",
        "id": 228958967,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1614953333
    },
    {
        "content": "<p>that should be independent of Emacs</p>",
        "id": 228959259,
        "sender_full_name": "matklad",
        "timestamp": 1614953439
    },
    {
        "content": "<p>we just need to handle that extra case, shouldn't be too hard. Perhaps you want to file a PR ^^ ?</p>",
        "id": 228959329,
        "sender_full_name": "matklad",
        "timestamp": 1614953467
    },
    {
        "content": "<p>I assume that <code>a &amp;&amp; b &amp;&amp; c</code> is <code>(Binary (Binary a b) c)</code> (or similar nesting); is there something that will easily look up  and down the tree to get all of the terms at the same semantic level?</p>",
        "id": 228965730,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1614955947
    },
    {
        "content": "<p>RA offers a command <code>Show Syntax Tree</code> but I think that is only supported in vscode</p>",
        "id": 228965898,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614956016
    },
    {
        "content": "<p>The tree for that is</p>\n<div class=\"codehilite\"><pre><span></span><code>            BIN_EXPR@7219..7230\n              BIN_EXPR@7219..7225\n                PATH_EXPR@7219..7220\n                  PATH@7219..7220\n                    PATH_SEGMENT@7219..7220\n                      NAME_REF@7219..7220\n                        IDENT@7219..7220 &quot;a&quot;\n                WHITESPACE@7220..7221 &quot; &quot;\n                AMP2@7221..7223 &quot;&amp;&amp;&quot;\n                WHITESPACE@7223..7224 &quot; &quot;\n                PATH_EXPR@7224..7225\n                  PATH@7224..7225\n                    PATH_SEGMENT@7224..7225\n                      NAME_REF@7224..7225\n                        IDENT@7224..7225 &quot;b&quot;\n              WHITESPACE@7225..7226 &quot; &quot;\n              AMP2@7226..7228 &quot;&amp;&amp;&quot;\n              WHITESPACE@7228..7229 &quot; &quot;\n              PATH_EXPR@7229..7230\n                PATH@7229..7230\n                  PATH_SEGMENT@7229..7230\n                    NAME_REF@7229..7230\n                      IDENT@7229..7230 &quot;c&quot;\n</code></pre></div>",
        "id": 228966028,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614956056
    },
    {
        "content": "<p>so ye its <code>((a &amp;&amp; b) &amp;&amp; c)</code> nesting-wise</p>",
        "id": 228966108,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614956092
    },
    {
        "content": "<p>you can walk the tree for next and prev let me check quickly how that goes</p>",
        "id": 228966184,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614956124
    },
    {
        "content": "<p>Ah wait up and down, you can go up with <code>ancestors</code> and down with <code>children</code> if you mean that</p>",
        "id": 228966520,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614956258
    },
    {
        "content": "<p>you have to invoke those on <code>SyntaxNode</code>s, so if you got an expression you'd be able to go up/down by doing <code>expr.syntax().ancestors()</code></p>",
        "id": 228966708,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614956290
    },
    {
        "content": "<p>it starts with <code>let expr = ctx.find_node_at_offset::&lt;ast::BinExpr&gt;()?;</code>.</p>\n<p>I'm thinking  I basically need to see if either lhs or rhs is another binexpr with the same operator, or if I'm part of a binexpr with the same operator. That's what I mean by \"up\"/\"down\".</p>",
        "id": 228967141,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1614956428
    },
    {
        "content": "<p>Ah right, going down should be simple since you can directly insepect the sub expressions <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/syntax/src/ast/expr_ext.rs#L171-L232\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/syntax/src/ast/expr_ext.rs#L171-L232</a>. <br>\nBut going up seems a bit more tricky I suppose, let me think for a sec</p>",
        "id": 228968006,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614956718
    },
    {
        "content": "<p><code>expr.parent().and_then(ast::BinExpr::cast)</code></p>",
        "id": 228968244,
        "sender_full_name": "matklad",
        "timestamp": 1614956809
    },
    {
        "content": "<p>right, its actually rather simple I confused myself there <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 228968297,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614956828
    },
    {
        "content": "<p>Though you have to put a <code>syntax</code> call in between, <code>expr.syntax().parent()</code></p>",
        "id": 228968517,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614956902
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300586\">Lukas Wirth</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/De.20Morgan's.20Law.20with.20multiple.20terms/near/228965898\">said</a>:</p>\n<blockquote>\n<p>RA offers a command <code>Show Syntax Tree</code> but I think that is only supported in vscode</p>\n</blockquote>\n<p>it's supported in Emacs: <code>lsp-rust-analyzer-syntax-tree</code></p>",
        "id": 228969934,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1614957412
    },
    {
        "content": "<p>What determines if code goes outside the call to <code>Assists::add</code> or inside? E.g. this code computes <code>lhs</code> and <code>not_lhs</code> outside. Just to make use of <code>?</code>?</p>",
        "id": 228972767,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1614958462
    },
    {
        "content": "<p>Yup</p>",
        "id": 228972835,
        "sender_full_name": "matklad",
        "timestamp": 1614958486
    },
    {
        "content": "<p>the code outside can return <code>None</code> (meaning the assist doesn't apply)</p>",
        "id": 228972868,
        "sender_full_name": "matklad",
        "timestamp": 1614958505
    },
    {
        "content": "<p>the code insided should not fail and  should compute the actual edit</p>",
        "id": 228972917,
        "sender_full_name": "matklad",
        "timestamp": 1614958525
    },
    {
        "content": "<p>(see <a href=\"https://rust-analyzer.github.io/blog/2020/09/28/how-to-make-a-light-bulb.html\">https://rust-analyzer.github.io/blog/2020/09/28/how-to-make-a-light-bulb.html</a> for somewhat amusing explanation of the shape of this api<br>\n)</p>",
        "id": 228972989,
        "sender_full_name": "matklad",
        "timestamp": 1614958557
    },
    {
        "content": "<p>and presumably <code>lhs</code> can be <code>None</code> if we have malformed input?</p>",
        "id": 228973294,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1614958679
    },
    {
        "content": "<p>Yes</p>",
        "id": 228973425,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614958717
    },
    {
        "content": "<p>Just going to repeat this every so often:</p>\n<blockquote>\n<p>shouldn't be too hard</p>\n</blockquote>",
        "id": 228977402,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1614960298
    },
    {
        "content": "<p>You just need to invest enough time to makes sure that sunk cost fallacy prevents you from bailing out :)</p>",
        "id": 228978385,
        "sender_full_name": "matklad",
        "timestamp": 1614960628
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/De.20Morgan's.20Law.20with.20multiple.20terms/near/228969934\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"300586\">Lukas Wirth</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/De.20Morgan's.20Law.20with.20multiple.20terms/near/228965898\">said</a>:</p>\n<blockquote>\n<p>RA offers a command <code>Show Syntax Tree</code> but I think that is only supported in vscode</p>\n</blockquote>\n<p>it's supported in Emacs: <code>lsp-rust-analyzer-syntax-tree</code></p>\n</blockquote>\n<p>also in <code>coc.vim</code> with <code>:CocCommand rust-analyzer.syntaxTree</code></p>",
        "id": 228999562,
        "sender_full_name": "Josh Mcguigan",
        "timestamp": 1614968235
    },
    {
        "content": "<p>I have something quite ugly but passing tests — open a PR, draft PR, just drop a link here, other?</p>",
        "id": 229026276,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1614978999
    },
    {
        "content": "<p>My guess is that someone more familiar with navigating the trees will say \"oh, use &lt;this function&gt; to clean up that cruft\".</p>",
        "id": 229026884,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1614979311
    },
    {
        "content": "<p><a href=\"https://github.com/shepmaster/rust-analyzer/tree/multiple-demorgan\">https://github.com/shepmaster/rust-analyzer/tree/multiple-demorgan</a> to start with.</p>",
        "id": 229026985,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1614979353
    },
    {
        "content": "<p>Seems good to me</p>",
        "id": 229090224,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1615029983
    }
]