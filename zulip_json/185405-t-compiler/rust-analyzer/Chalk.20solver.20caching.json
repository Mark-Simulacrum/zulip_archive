[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> I'm trying out what happens if we just don't cache the solver and recreate it for every trait query. It feels much faster during editing, and seems to be only slightly slower (if at all) in analysis-stats</p>",
        "id": 189925503,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1583522508
    },
    {
        "content": "<p>hm, lol?</p>",
        "id": 189926406,
        "sender_full_name": "matklad",
        "timestamp": 1583523192
    },
    {
        "content": "<p>So, the difference is that:</p>\n<ul>\n<li>we don't use chalk's internal caches across queries</li>\n<li>we don't store salsa's metadata?</li>\n</ul>",
        "id": 189926602,
        "sender_full_name": "matklad",
        "timestamp": 1583523344
    },
    {
        "content": "<p>I wonder if the sweet spot is creating a solver per inference context?</p>",
        "id": 189926662,
        "sender_full_name": "matklad",
        "timestamp": 1583523363
    },
    {
        "content": "<p>not sure what you mean by </p>\n<blockquote>\n<p>we don't store salsa's metadata?</p>\n</blockquote>",
        "id": 189926888,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1583523566
    },
    {
        "content": "<p>it does mean we actually have clean dependency information for each trait query, and don't have to redo all of them every time something changes</p>",
        "id": 189926916,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1583523600
    },
    {
        "content": "<p>also another benefit would be that we can actually run trait queries in parallel, I guess</p>",
        "id": 189926972,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1583523621
    },
    {
        "content": "<p>ahhhh</p>",
        "id": 189926990,
        "sender_full_name": "matklad",
        "timestamp": 1583523637
    },
    {
        "content": "<p>right, so the <code>trait_solver</code> query is no longer  volatile, and <code>trait_solve</code> q can actually be usefully cache!</p>",
        "id": 189927036,
        "sender_full_name": "matklad",
        "timestamp": 1583523678
    },
    {
        "content": "<p>and presumably the Chalk-internal caching isn't <em>that</em> huge of a win (assuming most solution are actually pretty shallow)</p>",
        "id": 189927056,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1583523702
    },
    {
        "content": "<p><strong>and</strong> this also should fix the problem of analysis-statis OOMing on substrate repo due to chalk being big</p>",
        "id": 189927118,
        "sender_full_name": "matklad",
        "timestamp": 1583523728
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> could you repeat <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/2945\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/2945\">https://github.com/rust-analyzer/rust-analyzer/issues/2945</a> with your patch?</p>",
        "id": 189927390,
        "sender_full_name": "matklad",
        "timestamp": 1583523938
    },
    {
        "content": "<p>sure</p>",
        "id": 189927413,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1583523959
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> it gets killed after ca. 75%, with ca. 28G resident memory :(</p>",
        "id": 189939062,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1583532176
    },
    {
        "content": "<p>Hm, I am running it on substrate, and I have a feeling that it doesn't get to chalk at all</p>",
        "id": 189941737,
        "sender_full_name": "matklad",
        "timestamp": 1583534288
    },
    {
        "content": "<p>Ie, I am seeing two \"name resolution is stuck\" errors (and we've recently bumped the limit there a lot)</p>",
        "id": 189941773,
        "sender_full_name": "matklad",
        "timestamp": 1583534330
    },
    {
        "content": "<p>which reminds me that I want to rewrite our name resolution loop (which is basically my permanent state?)</p>",
        "id": 189941796,
        "sender_full_name": "matklad",
        "timestamp": 1583534363
    },
    {
        "content": "<p>Wow, it feels a bunch faster indeed</p>",
        "id": 189942401,
        "sender_full_name": "matklad",
        "timestamp": 1583534952
    },
    {
        "content": "<blockquote>\n<p>also another benefit would be that we can actually run trait queries in parallel, I guess</p>\n</blockquote>\n<p>A good start might be to add <code>-j</code> flag to <code>analysis-stats</code>. One needs <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/d4cea98bc342b0aa2603106a155722dcbe5534e1/crates/ra_ide_db/src/symbol_index.rs#L114-L132\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/d4cea98bc342b0aa2603106a155722dcbe5534e1/crates/ra_ide_db/src/symbol_index.rs#L114-L132\">this trick</a> for it to work with salsa</p>",
        "id": 189942510,
        "sender_full_name": "matklad",
        "timestamp": 1583535024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Chalk.20solver.20caching/near/189941773\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Chalk.20solver.20caching/near/189941773\">said</a>:</p>\n<blockquote>\n<p>Ie, I am seeing two \"name resolution is stuck\" errors (and we've recently bumped the limit there a lot)</p>\n</blockquote>\n<p>it does get past that after some time</p>",
        "id": 189944395,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1583536770
    },
    {
        "content": "<blockquote>\n<p>Ie, I am seeing two \"name resolution is stuck\" errors (and we've recently bumped the limit there a lot)</p>\n</blockquote>\n<p>It seem to relate to <code>include</code> macro , I am investigating now.</p>",
        "id": 189955765,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1583554171
    },
    {
        "content": "<p>I saw the same error in my ra-stats tool after my PR.</p>",
        "id": 189955808,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1583554239
    },
    {
        "content": "<p>Oh... haha, it is because the <code>include</code> macro expanded correctly, however we have a dummy <code>env</code> macro implementation such that a <code>include!(concat!(env!(\"OUT_DIR\"), \"/foo.rs\"))</code> will became <code>include!(\"/foo.rs\")</code>, and here  may be a infinite loop. :)</p>",
        "id": 189956867,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1583556509
    },
    {
        "content": "<p>(<a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/3508\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/3508\">rust-analyzer/rust-analyzer#3508</a>) should fix it.</p>",
        "id": 189957294,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1583557560
    },
    {
        "content": "<p>Ha, looks like IntelliJ Rust fixed this same exact issue somewhat recently <a href=\"https://github.com/intellij-rust/intellij-rust/pull/4584\" target=\"_blank\" title=\"https://github.com/intellij-rust/intellij-rust/pull/4584\">https://github.com/intellij-rust/intellij-rust/pull/4584</a></p>",
        "id": 190025674,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1583697107
    }
]