[
    {
        "content": "<p>Started design doc for our new hir: <a href=\"https://hackmd.io/@matklad/rJzQhvk2u/edit\">https://hackmd.io/@matklad/rJzQhvk2u/edit</a>!</p>",
        "id": 243560600,
        "sender_full_name": "matklad",
        "timestamp": 1624387125
    },
    {
        "content": "<p>Working on this right now, good chance for some sync questions!</p>",
        "id": 243840686,
        "sender_full_name": "matklad",
        "timestamp": 1624565999
    },
    {
        "content": "<p>Two question I just thought of:</p>\n<ul>\n<li>Will hir nodes always have a corresponding source node?</li>\n<li>Somewhat related, can we synthesize hir nodes from thin air? For example for creating a pattern from a struct definition, or will this only every be available to the AST. I believe having this might be useful though I don't quite remember where I had the thought for this</li>\n</ul>",
        "id": 243841660,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1624566479
    },
    {
        "content": "<p>Good questions.</p>\n<p>I think the answer to the first is no -- we should support rlibs</p>\n<p>The answer to the second one is I think also no -- full-fidelity with the source seem an important constraint to me. So,eg, we'll have the same tuple struct in both types and values namespace, instead of synthesizing a functin</p>",
        "id": 243842352,
        "sender_full_name": "matklad",
        "timestamp": 1624566833
    },
    {
        "content": "<p>Ie, I think even if its convenient to introduce synthetics, it should be done after this layer</p>",
        "id": 243842721,
        "sender_full_name": "matklad",
        "timestamp": 1624566920
    },
    {
        "content": "<p>Question -- what actually is the relation between tokens in macro expansion and macro invocation?</p>",
        "id": 243844584,
        "sender_full_name": "matklad",
        "timestamp": 1624567810
    },
    {
        "content": "<p>For mbe, we track which source tokens go to which destination tokens.</p>",
        "id": 243844640,
        "sender_full_name": "matklad",
        "timestamp": 1624567843
    },
    {
        "content": "<p>But proc macros can manufacture arbitrary spans -- what does it mean for the programming model?</p>\n<p>Ie, <code>m!(foo)</code> expands to <code>bar</code>, where <code>bar</code> has the span of <code>foo</code>. Does it mean that <code>foo</code>s expansion is <code>bar</code>?</p>",
        "id": 243844889,
        "sender_full_name": "matklad",
        "timestamp": 1624567940
    },
    {
        "content": "<p>I think that's what <em>should</em> happen, yeah. I don't know if we implement this correctly though.</p>",
        "id": 243845459,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624568202
    },
    {
        "content": "<p>I'd say yes, <code>foo</code>'s expansion should be <code>bar</code> in that case. at least I can't think of a case where this would be odd, except maybe if the span of <code>foo</code> is used multiple times in different contexts. Would that be problematic?</p>",
        "id": 243845495,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1624568219
    },
    {
        "content": "<p>That's something we already have to anticipate with MBE</p>",
        "id": 243845721,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624568318
    },
    {
        "content": "<p>You could paste a <code>$x:ident</code> multiple times in different contexts</p>",
        "id": 243845776,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624568348
    },
    {
        "content": "<p>Right thats already a thing in MBE, I assume we just map that token to the first placement in the expansion then?</p>",
        "id": 243845859,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1624568398
    },
    {
        "content": "<p>I also wonder what happens when <code>foo</code> gets expanded to <code>&amp;</code> or some such. I am starting to think that, for procedural macros, there's just no fundamental \"correct\" link up between source and expansion?</p>",
        "id": 243845975,
        "sender_full_name": "matklad",
        "timestamp": 1624568438
    },
    {
        "content": "<p>Could we verify that the input token kind gets mapped to the same output token kind maybe? As in only if an ident gets mapped to an ident we treat it as a proper mapping and otherwise not treat it as a correct mapping? Or would that break somewhere?</p>",
        "id": 243846205,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1624568548
    },
    {
        "content": "<p>Ie, that the thinking that a token \"expands\" to something is just flawed? </p>\n<p>Rather, it might so happen that span of the original token and expansion is the same. So it's not <code>t -&gt; t'</code> but rather <code>t -&gt; s1</code>, <code>t' -&gt; s2</code>, and we are doing a JOIN on the spans?</p>",
        "id": 243846250,
        "sender_full_name": "matklad",
        "timestamp": 1624568569
    },
    {
        "content": "<p>Currently it looks like we do indeed just assume that the first matching token is the only one:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$x</span>:<span class=\"nc\">ident</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"cp\">$x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"cp\">$x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">m</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">asdf</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Hovering over <code>asdf</code> says that it has type <code>i32</code>.</p>",
        "id": 243848021,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624569399
    },
    {
        "content": "<p>Ah, this is also just how <code>TokenMap</code> lookup works, it just gives you the first token with the requested <code>TokenId</code></p>",
        "id": 243848064,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624569429
    },
    {
        "content": "<p>How would one even write an IDE for this language? <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 243848133,
        "sender_full_name": "matklad",
        "timestamp": 1624569477
    },
    {
        "content": "<p>It seems that the only \"fundamental\" property of expansion is actually just hygiene. token matching seems to be fundamentally heuristic...  I guess, I'll go and read <a href=\"https://rustc-dev-guide.rust-lang.org/macro-expansion.html\">https://rustc-dev-guide.rust-lang.org/macro-expansion.html</a></p>",
        "id": 243848287,
        "sender_full_name": "matklad",
        "timestamp": 1624569566
    },
    {
        "content": "<p>Ye I mean we cant really map tokens as soon as they appear in multiple different context, at least I dont see how/how we'd consume such a \"multimapping\"</p>",
        "id": 243848972,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1624569973
    },
    {
        "content": "<p>I mean, it should still work reliably as long as it's a one-to-one mapping, which is common</p>",
        "id": 243850443,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624570928
    },
    {
        "content": "<p>Or at least as long as all positions in the output have the same \"property\"</p>",
        "id": 243850513,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624570977
    },
    {
        "content": "<p>Ye certainly, I just wonder if we can do anything when have a one to many relation</p>",
        "id": 243851000,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1624571215
    },
    {
        "content": "<p>Uhh… one thing I want for hir 2.0 is to clearly separate “we know” from “we are guessing”. It seems like various “descend into macros” things should go into “guessing” section (</p>",
        "id": 243851219,
        "sender_full_name": "matklad",
        "timestamp": 1624571336
    },
    {
        "content": "<p>In that example you could show two hovers...</p>",
        "id": 243851391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624571428
    },
    {
        "content": "<p>that would work too, yeah</p>",
        "id": 243851415,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624571450
    },
    {
        "content": "<p>Not for everything though, what about semantic highlighting for example. We have to decide in that case</p>",
        "id": 243851447,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1624571470
    },
    {
        "content": "<p>well until we run into a macro that expands to thousands of uses of the same input identifier</p>",
        "id": 243851455,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624571477
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300586\">Lukas Wirth</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Tree.20Based.20HIR/near/243851447\">said</a>:</p>\n<blockquote>\n<p>Not for everything though, what about semantic highlighting for example. We have to decide in that case</p>\n</blockquote>\n<p>Though we also got a similar problem with imports already where an import ident can refer up to 3 different items</p>",
        "id": 243851853,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1624571761
    },
    {
        "content": "<p>Wrote down my yesterday's revelation about macros in a more coherent form: <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/9403\">https://github.com/rust-analyzer/rust-analyzer/issues/9403</a></p>",
        "id": 243885272,
        "sender_full_name": "matklad",
        "timestamp": 1624607436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink  [he/him]</span> expanded the macro issue a bit here: <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/9403#issuecomment-873635676\">https://github.com/rust-analyzer/rust-analyzer/issues/9403#issuecomment-873635676</a>, curious what you think</p>",
        "id": 244870630,
        "sender_full_name": "matklad",
        "timestamp": 1625422294
    },
    {
        "content": "<p>yeah the <code>Span::join</code> example also came to mind here</p>",
        "id": 244870688,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625422367
    },
    {
        "content": "<p>interesting</p>",
        "id": 244870691,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625422386
    },
    {
        "content": "<p>and in the rustc model, spans are also what carry hygiene and edition information</p>",
        "id": 244870697,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625422405
    },
    {
        "content": "<p>(what happens if you join 2 spans with different editions?)</p>",
        "id": 244870745,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625422452
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Tree.20Based.20HIR/near/244870745\">said</a>:</p>\n<blockquote>\n<p>(what happens if you join 2 spans with different editions?)</p>\n</blockquote>\n<p>The docs say that the two spans need to come from the same file</p>",
        "id": 244872836,
        "sender_full_name": "Laurențiu",
        "timestamp": 1625425660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink  [he/him]</span> source location and hygiene are completely orthogonal bits in span. Span is a bit a misnomer, it couldve been type TokenData = (Span, Hygiene)</p>",
        "id": 244874873,
        "sender_full_name": "matklad",
        "timestamp": 1625428747
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu</span> I think you can have spans from the same file but with different hygiene info.</p>",
        "id": 244874894,
        "sender_full_name": "matklad",
        "timestamp": 1625428803
    },
    {
        "content": "<p>proc_macro exposes this to user code though (eg. via <a href=\"https://doc.rust-lang.org/proc_macro/struct.Span.html#method.mixed_site\"><code>Span::mixed_site</code></a>)</p>",
        "id": 244875028,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625428954
    },
    {
        "content": "<p>which isn't really that important, I was mostly mentioning that because it plays into how we want to handle this (since we should be having proper Hygiene support at some point)</p>",
        "id": 244875039,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625429000
    },
    {
        "content": "<p>I think the fact that rustc doesn't have the recursive mapping approach that we have might be a red herring – this might have just been convenient for them since they have a global <code>SourceMap</code></p>",
        "id": 244875429,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625429534
    },
    {
        "content": "<p>mixed_site just uses call site for the source location. It’s hygiene is semi-transparent, yeah, but hygiene and source info are still orthogonal.</p>",
        "id": 244875437,
        "sender_full_name": "matklad",
        "timestamp": 1625429567
    },
    {
        "content": "<p>yeah</p>",
        "id": 244875448,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625429600
    },
    {
        "content": "<p>Note that you sort of still have recursive mapping: you can look at the tokens of first-level expansion and note their spans. </p>\n<p>Put it another way, you can pick a token in the original file, and file all the tokens from all he levels of expansion that have the same source span.</p>\n<p>There is fundamental thing though: source map is a concatenated, byte-addressable list of sources. It only includes sources of original files. Macro expansions do not go into source map, if you ask for a snippet of some span from some expansion, you get the snippet of the original source code</p>",
        "id": 244875595,
        "sender_full_name": "matklad",
        "timestamp": 1625429779
    },
    {
        "content": "<p>Let me actually verify that…</p>",
        "id": 244875597,
        "sender_full_name": "matklad",
        "timestamp": 1625429790
    },
    {
        "content": "<p>ah, I see what you mean now</p>",
        "id": 244875848,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625430199
    },
    {
        "content": "<p>it'll be interesting to figure out a way to store all these spans, rustc has a rather elaborate interning scheme</p>",
        "id": 244875915,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625430270
    },
    {
        "content": "<p>Yeah, I've been reading the \"compact data structures\" book recently, it makes thinking about rust-analyzer's data srtuctures painful :)</p>",
        "id": 244876000,
        "sender_full_name": "matklad",
        "timestamp": 1625430446
    },
    {
        "content": "<p>heh, that sounds like what we need a lot more of indeed</p>",
        "id": 244876003,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625430471
    },
    {
        "content": "<p>Another useful example to think about is <code>concat!</code> / <code>concat_idents!</code> macro. It produces the token, whose source span is the span of the macro invocation, and the text of the token doesn't match anything we have in the SourceMap</p>",
        "id": 244876728,
        "sender_full_name": "matklad",
        "timestamp": 1625431521
    },
    {
        "content": "<p>right, not when the SourceMap only contains actual file system files</p>",
        "id": 244876902,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625431797
    },
    {
        "content": "<p>Made some progress on <a href=\"https://hackmd.io/ytd82QNiT_Ku2XFr1EAtiQ\">https://hackmd.io/ytd82QNiT_Ku2XFr1EAtiQ</a> ! It seems that there are three kinds of files:</p>\n<ul>\n<li>Text Source files on disk / in vfs</li>\n<li>Text Files as they are mounted into the crates</li>\n<li>Token \"Files\" which are result of macro expansion</li>\n</ul>",
        "id": 244878674,
        "sender_full_name": "matklad",
        "timestamp": 1625434541
    },
    {
        "content": "<p>and eventually also highlighting injections, presumably?</p>",
        "id": 244879700,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625436079
    },
    {
        "content": "<p>Argh, injections are hard… I would think that they need to be part of the <em>speculative</em> layer. Probably makes sense to move this to a separate bullet point in Semantic Constraints. <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink  [he/him]</span> feel free to (or not to) do this, I am away from keyboard</p>",
        "id": 244879947,
        "sender_full_name": "matklad",
        "timestamp": 1625436398
    },
    {
        "content": "<p>I find that I feel really confilicted about what I want hir2.0 to be:</p>\n<ul>\n<li>we can try design it as <code>symbols + expanded AST</code></li>\n<li>we can try designing it as just <code>expanded AST</code>, with a symbols layer being separate</li>\n</ul>\n<p>What is a <code>Module</code> is a question that separates two worlds. In symbols world, <code>Module</code> has just a scope with symbols. In expanded Ast world, module can be either inline, out of line, or root.</p>",
        "id": 245083899,
        "sender_full_name": "matklad",
        "timestamp": 1625598035
    },
    {
        "content": "<p>Hmm. Not quite sure I see the distinction? I guess I would expect <code>Module</code> to have ways of getting to the declaration and definition where applicable, and to list the symbols defined in it. For me the harder question seems to be what to do about item-level macro calls</p>",
        "id": 245164276,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1625657032
    },
    {
        "content": "<p>maybe there need to be two methods, one that lists the items including macro calls that can then be recursed into, and one that just lists actual items</p>",
        "id": 245164395,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1625657108
    },
    {
        "content": "<p>Took another look at roslyn: they have two layer system of syntax and symbols. They don't have a special type layer, because symbols carry substitutions</p>",
        "id": 246585341,
        "sender_full_name": "matklad",
        "timestamp": 1626788541
    },
    {
        "content": "<p>When you create  symbol form <code>struct S&lt;T&gt; (T)</code> syntax, the subst substs T for iteslf.  When you get the symbol from name resolution, <code>T</code> is substituted for the actual type argument.</p>",
        "id": 246585462,
        "sender_full_name": "matklad",
        "timestamp": 1626788596
    },
    {
        "content": "<p><a href=\"https://docs.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.imethodsymbol.typearguments?view=roslyn-dotnet-3.10.0#Microsoft_CodeAnalysis_IMethodSymbol_TypeArguments\">https://docs.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.imethodsymbol.typearguments?view=roslyn-dotnet-3.10.0#Microsoft_CodeAnalysis_IMethodSymbol_TypeArguments</a></p>",
        "id": 246585613,
        "sender_full_name": "matklad",
        "timestamp": 1626788661
    },
    {
        "content": "<p>Bringing this up as it is HIR related, though maybe not related to the redesign. But we need to to somehow record imports in the HIR I believe, at least when they have renames to them or specific attributes like <code>#[doc(hidden)]</code>. Both of these things currently give us some problems in regards to renaming and completion we cannot currently solve.</p>",
        "id": 247083799,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1627145659
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/5198\">https://github.com/rust-analyzer/rust-analyzer/issues/5198</a>, <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/5671\">https://github.com/rust-analyzer/rust-analyzer/issues/5671</a> regarding renames of aliases(which we currently just reject by checking whether the name we are renaming and the name of the definition are different)</p>\n<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/9197\">https://github.com/rust-analyzer/rust-analyzer/issues/9197</a> regarding <code>#[doc(hidden)]</code> messing up completions(this specific example also makes use of a rename which isnt really relevant to the core issue though)</p>",
        "id": 247083839,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1627145747
    },
    {
        "content": "<p>we also don't display docs on them</p>",
        "id": 247084303,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1627146404
    }
]