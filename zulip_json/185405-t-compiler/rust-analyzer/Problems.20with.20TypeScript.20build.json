[
    {
        "content": "<p>When I try to build the extension with a task, I get this</p>",
        "id": 187254776,
        "sender_full_name": "matklad",
        "timestamp": 1580730499
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/XI_DaQNt7QIqtiNZ42rY9VDI/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/XI_DaQNt7QIqtiNZ42rY9VDI/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/XI_DaQNt7QIqtiNZ42rY9VDI/pasted_image.png\"></a></div>",
        "id": 187254778,
        "sender_full_name": "matklad",
        "timestamp": 1580730500
    },
    {
        "content": "<p>Can it be related to that module thing? cc <span class=\"user-mention\" data-user-id=\"258149\">@std::Veetaha</span> ?</p>",
        "id": 187254787,
        "sender_full_name": "matklad",
        "timestamp": 1580730514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>  Can you try to set <code>\"moduleResoltion\": \"node\"</code> in tsconfig? I had this on my mind when applying the morning fix, but since <code>rollup</code> successfully produced the artifact I didn't pay attention to it, sorry...</p>",
        "id": 187254982,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580730726
    },
    {
        "content": "<p>Its a miracle how <code>rollup</code> doesn't catch this... It uses some custom TypeScript compilation settings that differ from <code>tsc</code>...<br>\nWhat happened is that with switching from <code>commonjs</code> module to <code>es2015</code> the default typechecker <code>moduleResolution</code> strategy also switched from <code>node</code> to <code>classic</code> which is not intended...<br>\nMaybe we should indeed add <code>tsc --noEmit</code> in CI since the behaviour of it and <code>rollup</code> is so different</p>",
        "id": 187255218,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580731033
    },
    {
        "content": "<p>Hm, with <code>moduleResolution: node</code> it compiles, but failes at runtime with a parse error</p>",
        "id": 187259610,
        "sender_full_name": "matklad",
        "timestamp": 1580735090
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>rust-analyzer/editors/code/out/main.js:1\n(function (exports, require, module, __filename, __dirname) { import * as vscode from &#39;vscode&#39;;\n                                                                     ^\n\nSyntaxError: Unexpected token *\n</pre></div>",
        "id": 187259635,
        "sender_full_name": "matklad",
        "timestamp": 1580735116
    },
    {
        "content": "<p>Okay, we have very interesting situation) We produce es2015 output for rollup, but when developing this must be a ready-to-use commonjs</p>",
        "id": 187260062,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580735508
    },
    {
        "content": "<p>Am I correct that Node that is used with electorn (12) supports only common js, but not es2015?</p>",
        "id": 187260148,
        "sender_full_name": "matklad",
        "timestamp": 1580735564
    },
    {
        "content": "<p>Yes, in order to use es2015, files should have extension <code>.mjs</code>.</p>",
        "id": 187260191,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580735611
    },
    {
        "content": "<p>I propose to create <code>tsconfig.dev.json</code> where it <code>\"extends\": \"./tsconfig.json\"</code> and overrides <code>\"module\": \"commonjs\"</code></p>",
        "id": 187260253,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580735643
    },
    {
        "content": "<p>Otherwise we would need to setup rollup for development watch mode</p>",
        "id": 187260271,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580735673
    },
    {
        "content": "<p>Or we just downgrade <code>@rollup/typescript-plugin</code> to <code>2.1.0</code> and switch to <code>commonjs</code> so I think of the better setup today</p>",
        "id": 187260417,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580735835
    },
    {
        "content": "<p>hm, </p>\n<p><a href=\"https://github.com/rollup/plugins/tree/master/packages/typescript#ignored-options\" target=\"_blank\" title=\"https://github.com/rollup/plugins/tree/master/packages/typescript#ignored-options\">https://github.com/rollup/plugins/tree/master/packages/typescript#ignored-options</a></p>\n<p>Ignored options</p>\n<blockquote>\n<p>noEmitHelpers, importHelpers: The tslib helper module always must be used.</p>\n</blockquote>",
        "id": 187260880,
        "sender_full_name": "matklad",
        "timestamp": 1580736051
    },
    {
        "content": "<p>what does this actually mean?</p>",
        "id": 187260901,
        "sender_full_name": "matklad",
        "timestamp": 1580736071
    },
    {
        "content": "<p>This is what <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/2992#issuecomment-581291811\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/2992#issuecomment-581291811\">I saw earlier today</a>, it always uses <code>tslib</code> no matter what <code>importHelpers</code> option is set to.<br>\nHowever it should be enabled to be used for development builds with <code>tsc</code></p>",
        "id": 187261067,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580736233
    },
    {
        "content": "<p>Hm, I remmeber why tslib ended up in dev deps</p>",
        "id": 187261207,
        "sender_full_name": "matklad",
        "timestamp": 1580736333
    },
    {
        "content": "<p><a href=\"https://github.com/rollup/rollup-plugin-typescript#installation\" target=\"_blank\" title=\"https://github.com/rollup/rollup-plugin-typescript#installation\">https://github.com/rollup/rollup-plugin-typescript#installation</a></p>",
        "id": 187261209,
        "sender_full_name": "matklad",
        "timestamp": 1580736334
    },
    {
        "content": "<p>that's what the docs for rollup originally said</p>",
        "id": 187261228,
        "sender_full_name": "matklad",
        "timestamp": 1580736355
    },
    {
        "content": "<p>I see that they say that <code>\"extensions\": [\".ts\"]</code> is required in <code>commonjs</code> plugin options, maybe this is why the bundling behavior changed from 2.1.0 to 3.0.0<br>\n<a href=\"https://github.com/rollup/plugins/blob/master/packages/typescript/README.md#importing-commonjs\" target=\"_blank\" title=\"https://github.com/rollup/plugins/blob/master/packages/typescript/README.md#importing-commonjs\">https://github.com/rollup/plugins/blob/master/packages/typescript/README.md#importing-commonjs</a></p>",
        "id": 187261563,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580736580
    },
    {
        "content": "<p>Having <code>tslib</code> as dev dependency is inherently weird. Maybe they meant it to be dev dependency because the resulting bundle doesn't depend on anything from <code>node_modules</code>, but this way we could say that any dependency is dev dependency</p>",
        "id": 187261806,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580736732
    },
    {
        "content": "<p>Let's just downgrade the plugin to <code>2.1.0</code> and switch to <code>\"module\": \"commonjs\"</code> for now, ok?</p>",
        "id": 187262182,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580737025
    },
    {
        "content": "<p>Very sorry for wasting you time...</p>",
        "id": 187262506,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580737286
    },
    {
        "content": "<p>I think that uptodate bundler plus a dev dep on tslib is better than old bundler</p>",
        "id": 187263469,
        "sender_full_name": "matklad",
        "timestamp": 1580738030
    },
    {
        "content": "<p>I agree that devdep for tslib is super weired thoguh :)</p>",
        "id": 187263521,
        "sender_full_name": "matklad",
        "timestamp": 1580738045
    },
    {
        "content": "<p>And no, this is definitelly not a time waste, as we've lerned a bunch about the limitation of the tools we use</p>",
        "id": 187263555,
        "sender_full_name": "matklad",
        "timestamp": 1580738080
    },
    {
        "content": "<p>The only waste here is that nodejs ecosystem is kind of ungood, in my humble option, but we just have to work with it</p>",
        "id": 187263590,
        "sender_full_name": "matklad",
        "timestamp": 1580738105
    },
    {
        "content": "<p>And of course I can't place a comment into package.json to explain this weirdness</p>",
        "id": 187263700,
        "sender_full_name": "matklad",
        "timestamp": 1580738178
    },
    {
        "content": "<p>/me shakes fist at heaven</p>",
        "id": 187263708,
        "sender_full_name": "matklad",
        "timestamp": 1580738188
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>, I think one day we should migrate from rollup to webpack, since it is the  unspoken standard bundler, anyway...<br>\nNo need for a comment, I'll tackle it today!</p>",
        "id": 187263746,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580738226
    },
    {
        "content": "<p>There was an attempt to do that in <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/1451\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/1451\">https://github.com/rust-analyzer/rust-analyzer/pull/1451</a>. But isn't rollup supposed to be newer and better?</p>",
        "id": 187264358,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1580738655
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Lauren»õiu Nicola</span> well rollup was published 5 years ago and webpack 8 years ago. I am not sure wether this is the new better guy on the market, I am just following the trends )<br>\n<a href=\"https://www.npmtrends.com/rollup-vs-webpack\" target=\"_blank\" title=\"https://www.npmtrends.com/rollup-vs-webpack\">https://www.npmtrends.com/rollup-vs-webpack</a></p>",
        "id": 187265321,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580739251
    },
    {
        "content": "<p>I just read the blurb, it says \"next-generation\" <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 187265832,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1580739570
    },
    {
        "content": "<p>I wonder if anyone is working on Code bindings for Rust</p>",
        "id": 187266076,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1580739765
    },
    {
        "content": "<p>Speaking about \"next-generation\" I heard that initially <code>webpack</code> was a very good piece of software, it got popularity, but somehow its maintainers didn't support it very much and that's why new bundlers (maybe rollup was one of them) appeared. However after some time <code>webpack</code> maintainers caught up and started developing it very much to the state that it is now dominating the market.</p>",
        "id": 187266699,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580740266
    },
    {
        "content": "<p>The metrick I use is the size of package.json.lock :D</p>",
        "id": 187266887,
        "sender_full_name": "matklad",
        "timestamp": 1580740393
    },
    {
        "content": "<blockquote>\n<p>And of course I can't place a comment into package.json to explain this weirdness</p>\n</blockquote>\n<p>FWIW, the <code>\"//\":</code> key is <a href=\"https://groups.google.com/forum/#!msg/nodejs/NmL7jdeuw0M/yTqI05DRQrIJ\" target=\"_blank\" title=\"https://groups.google.com/forum/#!msg/nodejs/NmL7jdeuw0M/yTqI05DRQrIJ\">reserved for comments</a> in <code>package.json</code>. Feels a bit kludgy to use that though <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 187273881,
        "sender_full_name": "Joe Clay",
        "timestamp": 1580744862
    },
    {
        "content": "<p>and on the topic of webpack vs. rollup, general consensus I've heard is that the former is better for applications, the latter is better for libraries. If you're literally just bundling your JS rather than doing anything fancy, I'd definitely recommend avoiding the hassle of maintaining a Webpack config file <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 187274107,
        "sender_full_name": "Joe Clay",
        "timestamp": 1580745011
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"258149\">@std::Veetaha</span> btw the today's morning problem, \"build works via rollup, but not via build task\" is exactly an issue which wouldn't be caught by an end-to-end test. It seems like you should just suffer through similar things :-(</p>",
        "id": 187279636,
        "sender_full_name": "matklad",
        "timestamp": 1580748231
    },
    {
        "content": "<p>No suffering! Build task is just a script that invokes <code>tsc --watch</code>, if we add <code>tsc --noEmit</code> to CI we can tackle at least the issue with compile-time inconsistencies between <code>rollup</code> and  <code>tsc</code>.</p>",
        "id": 187280083,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580748416
    },
    {
        "content": "<p>For the discrepancies, I think <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/3003\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/3003\">https://github.com/rust-analyzer/rust-analyzer/pull/3003</a> might actually be a better approach: just don't  let that rollup plugin to mess up with typescript build.</p>\n<p>But my point is that, for integration, things usually break in a pretty surprising ways, which are not tested. Like, after every specific failure you can add a test that will catch this specific failure, but the probability that it won't catch the next failure is pretty high</p>",
        "id": 187280318,
        "sender_full_name": "matklad",
        "timestamp": 1580748574
    },
    {
        "content": "<blockquote>\n<p>Not mess with typescript build</p>\n</blockquote>\n<p>Do you want to feed compiled JavaScript artifacts to rollup instead of using the typescript plugin?</p>",
        "id": 187280511,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580748707
    },
    {
        "content": "<p>exactly</p>",
        "id": 187280562,
        "sender_full_name": "matklad",
        "timestamp": 1580748724
    },
    {
        "content": "<p>This is a good point, though it may take a bit more seconds to assemble the package, but we won't have these inconsistencies anyway</p>",
        "id": 187280617,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580748777
    },
    {
        "content": "<p>Hi!</p>\n<p>I am currently working on improved memory usage tracing for rust-analyzer, and I am running into a new problem I never had before:</p>\n<p>When I try to launch the <em>Run Extension (Release Build)</em> launch config in vscode, I get errors from typescript / the vscode extension:</p>\n<div class=\"codehilite\"><pre><span></span><code>&gt; Executing task: npm run build &lt;\n\n\n&gt; rust-analyzer@0.4.0-dev build\n&gt; npm run build-base -- --sourcemap\n\n\n&gt; rust-analyzer@0.4.0-dev build-base\n&gt; esbuild ./src/main.ts --bundle --outfile=out/main.js --external:vscode --format=cjs --platform=node --target=node14 &quot;--sourcemap&quot;\n\nsh: Zeile 1: esbuild: Kommando nicht gefunden.\nThe terminal process &quot;zsh &#39;-c&#39;, &#39;npm run build&#39;&quot; terminated with exit code: 127.\n\nTerminal will be reused by tasks, press any key to close it.\n\n&gt; Executing task: npm run build &lt;\n\n\n&gt; rust-analyzer@0.4.0-dev build\n&gt; npm run build-base -- --sourcemap\n\n\n&gt; rust-analyzer@0.4.0-dev build-base\n&gt; esbuild ./src/main.ts --bundle --outfile=out/main.js --external:vscode --format=cjs --platform=node --target=node14 &quot;--sourcemap&quot;\n\nsh: Zeile 1: esbuild: Kommando nicht gefunden.\nThe terminal process &quot;zsh &#39;-c&#39;, &#39;npm run build&#39;&quot; terminated with exit code: 127.\n\nTerminal will be reused by tasks, press any key to close it.\n\n&gt; Executing task: npm run build &lt;\n\n\n&gt; rust-analyzer@0.4.0-dev build\n&gt; npm run build-base -- --sourcemap\n\n\n&gt; rust-analyzer@0.4.0-dev build-base\n&gt; esbuild ./src/main.ts --bundle --outfile=out/main.js --external:vscode --format=cjs --platform=node --target=node14 &quot;--sourcemap&quot;\n\nsh: Zeile 1: esbuild: Kommando nicht gefunden.\nThe terminal process &quot;zsh &#39;-c&#39;, &#39;npm run build&#39;&quot; terminated with exit code: 127.\n\nTerminal will be reused by tasks, press any key to close it.\n</code></pre></div>\n<p>Last I worked on ra I did not have this issue, but this is already a while back. If anyone has any pointers, I would be glad. I have no plan how the extension itself works / the typescript build process.</p>",
        "id": 252530969,
        "sender_full_name": "Roland Ruckerbauer",
        "timestamp": 1631134389
    },
    {
        "content": "<blockquote>\n<p>sh: Zeile 1: esbuild: Kommando nicht gefunden.</p>\n</blockquote>\n<p>Seems this is the culprit, are you sure you have run <code>npm install</code> before building?</p>",
        "id": 252576513,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1631168365
    },
    {
        "content": "<p>Thank you for the help. Was not aware I had to install npm packages for development.</p>",
        "id": 252751607,
        "sender_full_name": "Roland Ruckerbauer",
        "timestamp": 1631262990
    }
]