[
    {
        "content": "<p><a href=\"/user_uploads/4715/gDT7zk8ZapvvcMpFx-YNtoCK/screenshot-2021-08-26-145159.png\">screenshot-2021-08-26-145159.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/gDT7zk8ZapvvcMpFx-YNtoCK/screenshot-2021-08-26-145159.png\" title=\"screenshot-2021-08-26-145159.png\"><img src=\"/user_uploads/4715/gDT7zk8ZapvvcMpFx-YNtoCK/screenshot-2021-08-26-145159.png\"></a></div><p>We seem to have lost IDE functionality in <code>#[test]</code> functions, does anyone know what happened there?</p>",
        "id": 250766582,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1629982478
    },
    {
        "content": "<p>We expand the test attribute now(to just the item itself again)</p>",
        "id": 250766729,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629982547
    },
    {
        "content": "<p>So completions don't work and inlay hints are lost</p>",
        "id": 250766879,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629982597
    },
    {
        "content": "<p>not sure why we lose more stuff like highlighting though</p>",
        "id": 250766894,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629982605
    },
    {
        "content": "<p>Is \"Expand Macro Recursively\" now mutually recursive with <code>!</code>-macros? Because the output still contains the <code>assert!</code>, so maybe we fail to expand that for some reason</p>",
        "id": 250767009,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1629982664
    },
    {
        "content": "<p>No expand macro recursively only expands one of the two recursively</p>",
        "id": 250767061,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629982682
    },
    {
        "content": "<p>ah</p>",
        "id": 250767107,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1629982687
    },
    {
        "content": "<p>so in this case it only expands the attributes</p>",
        "id": 250767109,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629982688
    },
    {
        "content": "<p>but ye this seems to be an issue with bang macros inside attributes?</p>",
        "id": 250767152,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629982702
    },
    {
        "content": "<p>highlighting works fine for anything other than bang macro input</p>",
        "id": 250767180,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629982712
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 250767187,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629982713
    },
    {
        "content": "<p>I guess token descending is only working on attributes when both are used</p>",
        "id": 250767440,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629982813
    },
    {
        "content": "<p>Is <code>#[test]</code> a macro though?</p>",
        "id": 250767562,
        "sender_full_name": "matklad",
        "timestamp": 1629982856
    },
    {
        "content": "<p>I thought it was just an attr?</p>",
        "id": 250767593,
        "sender_full_name": "matklad",
        "timestamp": 1629982870
    },
    {
        "content": "<p>It is an attr living in <code>crate::macros::builtin::test</code> re-exported in the prelude</p>",
        "id": 250767752,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629982926
    },
    {
        "content": "<p>Huh.... Yeah, not sure what's the best solution here is then</p>",
        "id": 250767894,
        "sender_full_name": "matklad",
        "timestamp": 1629982985
    },
    {
        "content": "<p>But we might want to keep it special cased after all as we don't gain anything from handling it as an identity expansion, we get some downsides from it only honestly, like duplicating all test functions which eats a bunch of memory</p>",
        "id": 250767921,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629982995
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/IDE.20broken.20in.20.60.23.5Btest.5D.60.20functions/near/250767562\">said</a>:</p>\n<blockquote>\n<p>Is <code>#[test]</code> a macro though?</p>\n</blockquote>\n<p><code>#[test] fn foo() {}</code> expands to the following in rust:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[cfg(test)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[rustc_test_marker]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">foo</span>: <span class=\"nc\">test</span>::<span class=\"n\">TestDescAndFn</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">test</span>::<span class=\"n\">TestDescAndFn</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">desc</span>: <span class=\"nc\">test</span>::<span class=\"n\">TestDesc</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">name</span>: <span class=\"nc\">test</span>::<span class=\"n\">StaticTestName</span><span class=\"p\">(</span><span class=\"s\">\"foo\"</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ignore</span>: <span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">allow_fail</span>: <span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">compile_fail</span>: <span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">no_run</span>: <span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">should_panic</span>: <span class=\"nc\">test</span>::<span class=\"n\">ShouldPanic</span>::<span class=\"n\">No</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">test_type</span>: <span class=\"nc\">test</span>::<span class=\"n\">TestType</span>::<span class=\"n\">Unknown</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">testfn</span>: <span class=\"nc\">test</span>::<span class=\"n\">StaticTestFn</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">test</span>::<span class=\"n\">assert_test_result</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">())),</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 250768440,
        "sender_full_name": "bjorn3",
        "timestamp": 1629983206
    },
    {
        "content": "<p>Yeah, this change might not be worth it currently, losing most IDE functionality is a bit jarring</p>",
        "id": 250768469,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1629983219
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> </p>\n<p>I wonder if we should have an \"derive-like attr macro\" feature?</p>",
        "id": 250768846,
        "sender_full_name": "matklad",
        "timestamp": 1629983387
    },
    {
        "content": "<p>That is, an attr macro that only adds items -- those are much easier to support in an IDE.</p>",
        "id": 250768948,
        "sender_full_name": "matklad",
        "timestamp": 1629983414
    },
    {
        "content": "<p>Well, probably not -- I was thinking about things like <code>tokio_main</code>, but they <em>need</em> to change the item, because they want to re-use the name. The <code>test</code> is special</p>",
        "id": 250769044,
        "sender_full_name": "matklad",
        "timestamp": 1629983458
    },
    {
        "content": "<p>wait, <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> are you sure that it expands to both const and the original fn? How does it work, they both are in the value namespace?</p>",
        "id": 250769127,
        "sender_full_name": "matklad",
        "timestamp": 1629983495
    },
    {
        "content": "<p>Yes, I used <code>--test -Zunpretty=expanded</code></p>",
        "id": 250770287,
        "sender_full_name": "bjorn3",
        "timestamp": 1629983983
    },
    {
        "content": "<p>Probably works due to hygiene right? The const name is def site, function name is call site I imagine?</p>",
        "id": 250770619,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629984127
    },
    {
        "content": "<p>I think this works as <code>const foo</code> has a different hygiene context making it opaque to the rest of the code. <code>-Zunpretty=expanded,hygiene</code> gives:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[cfg /* 324#3 */(test)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[rustc_test_marker /* 1070#3 */]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"cm\">/* 1382#3 */</span>: <span class=\"nc\">test</span><span class=\"w\"> </span><span class=\"cm\">/* 1231#3 */</span>::<span class=\"n\">TestDescAndFn</span><span class=\"w\"> </span><span class=\"cm\">/* 1548#3 */</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"cm\">/* 1231#3 */</span>::<span class=\"n\">TestDescAndFn</span><span class=\"w\"> </span><span class=\"cm\">/* 1548#3</span>\n<span class=\"cm\">        */</span><span class=\"p\">{</span><span class=\"n\">desc</span><span class=\"w\"> </span><span class=\"cm\">/* 1557#3 */</span>:\n               <span class=\"nc\">test</span><span class=\"w\"> </span><span class=\"cm\">/* 1231#3 */</span>::<span class=\"n\">TestDesc</span><span class=\"w\"> </span><span class=\"cm\">/* 1549#3</span>\n<span class=\"cm\">                   */</span><span class=\"p\">{</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"cm\">/* 779#3 */</span>:\n                          <span class=\"nc\">test</span><span class=\"w\"> </span><span class=\"cm\">/* 1231#3 */</span>::<span class=\"n\">StaticTestName</span><span class=\"w\"> </span><span class=\"cm\">/* 1550#3</span>\n<span class=\"cm\">                              */</span><span class=\"p\">(</span><span class=\"s\">\"foo\"</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                      </span><span class=\"n\">ignore</span><span class=\"w\"> </span><span class=\"cm\">/* 634#3 */</span>: <span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                      </span><span class=\"n\">allow_fail</span><span class=\"w\"> </span><span class=\"cm\">/* 240#3 */</span>: <span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                      </span><span class=\"n\">compile_fail</span><span class=\"w\"> </span><span class=\"cm\">/* 1551#3 */</span>: <span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                      </span><span class=\"n\">no_run</span><span class=\"w\"> </span><span class=\"cm\">/* 1552#3 */</span>: <span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                      </span><span class=\"n\">should_panic</span><span class=\"w\"> </span><span class=\"cm\">/* 1088#3 */</span>:\n                          <span class=\"nc\">test</span><span class=\"w\"> </span><span class=\"cm\">/* 1231#3 */</span>::<span class=\"n\">ShouldPanic</span><span class=\"w\"> </span><span class=\"cm\">/* 1553#3 */</span>::<span class=\"n\">No</span><span class=\"w\"> </span><span class=\"cm\">/*</span>\n<span class=\"cm\">                              1554#3 */</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                      </span><span class=\"n\">test_type</span><span class=\"w\"> </span><span class=\"cm\">/* 1556#3 */</span>:\n                          <span class=\"nc\">test</span><span class=\"w\"> </span><span class=\"cm\">/* 1231#3 */</span>::<span class=\"n\">TestType</span><span class=\"w\"> </span><span class=\"cm\">/* 1555#3 */</span>::<span class=\"n\">Unknown</span><span class=\"w\"> </span><span class=\"cm\">/*</span>\n<span class=\"cm\">                              193#3 */</span><span class=\"p\">,},</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"n\">testfn</span><span class=\"w\"> </span><span class=\"cm\">/* 1558#3 */</span>:\n               <span class=\"nc\">test</span><span class=\"w\"> </span><span class=\"cm\">/* 1231#3 */</span>::<span class=\"n\">StaticTestFn</span><span class=\"w\"> </span><span class=\"cm\">/* 1546#3</span>\n<span class=\"cm\">                   */</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"></span>\n<span class=\"w\">                          </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"cm\">/* 1231#3 */</span>::<span class=\"n\">assert_test_result</span><span class=\"w\"> </span><span class=\"cm\">/* 1547#3</span>\n<span class=\"cm\">                              */</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"cm\">/* 1382#0 */</span><span class=\"p\">())),};</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"w\"> </span><span class=\"cm\">/* 1382#0 */</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"cp\">#[rustc_main /* 1042#4 */]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"cm\">/* 723#4 */</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"cm\">/* 1231#4 */</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"cm\">/* 1231#4 */</span>::<span class=\"n\">test_main_static</span><span class=\"w\"> </span><span class=\"cm\">/* 1562#4 */</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"cm\">/* 1382#5 */</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cm\">/*</span>\n<span class=\"cm\">Expansions:</span>\n<span class=\"cm\">crate0::{{expn0}}: parent: crate0::{{expn0}}, call_site_ctxt: #0, def_site_ctxt: #0, kind: Root</span>\n<span class=\"cm\">crate0::{{expn1}}: parent: crate0::{{expn0}}, call_site_ctxt: #0, def_site_ctxt: #0, kind: AstPass(StdImports)</span>\n<span class=\"cm\">crate0::{{expn2}}: parent: crate0::{{expn0}}, call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro(Attr, \"test\")</span>\n<span class=\"cm\">crate0::{{expn3}}: parent: crate0::{{expn0}}, call_site_ctxt: #0, def_site_ctxt: #0, kind: AstPass(TestHarness)</span>\n<span class=\"cm\">crate0::{{expn4}}: parent: crate0::{{expn0}}, call_site_ctxt: #0, def_site_ctxt: #0, kind: AstPass(TestHarness)</span>\n\n<span class=\"cm\">SyntaxContexts:</span>\n<span class=\"cm\">#0: parent: #0, outer_mark: (crate0::{{expn0}}, Opaque)</span>\n<span class=\"cm\">#1: parent: #0, outer_mark: (crate0::{{expn1}}, Opaque)</span>\n<span class=\"cm\">#2: parent: #0, outer_mark: (crate0::{{expn1}}, Transparent)</span>\n<span class=\"cm\">#3: parent: #0, outer_mark: (crate0::{{expn2}}, Opaque)</span>\n<span class=\"cm\">#4: parent: #0, outer_mark: (crate0::{{expn3}}, Opaque)</span>\n<span class=\"cm\">#5: parent: #3, outer_mark: (crate0::{{expn4}}, Opaque)</span>\n<span class=\"cm\">*/</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Syntax context <code>#3</code> is opaque.</p>",
        "id": 250770632,
        "sender_full_name": "bjorn3",
        "timestamp": 1629984134
    }
]