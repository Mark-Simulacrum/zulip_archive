[
    {
        "content": "<p>I'll report a bug if I can isolate it, but just in case, is anyone else seeing errors in proc-macros as of the latest release? I'm getting <code>proc-macro panicked: use-after-free in `proc_macro` handle</code> and <code>proc-macro panicked: internal error: entered unreachable code</code>, for my own proc macros (whose implementation has not changed in a while, although I suspect that on earlier versions of r-a they just weren't being run).</p>",
        "id": 241133999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622632020
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8929\">https://github.com/rust-analyzer/rust-analyzer/issues/8929</a></p>",
        "id": 241134046,
        "sender_full_name": "Laurențiu",
        "timestamp": 1622632061
    },
    {
        "content": "<p>It's an (or a series of) ABI changes in nightly</p>",
        "id": 241134066,
        "sender_full_name": "Laurențiu",
        "timestamp": 1622632080
    },
    {
        "content": "<p>thanks!</p>",
        "id": 241134128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622632108
    },
    {
        "content": "<p>You can try downgrading to a nightly from before May 10th or so, or use stable</p>",
        "id": 241134219,
        "sender_full_name": "Laurențiu",
        "timestamp": 1622632189
    },
    {
        "content": "<p>I see references to that on the issue, is this a bug in the nightly ABI or a change that requires recompiling everything to use the same updated ABI?</p>",
        "id": 241134383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622632306
    },
    {
        "content": "<p>We don't want to reuse the <code>rustc</code> implementation (even if it were possible, I don't know), so we ship a copy of the code that runs on the proc macro side with some appropriate shims on the RA</p>",
        "id": 241134598,
        "sender_full_name": "Laurențiu",
        "timestamp": 1622632459
    },
    {
        "content": "<p>If the ABI changes, we need to update our bundled code, and to update our shims in RA to support anything new that's in there</p>",
        "id": 241134617,
        "sender_full_name": "Laurențiu",
        "timestamp": 1622632481
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Proc.20macro.20unreachable.20code.20.2F.20use-after-free/near/241134598\">said</a>:</p>\n<blockquote>\n<p>We don't want to reuse the <code>rustc</code> implementation (even if it were possible, I don't know)</p>\n</blockquote>\n<p>The <code>rustc</code> implementation is only accessible behind a feature flag.</p>",
        "id": 241134620,
        "sender_full_name": "bjorn3",
        "timestamp": 1622632483
    },
    {
        "content": "<p>But we can't support both the stable and the nightly ABI at once, so we'll probably wait until it hits stable</p>",
        "id": 241134646,
        "sender_full_name": "Laurențiu",
        "timestamp": 1622632505
    },
    {
        "content": "<p>There's <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/9047\">https://github.com/rust-analyzer/rust-analyzer/pull/9047</a>, but it might need more changes</p>",
        "id": 241134769,
        "sender_full_name": "Laurențiu",
        "timestamp": 1622632586
    },
    {
        "content": "<p>oh wow, ABI changes sound really painful. I guess this happens on every change and persists for 12 weeks</p>",
        "id": 241135022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622632780
    },
    {
        "content": "<p>is it possible to detect that you are running on nightly?</p>",
        "id": 241135063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622632802
    },
    {
        "content": "<p>Yeah, but it's not implemented</p>",
        "id": 241135137,
        "sender_full_name": "Laurențiu",
        "timestamp": 1622632828
    },
    {
        "content": "<p>hmm don't we already read the proc macro ABI version or something like that?</p>",
        "id": 241135201,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622632870
    },
    {
        "content": "<p>Yeah, but only to check the <code>rustc</code> version against our <code>rustc</code> IIRC</p>",
        "id": 241135394,
        "sender_full_name": "Laurențiu",
        "timestamp": 1622632987
    },
    {
        "content": "<p>We don't figure \"oh, it's a nightly and we know these to be broken, so let's disable proc macros for now\"</p>",
        "id": 241135440,
        "sender_full_name": "Laurențiu",
        "timestamp": 1622633019
    },
    {
        "content": "<p>wait. the proc macro abi is “versionised”? or are we talking about comparing rustc versions?</p>",
        "id": 241139225,
        "sender_full_name": "cynecx",
        "timestamp": 1622635771
    },
    {
        "content": "<p>having some kind of proc macro abi versioning would be nice</p>",
        "id": 241139380,
        "sender_full_name": "cynecx",
        "timestamp": 1622635872
    },
    {
        "content": "<p>we look at the rustc version stored in the proc macro's dylib</p>",
        "id": 241139381,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622635874
    },
    {
        "content": "<p>The ABI itself is not versioned</p>",
        "id": 241139860,
        "sender_full_name": "Laurențiu",
        "timestamp": 1622636181
    },
    {
        "content": "<p>And we don't support multiple versions of it, though that would be nice</p>",
        "id": 241139873,
        "sender_full_name": "Laurențiu",
        "timestamp": 1622636192
    },
    {
        "content": "<p>I think the ideal solution would be to ship the required code as part of the rustup toolchain, that way it auto-updates and is always compatible with the compiler in use</p>",
        "id": 241140240,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622636404
    },
    {
        "content": "<p>The problem with that is that every time the proc macro abi changes, the api that needs to be implemented by rust-analyzer changes too.</p>",
        "id": 241140478,
        "sender_full_name": "bjorn3",
        "timestamp": 1622636562
    },
    {
        "content": "<p>Yeah, like in <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/9049\">https://github.com/rust-analyzer/rust-analyzer/issues/9049</a> and <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/9047/files#diff-33c902ac596e0d7ed8a6c15d046920d3cdb70bcabab1461c8bb46a294a97cf3cR524-R526\">https://github.com/rust-analyzer/rust-analyzer/pull/9047/files#diff-33c902ac596e0d7ed8a6c15d046920d3cdb70bcabab1461c8bb46a294a97cf3cR524-R526</a></p>",
        "id": 241140543,
        "sender_full_name": "Laurențiu",
        "timestamp": 1622636609
    },
    {
        "content": "<p>If we compile that code ourselves, that means we'll get notified when ABI breakage happens, so that seems strictly better than the current state</p>",
        "id": 241140766,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622636756
    },
    {
        "content": "<p>Maybe I should finally look into WASM and whether it can make this easy, then rustup could just include a WASM blob we could use without compiling anything</p>",
        "id": 241140889,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622636810
    },
    {
        "content": "<p>would it even be possible for us to support different versions of the ABI in the same binary (since the proc-macro bridge is the same rust-analyzer binary as everything else)?</p>",
        "id": 241141469,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622637119
    },
    {
        "content": "<p>I think the bridge doesn't export any <code>#[no_mangle]</code> functions directly to the proc macro, but instead passes a function pointer to the proc macro.</p>",
        "id": 241141727,
        "sender_full_name": "bjorn3",
        "timestamp": 1622637252
    },
    {
        "content": "<p>This means that it should be possible to support different proc macro bridge versions in the same executable I think.</p>",
        "id": 241141771,
        "sender_full_name": "bjorn3",
        "timestamp": 1622637282
    }
]