[
    {
        "content": "<p>This is related to the completion function <code>add_function_with_name</code> at <code>crates/ra_ide/src/completion/presentation.rs</code>.</p>\n<p>What exactly is the difference between <code>name</code> and <code>func_name</code>?<code>func_name</code> is always present and retrieved from the db, but name is expected to be potentially absent and will use <code>func_name</code> in such case.</p>\n<p>Currently there is only flow that passes <code>name</code> as <code>Some</code> - <code>add_resolution</code> but I don't really understand what exactly resolutions are in this context. Is this to support the <code>use X as Y;</code> syntax? ( <code>X</code> is <code>func_name</code> and <code>Y</code> is <code>name</code>?)</p>",
        "id": 189625140,
        "sender_full_name": "Avishay Matayev",
        "timestamp": 1583263449
    },
    {
        "content": "<p>it looks like it, though it doesn't seem like it's working fully (<a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/3356\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/3356\">rust-analyzer#3356</a>) <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 189625501,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1583263726
    },
    {
        "content": "<p>changing the code to always use <code>func_name</code> makes no tests fail <span aria-label=\"disappointed\" class=\"emoji emoji-1f61e\" role=\"img\" title=\"disappointed\">:disappointed:</span></p>",
        "id": 189625742,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1583263872
    },
    {
        "content": "<p>so I guess it was supposed to handle that, but is probably broken</p>",
        "id": 189625767,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1583263896
    },
    {
        "content": "<p><code>name</code> is whatever the name that resolved to the function was, which becomes mostly relevant in the case of <code>use X as Y</code>, yeah</p>",
        "id": 189625954,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1583264014
    },
    {
        "content": "<p>I see. Perhaps the name of the variables can be changed to be more clear about their purpose whenever this feature is fixed ;d</p>",
        "id": 189625958,
        "sender_full_name": "Avishay Matayev",
        "timestamp": 1583264015
    },
    {
        "content": "<p>and there is no <code>name</code> in the case of method calls, like <code>something.foo()</code> or <code>SomeType::foo()</code> (<code>name</code> will be <code>None</code> and <code>func_name</code> will be <code>\"foo\"</code>)</p>",
        "id": 189626129,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1583264132
    },
    {
        "content": "<p>yeah but notice that name is re-evaluated if it is <code>None</code>;  <code>let name = name.unwrap_or_else(|| func_name.to_string());</code></p>",
        "id": 189626277,
        "sender_full_name": "Avishay Matayev",
        "timestamp": 1583264247
    },
    {
        "content": "<p>yeah, that's why</p>",
        "id": 189626292,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1583264267
    },
    {
        "content": "<p>for method calls, we need the actual declared name, for other calls, we need the name under which the function was actually imported</p>",
        "id": 189626382,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1583264302
    },
    {
        "content": "<p>I think the use of <code>func_name</code> later in the function is wrong and should be <code>name</code> as well</p>",
        "id": 189626402,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1583264314
    },
    {
        "content": "<p>Thanks, I understand.</p>",
        "id": 189626476,
        "sender_full_name": "Avishay Matayev",
        "timestamp": 1583264363
    },
    {
        "content": "<p>I think you are right as well</p>",
        "id": 189626482,
        "sender_full_name": "Avishay Matayev",
        "timestamp": 1583264366
    },
    {
        "content": "<p>it makes no sense to use the original name when it was imported under a different name</p>",
        "id": 189626510,
        "sender_full_name": "Avishay Matayev",
        "timestamp": 1583264391
    },
    {
        "content": "<p>(at least for the snippet itself)</p>",
        "id": 189626576,
        "sender_full_name": "Avishay Matayev",
        "timestamp": 1583264413
    },
    {
        "content": "<p>yes. I think I'll just fix it... and I think it actually needs more fixing for other item types</p>",
        "id": 189626768,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1583264561
    },
    {
        "content": "<p>ah no, for other items it works</p>",
        "id": 189626836,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1583264622
    },
    {
        "content": "<p>Cool, can you ping me whenever you are done? I am working on <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/1705\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/1705\">https://github.com/rust-analyzer/rust-analyzer/issues/1705</a> now and I'm sure we'll conflict</p>",
        "id": 189626916,
        "sender_full_name": "Avishay Matayev",
        "timestamp": 1583264667
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/3430\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/3430\">https://github.com/rust-analyzer/rust-analyzer/pull/3430</a></p>",
        "id": 189627189,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1583264881
    },
    {
        "content": "<p>That was quick!</p>",
        "id": 189627419,
        "sender_full_name": "Avishay Matayev",
        "timestamp": 1583265003
    },
    {
        "content": "<p>a bit too quick, I forgot to update the snapshot at first ;)</p>",
        "id": 189627548,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1583265084
    }
]