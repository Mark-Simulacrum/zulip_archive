[
    {
        "content": "<p>Iâ€™d like an API like <code>Semantics::resolve_path</code>, but which would accept a path not obtained from <code>Semantics</code>. Supplied paths would all be absolute. Any thoughts on how such an API should look? I just prototyped with a variant <code>fn resolve_path_at(&amp;self, path: &amp;ast::Path, context: &amp;SyntaxNode) -&gt; Option&lt;PathResolution&gt;</code>. My use-case is for adding type constraints on SSR placeholders.</p>",
        "id": 202425732,
        "sender_full_name": "David Lattimore",
        "timestamp": 1593518764
    },
    {
        "content": "<p>something like that should probably take a HIR path, not an AST path. If the path is always absolute it might be enough to also pass a <code>Crate</code> as context, or maybe it could be a method on <code>Crate</code></p>",
        "id": 202425899,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1593518886
    },
    {
        "content": "<p>although there's also already <code>resolve_hir_path</code> in <code>SemanticsScope</code></p>",
        "id": 202425974,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1593518948
    },
    {
        "content": "<p>so... actually I think that should be what you're looking for?</p>",
        "id": 202426281,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1593519155
    },
    {
        "content": "<p>Ah, you're right. That does do what I was after. Thanks!</p>",
        "id": 202427003,
        "sender_full_name": "David Lattimore",
        "timestamp": 1593519667
    }
]