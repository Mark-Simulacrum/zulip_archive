[
    {
        "content": "<p>I've spent some time investigating the pretty big memory usage of <code>ItemTree</code>s today, and tried to optimize the <code>ItemTree</code> representation, but without much success. I collected some data via <code>analysis-bench --memory-usage --highlight src/lib.rs</code> in the rust-analyzer crate:</p>\n<ul>\n<li>We create 2046 <code>ItemTree</code>s from real source files, totaling in at 77mb</li>\n<li>We create 38144 trees from macro expansions, totaling in at 62mb</li>\n<li>This is a total of 40190 <code>ItemTree</code>s</li>\n<li>Most trees (37539 of them) don't contain any inner items, but turning the inner item map into an <code>Option&lt;Box&lt;Map&gt;&gt;</code> only saves 2mb of memory</li>\n<li>Many trees (25815 of them) don't contain any items with attributes, but turning the attribute map into an <code>Option&lt;Box&lt;Map&gt;&gt;</code> has no visible impact on memory usage</li>\n<li>The \"empty item tree\" optimization that doesn't allocate memory when the tree contains 0 items only kicks in 757 times, but most item trees <em>are</em> very small (usually containing 1-2 items).</li>\n</ul>\n<p>To help with the latter point, I tried storing all items in a shared arena by converting everything that's stored in the tree to an enum, but this initially just used even more memory due to the enum being as large as the largest contained type. I then used <code>Box</code>es inside the enum, which helped a bit, but still saved almost nothing.</p>\n<p>I think to improve the memory efficiency here we need to do some larger-scale changes. Maybe we need to avoid creating so many small macro-derived item trees in the first place, by side-stepping the item tree in the right places â€“ I briefly chatted with <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> about this. I'm not sure where these \"right places\" are though, is the def collector alone enough? And how do we reduce the memory used by non-macro trees? Rely on periodic GC to clean them up? Open for ideas here :)</p>",
        "id": 203995698,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594838477
    },
    {
        "content": "<p>One idea I had is to have a <em>global</em> arena for items</p>",
        "id": 203996353,
        "sender_full_name": "matklad",
        "timestamp": 1594838803
    },
    {
        "content": "<p>I don't think we can implement it without salsa, but it might be a good idea to prototype, to get a rough memory usage</p>",
        "id": 203996416,
        "sender_full_name": "matklad",
        "timestamp": 1594838842
    },
    {
        "content": "<p>Like, literarrly just sticking an <code>Arc&lt;Mutext(Arena&lt;Struct&gt;, Arena&lt;Enum&gt;, ...)&gt;</code> into a DB, and store only <code>id</code>s in <code>ItemTree</code></p>",
        "id": 203996524,
        "sender_full_name": "matklad",
        "timestamp": 1594838882
    },
    {
        "content": "<p>That should be horribly slow, but should give us a fair assesment of overhead of many arenas</p>",
        "id": 203996586,
        "sender_full_name": "matklad",
        "timestamp": 1594838910
    },
    {
        "content": "<p>It also seems that ItemTrees, while being the heaviset thing, are still just 15% of overall memory usage...</p>",
        "id": 203996707,
        "sender_full_name": "matklad",
        "timestamp": 1594838972
    },
    {
        "content": "<p>I wonder if that means that some wide-reaching optimizations are more important, like interning of names</p>",
        "id": 203996739,
        "sender_full_name": "matklad",
        "timestamp": 1594838996
    },
    {
        "content": "<p>Quite possible, yeah</p>",
        "id": 203996836,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594839036
    },
    {
        "content": "<p>Maybe that is a good next thing to look into - how much memory is actually occupied by names?</p>",
        "id": 203996903,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594839070
    },
    {
        "content": "<p>Just did a quick check, making <code>Name</code> twice as <strong>bit</strong> leads to +120mb of memory</p>",
        "id": 203997928,
        "sender_full_name": "matklad",
        "timestamp": 1594839560
    },
    {
        "content": "<p><a href=\"https://github.com/matklad/rust-analyzer/commit/4df3407d253e606e580ac8fbf1d748a6f44f9cba\">https://github.com/matklad/rust-analyzer/commit/4df3407d253e606e580ac8fbf1d748a6f44f9cba</a></p>",
        "id": 203998061,
        "sender_full_name": "matklad",
        "timestamp": 1594839613
    },
    {
        "content": "<p>Okay, that seems promising!</p>",
        "id": 203998300,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594839727
    }
]