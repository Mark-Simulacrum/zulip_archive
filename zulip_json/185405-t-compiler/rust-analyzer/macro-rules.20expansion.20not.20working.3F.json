[
    {
        "content": "<p>see <a href=\"https://github.com/NicolasLagaillardie/mpst_rust_github/blob/e557ea3c2b1ccbf98d76b9aa2e2320468ac00da2/examples/rk.rs#L89-L115\">this macro</a> for an example: While for <code>println!</code> I get <code>()</code> as return type, the example macro yields <code>{unknown}</code> in rust-analyzer (in that repository there are tons of macros, and I couldn’t find one that was successfully expanded to yield type hints). Perhaps noteworthy is that the recursive expansion preview in VS Code shows only one level of expansion. It would be so super-nice if this would work because session types (what I’m working on) have some corner cases that just require some boilerplate, and I’d love to get rid of it.</p>",
        "id": 227665949,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1614198353
    },
    {
        "content": "<p>We don't support macros in type position at the moment</p>",
        "id": 227667234,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1614198799
    },
    {
        "content": "<p>Hmm, but the expansion also stops for the value part:</p>\n<div class=\"codehilite\"><pre><span></span><code>{\n  struct Rec {\n    pub rec:rec!(@@1 Tx[RoleA,Rx[RoleB,rec]]),\n  }fn new() -&gt; Rec {\n    Rec {\n      rec:rec!(@@2 Tx[RoleA,Rx[RoleB,rec]]),\n    }\n  }new().rec\n}\n</code></pre></div>",
        "id": 227669808,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1614199717
    },
    {
        "content": "<p>In any case: how much is missing regarding macros in type position? Anything I could help with?</p>",
        "id": 227670332,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1614199917
    },
    {
        "content": "<p>I'm not totally sure, but I think the first step is to duplicate <code>TypeRef</code> into the <code>item_tree</code> module and add a <code>Macro</code> variant to it. These then need to be lowered to the HIR-view <code>TypeRef</code>, at which point the macro needs to be expanded.</p>",
        "id": 227673280,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1614201019
    },
    {
        "content": "<p>I managed to simplify it even more, not using macros in type position, and I still get <code>{unknown}</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">RoleA</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">RoleB</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Tx</span><span class=\"o\">&lt;</span><span class=\"n\">Role</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Cont</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">cont</span>: <span class=\"nc\">Cont</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_ph</span>: <span class=\"nc\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"n\">Role</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">Role</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Cont</span>: <span class=\"nb\">Default</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Default</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Tx</span><span class=\"o\">&lt;</span><span class=\"n\">Role</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Cont</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">default</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">cont</span>: <span class=\"nc\">Cont</span>::<span class=\"n\">default</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">_ph</span>: <span class=\"nc\">PhantomData</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Rx</span><span class=\"o\">&lt;</span><span class=\"n\">Role</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Cont</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">cont</span>: <span class=\"nc\">Cont</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_ph</span>: <span class=\"nc\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"n\">Role</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">Role</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Cont</span>: <span class=\"nb\">Default</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Default</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Rx</span><span class=\"o\">&lt;</span><span class=\"n\">Role</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Cont</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">default</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">cont</span>: <span class=\"nc\">Cont</span>::<span class=\"n\">default</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">_ph</span>: <span class=\"nc\">PhantomData</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">rec</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$x</span>:<span class=\"nc\">ident</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$t</span>:<span class=\"nc\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">#[derive(Default)]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">struct</span> <span class=\"cp\">$x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"cp\">$x</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">rec</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"cp\">$t</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nb\">Default</span>::<span class=\"n\">default</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">$x</span>::<span class=\"n\">default</span><span class=\"p\">().</span><span class=\"n\">rec</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">rec_test</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rec</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Tx</span><span class=\"o\">&lt;</span><span class=\"n\">RoleA</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Rx</span><span class=\"o\">&lt;</span><span class=\"n\">RoleB</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 227678462,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1614203167
    },
    {
        "content": "<p>Your case above is not related to macro: </p>\n<p>Simplified case :</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">struct</span> <span class=\"nc\">X</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"p\">{}.</span><span class=\"n\">foo</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 227680244,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1614203971
    },
    {
        "content": "<p>Ah, yes, we don't support <code>impl</code>s inside blocks either</p>",
        "id": 227688789,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1614207137
    },
    {
        "content": "<p>This is <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/7633\">https://github.com/rust-analyzer/rust-analyzer/issues/7633</a></p>",
        "id": 227688818,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1614207154
    },
    {
        "content": "<p>Thanks, with this I was able to sidestep the issue by just putting the declaration on the module level!</p>",
        "id": 227731029,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1614240051
    }
]