[
    {
        "content": "<p>I'm trying to tackle the next issue of the add_function assist: properly qualifying the types of the generated arguments! (see currently ignored <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/cb0a24104cc5ad15d40e47d92fbdb63683adf8a0/crates/ra_assists/src/handlers/add_function.rs#L533\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/cb0a24104cc5ad15d40e47d92fbdb63683adf8a0/crates/ra_assists/src/handlers/add_function.rs#L533\">test case</a> for that)<br>\nI guess <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/cb0a24104cc5ad15d40e47d92fbdb63683adf8a0/crates/ra_hir/src/code_model.rs#L287\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/cb0a24104cc5ad15d40e47d92fbdb63683adf8a0/crates/ra_hir/src/code_model.rs#L287\"><code>code_model::Module::find_use_path</code></a> should be able to handle this, but I have no idea how to get the corresponding <code>ItemInNs</code> for a <code>Type</code> <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/cb0a24104cc5ad15d40e47d92fbdb63683adf8a0/crates/ra_assists/src/handlers/add_function.rs#L180\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/cb0a24104cc5ad15d40e47d92fbdb63683adf8a0/crates/ra_assists/src/handlers/add_function.rs#L180\">here</a> so I can call that method.<br>\nAny help?</p>",
        "id": 194930399,
        "sender_full_name": "Timo Freiberg",
        "timestamp": 1587562351
    },
    {
        "content": "<p>I probably want to use <code>QualifyPaths</code>... the API looks quite usable, I'm doing something wrong though. I'm gonna <code>dbg!</code>-explore it a bit and probably find my mistake soon :)</p>",
        "id": 194959526,
        "sender_full_name": "Timo Freiberg",
        "timestamp": 1587574293
    },
    {
        "content": "<p>Okay, I think I know what the problem is, unfortunately I'm stumped.<br>\n<a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/cb0a24104cc5ad15d40e47d92fbdb63683adf8a0/crates/ra_assists/src/ast_transform.rs#L132\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/cb0a24104cc5ad15d40e47d92fbdb63683adf8a0/crates/ra_assists/src/ast_transform.rs#L132\"><code>self.source_scope.resolve_hir_path(&amp;hir_path?)</code></a> returns <code>None</code>, so the <code>source_scope</code> I'm passing to <code>QualifyPaths</code> can't resolve the path.<br>\nI'm not really sure what <code>SemanticsScope</code> I need to pass.<br>\nRight now I'm creating it by calling <code>ctx.sema.scope()</code> with the <code>CallExpr</code> where the assist was triggered.<br>\nDo I need to find the scope where the argument type was defined instead?</p>",
        "id": 194962967,
        "sender_full_name": "Timo Freiberg",
        "timestamp": 1587575734
    },
    {
        "content": "<p>hmm ideally I think we'd want something that prints a type with qualified paths, but that doesn't exist yet</p>",
        "id": 194964963,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1587576594
    },
    {
        "content": "<p>but probably we can't get around that in this case</p>",
        "id": 194965064,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1587576627
    },
    {
        "content": "<p>i.e. it'd be somewhat like <code>HirDisplay</code>, but qualify paths, only produce things that are valid rust code (i.e. no <code>{unknown}</code> or closure types), and maybe return a syntax node instead of a string</p>",
        "id": 194965249,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1587576715
    },
    {
        "content": "<p>yeah i would like to have something like that :) i wasn't sure if the existing functionality covered that usecase already - it seems similar to generating qualified paths in the <code>add_missing_impl_members</code> assist <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/cb0a24104cc5ad15d40e47d92fbdb63683adf8a0/crates/ra_assists/src/handlers/add_missing_impl_members.rs#L345\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/cb0a24104cc5ad15d40e47d92fbdb63683adf8a0/crates/ra_assists/src/handlers/add_missing_impl_members.rs#L345\">(example)</a></p>",
        "id": 194966508,
        "sender_full_name": "Timo Freiberg",
        "timestamp": 1587577253
    },
    {
        "content": "<p>I'm currently trying to find out why the scope I'm passing to <code>resolve_hir_path</code> doesn't find the path to the type as it's not really obvious to me - I reached <code>path_resolution::resolve_path_fp_with_macro</code> and my brain is full...</p>",
        "id": 194966734,
        "sender_full_name": "Timo Freiberg",
        "timestamp": 1587577360
    },
    {
        "content": "<p>the difference is that <code>add_missing_impl_members</code> just copies the written types from the trait declaration and qualifies them, but your assist can't do that</p>",
        "id": 194967395,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1587577704
    },
    {
        "content": "<blockquote>\n<p>I'm currently trying to find out why the scope I'm passing to <code>resolve_hir_path</code> doesn't find the path to the type as it's not really obvious to me</p>\n</blockquote>\n<p>if you're trying to resolve something you got from <code>HirDisplay</code>ing a type, I think that's unlikely to work</p>",
        "id": 194967594,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1587577797
    },
    {
        "content": "<p>that's unfair <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 194967657,
        "sender_full_name": "Timo Freiberg",
        "timestamp": 1587577809
    },
    {
        "content": "<p>I mean, if it resolved then you wouldn't need to qualify it...</p>",
        "id": 194967706,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1587577836
    },
    {
        "content": "<p>but it even fails in my testcase where the displayed type matches the definition</p>",
        "id": 194967749,
        "sender_full_name": "Timo Freiberg",
        "timestamp": 1587577860
    },
    {
        "content": "<p>hmm that's a very good point</p>",
        "id": 194967814,
        "sender_full_name": "Timo Freiberg",
        "timestamp": 1587577887
    },
    {
        "content": "<p>also, the <code>Semantics</code> stuff doesn't really work with syntax nodes you built yourself</p>",
        "id": 194967841,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1587577902
    },
    {
        "content": "<p>ok the failures start to make sense</p>",
        "id": 194967874,
        "sender_full_name": "Timo Freiberg",
        "timestamp": 1587577914
    },
    {
        "content": "<p>so, there's definitely some missing functionality somewhere in <code>hir</code> for that, right?</p>",
        "id": 194968038,
        "sender_full_name": "Timo Freiberg",
        "timestamp": 1587577972
    },
    {
        "content": "<p>yes</p>",
        "id": 194968116,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1587578016
    },
    {
        "content": "<p>so I want to take a <code>Type</code>, find out where it's defined (does that already exist?) and compute a path from the module where the function will be generated to the type definition.<br>\nand display that</p>",
        "id": 194968212,
        "sender_full_name": "Timo Freiberg",
        "timestamp": 1587578049
    },
    {
        "content": "<p>i'm gonna try to get something working, any guidance is very welcome :)</p>",
        "id": 194968373,
        "sender_full_name": "Timo Freiberg",
        "timestamp": 1587578146
    },
    {
        "content": "<p>well, the idea would be to either build something similar to <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir_ty/src/display.rs\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir_ty/src/display.rs\">HirDisplay</a>, or add a parameter to it that makes it qualify paths</p>",
        "id": 194968564,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1587578229
    },
    {
        "content": "<p>it would need the <code>ModuleId</code> from where it's supposed to qualify the paths</p>",
        "id": 194968606,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1587578246
    },
    {
        "content": "<p>and then it could use <code>find_path</code> to find the proper path</p>",
        "id": 194968658,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1587578275
    },
    {
        "content": "<p>the relevant place for qualifying structs etc. would be <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/3f1f3a835a07983344f6f3becf7a0c32b96d68bc/crates/ra_hir_ty/src/display.rs#L194\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/3f1f3a835a07983344f6f3becf7a0c32b96d68bc/crates/ra_hir_ty/src/display.rs#L194\">here</a>, instead of just taking the name you'd use <code>find_path</code></p>",
        "id": 194968788,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1587578325
    },
    {
        "content": "<p>this is all behind the \"code model\" facade, so you're working with <code>Ty</code> and <code>ModuleId</code> and so on instead of <code>Type</code> and <code>Module</code>, and you need to expose it in <code>Type</code> in the end</p>",
        "id": 194969063,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1587578452
    },
    {
        "content": "<p>I think in the end we'll want a separate facility for this, since printing types 'properly' has various ways it can fail (the type isn't reachable from where we are, the type contains unnameable types...), so we'll want it to return <code>Option</code> or maybe a <code>Result</code> in the end (and while we're at it we could have it return a syntax node instead of a string), but as a first step it's probably easier to just hack it into the existing thing</p>",
        "id": 194969893,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1587578852
    },
    {
        "content": "<p>thanks a lot! i'm going to digest this now :)</p>",
        "id": 194972306,
        "sender_full_name": "Timo Freiberg",
        "timestamp": 1587580059
    },
    {
        "content": "<p>Holy crap it works :) thanks!</p>",
        "id": 194991390,
        "sender_full_name": "Timo Freiberg",
        "timestamp": 1587589567
    },
    {
        "content": "<p>I see what you meant now, returning <code>Option</code> or <code>Result</code> is really hard with the way <code>ToString</code> uses <code>fmt::Display</code>, you can't even go super hacky and abuse <code>fmt::Result</code> :(<br>\nHow about maybe parametrizing the new fallible parts with a trait where the old implementation has <code>type Error = Infallible</code> and the new implementation (used for rendering code into source files) gets an actual error type? then only <code>HirDisplayWrapper&lt;Old&gt;</code> would implement <code>fmt::Display</code>, and <code>HirDisplayWrapper&lt;New&gt;</code> would get it's own <code>fn render(&amp;self) -&gt; Option&lt;String&gt;</code> (or other return type)<br>\nThe existing implementations of <code>hir_fmt</code> would still need to be changed of course, but maybe that way most of the printing logic could be defined only once</p>",
        "id": 195215615,
        "sender_full_name": "Timo Freiberg",
        "timestamp": 1587747224
    },
    {
        "content": "<p>I went ahead and tried that approach: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/4175\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/4175\">https://github.com/rust-analyzer/rust-analyzer/pull/4175</a></p>",
        "id": 195473102,
        "sender_full_name": "Timo Freiberg",
        "timestamp": 1588020488
    },
    {
        "content": "<p>Hey Florian,<br>\nI'm not sure about your <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/4175#discussion_r416809207\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/4175#discussion_r416809207\">comment</a> about using an enum instead of a trait to customize the <code>HirDisplay</code> behaviour.<br>\nWould you recommend to make <code>hir_fmt</code> always return the sum error type that's currently called <code>FormatSourceCodeError</code> and assert that the call to <code>hir_fmt</code> in the <code>Display</code> implementation didn't return any error other than <code>fmt::Error</code>?<br>\nThat's the only way to use an enum instead of a trait I could think of, did I miss something?</p>",
        "id": 196049977,
        "sender_full_name": "Timo Freiberg",
        "timestamp": 1588423258
    },
    {
        "content": "<p>yeah, that's what I was thinking</p>",
        "id": 196051017,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1588425168
    },
    {
        "content": "<p>Alright that makes sense, thanks for the quick reply. I'm gonna change that then :)</p>",
        "id": 196051310,
        "sender_full_name": "Timo Freiberg",
        "timestamp": 1588425653
    }
]