[
    {
        "content": "<p>hey, i wanted to look into semantic highlighting a bit (just because i was curious). i assume i'll need to get some kind of resolved identifiers map? building on the code from <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/1305\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/1305\">https://github.com/rust-analyzer/rust-analyzer/pull/1305</a> all i can get for bindings is that their kind is <code>MACRO_CALL</code>. what am I missing? :)</p>",
        "id": 166353819,
        "sender_full_name": "Pascal",
        "timestamp": 1558612935
    },
    {
        "content": "<p>See <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/1305/files#diff-7bd880cade5b808a957f2da2c32f6ecdR52\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/1305/files#diff-7bd880cade5b808a957f2da2c32f6ecdR52\">https://github.com/rust-analyzer/rust-analyzer/pull/1305/files#diff-7bd880cade5b808a957f2da2c32f6ecdR52</a></p>",
        "id": 166353926,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558613060
    },
    {
        "content": "<p>You should get a reference to the macro definition</p>",
        "id": 166353931,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558613069
    },
    {
        "content": "<p>Hm, why macro calls?</p>",
        "id": 166353948,
        "sender_full_name": "matklad",
        "timestamp": 1558613094
    },
    {
        "content": "<p>I think you should check this variant: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/1311/files#diff-6a30d8b895db7e4b6fba39666fe0aaabR13\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/1311/files#diff-6a30d8b895db7e4b6fba39666fe0aaabR13\">https://github.com/rust-analyzer/rust-analyzer/pull/1311/files#diff-6a30d8b895db7e4b6fba39666fe0aaabR13</a></p>",
        "id": 166353959,
        "sender_full_name": "matklad",
        "timestamp": 1558613103
    },
    {
        "content": "<p>Basically, if two <code>AstPtr&lt;ast::Pat&gt;</code> are the same, that's the same binding, and you can color it in the same color</p>",
        "id": 166353995,
        "sender_full_name": "matklad",
        "timestamp": 1558613138
    },
    {
        "content": "<p>does this make sense?</p>",
        "id": 166354010,
        "sender_full_name": "matklad",
        "timestamp": 1558613158
    },
    {
        "content": "<p>re macros: I have no clue, I just wanted to know what node kind to match on so i added <code>format!(\"{:?}\", node.kind())</code> and got <code>MACRO_CALL</code> <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 166354083,
        "sender_full_name": "Pascal",
        "timestamp": 1558613188
    },
    {
        "content": "<p>Don't look at <code>node.kind()</code>, look at the result of <code>classify_name_ref</code></p>",
        "id": 166354141,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558613236
    },
    {
        "content": "<p>ah, so you're saying it should be in the NAME_REF case as well?</p>",
        "id": 166354152,
        "sender_full_name": "Pascal",
        "timestamp": 1558613252
    },
    {
        "content": "<p><code>NAME_REF</code> is a reference to a ..symbol, including macros, but <code>node</code> doesn't contain that information</p>",
        "id": 166354230,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558613320
    },
    {
        "content": "<p><code>NAME</code> is a symbol declaration (or definition)</p>",
        "id": 166354235,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558613329
    },
    {
        "content": "<p>What <code>classify_name_ref</code> does is it takes a <code>NAME_REF</code> and gives you back the definition of that name, like a <code>MacroByExampleDef</code> for macros. That ends up wrapping an <code>AstId</code>, which could presumably be hashed or used otherwise to assign a color</p>",
        "id": 166354510,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558613529
    },
    {
        "content": "<p>i think i'm a bit confused how that <code>match node.kind()</code> works :D i'll play around with it a bit</p>",
        "id": 166354512,
        "sender_full_name": "Pascal",
        "timestamp": 1558613532
    },
    {
        "content": "<p>thanks</p>",
        "id": 166354525,
        "sender_full_name": "Pascal",
        "timestamp": 1558613550
    },
    {
        "content": "<p>If you're using RA in VS Code, try the \"Show Syntax Tree\" command</p>",
        "id": 166354530,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558613557
    },
    {
        "content": "<p><code>node</code> is just an AST node, without any semantic information</p>",
        "id": 166354548,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558613573
    },
    {
        "content": "<p>super trivial first version just to see if it's doable: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/1319\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/1319\">https://github.com/rust-analyzer/rust-analyzer/pull/1319</a></p>",
        "id": 166395197,
        "sender_full_name": "Pascal",
        "timestamp": 1558642132
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> hm, testing highlighting via html output will mean that for the rainbow stuff i'll need to figure out how best to get the color calc code in there. it depends on a seedable rng which is an external dependency but i might just inline it</p>",
        "id": 166523518,
        "sender_full_name": "Pascal",
        "timestamp": 1558784085
    },
    {
        "content": "<p>For testing, you can only set the css class to hash, without adding any JS magic</p>",
        "id": 166523532,
        "sender_full_name": "matklad",
        "timestamp": 1558784126
    },
    {
        "content": "<p>nah, that's too boring</p>",
        "id": 166523533,
        "sender_full_name": "Pascal",
        "timestamp": 1558784147
    },
    {
        "content": "<p>Hm, you can also generate <em>css</em> itself on the server-side <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 166523647,
        "sender_full_name": "matklad",
        "timestamp": 1558784345
    },
    {
        "content": "<p>good idea! that also makes implementing a <code>--rainbow</code> flag easier</p>",
        "id": 166523775,
        "sender_full_name": "Pascal",
        "timestamp": 1558784540
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> , <span class=\"user-mention\" data-user-id=\"203366\">@Jeremy Kolb</span> IIRC semantic highlighting landed to stable vscode 1.43 (at least Typescript langua server now has this enabled by default). Should we <strong>REMOVE CODE</strong> that implements old highlighting?</p>",
        "id": 190193980,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1583857824
    },
    {
        "content": "<p>Yup!</p>",
        "id": 190194128,
        "sender_full_name": "matklad",
        "timestamp": 1583857922
    },
    {
        "content": "<p>Though we need to verify that they actually stabilized the prposed API...</p>",
        "id": 190194182,
        "sender_full_name": "matklad",
        "timestamp": 1583857946
    },
    {
        "content": "<p>Triggered</p>",
        "id": 190194199,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1583857953
    },
    {
        "content": "<p>Can't typescript plugin use more API than other plugins?</p>",
        "id": 190194229,
        "sender_full_name": "matklad",
        "timestamp": 1583857971
    },
    {
        "content": "<p>I don't think so even Though typescript extension is bundled with vscode</p>",
        "id": 190195141,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1583858475
    },
    {
        "content": "<p>I tried this yesterday after bumping the engine version and it still failed. I believe semantic tokens is still proposed in vscode</p>",
        "id": 190196808,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1583859311
    },
    {
        "content": "<p>I believe that this iteration will see range support added so hopefully the feature will be stabilized</p>",
        "id": 190197348,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1583859598
    },
    {
        "content": "<p>Hmm, so TypeScript does have a Carte Blanche for using proposed APIs?</p>",
        "id": 190197792,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1583859799
    },
    {
        "content": "<p>I believe so because it's distributed as part of vscode</p>",
        "id": 190198757,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1583860238
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"258149\">@std::Veetaha</span>  <a href=\"https://github.com/microsoft/vscode/tree/master/extensions/typescript-language-features\" target=\"_blank\" title=\"https://github.com/microsoft/vscode/tree/master/extensions/typescript-language-features\">https://github.com/microsoft/vscode/tree/master/extensions/typescript-language-features</a></p>",
        "id": 190198874,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1583860321
    },
    {
        "content": "<p><a href=\"https://github.com/microsoft/vscode/blob/4e605ec54a58213b2db2e0b2c2d19e17833a46bb/extensions/typescript-language-features/package.json#L11\" target=\"_blank\" title=\"https://github.com/microsoft/vscode/blob/4e605ec54a58213b2db2e0b2c2d19e17833a46bb/extensions/typescript-language-features/package.json#L11\">https://github.com/microsoft/vscode/blob/4e605ec54a58213b2db2e0b2c2d19e17833a46bb/extensions/typescript-language-features/package.json#L11</a></p>",
        "id": 190199254,
        "sender_full_name": "matklad",
        "timestamp": 1583860508
    },
    {
        "content": "<p>I think all of those extensions have it set</p>",
        "id": 190200505,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1583861150
    },
    {
        "content": "<p><a href=\"https://github.com/microsoft/vscode/blob/04c9b01affe9201c3c96533aba56639e810e940f/src/vs/workbench/contrib/welcome/common/viewsWelcomeContribution.ts#L43\" target=\"_blank\" title=\"https://github.com/microsoft/vscode/blob/04c9b01affe9201c3c96533aba56639e810e940f/src/vs/workbench/contrib/welcome/common/viewsWelcomeContribution.ts#L43\">https://github.com/microsoft/vscode/blob/04c9b01affe9201c3c96533aba56639e810e940f/src/vs/workbench/contrib/welcome/common/viewsWelcomeContribution.ts#L43</a></p>",
        "id": 190200727,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1583861240
    },
    {
        "content": "<p>I think that's the check</p>",
        "id": 190200751,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1583861250
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203366\">@Jeremy Kolb</span> , is it necessary to start with <code>--enable-proposed-api matklad.rust-analyzer</code> even on  <code>code-insiders</code> ?</p>",
        "id": 190613540,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584218638
    },
    {
        "content": "<p>Yes</p>",
        "id": 190613906,
        "sender_full_name": "matklad",
        "timestamp": 1584219141
    },
    {
        "content": "<p><code>self</code> is assigned a <code>keyword.control</code> token kind, I think this is a bug?</p>",
        "id": 190615069,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584221065
    },
    {
        "content": "<p><a href=\"user_uploads/4715/C5d0cZv2_JOoS4biWedUb1cD/image.png\" target=\"_blank\" title=\"user_uploads/4715/C5d0cZv2_JOoS4biWedUb1cD/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"user_uploads/4715/C5d0cZv2_JOoS4biWedUb1cD/image.png\" target=\"_blank\" title=\"image.png\"><img src=\"user_uploads/4715/C5d0cZv2_JOoS4biWedUb1cD/image.png\"></a></div>",
        "id": 190615072,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584221089
    },
    {
        "content": "<p>I think it's a bug in the visualisation, compare the output for <code>if</code> and <code>self</code></p>",
        "id": 190640940,
        "sender_full_name": "matklad",
        "timestamp": 1584268342
    },
    {
        "content": "<p>Hey guys, is there a way to create a separate semantic tokens color customization rules for different languages? e.g. in typescript <code>member</code> with <code>delcaration</code> modifier is a method declaration (but <code>property</code> with <code>declaration</code> is for property declarations). But in Rust we use <code>member</code> with <code>declaration</code> modifier as property declaration and these conflict in my eyes ...</p>",
        "id": 190783943,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584395136
    },
    {
        "content": "<p>Good question. I think, in the conv layer, we should add “rust” modifier to<br>\nall tokens.</p>",
        "id": 190784407,
        "sender_full_name": "matklad",
        "timestamp": 1584395412
    },
    {
        "content": "<p>Hmm, there is none as per vscode <code>inspect</code> tool: <br>\n<a href=\"/user_uploads/4715/Q3pC9XZVig_29hXjv1e-Ozoe/image.png\" target=\"_blank\" title=\"image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/Q3pC9XZVig_29hXjv1e-Ozoe/image.png\" target=\"_blank\" title=\"image.png\"><img src=\"/user_uploads/4715/Q3pC9XZVig_29hXjv1e-Ozoe/image.png\"></a></div>",
        "id": 190786912,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584396963
    },
    {
        "content": "<p>There just is no way to express the intention for filtering particular languages in vscode's <code>editor.tokenColorCustomizationsExperimental</code> config</p>",
        "id": 190787207,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584397171
    },
    {
        "content": "<p>There's none because we <em>should</em> add that modifier, it's not there yet</p>",
        "id": 190816960,
        "sender_full_name": "matklad",
        "timestamp": 1584432686
    },
    {
        "content": "<p>Ah, I just interpreded<code>should</code> as <code>already</code></p>",
        "id": 190827730,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584439631
    },
    {
        "content": "<p>Isn't that what <a href=\"https://github.com/microsoft/vscode/wiki/Semantic-Highlighting-Overview#token-classification\" target=\"_blank\" title=\"https://github.com/microsoft/vscode/wiki/Semantic-Highlighting-Overview#token-classification\">https://github.com/microsoft/vscode/wiki/Semantic-Highlighting-Overview#token-classification</a> is for?</p>",
        "id": 190837043,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1584446197
    },
    {
        "content": "<p>There is no word about specifying the language name as a modifier, e.g. TypeScript doesn't add <code>typescript</code> modifier. I think this is a hole in the protocol. There must be some strictly-defined way to set the language of the token (taking into account quasi quotation this has to be on the token level)</p>",
        "id": 190903344,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584475304
    },
    {
        "content": "<p>Hm. The semantic highlighting setting can be controlled by language (that is explicitly called out). I think they infer the language based on the provider or whatever</p>",
        "id": 190925372,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1584488691
    },
    {
        "content": "<p>Somewhere I read that the <code>editor.semanticHighlighting.enabled</code> setting can become <code>lang.semanticHighlighting.enabled</code></p>",
        "id": 190925499,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1584488812
    },
    {
        "content": "<p>doesn't answer your question though...</p>",
        "id": 190925648,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1584488960
    },
    {
        "content": "<p>you may want to open an issue in the vscode-languageclient repo</p>",
        "id": 190925687,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1584488999
    },
    {
        "content": "<p>This was just merged into vscode: <a href=\"https://github.com/microsoft/vscode/pull/93378\" title=\"https://github.com/microsoft/vscode/pull/93378\">https://github.com/microsoft/vscode/pull/93378</a></p>",
        "id": 191889099,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1585231616
    },
    {
        "content": "<p>I think that may address the per language concern?</p>",
        "id": 191889163,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1585231649
    },
    {
        "content": "<p>Sorry I have 0 time to work on anything lately</p>",
        "id": 191889179,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1585231658
    },
    {
        "content": "<p>Thanks, Jeremy, this is what I wanted</p>",
        "id": 191932319,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1585248782
    },
    {
        "content": "<p>Is this normal? Why are there scopes for so many languages?</p>\n<p><a href=\"/user_uploads/4715/YrvHLlicB2_SLTUCt9geTCTF/image.png\" title=\"image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/YrvHLlicB2_SLTUCt9geTCTF/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/YrvHLlicB2_SLTUCt9geTCTF/image.png\"></a></div><p><a href=\"/user_uploads/4715/8xAv9tZwLoDxqL_xe_evNwIh/image.png\" title=\"image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/8xAv9tZwLoDxqL_xe_evNwIh/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/8xAv9tZwLoDxqL_xe_evNwIh/image.png\"></a></div>",
        "id": 195021424,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587621971
    },
    {
        "content": "<p>Bad UI</p>",
        "id": 195030829,
        "sender_full_name": "matklad",
        "timestamp": 1587630344
    },
    {
        "content": "<p>This is the header of the rule which matches the scope</p>",
        "id": 195030846,
        "sender_full_name": "matklad",
        "timestamp": 1587630355
    },
    {
        "content": "<p>IE, this is a rule from the color theme, and, among the N things there, there's one that matches default mapping of semantic tokens to textmate scopes</p>",
        "id": 195030945,
        "sender_full_name": "matklad",
        "timestamp": 1587630398
    },
    {
        "content": "<p>Ah, it's CSS</p>",
        "id": 195033820,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587632368
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu Nicola</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/semantic.20highlighting/near/195033820\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/semantic.20highlighting/near/195033820\">said</a>:</p>\n<blockquote>\n<p>Ah, it's CSS</p>\n</blockquote>\n<p>still funny, imo :-)</p>",
        "id": 195041817,
        "sender_full_name": "apiraino",
        "timestamp": 1587637443
    },
    {
        "content": "<p>Hi folks, just checking if my understand is correct here. Am I correct to say that semantic highlighting (former) proposal in LSP has been replaced by semantic tokens? And also, that the server no longer sends semantic highlighting scopes?</p>",
        "id": 225478274,
        "sender_full_name": "Martin Asquino",
        "timestamp": 1612724357
    },
    {
        "content": "<p>Yep, bothe the old lsp proposal, and the old highlighting infra in analyzer are removed.</p>",
        "id": 225517960,
        "sender_full_name": "matklad",
        "timestamp": 1612775673
    },
    {
        "content": "<p>To clear some potential confusion, we never implemented the old lsp proposal, we did our own thing.</p>",
        "id": 225518014,
        "sender_full_name": "matklad",
        "timestamp": 1612775702
    },
    {
        "content": "<p>ah fair enough, I'll see to update the client so it supports semantic tokens then, thank you <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 225523228,
        "sender_full_name": "Martin Asquino",
        "timestamp": 1612778950
    },
    {
        "content": "<p>I also removed it from the <code>lsp-types</code> crate.</p>",
        "id": 225546158,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1612792187
    }
]