[
    {
        "content": "<p>I'm studying salsa -- in this line <a href=\"https://github.com/salsa-rs/salsa/blob/master/src/interned.rs#L272\" title=\"https://github.com/salsa-rs/salsa/blob/master/src/interned.rs#L272\">https://github.com/salsa-rs/salsa/blob/master/src/interned.rs#L272</a> how do we guarantee that <code>values.len()</code> won't be 0 ? It's initialized as an empty vector, so it seems to me that it's possible to get a <code>0</code> there, but that would break <code>InternId</code> (which can't be 0), so I'm wondering what I'm missing.</p>",
        "id": 196043755,
        "sender_full_name": "osa1",
        "timestamp": 1588413046
    },
    {
        "content": "<p>we don't we +1 instead: <a href=\"https://github.com/salsa-rs/salsa/blob/fecec6bab2ea218b1fad45aa910cddb85284fc29/src/intern_id.rs#L64\" title=\"https://github.com/salsa-rs/salsa/blob/fecec6bab2ea218b1fad45aa910cddb85284fc29/src/intern_id.rs#L64\">https://github.com/salsa-rs/salsa/blob/fecec6bab2ea218b1fad45aa910cddb85284fc29/src/intern_id.rs#L64</a></p>",
        "id": 196043807,
        "sender_full_name": "matklad",
        "timestamp": 1588413138
    },
    {
        "content": "<p>Hmm but <code>tables.values.len()</code> is a <code>usize</code>, not <code>u32</code>, right?</p>",
        "id": 196043825,
        "sender_full_name": "osa1",
        "timestamp": 1588413200
    },
    {
        "content": "<p>which goes via this impl: <a href=\"https://github.com/salsa-rs/salsa/blob/fecec6bab2ea218b1fad45aa910cddb85284fc29/src/intern_id.rs#L112-L117\" title=\"https://github.com/salsa-rs/salsa/blob/fecec6bab2ea218b1fad45aa910cddb85284fc29/src/intern_id.rs#L112-L117\">https://github.com/salsa-rs/salsa/blob/fecec6bab2ea218b1fad45aa910cddb85284fc29/src/intern_id.rs#L112-L117</a></p>",
        "id": 196043850,
        "sender_full_name": "matklad",
        "timestamp": 1588413228
    },
    {
        "content": "<p>I was expecting that we'd call this line <a href=\"https://github.com/salsa-rs/salsa/blob/fecec6bab2ea218b1fad45aa910cddb85284fc29/src/intern_id.rs#L115\" title=\"https://github.com/salsa-rs/salsa/blob/fecec6bab2ea218b1fad45aa910cddb85284fc29/src/intern_id.rs#L115\">https://github.com/salsa-rs/salsa/blob/fecec6bab2ea218b1fad45aa910cddb85284fc29/src/intern_id.rs#L115</a></p>",
        "id": 196043853,
        "sender_full_name": "osa1",
        "timestamp": 1588413231
    },
    {
        "content": "<p>Yes, we do, and <code>new_uncecked</code> does +1</p>",
        "id": 196043898,
        "sender_full_name": "matklad",
        "timestamp": 1588413263
    },
    {
        "content": "<p>Ahh, I see. Thanks!</p>",
        "id": 196043899,
        "sender_full_name": "osa1",
        "timestamp": 1588413263
    },
    {
        "content": "<p>Another related question, why is the max value of InterId defined as  <code>0xFFFF_FF00</code> instead of <code>std::u32::MAX</code> ?</p>",
        "id": 196044471,
        "sender_full_name": "osa1",
        "timestamp": 1588414097
    },
    {
        "content": "<p>For future compatability</p>",
        "id": 196044700,
        "sender_full_name": "matklad",
        "timestamp": 1588414443
    },
    {
        "content": "<p>Ideally, we want to use not the <code>NonZero</code>, but \"highest two bits are zero\"</p>",
        "id": 196044712,
        "sender_full_name": "matklad",
        "timestamp": 1588414463
    },
    {
        "content": "<p>This is what rustc is using, and it is measurably faster</p>",
        "id": 196044721,
        "sender_full_name": "matklad",
        "timestamp": 1588414481
    },
    {
        "content": "<p>but to do that, you need unstable API to specify valid patterns precisely</p>",
        "id": 196044732,
        "sender_full_name": "matklad",
        "timestamp": 1588414502
    },
    {
        "content": "<p>Do you mean least significant bits? Why does that matter for performance?</p>",
        "id": 196044809,
        "sender_full_name": "osa1",
        "timestamp": 1588414653
    },
    {
        "content": "<p>no, I mean highest</p>",
        "id": 196044859,
        "sender_full_name": "matklad",
        "timestamp": 1588414719
    },
    {
        "content": "<p>with no-zero, you need to do <code>- 1</code> for every index access, which is not free</p>",
        "id": 196044870,
        "sender_full_name": "matklad",
        "timestamp": 1588414743
    },
    {
        "content": "<p>with \"highlest two bits are always zero\", you don't need to do anything special for indexing, but you still have space for niche-filling</p>",
        "id": 196044879,
        "sender_full_name": "matklad",
        "timestamp": 1588414770
    },
    {
        "content": "<p>Why does highest bits matter for <code>- 1</code> performance? What do you mean by \"special\"?</p>",
        "id": 196044955,
        "sender_full_name": "osa1",
        "timestamp": 1588414850
    },
    {
        "content": "<p>two cases:</p>\n<p>Case 1:</p>\n<p>idx is a NonZeroU32 index. To access vector element, we need to do <code>xs[idx as usize - 1]</code> (we need -1, b/c we added one when creating the index)</p>\n<p>Case 2:</p>\n<p>idx is TwoHighestBitsAreZero index. To access vector element, we need to do <code>xs[idx as usize]</code></p>",
        "id": 196045027,
        "sender_full_name": "matklad",
        "timestamp": 1588414957
    },
    {
        "content": "<p>Ahh, so same optimizations are applied to TwoHighestBitsAreZero (e.g. Option&lt;TwoHighestBitsAreZero&gt; has the same size as TwoHighestBitsAreZero) ?</p>",
        "id": 196045199,
        "sender_full_name": "osa1",
        "timestamp": 1588415192
    },
    {
        "content": "<p>yup</p>",
        "id": 196045228,
        "sender_full_name": "matklad",
        "timestamp": 1588415263
    },
    {
        "content": "<p>OK, but I still can't relate that to the max value chosen for InterId. Max value for TwoHighestBitsAreZero would be <code>0x3FFFFFFF</code>, I think</p>",
        "id": 196045387,
        "sender_full_name": "osa1",
        "timestamp": 1588415510
    },
    {
        "content": "<p>riiight, I think this actually might be a bug?</p>",
        "id": 196045501,
        "sender_full_name": "matklad",
        "timestamp": 1588415675
    },
    {
        "content": "<p>Or it might also be me not understanding things...</p>",
        "id": 196045503,
        "sender_full_name": "matklad",
        "timestamp": 1588415688
    },
    {
        "content": "<p>OK, thanks for the answers. This has been educational to me. Another question: why does InternId implement From&lt;u32&gt; and From&lt;usize&gt;? That means users of salsa can invent InternIds out of thin air, which shouldn't be possible, I think. I'd expect to obtain InternIds <em>only</em> by interning.</p>",
        "id": 196045932,
        "sender_full_name": "osa1",
        "timestamp": 1588416350
    }
]