[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">field</span><span class=\"o\">&lt;|&gt;</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">s</span>: <span class=\"nc\">S</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">field</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>Invoking find usages on the above snippet does not find the field usage in the match. This happens presumably because ident patterns contain a <code>ast::Name</code>, not an <code>ast::NameRef</code>. What would be the correct way to fix this?</p>\n<p>It seems to me that we'd have to change <code>classify_name_ref</code> to take something like <code>Either&lt;ast::Name, ast::NameRef&gt;</code>, or add an extra method that works with <code>ast::Name</code>. Of course, changing the AST to use <code>ast::NameRef</code> would also work, but IIRC that's intentional?</p>",
        "id": 212840860,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1602257432
    },
    {
        "content": "<p>Ah nevermind, <code>classify_name</code> already exists</p>",
        "id": 212842023,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1602257996
    },
    {
        "content": "<p>Yeah, <code>classify</code> infra is well-prepared for handing such special cases of mixed ref/def (its actually <strong>the</strong> reason for this infra to exist in the first place)</p>",
        "id": 212967248,
        "sender_full_name": "matklad",
        "timestamp": 1602425920
    },
    {
        "content": "<p>Fun bit of trivia -- Kotlin devs have a royal pain with implementing find usages for fields, as named fields can be used positionaly:</p>\n<p><a href=\"https://pl.kotl.in/QL0aOQkDj\">https://pl.kotl.in/QL0aOQkDj</a></p>",
        "id": 212967310,
        "sender_full_name": "matklad",
        "timestamp": 1602426043
    }
]