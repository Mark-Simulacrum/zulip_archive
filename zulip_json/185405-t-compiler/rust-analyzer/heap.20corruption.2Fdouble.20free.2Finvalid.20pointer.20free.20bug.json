[
    {
        "content": "<p>I know that probably wont be of much help but I just got such an abort message with ra:</p>\n<div class=\"codehilite\"><pre><span></span>free(): invalid next size (fast)\n</pre></div>\n\n\n<p>It happened after I removed a dependency from my Cargo.toml</p>\n<p>It worries me because such shouldnt happen in Rust, is rust-analyzer using unsafe code in a way it could cause such a bug or not?</p>",
        "id": 185369450,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1578709330
    },
    {
        "content": "<p>We do have some unsafe trickery with regards to how we store syntax trees in Rowan using ThinDST, my initial concern would be that. I'll a attempt to run with a sanitizer and reproduce later. Thanks for the tip</p>",
        "id": 185381569,
        "sender_full_name": "Emil Lauridsen",
        "timestamp": 1578733440
    },
    {
        "content": "<p>I've been unable to reproduce so far, but if you can boil it down to a reproducible test case I'll gladly investigate further.</p>",
        "id": 185386542,
        "sender_full_name": "Emil Lauridsen",
        "timestamp": 1578742830
    },
    {
        "content": "<p>I've been unable to reproduce as well. It seems that the scenario requires a very specific chain of actions for this to trigger.</p>\n<p>Do you plan on getting rid of unsafe here? I think this could be very much exploitable.</p>",
        "id": 185393059,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1578754906
    },
    {
        "content": "<p>There's only a single place where rust-analyzer fundamentally relies on unsafe -- in the syntax tree implementation. </p>\n<p>It is very fancy data structure which requires unsafe to be efficient, and it indeed has quite a few of non-trivail <code>unsafe</code> block.</p>\n<p>I believe that the (safe) public interface is sound and implementable, but:</p>\n<ul>\n<li>I am not sure if the implementation is bug free</li>\n<li>I know a couple of bits of questionable soundness in the implementation (which deal with current lang limitations around DSTs)</li>\n</ul>",
        "id": 185393614,
        "sender_full_name": "matklad",
        "timestamp": 1578755869
    },
    {
        "content": "<p>In general, rust-analyzer assume non-hostile environment, security-wise. That is, UB is UB and must be fixed, but we generally don't try extremely hard to guarantee the absence of UB (or other security issues).</p>",
        "id": 185393822,
        "sender_full_name": "matklad",
        "timestamp": 1578756206
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> well third party crates are effectively data from random people on the Internet. Some times I review code and like to have IDE tools to do it, I don't want this code to compromise my machine.</p>",
        "id": 186493499,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1579874076
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214522\">@Leo Le Bouter</span> I can assure you it won't compromise your machine any more than a <code>cargo check</code> will.<br>\nIf your threat model involves RCE from reviewing untrusted crates you should probably be running your entire setup isolated from anything important, preferably on an airgapped machine, but at least in a VM</p>",
        "id": 186499109,
        "sender_full_name": "Emil Lauridsen",
        "timestamp": 1579878089
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"212936\">@Emil Lauridsen</span> , can you please elaborate on how  and which sanitizer you run? If such a problem exists in <code>rust-analyzer</code> I guess we would need to integrate sanitizing more closely (and add some comments on that to our dev docs)</p>",
        "id": 186499473,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1579878311
    },
    {
        "content": "<p>(Note: this is not me saying the issue isn't important, just that it probably isn't security critical, and not really actionable until somebody has a stacktrace or reproducible example)</p>",
        "id": 186499845,
        "sender_full_name": "Emil Lauridsen",
        "timestamp": 1579878539
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"258149\">@std::Veetaha</span> I tried a run with valgrind but no luck replicating so far</p>",
        "id": 186499887,
        "sender_full_name": "Emil Lauridsen",
        "timestamp": 1579878568
    },
    {
        "content": "<p>Okay, I think I'll create an issue for sanitizing memory-safety issues in <code>rust-analyzer</code>. I know this is not the highest priority right now, but I guess I'll try to tackle that myself once I have time for that.</p>",
        "id": 186500167,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1579878703
    },
    {
        "content": "<p>By the way, speaking about soundness... <code>rowan</code> red-green tree seems to have circular references under the good. I didn't get so much into the details of its unsafe code, but my first concern would arise about <code>&amp;mut</code> references aliasing (though it shouldn't cause ivalid <code>free()</code> in theory)</p>",
        "id": 186500362,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1579878837
    },
    {
        "content": "<p>FYI: <span class=\"user-mention\" data-user-id=\"214522\">@Leo Le Bouter</span>  I created <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/2904\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/2904\">an issue</a>, added it to my bookmarks. I hope my proposal is reasonable</p>",
        "id": 186570029,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1579952479
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"214522\">Leo Le Bouter</span> I can assure you it won't compromise your machine any more than a <code>cargo check</code> will.<br>\nIf your threat model involves RCE from reviewing untrusted crates you should probably be running your entire setup isolated from anything important, preferably on an airgapped machine, but at least in a VM</p>\n</blockquote>\n<p>I'm as worried about the <code>cargo check</code> but yeah, in the mean time, that's what I do. I would prefer if Rust could make that a little better :-) Isn't it designed for security after all? The <a class=\"stream\" data-stream-id=\"146229\" href=\"/#narrow/stream/146229-wg-secure-code\">#wg-secure-code</a> is working on it as well.</p>",
        "id": 186592394,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1579993411
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"258149\">@std::Veetaha</span> Could not replicate the issue either. It seems to be caused by a set of things rather than a single thing, which makes it hard to reproduce. The error showed up in my logs and that's it.</p>",
        "id": 186592444,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1579993499
    },
    {
        "content": "<p>And thanks!</p>",
        "id": 186592456,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1579993512
    },
    {
        "content": "<p>I got the error again, still don't know exactly what caused it, can't reproduce, rewriting my code doesnt seem to work.</p>\n<div class=\"codehilite\"><pre><span></span>error: expected one of `)`, `,`, `::`, or `|`, found `.`\n  --&gt; &lt;stdin&gt;:85:54\n   |\n85 |             e @ Err(std::io::ErrorKind::AlreadyExists.into()) =&gt; e.context(CreateSsbDir {\n   |                                                      ^ expected one of `)`, `,`, `::`, or `|` here\n\nerror: expected one of `)`, `,`, `::`, or `|`, found `.`\n  --&gt; &lt;stdin&gt;:85:54\n   |\n85 |             e @ Err(std::io::ErrorKind::AlreadyExists.into()) =&gt; e.context(CreateSsbDir {\n   |                                                      ^ expected one of `)`, `,`, `::`, or `|` here\n\nerror: expected one of `)`, `,`, `::`, or `|`, found `.`\n  --&gt; &lt;stdin&gt;:85:54\n   |\n85 |             e @ Err(std::io::ErrorKind::AlreadyExists.into()) =&gt; e.context(CreateSsbDir {\n   |                                                      ^ expected one of `)`, `,`, `::`, or `|` here\n\nfree(): invalid next size (fast)\n</pre></div>",
        "id": 186601596,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1580011243
    },
    {
        "content": "<p>I was being a little spammy on Ctrl-Shift-I (Format) -- if that's any relevant.</p>",
        "id": 186601608,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1580011269
    },
    {
        "content": "<p>Hmm, I think I can reproduce now. It has to do with where clauses while they're being written.</p>",
        "id": 186601724,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1580011528
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;byte index 3 is not a char boundary; it is inside &#39;\\u{3}&#39; (bytes 2..3) of `�u��   0: backtrace::backtrace::libunwind::trace\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/libunwind.rs:88\n   1: backtrace::backtrace::trace_unsynchronized\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/mod.rs:66\n   2: std::sys_common::backtrace::_print_fmt\n             at src/libstd/sys_common/backtrace.rs:77\n   3: &lt;std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display&gt;::fmt\n             at src/libstd/sys_common/backtrace.rs:61\n   4: core::fmt::write\n             at src/libcore/fmt/mod.rs:1028\n   5: std::io::Write::write_fmt\n             at src/libstd/io/mod.rs:1412\n   6: std::sys_common::backtrace::_print\n             at src/libstd/sys_common/backtrace.rs:65\n   7: std::sys_common::backtrace::print\n             at src/libstd/sys_common/backtrace.rs:50\n   8: std::panicking::default_hook::{{closure}}\n             at src/libstd/panicking.rs:188\n   9: std::panicking::default_hook\n             at src/libstd/panicking.rs:205\n  10: std::panicking::rust_panic_with_hook\n             at src/libstd/panicking.rs:464\n  11: std::panicking::continue_panic_fmt\n             at src/libstd/panicking.rs:373\n  12: rust_begin_unwind\n             at src/libstd/panicking.rs:302\n  13: core::panicking::panic_fmt\n             at src/libcore/panicking.rs:139\n  14: core::str::slice_error_fail\n             at src/libcore/str/mod.rs:0\n  15: core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::index::{{closure}}\n  16: serde_json::ser::format_escaped_str\n  17: serde::ser::SerializeMap::serialize_entry\n  18: lsp_server::msg::Message::write\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\nfree(): invalid next size (fast)\n</pre></div>",
        "id": 186601726,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1580011534
    },
    {
        "content": "<p>Got this as well, now.</p>",
        "id": 186601727,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1580011537
    },
    {
        "content": "<p>Also</p>\n<div class=\"codehilite\"><pre><span></span>corrupted double-linked list\n</pre></div>",
        "id": 186601904,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1580011905
    },
    {
        "content": "<p>heap overflow?</p>",
        "id": 186601908,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1580011917
    },
    {
        "content": "<p>I think I can reproduce almost reliably now. I'll make a video</p>",
        "id": 186601950,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1580011981
    },
    {
        "content": "<p>It only happens in interactivity</p>",
        "id": 186601957,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1580012000
    },
    {
        "content": "<p>And when making the video it wont reproduce anymore... urgggh</p>",
        "id": 186602327,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1580012739
    },
    {
        "content": "<p>As a hint, it seems to always happen when I write before the first <code>{</code> just after the head of a struct definition.</p>",
        "id": 186609315,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1580022895
    },
    {
        "content": "<p>Such as, adding spaces or a newline</p>",
        "id": 186609324,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1580022912
    },
    {
        "content": "<p><code>malloc_consolidate(): invalid chunk size</code></p>",
        "id": 186613364,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1580030725
    },
    {
        "content": "<p>It seems that the overflow is going over the source code buffer:</p>\n<div class=\"codehilite\"><pre><span></span>thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;byte index 1 is not a char boundary; it is inside &#39;\\u{10}&#39; (bytes 0..1) of `\u0010��\\�stack backtrace:\n   0: backtrace::backtrace::libunwind::trace\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/libunwind.rs:88\n   1: backtrace::backtrace::trace_unsynchronized\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/mod.rs:66\n   2: std::sys_common::backtrace::_print_fmt\n             at src/libstd/sys_common/backtrace.rs:77\n   3: &lt;std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display&gt;::fmt\n             at src/libstd/sys_common/backtrace.rs:61\n   4: core::fmt::write\n             at src/libcore/fmt/mod.rs:1028\n   5: std::io::Write::write_fmt\n             at src/libstd/io/mod.rs:1412\n   6: std::sys_common::backtrace::_print\n             at src/libstd/sys_common/backtrace.rs:65\n   7: std::sys_common::backtrace::print\n             at src/libstd/sys_common/backtrace.rs:50\n   8: std::panicking::default_hook::{{closure}}\n             at src/libstd/panicking.rs:188\n   9: std::panicking::default_hook\n             at src/libstd/panicking.rs:205\n  10: std::panicking::rust_panic_with_hook\n             at src/libstd/panicking.rs:464\n  11: std::panicking::continue_panic_fmt\n             at src/libstd/panicking.rs:373\n  12: rust_begin_unwind\n             at src/libstd/panicking.rs:302\n  13: core::panicking::panic_fmt\n             at src/libcore/panicking.rs:139\n  14: core::str::slice_error_fail\n             at src/libcore/str/mod.rs:0\n  15: core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::index::{{closure}}\n  16: serde_json::ser::format_escaped_str\n  17: serde::ser::SerializeMap::serialize_entry\n  18: lsp_server::msg::Message::write\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\nfree(): invalid next size (fast)\n</pre></div>",
        "id": 186613544,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1580031025
    },
    {
        "content": "<p>I got a debug trace:</p>\n<div class=\"codehilite\"><pre><span></span>#0  0x00007fff8cebfcf4 in _int_free () from /lib64/libc.so.6\n#1  0x000000011461a0b8 in std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::dealloc () at src/libstd/sys/unix/alloc.rs:42\n#2  __rdl_dealloc () at src/libstd/alloc.rs:246\n#3  0x00000001140023a4 in core::ptr::real_drop_in_place ()\n#4  0x0000000113f11d14 in core::ptr::real_drop_in_place ()\n#5  0x0000000113f16b3c in core::ptr::real_drop_in_place ()\n#6  0x0000000113e64660 in alloc::sync::Arc&lt;T&gt;::drop_slow ()\n#7  0x00000001142940e0 in salsa::derived::slot::Slot&lt;DB,Q,MP&gt;::read_upgrade ()\n#8  0x00000001142e4188 in salsa::derived::slot::Slot&lt;DB,Q,MP&gt;::read ()\n#9  0x0000000113fe150c in &lt;salsa::derived::DerivedStorage&lt;DB,Q,MP&gt; as salsa::plumbing::QueryStorageOps&lt;DB,Q&gt;&gt;::try_fetch ()\n#10 0x0000000113e1bc98 in salsa::QueryTable&lt;DB,Q&gt;::get ()\n#11 0x00000001140eb9f4 in ra_hir_ty::traits::trait_solve_query ()\n#12 0x0000000114055de8 in salsa::runtime::Runtime&lt;DB&gt;::execute_query_implementation ()\n#13 0x00000001142c4ae0 in salsa::derived::slot::Slot&lt;DB,Q,MP&gt;::read_upgrade ()\n#14 0x000000011422aacc in &lt;salsa::derived::slot::Slot&lt;DB,Q,MP&gt; as salsa::dependency::DatabaseSlot&lt;DB&gt;&gt;::maybe_changed_since ()\n#15 0x000000011428a41c in salsa::derived::slot::Slot&lt;DB,Q,MP&gt;::read_upgrade ()\n#16 0x00000001142e5408 in salsa::derived::slot::Slot&lt;DB,Q,MP&gt;::read ()\n#17 0x0000000113fe7690 in &lt;salsa::derived::DerivedStorage&lt;DB,Q,MP&gt; as salsa::plumbing::QueryStorageOps&lt;DB,Q&gt;&gt;::try_fetch ()\n#18 0x0000000113f84fd8 in ra_hir_ty::db::infer ()\n#19 0x0000000113e166d0 in ra_hir::code_model::Function::diagnostics ()\n#20 0x0000000113e153a0 in ra_hir::code_model::Module::diagnostics ()\n#21 0x0000000114060e00 in ra_ide::diagnostics::diagnostics ()\n#22 0x000000011408327c in std::panicking::try::do_call ()\n#23 0x00000001146244f4 in __rust_maybe_catch_panic () at src/libpanic_unwind/lib.rs:78\n#24 0x000000011417979c in ra_db::CheckCanceled::catch_canceled ()\n#25 0x0000000113fb4bd0 in ra_ide::Analysis::diagnostics ()\n#26 0x0000000113a8779c in ra_lsp_server::main_loop::handlers::publish_diagnostics ()\n#27 0x00000001139f1330 in &lt;F as threadpool::FnBox&gt;::call_box ()\n#28 0x0000000113c6df1c in std::sys_common::backtrace::__rust_begin_short_backtrace ()\n#29 0x00000001146244f4 in __rust_maybe_catch_panic () at src/libpanic_unwind/lib.rs:78\n#30 0x0000000113c6e8fc in core::ops::function::FnOnce::call_once{{vtable-shim}} ()\n#31 0x0000000114607538 in &lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once () at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14/src/liballoc/boxed.rs:942\n#32 0x0000000114623490 in &lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once () at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14/src/liballoc/boxed.rs:942\n#33 std::sys_common::thread::start_thread () at src/libstd/sys_common/thread.rs:13\n#34 std::sys::unix::thread::Thread::new::thread_start () at src/libstd/sys/unix/thread.rs:79\n#35 0x00007fff8d079a88 in start_thread () from /lib64/libpthread.so.0\n#36 0x00007fff8cf53998 in clone () from /lib64/libc.so.6\n</pre></div>",
        "id": 186616497,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1580036257
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214522\">@Leo Le Bouter</span> big thank you for the input, could you please describe the steps you've taken to reproduce this <strong>AND</strong> get the backtrace (the backtrace part is one of the most interesting to me)?</p>",
        "id": 186616739,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580036649
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"258149\">@std::Veetaha</span> Can't say, really. It's not exact what causes it.</p>",
        "id": 186616749,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1580036680
    },
    {
        "content": "<p>I can't say more than:</p>\n<blockquote>\n<p>As a hint, it seems to always happen when I write before the first <code>{</code> just after the head of a struct definition.</p>\n</blockquote>",
        "id": 186616760,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1580036707
    },
    {
        "content": "<p>For the backtrace, I attached gdb?</p>",
        "id": 186616768,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1580036744
    },
    {
        "content": "<p>And waited until it happened again</p>",
        "id": 186616774,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1580036761
    },
    {
        "content": "<p>I'm recompiling ra in debug mode as we speaj</p>",
        "id": 186616814,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1580036775
    },
    {
        "content": "<p>speak *</p>",
        "id": 186616815,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1580036778
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214522\">@Leo Le Bouter</span> If you project is open-source, a link to the place where you put <code>{</code> after the head of a struct (whatever this means) would be helpful. Otherwise you could give us an excerpt of the code where the crash is triggered</p>",
        "id": 186616893,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580036969
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"258149\">@std::Veetaha</span> It does not seem specific to any particular source code, but <a href=\"https://github.com/leo-lb/ssb-server-rs\" target=\"_blank\" title=\"https://github.com/leo-lb/ssb-server-rs\">https://github.com/leo-lb/ssb-server-rs</a></p>",
        "id": 186616942,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1580037005
    },
    {
        "content": "<p>I know, yes, it's just to let us reproduce it locally on our machines</p>",
        "id": 186616972,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580037069
    },
    {
        "content": "<p>I don't think you'll be able to reproduce. One example place would be: <a href=\"https://github.com/leo-lb/ssb-packetstream/blob/e6ad8807502a6c37fbc907a9f77eb7eeb06fa3b9/src/stream.rs#L95\" target=\"_blank\" title=\"https://github.com/leo-lb/ssb-packetstream/blob/e6ad8807502a6c37fbc907a9f77eb7eeb06fa3b9/src/stream.rs#L95\">https://github.com/leo-lb/ssb-packetstream/blob/e6ad8807502a6c37fbc907a9f77eb7eeb06fa3b9/src/stream.rs#L95</a></p>",
        "id": 186617024,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1580037137
    },
    {
        "content": "<p>We would have to do it or the bug won't be fixed, nevertheless ;) Thanks for this input again!</p>",
        "id": 186617052,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580037225
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"258149\">@std::Veetaha</span> In that case, I don't think it will ever get fixed :-/</p>",
        "id": 186617132,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1580037362
    },
    {
        "content": "<p>Seems like running ra in debug mode is just not practical at all. So slow!</p>",
        "id": 186617485,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1580037987
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"258149\">@std::Veetaha</span> If you want to reproduce from that code, try removing the where clause, putting it back character by character, CTRL-S + CTRL-SHIFT-I, and again and again, at some point, the heap will get corrupt</p>",
        "id": 186617507,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1580038077
    },
    {
        "content": "<p>Try putting back <code>where:</code> just after the struct and removing, pressing CTRL-SHIFT-I / CTRL-S all while writing it multiple times</p>",
        "id": 186617550,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1580038112
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214522\">@Leo Le Bouter</span>  if you have time, may I ask you to formalize what you've done today to reproduce this and put it into an issue on <code>rust-analyzer</code> repo? I could take all that traces you've provided and move them to an issue myself, but I don't have the full context of which concrete commands you used and what steps you take, we need this to be in the form of an algorithm e.g.</p>\n<ol>\n<li>I cloned the fresh repo of analyzer (commit hash)</li>\n<li>I've built it with <code>&lt;command here&gt;</code></li>\n<li>blah blah</li>\n</ol>",
        "id": 186617551,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580038119
    },
    {
        "content": "<p><code>where:</code> is invalid syntax but I noticed that's how it happened most</p>",
        "id": 186617552,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1580038127
    },
    {
        "content": "<p>I don't have any exact path to reproduction, else I would've done that already, once I have one, I'll be sure to fill an issue</p>",
        "id": 186617564,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1580038201
    },
    {
        "content": "<p>Yes, floating bugs are hard, just mention that the steps you provided won't necessarily lead to the crash. They would serve just as a context where this issue is more probable to happen</p>",
        "id": 186617744,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580038497
    }
]