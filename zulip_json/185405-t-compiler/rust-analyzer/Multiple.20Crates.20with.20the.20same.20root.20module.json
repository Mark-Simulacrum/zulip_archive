[
    {
        "content": "<p>Hi folks! I wanted to clarify something with regard to <code>rust-project.json</code>. I'm seeing situations where if Rust Analyzer is given multiple crates with the same root module, it will arbitrarily pick the first one. this occurs most often when Buck, the build system fb uses, generates a <code>crate</code> and <code>crate-unittests</code>, with the latter corresponding to—you guessed it—unit tests. unfortunately, this means that the unit tests can't resolve any imports.</p>\n<p>to fix this, am I correct in thinking that both the <code>crate</code> and <code>crate-unittests</code> have to specify the same, _non-empty_ sources in the <code>rust-project.json</code> as per the comment on <a href=\"https://rust-analyzer.github.io/manual.html#non-cargo-based-projects\">https://rust-analyzer.github.io/manual.html#non-cargo-based-projects</a> under <code>Crate</code>?</p>",
        "id": 277771217,
        "sender_full_name": "David Barsky",
        "timestamp": 1649095346
    },
    {
        "content": "<p>it's a bit unclear to me what the problem is, maybe you could provide an example project? <br>\nevery file should belong to exactly one source root, and the source roots are defined by those <code>source</code> elements in the <code>Crate</code> structure (and omitting that amounts to specifying the parent of the root module)</p>",
        "id": 277782042,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1649100569
    },
    {
        "content": "<p>I think it's completely ok to specify the top folder containing all the sources as the single root if you have a big workspace with many crates; the only situation where you really need a different root is for dependencies stored in other places (like cargo deps in <code>~/.cargo/registry</code> etc.)</p>",
        "id": 277782264,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1649100668
    },
    {
        "content": "<p>They are talking about the source modules of crates, not the source roots.</p>",
        "id": 277783115,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1649101123
    },
    {
        "content": "<p>I am a bit confused about when you would ever want to have the same source module for multiple crates though <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 277783143,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1649101145
    },
    {
        "content": "<p>I guess it's just once with <code>cfg(test)</code> for tests and once without for the real build / use in dependencies? something we have considered doing for normal cargo workspaces as well</p>",
        "id": 277784813,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1649102076
    },
    {
        "content": "<p>yeah, buck does a thing where it creates a unit test crate suffixed with <code>-unittest</code> for <code>#[test]</code>-annotated things. i don't know if that's a reasonable approach, though.</p>",
        "id": 277795731,
        "sender_full_name": "David Barsky",
        "timestamp": 1649107439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Multiple.20Crates.20with.20the.20same.20root.20module/near/277782042\">said</a>:</p>\n<blockquote>\n<p>it's a bit unclear to me what the problem is, maybe you could provide an example project? <br>\nevery file should belong to exactly one source root, and the source roots are defined by those <code>source</code> elements in the <code>Crate</code> structure (and omitting that amounts to specifying the parent of the root module)</p>\n</blockquote>\n<p>I can see about that, but some of this stuff is unfortunately closed source and kinda idiosyntractic. i wouldn't be surprised if we're holding portions of the crate graph wrong.</p>",
        "id": 277795855,
        "sender_full_name": "David Barsky",
        "timestamp": 1649107483
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"198819\">David Barsky</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Multiple.20Crates.20with.20the.20same.20root.20module/near/277795731\">said</a>:</p>\n<blockquote>\n<p>yeah, buck does a thing where it creates a unit test crate suffixed with <code>-unittest</code> for <code>#[test]</code>-annotated things. i don't know if that's a reasonable approach, though.</p>\n</blockquote>\n<p>which is to say: to do a <code>buck test</code>, a separate target (e.g., crate) is needed, so it's not unreasonable to see two crates with the same source root because the lib has a <code>#[test]</code> within it. again, this can be entirely wrong!</p>",
        "id": 277796073,
        "sender_full_name": "David Barsky",
        "timestamp": 1649107603
    },
    {
        "content": "<p>no, that should be fine and RA should be able to deal with it, it just isn't exercised that much currently</p>\n<blockquote>\n<p>source root</p>\n</blockquote>\n<p>note that what you mean here is what we'd call \"root file\" (i.e. <code>some_crate/src/lib.rs</code>); \"source root\" in RA is something different: the whole virtual file system is divided into non-intersecting \"source roots\", where every file that RA knows about has to be in one of them. so if I open my RA workspace in <code>~/projects/rust-analyzer</code>, I'll probably have one source root <code>~/projects/rust-analyzer</code> and then a bunch of source roots for cargo dependencies, e.g. <code>~/.cargo/registry/src/github.com-.../arrayvec-0.7.2/</code> and so on. A source root can contain the source code for any number of crates, the only restriction is that RA assumes that crates don't span across multiple roots. OTOH RA will (if I'm not mistaken) load <em>every</em> .rs file in those source roots, so they can't be too wide (don't make <code>~</code> the single root)</p>",
        "id": 277846576,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1649149253
    },
    {
        "content": "<p>and with rust-project.json the <code>source</code> field specifies these source roots</p>",
        "id": 277846673,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1649149315
    },
    {
        "content": "<p>oh, thanks for the correction :). yeah, i’m using the terminology in the rust-project.json file, but that helps.</p>",
        "id": 277874906,
        "sender_full_name": "David Barsky",
        "timestamp": 1649163932
    },
    {
        "content": "<p>how does rust analyzer handle tests in cargo-based builds, btw? i know libtest is kinda funky with visibility rules and so forth, but understanding the baseline behavior would<br>\nbe helpful in debugging this.</p>",
        "id": 277875149,
        "sender_full_name": "David Barsky",
        "timestamp": 1649164031
    },
    {
        "content": "<p>Rust-analyzer currently just sets <code>cfg(test)</code> unconditionally.</p>",
        "id": 277875520,
        "sender_full_name": "bjorn3",
        "timestamp": 1649164200
    },
    {
        "content": "<p>And hopes that no <code>cfg(not(test))</code> is used.</p>",
        "id": 277875590,
        "sender_full_name": "bjorn3",
        "timestamp": 1649164214
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Multiple.20Crates.20with.20the.20same.20root.20module/near/277875520\">said</a>:</p>\n<blockquote>\n<p>Rust-analyzer currently just sets <code>cfg(test)</code> unconditionally.</p>\n</blockquote>\n<p>gotcha, that's helpful!</p>",
        "id": 277891189,
        "sender_full_name": "David Barsky",
        "timestamp": 1649170584
    },
    {
        "content": "<p>yeah, it looks like rust-analyzer adds the test cfg to cargo-based builds (<a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/5a6918f1c4e9d4f0c6a655e6283470f64edd64cf/crates/project_model/src/workspace.rs#L545-L547\">https://github.com/rust-analyzer/rust-analyzer/blob/5a6918f1c4e9d4f0c6a655e6283470f64edd64cf/crates/project_model/src/workspace.rs#L545-L547</a>), but it doesn't do the same the same in <code>project_json_to_crate_graph</code>.</p>",
        "id": 277892218,
        "sender_full_name": "David Barsky",
        "timestamp": 1649170975
    },
    {
        "content": "<p>...which means we might need to add it in the rust-project.json.</p>",
        "id": 277892306,
        "sender_full_name": "David Barsky",
        "timestamp": 1649171013
    },
    {
        "content": "<p>this causes other problems for us though. So I think it'd be interesting to see how well the duplicate-crate-with-test-cfg approach currently works / what problems you're having with it and whether they can be fixed</p>",
        "id": 277899572,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1649173652
    },
    {
        "content": "<p>I'll give it a try and let you know!</p>",
        "id": 277906498,
        "sender_full_name": "David Barsky",
        "timestamp": 1649176279
    },
    {
        "content": "<p>I think this is a common pattern that people generating <code>rust-project.json</code> from non-<code>cargo</code> build systems run into (we hit it with GN in Fuchsia, for instance).</p>",
        "id": 278729428,
        "sender_full_name": "woody77",
        "timestamp": 1649786299
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Multiple.20Crates.20with.20the.20same.20root.20module/near/277875520\">said</a>:</p>\n<blockquote>\n<p>Rust-analyzer currently just sets <code>cfg(test)</code> unconditionally.</p>\n</blockquote>\n<p>But only for <code>Cargo</code> workspaces, not <code>rust-project.json</code> workspaces.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"198819\">David Barsky</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Multiple.20Crates.20with.20the.20same.20root.20module/near/277892218\">said</a>:</p>\n<blockquote>\n<p>yeah, it looks like rust-analyzer adds the test cfg to cargo-based builds (<a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/5a6918f1c4e9d4f0c6a655e6283470f64edd64cf/crates/project_model/src/workspace.rs#L545-L547\">https://github.com/rust-analyzer/rust-analyzer/blob/5a6918f1c4e9d4f0c6a655e6283470f64edd64cf/crates/project_model/src/workspace.rs#L545-L547</a>), but it doesn't do the same the same in <code>project_json_to_crate_graph</code>.<br>\n...which means we might need to add it in the rust-project.json.</p>\n</blockquote>\n<p>This is what we do (our \"test\" crate entries all end up with the following in <code>rust-project.json</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"s\">\"cfg\"</span>: <span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"s\">\"test\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">....</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 278730022,
        "sender_full_name": "woody77",
        "timestamp": 1649786543
    },
    {
        "content": "<p>I've been thinking about configuration mgmt and <code>rust-project.json</code>, especially because we build with both a host- and a cross-compiler:</p>\n<ul>\n<li>host \"release\"</li>\n<li>host \"test\"</li>\n<li>cross \"release\"</li>\n<li>cross \"test\"</li>\n</ul>\n<p>and given how libs and binaries can <a href=\"https://doc.rust-lang.org/cargo/guide/project-layout.html\">share a src root</a> with <code>cargo</code>, we can end up with 6 or more entries for the same <code>src/</code> folder.</p>",
        "id": 278730454,
        "sender_full_name": "woody77",
        "timestamp": 1649786742
    },
    {
        "content": "<p>I've looked at doing a deduplication pass, and only emitting one <code>crate</code> entry into <code>rust-project.json</code>, but that has to \"pick a winner\", so to speak, with respect to which configuration to use.</p>",
        "id": 278730648,
        "sender_full_name": "woody77",
        "timestamp": 1649786815
    },
    {
        "content": "<p>as I wrote above, IMO this is something that we should handle better, but some concrete examples would be helpful in improving the situation</p>",
        "id": 278731423,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1649787149
    }
]