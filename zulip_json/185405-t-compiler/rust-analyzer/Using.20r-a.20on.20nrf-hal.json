[
    {
        "content": "<p>I'd like to use rust-analyzer on this repo: <a href=\"https://github.com/nrf-rs/nrf-hal/\">https://github.com/nrf-rs/nrf-hal/</a></p>\n<p>The problem is that it contains a big, shared crate, nrf-hal-common, that uses non-additive Cargo features. The workspace also contains a bunch of crates that enable precisely one of those features and reexport the resulting library contents. This causes r-a to think it has to enable <em>all</em> features when running <code>cargo check</code> and performing analysis, which breaks with the way the shared crate is designed.</p>\n<p>Is there any way to fix this, or would we have to implement more advanced features, like on-the-fly <code>#[cfg]</code> modification to get this to work?</p>\n<p>(I could live without check-on-save, but at least IDE functionality would be nice)</p>",
        "id": 214965999,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1603978237
    },
    {
        "content": "<p>This is similar to what <span class=\"user-mention\" data-user-id=\"116114\">@Paul Faria</span> has been looking at, around configuration mgmt in the rust-project.json -based flows.  I think we'd need more complex handling of <code>cfg</code> than we currently have (either on-the-fly, or multiple instances of a crate in the db based the features that were enabled as it was encountered in the dependency tree.</p>",
        "id": 215031472,
        "sender_full_name": "woody77",
        "timestamp": 1604007275
    },
    {
        "content": "<p>It's actually handling them generically internally, but have different UI at the IDE interface. Though this case is different from what I was considering in use cases. I was taking into consideration different features toggled on and off as the \"active\" configuration. This is about having different features active at certain points in the crate graph, right <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span>?</p>",
        "id": 215032048,
        "sender_full_name": "Paul Faria",
        "timestamp": 1604007598
    },
    {
        "content": "<p>Oh wait. I think this is also a limitation of cargo. I have a similar scenario in coi where I have to manage my tests with makefiles because the workspace as a whole requires all of the features to match at the top level.</p>",
        "id": 215032249,
        "sender_full_name": "Paul Faria",
        "timestamp": 1604007694
    },
    {
        "content": "<p>I missed the detail about the workspace</p>",
        "id": 215032262,
        "sender_full_name": "Paul Faria",
        "timestamp": 1604007704
    },
    {
        "content": "<p>I think what I'm working on might help in that case. I actually hadn't gotten to the point where I'd considered workspaces yet but this will be helpful when I get there.</p>",
        "id": 215032373,
        "sender_full_name": "Paul Faria",
        "timestamp": 1604007753
    },
    {
        "content": "<p>Yeah, <code>cargo check</code> does not work if you do it on the nrf-hal workspace. I don't really mind that, since it still works fine in the individual subcrates. Mostly I just want r-a's IDE features.</p>",
        "id": 215032415,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1604007783
    },
    {
        "content": "<p>I might implement on-the-fly switching of features/cfgs then (just for r-a, not Cargo)</p>",
        "id": 215032463,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1604007815
    },
    {
        "content": "<p>Oh, that's what I'm currently working on <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 215033777,
        "sender_full_name": "Paul Faria",
        "timestamp": 1604008633
    },
    {
        "content": "<p>Ah, alright, go ahead then :)</p>",
        "id": 215033958,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1604008728
    },
    {
        "content": "<p>I think <code>cargo check</code> is unfortunately unfixable. The best we can do is to override check on save command to </p>\n<p><code>cargo check -p p1 &amp;&amp; cargo check -p p2 &amp;&amp; cargo check -p p3</code> etc</p>",
        "id": 215084516,
        "sender_full_name": "matklad",
        "timestamp": 1604058974
    },
    {
        "content": "<p>Our own analysis... that's tricky</p>",
        "id": 215084605,
        "sender_full_name": "matklad",
        "timestamp": 1604059082
    },
    {
        "content": "<p>I think this is a different problem than the one <span class=\"user-mention\" data-user-id=\"116114\">@Paul Faria</span> is working on :-) Or at least, there are two orthogonal problems</p>",
        "id": 215084668,
        "sender_full_name": "matklad",
        "timestamp": 1604059108
    },
    {
        "content": "<p>One is:</p>\n<ul>\n<li>we have two crates in the crate graph for the same file, how do we pick the right one for goto def and such?</li>\n</ul>\n<p>The second is:</p>\n<ul>\n<li>we want to have different crates for different files with <em>different features</em></li>\n</ul>",
        "id": 215084714,
        "sender_full_name": "matklad",
        "timestamp": 1604059161
    },
    {
        "content": "<p>ie, it is the problem of creating a CrateGraph out of cargo metadata.</p>",
        "id": 215084729,
        "sender_full_name": "matklad",
        "timestamp": 1604059184
    },
    {
        "content": "<p>I think the second one should be more straightforward to fix, by only changing <code>to_crate_graph</code> function</p>",
        "id": 215084843,
        "sender_full_name": "matklad",
        "timestamp": 1604059243
    },
    {
        "content": "<p>Specifically, we currently eagarly activate all features of all packages present in <code>cargo metadata</code>. I think we can fix that to activate only some features, and fork internal packages as needed</p>",
        "id": 215084922,
        "sender_full_name": "matklad",
        "timestamp": 1604059311
    },
    {
        "content": "<p><em>Ideally</em>, we'd just ask Cargo for unit-graph (cargo metadata 2.0 in the works), but we can hack this manually</p>",
        "id": 215084989,
        "sender_full_name": "matklad",
        "timestamp": 1604059349
    }
]