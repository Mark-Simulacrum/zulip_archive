[
    {
        "content": "<p>I've been dissatisfied with the current state of code generation for a while. </p>\n<p>The prevailing options are either using <code>syn</code> + <code>quote</code>, or - as RA is doing - basic string concatentation.</p>\n<p>Both allow creating malformed output which can only be detected at runtime,  and limit generation to a simple single pass, unless you either have your own tailored AST, or deal with manipulating the <code>syn</code> AST, which is very awkward, since it really isn't built for manipulation.</p>\n<p>A solution would be a library tailored for code generation. It could either use a custom AST for just that purpose, or provide a convenient wrapper around existing ones, like <code>ra_syntax</code>.</p>\n<p>Some prior art: <a href=\"http://www.lst.de/~cs/kode/libkode.html\">Kode</a> for C++,  <a href=\"https://github.com/nette/php-generator\">php-generator</a>.</p>\n<p>I'm curious if there is interest in something like this from the rust-analyzer side.</p>",
        "id": 206559121,
        "sender_full_name": "theduke",
        "timestamp": 1597140918
    },
    {
        "content": "<p>I think we have the beginnings of this in <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_syntax/src/ast/edit.rs\">edit.rs</a> and <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_syntax/src/ast/make.rs\">make.rs</a></p>",
        "id": 206563872,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1597145270
    },
    {
        "content": "<p>there's obviously a lot to be improved there, but I think the general shape (creating and manipulating <code>ast</code> nodes) is what we want</p>",
        "id": 206564168,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1597145506
    },
    {
        "content": "<p>note that we need to be able to incorporate user-written code as-is</p>",
        "id": 206564230,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1597145541
    },
    {
        "content": "<p>I'm pretty sure matklad has a lot more to say about it though, but he's on vacation currently as far as I know</p>",
        "id": 206564277,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1597145609
    },
    {
        "content": "<p>Yeah, syntax tree manipulation is a thorny problem, API-wise. </p>\n<p>For IDE use-case, I am pretty sure that \"creating malformed output\" is a feature -- sometimes you need to produce bad output (if parts of it are malformed sytnax nodes from input), and I don't think I've faced a log of bugs which could have been prevented by stronger types in the AST.</p>\n<p>For creating &amp; manipulating AST nodes, I indeed like the general shape of <code>make.rs</code> and <code>edit.rs</code>, I think the API is optimal for immutable syntax trees. The impl is suboptimal, in two ways:</p>\n<ul>\n<li>it is hand-written, we should investigate deriving it from <a href=\"https://github.com/rust-analyzer/ungrammar/blob/master/rust.ungram\">https://github.com/rust-analyzer/ungrammar/blob/master/rust.ungram</a></li>\n<li>it uses <code>parse . to_string</code> on the lowest layer, but we should switch to just assembling the trees directly</li>\n</ul>",
        "id": 206675442,
        "sender_full_name": "matklad",
        "timestamp": 1597225223
    },
    {
        "content": "<p>However, and that is really tantalizing, the most usable API for editing syntax trees is a mutable one.  Ie, when you can have reference to several nodes in the same tree, and modifications via one reference are reflected in another reference. This gives a much more intuitive API, as you can do things like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">child</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">children</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">child</span><span class=\"p\">.</span><span class=\"n\">remove</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>I still have hope that we can reconcile rust-analyzer's immutable trees (immutability is the right choice for everything else) and mutable editing API, but, so far, I haven't found  a way to do this.</p>",
        "id": 206675598,
        "sender_full_name": "matklad",
        "timestamp": 1597225409
    },
    {
        "content": "<p>Separately, for the task of pragramtic code generation, I think <code>quote!</code> + shelling out to <code>rustfmt</code> (what we do to generate sytnax trees themselves) is a near-optimal choice. You <strong>could</strong> add all kinds of conveniences &amp; type safety there, but you shouldn't as for such tasks \"stupid &amp; fast to compile\" is a much more important property than \"a perfectly cut gem made of types\".</p>",
        "id": 206675708,
        "sender_full_name": "matklad",
        "timestamp": 1597225503
    }
]