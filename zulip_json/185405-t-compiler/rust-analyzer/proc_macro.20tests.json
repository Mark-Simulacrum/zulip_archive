[
    {
        "content": "<p>I'm adding a test fixture directive for proc_macros now, mainly for <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/10126\">https://github.com/rust-analyzer/rust-analyzer/pull/10126</a> being testable.<br>\nBut I am unsure how it should look like api-wise(and a bit in regards to the implementation)</p>",
        "id": 253110003,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1631547228
    },
    {
        "content": "<p>Do we want that to look similar to minicore where we just enable chosen test proc macros? a la <code>\\\\- proc_macros: identity</code>?</p>",
        "id": 253110142,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1631547266
    },
    {
        "content": "<p>Regarding impl, where should the source for that live, probably in <code>base_db</code> since we need access to the <code>base_db::ProcMacro</code> type</p>",
        "id": 253110291,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1631547319
    },
    {
        "content": "<p>Also found the reason why the speculative expansion didn't work in all other attributes in that PR, the proc macro expansion query fetched the original input nodes again <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 253110471,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1631547372
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">base_db</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">fixture</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">base_db</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">fixture</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"n\">index</span><span class=\"w\"> </span><span class=\"mi\">8025</span><span class=\"n\">d6398</span><span class=\"o\">..</span><span class=\"n\">c486144a4</span><span class=\"w\"> </span><span class=\"mi\">100644</span><span class=\"w\"></span>\n<span class=\"o\">---</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">base_db</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">fixture</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"o\">+++</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">base_db</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">fixture</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">WORKSPACE</span>: <span class=\"nc\">SourceRootId</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SourceRootId</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">WithFixture</span>: <span class=\"nb\">Default</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">SourceDatabaseExt</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">with_proc_macro</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">proc_macro</span>: <span class=\"nc\">crate</span>::<span class=\"n\">ProcMacro</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">        </span><span class=\"c1\">// Add `proc_macro` to all the crates in the crate graph</span>\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"k\">fn</span> <span class=\"nf\">with_single_file</span><span class=\"p\">(</span><span class=\"n\">text</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"bp\">Self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FileId</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">fixture</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ChangeFixture</span>::<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">db</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 253110498,
        "sender_full_name": "matklad",
        "timestamp": 1631547383
    },
    {
        "content": "<p>I think something like this might work as an API. And we probably want to have a couple of proc-macros built-in</p>",
        "id": 253110637,
        "sender_full_name": "matklad",
        "timestamp": 1631547436
    },
    {
        "content": "<p>Ah putting that on the trait there might be better</p>",
        "id": 253110719,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1631547461
    },
    {
        "content": "<p>But exposing that API minicore-style might work as well! I don't think we'll want to have a lot of different testing macros, we probably want identity, duplicator, and something crazy like <code>reflect</code></p>",
        "id": 253110850,
        "sender_full_name": "matklad",
        "timestamp": 1631547493
    },
    {
        "content": "<p>Ah, so we don't want to load the actual <code>proc_macro_test</code> in out unit tests?</p>",
        "id": 253111001,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1631547547
    },
    {
        "content": "<p>No, the idea would be to just have some implementors of the <code>ProcMacroExpander</code> trait</p>",
        "id": 253111128,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1631547590
    },
    {
        "content": "<p>I already have a prototype working for identity which I used to debug the PR</p>",
        "id": 253111210,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1631547603
    },
    {
        "content": "<p>I just wasn't sure how we would want to expose that testing functionality</p>",
        "id": 253111257,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1631547617
    },
    {
        "content": "<p>Will check what makes more sense, minicore style or <code>WithFixture</code></p>",
        "id": 253111605,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1631547743
    },
    {
        "content": "<blockquote>\n<p>Ah, so we don't want to load the actual proc_macro_test in out unit tests?</p>\n</blockquote>\n<p>Yeah! I feel \"keep everything in a single process\" is a <strong>huuuge</strong> benefit.</p>",
        "id": 253112132,
        "sender_full_name": "matklad",
        "timestamp": 1631547925
    },
    {
        "content": "<p>Made it similar to minicore for now as it was easier and it feels more \"correct\" to me personally(can't really tell why though), <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/10225\">https://github.com/rust-analyzer/rust-analyzer/pull/10225</a></p>",
        "id": 253119800,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1631550697
    },
    {
        "content": "<p>And with that done, we can now do very fun things<br>\n<a href=\"/user_uploads/4715/BQNrVgQuVFi0btwdy_ppfi_b/wlGrTAgZNO.gif\">wlGrTAgZNO.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/BQNrVgQuVFi0btwdy_ppfi_b/wlGrTAgZNO.gif\" title=\"wlGrTAgZNO.gif\"><img src=\"/user_uploads/4715/BQNrVgQuVFi0btwdy_ppfi_b/wlGrTAgZNO.gif\"></a></div>",
        "id": 253169137,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1631571314
    },
    {
        "content": "<p>i saw this but am super curious, is there an extension that is suggesting the gray completion option after your cursor? or is that just copilot?</p>",
        "id": 254143153,
        "sender_full_name": "jhgg",
        "timestamp": 1632187725
    },
    {
        "content": "<p>I think it's a recent Code feature used by Copilot. It inlines the first item in the completion list. But it doesn't seem to be enabled by default.</p>",
        "id": 254155702,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632200307
    },
    {
        "content": "<p>It is enabled by default, but the way we send completions over lsp is incompatible with the feature in VSCode 1.60.0 so it only works with 1.60.1 and later</p>",
        "id": 254168588,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632210801
    },
    {
        "content": "<p>But I have 1.60.1 and I don't think it's working. Ah, I need to enable <code>editor.suggest.preview</code>.</p>",
        "id": 254168892,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632211028
    },
    {
        "content": "<p>Ye the setting is <code>editor.suggest.preview</code> which should have a default of <code>true</code> though</p>",
        "id": 254169076,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632211132
    },
    {
        "content": "<p>It defaults to <code>false</code> on my system</p>",
        "id": 254169270,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632211216
    },
    {
        "content": "<p>That is rather interesting <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>  <a href=\"/user_uploads/4715/NF9rVdk85fTh8An7QJw6Nj_h/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/NF9rVdk85fTh8An7QJw6Nj_h/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/NF9rVdk85fTh8An7QJw6Nj_h/image.png\"></a></div>",
        "id": 254169690,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632211446
    },
    {
        "content": "<p>That one is <code>true</code> for me</p>",
        "id": 254169906,
        "sender_full_name": "Laurențiu",
        "timestamp": 1632211567
    },
    {
        "content": "<p>oooh, I mixed them up</p>",
        "id": 254169936,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632211584
    },
    {
        "content": "<p>That one is false for me too by default, I'm sorry. Didn't notice having that set to true <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 254170004,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1632211634
    },
    {
        "content": "<p>I appreciate that your example showing us it also demonstrates the feature</p>",
        "id": 254223315,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1632237017
    }
]