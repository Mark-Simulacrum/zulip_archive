[
    {
        "content": "<p>Been reading through the token mapping source code a bit to tackle <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/9867\">https://github.com/rust-analyzer/rust-analyzer/issues/9867</a> and I am a bit confused of some things.</p>\n<p>Are <code>TokenId</code>s fully unique or only in respect to certain parts(like unique per (Macro)file)?</p>\n<p><code>TokenExpander::map_id_down</code> basically shifts the tokenids by the number of tokens in the macro(-rules) definition, does this mean this is where the IDs of the tokens for the macro expanded file start?</p>\n<p>I feel like there is more I'm not quite understanding about this but I'm unsure what it is and thus don't really know what to ask(it might really just be the token shifting that is rather confusing to me).<br>\nSo a general run-down on how this works would also be appreciated, assuming this isn't too tricky to explain.</p>",
        "id": 250178403,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629497359
    },
    {
        "content": "<p>Though I suppose this might not matter too much now since we seem to want to replace how token mapping works currently</p>",
        "id": 250178642,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629497547
    },
    {
        "content": "<p><code>TokenId</code>s might not be unique at all in the output, but they are unique when they get assigned to a syntax node by <code>syntax_node_to_token_tree</code> or <code>parse_to_token_tree</code></p>",
        "id": 250179325,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1629498048
    },
    {
        "content": "<p>For example, when a <code>macro_rules!</code> macro copies some input tokens to the output multiple times, they'll all have the same IDs</p>",
        "id": 250179351,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1629498080
    },
    {
        "content": "<p><code>TokenMap</code> currently doesn't account for that and always returns the first token</p>",
        "id": 250179377,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1629498115
    },
    {
        "content": "<p>I see, so what does the shifting of the token ids give us? And why do we shift by the maximum token id of the macro definition?</p>",
        "id": 250180090,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629498768
    },
    {
        "content": "<p>Or rather why do we have to shift them to prevent collisions</p>",
        "id": 250180232,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629498897
    },
    {
        "content": "<p>In light of recent discussions, the current logic might be bogus.</p>\n<p>The original idea was that for macro by example the expansion contains the mix of tokens form macro definition and macro call.</p>\n<p>Tokens in def and in call have identities, but ids are local to the def/expansion</p>",
        "id": 250180252,
        "sender_full_name": "matklad",
        "timestamp": 1629498921
    },
    {
        "content": "<p>ie, both def and expansion has token with id 42, but they are different tokens</p>",
        "id": 250180267,
        "sender_full_name": "matklad",
        "timestamp": 1629498948
    },
    {
        "content": "<p>when expanding, we “shift” ids, such that all ids &lt; N are from def, and all ids &gt; N are from expansion (not sure which one exactly do we shift)</p>",
        "id": 250180335,
        "sender_full_name": "matklad",
        "timestamp": 1629498992
    },
    {
        "content": "<p>For MBE in particular, an invocation has 2 token trees as input: the macro def and the invocation arguments. Both individually get <code>TokenId</code>s assigned, so they can collide, and because the output can mix tokens from both sources, they need to get shifted to avoid the collisions.</p>",
        "id": 250180384,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1629499044
    },
    {
        "content": "<p>I think this logic is largely correct even with a more correct token/span model, since we'd probably still record (relative) spans to a map and assign IDs</p>",
        "id": 250180477,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1629499120
    },
    {
        "content": "<blockquote>\n<p>For MBE in particular, an invocation has 2 token trees as input: the macro def and the invocation arguments. </p>\n</blockquote>\n<p>Oh I think this was the key piece I was missing</p>",
        "id": 250180606,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629499238
    },
    {
        "content": "<p>Thank you two, this should've made things a lot clearer now(I hope) <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 250180671,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629499294
    },
    {
        "content": "<p>So for attributes the problem then is that we aren't shifting the item input token ids by the max attribute input token ids if I get this right?</p>",
        "id": 250207581,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629537865
    },
    {
        "content": "<p>Which would make the shifting dependent on in the input?</p>",
        "id": 250207594,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629537878
    },
    {
        "content": "<p>Looks like it, managed to make it work <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> but I am certainly not satisfied with the way I did it <br>\n(Note the <code>trait</code> keyword having the keyword color instead of the struct color)<br>\n<a href=\"/user_uploads/4715/e9hTcBAIHG8fTvo6vo4jb52V/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/e9hTcBAIHG8fTvo6vo4jb52V/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/e9hTcBAIHG8fTvo6vo4jb52V/image.png\"></a></div>",
        "id": 250209637,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629540784
    },
    {
        "content": "<p>Mmh actually shifting like that wont work if there are less attribute tokens than item tokens</p>",
        "id": 250211786,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629544045
    },
    {
        "content": "<p>since they will still overlap that way</p>",
        "id": 250211792,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629544055
    },
    {
        "content": "<p>We also don't record the attribute input token ranges in the token map i just realized we probably want to do that as well somehow somewhere</p>",
        "id": 250211832,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629544092
    },
    {
        "content": "<p>So, for attributes we strip the irrelevant attributes for expansion, since an attribute shouldn't see itself in its item input. That also causes us to not map the attribute's raw input in the TokenMap. I think if we were to just map the input in the token map properly that could just fix the IDs without any extra work for us if I'm not wrong?</p>",
        "id": 250212226,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629544746
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/kGMzsfkgHRRHd277mXug_aUr/BvEJtgWTct.gif\">BvEJtgWTct.gif</a> <br>\nWill be able to make a PR soon I think <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <br>\nThen we'll see whether the approaches I've taken make sense or not</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/kGMzsfkgHRRHd277mXug_aUr/BvEJtgWTct.gif\" title=\"BvEJtgWTct.gif\"><img src=\"/user_uploads/4715/kGMzsfkgHRRHd277mXug_aUr/BvEJtgWTct.gif\"></a></div>",
        "id": 250217420,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629552004
    },
    {
        "content": "<p>Rough PR for now (that only implemented mapping down) as I have to do some other things now <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/9970\">https://github.com/rust-analyzer/rust-analyzer/pull/9970</a></p>",
        "id": 250217876,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629552702
    }
]