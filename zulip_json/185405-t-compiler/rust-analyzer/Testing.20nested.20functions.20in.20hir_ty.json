[
    {
        "content": "<p>It looks like we can't write a test like this in <code>hir_ty</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Tr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">method</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u8</span> <span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Tr</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">outer</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">().</span><span class=\"n\">method</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"c1\">//^^^^^^^^^^^ u8</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">inner</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">().</span><span class=\"n\">method</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"c1\">//^^^^^^^^^^^ u8</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This causes <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/2b55cce49ecb7b8ff5a3b7c917c469929ed643ab/crates/hir_ty/src/tests.rs#L94\">this</a> unwrap to fail, because it expects the function to be inside the main module. Is there any other way to do this than to copy all the source-to-def machinery from <code>hir</code> to <code>hir_ty</code>? (<code>hir_def</code> seems more logical, actually)</p>",
        "id": 228995060,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1614966509
    },
    {
        "content": "<p>I suppose I could come up with some hack, but at that point using source-to-def seems like the better option</p>",
        "id": 228995861,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1614966840
    },
    {
        "content": "<p>Hmm, I could copy <code>module_at_position</code> from <code>hir_def</code>, but that duplicates code too</p>",
        "id": 228997850,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1614967571
    },
    {
        "content": "<p>Looks like <code>module_for_file</code> is also duplicated. Maybe we want to expose the <code>hir_def</code> <code>TestDB</code> and reuse it in <code>hir_ty</code>?</p>",
        "id": 228998753,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1614967917
    },
    {
        "content": "<p>Yeah.... that's a tough design question. It feels like some part of source2def machinery does really belong to hir, but it is unclear which precise semantics we want there</p>",
        "id": 229098624,
        "sender_full_name": "matklad",
        "timestamp": 1615037859
    },
    {
        "content": "<p>I'll try to think about this today. Basically, what I really want is to keep hir 100% precise, but s2d is somewhat lossy</p>",
        "id": 229098695,
        "sender_full_name": "matklad",
        "timestamp": 1615037902
    },
    {
        "content": "<blockquote>\n<p>I'll try to think about this today. </p>\n</blockquote>\n<p>did happen :(</p>",
        "id": 229547510,
        "sender_full_name": "matklad",
        "timestamp": 1615321680
    },
    {
        "content": "<p>For now, I went for <code>check_infer</code> instead, which just prints all types in all (nested) functions</p>",
        "id": 229552469,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1615323483
    }
]