[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>, figured it'd be good to create a topic for that</p>",
        "id": 160104359,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1551885582
    },
    {
        "content": "<p>I'm first trying to do the basic approach, which is to complete simple <code>impl SomeTrait for SomeStruct</code> block and I have a question regarding syntax nodes</p>",
        "id": 160104439,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1551885613
    },
    {
        "content": "<p>if I understand correctly, we want to offer this assist when the cursor is under the <code>WHITESPACE, ITEM_LIST, IMPL_BLOCK</code> path (child -&gt; parent direction), correct?</p>",
        "id": 160104503,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1551885664
    },
    {
        "content": "<p>Yeah</p>",
        "id": 160104549,
        "sender_full_name": "matklad",
        "timestamp": 1551885704
    },
    {
        "content": "<p>I'd say this simpler, \"cursor has <code>ImplBlcok</code> as an ancestor\"</p>",
        "id": 160104639,
        "sender_full_name": "matklad",
        "timestamp": 1551885750
    },
    {
        "content": "<p>So, even if you are inside the function, the assist is applicable (if there are some non-oferriden functions)</p>",
        "id": 160104660,
        "sender_full_name": "matklad",
        "timestamp": 1551885773
    },
    {
        "content": "<p>but what if the cursor is inside: <code>impl X for Y { fn some (&amp;self) {&lt;|&gt;} }</code>?</p>",
        "id": 160104702,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1551885793
    },
    {
        "content": "<p>oh yeah</p>",
        "id": 160104708,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1551885797
    },
    {
        "content": "<p>That is, being super-fine-grained about where assist is applicable is usually to super important</p>",
        "id": 160104711,
        "sender_full_name": "matklad",
        "timestamp": 1551885799
    },
    {
        "content": "<p>I thought we want to do that only when the cursor is in a 'freestanding' position in the impl block</p>",
        "id": 160104730,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1551885811
    },
    {
        "content": "<p>is usually <strong>not</strong> super important</p>",
        "id": 160104745,
        "sender_full_name": "matklad",
        "timestamp": 1551885828
    },
    {
        "content": "<p>gotcha</p>",
        "id": 160104752,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1551885832
    },
    {
        "content": "<p>another question - I did found the ast::ImplBlock node but I can't seem to find the path to a trait</p>",
        "id": 160104816,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1551885857
    },
    {
        "content": "<p>the observation here is that we only show assist if there are some methods missing. So we won't create a spurious entry in assist popup</p>",
        "id": 160104827,
        "sender_full_name": "matklad",
        "timestamp": 1551885864
    },
    {
        "content": "<p>I think this is implemented manually in <a href=\"http://ast.rs\" target=\"_blank\" title=\"http://ast.rs\">ast.rs</a></p>",
        "id": 160104851,
        "sender_full_name": "matklad",
        "timestamp": 1551885885
    },
    {
        "content": "<p>(the awkward moment when you browse to a Serbian site <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span> )</p>",
        "id": 160104881,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1551885907
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>impl ImplBlock {\n    pub fn target_type(&amp;self) -&gt; Option&lt;&amp;TypeRef&gt; {\n        match self.target() {\n            (Some(t), None) | (_, Some(t)) =&gt; Some(t),\n            _ =&gt; None,\n        }\n    }\n\n    pub fn target_trait(&amp;self) -&gt; Option&lt;&amp;TypeRef&gt; {\n        match self.target() {\n            (Some(t), Some(_)) =&gt; Some(t),\n            _ =&gt; None,\n        }\n    }\n</pre></div>",
        "id": 160104884,
        "sender_full_name": "matklad",
        "timestamp": 1551885909
    },
    {
        "content": "<p>:D</p>",
        "id": 160104918,
        "sender_full_name": "matklad",
        "timestamp": 1551885928
    },
    {
        "content": "<p>ah! I was browsing the generated impls and couldn't find it</p>",
        "id": 160104921,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1551885929
    },
    {
        "content": "<p>thanks!</p>",
        "id": 160104925,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1551885931
    },
    {
        "content": "<p>Yeah, these can't be generated, because we use a stupid \"find first node of appropriate type\" approach, and there are two types</p>",
        "id": 160105022,
        "sender_full_name": "matklad",
        "timestamp": 1551885973
    },
    {
        "content": "<p>but will the target_trait be the trait we implement for a given... target?</p>",
        "id": 160105040,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1551885987
    },
    {
        "content": "<p>(confused about naming, want to double check)</p>",
        "id": 160105071,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1551886004
    },
    {
        "content": "<p>yeah, <code>target_trait</code> should be a <code>Trait</code>, <code>target_type</code> should be a <code>Type</code>. references to traits and types use the same grammar</p>",
        "id": 160105107,
        "sender_full_name": "matklad",
        "timestamp": 1551886035
    },
    {
        "content": "<p>And I actually can't recall an easy way to resolve <code>ast::TypeRef</code> to a trait...</p>",
        "id": 160105151,
        "sender_full_name": "matklad",
        "timestamp": 1551886069
    },
    {
        "content": "<p>perhaps we just don't have one and it needs to be implemented?</p>",
        "id": 160105161,
        "sender_full_name": "matklad",
        "timestamp": 1551886080
    },
    {
        "content": "<p>To do this, you'll need to check that <code>TypeRef</code> is, in fact, a path type, and resolve it</p>",
        "id": 160105242,
        "sender_full_name": "matklad",
        "timestamp": 1551886114
    },
    {
        "content": "<blockquote>\n<p>perhaps we just don't have one and it needs to be implemented?</p>\n</blockquote>\n<p>yeah I think we don't have it yet, will soon need it though ;)</p>",
        "id": 160105353,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551886188
    },
    {
        "content": "<p>that the target trait is a <code>TypeRef</code> is actually a bit weird, but I guess syntactically it is</p>",
        "id": 160105451,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551886224
    },
    {
        "content": "<p>though I wonder if it should maybe already be a different type in the HIR</p>",
        "id": 160105467,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551886238
    },
    {
        "content": "<p>cool, thanks! I'll look around some more then</p>",
        "id": 160105475,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1551886245
    },
    {
        "content": "<p>Sorry it's going so slow, still trying to wrap my head around the structure and HIR</p>",
        "id": 160113006,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1551891276
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> from what I understand I can get resolver for a current position via <code>hir::source_binder::resolver_for_position</code></p>",
        "id": 160113040,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1551891308
    },
    {
        "content": "<p>and I need that <code>Resolver</code> to <code>resolve_path</code></p>",
        "id": 160113048,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1551891317
    },
    {
        "content": "<p>so I think I did all that and I think I can see two approaches clearing up - HIR-based (using more concrete definitions) and syntax-based (operating solely on nodes)</p>",
        "id": 160113098,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1551891362
    },
    {
        "content": "<p>you were saying you prefer syntax-oriented solution, right?</p>",
        "id": 160113140,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1551891374
    },
    {
        "content": "<p>right now, basically I go from <code>hir::Trait</code> (obtained via <code>Resolver::resolve_path</code> and the inner <code>hir::Resolution::Def(hir::ModuleDef::Trait(trait: hir::Trait))</code>) by calling <code>source()</code> which gets me <code>ast::TraitDef</code></p>",
        "id": 160113203,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1551891472
    },
    {
        "content": "<p>I assume I need to scan the syntax children of that <code>ast::TraitDef</code>, get <code>ItemList</code> and compare the difference with the <code>ItemList</code> returned from our <code>ast::ImplBlock</code>? (Excuse the types and paths everywhere, still trying to build a mental model of everything here <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> )</p>",
        "id": 160113312,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1551891552
    },
    {
        "content": "<p>Yeah, I think that's a possible approach</p>",
        "id": 160113766,
        "sender_full_name": "matklad",
        "timestamp": 1551891844
    },
    {
        "content": "<p>using syntax is nice, because you can copy-paste function prototype, with argument names and such</p>",
        "id": 160113791,
        "sender_full_name": "matklad",
        "timestamp": 1551891865
    },
    {
        "content": "<p>with hir approach, you'll have to reconstruct the signature yourself</p>",
        "id": 160113798,
        "sender_full_name": "matklad",
        "timestamp": 1551891879
    },
    {
        "content": "<p>right, makes sense</p>",
        "id": 160113842,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1551891910
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 160113865,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1551891934
    },
    {
        "content": "<p>In other words, for Hir, long-term, we'll need a pretty-printing infra  with the logic like \"if the source is available, use that; otherwise, synthesize arbitrary names and pretty-print the code\". </p>\n<p>However, building that infra requires some effort, and we can totally live without it for now :)</p>",
        "id": 160114120,
        "sender_full_name": "matklad",
        "timestamp": 1551892120
    },
    {
        "content": "<p>yeah, figured that might be the case</p>",
        "id": 160114746,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1551892576
    },
    {
        "content": "<p>Gotta dash now, got to fetching the impl items list for both trait def and the current impl block</p>",
        "id": 160114757,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1551892595
    },
    {
        "content": "<p>I'll continue later today :)</p>",
        "id": 160114765,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1551892603
    },
    {
        "content": "<p>BTW, here's the code here from IntelliJ: <a href=\"https://github.com/intellij-rust/intellij-rust/blob/master/src/main/kotlin/org/rust/ide/refactoring/implementMembers/impl.kt\" target=\"_blank\" title=\"https://github.com/intellij-rust/intellij-rust/blob/master/src/main/kotlin/org/rust/ide/refactoring/implementMembers/impl.kt\">https://github.com/intellij-rust/intellij-rust/blob/master/src/main/kotlin/org/rust/ide/refactoring/implementMembers/impl.kt</a></p>",
        "id": 160114873,
        "sender_full_name": "matklad",
        "timestamp": 1551892683
    },
    {
        "content": "<p>we'd want to insert type parameters if you have something like <code>impl Trait&lt;Foo&gt; for MyStruct</code> though, so we won't be able to just use AST...</p>",
        "id": 160115378,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551893019
    },
    {
        "content": "<p>I mean, for now it's fine I'd say, but it's something to think about</p>",
        "id": 160115402,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1551893037
    },
    {
        "content": "<p>Yeah, that the bit of that \"elaborate pretty printing\"</p>",
        "id": 160115466,
        "sender_full_name": "matklad",
        "timestamp": 1551893050
    },
    {
        "content": "<p>Ideally, hir should not care about parameter names (patterns), and ast should not care about substitutions, and there should be a separate thing to unify the two</p>",
        "id": 160115521,
        "sender_full_name": "matklad",
        "timestamp": 1551893101
    },
    {
        "content": "<p>I'm trying to figure out what node to replace in order to get proper indent</p>",
        "id": 160151100,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1551914789
    },
    {
        "content": "<p>and it seems like the last \"whitespace\" node for the children of ItemList make sense</p>",
        "id": 160151128,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1551914819
    },
    {
        "content": "<p>I'd like to do<code>children().rev()</code> but it seems that DoubleEndedIterator is not implemented for SyntaxNodeChildren</p>",
        "id": 160151161,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1551914850
    },
    {
        "content": "<p>however looking at <a href=\"https://docs.rs/rowan/0.3.3/src/rowan/lib.rs.html#450-453\" target=\"_blank\" title=\"https://docs.rs/rowan/0.3.3/src/rowan/lib.rs.html#450-453\">https://docs.rs/rowan/0.3.3/src/rowan/lib.rs.html#450-453</a> I think this should be trivial? Or am I missing anything</p>",
        "id": 160151173,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1551914864
    },
    {
        "content": "<p>(I guess I might as well do <code>.children().filter_map(ast::Whitespace::cast).last()</code> or similar, just this popped up so figured I'd ask away)</p>",
        "id": 160151251,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1551914925
    },
    {
        "content": "<p>I feel like there's no good answer currently for getting the proper indent :)</p>",
        "id": 160181613,
        "sender_full_name": "matklad",
        "timestamp": 1551950526
    },
    {
        "content": "<p>The ideal workflow would be to insert nodes somehow, and than to ask (currently non-existent) formatting infra \"re-indent these newly inserted nodes\"</p>",
        "id": 160181629,
        "sender_full_name": "matklad",
        "timestamp": 1551950573
    },
    {
        "content": "<p>So, I suggest not to handle indent at all, for the initial implementation: it would still be extremely useful, and one can reforamt the whole file</p>",
        "id": 160181762,
        "sender_full_name": "matklad",
        "timestamp": 1551950695
    },
    {
        "content": "<p>I think as long as the simple case, where the impl is on the top level of the file with no indentation, works, that should be enough when it comes to indentation. Rest of the indenting should be fixed when we have basic indentation formatter.</p>",
        "id": 160181979,
        "sender_full_name": "vipentti",
        "timestamp": 1551950998
    },
    {
        "content": "<p>e.g. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">thing</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">thing</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 160182074,
        "sender_full_name": "vipentti",
        "timestamp": 1551951053
    },
    {
        "content": "<p>But in the end you can always run <code>rustfmt</code> to properly format it anyway</p>",
        "id": 160182114,
        "sender_full_name": "vipentti",
        "timestamp": 1551951105
    },
    {
        "content": "<p>That said, children should definitelly be a double-ended iterator! Could you send a PR to rowan?</p>",
        "id": 160182738,
        "sender_full_name": "matklad",
        "timestamp": 1551951691
    },
    {
        "content": "<p>Posted a PR <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/947\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/947\">https://github.com/rust-analyzer/rust-analyzer/pull/947</a> that hopefully closes this issue <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 160208985,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1551973668
    },
    {
        "content": "<p>And yeah, I'll send a PR <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 160209241,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1551973843
    },
    {
        "content": "<p>yep, reviewing it right now, looks good!</p>",
        "id": 160209317,
        "sender_full_name": "matklad",
        "timestamp": 1551973908
    }
]