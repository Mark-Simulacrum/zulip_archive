[
    {
        "content": "<p>I've finally wrapped up my course about Rust, so I have more time to hack on the analyzer.</p>\n<p>I am doing some refactorings now, and observing that it is pretty slow. Will hopefully look into that. I have three hypothesis:</p>\n<ul>\n<li>chalk is slow</li>\n<li>macros are slow</li>\n<li>either 1 or 2 is true, and, in addition, we do something stupid in the langauge server, like recomputing diagnostics multiple times</li>\n</ul>",
        "id": 166121287,
        "sender_full_name": "matklad",
        "timestamp": 1558387677
    },
    {
        "content": "<p>The diagnostics thing is definitely real. I've also noticed sometimes that things get so bad it hangs up new line insertion.</p>",
        "id": 166122130,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1558388437
    },
    {
        "content": "<p>And this is the third hypothesis: slow diagnostics shouldn't block interactive features...</p>\n<p>I wonder what's the best way to design for that? I guess, in the main loop, we should have two thread pools:</p>\n<ul>\n<li>one for low-priority cancelable background tasks</li>\n<li>one for top-priority interactive calls</li>\n</ul>",
        "id": 166122248,
        "sender_full_name": "matklad",
        "timestamp": 1558388558
    },
    {
        "content": "<p>I think Chalk integration is at least a big part of it, and I think I'll switch it to my fuel branch</p>",
        "id": 166147816,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1558422551
    },
    {
        "content": "<p>Yeah, but I am also pretty sure that we don't do a good job prioritizing queries. For example, when you open the new project and ask for document symbobls, you have to wait until the whole project is processed, but, iirc, this needs only syntax.</p>\n<p>I guess, in addition to fuel, we should have \"weights\", which allow us to selectively slow-down particular subsystems, to make sure that only relevant functionality is degraded, and not the whole server</p>",
        "id": 166148625,
        "sender_full_name": "matklad",
        "timestamp": 1558423593
    },
    {
        "content": "<p>Am I right in remembering that we do not support the cancellation request? Is it possible that cancellation requests are coming through and we aren't processing them so things are getting backed up?</p>",
        "id": 166171968,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1558445373
    },
    {
        "content": "<p>We don't support client-initiated cancellation, but I think it shouldn't be relevant</p>",
        "id": 166172257,
        "sender_full_name": "matklad",
        "timestamp": 1558445578
    },
    {
        "content": "<p>I've done some quick profiling and the picture I see is that chalk is sometimes quite slow</p>",
        "id": 166172285,
        "sender_full_name": "matklad",
        "timestamp": 1558445594
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>       2937ms - diagnostics\n           2243ms - implements_query\n</pre></div>",
        "id": 166172311,
        "sender_full_name": "matklad",
        "timestamp": 1558445619
    },
    {
        "content": "<p>There are also quite some queries  which take a loong time themselves, but don't have long deps listed</p>",
        "id": 166172417,
        "sender_full_name": "matklad",
        "timestamp": 1558445686
    },
    {
        "content": "<p>I <em>think</em> this is because thouse queries are actually blocked on that one slow chalk query</p>",
        "id": 166172438,
        "sender_full_name": "matklad",
        "timestamp": 1558445703
    },
    {
        "content": "<p><code>       8568ms - crate_def_map_query</code></p>",
        "id": 166172492,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558445740
    },
    {
        "content": "<p>is this normal?</p>",
        "id": 166172494,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558445744
    },
    {
        "content": "<p>For the initial load -- yeah</p>",
        "id": 166172507,
        "sender_full_name": "matklad",
        "timestamp": 1558445759
    },
    {
        "content": "<p><code>      11447ms - diagnostics</code></p>",
        "id": 166172532,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558445763
    },
    {
        "content": "<p>yeah, some Chalk queries can basically take arbitrarily long as long as we don't limit them</p>",
        "id": 166172632,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1558445844
    },
    {
        "content": "<p>We probably want to add cancellation support to chalk at some point as well</p>",
        "id": 166172721,
        "sender_full_name": "matklad",
        "timestamp": 1558445890
    },
    {
        "content": "<p>... maybe we should just drive the chalk solver loop ourselves <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 166172763,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1558445923
    },
    {
        "content": "<p>if we did, cancellation and fuel would be easy</p>",
        "id": 166172793,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1558445950
    },
    {
        "content": "<p>would this be enough?</p>\n<p>Like, if the loop yields next solution, there can be arbitrary computations inside (nested loops, for example)</p>",
        "id": 166172825,
        "sender_full_name": "matklad",
        "timestamp": 1558445989
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> could you also create \"chalk is slow\" issue in the chalk repo? :-) You've looked into it way more than I did, so you should better understand what \"slow\" means.  I hope if we put this on the radar for the chalk developers, they'll come up with some nice optimizations :-)</p>",
        "id": 166173083,
        "sender_full_name": "matklad",
        "timestamp": 1558446147
    },
    {
        "content": "<p>they are usually fast, though, I think. I'm not very familiar with the details, but when it needs to solve a nested goal, it just does one step there and then returns a 'no results yet, might have more' error (<a href=\"https://github.com/rust-lang/chalk/blob/3238c6d0bc7d09b6eebe069ebd47dfabae787082/chalk-engine/src/logic.rs#L51\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/blob/3238c6d0bc7d09b6eebe069ebd47dfabae787082/chalk-engine/src/logic.rs#L51\">https://github.com/rust-lang/chalk/blob/3238c6d0bc7d09b6eebe069ebd47dfabae787082/chalk-engine/src/logic.rs#L51</a>)</p>",
        "id": 166173116,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1558446179
    },
    {
        "content": "<p>hm yeah, maybe I should try to reproduce some slow cases in the chalk test harness</p>",
        "id": 166173165,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1558446210
    },
    {
        "content": "<p>Just to clarify, the slowness is due to chalk exploring some exponential search space, and not due to the fact that some simple optimizations (aka accidentally quadratic) are missing?</p>",
        "id": 166173304,
        "sender_full_name": "matklad",
        "timestamp": 1558446315
    },
    {
        "content": "<p>I think in general, they know this though -- it's what e.g. <a href=\"https://github.com/rust-lang/chalk/issues/217\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/217\">https://github.com/rust-lang/chalk/issues/217</a> and <a href=\"https://github.com/rust-lang/chalk/issues/80\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/80\">https://github.com/rust-lang/chalk/issues/80</a> are about</p>",
        "id": 166173357,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1558446355
    },
    {
        "content": "<p>My guess would be that Chalk is really inefficient in searching some goals, instead of it getting too much input</p>",
        "id": 166173379,
        "sender_full_name": "detrumi",
        "timestamp": 1558446362
    },
    {
        "content": "<p>Yeah, the non-enumerable goals problem is one where Chalk is looking at <code>Sized(?T)</code> first, which is a really bad search order</p>",
        "id": 166173466,
        "sender_full_name": "detrumi",
        "timestamp": 1558446409
    },
    {
        "content": "<p>the cases I've seen are mostly that you have something like <code>where ?0: Foo, ?0: Send</code> and it tries enumerating every single type that implements <code>Send</code>, even though there might be just a few that implement <code>Foo</code>; or variations of that</p>",
        "id": 166173472,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1558446421
    },
    {
        "content": "<p>which is exacerbated by us having lots of cases where there is no solution, so in our case <code>?0: Foo</code> might actually have no solution and it really tries to enumerate <em>all</em> types</p>",
        "id": 166173609,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1558446523
    },
    {
        "content": "<p>Not sure if changing the ordering would help in that case</p>",
        "id": 166173679,
        "sender_full_name": "detrumi",
        "timestamp": 1558446576
    },
    {
        "content": "<p>if we know that a certain clause has no solutions at all, we can immediately stop, right?</p>",
        "id": 166173764,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1558446607
    },
    {
        "content": "<p>Ah yes, it'll know whether <code>Foo</code> is implemented, and only search through the <code>Send</code> part if some of those impls depend on that</p>",
        "id": 166173837,
        "sender_full_name": "detrumi",
        "timestamp": 1558446675
    },
    {
        "content": "<p>This seems similar to RDBMS's join problem, can we solve it same fashion? I.e. estimating number of impls per trait</p>",
        "id": 166174441,
        "sender_full_name": "Hoang Luu",
        "timestamp": 1558447027
    },
    {
        "content": "<p>that's the direction that <a href=\"https://github.com/rust-lang/chalk/issues/80\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/80\">https://github.com/rust-lang/chalk/issues/80</a> goes in, I think</p>",
        "id": 166174518,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1558447080
    },
    {
        "content": "<p><a href=\"https://github.com/frankmcsherry/blog/blob/master/posts/2018-05-19.md#addendum-2018-05-21-treefrog-leapjoin\" target=\"_blank\" title=\"https://github.com/frankmcsherry/blog/blob/master/posts/2018-05-19.md#addendum-2018-05-21-treefrog-leapjoin\">https://github.com/frankmcsherry/blog/blob/master/posts/2018-05-19.md#addendum-2018-05-21-treefrog-leapjoin</a> is an interesting read on the topic</p>",
        "id": 166174658,
        "sender_full_name": "matklad",
        "timestamp": 1558447140
    },
    {
        "content": "<p>of joins</p>",
        "id": 166174670,
        "sender_full_name": "matklad",
        "timestamp": 1558447145
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/JWovhLE55EYjMxYwjtkl3z0D/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/JWovhLE55EYjMxYwjtkl3z0D/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/JWovhLE55EYjMxYwjtkl3z0D/pasted_image.png\"></a></div>",
        "id": 166175134,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558447419
    },
    {
        "content": "<p>ugh, so slow</p>",
        "id": 166175139,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558447422
    },
    {
        "content": "<p>you're right I just flipped trace on and cancellation is pretty rare</p>",
        "id": 166175231,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1558447457
    },
    {
        "content": "<p>could running <code>cargo check</code> block typing (e.g. adding a newline) in RA?</p>",
        "id": 166175894,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558447850
    },
    {
        "content": "<p>No I don't believe that it does. I've seen this happen with <code>cargo watch</code> disabled.</p>",
        "id": 166176058,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1558447952
    },
    {
        "content": "<p>As well as no issue when running <code>cargo check</code> while typing</p>",
        "id": 166176088,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1558447978
    },
    {
        "content": "<p>I just saw RA thinking that <code>cargo check</code> is running while it wasn't</p>",
        "id": 166176150,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558448027
    },
    {
        "content": "<p>is ra_cli's <code>rust-analysis</code> a good way to bench parts of ra?</p>",
        "id": 166176285,
        "sender_full_name": "memoryruins",
        "timestamp": 1558448108
    },
    {
        "content": "<p>ran valgrind massif and callgrind on top of it as it analyzed ra's repo an hour ago. looks like it captured a good bit of data. I won't be available to look closer until this afternoon though</p>",
        "id": 166176329,
        "sender_full_name": "memoryruins",
        "timestamp": 1558448147
    },
    {
        "content": "<p>attaching a zip containing data and two screenshots (of kcachegrind and massif-visualizer) if anyone can make better use of them in the meantime <a href=\"/user_uploads/4715/fwzR1MaBEg83LAFCGsP1swU6/ra-massif-callgrind.zip\" target=\"_blank\" title=\"ra-massif-callgrind.zip\">ra-massif-callgrind.zip</a></p>",
        "id": 166176420,
        "sender_full_name": "memoryruins",
        "timestamp": 1558448198
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> Currently the toggling of animation about <code>cargo check</code> is just a simple string comparison to <code>'[Finished running'</code>. So maybe it fail to parse it. However, it should not related to this issue.</p>",
        "id": 166182689,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1558452339
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> did you intend to disable Chalk in <a href=\"https://github.com/rust-analyzer/rust-analyzer/commit/26463f189ff75e92990375ee5ae08d3903d39e66\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/commit/26463f189ff75e92990375ee5ae08d3903d39e66\">https://github.com/rust-analyzer/rust-analyzer/commit/26463f189ff75e92990375ee5ae08d3903d39e66</a>?</p>",
        "id": 166195085,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558460722
    },
    {
        "content": "<p>absolutelly nor</p>",
        "id": 166196183,
        "sender_full_name": "matklad",
        "timestamp": 1558461409
    },
    {
        "content": "<p>that one time when you decide that it's fine to send a trivial PR without bors...</p>",
        "id": 166196277,
        "sender_full_name": "matklad",
        "timestamp": 1558461475
    },
    {
        "content": "<p>ran <code>valgrind --tool=callgrind ~/projects/contribute/rust-analyzer/target/release/ra_cli analysis-stats</code> on a handful of crates, such as RA itself, cranelife, crossterm, and regex.</p>",
        "id": 166203787,
        "sender_full_name": "memoryruins",
        "timestamp": 1558466458
    },
    {
        "content": "<p>for each project, <code>ra_parser::parser::Parser::nth</code> is calling a handful of functions from <code>ra_mbe::subtree_source</code> that make-up for the majority of instruction reads/calls, drastically outnumbering everything else <code>rust-analysis</code> is doing.</p>",
        "id": 166203793,
        "sender_full_name": "memoryruins",
        "timestamp": 1558466461
    },
    {
        "content": "<p>tried <code>rust-analysis</code> on a fresh <code>cargo new &lt;crate&gt;</code> without any changes. it reported 696965 calls to <code>ra_mbe::subtree_source::SubTreeWalker::walk_token</code> from <code>WalkCursor::current</code>, 9689599 calls in <code>WalkerOwner::get</code> from within <code>is_token_joint_to_next</code>, 15248879 calls in <code>WalkerOwner::get</code> from within <code>&lt;ra_mbe::subtree_source::SubtreeTokenSource as ra_parser::TokenSource&gt;::token_kind</code> in an empty fresh project. running a <code>perf record</code> also has <code>ra_mbe::subtree_source::WalkerOwner::get</code> at the top of the list of overhead.</p>",
        "id": 166203814,
        "sender_full_name": "memoryruins",
        "timestamp": 1558466472
    },
    {
        "content": "<p>disclaimer: today is the first time I've used callgrind, so although the above stood out, I might be missing something :)</p>",
        "id": 166204942,
        "sender_full_name": "memoryruins",
        "timestamp": 1558467172
    },
    {
        "content": "<p>I think callgrind gives you precise statistic regarding the number of calls, but is not very precise when it comes to real time measurnments</p>",
        "id": 166205103,
        "sender_full_name": "matklad",
        "timestamp": 1558467268
    },
    {
        "content": "<p>I assume that includes <code>rust-src</code>? Is the standard library code mbe-heavy?</p>",
        "id": 166206556,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558468377
    },
    {
        "content": "<p>makes sense, the manual said to focus more on the instruction reads/Ir in the source view, but the above functions stood out in that regard too.</p>",
        "id": 166206808,
        "sender_full_name": "memoryruins",
        "timestamp": 1558468571
    },
    {
        "content": "<p><code>rust-src</code> sounds like a possibility. I need to look in what all <code>analysis-stats</code>as a command includes. noticed it used in another PR for a bench and rolled with it</p>",
        "id": 166207007,
        "sender_full_name": "memoryruins",
        "timestamp": 1558468739
    }
]