[
    {
        "content": "<p>Hi! Is there any pattern to determine if Windows drive letter has to be lower-cased or upper-cased? Kinda stuck with <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/7596\">https://github.com/rust-analyzer/rust-analyzer/pull/7596</a>, because of failing Windows build <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 225836530,
        "sender_full_name": "ivan770",
        "timestamp": 1612964416
    },
    {
        "content": "<p>I think main trouble for understanding is that <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/7596/checks?check_run_id=1871366255#step:9:2450\">https://github.com/rust-analyzer/rust-analyzer/pull/7596/checks?check_run_id=1871366255#step:9:2450</a> and <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/7596/checks?check_run_id=1871366255#step:9:2457\">https://github.com/rust-analyzer/rust-analyzer/pull/7596/checks?check_run_id=1871366255#step:9:2457</a> have different drive letters, even though they are in the same response.</p>",
        "id": 225836786,
        "sender_full_name": "ivan770",
        "timestamp": 1612964527
    },
    {
        "content": "<p>Hm</p>",
        "id": 225836848,
        "sender_full_name": "matklad",
        "timestamp": 1612964567
    },
    {
        "content": "<p>I think this is more complicated that that, sadly. The problem is, there isn't an easy way to write tests at this layer of abstraction. But that should be OK, because this layer of abstraction should be relatively dumb.</p>",
        "id": 225837029,
        "sender_full_name": "matklad",
        "timestamp": 1612964664
    },
    {
        "content": "<p>That is, the problem is that the code we want to test lives in the place where testing is awkward. We can do one of the two:</p>\n<ul>\n<li>merge the code as is, without tests, and I'll refactor it to be more testable</li>\n<li>I can write some mentoring instructions for the refactor I have in mind</li>\n</ul>",
        "id": 225837197,
        "sender_full_name": "matklad",
        "timestamp": 1612964754
    },
    {
        "content": "<p>I'm not sure if we really need to remove those tests, since they are testing Linux/Mac at the very least</p>",
        "id": 225837359,
        "sender_full_name": "ivan770",
        "timestamp": 1612964829
    },
    {
        "content": "<p>That's the problem exactly: there's no reason why reference code lens need to have anything to do with  mac vs linux.</p>",
        "id": 225837541,
        "sender_full_name": "matklad",
        "timestamp": 1612964904
    },
    {
        "content": "<p>the very fact that we observe the diff means that we are testing the wrong thing here.</p>",
        "id": 225837591,
        "sender_full_name": "matklad",
        "timestamp": 1612964931
    },
    {
        "content": "<p>Oh, got it</p>",
        "id": 225837774,
        "sender_full_name": "ivan770",
        "timestamp": 1612965009
    },
    {
        "content": "<p>Roughly, everything there is in <code>handle_code_lens</code> should be a method of <code>Analysis</code> instead</p>",
        "id": 225838025,
        "sender_full_name": "matklad",
        "timestamp": 1612965133
    },
    {
        "content": "<p>and <code>handle_</code> should just convert that to LSP, instead of containing actual logic, like </p>\n<div class=\"codehilite\"><pre><span></span><code>matches!(\n                    it.kind,\n                    SymbolKind::Trait | SymbolKind::Struct | SymbolKind::Enum | SymbolKind::Union\n                )\n</code></pre></div>",
        "id": 225838135,
        "sender_full_name": "matklad",
        "timestamp": 1612965188
    },
    {
        "content": "<p>So, I imagine we want API like the following in ide/lib.rs</p>\n<div class=\"codehilite\"><pre><span></span><code>pub struct Annotation {\n    range: TextRange,\n    annotation_kind: AnnotationKind\n}\npub enum AnnotationKind {\n    Runnable,\n    HasImpls,\n    HasReferences,\n}\n\nimpl Analysis {\n    pub fn annotations(&amp;self, file_id: FileId) -&gt; Cancelable&lt;Annotation&gt; {\n    }\n\n    pub fn resolve_annotation(&amp;self, file_id: FileId) -&gt; Cancelable&lt;Option&lt;ResolvedAnnotation&gt;&gt; {\n    }\n}\n</code></pre></div>",
        "id": 225840249,
        "sender_full_name": "matklad",
        "timestamp": 1612966143
    },
    {
        "content": "<p>Than, handle_code_lens and handle_code_lens_resolve are implemented in terms of thes methonds of analysis.</p>",
        "id": 225840463,
        "sender_full_name": "matklad",
        "timestamp": 1612966217
    },
    {
        "content": "<p>Hmm. Would it be actually better, if we accepted <code>Annotation</code> in <code>resolve_annotation</code>, just as LSP sends resolve request per every unresolved CodeLens?</p>",
        "id": 225845252,
        "sender_full_name": "ivan770",
        "timestamp": 1612968003
    },
    {
        "content": "<p>right, it should be <code>resolve_annotation(&amp;self, file_id: FileId, annotation: Annotation)</code>, that is typo</p>",
        "id": 225845762,
        "sender_full_name": "matklad",
        "timestamp": 1612968228
    },
    {
        "content": "<p>If you'd like to fix that, please read <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/dev/architecture.md#crateside\">https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/dev/architecture.md#crateside</a> and <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/dev/architecture.md#cratesrust-analyzer\">https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/dev/architecture.md#cratesrust-analyzer</a> sections of architecture md, they describe the reasons why the API needs to be structured that way</p>",
        "id": 225846177,
        "sender_full_name": "matklad",
        "timestamp": 1612968372
    },
    {
        "content": "<p>Thanks! I'll take a look at it.</p>",
        "id": 225846223,
        "sender_full_name": "ivan770",
        "timestamp": 1612968395
    },
    {
        "content": "<p>Sorry for not noticing the impending yak shave from the start!</p>",
        "id": 225846299,
        "sender_full_name": "matklad",
        "timestamp": 1612968433
    },
    {
        "content": "<p>Almost done. Howerer, I still have <em>lots</em> of questions about RA architecture (mostly about where to put a function or a struct). For example, I added an <code>annotation</code> function to <code>to_proto</code> crate, and it depends on those two functions <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/de046bf4572a75cf534a2342358a422b2f18d01c/crates/rust-analyzer/src/handlers.rs#L1533-L1547\">https://github.com/rust-analyzer/rust-analyzer/blob/de046bf4572a75cf534a2342358a422b2f18d01c/crates/rust-analyzer/src/handlers.rs#L1533-L1547</a>. Where should I put both of these functions, so they would be available for <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/de046bf4572a75cf534a2342358a422b2f18d01c/crates/rust-analyzer/src/handlers.rs#L1621\">https://github.com/rust-analyzer/rust-analyzer/blob/de046bf4572a75cf534a2342358a422b2f18d01c/crates/rust-analyzer/src/handlers.rs#L1621</a> and other possible components?</p>",
        "id": 226126216,
        "sender_full_name": "ivan770",
        "timestamp": 1613130062
    },
    {
        "content": "<p>Moving to <code>ide</code> part is ready: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/7596\">https://github.com/rust-analyzer/rust-analyzer/pull/7596</a></p>",
        "id": 226134919,
        "sender_full_name": "ivan770",
        "timestamp": 1613135723
    },
    {
        "content": "<p><code>show_references_command</code> and friends return an <code>lsp_types::Command</code>, so  <code>to_proto</code> feels like an appropriate place</p>",
        "id": 226158522,
        "sender_full_name": "matklad",
        "timestamp": 1613146731
    },
    {
        "content": "<p><code>to_proto::command::show_references</code> even.</p>",
        "id": 226158575,
        "sender_full_name": "matklad",
        "timestamp": 1613146763
    },
    {
        "content": "<p>So, the helpers which return titles may live there as well.</p>",
        "id": 226158815,
        "sender_full_name": "matklad",
        "timestamp": 1613146873
    }
]