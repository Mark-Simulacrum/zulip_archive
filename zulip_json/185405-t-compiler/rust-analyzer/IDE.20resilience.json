[
    {
        "content": "<p>An interesting example illustrating the difference between compiler and IDE requirements in terms of error handling:</p>\n<div class=\"codehilite\"><pre><span></span>macro_rules! foo {\n    ($($tt:tt)*) =&gt; { foo!($($tt)*, $($tt)*); }\n}\n\nfoo!(KABOOM);\n\nfn main() {}\n</pre></div>\n\n\n<p>Here, rustc just dies with OOM, and that is sort of expected behavior. An explicit error message would be better, but this is a nice-to-have, not a requirement. </p>\n<p>IDE, otoh, has to handle this case gracefully, for two reasons:</p>\n<ul>\n<li>it is a long-lived process which you can't just restart on OOM easily</li>\n<li>IDE works with incomplete code, so it has much higher chance to encounter cases like above</li>\n</ul>",
        "id": 160855056,
        "sender_full_name": "matklad",
        "timestamp": 1552637649
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> this might actually be a fun test-case!</p>",
        "id": 163868461,
        "sender_full_name": "matklad",
        "timestamp": 1555882340
    },
    {
        "content": "<p>Yeah, here is another case : <br>\n<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=839b39d24d1ba81ae911cad8ccb8833f\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=839b39d24d1ba81ae911cad8ccb8833f\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=839b39d24d1ba81ae911cad8ccb8833f</a></p>",
        "id": 163868541,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1555882462
    },
    {
        "content": "<p>I wonder how we should handle this in salsa?</p>\n<p>If I weren't using salsa, I would implement some kind of a \"fuel\" system, which bounds not only the depth, but also the width of the expansion.</p>\n<p>(random realization: \"fuel\" idea is deeper than I thought: it's exactly the device we use to turn arbitrary recursive function into a primitive recursive one)</p>\n<p>However doing fuel in salsa is hard: if you just add it as a parameter, you loose incrementality... Perhaps we should a query for \"deeply\" expanding the macros, which internally repeatedly runs non-salsa fuel based shallow expansion?</p>",
        "id": 163868859,
        "sender_full_name": "matklad",
        "timestamp": 1555882977
    },
    {
        "content": "<p>So do you mean we  should add a separate salsa database about current <code>execute context</code> ?</p>",
        "id": 163868997,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1555883180
    },
    {
        "content": "<p>Probably no</p>",
        "id": 163869021,
        "sender_full_name": "matklad",
        "timestamp": 1555883265
    },
    {
        "content": "<p>though, trough to be told, I don't have a clear idea about this</p>",
        "id": 163869068,
        "sender_full_name": "matklad",
        "timestamp": 1555883290
    },
    {
        "content": "<p>So currently we have a query which expands a single macro</p>",
        "id": 163869072,
        "sender_full_name": "matklad",
        "timestamp": 1555883308
    },
    {
        "content": "<p>if in the result there's another macro invocation, we'll call the query again, and again, and again, etc</p>",
        "id": 163869077,
        "sender_full_name": "matklad",
        "timestamp": 1555883338
    },
    {
        "content": "<p>Adding stack depth to such a query would work</p>",
        "id": 163869091,
        "sender_full_name": "matklad",
        "timestamp": 1555883358
    },
    {
        "content": "<p>Adding fuel wouldn't</p>",
        "id": 163869094,
        "sender_full_name": "matklad",
        "timestamp": 1555883370
    },
    {
        "content": "<p>So, I wonder if we can implement fuel <em>outside</em> of the queries?</p>",
        "id": 163869097,
        "sender_full_name": "matklad",
        "timestamp": 1555883394
    },
    {
        "content": "<p>Hm, perhaps we should just add some counter to <code>DefCollector</code>?</p>",
        "id": 163869148,
        "sender_full_name": "matklad",
        "timestamp": 1555883413
    },
    {
        "content": "<p>I did do that</p>",
        "id": 163869150,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1555883426
    },
    {
        "content": "<p>For depth, IIRC</p>",
        "id": 163869153,
        "sender_full_name": "matklad",
        "timestamp": 1555883438
    },
    {
        "content": "<p>but we can have a similar counter for width</p>",
        "id": 163869155,
        "sender_full_name": "matklad",
        "timestamp": 1555883448
    },
    {
        "content": "<p>But the problem is we have to send an empty result in salsa</p>",
        "id": 163869156,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1555883453
    },
    {
        "content": "<p>Why \"empty result\" is a problem?</p>",
        "id": 163869171,
        "sender_full_name": "matklad",
        "timestamp": 1555883487
    },
    {
        "content": "<p>Only bypass it in <code>DefCollector</code> would not work</p>",
        "id": 163869172,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1555883489
    },
    {
        "content": "<p>we cal always generate an empty file or something like that?</p>",
        "id": 163869178,
        "sender_full_name": "matklad",
        "timestamp": 1555883501
    },
    {
        "content": "<p>Because another code  will query salsa for that macro again.</p>",
        "id": 163869227,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1555883530
    },
    {
        "content": "<p>Hm, could we store a list of \"poisoned\" macro calls in <code>CrateDefMap</code>?</p>",
        "id": 163869243,
        "sender_full_name": "matklad",
        "timestamp": 1555883591
    },
    {
        "content": "<p>when other code tries to construct MacroCallId for expansion, it'll check if it is poisoned in CrateDefMap</p>",
        "id": 163869249,
        "sender_full_name": "matklad",
        "timestamp": 1555883618
    },
    {
        "content": "<p>Hm, another though: what if we have stupid static fuel, which just restricts the maximum length of macro call to 65536 tokens?</p>",
        "id": 163869301,
        "sender_full_name": "matklad",
        "timestamp": 1555883668
    },
    {
        "content": "<p>That is, I think, to hit diverging behavior, we either need big depth (which is checkable by adding depth to MacroCallLoc), or wide macro invocations (which is checkable on each invocation).</p>",
        "id": 163869322,
        "sender_full_name": "matklad",
        "timestamp": 1555883722
    },
    {
        "content": "<p>I like both idea.</p>",
        "id": 163869374,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1555883783
    },
    {
        "content": "<p>I'd probably started with static width: seems easier to impl, b/c we don't have to store anything</p>",
        "id": 163869378,
        "sender_full_name": "matklad",
        "timestamp": 1555883820
    },
    {
        "content": "<p>Yeah, i will do it tmr. (Here is 6:00 am now :) )</p>",
        "id": 163869437,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1555883884
    },
    {
        "content": "<p>[Out of Topic] have you see <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/1188\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/1188\">https://github.com/rust-analyzer/rust-analyzer/issues/1188</a> ?</p>",
        "id": 163869448,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1555883926
    },
    {
        "content": "<p>Seen, but haven't looked into yat</p>",
        "id": 163869538,
        "sender_full_name": "matklad",
        "timestamp": 1555884093
    },
    {
        "content": "<p>Bye!</p>",
        "id": 163869542,
        "sender_full_name": "matklad",
        "timestamp": 1555884121
    }
]