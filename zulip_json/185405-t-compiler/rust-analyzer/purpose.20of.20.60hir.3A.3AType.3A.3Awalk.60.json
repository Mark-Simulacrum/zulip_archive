[
    {
        "content": "<p>I'm trying to find all references to type parameters in a given type, to account for them in an assist. It looks like <code>hir::Type::walk</code> skips them in many places. I'm not entirely sure what the purpose of that method is, can someone enlighten me? Is it supposed to skip parts of the type?</p>",
        "id": 241178786,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622653551
    },
    {
        "content": "<p>We don't really seem to have <em>any</em> type visiting infra that also handles lifetimes and consts, hmm</p>",
        "id": 241180793,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622654487
    },
    {
        "content": "<p>Can't you use  the chalk Visitor/Fold traits?</p>",
        "id": 241181562,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1622654832
    },
    {
        "content": "<p>probably yeah, are they supposed to be used outside of <code>hir_ty</code>?</p>",
        "id": 241182190,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622655106
    },
    {
        "content": "<p>Probably not, I don't think we expose chalk outside of hir_ty/hir?</p>",
        "id": 241182292,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1622655141
    },
    {
        "content": "<p><code>hir_ty</code> also has its own simlified <code>TypeWalk</code> trait</p>",
        "id": 241182353,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622655175
    },
    {
        "content": "<p>The overall design constraint here is that we don't really want to expose the inner strucutre of <code>Type</code> to the IDE</p>",
        "id": 241182375,
        "sender_full_name": "matklad",
        "timestamp": 1622655185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink  [he/him]</span> what assist would that be?</p>",
        "id": 241292893,
        "sender_full_name": "matklad",
        "timestamp": 1622655609
    },
    {
        "content": "<p><code>extract_type_alias</code></p>",
        "id": 241292920,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622655624
    },
    {
        "content": "<p>Hm, why do you need to know the structure of the type for that? Why isn't <code>hir::Type::to_string</code> not enough?</p>",
        "id": 241293613,
        "sender_full_name": "matklad",
        "timestamp": 1622655979
    },
    {
        "content": "<p>because the extracted type might reference type parameters of the containing item</p>",
        "id": 241294272,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622656286
    },
    {
        "content": "<p>and I want to make the type alias generic over those</p>",
        "id": 241294315,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622656301
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"cp\">$</span><span class=\"mi\">0</span><span class=\"n\">X</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"cp\">$</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>should result in</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">Type</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Type</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 241294425,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622656335
    },
    {
        "content": "<p>I think <code>hir::Type::walk</code> is currently only used for hover links, which have ... special requirements</p>",
        "id": 241295148,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622656643
    },
    {
        "content": "<p>it might be better to just expose special-purpose methods for now</p>",
        "id": 241295194,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622656661
    },
    {
        "content": "<p>it's still kind of surprising that it skips parameters though</p>",
        "id": 241295311,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622656695
    },
    {
        "content": "<p>I don't think places that are actually visible in the code should be skipped</p>",
        "id": 241295363,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622656730
    },
    {
        "content": "<p>soo maybe you can actually improve it and use it</p>",
        "id": 241295528,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622656793
    },
    {
        "content": "<p>the <code>TypeWalk</code> trait should go away</p>",
        "id": 241295748,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1622656862
    }
]