[
    {
        "content": "<p>Would love to get some feedback on <a href=\"https://github.com/rust-analyzer/rowan/pull/13\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rowan/pull/13\">https://github.com/rust-analyzer/rowan/pull/13</a></p>\n<p>This PR makes the sytnax tree library we use non-generic, which might be a good trade off considering that the tree itself never uses generic parameters itself.</p>",
        "id": 162606308,
        "sender_full_name": "matklad",
        "timestamp": 1554455908
    },
    {
        "content": "<p>I've been using <code>rowan</code> as the underlying framework for my parser and I'm a big fan of this. Is there any appetite in pulling out <code>rust-analyzer/ra_parser</code>s event-driven parsing framework to rowan (or a separate crate)? I think it has a lot of potential for generic IDE tooling, e.g., could be used to build a Rust solution to IntelliJ's GrammarKit.</p>",
        "id": 164385032,
        "sender_full_name": "Gary Tierney",
        "timestamp": 1556454818
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210215\">@Gary Tierney</span> I've actually experimented with rust Grammar Kit thing before rowan: <a href=\"https://github.com/matklad/fall\" target=\"_blank\" title=\"https://github.com/matklad/fall\">https://github.com/matklad/fall</a></p>",
        "id": 164385165,
        "sender_full_name": "matklad",
        "timestamp": 1556455041
    },
    {
        "content": "<p>was able to parse full rust with ti: <a href=\"https://github.com/matklad/fall/blob/master/lang/rust/syntax/src/rust.fall\" target=\"_blank\" title=\"https://github.com/matklad/fall/blob/master/lang/rust/syntax/src/rust.fall\">https://github.com/matklad/fall/blob/master/lang/rust/syntax/src/rust.fall</a></p>",
        "id": 164385168,
        "sender_full_name": "matklad",
        "timestamp": 1556455060
    },
    {
        "content": "<p>As for pulling away the parsing framework, that's a good question!</p>",
        "id": 164385218,
        "sender_full_name": "matklad",
        "timestamp": 1556455106
    },
    {
        "content": "<p>I am increasingly becoming convinced that parser and syntax tree should be completely orthogonal</p>",
        "id": 164385223,
        "sender_full_name": "matklad",
        "timestamp": 1556455126
    },
    {
        "content": "<p>So, there probably shouldn't be \"rowan-specific\" parser framework</p>",
        "id": 164385244,
        "sender_full_name": "matklad",
        "timestamp": 1556455196
    },
    {
        "content": "<p>I am however not sure how exactly the API between the parser and the tree builder should look like</p>",
        "id": 164385292,
        "sender_full_name": "matklad",
        "timestamp": 1556455223
    },
    {
        "content": "<p>the main question here is \"to type or not to type\" :-)</p>",
        "id": 164385295,
        "sender_full_name": "matklad",
        "timestamp": 1556455237
    },
    {
        "content": "<p>If we go with untyped version, that something like IntelliJ's marks (don't remmeber how they are called) should work</p>",
        "id": 164385309,
        "sender_full_name": "matklad",
        "timestamp": 1556455292
    },
    {
        "content": "<p>However, the API should allow to construct a typed tree as well, and I don't know how to do that nicely</p>",
        "id": 164385345,
        "sender_full_name": "matklad",
        "timestamp": 1556455322
    },
    {
        "content": "<p>that actually is an extremely interesting question! One thing we'd want to do in the future is to share the parser between rust-analyzer and rustc, and this setup will require us to have this kind of abstract parser</p>",
        "id": 164385372,
        "sender_full_name": "matklad",
        "timestamp": 1556455368
    },
    {
        "content": "<p>e.g., a tree of some syntax tree type <code>T</code>, as opposed to a tree of <code>rowan::SyntaxKind</code>?</p>",
        "id": 164385437,
        "sender_full_name": "Gary Tierney",
        "timestamp": 1556455479
    },
    {
        "content": "<p>Not just a single type T, but like a tree of <code>StructDef</code> which has <code>FieldDef</code>s inside</p>",
        "id": 164385539,
        "sender_full_name": "matklad",
        "timestamp": 1556455638
    },
    {
        "content": "<p>Like, when you write traditional parser, the types in AST guide you</p>",
        "id": 164385545,
        "sender_full_name": "matklad",
        "timestamp": 1556455659
    },
    {
        "content": "<p>hmm, I will think about that a bit and how it might fit into the existing <code>TreeSink</code> work. I can appreciate the independence of syntax tree and parser. I think that's what enables making rapid changes to this sort of stuff.</p>",
        "id": 164385751,
        "sender_full_name": "Gary Tierney",
        "timestamp": 1556455952
    }
]