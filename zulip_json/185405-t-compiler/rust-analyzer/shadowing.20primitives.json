[
    {
        "content": "<p>Hrm... so apparently, you can define a module with the same name as a primitive, and types will still resolve to that primitive: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7a99a7ce7b6629098b5c2512cb4737c3\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7a99a7ce7b6629098b5c2512cb4737c3\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7a99a7ce7b6629098b5c2512cb4737c3</a><br>\ne.g. there's a <code>str</code> module in scope in liballoc's <code>string</code> module, so we don't currently resolve <code>str</code> correctly there in types</p>",
        "id": 168163223,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1560539580
    },
    {
        "content": "<p>in related news, I've got dot completions through <code>Arc</code>s working now, but the deref implementation of <code>String</code> still doesn't work because of the above ;)</p>",
        "id": 168163263,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1560539628
    },
    {
        "content": "<p>I think this worked correctly before <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/1352\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/1352\">rust-analyzer#1352</a>... shouldn't be too hard to fix though</p>",
        "id": 168163563,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1560539868
    },
    {
        "content": "<p>although... since you <em>can</em> apparently shadow primitives with structs, that may make it more complicated :/</p>",
        "id": 168163776,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1560540013
    },
    {
        "content": "<p>hm, what does <code>str::len</code> even mean if you have a <code>str</code> module?</p>",
        "id": 168163854,
        "sender_full_name": "matklad",
        "timestamp": 1560540102
    },
    {
        "content": "<p>perhaps shadowing <strong>is</strong> working, but some other missing bit (like <code>pub</code>) in nares accidently exports shadowed name?</p>",
        "id": 168163925,
        "sender_full_name": "matklad",
        "timestamp": 1560540138
    },
    {
        "content": "<p>this basically makes no sense: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=19456b91117b936d251da0925c3b687b\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=19456b91117b936d251da0925c3b687b\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=19456b91117b936d251da0925c3b687b</a></p>",
        "id": 168164097,
        "sender_full_name": "matklad",
        "timestamp": 1560540274
    },
    {
        "content": "<p>wait, it's even worse than that: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=0117a00d98189990a2bd6efaa561f369\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=0117a00d98189990a2bd6efaa561f369\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=0117a00d98189990a2bd6efaa561f369</a></p>",
        "id": 168164260,
        "sender_full_name": "matklad",
        "timestamp": 1560540404
    },
    {
        "content": "<p>I'm scared to look up in rustc how this works</p>",
        "id": 168165104,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1560541053
    },
    {
        "content": "<p>I guess, I'll be spelling <code>str</code> as <code>&lt;str&gt;</code> from now on :-)</p>",
        "id": 168165182,
        "sender_full_name": "matklad",
        "timestamp": 1560541087
    },
    {
        "content": "<p>still, it might be better to err on the side of preferring the primitive instead of the module...</p>",
        "id": 168165266,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1560541178
    },
    {
        "content": "<p>that's true, yeah. Basically, we should stick the primiteves map in front, and comment-out the shadowing test</p>",
        "id": 168165380,
        "sender_full_name": "matklad",
        "timestamp": 1560541249
    },
    {
        "content": "<p>hm, not, I fear we need to handles this at least somewhat properly: std has str and i32 modules</p>",
        "id": 168165444,
        "sender_full_name": "matklad",
        "timestamp": 1560541307
    },
    {
        "content": "<p>I don't know how much resolving them correctly within std matters though... especially since they're not a problem if they're referred to by full name</p>",
        "id": 168165630,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1560541430
    },
    {
        "content": "<p>I <em>think</em> if you just move primites in front, the no longer will be resolved by a full nam</p>",
        "id": 168165732,
        "sender_full_name": "matklad",
        "timestamp": 1560541494
    },
    {
        "content": "<p>submitted <a href=\"https://github.com/dtolnay/rust-quiz/pull/20/files\" target=\"_blank\" title=\"https://github.com/dtolnay/rust-quiz/pull/20/files\">https://github.com/dtolnay/rust-quiz/pull/20/files</a> :D</p>",
        "id": 168166558,
        "sender_full_name": "matklad",
        "timestamp": 1560542085
    },
    {
        "content": "<p>haha, that's pretty weird. i'm surprised it's able to find <code>is_empty</code>! (i guess in <code>is_empty</code> is just calls <code>s.len()</code> or <code>&lt;s as str&gt;::len()</code> so it uses the actual type of s not the mod)</p>",
        "id": 168167511,
        "sender_full_name": "Pascal",
        "timestamp": 1560542763
    },
    {
        "content": "<p>Sigh, this is a backward compatibility thing.<br>\nSee the comment in <a href=\"https://github.com/rust-lang/rust/pull/32131/files\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/32131/files\">https://github.com/rust-lang/rust/pull/32131/files</a> for how the fallback to primitive types work.</p>",
        "id": 168175709,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1560550259
    },
    {
        "content": "<p>I like how Go (I <em>think</em>) dodges this issue. They basically have an <code>#[lang = \"i32\"] existential type i32;</code> somewhere in the standard library, which should guarantee the same code-path in name resolution. That is, I know they have primitives declared in the stdlib, I don't know if this is what is actually used by name resolution.</p>",
        "id": 168206643,
        "sender_full_name": "matklad",
        "timestamp": 1560602770
    }
]