[
    {
        "content": "<p>From this issue <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/6292\">https://github.com/rust-analyzer/rust-analyzer/issues/6292</a> I would like to pick this one up. Any directions or head starts?</p>",
        "id": 214298694,
        "sender_full_name": "weegee",
        "timestamp": 1603450622
    },
    {
        "content": "<p>I'm pretty sure the error means that the macro didn't expand fully, and my guess as to why would be that <code>-1.0</code> doesn't get matched as a literal because (I'm guessing) it probably gets parsed as two tokens which would form a unary expression</p>",
        "id": 214300717,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1603452242
    },
    {
        "content": "<p>Yeah, according to the spec <code>$x:literal</code> should match \"<code>-</code>? <em>LiteralExpression</em>\" <a href=\"https://doc.rust-lang.org/reference/macros-by-example.html#metavariables\">https://doc.rust-lang.org/reference/macros-by-example.html#metavariables</a></p>",
        "id": 214300929,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1603452399
    },
    {
        "content": "<p>so it gets parsed as two tokens one <code>-</code> and other <code>1.0</code> right? (When it should be a single literal <code>-1.0</code>) So where's the parsing for literals done?</p>",
        "id": 214301323,
        "sender_full_name": "weegee",
        "timestamp": 1603452690
    },
    {
        "content": "<p>it's correct that it's being parsed that way, probably our definition of a literal fragment is wrong (according to what Jonas wrote)</p>",
        "id": 214301650,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1603452931
    },
    {
        "content": "<p>I think the relevant code is <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/81609960fa30ea92e37b23dc7b025d1939626812/crates/mbe/src/mbe_expander/matcher.rs#L428\">this function</a>, which implements literals as just parsing a single literal token</p>",
        "id": 214301841,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1603453070
    },
    {
        "content": "<p>instead, literal will probably need to be a <code>FragmentKind</code> and handled by <code>expect_fragment</code></p>",
        "id": 214301931,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1603453117
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/81609960fa30ea92e37b23dc7b025d1939626812/crates/parser/src/lib.rs#L99\">https://github.com/rust-analyzer/rust-analyzer/blob/81609960fa30ea92e37b23dc7b025d1939626812/crates/parser/src/lib.rs#L99</a> I saw this, do I have to include some seperate variants to proceed?</p>",
        "id": 214323575,
        "sender_full_name": "weegee",
        "timestamp": 1603464829
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"357151\">@weegee</span> yeah, I think you'll need to add a new function to <code>grammar::fragments</code> that first parses an optional <code>-</code>, and then a literal (<code>atom::literal</code>)</p>",
        "id": 214327139,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1603466531
    }
]