[
    {
        "content": "<p>Right now the fill struct fields assist inserts <code>()</code> as the value for each field. Often times I name local variables after fields in order to use the field init shorthand. Due to the fact that the assist inserts <code>()</code> for each field, it often makes using the assist less convenient than doing it by hand.</p>\n<p>It would be nice if the fill struct fields assist checked for local variables named after fields (and with the correct type) and instead generated the shorthand for those variables.<br>\nFor example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bar</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">baz</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">quux</span>: <span class=\"kt\">char</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">baz</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&lt;|&gt;</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Here the assist would generate <code>Foo { bar, baz, quux: () }</code> instead of <code>Foo { bar: (), baz: (), quux: () }</code>.</p>\n<p>How would people feel about that change? If it's welcome I'd be happy to implement and PR it.</p>",
        "id": 250977635,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1630090260
    },
    {
        "content": "<p>Seems reasonable, I've wanted the same behavior in the past</p>",
        "id": 250978301,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1630090558
    },
    {
        "content": "<p>Agree, I don't think that would cause problems, as long as we check the types that is.</p>",
        "id": 250978534,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1630090635
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/10076\">PR up!</a></p>",
        "id": 251145633,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1630257623
    }
]