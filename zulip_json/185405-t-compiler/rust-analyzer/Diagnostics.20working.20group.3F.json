[
    {
        "content": "<p>Hey, with proc-macros enabled by default, I think we no longer have excuses for not producing diagnostics for everything we can diagnose. It seems like it's high time to make our diagnostics infra \"production ready\". This includes three things:</p>\n<ul>\n<li>Figuring our the appropriate \"pattern\" for doing diagnostics, which accounts for salsa incrementality, desugarings, id-based structure of things inside rust-analyzer and IDE specific concerns. </li>\n<li>Cleaning-up diagnostics API in rust-analyzer, such that it's easy to emit and consume diagnostics (today that's horribly complicated in comparison to, eg, assisgs)</li>\n<li>Polishing user-experience (squishing false positeves, implementing fixits, polishing error messages and ranges)</li>\n</ul>\n<p>This sounds like a great task for the next sprint. Anyone is interested in this topic?</p>",
        "id": 232253171,
        "sender_full_name": "matklad",
        "timestamp": 1617017619
    },
    {
        "content": "<p>also a strategy for merging our diagnostics with rustc's, IMO</p>",
        "id": 232257313,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1617019737
    },
    {
        "content": "<p>starting to emit typechecker diagnostics is my plan after finishing the chalk_ir move as well</p>",
        "id": 232257378,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1617019794
    },
    {
        "content": "<p>so, I guess I am interested, but currently still mostly focused on Chalk</p>",
        "id": 232258083,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1617020169
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> by \"merging\" you mean deduplication in the UI, or sharing some common library?</p>",
        "id": 232258510,
        "sender_full_name": "matklad",
        "timestamp": 1617020392
    },
    {
        "content": "<p>yeah, deduplication</p>",
        "id": 232258571,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1617020414
    },
    {
        "content": "<p>That falls under \"polishing UX\". Shouldn't be too hard -- we need to match diagnostic codes and see if the ranges intersect.</p>",
        "id": 232259183,
        "sender_full_name": "matklad",
        "timestamp": 1617020731
    },
    {
        "content": "<p>yeah</p>",
        "id": 232259210,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1617020751
    },
    {
        "content": "<p>Well, there's this infinitelly annoying issue that VS Code won't shift ranges of diagnostics on editing, but I don't feel we can do anything on our side to fix it, short of using Emacs instead.</p>",
        "id": 232259326,
        "sender_full_name": "matklad",
        "timestamp": 1617020797
    },
    {
        "content": "<p>hmm. I think we've previously discussed this, but isn't this a problem with the rustc diagnostics specifically because we only refresh them on save, but (have to) resend them on every change?</p>",
        "id": 232259417,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1617020858
    },
    {
        "content": "<p>yeah, I think that's on us</p>",
        "id": 232259432,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617020870
    },
    {
        "content": "<p>When we get the diagnostics form rustc could we try to match the spans to tokens and store some relatively stable id for the tokens? And then re-compute the spans every time we push the diagnostics to the editor.</p>",
        "id": 232259542,
        "sender_full_name": "bjorn3",
        "timestamp": 1617020913
    },
    {
        "content": "<p>That works for check on save diags, but not from the ones that are produced by a problem matcher (I think?)</p>",
        "id": 232259597,
        "sender_full_name": "matklad",
        "timestamp": 1617020945
    },
    {
        "content": "<p>Probably. But at least it may solve half of the problem.</p>",
        "id": 232259679,
        "sender_full_name": "bjorn3",
        "timestamp": 1617020996
    },
    {
        "content": "<p>the problem matcher is a pure VSCode issue anyway, the problem with the check on save diagnostics exists in every client</p>",
        "id": 232259767,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1617021023
    },
    {
        "content": "<p>Also, as a general reminder, there's this grand diagnostics dilemma  for IDEs:</p>\n<ul>\n<li>we can compute diagnostics only for the open files, ensuring roughly O(1) work for O(1) edit</li>\n<li>we can compute all diagnostics, ensuring better overall user experience</li>\n</ul>\n<p>At the moment, rust-analyzer works in the first paradigm. It might be the case that, with explicit crate graph, good incremental and fast implementation, the second would be feasible even for arbitraty big projects. </p>\n<p>IntelliJ does <code>1</code> as well. Roslyn I believe dos <code>2</code> by default, but they have a checkbox to switch to <code>1</code> for large projects.</p>\n<p>This also intersects with the search dilemma -- should we use tri-gram text search + semantic prunning (today's approach) or sould we search semantic info directly?</p>",
        "id": 232260066,
        "sender_full_name": "matklad",
        "timestamp": 1617021182
    },
    {
        "content": "<p>An option to switch between the two methods would be nice.</p>",
        "id": 232260274,
        "sender_full_name": "bjorn3",
        "timestamp": 1617021269
    },
    {
        "content": "<blockquote>\n<p>This also intersects with the search dilemma -- should we use tri-gram text search + semantic prunning (today's approach) or sould we search semantic info directly?</p>\n</blockquote>\n<p>The current way doesn't result in reduced accuracy, right?</p>",
        "id": 232260466,
        "sender_full_name": "bjorn3",
        "timestamp": 1617021371
    },
    {
        "content": "<p>For macros it does</p>",
        "id": 232260535,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617021418
    },
    {
        "content": "<p>We could make it expand <em>every single macro</em> and search the outputs too</p>",
        "id": 232260578,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617021445
    },
    {
        "content": "<p>personally, I would prefer 1) with a button that lists all diagnostics everywhere and lets you jump to them</p>",
        "id": 232260605,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1617021465
    },
    {
        "content": "<p>I think we need GC in order to make option 2 work in practice</p>",
        "id": 232260775,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617021549
    },
    {
        "content": "<p>Diagnostic pull support is being played with right now for LSP 3.17</p>",
        "id": 232270914,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1617025835
    },
    {
        "content": "<p>This working group would probably be interested in building more general infra for diagnostics, so that we won't have to check <code>#[allow]</code> attributes for every single diagnostic</p>",
        "id": 233890518,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618002300
    },
    {
        "content": "<p>I also think we should, at some point:</p>\n<ul>\n<li>come up with a policy for when a diagnostic is \"experimental\" or not</li>\n<li>disable experimental ones by default</li>\n</ul>\n<p>...because they do tend to annoy users more than I'd like</p>",
        "id": 233978968,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618081554
    },
    {
        "content": "<p>we do get a lot of useful bug reports that way though ;) ... maybe we could deactivate them in weekly builds, but keep them in nightlies and self-compiled</p>",
        "id": 233979767,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1618082227
    },
    {
        "content": "<p>OTOH there's a certain degree of experimentalness I would keep turned off by default all the time (e.g. if we were to add type mismatch errors right now)</p>",
        "id": 233979867,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1618082319
    },
    {
        "content": "<p>yeah the bug reports are very useful</p>",
        "id": 233980042,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618082472
    },
    {
        "content": "<p>it'd be nice if we could offer a quick fix that turns off a diagnostic</p>",
        "id": 233980078,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618082522
    },
    {
        "content": "<p>don't think it's possible to make that persistent though</p>",
        "id": 233980123,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618082542
    },
    {
        "content": "<p>well, only in an ad-hoc way at least</p>",
        "id": 233980131,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618082555
    },
    {
        "content": "<p>In Code we can, I guess</p>",
        "id": 234036043,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1618138835
    },
    {
        "content": "<p>we could by making it possible to disable the diagnostics either in Cargo.toml or with attributes</p>",
        "id": 234036365,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1618139156
    },
    {
        "content": "<p>of course people might not want to spam their code with rust_analyzer::allow attributes</p>",
        "id": 234036434,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1618139212
    },
    {
        "content": "<p>then again, maybe the diagnostics where that would happen a lot would be better off disabled by default</p>",
        "id": 234036482,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1618139258
    },
    {
        "content": "<p>(obviously, the more false positives a diagnostic has, the less we need feedback from users for it...)</p>",
        "id": 234036549,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1618139305
    },
    {
        "content": "<p>maybe we could have a policy of \"diagnostics that trigger on the RA codebase (and maybe also codebases X and Y) can't be on by default\"</p>",
        "id": 234036602,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1618139369
    },
    {
        "content": "<p>One thing this working group might be interested in is rustc's approach at making diagnostics compatible with incremental computation. It works by storing them all in a <code>Vec</code> while a query executes, and the query system effectively makes them part of the query result.</p>\n<p>This sounds like a solution that could make our lives a lot easier, since we wouldn't have to manually buffer and emit them from every place that could possibly want to produce a diagnostic.</p>",
        "id": 239437964,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621435892
    },
    {
        "content": "<p>This would require salsa support however</p>",
        "id": 239438010,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621435913
    },
    {
        "content": "<p>I have doubts that approach would work for us? We still have to know which queries to trigger to get 'all' diagnostics anyway</p>",
        "id": 239446591,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1621438498
    },
    {
        "content": "<p>I mean, it might be nice to not have to collect the diagnostics explicitly, but I don't know if it's worth it</p>",
        "id": 239446820,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1621438574
    },
    {
        "content": "<p>I'm wondering a bit on what level diagnostics should actually exist. Are they an IDE thing, or a HIR (Semantics) thing? obviously things like type errors or missing match arms need to ultimately come from the compiler infrastructure, but should things like \"replace filter_map(...).next() with find_map(..)\"? At least we'd want this kind of thing to be implementable quite separately from the compiler parts (maybe even with plugins). OTOH we still need it to be integrated in Salsa. And quick fixes should almost certainly be calculated by the IDE parts and probably not live in the DB.</p>",
        "id": 239883055,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1621699620
    },
    {
        "content": "<p>maybe the answer is that we shouldn't / don't need to have a unified concept of diagnostics in the HIR crates, just collect various kinds of errors that could be simple, disparate enums (e.g. one <code>TypeError</code> enum for various errors emitted during inference). And then those could be collected and turned into proper diagnostics by the same IDE-level mechanism that would also calculate purely IDE-level lints like <code>replace-filter-map-next-with-find-map</code></p>",
        "id": 239883289,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1621699840
    },
    {
        "content": "<p>and that one would probably not need to keep structured information about the error, which would make the whole <code>dyn Diagnostic</code> stuff unnecessary since it could just be one struct with code, location, description and fix</p>",
        "id": 239883392,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1621699971
    },
    {
        "content": "<p>there's still the problem of needing to duplicate all these <code>hir_*</code>-level error enums for the <code>hir</code> facade though</p>",
        "id": 239883698,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1621700349
    },
    {
        "content": "<p>also, it does leave the whole problem of \"what's full set of possible diagnostics, and which queries do we need to run for it\" to the IDE crate, but maybe that's not actually a problem, since we need to implement the code to describe the error and possibly provide a quickfix there anyway</p>",
        "id": 239883828,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1621700485
    },
    {
        "content": "<p>with <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8713\">rust-analyzer/rust-analyzer#8713</a>, maybe the interface for diagnostics in the IDE crate could just be basically a function taking some kind of HIR node, and then the driver could even automatically handle doing the tree walk, deciding for which files to calculate diagnostics, and <code>#[allow]</code> etc.</p>",
        "id": 239884149,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1621700872
    },
    {
        "content": "<p>For production of diagnostics, I think there are clearly two very dissimilar paths. </p>\n<p>Some diagnostics are emitted during analysis. For example, you are inferring types, and you fail to resolve a method call, so you should emit a diagnostic here.</p>\n<p>Some diagnostics exist completely orthogonal to the standard code analysis. For example , doing unsafe op outside of unsafe block has no bearing on the actual analysis. This diagnostics should be computed by a separate walk over the code, after the analysis is done.</p>",
        "id": 239891836,
        "sender_full_name": "matklad",
        "timestamp": 1621708890
    },
    {
        "content": "<blockquote>\n<p>maybe the answer is that we shouldn't / don't need to have a unified concept of diagnostics in the HIR crates,</p>\n</blockquote>\n<p>Yeah, the <code>dyn Diagnostic</code> is a wholly unnecessary boondoggle, we should eliminate that. I think that maybe we should do that first, and then maybe  a better design emerges.</p>",
        "id": 239891944,
        "sender_full_name": "matklad",
        "timestamp": 1621708984
    },
    {
        "content": "<blockquote>\n<p>For production of diagnostics, I think there are clearly two very dissimilar paths.</p>\n</blockquote>\n<p>Yeah, that's what I mean -- and I think the first path doesn't necessarily need to be viewed as part of the diagnostics infrastructure, it's just some additional outputs of some queries. Then there's only the second path, which can fully live in the IDE crate.</p>",
        "id": 239892670,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1621709724
    },
    {
        "content": "<p>or to be a bit more concrete, do you think that whatever hir_ty produces should already have diagnostic codes or even a 1:1 relationship to the diagnostics shown to the user in the end?</p>",
        "id": 239939405,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1621764040
    },
    {
        "content": "<p>No, I think ty should just emit enough data to reconstruct the diags</p>",
        "id": 239939441,
        "sender_full_name": "matklad",
        "timestamp": 1621764092
    },
    {
        "content": "<p>IIRC, we kinda already emit such data, we just then convert it to the <code>dyn Diagnostic</code>. If we remove this conversion, and just expose the data as is, the architecture becomes less messy</p>",
        "id": 239939518,
        "sender_full_name": "matklad",
        "timestamp": 1621764151
    },
    {
        "content": "<blockquote>\n<p>Then there's only the second path, which can fully live in the IDE crate.</p>\n</blockquote>\n<p>I am not sure about this though. Feels like the second path is still subdivided in two. </p>\n<p>From the implementation point of view, \"don't call unsafe fn outside of unsafe block\" and \"don't call filter_map().next()\" are exactly equivalent. But they are different in semantics. The first should be a compilation error, the second is a lint</p>",
        "id": 239939652,
        "sender_full_name": "matklad",
        "timestamp": 1621764289
    },
    {
        "content": "<p>so you'd expect the first one to still happen in some <code>hir_*</code> crate? I guess if we were implementing a full compiler, it would need to, so that it knows to not generate code, but that seems like the only meaningful difference?</p>",
        "id": 239939846,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1621764510
    },
    {
        "content": "<p>I don't know. I guess, I'd expect it to happen in the <code>hir</code> crate, without the suffux (or in a special <code>hir_diagnostics</code> crate). </p>\n<p>Argh, this is reeealy hard. One side of me thinks \"let's move this to <code>ide</code> and just implement that on top of hir\". But then another part thinks that the most natural way to express this diagnostics is for our desugared expressions.</p>",
        "id": 239940240,
        "sender_full_name": "matklad",
        "timestamp": 1621764955
    },
    {
        "content": "<p>Hm, I guess this is a real design question here: </p>\n<ul>\n<li>we have an idea that the IDE sees only the nice, close-to-source HIR view of the code</li>\n<li>at the same time, inside the compiler, we have a number of IRs, which are more convenient to work with</li>\n</ul>\n<p>Some IDE features could be implemented on top of such IRs more conveniently then on top of HIR. What to do?</p>",
        "id": 239940352,
        "sender_full_name": "matklad",
        "timestamp": 1621765066
    },
    {
        "content": "<p>Hm, mulling over this some more, it seems this is exactly the layering trade off we  want to make. </p>\n<ul>\n<li>inside the complier, we want to use fine-grained API and many specific IRs</li>\n<li>outside of the compiler, we want to present a unified and simple API</li>\n</ul>\n<p>The simple API make easy things simple, but it might make complex things impossible or overly awkward. Down the line, I expect us to find at least some situations where, when writing an assist, we wish we had a direct access to the database. But I am not a fan of exposing this -- it's useful that things like assits don't know that we are using chalk inside. </p>\n<p>I wonder, how roslyn exposes thinkgs like control flow graph?</p>",
        "id": 239942553,
        "sender_full_name": "matklad",
        "timestamp": 1621767366
    },
    {
        "content": "<p><a href=\"https://docs.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.semanticmodel.getoperation?view=roslyn-dotnet-3.9.0#Microsoft_CodeAnalysis_SemanticModel_GetOperation_Microsoft_CodeAnalysis_SyntaxNode_System_Threading_CancellationToken_\">https://docs.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.semanticmodel.getoperation?view=roslyn-dotnet-3.9.0#Microsoft_CodeAnalysis_SemanticModel_GetOperation_Microsoft_CodeAnalysis_SyntaxNode_System_Threading_CancellationToken_</a></p>",
        "id": 239942888,
        "sender_full_name": "matklad",
        "timestamp": 1621767766
    },
    {
        "content": "<p><a href=\"https://docs.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.flowanalysis.basicblock?view=roslyn-dotnet-3.9.0\">https://docs.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.flowanalysis.basicblock?view=roslyn-dotnet-3.9.0</a></p>",
        "id": 239942955,
        "sender_full_name": "matklad",
        "timestamp": 1621767827
    },
    {
        "content": "<p>so roslyn does expose some additional IR besides syntax nodes.</p>",
        "id": 239943005,
        "sender_full_name": "matklad",
        "timestamp": 1621767856
    },
    {
        "content": "<p>yeah, I would expect us to expose some more information through HIR when we need it and can figure out a nice API for it. And if the <code>unsafe</code> diagnostic needs such detailed information that it's nicer to implement inside HIR, I would expect that we implement some query in there that does the hard analysis part and then just use that for the final diagnostic living in <code>ide</code>. That's kind of orthogonal to the question of \"should there be a concept of errors in the HIR crates\" though, or \"should the unsafety diagnostic live in HIR because it would be a compiler error\"</p>",
        "id": 239943246,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1621768137
    },
    {
        "content": "<p>Yeah, I don't think hir crates need to know about diagnostics, they need to emit facts, and its up to the higher layers to translate some of the facts into errror</p>",
        "id": 239943596,
        "sender_full_name": "matklad",
        "timestamp": 1621768541
    },
    {
        "content": "<p>Let me try to look into what it takes to remove dyn diagnostics (unless someone is already looking into this...)</p>",
        "id": 239961135,
        "sender_full_name": "matklad",
        "timestamp": 1621786254
    },
    {
        "content": "<p>Predictably, I ended up polishing the generate getter assist</p>",
        "id": 239978494,
        "sender_full_name": "matklad",
        "timestamp": 1621804362
    },
    {
        "content": "<p>Question: how we should test diagnostics in <code>hir_xxx</code> crates? At the moment, we rely on the Diagnostic crate to render messages an ranges. </p>\n<p>I am tempted to just write some glue code for \"rendering for testing\"</p>",
        "id": 240059133,
        "sender_full_name": "matklad",
        "timestamp": 1621866698
    },
    {
        "content": "<p>Here's how far I got: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/8973\">https://github.com/rust-analyzer/rust-analyzer/pull/8973</a></p>",
        "id": 240078550,
        "sender_full_name": "matklad",
        "timestamp": 1621875177
    },
    {
        "content": "<p>I am not trying to remove dyn right of the bat, and just want to move it further up the stack. Modulo test, it successfully jumped from hir_expand to hir_ty</p>",
        "id": 240078705,
        "sender_full_name": "matklad",
        "timestamp": 1621875249
    },
    {
        "content": "<p>Hm, I am somewhat unsatisfied with our testing story here.... </p>\n<p>I think we don't want low-level code to be concerned with figuring out the specific range to be highlighted. That means we won't be able to use precise ranges in our low-level tests.</p>\n<p>But we do want to have tests for ranges somewhere, so we'll have to duplicate tests somewhat for hight-level diagnostics...</p>",
        "id": 240104070,
        "sender_full_name": "matklad",
        "timestamp": 1621886539
    },
    {
        "content": "<p>Finished first part of this: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/8973\">https://github.com/rust-analyzer/rust-analyzer/pull/8973</a></p>",
        "id": 240200991,
        "sender_full_name": "matklad",
        "timestamp": 1621954924
    },
    {
        "content": "<p>Thinking more about this, I think it would be fine to only test diagnostic in the IDE layer. This is similar to various other auxilary data we have in InferenceResults. We don't have dedicated tests for method resolution tables and such, and that seems fine. </p>\n<p>So, we'll probably just completely remove manual test traversals to collect diagnostics, and instead will have a giant hight-level \"UI\" test suite</p>",
        "id": 242452725,
        "sender_full_name": "matklad",
        "timestamp": 1623507188
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/9245\">https://github.com/rust-analyzer/rust-analyzer/pull/9245</a> finally got to the \"end game\" here, now need to only refactor the other diagnostics</p>",
        "id": 242506443,
        "sender_full_name": "matklad",
        "timestamp": 1623585424
    },
    {
        "content": "<p>Next question is, what should diagnostic store? At the moment, <code>hir</code> structs store AstPtr's, and that's stupid. </p>\n<p>A diagnostic emerges from the guts of the compiler with something like <code>ExprId</code>. The <code>hir</code> crate then converts that to a ptr, often going via a syntax node. Finally, an IDE converts the ptr back to syntax node for rendering purposes. That's clearly suboptimal :D</p>",
        "id": 242509580,
        "sender_full_name": "matklad",
        "timestamp": 1623589714
    },
    {
        "content": "<p>imo we should have a HIR wrapper for <code>ExprId</code> (or the full tree-based HIR) and provide that, and then IDE can use that to map to the AST node</p>",
        "id": 242509809,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1623590056
    },
    {
        "content": "<p>can we just add a simple <code>hir::Expr</code> for now?</p>",
        "id": 242509819,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1623590088
    },
    {
        "content": "<p>Yeah, that's reasonable, although I am not sure about \"just simple\" part <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span> </p>\n<p><code>hir::Expr { id: ExprId, parent: DefWithBodyId }</code> probably won't cut it</p>",
        "id": 242510087,
        "sender_full_name": "matklad",
        "timestamp": 1623590364
    },
    {
        "content": "<p><code>ExprId</code> are desugared, but I am pretty sure that <code>hir::Expr</code> wants to be surface-level expr</p>",
        "id": 242510101,
        "sender_full_name": "matklad",
        "timestamp": 1623590399
    },
    {
        "content": "<p>hm. do we do anything other than <code>source_map.expr_syntax</code> to get the AST pointer right now though?</p>",
        "id": 242512046,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1623592837
    },
    {
        "content": "<p>ok the one for record fields is a bit more complicated</p>",
        "id": 242512103,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1623592899
    },
    {
        "content": "<p>Diagnostic sink is gone: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/9256\">https://github.com/rust-analyzer/rust-analyzer/pull/9256</a></p>",
        "id": 242525699,
        "sender_full_name": "matklad",
        "timestamp": 1623611177
    },
    {
        "content": "<p>I've moved diagnostics to a separate crate, I think these all \"long overdue\" changes I want to make in this area</p>",
        "id": 242739637,
        "sender_full_name": "matklad",
        "timestamp": 1623766857
    }
]