[
    {
        "content": "<p>I was looking into automatically moving flycheck diagnostics around when the containing file is edited, but this seems like a fairly nontrivial algorithm to implement. Is there an existing implementation or algorithm description of something like this that I could look at?</p>",
        "id": 219079242,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607347822
    },
    {
        "content": "<p>I feel pretty strongly that this should be handled by the editor</p>",
        "id": 219079324,
        "sender_full_name": "matklad",
        "timestamp": 1607347875
    },
    {
        "content": "<p>It can adjust ranges synchronously, and it doesn't need any langauge-specific info for that. </p>\n<p>I wonder if non-VS clients do this?</p>",
        "id": 219079450,
        "sender_full_name": "matklad",
        "timestamp": 1607347940
    },
    {
        "content": "<p>Yeah, but I don't think any of them actually do this</p>",
        "id": 219079538,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607348001
    },
    {
        "content": "<p>VS Code also doesn't</p>",
        "id": 219079559,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607348014
    },
    {
        "content": "<p>Yeah... I think this is the case where it's better to not solve a problem at all, than to solve it in a wrong way.</p>",
        "id": 219079906,
        "sender_full_name": "matklad",
        "timestamp": 1607348172
    },
    {
        "content": "<p>By making range updating \"async\" we kind of loose any hope to have consistent results</p>",
        "id": 219079947,
        "sender_full_name": "matklad",
        "timestamp": 1607348193
    },
    {
        "content": "<p>Clients, on the other hand, can adjust ranges in lockstep with updating the text buffer (whcih they do anyway for, eg, syntax highlighting)</p>",
        "id": 219080000,
        "sender_full_name": "matklad",
        "timestamp": 1607348234
    },
    {
        "content": "<p>that said, synchronization concerns aside, this shouldn't be hard at the core</p>",
        "id": 219080183,
        "sender_full_name": "matklad",
        "timestamp": 1607348348
    },
    {
        "content": "<p>See <code>TextEdit::apply_to_offset</code></p>",
        "id": 219080211,
        "sender_full_name": "matklad",
        "timestamp": 1607348369
    },
    {
        "content": "<p>(plus, there should be additional handling for \"sticky\" span edges. For highlighting, you, eg, want to extend the span of idenifier if a user types next to it)</p>",
        "id": 219080352,
        "sender_full_name": "matklad",
        "timestamp": 1607348442
    },
    {
        "content": "<p>I remember seeing something about moving to a pull model for diagnostics. If a server switched to that it might be easier to get the right logic into the client</p>",
        "id": 219080621,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1607348589
    },
    {
        "content": "<p>riiiight, there's also protocol-level concern that both edits and diagnostics are notifications (going in the opposite directions), so it's actually impossible to order them</p>",
        "id": 219081108,
        "sender_full_name": "matklad",
        "timestamp": 1607348850
    },
    {
        "content": "<p>(although document version might be enough for this particular case of shifting edits)</p>",
        "id": 219081146,
        "sender_full_name": "matklad",
        "timestamp": 1607348876
    },
    {
        "content": "<p>hm. <em>can</em> the editor do this for the check-based diagnostics though? just from how emacs behaves, it looks to me like we are sending the diagnostics with the wrong range if the user edits without saving (i.e. we're sending the old check diagnostics with the now-stale ranges again?)</p>",
        "id": 219082099,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1607349377
    },
    {
        "content": "<p>Hm, I think that would be a different problem? Basically, we compute just the wrong diagnostics in this case (not only the ranges), and we should force client to save documents when computing diagnostics</p>",
        "id": 219082465,
        "sender_full_name": "matklad",
        "timestamp": 1607349594
    },
    {
        "content": "<p>well I mean our internal diagnostics are correct and move correctly, because they use the unsaved document</p>",
        "id": 219082550,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1607349627
    },
    {
        "content": "<p>hmm, and if we publish internal diagnostics only, that would override the check diagnostics</p>",
        "id": 219082611,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607349657
    },
    {
        "content": "<p>Emacs doesn't move diagnostics at all by the way, it just hides all diagnostics as soon as you type and displays the new ones once they arrive</p>",
        "id": 219082630,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1607349670
    },
    {
        "content": "<p>LSP issue for pull model: <a href=\"https://github.com/microsoft/language-server-protocol/issues/737\">https://github.com/microsoft/language-server-protocol/issues/737</a>. It looks like this is an issue about interactive diagnostics for vscode: <a href=\"https://github.com/microsoft/vscode/issues/103953\">https://github.com/microsoft/vscode/issues/103953</a></p>",
        "id": 219083422,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1607350071
    },
    {
        "content": "<p>Isn't the push model much better suited for... everything? If the client has to pull it might not update when eg. an import now resolved because a different file changed</p>",
        "id": 219083687,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607350204
    },
    {
        "content": "<p>This is also a problem for semantic tokens, I think</p>",
        "id": 219083703,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607350216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> I still believe that the right model here is that of dart analysis server</p>",
        "id": 219083809,
        "sender_full_name": "matklad",
        "timestamp": 1607350282
    },
    {
        "content": "<p><a href=\"https://htmlpreview.github.io/?https://github.com/dart-lang/sdk/blob/master/pkg/analysis_server/doc/api.html#request_analysis.setSubscriptions\">https://htmlpreview.github.io/?https://github.com/dart-lang/sdk/blob/master/pkg/analysis_server/doc/api.html#request_analysis.setSubscriptions</a></p>",
        "id": 219083844,
        "sender_full_name": "matklad",
        "timestamp": 1607350298
    },
    {
        "content": "<p>push + subscriptions? yeah</p>",
        "id": 219083847,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607350298
    },
    {
        "content": "<p>yup, that one</p>",
        "id": 219083868,
        "sender_full_name": "matklad",
        "timestamp": 1607350308
    },
    {
        "content": "<p>And also requiring replies for changes notification, so that the client knows what state of the world the serve sees</p>",
        "id": 219083931,
        "sender_full_name": "matklad",
        "timestamp": 1607350331
    },
    {
        "content": "<p>Does the dart LSP stack use the subscription model? I've used their stuff on vscode for some flutter work and it's pretty slick.</p>",
        "id": 219085423,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1607351111
    },
    {
        "content": "<p>I don't know</p>",
        "id": 219085557,
        "sender_full_name": "matklad",
        "timestamp": 1607351163
    }
]