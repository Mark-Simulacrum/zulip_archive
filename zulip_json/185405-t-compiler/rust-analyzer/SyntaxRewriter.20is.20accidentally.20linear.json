[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span> this is a fun one (and utterly embarrassing, to be honest). </p>\n<p>So, I've recently fixed O(N^2) behavior in SyntaxRewriter... But it is still kinda slow. I think the reason for this slowness is that it rebuilds the whole tree (we always allocate a new GreenNode, we don't try to re-use the old one). Aaaaand, even if we fix it, SyntaxRewriter will still be linear in the size of the file -- it traverses each and every node. </p>\n<p>This actually defeats the purpose of our elaborate syntax trees, whose functional design is geared towards cheap O(height) modification. And the original C#'s SyntaxRewriter has the same issue. I guess we need to find a new abstraction for this...</p>",
        "id": 219632698,
        "sender_full_name": "matklad",
        "timestamp": 1607706599
    },
    {
        "content": "<p>Ye, I noticed that we clone the entire tree as well(I think I wrote that down in the issues we were talking about the slowness as well somewhere).<br>\nI also looked at how roslyn does it but I couldn't really get behind their node tracking stuff they are using, but I guess that doesn't change the complexity either then for them.</p>",
        "id": 219633289,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607706876
    },
    {
        "content": "<p>yeah, I've noticied this just today....</p>",
        "id": 219633493,
        "sender_full_name": "matklad",
        "timestamp": 1607706968
    },
    {
        "content": "<p>otoh, I am now inspired to maybe make the tree mutable&amp;clonnable....</p>",
        "id": 219633523,
        "sender_full_name": "matklad",
        "timestamp": 1607706984
    },
    {
        "content": "<p>Won't that bring its fair share of problems as well though?</p>",
        "id": 219633880,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607707168
    },
    {
        "content": "<p>Most definitely</p>",
        "id": 219633987,
        "sender_full_name": "matklad",
        "timestamp": 1607707208
    },
    {
        "content": "<p>But I want to try this angle as well...</p>",
        "id": 219634014,
        "sender_full_name": "matklad",
        "timestamp": 1607707227
    },
    {
        "content": "<p>Yeah, just optimizing allocs doesn't help</p>",
        "id": 219634598,
        "sender_full_name": "matklad",
        "timestamp": 1607707506
    },
    {
        "content": "<p>One Idea I tried out with SyntaxRewriter was to track what branches in a tree we only have to edit. As in whenever we add a new insert/replace/deletion to the Rewriter track down all the ancestors of the affected node so that we could skip unaffected branches entirely when rewriting.</p>",
        "id": 219634789,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607707590
    },
    {
        "content": "<p>But that didn't work out since some nodes where disjoint from another that were rewritten or something along those lines iirc</p>",
        "id": 219634823,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607707615
    },
    {
        "content": "<p>I'm unsure whether this idea could work out in the end as I might be missing something crucial that prevents that from working entirely</p>",
        "id": 219634997,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607707687
    },
    {
        "content": "<p>Right I remember why that didn't work, since the root of the node thats passed into rewriting isnt necessarily a root of the edits</p>",
        "id": 219644460,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607712005
    },
    {
        "content": "<p>Ok, I am officially excited. I think we can have mutable immutable syntax trees :D</p>",
        "id": 219713774,
        "sender_full_name": "matklad",
        "timestamp": 1607787396
    },
    {
        "content": "<p>Will try to write an issue which describes high-level design later today</p>",
        "id": 219713782,
        "sender_full_name": "matklad",
        "timestamp": 1607787413
    },
    {
        "content": "<p>Couple of core insights:</p>\n<ul>\n<li>GreenNode/SytnaxNode dissolve the \"functional/parent pointers\" and \"threadSafe/Rc\" tradeoffs. They can dissolve mutable/immutable tradeoff the same way</li>\n<li>Node::text_range in IntelliJ is not O(1), its O(tree depth)</li>\n</ul>",
        "id": 219713859,
        "sender_full_name": "matklad",
        "timestamp": 1607787510
    },
    {
        "content": "<blockquote>\n<p>Will try to write an issue which describes high-level design later today</p>\n</blockquote>\n<p>Argh, I had a beautiful writeup in the unposted issue, and the browser ate the contents of the text field. Never write longer text in a browser</p>",
        "id": 219724010,
        "sender_full_name": "matklad",
        "timestamp": 1607801504
    },
    {
        "content": "<p>Ok, here it is: <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/6857\">https://github.com/rust-analyzer/rust-analyzer/issues/6857</a></p>\n<p>cc <span class=\"user-mention\" data-user-id=\"132829\">@Christopher Durham</span></p>",
        "id": 219763451,
        "sender_full_name": "matklad",
        "timestamp": 1607869146
    },
    {
        "content": "<blockquote>\n<p>Mad Scientist Mode: ON</p>\n</blockquote>\n<p><span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 219763507,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607869215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> updated issue description</p>",
        "id": 219763625,
        "sender_full_name": "matklad",
        "timestamp": 1607869409
    },
    {
        "content": "<p>Incredible</p>",
        "id": 219763633,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607869437
    },
    {
        "content": "<p>How I Learned to Stop Worrying and Love Mutation</p>",
        "id": 219763675,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607869451
    },
    {
        "content": "<p>So this is what you meant with mutable immutable <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 219763781,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607869596
    },
    {
        "content": "<blockquote>\n<p>How I Learned to Stop Worrying and Love Mutation</p>\n</blockquote>\n<p>OMG, we should use this instead of \"empowering everyone to build fast and reliable software\"</p>",
        "id": 219763870,
        "sender_full_name": "matklad",
        "timestamp": 1607869690
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116011\">@Steve Klabnik</span> we need our best people on this</p>",
        "id": 219763972,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607869845
    },
    {
        "content": "<p>Hehehe</p>",
        "id": 219763980,
        "sender_full_name": "Steve Klabnik",
        "timestamp": 1607869860
    },
    {
        "content": "<p>This is definitely something right up my alley and something I'd love to do, but: legal ownership of code I write right now is murky at best, and I don't want to saddle r-a with that. I'm planning to try to get an exception for Rust OSS contributions, but grad school is on break until January and I don't want to bother them on break.</p>",
        "id": 219778703,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1607890295
    },
    {
        "content": "<p>(more context on my GH profile readme if you want a bit more)</p>",
        "id": 219778948,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1607890556
    },
    {
        "content": "<p>Wow your university is either evil or has been burned badly in the past to have such a strict requirement</p>",
        "id": 219786464,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1607900285
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307289\">@Poliorcetics</span> mostly it's me being overly cautious (informal policy is that stuff done on your own time with your own resources is still yours, that's just not what the actual IP Agreement doc says). The reasoning they gave for it is that it simplifies knowing who actually owns what you make, and thus transferring full commercial rights to it to you if you ask for it.</p>\n<p>I still think there could be a better middle ground, but the \"all IP while you're employed [or enrolled] is the company's [or university's]\" is common in the games industry <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 219786999,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1607901201
    },
    {
        "content": "<p>Informally I'm sure they'd be willing to give me a written doc exception for something clearly divorced from what we're doing there, it's just I've not gone through the effort yet, and I don't want to dump that question mark on someone else's project.</p>",
        "id": 219787062,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1607901291
    },
    {
        "content": "<p>Because I don't want to speak ill of them without some context:<br>\nActual legal clause: <a href=\"https://twitter.com/CAD97_/status/1296118208034996224?s=19\">https://twitter.com/CAD97_/status/1296118208034996224?s=19</a><br>\nLater notes: <a href=\"https://twitter.com/CAD97_/status/1322633440815185921?s=19\">https://twitter.com/CAD97_/status/1322633440815185921?s=19</a><br>\nOf course IANAL, I'm just overly cautious when other people's projects are on the line.</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/CAD97_/status/1296118208034996224?s=19\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1245169056480665600/aYmyZTLZ_normal.png\"></a><p>Here's the actual full clause in the IP Agreement. Split into multiple images for alt-text. I'm happy to remove/correct this take if it's based on an incorrect reading, but I highly doubt it. Pre-existing IP used in new IP is even just licensed, not ownership transferred. (7/6) <a href=\"https://t.co/TddxBPIcOc\">https://twitter.com/CAD97_/status/1296118208034996224/photo/1</a></p><span>- CAD97 (@CAD97_)</span><div class=\"twitter-image\"><a href=\"https://t.co/TddxBPIcOc\"><img src=\"https://pbs.twimg.com/media/Efy7ycAXkAcxfOm.png:medium\"></a></div><div class=\"twitter-image\"><a href=\"https://t.co/TddxBPIcOc\"><img src=\"https://pbs.twimg.com/media/Efy8PWEWsAEj4am.png:large\"></a></div></div></div><div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/CAD97_/status/1322633440815185921?s=19\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1245169056480665600/aYmyZTLZ_normal.png\"></a><p>Coming back to this: there's another hairy corner I didn't consider that makes a looser version a bit harder to specify: students working on classwork on their own machines with their own engine licenses, not ones provided by the school. E.g. we have individual engine licenses. <a href=\"https://t.co/6qeCk9nlvz\">https://twitter.com/CAD97_/status/1296118208034996224</a></p><span>- CAD97 (@CAD97_)</span></div></div>",
        "id": 219787208,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1607901547
    },
    {
        "content": "<p>(ok not going to rant here anymore)</p>",
        "id": 219787214,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1607901561
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132829\">@Christopher Durham</span> no worries, I am tagging you just so you are aware of the work in the area, as I expect you'll be interested in knowning what's going on :D</p>",
        "id": 219818086,
        "sender_full_name": "matklad",
        "timestamp": 1607938875
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> smoke test passes in a toy impl!</p>",
        "id": 219866361,
        "sender_full_name": "matklad",
        "timestamp": 1607963506
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/mini-rowan/blob/842cf1d8c7ebcc1ebed65f03b78402df3804b921/tests/it.rs#L31-L42\">https://github.com/rust-analyzer/mini-rowan/blob/842cf1d8c7ebcc1ebed65f03b78402df3804b921/tests/it.rs#L31-L42</a></p>",
        "id": 219866363,
        "sender_full_name": "matklad",
        "timestamp": 1607963507
    },
    {
        "content": "<p>Naming Q: how would you name a method of a tree node, which removes the node from the tree?  <code>n.name_me()</code>?</p>\n<p>After this call, the original tree doesn't have <code>n</code>, and <code>n</code> is a root of a new tree</p>",
        "id": 219866571,
        "sender_full_name": "matklad",
        "timestamp": 1607963589
    },
    {
        "content": "<p>Options: <code>remove</code>, <code>delete</code>, <code>detach</code>, <code>unlink</code></p>",
        "id": 219866605,
        "sender_full_name": "matklad",
        "timestamp": 1607963602
    },
    {
        "content": "<p>Detach or unlink</p>",
        "id": 219866719,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1607963643
    },
    {
        "content": "<p>Or more verbose: to_new_root</p>",
        "id": 219866768,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1607963668
    },
    {
        "content": "<p>I like <code>detach</code></p>",
        "id": 219866863,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1607963712
    },
    {
        "content": "<p>^</p>",
        "id": 219866881,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1607963723
    },
    {
        "content": "<p>Ok, \"move bound to where clause\" test now works: <a href=\"https://github.com/rust-analyzer/mini-rowan/blob/4392883f3ef67f3cf5af8334307e067c356f47f0/tests/it.rs#L32-L49\">https://github.com/rust-analyzer/mini-rowan/blob/4392883f3ef67f3cf5af8334307e067c356f47f0/tests/it.rs#L32-L49</a></p>",
        "id": 219962171,
        "sender_full_name": "matklad",
        "timestamp": 1608029587
    },
    {
        "content": "<p>I'll try to extend the prototype to also track text ranges of nodes. I also want to explore whether we can retain <code>fn token_text(&amp;self) -&gt; &amp;self</code> signature</p>",
        "id": 219962384,
        "sender_full_name": "matklad",
        "timestamp": 1608029718
    },
    {
        "content": "<p>might not be possible with mutable nodes <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 219962415,
        "sender_full_name": "matklad",
        "timestamp": 1608029738
    },
    {
        "content": "<p>Pushed update with a fuller API with node/token split and <code>text_size</code></p>",
        "id": 220117007,
        "sender_full_name": "matklad",
        "timestamp": 1608126676
    },
    {
        "content": "<p>Current status (aka a hundred segfaults later):</p>\n<p><a href=\"/user_uploads/4715/PAzR3BJeptw0SRCZ_IF8AM9V/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/PAzR3BJeptw0SRCZ_IF8AM9V/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/PAzR3BJeptw0SRCZ_IF8AM9V/image.png\"></a></div><p><a href=\"/user_uploads/4715/d-NrJbkQKt9yHHOxQyzChleR/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/d-NrJbkQKt9yHHOxQyzChleR/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/d-NrJbkQKt9yHHOxQyzChleR/image.png\"></a></div>",
        "id": 222457702,
        "sender_full_name": "matklad",
        "timestamp": 1610469481
    },
    {
        "content": "<p>the stuff is horrifyingly unsafe inside :(</p>",
        "id": 222457806,
        "sender_full_name": "matklad",
        "timestamp": 1610469517
    },
    {
        "content": "<p>Benches also regress a bit, but I believe that is livable (and there are a couple optimizations we could employ to get some perf back)</p>",
        "id": 222460098,
        "sender_full_name": "matklad",
        "timestamp": 1610470316
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Database loaded:     399.46ms, 287minstr, 82mb\n  crates: 36, mods: 583, decls: 11311, fns: 8839\nItem Collection:     8.58s, 84ginstr, 463mb\n  exprs: 243254, ??ty: 2656 (1%), ?ty: 2074 (0%), !ty: 890\nInference:           16.21s, 135ginstr, 637mb\nTotal:               24.79s, 220ginstr, 1101mb\n\n\nwip\nDatabase loaded:     394.35ms, 287minstr, 82mb\n  crates: 36, mods: 583, decls: 11311, fns: 8839\nItem Collection:     10.69s, 109ginstr, 524mb\n  exprs: 243254, ??ty: 2656 (1%), ?ty: 2074 (0%), !ty: 890\nInference:           17.13s, 150ginstr, 665mb\nTotal:               27.82s, 259ginstr, 1190mb\n</code></pre></div>",
        "id": 222460164,
        "sender_full_name": "matklad",
        "timestamp": 1610470324
    },
    {
        "content": "<p>Did it get slower because of the struct size increase?</p>",
        "id": 222470899,
        "sender_full_name": "Laurențiu",
        "timestamp": 1610474623
    },
    {
        "content": "<p>I think that would be part of that</p>",
        "id": 222471035,
        "sender_full_name": "matklad",
        "timestamp": 1610474682
    },
    {
        "content": "<p>another part is that we now iterate calling next_sibling repeatedly, rather than itering a slice of green nodes</p>",
        "id": 222471133,
        "sender_full_name": "matklad",
        "timestamp": 1610474740
    },
    {
        "content": "<p>(this is the bit I believe we can speed up quite a bit)</p>",
        "id": 222471235,
        "sender_full_name": "matklad",
        "timestamp": 1610474777
    },
    {
        "content": "<p>And there's a bit of <code>Cell</code>gets/sets on the immutable path, they migh cause issues</p>",
        "id": 222471329,
        "sender_full_name": "matklad",
        "timestamp": 1610474833
    },
    {
        "content": "<blockquote>\n<p><code>// The following links only have meaning when state is </code>Mut``</p>\n</blockquote>\n<p>Are they also used/set/kept track of when it's <code>Imm</code>?</p>",
        "id": 222471502,
        "sender_full_name": "Laurențiu",
        "timestamp": 1610474911
    },
    {
        "content": "<p>I mean, I guess they can't be moved to <code>Imm</code></p>",
        "id": 222471945,
        "sender_full_name": "Laurențiu",
        "timestamp": 1610475135
    },
    {
        "content": "<p>(<code>triomphe#hash</code> isn't published yet)</p>",
        "id": 222471976,
        "sender_full_name": "Laurențiu",
        "timestamp": 1610475152
    },
    {
        "content": "<p>triomphe <em>is</em> published I think?</p>",
        "id": 222560936,
        "sender_full_name": "matklad",
        "timestamp": 1610533891
    },
    {
        "content": "<p>No, see <a href=\"https://github.com/rust-analyzer/rowan/blob/clone-for-update/Cargo.toml#L14\">https://github.com/rust-analyzer/rowan/blob/clone-for-update/Cargo.toml#L14</a></p>",
        "id": 222564327,
        "sender_full_name": "Laurențiu",
        "timestamp": 1610535923
    },
    {
        "content": "<p>The <code>hash</code> branch isn't merged</p>",
        "id": 222564339,
        "sender_full_name": "Laurențiu",
        "timestamp": 1610535936
    },
    {
        "content": "<p>Ah, <code>Cargo.toml</code> needs to point to <a href=\"http://crates.io\">crates.io</a></p>",
        "id": 222564623,
        "sender_full_name": "Laurențiu",
        "timestamp": 1610536105
    },
    {
        "content": "<p>Current status: leaking so much memory that it overflows allocator's counter: <code>Item Collection:     8.06s, 83ginstr, -367mb</code></p>",
        "id": 224199424,
        "sender_full_name": "matklad",
        "timestamp": 1611762127
    },
    {
        "content": "<p>The API is coming along nicely: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/7498/files#diff-92a680dd91492725f6dc97832ef92847fb2027669f6b9a56e2c724c3e8f4df9cR44-R71\">https://github.com/rust-analyzer/rust-analyzer/pull/7498/files#diff-92a680dd91492725f6dc97832ef92847fb2027669f6b9a56e2c724c3e8f4df9cR44-R71</a></p>",
        "id": 225189046,
        "sender_full_name": "matklad",
        "timestamp": 1612457914
    },
    {
        "content": "<p>(although I did spend half of the day hunting for missing refcount increment)</p>",
        "id": 225189097,
        "sender_full_name": "matklad",
        "timestamp": 1612457938
    }
]