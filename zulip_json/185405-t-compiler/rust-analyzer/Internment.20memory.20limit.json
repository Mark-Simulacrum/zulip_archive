[
    {
        "content": "<p>I thought here would be a much easier method of communicating than over github issues, it just makes things faster</p>\n<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> In regards to the <code>lasso</code> crate, would a hard cap on the memory used by string internment be something you'd be interested in? If so, how accurate of one would you like, since there's varying levels of accuracy that it can reach (trading implementation time and speed of course)</p>\n<ol>\n<li>Only track the currently allocated arena memory (Least accurate, still gets the vast majority of memory tracked)</li>\n<li>Track as much memory as possible by recording <code>(size_of::&lt;Key&gt;() * self.map.len() * 2) + (size_of::&lt;&amp;str&gt;() * self.map().len() * 2) + memory_in_arena</code> (About as close as it's possible to get to being perfectly accurate, does involve much more complexity though)</li>\n</ol>",
        "id": 204976812,
        "sender_full_name": "Chase Wilson",
        "timestamp": 1595633856
    },
    {
        "content": "<p>I'm not sure, what would happen if the limit is reached?</p>",
        "id": 204976892,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595633946
    },
    {
        "content": "<p>(we wouldn't really need a terribly good accuracy here fwiw)</p>",
        "id": 204978959,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595636482
    },
    {
        "content": "<p>Well, it'd either make the <code>.get_or_intern</code> call return a <code>None</code> or it'd change all the functions that currently return <code>None</code> to start returning <code>Result&lt;T, LassoError&gt;</code> with a variant for <code>OutOfMemory</code> and <code>OutOfKey</code>. That's in my opinion a more elegant solution since the user always has control, but panicking when the limit is met could also be an option, albeit a bad one. As for handling said OOM errors, that's largely up to the user of the library, if there's enough need for it then some method of inspecting the interner and removing unneeded strings could probably be implemented to allow for users to cull whatever strings they don't want</p>\n<p>Sorry I took so long to respond, notifications weren't showing up for me</p>",
        "id": 205023759,
        "sender_full_name": "Chase Wilson",
        "timestamp": 1595715005
    },
    {
        "content": "<p>I think how the error would be handled by rust-analyzer is the most difficult part here. We cannot garbage-collect strings since we don't know which ones are still referenced, so that limits our options for handling allocation failure due to the limit too. I think we'd have to delete the entire database, since we don't know which queries contain <code>Name</code>s, at least not in a way that can be machine-checked.</p>\n<p>Perhaps rust-analyzer would work better with reference-counted interned strings such as those provided by Servo's <code>string_cache</code> crate. I briefly tried that out in <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/5411\">https://github.com/rust-analyzer/rust-analyzer/pull/5411</a>.</p>",
        "id": 205024121,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595715583
    }
]