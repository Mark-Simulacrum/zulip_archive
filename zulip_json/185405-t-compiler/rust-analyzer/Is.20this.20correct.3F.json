[
    {
        "content": "<p>Hi, </p>\n<p>Ignoring the use of macros, I was wondering if the following is a correct understanding of the repo.</p>\n<p><strong>CrateGraph structure</strong></p>\n<p><strong>Creation</strong> : Created manually usually from cargo information.   </p>\n<p><strong>Usage</strong>: Shows the dependencies between crates and metadata such as crate edition, crate config flags, the root file for the crate (<a href=\"http://lib.rs/main.rs\">lib.rs/main.rs</a>) usually</p>\n<hr>\n<p><strong>CrateDefMap structure</strong> </p>\n<p><strong> Creation</strong>: This is used quite a lot in r-a and to be created it needs to go over the whole source file. </p>\n<p><strong>Usage</strong>: Shows the definitions with a crate. For a given crate, this will essentially be the modules. There is also an <code>extern prelude</code> which I believe is for connecting external crates together. This is different to the <code>prelude</code> which is also a field in this structure. </p>\n<hr>\n<h2>Def Collector structure</h2>\n<p><strong>Creation</strong>: This is created along with the CrateDefMap creation.  </p>\n<p><strong>Usage</strong>: In order to populate the crate def map, we need to collect the definitions. This is what this data structure does with the <code>collect_defs</code> method.</p>\n<hr>\n<p><strong>collect_defs method</strong></p>\n<p><strong>Usage</strong> : As mentioned above, this is used to create a DefCollector and collect definitions.</p>\n<p><strong>Notes:</strong> This method will first fetch the crate graph, and get the dependencies for the crate you are trying to fetch definitions for. For each dependency, you will create a CrateDefMap. This means that this is a recursive call. Luckily, the CrateGraph prevents cyclic dependencies between crates.</p>\n<p>After collecting the CrateDefMap for the dependency, the dependency name and it’s root moduleID is added to the CrateDefMap of the crate in question. It is added to the <code>extern prelude</code> field. This is how this crate will have access  to definitions in an external crate.</p>\n<p>Of interest, at the end of the method, a DefCollector structure is instantiated with the def_map of the crate in question. This DefMap now has the DefMap of all of its dependencies indirectly.</p>\n<p>def_collector.collect() is then called.</p>\n<hr>\n<h2>DefCollector::collect method</h2>\n<p><strong>usage :</strong> As mentioned above, the main job of the DefCollector is to collect Definitions in a crate. We could not do this if we did not collect the definitions of it’s dependencies first. We have done this, so now we have all of the information needed.  </p>\n<p><strong>Note:</strong>  The first thing we do is we create an ItemTree from the root_file_id. In most cases the root_file_id will be (<a href=\"http://lib.rs/main.rs\">lib.rs/main.rs</a>).  </p>\n<p>Now since a crate is just a bunch of modules, we give the ItemTree to a ModCollector data structure, which collects all of the definitions within the Module using the item tree for that root file. If the root module declares another module ie <code>mod foo</code>, then we also recursively collect that module in this procedure  </p>\n<p>We then need to do import resolution, ie the use statements. We do not do Name Resolution here it seems.</p>\n<hr>\n<p><strong>ModCollector::collect method</strong>  </p>\n<p><strong>usage:</strong> Collects all definitions within a module.  </p>\n<p><strong>Note:</strong>  This holds a mut ref to the def collector, because whenever we see a use statement here, we simply add it to the list of unresolved imports and resolve those after. See DefCollector::collect where I mention import resolution</p>",
        "id": 220704051,
        "sender_full_name": "kev",
        "timestamp": 1608652650
    },
    {
        "content": "<p>not sure who to ping, maybe <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>  ?</p>",
        "id": 220704287,
        "sender_full_name": "kev",
        "timestamp": 1608652757
    },
    {
        "content": "<p>If any of this is correct, I'm wondering also:</p>\n<ul>\n<li>what is the purpose of the ItemTree?</li>\n<li>where the part is that does variable resolution is?</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// a is not defined</span>\n</code></pre></div>\n<p>The part which gives the above error for example. Or are definitions in the CrateDefMap not necessarily resolved lexically yet?</p>",
        "id": 220705908,
        "sender_full_name": "kev",
        "timestamp": 1608653565
    },
    {
        "content": "<p>This is correct in broad strokes, yeah <span class=\"user-mention\" data-user-id=\"369769\">@kev</span></p>",
        "id": 220706777,
        "sender_full_name": "matklad",
        "timestamp": 1608654083
    },
    {
        "content": "<p>Btw, if you intend to pursue this investigation furhter,   it woudl be really helpful if you can write this all down and submit as a pull reqeust to the architercture.md document :-)</p>",
        "id": 220706840,
        "sender_full_name": "matklad",
        "timestamp": 1608654118
    },
    {
        "content": "<p>Couple of clarification:</p>\n<p><code>DefCollector</code> is only a temporary, ephemeral data structure, and its sole goal is producing the <code>CrateDefMap</code></p>",
        "id": 220706942,
        "sender_full_name": "matklad",
        "timestamp": 1608654168
    },
    {
        "content": "<p>After <code>DefMap</code> is ready, the collector is gone.</p>",
        "id": 220706954,
        "sender_full_name": "matklad",
        "timestamp": 1608654181
    },
    {
        "content": "<p>Important point about <code>CrateGraph</code> is that it allows several logical crates share the same source file. Ie, you can have <code>CrateId(0)</code> and <code>CrateId(1)</code> both point to <code>src/lib.rs</code>, with the difference that <code>0</code> is <code>--cfg=test</code>, and <code>1</code> is not</p>",
        "id": 220707252,
        "sender_full_name": "matklad",
        "timestamp": 1608654260
    },
    {
        "content": "<p>Variable resolution happens here: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/b28322eed6b977eb566444e8edbb229f4f610cd6/crates/hir_def/src/body/scope.rs\">https://github.com/rust-analyzer/rust-analyzer/blob/b28322eed6b977eb566444e8edbb229f4f610cd6/crates/hir_def/src/body/scope.rs</a></p>",
        "id": 220707489,
        "sender_full_name": "matklad",
        "timestamp": 1608654340
    },
    {
        "content": "<p>TYpe-dependent resolution <code>x.meth()</code> happens during the rest of the type inference, over here: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/b28322eed6b977eb566444e8edbb229f4f610cd6/crates/hir_ty/src/infer/expr.rs#L835-L840\">https://github.com/rust-analyzer/rust-analyzer/blob/b28322eed6b977eb566444e8edbb229f4f610cd6/crates/hir_ty/src/infer/expr.rs#L835-L840</a></p>",
        "id": 220707600,
        "sender_full_name": "matklad",
        "timestamp": 1608654381
    },
    {
        "content": "<p>As for the <code>ItemTree</code>, in the broad strokes its sole purpose is performance optimization</p>",
        "id": 220707654,
        "sender_full_name": "matklad",
        "timestamp": 1608654416
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Is.20this.20correct.3F/near/220706840\">said</a>:</p>\n<blockquote>\n<p>Btw, if you intend to pursue this investigation furhter,   it woudl be really helpful if you can write this all down and submit as a pull reqeust to the architercture.md document :-)</p>\n</blockquote>\n<p>Yep!</p>",
        "id": 220707746,
        "sender_full_name": "kev",
        "timestamp": 1608654478
    },
    {
        "content": "<p>It would be totally possible to construct <code>CrateDefMap</code> directly from <code>SyntaxNode</code>s, bypassing the item tree. </p>\n<p>We, however, insert an <code>ItemTree</code> as a mediator there. <code>ItemTree</code> is build <em>per-file</em> (so, it doesn't know about modules, cfg flags or crates). It's core property is that, if you edit code inside a function's body, the item tree for the corresponing file stays the same.</p>",
        "id": 220707859,
        "sender_full_name": "matklad",
        "timestamp": 1608654530
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Is.20this.20correct.3F/near/220707252\">said</a>:</p>\n<blockquote>\n<p>Important point about <code>CrateGraph</code> is that it allows several logical crates share the same source file. Ie, you can have <code>CrateId(0)</code> and <code>CrateId(1)</code> both point to <code>src/lib.rs</code>, with the difference that <code>0</code> is <code>--cfg=test</code>, and <code>1</code> is not</p>\n</blockquote>\n<p>Ah right, I noticed that from the tests, where the same FileID was used multiple times</p>",
        "id": 220707879,
        "sender_full_name": "kev",
        "timestamp": 1608654540
    },
    {
        "content": "<p>That means that, when you edit inside functions (so, most of the time), we can avoid re-computing name resolution, because name resolution looks only at the ItemTrees, and not at the raw text/sytnax trees</p>",
        "id": 220707924,
        "sender_full_name": "matklad",
        "timestamp": 1608654572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Is.20this.20correct.3F/near/220707489\">said</a>:</p>\n<blockquote>\n<p>Variable resolution happens here: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/b28322eed6b977eb566444e8edbb229f4f610cd6/crates/hir_def/src/body/scope.rs\">https://github.com/rust-analyzer/rust-analyzer/blob/b28322eed6b977eb566444e8edbb229f4f610cd6/crates/hir_def/src/body/scope.rs</a></p>\n</blockquote>\n<p>If I have an item tree, can I be sure that variables have been resolved?</p>",
        "id": 220708145,
        "sender_full_name": "kev",
        "timestamp": 1608654694
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Is.20this.20correct.3F/near/220707859\">said</a>:</p>\n<blockquote>\n<p>It would be totally possible to construct <code>CrateDefMap</code> directly from <code>SyntaxNode</code>s, bypassing the item tree. </p>\n<p>We, however, insert an <code>ItemTree</code> as a mediator there. <code>ItemTree</code> is build <em>per-file</em> (so, it doesn't know about modules, cfg flags or crates). It's core property is that, if you edit code inside a function's body, the item tree for the corresponing file stays the same.</p>\n</blockquote>\n<p>Oh this makes sense to me, as you pass the ItemTree to the ModuleCollector which then iterates the items and resolves the module declarations</p>",
        "id": 220708304,
        "sender_full_name": "kev",
        "timestamp": 1608654784
    },
    {
        "content": "<p>No names are resolved in the item tree</p>",
        "id": 220708637,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608654960
    },
    {
        "content": "<p>It's a simplified view of the syntax tree</p>",
        "id": 220708707,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608654977
    },
    {
        "content": "<blockquote>\n<p>If I have an item tree, can I be sure that variables have been resolved?</p>\n</blockquote>\n<p>The opposite actually: item tree simply doesn't contain information about local variables. This is why it doesn't change when you add new local variable!</p>",
        "id": 220708830,
        "sender_full_name": "matklad",
        "timestamp": 1608655058
    },
    {
        "content": "<p>that's the whole trick behind bening incremental -- you try to actively ignore and avoid knowing more than you stricktly need :)</p>",
        "id": 220708916,
        "sender_full_name": "matklad",
        "timestamp": 1608655087
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Is.20this.20correct.3F/near/220708637\">said</a>:</p>\n<blockquote>\n<p>No names are resolved in the item tree</p>\n</blockquote>\n<p>Not sure why I keep erroring on this fact :(</p>",
        "id": 220708947,
        "sender_full_name": "kev",
        "timestamp": 1608655106
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Is.20this.20correct.3F/near/220708830\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>If I have an item tree, can I be sure that variables have been resolved?</p>\n</blockquote>\n<p>The opposite actually: item tree simply doesn't contain information about local variables. This is why it doesn't change when you add new local variable!</p>\n</blockquote>\n<p>So If I have</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">mod</span> <span class=\"nn\">bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"hello\"</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">hello</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"k\">u64</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The ItemTree would only contain the information about the module declarations, the hello function, and the constant K ?</p>",
        "id": 220709159,
        "sender_full_name": "kev",
        "timestamp": 1608655209
    },
    {
        "content": "<p>yeah, and it only knows about item signatures, not bodies</p>",
        "id": 220709236,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608655267
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Is.20this.20correct.3F/near/220709236\">said</a>:</p>\n<blockquote>\n<p>yeah, and it only knows about item signatures, not bodies</p>\n</blockquote>\n<p>Oh so it only know that there is a constant K of type &amp;Str.</p>\n<p>If I were to connect what you and matklad are saying, when you say \"it only knows about\",  do you mean it has a stable ID to the definition, but it does not know the contents?</p>",
        "id": 220709523,
        "sender_full_name": "kev",
        "timestamp": 1608655418
    },
    {
        "content": "<p>So even if </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">     </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"hello\"</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>changes to </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">     </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"world\"</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This is fine since, what was being stored was:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">constant</span><span class=\"w\"> </span>: <span class=\"nc\">K</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">type</span> : <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">body_id</span><span class=\"w\"> </span>: <span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And <code>body_id : 2</code> does not change between compilations</p>",
        "id": 220709761,
        "sender_full_name": "kev",
        "timestamp": 1608655537
    },
    {
        "content": "<p>yes, see: <a href=\"https://rust-analyzer.github.io/rust-analyzer/hir_def/item_tree/struct.Const.html\">https://rust-analyzer.github.io/rust-analyzer/hir_def/item_tree/struct.Const.html</a></p>",
        "id": 220709831,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608655566
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Is.20this.20correct.3F/near/220709831\">said</a>:</p>\n<blockquote>\n<p>yes, see: <a href=\"https://rust-analyzer.github.io/rust-analyzer/hir_def/item_tree/struct.Const.html\">https://rust-analyzer.github.io/rust-analyzer/hir_def/item_tree/struct.Const.html</a></p>\n</blockquote>\n<p>Oh thanks, it points to an AST_ID so if I were to move const K down the page, then it would recompile since it is a different AST Node number?</p>",
        "id": 220709954,
        "sender_full_name": "kev",
        "timestamp": 1608655649
    },
    {
        "content": "<p>yeah, if you move it past another item</p>",
        "id": 220710067,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608655710
    },
    {
        "content": "<p>Oh interesting, that the span changing does not cause it to recompile</p>",
        "id": 220710284,
        "sender_full_name": "kev",
        "timestamp": 1608655822
    },
    {
        "content": "<p>I guess since span is only really needed for error reporting, it is something you can put in a side table or recompute from the absolute width of each node starting from the top...</p>\n<p>Thanks for correcting by the way :) matklad and Jonas</p>",
        "id": 220710377,
        "sender_full_name": "kev",
        "timestamp": 1608655887
    },
    {
        "content": "<p>So <code>ItemTreeData</code> has an <code>exprs</code> field that's not used, what is it supposed to do? Can I remove it?</p>",
        "id": 221148967,
        "sender_full_name": "Laurențiu",
        "timestamp": 1609261532
    },
    {
        "content": "<p>For now, yeah</p>",
        "id": 221149396,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1609261834
    },
    {
        "content": "<p>I think it was supposed to be used for array lengths</p>",
        "id": 221149416,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1609261850
    },
    {
        "content": "<p>Are you looking into ItemTree memory usage?</p>",
        "id": 221149428,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1609261864
    },
    {
        "content": "<p>I tried to, but couldn't find much. I'm not even sure where the memory goes. The query shows 315MB on RA, but if I duplicate all of the <code>ItemTree</code> members (the method from <a href=\"https://rust-analyzer.github.io/blog/2020/12/04/measuring-memory-usage-in-rust.html#amdahls-estimator\">https://rust-analyzer.github.io/blog/2020/12/04/measuring-memory-usage-in-rust.html#amdahls-estimator</a>), it only grows to 445 MB. 430 MB when duplicating only <code>ItemTreeData</code>.</p>",
        "id": 221149742,
        "sender_full_name": "Laurențiu",
        "timestamp": 1609262100
    },
    {
        "content": "<p>Are you cloning the entire thing?</p>",
        "id": 221149938,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1609262238
    },
    {
        "content": "<p>Yes, I added fields with copies of the original ones. But I'm sure I'm missing something.</p>",
        "id": 221150064,
        "sender_full_name": "Laurențiu",
        "timestamp": 1609262346
    },
    {
        "content": "<p>Hmm, interesting, so that's 200 MB of unaccounted memory</p>",
        "id": 221150094,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1609262382
    },
    {
        "content": "<p>Does it contain an <code>Arc</code> or similar?</p>",
        "id": 221150103,
        "sender_full_name": "bjorn3",
        "timestamp": 1609262390
    },
    {
        "content": "<p>Shame that there's no good memory profiler, would remove a lot of the guesswork</p>",
        "id": 221150168,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1609262421
    },
    {
        "content": "<p>I'm tempted to dump the whole thing to disk, in case something catches my eye -- if I could only figure out how to.</p>",
        "id": 221150217,
        "sender_full_name": "Laurențiu",
        "timestamp": 1609262488
    },
    {
        "content": "<p>I also think we're not calling <code>shirk_to_fit</code> on those <code>HashMap</code>s, but adding them didn't work or didn't do anything</p>",
        "id": 221150735,
        "sender_full_name": "Laurențiu",
        "timestamp": 1609262843
    },
    {
        "content": "<p>One thing that would be interesting to investigate is to skip the item tree if a macro-generated file consists only of a single macro invocation (something that happens often with self-invoking macros)</p>",
        "id": 221159801,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1609270007
    },
    {
        "content": "<p>I've taken some measurements a while ago that indicated that roughly half of all itemtrees come from macros. Much fewer than I expected, but it could still be worth it.</p>",
        "id": 221159829,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1609270046
    },
    {
        "content": "<p>That's a lot of macros</p>",
        "id": 221159908,
        "sender_full_name": "Laurențiu",
        "timestamp": 1609270087
    },
    {
        "content": "<p>Just tried the profiling thing again and neither Massif nor DHAT nor heaptrack are usable on r-a</p>",
        "id": 221160018,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1609270193
    },
    {
        "content": "<blockquote>\n<p>[Disabling MBE] seems to speed up parsing by some 45%</p>\n</blockquote>\n<p>Forgot about that one <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> But that's mostly unrelated to the memory usage.</p>",
        "id": 221160099,
        "sender_full_name": "Laurențiu",
        "timestamp": 1609270230
    },
    {
        "content": "<p>I wonder if profiling would work better on some <code>no_std</code> code</p>",
        "id": 221160171,
        "sender_full_name": "Laurențiu",
        "timestamp": 1609270308
    },
    {
        "content": "<p>Maybe try nnethercote's Rusty DHAT thing?</p>",
        "id": 221161823,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1609271699
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"226095\">Dirkjan Ochtman</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Is.20this.20correct.3F/near/221161823\">said</a>:</p>\n<blockquote>\n<p>Maybe try nnethercote's Rusty DHAT thing?</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/6831\">https://github.com/rust-analyzer/rust-analyzer/pull/6831</a></p>",
        "id": 221161943,
        "sender_full_name": "Laurențiu",
        "timestamp": 1609271779
    },
    {
        "content": "<p>fair enough</p>",
        "id": 221169289,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1609277693
    },
    {
        "content": "<blockquote>\n<p>22975 ItemTrees, 20519 from macro expansion, 2456 from normal files</p>\n</blockquote>\n<p>Oops, looks like I was grossly misremembering the numbers</p>",
        "id": 221466422,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1609701812
    },
    {
        "content": "<p>Maybe last time I looked at memory usage, not count</p>",
        "id": 221466427,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1609701839
    },
    {
        "content": "<p>oh wow</p>",
        "id": 221542037,
        "sender_full_name": "matklad",
        "timestamp": 1609776323
    },
    {
        "content": "<p>Hm, I wish we could do something about expansions...</p>",
        "id": 221542183,
        "sender_full_name": "matklad",
        "timestamp": 1609776371
    },
    {
        "content": "<p>Like, \"there are few files\" is an important optimization tool, and macros break that</p>",
        "id": 221542338,
        "sender_full_name": "matklad",
        "timestamp": 1609776447
    },
    {
        "content": "<p>Some stats about mbe: <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/5549#issuecomment-755311449\">https://github.com/rust-analyzer/rust-analyzer/issues/5549#issuecomment-755311449</a></p>",
        "id": 221769041,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1609941291
    },
    {
        "content": "<p>On <a href=\"https://github.com/nrf-rs/nrf-hal/\">nrf-hal</a>, with RSS of about 1.5 GB:</p>\n<div class=\"codehilite\"><pre><span></span><code>Per-query memory usage:\n   471mb ItemTreeQuery\n    76mb ImplDataQuery\n    52mb HygieneFrameQuery\n</code></pre></div>\n<p>Yesterday I saw r-a using a total of 3.5 GB, even (but the memory usage reported there was broken)</p>",
        "id": 223119824,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610976907
    },
    {
        "content": "<p>Perhaps the most realistic way to reduce this is to start doing periodic GC again?</p>",
        "id": 223119857,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610976924
    },
    {
        "content": "<p>Seems reasonable!</p>",
        "id": 223120158,
        "sender_full_name": "matklad",
        "timestamp": 1610977091
    },
    {
        "content": "<p>But also ItemTree feels like it should be smaller perhaps...</p>",
        "id": 223120205,
        "sender_full_name": "matklad",
        "timestamp": 1610977124
    },
    {
        "content": "<p>Do we ever rebuild the item tree?</p>",
        "id": 224013692,
        "sender_full_name": "Laurențiu",
        "timestamp": 1611652739
    },
    {
        "content": "<p>when the file itself chages</p>",
        "id": 224015246,
        "sender_full_name": "matklad",
        "timestamp": 1611653627
    },
    {
        "content": "<p>Oh, then we don't indefinitely accumulate old items</p>",
        "id": 224015514,
        "sender_full_name": "Laurențiu",
        "timestamp": 1611653781
    },
    {
        "content": "<p>Might still be good to observe the counts...</p>",
        "id": 224015662,
        "sender_full_name": "matklad",
        "timestamp": 1611653883
    },
    {
        "content": "<p>I've stared at DHAT logs and saw a lot of path lowering, so this reduces memory usage of <code>ItemTreeQuery</code> by ~20% <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/7557\">https://github.com/rust-analyzer/rust-analyzer/pull/7557</a></p>",
        "id": 225201129,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612463107
    },
    {
        "content": "<p>Should we also add <code>Count</code>s to these?</p>",
        "id": 225204036,
        "sender_full_name": "Laurențiu",
        "timestamp": 1612464417
    },
    {
        "content": "<p>we could, though that would make them even larger</p>",
        "id": 225205878,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612465248
    },
    {
        "content": "<p><code>Count</code> is a ZST, I think</p>",
        "id": 225205975,
        "sender_full_name": "Laurențiu",
        "timestamp": 1612465290
    },
    {
        "content": "<p><a href=\"https://github.com/matklad/countme/blob/master/src/lib.rs#L70\">https://github.com/matklad/countme/blob/master/src/lib.rs#L70</a></p>",
        "id": 225206016,
        "sender_full_name": "Laurențiu",
        "timestamp": 1612465308
    },
    {
        "content": "<p>oh, right, it's a global hashmap</p>",
        "id": 225206171,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612465366
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>hir_def::item_tree::Const               12_225       12_225       12_225\nhir_def::item_tree::Enum                 1_360        1_360        1_360\nhir_def::item_tree::ExternCrate            804          456          455\nhir_def::item_tree::Field               14_995       14_995       14_995\nhir_def::item_tree::Function            64_000       64_000       64_000\nhir_def::item_tree::Impl                35_714       35_714       35_714\nhir_def::item_tree::Import              26_796       26_796       26_796\nhir_def::item_tree::ItemTree            46_191       46_191       46_191\nhir_def::item_tree::MacroCall           63_149       63_149       63_149\nhir_def::item_tree::MacroDef                20           20           20\nhir_def::item_tree::MacroRules           1_057        1_057        1_057\nhir_def::item_tree::Mod                  3_710        3_710        3_710\nhir_def::item_tree::Static                 864          864          864\nhir_def::item_tree::Struct               5_252        5_252        5_252\nhir_def::item_tree::Trait                  870          870          870\nhir_def::item_tree::TypeAlias            7_746        7_746        7_746\nhir_def::item_tree::Union                   11           11           11\nhir_def::item_tree::Variant              5_666        5_666        5_666\n</code></pre></div>",
        "id": 225293035,
        "sender_full_name": "Laurențiu",
        "timestamp": 1612528661
    },
    {
        "content": "<p>Well, that doesn't seem too useful</p>",
        "id": 225293168,
        "sender_full_name": "Laurențiu",
        "timestamp": 1612528740
    },
    {
        "content": "<p>huh?</p>",
        "id": 225293391,
        "sender_full_name": "matklad",
        "timestamp": 1612528899
    },
    {
        "content": "<p>I asked about adding counts to the item tree structs</p>",
        "id": 225293454,
        "sender_full_name": "Laurențiu",
        "timestamp": 1612528927
    },
    {
        "content": "<p>why there are so many consts? I'd expect structs to be more frequent</p>",
        "id": 225293458,
        "sender_full_name": "matklad",
        "timestamp": 1612528930
    },
    {
        "content": "<p>910 in libstd</p>",
        "id": 225293475,
        "sender_full_name": "Laurențiu",
        "timestamp": 1612528958
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>hir_def::item_tree::Const                  910          910          910\nhir_def::item_tree::Enum                   211          211          211\nhir_def::item_tree::ExternCrate             10            8            7\nhir_def::item_tree::Field                1_327        1_327        1_327\nhir_def::item_tree::Function            14_233       14_233       14_233\nhir_def::item_tree::Impl                 9_390        9_390        9_390\nhir_def::item_tree::Import               3_192        3_192        3_192\nhir_def::item_tree::ItemTree             4_764        4_764        4_764\nhir_def::item_tree::MacroCall            8_205        8_205        8_205\nhir_def::item_tree::MacroDef                20           20           20\nhir_def::item_tree::MacroRules             228          228          228\nhir_def::item_tree::Mod                    606          606          606\nhir_def::item_tree::Static                  66           66           66\nhir_def::item_tree::Struct                 639          639          639\nhir_def::item_tree::Trait                  203          203          203\nhir_def::item_tree::TypeAlias            3_092        3_092        3_092\nhir_def::item_tree::Union                    3            3            3\nhir_def::item_tree::Variant                866          866          866\n</code></pre></div>",
        "id": 225293485,
        "sender_full_name": "Laurențiu",
        "timestamp": 1612528968
    },
    {
        "content": "<p>Be a rebel, use a Union XD</p>",
        "id": 225293534,
        "sender_full_name": "matklad",
        "timestamp": 1612529008
    }
]