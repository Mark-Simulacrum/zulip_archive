[
    {
        "content": "<p>This bug (<a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/3898\">https://github.com/rust-analyzer/rust-analyzer/issues/3898</a>) has been a thorn in my side for a long time. It's marked as actionable, is there any pointers anybody can give me a pointer for the right way to go about it?</p>\n<p>Totally unfamiliar with the r-a codebase, but willing to bang my head against the wall a little if I can get some pointers on where I should start.</p>",
        "id": 228558312,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614762383
    },
    {
        "content": "<p>Don't read too much into my \"actionable\" labels <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 228559295,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614762878
    },
    {
        "content": "<p>Ah, that was a fear of mine...</p>",
        "id": 228560127,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614763286
    },
    {
        "content": "<p>I think this happens around <code>crates/project_model</code></p>",
        "id": 228560494,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614763472
    },
    {
        "content": "<p>(If the \"right\" fix is hard, is there anything we can do to fix this in just the stdlib's (e.g. core::arch's) case?</p>\n<p>It's not <em>that</em> common to use #[path], and usually there are alternatives (see: <code>libc</code> crate moving away from it). unfortunately, for this #[path] use case, it seems pretty tricky to fix in the stdlib, and it makes <code>{core,std}::arch</code> very painful in r-a.)</p>",
        "id": 228560510,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614763480
    },
    {
        "content": "<p>yeah, thats where i was looking.</p>",
        "id": 228560520,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614763490
    },
    {
        "content": "<p>Hmm, project model seems more concerned with building a model of a project, and from the description of the issue, it sounds like the model it builds is <em>probably</em> fine — the issue is that the check is done against the package and not the workspace (at least, that's what someone in the issue said, and it makes sense to me).</p>\n<p>AFAICT project_model doesn't have much to do with elements in rust code (like <code>#[path]</code>) so much as project configuration, and given the above I don't know that there's a reason to believe this is wrong</p>",
        "id": 228562011,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614764174
    },
    {
        "content": "<p>That or I'm completely lost — if you're confident it's in there I can keep looking. I don't understand what much of it does in any detail, just what it seems to do based on function names and what bits and pieces I can follow of the internals do</p>",
        "id": 228562087,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614764218
    },
    {
        "content": "<p>ah, <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/2b22fc929a5f13d6cddb9458b1b205f9aee60299/crates/vfs/src/anchored_path.rs\">https://github.com/rust-analyzer/rust-analyzer/blob/2b22fc929a5f13d6cddb9458b1b205f9aee60299/crates/vfs/src/anchored_path.rs</a> seems promising...</p>",
        "id": 228562348,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614764341
    },
    {
        "content": "<p>My current theory is: this code <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/2b22fc929a5f13d6cddb9458b1b205f9aee60299/crates/base_db/src/lib.rs#L153-L158\">https://github.com/rust-analyzer/rust-analyzer/blob/2b22fc929a5f13d6cddb9458b1b205f9aee60299/crates/base_db/src/lib.rs#L153-L158</a> (or, maybe something it delegates to) is referring to the source root of the package (is that what SourceRoot is? of the package?)</p>\n<p>Hrm. That's a bit tricky if so, since it probably means I <em>was</em> wrong about my thought that project_model seemed out of place... Or, this change might be hard, if it goes against the way a lot of stuff is set up (which seems plausible at the moment)</p>",
        "id": 228563661,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614765035
    },
    {
        "content": "<p>Actually, hm, is there even a notion of a workspace of a dependency (that isn't part of the current workspace)? (e.g. in this case std)</p>",
        "id": 228563810,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614765128
    },
    {
        "content": "<p>the actual analysis code is agnostic of cargo, so it doesn't know about workspaces, just about the crate graph, and about the set of source roots. source roots are considered independent, and I don't think imports across them will ever be possible; hence why this probably needs to be solved by changing how source roots are set up by project_model</p>",
        "id": 228564590,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1614765489
    },
    {
        "content": "<p>a source root is just basically a root directory containing source files. every source file has to be in some source root, and we don't know anything about the absolute path of the source root, so relative paths can't reach across source roots. IIRC there aren't any other requirements for source roots</p>",
        "id": 228564789,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1614765580
    },
    {
        "content": "<p>Hm, yeah, I see. That makes sense and is a bit unfortunate (since it makes this change harder). Hrm.</p>",
        "id": 228565047,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614765678
    },
    {
        "content": "<p>so, i don't know if i see a way of easily solving this in the general case, but solving it in the stdlib case seems doable since we have information about them as part of the sysroot. does that sound plausibly correct?</p>",
        "id": 228566028,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614766114
    },
    {
        "content": "<p>it'd be kind of hacky though, probably :(</p>",
        "id": 228566047,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614766124
    },
    {
        "content": "<p>this is kind of odd.</p>\n<p>in <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/2b22fc929a5f13d6cddb9458b1b205f9aee60299/crates/project_model/src/sysroot.rs#L83-L90\">https://github.com/rust-analyzer/rust-analyzer/blob/2b22fc929a5f13d6cddb9458b1b205f9aee60299/crates/project_model/src/sysroot.rs#L83-L90</a> STD_DEPS (including <code>stdarch</code>) is added to libstd's set of, well, deps. Thing is, that crate doesn't exist. <code>stdarch</code> is a workspace there, and it doesnt even contain a crate named stdarch. So I'm not sure what adding it as a dep does (if anything?) (EDIT: I see, stdarch will fail the check for <code>{}/src/lib.rs</code>/lib{}/lib.rs`, so it won't get added...) </p>\n<p>that said, this must more or less somehow work, since <code>std::is_x86_feature_detected!</code> works and r-a doesn't get upset about it. Additionally, libstd does the same thing to import it: <a href=\"https://github.com/rust-lang/rust/blob/master/library/std/src/lib.rs#L538\">https://github.com/rust-lang/rust/blob/master/library/std/src/lib.rs#L538</a>, e.g. a path outside of its package and into one of the stdarch crates (I actually would have expected <code>#[macro_use]</code> to be required on that <code>mod</code> but, huh. guess not... weird)</p>",
        "id": 228570950,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614768030
    },
    {
        "content": "<p>... unfortunately it seems like this may just work for macros, and not for other items...</p>",
        "id": 228571004,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614768060
    },
    {
        "content": "<p>I am not familiar that part of code, but is it possible to add a new settings : \"rust-analyzer.files.includDirs\" for explict include those paths ?</p>",
        "id": 228586689,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1614776481
    },
    {
        "content": "<p>hm, I'm not sure. I'm not sure what I'd set it to. These paths are part of the standard library, so the path to include would be dependent on your sysroot. Also, given that it's part of the stdlib that has this issue, it would be nice to handle this for all users, and not just ones that set some config.</p>",
        "id": 228610527,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614785170
    },
    {
        "content": "<p>i also think the issue isnt so much determining the path of the file in r-a, but ensuring the right part of the code knows about it.</p>",
        "id": 228610760,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614785262
    },
    {
        "content": "<p>the file in question is something like <code>$sysroot/lib/rustlibs/library/stdarch/crates/core_arch/src/mod.rs</code>, and it's included (via #[path]) from <code>$sysroot/lib/rustlibs/library/core/src/lib.rs</code>, or something.</p>\n<p>(on my phone, so don't quote me about either of those paths exactly, its something like that though)</p>",
        "id": 228611268,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614785430
    },
    {
        "content": "<p>but as you can see its easy to derive the correct path, just hard to get it where it's needed, which is possibly something like <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/2b22fc929a5f13d6cddb9458b1b205f9aee60299/crates/base_db/src/lib.rs#L153-L158\">https://github.com/rust-analyzer/rust-analyzer/blob/2b22fc929a5f13d6cddb9458b1b205f9aee60299/crates/base_db/src/lib.rs#L153-L158</a> (not 100% certain, tbh)</p>",
        "id": 228611440,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614785508
    },
    {
        "content": "<p>(your suggestion would possibly help for the non-libcore case, e.g. where it's my own module that is doing this weird including, but honestly i don't really care about that case that much, and IDK that it would help for the libcore case)</p>",
        "id": 228611749,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614785608
    },
    {
        "content": "<p>all that said i'm not super familiar with any of this... so i could be totally off base here. maybe i'm missing something.</p>",
        "id": 228612057,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614785712
    },
    {
        "content": "<p>I'm assuming the problem is that we don't put all of the sysroot into the same source root, so the question would be why we don't</p>",
        "id": 228612654,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1614785932
    },
    {
        "content": "<p>oh. yeah, hm, that sounds like it would do the trick... i couldn't figure out where the sysroot stuff got translated into SourceRoots though, but ill take another look in a bit.</p>",
        "id": 228613057,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614786067
    }
]