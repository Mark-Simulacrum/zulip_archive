[
    {
        "content": "<p>Right now I have this case:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">match_arm</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">node_at_offset</span>::<span class=\"o\">&lt;</span><span class=\"n\">MatchArm</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>apparently, RA can recognize <code>node_at_offset</code> as:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">node_at_offset</span><span class=\"o\">&lt;</span><span class=\"n\">N</span>: <span class=\"nc\">AstNode</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>but it can not recognize <code>match_arm</code>, after removal of <code>?</code>, RA correctly shows <code>match_arm</code> as <code>Option&lt;&amp;MatchArm&gt;</code>, is this a known issue?</p>",
        "id": 164643591,
        "sender_full_name": "Hoang Luu",
        "timestamp": 1556734087
    },
    {
        "content": "<p>Yeah, this is not yet implemented</p>",
        "id": 164643628,
        "sender_full_name": "matklad",
        "timestamp": 1556734128
    },
    {
        "content": "<p>I'm interested in this, which part should I look into to implement it? Or the scope of this one is too big right now?</p>",
        "id": 164644095,
        "sender_full_name": "Hoang Luu",
        "timestamp": 1556734469
    },
    {
        "content": "<p>I think this is blocked by chalk integration, cc <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span></p>",
        "id": 164644155,
        "sender_full_name": "matklad",
        "timestamp": 1556734538
    },
    {
        "content": "<p>The specific bit of code that handle is is <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/12629d5e4f2d949eedb707dedad4d75eff09e683/crates/ra_hir/src/ty/infer.rs#L1084-L1087\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/12629d5e4f2d949eedb707dedad4d75eff09e683/crates/ra_hir/src/ty/infer.rs#L1084-L1087\">https://github.com/rust-analyzer/rust-analyzer/blob/12629d5e4f2d949eedb707dedad4d75eff09e683/crates/ra_hir/src/ty/infer.rs#L1084-L1087</a></p>",
        "id": 164644239,
        "sender_full_name": "matklad",
        "timestamp": 1556734577
    },
    {
        "content": "<p>I see, then it's too big for now. I think solving that adhoc-ly by just unwrap <code>Result</code>/<code>Option</code> could be simple and usable for most of the cases, but if solving it generally is near then it's worth to wait.</p>",
        "id": 164644949,
        "sender_full_name": "Hoang Luu",
        "timestamp": 1556735026
    },
    {
        "content": "<p>Yeah, exactly :)</p>",
        "id": 164645666,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1556735519
    },
    {
        "content": "<p>Now that we have chalk integrated, how should we implement <code>TryExpr</code> properly?<br>\nMy local small hack right now:</p>\n<div class=\"codehilite\"><pre><span></span>            Expr::Try { expr } =&gt; {\n                if let Ty::Apply(ty) = self.infer_expr(*expr, &amp;Expectation::none()) {\n                    if ty.parameters.0.len() != 1 {\n                        Ty::Unknown\n                    } else {\n                        Ty::clone(&amp;ty.parameters.as_single())\n                    }\n                } else {\n                    Ty::Unknown\n                }\n            }\n</pre></div>\n\n\n<p>this reduce <code>Expressions of unknown type</code> of rust-analyzer projects from 15% to 14%</p>",
        "id": 165634239,
        "sender_full_name": "Hoang Luu",
        "timestamp": 1557849297
    },
    {
        "content": "<p>I'm currently looking into <code>Deref</code> handling, once we have that we should have the tools to project an associated type, which should make the path to implementing this pretty clear</p>",
        "id": 165635054,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1557849736
    },
    {
        "content": "<p>At which point I'll probably write up mentoring instructions for it ;)</p>",
        "id": 165635077,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1557849759
    },
    {
        "content": "<p>Great!!</p>",
        "id": 165635551,
        "sender_full_name": "Hoang Luu",
        "timestamp": 1557850057
    }
]