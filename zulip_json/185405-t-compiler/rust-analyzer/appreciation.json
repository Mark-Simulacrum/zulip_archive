[
    {
        "content": "<p>Just stumbled across rust-analyzer and WOW! Blazing fast!! This is going to make my life so much better when developing Rust, thanks so much to everybody working on this :)</p>",
        "id": 179878742,
        "sender_full_name": "Avery Harnish",
        "timestamp": 1572903067
    },
    {
        "content": "<p>I must say, I am myself amazed at how far have we gone already. Certain things start to feel so natural, that I am forgetting all the complex machinery that powers the features :) Just now, I've mindlessly fixed a bug with a nested option because I've noticed a type hint:</p>\n<p><a href=\"https://youtu.be/OlHZPglOtuQ\" target=\"_blank\" title=\"https://youtu.be/OlHZPglOtuQ\">https://youtu.be/OlHZPglOtuQ</a></p>\n<p>The way the hint changes when you add/remove <code>?</code> feels magical to me :)</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"OlHZPglOtuQ\" href=\"https://youtu.be/OlHZPglOtuQ\" target=\"_blank\" title=\"https://youtu.be/OlHZPglOtuQ\"><img src=\"https://i.ytimg.com/vi/OlHZPglOtuQ/default.jpg\"></a></div>",
        "id": 180599867,
        "sender_full_name": "matklad",
        "timestamp": 1573631124
    },
    {
        "content": "<p>Maybe we should put together a video of all the cool features in ra</p>",
        "id": 180623260,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1573650397
    },
    {
        "content": "<p>I used to watch those live crate videos on youtube when I first got into rust... it would be cool to do something like that using rust-analyzer</p>",
        "id": 180623365,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1573650480
    },
    {
        "content": "<p>/me (looking up from 1.5k word unfinished blog-post about find usages): \"that would be cool\"</p>",
        "id": 180623485,
        "sender_full_name": "matklad",
        "timestamp": 1573650582
    },
    {
        "content": "<p>I think it's an older feature, but I only recently found out about the semicolon insertion. I was scrolling around some large <code>if</code> to add a semicolon at the end, and it was already there. I thought I must have added it myself, then forgot about it.</p>",
        "id": 180635418,
        "sender_full_name": "Laurențiu",
        "timestamp": 1573657964
    },
    {
        "content": "<p>That, in fact, was on of the very first features implemented :)</p>",
        "id": 180636941,
        "sender_full_name": "matklad",
        "timestamp": 1573658687
    },
    {
        "content": "<p>Just used it for the first time yesterday, and I was really impressed!</p>",
        "id": 180656480,
        "sender_full_name": "Paul Faria",
        "timestamp": 1573669710
    },
    {
        "content": "<blockquote>\n<p>I must say, I am myself amazed at how far have we gone already. Certain things start to feel so natural, that I am forgetting all the complex machinery that powers the features :) Just now, I've mindlessly fixed a bug with a nested option because I've noticed a type hint:</p>\n<p><a href=\"https://youtu.be/OlHZPglOtuQ\" target=\"_blank\" title=\"https://youtu.be/OlHZPglOtuQ\">https://youtu.be/OlHZPglOtuQ</a></p>\n<p>The way the hint changes when you add/remove <code>?</code> feels magical to me :)</p>\n</blockquote>\n<p>very cool</p>",
        "id": 180731018,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1573738813
    },
    {
        "content": "<p>Oh, I found that RA works in some rustc source code now!. The <code>goto-definition</code> is a godsend for reading rustc source code.</p>",
        "id": 180798997,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1573788149
    },
    {
        "content": "<p>I've been using ra for a while now with vim. I mostly tend to use it for completion, and it has been getting steadily better. Kudos to all! This is already a major improvement over the previous state</p>",
        "id": 181266066,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574297472
    },
    {
        "content": "<p>I'm just coming back to this thread again to say how impressive it is that ra works on rustc and I can do things getting documentation, going to definition, finding references, etc on that huge code base</p>",
        "id": 185783578,
        "sender_full_name": "mark-i-m",
        "timestamp": 1579147183
    },
    {
        "content": "<p>rustc is peanuts. warp or lib p2p on the other hand.... :D</p>",
        "id": 185801673,
        "sender_full_name": "matklad",
        "timestamp": 1579170317
    },
    {
        "content": "<p>btw, we recently landed a nice perf improvement for larger files: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/2837\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/2837\">https://github.com/rust-analyzer/rust-analyzer/pull/2837</a></p>",
        "id": 185801698,
        "sender_full_name": "matklad",
        "timestamp": 1579170351
    },
    {
        "content": "<p>Oh, I just tested the new <code>ra_lsp_server analysis-stats</code> command in RA source code, and found that we have only 6% (4%+2%) unknown types:</p>\n<div class=\"codehilite\"><pre><span></span>Total expressions: 134949\nExpressions of unknown type: 5410 (4%)\nExpressions of partially unknown type: 3830 (2%)\nType mismatches: 272\n</pre></div>\n\n\n<p>And here is the <code>analysis-stats</code> output from <strong>Feb 2019</strong>:</p>\n<div class=\"codehilite\"><pre><span></span>Total expressions: 49160\nExpressions of unknown type: 8156 (16%)\nExpressions of partially unknown type: 2432 (4%)\n</pre></div>\n\n\n<p>What  a big improvement ! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 188431099,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1582013743
    },
    {
        "content": "<p>We're also 2.75x larger (total expressions)</p>",
        "id": 188432457,
        "sender_full_name": "Laurențiu",
        "timestamp": 1582015340
    },
    {
        "content": "<blockquote>\n<p>We're also 2.75x larger (total expressions)</p>\n</blockquote>\n<p>probably a big part of that comes from macro expansions that we can handle now and couldn't last year</p>",
        "id": 188433007,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1582016131
    },
    {
        "content": "<p>Hey, rust-analyzer is in trending vs code extensions: <a href=\"https://marketplace.visualstudio.com/vscode\" target=\"_blank\" title=\"https://marketplace.visualstudio.com/vscode\">https://marketplace.visualstudio.com/vscode</a></p>",
        "id": 188458895,
        "sender_full_name": "matklad",
        "timestamp": 1582038894
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/3194\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/3194\">Wow, even without a home page</a>...</p>",
        "id": 188459075,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1582039031
    },
    {
        "content": "<p>That is awesome</p>",
        "id": 188459612,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1582039390
    },
    {
        "content": "<p>also, 666 followers on twitter <span aria-label=\"smiling devil\" class=\"emoji emoji-1f608\" role=\"img\" title=\"smiling devil\">:smiling_devil:</span></p>",
        "id": 188460153,
        "sender_full_name": "matklad",
        "timestamp": 1582039730
    },
    {
        "content": "<p>Don't forget to ask your relatives and friends to put 5 stars on the marketplace!</p>",
        "id": 188461097,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1582040363
    },
    {
        "content": "<p>Finally, I don't need to be reminded that syntax is a private field, thanks <span class=\"user-mention\" data-user-id=\"231447\">@Kirill Bulatov</span> !</p>\n<p><a href=\"/user_uploads/4715/qoeKkdjW4P5ZD4HGU5QJTM6n/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/qoeKkdjW4P5ZD4HGU5QJTM6n/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/qoeKkdjW4P5ZD4HGU5QJTM6n/pasted_image.png\"></a></div>",
        "id": 188467722,
        "sender_full_name": "matklad",
        "timestamp": 1582044352
    },
    {
        "content": "<p>Actually, I think this is my first time coding in Rust with auto import (IntelliJ folks impled this just after I've left :) ), and the experience is really transformative.</p>",
        "id": 188569323,
        "sender_full_name": "matklad",
        "timestamp": 1582135875
    },
    {
        "content": "<p>I would like to enhance it further, but need guidance.<br>\nSo after the maintenance week is over, let's go through the options.</p>",
        "id": 188581011,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1582143727
    },
    {
        "content": "<p>I am amazed by how things now just work with macros</p>\n<p><a href=\"/user_uploads/4715/aEBSSvHrqR1vplpzyhAOqx8J/goto-macros.gif\" target=\"_blank\" title=\"goto-macros.gif\">goto-macros.gif</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/aEBSSvHrqR1vplpzyhAOqx8J/goto-macros.gif\" target=\"_blank\" title=\"goto-macros.gif\"><img src=\"/user_uploads/4715/aEBSSvHrqR1vplpzyhAOqx8J/goto-macros.gif\"></a></div><p>This jumps from macro to macro! Amazing work <span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span> !</p>",
        "id": 189678097,
        "sender_full_name": "matklad",
        "timestamp": 1583318038
    },
    {
        "content": "<p>Btw, this is a bit of meta note, but really love the fact that this thread exists at all, and I'm wondering if there are opportunities to do similar things in other corners of the rust community? What if there was a big \"this awesome thing just happened\" thread where people from any part of the community can post about cool accomplishments?</p>",
        "id": 189752197,
        "sender_full_name": "mark-i-m",
        "timestamp": 1583370280
    },
    {
        "content": "<p>I know this isn't news, but I haven't written much code lately and I just realized that <code>rust-analyzer</code> is starting to feel really polished now, with decent completion, go to definition and auto-import and related quick fixes.</p>",
        "id": 191021588,
        "sender_full_name": "Laurențiu",
        "timestamp": 1584555508
    },
    {
        "content": "<p>Yup. Also, ssr rocks!</p>",
        "id": 191021942,
        "sender_full_name": "matklad",
        "timestamp": 1584555673
    },
    {
        "content": "<p>Just converted a bunch of functions to methods with it</p>",
        "id": 191021971,
        "sender_full_name": "matklad",
        "timestamp": 1584555688
    },
    {
        "content": "<p>And this means that we can improve rust-analyzer itself faster ^^</p>",
        "id": 191022078,
        "sender_full_name": "matklad",
        "timestamp": 1584555736
    },
    {
        "content": "<p>Semantic highlighting is what rocks for me!</p>",
        "id": 191024015,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584556672
    },
    {
        "content": "<p>I tried it once, but it's too much of a hassle to use Insiders with that parameter <span aria-label=\"pensive\" class=\"emoji emoji-1f614\" role=\"img\" title=\"pensive\">:pensive:</span>.</p>",
        "id": 191024233,
        "sender_full_name": "Laurențiu",
        "timestamp": 1584556793
    },
    {
        "content": "<p>I added this to <code>.bashrc</code> </p>\n<div class=\"codehilite\"><pre><span></span> <span class=\"nb\">alias</span> <span class=\"nv\">code</span><span class=\"o\">=</span><span class=\"s2\">&quot;code-insiders --enable-proposed-api matklad.rust-analyzer&quot;</span>\n</pre></div>\n\n\n<p>Besides that migrated from <code>code</code> to <code>code-insiders</code> with the <a href=\"https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync\" target=\"_blank\" title=\"https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync\">sync extension</a>, but there is some experimental work going on to <a href=\"https://code.visualstudio.com/docs/editor/settings-sync\" target=\"_blank\" title=\"https://code.visualstudio.com/docs/editor/settings-sync\">add this feature to vscode from scratch</a>.</p>\n<p>The most annoying thing still is that I cannot start vscode by clicking the ui icon. I always need <code>Ctrl+Shift+T</code> -&gt; <code>code</code> to do this.</p>",
        "id": 191025038,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584557172
    },
    {
        "content": "<p>I think you can make a copy of the Code <code>.desktop</code> file and add that</p>",
        "id": 191025239,
        "sender_full_name": "Laurențiu",
        "timestamp": 1584557271
    },
    {
        "content": "<p>Hmm, yeah, that was not too annoying for me to spend another 5 minutes to setup that <code>.desktop</code> file now)</p>",
        "id": 191026467,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584557833
    },
    {
        "content": "<p>It might be off topic to this thread, but I just found out our fake token used in Completion is <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/1878fbe8bd60c7f9e58fda6dc7788e5f44ad0f89/crates/ra_ide/src/completion/completion_context.rs#L75\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/1878fbe8bd60c7f9e58fda6dc7788e5f44ad0f89/crates/ra_ide/src/completion/completion_context.rs#L75\"><code>intellijRulezz</code></a> <span aria-label=\"happy\" class=\"emoji emoji-1f600\" role=\"img\" title=\"happy\">:happy:</span></p>",
        "id": 191341728,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1584790861
    },
    {
        "content": "<p>First easter egg I found in this project !</p>",
        "id": 191341791,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1584790942
    },
    {
        "content": "<p>That's the secret sauce that makes completion especially delicious: <a href=\"https://github.com/JetBrains/intellij-community/blob/79e97242d9b7c52a1cb66e8a2f2343b91d47347f/platform/core-api/src/com/intellij/codeInsight/completion/CompletionUtilCore.java#L27\" target=\"_blank\" title=\"https://github.com/JetBrains/intellij-community/blob/79e97242d9b7c52a1cb66e8a2f2343b91d47347f/platform/core-api/src/com/intellij/codeInsight/completion/CompletionUtilCore.java#L27\">https://github.com/JetBrains/intellij-community/blob/79e97242d9b7c52a1cb66e8a2f2343b91d47347f/platform/core-api/src/com/intellij/codeInsight/completion/CompletionUtilCore.java#L27</a></p>",
        "id": 191342105,
        "sender_full_name": "matklad",
        "timestamp": 1584791467
    },
    {
        "content": "<p>We should submit a PR to <code>racer</code> to make it to the Standard for rust IDE !</p>",
        "id": 191342318,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1584791870
    },
    {
        "content": "<p>Just wanted to throw in my 5¢ and appreciate people doing the code reviews in the project. <br>\nThank you for helping to move everything forward.</p>",
        "id": 192250997,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1585573040
    },
    {
        "content": "<p>This was a WOW moment for me right now:</p>\n<p><a href=\"/user_uploads/4715/NI8rcFuWxuh_giS9CVdxUMRk/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/NI8rcFuWxuh_giS9CVdxUMRk/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/NI8rcFuWxuh_giS9CVdxUMRk/image.png\"></a></div>",
        "id": 198128083,
        "sender_full_name": "matklad",
        "timestamp": 1589923092
    },
    {
        "content": "<p>not the double macro completions though <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 198129802,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1589924012
    },
    {
        "content": "<p>Lol yes. I looked into fixing that once, but I don't remember why I didn't... I <em>think</em> the issue is that we don't handle shadowing in <code>process_names_in_scope</code></p>",
        "id": 198130037,
        "sender_full_name": "matklad",
        "timestamp": 1589924147
    },
    {
        "content": "<p>yeah, we also give double completions if you shadow local variables, I think</p>",
        "id": 198130111,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1589924175
    },
    {
        "content": "<p>And it's something along the lines of \"macros are available both as \"lexical\"  macro-exported macros, as an items imported via prelude\"</p>",
        "id": 198130157,
        "sender_full_name": "matklad",
        "timestamp": 1589924216
    },
    {
        "content": "<p>Are we <code>async</code> now?</p>\n<p><a href=\"/user_uploads/4715/ZeqLCpPE6t5MV71wRT5sxBmK/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/ZeqLCpPE6t5MV71wRT5sxBmK/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/ZeqLCpPE6t5MV71wRT5sxBmK/image.png\"></a></div>",
        "id": 199906746,
        "sender_full_name": "Laurențiu",
        "timestamp": 1591376888
    },
    {
        "content": "<p>Hmm, interesting, maybe this is due to chalk update?</p>",
        "id": 199906978,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1591377023
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/4689\">https://github.com/rust-analyzer/rust-analyzer/pull/4689</a></p>",
        "id": 199907021,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1591377055
    },
    {
        "content": "<p><code>async { 42 }</code> is still inferred as <code>i32</code> though</p>",
        "id": 199907118,
        "sender_full_name": "Laurențiu",
        "timestamp": 1591377116
    },
    {
        "content": "<p>Anyway working with async functions was a huge pain, thanks <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> !</p>",
        "id": 199907437,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1591377277
    },
    {
        "content": "<p>I just noticed that \"go to definition\" works:</p>\n<ul>\n<li>on a proc macro</li>\n<li>that's function-like (they weren't supported until recently)</li>\n<li>in a parameter of a <code>println!()</code> invocation</li>\n<li>and it actually navigates to the macro source code</li>\n</ul>",
        "id": 219873877,
        "sender_full_name": "Laurențiu",
        "timestamp": 1607966800
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/kQ85bLg6caD7BaxZIHvIKltP/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/kQ85bLg6caD7BaxZIHvIKltP/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/kQ85bLg6caD7BaxZIHvIKltP/image.png\"></a></div><p><a href=\"/user_uploads/4715/qhryamQ1SFE5tsxVHLbMcIxQ/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/qhryamQ1SFE5tsxVHLbMcIxQ/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/qhryamQ1SFE5tsxVHLbMcIxQ/image.png\"></a></div>",
        "id": 219873965,
        "sender_full_name": "Laurențiu",
        "timestamp": 1607966853
    },
    {
        "content": "<p>I was blown away when I realized that completion <em>inside proc macro arguments</em> works now</p>",
        "id": 219873992,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607966874
    },
    {
        "content": "<p>Maybe not always :-)</p>\n<p><a href=\"/user_uploads/4715/1LEEEGCCR0OTTdNfhRQmyoz6/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/1LEEEGCCR0OTTdNfhRQmyoz6/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/1LEEEGCCR0OTTdNfhRQmyoz6/image.png\"></a></div>",
        "id": 219874139,
        "sender_full_name": "Laurențiu",
        "timestamp": 1607966927
    },
    {
        "content": "<p>Should we really suggest <code>pub(crate)</code> there?</p>",
        "id": 219874168,
        "sender_full_name": "Laurențiu",
        "timestamp": 1607966942
    },
    {
        "content": "<p>yeah, because that macro doesn't output anything that can be completed :)</p>",
        "id": 219874200,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607966959
    },
    {
        "content": "<blockquote>\n<p>I was blown away when I realized that completion inside proc macro arguments works now</p>\n</blockquote>\n<p>wait wat?</p>",
        "id": 219874423,
        "sender_full_name": "matklad",
        "timestamp": 1607967041
    },
    {
        "content": "<p>What would be a nice example here?</p>",
        "id": 219874491,
        "sender_full_name": "matklad",
        "timestamp": 1607967083
    },
    {
        "content": "<p>like, here: <a href=\"https://twitter.com/sheevink/status/1336052790301376512\">https://twitter.com/sheevink/status/1336052790301376512</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/sheevink/status/1336052790301376512\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/847921879218368513/mtSLf6K6_normal.jpg\"></a><p>Completely ridiculous that autocompletion works here. This shouldn't work, it's a procedural macro!! <a href=\"https://t.co/TK1QDUkW2j\">https://twitter.com/sheevink/status/1336052790301376512/photo/1</a></p><span>- _ZN5Jonas9Schievink (@sheevink)</span><div class=\"twitter-image\"><a href=\"https://t.co/TK1QDUkW2j\"><img src=\"https://pbs.twimg.com/media/EoqcpwMWEAAkr94.jpg:large\"></a></div></div></div>",
        "id": 219874655,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607967152
    },
    {
        "content": "<p>Hm, do we build a TokenMap for proc macros already?</p>",
        "id": 219874758,
        "sender_full_name": "matklad",
        "timestamp": 1607967215
    },
    {
        "content": "<blockquote>\n<p>Chief Curse Officer</p>\n</blockquote>\n<p>you mad man you really did it <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 219874764,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607967218
    },
    {
        "content": "<p>This is \"cheating\" a bit since the input still parses as a valid expression – if it didn't the macro would just result in an error and not produce any completable output</p>",
        "id": 219874779,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607967227
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/appreciation/near/219874758\">said</a>:</p>\n<blockquote>\n<p>Hm, do we build a TokenMap for proc macros already?</p>\n</blockquote>\n<p>I don't think we do, no</p>",
        "id": 219874794,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607967235
    },
    {
        "content": "<p>I think this happened by accident when I fixed mapping macro-produced tokens back to the invocation</p>",
        "id": 219874911,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607967269
    },
    {
        "content": "<p>hmm, actually we should be building a TokenMap for the macro arguments</p>",
        "id": 219874954,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607967292
    },
    {
        "content": "<p>wait, no, i still don't understand</p>",
        "id": 219874958,
        "sender_full_name": "matklad",
        "timestamp": 1607967295
    },
    {
        "content": "<p>Like, we even underline the <code>state</code> variable</p>",
        "id": 219874980,
        "sender_full_name": "matklad",
        "timestamp": 1607967306
    },
    {
        "content": "<p>and it highlights references and everything :D</p>",
        "id": 219875005,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607967318
    },
    {
        "content": "<p>I think renaming them might be broken, but still</p>",
        "id": 219875033,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607967330
    },
    {
        "content": "<p>goto definition works on <code>state</code>, <code>can1</code>, and <code>is_transmitter_idle</code> too</p>",
        "id": 219875083,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607967355
    },
    {
        "content": "<p>So we <em>should</em> compute token map then?</p>",
        "id": 219875148,
        "sender_full_name": "matklad",
        "timestamp": 1607967369
    },
    {
        "content": "<p>I think we do – I didn't touch that code though</p>",
        "id": 219875202,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607967390
    },
    {
        "content": "<p>since it's computed for macro <em>arguments</em></p>",
        "id": 219875239,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607967418
    },
    {
        "content": "<p>I mean, you need the mapping between the arguments and the output to do higlighing</p>",
        "id": 219875398,
        "sender_full_name": "matklad",
        "timestamp": 1607967497
    },
    {
        "content": "<p>This is utterly ridiculous</p>",
        "id": 219875588,
        "sender_full_name": "matklad",
        "timestamp": 1607967583
    },
    {
        "content": "<p>yeah, then we do compute that. for some reason it didn't work until recently though.</p>",
        "id": 219875600,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607967590
    },
    {
        "content": "<p>ah I think I just confused it with <code>Shift</code>, which is only used by MBE</p>",
        "id": 219875672,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607967611
    },
    {
        "content": "<p>Yeah, I don't think you have analogue of <code>Shift</code> for proc macros</p>",
        "id": 219875763,
        "sender_full_name": "matklad",
        "timestamp": 1607967652
    },
    {
        "content": "<p>at least, not that easily</p>",
        "id": 219875774,
        "sender_full_name": "matklad",
        "timestamp": 1607967656
    },
    {
        "content": "<p>we need <code>Shift</code> to find tokens from the right hand side of mbe</p>",
        "id": 219875822,
        "sender_full_name": "matklad",
        "timestamp": 1607967683
    },
    {
        "content": "<p>and proc-macro doesn't really have an rhs, it manufactures tokens out of thin air</p>",
        "id": 219875869,
        "sender_full_name": "matklad",
        "timestamp": 1607967704
    },
    {
        "content": "<p>So is it ignoring the fact that it's a proc macro invocation and parsing the arguments as Rust expressions?</p>",
        "id": 219876305,
        "sender_full_name": "Laurențiu",
        "timestamp": 1607967897
    },
    {
        "content": "<p>No, it looks at the output</p>",
        "id": 219876348,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607967911
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> no, this is the real thing</p>",
        "id": 219876378,
        "sender_full_name": "matklad",
        "timestamp": 1607967921
    },
    {
        "content": "<p>hmm, this is confusing: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_expand/src/db.rs#L155\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_expand/src/db.rs#L155</a></p>",
        "id": 219876506,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607967973
    },
    {
        "content": "<p>I think that's the TokenMap for the <code>macro_rules!</code> \"arguments\"?</p>",
        "id": 219876533,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607967986
    },
    {
        "content": "<p>not the <em>invocation</em> arguments</p>",
        "id": 219876548,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607967995
    },
    {
        "content": "<p>yup</p>",
        "id": 219876608,
        "sender_full_name": "matklad",
        "timestamp": 1607968029
    },
    {
        "content": "<p>it maps <code>tt</code> tokens from the template to syntax nodes in the original file</p>",
        "id": 219876653,
        "sender_full_name": "matklad",
        "timestamp": 1607968052
    },
    {
        "content": "<p>So in</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">procmacro</span>::<span class=\"n\">say</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">_x</span><span class=\"p\">));</span><span class=\"w\"></span>\n</code></pre></div>\n<p>go to definition on <code>_x</code> will only work if it appears in the output of the proc macro (because it doesn't)?</p>",
        "id": 219876689,
        "sender_full_name": "Laurențiu",
        "timestamp": 1607968069
    },
    {
        "content": "<p>yeah, it should</p>",
        "id": 219876759,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607968091
    },
    {
        "content": "<p>It's incredible that one can just \"generate <code>From</code> impl for enum variant\"!</p>",
        "id": 220120019,
        "sender_full_name": "matklad",
        "timestamp": 1608128148
    },
    {
        "content": "<p>(took me only three enums to recall that this exists)</p>",
        "id": 220120082,
        "sender_full_name": "matklad",
        "timestamp": 1608128166
    },
    {
        "content": "<p>hey, we ended up on HN: <a href=\"https://news.ycombinator.com/item?id=26026309\">https://news.ycombinator.com/item?id=26026309</a></p>",
        "id": 225185884,
        "sender_full_name": "matklad",
        "timestamp": 1612456669
    },
    {
        "content": "<p>We've got mentioned in <a href=\"https://security.googleblog.com/2021/04/rust-in-linux-kernel.html\">https://security.googleblog.com/2021/04/rust-in-linux-kernel.html</a> !</p>",
        "id": 234703842,
        "sender_full_name": "matklad",
        "timestamp": 1618502375
    },
    {
        "content": "<p>oh wow</p>\n<p><a href=\"/user_uploads/4715/J9ORwn10_iAXiHoEVEJh4K0Z/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/J9ORwn10_iAXiHoEVEJh4K0Z/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/J9ORwn10_iAXiHoEVEJh4K0Z/image.png\"></a></div>",
        "id": 240869632,
        "sender_full_name": "matklad",
        "timestamp": 1622493729
    }
]