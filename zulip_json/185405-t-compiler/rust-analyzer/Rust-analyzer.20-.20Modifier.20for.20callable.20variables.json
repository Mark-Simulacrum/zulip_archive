[
    {
        "content": "<p>I wanted to add a modifier for variables that are callable for a while now. Motivated by when creating a fn pointer or a closure the variable name in call expression not being colorized.</p>\n<p>For plain fn pointer and closures I have something kinda working on a local branch</p>\n<p>I have 2 questions:</p>\n<ol>\n<li>Is that a wanted feature?</li>\n<li>How do I check if a variable is of a type that implements the Fn{Once, Mut} traits to properly add the modifier for parameter generic over those traits?</li>\n</ol>",
        "id": 213492421,
        "sender_full_name": "Gray Jack",
        "timestamp": 1602798583
    },
    {
        "content": "<p>Seems reasonable</p>",
        "id": 213492665,
        "sender_full_name": "matklad",
        "timestamp": 1602798705
    },
    {
        "content": "<p>Do you need a modifier though?</p>",
        "id": 213492676,
        "sender_full_name": "matklad",
        "timestamp": 1602798711
    },
    {
        "content": "<p>Can't you just use \"Function\" tag?</p>",
        "id": 213492692,
        "sender_full_name": "matklad",
        "timestamp": 1602798721
    },
    {
        "content": "<p>Hm, I guess function and local would be in conflict, and a modifer might be indeed better...</p>",
        "id": 213492753,
        "sender_full_name": "matklad",
        "timestamp": 1602798736
    },
    {
        "content": "<p>You can use this method to determine if a type is a callable or not: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/0d45802d671f94cb768b93a64882733396cfbe2d/crates/hir/src/code_model.rs#L1450\">https://github.com/rust-analyzer/rust-analyzer/blob/0d45802d671f94cb768b93a64882733396cfbe2d/crates/hir/src/code_model.rs#L1450</a></p>",
        "id": 213492851,
        "sender_full_name": "matklad",
        "timestamp": 1602798795
    },
    {
        "content": "<p>And I think other code in highlighting already fetches types for locals to underly &amp;mut</p>",
        "id": 213492903,
        "sender_full_name": "matklad",
        "timestamp": 1602798826
    },
    {
        "content": "<p>Thanks a bunch!! I'll send a PR as soon as I can</p>",
        "id": 213493571,
        "sender_full_name": "Gray Jack",
        "timestamp": 1602799269
    },
    {
        "content": "<p>It seems that as_callable only returns Some in case of FnDef, Closure and FnPtr</p>",
        "id": 213533829,
        "sender_full_name": "Gray Jack",
        "timestamp": 1602838135
    },
    {
        "content": "<p>In the case of generics of Fn traits as_callable returns None</p>",
        "id": 213533957,
        "sender_full_name": "Gray Jack",
        "timestamp": 1602838213
    },
    {
        "content": "<p>So how do I check if a Type implements FnOnce/FnMut/Fn?</p>",
        "id": 213534033,
        "sender_full_name": "Gray Jack",
        "timestamp": 1602838287
    },
    {
        "content": "<p>Hm, I think thats a bug</p>",
        "id": 213537264,
        "sender_full_name": "matklad",
        "timestamp": 1602840325
    },
    {
        "content": "<p>the thing should return <code>Some</code> for generics</p>",
        "id": 213537274,
        "sender_full_name": "matklad",
        "timestamp": 1602840334
    },
    {
        "content": "<p>the function \"callable_sig\" returns Some when TypeCtor::FnPtr, TypeCtor::FnDef and TypeCtor::Closure, but I'm not exactly comfortable with the code of \"callable_sig\", so maybe I'm the one missing something</p>",
        "id": 213537934,
        "sender_full_name": "Gray Jack",
        "timestamp": 1602840798
    },
    {
        "content": "<p>Hm, yeah, it feels like that should also handle Ty::PLaceholder</p>",
        "id": 213538312,
        "sender_full_name": "matklad",
        "timestamp": 1602841085
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> might be the right person to ask this :-)</p>",
        "id": 213538330,
        "sender_full_name": "matklad",
        "timestamp": 1602841096
    },
    {
        "content": "<p>Fn traits aren't handled by <code>callable_sig</code> because they need some more involved handling during <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/0d45802d671f94cb768b93a64882733396cfbe2d/crates/hir_ty/src/infer/expr.rs#L67\">inference</a>. A function with the signature of <code>Ty::callable_sig</code> can't actually check for the Fn trait because it needs the environment (also note that the expected number of args is actually relevant for inference). I think this needs separate and slightly different handling outside of inference, similar to that function and to the way we check for <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/0d45802d671f94cb768b93a64882733396cfbe2d/crates/hir/src/code_model.rs#L1366\"><code>Future</code></a>, for example. I'd be a bit worried about doing so many trait solves, but if you just do it for type parameters it'd probably be ok</p>",
        "id": 213540173,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1602842336
    },
    {
        "content": "<p>(and I don't think a helper method on <code>Ty</code> should be doing any trait solving in general)</p>",
        "id": 213540382,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1602842478
    },
    {
        "content": "<p>The code to check if implements Fn traits is somewhat similar to the code in impls_future?<br>\nIf yes what is the string I have to pass to <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/0d45802d671f94cb768b93a64882733396cfbe2d/crates/hir/src/code_model.rs#L1372\"><code>lang_item</code></a>?</p>",
        "id": 213540895,
        "sender_full_name": "Gray Jack",
        "timestamp": 1602842845
    },
    {
        "content": "<p><code>FnTrait::FnOnce.lang_item_name()</code></p>",
        "id": 213541185,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1602843086
    },
    {
        "content": "<p>i.e. <code>\"fn_once\"</code></p>",
        "id": 213541194,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1602843106
    },
    {
        "content": "<p>Should I make lang_item_name public or just use \"fn_once\"?</p>",
        "id": 213541942,
        "sender_full_name": "Gray Jack",
        "timestamp": 1602843718
    },
    {
        "content": "<p>actually, you could just use <code>get_id</code></p>",
        "id": 213542213,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1602843928
    },
    {
        "content": "<p>True, I missed that</p>",
        "id": 213542646,
        "sender_full_name": "Gray Jack",
        "timestamp": 1602844277
    }
]