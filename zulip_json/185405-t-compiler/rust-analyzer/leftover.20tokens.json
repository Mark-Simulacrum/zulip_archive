[
    {
        "content": "<p>Is there any way I could realistically get a \"leftover tokens\" rust analyzer error from a proc macro? I don't have an example to present yet (still very much in the development phase), but I currently have a proc macro that works correctly on a cargo run, that certainly uses all of the input tokens (of which there is only one -- a string literal), but rust analyzer really isn't pleased about with that \"leftover tokens\" error message for some reason.</p>",
        "id": 250628366,
        "sender_full_name": "Zac Kologlu",
        "timestamp": 1629901900
    },
    {
        "content": "<p>Is the proc macro emitting macro calls?</p>",
        "id": 250628897,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629902109
    },
    {
        "content": "<p>nope, no macro calls</p>",
        "id": 250629189,
        "sender_full_name": "Zac Kologlu",
        "timestamp": 1629902243
    },
    {
        "content": "<p>wait sorry -- it just occurred to me that cargo-expand won't actually answer that question for you, because it would expand the macros recursively, oops! currently trying to figure out if I can get cargo-expand to just expand 1 layer of macro calls...</p>",
        "id": 250631898,
        "sender_full_name": "Zac Kologlu",
        "timestamp": 1629903474
    },
    {
        "content": "<p>Does RA expand it when executing the <code>Expand macro recursively</code> command?</p>",
        "id": 250632595,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629903741
    },
    {
        "content": "<p>If you are using VSCode you can run it by pressing <code>ctrl + shift + P</code> then typing the command there</p>",
        "id": 250632641,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629903763
    },
    {
        "content": "<p>The command will expand whatever macro is below your cursor</p>",
        "id": 250632660,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629903772
    },
    {
        "content": "<p>Wow, <code>Expand macro recursively</code> gets it completely wrong somehow...</p>",
        "id": 250633213,
        "sender_full_name": "Zac Kologlu",
        "timestamp": 1629904023
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>// Recursive expansion of instruction_set! macro\n// ==============================================\n\n::mipsy_lib::inst::InstSet::new($crate::vec::Vec::new(),$crate::vec::Vec::new())\n</code></pre></div>",
        "id": 250633254,
        "sender_full_name": "Zac Kologlu",
        "timestamp": 1629904043
    },
    {
        "content": "<p>here's my test program:</p>\n<div class=\"codehilite\"><pre><span></span><code>use mipsy_codegen::instruction_set;\n\nfn main() {\n    let iset = instruction_set!(&quot;../mips.yaml&quot;);\n\n    println!(&quot;native_len: {}, pseudo_len: {}&quot;, iset.native_set().len(), iset.pseudo_set().len());\n}\n</code></pre></div>\n<p>and here's the output of cargo-expand for a good laugh: <a href=\"https://pastebin.com/r17ik2ES\">https://pastebin.com/r17ik2ES</a></p>",
        "id": 250633472,
        "sender_full_name": "Zac Kologlu",
        "timestamp": 1629904137
    },
    {
        "content": "<p>and cargo run gives us <code>native_len: 54, pseudo_len: 77</code></p>",
        "id": 250633528,
        "sender_full_name": "Zac Kologlu",
        "timestamp": 1629904166
    },
    {
        "content": "<p>what does your macro do when the file can't be found? we might be running it in the wrong working directory</p>",
        "id": 250633730,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1629904275
    },
    {
        "content": "<p>It panics, and when I do <code>instruction_set!(\"hello\")</code> for example, rust-analyzer gives a completely different error: </p>\n<div class=\"codehilite\"><pre><span></span><code>proc macro returned error: proc-macro panicked:\n  Failed to open file: /home/zac/dev/mipsy/testing/hello: Os { code: 2, kind: NotFound, message: &quot;No such file or directory&quot; } rust-analyzer(macro-error)\n</code></pre></div>",
        "id": 250633881,
        "sender_full_name": "Zac Kologlu",
        "timestamp": 1629904354
    },
    {
        "content": "<p>is your proc macro relying on any env vars?</p>",
        "id": 250634129,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629904505
    },
    {
        "content": "<p>erm, it <em>is</em> indeed -- <code>CARGO_MANIFEST_DIR</code></p>",
        "id": 250634262,
        "sender_full_name": "Zac Kologlu",
        "timestamp": 1629904574
    },
    {
        "content": "<p>and to be clear, it uses that env-var when processing the tokens -- it doesn't output any env-var reliant tokens</p>",
        "id": 250634364,
        "sender_full_name": "Zac Kologlu",
        "timestamp": 1629904634
    },
    {
        "content": "<p>I just manually replaced <code>CARGO_MANIFEST_DIR</code> with a hardcoded path, and same result</p>",
        "id": 250634433,
        "sender_full_name": "Zac Kologlu",
        "timestamp": 1629904682
    },
    {
        "content": "<p>we do set <code>CARGO_MANIFEST_DIR</code> <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/2943d9aa51bf9c6576087cd7499e7bc27ac78b3b/crates/project_model/src/workspace.rs#L865\">https://github.com/rust-analyzer/rust-analyzer/blob/2943d9aa51bf9c6576087cd7499e7bc27ac78b3b/crates/project_model/src/workspace.rs#L865</a></p>",
        "id": 250634512,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1629904711
    },
    {
        "content": "<p>cool -- no other environment variables than that</p>",
        "id": 250634734,
        "sender_full_name": "Zac Kologlu",
        "timestamp": 1629904811
    },
    {
        "content": "<p>any other thoughts on anything I can try? or do I just need to work on minimalisation?</p>",
        "id": 250716743,
        "sender_full_name": "Zac Kologlu",
        "timestamp": 1629950113
    },
    {
        "content": "<p>A minimal example would be great, yeah!</p>",
        "id": 250758473,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1629978074
    },
    {
        "content": "<p>finding out just what the proc macro expands to (non-recursively) in the mentioned case would probably also already help</p>",
        "id": 250758904,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1629978334
    },
    {
        "content": "<p>of course it would help <em>more</em> if the example is smaller ;)</p>",
        "id": 250758981,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1629978365
    },
    {
        "content": "<p>(it should be possible to simply make the proc macro print its output, I think?)</p>",
        "id": 250759464,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1629978681
    },
    {
        "content": "<p>the output is pretty gnarly unfortunately -- in any case, I did link the source code above and could -- wait, I never linked the source code? sorry I'm clearly an idiot: <a href=\"https://github.com/insou22/mipsy/blob/master/mipsy_codegen/src/lib.rs\">https://github.com/insou22/mipsy/blob/master/mipsy_codegen/src/lib.rs</a></p>",
        "id": 251329350,
        "sender_full_name": "Zac Kologlu",
        "timestamp": 1630383108
    },
    {
        "content": "<p>huh... just came back to this today, and the error seems to have disappeared. wonder if my rust-analyser somehow got itself into a somewhat failed state...</p>",
        "id": 251348825,
        "sender_full_name": "Zac Kologlu",
        "timestamp": 1630398099
    }
]