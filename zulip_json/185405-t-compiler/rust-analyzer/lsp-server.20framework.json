[
    {
        "content": "<p>Hi. I'm working on a language server for Move language for libra<br>\n<a href=\"https://github.com/libra/libra/tree/master/language/move-lang\" title=\"https://github.com/libra/libra/tree/master/language/move-lang\">https://github.com/libra/libra/tree/master/language/move-lang</a><br>\n<a href=\"https://github.com/dfinance/move-language-server\" title=\"https://github.com/dfinance/move-language-server\">https://github.com/dfinance/move-language-server</a></p>\n<p>I'm using the rust-analyzer code as a reference on how to structure the project and obviously using lsp-server for connections and handshake. I borrowed multithreading architecture / ra_vfs / WorldState concepts too. <br>\nI'm wondering, wouldn't it be great to extract more code into lsp-server, make it smth like an lsp-framework? Most of the code in the <code>main_loop</code> could be reused, <code>on_request</code> could be converted into a trait with all those <code>on_completion</code>, <code>on_status_check</code> methods.</p>",
        "id": 195402565,
        "sender_full_name": "Maxim Kurnikov",
        "timestamp": 1587986273
    },
    {
        "content": "<p>I'll reply later today (well, if the amoutn of work I absolutely need to to today is less than today), but you might want to talke a look at tower-lsp-server library as well</p>",
        "id": 195402709,
        "sender_full_name": "matklad",
        "timestamp": 1587986335
    },
    {
        "content": "<p>So, I thought about extracting lsp-framework a while back, and decided against it, for two reasons, one stupid technical, and one real one. </p>\n<p>The technical one is that the framework would have to use <code>lsp_types</code> library, and proper semver versioning of it is complicated (what is semver compatible in TS is breaking in Rust). </p>\n<p>The real one is that I think there's a great benefit in running the main event loop yourself. It's a very complicated bit with respect to runtime behavior, so being able to see / dbg! everything yourself is hugely beneficial</p>",
        "id": 195536081,
        "sender_full_name": "matklad",
        "timestamp": 1588064708
    },
    {
        "content": "<p>that's why lsp-server is designed as a library, and doesn't really do much</p>",
        "id": 195536131,
        "sender_full_name": "matklad",
        "timestamp": 1588064752
    },
    {
        "content": "<p>The vfs bit could conievably be extracted into a separate library, but unforutantely it's been in a \"design is broken, badly needs rewrite\" state for about a year now :D</p>",
        "id": 195536277,
        "sender_full_name": "matklad",
        "timestamp": 1588064845
    },
    {
        "content": "<p>the tower-lsp thing <em>is</em> a framework, so it's a good way to check if my gut feeling about framework vs library here is wrong</p>",
        "id": 195536355,
        "sender_full_name": "matklad",
        "timestamp": 1588064889
    },
    {
        "content": "<p><code>The technical one is that the framework would have to use lsp_types library, and proper semver versioning of it is complicated (what is semver compatible in TS is breaking in Rust).</code> Why not generate either Rust or Ts part to be sure to be sync ? I don't know the context so it could be a dumb question :p</p>",
        "id": 195536858,
        "sender_full_name": "Coenen Benjamin",
        "timestamp": 1588065236
    },
    {
        "content": "<p>There's no source to generate from :-(</p>\n<p>The spec is literally  a markdown document. There's a <code>publish a JSON schema</code> request sitting for ages</p>",
        "id": 195537030,
        "sender_full_name": "matklad",
        "timestamp": 1588065350
    },
    {
        "content": "<p>Oh god :(</p>",
        "id": 195537186,
        "sender_full_name": "Coenen Benjamin",
        "timestamp": 1588065442
    },
    {
        "content": "<blockquote>\n<p>The real one is that I think there's a great benefit in running the main event loop yourself. It's a very complicated bit with respect to runtime behavior, so being able to see / <code>dbg!</code> everything yourself is hugely beneficial</p>\n</blockquote>\n<p>I don't quite understand this one. While I've been working on move-language-server, I had to reimplement (copy-paste with modifications) lots of code from the rust-analyzer crate in the RA project.</p>\n<p>I trust your expertise, so I believe that the current design of lsp server in RA is optimal. It would be great not to reimplement all this stuff for every language server, and just to focus on the relevant parts from the beginning. But if one would like to improve on top of it in any way, it's just the same copy-paste as in the no-framework case.  </p>\n<p>Framework lowers barrier to entry, in my opinion.</p>",
        "id": 195552484,
        "sender_full_name": "Maxim Kurnikov",
        "timestamp": 1588075193
    },
    {
        "content": "<p>I've looked at <code>tower-lsp</code>. It's an example of the framework, yes, but it's </p>\n<ol>\n<li>async-based (which doesn't make much sense in case of lsp, as there's won't be a lot of threads anyway)</li>\n<li>it's not tied to rust-analyzer in any way. If the hypothetical <code>lsp-framework</code> could exist, it would be awesome for it to share codebase with rust-analyzer.</li>\n</ol>",
        "id": 195552865,
        "sender_full_name": "Maxim Kurnikov",
        "timestamp": 1588075384
    },
    {
        "content": "<p>Thanks for the answers! <br>\nAnd thank you very much for rust-analyzer, it's an amazing tool, I've learn't lots and lots of stuff from the implementation! And thanks for the <a href=\"https://www.youtube.com/watch?v=Oy_VYovfWyo\" title=\"https://www.youtube.com/watch?v=Oy_VYovfWyo\">https://www.youtube.com/watch?v=Oy_VYovfWyo</a> too=)</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"Oy_VYovfWyo\" href=\"https://www.youtube.com/watch?v=Oy_VYovfWyo\" title=\"https://www.youtube.com/watch?v=Oy_VYovfWyo\"><img src=\"https://i.ytimg.com/vi/Oy_VYovfWyo/default.jpg\"></a></div>",
        "id": 195553151,
        "sender_full_name": "Maxim Kurnikov",
        "timestamp": 1588075551
    },
    {
        "content": "<p>if i can ask a silly question, i am looking at setting up a language server and was also looking at lsp-server â€” when i run this example <a href=\"https://github.com/rust-analyzer/lsp-server/blob/master/examples/goto_def.rs\" title=\"https://github.com/rust-analyzer/lsp-server/blob/master/examples/goto_def.rs\">https://github.com/rust-analyzer/lsp-server/blob/master/examples/goto_def.rs</a>, which sets up a connection over stdio, how do i send a request to the server?</p>\n<p>do i just paste e.g. the initialize request listed in the comments in that file, into stdin and hit enter? (when i do that i get a <code>crossbeam::channel::RecvError</code>).</p>",
        "id": 195641969,
        "sender_full_name": "peter",
        "timestamp": 1588116703
    },
    {
        "content": "<p>Driving the server directly from the command line is super painful, as you need correct <code>ContentLenght</code> headers</p>",
        "id": 195946413,
        "sender_full_name": "matklad",
        "timestamp": 1588327132
    },
    {
        "content": "<p>The best way is to either drive programmatically via channels, or drive vie some existing client, like VS Code</p>",
        "id": 195946439,
        "sender_full_name": "matklad",
        "timestamp": 1588327161
    },
    {
        "content": "<blockquote>\n<p>I don't quite understand this one. While I've been working on move-language-server, I had to reimplement (copy-paste with modifications) lots of code from the rust-analyzer crate in the RA project.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"222044\">@Maxim Kurnikov</span> for example <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/a5f2b16366f027ad60c58266a66eb7fbdcbda9f9/crates/rust-analyzer/src/main_loop.rs#L329-L337\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/a5f2b16366f027ad60c58266a66eb7fbdcbda9f9/crates/rust-analyzer/src/main_loop.rs#L329-L337\">here</a> we do some introspection for the single turn of the event loop, which would be awkward to do if the loop was hidden inside the framework</p>",
        "id": 195946583,
        "sender_full_name": "matklad",
        "timestamp": 1588327263
    },
    {
        "content": "<p>In general, being able to insert <code>printf</code> into arbitrary state of request processing is something I've found useful</p>",
        "id": 195946692,
        "sender_full_name": "matklad",
        "timestamp": 1588327348
    }
]