[
    {
        "content": "<p>Hey, anyone got strong feelings about <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8672\">https://github.com/rust-analyzer/rust-analyzer/issues/8672</a> ?</p>",
        "id": 236208360,
        "sender_full_name": "matklad",
        "timestamp": 1619456455
    },
    {
        "content": "<p>It's going to be a major refactor, I am 80% sure that it's the right call, but I want to double check</p>",
        "id": 236208474,
        "sender_full_name": "matklad",
        "timestamp": 1619456507
    },
    {
        "content": "<p>no strong feelings one way or the other. if we do change it, what do we gain?</p>",
        "id": 236208608,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1619456555
    },
    {
        "content": "<p>I bunch of simplicity in one of the more complicated  parth of the code base.</p>",
        "id": 236209361,
        "sender_full_name": "matklad",
        "timestamp": 1619456850
    },
    {
        "content": "<p>Like, I dread working on the diagnostics code, because the level of indirecion is just way over my head :)</p>",
        "id": 236209446,
        "sender_full_name": "matklad",
        "timestamp": 1619456883
    },
    {
        "content": "<p>oh, okay, then it's probably worth it</p>",
        "id": 236209643,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1619456959
    },
    {
        "content": "<p>I think about the case of removing generics from protocol conversion code</p>\n<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/4418/commits/1586bab0b97bef411e6187dfc389557edbc5a16e\">https://github.com/rust-analyzer/rust-analyzer/pull/4418/commits/1586bab0b97bef411e6187dfc389557edbc5a16e</a></p>",
        "id": 236209828,
        "sender_full_name": "matklad",
        "timestamp": 1619457029
    },
    {
        "content": "<p>That definitely was very helpful</p>",
        "id": 236209865,
        "sender_full_name": "matklad",
        "timestamp": 1619457041
    },
    {
        "content": "<p>won't this lead to a bunch of enums like <code>hir_expand::Diagnostic</code> and <code>hir_ty::Diagnostic</code> that are subsets of the big <code>hir::Diagnostic</code> enum? actually, how would this even look with accumulator style, since e.g. <code>hir_ty</code> can't produce <code>hir::Diagnostic</code>s?</p>",
        "id": 236212750,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1619458168
    },
    {
        "content": "<p>I _guess_ hir_ty's methods could take a type parameter <code>D: From&lt;hir_ty::Diagnostic&gt;</code></p>",
        "id": 236212951,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1619458236
    },
    {
        "content": "<p>not sure that still looks less complicated than the current setup though</p>",
        "id": 236212993,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1619458254
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> I am imagining the setup like in the rest of hir. There's a bunch of diagnostics with raw ids in various crates. Then, there's this giant enum in hir, which mirrors those raw diagnostics, but encapsulates the types, and the code to map between the two (so, a whole tone of boilerplate, a-la <code>hir/src/lib.rs</code>),</p>",
        "id": 236215527,
        "sender_full_name": "matklad",
        "timestamp": 1619459222
    },
    {
        "content": "<p>This is already happening in some sense:</p>\n<p><a href=\"/user_uploads/4715/rDn_cRFUmgGinZA2_wubdQF2/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/rDn_cRFUmgGinZA2_wubdQF2/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/rDn_cRFUmgGinZA2_wubdQF2/image.png\"></a></div>",
        "id": 236215603,
        "sender_full_name": "matklad",
        "timestamp": 1619459252
    },
    {
        "content": "<p>the impl block sort-of duplicates the <code>struct</code></p>",
        "id": 236215623,
        "sender_full_name": "matklad",
        "timestamp": 1619459265
    },
    {
        "content": "<p>For accumulator style, we'll be just pushing onto a Vec</p>",
        "id": 236215717,
        "sender_full_name": "matklad",
        "timestamp": 1619459296
    },
    {
        "content": "<p>We actually already do collect to vec in the most importatn case -- fn bodies: <a href=\"https://github.com/matklad/rust-analyzer/blob/f06e4b8e74bc2cec1fec4075f64b9909356c2bd3/crates/hir_def/src/body.rs#L419-L424\">https://github.com/matklad/rust-analyzer/blob/f06e4b8e74bc2cec1fec4075f64b9909356c2bd3/crates/hir_def/src/body.rs#L419-L424</a></p>",
        "id": 236216187,
        "sender_full_name": "matklad",
        "timestamp": 1619459497
    },
    {
        "content": "<p>I guess, there's also this issue:</p>\n<p>It seems that diagnostics should speak the language of <code>hir</code>. That's our public API, and seems the right level of abstraction for <em>consumption</em> of diagnostics.  But the <code>trait Diagnostic</code> is defined in <code>hir_expand</code>, so it can't use hir-types</p>",
        "id": 236217117,
        "sender_full_name": "matklad",
        "timestamp": 1619459892
    },
    {
        "content": "<p>(there's an obvious problem here is that we don't really have <code>hir</code> for expressions, but that's where most of the diagnostics are coming from)</p>",
        "id": 236217193,
        "sender_full_name": "matklad",
        "timestamp": 1619459936
    },
    {
        "content": "<p>I think this would be a good cleanup. The diagnostics code is really kind of scary.</p>",
        "id": 236323460,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1619524902
    }
]