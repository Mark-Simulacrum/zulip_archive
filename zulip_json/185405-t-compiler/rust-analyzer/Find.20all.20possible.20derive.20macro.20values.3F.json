[
    {
        "content": "<p>Is there a way to get all <code>proc_macro_derive</code> declarations in the current project?</p>",
        "id": 195954942,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1588335140
    },
    {
        "content": "<p>You means in RA ?  or means there is some APIs to do that ?</p>",
        "id": 195955120,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1588335280
    },
    {
        "content": "<p>Yep, I want to use something in RA to provide completion for <code>#[derive(&lt;|&gt;)]</code> cases.<br>\nI'm currently hardcoding the standard ones, but wonder if there's a better way to do that.</p>",
        "id": 195955189,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1588335360
    },
    {
        "content": "<p>In theory , the following step should works: </p>\n<ol>\n<li>Find all MacroDefID in scope (I think we may have this API but I am not sure)</li>\n<li>Check which MacroDefKind it is.</li>\n</ol>",
        "id": 195955580,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1588335746
    },
    {
        "content": "<p>I'll give it a shot, thanks.</p>",
        "id": 195955634,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1588335794
    },
    {
        "content": "<p>except built-in derives are currently hard-coded and would have to be added separately, right?</p>",
        "id": 195956043,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1588336177
    },
    {
        "content": "<p>Oh , it reminded me I still haven't looked for what changed in Macro 2.0...</p>",
        "id": 195956387,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1588336438
    },
    {
        "content": "<p>I wonder, should <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_syntax/src/ast/extensions.rs#L466\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_syntax/src/ast/extensions.rs#L466\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_syntax/src/ast/extensions.rs#L466</a> be <code>T!['}'] | T![')'] | T![']'] =&gt; true,</code> instead?</p>",
        "id": 195957360,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1588337235
    },
    {
        "content": "<p>I think so, it is introduce in <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/3926\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/3926\">https://github.com/rust-analyzer/rust-analyzer/pull/3926</a> and these functions are not in used :)</p>",
        "id": 195957611,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1588337457
    },
    {
        "content": "<p>Apparently, I'm either doing something wrong, or we fail to detect the derive macros.</p>\n<p>I have the following silly code (and <code>MacroDefKind</code> made pulic in <code>hir</code>) to check if there are any results:<br>\n<a href=\"/user_uploads/4715/YFq7vjysJVUdUgnWsA6frN9P/image.png\" title=\"image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/YFq7vjysJVUdUgnWsA6frN9P/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/YFq7vjysJVUdUgnWsA6frN9P/image.png\"></a></div><p>For a project with <code>Serde</code>, I get plenty of macros printed: <a href=\"https://gist.github.com/SomeoneToIgnore/cef5dc151f59107989a721fab27b8c22\" title=\"https://gist.github.com/SomeoneToIgnore/cef5dc151f59107989a721fab27b8c22\">https://gist.github.com/SomeoneToIgnore/cef5dc151f59107989a721fab27b8c22</a><br>\nYet there are no <code>builtin_derive</code> or <code>custom_derive</code> ones, none at all.</p>\n<p>What did I miss?</p>",
        "id": 196016959,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1588371893
    },
    {
        "content": "<p>Have you imported the path? I means :</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">serde</span>::<span class=\"n\">Deserialize</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 196029298,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1588388119
    },
    {
        "content": "<p>Yes, the project compiles.</p>",
        "id": 196034558,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1588396820
    },
    {
        "content": "<p>Um... May I have the branch I could try ?</p>",
        "id": 196034764,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1588397281
    },
    {
        "content": "<p>you might add some <code>dbg</code> in [here][1] , to make sure the collector collect proc-macro correctly.</p>",
        "id": 196035053,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1588397770
    },
    {
        "content": "<p>Sure, here's the branch with the dbg prints I've mentioned above:</p>\n<p><a href=\"https://github.com/SomeoneToIgnore/rust-analyzer/tree/derive-detection-tests\" title=\"https://github.com/SomeoneToIgnore/rust-analyzer/tree/derive-detection-tests\">https://github.com/SomeoneToIgnore/rust-analyzer/tree/derive-detection-tests</a></p>\n<blockquote>\n<p>add some dbg in [here][1]</p>\n</blockquote>\n<p>Guess the links are missing, so I could no add anything yet :)</p>",
        "id": 196035677,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1588398889
    },
    {
        "content": "<p>Now you can open the same RA project with that branch installed, open <code>json_project.rs</code> and try co complete something in the attribute with <code>Deserialize</code> there: <br>\n<a href=\"/user_uploads/4715/o0bf_V0d0GmuHFaBgdYA_zyD/image.png\" title=\"image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/o0bf_V0d0GmuHFaBgdYA_zyD/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/o0bf_V0d0GmuHFaBgdYA_zyD/image.png\"></a></div><p>dbg prints show that there are 3 types of macros detected with my code: <code>BuiltInEager</code>, <code>Declarative</code>, <code>BuiltIn</code>.</p>",
        "id": 196035799,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1588399120
    },
    {
        "content": "<p>Ooooh, actually, I've just realized that I don't have proc macros enabled.</p>",
        "id": 196035815,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1588399182
    },
    {
        "content": "<p>Lol, indeed that was the case.<br>\nSorry for the noize and thank you a lot anyway :)</p>",
        "id": 196035930,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1588399356
    },
    {
        "content": "<p>So it works now ?</p>",
        "id": 196036376,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1588400168
    },
    {
        "content": "<p>Yes, I can see derives in the debug output.</p>",
        "id": 196036520,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1588400454
    },
    {
        "content": "<p>I still have to extract the derive attribute value from them, but that should be simple if I'm able to switch to ast somehow from those definitions, I'll dig more.</p>",
        "id": 196036601,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1588400617
    },
    {
        "content": "<p>There is no ast for proc-macro ...</p>",
        "id": 196036755,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1588400884
    },
    {
        "content": "<p>btw, why you need to extract the derive attribue ?</p>",
        "id": 196036768,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1588400952
    },
    {
        "content": "<p>By design, we get the proc-macro from its dll directly, and do not parse the <code>[proc-macro_derive]</code></p>",
        "id": 196036831,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1588401089
    },
    {
        "content": "<p>Maybe I worded it wrong: I need somehow to get all those <code>Serialize</code>, <code>Deserialize</code>, etc. names into the completion options.</p>\n<p>By reading the <a href=\"https://doc.rust-lang.org/reference/procedural-macros.html\" title=\"https://doc.rust-lang.org/reference/procedural-macros.html\">https://doc.rust-lang.org/reference/procedural-macros.html</a> , I've got an impression that I can do that by somehow getting the values out of <code>#[proc_macro_derive(...)]</code> attributes and that's what I tried to achieve.</p>",
        "id": 196036995,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1588401401
    },
    {
        "content": "<p>I see that <code>name</code> of the macro item matches the derive string I have to input. Can I rely on that instead?</p>\n<div class=\"codehilite\"><pre><span></span><code>[crates/ra_ide/src/completion/complete_attribute.rs:19] name = Name(\n    Text(\n        &quot;Deserialize&quot;,\n    ),\n)\n[crates/ra_ide/src/completion/complete_attribute.rs:20] mac = MacroDef {\n    id: MacroDefId {\n        krate: Some(\n            CrateId(\n                63,\n            ),\n        ),\n        ast_id: None,\n        kind: CustomDerive(\n            ProcMacroExpander {\n                krate: CrateId(\n                    63,\n                ),\n                proc_macro_id: ProcMacroId(\n                    1,\n                ),\n            },\n        ),\n    },\n}\n</code></pre></div>",
        "id": 196037085,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1588401582
    },
    {
        "content": "<p>Yes, it should be the name to use, it is extract from DLL directly.</p>",
        "id": 196037382,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1588402128
    },
    {
        "content": "<p>Perfecto, even better for me, thanks.</p>",
        "id": 196037500,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1588402366
    }
]