[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> one thing I wanted to mention. I think we talked about this briefly at the all hands, but I don't think anybody else may have heard it. One approach to incremental reparsing that I was consdering in Lark, but never implemented, was to really leverage salsa and hence enable incremental re-parsing in quite an automatic way. </p>\n<p>In Lark, the base query currently gives back a <code>&amp;[u8]</code> slice of the file. The rough idea was to next do a very quick \"repackaging\" of that into trees -- basically grouping together <code>{..}</code> tokens. Thus you don't index into the file in an absolute way to identify a token, but rather your index becomes a kind of tree, identifying the path to the <code>{}</code> and the token within.</p>\n<p>The actual parser itself would track its position as this kind of tree -- when it comes to a <code>{</code> token, and it needs to compute the \"next\" index, it would load the set of children of the <code>{</code> token, etc. </p>\n<p>This way, when we make a change, we would have to recompute the <em>tree</em>, but that is very cheap-- and after that, we only have to reparse the affected things. Since most edits occur somewhere within a <code>{...}</code>, this implies that the data outside of those <code>{}</code> is not affect (and in particular, the path to it is not affected by how many characters appear within the <code>{}</code>).</p>",
        "id": 158984096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550675929
    },
    {
        "content": "<p>I suspect that whatever tree setup we end up with, we will be able to create salsa-ified incremental variants around it.</p>",
        "id": 158984154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550675972
    },
    {
        "content": "<p>rust-analyzer works in a similar way, but this is implemented manually, not automatically. </p>\n<p>When an edit happens, we find the nearest enclosing <code>{}</code>, relex it  and , if  {} are still matched up, reparse only this region, retaining the rest of the syntax tree.</p>",
        "id": 158984512,
        "sender_full_name": "matklad",
        "timestamp": 1550676204
    },
    {
        "content": "<p>And a usual note that incremental re parsing is not <strong>too</strong> important. In IntelliJ for Java, while <code>{}</code> are usually automatically paired by the editor, if you type <code>{</code> in <code>if (condition) {</code>, IDE does <strong>not</strong> add closing <code>} </code> automatically. Instead, <code>}</code> is added when you actually type Enter: that gives a somewhat better typing feeling.</p>",
        "id": 158984682,
        "sender_full_name": "matklad",
        "timestamp": 1550676317
    },
    {
        "content": "<p>of course that upaired <code>{</code> completely invalidates the parse tree, but the perf loss is negligible, and so smother typing gets higher priority.</p>",
        "id": 158984763,
        "sender_full_name": "matklad",
        "timestamp": 1550676363
    },
    {
        "content": "<p>That is, there's specific code to <strong>suppress</strong> insertion of <code>}</code> after if, while, etc.</p>",
        "id": 158984794,
        "sender_full_name": "matklad",
        "timestamp": 1550676383
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/LrVA6SVlomkAWM-S5YrKQq5q/closing_curly-2019-02-20_18.37.42.webm\" target=\"_blank\" title=\"closing_curly-2019-02-20_18.37.42.webm\">closing_curly-2019-02-20_18.37.42.webm</a></p>",
        "id": 158985972,
        "sender_full_name": "matklad",
        "timestamp": 1550677163
    },
    {
        "content": "<p>Here's a video with the <code>if {</code> behavior</p>",
        "id": 158985992,
        "sender_full_name": "matklad",
        "timestamp": 1550677176
    }
]