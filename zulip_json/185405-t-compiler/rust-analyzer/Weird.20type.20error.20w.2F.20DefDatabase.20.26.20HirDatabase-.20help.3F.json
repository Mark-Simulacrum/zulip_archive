[
    {
        "content": "<p>I have a DeclValidator that I want to use its DB reference to do queries with, which should be ok I think, since it's a <code>HirDatabase</code>, and <code>trait HirDatabase : DefDatabase</code>, but for some reason (lifetimes and variance shenanigans, probably), rustc is not taking it. Can someone help?</p>\n<p>In particular I have a <code>m</code> which is a <code>ModuleId</code>, which I am calling <code>.containing_module(db)</code> on. <code>db</code> is a <code>db: &amp;'a dyn HirDatabase,</code>. I have the full function below if that's helpful.</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0308]: mismatched types\n  --&gt; crates/hir_ty/src/diagnostics/decl_check.rs:99:63\n   |\n99 |                 AttrDefId::ModuleId(m) =&gt; m.containing_module(self.db).map(|v| v.into()),\n   |                                                               ^^^^^^^ expected trait `DefDatabase`, found trait `HirDatabase`\n   |\n   = note: expected reference `&amp;dyn DefDatabase`\n              found reference `&amp;&#39;a (dyn HirDatabase + &#39;a)`\n</code></pre></div>\n<p>The entire function from <code>crates/hir_ty/src/diagnostics/decl_check.rs</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"sd\">/// Checks whether not following the convention is allowed for this item.</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// Currently this method doesn't check parent attributes.</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">allowed</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">id</span>: <span class=\"nc\">AttrDefId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">allow_name</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">is_allowed</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">def_id</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">db</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">attrs</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">by_key</span><span class=\"p\">(</span><span class=\"s\">\"allow\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">tt_values</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">tt</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">tt</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">().</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">allow_name</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">is_allowed</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">AttrDefId</span>::<span class=\"n\">ModuleId</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"p\">.</span><span class=\"n\">containing_module</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">db</span><span class=\"p\">).</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">v</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">AttrDefId</span>::<span class=\"n\">FieldId</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">todo!</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">AttrDefId</span>::<span class=\"n\">AdtId</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">todo!</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">AttrDefId</span>::<span class=\"n\">FunctionId</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">todo!</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">AttrDefId</span>::<span class=\"n\">EnumVariantId</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">todo!</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">AttrDefId</span>::<span class=\"n\">StaticId</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">todo!</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">AttrDefId</span>::<span class=\"n\">ConstId</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">todo!</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">AttrDefId</span>::<span class=\"n\">TraitId</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">todo!</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">AttrDefId</span>::<span class=\"n\">TypeAliasId</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">todo!</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">AttrDefId</span>::<span class=\"n\">MacroDefId</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">todo!</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">AttrDefId</span>::<span class=\"n\">ImplId</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">todo!</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">AttrDefId</span>::<span class=\"n\">GenericParamId</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">todo!</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">mid</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">allowed</span><span class=\"p\">(</span><span class=\"n\">mid</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">allow_name</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 233623486,
        "sender_full_name": "Jade",
        "timestamp": 1617873246
    },
    {
        "content": "<p>you want to upcast the database <code>m.containing_module(self.db.upcast()).map(|v| v.into())</code> should work</p>",
        "id": 233623785,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1617873397
    },
    {
        "content": "<p>Thanks! Is there anywhere I can read into why that trait is required (for learning reasons)? For some reason putting the <code>&amp;*</code> in the function call itself doesn't do it, so there seems to be some kind of special thing going on here?</p>",
        "id": 233624121,
        "sender_full_name": "Jade",
        "timestamp": 1617873594
    },
    {
        "content": "<p>Rust doesn't allow going from one trait object to the traits \"super trait object\" because vtables arent defined in such a way (yet?) to my knowledge, so this upcast trait is a trick to get that behavior.<br>\nI think this is the relevant rfc issue <a href=\"https://github.com/rust-lang/rfcs/issues/2765#issuecomment-257878042\">https://github.com/rust-lang/rfcs/issues/2765#issuecomment-257878042</a></p>",
        "id": 233624618,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1617873832
    }
]