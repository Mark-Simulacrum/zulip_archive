[
    {
        "content": "<p><a href=\"/user_uploads/4715/gIwU9KkyLkSz4N3zv_Przv2X/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/gIwU9KkyLkSz4N3zv_Przv2X/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/gIwU9KkyLkSz4N3zv_Przv2X/image.png\"></a></div><p>One of those features I want to do, but have no clues how, due to zero knowledge on how things are supposed to work below <code>hir</code>.<br>\nCould somebody give me code pointers and high-level explanations on how to tackle this?</p>\n<p>I believe, the end user API has to be somewhere on the <code>source_analyzer.rs</code>, where all <code>type_of_*</code> calls should return type aliases instead of a \"raw\" type as we do now?</p>\n<p>It feels like I need to store the alias info into a cache(?) during lowering(???) along with their visibility and look it up before returning a <code>type_of_*</code>?<br>\nWhat about funny cases generic type aliases?</p>",
        "id": 237804770,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1620386117
    },
    {
        "content": "<p>this is quite non-trivial <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> the first problem is representing this at all. There's currently no way of representing an unresolved type alias as a type, so the two options are a) add it to the Chalk type system, or b) introduce our own intermediate type representation that we transform Chalk types from and back.</p>",
        "id": 237806433,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1620386903
    },
    {
        "content": "<p>a) is something that's actually been considered (basically it would mean implementing \"lazy normalization\" for type aliases, instead of the eager lowering we have right now), but it's obviously a somewhat deep change in the type system</p>",
        "id": 237806551,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1620386990
    },
    {
        "content": "<p>b) is something I've also wanted to do for other reasons and even started, but stopped for various reasons. I still think it's probably a good idea though. But it would still leave the problem how to thread the information that something was originally a type alias through the actual type system</p>",
        "id": 237806752,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1620387074
    },
    {
        "content": "<p>(to expand on b a bit more, what I'm thinking of is something that's close to how types are written in surface rust (so like <code>TypeRef</code> in that regard), but with resolved IDs instead of names)</p>",
        "id": 237807358,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1620387373
    },
    {
        "content": "<p>here are some slightly more complicated cases to consider:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">identity</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 237807853,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1620387630
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 237808094,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1620387749
    },
    {
        "content": "<p>We have an issue for this right? Might be good to drop this topic in a comment there(or make an issue about this if we haven't yet)</p>",
        "id": 237809774,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1620388566
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Type.20aliases.20in.20inlay.20hints/near/237808094\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This one looks like a fun one <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 237809946,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1620388648
    },
    {
        "content": "<p>yeah, I think we do</p>",
        "id": 237810198,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1620388773
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/1666\">https://github.com/rust-analyzer/rust-analyzer/issues/1666</a></p>",
        "id": 237810305,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1620388810
    },
    {
        "content": "<p>I wrote there</p>\n<blockquote>\n<p>I personally don't think we should treat type aliases as a separate type</p>\n</blockquote>\n<p>but Niko has since mentioned maybe wanting to do that anyway for other reasons, hence why I mentioned it as possibility a) above</p>",
        "id": 237811024,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1620389141
    },
    {
        "content": "<p>Right, so even if you deferred doing this now and it all goes down to the type level, looks like I'm too optimistic here <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <br>\nThank you for elaborating on this again, I'll link this topic into the issue, as suggested.</p>",
        "id": 237815727,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1620391355
    }
]