[
    {
        "content": "<p>By the way, I was thinking about how we could provide std lib support if <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/1007\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/1007\">rust-analyzer#1007</a> was implemented (a bit prematurely, I've got to admit ;) ) and I had an idea: It should be possible to take a crate, parse and macroexpand it, and then basically write a big <code>.rs</code> file containing only its public API, with docstrings etc. but without bodies or private items. So it would basically be a valid rust file syntactically and provide the same public interface as the original crate, but it wouldn't typecheck or be compilable. But we'd be able to load it instead of the original crate, hopefully a lot faster, and maybe even e.g. bundle it with the WASM version... </p>\n<p>Of course a binary format would be even faster and smaller, but we'd also need to worry about compatibility, and implement serialization etc., whereas this seems like it'd actually be relatively easy to do...</p>",
        "id": 161394249,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1553201231
    },
    {
        "content": "<p>Heh, Swift works like this: their intermediate language, SIL, is textual and is parsed by the same parser that deals with source</p>",
        "id": 161420790,
        "sender_full_name": "matklad",
        "timestamp": 1553231187
    }
]