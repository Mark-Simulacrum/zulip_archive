[
    {
        "content": "<p>I'm considering options on how to write the actual completion benchmarks.</p>\n<p>I'm most interested in the flyimport functionality, but in order to test it with something real, I have to add a few external crates into the project.<br>\nShould I use something like <code>//- /main.rs crate:main deps:dep</code> in one big file with big number of items and parse that into <code>TestDb</code>?</p>\n<p>And then, how I'm supposed to check the actual completion?<br>\nLooks like there's no good way to pass some continuous by-char input into those tests?<br>\nWhat are the alternative, to refactor, expose and directly query the main completion method from the <code>ide_completion/lib.rs</code>?</p>",
        "id": 229750292,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1615412585
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"231447\">@Kirill Bulatov</span> have you seen the recent macro/parsing benchmarks?</p>",
        "id": 229830784,
        "sender_full_name": "matklad",
        "timestamp": 1615460661
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/db6364fecc2b0e9a95d9aaece820a86265b4cb4f/crates/syntax/src/tests.rs#L45-L65\">https://github.com/rust-analyzer/rust-analyzer/blob/db6364fecc2b0e9a95d9aaece820a86265b4cb4f/crates/syntax/src/tests.rs#L45-L65</a></p>",
        "id": 229830843,
        "sender_full_name": "matklad",
        "timestamp": 1615460701
    },
    {
        "content": "<p>this I think is the right structure for the benchmark:</p>\n<ul>\n<li>a slow test</li>\n<li>fixed, independent of std, fixture</li>\n<li>timing of the specific function</li>\n<li>\"hash\" computation, to make sure we can't optimize the computation away</li>\n</ul>",
        "id": 229831013,
        "sender_full_name": "matklad",
        "timestamp": 1615460779
    },
    {
        "content": "<p>The hard thing here is comming up with a test fixture. My feel is that we should avoid pulling existing crates from crates io, and instead write a generator for pseudo crates. That is, a bit of code that generates text for a tree of nested modules with items, maybe even split across several crates.</p>",
        "id": 229831243,
        "sender_full_name": "matklad",
        "timestamp": 1615460911
    },
    {
        "content": "<p>See also <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/db6364fecc2b0e9a95d9aaece820a86265b4cb4f/crates/ide/src/syntax_highlighting/tests.rs#L229-L248\">https://github.com/rust-analyzer/rust-analyzer/blob/db6364fecc2b0e9a95d9aaece820a86265b4cb4f/crates/ide/src/syntax_highlighting/tests.rs#L229-L248</a> for an example of synthetic generation.</p>",
        "id": 229831319,
        "sender_full_name": "matklad",
        "timestamp": 1615460962
    },
    {
        "content": "<p>Yes, I've seen the previous benchmarks and apparently grasped the general concepts, thanks for confirming :)</p>\n<p>I'm wondering if completions with their \"preload almost everything and then query rapidly\" approach have any caveats worth thinking of, but I'll check it out along the way now, I guess.</p>",
        "id": 229834808,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1615462828
    },
    {
        "content": "<p>I think you want to compute the crate def map outised of the main timing block</p>",
        "id": 229834975,
        "sender_full_name": "matklad",
        "timestamp": 1615462924
    },
    {
        "content": "<p>or maybe just use two timing blocks - one for def map, one for completion per se</p>",
        "id": 229835017,
        "sender_full_name": "matklad",
        "timestamp": 1615462946
    },
    {
        "content": "<p>or maybe even better: you do the timling, then you \"type\" one character, then you do timling again</p>",
        "id": 229835058,
        "sender_full_name": "matklad",
        "timestamp": 1615462974
    },
    {
        "content": "<p>year, the last one is I think what we want</p>",
        "id": 229835074,
        "sender_full_name": "matklad",
        "timestamp": 1615462986
    },
    {
        "content": "<p>Don't see any other way around to measure the lookup speed, but good point about the preload separate tests: that is mostly the data generator related work and might make sense to check along the way.</p>",
        "id": 229835369,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1615463154
    },
    {
        "content": "<p>A sanity check:</p>\n<p>am I getting it right that for emulating a continuous user input, I have to replace <code>$0</code> with <code>${next_symbol}$0</code> in the whole fixture and reparse it with <code>ChangeFixture::parse</code> to get the <code>Change</code> and <code>FilePosition</code>? (former goes into <code>RootDatabase</code> as an update, then the db and the latter goes into <code>ide_completion::completions</code> function)</p>\n<p>For a benchmark, I'd like to generate big fixtures and parsing the whole fixture multiple times feels a bit weird.</p>",
        "id": 235569843,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1619034299
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"231447\">@Kirill Bulatov</span> Hm, I don't think we need to emulate continuous user input</p>",
        "id": 235635919,
        "sender_full_name": "matklad",
        "timestamp": 1619078453
    },
    {
        "content": "<p>I think it's enough to just do the following:</p>\n<ul>\n<li>compute syntax hightlighting for the file</li>\n<li>type one char</li>\n</ul>",
        "id": 235635974,
        "sender_full_name": "matklad",
        "timestamp": 1619078482
    },
    {
        "content": "<p>That should be enough to expose analysis-level characteristics.</p>",
        "id": 235636017,
        "sender_full_name": "matklad",
        "timestamp": 1619078513
    },
    {
        "content": "<p>This won't cover things like \"are we prioritizing edits over completion over hightlighting in the LSP layer\", but I don't think we are quite ready for that sort of the benchmark</p>",
        "id": 235636144,
        "sender_full_name": "matklad",
        "timestamp": 1619078572
    }
]