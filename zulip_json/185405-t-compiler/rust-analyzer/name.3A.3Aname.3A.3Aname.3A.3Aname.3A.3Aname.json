[
    {
        "content": "<p>wut <a href=\"/user_uploads/4715/ZzjRhN_Tz9VuIPc5rIMTxfn6/screenshot-2021-03-18-150932.png\">screenshot-2021-03-18-150932.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/ZzjRhN_Tz9VuIPc5rIMTxfn6/screenshot-2021-03-18-150932.png\" title=\"screenshot-2021-03-18-150932.png\"><img src=\"/user_uploads/4715/ZzjRhN_Tz9VuIPc5rIMTxfn6/screenshot-2021-03-18-150932.png\"></a></div>",
        "id": 230869538,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616076650
    },
    {
        "content": "<p>why do we get different results for Import and Qualify?</p>",
        "id": 230871070,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1616077227
    },
    {
        "content": "<p>good question</p>",
        "id": 230871640,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616077434
    },
    {
        "content": "<p>btw, imo \"Qualify as cast\" is misworded? Yeah it's using <code>as</code>, but <code>&lt;T as Trait&gt;</code> is not really a cast</p>",
        "id": 230871832,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1616077509
    },
    {
        "content": "<p>the long path has 15 segments, which is exactly <code>MAX_PATH_LEN</code></p>",
        "id": 230871839,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616077510
    },
    {
        "content": "<p>Oh it doesn't actually use <code>as</code></p>",
        "id": 230871881,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616077527
    },
    {
        "content": "<p>It produces <code>name::AsName::as_name(...)</code></p>",
        "id": 230871921,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616077546
    },
    {
        "content": "<p>hm yeah right it only uses as if you were calling <code>T::as_name</code> before</p>",
        "id": 230871955,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1616077561
    },
    {
        "content": "<p>anyway, that's just a side point</p>",
        "id": 230872055,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1616077590
    },
    {
        "content": "<p>How do you even manage to break it? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n<p><a href=\"/user_uploads/4715/QLqSBK_QjeZaJ0aedPn0FPCL/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/QLqSBK_QjeZaJ0aedPn0FPCL/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/QLqSBK_QjeZaJ0aedPn0FPCL/image.png\"></a></div>",
        "id": 230872167,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1616077641
    },
    {
        "content": "<p>I feel like rust-analyzer would've been much less successful hadn't we switched  to 16x9 displays <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 230872250,
        "sender_full_name": "matklad",
        "timestamp": 1616077678
    },
    {
        "content": "<p>hm, that one _also_ has different results for Import and Qualify</p>",
        "id": 230872376,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1616077722
    },
    {
        "content": "<p>of course import and qualify can potentially be different, if there are local imports</p>",
        "id": 230872455,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1616077755
    },
    {
        "content": "<p>But yeah, the label mismatch is very awkward: we do use the same field to fill the label but even on the \"working\" example above I see differences.</p>\n<p>And since it's the same path to look for imports, it's very odd, as if the index had started to give some non-determined behaviour.<br>\nCan be that <code>FxHashMap</code> I've used recently?</p>",
        "id": 230872462,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1616077757
    },
    {
        "content": "<p>I have to really take a vacation and make some normal proper work in this field, sorry.</p>",
        "id": 230872622,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1616077808
    },
    {
        "content": "<p>so maybe it's related to local def maps? but the qualify ones are actually more correct...</p>",
        "id": 230872648,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1616077816
    },
    {
        "content": "<p>Those two assist don't use exactly the same stuff for lookups</p>",
        "id": 230873047,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616077940
    },
    {
        "content": "<p>qualify_path does<br>\n<code>let proposed_imports = import_assets.search_for_relative_paths(&amp;ctx.sema);</code><br>\nauto_import does<br>\n<code>let proposed_imports = import_assets.search_for_imports(&amp;ctx.sema, ctx.config.insert_use.prefix_kind);</code></p>",
        "id": 230873133,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616077973
    },
    {
        "content": "<p>difference is basically just the prefix so it makes sense that the two return different paths there</p>",
        "id": 230873354,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616078047
    },
    {
        "content": "<p>If I remember correctly my reasoning for making <code>qualify</code> use relative paths was that the user usually doesn't want fully qualified paths in the middle of their expressions</p>",
        "id": 230873933,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616078242
    },
    {
        "content": "<p>I also agree the label could be improved</p>",
        "id": 230873992,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616078264
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/name.3A.3Aname.3A.3Aname.3A.3Aname.3A.3Aname/near/230872648\">said</a>:</p>\n<blockquote>\n<p>so maybe it's related to local def maps? but the qualify ones are actually more correct...</p>\n</blockquote>\n<p>oh dang it you're right</p>",
        "id": 230874429,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616078412
    },
    {
        "content": "<p>You can reproduce this by going to <code>builtin_derive.rs</code> and removing the <code>AsName</code> import in the <code>tests</code> module, then trigger autoimport on the <code>as_name()</code> calls below</p>",
        "id": 230874536,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616078448
    },
    {
        "content": "<p>Ah, the <code>name</code> module has a reexport of itself: <code>pub use crate::name;</code></p>\n<p>That must be confusing it</p>",
        "id": 230875306,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616078746
    },
    {
        "content": "<p>In the end, the mod path lookup boils down to <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_def/src/find_path.rs#L94\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_def/src/find_path.rs#L94</a></p>",
        "id": 230875473,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1616078805
    },
    {
        "content": "<p>On the ide level, we find all items matching by our search criteria and then for all of them call a higher-level ide method, where specify a few parameters such as prefixes and the module we want this path to be resolved in. <br>\nThe ide method tosses this around and eventually passes that to the method above, with no significant changes afaik.</p>",
        "id": 230875822,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1616078940
    },
    {
        "content": "<blockquote>\n<p>Ah, the <code>name</code> module has a reexport of itself: <code>pub use crate::name;</code></p>\n</blockquote>\n<p>The pumping lemma for Rust paths</p>",
        "id": 230900439,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1616086667
    },
    {
        "content": "<p>Hmm, looks like it happens outside of block expressions too: <a href=\"/user_uploads/4715/xNqCeNIEO4CENigMggU43ldd/screenshot-2021-03-18-184314.png\">screenshot-2021-03-18-184314.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/xNqCeNIEO4CENigMggU43ldd/screenshot-2021-03-18-184314.png\" title=\"screenshot-2021-03-18-184314.png\"><img src=\"/user_uploads/4715/xNqCeNIEO4CENigMggU43ldd/screenshot-2021-03-18-184314.png\"></a></div>",
        "id": 230908343,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616089423
    },
    {
        "content": "<p>What does <code>block</code>  mean in <code>ModuleId</code>?</p>\n<p>I've looked at what <code>find_local_import_locations</code> function returns and for this case, it returns two ModuleIds, one having a blockId, and the other not. <br>\nModule id is defined so</p>\n<div class=\"codehilite\"><pre><span></span><code>#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\npub struct ModuleId {\n    krate: CrateId,\n    block: Option&lt;BlockId&gt;,\n    pub local_id: LocalModuleId,\n}\n</code></pre></div>\n<p>that due to the blockId difference, these two modules are unequal and there are no existing means to compare ModuleIds differently.</p>\n<p>Another weird issue is that I cannot reproduce the bug in all our codebase, including the tests in <code>auto_import.rs</code>, that's all odd.</p>",
        "id": 230947324,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1616106578
    },
    {
        "content": "<p><code>block</code> is <code>Some</code> if the <code>ModuleId</code> refers to a block expression</p>",
        "id": 230949778,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616108232
    },
    {
        "content": "<p>I'll add some docs</p>",
        "id": 230949782,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616108237
    }
]