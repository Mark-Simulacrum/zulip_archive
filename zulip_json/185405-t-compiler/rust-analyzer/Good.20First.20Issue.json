[
    {
        "content": "<p>Hello everyone. I am new to rust analyzer project. I would like to work on issue <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/7454\">https://github.com/rust-analyzer/rust-analyzer/issues/7454</a>. I wanted help to understand the requirement of this ticket.</p>",
        "id": 227095465,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1613832106
    },
    {
        "content": "<p>Is the requirement is to update documentation with the correct wording? I checked the functionality in VSCode and it shows \"Expand Selection\" and \"Shrink Selection\" as tasks.</p>",
        "id": 227095554,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1613832219
    },
    {
        "content": "<p>In documentation there is no \"Shrink Selection\", so I can add that also.</p>",
        "id": 227095616,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1613832298
    },
    {
        "content": "<p>Oof, sorry, that issue is a bit of a mess</p>",
        "id": 227096175,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613832987
    },
    {
        "content": "<p>No problem. I will look into another issue.</p>",
        "id": 227096356,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1613833217
    },
    {
        "content": "<p>I've added a comment</p>",
        "id": 227096577,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613833450
    },
    {
        "content": "<p>I think there's not much to do there except removing the feature description</p>",
        "id": 227096589,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613833461
    },
    {
        "content": "<p>Currently when I build the plugin, it is giving me build error. The error in client.ts file. I resolved the error, should I create pull request?</p>",
        "id": 227098484,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1613835555
    },
    {
        "content": "<p>Pulled the latest code on master branch. Latest commit is 1349f6a79177c6b.</p>",
        "id": 227098558,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1613835613
    },
    {
        "content": "<p>I think the issue is due to changes in lc.LanguageClient object.</p>",
        "id": 227098597,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1613835706
    },
    {
        "content": "<p>Sorry about this. after recent pull needed to do npm install to get recent packages. Now its building properly.</p>",
        "id": 227098900,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1613836000
    },
    {
        "content": "<p>Hello everyone. I am new to this project. I was looking into the issues and can't find any bug labeled ticket. I would like to start with small issue. How can I find such small work? If anyone suggests some work directly, I would also like to work on that. Open to anything <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 227295810,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1614011680
    },
    {
        "content": "<p>There are some issues labelled as such -- <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22\">https://github.com/rust-analyzer/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22</a> -- but most of these don't seem particularly easy</p>",
        "id": 227296154,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614011812
    },
    {
        "content": "<p>You can take <a href=\"https://github.com/rust-lang/rust/issues/7526\">#7526</a> (though it might be too easy?) It's been partly done in <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/7707\">https://github.com/rust-analyzer/rust-analyzer/pull/7707</a></p>",
        "id": 227296458,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614011939
    },
    {
        "content": "<p>There's a PR open for it, but it's not exactly right</p>",
        "id": 227297320,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614012261
    },
    {
        "content": "<p>I did look for good first issue, but found only 1 issue that was not actionable. Thank you <span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> for the issue suggestion. I will look into <a href=\"https://github.com/rust-lang/rust/issues/7526\">#7526</a> issue.</p>",
        "id": 227298172,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1614012603
    },
    {
        "content": "<p>Maybe <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/3154\">https://github.com/rust-analyzer/rust-analyzer/issues/3154</a> too</p>",
        "id": 227298311,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614012649
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/7731\">https://github.com/rust-analyzer/rust-analyzer/issues/7731</a> if you have a bit of experience with GitHub Actions</p>",
        "id": 227298404,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614012685
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span>, issue <a href=\"https://github.com/rust-lang/rust/issues/7526\">#7526</a> is already closed and pull/7707 PR is merged. looking into <a href=\"https://github.com/rust-lang/rust/issues/3154\">#3154</a> issue.</p>",
        "id": 227301636,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1614013781
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/7526\">https://github.com/rust-analyzer/rust-analyzer/issues/7526</a></p>",
        "id": 227301939,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614013895
    },
    {
        "content": "<p>wrong repo <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/7526\">https://github.com/rust-analyzer/rust-analyzer/issues/7526</a></p>",
        "id": 227301941,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614013896
    },
    {
        "content": "<p>linking issue #numbers directly seems to be a bad idea for this stream <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 227302081,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614013939
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/7526\">rust-analyzer#7526</a> also works</p>",
        "id": 227302197,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614013985
    },
    {
        "content": "<p>I wish Zulip had per-stream linkifier settings</p>",
        "id": 227302247,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614013999
    },
    {
        "content": "<p>another rather simple issue with rough instructions is here <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/7693\">https://github.com/rust-analyzer/rust-analyzer/issues/7693</a></p>",
        "id": 227302448,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614014062
    },
    {
        "content": "<p>Hi all, while working on renaming crate assists to ide_assists. after renaming there are multiple warngings not related to renaming. (clippy warnings) what should I do?</p>",
        "id": 227311548,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1614017415
    },
    {
        "content": "<p>You can ignore clippy warnings, we don't generally have a policy of having zero clippy warnings (<a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/dev/style.md#clippy\">https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/dev/style.md#clippy</a>)</p>",
        "id": 227312537,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1614017816
    },
    {
        "content": "<p>ok</p>",
        "id": 227312638,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1614017857
    },
    {
        "content": "<p>I have done the changes for <a href=\"https://github.com/rust-lang/rust/issues/7526\">#7526</a> and created pull request <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/7759\">https://github.com/rust-analyzer/rust-analyzer/pull/7759</a>. Thank you guys for the help. This is my first contribution to this project. <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 227324900,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1614022765
    },
    {
        "content": "<p>You could also give <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/7708\">https://github.com/rust-analyzer/rust-analyzer/issues/7708</a> a try</p>",
        "id": 227396075,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614068814
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> , I will work on <a href=\"https://github.com/rust-lang/rust/issues/7708\">#7708</a>.</p>",
        "id": 227460264,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1614097929
    },
    {
        "content": "<p>You mean <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/7708\">rust-analyzer#7708</a> :D</p>",
        "id": 227461277,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614098277
    },
    {
        "content": "<p>See <a href=\"https://github.com/rust-analyzer/rust-analyzer/tree/master/docs/dev#how-to-\">https://github.com/rust-analyzer/rust-analyzer/tree/master/docs/dev#how-to-</a> and <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/dev/architecture.md\">https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/dev/architecture.md</a></p>",
        "id": 227461416,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614098318
    },
    {
        "content": "<p>Ohh I got it now. The #&lt;number&gt; tag directly links to rust project and not rust-analyzer. Thank you for the docs links.</p>",
        "id": 227462039,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1614098541
    },
    {
        "content": "<p>Yeah, I made the same mistake yesterday :-)</p>",
        "id": 227462246,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614098626
    },
    {
        "content": "<p>my 1 observation is that <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/generated_assists.adoc\">https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/generated_assists.adoc</a> this link is not working. same with generated_diagnostics.adoc in user manual page. Is this issue or am I missing something?</p>",
        "id": 227465523,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1614099768
    },
    {
        "content": "<p>That's <a href=\"https://rust-analyzer.github.io/manual.html#assists-code-actions\">https://rust-analyzer.github.io/manual.html#assists-code-actions</a></p>",
        "id": 227471304,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614101919
    },
    {
        "content": "<p>The link is indeed broken (the file is in <code>.gitignore</code>), but don't worry about it. Once you have your assist, it's easy to generate the docs if you've followed the same convention</p>",
        "id": 227471386,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614101953
    },
    {
        "content": "<p>ok</p>",
        "id": 227623310,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1614182921
    },
    {
        "content": "<p>I am working on adding Assist. For that I am learning the existing assists code. What is the best way to learn and debug Assists? Currently I have added the debug point, but it debugger never hits that point.</p>",
        "id": 227636829,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1614187196
    },
    {
        "content": "<p>I guess the best way to learn how to write on is reading <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/7535\">https://github.com/rust-analyzer/rust-analyzer/pull/7535</a></p>",
        "id": 227636993,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614187248
    },
    {
        "content": "<p>About the debugger, you might need a (different) extension. I think CodeLLDB works for me on Linux, Microsoft's C++ extension works on Windows and none of them on Mac :-). But I'm not sure, I find debuggers pretty painful to use in Rust, at least to some other non-native languages</p>",
        "id": 227637170,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614187315
    },
    {
        "content": "<p>You might be better off using <code>log::info!</code> or <code>log::error!</code> to print the values you're interested in. <a href=\"https://tedspence.com/the-art-of-printf-debugging-7d5274d6af44\">https://tedspence.com/the-art-of-printf-debugging-7d5274d6af44</a> demonstrates that technique.</p>",
        "id": 227637328,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614187361
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> for that suggestion. I am using CodeLLDB but I also find that painful for rust. I am reading remove_unused_params assists currently as it is small code. I will look into extract function assist also afterwards.</p>",
        "id": 227638025,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1614187592
    },
    {
        "content": "<p>Do we have to set log file path or any default path is taken for debug build.</p>",
        "id": 227776930,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1614264010
    },
    {
        "content": "<p>If you're using Code, they'll show up in the Output window. But you might need to set <code>RA_LOG=info</code> or something  like that</p>",
        "id": 227783833,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614266527
    },
    {
        "content": "<p>Good morning guys. I am working on <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/7708\">https://github.com/rust-analyzer/rust-analyzer/issues/7708</a> issue. I have created code for happy case scenario. Should I get that code reviewed first or implement all the checks and other cases code and then submit for reivew (via pull request)?</p>",
        "id": 228075529,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1614451560
    },
    {
        "content": "<p>You can file a draft PR. It may or may not be reviewed, depending on the availability of the reviewers :-)</p>",
        "id": 228077767,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614453865
    },
    {
        "content": "<p>I did not consider the time and efforts required for reviewer. I will complete the work and then file PR. Thank you for the suggestion.</p>",
        "id": 228078044,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1614454225
    },
    {
        "content": "<p>It's all right either way, really, just no promises about reviewing it</p>",
        "id": 228078332,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614454579
    },
    {
        "content": "<p>The codegen part generated wrong test case. Should I update that test case manually in generated file?</p>",
        "id": 228082442,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1614459152
    },
    {
        "content": "<p>I fixed the issue, there were many issues in documentation example code.</p>",
        "id": 228082762,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1614459598
    },
    {
        "content": "<p>I like the test suite created in this project. Checking every aspect of the code. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 228083568,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1614460445
    },
    {
        "content": "<p>left you some comments</p>",
        "id": 228084186,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614461244
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300586\">Lukas Wirth</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Good.20First.20Issue/near/228084186\">said</a>:</p>\n<blockquote>\n<p>left you some comments</p>\n</blockquote>\n<p>Thank you <span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span> for the review and feedback. I will work on it.</p>",
        "id": 228257037,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1614615066
    },
    {
        "content": "<p>For Impl node in ast we don't have ast::NameOwner implemented for it. Any specific reason anyone know.</p>",
        "id": 228290593,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1614626598
    },
    {
        "content": "<p><code>Impl</code> has no name hence it doesn't implement it</p>",
        "id": 228291789,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614627053
    },
    {
        "content": "<p>so impl Example {} we dont consider Example as name of impl block?</p>",
        "id": 228295178,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1614628392
    },
    {
        "content": "<p>No, <code>Example</code> is a <code>PathType</code> in that case</p>",
        "id": 228295388,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614628487
    },
    {
        "content": "<p>I gave you another comment on the PR btw, I unfortunately directed you into the wrong direction before it seems <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 228295454,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614628512
    },
    {
        "content": "<p>the target of an impl block is a type, which can be other things than a simple name. For example, there's an <code>impl&lt;T&gt; [T]</code></p>",
        "id": 228296702,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1614629039
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span>  committed the changes. 1 more thing is pending that if Default impl is already implemented then skip the assist. I will work on that later.</p>",
        "id": 228297381,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1614629285
    },
    {
        "content": "<p>Alright, for that you will probably have to use the <code>Semantics</code> type since you will have to query whether the type already implements Default(as searching for the <code>Default</code> impl in the AST won't cover everything).</p>",
        "id": 228297701,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614629412
    },
    {
        "content": "<p>thanks for the pointer. I will look into Semantics. that one I kept pending cause I wasn't sure about the logic.</p>",
        "id": 228297851,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1614629475
    },
    {
        "content": "<p>for formatting this project are we using rustfmt or rust-analyzer formatter?</p>",
        "id": 228298518,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1614629733
    },
    {
        "content": "<p>rust-analyzer uses rustfmt under the hood</p>",
        "id": 228298658,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614629783
    },
    {
        "content": "<p>so they both are exactly same or rust-analyzer add some extra logic?</p>",
        "id": 228298828,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1614629868
    },
    {
        "content": "<p>rust-analyzer has no formatter on its own, so its just rustfmt</p>",
        "id": 228299650,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614630202
    },
    {
        "content": "<p>a future rust-analyzer will hopefully have its own formatter</p>",
        "id": 228299695,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614630226
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300586\">Lukas Wirth</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Good.20First.20Issue/near/228299695\">said</a>:</p>\n<blockquote>\n<p>a future rust-analyzer will hopefully have its own formatter</p>\n</blockquote>\n<p>why hopefully?</p>",
        "id": 228301900,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614631084
    },
    {
        "content": "<p>So we can format our syntax trees in memory for assists and such</p>",
        "id": 228302420,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614631297
    },
    {
        "content": "<p>Didn't mean to imply rustfmt being bad or anything <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 228302453,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614631314
    },
    {
        "content": "<p>nah I'm just trying to understand :)</p>",
        "id": 228302602,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614631380
    },
    {
        "content": "<p>do you specifically want your own formatter? Or just a formatting library, the way <code>chalk</code> works?</p>",
        "id": 228302639,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614631400
    },
    {
        "content": "<p>I think it's plausible for rustfmt to use syn/quote instead of rustc eventually</p>",
        "id": 228302663,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614631420
    },
    {
        "content": "<p>I don't think that will help here, see <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/1665\">https://github.com/rust-analyzer/rust-analyzer/issues/1665</a> and <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/923\">https://github.com/rust-analyzer/rust-analyzer/issues/923</a></p>",
        "id": 228302835,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614631503
    },
    {
        "content": "<p>the goal is to be able to directly format our syntax trees so we can emit well formatted edits and such</p>",
        "id": 228302905,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614631529
    },
    {
        "content": "<p>from what i remember</p>",
        "id": 228302927,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614631537
    },
    {
        "content": "<p>oh man pattern-based formatting sounds amazing :D</p>",
        "id": 228302954,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614631554
    },
    {
        "content": "<p>I've always wanted that in rust</p>",
        "id": 228302959,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614631557
    },
    {
        "content": "<p>We try to build on stable, so a prerequisite for that would be rustfmt and rust-analyzer sharing the parser and maybe AST types</p>",
        "id": 228303009,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614631565
    },
    {
        "content": "<p>Hi guys, I have updated the implementation for <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/7708\">https://github.com/rust-analyzer/rust-analyzer/issues/7708</a> issue.<br>\nand completed it. Please have a look at pull request <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/7800\">https://github.com/rust-analyzer/rust-analyzer/pull/7800</a> when you have free time.</p>",
        "id": 228825473,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1614882608
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span> , I had tried your approach, but for me the deafault trait as well as std create comes None from FamousDefs.</p>",
        "id": 228986603,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1614963380
    },
    {
        "content": "<p>Oh right, that is because by default we do not test with std/core enabled, so they will always come out as <code>None</code>, there is a way to add them to your test fixtures though, give me a sec so I can find an example.</p>",
        "id": 228986910,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614963492
    },
    {
        "content": "<p>Basically you want to wrap the <code>check_assist</code> function in your tests to inject the FamousDefs fixture for you.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">check</span><span class=\"p\">(</span><span class=\"n\">ra_fixture_before</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ra_fixture_after</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">before</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">\"//- /main.rs crate:main deps:core{}{}\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">before</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">FamousDefs</span>::<span class=\"n\">FIXTURE</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">check_assist</span><span class=\"p\">(</span><span class=\"n\">generate_default_from_new</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">before</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">after</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 228987629,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614963725
    },
    {
        "content": "<p>With that you can call <code>check</code> instead of check-assist in your tests and it should work</p>",
        "id": 228987698,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614963746
    },
    {
        "content": "<p>You can see this trick being used here as well <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ide_assists/src/handlers/replace_for_loop_with_for_each.rs#L146-L154\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ide_assists/src/handlers/replace_for_loop_with_for_each.rs#L146-L154</a></p>",
        "id": 228987744,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614963764
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span> I will update the code and submit for review.</p>",
        "id": 228989052,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1614964223
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span>, with the fixture added in test code. all tests are failing. I will debug that and get back to you tomorrow.</p>",
        "id": 228995017,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1614966491
    },
    {
        "content": "<p>Hi all,<br>\nI have written code to check if trait is implemented for not for struct as below. But even though trait is implemented then also it is giving me false.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">is_default_implemented</span><span class=\"p\">(</span><span class=\"n\">ctx</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">AssistContext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">impl_</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Impl</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">db</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">sema</span><span class=\"p\">.</span><span class=\"n\">db</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">impl_def</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">sema</span><span class=\"p\">.</span><span class=\"n\">to_def</span><span class=\"p\">(</span><span class=\"n\">impl_</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">impl_def</span><span class=\"p\">.</span><span class=\"n\">target_ty</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">krate</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">impl_def</span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">).</span><span class=\"n\">krate</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">default_trait</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FamousDefs</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">sema</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">krate</span><span class=\"p\">)).</span><span class=\"n\">core_default_Default</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">implements_default</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">impls_trait</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">default_trait</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">implements_default</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I have checked that default_trait value has data. But impls_trait method giving false after going in salsa code.</p>",
        "id": 229115057,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1615052363
    },
    {
        "content": "<p>The above code failing for below test</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Example</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">_inner</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Exmaple</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">n</span><span class=\"cp\">$</span><span class=\"mi\">0</span><span class=\"n\">ew</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">_inner</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Default</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">default</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span>::<span class=\"n\">new</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but succeeding for below code</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">test</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">struct</span> <span class=\"nc\">Example</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">_inner</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">n</span><span class=\"cp\">$</span><span class=\"mi\">0</span><span class=\"n\">ew</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">_inner</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Default</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">default</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">Self</span>::<span class=\"n\">new</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 229116488,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1615053706
    },
    {
        "content": "<p>You seem to have typoed <code>Example</code> in the first snippet(you did as well in the test) so I imagine thats the problem<br>\nyou wrote <code>impl Exmaple {</code> instead of <code>impl Example {</code></p>",
        "id": 229118014,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1615054960
    },
    {
        "content": "<p>If the problem still persists though I'll check your PR out locally and see whats wrong later</p>",
        "id": 229118054,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1615055024
    },
    {
        "content": "<p>That was the issue. Silly mistake. Thank you <span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span></p>",
        "id": 229118923,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1615055738
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span>, I have committed the updated code.</p>",
        "id": 229122543,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1615059038
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span>, I have updated the code with your review comments.</p>",
        "id": 229124615,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1615060893
    },
    {
        "content": "<p>Thank you very much <span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span>  for all the help and hand holding for my 1st task. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 229124811,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1615061095
    },
    {
        "content": "<p>I will be starting work on <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/7709\">https://github.com/rust-analyzer/rust-analyzer/issues/7709</a>, which is simillar task. Hopefully I will require less help <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 229124928,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1615061167
    },
    {
        "content": "<p>1 doubt about <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/7709\">https://github.com/rust-analyzer/rust-analyzer/issues/7709</a>.<br>\nthe generated code for is_empty function is like </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>instead of this can we generate</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">self</span>::<span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>as the implementation in len() function can be complex.</p>",
        "id": 229125155,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1615061349
    },
    {
        "content": "<p>I think that's an oversight in the issue, that should definitely generate <code>self.len() == 0</code>,</p>",
        "id": 229125258,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1615061447
    },
    {
        "content": "<p>I fixed the issue code snippets</p>",
        "id": 229125310,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1615061504
    },
    {
        "content": "<p>You probably want to check out this <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ide_assists/src/handlers/replace_for_loop_with_for_each.rs#L74-L102\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ide_assists/src/handlers/replace_for_loop_with_for_each.rs#L74-L102</a><br>\nsince you want to check if the type already has an <code>is_empty</code> method or not, you can do that similar to there</p>",
        "id": 229125446,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1615061624
    },
    {
        "content": "<p>ok</p>",
        "id": 229125514,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1615061663
    },
    {
        "content": "<p>while working on other issue. should I continue with master branch (synced with upstream). or use different branch for different issue?</p>",
        "id": 229125987,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1615062111
    },
    {
        "content": "<p>Usually you'd want to make a branch per PR</p>",
        "id": 229126172,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1615062250
    },
    {
        "content": "<p>ok</p>",
        "id": 229126211,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1615062265
    },
    {
        "content": "<p>cargo xtask code giving error that unexpected argument: \"codegen\".<br>\nIs anything changed. The xtask help message also does not show codegen.</p>",
        "id": 229901913,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1615487597
    },
    {
        "content": "<p><a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/PSA.3A.20.60cargo.20xtask.20codegen.60.20is.20no.20more/near/229353544\">https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/PSA.3A.20.60cargo.20xtask.20codegen.60.20is.20no.20more/near/229353544</a></p>",
        "id": 229902154,
        "sender_full_name": "detrumi",
        "timestamp": 1615487673
    },
    {
        "content": "<p>You don't need <code>cargo xtask codegen</code> any more</p>",
        "id": 229902186,
        "sender_full_name": "detrumi",
        "timestamp": 1615487691
    },
    {
        "content": "<p>my cargo test is failing. I already have 1 generated file. Should I delete that and then run cargo test?</p>",
        "id": 229902818,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1615487902
    },
    {
        "content": "<p>Fixed it.</p>",
        "id": 229905811,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1615489074
    },
    {
        "content": "<p>I have completed the work on <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/7709\">https://github.com/rust-analyzer/rust-analyzer/issues/7709</a>. and created PR <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/7977\">https://github.com/rust-analyzer/rust-analyzer/pull/7977</a></p>",
        "id": 229907023,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1615489487
    },
    {
        "content": "<p>Hi all. I have worked on adding is_empty from len assist. Please have a look at PR <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/8037\">https://github.com/rust-analyzer/rust-analyzer/pull/8037</a>.</p>\n<p>Hi <span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span> , sorry that the old PR is closed. this happened mistakenly while cleaning remote branches I deleted my own branch. I have created new PR.</p>",
        "id": 230386157,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1615829017
    },
    {
        "content": "<p>No worries <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 230387602,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1615829556
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span> , thank you for the review. Should I pick up the work of adding return type check for  generate is_empty assits?</p>",
        "id": 230396597,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1615833176
    },
    {
        "content": "<p>Feel free to, it shouldn't be that much work actually as I've noticed</p>",
        "id": 230396651,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1615833195
    },
    {
        "content": "<p>Basically you can just add</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">is_unsigned_integer</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">matches!</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">interned</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">Interner</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">TyKind</span>::<span class=\"n\">Scalar</span><span class=\"p\">(</span><span class=\"n\">Scalar</span>::<span class=\"n\">Uint</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>to <code>hir::Type</code> to check if a type is an unsigned int, the rest should be simple enough as well I think</p>",
        "id": 230396755,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1615833244
    },
    {
        "content": "<p>Great. I will work on it. Thanks for the code.</p>",
        "id": 230396871,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1615833298
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span> , I have few doubts.<br>\nIn cargo clippy documentation they use only usize. Should we restrict type check to usize?<br>\nthe unsigned int is more useful, but then should we expand that to include signed ints also?</p>",
        "id": 230401098,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1615835159
    },
    {
        "content": "<p>other places in rust like ExactSizeIterator, the len function generally have usize return type.</p>",
        "id": 230401301,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1615835249
    },
    {
        "content": "<p>Just usize seems fine as well, I figured it might make sense to allow all unsigned ints.</p>",
        "id": 230401930,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1615835542
    },
    {
        "content": "<p>unsigned int will certainly give more freedom to apply it.</p>",
        "id": 230402129,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1615835650
    },
    {
        "content": "<p>I wanted to say that we sometimes use <code>u32</code> lengths or offsets to save memory, but those are either a struct (like <code>TextSize</code>) or <code>usize</code>. Even if you do that, there's not much reason to return anything else than <code>usize</code> from <code>len()</code>. So it's fine to only trigger it on <code>usize</code>.</p>",
        "id": 230402448,
        "sender_full_name": "Laurențiu",
        "timestamp": 1615835793
    },
    {
        "content": "<p>Right storing and returning are different matters I suppose, then only usize seems better</p>",
        "id": 230402514,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1615835831
    },
    {
        "content": "<p>And we can change it if someone files an issue :-)</p>",
        "id": 230402807,
        "sender_full_name": "Laurențiu",
        "timestamp": 1615835982
    },
    {
        "content": "<p>I have created PR <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/8040\">https://github.com/rust-analyzer/rust-analyzer/pull/8040</a><br>\n<span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span>  please have a look at it when you get time.</p>",
        "id": 230406851,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1615837740
    },
    {
        "content": "<p>Hi everyone. I have gone through all good first issue and I can't find the task that either other people are not working on or either not easy to low medium difficulty level. Please suggest me the issue to work on.</p>",
        "id": 230723996,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1615998960
    },
    {
        "content": "<p>I will also take any maintainance work.</p>",
        "id": 230724730,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1615999217
    },
    {
        "content": "<p>is anyone working on this issue: <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/4613\">https://github.com/rust-analyzer/rust-analyzer/issues/4613</a>?</p>",
        "id": 230725303,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1615999431
    },
    {
        "content": "<p>Nope, that should be free to work on.</p>",
        "id": 230726209,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1615999721
    },
    {
        "content": "<p>relevant highlighting happens here, <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ide/src/syntax_highlighting/highlight.rs\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ide/src/syntax_highlighting/highlight.rs</a></p>",
        "id": 230726522,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1615999830
    },
    {
        "content": "<p>Looks like we now emit <code>function .attribute</code> for the attribute and <code>attribute .attribute</code> for the arguments</p>",
        "id": 230726977,
        "sender_full_name": "Laurențiu",
        "timestamp": 1616000013
    },
    {
        "content": "<p>Right, I'm not sure if thats too relevant now anymore actually</p>",
        "id": 230727501,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616000201
    },
    {
        "content": "<p>You can try tackling this though I think <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8024\">https://github.com/rust-analyzer/rust-analyzer/issues/8024</a></p>",
        "id": 230727580,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616000225
    },
    {
        "content": "<p>also semantic highlighting related</p>",
        "id": 230727592,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616000230
    },
    {
        "content": "<p>sure, I will look into issue 8024</p>",
        "id": 230728177,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1616000424
    },
    {
        "content": "<p>About <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8024\">https://github.com/rust-analyzer/rust-analyzer/issues/8024</a>. To clarify requirements, where the trait is implemented, assign trait modifier to functions and variables that is used in trait.<br>\nFor this I will need to add new modifier trait right?</p>",
        "id": 231155257,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1616256896
    },
    {
        "content": "<p>Yes we want a new modifier for this</p>",
        "id": 231155889,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616257674
    },
    {
        "content": "<p>The modifier should be applied to the <code>Name</code>/<code>NameRef</code>s of associated trait items</p>",
        "id": 231155963,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616257747
    },
    {
        "content": "<p>as shown in the example in the issue</p>",
        "id": 231155970,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616257756
    },
    {
        "content": "<p>So this works similar to the <code>Associated</code> modifier we already have</p>",
        "id": 231155971,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616257767
    },
    {
        "content": "<p>just that it only applies to trait impls/defs</p>",
        "id": 231155976,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616257781
    },
    {
        "content": "<p>ok</p>",
        "id": 231157158,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1616259071
    },
    {
        "content": "<p>Hi! I was just looking at some first issues, and this channel. I love rust-analyzer and have been looking at ways to contribute :) I'm not sure if there has been any movement on <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8024\">https://github.com/rust-analyzer/rust-analyzer/issues/8024</a> mentioned in the above messages. But I had a look as an exercise of reading the code and want to check my understanding to learn. So to implement this feature, after looking at what I think are the relevant areas you'd need to:</p>\n<ul>\n<li>add a new custom lsp modifier in <code>rust-analyzer/semantic_token.rs</code> called \"trait\"</li>\n<li>\n<p>add a new <code>HlMod</code> called <code>Trait</code><br>\nthen do either or both:</p>\n</li>\n<li>\n<p>modify the <code>traverse</code> function in <code>ide/syntax_highlighting.rs</code> to check if needed and apply the HlMod to the <code>highlight</code> constructred</p>\n</li>\n<li>\n<p>modify the <code>highlight_name_ref_by_syntax</code> and <code>highlight_method_call</code> function in <code>ide/syntax_highlighting/highlight.rs</code>to apply this new <code>HlMod::Trait</code> to syntax nodes that are from traits<br>\nmy questions are:</p>\n</li>\n<li>\n<p>how do you know if a thing is part of a trait? My guess is like <code>func.as_assoc_item(db).unwrap().containing_trait().is_some()</code> (unwrap for brevity)<br>\n  is this correct or is there a better way to do this?</p>\n</li>\n<li>\n<p>Are any of the above close to instructions for an implementation or am I very far off? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>  This is my first time really looking at a big open source project seriously so it would help to know if I'm completely wrong haha</p>\n</li>\n</ul>",
        "id": 232198865,
        "sender_full_name": "Ayomide Bamidele",
        "timestamp": 1616971848
    },
    {
        "content": "<p>Yep that's pretty much what it takes, this is basically just a special case for <code>HlMod::Associated</code> + highlighting the trait def. So the main difference is checking where the assoc item lives in.</p>",
        "id": 232200423,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616973588
    },
    {
        "content": "<p>If you  want I can go look for some good first issues for you</p>",
        "id": 232200781,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616973956
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300586\">Lukas Wirth</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Good.20First.20Issue/near/232200781\">said</a>:</p>\n<blockquote>\n<p>If you  want I can go look for some good first issues for you</p>\n</blockquote>\n<p>Sure! I was having a look but wasn't sure what to choose. Thanks for confirming that I was on the right track!</p>",
        "id": 232202208,
        "sender_full_name": "Ayomide Bamidele",
        "timestamp": 1616975568
    },
    {
        "content": "<p>A simple one should be <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8114\">https://github.com/rust-analyzer/rust-analyzer/issues/8114</a> I think</p>",
        "id": 232202353,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616975737
    },
    {
        "content": "<p>relevant file for that is <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ide/src/folding_ranges.rs\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ide/src/folding_ranges.rs</a></p>",
        "id": 232202367,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616975756
    },
    {
        "content": "<p>The logic should be very similar to how <code>use</code> statement groups are handled I believe</p>",
        "id": 232202416,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616975778
    },
    {
        "content": "<p>or to comment groups as well</p>",
        "id": 232202441,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616975823
    },
    {
        "content": "<p>Looks interesting! I'll have a go at it</p>",
        "id": 232243381,
        "sender_full_name": "Ayomide Bamidele",
        "timestamp": 1617011744
    },
    {
        "content": "<p>I've made a draft PR (<a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/8231\">https://github.com/rust-analyzer/rust-analyzer/pull/8231</a>) here that has tests, but I'm running into an issue with actually trying it out for myself. I tried to use the <code>Run Installed Extension</code>launch config, but I get an error <code>[matklad.rust-analyzer]: 'configuration.property' must be an object</code> that I'm not sure how to go about fixing</p>",
        "id": 232254764,
        "sender_full_name": "Ayomide Bamidele",
        "timestamp": 1617018468
    },
    {
        "content": "<p>You can safely ignore that one.</p>",
        "id": 232254845,
        "sender_full_name": "Laurențiu",
        "timestamp": 1617018497
    },
    {
        "content": "<p>Oh, then I also get a bootstrap error that stops the extension from activating, the error isn't very descriptive so not sure what to do about it EDIT: Nevermind! Got it working with the <code>Run Debug</code> instead. PR should be done now, that was fun!</p>",
        "id": 232255433,
        "sender_full_name": "Ayomide Bamidele",
        "timestamp": 1617018807
    },
    {
        "content": "<p>I have 1 question. Do rust analyzer index all used crates and its dependencies on startup?</p>",
        "id": 232298686,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1617036577
    },
    {
        "content": "<p>Yes</p>",
        "id": 232300660,
        "sender_full_name": "bjorn3",
        "timestamp": 1617037331
    },
    {
        "content": "<p>why do we index dependencies of used crates also? Can we directly use dependencies in our code without adding them to cargo.toml?</p>",
        "id": 232300899,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1617037411
    },
    {
        "content": "<p>Based on the basic search, I think we can't use dependencies of creates unless they are explicitly added in <code>cargo.toml</code>. So we should be able to ignore the dependencies of used creates. This will speed up the startup time. but more importantly will have benefit of reduced memory usage.<br>\nIs this possible?</p>",
        "id": 232303029,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1617038278
    },
    {
        "content": "<p>We can't ignore dependencies of used crates, as those crates need the dependencies to be analyzed.</p>",
        "id": 232317892,
        "sender_full_name": "bjorn3",
        "timestamp": 1617044279
    },
    {
        "content": "<p>yes, there are two main reasons we can't just ignore transitive dependencies: 1. we need to macroexpand the direct dependencies, which means resolving macros from transitive dependencies, which means macroexpanding them in turn, ...; 2. direct dependencies might reexport things from transitive dependencies</p>",
        "id": 232318211,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1617044413
    },
    {
        "content": "<p>why we do macro expand? to do highlight or more than that?</p>",
        "id": 232318400,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1617044492
    },
    {
        "content": "<p>Macros can expand to types and functions.</p>",
        "id": 232318450,
        "sender_full_name": "bjorn3",
        "timestamp": 1617044514
    },
    {
        "content": "<p><del>One question, in reference to this issue <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/6539#issuecomment-809577794\">https://github.com/rust-analyzer/rust-analyzer/issues/6539#issuecomment-809577794</a>, how do you build a private version of the manual so that you can preview changes to docs? I can see a preview in vscode but it doesn't have the website's css and all that stuff</del> found it, was right on the page haha</p>",
        "id": 232318992,
        "sender_full_name": "Ayomide Bamidele",
        "timestamp": 1617044749
    },
    {
        "content": "<p>Ok. got the idea now. so for dependencies of crates we are limiting processing for macro expansion and re-exported things.</p>",
        "id": 232319143,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1617044804
    },
    {
        "content": "<p>I'm not sure we do that</p>",
        "id": 232319906,
        "sender_full_name": "Laurențiu",
        "timestamp": 1617045137
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span> , can you please help me fix the macos-latest build failing?<br>\nThe reason is test_format_document_unchanged is failing, but on my machine all tests are passing.</p>",
        "id": 232493239,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1617136389
    },
    {
        "content": "<p>Whenever I get the permission to merge request myself, the macos-latest build fails <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 232493506,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1617136466
    },
    {
        "content": "<p>That seems to be just unlucky, it happens sometimes and shouldnt be caused by your changes</p>",
        "id": 232493684,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1617136545
    },
    {
        "content": "<p>Im unsure why it even fails sometimes in the first place though</p>",
        "id": 232493714,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1617136560
    },
    {
        "content": "<p>I am also curious about it, cause PR does not contain any platform dependent code. If it passes on 2 OS build then...</p>",
        "id": 232493944,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1617136678
    },
    {
        "content": "<p>Well bors merged it so there you have it <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 232494707,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1617136993
    },
    {
        "content": "<p>The spurious mac-os error is quite weird though as it errors on a non-empty directory, but the function that errors is <code>fs::remove_dir_all</code> which to my knowledge is supposed to clear the directory prior to deleting it?</p>",
        "id": 232494930,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1617137101
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 232495847,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1617137448
    },
    {
        "content": "<p><code>fs::remove_dir_all</code> will fail when a new file is created after it removed all containing files, but before removing the dir itself I think.</p>",
        "id": 232496005,
        "sender_full_name": "bjorn3",
        "timestamp": 1617137513
    },
    {
        "content": "<p>In PR I committed 1 new file, that I removed later as not needed. Can that cause the issue?</p>",
        "id": 232496395,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1617137670
    },
    {
        "content": "<p>No, your PR is not relevant for this issue, I have seen it in a few PRs already, sometimes on normal CI sometimes when bors was trying to merge</p>",
        "id": 232496622,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1617137764
    },
    {
        "content": "<p>What bjorn3 said seems the most likely to me, I wonder if thats why on windows we call the function serveral times <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 232496696,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1617137787
    },
    {
        "content": "<p>It seems weird though, judging from drop order <code>TestDir</code> gets dropped in the offending test last so this shouldn't be happening</p>",
        "id": 232496876,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1617137869
    },
    {
        "content": "<p>&lt;<a href=\"https://github.com/rust-analyzer/rust-analyzer/runs/2231268344#step:9:2846\">https://github.com/rust-analyzer/rust-analyzer/runs/2231268344#step:9:2846</a>&gt; the backtrace as reference</p>",
        "id": 232496965,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1617137892
    },
    {
        "content": "<p>Can I take this issue: <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8279\">https://github.com/rust-analyzer/rust-analyzer/issues/8279</a>?</p>",
        "id": 232933521,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1617387415
    },
    {
        "content": "<p>How should I categorize 54 operators?<br>\n<a href=\"https://doc.rust-lang.org/book/appendix-02-operators.html\">https://doc.rust-lang.org/book/appendix-02-operators.html</a></p>",
        "id": 232939085,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1617390435
    },
    {
        "content": "<p>I like those kinds of tables to be categorized by precedence and then by function</p>",
        "id": 232939326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617390586
    },
    {
        "content": "<p>they currently appear to be ascii sorted</p>",
        "id": 232939457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617390658
    },
    {
        "content": "<p>Please look into issue <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8279\">https://github.com/rust-analyzer/rust-analyzer/issues/8279</a></p>",
        "id": 232939691,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1617390785
    },
    {
        "content": "<p>I need to provide different syntax highlighting to different operators. as there are many operators we need to come up with some categories</p>",
        "id": 232939845,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1617390873
    },
    {
        "content": "<p>I don't think user wants 54 different tokens for operators.</p>",
        "id": 232939886,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1617390898
    },
    {
        "content": "<p>One reasonably useful categorization is to separate out the binary operators from other things like <code>,</code> for tuples, <code>:</code> for struct literals, <code>@</code> in patterns</p>",
        "id": 232940031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617390965
    },
    {
        "content": "<p>another would be assignments, logical operators, bitwise operators, arithmetic ops, ranges</p>",
        "id": 232940244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617391096
    },
    {
        "content": "<p>and there are a few that probably deserve their own class: <code>&amp;</code> for reference, <code>.</code> for field/method projection, <code>?</code> for try, <code>!</code> for macros</p>",
        "id": 232940347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617391173
    },
    {
        "content": "<p>it's also potentially useful to separate <code>*</code> in <code>*const</code>, <code>+</code> in <code>trait + trait</code>, and <code>-&gt;</code> in function types in a class separate from the normal binary op <code>+</code>  and <code>*</code> for pointers</p>",
        "id": 232940636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617391318
    },
    {
        "content": "<p>Should we have same tag for assign shorthand as original operator?<br>\nEx. + and += will have same tag as Arithmetic. | and |= have same tag as bitwise</p>",
        "id": 233009945,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1617460005
    },
    {
        "content": "<p>I'd say for the time being trat them the same yes, it might make sense to give them modifiers for assign shorthand but I wouldn't worry about that for now.</p>",
        "id": 233010986,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1617461272
    },
    {
        "content": "<p>ok</p>",
        "id": 233011147,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1617461407
    },
    {
        "content": "<p>I am implementing the semantic highlighting for operators.<br>\nFor ! operator we have two cases !&lt;bool&gt; this will be logical operator and !&lt;u32&gt; this will be bitwise operator. How can I get what type of variable is in PrefixExpr?</p>",
        "id": 233213990,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1617649092
    },
    {
        "content": "<p>Semantics has a function to get the type of an expression, so you can do something along the lines of <code>sema.type_of_expr(prefix_expr.expr())</code></p>",
        "id": 233214304,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1617649231
    },
    {
        "content": "<p>But rust doesn't really discern between logical not and bitwise not on a language level, so I'm not sure if it makes sense to try to differentiate them here? Especially given with user implementations, if I have some struct <code>Foo</code> and implement not on it, is that a logical or bitwise not then, you can't really know.</p>",
        "id": 233214580,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1617649343
    },
    {
        "content": "<p>And the docs also call <code>std::ops::Not</code> a logical not, so I would say it should always be marked as a logical not</p>\n<blockquote>\n<p>The unary logical negation operator !.</p>\n</blockquote>",
        "id": 233214649,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1617649367
    },
    {
        "content": "<p>that makes it easy. Thank you :)</p>",
        "id": 233214868,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1617649458
    },
    {
        "content": "<p>Created PR: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/8354\">https://github.com/rust-analyzer/rust-analyzer/pull/8354</a></p>",
        "id": 233697314,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1617903860
    },
    {
        "content": "<p>Can I take this issue?</p>",
        "id": 233697354,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1617903878
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8425\">https://github.com/rust-analyzer/rust-analyzer/issues/8425</a></p>",
        "id": 233697364,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1617903881
    },
    {
        "content": "<p>For that one you'd need to enable <code>onEnter</code> as described in the manual and check if it works for <code>//!</code> comments as well</p>",
        "id": 233697540,
        "sender_full_name": "Laurențiu",
        "timestamp": 1617903947
    },
    {
        "content": "<p>If it works, I'm inclined to close it</p>",
        "id": 233697568,
        "sender_full_name": "Laurențiu",
        "timestamp": 1617903955
    },
    {
        "content": "<p>checking it.</p>",
        "id": 233697951,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1617904061
    },
    {
        "content": "<p>surprisingly the the onEnter customization works for /// and //! but not for //. And in documentation the case for // is shown.</p>",
        "id": 233699227,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1617904458
    },
    {
        "content": "<p>I think that's intended, you need to end the previous line with a space (?) for it to work</p>",
        "id": 233699491,
        "sender_full_name": "Laurențiu",
        "timestamp": 1617904548
    },
    {
        "content": "<blockquote>\n<p><code>Enter</code> in the middle or after a trailing space in <code>//</code> inserts <code>//</code></p>\n</blockquote>",
        "id": 233699654,
        "sender_full_name": "Laurențiu",
        "timestamp": 1617904588
    },
    {
        "content": "<p>The enter in the middle is useful but space (?) is somewhat ugly to use. cause you need to press enter after (? this moves closing parenthesis to new line ). If you move to end of (?) the it does not add // in new line.</p>",
        "id": 233700643,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1617904888
    },
    {
        "content": "<p>Anyway all documented cases are working. Good to close the ticket.</p>",
        "id": 233700679,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1617904902
    },
    {
        "content": "<p>Sorry, it's not literally <code> (?)</code>, it's just a trailing space -- you can almost see it in the GIF.</p>",
        "id": 233700843,
        "sender_full_name": "Laurențiu",
        "timestamp": 1617904943
    },
    {
        "content": "<p>I wrote \"(?)\" because I wasn't sure about it</p>",
        "id": 233700880,
        "sender_full_name": "Laurențiu",
        "timestamp": 1617904956
    },
    {
        "content": "<p>why don't we add this feature in plugin itself. Many people including myself would not know this exists. This is very good feature to have.<br>\nEdit: grammar</p>",
        "id": 233701042,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1617905009
    },
    {
        "content": "<p>ohh I got that, it makes sense now. :)</p>",
        "id": 233701093,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1617905027
    },
    {
        "content": "<p>See <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/6037\">https://github.com/rust-analyzer/rust-analyzer/pull/6037</a></p>",
        "id": 233701194,
        "sender_full_name": "Laurențiu",
        "timestamp": 1617905055
    },
    {
        "content": "<p>Basically, it was enabled by default and a lot of people complained that it slowed their typing</p>",
        "id": 233701231,
        "sender_full_name": "Laurențiu",
        "timestamp": 1617905070
    },
    {
        "content": "<p>And if RA crashes or hangs, you can't press enter any more (Shift-Enter works IIRC, but most users probably don't know that)</p>",
        "id": 233701324,
        "sender_full_name": "Laurențiu",
        "timestamp": 1617905104
    },
    {
        "content": "<p>It's slow because the keypresses need to go through the extension host instead of being handled directly by the editor. And the extension host can be busy doing anything else (we might not be the only extension running).</p>",
        "id": 233701552,
        "sender_full_name": "Laurențiu",
        "timestamp": 1617905177
    },
    {
        "content": "<p>Maybe you want to take the rest of <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8024#issuecomment-813236524\">https://github.com/rust-analyzer/rust-analyzer/issues/8024#issuecomment-813236524</a>?</p>",
        "id": 233701717,
        "sender_full_name": "Laurențiu",
        "timestamp": 1617905245
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Good.20First.20Issue/near/233701324\">said</a>:</p>\n<blockquote>\n<p>And if RA crashes or hangs, you can't press enter any more (Shift-Enter works IIRC, but most users probably don't know that)</p>\n</blockquote>\n<p>Hmm. It looks like this feature can be added in VSCode extension in typescript. Which would solve many (all?) the problems.</p>",
        "id": 233702251,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1617905439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Good.20First.20Issue/near/233701717\">said</a>:</p>\n<blockquote>\n<p>Maybe you want to take the rest of <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8024#issuecomment-813236524\">https://github.com/rust-analyzer/rust-analyzer/issues/8024#issuecomment-813236524</a>?</p>\n</blockquote>\n<p>Great, I will pickup this work.</p>",
        "id": 233702359,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1617905490
    },
    {
        "content": "<p>It can be added in <code>package.json</code>, but matklad is against that because it's more or less a hack (if you're in a raw string or a macro you might not want the comment continuation, but you can't check for that with a regex)</p>",
        "id": 233702394,
        "sender_full_name": "Laurențiu",
        "timestamp": 1617905506
    },
    {
        "content": "<p>Is it possible to detect the semantic highlighting token the cursor is in?</p>",
        "id": 233705492,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1617906688
    },
    {
        "content": "<p>Programatically or for testing? Code has a command to show them.</p>",
        "id": 233705654,
        "sender_full_name": "Laurențiu",
        "timestamp": 1617906739
    },
    {
        "content": "<p>Yeah, in the vscode client api. Because in theory, we could have a good guess regex, then check the token type if the regex match occurs.</p>",
        "id": 233705821,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1617906793
    },
    {
        "content": "<p>Maybe, but you still need to run extension code for that</p>",
        "id": 233705965,
        "sender_full_name": "Laurențiu",
        "timestamp": 1617906843
    },
    {
        "content": "<p>In the documentation for on enter, should we add //! also?</p>",
        "id": 233706372,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1617906974
    },
    {
        "content": "<p>My point is thought that <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> said:</p>\n<blockquote>\n<p>I guess, in practice, maybe we want to cave in and use the simple regex handler here?</p>\n</blockquote>\n<p>in <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/6037#issuecomment-698976840\">https://github.com/rust-analyzer/rust-analyzer/pull/6037#issuecomment-698976840</a><br>\nWhich suggests that using the regex handler would in some way be better<br>\nSo my suggestion is to weed out the false positives from the 'regex handler', whatever that actually means</p>",
        "id": 233706373,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1617906974
    },
    {
        "content": "<p>The regex handler is the one configured in <code>package.json</code> and is run automatically by Code (outside of the extension host)</p>",
        "id": 233706509,
        "sender_full_name": "Laurențiu",
        "timestamp": 1617907033
    },
    {
        "content": "<p>So it's fast, but less elegant and might have some false positives</p>",
        "id": 233706590,
        "sender_full_name": "Laurențiu",
        "timestamp": 1617907069
    },
    {
        "content": "<p>Ah, so it handles the enhanced enter itself? We should ask upstream to allow enabling it on based on semantic token types instead then?</p>",
        "id": 233706696,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1617907096
    },
    {
        "content": "<p>That might be one way to do it, AIUI</p>",
        "id": 233706774,
        "sender_full_name": "Laurențiu",
        "timestamp": 1617907132
    },
    {
        "content": "<p>To be honest, it wouldn't be too bad, even without taking into account semantic tokens or anything. Even if it has some false positives in a macro, it's still better than not having it at all (or randomly slowing down typing).</p>",
        "id": 233706919,
        "sender_full_name": "Laurențiu",
        "timestamp": 1617907191
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Good.20First.20Issue/near/233706509\">said</a>:</p>\n<blockquote>\n<p>The regex handler is the one configured in <code>package.json</code> and is run automatically by Code (outside of the extension host)</p>\n</blockquote>\n<p>Can you link the documentation of this please?</p>",
        "id": 233707957,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1617907586
    },
    {
        "content": "<p>Right, I've found this <a href=\"https://github.com/microsoft/vscode/blob/94c9ea46838a9a619aeafb7e8afd1170c967bb55/src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts#L701\">https://github.com/microsoft/vscode/blob/94c9ea46838a9a619aeafb7e8afd1170c967bb55/src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts#L701</a></p>",
        "id": 233708447,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1617907794
    },
    {
        "content": "<p>Created PR for updating on enter documentation with added test case <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/8429\">https://github.com/rust-analyzer/rust-analyzer/pull/8429</a></p>",
        "id": 233710692,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1617908681
    },
    {
        "content": "<p>Created PR for highlighting trait associated type with modifier. <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/8431\">https://github.com/rust-analyzer/rust-analyzer/pull/8431</a></p>",
        "id": 233716039,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1617910865
    },
    {
        "content": "<p>Good morning everyone...<br>\nCan I take this issue: <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8734\">https://github.com/rust-analyzer/rust-analyzer/issues/8734</a></p>",
        "id": 237682777,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1620316432
    },
    {
        "content": "<p>All yours</p>",
        "id": 237683694,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1620316762
    },
    {
        "content": "<p>Great :). I was sick so took break from project.</p>",
        "id": 237684253,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1620316919
    },
    {
        "content": "<p>Has anyone faced error: internal compiler error: unexpected panic recently with rustc 1.52.0?</p>",
        "id": 237957724,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1620482071
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/Pe7oc-LUGixG5c2OepkmLIZF/compiler_error.txt\">compiler_error.txt</a></p>",
        "id": 237957968,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1620482294
    },
    {
        "content": "<p>causing compiler panic with simple change<br>\n<a href=\"/user_uploads/4715/cTugyVA4_QAnaFwJxAPdorlT/change.diff\">change.diff</a></p>",
        "id": 237958674,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1620482885
    },
    {
        "content": "<p>that's a known issue ye <a href=\"https://github.com/rust-lang/rust/issues/85003\">https://github.com/rust-lang/rust/issues/85003</a></p>",
        "id": 237958866,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1620483057
    },
    {
        "content": "<p>This is out of curiosity, regarding SmolStr implementation.<br>\nThe new_inline function is written as</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new_inline</span><span class=\"p\">(</span><span class=\"n\">text</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">SmolStr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">INLINE_CAP</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">()[</span><span class=\"n\">i</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">SmolStr</span><span class=\"p\">(</span><span class=\"n\">Repr</span>::<span class=\"n\">Inline</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">len</span>: <span class=\"nc\">text</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">buf</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>here why the text.as_bytes() function is in the while loop and not outside the loop. Does making it inline optimizes this point.<br>\nAs the as_bytes() on str converts complete str to bytes in 1 go.</p>",
        "id": 237976861,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1620499986
    },
    {
        "content": "<p><code>as_bytes()</code> doesn't do much, so I'm guessing it would make no difference: <a href=\"https://doc.rust-lang.org/src/core/str/mod.rs.html#224\">https://doc.rust-lang.org/src/core/str/mod.rs.html#224</a></p>",
        "id": 237977070,
        "sender_full_name": "Laurențiu",
        "timestamp": 1620500233
    },
    {
        "content": "<p>But yeah, that could maybe look cleaner</p>",
        "id": 237977080,
        "sender_full_name": "Laurențiu",
        "timestamp": 1620500252
    },
    {
        "content": "<p>mem::transmute is single memcpy under the hood. So I think it does not matter for single string (regarding of its length.) But I think for large number of strings calling memcpy 1 time or n times (max 22) will make difference.</p>",
        "id": 237977769,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1620500915
    },
    {
        "content": "<p>it is useful to add PR for this?</p>",
        "id": 237977799,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1620500940
    },
    {
        "content": "<p>I'd expect it to be trivially optimised out - you could check the assembly to see though</p>",
        "id": 238016483,
        "sender_full_name": "Daniel Mcnab",
        "timestamp": 1620545319
    },
    {
        "content": "<p>That transmute only transmutes a reference (16 bytes), not the whole string</p>",
        "id": 238017763,
        "sender_full_name": "Laurențiu",
        "timestamp": 1620546886
    },
    {
        "content": "<p>str.as_bytes() converts the whole string. And we are using this method.</p>",
        "id": 238030857,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1620561266
    },
    {
        "content": "<p>there's no conversion necessary, it's just casting a pointer</p>",
        "id": 238031793,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1620562247
    },
    {
        "content": "<p>ohh, that makes it clear.</p>",
        "id": 238031826,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1620562306
    },
    {
        "content": "<p>Hi, I am working on issue: <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8734\">https://github.com/rust-analyzer/rust-analyzer/issues/8734</a><br>\nCurrently the <code>CrateDisplayName</code> provides the name. It has crate_name and canonical_name as fields.<br>\nSo do I put custom lib name in crate_name or canonical_name?</p>",
        "id": 238039916,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1620570983
    },
    {
        "content": "<p>Hi all. Unfortunately my laptop has stopped working. It was old so no regrets there. but I won't be able to get new one for atleast 3-4 months due to covid 19 and other conditions. So please some one take the issue 8734 as I won't be able to contribute.</p>",
        "id": 238916345,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1621103056
    },
    {
        "content": "<p>For compiling RA with lto enabled, is 16gb ram enough or it will require 32gb ram?</p>",
        "id": 238916391,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1621103123
    },
    {
        "content": "<p>any other suggestion for new laptop??</p>",
        "id": 238916464,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1621103198
    },
    {
        "content": "<p>16 GB should be enough. I tried to test now, but the RAM usage seemed pretty low for some reason</p>",
        "id": 238916592,
        "sender_full_name": "Laurențiu",
        "timestamp": 1621103307
    },
    {
        "content": "<p>Thank you</p>",
        "id": 238916616,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1621103370
    },
    {
        "content": "<p>Tuxedo Pulse 15 was a nice laptop last time I looked, but I don't know if they've refreshed it or added a new line with newer CPUs. Also sold as TongFang or Mechrevo, see a review at <a href=\"https://www.notion.so/Mechrevo-Code-01-TongFang-PF5NU1G-Information-8009025fdefc40118ab0ea973e7e0988\">https://www.notion.so/Mechrevo-Code-01-TongFang-PF5NU1G-Information-8009025fdefc40118ab0ea973e7e0988</a></p>",
        "id": 238916718,
        "sender_full_name": "Laurențiu",
        "timestamp": 1621103449
    },
    {
        "content": "<p>I'll try tomorrow to measure the peak RSS more accurately (with cgroups, maybe?)</p>",
        "id": 238916830,
        "sender_full_name": "Laurențiu",
        "timestamp": 1621103532
    },
    {
        "content": "<p>I will check if this is available in my country (India). Due to recent conditions all delivery and shipments are stopped.</p>",
        "id": 238917046,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1621103683
    },
    {
        "content": "<p>Yeah, I imagine availability will be the main criteria.</p>",
        "id": 238917077,
        "sender_full_name": "Laurențiu",
        "timestamp": 1621103735
    },
    {
        "content": "<p>Stay safe, by the way. I hope things get better soon there.</p>",
        "id": 238917172,
        "sender_full_name": "Laurențiu",
        "timestamp": 1621103842
    },
    {
        "content": "<p>I hope so</p>",
        "id": 238917715,
        "sender_full_name": "Chetan Khilosiya",
        "timestamp": 1621104428
    }
]