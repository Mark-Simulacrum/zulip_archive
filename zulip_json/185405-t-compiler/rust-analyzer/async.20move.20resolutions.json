[
    {
        "content": "<p>I just filed <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/5676\">https://github.com/rust-analyzer/rust-analyzer/issues/5676</a> and I'm curious where I could start attempting to fix that issue. Is this internal to RA or does it come from one of the libraries like chalk?</p>",
        "id": 206144279,
        "sender_full_name": "Paul Faria",
        "timestamp": 1596722352
    },
    {
        "content": "<p>There are some mentoring instructions in <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/4018#issue-602093106\">https://github.com/rust-analyzer/rust-analyzer/issues/4018#issue-602093106</a>. But in the meanwhile it seems we've got an <code>Expr::Unsafe</code>, so maybe it should be <code>Expr::Async</code> for symmetry</p>",
        "id": 206144758,
        "sender_full_name": "Laurențiu",
        "timestamp": 1596722536
    },
    {
        "content": "<p>it's a bit of an open design question how to best model async blocks in the type system in rust-analyzer right now (as you can read in the issue I linked); we could use opaque types, but it would be a bit of a misuse; more proper would be generators, but they don't exist yet in Chalk's type library</p>",
        "id": 206144761,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1596722538
    },
    {
        "content": "<p>Is <code>unsafe async {}</code> a thing?</p>",
        "id": 206144773,
        "sender_full_name": "Laurențiu",
        "timestamp": 1596722543
    },
    {
        "content": "<p>Oh ok, should I close the one I filed as a duplicate then?</p>",
        "id": 206145402,
        "sender_full_name": "Paul Faria",
        "timestamp": 1596722826
    },
    {
        "content": "<p>I already did</p>",
        "id": 206145481,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1596722857
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 206145533,
        "sender_full_name": "Paul Faria",
        "timestamp": 1596722880
    },
    {
        "content": "<p>I might try to start tackling this after work today, or is there someone already working on it?</p>",
        "id": 206145727,
        "sender_full_name": "Paul Faria",
        "timestamp": 1596722954
    },
    {
        "content": "<p>Could this be implemented with opaque types to improve resolution, and we file an issue to move to generators once it's supported by chalk?</p>",
        "id": 206145866,
        "sender_full_name": "Paul Faria",
        "timestamp": 1596723007
    },
    {
        "content": "<p>it could, but I'd rather improve Chalk than work around it</p>",
        "id": 206146427,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1596723252
    },
    {
        "content": "<p>I might be getting in over my head here, but where is the discussion room for chalk? I'll see if there any way I can help</p>",
        "id": 206147723,
        "sender_full_name": "Paul Faria",
        "timestamp": 1596723842
    },
    {
        "content": "<p><a class=\"stream\" data-stream-id=\"144729\" href=\"/#narrow/stream/144729-wg-traits\">#wg-traits</a> . I think the chalk issue is <a href=\"https://github.com/rust-lang/chalk/issues/504\">rust-lang/chalk#504</a></p>",
        "id": 206148002,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1596723962
    },
    {
        "content": "<p>it's probably actually not a complicated thing to add, since we don't need any built-in behavior for it, just the type itself, I think</p>",
        "id": 206148102,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1596724001
    },
    {
        "content": "<p>Ok, I'll ask there after work. Thanks!</p>",
        "id": 206149759,
        "sender_full_name": "Paul Faria",
        "timestamp": 1596724763
    },
    {
        "content": "<p>Looks like there's still someone working on it. I'll move on to something else for now.</p>",
        "id": 206213264,
        "sender_full_name": "Paul Faria",
        "timestamp": 1596760157
    },
    {
        "content": "<p>I think you can still work on the parser and IR support for async blocks</p>",
        "id": 206226244,
        "sender_full_name": "Laurențiu",
        "timestamp": 1596779667
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116114\">Paul Faria</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/async.20move.20resolutions/near/206213264\">said</a>:</p>\n<blockquote>\n<p>Looks like there's still someone working on it. I'll move on to something else for now.</p>\n</blockquote>\n<p>If you mean <a href=\"https://github.com/rust-lang-nursery/chalk/issues/504\">chalk#504</a>, that was assigned 2 months ago and I don't think there has been progress lately, so you could drop a comment asking if it's still being worked on</p>",
        "id": 206229741,
        "sender_full_name": "detrumi",
        "timestamp": 1596784540
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> I had reached out to the person it was assigned to, and he said he still has some work left and was planning to put up a draft PR with his work so far.</p>",
        "id": 206251563,
        "sender_full_name": "Paul Faria",
        "timestamp": 1596803972
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> I thought async was already tracked in the parser, similarly to how unsafe blocks are handled. What do you mean regarding IR support?</p>",
        "id": 206251694,
        "sender_full_name": "Paul Faria",
        "timestamp": 1596804079
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir_def/src/expr.rs#L52-L55\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir_def/src/expr.rs#L52-L55</a></p>",
        "id": 206251793,
        "sender_full_name": "Laurențiu",
        "timestamp": 1596804123
    },
    {
        "content": "<p>I was saying there's an <code>Expr::Unsafe</code> variant for <code>unsafe</code> blocks, but no variant for <code>async</code> ones and I wasn't sure if it should be a variant or an attribute of the block</p>",
        "id": 206251815,
        "sender_full_name": "Laurențiu",
        "timestamp": 1596804136
    },
    {
        "content": "<p>Hence my <code>unsafe async {}</code> question</p>",
        "id": 206251873,
        "sender_full_name": "Laurențiu",
        "timestamp": 1596804191
    },
    {
        "content": "<p>But yes, the parser accepts it IIRC</p>",
        "id": 206252540,
        "sender_full_name": "Laurențiu",
        "timestamp": 1596804602
    }
]