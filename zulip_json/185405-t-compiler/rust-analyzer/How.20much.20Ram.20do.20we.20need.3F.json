[
    {
        "content": "<p>I am again thinking that our ram consumption seems unreasonable</p>",
        "id": 235324614,
        "sender_full_name": "matklad",
        "timestamp": 1618916826
    },
    {
        "content": "<p>In the rust-analyzer directory, I did <code>rm ./target -rf &amp;&amp; cargo check &amp;&amp; cargo vendor &amp;&amp; cat vendor/**.rs &gt; all.rs</code></p>",
        "id": 235324703,
        "sender_full_name": "matklad",
        "timestamp": 1618916876
    },
    {
        "content": "<p>So, the size of all our vendored deps is 37 megs</p>",
        "id": 235324780,
        "sender_full_name": "matklad",
        "timestamp": 1618916900
    },
    {
        "content": "<p>the size of the target directory after check is 500 megs</p>",
        "id": 235324842,
        "sender_full_name": "matklad",
        "timestamp": 1618916929
    },
    {
        "content": "<p>I think the size of the target should represent the <em>upper</em> bound on rust-analyzer's ram consumption -- <code>cargo check</code> processes everything, while we ignore function bodies (which should be the majority of code).</p>",
        "id": 235325007,
        "sender_full_name": "matklad",
        "timestamp": 1618917013
    },
    {
        "content": "<p>Yet, rust-analyzer occupies about 1GB of ram</p>",
        "id": 235325059,
        "sender_full_name": "matklad",
        "timestamp": 1618917031
    },
    {
        "content": "<p>The size of <code>~/.cache/JetBrains</code> after cleaning and working with rust-analyzer a bit is 150 megs</p>",
        "id": 235326973,
        "sender_full_name": "matklad",
        "timestamp": 1618918137
    },
    {
        "content": "<p>So, either all those on-disk stores do compression, and it is 10x efficient (which is plausible) or we are using unreasonable amount of RAM for something?</p>",
        "id": 235327217,
        "sender_full_name": "matklad",
        "timestamp": 1618918277
    },
    {
        "content": "<p>Finally stopped whining about comparing with CLion and actually compared with CLion: <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/7330\">https://github.com/rust-analyzer/rust-analyzer/issues/7330</a></p>",
        "id": 235329484,
        "sender_full_name": "matklad",
        "timestamp": 1618919412
    },
    {
        "content": "<p>interesting result! looks like there's still more data to intern/deduplicate then?</p>",
        "id": 235330391,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618919875
    },
    {
        "content": "<p>ah, we still duplicate all the file contents, right?</p>",
        "id": 235330450,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618919885
    },
    {
        "content": "<p>that should cost us around 50 MB</p>",
        "id": 235330480,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618919897
    },
    {
        "content": "<p>We could claw back about 20 MB with <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/869#issuecomment-695171218\">https://github.com/rust-analyzer/rust-analyzer/issues/869#issuecomment-695171218</a></p>",
        "id": 235330645,
        "sender_full_name": "Laurențiu",
        "timestamp": 1618919995
    },
    {
        "content": "<p>Another interesting bit: clion's adress space compresses much worse than ours</p>",
        "id": 235331000,
        "sender_full_name": "matklad",
        "timestamp": 1618920127
    },
    {
        "content": "<p>ideally, we wouldn't keep library code in memory at all, I guess? just a bit complicated to do with salsa</p>",
        "id": 235331068,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1618920164
    },
    {
        "content": "<p>while we're at it, we could save the 'HIR' for libraries on disk and load it back, which would also solve the startup time problem and be useful for WASM/playground <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 235331286,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1618920260
    },
    {
        "content": "<p>Uhu</p>",
        "id": 235331396,
        "sender_full_name": "matklad",
        "timestamp": 1618920326
    },
    {
        "content": "<p>And, do do that, we probably want to make sure that hir data is a flat array, which we can jusm memmap</p>",
        "id": 235331447,
        "sender_full_name": "matklad",
        "timestamp": 1618920355
    },
    {
        "content": "<p>and that by itself might bring some wins</p>",
        "id": 235331509,
        "sender_full_name": "matklad",
        "timestamp": 1618920365
    },
    {
        "content": "<p>Or dump it in SQLite :D</p>",
        "id": 235331532,
        "sender_full_name": "Laurențiu",
        "timestamp": 1618920377
    },
    {
        "content": "<p>somewhat relatedly, I've also wondered whether we could load our HIR from rustdoc's json <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 235331654,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1618920449
    },
    {
        "content": "<p>I mean, making a normalized relation model out of hir is probably going to far, but using SQLite as a key-value store is probably on of the best way to do on-disk storage</p>",
        "id": 235331692,
        "sender_full_name": "matklad",
        "timestamp": 1618920480
    },
    {
        "content": "<p>(unrelated, <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8599\">https://github.com/rust-analyzer/rust-analyzer/issues/8599</a> might be a nice benchmark for memory and loading times)</p>",
        "id": 235332085,
        "sender_full_name": "Laurențiu",
        "timestamp": 1618920641
    },
    {
        "content": "<p>I'm not sure we need something like sqlite when we just basically want to mmap a big datastructure and dump it fully back sometimes</p>",
        "id": 235332367,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1618920771
    },
    {
        "content": "<p>something like <a href=\"https://crates.io/crates/rkyv\">https://crates.io/crates/rkyv</a> might be helpful? (somewhat new and experimental though)</p>",
        "id": 235332665,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1618920915
    },
    {
        "content": "<p>It probably doesn't matter that much, but SQLite is a pretty safe choice. Something like <code>sled</code> might be nicer when it matures, but you can't go wrong with SQLite</p>",
        "id": 235333077,
        "sender_full_name": "Laurențiu",
        "timestamp": 1618921091
    },
    {
        "content": "<p>I would usually agree, but I think we need almost none of the features of sqlite (like indexing, or doing any kind of update except writing the full database)</p>",
        "id": 235333431,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1618921260
    },
    {
        "content": "<p>it would also mean having a mandatory dependency on C code, which we currently try to avoid</p>",
        "id": 235333529,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618921300
    },
    {
        "content": "<p>Yeah,  but at least it's a way forward if we want/can move more stuff to disk</p>",
        "id": 235333557,
        "sender_full_name": "Laurențiu",
        "timestamp": 1618921317
    },
    {
        "content": "<p>I kind of want to do a prototype of this now <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> maybe I'll find some time this week</p>",
        "id": 235333701,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1618921377
    },
    {
        "content": "<p>Like what if <code>salsa</code> could use an on-disk store? (It would probably be too slow for us)</p>",
        "id": 235333777,
        "sender_full_name": "Laurențiu",
        "timestamp": 1618921422
    },
    {
        "content": "<p>this probably does need some salsa integration in any case, right?</p>",
        "id": 235334144,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618921578
    },
    {
        "content": "<p>we could also just use this <a href=\"https://github.com/michaelwoerister/odht\">https://github.com/michaelwoerister/odht</a></p>",
        "id": 235334184,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618921592
    },
    {
        "content": "<p>Yeah, not gonna happen too soon</p>",
        "id": 235334207,
        "sender_full_name": "Laurențiu",
        "timestamp": 1618921599
    },
    {
        "content": "<p>not necessarily, I think. I think the general \"salsa persistence\" problem is quite a bit harder</p>",
        "id": 235334209,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1618921602
    },
    {
        "content": "<p>it was written for use in rustc to store the incremental compilation cache</p>",
        "id": 235334219,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618921605
    },
    {
        "content": "<p>this could IMO be done by having some <code>if let Some(persistent_store) = db.persistent_store_for_crate(crate) { return persistent_store.get_data(id) }</code> in a bunch of queries</p>",
        "id": 235334461,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1618921702
    },
    {
        "content": "<p>with some hackery to make the <code>persistent_store_for_crate</code> query only be invalidated if the store file changes (or never, for a start)</p>",
        "id": 235334614,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1618921782
    },
    {
        "content": "<p>that aside, there still seems to be significant duplication that we can address without persistence</p>",
        "id": 235335216,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618922005
    },
    {
        "content": "<p>unfortunately all the tooling for this sucks (case in point: you literally had to write the address space to disk and compress the file to get this information), so I'm not really sure how we're supposed to figure out <em>what</em> gets duplicated without auditing the entire codebase</p>",
        "id": 235335376,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618922072
    },
    {
        "content": "<p>yeah... makes me wonder why there isn't better tooling to analyze memory dumps. With debug info, that should be possible in principle, right?</p>",
        "id": 235336488,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1618922568
    },
    {
        "content": "<p>Not unless you record a stack trace on allocation (like DHAT)</p>",
        "id": 235336601,
        "sender_full_name": "Laurențiu",
        "timestamp": 1618922615
    },
    {
        "content": "<p>DHAT even has all the info to help with this, it just doesn't, or it does but its UI is too convoluted</p>",
        "id": 235336621,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618922623
    },
    {
        "content": "<p>DHAT computes stuff like \"on average only N bytes of these M byte allocations get used\"</p>",
        "id": 235336727,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618922655
    },
    {
        "content": "<p>but not \"hey this string is kept in memory 7 times\" apparently</p>",
        "id": 235336772,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618922679
    },
    {
        "content": "<blockquote>\n<p>this could IMO be done by having some if let Some(persistent_store) = db.persistent_store_for_crate(crate) { return persistent_store.get_data(id) } in a bunch of queries</p>\n</blockquote>\n<p>I'd probably do this a bit differntly</p>",
        "id": 235337818,
        "sender_full_name": "matklad",
        "timestamp": 1618923068
    },
    {
        "content": "<p>I think we can just change values to cache stuff on disk. Like, an Item tree can contain a <code>PathBuf</code> and load its data from disk on the first access (and evict data to disc under memory pressuer)</p>",
        "id": 235338061,
        "sender_full_name": "matklad",
        "timestamp": 1618923160
    },
    {
        "content": "<p>That is, that'll allow us  to transparently unload some ram do disk. This won't help us with avoding computation during initial load.</p>",
        "id": 235338205,
        "sender_full_name": "matklad",
        "timestamp": 1618923223
    },
    {
        "content": "<p>we don't really have a good way to compute memory pressure without a custom allocator</p>",
        "id": 235338697,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618923434
    },
    {
        "content": "<p>maybe this can be hooked into salsa GC if the API for that is extended</p>",
        "id": 235338739,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618923456
    },
    {
        "content": "<p>so instead of outright deleting a value it just hands out a reference</p>",
        "id": 235338779,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618923482
    }
]