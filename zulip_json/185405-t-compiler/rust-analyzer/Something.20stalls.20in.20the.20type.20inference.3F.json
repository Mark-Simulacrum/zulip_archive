[
    {
        "content": "<p>I am seeing the following in the profilere output when typing at the top level in <a href=\"http://apply_change.rs\">apply_change.rs</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code> 2183ms - handle_semantic_tokens_full_delta\n     2183ms - highlight\n         2090ms - infer:wait @ per_query_memory_usage\n             2090ms - infer_query\n                    2ms - crate_def_map:wait (17088 calls)\n                    0ms - generic_params_query (1 calls)\n                 2088ms - ???\n</code></pre></div>",
        "id": 232315866,
        "sender_full_name": "matklad",
        "timestamp": 1617043434
    },
    {
        "content": "<p>Anyone has ideas about what that 2 semonds of ??? might be doing?</p>",
        "id": 232315976,
        "sender_full_name": "matklad",
        "timestamp": 1617043459
    },
    {
        "content": "<p>What's <code>per_query_memory_usage</code> doing there?</p>",
        "id": 232316236,
        "sender_full_name": "Laurențiu",
        "timestamp": 1617043558
    },
    {
        "content": "<p>hm, I suspect that might actually be the ansewer? Thanks for reading the paster text to me, <span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu</span> !</p>",
        "id": 232316501,
        "sender_full_name": "matklad",
        "timestamp": 1617043651
    },
    {
        "content": "<p>I suspect it just expands the macros</p>",
        "id": 232316537,
        "sender_full_name": "matklad",
        "timestamp": 1617043662
    },
    {
        "content": "<p>Wait, no, this is infer, it happens after expand</p>",
        "id": 232318687,
        "sender_full_name": "matklad",
        "timestamp": 1617044606
    },
    {
        "content": "<p>Did you run the memory usage command?</p>",
        "id": 232319757,
        "sender_full_name": "Laurențiu",
        "timestamp": 1617045062
    },
    {
        "content": "<p>No, I am typing in the file that implements this command</p>",
        "id": 232320701,
        "sender_full_name": "matklad",
        "timestamp": 1617045501
    },
    {
        "content": "<p>Will come back to this tomorrow, unless someone from other timezone beats me to it. This is as far as I've gone:</p>\n<p><a href=\"/user_uploads/4715/mdjWPSQGFh0FLBDpiDUukgcr/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/mdjWPSQGFh0FLBDpiDUukgcr/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/mdjWPSQGFh0FLBDpiDUukgcr/image.png\"></a></div>",
        "id": 232321317,
        "sender_full_name": "matklad",
        "timestamp": 1617045768
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Something.20stalls.20in.20the.20type.20inference.3F/near/232320701\">said</a>:</p>\n<blockquote>\n<p>No, I am typing in the file that implements this command</p>\n</blockquote>\n<p>Oh, right</p>",
        "id": 232321701,
        "sender_full_name": "Laurențiu",
        "timestamp": 1617045959
    },
    {
        "content": "<p>I've definitely seen this function take a while before, yeah</p>",
        "id": 232326249,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617047790
    },
    {
        "content": "<p>The big issue is not the time per se, but the fact that the works seems uncancellable</p>",
        "id": 232327942,
        "sender_full_name": "matklad",
        "timestamp": 1617048486
    },
    {
        "content": "<p>On the positeve side, thacking this made me realize that our existing profile calls can be used to decect missing cancellation: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/8244\">https://github.com/rust-analyzer/rust-analyzer/pull/8244</a></p>",
        "id": 232328314,
        "sender_full_name": "matklad",
        "timestamp": 1617048628
    },
    {
        "content": "<p>yeah, saw that PR, really nice trick!</p>",
        "id": 232329210,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617049074
    },
    {
        "content": "<p>stand-alone repro: <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8263\">https://github.com/rust-analyzer/rust-analyzer/issues/8263</a></p>",
        "id": 232434365,
        "sender_full_name": "matklad",
        "timestamp": 1617114486
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> do you want to look into that?</p>",
        "id": 232435286,
        "sender_full_name": "matklad",
        "timestamp": 1617114773
    },
    {
        "content": "<p>hmm. that's one of those functions that will be mostly replaced with a Chalk equivalent</p>",
        "id": 232444093,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1617117596
    },
    {
        "content": "<p>so I wouldn't want to put much time into that right now</p>",
        "id": 232444359,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1617117695
    },
    {
        "content": "<p>Makes sense. I looked into this a bit more, looks like the loop in </p>\n<div class=\"codehilite\"><pre><span></span><code>    fn resolve_obligations_as_possible(&amp;mut self) {\n        let obligations = mem::replace(&amp;mut self.obligations, Vec::new());\n        for obligation in obligations {\n</code></pre></div>\n<p>is queadratic for this particular case</p>",
        "id": 232444638,
        "sender_full_name": "matklad",
        "timestamp": 1617117796
    },
    {
        "content": "<p>We accumulate 500 obligations or so</p>",
        "id": 232444695,
        "sender_full_name": "matklad",
        "timestamp": 1617117820
    },
    {
        "content": "<p>ok, that's not so great and will not be impacted by the Chalk move</p>",
        "id": 232444730,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1617117839
    },
    {
        "content": "<p>rustc solves this with the obligation forest data structure</p>",
        "id": 232444824,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617117868
    },
    {
        "content": "<p>I guess it's a few obligations for each of those macro calls? the problem might be that we don't manage to solve any of them</p>",
        "id": 232444862,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1617117882
    },
    {
        "content": "<p>but also, if nothing changes we should be able to reuse a cached solution, if we're not then something may be wrong with that as well</p>",
        "id": 232445067,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1617117965
    },
    {
        "content": "<p>Another bit: a lot of paths in that function are unresolved.</p>",
        "id": 232445240,
        "sender_full_name": "matklad",
        "timestamp": 1617118037
    },
    {
        "content": "<p>So we might hit some bad case around unknown type?</p>",
        "id": 232445266,
        "sender_full_name": "matklad",
        "timestamp": 1617118049
    },
    {
        "content": "<p>yes, probably</p>",
        "id": 232452451,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1617120631
    },
    {
        "content": "<p>Also, the thing reproduces if run \"expand macros recursively\" and manually paste the output (removing noisy format! calls mnaually), so this is unrelated to macros</p>",
        "id": 232463526,
        "sender_full_name": "matklad",
        "timestamp": 1617124770
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust-analyzer/issues/8285\">rust-analyzer#8285</a></p>",
        "id": 232814902,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1617306717
    },
    {
        "content": "<p>but yeah that's a lot of obligations that we never manage to solve</p>",
        "id": 232815007,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1617306756
    }
]