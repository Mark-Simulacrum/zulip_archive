[
    {
        "content": "<p>Reading <a href=\"https://pingcap.com/blog/rust-compilation-model-calamity/\" target=\"_blank\" title=\"https://pingcap.com/blog/rust-compilation-model-calamity/\">https://pingcap.com/blog/rust-compilation-model-calamity/</a> made me realised that a bunch of compile-time problems in rust-analyzer can be caused by extensive use of \"unit-tests\", which require building the code twice. </p>\n<p>I wonder if we should maybe move all our unit-tests to integration tests, and maybe even make them more data-driven in the process?</p>",
        "id": 187004346,
        "sender_full_name": "matklad",
        "timestamp": 1580402022
    },
    {
        "content": "<p>There's also one thing which I don't know how to solve nicely:</p>\n<p>Currently, each test is a separate <code>#[test]</code> function, and that is done primarily for the benefit of the debugging. I can imagine another setup, where most of the tests are just data-files, and the single <code>#[test]</code> just loops through them all. This is how our parser tests are implmented. </p>\n<p>The problem would be, naturally, that you won't be able to execute a single test easily. But maybe that can be worked-around the same way as in the parser? Having a single smoke test into which you can paste specific test data?</p>\n<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/5f0b17b52dafa7b1eb1ba8934ce44857413410a7/crates/ra_syntax/src/tests.rs#L18-L28\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/5f0b17b52dafa7b1eb1ba8934ce44857413410a7/crates/ra_syntax/src/tests.rs#L18-L28\">https://github.com/rust-analyzer/rust-analyzer/blob/5f0b17b52dafa7b1eb1ba8934ce44857413410a7/crates/ra_syntax/src/tests.rs#L18-L28</a></p>",
        "id": 187004674,
        "sender_full_name": "matklad",
        "timestamp": 1580402206
    },
    {
        "content": "<p>In addition, FYI: currently if one of the data-driven tests fails, none of the others are run</p>",
        "id": 187005656,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580402852
    },
    {
        "content": "<p>As for the smoke test, I don't like this idea initially. Copy-pasting would be very tedious</p>",
        "id": 187005870,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580402974
    },
    {
        "content": "<p>Even if you want to follow it, i'd propose to extract test data for the test from source code so that we wouldn't have to recompile the project to change the smoke test.</p>",
        "id": 187006013,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580403048
    },
    {
        "content": "<p>If smoke test is in a separate crate, no recompilation would be necessary anyway</p>",
        "id": 187006083,
        "sender_full_name": "matklad",
        "timestamp": 1580403098
    },
    {
        "content": "<p>Sorry, maybe I used the wrong wording, but that smoke test you provided the link to contains the test data (i.e. the source code to parse) embedded in the test itself.<br>\n<a href=\"/user_uploads/4715/uXuJoo3ncljmNoDexCOCK6nZ/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/uXuJoo3ncljmNoDexCOCK6nZ/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/uXuJoo3ncljmNoDexCOCK6nZ/pasted_image.png\"></a></div><p>If you want to change the smoke test you have to literally change that raw string literal. I'd propose to create a dedicated <code>smoke-test.rs</code> file in <code>test-data</code> directory for that.</p>",
        "id": 187006342,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580403254
    },
    {
        "content": "<p>It's just an enhancement that may be beside the point anyway...</p>",
        "id": 187006455,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580403345
    },
    {
        "content": "<p>I wish we ran data-driven test in separate processes so that all of them would run independently</p>",
        "id": 187006572,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580403413
    },
    {
        "content": "<p>the code is recompiled because the test is a unit tests which is a part of the whole crate. </p>\n<p>if the test was in the separate crate, only the test crate itself would need to be reompiled</p>",
        "id": 187006579,
        "sender_full_name": "matklad",
        "timestamp": 1580403417
    },
    {
        "content": "<p>Yes, the recompilation could be avoided at all</p>",
        "id": 187006640,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580403478
    },
    {
        "content": "<p>Though you could argue that it takes very little time, but, to me, that is perceivable delay</p>",
        "id": 187006732,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580403518
    },
    {
        "content": "<p>To clarify, we don't have this problem at all now, since we never change that smoke-test (it least I don't do that). We are talking about the proposition to use such smoke-tests to extract the data of the tests that failed and need to be debugged.</p>",
        "id": 187006978,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580403645
    },
    {
        "content": "<p>My proposal is to change that <code>fn parse_smoke_test()</code> function body to the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[test}</span>\n<span class=\"cp\">fn parse_smoke_test() {</span>\n<span class=\"cp\">    let code = read_text(</span><span class=\"s\">&quot;test_data/smoke_test.rs&quot;</span><span class=\"cp\">); // We change only `smoke_test.rs` and never ever do any kind of recompilation, the test data is loaded at runtime</span>\n<span class=\"cp\">    let expected = read_text(</span><span class=\"s\">&quot;test_data/smoke_test.txt&quot;</span><span class=\"cp\">);</span>\n<span class=\"cp\">    assert_eq!(parse(code).to_string(), expected);</span>\n<span class=\"cp\">}</span>\n</pre></div>",
        "id": 187007339,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580403854
    },
    {
        "content": "<p>Anyway your main concern was about migrating most of our unit tests to data-driven tests approach...</p>",
        "id": 187007549,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580403983
    },
    {
        "content": "<p>I totally agree on that, we would just need to extract all inline source code strings into files on the filesystem and run a single test function that loads data from <code>test_data</code> directory and matches <code>actual</code> to <code>expected</code></p>",
        "id": 187007787,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580404113
    },
    {
        "content": "<p>I guess we just violently agreeing that, with tests only in the integration-tests crate, changing the smoke test would only require recompilation of the tests crate itself (whcih woudl contain only two tests) and relinking, which is presumably much faster than today's situation of rectompilation of the whole crate under test.</p>",
        "id": 187008021,
        "sender_full_name": "matklad",
        "timestamp": 1580404261
    },
    {
        "content": "<p>Another concern I have is that the current marks infrastructure does use <code>#[cfg(test)]</code>. But I imagine we can just always unconditionally enabled test marks</p>",
        "id": 187008153,
        "sender_full_name": "matklad",
        "timestamp": 1580404346
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>, please correct me if I am wrong: when we change the test in a crate which a bunch of other crates depend on, we have to recompile the dependent crates too?</p>",
        "id": 187008371,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580404484
    },
    {
        "content": "<p>Yes, unless the tests are in the non-inline module <code>#[cfg(test)] mod tests;</code>. In that case, the file with tests does not get into the depinfo, and so Cargo turns out to be smart enough to not recompile</p>",
        "id": 187008700,
        "sender_full_name": "matklad",
        "timestamp": 1580404658
    },
    {
        "content": "<p>You know, we could pass some cli parameters (or via ENV varianbles, config files etc...) the specific test we would want to run to debug it</p>",
        "id": 187008918,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580404781
    },
    {
        "content": "<p>This is the approach to avoid copy-pasting to smoke-test</p>",
        "id": 187008990,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580404807
    },
    {
        "content": "<blockquote>\n<p>Currently, each test is a separate <code>#[test]</code> function, and that is done primarily for the benefit of the debugging.</p>\n</blockquote>\n<p>This is incredibly convenient.</p>",
        "id": 187009611,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1580405238
    },
    {
        "content": "<p>From my point of view, the current approach we take in <code>ra_syntax</code> with the <code>test_data</code> directory is viable.<br>\nWe have a \"non-inline\" <code>mod tests;</code> changes to which don't cause the recompilation of the crate.<br>\nI'd propose to have a separate <code>#[test] fn run_singe_test(test_name: &amp;str)</code>  which would accept the test name and run it for the debugging purposes.<br>\nThis setup can be applied to all crates where data-driven tests are possible</p>",
        "id": 187009855,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580405408
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> , <span class=\"user-mention\" data-user-id=\"203366\">@Jeremy Kolb</span>, I've took a very brief look at the <a href=\"https://github.com/microsoft/TypeScript/blob/master/CONTRIBUTING.md#running-the-tests\" target=\"_blank\" title=\"https://github.com/microsoft/TypeScript/blob/master/CONTRIBUTING.md#running-the-tests\">testing infrastructure of <code>TypeScript</code> compiler</a>. They do something that I've proposed. They provide a way to debug a single test by passing the test name parameter to the cli. I am not sure which alternative for that parameter we could use for rust-analyzer, this needs an investigation. By the way, I see that they don't number their tests that much, they just ask people to come up with unique filenames. This looks like a mess since they have 4K+ tests and it was just a single folder of them, but I think they have a reason for not bothering with numbering tests anyway...</p>\n<div class=\"codehilite\"><pre><span></span>// Quote from TypeScript CONTRIBUTING.md\n Note that filenames here must be distinct from all other compiler testcase names, so you may have to work a bit to find a unique name if it&#39;s something common.\n</pre></div>",
        "id": 187101952,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580490196
    },
    {
        "content": "<p>Cool I'll check it out later. Re numbering: it doesn't matter much to me as long as it's easy to run a group of related tests at once. For instance I like being able to run only tests related to \"go to definition\" which works today.</p>",
        "id": 187102723,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1580490673
    },
    {
        "content": "<p>If we can move tests out which reduces the compilation cycle I am all for that provided we do not sacrifice usability and almost as important: discoverability. However it's sliced if I can't find the test I'm looking for (or where to place new tests) it's gonna be a bad time.</p>",
        "id": 187103304,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1580491008
    },
    {
        "content": "<p>Also, I wish we could assign tags to files and not use folders of the filesystem to group tests by one characteristic, this way we could try to add an ability to run tests filtered by specific tags, but this might seem like a baby dream</p>",
        "id": 187103438,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580491090
    },
    {
        "content": "<p>I've noticed that flutter uses external tests and if you follow the main repo you'll notice that every 3rd commit is \"revert because it breaks a test\".</p>",
        "id": 187103511,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1580491141
    },
    {
        "content": "<p><code>cargo test</code> allows you to do it by prefix right? That may be as close as you can get without jamming more things into <code>xtask</code> which would be nice to avoid.</p>",
        "id": 187103650,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1580491242
    },
    {
        "content": "<p>Yeah, that insert test script seems like fixing the symptoms</p>",
        "id": 187103792,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580491358
    },
    {
        "content": "<blockquote>\n<p><code>cargo test</code> allows you to do it by prefix right? That may be as close as you can get without jamming more things into <code>xtask</code> which would be nice to avoid.</p>\n</blockquote>\n<p>substring, actually</p>",
        "id": 187107345,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580493889
    },
    {
        "content": "<p>Also, if you are curious, you can see one more approach that <code>deno</code> takes (FYI: <code>deno</code> is a new server-side JS runtime written in Rust). They have a very big <code>integration_test.rs</code> file where they just put <code>#[test]</code> functions per each data-driven test file. So each time they add <code>test_smth.js</code> and <code>test_smth.js.out</code>file they add a <code>#[test]</code> function with a macro to be able to debug this one specific test if needed.<br>\n<a href=\"https://github.com/denoland/deno/blob/1dc8afe3afc483703641c907075e2d8aa7396cfd/cli/tests/integration_tests.rs#L240-L257\" target=\"_blank\" title=\"https://github.com/denoland/deno/blob/1dc8afe3afc483703641c907075e2d8aa7396cfd/cli/tests/integration_tests.rs#L240-L257\">See this here</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">itest</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"cp\">$name</span>:<span class=\"nc\">ident</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"cp\">$(</span><span class=\"w\"> </span><span class=\"cp\">$key</span>:<span class=\"nc\">ident</span>: <span class=\"cp\">$value</span>:<span class=\"nc\">expr</span><span class=\"p\">,)</span><span class=\"o\">*</span><span class=\"p\">})</span><span class=\"w\">  </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"cp\">$name</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">util</span>::<span class=\"n\">CheckOutputIntegrationTest</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">$(</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"cp\">$key</span>: <span class=\"cp\">$value</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"nb\">Default</span>::<span class=\"n\">default</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">}).</span><span class=\"n\">run</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"n\">itest</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">_001_hello</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">args</span>: <span class=\"s\">&quot;run --reload 001_hello.js&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">output</span>: <span class=\"s\">&quot;001_hello.js.out&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">});</span><span class=\"w\"></span>\n\n<span class=\"n\">itest</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">_002_hello</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">args</span>: <span class=\"s\">&quot;run --reload 002_hello.ts&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">output</span>: <span class=\"s\">&quot;002_hello.ts.out&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">});</span><span class=\"w\"></span>\n</pre></div>",
        "id": 187116948,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580499975
    },
    {
        "content": "<p>Makes sense. I kind of like the macro approach</p>",
        "id": 187117846,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1580500570
    },
    {
        "content": "<p>Yes, the macro approach seems like an option, though I'd like to preserve that <code>Debug</code> test button to be able to run the test in VSCode debugger by just pressing it, but that would be simple if we tweak the macro a bit anyway...<br>\n<a href=\"/user_uploads/4715/bGF2O0AVPZ5ZGUtKlvCtxBLe/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/bGF2O0AVPZ5ZGUtKlvCtxBLe/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/bGF2O0AVPZ5ZGUtKlvCtxBLe/pasted_image.png\"></a></div>",
        "id": 187118996,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580501361
    },
    {
        "content": "<p>By, the way we could actually use codegen to create these <code>#[test]</code> functions from files provided in <code>test_data</code> dir automatically.</p>",
        "id": 187119749,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580502002
    },
    {
        "content": "<p>But to me, having test somehow parameterized by the test data file name  seems to be the best option</p>",
        "id": 187119897,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580502122
    },
    {
        "content": "<p>environment variable like <code>RA_TEST_PATH=\"ra_syntax/test_data/lexer/ok/test_foo.rs\"</code> is the first thing that comes into my mind.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">lexer_tests</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// runs test on all test data files as it currently does</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">run_single_test</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">test_path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">env</span>::<span class=\"n\">var</span><span class=\"p\">(</span><span class=\"s\">&quot;RA_TEST_PATH&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Runs test at path defined by the env variable</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 187120575,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580502653
    },
    {
        "content": "<p>I dislike having to set environment variables. It's not easily discoverable and IDEs can make that interaction difficult.</p>",
        "id": 187168867,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1580576225
    },
    {
        "content": "<p>To revive this thread, my colleague advised me <a href=\"https://github.com/mozilla/sccache\" target=\"_blank\" title=\"https://github.com/mozilla/sccache\">this shared compilation cache tool by Mozzilla</a> to reduce compile times.</p>",
        "id": 187506729,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580945827
    },
    {
        "content": "<p>It works nicely, but you need to clear its cache after toolchain updates or you sometimes end up with some strange errors. And you must remember to disable it when measuring the build times.</p>",
        "id": 187522510,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580969080
    },
    {
        "content": "<p>If you're on non-Mac and want to speed up your builds, you can also switch to <code>lld</code> by putting <code>-Clinker=lld</code> in your <code>RUSTFLAGS</code> or <code>~/.cargo/config</code></p>",
        "id": 187522626,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580969279
    },
    {
        "content": "<p>At least compiling from scratch having <code>debug = 2</code> with <code>sccache</code> reduced the time from <code>3m 49s</code> to <code>2m 34s</code></p>",
        "id": 191055470,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1584573710
    },
    {
        "content": "<p>is that with lld?</p>",
        "id": 191058608,
        "sender_full_name": "Laurențiu",
        "timestamp": 1584576101
    },
    {
        "content": "<p>If not, it might help to try it, especially on builds with debug symbols.</p>",
        "id": 191058731,
        "sender_full_name": "Laurențiu",
        "timestamp": 1584576215
    },
    {
        "content": "<p>My advice above was wrong, see <a href=\"https://github.com/rust-lang/rust/issues/39915#issuecomment-538049306\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/39915#issuecomment-538049306\">https://github.com/rust-lang/rust/issues/39915#issuecomment-538049306</a>.</p>",
        "id": 191058857,
        "sender_full_name": "Laurențiu",
        "timestamp": 1584576336
    }
]