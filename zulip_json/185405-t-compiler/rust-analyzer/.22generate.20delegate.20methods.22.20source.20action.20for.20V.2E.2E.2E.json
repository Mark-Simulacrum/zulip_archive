[
    {
        "content": "<p>I feel like I'm missing some basic operation, but what's the canonical way to go from a hir type to an ast type? e.g. <code>hir::Name</code> -&gt; <code>ast::Name</code></p>",
        "id": 257404068,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1634145722
    },
    {
        "content": "<p>I don't think you can. <code>ast::Name</code> is a specific <code>Name</code> in the AST, while <code>hir::Name</code> is basically a string</p>",
        "id": 257404505,
        "sender_full_name": "Laurențiu",
        "timestamp": 1634145902
    },
    {
        "content": "<p>Ohh, Interesting! For whatever reason I assumed hir::Name wrapped ast::Name, but it seems I misunderstood how the two relate</p>",
        "id": 257404850,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1634146049
    },
    {
        "content": "<p>Ill have to see if I can access the Name some other way then ^^ — thanks!</p>",
        "id": 257404926,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1634146080
    },
    {
        "content": "<p>If you want to go from a type to its definition ast node you can do so for ADTs and ADTs only</p>",
        "id": 257413172,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1634149314
    },
    {
        "content": "<p>since any other type doesn't have a definition site</p>",
        "id": 257413225,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1634149323
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">hir_ty</span><span class=\"p\">.</span><span class=\"n\">as_adt</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"n\">source</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">db</span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"w\"></span>\n</code></pre></div>\n<p>would give you the definition ast node in that case if that's what you are after(which then would allow you to fetch its name node)</p>",
        "id": 257413467,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1634149413
    },
    {
        "content": "<p>Thanks! -- I managed to work past it</p>",
        "id": 257444679,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1634161978
    },
    {
        "content": "<p>Related question, does anyone have a good sense for what I might be doing wrong if I get the message: <code>thread 'handlers::generate_delegate::tests::test_generate_setter_from_field' panicked at 'immutable tree: fn age() -&gt; u8 {</code></p>",
        "id": 257444733,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1634162006
    },
    {
        "content": "<p>Am I forgetting to <code>clone_for_update</code> something?</p>",
        "id": 257444755,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1634162016
    },
    {
        "content": "<p>(currently in the process of making the \"generate delegate\" assist work: here's what we currently have for reference: <a href=\"https://gist.github.com/yoshuawuyts/cd9ace2d937044ec097cc928cc5564fd\">https://gist.github.com/yoshuawuyts/cd9ace2d937044ec097cc928cc5564fd</a>)</p>",
        "id": 257445396,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1634162343
    },
    {
        "content": "<p>Oh probably easier if I just link to the branch <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <a href=\"https://github.com/yoshuawuyts/rust-analyzer/tree/generate-delegate-2\">https://github.com/yoshuawuyts/rust-analyzer/tree/generate-delegate-2</a></p>",
        "id": 257445487,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1634162400
    },
    {
        "content": "<p>Sounds like you are forgetting a <code>clone_for_update</code> somewhere</p>",
        "id": 257449219,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1634164210
    },
    {
        "content": "<p>I imagine its this one here <a href=\"https://github.com/yoshuawuyts/rust-analyzer/blob/efb4d45ebc77a2e28f843fb22507e63339db829c/crates/ide_assists/src/handlers/generate_delegate.rs#L88-L89\">https://github.com/yoshuawuyts/rust-analyzer/blob/efb4d45ebc77a2e28f843fb22507e63339db829c/crates/ide_assists/src/handlers/generate_delegate.rs#L88-L89</a></p>",
        "id": 257449297,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1634164266
    },
    {
        "content": "<p>nodes returned via the make api are immutable, so same applies for the local <code>f</code>, that one should also be <code>clone_for_update</code>'d</p>",
        "id": 257449314,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1634164274
    },
    {
        "content": "<p>Yay, got it all working! Thanks <span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span>!</p>\n<p>PR for \"generate delegate methods\" source action is out now: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/10539\">https://github.com/rust-analyzer/rust-analyzer/pull/10539</a></p>",
        "id": 257522130,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1634212654
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span> hey, I've been wondering for a while now: what is \"snippet support\"?</p>",
        "id": 257552799,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1634224671
    },
    {
        "content": "<p>Snippet support is basically tabstops</p>",
        "id": 257553116,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1634224772
    },
    {
        "content": "<p>that is the numbered <code>$0</code> output that allows you to switch between positions in the text with tab</p>",
        "id": 257553202,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1634224802
    },
    {
        "content": "<p>this is a client capability, so not all clients support it</p>",
        "id": 257553275,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1634224817
    },
    {
        "content": "<p>and that is what <code>SnippetCap</code> is for, when it's None the client doesn't support it so we don't wanna emit them in output text</p>",
        "id": 257553306,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1634224833
    },
    {
        "content": "<p>ahh, I see!</p>",
        "id": 257560938,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1634227642
    },
    {
        "content": "<p>thanks for the explainer!</p>",
        "id": 257560985,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1634227662
    },
    {
        "content": "<p>Annnd feedback from review has been implemented!</p>",
        "id": 257563170,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1634228524
    },
    {
        "content": "<p>:D</p>",
        "id": 257563176,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1634228526
    },
    {
        "content": "<p>oh wait, missed one comment</p>",
        "id": 257564496,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1634229045
    },
    {
        "content": "<p>going to try fixing that</p>",
        "id": 257564502,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1634229050
    },
    {
        "content": "<p>annnnd fixed! -- we have a working <code>-&gt; T</code> return type in our tests now :D</p>",
        "id": 257565090,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1634229265
    },
    {
        "content": "<p>feeling really good about this one ^^</p>",
        "id": 257565108,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1634229271
    },
    {
        "content": "<p>Hi everyone! I'm working on a lame beginner <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/10543\">PR</a> in  <span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts [he/they]</span> 's hackaton group.  Question: how is the cursor position <code>$0</code> to being reported to <code>AssistBuilder</code> ?</p>",
        "id": 257567874,
        "sender_full_name": "Anton Firszov",
        "timestamp": 1634230400
    },
    {
        "content": "<p>You can fetch the cursor position from the AssistContext</p>",
        "id": 257569106,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1634230813
    },
    {
        "content": "<p>via <code>offset</code></p>",
        "id": 257569125,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1634230816
    },
    {
        "content": "<p>I rather mean how to tell where should it be in the result. I see now that <code>builder.replace_snippet</code> expects a string having <code>$0</code> placed properly in the result. I assume it's the value of the <code>cursor</code> here?</p>\n<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates/ide_assists/src/handlers/add_missing_match_arms.rs#L171\">https://github.com/rust-analyzer/rust-analyzer/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates/ide_assists/src/handlers/add_missing_match_arms.rs#L171</a></p>",
        "id": 257570569,
        "sender_full_name": "Anton Firszov",
        "timestamp": 1634231299
    },
    {
        "content": "<p>Yes, cursor is where its inserted!</p>",
        "id": 257573256,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1634232425
    },
    {
        "content": "<p>Another question:<br>\nthe <code>works_inside_macro_call</code> test fails with my changes. Looks like <code>ctx.find_node_at_offset_with_descend::&lt;ast::MatchExpr&gt;()</code> returns a  <code>MatchExpr</code> where  <code>match_expr.syntax().text_range()</code> is reporting a range that is relative to the containing macro not the entire file.</p>\n<p>Any tips how to address this?</p>",
        "id": 257580601,
        "sender_full_name": "Anton Firszov",
        "timestamp": 1634235357
    },
    {
        "content": "<p>You can get the original range of things(that is the range outside the macro) with through the <code>Semantics</code></p>",
        "id": 257580726,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1634235404
    },
    {
        "content": "<p><code>sema.original_range(node)</code>/<code>sema.original_range_opt(node)</code></p>",
        "id": 257580775,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1634235428
    },
    {
        "content": "<p>Thanks! That seems to work. When to use the the <code>_opt</code> variant?</p>",
        "id": 257581891,
        "sender_full_name": "Anton Firszov",
        "timestamp": 1634235874
    },
    {
        "content": "<p>In some cases ranges can't be mapped up to the macro invocation's input, <code>_opt</code> will return <code>None</code> in that case</p>",
        "id": 257582012,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1634235927
    },
    {
        "content": "<p>The non-opt variant just returns the range of the entire macro call instead</p>",
        "id": 257582031,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1634235939
    }
]