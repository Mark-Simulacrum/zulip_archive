[
    {
        "content": "<p>For <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/6172\">https://github.com/rust-analyzer/rust-analyzer/pull/6172</a> to be able to qualify trait method calls properly I need access to the trait of the method, all I have now is a <code>ModPath</code> though. And currently resolving that to anything doesn't seem possible/implemented on <code>Semantics</code>. Should there ideally be a <code>resolve_mod_path</code> in semantics that is equivalent to <code>resolve_path</code>? As rebuilding an <code>ast::Path</code> from a <code>ModPath</code> won't work for semantics lookup.</p>",
        "id": 213330778,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1602699107
    },
    {
        "content": "<p>Hm, I think it should work the other way aroudn</p>",
        "id": 213330856,
        "sender_full_name": "matklad",
        "timestamp": 1602699141
    },
    {
        "content": "<p>The thing that gives you <code>ModPath</code> should be adjusted to hand <code>(ModPath, Trait)</code> instead</p>",
        "id": 213330897,
        "sender_full_name": "matklad",
        "timestamp": 1602699164
    },
    {
        "content": "<p>How do you get <code>ModPath</code>?</p>",
        "id": 213330905,
        "sender_full_name": "matklad",
        "timestamp": 1602699171
    },
    {
        "content": "<p>It's what ImportAssets gives back currently, ModPath of the trait and it's function name. I guess modifying that to give the trait back together with the path and name would be a solution?</p>",
        "id": 213331032,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1602699255
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/assists/src/utils/import_assets.rs#L30-L33\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/assists/src/utils/import_assets.rs#L30-L33</a> This here is what is being returned basically</p>",
        "id": 213331082,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1602699294
    },
    {
        "content": "<p>oh wait</p>",
        "id": 213331096,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1602699307
    },
    {
        "content": "<p>hm</p>",
        "id": 213331108,
        "sender_full_name": "matklad",
        "timestamp": 1602699319
    },
    {
        "content": "<p><code>hir::Type</code> should contain the stuff you need</p>",
        "id": 213331117,
        "sender_full_name": "matklad",
        "timestamp": 1602699328
    },
    {
        "content": "<p>ye no that was wrong on my part, thats not whats being returned <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 213331133,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1602699343
    },
    {
        "content": "<p>ImprotAssets returns a <code>BTreeSet&lt;ModPath&gt;</code></p>",
        "id": 213331226,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1602699379
    },
    {
        "content": "<p>That's where the paths come from</p>",
        "id": 213331246,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1602699389
    },
    {
        "content": "<p>The type that was there is the type of the method callee</p>",
        "id": 213331281,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1602699417
    },
    {
        "content": "<p>Yeah</p>",
        "id": 213331342,
        "sender_full_name": "matklad",
        "timestamp": 1602699456
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>                let item: hir::ItemInNs = candidate.either(Into::into, Into::into);\n                if let Some(prefix_kind) = prefixed {\n                    self.module_with_name_to_import.find_use_path_prefixed(db, item, prefix_kind)\n                } else {\n                    self.module_with_name_to_import.find_use_path(db, item)\n                }\n</code></pre></div>",
        "id": 213331348,
        "sender_full_name": "matklad",
        "timestamp": 1602699459
    },
    {
        "content": "<p>So this is a bit of code which <em>erases</em> the knowledge about the original item</p>",
        "id": 213331388,
        "sender_full_name": "matklad",
        "timestamp": 1602699476
    },
    {
        "content": "<p>I think we shoudn't forget the item, and carry it together with thr path</p>",
        "id": 213331459,
        "sender_full_name": "matklad",
        "timestamp": 1602699490
    },
    {
        "content": "<p>Seems like the best option</p>",
        "id": 213331791,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1602699666
    },
    {
        "content": "<p>hm, the tuple <code>(ModPath, ItemInNs)</code> unfortunately isn't <code>Ord</code> so BTreeSet won't really work. I guess a wrapper struct that delegates the Ord impl just to the ModPath should work?</p>",
        "id": 213332476,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1602700055
    },
    {
        "content": "<p>derive(Ord) on <code>ItemInNs</code> should be fine as well</p>",
        "id": 213332582,
        "sender_full_name": "matklad",
        "timestamp": 1602700098
    },
    {
        "content": "<p>Alright</p>",
        "id": 213332624,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1602700133
    },
    {
        "content": "<p>ModuleDefId and MacroDefId aren't Ord either tho</p>",
        "id": 213332697,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1602700175
    },
    {
        "content": "<p>and that goes down to all the other IDs as well</p>",
        "id": 213332712,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1602700183
    },
    {
        "content": "<p><span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 213332717,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1602700187
    },
    {
        "content": "<p>or almost all it seems</p>",
        "id": 213332745,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1602700201
    },
    {
        "content": "<p>Yeah, it's fine to derive them</p>",
        "id": 213332763,
        "sender_full_name": "matklad",
        "timestamp": 1602700203
    },
    {
        "content": "<p>OTOH, are we really sure that BTreeSet is the right thing here?</p>",
        "id": 213332806,
        "sender_full_name": "matklad",
        "timestamp": 1602700217
    },
    {
        "content": "<p>The sole reason for BTreeSet seems to be sorted iteration I believe?</p>",
        "id": 213332823,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1602700234
    },
    {
        "content": "<p>I am not a fan of this data structure usually, as it is allocation-eager</p>",
        "id": 213332827,
        "sender_full_name": "matklad",
        "timestamp": 1602700237
    },
    {
        "content": "<p>perhaps returning a sorted vec would work better?</p>",
        "id": 213332856,
        "sender_full_name": "matklad",
        "timestamp": 1602700256
    },
    {
        "content": "<p>and custom sorting with .sort_by is easy</p>",
        "id": 213332876,
        "sender_full_name": "matklad",
        "timestamp": 1602700268
    },
    {
        "content": "<p>That should work</p>",
        "id": 213332918,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1602700298
    },
    {
        "content": "<p>maybe through in Vec::dedup at the end if uniquness is also required</p>",
        "id": 213333010,
        "sender_full_name": "matklad",
        "timestamp": 1602700344
    },
    {
        "content": "<p>/me must confess that sorted vector is their favorite data structure</p>",
        "id": 213333036,
        "sender_full_name": "matklad",
        "timestamp": 1602700366
    },
    {
        "content": "<p>I can agree with that confession :)</p>",
        "id": 213336214,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1602701938
    },
    {
        "content": "<p>Okay, trait methods now work as well.</p>",
        "id": 213341908,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1602704969
    }
]