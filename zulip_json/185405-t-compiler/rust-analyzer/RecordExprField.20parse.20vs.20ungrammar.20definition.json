[
    {
        "content": "<p>The ungrammar def for RecordExpreField states<br>\n<a href=\"https://github.com/Veykril/ungrammar/blob/master/rust.ungram#L410-L411\">https://github.com/Veykril/ungrammar/blob/master/rust.ungram#L410-L411</a></p>\n<div class=\"codehilite\"><pre><span></span><code>RecordExprField =\n  Attr* NameRef (&#39;:&#39; Expr)?\n</code></pre></div>\n<p>Note the <code>Expr</code> being the optional part here,<br>\nbut the parser in RA parses this with the assumption that the <code>Expr</code> is always there instead:<br>\n<a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/parser/src/grammar/expressions.rs#L619-L630\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/parser/src/grammar/expressions.rs#L619-L630</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"n\">IDENT</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">INT_NUMBER</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// test_err record_literal_before_ellipsis_recovery</span>\n<span class=\"w\">                </span><span class=\"c1\">// fn main() {</span>\n<span class=\"w\">                </span><span class=\"c1\">//     S { field ..S::default() }</span>\n<span class=\"w\">                </span><span class=\"c1\">// }</span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">nth_at</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">!</span><span class=\"p\">[</span>:<span class=\"p\">])</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">nth_at</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">name_ref_or_index</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">!</span><span class=\"p\">[</span>:<span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">expr</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">m</span><span class=\"p\">.</span><span class=\"n\">complete</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">RECORD_EXPR_FIELD</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Unless I'm missing something the parser should instead always parse the <code>NameRef</code>, but the expression optionally  only no?</p>",
        "id": 223016877,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1610846148
    },
    {
        "content": "<p>I noticed this because I was expecting the init shorthand to just be the <code>NameRef</code> but it was an <code>Expr</code> instead.</p>",
        "id": 223016963,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1610846259
    },
    {
        "content": "<p>yeah, the ungrammar is wrong</p>",
        "id": 223030798,
        "sender_full_name": "matklad",
        "timestamp": 1610870619
    },
    {
        "content": "<p>label is optional, expression is always there. It is a bit mind bending way to look at it, but it actually simplifies things with the impl</p>",
        "id": 223030845,
        "sender_full_name": "matklad",
        "timestamp": 1610870673
    },
    {
        "content": "<p>and forward compatible with lang team deciding that <code>let foo = Foo { spam, &amp;eggs }</code> is ok</p>",
        "id": 223030872,
        "sender_full_name": "matklad",
        "timestamp": 1610870724
    }
]