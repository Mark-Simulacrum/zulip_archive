[
    {
        "content": "<p>I've been looking into simiplifing <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/4b0c37bd6e4cb3d47614ec6b42fb1deef9bc9324/crates/ra_hir/src/ty/method_resolution.rs#L255-L275\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/4b0c37bd6e4cb3d47614ec6b42fb1deef9bc9324/crates/ra_hir/src/ty/method_resolution.rs#L255-L275\">https://github.com/rust-analyzer/rust-analyzer/blob/4b0c37bd6e4cb3d47614ec6b42fb1deef9bc9324/crates/ra_hir/src/ty/method_resolution.rs#L255-L275</a>.</p>\n<p>It was mostly a failure, but let me dump here my thoughts in case anyone has a better idea!</p>\n<p>The fundamental problem here is that we want an <strong>internal iterator abstraction</strong>, to avoid returning references to local variables.</p>\n<p>I went as far as </p>\n<div class=\"codehilite\"><pre><span></span>    pub fn iterate_impl_items&lt;T&gt;(\n        self,\n        db: &amp;impl HirDatabase,\n        krate: Crate,\n        mut callback: impl FnMut(ImplItem) -&gt; Option&lt;T&gt;,\n    ) -&gt; Option&lt;T&gt; {\n        self.collect_impl_items(db, krate)(FindMap(callback)).some()\n    }\n\n    pub fn collect_impl_items&lt;E: Extend&lt;ImplItem&gt;&gt;(\n        self,\n        db: &amp;impl HirDatabase,\n        krate: Crate,\n    ) -&gt; impl FnOnce(E) -&gt; E  + &#39;_ {\n        move |mut sink| {\n            sink.extend(\n                def_crate(db, krate, &amp;self)\n                    .map(|krate| db.impls_in_crate(krate))\n                    .as_ref()\n                    .into_iter()\n                    .flat_map(|impls| impls.lookup_impl_blocks(&amp;self))\n                    .flat_map(|it| it.items(db)),\n            );\n            sink\n        }\n    }\n</pre></div>\n\n\n<p>Using <code>std::iter::Extend</code> as an Internal Iterator trait is nice! However, I failed to further abstract this, due to the lack of generic lambdas</p>",
        "id": 168938926,
        "sender_full_name": "matklad",
        "timestamp": 1561469885
    },
    {
        "content": "<p>This, unfortunatelly, is not valid Rust yet: <a href=\"https://gist.github.com/matklad/8c3a413f5e2cc144eeb0da2dc761abd7\" target=\"_blank\" title=\"https://gist.github.com/matklad/8c3a413f5e2cc144eeb0da2dc761abd7\">https://gist.github.com/matklad/8c3a413f5e2cc144eeb0da2dc761abd7</a> :-(</p>",
        "id": 168938968,
        "sender_full_name": "matklad",
        "timestamp": 1561469917
    },
    {
        "content": "<p>I'm still holding out for generators to make this easy ;)</p>",
        "id": 168941849,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1561471761
    },
    {
        "content": "<p>Not sure that generators help in this case: the problem is, we have two nested loops, where the inner loop borrows from the outer.  This can't be represented as an <code>std::iter::Iterator</code>, because, once you turned the outer loop, inner references from the previous iteration become invalid</p>",
        "id": 168941990,
        "sender_full_name": "matklad",
        "timestamp": 1561471868
    },
    {
        "content": "<p>Hm, OTOH, we are <em>not</em> returning those references and use them only internally...</p>",
        "id": 168942014,
        "sender_full_name": "matklad",
        "timestamp": 1561471895
    }
]