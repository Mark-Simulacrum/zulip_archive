[
    {
        "content": "<p>In <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/9979\">https://github.com/rust-analyzer/rust-analyzer/pull/9979</a> I fixed the issue of us incorrectly mapping tokens up in derive macro invocations by simply replacing the derive attribute that is being expanded in the item node instead of removing it, as removing the attribute will offset the text ranges. This <em>somehow</em> had a massive effect on memory usage but I have no idea how this can be. Does anything non ide related in RA depends on token upmapping(hygiene I guess?) that could explain this?.</p>",
        "id": 250284363,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629653016
    },
    {
        "content": "<p>Only slightly related, but <code>splice_children</code> looks odd. It inserts one child at a time, but does a <code>splice_children</code> on the <code>GreenNodeData</code> and a <code>respine</code> for every one of those. It doesn't matter here, though, since we only insert one child.</p>",
        "id": 250284548,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629653299
    },
    {
        "content": "<p>Hmm, what if we try that trick of doubling the whitespace? It will break the mapping, but it should show us how much memory the whitespace itself takes.</p>",
        "id": 250286404,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629656171
    },
    {
        "content": "<p>What are the memory usage stats saying?</p>",
        "id": 250286445,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1629656278
    },
    {
        "content": "<p>For that commit:</p>\n<div class=\"codehilite\"><pre><span></span><code>Database loaded:     1.37s, 139mb\n  crates: 38, mods: 777, decls: 17074, fns: 12749\nItem Collection:     19.70s, 729mb\n  exprs: 339340, ??ty: 489 (0%), ?ty: 436 (0%), !ty: 288\nInference:           58.44s, 638mb\nTotal:               78.13s, 1368mb\n</code></pre></div>\n<p>For the previous commit:</p>\n<div class=\"codehilite\"><pre><span></span><code>Database loaded:     10.52s, 139mb\n  crates: 38, mods: 777, decls: 17073, fns: 12748\nItem Collection:     19.66s, 557mb\n  exprs: 339310, ??ty: 489 (0%), ?ty: 436 (0%), !ty: 288\nInference:           58.62s, 638mb\nTotal:               78.28s, 1196mb\n</code></pre></div>",
        "id": 250287227,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629657433
    },
    {
        "content": "<p>The commit introduced one new function hence the difference in <code>decls</code> and <code>fns</code></p>",
        "id": 250287314,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629657543
    },
    {
        "content": "<p>Maybe the verbose ones (per-query)?</p>",
        "id": 250287324,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629657561
    },
    {
        "content": "<p>Ah right that exists</p>",
        "id": 250287334,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629657580
    },
    {
        "content": "<p>How do I run it per query actually?</p>",
        "id": 250287437,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629657722
    },
    {
        "content": "<p>Just pass -v I guess?</p>",
        "id": 250287471,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629657741
    },
    {
        "content": "<p>Does the cli even offer per query statistics? I don't think it does</p>",
        "id": 250287550,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629657859
    },
    {
        "content": "<p>I thought it was there, but I might be wrong. Can't check right now.</p>",
        "id": 250287581,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629657919
    },
    {
        "content": "<p>I don't see anything like that and verbosity only enables things for inference it seems which is unrelated here</p>",
        "id": 250287635,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629657971
    },
    {
        "content": "<p>Did you pass --nemory-usage? See line 155 in <a href=\"http://analysis_stats.rs\">analysis_stats.rs</a>. also needs -v.</p>",
        "id": 250287732,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629658134
    },
    {
        "content": "<p>Oh I was passing <code>-q</code> by accident again <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 250287896,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629658389
    },
    {
        "content": "<p>but those per query stats are only relevant for inference as said</p>",
        "id": 250287951,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629658454
    },
    {
        "content": "<p>so ye what i got there is all we have from what i can see</p>",
        "id": 250287953,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629658460
    },
    {
        "content": "<p>Hm, no idea what's going on here. I suggest running with <code>RA_COUNT=1</code> maybe?</p>",
        "id": 250347428,
        "sender_full_name": "matklad",
        "timestamp": 1629723521
    },
    {
        "content": "<p>Also, I must say I am not a huge fan of tree mutation during macro exapsion -- the original idea was that we won't mutate trees during macro expansion. But It's not like I can suggest a better alternative :)</p>",
        "id": 250347654,
        "sender_full_name": "matklad",
        "timestamp": 1629723616
    },
    {
        "content": "<p>would it be better to mutate the created token trees while we create them?</p>",
        "id": 250348023,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1629723781
    },
    {
        "content": "<p>Yeah, withoug thinking too much about this, it seems the more natrual approach is to patch syntax_node_to_token_tree</p>",
        "id": 250348205,
        "sender_full_name": "matklad",
        "timestamp": 1629723862
    },
    {
        "content": "<p>we just skip some nodes while converting to tt</p>",
        "id": 250348232,
        "sender_full_name": "matklad",
        "timestamp": 1629723877
    },
    {
        "content": "<p>The way I see it, syntax trees are a strictly immutable reprensentation of the code. Macro expansion uses token trees as both inputs and outputs. All shenanigans are happening in the explicit translation layer.</p>",
        "id": 250348337,
        "sender_full_name": "matklad",
        "timestamp": 1629723937
    },
    {
        "content": "<p>Before the PR</p>\n<div class=\"codehilite\"><pre><span></span><code>Database loaded:     13.02s, 119mb\n  crates: 38, mods: 777, decls: 17073, fns: 12748\nItem Collection:     29.73s, 557mb\n  exprs: 343094, ??ty: 406 (0%), ?ty: 436 (0%), !ty: 147\nInference:           63.09s, 640mb\nTotal:               92.83s, 1197mb\nhir_def::body::Body                                                                             13_688       13_688       13_688\nhir_def::item_scope::ItemScope                                                                  13_126       13_126       13_126\nhir_def::item_tree::ItemTree                                                                    56_078       55_649       55_649\nhir_def::nameres::DefMap                                                                        10_109       10_109       10_109\nhir_expand::ast_id_map::AstIdMap                                                               124_433       64_146       64_145\nrowan::green::node::GreenNode                                                               11_868_588    1_365_968    1_226_934\nrowan::green::token::GreenToken                                                              5_286_789      729_519      723_837\nrowan::utility_types::NodeOrToken&lt;rowan::cursor::SyntaxNode, rowan::cursor::SyntaxToken&gt;   119_134_074       31_495       22_566\n                                                                                                 total     max_live         live\n</code></pre></div>\n<p>After</p>\n<div class=\"codehilite\"><pre><span></span><code>post\nDatabase loaded:     1.79s, 119mb\n  crates: 38, mods: 777, decls: 17074, fns: 12749\nItem Collection:     29.53s, 728mb\n  exprs: 343124, ??ty: 406 (0%), ?ty: 436 (0%), !ty: 147\nInference:           60.48s, 640mb\nTotal:               90.01s, 1369mb\nhir_def::body::Body                                                                             13_689       13_689       13_689\nhir_def::item_scope::ItemScope                                                                  13_128       13_128       13_128\nhir_def::item_tree::ItemTree                                                                    56_080       55_651       55_651\nhir_def::nameres::DefMap                                                                        10_111       10_111       10_111\nhir_expand::ast_id_map::AstIdMap                                                               124_439       64_148       64_147\nrowan::green::node::GreenNode                                                               11_924_215    2_430_066    2_292_216\nrowan::green::token::GreenToken                                                              5_300_564    1_058_056    1_052_374\nrowan::utility_types::NodeOrToken&lt;rowan::cursor::SyntaxNode, rowan::cursor::SyntaxToken&gt;   119_461_412       52_374       50_498\n                                                                                                 total     max_live         live\n</code></pre></div>",
        "id": 250348892,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629724176
    },
    {
        "content": "<p>So looks like it is indeed the syntax nodes that eat the memory?</p>",
        "id": 250348962,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629724203
    },
    {
        "content": "<p>That's curious! Now the question is, why do we have more live nodes in this case?</p>",
        "id": 250349388,
        "sender_full_name": "matklad",
        "timestamp": 1629724405
    },
    {
        "content": "<p>Perhaps we haven't plugged all the leaks in rowan? <span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span> would you like to debug this from here? I fear this might be one of those cursed issues, which can teach a lot :D</p>",
        "id": 250349573,
        "sender_full_name": "matklad",
        "timestamp": 1629724495
    },
    {
        "content": "<p>Also, observability <span aria-label=\"rock on\" class=\"emoji emoji-1f918\" role=\"img\" title=\"rock on\">:rock_on:</span> <span aria-label=\"rock on\" class=\"emoji emoji-1f918\" role=\"img\" title=\"rock on\">:rock_on:</span> <span aria-label=\"rock on\" class=\"emoji emoji-1f918\" role=\"img\" title=\"rock on\">:rock_on:</span> </p>\n<p>Notice how having the metrics published and the <code>RA_COUNT</code> available makes it easier to even notices that something fishy is happening!</p>",
        "id": 250349656,
        "sender_full_name": "matklad",
        "timestamp": 1629724547
    },
    {
        "content": "<p>That does look like its leaking somewhere, I can try to investigate.</p>",
        "id": 250350732,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629725108
    },
    {
        "content": "<p>Always fun finding new bugs by fixing bugs.</p>",
        "id": 250350761,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629725123
    },
    {
        "content": "<p>Rowan itself doesn't really have tests does it?</p>",
        "id": 250351032,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629725264
    },
    {
        "content": "<p>So how would I go about debugging this ideally? I haven't really done much debugging for memory leaks yet</p>",
        "id": 250360762,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629729499
    },
    {
        "content": "<p>Well, the latest ERA episode might be relevant: <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/ERA.20series/near/250362548\">https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/ERA.20series/near/250362548</a></p>",
        "id": 250362626,
        "sender_full_name": "matklad",
        "timestamp": 1629730304
    },
    {
        "content": "<p>But i'd go for just debugging \"why counts are different\" -- ie, a usual difference in behavior debugging</p>",
        "id": 250362746,
        "sender_full_name": "matklad",
        "timestamp": 1629730343
    },
    {
        "content": "<p>I can't seem to figure out the problem nor make any progress in figuring it out<br>\nI don't see a place where we are messing up refcounts either</p>",
        "id": 250373434,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629735012
    },
    {
        "content": "<p>Did you manage to minimize the test? Or is <code>analysis-stats</code> the best we have?</p>",
        "id": 250373695,
        "sender_full_name": "matklad",
        "timestamp": 1629735131
    },
    {
        "content": "<p>So far no luck in minimizing</p>",
        "id": 250374002,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629735286
    },
    {
        "content": "<p>Tried building a few nested nodes and then splicing them but the live count stays at 0 after dropping the nodes</p>",
        "id": 250374183,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629735377
    },
    {
        "content": "<p>Huh, I am out of specific ideas then...</p>\n<p>I'd try to minize this from the big repro (what's the smallers project where analysis stats shows a diff), and I'd also try playing with DEFAULT_LRU_CAPACITY value (feels like it might be relevant)</p>",
        "id": 250374429,
        "sender_full_name": "matklad",
        "timestamp": 1629735499
    },
    {
        "content": "<p>I guess, you can start with something like <code>integrated_highlighting_bench</code> for that</p>",
        "id": 250374514,
        "sender_full_name": "matklad",
        "timestamp": 1629735535
    },
    {
        "content": "<p>Also out of curiosity I tried printing the counts after dropping the <code>AnalysisHost</code> in <code>AnalysisStats</code>/</p>\n<div class=\"codehilite\"><pre><span></span><code>Database loaded:     1.53s, 119mb\n  crates: 38, mods: 777, decls: 17073, fns: 12748\nItem Collection:     29.65s, 556mb\nTotal:               29.65s, 556mb\nhir_def::item_scope::ItemScope                                                                   3_503        3_503        3_503\nhir_def::item_tree::ItemTree                                                                    33_922       33_922       33_922\nhir_def::nameres::DefMap                                                                           606          606          606\nhir_expand::ast_id_map::AstIdMap                                                                33_988       33_929       33_928\nrowan::green::node::GreenNode                                                                7_215_242    1_167_422    1_152_523\nrowan::green::token::GreenToken                                                              3_189_421      546_565      542_921\nrowan::utility_types::NodeOrToken&lt;rowan::cursor::SyntaxNode, rowan::cursor::SyntaxToken&gt;    83_537_620       31_495       22_554\n                                                                                                 total     max_live         live\n\nhir_def::item_scope::ItemScope                                                                   3_503        3_503            0\nhir_def::item_tree::ItemTree                                                                    33_922       33_922            0\nhir_def::nameres::DefMap                                                                           606          606            0\nhir_expand::ast_id_map::AstIdMap                                                                33_988       33_929            0\nrowan::green::node::GreenNode                                                                7_215_242    1_167_422      903_983\nrowan::green::token::GreenToken                                                              3_189_421      546_565      286_893\nrowan::utility_types::NodeOrToken&lt;rowan::cursor::SyntaxNode, rowan::cursor::SyntaxToken&gt;    83_537_620       31_495       22_554\n                                                                                                 total     max_live         live\n</code></pre></div>\n<p>first batch is before dropping, second is after dropping</p>",
        "id": 250376356,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629736336
    },
    {
        "content": "<p>And this is for the commit prior to this PR</p>",
        "id": 250376383,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629736357
    },
    {
        "content": "<p>so we are already leaking a bunch as is it seems(ah well we are doing the replacement for attributes already so maybe thats the cause here already)?</p>",
        "id": 250376411,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629736373
    },
    {
        "content": "<p>If it's a detectable leak you might be able to find it with <code>-Zsanitizer=leak</code></p>",
        "id": 250376583,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1629736458
    },
    {
        "content": "<p>that has worked very well in the past for me</p>",
        "id": 250376611,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1629736474
    },
    {
        "content": "<p>That isn't supported on windows is it <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 250376741,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629736543
    },
    {
        "content": "<p>Ah, it might not be</p>",
        "id": 250376846,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1629736587
    },
    {
        "content": "<p>Doesn't seem like it according to the llvm docs</p>",
        "id": 250376875,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629736599
    },
    {
        "content": "<p>Anything I can test? :D</p>",
        "id": 250377190,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629736745
    },
    {
        "content": "<p>Just running <code>cargo +nightly run --bin rust-analyzer --release -- -q analysis-stats --memory-usage . --skip-inference</code> with <code>-Zsanitizer=leak</code>set in your <code>RUSTFLAGS</code>(thats how you use them for cargo right?)</p>",
        "id": 250377451,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629736861
    },
    {
        "content": "<p>Can be done on latest master or the commit of this PR</p>",
        "id": 250377518,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629736897
    },
    {
        "content": "<p>doesn't really matter as we are already leaking prior to this PR a bit</p>",
        "id": 250377553,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629736916
    },
    {
        "content": "<p>Yeah, I can confirm the leaked nodes at the end of <code>run</code></p>",
        "id": 250377921,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629737067
    },
    {
        "content": "<p>(someday I'll set up a linux machine/dual boot)</p>",
        "id": 250377927,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629737069
    },
    {
        "content": "<p>Let me try LSAN, I didn't even know it was working for Rust programs. Do the other sanitizers work too?</p>",
        "id": 250378047,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629737123
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>                                                                                                 total     max_live         live\n\nhir_def::item_scope::ItemScope                                                                   3_503        3_503            0\nhir_def::item_tree::ItemTree                                                                    33_922       33_922            0\nhir_def::nameres::DefMap                                                                           606          606            0\nhir_expand::ast_id_map::AstIdMap                                                                33_988       33_929            0\nrowan::green::node::GreenNode                                                                7_141_607      601_759           48\nrowan::green::token::GreenToken                                                              3_163_887      386_171           57\nrowan::utility_types::NodeOrToken&lt;rowan::cursor::SyntaxNode, rowan::cursor::SyntaxToken&gt;    83_349_913       30_383           18\n                                                                                                 total     max_live         live\n</code></pre></div>\n<p>okay so this is the count after dropping with the <code>splice_children</code> for attributes replaced with a <code>detach</code>. So we are still leaking a few nodes without that but almost all the leakage comes from splice_children it seems(or all if we do use it somewhere else)</p>",
        "id": 250378232,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629737192
    },
    {
        "content": "<p>Hmm, might be a good idea to enable debug info.</p>",
        "id": 250378418,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629737275
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> any opinion on my question about the <code>splice_children</code> implementation? It splices one children at a time, but ends up calling another <code>splice_function</code> for each of them. I mean, I can't say I understand the code, but that's usually a red flag.</p>",
        "id": 250378660,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629737375
    },
    {
        "content": "<p>Ah we have a use of <code>ted::replace</code>(which uses <code>splice_children</code>) in <code>hir_expand::eager_macro_recur</code> so I imagine thats where the last 100 nodes leak</p>",
        "id": 250378749,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629737404
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Database loaded:     460.32ms, 357minstr, 0b\n  crates: 38, mods: 776, decls: 17106, fns: 12763\nItem Collection:     14.43s, 140ginstr, 0b\nTotal:               14.43s, 140ginstr, 0b\nerror: address range table at offset 0x114af0 has a premature terminator entry at offset 0x114b60\nerror: address range table at offset 0x1757b0 has a premature terminator entry at offset 0x1757f0\n\n=================================================================\n==163209==ERROR: LeakSanitizer: detected memory leaks\n\nDirect leak of 384 byte(s) in 6 object(s) allocated from:\n    #0 0x55735c625798 in malloc /rustc/llvm/src/llvm-project/compiler-rt/lib/lsan/lsan_interceptors.cpp:56:3\n    #1 0x55735d54d9f2 in alloc::alloc::alloc::h36afbbfc57da00da /rustc/5ad7389bdd1abe7d2c6f73a233af1a7a69e96285/library/alloc/src/alloc.rs:86:14\n    #2 0x55735d54d9f2 in alloc::alloc::Global::alloc_impl::h731f7a4e8793124e /rustc/5ad7389bdd1abe7d2c6f73a233af1a7a69e96285/library/alloc/src/alloc.rs:166:73\n    #3 0x55735d54d9f2 in _$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$::allocate::hd3fe441267c55200 /rustc/5ad7389bdd1abe7d2c6f73a233af1a7a69e96285/library/alloc/src/alloc.rs:226:9\n    #4 0x55735d54d9f2 in alloc::alloc::exchange_malloc::h22967bfd6b4e59e1 /rustc/5ad7389bdd1abe7d2c6f73a233af1a7a69e96285/library/alloc/src/alloc.rs:316:11\n    #5 0x55735d54d9f2 in alloc::boxed::Box$LT$T$GT$::new::hb724f00f2f577867 /rustc/5ad7389bdd1abe7d2c6f73a233af1a7a69e96285/library/alloc/src/boxed.rs:191:9\n    #6 0x55735d54d9f2 in rowan::cursor::NodeData::new::h621527caf1d19cc0 ~/.cargo/registry/src/github.com-1ecc6299db9ec823/rowan-0.13.0/src/cursor.rs:246:41\n    #7 0x55735d54d9f2 in rowan::cursor::SyntaxNode::new_root_mut::h2249f231610da5dd ~/.cargo/registry/src/github.com-1ecc6299db9ec823/rowan-0.13.0/src/cursor.rs:517:27\n    #8 0x55735d54d9f2 in rowan::cursor::SyntaxNode::clone_for_update::h81c7d27489db140b ~/.cargo/registry/src/github.com-1ecc6299db9ec823/rowan-0.13.0/src/cursor.rs:538:21\n\nIndirect leak of 147435728 byte(s) in 1953780 object(s) allocated from:\n    #0 0x55735c625798 in malloc /rustc/llvm/src/llvm-project/compiler-rt/lib/lsan/lsan_interceptors.cpp:56:3\n    #1 0x55735d550516 in alloc::alloc::alloc::h36afbbfc57da00da /rustc/5ad7389bdd1abe7d2c6f73a233af1a7a69e96285/library/alloc/src/alloc.rs:86:14\n    #2 0x55735d550516 in rowan::arc::ThinArc$LT$H$C$T$GT$::from_header_and_iter::h2b979b557c611a7f ~/.cargo/registry/src/github.com-1ecc6299db9ec823/rowan-0.13.0/src/arc.rs:353:26\n\nIndirect leak of 77072576 byte(s) in 28264 object(s) allocated from:\n    #0 0x55735c625798 in malloc /rustc/llvm/src/llvm-project/compiler-rt/lib/lsan/lsan_interceptors.cpp:56:3\n    #1 0x55735d550d41 in alloc::alloc::alloc::h36afbbfc57da00da /rustc/5ad7389bdd1abe7d2c6f73a233af1a7a69e96285/library/alloc/src/alloc.rs:86:14\n    #2 0x55735d550d41 in rowan::arc::ThinArc$LT$H$C$T$GT$::from_header_and_iter::hc5c94a72b3fba627 ~/.cargo/registry/src/github.com-1ecc6299db9ec823/rowan-0.13.0/src/arc.rs:353:26\n\nIndirect leak of 28057704 byte(s) in 639306 object(s) allocated from:\n    #0 0x55735c625798 in malloc /rustc/llvm/src/llvm-project/compiler-rt/lib/lsan/lsan_interceptors.cpp:56:3\n    #1 0x55735d551222 in alloc::alloc::alloc::h36afbbfc57da00da /rustc/5ad7389bdd1abe7d2c6f73a233af1a7a69e96285/library/alloc/src/alloc.rs:86:14\n    #2 0x55735d551222 in rowan::arc::ThinArc$LT$H$C$T$GT$::from_header_and_iter::hf9116a6332561942 ~/.cargo/registry/src/github.com-1ecc6299db9ec823/rowan-0.13.0/src/arc.rs:353:26\n\nIndirect leak of 4683600 byte(s) in 20654 object(s) allocated from:\n    #0 0x55735c625798 in malloc /rustc/llvm/src/llvm-project/compiler-rt/lib/lsan/lsan_interceptors.cpp:56:3\n    #1 0x55735d550913 in alloc::alloc::alloc::h36afbbfc57da00da /rustc/5ad7389bdd1abe7d2c6f73a233af1a7a69e96285/library/alloc/src/alloc.rs:86:14\n    #2 0x55735d550913 in rowan::arc::ThinArc$LT$H$C$T$GT$::from_header_and_iter::h3f10cca8f8fdda98 ~/.cargo/registry/src/github.com-1ecc6299db9ec823/rowan-0.13.0/src/arc.rs:353:26\n\nIndirect leak of 1809664 byte(s) in 28276 object(s) allocated from:\n    #0 0x55735c625798 in malloc /rustc/llvm/src/llvm-project/compiler-rt/lib/lsan/lsan_interceptors.cpp:56:3\n    #1 0x55735d54d2a4 in alloc::alloc::alloc::h36afbbfc57da00da /rustc/5ad7389bdd1abe7d2c6f73a233af1a7a69e96285/library/alloc/src/alloc.rs:86:14\n    #2 0x55735d54d2a4 in alloc::alloc::Global::alloc_impl::h731f7a4e8793124e /rustc/5ad7389bdd1abe7d2c6f73a233af1a7a69e96285/library/alloc/src/alloc.rs:166:73\n    #3 0x55735d54d2a4 in _$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$::allocate::hd3fe441267c55200 /rustc/5ad7389bdd1abe7d2c6f73a233af1a7a69e96285/library/alloc/src/alloc.rs:226:9\n    #4 0x55735d54d2a4 in alloc::alloc::exchange_malloc::h22967bfd6b4e59e1 /rustc/5ad7389bdd1abe7d2c6f73a233af1a7a69e96285/library/alloc/src/alloc.rs:316:11\n    #5 0x55735d54d2a4 in alloc::boxed::Box$LT$T$GT$::new::hb724f00f2f577867 /rustc/5ad7389bdd1abe7d2c6f73a233af1a7a69e96285/library/alloc/src/boxed.rs:191:9\n    #6 0x55735d54d2a4 in rowan::cursor::NodeData::new::h621527caf1d19cc0 (.llvm.16586132102640410163) ~/.cargo/registry/src/github.com-1ecc6299db9ec823/rowan-0.13.0/src/cursor.rs:246:41\n\nIndirect leak of 1321472 byte(s) in 20648 object(s) allocated from:\n    #0 0x55735c625798 in malloc /rustc/llvm/src/llvm-project/compiler-rt/lib/lsan/lsan_interceptors.cpp:56:3\n    #1 0x55735d54d9f2 in alloc::alloc::alloc::h36afbbfc57da00da /rustc/5ad7389bdd1abe7d2c6f73a233af1a7a69e96285/library/alloc/src/alloc.rs:86:14\n    #2 0x55735d54d9f2 in alloc::alloc::Global::alloc_impl::h731f7a4e8793124e /rustc/5ad7389bdd1abe7d2c6f73a233af1a7a69e96285/library/alloc/src/alloc.rs:166:73\n    #3 0x55735d54d9f2 in _$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$::allocate::hd3fe441267c55200 /rustc/5ad7389bdd1abe7d2c6f73a233af1a7a69e96285/library/alloc/src/alloc.rs:226:9\n    #4 0x55735d54d9f2 in alloc::alloc::exchange_malloc::h22967bfd6b4e59e1 /rustc/5ad7389bdd1abe7d2c6f73a233af1a7a69e96285/library/alloc/src/alloc.rs:316:11\n    #5 0x55735d54d9f2 in alloc::boxed::Box$LT$T$GT$::new::hb724f00f2f577867 /rustc/5ad7389bdd1abe7d2c6f73a233af1a7a69e96285/library/alloc/src/boxed.rs:191:9\n    #6 0x55735d54d9f2 in rowan::cursor::NodeData::new::h621527caf1d19cc0 ~/.cargo/registry/src/github.com-1ecc6299db9ec823/rowan-0.13.0/src/cursor.rs:246:41\n    #7 0x55735d54d9f2 in rowan::cursor::SyntaxNode::new_root_mut::h2249f231610da5dd ~/.cargo/registry/src/github.com-1ecc6299db9ec823/rowan-0.13.0/src/cursor.rs:517:27\n    #8 0x55735d54d9f2 in rowan::cursor::SyntaxNode::clone_for_update::h81c7d27489db140b ~/.cargo/registry/src/github.com-1ecc6299db9ec823/rowan-0.13.0/src/cursor.rs:538:21\n\nSUMMARY: LeakSanitizer: 260381128 byte(s) leaked in 2690934 allocation(s).\n</code></pre></div>",
        "id": 250378813,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629737426
    },
    {
        "content": "<p>I don't have anything better than that. And wow, 260 MB.</p>",
        "id": 250378850,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629737446
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu</span> yeah, thats \"TODO: optimize later\". I wanted to get the right API which operates with bulk changes, but was lazy on the implementation side and impled only the simple case for one node chang</p>",
        "id": 250379108,
        "sender_full_name": "matklad",
        "timestamp": 1629737556
    },
    {
        "content": "<p>ye 260MB sounds correct given we already leaked the same way before this regression <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 250379461,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629737717
    },
    {
        "content": "<p><code>ast::edit::test_increase_indent</code> leaks too, maybe it helps with a minimization (not sure why it would, though).</p>",
        "id": 250381512,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629738590
    },
    {
        "content": "<p>So if I understand this correctly, root green nodes have an increased ref count of one right?</p>",
        "id": 250385364,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629740298
    },
    {
        "content": "<p>That would mean when attaching a child we have to decrease the ref count of the child by one as the child is always rooted and once attached it loses its \"root status\"</p>",
        "id": 250385559,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629740405
    },
    {
        "content": "<p>Which I don't think attach_child does?</p>",
        "id": 250385580,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629740412
    },
    {
        "content": "<p>Yeah, this seems reasonable!</p>",
        "id": 250385745,
        "sender_full_name": "matklad",
        "timestamp": 1629740499
    },
    {
        "content": "<p>Hmm nope, now im getting panics</p>",
        "id": 250387029,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629741128
    },
    {
        "content": "<p><code>GreenNode/GreenToken::from_raw</code> would be the way to decrease the ref count right?</p>",
        "id": 250387053,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629741143
    },
    {
        "content": "<p>I don't think so. You want to decrease the ref count <em>after</em> you attach the node. That code path seems to create the <code>GreenNode</code> before inserting it.</p>",
        "id": 250387143,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629741196
    },
    {
        "content": "<p>Tried doing that as well with no luck</p>",
        "id": 250388862,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629742055
    },
    {
        "content": "<p><span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span> really thought that would be the issue</p>",
        "id": 250388890,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629742068
    },
    {
        "content": "<p>\"This crate is primarily tested by various integration tests in rust-analyzer.\" <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 250389460,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629742374
    },
    {
        "content": "<p>After today, I should add \"and by recording videos of <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> coding\"</p>",
        "id": 250390144,
        "sender_full_name": "matklad",
        "timestamp": 1629742712
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/10003\">https://github.com/rust-analyzer/rust-analyzer/pull/10003</a></p>",
        "id": 250390268,
        "sender_full_name": "matklad",
        "timestamp": 1629742776
    },
    {
        "content": "<p>Clawed back some bytes when fixing an unrelated issue. Curious -- can we go OOM by running <code>ast::edit::test_increase_indent</code> in a loop?  <code>loop {}</code> is my fav leak detector!</p>",
        "id": 250390561,
        "sender_full_name": "matklad",
        "timestamp": 1629742841
    },
    {
        "content": "<p>I have some small set of unit tests in <code>cstree</code> that has been really helpful. As I made tree nodes <code>Send</code> and <code>Sync</code> again, I've been through a lot of ref count shenanigans between different threads, and used sanitizers extensively. The tests are useful for that, and can also run the sanitizers in CI. The basic tests should be easy to translate back to <code>rowan</code> and the CI config could be used directly if that'd help you</p>",
        "id": 250390727,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1629742874
    },
    {
        "content": "<p><code>cstree</code> doesn't have the cursed mutable trees does it, cause the issue lies in some logic with those</p>",
        "id": 250391133,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629743017
    },
    {
        "content": "<p>So it actually looks like we aren't leaking the inserted children, but the thing we are inserting into(I think) <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 250391259,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629743055
    },
    {
        "content": "<p>No, I've not had enough time to thing about how one would make that work in a threadsafe way (and that's probably a good thing <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>)</p>",
        "id": 250391403,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1629743130
    },
    {
        "content": "<p>but from what I read this seems to likely be a refcount issue, which could be detected earlier in CI sanitizer runs</p>",
        "id": 250391589,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1629743198
    },
    {
        "content": "<p>it is most certainly a ref coutn issue</p>",
        "id": 250391615,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629743212
    },
    {
        "content": "<p>it also happens in a very specfic function only</p>",
        "id": 250391628,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629743218
    },
    {
        "content": "<p>though you'd need tests that exercise the mutability to cover that path</p>",
        "id": 250391629,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1629743218
    },
    {
        "content": "<p>but i cannot figure out the problem</p>",
        "id": 250391644,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629743225
    },
    {
        "content": "<p>and i cant seem to reproduce it in a simple test either <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 250391674,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629743235
    },
    {
        "content": "<p>you mean one specific function of <code>rowan</code> or of r-a processing?</p>",
        "id": 250391982,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1629743357
    },
    {
        "content": "<p>rowan</p>",
        "id": 250392001,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629743362
    },
    {
        "content": "<p>basically all usages of <code>SyntaxNode::splice_children</code> inside RA causes leaks</p>",
        "id": 250392090,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629743395
    },
    {
        "content": "<p>but a simple test with that function doesnt cause it for some reason so there seems to be one more thing to this</p>",
        "id": 250392258,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629743439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Massive.20memory.20regression.20.239979/near/250390561\">said</a>:</p>\n<blockquote>\n<p>Curious -- can we go OOM by running <code>ast::edit::test_increase_indent</code> in a loop?  <code>loop {}</code> is my fav leak detector!</p>\n</blockquote>\n<p>Of course we can!</p>\n<div class=\"codehilite\"><pre><span></span><code>SUMMARY: LeakSanitizer: 944000000 byte(s) leaked in 18000000 allocation(s).\n</code></pre></div>",
        "id": 250392936,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629743707
    },
    {
        "content": "<p>hm <code>detach</code> does indeed increase the <code>rc</code></p>",
        "id": 250393181,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1629743812
    },
    {
        "content": "<p>and <code>attach_child</code> does as well because it calls <code>detach</code></p>",
        "id": 250393229,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1629743832
    },
    {
        "content": "<p>but it does not seem to decrease it again... so what you said earlier does make some sense <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 250393300,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1629743866
    },
    {
        "content": "<p>Decreasing it doesn't work though as I get random crashes or panics <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 250394047,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629744231
    },
    {
        "content": "<p>Thinking a bit more about this, I don't think that is the issue</p>",
        "id": 250394066,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1629744241
    },
    {
        "content": "<p>Ye I have a similar feeling by now</p>",
        "id": 250394118,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629744250
    },
    {
        "content": "<p>but I don't see what else it could be</p>",
        "id": 250394125,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629744255
    },
    {
        "content": "<p>The increased ref count for detached nodes represents a kind of \"external\" reference that is justified by the element's root-ness</p>",
        "id": 250394186,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1629744289
    },
    {
        "content": "<p>(That caching fix wins back 29 MB)</p>",
        "id": 250394189,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629744292
    },
    {
        "content": "<p>Yes but when we attach this new rooted node as a child it should lose that ref again should it not?</p>",
        "id": 250394273,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629744332
    },
    {
        "content": "<p>If you have an element that is a root and you attach it, you loose this root-ness, but you gain a reference from the new parent to the element</p>",
        "id": 250394299,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1629744347
    },
    {
        "content": "<p>so +- 0</p>",
        "id": 250394312,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1629744355
    },
    {
        "content": "<p>hmm right, we point in both directions I suppose</p>",
        "id": 250394438,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629744404
    },
    {
        "content": "<p>In other words, the increased ref count is the regular or normal state, and a decreased count of root elements would be out of the ordinary</p>",
        "id": 250394505,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1629744436
    },
    {
        "content": "<p>Do we <code>self.inc_rc()</code> in <code>attach_child</code> because there's a reference from the child to the current node?</p>",
        "id": 250394529,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629744448
    },
    {
        "content": "<p><code>self</code> is the parent, and children point to the parent so we increase due to the new child pointing to <code>self</code></p>",
        "id": 250394580,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629744472
    },
    {
        "content": "<p>would make sense yeah</p>",
        "id": 250394600,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1629744479
    },
    {
        "content": "<p>Maybe the issue is that sometimes it is wrong to grant elements special root-ness protection?</p>",
        "id": 250395396,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1629744829
    },
    {
        "content": "<p>I'm not familiar from before with the mutability code, since that was after <code>cstree</code>, but <code>splice_children</code> looks like the children it calls <code>detached</code> on are supposed to actually be deleted and go away</p>",
        "id": 250395545,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1629744894
    },
    {
        "content": "<p>direct calls to the public <code>detach</code>s go through a ref to a syntax thing. So <code>NodeData::detach</code> assumes that you are holding onto the detached node</p>",
        "id": 250395751,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1629744980
    },
    {
        "content": "<p>but in case of <code>splice_chidren</code>, you aren't?</p>",
        "id": 250395773,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1629744994
    },
    {
        "content": "<p>In <code>splice_children</code> we are holding onto the original item though in the for loops body</p>",
        "id": 250395905,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629745076
    },
    {
        "content": "<p>the <code>child</code> local is owned</p>",
        "id": 250395944,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629745085
    },
    {
        "content": "<p>will run the thing with <code>attach_child</code> commented out thought, if it still leaks then we know its detach inside splice_children at least</p>",
        "id": 250396039,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629745140
    },
    {
        "content": "<p><span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 250396122,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629745182
    },
    {
        "content": "<p>it actually does still leak</p>",
        "id": 250396131,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629745185
    },
    {
        "content": "<p>oh wait no somethings odd</p>",
        "id": 250396332,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629745255
    },
    {
        "content": "<p>Hmm, I think it might leak only if there's more than one token</p>",
        "id": 250396416,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629745298
    },
    {
        "content": "<p>Okay so it actually does seem to be the detach in <code>splice_children</code></p>",
        "id": 250397008,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629745547
    },
    {
        "content": "<p>with <code>attach_child</code> commented out we still seem to leak the same amount</p>",
        "id": 250397133,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629745585
    },
    {
        "content": "<p>Do you have a test case?</p>",
        "id": 250398489,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629746193
    },
    {
        "content": "<p>This one seems to work for me:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">test_increase_indent</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">whitespace</span><span class=\"p\">(</span><span class=\"n\">text</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">SyntaxToken</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">sf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SourceFile</span>::<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">).</span><span class=\"n\">ok</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">sf</span><span class=\"p\">.</span><span class=\"n\">syntax</span><span class=\"p\">().</span><span class=\"n\">clone_for_update</span><span class=\"p\">().</span><span class=\"n\">first_child_or_token</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">into_token</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">new_ws</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">whitespace</span><span class=\"p\">(</span><span class=\"s\">\" \"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">1000</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">token</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">whitespace</span><span class=\"p\">(</span><span class=\"s\">\" \"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ted</span>::<span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">new_ws</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 250398498,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629746202
    },
    {
        "content": "<p>It leaks exactly 2*1000 + 1 allocations.</p>",
        "id": 250398562,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629746236
    },
    {
        "content": "<p>Oh sweet, I did not have one yet</p>",
        "id": 250398618,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629746270
    },
    {
        "content": "<p>Thought I tried to make one for rowan specifically</p>",
        "id": 250398631,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629746277
    },
    {
        "content": "<p>That number is very sus <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 250399012,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1629746460
    },
    {
        "content": "<p>Sweet that does reproduce in rowan itself</p>",
        "id": 250399638,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629746784
    },
    {
        "content": "<p>Now I can run miri over this</p>",
        "id": 250399842,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629746887
    },
    {
        "content": "<p>and it also reports a leak <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> not sure if this will be helpful, probably not</p>",
        "id": 250399860,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629746897
    },
    {
        "content": "<p>was hoping it might find some unsoundness but it doesnt seem like it</p>",
        "id": 250399918,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629746929
    },
    {
        "content": "<p>But ye this confirms the leak is indeed in detach somewhere</p>",
        "id": 250399952,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629746949
    },
    {
        "content": "<p>Also, if I make a single <code>token</code> and clone it, it only leaks 136 bytes in 3 allocations.</p>",
        "id": 250400093,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629747009
    },
    {
        "content": "<p>Interesting, so the detach leaks 1000 out of 2001 Greenodes and 1000 out of 4003 NodeData</p>",
        "id": 250400570,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629747261
    },
    {
        "content": "<p>while the attach_node leaks a single GreenToken</p>",
        "id": 250400577,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629747270
    },
    {
        "content": "<p>I think we're mainly leaking <code>token</code> there (as opposed to <code>new_ws.clone()</code>)</p>",
        "id": 250400786,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629747379
    },
    {
        "content": "<p>Valgrind points to the allocation done by <code>clone_for_update()</code> for that</p>",
        "id": 250400888,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629747449
    },
    {
        "content": "<p>Ye that one is obvious since this only happens on mutable trees</p>",
        "id": 250401718,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629747860
    },
    {
        "content": "<p><code>clone_for_update</code> is the only location where we create such trees</p>",
        "id": 250401740,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629747872
    },
    {
        "content": "<p>Yeah, it wasn't obvious to me that we weren't (also) leaking the replacement node</p>",
        "id": 250402065,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629748055
    },
    {
        "content": "<p>ah ye, so we seem to have two different leaks here</p>",
        "id": 250402104,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629748076
    },
    {
        "content": "<p>Valgrind puts it like \"definitely lost: 640,000 bytes in 10,000 blocks (the mutable stuff), indirectly lost: 720,000 bytes in 20,000 blocks\"</p>",
        "id": 250402301,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629748148
    },
    {
        "content": "<p>So on each iteration we're leaking one mutable node and two other allocations linked to them. Why two? No idea.</p>",
        "id": 250402364,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629748185
    },
    {
        "content": "<p>so</p>",
        "id": 250402485,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629748241
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">child</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">parent</span><span class=\"p\">.</span><span class=\"n\">children_with_tokens</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">child</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">child</span><span class=\"p\">.</span><span class=\"n\">detach</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>this leaks</p>",
        "id": 250402495,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629748248
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">old</span><span class=\"p\">.</span><span class=\"n\">detach</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n<p>this doesnt</p>",
        "id": 250402504,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629748255
    },
    {
        "content": "<p>oh, just iterating <code>children_with_tokens</code> leaks already</p>",
        "id": 250402584,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629748314
    },
    {
        "content": "<p>not the detach</p>",
        "id": 250402595,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629748321
    },
    {
        "content": "<p>does <code>token_at_offset</code> leak?</p>",
        "id": 250402889,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1629748486
    },
    {
        "content": "<p>that's the only other place that uses that</p>",
        "id": 250402905,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1629748501
    },
    {
        "content": "<p>Oh, you don't even have to iterate over it.</p>",
        "id": 250403050,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629748565
    },
    {
        "content": "<p>Ye jsut noticed that too</p>",
        "id": 250403076,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629748581
    },
    {
        "content": "<p>Then it's from <code>first_child_or_token</code></p>",
        "id": 250403217,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629748657
    },
    {
        "content": "<p>Yep, trying to figure out where it touches the rc though</p>",
        "id": 250403242,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629748668
    },
    {
        "content": "<p>ah the NodeData constructor has a special branch that modifies it for when its mutable</p>",
        "id": 250403435,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629748743
    },
    {
        "content": "<p>Found the issue</p>",
        "id": 250405890,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629749976
    },
    {
        "content": "<p>or at least one</p>",
        "id": 250405893,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629749977
    },
    {
        "content": "<p>finally</p>",
        "id": 250405894,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629749978
    },
    {
        "content": "<p>do tell</p>",
        "id": 250408354,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1629751203
    },
    {
        "content": "<p>Still working on properly fixing it but I think this is the entire problem</p>",
        "id": 250408819,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629751434
    },
    {
        "content": "<p>one sec</p>",
        "id": 250408820,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629751435
    },
    {
        "content": "<p><a href=\"https://github.com/Veykril/rowan/blob/ea763c97c64830c4f16016d5e9576ee2efd9d5f5/src/cursor.rs#L222-L271\">https://github.com/Veykril/rowan/blob/ea763c97c64830c4f16016d5e9576ee2efd9d5f5/src/cursor.rs#L222-L271</a></p>",
        "id": 250408878,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629751446
    },
    {
        "content": "<p>We are leaking <code>parent: Option&lt;SyntaxNode&gt;</code> in the mutable path</p>",
        "id": 250408904,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629751460
    },
    {
        "content": "<p>the <code>Box::from_raw(res);</code> only prevents the heap alloc from being leaked</p>",
        "id": 250408941,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629751491
    },
    {
        "content": "<p>but the code doesnt run the syntaxnode destructor</p>",
        "id": 250408958,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629751499
    },
    {
        "content": "<p>Okay running RA with a fix now lets see if this works</p>",
        "id": 250409163,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629751601
    },
    {
        "content": "<p><span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
        "id": 250409165,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629751603
    },
    {
        "content": "<p>I somehow completely overlooked that <code>ManuallyDrop</code> lol</p>",
        "id": 250409293,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1629751681
    },
    {
        "content": "<p>same I looked at this pretty early Im pretty sure</p>",
        "id": 250409354,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629751691
    },
    {
        "content": "<p>the Box::from_raw made it look like all is well</p>",
        "id": 250409363,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629751696
    },
    {
        "content": "<p>dammit gotta restart the compilation forgot my debug prints</p>",
        "id": 250409452,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629751747
    },
    {
        "content": "<p>yeah also cause the struct init looks like, well, just some struct init, and one assumes the interesting stuff is in the <code>unsafe</code></p>",
        "id": 250409460,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1629751751
    },
    {
        "content": "<p>Really aint fun when you have to rebuild 20 crates for this</p>",
        "id": 250409476,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629751763
    },
    {
        "content": "<p>Ye the code looks completely fine unfortunately</p>",
        "id": 250409507,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629751782
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>hir_def::item_scope::ItemScope                                                                   3_503        3_503            0\nhir_def::item_tree::ItemTree                                                                    33_922       33_922            0\nhir_def::nameres::DefMap                                                                           606          606            0\nhir_expand::ast_id_map::AstIdMap                                                                33_988       33_929            0\nrowan::green::node::GreenNode                                                                7_234_717      601_467            0\nrowan::green::token::GreenToken                                                              3_185_267      407_472            0\nrowan::utility_types::NodeOrToken&lt;rowan::cursor::SyntaxNode, rowan::cursor::SyntaxToken&gt;    83_766_530       30_383            0\n                                                                                                 total     max_live         live\n</code></pre></div>",
        "id": 250409703,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629751871
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 250409759,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629751900
    },
    {
        "content": "<p>Are you running the same thing as before? The totals are much lower (7/3M vs. 11/5).</p>",
        "id": 250410049,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629752031
    },
    {
        "content": "<p>that is on the commit of this PR</p>",
        "id": 250410269,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629752144
    },
    {
        "content": "<p>And Im not using the newest rowan i think</p>",
        "id": 250410362,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629752171
    },
    {
        "content": "<p><span aria-label=\"popcorn\" class=\"emoji emoji-1f37f\" role=\"img\" title=\"popcorn\">:popcorn:</span></p>",
        "id": 250410379,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629752179
    },
    {
        "content": "<p>im missing matklads latest commit I think?</p>",
        "id": 250410381,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629752179
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>hir_def::item_scope::ItemScope           3_504        3_504            0\nhir_def::item_tree::ItemTree            33_924       33_924            0\nhir_def::nameres::DefMap                   606          606            0\nhir_expand::ast_id_map::AstIdMap        33_990       33_931            0\nrowan::cursor::_SyntaxElement       83_602_911       30_383            0\nrowan::green::node::GreenNode        6_158_073      542_569            0\nrowan::green::token::GreenToken      2_151_427      319_055            0\n                                         total     max_live         live\n</code></pre></div>",
        "id": 250411509,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629752652
    },
    {
        "content": "<p>with newest rowan master</p>",
        "id": 250411512,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629752655
    },
    {
        "content": "<p>It looks great, but I don't understand why so much fewer nodes than before</p>",
        "id": 250411852,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629752827
    },
    {
        "content": "<p>I'm not sure I understand, I was having 7/3 mil before as well</p>",
        "id": 250412127,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629752971
    },
    {
        "content": "<p>oh huh not at the very beginning</p>",
        "id": 250412161,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629752992
    },
    {
        "content": "<p>oh</p>",
        "id": 250412173,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629752999
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 250412219,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629753006
    },
    {
        "content": "<p>the 5/11 was with crates io pre 13 rowan</p>",
        "id": 250412260,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629753027
    },
    {
        "content": "<p>the 3/7 was with 13.0 rowan</p>",
        "id": 250412282,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629753037
    },
    {
        "content": "<p>and 2/6 is with 13.1</p>",
        "id": 250412287,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629753041
    },
    {
        "content": "<p>Actually the first numbers might be due to me running inference there still?</p>",
        "id": 250412711,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629753235
    },
    {
        "content": "<p>Maybe. I don't think these any difference between pre.8 and 13.0</p>",
        "id": 250413192,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629753421
    },
    {
        "content": "<p>Ye pre8 and 13.0 dont really have differences</p>",
        "id": 250413406,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629753543
    },
    {
        "content": "<p>Want to bump the RA dep?</p>",
        "id": 250413610,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629753648
    },
    {
        "content": "<p>about to</p>",
        "id": 250413841,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629753768
    },
    {
        "content": "<p>had to fight git just now because it wasn't agreeing with me</p>",
        "id": 250413875,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629753794
    },
    {
        "content": "<p>Thanks a lot for that small repro btw, that was immensely helpful in figuring this out <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 250413979,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629753850
    },
    {
        "content": "<p>Yeah, looks like I'm spending a bit of time minimizing test cases. But great find there, I don't think I would have noticed it.</p>",
        "id": 250414180,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629753953
    },
    {
        "content": "<p>Excited to see the memory usage after this now</p>",
        "id": 250414350,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629754034
    },
    {
        "content": "<p>This + the aching fix should give us quite some improvements again, especially since we were already leaking memory due to this bug for attributes</p>",
        "id": 250414381,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629754058
    },
    {
        "content": "<p>and assists were leaking memory as well on each use due to this</p>",
        "id": 250414412,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629754076
    },
    {
        "content": "<p>Probably back to what it was before, plus some 29 MB from the caching</p>",
        "id": 250414418,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629754080
    },
    {
        "content": "<p>This should claim back a bit more  since attributes node rewriting already used the buggy code, but ye I guess not too much since attributes arent used as much</p>",
        "id": 250414759,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629754252
    },
    {
        "content": "<p>We are down to 1018mb now <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 250418462,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1629756460
    },
    {
        "content": "<p>And we pass LSAN</p>",
        "id": 250444060,
        "sender_full_name": "Laurențiu",
        "timestamp": 1629783091
    }
]