[
    {
        "content": "<p>So, I have been recently thinking of trying to come up with a rust code analyzer for one of my projects and I am wondering if I could adopt rust-analyzer code.  I need to analyze only the actual code (not deps), I probably want to edit some stuff and reconstruct the code back again (so need to preserve whitespace in the AST), I need the types of stuff so that analysis can be done on types too.</p>",
        "id": 194027227,
        "sender_full_name": "pksunkara",
        "timestamp": 1586956400
    },
    {
        "content": "<p>I suggest trying to fork rust-analyzer, and implement the analysis as an assist</p>",
        "id": 194030608,
        "sender_full_name": "matklad",
        "timestamp": 1586957655
    },
    {
        "content": "<p>That's the easiest way to experiment with analysis and transformation</p>",
        "id": 194030639,
        "sender_full_name": "matklad",
        "timestamp": 1586957670
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> . Will do that.</p>",
        "id": 194030932,
        "sender_full_name": "pksunkara",
        "timestamp": 1586957791
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>  I started trying to do this and as far as I understand, assists need the cursor to be somewhere. I want to do a visitor kind of thing for the tree. Do I continue with this part of the code by changing stuff? Or should I explore other way I can do this?</p>",
        "id": 194690697,
        "sender_full_name": "pksunkara",
        "timestamp": 1587396250
    },
    {
        "content": "<p>You are correct, that assist starts from a cursor. </p>\n<p>Still, I would start with an assist, to see if the underlying analysis/editing API is enough for your use-case. If it is enough, it should be possible to re-rail the implementation onto a visitor. But we currently don't have a vistor-based infra, so it would be significantly more work to add it</p>",
        "id": 194691200,
        "sender_full_name": "matklad",
        "timestamp": 1587396424
    },
    {
        "content": "<p>Yeah, that is exactly what I was thinking. Looks like the editing API looks enough (or easy to enhance). I will work on this a bit more. And this is also making me understand RA code more which means I can contribute some fixes to IDE issues that were annoying me :D</p>",
        "id": 194691453,
        "sender_full_name": "pksunkara",
        "timestamp": 1587396525
    },
    {
        "content": "<p>Actually, I think our assist infra could use some improvement. </p>\n<p>Running assists/inspections in batch on the code base is something we want to do eventually. And for that, we need an API which can work both from text cursor and from tree visitor. Good food for thought, thanks!</p>",
        "id": 194692047,
        "sender_full_name": "matklad",
        "timestamp": 1587396746
    },
    {
        "content": "<p>I agree. Basically, we are working on releasing Clap v3. And I want to create a tool that would automate the upgrade from v2 to v3 so that users can just run one command and their code is now upgraded to use clap v3. <a href=\"https://github.com/pksunkara/cargo-up\" title=\"https://github.com/pksunkara/cargo-up\">https://github.com/pksunkara/cargo-up</a>. And this can be made generic for all crates</p>",
        "id": 194692411,
        "sender_full_name": "pksunkara",
        "timestamp": 1587396870
    },
    {
        "content": "<p>Ah yeah, long term I'd really love to see kotlin-style reprecated, replaceWith to automate library upgrades.</p>",
        "id": 194692802,
        "sender_full_name": "matklad",
        "timestamp": 1587397005
    },
    {
        "content": "<p>At the moment, I think it would be ok to pin rust-analyzer to a specific commit and implement such a tool on top of a \"frozen\" API. Sadly, I think there currently isn't an API stable enough to guaranteed that the tool would work across different ra versions. </p>\n<p>You might also take a look at <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/ssr.rs\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/ssr.rs\">ssr</a>, which might be relevant to your use-case</p>",
        "id": 194693135,
        "sender_full_name": "matklad",
        "timestamp": 1587397158
    },
    {
        "content": "<p>Another exapmle of tree-walking is here: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/2e0b7b0159ed922693db48f3f94ed95b1827494a/crates/ra_ide/src/diagnostics.rs#L45-L48\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/2e0b7b0159ed922693db48f3f94ed95b1827494a/crates/ra_ide/src/diagnostics.rs#L45-L48\">https://github.com/rust-analyzer/rust-analyzer/blob/2e0b7b0159ed922693db48f3f94ed95b1827494a/crates/ra_ide/src/diagnostics.rs#L45-L48</a></p>",
        "id": 194694901,
        "sender_full_name": "matklad",
        "timestamp": 1587397907
    },
    {
        "content": "<p>I was talking about this to someone else and wanted to also paste this here.</p>\n<p>So, I am trying to build a small visitor for code analysis. Visitor will be working on code that is written as is. So, macros will not be expanded. But you will also have access to the types of every expression, item, etc.. (which is resolved after expanding macros). <code>rust-analyzer</code> have the syntax AST ready, and it also have types information for the whole project.</p>\n<p>Why the type information is important for the analysis? Regarding the <code>cargo-up</code> I linked above, let's assume <code>clap::Arg</code> has changed it's method <code>help</code> to <code>about</code>. If we are running the tool on the following code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">clap</span>::<span class=\"n\">Arg</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">&quot;a&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">help</span><span class=\"p\">(</span><span class=\"s\">&quot;help message&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Without the type information, you can't recognise that <code>help</code> needs to be changed to <code>about</code>. With type info, we know that <code>a</code> is of type <code>clap::Arg</code>. So, the <code>cargo-up</code> visitor when visiting <code>method_call</code> can be something like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">&quot;help&quot;</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"k\">type</span> <span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">&quot;clap::Arg&quot;</span><span class=\"w\">  </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">&quot;about&quot;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I am currently trying to get a small MVP of the visitor working</p>",
        "id": 195174113,
        "sender_full_name": "pksunkara",
        "timestamp": 1587727031
    },
    {
        "content": "<p>we also provide the actual resolved method, using that would be more accurate than checking name and type in some edge cases</p>",
        "id": 195175409,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1587728044
    },
    {
        "content": "<p>actually not even edge cases, your approach would already have problems with autoref/deref (i.e. what if it's a <code>&amp;self</code> method and the expression type is <code>&amp;clap::Arg</code>? what if the expression type is <code>&amp;&amp;&amp;clap::Arg</code> or <code>Arc&lt;clap::Arg&gt;</code>?)</p>",
        "id": 195175907,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1587728422
    },
    {
        "content": "<p>That's actually really helpful. I am still going through the rust-analyzer code. I would appreciate it if you could point that stuff out</p>",
        "id": 195176069,
        "sender_full_name": "pksunkara",
        "timestamp": 1587728543
    },
    {
        "content": "<p>in the <code>Semantics</code> API, you've got <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/edd6f91cab77c4fabf449a50f4f65e4761c98ca4/crates/ra_hir/src/semantics.rs#L183\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/edd6f91cab77c4fabf449a50f4f65e4761c98ca4/crates/ra_hir/src/semantics.rs#L183\"><code>resolve_method_call</code></a>, which will give you the resolved <code>Function</code>, so then you'd just have to have some way of getting the <code>Function</code> you actually want to replace</p>",
        "id": 195176498,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1587728840
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> I got a basic visitor working, but unfortunately I am stuck trying to load the semantics. Looks like <code>load_cargo</code> which I am using to load the code isn't loading <code>library_roots</code>. Really appreciate some direction here</p>",
        "id": 196245373,
        "sender_full_name": "pksunkara",
        "timestamp": 1588629833
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254853\">@pksunkara</span> I'd probably start with looking <code>analysis_stats</code> -- it also uses <code>load_cargo</code>, and it does work with dependencies</p>",
        "id": 196280719,
        "sender_full_name": "matklad",
        "timestamp": 1588667906
    },
    {
        "content": "<p>Okay, thanks</p>",
        "id": 196280963,
        "sender_full_name": "pksunkara",
        "timestamp": 1588668069
    },
    {
        "content": "<p>So, <code>load_cargo</code> does load the dependency source roots, but it doesn't set them as <code>library_roots</code> which led me to the original confusion. <code>library_roots</code> is only set in the <code>WorldState</code> related logic. I got the semantics working though, turns out I need to do an additional <code>semantics.parse</code> for the file I am visiting.</p>",
        "id": 196594661,
        "sender_full_name": "pksunkara",
        "timestamp": 1588748764
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> Hey, thanks for the help. I was able to get the module name <code>clap::arg</code> and fn name <code>help</code> from the <code>Function</code>, but I am stumped on how to get the struct <code>Arg</code> for it, since the function is a method call on <code>clap::arg::Arg</code>. Am I missing something?</p>",
        "id": 196600554,
        "sender_full_name": "pksunkara",
        "timestamp": 1588752660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254853\">@pksunkara</span> is this while looking at the method call, or at the definition? i.e. why do you need to get the struct?</p>",
        "id": 196600972,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1588752809
    },
    {
        "content": "<p>While looking at the method call. I want to get the full path of the definition</p>",
        "id": 196600999,
        "sender_full_name": "pksunkara",
        "timestamp": 1588752834
    },
    {
        "content": "<p>There might be <code>clap::arg::Arg::help(&amp;self)</code> and <code>clap::arg::Arg2::help(&amp;self)</code>. How would I differentiate?</p>",
        "id": 196601142,
        "sender_full_name": "pksunkara",
        "timestamp": 1588752899
    },
    {
        "content": "<p>I am looking at how the hover hints in vscode work. If I hover on method_call, they have the full path (including the struct) and then the function docs.</p>",
        "id": 196601246,
        "sender_full_name": "pksunkara",
        "timestamp": 1588752960
    },
    {
        "content": "<p>my suggestion would be to find the <code>Function</code> you want to replace first, for example by walking down the modules in the clap crate to the impl and looking for the function in the impl by name. And then you can just compare the resolved <code>Function</code> with the one you looked up</p>",
        "id": 196601534,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1588753141
    },
    {
        "content": "<p>but you can also go from the <code>Function</code> to the containing <code>ImplDef</code> using <code>as_assoc_item</code> and then <code>container</code></p>",
        "id": 196601680,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1588753213
    },
    {
        "content": "<p>and then the <code>ImplDef</code> has a <code>target_ty</code></p>",
        "id": 196601772,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1588753275
    },
    {
        "content": "<blockquote>\n<p>walking down the modules in the clap crate to the impl and looking for the function in the impl by name</p>\n</blockquote>\n<p>I would prefer not to do it because we are not actually changing the libraries code, but only the user written code</p>",
        "id": 196601774,
        "sender_full_name": "pksunkara",
        "timestamp": 1588753275
    },
    {
        "content": "<p>But if I need a reference to the original implementation so that I can compare them, I guess I can do it.</p>",
        "id": 196601803,
        "sender_full_name": "pksunkara",
        "timestamp": 1588753312
    },
    {
        "content": "<p>I don't mean changing that code, just finding the right <code>Function</code> so you know what you're looking for</p>",
        "id": 196601811,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1588753317
    },
    {
        "content": "<p>if you go from the resolved <code>Function</code> to the impl to the type, you still have to determine somehow whether that's the type you were looking for</p>",
        "id": 196601945,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1588753400
    },
    {
        "content": "<blockquote>\n<p>you still have to determine somehow whether that's the type you were looking for</p>\n</blockquote>\n<p>I don't think that's an issue, because I am doing it inside a visitor pattern and this feels correct way to me</p>",
        "id": 196601996,
        "sender_full_name": "pksunkara",
        "timestamp": 1588753443
    },
    {
        "content": "<p>I mean, finding the type to compare to is just about as complicated as finding the function, you've just taken more steps to get there</p>",
        "id": 196602212,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1588753611
    },
    {
        "content": "<p>Definitely, both approaches work. I will keep it in mind. Thanks for the help.</p>",
        "id": 196602415,
        "sender_full_name": "pksunkara",
        "timestamp": 1588753748
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> Got this successfully working with minor visibility changes in rust_analyzer. <a href=\"https://github.com/pksunkara/cargo-up/blob/master/src/main.rs#L12\" title=\"https://github.com/pksunkara/cargo-up/blob/master/src/main.rs#L12\">https://github.com/pksunkara/cargo-up/blob/master/src/main.rs#L12</a>. What do you want me to do? Should I send PRs to add <code>ra_visitor</code>?</p>",
        "id": 196620759,
        "sender_full_name": "pksunkara",
        "timestamp": 1588764802
    }
]