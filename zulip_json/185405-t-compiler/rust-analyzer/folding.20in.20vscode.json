[
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> are you available for a quick chat on <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/2033\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/2033\">https://github.com/rust-analyzer/rust-analyzer/issues/2033</a> ?</p>",
        "id": 178660559,
        "sender_full_name": "ztlpn",
        "timestamp": 1571668239
    },
    {
        "content": "<p>yeah!</p>",
        "id": 178660656,
        "sender_full_name": "matklad",
        "timestamp": 1571668310
    },
    {
        "content": "<p>Nice, so it turns out folding in vscode is pretty terrible with complaints going all the way to 2016 :) Basically it will slurp up the full last line of the folding range. First thing I tried was excluding it unconditionally - but the downside is that folds of modules and comments start looking really strange. Second idea - exclude the last line only if the folding range ends somewhere before the line end. This kind of works (see <a href=\"https://github.com/ztlpn/rust-analyzer/commit/173ac3d367e26c4ceb20f24b62e25f78a94e4517\" target=\"_blank\" title=\"https://github.com/ztlpn/rust-analyzer/commit/173ac3d367e26c4ceb20f24b62e25f78a94e4517\">https://github.com/ztlpn/rust-analyzer/commit/173ac3d367e26c4ceb20f24b62e25f78a94e4517</a>) modulo corner cases like trailing whitespace. Today I had another idea - add a field named something like <code>next_non_whitespace_elt_start</code> to <code>struct Fold</code> and calculate it along with the folding regions (where the full syntax tree is available). Seems a bit strange to do it only for that purpose but looks like it is the cleanest way. What do you think?</p>",
        "id": 178661345,
        "sender_full_name": "ztlpn",
        "timestamp": 1571668774
    },
    {
        "content": "<p>Interesting!</p>\n<p>I think it's not the best choice to put \"this this otherwise blank line?\" logic to the code that computes folding regions themselves. THe code in ra_ide_api is expcted to be independent of the LSP layer. That is, the hope is that it will be usable even without LSP.</p>\n<p>So, unless it is absolutely horrible, I would prefer to do this calculation in the conv layer. One thing which might help here is to actually pass in the text of the file to conv? That way, you can do something like <code>text[fold..].chars().take_while(|it| it !='\\n').filter(|it| !it.is_whitespace()).count() &gt; 0</code></p>",
        "id": 178661863,
        "sender_full_name": "matklad",
        "timestamp": 1571669056
    },
    {
        "content": "<p>And I think that we want to check if fold is also the <em>start</em> of the line?</p>",
        "id": 178661986,
        "sender_full_name": "matklad",
        "timestamp": 1571669148
    },
    {
        "content": "<p>but in general, patch <a href=\"https://github.com/ztlpn/rust-analyzer/commit/173ac3d367e26c4ceb20f24b62e25f78a94e4517\" target=\"_blank\" title=\"https://github.com/ztlpn/rust-analyzer/commit/173ac3d367e26c4ceb20f24b62e25f78a94e4517\">https://github.com/ztlpn/rust-analyzer/commit/173ac3d367e26c4ceb20f24b62e25f78a94e4517</a> looks good to me</p>",
        "id": 178662078,
        "sender_full_name": "matklad",
        "timestamp": 1571669182
    },
    {
        "content": "<p>Like, it's not the most pleasant code I've seen, but it is restricted strictly to this thin conversion layer, so supporting it shouldn't be too bad.</p>",
        "id": 178662144,
        "sender_full_name": "matklad",
        "timestamp": 1571669238
    },
    {
        "content": "<p>Huh... I didn't realize that folding range took line endings into account</p>",
        "id": 178662297,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1571669364
    },
    {
        "content": "<blockquote>\n<p>One thing which might help here is to actually pass in the text of the file to conv?</p>\n</blockquote>\n<p>Yeah, that would help. The question is - how to get it? A separate query?</p>",
        "id": 178662393,
        "sender_full_name": "ztlpn",
        "timestamp": 1571669413
    },
    {
        "content": "<p>Yeah, that's one bit that seemed a little eyebrow-rasing for me. I think if we switch to looking at the text directly, than we wouldn't need to look at line endings</p>",
        "id": 178662422,
        "sender_full_name": "matklad",
        "timestamp": 1571669448
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245627\">@ztlpn</span> <code>Analysis::file_text</code></p>",
        "id": 178662452,
        "sender_full_name": "matklad",
        "timestamp": 1571669473
    },
    {
        "content": "<p>Ok, good</p>",
        "id": 178662507,
        "sender_full_name": "ztlpn",
        "timestamp": 1571669513
    },
    {
        "content": "<p>Another question - how do I test it?</p>",
        "id": 178662564,
        "sender_full_name": "ztlpn",
        "timestamp": 1571669529
    },
    {
        "content": "<p>heavy test seems a bit, well, heavy</p>",
        "id": 178662594,
        "sender_full_name": "ztlpn",
        "timestamp": 1571669557
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245627\">@ztlpn</span> in general, we don't test conv layer heavily: what matters is how the over side interprets converted things, so tests are not super-helpful in that case.</p>\n<p>Here', I'd extract this into a helper function and test that</p>\n<div class=\"codehilite\"><pre><span></span>fn fixup_folding_ranges_for_editors_which_cant_fold_lines_partially(\n    folds: &amp;mut [Fold],\n    file_text: &amp;str\n) {\n    ....\n}\n</pre></div>",
        "id": 178662790,
        "sender_full_name": "matklad",
        "timestamp": 1571669681
    },
    {
        "content": "<p>Sure</p>",
        "id": 178663083,
        "sender_full_name": "ztlpn",
        "timestamp": 1571669858
    },
    {
        "content": "<p>Thanks</p>",
        "id": 178663086,
        "sender_full_name": "ztlpn",
        "timestamp": 1571669861
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245627\">@ztlpn</span> this might be confusing, so let me explicitelly mention just in case: the text you get from  <code>file_text</code> is guaranteed to contain only  <code>\\n</code> line endings</p>",
        "id": 178663765,
        "sender_full_name": "matklad",
        "timestamp": 1571670237
    },
    {
        "content": "<p>Good to know, but I think in this case it doesn't matter? '\\r' is whitespace too :)</p>",
        "id": 178664122,
        "sender_full_name": "ztlpn",
        "timestamp": 1571670419
    },
    {
        "content": "<p>Yeah, it shouldn't matter</p>",
        "id": 178664310,
        "sender_full_name": "matklad",
        "timestamp": 1571670543
    }
]