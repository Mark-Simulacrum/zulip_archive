[
    {
        "content": "<p>I'm working on <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/11531\">https://github.com/rust-analyzer/rust-analyzer/pull/11531</a> and Veykril wants it to only ignore <code>doc(hidden)</code> variants if the enum is defined in a different crate, which I think makes a lot of sense. However that makes it a little difficult to test, since all the current tests have the enum defined in the same crate, and I don't know if there's any way to inject code to be included as a separate crate for the purposes of the test? I could use std enums, but that makes it less consistent, especially for the non_exhaustive, which std can still change, and updating the tests would be a pain.</p>\n<p>I was optionally considering only expanding the <code>doc(hidden)</code> variants if the enum is defined higher in the module tree, but that may be too restrictive to be useful?</p>",
        "id": 272971299,
        "sender_full_name": "Ole Strohm",
        "timestamp": 1645633074
    },
    {
        "content": "<p>here's an example of an assist test with multiple crates: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/1f5f4ccfb1fe517278f5c093e55528d23d9cd1c7/crates/ide_assists/src/handlers/auto_import.rs#L1046-L1070\">https://github.com/rust-analyzer/rust-analyzer/blob/1f5f4ccfb1fe517278f5c093e55528d23d9cd1c7/crates/ide_assists/src/handlers/auto_import.rs#L1046-L1070</a><br>\nyou use those <code>//-</code> comments to declare different files and which crates they belong to</p>",
        "id": 272972027,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1645633371
    },
    {
        "content": "<blockquote>\n<p>I could use std enums, but that makes it less consistent, especially for the non_exhaustive, which std can still change, and updating the tests would be a pain.</p>\n</blockquote>\n<p>Note that test fixtures cannot see or use the std library<br>\n(on that note I wonder if we can make text fixtures somewhat smart by panicking if it looks like someone tries to use an std item, since this is an assumption people tend to have about tests)</p>",
        "id": 272972542,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1645633607
    },
    {
        "content": "<p>Thank you so much, that's a really good example!<br>\nThat makes sense, I did just now try to make one using an std enum, and it silently told me that the assist was not applicable, which was a little confusing, but I did figure quite quickly that it simply doesn't have access to std, because I realized that it makes more sense, but yeah idk</p>",
        "id": 272974905,
        "sender_full_name": "Ole Strohm",
        "timestamp": 1645634576
    }
]