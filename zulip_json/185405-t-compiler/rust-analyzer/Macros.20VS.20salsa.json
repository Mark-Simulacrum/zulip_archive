[
    {
        "content": "<p>I've rewritten name resolution to account for macros, and there's this curious bit of code there:</p>\n<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/2a6544f906818263e2791bc4cdf4fcbdf7260ab9/crates/ra_hir/src/nameres/collector.rs#L343-L350\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/2a6544f906818263e2791bc4cdf4fcbdf7260ab9/crates/ra_hir/src/nameres/collector.rs#L343-L350\">https://github.com/rust-analyzer/rust-analyzer/blob/2a6544f906818263e2791bc4cdf4fcbdf7260ab9/crates/ra_hir/src/nameres/collector.rs#L343-L350</a></p>\n<p>I wonder if we can get some help from salsa to make this better. </p>\n<p>The problem is hard to explain, but the components are as follows:</p>\n<ul>\n<li>we don't want to eagarly expand each and every macro up-front, we need an ability to \"expand this particular macro\"  \"later\"</li>\n<li>so, we need a query <code>expand(MacroCall) -&gt; SyntaxTree</code>, where <code>MacroCall</code> is a particular instance of <code>foo!()</code> syntax somewhere, and <code>SyntaxTree</code> is what this call expands to (which depends on what does the name<code> foo</code> means in the context of macro call)</li>\n<li>we need to exapand at least <em>some</em> of the macros during nameresolution</li>\n</ul>\n<p>Because nameres is just a single query, we can't call <code>expand</code> query: <code>expand</code> calls back into name resolution to figure out the definition of macro.  So, during <code>nameres</code> we basically call <code>expand</code> query function directly, bypassing salsa. </p>\n<p>This is bad for two reasons:</p>\n<ul>\n<li>we must manually make sure that query and no-query versions give the same result (which kinda defeats salsa's \"correct by construction\" memoization)</li>\n<li>we can't play tricks like \"if the macro expands to the same set of items (even if their bodies are different), we can reuse old name resolution\"</li>\n</ul>\n<p>I wonder if we can do better here...</p>",
        "id": 161433043,
        "sender_full_name": "matklad",
        "timestamp": 1553247390
    },
    {
        "content": "<p>the comment there says \"we can't identify macro_call without adding the whole state of name resolution as a parameter to the query\"</p>",
        "id": 161446126,
        "sender_full_name": "pnkfelix",
        "timestamp": 1553260341
    },
    {
        "content": "<p>would some <del>subset</del> substructure of the name resolution state suffice? Would identifying that subset and factoring it out help?</p>",
        "id": 161446170,
        "sender_full_name": "pnkfelix",
        "timestamp": 1553260400
    },
    {
        "content": "<p>So, if we literally add \"the set of defined macros\" to the query, than we'll need to do a lot of hashing/comparisions to find the key in the hash map. I think even if we compress this, it's still would be a huge value, not really fit for being a salsa's key.</p>",
        "id": 161446587,
        "sender_full_name": "matklad",
        "timestamp": 1553260761
    },
    {
        "content": "<p>It would be interesting to somehow to try to add this state implicitly. For example, instead of passing the literal set of scopes, we can pass the integer stage of name resolution (that idea with explicit fixed point)</p>",
        "id": 161446695,
        "sender_full_name": "matklad",
        "timestamp": 1553260859
    },
    {
        "content": "<p>hmm. its huge because it wouldn't be just the macros names (or unique identifiers), but also their definitions?</p>",
        "id": 161448231,
        "sender_full_name": "pnkfelix",
        "timestamp": 1553262087
    },
    {
        "content": "<p>or are you saying that even just a set of unique id's is not an appropriate salsa key?</p>",
        "id": 161448245,
        "sender_full_name": "pnkfelix",
        "timestamp": 1553262107
    },
    {
        "content": "<p>it wouldn't be only macros, because macro might be called with a path <code>log::error!()</code>.  Here, the state should include enough info to understand what <code>log</code> is</p>",
        "id": 161448343,
        "sender_full_name": "matklad",
        "timestamp": 1553262185
    },
    {
        "content": "<p>If we do include state, the other problem would be that the code outside of name resolution would probaly want to use the final state anyway.</p>\n<p>That is, code inside nameres calls:</p>\n<p>expand_macro(currest_scopes, foo)</p>\n<p>Code outside of nameres calls:</p>\n<div class=\"codehilite\"><pre><span></span>expand_macro(final_scopes, foo)\n</pre></div>\n\n\n<p>So, these are two queries, and we must ensure manually that they give the same result (which probably means that <code>current_scopes</code> is subset of <code>final_scopes</code>).</p>",
        "id": 161448540,
        "sender_full_name": "matklad",
        "timestamp": 1553262349
    },
    {
        "content": "<p>I think some kind of dataflow or fixpoint computation support from salsa will be necessary to properly solve this</p>",
        "id": 161448834,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1553262522
    },
    {
        "content": "<p>indeed, ping <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> :)</p>",
        "id": 161448895,
        "sender_full_name": "matklad",
        "timestamp": 1553262569
    },
    {
        "content": "<p>So, the way I've been expecting to solve this in the case of trait resolution</p>",
        "id": 161457824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553268627
    },
    {
        "content": "<p>Is to pull that sort of \"dataflow/fixed-point\" state out into a separate mechanism</p>",
        "id": 161457829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553268636
    },
    {
        "content": "<p>Specifically, I was intending to have a volatile query</p>",
        "id": 161457835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553268648
    },
    {
        "content": "<p>Which creates the state</p>",
        "id": 161457838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553268653
    },
    {
        "content": "<p>and then other queries that reach into that state to get their result</p>",
        "id": 161457849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553268665
    },
    {
        "content": "<p>therefore, in a new revision, all of those dependent queries will be invalidated, and the state will be recomputed from scratch</p>",
        "id": 161457862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553268676
    },
    {
        "content": "<p>Basically, this doesn't fit salsa's \"tree-based\" model</p>",
        "id": 161457877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553268692
    },
    {
        "content": "<p>I do think it might be plausible to extend salsa to accommodate richer cases, but I feel like I want to have a few examples</p>",
        "id": 161457888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553268705
    },
    {
        "content": "<p>before we start to generalize</p>",
        "id": 161457891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553268708
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> has often mentioned building on the way that GLL handles cycles here to do a better job; I confess I don't really understand what they're proposing yet, but I would like to)</p>",
        "id": 161457954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553268730
    },
    {
        "content": "<p>That said, I remain a bit nervous -- e.g., within chalk, the way to handle cycles that occur in trait resolution <em>depends on the trait</em></p>",
        "id": 161457983,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553268759
    },
    {
        "content": "<p>i.e., I  don't know that there is a \"one size fits all\" answer here</p>",
        "id": 161458011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553268781
    },
    {
        "content": "<p>and maybe that's fine, but I'd like to have a better picture of the \"menu\"</p>",
        "id": 161458034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553268790
    },
    {
        "content": "<p>so maybe <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> we should step back and talk about -- ignoring salsa for a second -- can we build up a manually incremental state that salsa can query into, but where we can reason about the correctness?</p>",
        "id": 161458058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553268818
    },
    {
        "content": "<p>This is exactly the work I imagined doing as part of the name resolution crate, and I have some thoughts about it, but it'd be helpful to have a bit of an abstract specification for how things <em>should</em> work</p>",
        "id": 161458078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553268840
    },
    {
        "content": "<p>(I definitely <em>don't</em> think that expanding salsa's keys with the state -- which basically memoizes all the steps towards convergence -- feels right.)</p>",
        "id": 161458478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553269106
    },
    {
        "content": "<p>Maybe <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> it'd be helpful to schedule some time to dig into this in more depth? Feels like a good topic for a zoom call (recorded, naturally ;).</p>",
        "id": 161458525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553269153
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yeah, a zoom call seems like a good idea. </p>\n<p>My current thoughts is that this is not necessary about fixed-point iteration queries per se.  The problem here is that you can't assign IDs based on the current computation. I have a rough idea about a toy example which shows this problem but which doesn't involve fixed point queries. This toy example seems to be  fixed by making queries more fine-grained though, and fixed-point is why we can't apply this strategy in the resolution case. </p>\n<p>I've been thinking about \"monotone queries\" to handle this. Let's say that we have a big query Q which computes a map, with the constraint that it never overwrites entries in the map. As Q is being computed, it calls some sub queries. I think it could be sound to allow these sub queries to peek into the in-progress map. </p>\n<p>So, let's say Q calls into X, which uses info from partially constructed Q and an input t. We call Q in the current state, which computes the full map, invoking X in the process. X observes partial mapping. Now let's change the input t. I think we can recompute <code>X</code> and, if it returns the same result, we can avoid recomputing Q. Note that X naturally will have access to the full result of Q this second time, but, due to mapping being monotonic, it should be OK.</p>\n<p>Or should we add \"timestamps\" to values in the map as well? Well, this needs brainstorming with a whiteboard, but I think I explained the general idea :) : we allow intermeidiate queries to peek into the result of in-progress queries and hopefully define some monotonicity conditions under which this is actually sound</p>",
        "id": 161469033,
        "sender_full_name": "matklad",
        "timestamp": 1553276977
    },
    {
        "content": "<p>In terms of macro expansion, the case I am thinking this this: We have a lazy-static call:</p>\n<div class=\"codehilite\"><pre><span></span>lazy_static! {\n    static ref HASHMAP: HashMap&lt;u32, &amp;&#39;static str&gt; = {\n        let mut m = HashMap::new();\n        m.insert(0, &quot;foo&quot;);\n//        m.insert(1, &quot;bar&quot;);\n        m.insert(2, &quot;baz&quot;);\n        m\n    };\n}\n</pre></div>\n\n\n<p>which we exapnd during name resolution. Than, the user uncomments the line. Instead of re-runing the whole of name resolution (which is done by the current impl), we only re-run lazy_static re-expansion. We notice that it returns the same \"result\": the actual expansion will be different, of course, but we project only the set of top-level names out of it, and that is still just <code>HASHMAP</code>.</p>",
        "id": 161469284,
        "sender_full_name": "matklad",
        "timestamp": 1553277131
    },
    {
        "content": "<p>So we say that the result of name-resolution are the same</p>",
        "id": 161469363,
        "sender_full_name": "matklad",
        "timestamp": 1553277201
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> ok I will try to read this and comment shortly, but let's also schedule some sync time to talk it over. Here is a <a href=\"https://doodle.com/poll/y9s3s9cq5urg9gav\" target=\"_blank\" title=\"https://doodle.com/poll/y9s3s9cq5urg9gav\">doodle poll</a> with some options I can do.</p>",
        "id": 161478599,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553284628
    },
    {
        "content": "<p>OK, I'm going to schedule 15:00 Boston time -- I'll add to the rustc calendar.</p>",
        "id": 161486648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553291033
    },
    {
        "content": "<p><a href=\"https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=MXY1bHJucjVmaDViaTdmZTdudm9oZTFiMnIgNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw&amp;tmsrc=6u5rrtce6lrtv07pfi3damgjus%40group.calendar.google.com\" target=\"_blank\" title=\"https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=MXY1bHJucjVmaDViaTdmZTdudm9oZTFiMnIgNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw&amp;tmsrc=6u5rrtce6lrtv07pfi3damgjus%40group.calendar.google.com\">Calendar event is here, with a Zoom link</a></p>",
        "id": 161486742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553291129
    },
    {
        "content": "<p>^ That's in 45 minutes</p>",
        "id": 161671824,
        "sender_full_name": "detrumi",
        "timestamp": 1553537856
    },
    {
        "content": "<p>Just to check -- do we want to chat over Zoom over Zulip? I'm having trouble finding a closed room to do video conf at this co-working space right now (all in use) but that's ok</p>",
        "id": 161675413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553539871
    },
    {
        "content": "<p>I <em>think</em> audio would work better for brainstorming, but no strong preferences</p>",
        "id": 161675680,
        "sender_full_name": "matklad",
        "timestamp": 1553540026
    },
    {
        "content": "<p>actually, audio would be slightly inconvenient for me as well</p>",
        "id": 161675758,
        "sender_full_name": "matklad",
        "timestamp": 1553540052
    },
    {
        "content": "<p>so, no preferences</p>",
        "id": 161675767,
        "sender_full_name": "matklad",
        "timestamp": 1553540059
    },
    {
        "content": "<p>I'm wondering a bit what our agenda is</p>",
        "id": 161675835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553540116
    },
    {
        "content": "<p>seems like we should start by talking through a bit what you think you want?</p>",
        "id": 161675852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553540128
    },
    {
        "content": "<p>let's try zoom</p>",
        "id": 161675857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553540133
    },
    {
        "content": "<p>I also have a sense it may be slightly better for this purpose</p>",
        "id": 161675870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553540141
    },
    {
        "content": "<p>yeah, I think we should start with goals and assumptions</p>",
        "id": 161675881,
        "sender_full_name": "matklad",
        "timestamp": 1553540147
    },
    {
        "content": "<p>(although a lot of times I am surprised by how good zulip can be)</p>",
        "id": 161675894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553540155
    },
    {
        "content": "<p>so maybe i'm wrong :)</p>",
        "id": 161675901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553540159
    },
    {
        "content": "<p>(regardless, I say we stick with zoom since that's what the calendar invite says...)</p>",
        "id": 161676139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553540284
    },
    {
        "content": "<p>I'll try to take part but be partly AFK</p>",
        "id": 161676282,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1553540378
    },
    {
        "content": "<p>I'm joining, if i can get in the zoom meeting</p>",
        "id": 161676402,
        "sender_full_name": "detrumi",
        "timestamp": 1553540418
    },
    {
        "content": "<p><a href=\"https://paper.dropbox.com/doc/Name-Resolution-Salsa-Brainstorming--AZ_DB~nTuYIkXcvR_gHbwB~sAg-zsJifAKFqe91sON7wsCRE\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Name-Resolution-Salsa-Brainstorming--AZ_DB~nTuYIkXcvR_gHbwB~sAg-zsJifAKFqe91sON7wsCRE\">Paper doc</a></p>",
        "id": 161676449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553540453
    },
    {
        "content": "<p>Awesome, thanks a lot <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ! I was banging my head against this for several days, and we seem to come to the solution in 30-ish minutes :) Hope it actually works <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
        "id": 161679639,
        "sender_full_name": "matklad",
        "timestamp": 1553542506
    },
    {
        "content": "<p>There can only be so many walls to bang your head against <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 161679682,
        "sender_full_name": "detrumi",
        "timestamp": 1553542541
    },
    {
        "content": "<p>To recap, the <em>key</em> idea is to identify the macro not by invocation alone (what I was doing), but by a tuple of (macro_definition, macro invocation). That way, macro expansion don't need to call into nameres, because it already knows the definition! Seems obvious in retrospect :)</p>",
        "id": 161679797,
        "sender_full_name": "matklad",
        "timestamp": 1553542596
    },
    {
        "content": "<blockquote>\n<p>There can only be so many walls to bang your head against </p>\n</blockquote>\n<p>Well, that depends on the relative speeds of language design and RLS teams :D</p>",
        "id": 161679857,
        "sender_full_name": "matklad",
        "timestamp": 1553542646
    },
    {
        "content": "<p>(Sorry to have missed the mtg; multiple factors including but not limited to my misunderstanding of when DST ends here)</p>",
        "id": 161686589,
        "sender_full_name": "pnkfelix",
        "timestamp": 1553547361
    },
    {
        "content": "<p>It seems magical: to implement this idea, I had to basically remove code, and it worked on the first try: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/1055\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/1055\">https://github.com/rust-analyzer/rust-analyzer/pull/1055</a></p>",
        "id": 161747219,
        "sender_full_name": "matklad",
        "timestamp": 1553595104
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you want to upload the video?</p>",
        "id": 161861860,
        "sender_full_name": "matklad",
        "timestamp": 1553695447
    },
    {
        "content": "<p>sure I can do that</p>",
        "id": 161862797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553696057
    },
    {
        "content": "<p><a href=\"https://youtu.be/Xr-rBqLr-G4\" target=\"_blank\" title=\"https://youtu.be/Xr-rBqLr-G4\">Video will be live at this URL</a> (but it's still uploading)</p>",
        "id": 161868187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553699118
    }
]