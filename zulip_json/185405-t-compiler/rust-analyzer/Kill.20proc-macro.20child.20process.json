[
    {
        "content": "<p>I just found that in some weird situations, if <code>rust-analzyer</code> panic / crash accidentally,   the child process spawned for proc-macro did not be killed in Windows. I know it is the default behavior for Windows program. I can't reproduce this in linux,  but I doubt it might happens there too.</p>",
        "id": 194594489,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587298265
    },
    {
        "content": "<p>I know <a href=\"https://stackoverflow.com/questions/53208/how-do-i-automatically-destroy-child-processes-in-windows\" title=\"https://stackoverflow.com/questions/53208/how-do-i-automatically-destroy-child-processes-in-windows\">https://stackoverflow.com/questions/53208/how-do-i-automatically-destroy-child-processes-in-windows</a> is a proper solution for this problem in Windows. but  it will make the code complicated as it is platform specific, and I don't know it is worth or not.</p>",
        "id": 194594554,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587298349
    },
    {
        "content": "<p>This feels like the kind of thing that should be handled by a crate in the ecosystem</p>",
        "id": 194607911,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1587315777
    },
    {
        "content": "<p>\"spawn a child process with automatic cleanup\"</p>",
        "id": 194607918,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1587315794
    },
    {
        "content": "<p>If you assume unwinding, storing the handle somewhere and terminating the child on <code>Drop</code> is enough on any platform</p>",
        "id": 194608112,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1587316024
    },
    {
        "content": "<p>Even I kill the parent process externally ?</p>",
        "id": 194608350,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1587316374
    },
    {
        "content": "<p><a href=\"https://github.com/oconnor663/duct.py/blob/master/gotchas.md#killing-grandchild-processes\" title=\"https://github.com/oconnor663/duct.py/blob/master/gotchas.md#killing-grandchild-processes\">here's duct talking about the adjacent issue of grandchild processes</a></p>",
        "id": 194608534,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1587316623
    },
    {
        "content": "<p>TL;DR of duct's info page is that job objects seem to solve the problem proposed (correct transitive child process cleanup) but *nix doesn't have a good solution yet</p>",
        "id": 194608620,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1587316728
    },
    {
        "content": "<p>And killing the process externally would not be able to assume unwinding</p>",
        "id": 194608631,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1587316756
    },
    {
        "content": "<p>I think if we panic, we should kill the child process (in Drop). If we crash abnormaly (like via sigkill) I don't feel like it is worth it to clean up the child. Although this is possible, cargo implements this here: <a href=\"https://github.com/rust-lang/cargo/blob/5b620dc044e8999e6bc0193f9e037c4618519547/src/cargo/util/job.rs\" title=\"https://github.com/rust-lang/cargo/blob/5b620dc044e8999e6bc0193f9e037c4618519547/src/cargo/util/job.rs\">https://github.com/rust-lang/cargo/blob/5b620dc044e8999e6bc0193f9e037c4618519547/src/cargo/util/job.rs</a></p>",
        "id": 194640130,
        "sender_full_name": "matklad",
        "timestamp": 1587367333
    },
    {
        "content": "<p>But, I think that we should add an <code>JChild</code> struct to <code>stdx::process</code>, which kills the child on drop.</p>",
        "id": 194640187,
        "sender_full_name": "matklad",
        "timestamp": 1587367384
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> iirc, the job thing on windows is just for ctrl+c as well</p>",
        "id": 194666001,
        "sender_full_name": "simulacrum",
        "timestamp": 1587384876
    },
    {
        "content": "<p>From the doc comment:</p>\n<blockquote>\n<p>Job objects have a mode of operation where when all handles to the object are closed it causes all child processes associated with the object to be terminated immediately.</p>\n</blockquote>\n<p>I think this means that any way of exiting the process will kill all child processes.</p>",
        "id": 194666251,
        "sender_full_name": "bjorn3",
        "timestamp": 1587385076
    }
]