[
    {
        "content": "<p>what's the difference between <code>HirDatabase</code> and <code>PersistentHirDatabase</code>?</p>\n<p>I'm asking because I wanted to into resolution for associated items, and I'm not sure how to implement it. I can handle <code>ModuleDef::Struct</code> <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir/src/nameres.rs#L635\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir/src/nameres.rs#L635\">here</a>, but I'm not sure how to reach the item.</p>",
        "id": 158530205,
        "sender_full_name": "Laurențiu",
        "timestamp": 1550152355
    },
    {
        "content": "<p>my <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir/src/ty/method_resolution.rs#L180\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir/src/ty/method_resolution.rs#L180\"><code>iterate_impl_items</code></a> takes a <code>HirDatabase</code></p>",
        "id": 158530324,
        "sender_full_name": "Laurențiu",
        "timestamp": 1550152466
    },
    {
        "content": "<p>not sure if that makes sense (:</p>",
        "id": 158530745,
        "sender_full_name": "Laurențiu",
        "timestamp": 1550152815
    },
    {
        "content": "<p><code>PersistentHirDatabase</code> (to be renamed to <code>DefsDatabase</code> maybe?) is for parts of the IDE where we want incrementallity. </p>\n<p><code>HirDatabase</code> is for stuff where we want to be lazy, but don't need to be incremental. </p>\n<p>Roughly speaking, everything about types should go to <code>HirDatabase</code>, because it should be ok to re-typecheck a function for completion, everything about macro resolution and modules should go to PersistentHirDatabase</p>",
        "id": 158532153,
        "sender_full_name": "matklad",
        "timestamp": 1550154154
    },
    {
        "content": "<p><code>resolve_path_fp</code> is for the module-level resolution: it should resolve the path up to the first associated item.</p>",
        "id": 158532209,
        "sender_full_name": "matklad",
        "timestamp": 1550154224
    },
    {
        "content": "<p>Everything else should be handled separately, by the type checker.</p>",
        "id": 158532274,
        "sender_full_name": "matklad",
        "timestamp": 1550154263
    },
    {
        "content": "<p>I can make <code>String::new()</code> resolve to <code>String</code>, but that's not too useful. I'm not sure what happens to the last segment</p>",
        "id": 158532284,
        "sender_full_name": "Laurențiu",
        "timestamp": 1550154273
    },
    {
        "content": "<p>I <em>think</em> associated item resolution should be handled somewhere aroud <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/b85c189500a47f3c5f7690250611b06e08616c9a/crates/ra_hir/src/ty.rs#L1107-L1132\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/b85c189500a47f3c5f7690250611b06e08616c9a/crates/ra_hir/src/ty.rs#L1107-L1132\">https://github.com/rust-analyzer/rust-analyzer/blob/b85c189500a47f3c5f7690250611b06e08616c9a/crates/ra_hir/src/ty.rs#L1107-L1132</a></p>",
        "id": 158532331,
        "sender_full_name": "matklad",
        "timestamp": 1550154344
    },
    {
        "content": "<p>Ie, for <code>String::new</code> the resolver should say \"I've resolved <code>String</code> Def, but I don't know what <code>new</code> is\" , and the typechecker should look at the type of the <code>String</code> and find the associated method.</p>",
        "id": 158532432,
        "sender_full_name": "matklad",
        "timestamp": 1550154429
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span></p>",
        "id": 158532435,
        "sender_full_name": "matklad",
        "timestamp": 1550154435
    },
    {
        "content": "<p>Yes... The first step would be to make the resolver actually return partial resolutions (i.e. what did the part that could be resolved resolve to, and what segments still remain), and then we can start handling that in <code>ty.rs</code></p>",
        "id": 158554175,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1550170542
    },
    {
        "content": "<p>so I think for now there would be additional handling after <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/b85c189500a47f3c5f7690250611b06e08616c9a/crates/ra_hir/src/ty.rs#L1107\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/b85c189500a47f3c5f7690250611b06e08616c9a/crates/ra_hir/src/ty.rs#L1107\">https://github.com/rust-analyzer/rust-analyzer/blob/b85c189500a47f3c5f7690250611b06e08616c9a/crates/ra_hir/src/ty.rs#L1107</a> for that case</p>",
        "id": 158554444,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1550170723
    },
    {
        "content": "<blockquote>\n<p>The first step would be to make the resolver actually return partial resolutions (i.e. what did the part that could be resolved resolve to, and what segments still remain)</p>\n</blockquote>\n<p>Should <code>PerNs</code> be an enum? I'm not sure what <code>types</code> and <code>values</code> are.</p>",
        "id": 158555484,
        "sender_full_name": "Laurențiu",
        "timestamp": 1550171537
    },
    {
        "content": "<p>They're the different namespaces. A name may resolve to different definitions depending on whether you're looking for a type or a value.<br>\nI think one possible representation would be <code>(PerNs&lt;Resolution&gt;, &amp;[PathSegment])</code>, although then callers need to make sure to check whether the path fully resolved; or an enum with <code>PartiallyResolved(PerNs&lt;Resolution&gt;, &amp;[PathSegment]), FullyResolved(PerNs&lt;Resolution&gt;)</code>... not sure</p>",
        "id": 158555731,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1550171762
    },
    {
        "content": "<p>I suppose that makes sense. And methods should be... values, I guess? But it wouldn't matter in my case, because the resolution would stop at the parent struct.</p>",
        "id": 158555844,
        "sender_full_name": "Laurențiu",
        "timestamp": 1550171850
    },
    {
        "content": "<p>Maybe I should watch that rust-analyzer video</p>",
        "id": 158555867,
        "sender_full_name": "Laurențiu",
        "timestamp": 1550171880
    },
    {
        "content": "<p>Hi guys, I just skimmed over name resolution. From what I see resolving use imports inside functions/blocks is not implemented, right? Are there any plans for that?<br>\n[Maybe I can try to do it myself, if there are no blockers]</p>",
        "id": 158621951,
        "sender_full_name": "eulerdisk",
        "timestamp": 1550244330
    },
    {
        "content": "<p>Yes it's not implemented yet. There are plans in the sense of \"we need to implement this sometime\", but no one has started working on it as far as I know ;)<br>\nI don't think there are concrete blockers, but it's kind of complicated -- basically any block that contains items is its own anonymous module, which we need to include in the fixpoint import resolution. Anonymous modules inherit the scope from their parent module (as opposed to named modules, which don't).</p>",
        "id": 158623418,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1550245452
    },
    {
        "content": "<blockquote>\n<p>, which we need to include in the fixpoint import resolution. </p>\n</blockquote>\n<p>Probably not literary include: I think macros declared inside of functions, even in modules, cant escape to the outer scope, so in theory we should be able to resolve each item's block independently. That is, we could run a separate fixed-point iteration per function.</p>",
        "id": 158687147,
        "sender_full_name": "matklad",
        "timestamp": 1550310431
    },
    {
        "content": "<p>We hadn't had a meeting for a while, and we really should move forward with nameresolution librarification. So, let's discuss it (probably on Zulip?):</p>\n<p><a href=\"https://doodle.com/poll/i9mi98urqry6mxnr\" target=\"_blank\" title=\"https://doodle.com/poll/i9mi98urqry6mxnr\">https://doodle.com/poll/i9mi98urqry6mxnr</a></p>\n<p>cc <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> </p>\n<p>The key person here is <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> , but, if <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> were available, that'd be cool!</p>",
        "id": 163449410,
        "sender_full_name": "matklad",
        "timestamp": 1555402241
    },
    {
        "content": "<p>Heh, not a lot of participants on the poll :)</p>\n<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> let's schedule this for tomorrow than, the same time as today's meeting about RLS 1/2</p>",
        "id": 163532487,
        "sender_full_name": "matklad",
        "timestamp": 1555478564
    },
    {
        "content": "<p>sure, that sounds fine with me. Hopefully niko can make it</p>",
        "id": 163548007,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555496312
    },
    {
        "content": "<p>Hey, <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> let's discuss name resolution stuff this week? I guess we can do this in async-way in this thread</p>",
        "id": 165055522,
        "sender_full_name": "matklad",
        "timestamp": 1557220963
    },
    {
        "content": "<p>sure; I don't have much to report yet. I'm trying to tie off an incremental compilation bug before I switch over to this</p>",
        "id": 165061375,
        "sender_full_name": "pnkfelix",
        "timestamp": 1557227362
    },
    {
        "content": "<p>Cool: fixing that incremental bug will surely have a positive impact on rust-analyzer development velocity :D</p>\n<p>We still need to get to name resolution at some point: our macro and trait story is maturing fast, so nameres could become a blocker soon-ish</p>",
        "id": 165063226,
        "sender_full_name": "matklad",
        "timestamp": 1557229227
    }
]