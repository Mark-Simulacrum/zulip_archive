[
    {
        "content": "<p>So I started tinkering around with a proc-macro for this and I made some good progress, though I do not know whether the approach I have so far will work out for everything in the end. A snippet I was able to replace with it now:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code>fn extract_struct_def(\n    rewriter: &amp;mut SyntaxRewriter,\n    enum_: &amp;ast::Enum,\n    variant_name: ast::Name,\n    variant_list: &amp;ast::TupleFieldList,\n    start_offset: &amp;SyntaxElement,\n    visibility: Option&lt;ast::Visibility&gt;,\n) -&gt; Option&lt;()&gt; {\n<span class=\"gd\">-    let variant_list = make::tuple_field_list(</span>\n<span class=\"gd\">-        variant_list</span>\n<span class=\"gd\">-            .fields()</span>\n<span class=\"gd\">-            .flat_map(|field| Some(make::tuple_field(Some(make::visibility_pub()), field.ty()?))),</span>\n<span class=\"gd\">-    );</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-    rewriter.insert_before(</span>\n<span class=\"gd\">-        start_offset,</span>\n<span class=\"gd\">-        make::struct_(visibility, variant_name, None, variant_list.into()).syntax(),</span>\n<span class=\"gd\">-    );</span>\n<span class=\"gi\">+    let tys = variant_list.fields().flat_map(|field| field.ty());</span>\n<span class=\"gi\">+    let struct_ = make_quote::quote! {</span>\n<span class=\"gi\">+        #visibility struct #variant_name( #(pub #tys),* );</span>\n<span class=\"gi\">+    };</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+    rewriter.insert_before(start_offset, struct_.syntax());</span>\n    rewriter.insert_before(start_offset, &amp;make::tokens::blank_line());\n\n    if let indent_level @ 1..=usize::MAX = IndentLevel::from_node(enum_.syntax()).0 as usize {\n        rewriter\n            .insert_before(start_offset, &amp;make::tokens::whitespace(&amp;\" \".repeat(4 * indent_level)));\n    }\n    Some(())\n}\n</code></pre></div>\n<p>The invocation there specifically:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">make_quote</span>::<span class=\"n\">quote</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"n\">visibility</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"err\">#</span><span class=\"n\">variant_name</span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"p\">(</span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"n\">tys</span><span class=\"p\">),</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>expands to</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">make</span>::<span class=\"n\">struct_</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">visibility</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">variant_name</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ast</span>::<span class=\"n\">FieldList</span>::<span class=\"n\">TupleFieldList</span><span class=\"p\">(</span><span class=\"n\">make</span>::<span class=\"n\">tuple_field_list</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span>::<span class=\"n\">itertools</span>::<span class=\"n\">__std_iter</span>::<span class=\"nb\">IntoIterator</span>::<span class=\"n\">into_iter</span><span class=\"p\">(</span><span class=\"n\">tys</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">tys</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">make</span>::<span class=\"n\">tuple_field</span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">make</span>::<span class=\"n\">visibility_pub</span><span class=\"p\">()),</span><span class=\"w\"> </span><span class=\"n\">tys</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 215762962,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1604604866
    },
    {
        "content": "<p>So this currently relies on <code>make</code> to typecheck things, but i imagine ideally this should typecheck on its own and then just emit a string that gets parsed to an ast?</p>",
        "id": 215769162,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1604607891
    },
    {
        "content": "<blockquote>\n<p>So this currently relies on make to typecheck things, but i imagine ideally this should typecheck on its own and then just emit a string that gets parsed to an ast?</p>\n</blockquote>\n<p>Not really, ideally, we should remove strings from <code>make</code></p>",
        "id": 215831568,
        "sender_full_name": "matklad",
        "timestamp": 1604660902
    },
    {
        "content": "<p>Strings are just a way to quicly implement AST construction without too much work</p>",
        "id": 215831600,
        "sender_full_name": "matklad",
        "timestamp": 1604660920
    },
    {
        "content": "<p>Ideally, we should build AST directly from tree pieces, bypassing the parser</p>",
        "id": 215831709,
        "sender_full_name": "matklad",
        "timestamp": 1604661003
    },
    {
        "content": "<p>I am not entirely sure how to square this with quasi-quoting :-) An austronautical approach would be to run rust-analyzer's parser at compile time to allow building anything</p>",
        "id": 215832015,
        "sender_full_name": "matklad",
        "timestamp": 1604661186
    },
    {
        "content": "<p>A more down-to-earth approach would be to special-case everything. Basically, the whole of <code>make</code> API, but with a nicer syntax</p>",
        "id": 215832069,
        "sender_full_name": "matklad",
        "timestamp": 1604661230
    },
    {
        "content": "<p>Both approaches, however, are compatible with building AST from trees.</p>\n<p><span class=\"user-mention\" data-user-id=\"300586\">@veykril</span> you might also look at <a href=\"https://github.com/apple/swift/tree/main/lib/Syntax\">https://github.com/apple/swift/tree/main/lib/Syntax</a> for inpsiration</p>",
        "id": 215832352,
        "sender_full_name": "matklad",
        "timestamp": 1604661403
    },
    {
        "content": "<p>Just took a look at the swift stuff. Were there any big differences between swifts syntax trees and rowan?</p>",
        "id": 215863782,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1604677681
    },
    {
        "content": "<p>I suppose using the <code>make</code> api is the ideal choice to make here though what I always wondered about it is that internally all make functions just display and then reparse the displayed string, doesn't this go heavily against the tree interning/sharing of what this architecture is kind of about? Since we discard all the parts passed to make by reparsing them from a string</p>",
        "id": 215863944,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1604677748
    },
    {
        "content": "<p>Yes, rowan is almost 1-1 copy of libsyntax. There are two big differences</p>",
        "id": 215866317,
        "sender_full_name": "matklad",
        "timestamp": 1604678684
    },
    {
        "content": "<p>well, more than two :)</p>",
        "id": 215866334,
        "sender_full_name": "matklad",
        "timestamp": 1604678692
    },
    {
        "content": "<p><strong>handling of trivia</strong>. In swift syntax, trivia are attached to non-trivial tokens. </p>\n<p>That is, every node has a statically fixed layout, and things like <code>struct /* many*/ /* separate */ /*comment* F /*nodes*/ /*here*/;</code> are handled by attaching a vec of comments/whitespace to a fixed non-ws token</p>",
        "id": 215866541,
        "sender_full_name": "matklad",
        "timestamp": 1604678779
    },
    {
        "content": "<p>I am actually warming up to this idea, and think that it <em>might</em> make sense to transition rust-analyzer to this representation</p>",
        "id": 215866604,
        "sender_full_name": "matklad",
        "timestamp": 1604678814
    },
    {
        "content": "<p><strong>handling of collections.</strong> Because swift supports only nodes with fixed layout, all collection nodes are homogeneous. </p>\n<p>Ie, if in Rust, for <code>{foo: i32, bar: f64}</code> we put <code>{}</code> and the fields into tht same node, swift will introduce an intermediate node here</p>",
        "id": 215868634,
        "sender_full_name": "matklad",
        "timestamp": 1604679689
    },
    {
        "content": "<p>one node will hold three elements: two braces and field list</p>",
        "id": 215868664,
        "sender_full_name": "matklad",
        "timestamp": 1604679702
    },
    {
        "content": "<p>the field list node will hold N identical nodes (fields)</p>",
        "id": 215868694,
        "sender_full_name": "matklad",
        "timestamp": 1604679716
    },
    {
        "content": "<p><strong>thread safety</strong> swift uses Arcs, which means arc bumps during traversal of sytnax nodes. rust-analyzer uses Rc, which should be much cheaper</p>",
        "id": 215868843,
        "sender_full_name": "matklad",
        "timestamp": 1604679764
    },
    {
        "content": "<p>Ah I see, I also just reread <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/dev/syntax.md\">https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/dev/syntax.md</a> so I do see the differences you mentioned there as well now.</p>",
        "id": 215872226,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1604681255
    },
    {
        "content": "<p>Regarding <code>make</code> stringifying and reparsing the string as a node, is it meant to stay like this in the future? Im just asking out of curiosity.</p>",
        "id": 215872323,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1604681294
    },
    {
        "content": "<p>Oup, sorry, forgot to answer that one</p>",
        "id": 215873998,
        "sender_full_name": "matklad",
        "timestamp": 1604682079
    },
    {
        "content": "<p>No, just the opposite</p>",
        "id": 215874004,
        "sender_full_name": "matklad",
        "timestamp": 1604682083
    },
    {
        "content": "<p>stringification is a temp hack, and we totally should replace it with assembling trees from bits and pieces</p>",
        "id": 215874057,
        "sender_full_name": "matklad",
        "timestamp": 1604682114
    },
    {
        "content": "<p>The specific case where stringification falls down is that, if a source node has a syntax error, the stringified&amp;reparsed node might not reparse into the desired node type</p>",
        "id": 215874160,
        "sender_full_name": "matklad",
        "timestamp": 1604682150
    },
    {
        "content": "<p>Oh that does seem like a problem, so I take the sole reason <code>make</code> works the way it does currently is because it was simple to do it like that for now?</p>",
        "id": 215884483,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1604686950
    },
    {
        "content": "<p>From the looks of it, emitting <code>make</code> calls seems to be the best choice here nevertheless, since I dont think the make will change much then should the stringify hack disappear at some point, so I guess my proc-macro prototype is already on a good track like this.</p>",
        "id": 215884609,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1604687019
    },
    {
        "content": "<p>yeah, make should be phased away, but its ok to use it today</p>",
        "id": 215890342,
        "sender_full_name": "matklad",
        "timestamp": 1604689696
    },
    {
        "content": "<p>However, an alternative would be to use ungrammar directly</p>",
        "id": 215890356,
        "sender_full_name": "matklad",
        "timestamp": 1604689707
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/ungrammar/blob/eb7e474d641fdb5210318479696cb7b362190cfd/rust.ungram#L164-L169\">https://github.com/rust-analyzer/ungrammar/blob/eb7e474d641fdb5210318479696cb7b362190cfd/rust.ungram#L164-L169</a></p>",
        "id": 215890386,
        "sender_full_name": "matklad",
        "timestamp": 1604689733
    },
    {
        "content": "<p>It contains all the info necessary to build a tree from pieces.</p>",
        "id": 215890416,
        "sender_full_name": "matklad",
        "timestamp": 1604689748
    },
    {
        "content": "<p>What would replace make? I would believe the surface api would look the same no?</p>",
        "id": 215913543,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1604702807
    },
    {
        "content": "<p>I imagine if anything it should in the end be generated to some degree like most of the ast stuff?</p>",
        "id": 215913570,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1604702828
    },
    {
        "content": "<p>Yeah, I mean, the impl should change</p>",
        "id": 215913654,
        "sender_full_name": "matklad",
        "timestamp": 1604702883
    },
    {
        "content": "<p>the API I think looks about right, although it's plausible that we can replace all of it with just <code>ast::make!</code> macro</p>",
        "id": 215913686,
        "sender_full_name": "matklad",
        "timestamp": 1604702909
    },
    {
        "content": "<p>And yeah, it should be generated from ungrmmar</p>",
        "id": 215913706,
        "sender_full_name": "matklad",
        "timestamp": 1604702921
    },
    {
        "content": "<p>Alright, now I'm grasping the full situation regarding this I believe, thanks for the thorough explanation <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 215914447,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1604703380
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span> have you seen <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/get-started/syntax-transformation\">https://docs.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/get-started/syntax-transformation</a> ? This is an interesting doc to study re tree edits</p>",
        "id": 216091900,
        "sender_full_name": "matklad",
        "timestamp": 1604932679
    },
    {
        "content": "<p>No I haven't. Will take a look it later <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 216093421,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1604933265
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span>  just randomly cc'ing you to take a look at this fun API from roslyn: <a href=\"https://github.com/dotnet/roslyn/blob/4d8cada2584dd2e58b391c32c84f10f29442fdde/src/Workspaces/Core/Portable/Editing/SyntaxEditor.cs#L125-L141\">https://github.com/dotnet/roslyn/blob/4d8cada2584dd2e58b391c32c84f10f29442fdde/src/Workspaces/Core/Portable/Editing/SyntaxEditor.cs#L125-L141</a></p>\n<p>I wonder if this \"The node passed into the compute function includes changes from prior edits\" bit could be used to make SyntaxRewriter infra less horrible..</p>",
        "id": 217071513,
        "sender_full_name": "matklad",
        "timestamp": 1605651603
    },
    {
        "content": "<p>That looks does look interesting. Good question whether that could somehow clean up SyntaxRewriter, though I'm not really sure how that could be applied to make it less of a mess</p>",
        "id": 217077698,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1605655716
    },
    {
        "content": "<p>Maybe I just can't think of any the use cases for this function, though i also don't really have in mind right now how we use SyntaxRewriter, will have to take a look at that again</p>",
        "id": 217078342,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1605656256
    }
]