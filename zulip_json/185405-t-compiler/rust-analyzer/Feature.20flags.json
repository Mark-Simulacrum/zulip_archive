[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> , might I ask you why we shouldn't expose feature flags structure to UI, <span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> and I are convinced that this affects UX... We would like to declare them in <code>package.json</code> at least temporarily, while we don't generate it from our source code</p>",
        "id": 188368288,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581936432
    },
    {
        "content": "<p>I don't know what's the right answer here</p>",
        "id": 188368417,
        "sender_full_name": "matklad",
        "timestamp": 1581936595
    },
    {
        "content": "<p>I would be 100% with generating that bit of settings from a Rust declaration</p>",
        "id": 188368478,
        "sender_full_name": "matklad",
        "timestamp": 1581936610
    },
    {
        "content": "<p>I would be less OK with just manually syncing things, or keeping source of truth in package.json</p>",
        "id": 188368491,
        "sender_full_name": "matklad",
        "timestamp": 1581936639
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/3189\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/3189\">https://github.com/rust-analyzer/rust-analyzer/issues/3189</a> for the overall configuration design discussion</p>",
        "id": 188368502,
        "sender_full_name": "matklad",
        "timestamp": 1581936657
    },
    {
        "content": "<p>I think sync'ing them manually is fine for now because 1. this affects users right now, 2. there's very few of them, 3. if we use a prefix to differentiate these preferences, the client-side work to support it (notifying the server that a flag has changed) will be useful when switching to something generated automatically</p>",
        "id": 188369858,
        "sender_full_name": "Laurențiu",
        "timestamp": 1581937915
    },
    {
        "content": "<p>Yeah, that's reasonable. They reason why I am not 100% is that doing that relives pressure from this issue <strong>for VS Code</strong> and, all other things being equal, I'd prefer not to single out this editor more than it already is</p>",
        "id": 188369955,
        "sender_full_name": "matklad",
        "timestamp": 1581938014
    },
    {
        "content": "<p>Still, generating the <code>package.json</code> parts automatically will not help other editors, will it? Because each LSP client will have a different way to configure these.</p>",
        "id": 188370172,
        "sender_full_name": "Laurențiu",
        "timestamp": 1581938250
    },
    {
        "content": "<p>It will, as it will also generate docs. But this is just a minor point</p>",
        "id": 188370227,
        "sender_full_name": "matklad",
        "timestamp": 1581938314
    },
    {
        "content": "<p>Then a plan here might be to:</p>\n<ol>\n<li>manually add the settings to <code>package.json</code> and implement a way to toggle them from the Code extension</li>\n<li>replace the server hashmap with a strongly-typed struct (alternatively, use a different self-documenting format)</li>\n<li>extend <code>xtask</code> to read the doc comments on that struct (or the different format) and produce docs for them</li>\n<li>extend <code>xtask</code> to generate the <code>package.json</code> stuff</li>\n</ol>\n<p>We could also describe them in e.g. JSON schema and optionally generate Rust code from that.</p>",
        "id": 188370495,
        "sender_full_name": "Laurențiu",
        "timestamp": 1581938599
    },
    {
        "content": "<p>SGTM, though I am not sure about 2. The problem main problem with strong types is that we want to separate LSP settings from analyzer settings. String types allow us to have a runtime dep there</p>",
        "id": 188370633,
        "sender_full_name": "matklad",
        "timestamp": 1581938727
    },
    {
        "content": "<p>We may declare feature flags structs specific to non-lsp crates and map lsp-feature-flags to non-lsp ones by <code>impl From</code>. Making them a hashmap I would think that we would want to dynamically mutate our feature flags, though this doesn't happen in practice, hence simple mapping is more convenient I think</p>",
        "id": 188371197,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581939331
    },
    {
        "content": "<p>Or store them in a struct on the server and use strings at the interface</p>",
        "id": 188371326,
        "sender_full_name": "Laurențiu",
        "timestamp": 1581939472
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"258149\">@std::Veetaha</span> generating code from the JSON schema should work, right?</p>",
        "id": 188371416,
        "sender_full_name": "Laurențiu",
        "timestamp": 1581939560
    },
    {
        "content": "<p>Can it also store docs?</p>",
        "id": 188371430,
        "sender_full_name": "Laurențiu",
        "timestamp": 1581939600
    },
    {
        "content": "<p>I'd rather avoid JSON schema and use the appoach we use to gen ast</p>",
        "id": 188371489,
        "sender_full_name": "matklad",
        "timestamp": 1581939636
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/xtask/src/ast_src.rs\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/xtask/src/ast_src.rs\">https://github.com/rust-analyzer/rust-analyzer/blob/master/xtask/src/ast_src.rs</a></p>",
        "id": 188371505,
        "sender_full_name": "matklad",
        "timestamp": 1581939664
    },
    {
        "content": "<p>declare a rust  struct with a macro, generate things from this struct</p>",
        "id": 188371519,
        "sender_full_name": "matklad",
        "timestamp": 1581939677
    },
    {
        "content": "<p>that avoids build-time dependency on parsing json/toml/ron whatever</p>",
        "id": 188371531,
        "sender_full_name": "matklad",
        "timestamp": 1581939695
    },
    {
        "content": "<p>Jason schema do stores metadata \"title\", \"description\" props, tho I am totally okay with the approach we have in ast gen. But, @matklad, does my proposal with separating the API and mapping between different structs seem reasonable?</p>",
        "id": 188375382,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581943725
    },
    {
        "content": "<p>It does, though I think hash-map vs typed API is a minor point here</p>",
        "id": 188375405,
        "sender_full_name": "matklad",
        "timestamp": 1581943790
    },
    {
        "content": "<p>Like, I do thing that either would work fine, and that both would  be indistinguishable for users</p>",
        "id": 188375448,
        "sender_full_name": "matklad",
        "timestamp": 1581943810
    },
    {
        "content": "<p>Right, indistinguishable, that's just a server impl detail</p>",
        "id": 188375477,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581943858
    },
    {
        "content": "<p>Sorry, I might've missed the point</p>",
        "id": 188375501,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581943884
    },
    {
        "content": "<p>Anyway, what was the initial reason we switched from Ron? By parsing Ron you mean time consuming?</p>",
        "id": 188376369,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1581944728
    },
    {
        "content": "<p>Mainly to improve compile times, and also to reduce overall complexity</p>",
        "id": 188376463,
        "sender_full_name": "matklad",
        "timestamp": 1581944812
    },
    {
        "content": "<p>So, do we work on configuration design first? I don't think that adding feature flags declaration to <code>package.json</code> would be any noticeable tech debt, but it will give better ux in short term. Amending <code>package.json</code> is the least thing it requires...</p>",
        "id": 188529047,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1582105472
    },
    {
        "content": "<p>I am ok with r+ whatever changes to package.json/TS to make better short term. </p>\n<p>For backend changes, I think I'll need to spend some time familiarizing myself with the relevant LSP APIs first, and that probably won't happen this week</p>",
        "id": 188531433,
        "sender_full_name": "matklad",
        "timestamp": 1582107690
    },
    {
        "content": "<p>Okay, I'll add relevant feature flags to <code>package.json</code> then.</p>\n<p>Also, as a side not, I'd suggest using <code>r+</code> word not so often, because this is very ad hoc.</p>",
        "id": 188531742,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1582107995
    }
]