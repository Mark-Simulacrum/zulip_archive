[
    {
        "content": "<p>If I have a <code>Pat</code>, how can I turn it into a <code>Name</code>? That's the main open question I have in the PR I've just opened so figured I'd drop a message here to get some more eyes on it: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/11481\">https://github.com/rust-analyzer/rust-analyzer/pull/11481</a></p>",
        "id": 271988193,
        "sender_full_name": "Jeroen Vannevel",
        "timestamp": 1644938056
    },
    {
        "content": "<p>Not every pat has a name, in fact only <code>IdentPat</code> has(haven't looked at the PR yet)</p>",
        "id": 271999692,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1644942641
    },
    {
        "content": "<p>In this case it's <code>Param.pat()</code>. It returns <code>Option&lt;Pat&gt;</code>, presumably that will always return <code>IdentPat</code>?</p>",
        "id": 272015904,
        "sender_full_name": "Jeroen Vannevel",
        "timestamp": 1644949088
    },
    {
        "content": "<p>A parameter can hold any kind of pattern(except for top-level Or-patterns I believe), so there are parameters you can't really assign a name to</p>",
        "id": 272020287,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1644951030
    },
    {
        "content": "<blockquote>\n<p>A parameter can hold any kind of pattern(except for top-level Or-patterns I believe)</p>\n</blockquote>\n<p>apparently function pointer parameters (and trait method parameters) can't (though that's not a syntactic restriction, I think)</p>",
        "id": 272020586,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1644951165
    },
    {
        "content": "<p>To be clear, a parameter is just on the declaration side. i.e. in <code>fn(foo: i32)</code>, <code>foo</code> will always exist -- no? What would it look like to have a parameter that doesn't have a literal name there?</p>",
        "id": 272020788,
        "sender_full_name": "Jeroen Vannevel",
        "timestamp": 1644951255
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">strict</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">field</span>: <span class=\"kt\">u32</span> <span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">field</span><span class=\"w\"> </span><span class=\"p\">}</span>: <span class=\"nc\">Foo</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>is valid rust for example</p>",
        "id": 272021003,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1644951366
    },
    {
        "content": "<p>I assume this is about the function pointer type though right? In which case our grammar is actually wrong, a fn pointer type may have named parameters, but those can only take a name, not a pattern.<br>\nThat is the <code>ParamList</code> here is actually not valid and should be a special rule instead <a href=\"https://github.com/rust-analyzer/ungrammar/blob/master/rust.ungram#L559-L560\">https://github.com/rust-analyzer/ungrammar/blob/master/rust.ungram#L559-L560</a></p>",
        "id": 272021241,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1644951477
    },
    {
        "content": "<p>does rustc special-case the grammar? or does it just have a validation afterwards?</p>",
        "id": 272021437,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1644951550
    },
    {
        "content": "<p>Ah it parses properly, ye then its a validation pass.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0642</span><span class=\"p\">]</span>: <span class=\"nc\">patterns</span><span class=\"w\"> </span><span class=\"n\">aren</span><span class=\"o\">'</span><span class=\"na\">t</span><span class=\"w\"> </span><span class=\"n\">allowed</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">methods</span><span class=\"w\"> </span><span class=\"n\">without</span><span class=\"w\"> </span><span class=\"n\">bodies</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1</span>:<span class=\"mi\">13</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">X</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span>: <span class=\"nc\">Foo</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"o\">^^^^^^</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"n\">help</span>: <span class=\"nc\">give</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">argument</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">underscore</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">ignore</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">X</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">Foo</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"o\">~</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 272022230,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1644951818
    },
    {
        "content": "<p>The reference special cased iirc hence my assumption</p>",
        "id": 272022325,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1644951851
    },
    {
        "content": "<p>Ye then you can \"assume\" that it is always an ident pattern in the sense that you should not panic if it isn't(since the user can still pass a pattern to that even if its not correct)</p>",
        "id": 272022514,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1644951938
    },
    {
        "content": "<p>Very interesting, thank you both! I didn't realize parameters could have such a wide range of patterns. I've modified the code to use the <code>name()</code> if it's an <code>IdentPat</code> and otherwise will just handle the empty identifier case. <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/11481/commits/c8cd7a68b3ee3bc2c7de4d4287f554f78c63846a\">https://github.com/rust-analyzer/rust-analyzer/pull/11481/commits/c8cd7a68b3ee3bc2c7de4d4287f554f78c63846a</a></p>",
        "id": 272023682,
        "sender_full_name": "Jeroen Vannevel",
        "timestamp": 1644952464
    },
    {
        "content": "<p>Looks like you can either have an identifier, <code>_</code> or <code>...</code> in a function pointer: <a href=\"https://doc.rust-lang.org/reference/types/function-pointer.html#function-pointer-types\">https://doc.rust-lang.org/reference/types/function-pointer.html#function-pointer-types</a></p>",
        "id": 272024223,
        "sender_full_name": "Jeroen Vannevel",
        "timestamp": 1644952697
    },
    {
        "content": "<p>And it can be omitted altogether, not unimportantly</p>",
        "id": 272024365,
        "sender_full_name": "Jeroen Vannevel",
        "timestamp": 1644952767
    },
    {
        "content": "<p><code>_</code> falls into the wildcard pattern so thats covered, <code>...</code> is a variadic which has different semantics</p>",
        "id": 272024987,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1644953065
    }
]