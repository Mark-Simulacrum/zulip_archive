[
    {
        "content": "<p>I've just noticed that the type is inferred incorrectly when a semicolon added to the <code>return</code> keyword.</p>\n<p>This works fine with the PR that fixes Never inference </p>\n<div class=\"codehilite\"><pre><span></span>let i = if true {\n        2.0\n    } else {\n        return\n    };\n</pre></div>\n\n\n<p>inferring <code>f64</code> for <code>i</code> but if you add any number of semicolons after <code>return</code>,  the type for <code>i</code> gets inferred as <code>()</code>.</p>\n<p>Any code pointers I can look at to fix the issue?</p>",
        "id": 174231112,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1566914078
    },
    {
        "content": "<p>rustc basically notices that the code path diverges and makes its type <code>!</code>. So we'd need to do something similar</p>",
        "id": 174237070,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1566917907
    },
    {
        "content": "<p>so that's a bit involved and requires some refactoring since we need to keep track of whether the code path diverges</p>",
        "id": 174238710,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1566918982
    },
    {
        "content": "<p>Nice, looks like the next thing to work on after Never coercion is merged, thank you.</p>",
        "id": 174242957,
        "sender_full_name": "Kirill Bulatov",
        "timestamp": 1566921569
    }
]