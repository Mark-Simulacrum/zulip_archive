[
    {
        "content": "<p>Hello! </p>\n<p>One particular problem in RA bugs me a bit, when a trait fn is autocompleted (like mul in Mul), it will not fill in the generics in the signature with the ones you have, so if you do <code>impl Mul&lt;usize&gt;</code>, it will not give you <code>fn mul(self, rhs: usize) -&gt; ...</code>, it will give you <code>fn mul(self, rhs: Rhs) -&gt; ...</code>. This is kind of annoying because you need to go back and fill it in. Is this issue already recorded as an issue or fixed in a PR? id be wiling to submit a PR to fix this (with maybe some help in finding where the completion is done :) ).</p>",
        "id": 242932244,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623872510
    },
    {
        "content": "<p>I don't think we have an issue tracking that yet, the completion for trait items lives in <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ide_completion/src/completions/trait_impl.rs\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ide_completion/src/completions/trait_impl.rs</a></p>",
        "id": 242934476,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623873502
    },
    {
        "content": "<p>Here to be precise is where the function is built <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ide_completion/src/completions/trait_impl.rs#L127-L165\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ide_completion/src/completions/trait_impl.rs#L127-L165</a></p>",
        "id": 242935081,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623873747
    },
    {
        "content": "<p>Awesome</p>",
        "id": 242935092,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623873758
    },
    {
        "content": "<p>Ill file an issue later and see if i can fix it myself</p>",
        "id": 242935110,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623873770
    },
    {
        "content": "<p>im not sure if copy and pasting the generic from the impl sig to the right place is enough haha</p>",
        "id": 242935152,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623873795
    },
    {
        "content": "<p>I cant think of any examples where that wouldnt work</p>",
        "id": 242935189,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623873815
    },
    {
        "content": "<p>Feel free to ask here if you got trouble with it/if somethings unclear</p>",
        "id": 242935204,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623873824
    },
    {
        "content": "<p>Ye taking the generic from the trait in the impl header seems to be a good idea</p>",
        "id": 242935314,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623873861
    },
    {
        "content": "<p>Alright ill try that first then see if anyone has alternate ideas</p>",
        "id": 242935797,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623874092
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span> how would i go about replacing the types in the function? from what i know, this is cached in a salsa db, so is there some way to get an owned struct or something? kind of confused on how to go about this <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 242958235,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623887760
    },
    {
        "content": "<p>You dont need to replace anything, you only have to change the source creation in ehre <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ide_completion/src/completions/trait_impl.rs#L153-L160\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ide_completion/src/completions/trait_impl.rs#L153-L160</a></p>",
        "id": 242958795,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623888177
    },
    {
        "content": "<p>so instead of modifying it in place i just add more edits to replace the types in the string?</p>",
        "id": 242958889,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623888256
    },
    {
        "content": "<p>im not sure if doing it on the type level or the source/ast level is easier</p>",
        "id": 242958967,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623888318
    },
    {
        "content": "<p>Oh I msorry I misunderstood the code here</p>",
        "id": 242958990,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623888358
    },
    {
        "content": "<p>Right you wanna <code>clone_for_update()</code> the function syntax node and then rewrite it you were right with that</p>",
        "id": 242959057,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623888396
    },
    {
        "content": "<p>cause from what i understand about RA's architecture, everything is either refcounted or its housed in a db, which makes getting owned stuff kinda rough :/</p>",
        "id": 242959064,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623888403
    },
    {
        "content": "<p>wouldnt working on the syntax node level be harder because the type info isnt there?</p>",
        "id": 242959083,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623888431
    },
    {
        "content": "<p>Ye so for syntax trees we have that <code>clone_for_update</code> function which basically makes a mutable clone of it that you can rewrite</p>",
        "id": 242959084,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623888432
    },
    {
        "content": "<p>i see</p>",
        "id": 242959094,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623888438
    },
    {
        "content": "<p>so i need to identify what to replace in another pass, then rewrite the syntax nodes based on that, right?</p>",
        "id": 242959107,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623888459
    },
    {
        "content": "<p>well all you really need is to copy the generic param node out of the impl/trait header and copy it into the function node's param type</p>",
        "id": 242959108,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623888459
    },
    {
        "content": "<p>then you can just render that</p>",
        "id": 242959111,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623888463
    },
    {
        "content": "<p>if I see this right</p>",
        "id": 242959119,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623888470
    },
    {
        "content": "<p>right but i need to check what types include generics</p>",
        "id": 242959125,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623888478
    },
    {
        "content": "<p>which might also be recursive</p>",
        "id": 242959156,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623888482
    },
    {
        "content": "<p>such as <code>Vec&lt;T&gt;</code>as a param instead of just <code>T</code></p>",
        "id": 242959178,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623888493
    },
    {
        "content": "<p>But <code>T</code> should already be in scope in that case so it doesnt matter just grabbing it should be fine</p>",
        "id": 242959199,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623888523
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 242959200,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623888523
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 242959214,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623888543
    },
    {
        "content": "<p>is there an easy way to pull the references to it inside that specific function?</p>",
        "id": 242959219,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623888547
    },
    {
        "content": "<p>what references do you mean</p>",
        "id": 242959236,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623888581
    },
    {
        "content": "<p>pulling all the references to each generic declared in the impl</p>",
        "id": 242959247,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623888595
    },
    {
        "content": "<p>like if the function takes <code>T</code> as a param, pulling that reference from the declared <code>T</code> in the impl</p>",
        "id": 242959307,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623888623
    },
    {
        "content": "<p>not even quite sure how to get the actual impl <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 242959484,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623888828
    },
    {
        "content": "<p>Mmh ye I just realized its not that simple as I was hoping</p>",
        "id": 242959491,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623888836
    },
    {
        "content": "<p>But</p>",
        "id": 242959494,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623888837
    },
    {
        "content": "<p>we have an assist that does something similar I just realized</p>",
        "id": 242959534,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623888844
    },
    {
        "content": "<p>so I think you can take inspiration from that</p>",
        "id": 242959538,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623888848
    },
    {
        "content": "<p>ooh</p>",
        "id": 242959542,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623888855
    },
    {
        "content": "<p><code>add_missing_impl_members</code></p>",
        "id": 242959543,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623888856
    },
    {
        "content": "<p>The <code>fill_in_type_params_1</code> and <code>fill_in_type_params_2</code> tests seems to do pretty similar things</p>",
        "id": 242959549,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623888876
    },
    {
        "content": "<p>where is that assist?</p>",
        "id": 242959558,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623888890
    },
    {
        "content": "<p>So I think you should be able to copy whatever its doing there</p>",
        "id": 242959563,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623888893
    },
    {
        "content": "<p>nvm found it</p>",
        "id": 242959567,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623888901
    },
    {
        "content": "<p><code>crates\\ide_assists\\src\\handlers\\add_missing_impl_members.rs</code></p>",
        "id": 242959574,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623888906
    },
    {
        "content": "<p>hmmm cant quite tell how its doing it</p>",
        "id": 242959678,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623889008
    },
    {
        "content": "<p>it seems to defer to <code>add_trait_assoc_items_to_impl</code>, but it doesnt seem to do anything for that, and it doesnt seem to be done before that</p>",
        "id": 242959821,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623889182
    },
    {
        "content": "<p>The assist first fetches all missing assoc items, which in your case here would be the function we want to complete, then <code>add_trait_assoc_items_to_impl</code> takes those and adds them to the passed impl and returns a new impl. Then the assist replaces the old impl block with the new one</p>",
        "id": 242960129,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623889450
    },
    {
        "content": "<p>it calls <code>get_missing_assoc_items</code> to get the items, but that function seems to do nothing for that</p>",
        "id": 242960132,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623889454
    },
    {
        "content": "<p>The replacement we dont wanna do here of course</p>",
        "id": 242960134,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623889456
    },
    {
        "content": "<p>hows that function substituting the generics however?</p>",
        "id": 242960157,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623889501
    },
    {
        "content": "<p>Substitution happens inside <code>add_trait_assoc_items_to_impl</code> via the <code>PathTransform</code> object in there</p>",
        "id": 242960221,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623889562
    },
    {
        "content": "<p>ah hmmm</p>",
        "id": 242960242,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623889571
    },
    {
        "content": "<p>ohh i see</p>",
        "id": 242960259,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623889586
    },
    {
        "content": "<p>yeah thats kind of obscure but i can prob just use that</p>",
        "id": 242960262,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623889594
    },
    {
        "content": "<p>So thats the component you certainly want to reuse</p>",
        "id": 242960269,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623889598
    },
    {
        "content": "<p>can i access that from ide_completion?</p>",
        "id": 242960278,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623889612
    },
    {
        "content": "<p>cause its a separate crate</p>",
        "id": 242960281,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623889621
    },
    {
        "content": "<p>Nope you will have to move that to <code>ide_db</code> most likely</p>",
        "id": 242960301,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623889640
    },
    {
        "content": "<p>whew, thats going to be some work</p>",
        "id": 242960312,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623889650
    },
    {
        "content": "<p>where would you suggest i put it? just in <a href=\"http://assists.rs\">assists.rs</a>?</p>",
        "id": 242960386,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623889685
    },
    {
        "content": "<p>actually, i can prob just copy over <a href=\"http://path_transform.rs\">path_transform.rs</a></p>",
        "id": 242960404,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623889713
    },
    {
        "content": "<p>I would just move the <code>ide_assists/src/path_transform.rs</code> to <code>ide_db/src/path_transform.rs</code> for now</p>",
        "id": 242960428,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623889749
    },
    {
        "content": "<p>ye</p>",
        "id": 242960431,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623889752
    },
    {
        "content": "<p>yeah thats what i did</p>",
        "id": 242960432,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623889755
    },
    {
        "content": "<p>getting a lot of unresolved imports for things like ide_db, is that normal?</p>",
        "id": 242960510,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623889816
    },
    {
        "content": "<p>from RA, it compiles fine though</p>",
        "id": 242960513,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623889828
    },
    {
        "content": "<p>you mean rustc is complaining?</p>",
        "id": 242960539,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623889860
    },
    {
        "content": "<p>oh</p>",
        "id": 242960542,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623889862
    },
    {
        "content": "<p>nvm</p>",
        "id": 242960543,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623889863
    },
    {
        "content": "<p>I imagine its related to the Databases?</p>",
        "id": 242960558,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623889879
    },
    {
        "content": "<p>yeah it seems to be</p>",
        "id": 242960564,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623889884
    },
    {
        "content": "<p>oh think i found it</p>",
        "id": 242960573,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623889894
    },
    {
        "content": "<p>Your proc-macro server might have crashed if you are on a recent nightly</p>",
        "id": 242960577,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623889900
    },
    {
        "content": "<p><code>proc macro server crashed</code>, i forgot i enabled the proc macro experimental thing some time ago lol</p>",
        "id": 242960579,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623889903
    },
    {
        "content": "<p>or is that not related to that?</p>",
        "id": 242960585,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623889917
    },
    {
        "content": "<p>yeah im on the latest nightly, i could switch to stable though</p>",
        "id": 242960627,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623889928
    },
    {
        "content": "<p>ye if crashes with the experimental feature turned on all items with attributes disappear to RA</p>",
        "id": 242960630,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623889933
    },
    {
        "content": "<p>well either switch to stable or turn off the experimental feature</p>",
        "id": 242960644,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623889954
    },
    {
        "content": "<p>what should the scopes in the path transform be in this case?</p>",
        "id": 242960673,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623889991
    },
    {
        "content": "<p>uuh</p>",
        "id": 242960702,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623890030
    },
    {
        "content": "<p>the assist seems to use the impl def as the target and ctx.sema's scope for the source</p>",
        "id": 242960790,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623890102
    },
    {
        "content": "<p>im not sure what ctx.sema is in this case, im guessing prob just the scope inside the impl block?</p>",
        "id": 242960816,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623890125
    },
    {
        "content": "<p>sema = Semantics, is just something that binds syntax to the hir in a sense</p>",
        "id": 242960830,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623890151
    },
    {
        "content": "<p>so you wanna use the same scopes here</p>",
        "id": 242960878,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623890164
    },
    {
        "content": "<p>that is</p>",
        "id": 242960881,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623890165
    },
    {
        "content": "<p>alright</p>",
        "id": 242960886,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623890172
    },
    {
        "content": "<p>get the scope for the trait def as source</p>",
        "id": 242960888,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623890173
    },
    {
        "content": "<p>and the scope of the impl for the target</p>",
        "id": 242960900,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623890188
    },
    {
        "content": "<p>to get the impl def the assist's approach of <code>ctx.find_node_at_offset::&lt;ast::Impl&gt;()?</code> should also work, or is this in a different context?</p>",
        "id": 242960921,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623890210
    },
    {
        "content": "<p>You already have the <code>Impl</code> node in the completion</p>",
        "id": 242960938,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623890236
    },
    {
        "content": "<p>oh i do? haha i must have missed it</p>",
        "id": 242960945,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623890244
    },
    {
        "content": "<p>the context there is different</p>",
        "id": 242960947,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623890245
    },
    {
        "content": "<p>Ye you will ahve to thread it through to your function call</p>",
        "id": 242960957,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623890265
    },
    {
        "content": "<p>But it already exists in  the <code>complete_trait_impl</code> call</p>",
        "id": 242960964,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623890275
    },
    {
        "content": "<p>through the context?</p>",
        "id": 242961011,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623890290
    },
    {
        "content": "<p>nvm im blind</p>",
        "id": 242961018,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623890301
    },
    {
        "content": "<p>the tricky part is to get the trait def node of the impl which you will need the semantics for</p>",
        "id": 242961057,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623890392
    },
    {
        "content": "<p>so, to get the trait i need to go through <code>resolve_target_trait</code>, but that wants the sema, which is different in this case</p>",
        "id": 242961131,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623890465
    },
    {
        "content": "<p>Ah ye there is a function for this already sweet</p>",
        "id": 242961136,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623890482
    },
    {
        "content": "<p>so the contexts are different here because one is an AssistContext and the other a CompletionContext</p>",
        "id": 242961146,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623890494
    },
    {
        "content": "<p>both have a <code>Semantics</code> though</p>",
        "id": 242961150,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623890499
    },
    {
        "content": "<p>no problem there then</p>",
        "id": 242961151,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623890503
    },
    {
        "content": "<p>yeah, and i presume the assistcontext is \"inside\" the impl block?</p>",
        "id": 242961153,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623890507
    },
    {
        "content": "<p>oh but even if it is, the sema should be the same, nvm</p>",
        "id": 242961160,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623890516
    },
    {
        "content": "<p>no the contexts is not linked to the syntax nodes in anyway</p>",
        "id": 242961213,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623890529
    },
    {
        "content": "<p>oh it isnt? odd</p>",
        "id": 242961228,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623890538
    },
    {
        "content": "<p>well the AssistContext knows about the file and can look through it to find nodes, not linked in any way is a wrong term sorry</p>",
        "id": 242961262,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623890572
    },
    {
        "content": "<p>The completioncontext does some more analysis on the syntax</p>",
        "id": 242961269,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623890588
    },
    {
        "content": "<p>should i also call <code>remove_attrs_and_docs</code> like the assist does?</p>",
        "id": 242961287,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623890634
    },
    {
        "content": "<p>nvm that was a stupid question</p>",
        "id": 242961347,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623890663
    },
    {
        "content": "<p>for some reason its also failing to check because its trying to build <code>tikv-jemalloc-sys</code>, but im on msvc, and Cargo.toml says it shouldnt be built for msvc</p>",
        "id": 242962292,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623891632
    },
    {
        "content": "<p>rustc builds it fine though</p>",
        "id": 242962298,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623891642
    },
    {
        "content": "<p>That seems odd</p>",
        "id": 242962477,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623891806
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/5HrrjaBCDQplaySOiN_KodCe/Screenshot_228.png\">Screenshot_228.png</a>  really weird</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/5HrrjaBCDQplaySOiN_KodCe/Screenshot_228.png\" title=\"Screenshot_228.png\"><img src=\"/user_uploads/4715/5HrrjaBCDQplaySOiN_KodCe/Screenshot_228.png\"></a></div>",
        "id": 242962557,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623891878
    },
    {
        "content": "<p>Yeah its really weird, even after deleting the jemalloc features, RA doesnt seem to identify errors when saving and running cargo check, but running cargo check manually shows them</p>",
        "id": 243061277,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623954041
    },
    {
        "content": "<p>Have you tried <code>cargo clean</code> and then rebuilding yet?</p>",
        "id": 243061646,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623954209
    },
    {
        "content": "<p>haha i was just about to say that fixed it</p>",
        "id": 243061663,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623954216
    },
    {
        "content": "<p>although the tikv-jemalloc-sys issue still exists, i had to remove the feature manually</p>",
        "id": 243061708,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623954231
    },
    {
        "content": "<p>hmm thats quite odd honestly, im on windwos as well and for me everything builds fine</p>",
        "id": 243062055,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623954355
    },
    {
        "content": "<p>im on 1.53 btw</p>",
        "id": 243062142,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623954388
    },
    {
        "content": "<p>that should be fine</p>",
        "id": 243062172,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623954403
    },
    {
        "content": "<p>i dont have any exotic RA settings that might mess with it i dont think</p>",
        "id": 243062174,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623954404
    },
    {
        "content": "<p>lol nevermind i have all features active <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 243062213,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623954427
    },
    {
        "content": "<p>spoke too soon</p>",
        "id": 243062219,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623954431
    },
    {
        "content": "<p>well there we go</p>",
        "id": 243062227,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623954435
    },
    {
        "content": "<p><span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 243062234,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623954438
    },
    {
        "content": "<p>haha does cargo not have a way to not offer a feature for a target</p>",
        "id": 243062267,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623954449
    },
    {
        "content": "<p>huh but it should be disabled for this workspace as the settings say</p>",
        "id": 243062409,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623954490
    },
    {
        "content": "<p>thats weird, turning it on and off fixed it, anyways it works haha</p>",
        "id": 243062509,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623954534
    },
    {
        "content": "<p>also, is there a way to easily transform the hir version of something to its ast version? other than going through the syntax node then to the ast node</p>",
        "id": 243063344,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623954857
    },
    {
        "content": "<p>like <code>hir::Impl</code> -&gt; <code>ast::Impl</code></p>",
        "id": 243063361,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623954864
    },
    {
        "content": "<p>ah nvm</p>",
        "id": 243063529,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623954948
    },
    {
        "content": "<p>there is a <code>source</code> function implemented on most hir things if needed</p>",
        "id": 243063649,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623954990
    },
    {
        "content": "<p><code>HasSource</code> being the trait i think</p>",
        "id": 243063657,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623954996
    },
    {
        "content": "<p>yeah i realized i can just go through source then value</p>",
        "id": 243063729,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623955031
    },
    {
        "content": "<p>everything working off a big database is interesting, its nice because you can cheaply pass around stuff but also kind of weird because u need to go through the db to get anything meaningful</p>",
        "id": 243063898,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623955081
    },
    {
        "content": "<p>also a bit weird because theres things that modify structures but dont take mutable refs, because they modify it in the db, so its sometimes hard to deduce what is changing what</p>",
        "id": 243064113,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623955155
    },
    {
        "content": "<p>The stuff inside the Database is immutable as far as I know</p>",
        "id": 243064281,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623955216
    },
    {
        "content": "<p>when should i be using clone_for_update? im making an AssocItem from the value of an hir Function, then applying the transform to that, then the edit, but in other places, the edit calls clone_subtree then clone_for_update</p>",
        "id": 243064548,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623955340
    },
    {
        "content": "<p>Basically the syntax trees are immutable, <code>clone_for_update</code> gives you a separate copy that can be modified though. <code>clone_subtree</code> clones a tree discarding the mutability \"flag\" again which is used there so <code>clone_for_update</code> doesnt panic should the tree already be mutable</p>",
        "id": 243064722,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623955422
    },
    {
        "content": "<p>sorry for all the questions, im very familiar with the parser and syntax part of RA but ive never messed with higher level stuff <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 243064748,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623955432
    },
    {
        "content": "<p>so usually you wanna call clone_for_update on a tree if you want to mutate (a copy of) it</p>",
        "id": 243064751,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623955434
    },
    {
        "content": "<p>so i should be cloning for update here so i can modify it <code>let assoc_item = ast::AssocItem::Fn(func.source(ctx.db)?.value);</code></p>",
        "id": 243064886,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623955484
    },
    {
        "content": "<p>yes</p>",
        "id": 243064918,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623955501
    },
    {
        "content": "<p>how come remove_attrs_and_docs doesnt seem to modify in place then <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 243065036,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623955557
    },
    {
        "content": "<p>It just hasnt been rewritten yet most likely. The inplace modification api is rather new</p>",
        "id": 243065237,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623955639
    },
    {
        "content": "<p>before you had to reconstruct a tree with your changes instead</p>",
        "id": 243065299,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623955653
    },
    {
        "content": "<p>oh is this the new rowan experiment i saw a while ago?</p>",
        "id": 243065314,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623955662
    },
    {
        "content": "<p>Yep</p>",
        "id": 243065329,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623955667
    },
    {
        "content": "<p>oh sweet</p>",
        "id": 243065336,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623955671
    },
    {
        "content": "<p>Immutable-mutable syntax trees</p>",
        "id": 243065338,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623955672
    },
    {
        "content": "<p>ive used rowan a ton for my own projects, thankfully i didnt really need tree mutation</p>",
        "id": 243065425,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623955693
    },
    {
        "content": "<p>hmm whats the opposite conversion method? ast -&gt; hir ?</p>",
        "id": 243065811,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623955872
    },
    {
        "content": "<p><code>sema.to_def</code></p>",
        "id": 243065829,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623955880
    },
    {
        "content": "<p>thanks :)</p>",
        "id": 243065837,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623955884
    },
    {
        "content": "<p>nice it seems to work</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">generics_are_inlined</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">check_edit</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">\"function\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">r#\"</span>\n<span class=\"s\">trait Foo&lt;T&gt; {</span>\n<span class=\"s\">    fn function(bar: T);</span>\n<span class=\"s\">}</span>\n<span class=\"s\">struct Bar;</span>\n\n<span class=\"s\">impl Foo&lt;u32&gt; for Bar {</span>\n<span class=\"s\">    fn f$0</span>\n<span class=\"s\">}</span>\n<span class=\"s\">\"#</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">r#\"</span>\n<span class=\"s\">trait Foo&lt;T&gt; {</span>\n<span class=\"s\">    fn function(bar: T);</span>\n<span class=\"s\">}</span>\n<span class=\"s\">struct Bar;</span>\n\n<span class=\"s\">impl Foo&lt;u32&gt; for Bar {</span>\n<span class=\"s\">    fn function(bar: u32) {</span>\n<span class=\"s\">    $0</span>\n<span class=\"s\">}</span>\n<span class=\"s\">}</span>\n<span class=\"s\">\"#</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 243067594,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623956659
    },
    {
        "content": "<p>just going to add some more tests and ill submit the PR</p>",
        "id": 243068064,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623956866
    },
    {
        "content": "<p>perfect <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 243068145,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623956884
    },
    {
        "content": "<p>are there any other special cases to test other than parameter inlining and return type inlining?</p>",
        "id": 243068276,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623956945
    },
    {
        "content": "<p>the type of associated consts</p>",
        "id": 243068553,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623957054
    },
    {
        "content": "<p>ohh yes</p>",
        "id": 243068563,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623957061
    },
    {
        "content": "<p>but aside from that i dont think so</p>",
        "id": 243068619,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623957082
    },
    {
        "content": "<p>or well technically the where clauses of functions could reference the generic parameters as well</p>",
        "id": 243068674,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623957105
    },
    {
        "content": "<p>so those have also be checked</p>",
        "id": 243068703,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623957118
    },
    {
        "content": "<p>oh think i found a bug, its not inlining multiple generics</p>",
        "id": 243068874,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623957178
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Left</span>:\n<span class=\"nc\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">function</span><span class=\"p\">(</span><span class=\"n\">bar</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">baz</span>: <span class=\"nc\">U</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Arc</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">function</span><span class=\"p\">(</span><span class=\"n\">bar</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">baz</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Arc</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n\n<span class=\"n\">Right</span>:\n<span class=\"nc\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">function</span><span class=\"p\">(</span><span class=\"n\">bar</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">baz</span>: <span class=\"nc\">U</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Arc</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">function</span><span class=\"p\">(</span><span class=\"n\">bar</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">baz</span>: <span class=\"nc\">U</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Arc</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 243068897,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623957189
    },
    {
        "content": "<p>thats odd, the path transform should already be doing this</p>",
        "id": 243068957,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623957215
    },
    {
        "content": "<p>oh wait i missed the other ones in the check lmao</p>",
        "id": 243069135,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623957278
    },
    {
        "content": "<p>what does the <code>f$0</code> represent? the <code>f</code> specifically, is <code>$0</code> enough if i want to test the const/function name?</p>",
        "id": 243069518,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623957437
    },
    {
        "content": "<p>The $0 is the cursor position in the test</p>",
        "id": 243070581,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623957891
    },
    {
        "content": "<p>you probably need to put at least one character after the <code>fn</code> because completion might not work otherwise in that position</p>",
        "id": 243070633,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623957912
    },
    {
        "content": "<p>as in <code>fn $0</code> might not trigger it</p>",
        "id": 243070662,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623957922
    },
    {
        "content": "<p>so the <code>f</code> there is just a character</p>",
        "id": 243070693,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1623957937
    },
    {
        "content": "<p>ah i see</p>",
        "id": 243071117,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623958109
    },
    {
        "content": "<p>hmm i just realized that PathTransform does not work on const generics</p>",
        "id": 243101224,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623974708
    },
    {
        "content": "<p>submitted the pr <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/9321\">https://github.com/rust-analyzer/rust-analyzer/pull/9321</a></p>",
        "id": 243101593,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623974977
    },
    {
        "content": "<p>hmm CI is failing because of trailing whitespace, but im not sure what it's complaining about, running cargo fmt check locally doesnt trigger it</p>",
        "id": 243102739,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623975924
    },
    {
        "content": "<p>Ugh. There's a space at the end of line 966 (do they start from 0?), but the test fails if you remove it.</p>",
        "id": 243119690,
        "sender_full_name": "Laurențiu",
        "timestamp": 1623996230
    },
    {
        "content": "<p>Try:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git i/crates/ide_completion/src/completions/trait_impl.rs w/crates/ide_completion/src/completions/trait_impl.rs</span>\n<span class=\"gh\">index 1f6b959af..37622aaad 100644</span>\n<span class=\"gd\">--- i/crates/ide_completion/src/completions/trait_impl.rs</span>\n<span class=\"gi\">+++ w/crates/ide_completion/src/completions/trait_impl.rs</span>\n<span class=\"gu\">@@ -953,7 +953,7 @@ trait Foo&lt;T&gt; {</span>\n struct Bar;\n\n impl Foo&lt;u32&gt; for Bar {\n<span class=\"gd\">-    const B$0</span>\n<span class=\"gi\">+    const B$0;</span>\n }\n \"#,\n             r#\"\n<span class=\"gu\">@@ -963,7 +963,7 @@ trait Foo&lt;T&gt; {</span>\n struct Bar;\n\n impl Foo&lt;u32&gt; for Bar {\n<span class=\"gd\">-    const BAR: u32 =</span>\n<span class=\"gi\">+    const BAR: u32 = ;</span>\n }\n \"#,\n         )\n</code></pre></div>",
        "id": 243119742,
        "sender_full_name": "Laurențiu",
        "timestamp": 1623996278
    },
    {
        "content": "<p>That worked, i pushed the changes</p>",
        "id": 243120244,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623996870
    },
    {
        "content": "<p>I think there were other errors on CI, but I couldn't reproduce them locally.</p>",
        "id": 243120309,
        "sender_full_name": "Laurențiu",
        "timestamp": 1623996935
    },
    {
        "content": "<p>If you run into this again, try setting <code>RUN_SLOW_TESTS=1</code></p>",
        "id": 243120316,
        "sender_full_name": "Laurențiu",
        "timestamp": 1623996945
    },
    {
        "content": "<p>I think you need to approve a rerun of the workflows</p>",
        "id": 243120399,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623997044
    },
    {
        "content": "<p>the errors in CI were just the formatting</p>",
        "id": 243120408,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623997068
    },
    {
        "content": "<p>Approved</p>",
        "id": 243120456,
        "sender_full_name": "Laurențiu",
        "timestamp": 1623997091
    },
    {
        "content": "<p>thanks <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 243120463,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623997099
    },
    {
        "content": "<p>CI passes <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 243120764,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1623997434
    },
    {
        "content": "<p>Filed <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/9326\">https://github.com/rust-analyzer/rust-analyzer/pull/9326</a> for the confusing error</p>",
        "id": 243149245,
        "sender_full_name": "Laurențiu",
        "timestamp": 1624016886
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span> i think you need to manually approve the bors workflow because im a first time contributor</p>",
        "id": 243185069,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624035042
    },
    {
        "content": "<p>kind of annoying, github didnt used to require this <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 243185100,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624035064
    },
    {
        "content": "<p>bors runs it on its own, as long the bors run works it'll merge</p>",
        "id": 243185102,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1624035065
    },
    {
        "content": "<p>ah ok</p>",
        "id": 243185120,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624035076
    },
    {
        "content": "<p>Its required now because people started abusing workflows of other repos for crypto mining</p>",
        "id": 243185153,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1624035099
    },
    {
        "content": "<p>yeah makes sense</p>",
        "id": 243185158,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624035105
    },
    {
        "content": "<p>Once someone approved the workflow for a contributor (or a PR, at least), it should probably work the second time</p>",
        "id": 243185238,
        "sender_full_name": "Laurențiu",
        "timestamp": 1624035129
    },
    {
        "content": "<p>but it still runs it when you submit the pr, it just doesnt run it multiple times</p>",
        "id": 243185244,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624035132
    },
    {
        "content": "<p>But it looks like it doesn't</p>",
        "id": 243185246,
        "sender_full_name": "Laurențiu",
        "timestamp": 1624035134
    },
    {
        "content": "<p>yeah</p>",
        "id": 243185253,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624035138
    },
    {
        "content": "<p>really weird</p>",
        "id": 243185260,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624035143
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu</span> <a href=\"#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/trait.20func.20completion.20does.20not.20fill.20in.20generics/near/243185238\">said</a>:</p>\n<blockquote>\n<p>Once someone approved the workflow for a contributor (or a PR, at least), it should probably work the second time</p>\n</blockquote>\n<p>you always have to reapprove after a commit unfortunately...</p>",
        "id": 243185272,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1624035152
    },
    {
        "content": "<p>im not sure how new features in releases work, does this get added to the monday release or is there an experimental version it goes through first?</p>",
        "id": 243185743,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624035451
    },
    {
        "content": "<p>We do a stable release every monday, and a nightly release every day</p>",
        "id": 243185829,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1624035486
    },
    {
        "content": "<p>awesome</p>",
        "id": 243185959,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624035587
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span> thanks for all the help btw! <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 243186562,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624035928
    }
]