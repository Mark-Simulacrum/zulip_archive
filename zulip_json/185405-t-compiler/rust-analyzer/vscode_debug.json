[
    {
        "content": "<p>I am debugging ra_lsp_server with vscode. I've caught a panic, but cannot step into source code, all functions in the callstack are shown only in assembly language. Does someone know how to switch to source code here?<br>\n<a href=\"/user_uploads/4715/0KpLRZhhigtebao2J5YUe_jY/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/0KpLRZhhigtebao2J5YUe_jY/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/0KpLRZhhigtebao2J5YUe_jY/pasted_image.png\"></a></div>",
        "id": 186625120,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580050805
    },
    {
        "content": "<p>Did you compile with debug info?</p>",
        "id": 186625128,
        "sender_full_name": "bjorn3",
        "timestamp": 1580050843
    },
    {
        "content": "<p>I just ran <code>cargo build</code>. Doesn't it compile with debug symbols enabled?</p>",
        "id": 186625142,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580050876
    },
    {
        "content": "<p>nope: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/Cargo.toml#L7\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/Cargo.toml#L7\">https://github.com/rust-analyzer/rust-analyzer/blob/master/Cargo.toml#L7</a></p>",
        "id": 186625147,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1580050903
    },
    {
        "content": "<p>Oh, thanks! By the way, the project already takes 13GB, I wonder how much it would take with debug symbols)</p>",
        "id": 186625199,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580050971
    },
    {
        "content": "<p>If you use <code>debug = 1</code>, instead of the default <code>debug = 2</code> , it will only add lineinfo, but not info required to show locals, etc</p>",
        "id": 186625256,
        "sender_full_name": "bjorn3",
        "timestamp": 1580051055
    },
    {
        "content": "<p>You can also use <code>[profile.dev.package.abc]</code> to only change settings for crate <code>abc</code></p>",
        "id": 186625260,
        "sender_full_name": "bjorn3",
        "timestamp": 1580051100
    },
    {
        "content": "<p>Can you please hint me if there is a cli option for <code>cargo</code> for debug level?</p>",
        "id": 186625272,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580051127
    },
    {
        "content": "<p>No, you can use <code>RUSTFLAGS=\"-Cdebuginfo=1\"</code> or <code>RUSTFLAGS=\"-Cdebuginfo=2\"</code> though</p>",
        "id": 186625324,
        "sender_full_name": "bjorn3",
        "timestamp": 1580051192
    },
    {
        "content": "<p>Okay, thanks!</p>",
        "id": 186625339,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580051223
    },
    {
        "content": "<p>Guys, how do you debug unit tests in vscode? I see that test binaries a very hard to take apart from other binaries. The only way I see now is running <code>cargo test --no-run --message-format=json &gt; artifacts.json</code>, then manually looking up the test binary name and setting it in <code>launch.json</code> (I think I'd write a script for this)</p>",
        "id": 186629081,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580058078
    },
    {
        "content": "<p>Iâ€™d say the easiest would be to teach rust-analyzer to generate appropriate<br>\ndebugger invocation, and then just using this feature :)</p>",
        "id": 186629370,
        "sender_full_name": "matklad",
        "timestamp": 1580058513
    },
    {
        "content": "<p>Yeah, <code>Debug test</code> right near <code>Run test</code> button would be super helpful )</p>",
        "id": 186629445,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580058623
    },
    {
        "content": "<p>Hmm, I found a good extension dedicated just for that <a href=\"https://github.com/hdevalke/rust-test-lens\" target=\"_blank\" title=\"https://github.com/hdevalke/rust-test-lens\">https://github.com/hdevalke/rust-test-lens</a></p>",
        "id": 186629693,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580059078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> To my mind we should integrate this <code>Debug test</code> functionality directly into <code>rust-analyzer</code>. What do you think?</p>",
        "id": 186635798,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580068956
    },
    {
        "content": "<p>We absolutely should</p>",
        "id": 186666952,
        "sender_full_name": "matklad",
        "timestamp": 1580119019
    },
    {
        "content": "<p>The problem is that this is not expressible in the LSP protocol (and even in the VS Code API), so that would need some custom code to handle</p>",
        "id": 186666980,
        "sender_full_name": "matklad",
        "timestamp": 1580119055
    },
    {
        "content": "<p>Moreover, I would love to see this implemented in a very generic manner, like \"the server specifies the command line to invoke something, the debugger than injects its stuff into the command line\", but that doesn't work out naturally, as you don't know the name of the output file with tests beforehand</p>",
        "id": 186667100,
        "sender_full_name": "matklad",
        "timestamp": 1580119152
    },
    {
        "content": "<p>So, we need this whole dance with \"execute once with --message-format=json, then build the command line invocation\", and it's not clear what's the best way to implement this. Like, which parts are in the client, which parts are in the server</p>",
        "id": 186667189,
        "sender_full_name": "matklad",
        "timestamp": 1580119212
    },
    {
        "content": "<p>The extension I provided the link to does this purely without the LSP. We could roughly copy-paste that code)</p>",
        "id": 186667223,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580119237
    },
    {
        "content": "<p>I personally am very well acquainted with TypeScript, so it would be a jiffy</p>",
        "id": 186667293,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580119304
    },
    {
        "content": "<p>I think we should at least keep test discovery on the server side (because that would be able to deal with proc macros one day)</p>",
        "id": 186667354,
        "sender_full_name": "matklad",
        "timestamp": 1580119347
    },
    {
        "content": "<p>So I think we should rather extend the current code for \"runnables\"</p>",
        "id": 186667370,
        "sender_full_name": "matklad",
        "timestamp": 1580119365
    },
    {
        "content": "<p>Okay, I am not yet into higher-level stuff of our LSP, but nevertheless, this needs more thorough investigation. I'll create an issue for that, I guess.</p>",
        "id": 186667559,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580119516
    },
    {
        "content": "<p>The relevant bits are</p>\n<ul>\n<li><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/runnables.rs\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/runnables.rs\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/runnables.rs</a></li>\n<li><a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/editors/code/src/commands/runnables.ts\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/editors/code/src/commands/runnables.ts\">https://github.com/rust-analyzer/rust-analyzer/blob/master/editors/code/src/commands/runnables.ts</a></li>\n</ul>",
        "id": 186667738,
        "sender_full_name": "matklad",
        "timestamp": 1580119662
    },
    {
        "content": "<p>Thanks! And just FYI, I found the link to the extension from this issue:<br>\n<a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/2593\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/2593\">https://github.com/rust-analyzer/rust-analyzer/issues/2593</a></p>",
        "id": 186667927,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580119819
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"258149\">@std::Veetaha</span> <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>  Maybe this interests you. The \"Rust test lens\" extension for VSCode is very nice for debugging (or running) just a test from the code, which is, AFAICT, what you're looking for. The extension repo is at <a href=\"https://github.com/hdevalke/rust-test-lens\" target=\"_blank\" title=\"https://github.com/hdevalke/rust-test-lens\">https://github.com/hdevalke/rust-test-lens</a></p>",
        "id": 186675745,
        "sender_full_name": "pachi",
        "timestamp": 1580127030
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125416\">@pachi</span>, thanks for the link, though I already mentioned it higher in the discussion)</p>",
        "id": 186684887,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580134603
    },
    {
        "content": "<p>Oh, sorry for the noise, then. I read your message yesterday while on the phone and tried to send the information today just in case.</p>",
        "id": 186685957,
        "sender_full_name": "pachi",
        "timestamp": 1580135234
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> , I've read about <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/2940/files\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/2940/files\">your debugging workflow</a>. It seems that you are unaware of VSCode <code>logpoints</code>, these are just like debugger breakpoints, but the debugger doesn't stop at them, but instead logs an expression at that point. It means you don't have to literally put <code>dbg!()</code> expressions into the code and recompile it, but just put a logpoint there and rerun the already compiled binary.<br>\n<a href=\"/user_uploads/4715/Jq0SK7TBCADfNTqYk_rUGiQW/logpoints.gif\" target=\"_blank\" title=\"logpoints.gif\">logpoints.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/Jq0SK7TBCADfNTqYk_rUGiQW/logpoints.gif\" target=\"_blank\" title=\"logpoints.gif\"><img src=\"/user_uploads/4715/Jq0SK7TBCADfNTqYk_rUGiQW/logpoints.gif\"></a></div>",
        "id": 187156882,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580552765
    },
    {
        "content": "<p>That is so cool and useful, thanks for sharing</p>",
        "id": 187157765,
        "sender_full_name": "Emil Lauridsen",
        "timestamp": 1580554617
    },
    {
        "content": "<p>Indeed I am not aware of that, that's cool, thanks for sharing! Do they work with <code>Debug</code> impls, or only with build-in pretty-printers?</p>",
        "id": 187162787,
        "sender_full_name": "matklad",
        "timestamp": 1580564725
    },
    {
        "content": "<p>They probably only work with build-in pretty-printers</p>",
        "id": 187162833,
        "sender_full_name": "bjorn3",
        "timestamp": 1580564791
    },
    {
        "content": "<p>I personally don't have idea, it uses some python scripting underneath, so that to get the length of <code>Vec&lt;T&gt;</code> you have to type <code>len(vec)</code> instead of <code>vec.len()</code></p>",
        "id": 187164114,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580567501
    },
    {
        "content": "<p>This is the problem of watching expressions at all, they somehow use python syntax but not rust</p>",
        "id": 187164152,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580567529
    },
    {
        "content": "<p>For example, when I try to evaluate a + b, both i32, it says <code>&lt;not available&gt;</code></p>",
        "id": 187164228,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580567736
    },
    {
        "content": "<p>But <code>int(a) + int(b)</code> works. Its something weird like <code>a</code> and <code>b</code> are python strings<br>\n<a href=\"user_uploads/4715/INrZsPg5IlQbHDtP7kHCtIb2/pasted_image.png\" target=\"_blank\" title=\"user_uploads/4715/INrZsPg5IlQbHDtP7kHCtIb2/pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"user_uploads/4715/INrZsPg5IlQbHDtP7kHCtIb2/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"user_uploads/4715/INrZsPg5IlQbHDtP7kHCtIb2/pasted_image.png\"></a></div>",
        "id": 187164229,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1580567739
    },
    {
        "content": "<p>Does one know a legal way to debug <code>rust-analyzer</code> from the entrypoint (i.e. not to attach the debugger in the middle of running the <code>main_loop</code>, but from the beginning)?</p>",
        "id": 189157893,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1582750473
    },
    {
        "content": "<p>Put a <code>thread::sleep</code> at the beginning of <code>main</code>? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 189159053,
        "sender_full_name": "LaurenÈ›iu",
        "timestamp": 1582751191
    },
    {
        "content": "<p>I found a better solution, though still illegal:<br>\n<a href=\"/user_uploads/4715/1Qg-7M0dsZqOUNRLu7HJ2aX-/image.png\" target=\"_blank\" title=\"image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/1Qg-7M0dsZqOUNRLu7HJ2aX-/image.png\" target=\"_blank\" title=\"image.png\"><img src=\"/user_uploads/4715/1Qg-7M0dsZqOUNRLu7HJ2aX-/image.png\"></a></div>",
        "id": 189159404,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1582751457
    },
    {
        "content": "<p><code>sleep</code> might be better because it doesn't require you to change a variable value or the next instruction using the debugger</p>",
        "id": 189159581,
        "sender_full_name": "LaurenÈ›iu",
        "timestamp": 1582751552
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/std/intrinsics/fn.breakpoint.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/std/intrinsics/fn.breakpoint.html\">https://doc.rust-lang.org/std/intrinsics/fn.breakpoint.html</a></p>",
        "id": 189159656,
        "sender_full_name": "matklad",
        "timestamp": 1582751579
    },
    {
        "content": "<p>5 seconds or so should be enough to attach a debugger</p>",
        "id": 189159798,
        "sender_full_name": "LaurenÈ›iu",
        "timestamp": 1582751616
    },
    {
        "content": "<p>Hey guys, does anyone have a problem  with taking screenshots of on-hover hints in vscode (Ubuntu)? I remember some time ago this worked well. But something changed and I can no longer make partial screenshots of hover info because it disappears once I press <code>Shift+PrtSc</code> in vscode and this drives me mad...<br>\n<a href=\"/user_uploads/4715/yssOxHxzequ0RWinAMe6eHCE/screen.gif\" title=\"screen.gif\">screen.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/yssOxHxzequ0RWinAMe6eHCE/screen.gif\" title=\"screen.gif\"><img src=\"/user_uploads/4715/yssOxHxzequ0RWinAMe6eHCE/screen.gif\"></a></div>",
        "id": 192719520,
        "sender_full_name": "std::Veetaha",
        "timestamp": 1585858271
    },
    {
        "content": "<p>it works in windows</p>",
        "id": 192725348,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1585861153
    },
    {
        "content": "<p>i've seen a lot of weirdness with vscode in my ubuntu vm though.</p>",
        "id": 192725405,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1585861172
    },
    {
        "content": "<p>white menus etc. there are definitely electron issues</p>",
        "id": 192725458,
        "sender_full_name": "Jeremy Kolb",
        "timestamp": 1585861198
    },
    {
        "content": "<p>It works for me on Gnome Wayland / Arch Linux:</p>\n<p><a href=\"/user_uploads/4715/9AaYgQlzOShlhqwg9WBh7xWN/image.png\" title=\"image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/9AaYgQlzOShlhqwg9WBh7xWN/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/9AaYgQlzOShlhqwg9WBh7xWN/image.png\"></a></div>",
        "id": 192769949,
        "sender_full_name": "LaurenÈ›iu",
        "timestamp": 1585901461
    }
]