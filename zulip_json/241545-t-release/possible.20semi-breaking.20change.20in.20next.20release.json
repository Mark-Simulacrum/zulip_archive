[
    {
        "content": "<p>I stumbled across <a href=\"https://github.com/rust-lang/rust/issues/88581\">https://github.com/rust-lang/rust/issues/88581</a> yesterday due to it breaking nightly build of a project I made a PR for - in short, everything that has a Cargo.lock for num-bigint will break (though it's not technically a breaking change)</p>\n<p>I think crater will regenerate lockfiles right? Is there a way to make it not do that to see what pinned things this might break?</p>",
        "id": 251998362,
        "sender_full_name": "Aidan Hobson Sayers",
        "timestamp": 1630759678
    },
    {
        "content": "<p>it wouldn't be the first time we temporarily revert something like this, even though it's an 'acceptable' breaking change.</p>",
        "id": 252008730,
        "sender_full_name": "Mara",
        "timestamp": 1630770111
    },
    {
        "content": "<p>would be nice if #[unstable] would hide/disable the method a bit better, like it does in some cases.</p>",
        "id": 252008803,
        "sender_full_name": "Mara",
        "timestamp": 1630770168
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"117568\">Aidan Hobson Sayers</span> <a href=\"#narrow/stream/241545-t-release/topic/possible.20semi-breaking.20change.20in.20next.20release/near/251998362\">said</a>:</p>\n<blockquote>\n<p>I think crater will regenerate lockfiles right?</p>\n</blockquote>\n<p>I'm pretty certain crater will keep existing lockfiles.</p>\n<blockquote>\n<p>would be nice if #[unstable] would hide/disable the method a bit better, like it does in some cases.</p>\n</blockquote>\n<p>Does anyone know why the <code>unstable_name_collisions</code> lint didn't fire in this case instead of erroring?</p>",
        "id": 252011430,
        "sender_full_name": "Eric Huss",
        "timestamp": 1630772994
    },
    {
        "content": "<p>i'm guessing because the signature is different? maybe</p>",
        "id": 252012452,
        "sender_full_name": "Mara",
        "timestamp": 1630774116
    },
    {
        "content": "<p>I think it's because the <code>self</code> inherent method is resolved before the <code>&amp;self</code> trait method is considered at all.</p>",
        "id": 252217814,
        "sender_full_name": "cuviper",
        "timestamp": 1630958307
    },
    {
        "content": "<p>There is more discussion of this over at <a href=\"https://github.com/rust-lang/rust/issues/88878\">#88878</a>.  I confirmed the reason the unstable method resolution skip didn't work is because it only considers collisions when the receiver is the same.</p>",
        "id": 253003087,
        "sender_full_name": "Eric Huss",
        "timestamp": 1631470955
    },
    {
        "content": "<p>I'm happy to submit a PR to temporarily revert the implementation if desired. Not like the new methods are a pressing issue that needs fixing.</p>",
        "id": 253024817,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1631495655
    },
    {
        "content": "<p>Iterator::intersperse will hit stable in ~6 weeks, so I don't think we should revert on nightly (it was stabilized in 1.56, nightly is 1.57 as of last week).</p>",
        "id": 253026069,
        "sender_full_name": "simulacrum",
        "timestamp": 1631496999
    },
    {
        "content": "<p>I think that's the one causing the most trouble.</p>",
        "id": 253026083,
        "sender_full_name": "simulacrum",
        "timestamp": 1631497010
    },
    {
        "content": "<p>yeah, this is often a problem :(   we could really use some solution for it, but it's tricky.</p>",
        "id": 253071151,
        "sender_full_name": "Mara",
        "timestamp": 1631531219
    },
    {
        "content": "<p>we could record the version of std that was used when publishing a crate, and then treat all #[stable] things with a rust version higher than that as #[unstable]. that would already solve a ton of these situations.</p>",
        "id": 253071244,
        "sender_full_name": "Mara",
        "timestamp": 1631531273
    },
    {
        "content": "<p>Seems.. complicated. I think once cfg(accessible) stabilizes the <em>really</em> prominent examples like itertools can probably cfg(not(accessible)) their methods?</p>",
        "id": 253080763,
        "sender_full_name": "simulacrum",
        "timestamp": 1631536176
    },
    {
        "content": "<p>Obviously, in some cases, there may not be a perfect API match, but often it's close enough.</p>",
        "id": 253080782,
        "sender_full_name": "simulacrum",
        "timestamp": 1631536193
    },
    {
        "content": "<p>yeah that also works. but requires work on the side of <code>itertools</code>. but that's already a lot better than nothing</p>",
        "id": 253080902,
        "sender_full_name": "Mara",
        "timestamp": 1631536231
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/241545-t-release/topic/possible.20semi-breaking.20change.20in.20next.20release/near/253080763\">said</a>:</p>\n<blockquote>\n<p>Seems.. complicated.</p>\n</blockquote>\n<p>what part of that seems complicated?</p>",
        "id": 253080972,
        "sender_full_name": "Mara",
        "timestamp": 1631536271
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310399\">Mara</span> <a href=\"#narrow/stream/241545-t-release/topic/possible.20semi-breaking.20change.20in.20next.20release/near/253071244\">said</a>:</p>\n<blockquote>\n<p>we could record the version of std that was used when publishing a crate, and then treat all #[stable] things with a rust version higher than that as #[unstable]. that would already solve a ton of these situations.</p>\n</blockquote>\n<p>Cargo will soon stabilize the <code>rust-version</code> field. Treating <code>#[stable]</code> things with a rust version higher than the specified version in <code>rust-version</code> as unstable would not only solve this issue of breaking changes, but also make it much harder to accidentally depend on something not yet supported by the specified rust version.</p>",
        "id": 253080999,
        "sender_full_name": "bjorn3",
        "timestamp": 1631536288
    },
    {
        "content": "<p>yeah!</p>",
        "id": 253081029,
        "sender_full_name": "Mara",
        "timestamp": 1631536306
    },
    {
        "content": "<p>I think it will have to be implemented before stabilization though, or use a different field for back compat of rustc itself.</p>",
        "id": 253081133,
        "sender_full_name": "bjorn3",
        "timestamp": 1631536342
    },
    {
        "content": "<p>yeah i wonder how hard it is to implement. spans will need to track that version, just like they track the edition already.</p>",
        "id": 253081184,
        "sender_full_name": "Mara",
        "timestamp": 1631536374
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/241545-t-release/topic/possible.20semi-breaking.20change.20in.20next.20release/near/253080999\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310399\">Mara</span> <a href=\"#narrow/stream/241545-t-release/topic/possible.20semi-breaking.20change.20in.20next.20release/near/253071244\">said</a>:</p>\n<blockquote>\n<p>we could record the version of std that was used when publishing a crate, and then treat all #[stable] things with a rust version higher than that as #[unstable]. that would already solve a ton of these situations.</p>\n</blockquote>\n<p>Cargo will soon stabilize the <code>rust-version</code> field. Treating <code>#[stable]</code> things with a rust version higher than the specified version in <code>rust-version</code> as unstable would not only solve this issue of breaking changes, but also make it much harder to accidentally depend on something not yet supported by the specified rust version.</p>\n</blockquote>\n<p>isn't that stabilizing in 1.56? we'd need to revert the stabilization quickly in that case</p>",
        "id": 253083092,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1631537256
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"3139\">@T-cargo</span> ^</p>",
        "id": 253083104,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1631537261
    },
    {
        "content": "<p>Hm, I think it's future compatible for us to add more to it -- we'd just not do so for earlier Rust versions?</p>",
        "id": 253083201,
        "sender_full_name": "simulacrum",
        "timestamp": 1631537292
    },
    {
        "content": "<p>that'd be really confusing tbh</p>",
        "id": 253083340,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1631537363
    },
    {
        "content": "<p>with the field having a different meaning once you bump your MSRV</p>",
        "id": 253083462,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1631537409
    },
    {
        "content": "<p>It has the same meaning?</p>",
        "id": 253083483,
        "sender_full_name": "simulacrum",
        "timestamp": 1631537419
    },
    {
        "content": "<p>It's just 'less advisory', in some sense</p>",
        "id": 253083504,
        "sender_full_name": "simulacrum",
        "timestamp": 1631537431
    },
    {
        "content": "<p>sorry, meaning was the wrong word for that <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 253083559,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1631537458
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310399\">Mara</span> <a href=\"#narrow/stream/241545-t-release/topic/possible.20semi-breaking.20change.20in.20next.20release/near/253081184\">said</a>:</p>\n<blockquote>\n<p>yeah i wonder how hard it is to implement. spans will need to track that version, just like they track the edition already.</p>\n</blockquote>\n<p>I think we could likely get away with it being tracked at a crate level, no? Spans don't track the ambient #![feature(...)] today, and this would be pretty close to that, right?</p>",
        "id": 253083664,
        "sender_full_name": "simulacrum",
        "timestamp": 1631537514
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/241545-t-release/topic/possible.20semi-breaking.20change.20in.20next.20release/near/253083504\">said</a>:</p>\n<blockquote>\n<p>It's just 'less advisory', in some sense</p>\n</blockquote>\n<p>true, but still, I'm worried about the guarantee only applying to some values of that field, not all of them</p>",
        "id": 253084007,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1631537644
    },
    {
        "content": "<p>editions are also a crate-level property, but tracked for the spans, so it works well through macro expansions. and enabled features are also already tracked per span, through allow_internal_unstable.</p>",
        "id": 253084147,
        "sender_full_name": "Mara",
        "timestamp": 1631537716
    },
    {
        "content": "<p>In the sense that 1.57 wouldn't actually guarantee your MSRV isn't 1.70? That's going to be true regardless, right?</p>",
        "id": 253084153,
        "sender_full_name": "simulacrum",
        "timestamp": 1631537719
    },
    {
        "content": "<p>Since we're not tracking <em>all</em> features through this</p>",
        "id": 253084179,
        "sender_full_name": "simulacrum",
        "timestamp": 1631537738
    },
    {
        "content": "<p>e.g., if you use a new lang feature, that's not likely to be detected, because we don't want to leave all the feature gating code in the compiler indefinitely I think</p>",
        "id": 253084254,
        "sender_full_name": "simulacrum",
        "timestamp": 1631537763
    },
    {
        "content": "<p>(high burden on implementors to be careful, not always possible...)</p>",
        "id": 253084290,
        "sender_full_name": "simulacrum",
        "timestamp": 1631537781
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/241545-t-release/topic/possible.20semi-breaking.20change.20in.20next.20release/near/253084153\">said</a>:</p>\n<blockquote>\n<p>In the sense that 1.57 wouldn't actually guarantee your MSRV isn't 1.70? That's going to be true regardless, right?</p>\n</blockquote>\n<p>it's more like \"to ensure your crate doesn't break due to standard library changes you should set the <code>rust-version</code> field\" instead of \"[...] you should set a <code>rust-version</code> greater than 1.XX\"</p>",
        "id": 253084421,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1631537845
    },
    {
        "content": "<p>if in blogs, online comments and such \"greater than 1.XX\" is forgotten then people are going to get the wrong behavior without any error telling them they're not actually opting into that guarantee</p>",
        "id": 253084556,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1631537887
    },
    {
        "content": "<p>they just get the current behavior -- not really \"wrong\", just more prone to breakage <em>if</em> it happens</p>",
        "id": 253084646,
        "sender_full_name": "simulacrum",
        "timestamp": 1631537935
    },
    {
        "content": "<p>(if this is implemented along with the stabilization the two options would instead be \"warning/error due to the missing field\" vs \"you have the guarantee\")</p>",
        "id": 253084676,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1631537948
    },
    {
        "content": "<p>but in any case, fwiw, this is basically editions on steroids to some extent. I know there was push back when I suggested per-version editions, and this is not far off :)</p>",
        "id": 253084707,
        "sender_full_name": "simulacrum",
        "timestamp": 1631537958
    },
    {
        "content": "<p>(since you can tie \"anything\" at that point to the version field)</p>",
        "id": 253084742,
        "sender_full_name": "simulacrum",
        "timestamp": 1631537975
    },
    {
        "content": "<p>Responding to the ping, but the <code>rust-version</code> field has had tons of debate and is very deliberately quite simple and doesn't really do much in the manifest. Blocking it for \"what about this\" or enhancing it should go through a forum that probably doesn't just ping the Cargo team</p>",
        "id": 253108595,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1631546773
    },
    {
        "content": "<p>That reminds me -- <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> can you confirm it doesn't participate in dep resolution at all today? That was my impression based on a quick skim of docs and issues, but wanted to check since I explicitly noted that in release notes</p>",
        "id": 253109287,
        "sender_full_name": "simulacrum",
        "timestamp": 1631546998
    },
    {
        "content": "<p>correct, all it does is generate an error if you're rustc is too old</p>",
        "id": 253109372,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1631547019
    },
    {
        "content": "<p>thanks!</p>",
        "id": 253109394,
        "sender_full_name": "simulacrum",
        "timestamp": 1631547028
    },
    {
        "content": "<p>Yeah, all the other fancy stuff was left to future work (RFCs)</p>",
        "id": 253319917,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1631651783
    },
    {
        "content": "<p>Hi, itertools maintainer here. These sorts of breakages are frustrating because they strike at the heart of the mission of itertools: to improve iterator ergonomics, and to serve as a low-stakes laboratory for potential additions to <code>Iterator</code>. Unfortunately, the more an <code>Itertools</code> addition succeeds at this mission, the worse the breakage is when that addition is mainlined into <code>Iterator</code>. I often feel like I maintain a ticking time bomb, and have a hard time recommending the crate given the risk posed by using it. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>\n<p>In the past, what we've done in the event of this kind of breakage is deprecate the offending method, then removed it. Unfortunately, as itertools's dependents have increased over the years, the scope of the ensuing breakage has only increased.</p>\n<p>I'm happy to take a more sophisticated approach this time around, provided that the maintenance burden isn't too high. (E.g., I generally don't have the capacity to push out new minor releases of old versions of Itertools, but unfortunately 42% of our users are on 0.9.x or lower.)</p>",
        "id": 256752251,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1633704967
    },
    {
        "content": "<p>Thanks! We're reverting the stabilization for now, but there's definitely an expectation to continue discussions and identify the best path forward for both this stabilization but also future ones with similar patterns -- it's not a problem limited to itertools, for sure.</p>",
        "id": 256753270,
        "sender_full_name": "simulacrum",
        "timestamp": 1633705376
    },
    {
        "content": "<p>I wonder if prefixing/postfixing all itertools methods with something would solve this issue? That would make it unlikely to conflict with new Iterator methods, though it would of course reduce ergonomics for itertools users and won't fix users of older itertools versions.</p>",
        "id": 256798219,
        "sender_full_name": "bjorn3",
        "timestamp": 1633723634
    },
    {
        "content": "<p>Or could we make <code>Iterator::intersperse</code> \"weak\" in method resolution?<br>\nBasically the same as what we're doing for <code>unstable</code> already, just made permanent.</p>",
        "id": 256808022,
        "sender_full_name": "cuviper",
        "timestamp": 1633728188
    },
    {
        "content": "<p>IMHO, it would be good to have a generic solution. E.g. I think extending std types in third party crates, like <code>File</code> and <code>Path</code>, is also something that should be encouraged instead of being a potential hazard, no?</p>",
        "id": 256809132,
        "sender_full_name": "Chris Denton",
        "timestamp": 1633728792
    },
    {
        "content": "<p>I wonder if we could have a \"weak resolution\" attribute in libstd so the compiler gives precedence to items from other crates</p>",
        "id": 256813638,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1633731462
    },
    {
        "content": "<p>Basically the <code>unstable</code> thing but for <em>all</em> items, not just intersperse</p>",
        "id": 256813686,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1633731483
    }
]