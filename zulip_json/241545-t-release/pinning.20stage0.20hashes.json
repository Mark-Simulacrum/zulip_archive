[
    {
        "content": "<p>I've been thinking lately about improving the security of rust's supply chain, and a thing that came to mind are the stage0 compilers downloaded by x.py</p>",
        "id": 246715315,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1626872357
    },
    {
        "content": "<p>right now x.py unconditionally downloads the compiler binaries from (dev-)static.rust-lang.org, without performing any check on whether they're the binaries we expect</p>",
        "id": 246715467,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1626872411
    },
    {
        "content": "<p>and I'm wondering whether it makes sense to have <code>src/stage0.sha256</code>, with the hashes of all the tarballs x.py could download</p>",
        "id": 246715595,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1626872457
    },
    {
        "content": "<p>(then we'd have a tool to bump both the stage0 and update the <code>.sha256</code> file, instead of manually changing the stage0 file)</p>",
        "id": 246715741,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1626872512
    },
    {
        "content": "<p>IMO that would reduce a possible attack vector without adding too much complexity for us when updating the stage0 (as long as a tool is present to do the bump and collect the hashes for us)</p>",
        "id": 246715931,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1626872615
    },
    {
        "content": "<p>thoughts?</p>",
        "id": 246715938,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1626872622
    },
    {
        "content": "<p>I think it adds complexity (makes it harder to bump stage 0 locally for example for testing, at least by adding a tool rather than just a simpler bump) and I'm not really sure what this truly helps with. If you can't trust your ssl connection (and IIRC we require ssl on this) then you likely can't get a rust repository either securely...</p>\n<p>I think it's also pretty uncommon, and I at least would prefer to avoid engineering solutions like this without a write up of our presumed threat vectors and such, so that we can address the right things.</p>\n<p>Regardless, I would say a mild blocker on this is to stop bumping stage 0 manually entirely, across channels, in which case it matters much less what the tool etc is</p>",
        "id": 246716464,
        "sender_full_name": "simulacrum",
        "timestamp": 1626872889
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121055\">Pietro Albini</span> <a href=\"#narrow/stream/241545-t-release/topic/pinning.20stage0.20hashes/near/246715467\">said</a>:</p>\n<blockquote>\n<p>right now x.py unconditionally downloads the compiler binaries from (dev-)static.rust-lang.org, without performing any check on whether they're the binaries we expect</p>\n</blockquote>\n<p>But if it's HTTPs, don't we already know that it is from us? I'm not sure I see the attack vector. Like yes someone could upload malicious stage0 compiler, but if that person could do that, couldn't they also upload the hashes of the new malicious compiler?</p>",
        "id": 246716510,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1626872915
    },
    {
        "content": "<p>Ideally that's \"rustbot posts a PR for our review\" but I'd be ok with \"there's a tool you run\"</p>",
        "id": 246716517,
        "sender_full_name": "simulacrum",
        "timestamp": 1626872919
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219696\">XAMPPRocky</span> <a href=\"#narrow/stream/241545-t-release/topic/pinning.20stage0.20hashes/near/246716510\">said</a>:</p>\n<blockquote>\n<p>But if it's HTTPs, don't we already know that it is from us? I'm not sure I see the attack vector. Like yes someone could upload malicious stage0 compiler, but if that person could do that, couldn't they also upload the hashes of the new malicious compiler?</p>\n</blockquote>\n<p>the access control for uploading files to <a href=\"http://static.rust-lang.org\">static.rust-lang.org</a> is different than being able to land code in rust-lang/rust</p>",
        "id": 246716922,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1626873148
    },
    {
        "content": "<p>Rather than hashes, could you go with signature files and verify those?</p>",
        "id": 246717048,
        "sender_full_name": "Daniel Silverstone",
        "timestamp": 1626873230
    },
    {
        "content": "<p>That wouldn't need extra complications to the update, but it would need those tarballs to be signed and the signatures to be stored on static.rlo</p>",
        "id": 246717138,
        "sender_full_name": "Daniel Silverstone",
        "timestamp": 1626873261
    },
    {
        "content": "<p>https can be man-in-the-middle'd</p>",
        "id": 246717164,
        "sender_full_name": "Daniel Silverstone",
        "timestamp": 1626873275
    },
    {
        "content": "<p>Oh I see, in your proposal the hashes are stored separately in the repo.</p>",
        "id": 246717202,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1626873296
    },
    {
        "content": "<p>the hashes would be stored in rust-lang/rust</p>",
        "id": 246717218,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1626873306
    },
    {
        "content": "<p>we already sign the tarballs, but verifying gpg signatures would re<br>\n<span class=\"user-mention silent\" data-user-id=\"223910\">Daniel Silverstone</span> <a href=\"#narrow/stream/241545-t-release/topic/pinning.20stage0.20hashes/near/246717048\">said</a>:</p>\n<blockquote>\n<p>Rather than hashes, could you go with signature files and verify those?</p>\n</blockquote>\n<p>we already sign the tarballs, but verifying gpg signatures would require to have gpg installed on the local machine, which IMO we should avoid</p>",
        "id": 246717273,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1626873343
    },
    {
        "content": "<p>Can <a href=\"https://sequoia-pgp.org/\">https://sequoia-pgp.org/</a> be used for verifying gpg signatures? It is written in rust.</p>",
        "id": 246717495,
        "sender_full_name": "bjorn3",
        "timestamp": 1626873441
    },
    {
        "content": "<p>I guess my worry is that in practice I think the acl is similar for the bucket and the repository; essentially for these files it's mark + pietro. if either one of us is \"hacked\" or whatever, it seems likely that the tool we run would a) upload a back file to the bucket and b) put the new hash in the file</p>",
        "id": 246717510,
        "sender_full_name": "simulacrum",
        "timestamp": 1626873448
    },
    {
        "content": "<p>I don't think we need to do signature verification, there's really no advantage to that over hashes for our purposes I think?</p>",
        "id": 246717555,
        "sender_full_name": "simulacrum",
        "timestamp": 1626873469
    },
    {
        "content": "<p>the advantage of signature verification is it would require no workflow change, as we would just store the gpg key in the rustc repo and it would automatically trust the right builds without having to manually update the pinned hashes</p>",
        "id": 246717694,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1626873521
    },
    {
        "content": "<p>hm</p>",
        "id": 246717759,
        "sender_full_name": "simulacrum",
        "timestamp": 1626873551
    },
    {
        "content": "<p>but it requires gpg to be installed on the local machine (unless we change how we sign releases as a whole), and well, it's hard to compile sequoia-gpg when we still need to download rust <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 246717779,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1626873557
    },
    {
        "content": "<blockquote>\n<p>and well, it's hard to compile sequoia-gpg when we still need to download rust <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 246717839,
        "sender_full_name": "bjorn3",
        "timestamp": 1626873585
    },
    {
        "content": "<p>I definitely don't think we should force people to download or compile sequoia to build rust, that seems excessive</p>",
        "id": 246717932,
        "sender_full_name": "simulacrum",
        "timestamp": 1626873618
    },
    {
        "content": "<p>One option is to use gpg/gpgv if present, and permit a <code>--no-pgp-verification</code> option to skip it if the tools are not present.</p>",
        "id": 246718091,
        "sender_full_name": "Daniel Silverstone",
        "timestamp": 1626873700
    },
    {
        "content": "<p>I don't think anything that the average user either a) needs to install a tool for or b) needs to pass an option for is viable</p>",
        "id": 246718174,
        "sender_full_name": "simulacrum",
        "timestamp": 1626873727
    },
    {
        "content": "<p>Many people will have, or can easily install, gpg/gpgv/sq/whatever, and those who don't only need to pass that once to initialise without verification and be no worse off than now.</p>",
        "id": 246718175,
        "sender_full_name": "Daniel Silverstone",
        "timestamp": 1626873727
    },
    {
        "content": "<p>Do we honestly think people who work on the compiler can't pass a flag to x.py once ?</p>",
        "id": 246718204,
        "sender_full_name": "Daniel Silverstone",
        "timestamp": 1626873746
    },
    {
        "content": "<p>iirc on windows gpg is way more of a pain than on linux</p>",
        "id": 246718232,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1626873761
    },
    {
        "content": "<p>Also a huge pain on macOS. Everytime I install it I regret it.</p>",
        "id": 246718299,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1626873788
    },
    {
        "content": "<p>I mean I regret it on linux too <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 246718324,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1626873801
    },
    {
        "content": "<p>I guess I am unusual, the idea of having a system incapable of verifying signatures is anathema to me <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 246718398,
        "sender_full_name": "Daniel Silverstone",
        "timestamp": 1626873831
    },
    {
        "content": "<p>Though we could use another simpler signing tool which perhaps can exist in source form in the rust repo if we wanted to</p>",
        "id": 246718525,
        "sender_full_name": "Daniel Silverstone",
        "timestamp": 1626873869
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"223910\">Daniel Silverstone</span> <a href=\"#narrow/stream/241545-t-release/topic/pinning.20stage0.20hashes/near/246718398\">said</a>:</p>\n<blockquote>\n<p>I guess I am unusual, the idea of having a system incapable of verifying signatures is anathema to me <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>\n</blockquote>\n<p>It's different tools on Windows &amp; Mac. On the Mac it's called <code>codesign</code>.</p>",
        "id": 246718766,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1626873978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/241545-t-release/topic/pinning.20stage0.20hashes/near/246717510\">said</a>:</p>\n<blockquote>\n<p>I guess my worry is that in practice I think the acl is similar for the bucket and the repository; essentially for these files it's mark + pietro. if either one of us is \"hacked\" or whatever, it seems likely that the tool we run would a) upload a back file to the bucket and b) put the new hash in the file</p>\n</blockquote>\n<p>I don't think it's necessary true: a change to rust-lang/rust would have to go through code review even if our aws credentials get compromised</p>",
        "id": 246719045,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1626874098
    },
    {
        "content": "<p>and having the hashes pinned in the git repository would prevent builds of existing, known-good commits from ever being compromised</p>",
        "id": 246719121,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1626874134
    },
    {
        "content": "<p>I'm saying that there's no way for you or anyone to verify that hash</p>",
        "id": 246719146,
        "sender_full_name": "simulacrum",
        "timestamp": 1626874148
    },
    {
        "content": "<p>the only thing you really prevent is historical compromise</p>",
        "id": 246719161,
        "sender_full_name": "simulacrum",
        "timestamp": 1626874158
    },
    {
        "content": "<p>and I'm not convinced that this is the way to solve that - we could mirror the whole set of sha256 files to a git repository, for example, and run a job verifying hashes every so often</p>",
        "id": 246719764,
        "sender_full_name": "simulacrum",
        "timestamp": 1626874431
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/241545-t-release/topic/pinning.20stage0.20hashes/near/246719146\">said</a>:</p>\n<blockquote>\n<p>I'm saying that there's no way for you or anyone to verify that hash</p>\n</blockquote>\n<p>once we get reproducible builds ironed out (dunno what the status of that is) we should definitely be able to verify at least some of the hashes</p>",
        "id": 246721364,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1626875149
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/241545-t-release/topic/pinning.20stage0.20hashes/near/246719161\">said</a>:</p>\n<blockquote>\n<p>the only thing you really prevent is historical compromise</p>\n</blockquote>\n<p>I would say it prevents the compromise of every clone of rustc up until the attacker manages to land a reviewed PR updating the pinned hashes</p>",
        "id": 246721731,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1626875292
    },
    {
        "content": "<p>and even if the attacker manages to land a compromised stage0.sha256 we know exactly which commits of rustc are affected or not</p>",
        "id": 246721812,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1626875340
    },
    {
        "content": "<p>it's trust on first use, yes, but it still provides way more guarantees than what's present today</p>",
        "id": 246721856,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1626875367
    },
    {
        "content": "<p>I suppose that's true</p>",
        "id": 246729484,
        "sender_full_name": "simulacrum",
        "timestamp": 1626878695
    },
    {
        "content": "<p>in any case, not really opposed, I think it'll be an easier sell if the tool that updates the sha256 file also automagically discovers the right date (which is currently a bit of a pain)</p>",
        "id": 246729551,
        "sender_full_name": "simulacrum",
        "timestamp": 1626878726
    },
    {
        "content": "<p>I need to double-check, but I'll likely be able to dedicate time to an impl of the tool</p>",
        "id": 246729813,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1626878854
    },
    {
        "content": "<p>btw I checked, and I'll definitely be able to spend work time on implementing this</p>",
        "id": 246983846,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1627050193
    },
    {
        "content": "<p><a href=\"https://slsa.dev/\">https://slsa.dev/</a> has a good writeup on different kinds of attack vectors like this</p>",
        "id": 246995844,
        "sender_full_name": "tmandry",
        "timestamp": 1627055819
    },
    {
        "content": "<p>with examples of each happening 'in the wild\"</p>",
        "id": 246995915,
        "sender_full_name": "tmandry",
        "timestamp": 1627055856
    },
    {
        "content": "<p>personally I agree that this would be worthwhile, provided we can find a way to accommodate existing workflows etc.</p>",
        "id": 246996187,
        "sender_full_name": "tmandry",
        "timestamp": 1627055956
    },
    {
        "content": "<p>I think if someone is using a custom stage0 they should just have a way to disable verification. it might be something they built themselves and wasn't signed by us, for instance</p>",
        "id": 246996279,
        "sender_full_name": "tmandry",
        "timestamp": 1627056001
    },
    {
        "content": "<p>You would use <code>./configure --local-rust-root</code> or similar for that, right?</p>",
        "id": 246996577,
        "sender_full_name": "cuviper",
        "timestamp": 1627056093
    },
    {
        "content": "<p>(people who really care about supply chain attacks are already doing this themselves, to some extent, with their own bootstrapping)</p>",
        "id": 246996595,
        "sender_full_name": "tmandry",
        "timestamp": 1627056101
    },
    {
        "content": "<p>that should absolutely be exempt from any hash checking</p>",
        "id": 246996608,
        "sender_full_name": "cuviper",
        "timestamp": 1627056109
    },
    {
        "content": "<p>Using a custom stage0 happens through the <code>rustc</code> and <code>cargo</code> fields in <code>config.toml</code>, right? The presence of these fields should be enough to disable verification, right? Or do the verification during downloading of stage0 which doesn't happen when you use <code>rustc</code> and <code>cargo</code>.</p>",
        "id": 246996809,
        "sender_full_name": "bjorn3",
        "timestamp": 1627056190
    },
    {
        "content": "<p>doing this during download or right before extract makes sense, and would avoid the custom cases</p>",
        "id": 246997007,
        "sender_full_name": "cuviper",
        "timestamp": 1627056263
    },
    {
        "content": "<p>yeah I was planning to do this before extracting the downloaded tarballs</p>",
        "id": 246997385,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1627056450
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I'm working on the tool, but there is a question I have after starting the impl</p>",
        "id": 250631624,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1629903339
    },
    {
        "content": "<p>do you have any concern with changing the release process to avoid setting <code>dev: 1</code> to the beta branch?</p>",
        "id": 250631724,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1629903368
    },
    {
        "content": "<p>as far as I understand downloading the previous beta should be functionally the same for the couple of days when we wait for the stable to come out, but it would prevent all of the hassle of dealing with both static.rlo and dev-static.rlo</p>",
        "id": 250631830,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1629903430
    },
    {
        "content": "<p>also pinning hashes for dev-static sounds like a really bad idea, since we freely rebuild those artifacts</p>",
        "id": 250631855,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1629903447
    },
    {
        "content": "<p>Seems fine at a glance</p>",
        "id": 250640897,
        "sender_full_name": "simulacrum",
        "timestamp": 1629907553
    },
    {
        "content": "<p>I think the only thing is we don't fully test self-builds right now I think? Not sure it's guaranteed to work</p>",
        "id": 250640986,
        "sender_full_name": "simulacrum",
        "timestamp": 1629907583
    },
    {
        "content": "<p>But it should, so seems ok</p>",
        "id": 250641022,
        "sender_full_name": "simulacrum",
        "timestamp": 1629907607
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span> ^</p>",
        "id": 250641041,
        "sender_full_name": "simulacrum",
        "timestamp": 1629907615
    },
    {
        "content": "<p>Obviously a little less testing for the dev build</p>",
        "id": 250641070,
        "sender_full_name": "simulacrum",
        "timestamp": 1629907629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/241545-t-release/topic/pinning.20stage0.20hashes/near/250640986\">said</a>:</p>\n<blockquote>\n<p>I think the only thing is we don't fully test self-builds right now I think? Not sure it's guaranteed to work</p>\n</blockquote>\n<p>it shound't be a self build though? it would still be the beta of the previous version, we pin those by date</p>",
        "id": 250641114,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1629907652
    },
    {
        "content": "<p>Oh. Hm. Yeah I guess we can not bump at all?</p>",
        "id": 250641172,
        "sender_full_name": "simulacrum",
        "timestamp": 1629907682
    },
    {
        "content": "<p>yeah</p>",
        "id": 250641219,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1629907690
    },
    {
        "content": "<p>Ok, seems good</p>",
        "id": 250641243,
        "sender_full_name": "simulacrum",
        "timestamp": 1629907702
    },
    {
        "content": "<p>great, I have a branch with  <code>stage0.txt</code> =&gt; <code>stage0.json</code> and <code>./x.py run src/tools/bump-stage0</code> ready</p>",
        "id": 250641292,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1629907730
    },
    {
        "content": "<p>I'll work on the pinned hashes tomorrow and send a PR</p>",
        "id": 250641312,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1629907738
    },
    {
        "content": "<p>Seems good</p>",
        "id": 250641339,
        "sender_full_name": "simulacrum",
        "timestamp": 1629907758
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I've been thinking... would it be acceptable to depend on the <code>pgp</code> crate (also used by rustup) on the <code>bump-stage0</code> tool? That would allow to verify the bootstrap compiler signatures without requiring GPG for <code>x.py</code>, as the check would be done before pinning the hashes</p>",
        "id": 250757136,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1629977279
    },
    {
        "content": "<p>Hm, I guess? The pgp crate doesn't seem like the one to use, though, perhaps we want <a href=\"https://crates.io/crates/sequoia-openpgp\">https://crates.io/crates/sequoia-openpgp</a> which seems a little better maintained?</p>\n<p>I'd also be fine with calling out to the CLI pgp client.</p>\n<p>I don't want to have to wait around for this tool to compile and run, so I think we should optimize for that. If we want to check signatures in CI or something where time doesn't matter that seems reasonable?</p>",
        "id": 250759256,
        "sender_full_name": "simulacrum",
        "timestamp": 1629978569
    },
    {
        "content": "<p>sequoia-openpgp depends on a c library that's not installed by default at least on my system (nettle) and is GPL</p>",
        "id": 250765851,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1629982173
    },
    {
        "content": "<p>building the tool with x.py (currently in release mode, can likely change it to build it in debug mode)<br>\nwith pgp crate: 1m 09s and 173 deps<br>\nwithout signature verification: 25s and 50 deps</p>",
        "id": 250766610,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1629982493
    },
    {
        "content": "<p>(this is in my not that powerful laptop)</p>",
        "id": 250766755,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1629982557
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/88362\">https://github.com/rust-lang/rust/pull/88362</a></p>",
        "id": 250770947,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1629984269
    },
    {
        "content": "<p>hm</p>",
        "id": 250774410,
        "sender_full_name": "simulacrum",
        "timestamp": 1629985685
    },
    {
        "content": "<p>well, thanks for filing it, I'll take a look later</p>",
        "id": 250774433,
        "sender_full_name": "simulacrum",
        "timestamp": 1629985694
    },
    {
        "content": "<p>might play with it locally and suggest some commits</p>",
        "id": 250774480,
        "sender_full_name": "simulacrum",
        "timestamp": 1629985710
    },
    {
        "content": "<p>right now that doesn't have gpg support, I left it as a future change</p>",
        "id": 250774605,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1629985764
    },
    {
        "content": "<p>ok</p>",
        "id": 250774677,
        "sender_full_name": "simulacrum",
        "timestamp": 1629985792
    }
]