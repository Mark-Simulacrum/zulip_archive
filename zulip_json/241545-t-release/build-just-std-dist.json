[
    {
        "content": "<p>Hey folks! I don't know if this is quite the right place to ask this, but it felt like the closest match. I'm doing some work to replicate the Rust release process (that is, building the various artifacts that go in the release manifest from source), and am trying to figure out if there's a \"standard\" way to build _just_ <code>rust-std-$version-$target.tar.*</code> if I already have <code>rustc-$version-$host</code>. I _think_ it's going to look something like what upstream does in <a href=\"https://github.com/rust-lang/rust/blob/7baa7afd0fc8061c5b815a7aab9b40d1cd406ce8/src/ci/docker/host-x86_64/dist-various-1/Dockerfile#L185-L187\">this Dockerfile</a>, but wanted to see if there are any other magical incantations needed.</p>",
        "id": 273543794,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1646077753
    },
    {
        "content": "<p>so you already have that <code>rustc-$version-$host</code> outside the current build? then something like <code>./configure --local-rust-root=/that</code>, <code>./x.py dist --stage 0 --target $target rust-std</code></p>",
        "id": 273544272,
        "sender_full_name": "cuviper",
        "timestamp": 1646077988
    },
    {
        "content": "<p>the Dockerfile you quoted will still build the implicit <code>--build</code> toolchain locally</p>",
        "id": 273544361,
        "sender_full_name": "cuviper",
        "timestamp": 1646078028
    },
    {
        "content": "<p>Ah, interesting, I didn't realize <code>--stage 0</code> would work for this case — that's a good call. Should <code>local-rebuild</code> be enabled too?</p>",
        "id": 274721569,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1646846631
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> It looks like that's broken somehow: &lt;<a href=\"https://github.com/rust-lang/rust/issues/94781\">https://github.com/rust-lang/rust/issues/94781</a>&gt;</p>",
        "id": 274748471,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1646858034
    },
    {
        "content": "<p>oh weird, it built <code>std</code> fine, but <code>fabricate</code> (rust-installer) failed</p>",
        "id": 274748860,
        "sender_full_name": "cuviper",
        "timestamp": 1646858230
    },
    {
        "content": "<p><code>local-rebuild</code> should be inferred automatically</p>",
        "id": 274749003,
        "sender_full_name": "cuviper",
        "timestamp": 1646858290
    },
    {
        "content": "<p>does it work in your setup if you don't force the stage? (letting it build the toolchain normally)</p>",
        "id": 274749112,
        "sender_full_name": "cuviper",
        "timestamp": 1646858346
    },
    {
        "content": "<p>It starts building LLVM — I'll let you know how that goes once I find a newer CMake version <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <br>\nI tried <code>download-ci-llvm = true</code>, but that hits</p>\n<div class=\"codehilite\"><pre><span></span><code>$ ./configure --enable-local-rust --enable-local-rebuild --set llvm.download-ci-llvm=true\nconfigure: processing command line\nconfigure:\nconfigure: build.rustc          := /home/jongje/.cargo/bin//rustc\nconfigure: build.cargo          := /home/jongje/.cargo/bin//cargo\nconfigure: build.local-rebuild  := True\nconfigure: llvm.download-ci-llvm := True\nconfigure: build.configure-args := [&#39;--enable-local-rust&#39;, &#39;--enable-local-rebuil ...\nconfigure:\nconfigure: writing `config.toml` in current directory\nconfigure:\nconfigure: run `python /local/home/jongje/rustc-1.59.0-src/x.py --help`\nconfigure:\n$ ./x.py dist rust-std\nfatal: not a git repository (or any of the parent directories): .git\nTraceback (most recent call last):\n  File &quot;./x.py&quot;, line 27, in &lt;module&gt;\n    bootstrap.main()\n  File &quot;/local/home/jongje/rustc-1.59.0-src/src/bootstrap/bootstrap.py&quot;, line 1313, in main\n    bootstrap(help_triggered)\n  File &quot;/local/home/jongje/rustc-1.59.0-src/src/bootstrap/bootstrap.py&quot;, line 1279, in bootstrap\n    build.download_toolchain()\n  File &quot;/local/home/jongje/rustc-1.59.0-src/src/bootstrap/bootstrap.py&quot;, line 507, in download_toolchain\n    &quot;git&quot;, &quot;rev-parse&quot;, &quot;--show-toplevel&quot;,\n  File &quot;/usr/lib64/python3.7/subprocess.py&quot;, line 411, in check_output\n    **kwargs).stdout\n  File &quot;/usr/lib64/python3.7/subprocess.py&quot;, line 512, in run\n    output=stdout, stderr=stderr)\nsubprocess.CalledProcessError: Command &#39;[&#39;git&#39;, &#39;rev-parse&#39;, &#39;--show-toplevel&#39;]&#39; returned non-zero exit status 128.\n</code></pre></div>",
        "id": 274762282,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1646865033
    },
    {
        "content": "<p>Without <code>--stage 0</code> it fails in the same place (though this time for <code>core</code>, not <code>std</code>): &lt;<a href=\"https://github.com/rust-lang/rust/issues/94781#issuecomment-1063500462\">https://github.com/rust-lang/rust/issues/94781#issuecomment-1063500462</a>&gt;</p>",
        "id": 274771330,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1646870571
    },
    {
        "content": "<p>i think download-ci-llvm needs the git repo checked out to find the right commit to download llvm for.</p>",
        "id": 274808179,
        "sender_full_name": "bjorn3",
        "timestamp": 1646903713
    },
    {
        "content": "<p>Yeah, I think I've run into that in the past. Although it'd be nice if it _also_ worked for release src downloads using something like &lt;<a href=\"https://github.com/rust-lang/rust/blob/master/src/bootstrap/download-ci-llvm-stamp\">https://github.com/rust-lang/rust/blob/master/src/bootstrap/download-ci-llvm-stamp</a>&gt; or some other file that was included in <code>rustc-src</code> that allowed it to find the right commit to fetch without git for that specific (but common) instance.</p>",
        "id": 274849312,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1646925684
    },
    {
        "content": "<p>I'd be fine taking a PR, probably. But I'm not sure we copy the LLVM files used for this to <a href=\"http://static.rust-lang.org\">static.rust-lang.org</a> for nightlies etc, and in any case don't track which nightly they would end up in, which means that after ~168 days at best you're going to not work anyway.</p>",
        "id": 274849988,
        "sender_full_name": "simulacrum",
        "timestamp": 1646925966
    },
    {
        "content": "<p>Yeah, that's true, but 168 days is 24 weeks, which is 4 release cycles, so I feel like in practice that'd turn out okay.</p>",
        "id": 274857438,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1646928822
    },
    {
        "content": "<p>Yeah, I mean, obviously depends on the use case :)</p>",
        "id": 274861657,
        "sender_full_name": "simulacrum",
        "timestamp": 1646930577
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> Another issue I just discovered with building <code>rust-std</code> using <code>--stage 0</code> is that it ends up not hitting &lt;<a href=\"https://github.com/rust-lang/rust/blob/af8604faddc44b27a59d1a719ff6ceca8bc145eb/src/bootstrap/compile.rs#L333-L343\">https://github.com/rust-lang/rust/blob/af8604faddc44b27a59d1a719ff6ceca8bc145eb/src/bootstrap/compile.rs#L333-L343</a>&gt;, and thus not having bitcode embedded.</p>",
        "id": 275016638,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1647024678
    },
    {
        "content": "<p>Any idea how I might be able to hack around that?</p>",
        "id": 275016668,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1647024696
    },
    {
        "content": "<p>I'd file an issue, but reading the comment it _seems_ intentional. It also makes me worry that <code>dist --stage 0 rust-std</code> is not actually \"the right\" way to build _just_ <code>rust-std</code> and may run into other corner cases.. But if it's not, I don't know what is.</p>",
        "id": 275018613,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1647025280
    },
    {
        "content": "<p>Good catch! I think there is no \"right\" way to do this, really, because you're treading new ground. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 275039754,
        "sender_full_name": "cuviper",
        "timestamp": 1647036158
    },
    {
        "content": "<p>(yet)</p>",
        "id": 275039819,
        "sender_full_name": "cuviper",
        "timestamp": 1647036210
    },
    {
        "content": "<p>Hehe, fair enough. I guess the obvious next question then is what _should_ be the right way to do this? Do we want to \"embrace\" <code>--stage 0 rust-std</code> with <code>local-rebuild</code>, or do something else?</p>",
        "id": 275042609,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1647037336
    }
]