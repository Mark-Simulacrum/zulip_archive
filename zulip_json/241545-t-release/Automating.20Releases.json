[
    {
        "content": "<p>Another thing that came to mind, was that I remember at one point there was discussion about automating Rust’s release process, but I don’t remember any further movement on that. I think we should try to prioritise this more over the coming year or years if it takes that long, so that <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> and <span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span> have more time to do other things.</p>\n<p>I’d be happy to dedicate the time to implementing automations, but we’d obviously need to start with planning what to automate from here and how to do so. <a href=\"https://forge.rust-lang.org/release/process.html\">https://forge.rust-lang.org/release/process.html</a></p>",
        "id": 243213101,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1624054399
    },
    {
        "content": "<p>I do want to work on this, I think starting by creating scripts for each section of code block in that file is a good method. I was thinking that triagebot commands via Zulip would work well for the stuff that is best to not run locally (e.g., bumping the version number could be made into its own zulip command)</p>",
        "id": 243213208,
        "sender_full_name": "simulacrum",
        "timestamp": 1624054547
    },
    {
        "content": "<p>In fact that's probably a good way to start - low cost and fairly simple</p>",
        "id": 243213260,
        "sender_full_name": "simulacrum",
        "timestamp": 1624054568
    },
    {
        "content": "<p>But a good portion of the release steps are unfortunately currently somewhat manual and I'm not sure how easy changing that will be - resolving merge conflicts and fixing CI bugs seems like it'll always be manual.</p>",
        "id": 243213302,
        "sender_full_name": "simulacrum",
        "timestamp": 1624054642
    },
    {
        "content": "<p>Yeah, it can probably never be fully automated (and there’s a question of even if it should be), but I think the ideal state is if there are no CI bugs, that you are just clicking a single button (or multiple buttons if we wanted to break up starting certain parts of the release until someone has clicked the next button)</p>",
        "id": 243213567,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1624054945
    },
    {
        "content": "<p>I also agree we need to automate, but it's unlikely I would personally have time for that</p>",
        "id": 243238417,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1624092912
    },
    {
        "content": "<p>the only note I'd make is that I'd really prefer for the release process things not to be on triagebot</p>",
        "id": 243238423,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1624092932
    },
    {
        "content": "<p>but instead adding them to <a href=\"https://github.com/rust-lang/promote-release\">https://github.com/rust-lang/promote-release</a></p>",
        "id": 243238437,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1624092960
    },
    {
        "content": "<p>promote-release has good support for testing, and the most important thing is that it has stricter ACL for who can commit to the repo</p>",
        "id": 243238485,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1624093004
    },
    {
        "content": "<p>I wouldn't want having release process bits in triagebot preventing us from adding other maintainers to triagebot in the future</p>",
        "id": 243238494,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1624093027
    },
    {
        "content": "<p>thinking about it a bit more and looking at the current release steps, I think we can use different approaches for release-day and other days</p>",
        "id": 243238687,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1624093275
    },
    {
        "content": "<p>most of the stuff in the other days is creating a PR with some \"common\" changes and possibly other manual changes (like fixing CI or adding a backport), for that just a local script that creates the branch with all the local changes would be great</p>",
        "id": 243238739,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1624093337
    },
    {
        "content": "<p>so, for example, on Tue it would:</p>\n<ul>\n<li>disable branch protection</li>\n<li>force-push branches</li>\n<li>enable branch protection</li>\n<li>create a branch with the updated stage0 and channel</li>\n</ul>",
        "id": 243238757,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1624093398
    },
    {
        "content": "<p>then the only thing you'd need is to run:</p>\n<div class=\"codehilite\"><pre><span></span><code>./release-pr-tue.py\ngit push -u origin\n# follow the link and create the PR\n</code></pre></div>",
        "id": 243238805,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1624093450
    },
    {
        "content": "<p>and for release day things (like signing and pushing git tags, or rebuilding thanks) I'd just implement those things in promote-release, especially because it knows exactly when to run them as it's driving the whole release process</p>",
        "id": 243238816,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1624093503
    },
    {
        "content": "<p>thoughts?</p>",
        "id": 243238822,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1624093518
    },
    {
        "content": "<p>Sounds reasonable to me.</p>",
        "id": 243238958,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1624093788
    },
    {
        "content": "<p>I think generally that's all ok, but I would look for ways we can either add safe invocations on top of it or otherwise seek to remove the credential in local environment dependency in the long run.</p>",
        "id": 243245458,
        "sender_full_name": "simulacrum",
        "timestamp": 1624102755
    }
]