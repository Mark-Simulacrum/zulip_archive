[
    {
        "content": "<p>well</p>",
        "id": 241776747,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1623072888
    },
    {
        "content": "<p>I guess it's finally time to figure out why the diagnostics change between beta and nightly if we ever want to land the builder checking nightly as stable :/</p>",
        "id": 241776813,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1623072915
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/86098#issuecomment-855926670\">https://github.com/rust-lang/rust/pull/86098#issuecomment-855926670</a></p>",
        "id": 241776814,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1623072916
    },
    {
        "content": "<p>ok I kinda figured out why that failure is happening</p>",
        "id": 241788451,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1623077614
    },
    {
        "content": "<p>the custom proc macro we have relies on <code>proc_macro2</code>, whose behavior around spans changes if you're running on nightly</p>",
        "id": 241788570,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1623077645
    },
    {
        "content": "<p><code>#[derive(SessionDiagnostic)]</code> is only used within the compiler though</p>",
        "id": 241788741,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1623077718
    },
    {
        "content": "<p>the options I see are:</p>\n<ol>\n<li>regress <code>SessionDiagnostic</code>'s own diagnostics by replicating stable's behavior on nightly</li>\n<li>figure out a way to coerce <code>proc_macro2</code> to use nightly features on stable</li>\n<li>implement <code>// only-nightly</code> in compiletest to ignore that test</li>\n</ol>",
        "id": 241788986,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1623077805
    },
    {
        "content": "<p>since we're talking about an internal thing only I'm tempted to go with <a href=\"https://github.com/rust-lang/rust/issues/3\">#3</a></p>",
        "id": 241789019,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1623077820
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> thoughts?</p>",
        "id": 241789051,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1623077832
    },
    {
        "content": "<p>gah</p>",
        "id": 241789109,
        "sender_full_name": "simulacrum",
        "timestamp": 1623077855
    },
    {
        "content": "<p>that's a pain</p>",
        "id": 241789130,
        "sender_full_name": "simulacrum",
        "timestamp": 1623077864
    },
    {
        "content": "<p>yeah, I think 3 is best in this case</p>",
        "id": 241789163,
        "sender_full_name": "simulacrum",
        "timestamp": 1623077875
    },
    {
        "content": "<p>it really should be using cfg(accessible) or something, but oh well</p>",
        "id": 241789233,
        "sender_full_name": "simulacrum",
        "timestamp": 1623077887
    },
    {
        "content": "<p>that's not a thing yet</p>",
        "id": 241789245,
        "sender_full_name": "simulacrum",
        "timestamp": 1623077891
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/241545-t-release/topic/ui.20diff.20between.20stable.2Fbeta.20and.20nightly/near/241789130\">said</a>:</p>\n<blockquote>\n<p>that's a pain</p>\n</blockquote>\n<p>you're not wrong :)</p>",
        "id": 241789262,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1623077897
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/241545-t-release/topic/ui.20diff.20between.20stable.2Fbeta.20and.20nightly/near/241789163\">said</a>:</p>\n<blockquote>\n<p>yeah, I think 3 is best in this case</p>\n</blockquote>\n<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> will update the PR soon!</p>",
        "id": 241789280,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1623077906
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span> fwiw it's also possible the right option is to get RUSTC_BOOTSTRAP added as a flag here - <a href=\"https://github.com/alexcrichton/proc-macro2/blob/master/build.rs#L119\">https://github.com/alexcrichton/proc-macro2/blob/master/build.rs#L119</a></p>",
        "id": 241789745,
        "sender_full_name": "simulacrum",
        "timestamp": 1623078080
    },
    {
        "content": "<p>but that's a bit neither here nor there</p>",
        "id": 241789772,
        "sender_full_name": "simulacrum",
        "timestamp": 1623078089
    },
    {
        "content": "<p>realistically detecting nightly/dev is rarely what folks actually want :/</p>",
        "id": 241789808,
        "sender_full_name": "simulacrum",
        "timestamp": 1623078104
    },
    {
        "content": "<p><em>personally</em> I'd like to have less RUSTC_BOOTSTRAP around <a href=\"http://crates.io\">crates.io</a></p>",
        "id": 241789999,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1623078166
    },
    {
        "content": "<p>but I can try seeing if adding the env variable there fixes stuff</p>",
        "id": 241790055,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1623078191
    },
    {
        "content": "<p>oh, I mean, the ideal is that folks aren't doing nightly detection</p>",
        "id": 241790315,
        "sender_full_name": "simulacrum",
        "timestamp": 1623078301
    },
    {
        "content": "<p>probably we should get cargo to expose a is-unstable cfg or something</p>",
        "id": 241790381,
        "sender_full_name": "simulacrum",
        "timestamp": 1623078321
    },
    {
        "content": "<p>or at least, it might be a good idea</p>",
        "id": 241790405,
        "sender_full_name": "simulacrum",
        "timestamp": 1623078330
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121055\">Pietro Albini</span> <a href=\"#narrow/stream/241545-t-release/topic/ui.20diff.20between.20stable.2Fbeta.20and.20nightly/near/241788986\">said</a>:</p>\n<blockquote>\n<p>the options I see are:</p>\n<ol>\n<li>regress <code>SessionDiagnostic</code>'s own diagnostics by replicating stable's behavior on nightly</li>\n<li>figure out a way to coerce <code>proc_macro2</code> to use nightly features on stable</li>\n<li>implement <code>// only-nightly</code> in compiletest to ignore that test</li>\n</ol>\n</blockquote>\n<p>Is the opposite of 2 possible? E.g. have <code>proc-macro2</code> behave the same on nightly as it does on stable?</p>",
        "id": 241797972,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1623081128
    },
    {
        "content": "<p>That is option 1 I think.</p>",
        "id": 241798386,
        "sender_full_name": "bjorn3",
        "timestamp": 1623081322
    },
    {
        "content": "<p>Ah I thought that was a different route.</p>",
        "id": 241798987,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1623081570
    },
    {
        "content": "<p>well, adding the builder was useful <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 241804661,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1623083966
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/86098#issuecomment-856088303\">https://github.com/rust-lang/rust/pull/86098#issuecomment-856088303</a></p>",
        "id": 241804663,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1623083966
    }
]