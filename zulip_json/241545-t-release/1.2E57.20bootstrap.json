[
    {
        "content": "<p>@pietroalbini I tried poking at <a href=\"https://github.com/rust-lang/rust/issues/90042\">#90042</a> to try to figure out the CI error. I was able to reproduce inside the Docker image, but no matter what I did, I couldn't reproduce outside of it (even using the exact same config.toml).</p>\n<p>Some other notes:</p>\n<ul>\n<li>I tried applying <a href=\"https://github.com/rust-lang/rust/issues/90062\">#90062</a> (update to llvm 11/ubuntu 20), but that did not help.</li>\n<li>The disassembly of the <code>test_copy_within</code> test looks very wrong (compared to a working version).</li>\n</ul>\n<p>I might keep trying to mess with it off and on, but thought I'd share what I found so far. It is quite a puzzle!</p>",
        "id": 258473110,
        "sender_full_name": "Eric Huss",
        "timestamp": 1634779930
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> did we apply the fix for <a href=\"https://github.com/rust-lang/rust/issues/90038\">https://github.com/rust-lang/rust/issues/90038</a> to bootstrap and test with that yet?</p>",
        "id": 258473572,
        "sender_full_name": "simulacrum",
        "timestamp": 1634780275
    },
    {
        "content": "<p>that's the most obvious recent miscompilation</p>",
        "id": 258473628,
        "sender_full_name": "simulacrum",
        "timestamp": 1634780292
    },
    {
        "content": "<p>I'll wait for a beta backport rollup to pickup <a href=\"https://github.com/rust-lang/rust/pull/90072\">https://github.com/rust-lang/rust/pull/90072</a> as well since it seems important</p>",
        "id": 258473948,
        "sender_full_name": "simulacrum",
        "timestamp": 1634780548
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span> btw, since the earlier ping did not go through</p>",
        "id": 258473959,
        "sender_full_name": "simulacrum",
        "timestamp": 1634780557
    },
    {
        "content": "<p>No, but that seems like a good candidate.  I can try it later tonight.</p>",
        "id": 258474229,
        "sender_full_name": "Eric Huss",
        "timestamp": 1634780770
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/86525\">https://github.com/rust-lang/rust/pull/86525</a> also seems <em>possible</em>, I guess</p>\n<p>These are stage1 tests so they <em>shouldn't</em> in theory be different depending on the bootstrap compiler</p>",
        "id": 258474437,
        "sender_full_name": "simulacrum",
        "timestamp": 1634780943
    },
    {
        "content": "<p>Pushed a rebase</p>",
        "id": 258474620,
        "sender_full_name": "simulacrum",
        "timestamp": 1634781088
    },
    {
        "content": "<p>Narrowed down to the following after an x.py build producing a failing coretests binary</p>\n<div class=\"codehilite\"><pre><span></span><code>LD_LIBRARY_PATH=&quot;obj/build/x86_64-unknown-linux-gnu/stage1/lib:obj/build/x86_64-unknown-linux-gnu/stage1-std/release/deps:obj/build/x86_64-unknown-linux-gnu/stage0/lib:obj/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/x86_64-unknown-linux-gnu/lib&quot; &quot;obj/build/x86_64-unknown-linux-gnu/stage1/bin/rustc&quot; &quot;--crate-name&quot; &quot;coretests&quot; &quot;--edition=2018&quot; &quot;library/core/tests/lib.rs&quot; &quot;-C&quot; &quot;opt-level=3&quot; &quot;-C&quot; &quot;codegen-units=1&quot; &quot;--test&quot; &quot;-C&quot; &quot;extra-filename=-3d1f5816ac8cc923&quot; &quot;--target&quot; &quot;x86_64-unknown-linux-gnu&quot; &quot;-L&quot; &quot;dependency=obj/build/x86_64-unknown-linux-gnu/stage1-std/x86_64-unknown-linux-gnu/release/deps&quot; &quot;-L&quot; &quot;dependency=obj/build/x86_64-unknown-linux-gnu/stage1-std/release/deps&quot; &quot;--extern&quot; &quot;core=obj/build/x86_64-unknown-linux-gnu/stage1-std/x86_64-unknown-linux-gnu/release/deps/libcore-0286f51ede2a0cbe.rlib&quot; &quot;--sysroot&quot; &quot;obj/build/x86_64-unknown-linux-gnu/stage1&quot;\n</code></pre></div>",
        "id": 258478648,
        "sender_full_name": "simulacrum",
        "timestamp": 1634784163
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>fn main() {\n    // Start to end, with a RangeTo.\n    let mut bytes = *b&quot;Hello, World!&quot;;\n    bytes.copy_within(..3, 10);\n\n    assert_eq!(bytes, [72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 72, 101, 108]);\n}\n</code></pre></div>\n<p>compiled with a stage1/bin/rustc produced in docker (<code>LD_LIBRARY_PATH=\"obj/build/x86_64-unknown-linux-gnu/stage1/lib:obj/build/x86_64-unknown-linux-gnu/stage1-std/release/deps:obj/build/x86_64-unknown-linux-gnu/stage0/lib:obj/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"obj/build/x86_64-unknown-linux-gnu/stage1/bin/rustc\" \"--crate-name\" \"coretests\" \"library/core/tests/lib.rs\" \"-C\" \"opt-level=3\" \"-C\" \"codegen-units=1\" \"-C\" \"extra-filename=-3d1f5816ac8cc923\" \"--target\" \"x86_64-unknown-linux-gnu\" \"-L\" \"dependency=obj/build/x86_64-unknown-linux-gnu/stage1-std/x86_64-unknown-linux-gnu/release/deps\" \"-L\" \"dependency=obj/build/x86_64-unknown-linux-gnu/stage1-std/release/deps\" \"--extern\" \"core=obj/build/x86_64-unknown-linux-gnu/stage1-std/x86_64-unknown-linux-gnu/release/deps/libcore-0286f51ede2a0cbe.rlib\" \"--sysroot\" \"obj/build/x86_64-unknown-linux-gnu/stage1\" --emit=link,mir,llvm-ir</code>) is faulty</p>",
        "id": 258479463,
        "sender_full_name": "simulacrum",
        "timestamp": 1634784854
    },
    {
        "content": "<p>opt-level=1 does not reproduce, opt-level=2 does</p>",
        "id": 258479568,
        "sender_full_name": "simulacrum",
        "timestamp": 1634784959
    },
    {
        "content": "<p>opt-bisect-limit seems to show the problem is in BISECT: running pass (1883) Global Value Numbering on function (_ZN9coretests4main17h1267663163b17fd4E)</p>",
        "id": 258480456,
        "sender_full_name": "simulacrum",
        "timestamp": 1634785606
    },
    {
        "content": "<p>including <a href=\"https://github.com/rust-lang/rust/issues/90040\">#90040</a> in the bootstrap compiler didn't help.  I'm a bit confused how an issue with the bootstrap compiler could carry into a stage2 build.</p>",
        "id": 258480895,
        "sender_full_name": "Eric Huss",
        "timestamp": 1634785943
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"p\">***</span> <span class=\"err\">IR</span> <span class=\"err\">Dump</span> <span class=\"err\">Before</span> <span class=\"err\">Global</span> <span class=\"err\">Value</span> <span class=\"err\">Numbering</span> <span class=\"p\">***</span>\n<span class=\"c\">; Function Attrs: nonlazybind uwtable</span>\n<span class=\"k\">define</span> <span class=\"k\">internal</span> <span class=\"k\">void</span> <span class=\"vg\">@_ZN9coretests4main17h1267663163b17fd4E</span><span class=\"p\">()</span> <span class=\"k\">unnamed_addr</span> <span class=\"vg\">#1</span> <span class=\"k\">personality</span> <span class=\"kt\">i32</span> <span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span> <span class=\"kt\">i32</span><span class=\"p\">,</span> <span class=\"kt\">i64</span><span class=\"p\">,</span> <span class=\"nv\">%\"unwind::libunwind::_Unwind_Exception\"</span><span class=\"p\">*,</span> <span class=\"nv\">%\"unwind::libunwind::_Unwind_Context\"</span><span class=\"p\">*)*</span> <span class=\"vg\">@rust_eh_personality</span> <span class=\"p\">{</span>\n  <span class=\"nv nv-Anonymous\">%1</span> <span class=\"p\">=</span> <span class=\"k\">alloca</span> <span class=\"nv\">%\"core::option::Option&lt;core::fmt::Arguments&gt;\"</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">8</span>\n  <span class=\"nv nv-Anonymous\">%2</span> <span class=\"p\">=</span> <span class=\"k\">alloca</span> <span class=\"p\">[</span><span class=\"m\">13</span> <span class=\"k\">x</span> <span class=\"kt\">i8</span><span class=\"p\">],</span> <span class=\"k\">align</span> <span class=\"m\">8</span>\n  <span class=\"nv nv-Anonymous\">%3</span> <span class=\"p\">=</span> <span class=\"k\">getelementptr</span> <span class=\"k\">inbounds</span> <span class=\"p\">[</span><span class=\"m\">13</span> <span class=\"k\">x</span> <span class=\"kt\">i8</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"m\">13</span> <span class=\"k\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]*</span> <span class=\"nv nv-Anonymous\">%2</span><span class=\"p\">,</span> <span class=\"kt\">i64</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"kt\">i64</span> <span class=\"m\">0</span>\n  <span class=\"k\">call</span> <span class=\"k\">void</span> <span class=\"vg\">@llvm.lifetime.start.p0i8</span><span class=\"p\">(</span><span class=\"kt\">i64</span> <span class=\"m\">13</span><span class=\"p\">,</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"k\">nonnull</span> <span class=\"nv nv-Anonymous\">%3</span><span class=\"p\">)</span>\n  <span class=\"k\">call</span> <span class=\"k\">void</span> <span class=\"vg\">@llvm.memcpy.p0i8.p0i8.i64</span><span class=\"p\">(</span><span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"k\">nonnull</span> <span class=\"k\">align</span> <span class=\"m\">8</span> <span class=\"k\">dereferenceable</span><span class=\"p\">(</span><span class=\"m\">13</span><span class=\"p\">)</span> <span class=\"nv nv-Anonymous\">%3</span><span class=\"p\">,</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"k\">nonnull</span> <span class=\"k\">align</span> <span class=\"m\">1</span> <span class=\"k\">dereferenceable</span><span class=\"p\">(</span><span class=\"m\">13</span><span class=\"p\">)</span> <span class=\"k\">getelementptr</span> <span class=\"k\">inbounds</span> <span class=\"p\">(&lt;{</span> <span class=\"p\">[</span><span class=\"m\">13</span> <span class=\"k\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]</span> <span class=\"p\">}&gt;,</span> <span class=\"p\">&lt;{</span> <span class=\"p\">[</span><span class=\"m\">13</span> <span class=\"k\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]</span> <span class=\"p\">}&gt;*</span> <span class=\"vg\">@6</span><span class=\"p\">,</span> <span class=\"kt\">i64</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"kt\">i32</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"kt\">i64</span> <span class=\"m\">0</span><span class=\"p\">),</span> <span class=\"kt\">i64</span> <span class=\"m\">13</span><span class=\"p\">,</span> <span class=\"kt\">i1</span> <span class=\"k\">false</span><span class=\"p\">)</span>\n  <span class=\"nv nv-Anonymous\">%4</span> <span class=\"p\">=</span> <span class=\"k\">getelementptr</span> <span class=\"k\">inbounds</span> <span class=\"p\">[</span><span class=\"m\">13</span> <span class=\"k\">x</span> <span class=\"kt\">i8</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"m\">13</span> <span class=\"k\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]*</span> <span class=\"nv nv-Anonymous\">%2</span><span class=\"p\">,</span> <span class=\"kt\">i64</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"kt\">i64</span> <span class=\"m\">0</span>\n  <span class=\"nv nv-Anonymous\">%5</span> <span class=\"p\">=</span> <span class=\"k\">getelementptr</span> <span class=\"k\">inbounds</span> <span class=\"p\">[</span><span class=\"m\">13</span> <span class=\"k\">x</span> <span class=\"kt\">i8</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"m\">13</span> <span class=\"k\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]*</span> <span class=\"nv nv-Anonymous\">%2</span><span class=\"p\">,</span> <span class=\"kt\">i64</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"kt\">i64</span> <span class=\"m\">10</span>\n  <span class=\"k\">call</span> <span class=\"k\">void</span> <span class=\"vg\">@llvm.memcpy.p0i8.p0i8.i64</span><span class=\"p\">(</span><span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"k\">nonnull</span> <span class=\"k\">align</span> <span class=\"m\">2</span> <span class=\"k\">dereferenceable</span><span class=\"p\">(</span><span class=\"m\">3</span><span class=\"p\">)</span> <span class=\"nv nv-Anonymous\">%5</span><span class=\"p\">,</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"k\">nonnull</span> <span class=\"k\">align</span> <span class=\"m\">8</span> <span class=\"k\">dereferenceable</span><span class=\"p\">(</span><span class=\"m\">3</span><span class=\"p\">)</span> <span class=\"nv nv-Anonymous\">%4</span><span class=\"p\">,</span> <span class=\"kt\">i64</span> <span class=\"m\">3</span><span class=\"p\">,</span> <span class=\"kt\">i1</span> <span class=\"k\">false</span><span class=\"p\">)</span> <span class=\"vg\">#10</span>\n  <span class=\"nv nv-Anonymous\">%6</span> <span class=\"p\">=</span> <span class=\"k\">bitcast</span> <span class=\"p\">[</span><span class=\"m\">13</span> <span class=\"k\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]*</span> <span class=\"nv nv-Anonymous\">%2</span> <span class=\"k\">to</span> <span class=\"kt\">i104</span><span class=\"p\">*</span>\n  <span class=\"nv nv-Anonymous\">%7</span> <span class=\"p\">=</span> <span class=\"k\">load</span> <span class=\"kt\">i104</span><span class=\"p\">,</span> <span class=\"kt\">i104</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%6</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">8</span><span class=\"p\">,</span> <span class=\"nv\">!alias.scope</span> <span class=\"nv nv-Anonymous\">!19</span>\n  <span class=\"nv nv-Anonymous\">%8</span> <span class=\"p\">=</span> <span class=\"k\">icmp</span> <span class=\"k\">eq</span> <span class=\"kt\">i104</span> <span class=\"nv nv-Anonymous\">%7</span><span class=\"p\">,</span> <span class=\"m\">8587987120595162271403469464904</span>\n  <span class=\"k\">br</span> <span class=\"kt\">i1</span> <span class=\"nv nv-Anonymous\">%8</span><span class=\"p\">,</span> <span class=\"kt\">label</span> <span class=\"nv nv-Anonymous\">%9</span><span class=\"p\">,</span> <span class=\"kt\">label</span> <span class=\"nv nv-Anonymous\">%10</span>\n\n<span class=\"nl\">9:</span>                                                <span class=\"c\">; preds = %0</span>\n  <span class=\"k\">call</span> <span class=\"k\">void</span> <span class=\"vg\">@llvm.lifetime.end.p0i8</span><span class=\"p\">(</span><span class=\"kt\">i64</span> <span class=\"m\">13</span><span class=\"p\">,</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"k\">nonnull</span> <span class=\"nv nv-Anonymous\">%3</span><span class=\"p\">)</span>\n  <span class=\"k\">ret</span> <span class=\"k\">void</span>\n\n<span class=\"nl\">10:</span>                                               <span class=\"c\">; preds = %0</span>\n  <span class=\"nv nv-Anonymous\">%11</span> <span class=\"p\">=</span> <span class=\"k\">bitcast</span> <span class=\"nv\">%\"core::option::Option&lt;core::fmt::Arguments&gt;\"</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%1</span> <span class=\"k\">to</span> <span class=\"kt\">i8</span><span class=\"p\">*</span>\n  <span class=\"k\">call</span> <span class=\"k\">void</span> <span class=\"vg\">@llvm.lifetime.start.p0i8</span><span class=\"p\">(</span><span class=\"kt\">i64</span> <span class=\"m\">48</span><span class=\"p\">,</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"k\">nonnull</span> <span class=\"nv nv-Anonymous\">%11</span><span class=\"p\">)</span>\n  <span class=\"nv nv-Anonymous\">%12</span> <span class=\"p\">=</span> <span class=\"k\">getelementptr</span> <span class=\"k\">inbounds</span> <span class=\"nv\">%\"core::option::Option&lt;core::fmt::Arguments&gt;\"</span><span class=\"p\">,</span> <span class=\"nv\">%\"core::option::Option&lt;core::fmt::Arguments&gt;\"</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">,</span> <span class=\"kt\">i64</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"kt\">i32</span> <span class=\"m\">0</span>\n  <span class=\"k\">store</span> <span class=\"p\">{}*</span> <span class=\"k\">null</span><span class=\"p\">,</span> <span class=\"p\">{}**</span> <span class=\"nv nv-Anonymous\">%12</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">8</span>\n  <span class=\"k\">call</span> <span class=\"k\">fastcc</span> <span class=\"k\">void</span> <span class=\"vg\">@_ZN4core9panicking13assert_failed17hb6d9722fa34cdf9fE</span><span class=\"p\">([</span><span class=\"m\">13</span> <span class=\"k\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]*</span> <span class=\"k\">noalias</span> <span class=\"k\">nonnull</span> <span class=\"k\">readonly</span> <span class=\"k\">align</span> <span class=\"m\">1</span> <span class=\"k\">dereferenceable</span><span class=\"p\">(</span><span class=\"m\">13</span><span class=\"p\">)</span> <span class=\"nv nv-Anonymous\">%2</span><span class=\"p\">,</span> <span class=\"nv\">%\"core::option::Option&lt;core::fmt::Arguments&gt;\"</span><span class=\"p\">*</span> <span class=\"k\">noalias</span> <span class=\"k\">nocapture</span> <span class=\"k\">nonnull</span> <span class=\"k\">dereferenceable</span><span class=\"p\">(</span><span class=\"m\">48</span><span class=\"p\">)</span> <span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">)</span> <span class=\"vg\">#11</span>\n  <span class=\"k\">unreachable</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"p\">***</span> <span class=\"err\">IR</span> <span class=\"err\">Dump</span> <span class=\"err\">After</span> <span class=\"err\">Global</span> <span class=\"err\">Value</span> <span class=\"err\">Numbering</span> <span class=\"p\">***</span>\n<span class=\"c\">; Function Attrs: nonlazybind uwtable</span>\n<span class=\"k\">define</span> <span class=\"k\">internal</span> <span class=\"k\">void</span> <span class=\"vg\">@_ZN9coretests4main17h1267663163b17fd4E</span><span class=\"p\">()</span> <span class=\"k\">unnamed_addr</span> <span class=\"vg\">#1</span> <span class=\"k\">personality</span> <span class=\"kt\">i32</span> <span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span> <span class=\"kt\">i32</span><span class=\"p\">,</span> <span class=\"kt\">i64</span><span class=\"p\">,</span> <span class=\"nv\">%\"unwind::libunwind::_Unwind_Exception\"</span><span class=\"p\">*,</span> <span class=\"nv\">%\"unwind::libunwind::_Unwind_Context\"</span><span class=\"p\">*)*</span> <span class=\"vg\">@rust_eh_personality</span> <span class=\"p\">{</span>\n  <span class=\"nv nv-Anonymous\">%1</span> <span class=\"p\">=</span> <span class=\"k\">alloca</span> <span class=\"nv\">%\"core::option::Option&lt;core::fmt::Arguments&gt;\"</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">8</span>\n  <span class=\"nv nv-Anonymous\">%2</span> <span class=\"p\">=</span> <span class=\"k\">alloca</span> <span class=\"p\">[</span><span class=\"m\">13</span> <span class=\"k\">x</span> <span class=\"kt\">i8</span><span class=\"p\">],</span> <span class=\"k\">align</span> <span class=\"m\">8</span>\n  <span class=\"nv nv-Anonymous\">%3</span> <span class=\"p\">=</span> <span class=\"k\">getelementptr</span> <span class=\"k\">inbounds</span> <span class=\"p\">[</span><span class=\"m\">13</span> <span class=\"k\">x</span> <span class=\"kt\">i8</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"m\">13</span> <span class=\"k\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]*</span> <span class=\"nv nv-Anonymous\">%2</span><span class=\"p\">,</span> <span class=\"kt\">i64</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"kt\">i64</span> <span class=\"m\">0</span>\n  <span class=\"k\">call</span> <span class=\"k\">void</span> <span class=\"vg\">@llvm.lifetime.start.p0i8</span><span class=\"p\">(</span><span class=\"kt\">i64</span> <span class=\"m\">13</span><span class=\"p\">,</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"k\">nonnull</span> <span class=\"nv nv-Anonymous\">%3</span><span class=\"p\">)</span>\n  <span class=\"k\">call</span> <span class=\"k\">void</span> <span class=\"vg\">@llvm.memcpy.p0i8.p0i8.i64</span><span class=\"p\">(</span><span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"k\">nonnull</span> <span class=\"k\">align</span> <span class=\"m\">8</span> <span class=\"k\">dereferenceable</span><span class=\"p\">(</span><span class=\"m\">13</span><span class=\"p\">)</span> <span class=\"nv nv-Anonymous\">%3</span><span class=\"p\">,</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"k\">nonnull</span> <span class=\"k\">align</span> <span class=\"m\">1</span> <span class=\"k\">dereferenceable</span><span class=\"p\">(</span><span class=\"m\">13</span><span class=\"p\">)</span> <span class=\"k\">getelementptr</span> <span class=\"k\">inbounds</span> <span class=\"p\">(&lt;{</span> <span class=\"p\">[</span><span class=\"m\">13</span> <span class=\"k\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]</span> <span class=\"p\">}&gt;,</span> <span class=\"p\">&lt;{</span> <span class=\"p\">[</span><span class=\"m\">13</span> <span class=\"k\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]</span> <span class=\"p\">}&gt;*</span> <span class=\"vg\">@6</span><span class=\"p\">,</span> <span class=\"kt\">i64</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"kt\">i32</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"kt\">i64</span> <span class=\"m\">0</span><span class=\"p\">),</span> <span class=\"kt\">i64</span> <span class=\"m\">13</span><span class=\"p\">,</span> <span class=\"kt\">i1</span> <span class=\"k\">false</span><span class=\"p\">)</span>\n  <span class=\"nv nv-Anonymous\">%4</span> <span class=\"p\">=</span> <span class=\"k\">getelementptr</span> <span class=\"k\">inbounds</span> <span class=\"p\">[</span><span class=\"m\">13</span> <span class=\"k\">x</span> <span class=\"kt\">i8</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"m\">13</span> <span class=\"k\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]*</span> <span class=\"nv nv-Anonymous\">%2</span><span class=\"p\">,</span> <span class=\"kt\">i64</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"kt\">i64</span> <span class=\"m\">10</span>\n  <span class=\"k\">call</span> <span class=\"k\">void</span> <span class=\"vg\">@llvm.memcpy.p0i8.p0i8.i64</span><span class=\"p\">(</span><span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"k\">nonnull</span> <span class=\"k\">align</span> <span class=\"m\">2</span> <span class=\"k\">dereferenceable</span><span class=\"p\">(</span><span class=\"m\">3</span><span class=\"p\">)</span> <span class=\"nv nv-Anonymous\">%4</span><span class=\"p\">,</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"k\">nonnull</span> <span class=\"k\">align</span> <span class=\"m\">8</span> <span class=\"k\">dereferenceable</span><span class=\"p\">(</span><span class=\"m\">3</span><span class=\"p\">)</span> <span class=\"nv nv-Anonymous\">%3</span><span class=\"p\">,</span> <span class=\"kt\">i64</span> <span class=\"m\">3</span><span class=\"p\">,</span> <span class=\"kt\">i1</span> <span class=\"k\">false</span><span class=\"p\">)</span> <span class=\"vg\">#10</span>\n  <span class=\"nv nv-Anonymous\">%5</span> <span class=\"p\">=</span> <span class=\"k\">bitcast</span> <span class=\"p\">[</span><span class=\"m\">13</span> <span class=\"k\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]*</span> <span class=\"nv nv-Anonymous\">%2</span> <span class=\"k\">to</span> <span class=\"kt\">i104</span><span class=\"p\">*</span>\n  <span class=\"k\">br</span> <span class=\"kt\">i1</span> <span class=\"k\">false</span><span class=\"p\">,</span> <span class=\"kt\">label</span> <span class=\"nv nv-Anonymous\">%6</span><span class=\"p\">,</span> <span class=\"kt\">label</span> <span class=\"nv nv-Anonymous\">%7</span>\n\n<span class=\"nl\">6:</span>                                                <span class=\"c\">; preds = %0</span>\n  <span class=\"k\">call</span> <span class=\"k\">void</span> <span class=\"vg\">@llvm.lifetime.end.p0i8</span><span class=\"p\">(</span><span class=\"kt\">i64</span> <span class=\"m\">13</span><span class=\"p\">,</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"k\">nonnull</span> <span class=\"nv nv-Anonymous\">%3</span><span class=\"p\">)</span>\n  <span class=\"k\">ret</span> <span class=\"k\">void</span>\n\n<span class=\"nl\">7:</span>                                                <span class=\"c\">; preds = %0</span>\n  <span class=\"nv nv-Anonymous\">%8</span> <span class=\"p\">=</span> <span class=\"k\">bitcast</span> <span class=\"nv\">%\"core::option::Option&lt;core::fmt::Arguments&gt;\"</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%1</span> <span class=\"k\">to</span> <span class=\"kt\">i8</span><span class=\"p\">*</span>\n  <span class=\"k\">call</span> <span class=\"k\">void</span> <span class=\"vg\">@llvm.lifetime.start.p0i8</span><span class=\"p\">(</span><span class=\"kt\">i64</span> <span class=\"m\">48</span><span class=\"p\">,</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"k\">nonnull</span> <span class=\"nv nv-Anonymous\">%8</span><span class=\"p\">)</span>\n  <span class=\"nv nv-Anonymous\">%9</span> <span class=\"p\">=</span> <span class=\"k\">getelementptr</span> <span class=\"k\">inbounds</span> <span class=\"nv\">%\"core::option::Option&lt;core::fmt::Arguments&gt;\"</span><span class=\"p\">,</span> <span class=\"nv\">%\"core::option::Option&lt;core::fmt::Arguments&gt;\"</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">,</span> <span class=\"kt\">i64</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"kt\">i32</span> <span class=\"m\">0</span>\n  <span class=\"k\">store</span> <span class=\"p\">{}*</span> <span class=\"k\">null</span><span class=\"p\">,</span> <span class=\"p\">{}**</span> <span class=\"nv nv-Anonymous\">%9</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">8</span>\n  <span class=\"k\">call</span> <span class=\"k\">fastcc</span> <span class=\"k\">void</span> <span class=\"vg\">@_ZN4core9panicking13assert_failed17hb6d9722fa34cdf9fE</span><span class=\"p\">([</span><span class=\"m\">13</span> <span class=\"k\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]*</span> <span class=\"k\">noalias</span> <span class=\"k\">nonnull</span> <span class=\"k\">readonly</span> <span class=\"k\">align</span> <span class=\"m\">1</span> <span class=\"k\">dereferenceable</span><span class=\"p\">(</span><span class=\"m\">13</span><span class=\"p\">)</span> <span class=\"nv nv-Anonymous\">%2</span><span class=\"p\">,</span> <span class=\"nv\">%\"core::option::Option&lt;core::fmt::Arguments&gt;\"</span><span class=\"p\">*</span> <span class=\"k\">noalias</span> <span class=\"k\">nocapture</span> <span class=\"k\">nonnull</span> <span class=\"k\">dereferenceable</span><span class=\"p\">(</span><span class=\"m\">48</span><span class=\"p\">)</span> <span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">)</span> <span class=\"vg\">#11</span>\n  <span class=\"k\">unreachable</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 258481042,
        "sender_full_name": "simulacrum",
        "timestamp": 1634786076
    },
    {
        "content": "<p>that's the LLVM IR for my simple main function, across the GVN pass</p>",
        "id": 258481055,
        "sender_full_name": "simulacrum",
        "timestamp": 1634786092
    },
    {
        "content": "<p>I think the 2nd memcpy is just broken? It looks like it stopped copying to the 10th index in the function if I'm reading this right</p>",
        "id": 258481115,
        "sender_full_name": "simulacrum",
        "timestamp": 1634786161
    },
    {
        "content": "<p>oh, no, wait</p>",
        "id": 258481163,
        "sender_full_name": "simulacrum",
        "timestamp": 1634786178
    },
    {
        "content": "<p>not that directly, but something has gone wrong in this pass I'm pretty sure</p>",
        "id": 258481188,
        "sender_full_name": "simulacrum",
        "timestamp": 1634786212
    },
    {
        "content": "<p>since before we had a br i1 %8 and now we have unconditional branch</p>",
        "id": 258481207,
        "sender_full_name": "simulacrum",
        "timestamp": 1634786228
    },
    {
        "content": "<p>FWIW, I tried with ubuntu's llvm-12 and that passed.</p>",
        "id": 258481340,
        "sender_full_name": "Eric Huss",
        "timestamp": 1634786343
    },
    {
        "content": "<p>put up raw llvm ir here - <a href=\"https://gist.github.com/Mark-Simulacrum/748c985c3856a852df01eae58beb4d41\">https://gist.github.com/Mark-Simulacrum/748c985c3856a852df01eae58beb4d41</a></p>",
        "id": 258481444,
        "sender_full_name": "simulacrum",
        "timestamp": 1634786425
    },
    {
        "content": "<p>before/after this pass specifically</p>",
        "id": 258481462,
        "sender_full_name": "simulacrum",
        "timestamp": 1634786439
    },
    {
        "content": "<p>it sounds like it's probably llvm 10/11 are broken?</p>",
        "id": 258481659,
        "sender_full_name": "simulacrum",
        "timestamp": 1634786605
    },
    {
        "content": "<p>i'm off for the night, but I think next steps are probably to ping wg-llvm on an issue with the IR I've provided and ask for help in reducing further</p>",
        "id": 258482461,
        "sender_full_name": "simulacrum",
        "timestamp": 1634787317
    },
    {
        "content": "<p>a separate thread might be to try and figure out what change in 1.56 vs 1.57 caused this, by bisecting across rustc builds -- I might try to do this inside the docker (to get llvm 10 easily) tomorrow</p>",
        "id": 258482703,
        "sender_full_name": "simulacrum",
        "timestamp": 1634787539
    },
    {
        "content": "<p>I'm still quite confused on what is happening, or why current master isn't failing.<br>\nI'm able to reproduce on latest master (<a href=\"https://github.com/rust-lang/rust/commit/4626184cafa827e13cc7a71b183a704ee0ec5930\">4626184cafa827e13cc7a71b183a704ee0ec5930</a>) without Docker on Ubuntu 20 with these steps from a fresh checkout:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\"># llvm-11 is installed with `apt install llvm-11-dev`</span>\n<span class=\"c1\"># Also fails with llvm-10, but not llvm-12</span>\n./configure --llvm-root<span class=\"o\">=</span>/usr/lib/llvm-11 --enable-llvm-link-shared\n./x.py build library/std\n\ncat <span class=\"s\">&lt;&lt;EOF &gt;&gt; foo.rs</span>\n<span class=\"s\">fn main() {</span>\n<span class=\"s\">    let mut bytes = *b\"Hello, World!\";</span>\n<span class=\"s\">    bytes.copy_within(..3, 10);</span>\n<span class=\"s\">    assert_eq!(&amp;bytes, b\"Hello, WorHel\");</span>\n<span class=\"s\">}</span>\n<span class=\"s\">EOF</span>\n\n./build/x86_64-unknown-linux-gnu/stage1/bin/rustc foo.rs -Copt-level<span class=\"o\">=</span><span class=\"m\">3</span> -Ccodegen-units<span class=\"o\">=</span><span class=\"m\">1</span>\n./foo\n</code></pre></div>\n<p>So that rules out anything specific about the bootstrap bump.</p>",
        "id": 258487449,
        "sender_full_name": "Eric Huss",
        "timestamp": 1634791745
    },
    {
        "content": "<p>That's quite helpful, thanks, will speed up iteration cycle at least</p>",
        "id": 258530679,
        "sender_full_name": "simulacrum",
        "timestamp": 1634817080
    },
    {
        "content": "<p>I agree that there doesn't seem to be an easy connection to why it started failing with the bootstrap bump yet</p>",
        "id": 258530748,
        "sender_full_name": "simulacrum",
        "timestamp": 1634817116
    },
    {
        "content": "<p>(as an aside I did note we probably want to make the CGU=1 we set for std in CI not apply to --test compilations since that's not likely to be helpful)</p>",
        "id": 258530893,
        "sender_full_name": "simulacrum",
        "timestamp": 1634817169
    },
    {
        "content": "<p>LLVM 11 has -Cllvm-args=-opt-bisect-limit=1953 for the simple <a href=\"http://foo.rs\">foo.rs</a> to select GVN on the main function</p>",
        "id": 258548925,
        "sender_full_name": "simulacrum",
        "timestamp": 1634824385
    },
    {
        "content": "<p>Are you manually going through different values for <code>-opt-bisect-limit</code> to find the offending pass, or is there some automated way?  I've never seen that option before.</p>",
        "id": 258550163,
        "sender_full_name": "Eric Huss",
        "timestamp": 1634824837
    },
    {
        "content": "<p>manually -- it's pretty fast to manually bisect</p>",
        "id": 258550207,
        "sender_full_name": "simulacrum",
        "timestamp": 1634824856
    },
    {
        "content": "<p>it's still GVN with llvm 11 though so my guess is it's possible there's just a bug fix in llvm 12</p>",
        "id": 258550246,
        "sender_full_name": "simulacrum",
        "timestamp": 1634824870
    },
    {
        "content": "<p>no clue still why we're not seeing on this matter on the llvm-10 docker builder on master, though</p>",
        "id": 258550319,
        "sender_full_name": "simulacrum",
        "timestamp": 1634824895
    },
    {
        "content": "<p>omg, I figured out why the error started showing up in the bootstrap PR.</p>\n<p>Cargo has changed how profiles are treated for tests.  The test profile now inherits the settings from dev/release profiles.  This means that <code>coretests</code> is now being built with <code>codegen-units=1</code> where previously it was not.  <code>codegen-units=1</code> is necessary to trigger the llvm miscompilation.</p>",
        "id": 258563517,
        "sender_full_name": "Eric Huss",
        "timestamp": 1634829087
    },
    {
        "content": "<p>I had that in the back of my mind this whole time, but for some reason didn't make the connection.</p>",
        "id": 258563719,
        "sender_full_name": "Eric Huss",
        "timestamp": 1634829138
    },
    {
        "content": "<p>I can't offhand think of an easy way to fix that. <span aria-label=\"big frown\" class=\"emoji emoji-2639\" role=\"img\" title=\"big frown\">:big_frown:</span></p>",
        "id": 258564233,
        "sender_full_name": "Eric Huss",
        "timestamp": 1634829308
    },
    {
        "content": "<p>hm</p>",
        "id": 258564563,
        "sender_full_name": "simulacrum",
        "timestamp": 1634829421
    },
    {
        "content": "<p>can we explicitly not set it for now for the test profile</p>",
        "id": 258564590,
        "sender_full_name": "simulacrum",
        "timestamp": 1634829433
    },
    {
        "content": "<p>obviously we still need to fix the underlying bug, though maybe it's not worth it and we should bump to llvm 12+ and give up</p>",
        "id": 258564644,
        "sender_full_name": "simulacrum",
        "timestamp": 1634829454
    },
    {
        "content": "<p>I think changing the profile will trigger a full rebuild.  Profiles are now global, instead of using a mixture.</p>",
        "id": 258565597,
        "sender_full_name": "Eric Huss",
        "timestamp": 1634829780
    },
    {
        "content": "<p>hm :/</p>",
        "id": 258566458,
        "sender_full_name": "simulacrum",
        "timestamp": 1634830080
    },
    {
        "content": "<p>ok</p>",
        "id": 258566460,
        "sender_full_name": "simulacrum",
        "timestamp": 1634830081
    },
    {
        "content": "<p>I can think of a few hacks:</p>\n<ul>\n<li>Disable the test on this builder.</li>\n<li>Add some hack to the rustc wrapper to strip codegen-units=1 when --test is present.</li>\n<li>Switch to llvm-12.</li>\n<li>Revert the profile changes.</li>\n</ul>\n<p>...none of those sound good. I'm having trouble thinking of anything clever.</p>",
        "id": 258566946,
        "sender_full_name": "Eric Huss",
        "timestamp": 1634830261
    },
    {
        "content": "<p>hacking the rustc wrapper seems like the best <em>temporary</em> solution</p>",
        "id": 258567138,
        "sender_full_name": "cuviper",
        "timestamp": 1634830328
    },
    {
        "content": "<p>but a miscompilation with an old LLVM is tricky -- we can't really fix it, per se, unless rustc can avoid that scenario</p>",
        "id": 258567317,
        "sender_full_name": "cuviper",
        "timestamp": 1634830405
    },
    {
        "content": "<p>oi, github is picking a good time to go down.</p>",
        "id": 258567370,
        "sender_full_name": "Eric Huss",
        "timestamp": 1634830428
    },
    {
        "content": "<p>It is true that we have a bunch of miscompiles and such not <em>uncommonly</em> with cgu=1</p>",
        "id": 258567693,
        "sender_full_name": "simulacrum",
        "timestamp": 1634830547
    },
    {
        "content": "<p>we can disable cgu=1 on the llvm-10/11 builder, maybe?</p>",
        "id": 258567717,
        "sender_full_name": "simulacrum",
        "timestamp": 1634830558
    },
    {
        "content": "<p>that seems not too complicated</p>",
        "id": 258567763,
        "sender_full_name": "simulacrum",
        "timestamp": 1634830563
    },
    {
        "content": "<p>Yea, that should be pretty easy.</p>",
        "id": 258567874,
        "sender_full_name": "Eric Huss",
        "timestamp": 1634830607
    },
    {
        "content": "<p>Another thing I wanted to note is that we should monitor the CI build times after the bootstrap bump to make sure there aren't major regressions.  I'm not sure if there's an easy way to do that, though.</p>",
        "id": 258567973,
        "sender_full_name": "Eric Huss",
        "timestamp": 1634830650
    },
    {
        "content": "<p>cgu=1 is currently unconditionally set in <code>src/ci/run.sh</code>, but there could easily be an opt-out env</p>",
        "id": 258568165,
        "sender_full_name": "cuviper",
        "timestamp": 1634830719
    },
    {
        "content": "<p>reduced llvm ir which miscompiles to ~200 lines so far - <a href=\"https://llvm.godbolt.org/z/GEo1WEGas\">https://llvm.godbolt.org/z/GEo1WEGas</a></p>",
        "id": 258576053,
        "sender_full_name": "simulacrum",
        "timestamp": 1634833590
    },
    {
        "content": "<p>I've run into another problem unrelated to the codegen-units thing.</p>\n<p>In a fresh checkout of pietro's <code>1.56-master</code> branch, the following fails:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>./configure --enable-debug-assertions\n./x.py <span class=\"nb\">test</span> compiler/rustc_mir_dataflow\n</code></pre></div>\n<p>I'm not really sure where to start on that.  I'm going to take a break investigating for a while, but I might come back to this later.</p>",
        "id": 258605781,
        "sender_full_name": "Eric Huss",
        "timestamp": 1634845573
    },
    {
        "content": "<p><a href=\"https://llvm.godbolt.org/z/aavPbrzEe\">https://llvm.godbolt.org/z/aavPbrzEe</a> -- even smaller</p>",
        "id": 258607475,
        "sender_full_name": "simulacrum",
        "timestamp": 1634846315
    },
    {
        "content": "<p>I'm worried that we're going to get bugs more widespread than just in rustc with the cgu=1 thing, even on newer llvms</p>",
        "id": 258607543,
        "sender_full_name": "simulacrum",
        "timestamp": 1634846347
    },
    {
        "content": "<p>maybe they've all been fixed though</p>",
        "id": 258607563,
        "sender_full_name": "simulacrum",
        "timestamp": 1634846355
    },
    {
        "content": "<p>this particular bug seems definitely llvm-11 related, fixed on llvm 12 I think</p>",
        "id": 258607986,
        "sender_full_name": "simulacrum",
        "timestamp": 1634846510
    },
    {
        "content": "<p>with the reduction I'm fairly confident that there's nothing else causing noise and changing behavior</p>",
        "id": 258608076,
        "sender_full_name": "simulacrum",
        "timestamp": 1634846537
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> do you think it's still worth reporting upstream?</p>",
        "id": 258608099,
        "sender_full_name": "simulacrum",
        "timestamp": 1634846547
    },
    {
        "content": "<p>what exactly am I looking for in the output?</p>",
        "id": 258608141,
        "sender_full_name": "cuviper",
        "timestamp": 1634846563
    },
    {
        "content": "<p>commenting call void @panic_fmt2(i8* %bytes_ptr) leads to different behavior</p>",
        "id": 258608211,
        "sender_full_name": "simulacrum",
        "timestamp": 1634846590
    },
    {
        "content": "<p>which (I think, unless I messed up) is nonsensical</p>",
        "id": 258608250,
        "sender_full_name": "simulacrum",
        "timestamp": 1634846602
    },
    {
        "content": "<p>that branch should be dead code</p>",
        "id": 258608348,
        "sender_full_name": "simulacrum",
        "timestamp": 1634846637
    },
    {
        "content": "<p>well, I added windows for 12 and 13 too, and they also change with that comment</p>",
        "id": 258608463,
        "sender_full_name": "cuviper",
        "timestamp": 1634846667
    },
    {
        "content": "<p>yeah, but they optimize to ret i1 false</p>",
        "id": 258608655,
        "sender_full_name": "simulacrum",
        "timestamp": 1634846738
    },
    {
        "content": "<p>whereas llvm 11 optimizes to ret i1 true, basically</p>",
        "id": 258608676,
        "sender_full_name": "simulacrum",
        "timestamp": 1634846748
    },
    {
        "content": "<p>like this? <a href=\"https://llvm.godbolt.org/z/Th366bMcx\">https://llvm.godbolt.org/z/Th366bMcx</a> -- they all go to just <code>ret i1 false</code></p>",
        "id": 258608815,
        "sender_full_name": "cuviper",
        "timestamp": 1634846793
    },
    {
        "content": "<p>with the call present, 11 always returns <code>true</code> though, that's weird</p>",
        "id": 258609251,
        "sender_full_name": "cuviper",
        "timestamp": 1634846979
    },
    {
        "content": "<p>is that what you mean?</p>",
        "id": 258609344,
        "sender_full_name": "cuviper",
        "timestamp": 1634847005
    },
    {
        "content": "<p>yeah</p>",
        "id": 258610305,
        "sender_full_name": "simulacrum",
        "timestamp": 1634847400
    },
    {
        "content": "<p>the call is important but it shouldn't be</p>",
        "id": 258610330,
        "sender_full_name": "simulacrum",
        "timestamp": 1634847409
    },
    {
        "content": "<p>I'm wary that the call is still kept alive in newer versions too</p>",
        "id": 258620002,
        "sender_full_name": "cuviper",
        "timestamp": 1634851547
    },
    {
        "content": "<p>I think that's probably just pass ordering not running appropriately?</p>",
        "id": 258620912,
        "sender_full_name": "simulacrum",
        "timestamp": 1634852020
    },
    {
        "content": "<p>Not sure if your \"wary\" -&gt; my code/assumption of miscompilation is wrong, or \"seems like new versions also buggy\"</p>",
        "id": 258620943,
        "sender_full_name": "simulacrum",
        "timestamp": 1634852042
    },
    {
        "content": "<p>new versions look at least plausibly correct, hard to be sure</p>",
        "id": 258621060,
        "sender_full_name": "simulacrum",
        "timestamp": 1634852092
    },
    {
        "content": "<p>maybe also buggy, or maybe lurking UB in the input</p>",
        "id": 258621068,
        "sender_full_name": "cuviper",
        "timestamp": 1634852098
    },
    {
        "content": "<p>In any case, it seems clear that llvm 11 is wrong</p>",
        "id": 258621135,
        "sender_full_name": "simulacrum",
        "timestamp": 1634852151
    },
    {
        "content": "<p>(regardless of my reduction being correct)</p>",
        "id": 258621188,
        "sender_full_name": "simulacrum",
        "timestamp": 1634852166
    },
    {
        "content": "<p>I'm trying a <code>git bisect</code> of LLVM</p>",
        "id": 258627386,
        "sender_full_name": "cuviper",
        "timestamp": 1634855400
    },
    {
        "content": "<p>bisect says it was commit <a href=\"https://github.com/llvm/llvm-project/commit/1ddb3a369f7ebdf738486cd60261c3143658c0e6\">1ddb3a369f7ebdf738486cd60261c3143658c0e6</a>, <a href=\"https://reviews.llvm.org/D86815\">D86815</a></p>",
        "id": 258640846,
        "sender_full_name": "cuviper",
        "timestamp": 1634863916
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span> approved that change, maybe he can say how that was formerly broken on your IR</p>",
        "id": 258641385,
        "sender_full_name": "cuviper",
        "timestamp": 1634864316
    },
    {
        "content": "<p>it doesn't look like the memcpy is overlapping to me...</p>",
        "id": 258641409,
        "sender_full_name": "cuviper",
        "timestamp": 1634864339
    },
    {
        "content": "<p>Yeah, it shouldn't be.</p>",
        "id": 258644391,
        "sender_full_name": "simulacrum",
        "timestamp": 1634866324
    },
    {
        "content": "<p>Is it potentially problematic to bump directly to llvm 12 as our baseline? I don't know how comfortable I feel claiming 11 compat when we clearly can't \"even\" bootstrap</p>",
        "id": 258644434,
        "sender_full_name": "simulacrum",
        "timestamp": 1634866380
    },
    {
        "content": "<p>OK, I think I have a glimpse as to what is wrong with the rustc_mir_dataflow tests. This is also related to cargo now passing release profile flags to tests (in this case <code>-C debug-assertions</code>). The <a href=\"https://github.com/rust-lang/rust/blob/547a6ffee0cf4da9929a9e3d49546dc87d607735/compiler/rustc_mir_dataflow/src/framework/tests.rs#L13-L17\"><code>mock_body</code></a> test seems to intentionally create a mir body with disconnected basic blocks. However, in <a href=\"https://github.com/rust-lang/rust/pull/74169\">https://github.com/rust-lang/rust/pull/74169</a> an assertion was added to prevent API consumers from visiting those basic blocks by accident. So the assertion is triggering.</p>\n<p>I'm obviously unfamiliar with all that code, so I don't know how to fix it. It could be temporarily <code>#[ignore]</code>d if need be.</p>\n<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>, let me know if it would be helpful to maybe track these problems via GitHub issues. I'm not sure if you want to handle all these issues yourself.</p>",
        "id": 258652818,
        "sender_full_name": "Eric Huss",
        "timestamp": 1634869642
    },
    {
        "content": "<p>yeah I just came to the same conclusion as well</p>",
        "id": 258652880,
        "sender_full_name": "simulacrum",
        "timestamp": 1634869657
    },
    {
        "content": "<p>I think an issue as the next step probably makes sense</p>",
        "id": 258653258,
        "sender_full_name": "simulacrum",
        "timestamp": 1634869741
    },
    {
        "content": "<p>(well, two, for LLVM 11 CGU=1 difficulties and for this Cargo debug asserts)</p>",
        "id": 258653347,
        "sender_full_name": "simulacrum",
        "timestamp": 1634869762
    },
    {
        "content": "<p>I think the fix we have in mind for CGU=1 is to disable setting that on the LLVM 10/11 builder, but I also want us to discuss going direct to LLVM 12 at tomorrow's  release team meeting or what other mitigations we should consider.</p>",
        "id": 258653497,
        "sender_full_name": "simulacrum",
        "timestamp": 1634869829
    },
    {
        "content": "<p>For debug asserts I think most people are probably not affected, but I am worried about how non-obvious this is without knowing about this change and understanding it more fully</p>",
        "id": 258653548,
        "sender_full_name": "simulacrum",
        "timestamp": 1634869870
    },
    {
        "content": "<p>ok, I'll open some issues.  I didn't really follow the discussion above about the specifics of the optimization issue, so you can fill out more details if you want.</p>",
        "id": 258653786,
        "sender_full_name": "Eric Huss",
        "timestamp": 1634870096
    },
    {
        "content": "<p>Yeah, thanks. I think the specifics are not that important for making the decision</p>",
        "id": 258653805,
        "sender_full_name": "simulacrum",
        "timestamp": 1634870113
    },
    {
        "content": "<p>It's worth noting someone was running into a bunch of problems with our UI test suite when trying to set cgu=1 there, too, I think</p>",
        "id": 258653822,
        "sender_full_name": "simulacrum",
        "timestamp": 1634870134
    },
    {
        "content": "<p>So I'm kinda generally worried about the IR we're generating or LLVM bugs</p>",
        "id": 258653834,
        "sender_full_name": "simulacrum",
        "timestamp": 1634870150
    },
    {
        "content": "<p>Something to discuss, at least; not clear how much we can do. I can try to find relevant links tomorrow.</p>",
        "id": 258653888,
        "sender_full_name": "simulacrum",
        "timestamp": 1634870176
    },
    {
        "content": "<p>put up a beta backport rollup as well - <a href=\"https://github.com/rust-lang/rust/pull/90151\">https://github.com/rust-lang/rust/pull/90151</a> - so we can move forward with that hopefully</p>",
        "id": 258654313,
        "sender_full_name": "simulacrum",
        "timestamp": 1634870586
    },
    {
        "content": "<p>Ah, can you maybe include cargo in that?</p>",
        "id": 258654335,
        "sender_full_name": "Eric Huss",
        "timestamp": 1634870619
    },
    {
        "content": "<p>There's a pretty important critical fix on the rust-1.57.0 branch.</p>",
        "id": 258654347,
        "sender_full_name": "Eric Huss",
        "timestamp": 1634870631
    },
    {
        "content": "<p>ah, sure</p>",
        "id": 258654353,
        "sender_full_name": "simulacrum",
        "timestamp": 1634870634
    },
    {
        "content": "<p>Thank you! <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 258654397,
        "sender_full_name": "Eric Huss",
        "timestamp": 1634870645
    },
    {
        "content": "<p>Done. I'll probably poke Pietro tomorrow and trigger a manual beta release so we can have artifacts there asap for crater and hopefully a bootstrap bump with some temporary patches in place</p>",
        "id": 258654643,
        "sender_full_name": "simulacrum",
        "timestamp": 1634870883
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n<p>Posted <a href=\"https://github.com/rust-lang/rust/issues/90152\">#90152</a> and <a href=\"https://github.com/rust-lang/rust/issues/90153\">#90153</a> to track the issues encountered above, feel free to edit them.</p>",
        "id": 258654859,
        "sender_full_name": "Eric Huss",
        "timestamp": 1634871102
    },
    {
        "content": "<p>Thanks, will do tomorrow</p>",
        "id": 258655060,
        "sender_full_name": "simulacrum",
        "timestamp": 1634871277
    },
    {
        "content": "<p>Disabling those tests, I was able to get <code>x86_64-gnu-llvm-10</code> to successfully finish, so hopefully there aren't too many other problems that crop up.</p>",
        "id": 258655102,
        "sender_full_name": "Eric Huss",
        "timestamp": 1634871318
    },
    {
        "content": "<p>kicked off a manual beta release</p>",
        "id": 258709118,
        "sender_full_name": "simulacrum",
        "timestamp": 1634908249
    },
    {
        "content": "<p>I posted <a href=\"https://github.com/rust-lang/rust/issues/90175\">#90175</a> to update the minimum to LLVM 12 instead</p>",
        "id": 258748803,
        "sender_full_name": "cuviper",
        "timestamp": 1634925466
    }
]