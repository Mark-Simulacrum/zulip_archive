[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/compiler-team/issues/508\">Add attribute to run specific tests in an isolated process #508</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 278646991,
        "sender_full_name": "triagebot",
        "timestamp": 1649737496
    },
    {
        "content": "<p>It's not really clear if this would be something that would be a compiler-team decision.  Generally the lang team weighs in on attributes, and the libs team is responsible for libtest. </p>\n<p>One very minor side concern is adding many different attributes for <code>#[test]</code> could result in a large soup attributes that could be applied to a test.  One alternative is to attach options to the test attribute itself like <code>#[test(spawn_process)]</code>, and more options could be added in the future. I'm not sure if that's really better, but something to consider.</p>",
        "id": 278648285,
        "sender_full_name": "Eric Huss",
        "timestamp": 1649739253
    },
    {
        "content": "<p>i am 0 for 2 on picking the right place to file my MCPs <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 278648461,
        "sender_full_name": "skippy",
        "timestamp": 1649739528
    },
    {
        "content": "<p>I believe there is an issue open where <code>-Zpanic-abort-tests</code> deadlocks in certain cases. Haven't personally seen this though.</p>",
        "id": 278648815,
        "sender_full_name": "bjorn3",
        "timestamp": 1649739942
    },
    {
        "content": "<p>is this issue the one? <a href=\"https://github.com/rust-lang/rust/issues/68936\">https://github.com/rust-lang/rust/issues/68936</a></p>",
        "id": 278649362,
        "sender_full_name": "skippy",
        "timestamp": 1649740699
    },
    {
        "content": "<p>This feature could be helpful for my <code>dhat</code> crate. It has a feature called \"heap usage testing\" that lets you write tests that ensure that code snippets do the expected number of allocations. Because the heap is global, there's a whole bunch of caveats about how to write these tests so they don't interfere with each other or the test harness: <a href=\"https://docs.rs/dhat/latest/dhat/#heap-usage-testing\">https://docs.rs/dhat/latest/dhat/#heap-usage-testing</a></p>",
        "id": 278650503,
        "sender_full_name": "nnethercote",
        "timestamp": 1649742252
    },
    {
        "content": "<p>It would also be useful for various other std tests, e.g. testing fork, chdir and similar things. Currently some of those tests are implemented as UI tests instead which means one has to build a stage 1 compiler to run them.</p>",
        "id": 278673360,
        "sender_full_name": "The 8472",
        "timestamp": 1649758965
    },
    {
        "content": "<p>thanks! i'm adding the additional motivations to the MCP</p>",
        "id": 278695373,
        "sender_full_name": "skippy",
        "timestamp": 1649771539
    },
    {
        "content": "<p>i like the idea of <code>#[test(spawn_process)]</code> instead of <code>#[spawn_process]</code>, but does anyone have thoughts on the name btw?</p>\n<p>without framing things in terms of just <code>set_var</code>, the idea is to have a <code>#[test]</code> behave as a <code>fn main()</code> entry point in a pristine process</p>\n<p><code>#[test(isolated)]</code>, <code>#[test(isolated_process)]</code>,  <code>#[test(main)]</code>, <code>#[test(main_in_process)]</code>... ?</p>",
        "id": 278700594,
        "sender_full_name": "skippy",
        "timestamp": 1649773757
    },
    {
        "content": "<p>\"spawn_process\" seems most accurate to me, \"isolated\" implies it's sandboxed which isn't true, and <code>main</code> seems ambiguous</p>",
        "id": 278702252,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649774438
    },
    {
        "content": "<p>One concern I have here is Miri compatibility. Miri probably won't be able to run these tests in a separate process. It also already makes the test runner single-threaded.</p>",
        "id": 278702353,
        "sender_full_name": "RalfJ",
        "timestamp": 1649774487
    },
    {
        "content": "<p>I understand you are worried about background threads, but is that really something this API needs to defend against? also note that Rust stdlib still does locking, so only background threads that call C operations <em>after</em> the test they belong to is done are a problem. that seems like a bad idea anyway?</p>",
        "id": 278702532,
        "sender_full_name": "RalfJ",
        "timestamp": 1649774550
    },
    {
        "content": "<p>it's possible that just running specific tests single threaded is good enough for my use case, i think that means i'd need to make a crate wide claim about every test in the crate in my <code>// SAFETY</code> comment before calling <code>set_var</code> though</p>",
        "id": 278703275,
        "sender_full_name": "skippy",
        "timestamp": 1649774864
    },
    {
        "content": "<p>something like <code>// SAFETY: this test runs single threaded, and no other previously run test in this crate is misbehaved and still reading or writing the environment</code></p>",
        "id": 278703630,
        "sender_full_name": "skippy",
        "timestamp": 1649775004
    },
    {
        "content": "<p>although now i wonder if my safety comments should call it the \"OS\" environment or something, since as you say rust still has all the locking</p>",
        "id": 278703689,
        "sender_full_name": "skippy",
        "timestamp": 1649775037
    },
    {
        "content": "<p>FWIW I am not sure if Rust doing locking is guaranteed</p>",
        "id": 278703927,
        "sender_full_name": "RalfJ",
        "timestamp": 1649775128
    },
    {
        "content": "<p>it <em>does</em> cause trouble around <code>fork</code>...</p>",
        "id": 278703967,
        "sender_full_name": "RalfJ",
        "timestamp": 1649775146
    },
    {
        "content": "<p>not sure which plans the libs-api team has there</p>",
        "id": 278703985,
        "sender_full_name": "RalfJ",
        "timestamp": 1649775156
    },
    {
        "content": "<p>(also this is exactly why I think we should have a Rust-only 'shadow environment' that is safe to read and write. that would cover the needs of most test suites, I think. sure, you'd still want single-threaded tests for stuff like <code>chdir</code>, but it wouldnt be a soundness concern any more.)</p>",
        "id": 278704169,
        "sender_full_name": "RalfJ",
        "timestamp": 1649775223
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> that seems very confusing if you're doing ffi</p>",
        "id": 278704502,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649775356
    },
    {
        "content": "<p>libstd doesn't know when you call another language, so you'd see a different environment in rust than everywhere else</p>",
        "id": 278704626,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649775395
    },
    {
        "content": "<p>Ideally libc would make set_env thread safe but that's probably a lost cause :(</p>",
        "id": 278704669,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649775419
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20attribute.20to.20run.20specific.20tests.20in.20an.E2.80.A6.20compiler-team.23508/near/278704502\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> that seems very confusing if you're doing ffi</p>\n</blockquote>\n<p>yeah. I view this as an API design issue -- <code>env::set_for_rust_only</code>, or so.</p>",
        "id": 278704799,
        "sender_full_name": "RalfJ",
        "timestamp": 1649775473
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20attribute.20to.20run.20specific.20tests.20in.20an.E2.80.A6.20compiler-team.23508/near/278704669\">said</a>:</p>\n<blockquote>\n<p>Ideally libc would make set_env thread safe but that's probably a lost cause :(</p>\n</blockquote>\n<p>That's not actually possible unfortunately. <code>putenv</code> exists</p>",
        "id": 278704870,
        "sender_full_name": "Jak{e,ob} Degen",
        "timestamp": 1649775497
    },
    {
        "content": "<p>Oh! Why don't we just use that in libstd?</p>",
        "id": 278704983,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649775538
    },
    {
        "content": "<p>Wait no that's still thread unsafe, I don't understand why it's relevant</p>",
        "id": 278705112,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649775585
    },
    {
        "content": "<p>Where do you mean? <code>putenv</code> isn't the solution here, it's the source of the problems. It meanst that even libc proper (ie glibc) couldn't synchronize its way out of thread unsafety</p>",
        "id": 278705192,
        "sender_full_name": "Jak{e,ob} Degen",
        "timestamp": 1649775603
    },
    {
        "content": "<p>new api, would <code>set_for_rust_only</code> have to be limited to strings? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 278705197,
        "sender_full_name": "skippy",
        "timestamp": 1649775604
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310518\">Jak{e,ob} Degen</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20attribute.20to.20run.20specific.20tests.20in.20an.E2.80.A6.20compiler-team.23508/near/278705192\">said</a>:</p>\n<blockquote>\n<p>Where do you mean? <code>putenv</code> isn't the solution here, it's the source of the problems. It meanst that even libc proper (ie glibc) couldn't synchronize its way out of thread unsafety</p>\n</blockquote>\n<p>I don't see how this follows, sorry. <code>putenv</code> is just an API glibc offers, it could also be synchronized internally if glibc wanted it to be.</p>",
        "id": 278705920,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649775834
    },
    {
        "content": "<p>for miri, the idea behind the attribute is that the test always runs in a \"pristine\" fashion.... is there any global state in miri that could leak between tests even if these <code>spawn_process</code> tests weren't actually run in a new process there?</p>",
        "id": 278706080,
        "sender_full_name": "skippy",
        "timestamp": 1649775875
    },
    {
        "content": "<p>like i don't know if miri actually changes its real process environment on these calls, or just \"interprets\" that</p>",
        "id": 278706201,
        "sender_full_name": "skippy",
        "timestamp": 1649775930
    },
    {
        "content": "<p>(i gotta head out for a few hours, later)</p>",
        "id": 278706330,
        "sender_full_name": "skippy",
        "timestamp": 1649775979
    },
    {
        "content": "<blockquote>\n<p>i like the idea of #[test(spawn_process)] instead of #[spawn_process], but does anyone have thoughts on the name btw?</p>\n</blockquote>\n<p>FWIW, I wouldn't jump on my suggestion too fast, it was just a random idea.  Attributes are more flexible because you can do things like <code>cfg_attr</code>, and are more consistent with the existing should_panic and ignore attributes.  I think there are pros and cons either way, and I'm not sure how to balance them.</p>",
        "id": 278706915,
        "sender_full_name": "Eric Huss",
        "timestamp": 1649776229
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127967\">skippy</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20attribute.20to.20run.20specific.20tests.20in.20an.E2.80.A6.20compiler-team.23508/near/278706080\">said</a>:</p>\n<blockquote>\n<p>for miri, the idea behind the attribute is that the test always runs in a \"pristine\" fashion.... is there any global state in miri that could leak between tests even if these <code>spawn_process</code> tests weren't actually run in a new process there?</p>\n</blockquote>\n<p>miri has the same global state that a regular program does (just some of it managed via its own copies, but that is not a difference the program can even tell)</p>",
        "id": 278707181,
        "sender_full_name": "RalfJ",
        "timestamp": 1649776300
    },
    {
        "content": "<p>so, e.g. env vars and the working dir are all global</p>",
        "id": 278707202,
        "sender_full_name": "RalfJ",
        "timestamp": 1649776310
    },
    {
        "content": "<p>if they werent, that would not faithfully implement the real APIs ;)</p>",
        "id": 278707225,
        "sender_full_name": "RalfJ",
        "timestamp": 1649776320
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20attribute.20to.20run.20specific.20tests.20in.20an.E2.80.A6.20compiler-team.23508/near/278705920\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310518\">Jak{e,ob} Degen</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20attribute.20to.20run.20specific.20tests.20in.20an.E2.80.A6.20compiler-team.23508/near/278705192\">said</a>:</p>\n<blockquote>\n<p>Where do you mean? <code>putenv</code> isn't the solution here, it's the source of the problems. It meanst that even libc proper (ie glibc) couldn't synchronize its way out of thread unsafety</p>\n</blockquote>\n<p>I don't see how this follows, sorry. <code>putenv</code> is just an API glibc offers, it could also be synchronized internally if glibc wanted it to be.</p>\n</blockquote>\n<p>Even if glibc puts a global lock around all calls to <code>putenv</code>, <code>setenv</code>, and <code>getenv</code> that's still not enough. The problem is that subsequent writes to the pointer passed into <code>putenv</code> need to be visible. Meaning that I can do:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"c1\">// Thread 1</span>\n<span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">buf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">to_string</span><span class=\"p\">(</span><span class=\"s\">\"a=b\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">putenv</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"sc\">'c'</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Thread 2</span>\n<span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s\">\"a\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"w\"></span>\n</code></pre></div>\n<p>There's no way for libc to prevent the last statements in each thread from racing</p>",
        "id": 278708385,
        "sender_full_name": "Jak{e,ob} Degen",
        "timestamp": 1649776785
    },
    {
        "content": "<p>why is the write to <code>buf[2]</code> visible ?? I would expect putenv to copy the buffer :(</p>",
        "id": 278708593,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649776860
    },
    {
        "content": "<p>Unfortunately, the spec requires otherwise</p>\n<blockquote>\n<p>The string pointed to by string becomes part of the environment, so altering the string changes the environment.</p>\n</blockquote>\n<p><a href=\"https://www.man7.org/linux/man-pages/man3/putenv.3.html\">https://www.man7.org/linux/man-pages/man3/putenv.3.html</a></p>",
        "id": 278708725,
        "sender_full_name": "Jak{e,ob} Degen",
        "timestamp": 1649776922
    },
    {
        "content": "<p>well if we break libc anyway we might also break that.^^</p>",
        "id": 278715328,
        "sender_full_name": "RalfJ",
        "timestamp": 1649779868
    },
    {
        "content": "<p>but this is wearing wildly off-topic for this discussion on the test harness</p>",
        "id": 278715357,
        "sender_full_name": "RalfJ",
        "timestamp": 1649779885
    },
    {
        "content": "<p>i did just confirm (for my own sanity), that this does pass in miri:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">test1</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">std</span>::<span class=\"n\">env</span>::<span class=\"n\">set_var</span><span class=\"p\">(</span><span class=\"s\">\"TEST\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"test\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">env</span>::<span class=\"n\">var</span><span class=\"p\">(</span><span class=\"s\">\"TEST\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"s\">\"test\"</span><span class=\"p\">.</span><span class=\"n\">to_owned</span><span class=\"p\">()));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">test2</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">env</span>::<span class=\"n\">var</span><span class=\"p\">(</span><span class=\"s\">\"TEST\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"s\">\"test\"</span><span class=\"p\">.</span><span class=\"n\">to_owned</span><span class=\"p\">()));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>i was thinking there might be perfectly emulated global state, but that it might get thrown away between each test</p>\n<p>so miri would have to support the new attribute (or ignore the test), were we to add it</p>\n<p>i realize who i'm talking to, but i just had to try things out myself <span aria-label=\"nerd\" class=\"emoji emoji-1f913\" role=\"img\" title=\"nerd\">:nerd:</span></p>",
        "id": 278734979,
        "sender_full_name": "skippy",
        "timestamp": 1649788739
    },
    {
        "content": "<p>(random aside, it'd be cool if rust playground had miri test)</p>",
        "id": 278735232,
        "sender_full_name": "skippy",
        "timestamp": 1649788857
    },
    {
        "content": "<p>Miri doesn't even know what a \"test\" is</p>",
        "id": 278737221,
        "sender_full_name": "RalfJ",
        "timestamp": 1649789783
    },
    {
        "content": "<p>it just creates a binary with the libtest harness the exact way rustc does</p>",
        "id": 278737256,
        "sender_full_name": "RalfJ",
        "timestamp": 1649789803
    },
    {
        "content": "<p>except that it stops after having generated all the MIR, and then interprets that. but there's a single <code>main</code> function at this point that it interprets just like <code>cargo miri run</code>.</p>",
        "id": 278737296,
        "sender_full_name": "RalfJ",
        "timestamp": 1649789827
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127967\">skippy</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20attribute.20to.20run.20specific.20tests.20in.20an.E2.80.A6.20compiler-team.23508/near/278735232\">said</a>:</p>\n<blockquote>\n<p>(random aside, it'd be cool if rust playground had miri test)</p>\n</blockquote>\n<p>there's no <code>cargo test</code> on the playground either. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 278737329,
        "sender_full_name": "RalfJ",
        "timestamp": 1649789850
    },
    {
        "content": "<blockquote>\n<p>so miri would have to support the new attribute (or ignore the test), were we to add it</p>\n</blockquote>\n<p>well, its implementation could use <code>cfg(miri)</code> to do <em>something</em> special. not sure what though... spawning a separate process seems like an unlikely solution for miri.</p>",
        "id": 278737537,
        "sender_full_name": "RalfJ",
        "timestamp": 1649789920
    },
    {
        "content": "<p>i wonder if instead of spawning processes, we wrote out multiple binaries instead?</p>\n<p>so we'd generate the test harness that runs most of the tests, and then a bunch of individual test harnesses, one each for each spawned test (or for each panic abort test)</p>\n<p>that would essentially push the knowledge of tests into miri though, in that it'd have to know to run multiple binaries</p>\n<p>plus there'd be a bunch of other complications with having multiple binaries to run...</p>\n<p>just thinking out loud here</p>",
        "id": 278739242,
        "sender_full_name": "skippy",
        "timestamp": 1649790601
    },
    {
        "content": "<p>another thought... could miri ever support a cheat where it launched an instance of itself? miri can already run the test harness anyway, and the spawned test process is just executing the exact same binary with a different set of command line arguments</p>\n<p>since you wouldn't be launching some arbitrary process in this case, i don't know if that makes the idea remotely feasible... i'm way out of my depth here</p>",
        "id": 278741945,
        "sender_full_name": "skippy",
        "timestamp": 1649791702
    },
    {
        "content": "<p>both of these ideas feel like they'd be <em>incredibly</em> complicated though</p>",
        "id": 278742346,
        "sender_full_name": "skippy",
        "timestamp": 1649791923
    },
    {
        "content": "<p>/me is imagining miri trying to verify that fork / vfork are sound</p>",
        "id": 278742769,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649792147
    },
    {
        "content": "<p>for just <code>set_var</code> specifically, you could <code>#[cfg_attr(not(miri), spawn_process]</code> too</p>\n<p>as in, don't bother with spawn_process in miri where there's no soundness issue with <code>set_var</code> anyway</p>",
        "id": 278742935,
        "sender_full_name": "skippy",
        "timestamp": 1649792232
    },
    {
        "content": "<p>i don't know if miri actually has a <code>cfg</code> flag or not :)</p>",
        "id": 278743108,
        "sender_full_name": "skippy",
        "timestamp": 1649792319
    },
    {
        "content": "<p>and then i just copy+paste this a million times or so in the code <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// SAFETY: we're either single threaded in main() due to #[spawn_process],</span>\n<span class=\"c1\">//         or in cfg!(miri) where set_var is always sound</span>\n</code></pre></div>",
        "id": 278743436,
        "sender_full_name": "skippy",
        "timestamp": 1649792508
    },
    {
        "content": "<p>(if <code>#[deprecated_safe]</code> lands, i feel like future coders are gonna hate me when they deal with an unsafe env... <span aria-label=\"cold sweat\" class=\"emoji emoji-1f630\" role=\"img\" title=\"cold sweat\">:cold_sweat:</span>)</p>",
        "id": 278743659,
        "sender_full_name": "skippy",
        "timestamp": 1649792623
    }
]