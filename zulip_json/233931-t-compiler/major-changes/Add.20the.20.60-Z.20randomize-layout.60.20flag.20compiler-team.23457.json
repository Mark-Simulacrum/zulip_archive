[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/compiler-team/issues/457\">Add the <code>-Z randomize-layout</code> flag #457</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 250825263,
        "sender_full_name": "triagebot",
        "timestamp": 1630005674
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span>: Proposal <a href=\"https://github.com/rust-lang/compiler-team/issues/457#issuecomment-906682593\">#457</a> has been seconded, and will be approved in 10 days if no objections are raised.</p>",
        "id": 250826052,
        "sender_full_name": "triagebot",
        "timestamp": 1630006050
    },
    {
        "content": "<p>Sounds great <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 250850793,
        "sender_full_name": "scottmcm",
        "timestamp": 1630016981
    },
    {
        "content": "<p>Firefox has \"chaos mode\": <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=955888\">https://bugzilla.mozilla.org/show_bug.cgi?id=955888</a></p>",
        "id": 250857262,
        "sender_full_name": "njn",
        "timestamp": 1630020907
    },
    {
        "content": "<p>The advantage of calling it <code>-Z chaos-mode</code></p>\n<ul>\n<li>Precedent</li>\n<li>Sounds cool</li>\n<li>Generic name makes it easy to add other things later, if you ant</li>\n</ul>",
        "id": 250857299,
        "sender_full_name": "njn",
        "timestamp": 1630020949
    },
    {
        "content": "<p>If we are bikeshedding names, I actually had designs for a similar flag in the rust frontend for lccc, but named it <code>-Z repr-rust-layout=randomize</code>. I did this for a couple reasons, </p>\n<ol>\n<li>It makes it clear that the layout being randomized is repr(Rust) types</li>\n<li>It allows for other possible values in the future. In my case, the flag also accepts c, to s/repr(Rust)/repr(C)/ internally, and abi, to use the ABI that the frontend defines (which is the default mode if the flag isn't specified). It is possible that rustc could also, eventually, add other version of <code>-Z repr-rust-layout</code> as well</li>\n</ol>",
        "id": 250861173,
        "sender_full_name": "Connor Horman",
        "timestamp": 1630024179
    },
    {
        "content": "<p>I'm also a fan of the word <code>nondeterministic</code> if we're talking about naming</p>\n<blockquote>\n<p>... randomizes/shuffles/otherwise makes unpredictable the layout ...</p>\n</blockquote>\n<p>This exactly matches what I would expect when reading <code>nondeterministic</code> and I think makes it more clear that <em>any</em> layout could be chosen for any reason, especially if there is an attempt to make this mode maximally unintuitive/maximally inconvenient to further expand the reach of the flag.  On the other hand <code>random</code> makes me think simply shuffling and no more, but has merit to being simpler.</p>",
        "id": 250873784,
        "sender_full_name": "asquared31415",
        "timestamp": 1630031510
    },
    {
        "content": "<p>I would actually love for it to be random but deterministic. For instance, determined by the hash of source code files, or similar. That would make it effectively random and unpredictable, but yet always the same for a given build, preserving reproducibility.</p>",
        "id": 251524318,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630486142
    },
    {
        "content": "<p>that sounds like it will blame the poor PR author who adds a doc comment and breaks the build</p>",
        "id": 251524630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630486283
    },
    {
        "content": "<p>and you will be able to confirm that removing the doc comment will fix the build again, so clearly the doc comment is to blame</p>",
        "id": 251524845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630486389
    },
    {
        "content": "<p>I still think it would be nice to have randomization and reproducibility be compatible.</p>",
        "id": 251525338,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630486640
    },
    {
        "content": "<p>If something like that is run in CI, the random seed should be provided by the CI runner or printed out in some way that makes it clear that the culprit is a particular random seed and not whatever the last commit did</p>",
        "id": 251525861,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630486893
    },
    {
        "content": "<p>This proposal has been accepted: <a href=\"https://github.com/rust-lang/compiler-team/issues/457\">#457</a>.</p>",
        "id": 252600603,
        "sender_full_name": "triagebot",
        "timestamp": 1631181928
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20the.20.60-Z.20randomize-layout.60.20flag.20compiler-team.23457/near/251524318\">said</a>:</p>\n<blockquote>\n<p>I would actually love for it to be random but deterministic. For instance, determined by the hash of source code files, or similar. That would make it effectively random and unpredictable, but yet always the same for a given build, preserving reproducibility.</p>\n</blockquote>\n<p>the current implementation (<a href=\"https://github.com/rust-lang/rust/issues/87868\">#87868</a>) keys it on the same thing that incremental, symbol names, and <code>TypeId</code>, all use for a \"stable identity\" (specifically, for the definition of the type. if it's generic, all instances use the same order. also, the defining crate's <code>-Z</code> flag is used, not the current one, to allow mixed builds)</p>\n<p>so the main thing it will detect is a copy-paste of the same type <em>definition</em> - it's not guaranteed to have the same field order (but could ofc still do by mere chance, especially with very few fields)</p>",
        "id": 255636494,
        "sender_full_name": "eddyb",
        "timestamp": 1633031283
    }
]