[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/compiler-team/issues/432\">Make <code>TypeFolder::fold_*</code> return <code>Result</code> #432</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 239163603,
        "sender_full_name": "triagebot",
        "timestamp": 1621287115
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span>: Proposal <a href=\"https://github.com/rust-lang/compiler-team/issues/432#issuecomment-842655986\">#432</a> has been seconded, and will be approved in 10 days if no objections are raised.</p>",
        "id": 239163770,
        "sender_full_name": "triagebot",
        "timestamp": 1621287199
    },
    {
        "content": "<p>(Some relevant discussion in <a href=\"#narrow/stream/144729-wg-traits/topic/Extend.20Rustc's.20folder.20trait.20to.20have.20a.20Result.20associated.20type\">https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits/topic/Extend.20Rustc's.20folder.20trait.20to.20have.20a.20Result.20associated.20type</a>)</p>",
        "id": 239163856,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621287245
    },
    {
        "content": "<p>How would this interact with overflow errors? Would it make <a href=\"https://github.com/rust-lang/rust/issues/82692\">https://github.com/rust-lang/rust/issues/82692</a> easier or harder? Or I guess another way to ask - could the error for the Result be an overflow error, or would returning an overflow require a double result?</p>",
        "id": 239199930,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621315517
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 239199995,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621315564
    },
    {
        "content": "<p>I'm not sure I completely understand what is making <a href=\"https://github.com/rust-lang/rust/issues/81091\">#81091</a> so hard, but if it involves returning early from a <code>TypeFolder</code>, this MCP would probably help</p>",
        "id": 239238923,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621338477
    },
    {
        "content": "<blockquote>\n<p>could the error for the Result be an overflow error, or would returning an overflow require a double result?</p>\n</blockquote>\n<p>The error type can be anything, it could be <code>OverflowError</code> or maybe a type like <code>enum NormalizationError { NoSolution, Overflow }</code></p>",
        "id": 239239370,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621338724
    },
    {
        "content": "<p>Hmm I guess this is a question for <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> , they told me overflow errors shouldn't be mixed with anything else</p>",
        "id": 239242988,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621340486
    },
    {
        "content": "<p>Overflow errors generally should be emitted, even if they come from running something speculatively, while other errors should not be emitted in that case.</p>",
        "id": 239243869,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1621340901
    },
    {
        "content": "<p>Right, you mean that they shouldn't be <em>converted</em> to another type of error?</p>",
        "id": 239244005,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621340976
    },
    {
        "content": "<p>Yes, they shouldn't be converted to another type of error and they should not be ignored (not cause a diagnostic error)</p>",
        "id": 239244389,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1621341135
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> why should they be emitted even for speculative queries?</p>",
        "id": 239287193,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621356592
    },
    {
        "content": "<p>Because hitting the recursion limit doesn't necessarily mean that something will loop forever and increasing the recursion limit should never be able to break code.</p>",
        "id": 239293421,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1621358905
    },
    {
        "content": "<p>I don't understand - why would increasing the limit break code? Speculative queries should only be executed if an error has already happened, right? Maybe I'm misunderstanding what you mean by speculative</p>",
        "id": 239300519,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621361746
    },
    {
        "content": "<p>This proposal has been accepted: <a href=\"https://github.com/rust-lang/compiler-team/issues/432\">#432</a>.</p>",
        "id": 241374370,
        "sender_full_name": "triagebot",
        "timestamp": 1622717481
    }
]