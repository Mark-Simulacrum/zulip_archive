[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/compiler-team/issues/411\">Intrinsic for Transmutability #411</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 228830149,
        "sender_full_name": "triagebot",
        "timestamp": 1614884377
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219211\">@Jack Wrenn</span> fyi you have <code>Assume</code> defined twice in the API surface</p>",
        "id": 228830924,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614884649
    },
    {
        "content": "<p>not sure which derives you meant to keep so I didn't edit myself</p>",
        "id": 228830994,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614884676
    },
    {
        "content": "<p><span aria-label=\"shock\" class=\"emoji emoji-1f628\" role=\"img\" title=\"shock\">:shock:</span> fixed!</p>",
        "id": 228831112,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1614884723
    },
    {
        "content": "<p>The title of the MCP is a bit confusing. Intrinsics are functions implemented in the compiler itself. What you are describing is a lang item. (<code>#[lang = \"...\"]</code>)</p>",
        "id": 228831485,
        "sender_full_name": "bjorn3",
        "timestamp": 1614884859
    },
    {
        "content": "<p>I'm unclear what the actual language item you're adding is</p>",
        "id": 228831750,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614884932
    },
    {
        "content": "<p>is it <code>BikeshedIntrinsicFrom</code>?</p>",
        "id": 228831766,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614884941
    },
    {
        "content": "<p>The lang items are <code>BikeshedIntrinsicFrom</code> and <code>Assume</code>.</p>",
        "id": 228832211,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1614885085
    },
    {
        "content": "<p>Ok. And what parts of them need to be part of the compiler, rather than a library?</p>",
        "id": 228832445,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614885171
    },
    {
        "content": "<p>sorry, I'm just having trouble finding the relevant parts in the writeup, it's rather long <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 228832466,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614885182
    },
    {
        "content": "<p>Aah, sorry. The code snippet at the top reflects everything that needs to live in libcore. Actual <code>impl</code>s of <code>BikeshedIntrinsicFrom</code> will be generated on-the-fly by the compiler.</p>\n<p>Everything outside of that snippet doesn't need to be in libcore or the compiler.</p>",
        "id": 228832878,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1614885328
    },
    {
        "content": "<p>The associated GitHub issue has been renamed. Renaming this Zulip topic.</p>",
        "id": 228833114,
        "sender_full_name": "triagebot",
        "timestamp": 1614885413
    },
    {
        "content": "<p>triagebot seems confused, it made a new stream instead of renaming lol</p>",
        "id": 228833214,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614885446
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"307537\">@Camelid</span> , I think you implemented it</p>",
        "id": 228833263,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614885475
    },
    {
        "content": "<p>ok I see the relevant bits start at \"Solution\"</p>",
        "id": 228833496,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614885560
    },
    {
        "content": "<p>Ah the issue is that it renamed the topic for every message after the rename, not all the messages.</p>",
        "id": 229016775,
        "sender_full_name": "Noah Lev",
        "timestamp": 1614975002
    },
    {
        "content": "<p>I'll open an issue later.</p>",
        "id": 229016887,
        "sender_full_name": "Noah Lev",
        "timestamp": 1614975042
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Lang.20Item.20for.20Transmutability.20compiler-team.23411/near/229016887\">said</a>:</p>\n<blockquote>\n<p>I'll open an issue later.</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/triagebot/issues/1228\">triagebot#1228</a></p>",
        "id": 229064890,
        "sender_full_name": "Noah Lev",
        "timestamp": 1615006146
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219211\">@Jack Wrenn</span> just curious what the latest is on the status of this.</p>",
        "id": 231840866,
        "sender_full_name": "rylev",
        "timestamp": 1616692535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> I think it needs review by the compiler team?</p>",
        "id": 231845759,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1616694391
    },
    {
        "content": "<p>I can try to help there.</p>",
        "id": 231845989,
        "sender_full_name": "rylev",
        "timestamp": 1616694475
    },
    {
        "content": "<p>From reading the MCP, I have the impression that this is an unstable, experimental implementation to allow us to try out this concept before committing to it in the RFC. Is that correct?</p>",
        "id": 231859535,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1616699544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> that is correct. The reason it was brought up as an MCP is the implementation is unlikely to be trivial and we wanted to make sure the compiler team was onboard before we start introducing some relatively complex machinery. But indeed, this will not be exposed to end users in any kind of stable way. That, of course, will go through the RFC process.</p>",
        "id": 231934814,
        "sender_full_name": "rylev",
        "timestamp": 1616750547
    },
    {
        "content": "<p>A thought for the internal version: maybe skip the <code>Assume</code>, and just have a parameter for each of the things?  (Just as a way to reduce the scope of the conversation.)</p>\n<p>The struct is important for the stabilized thing, so it can be <code>non_exhaustive</code> and have a nicer API, but for the internal thing it would be fine for it to add, remove, or rename parameters as it goes.</p>",
        "id": 232121463,
        "sender_full_name": "scottmcm",
        "timestamp": 1616882685
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span>: Proposal <a href=\"https://github.com/rust-lang/compiler-team/issues/411#issuecomment-809572396\">#411</a> has been seconded, and will be approved in 10 days if no objections are raised.</p>",
        "id": 232305898,
        "sender_full_name": "triagebot",
        "timestamp": 1617039371
    },
    {
        "content": "<p>This proposal has been accepted: <a href=\"https://github.com/rust-lang/compiler-team/issues/411\">#411</a>.</p>",
        "id": 233669013,
        "sender_full_name": "triagebot",
        "timestamp": 1617894251
    }
]