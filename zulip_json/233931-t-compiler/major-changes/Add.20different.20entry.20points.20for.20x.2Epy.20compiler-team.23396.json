[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/compiler-team/issues/396\">Add different entry points for x.py #396</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 221366708,
        "sender_full_name": "triagebot",
        "timestamp": 1609531824
    },
    {
        "content": "<p>previous discussion in <a href=\"#narrow/stream/131828-t-compiler/topic/different.20entry.20points.20for.20x.2Epy\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/different.20entry.20points.20for.20x.2Epy</a> ; if someone with admin access could combine the streams that would be great.</p>",
        "id": 221366751,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609531921
    },
    {
        "content": "<p>I don't think this is describing the steps completely as I was expecting, the experimental nature and starting with std only is missing. It also has same name for all the scripts, whereas I think different names are indeed better.</p>",
        "id": 221366825,
        "sender_full_name": "simulacrum",
        "timestamp": 1609532018
    },
    {
        "content": "<p>I updated the names</p>",
        "id": 221366883,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609532052
    },
    {
        "content": "<p>I'll change it to say I'll implement std first</p>",
        "id": 221366890,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609532067
    },
    {
        "content": "<p>done</p>",
        "id": 221366967,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609532167
    },
    {
        "content": "<p>I don't feel super strongly about the naming, happy to bikeshed that</p>",
        "id": 221366982,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609532191
    },
    {
        "content": "<blockquote>\n<p>It would be great to have smaller commands that are focused on specific groups of contributors</p>\n</blockquote>\n<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> to that, but as an alternative, we could also consider things like <code>x.py bikesheds</code> -- like <code>x.py std-addition</code> that builds and tests the appropriate things for that kind of contribution.</p>",
        "id": 221372922,
        "sender_full_name": "scottmcm",
        "timestamp": 1609541306
    },
    {
        "content": "<p>if you want to use the existing x.py I would rather expand default profiles to have a 'default filter'</p>",
        "id": 221372939,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609541347
    },
    {
        "content": "<p>so that <code>x.py build</code> for <code>profile = \"library\"</code>, which already defaults to only stage 0, would additionally default to a <code>library/std</code> filter</p>",
        "id": 221372945,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609541366
    },
    {
        "content": "<p>and then we really can give people a command to copy paste</p>",
        "id": 221372946,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609541380
    },
    {
        "content": "<p><a href=\"#narrow/stream/131828-t-compiler/topic/the.20rustc-dev-guide.20is.20confusing/near/221141303\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/the.20rustc-dev-guide.20is.20confusing/near/221141303</a></p>",
        "id": 221372950,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609541397
    },
    {
        "content": "<p>What do you mean by 'profile'?</p>",
        "id": 221378606,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1609551711
    },
    {
        "content": "<p>is that something you would set in <code>config.toml</code>?</p>",
        "id": 221378643,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1609551723
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> yes, profiles are what <code>x.py setup</code> sets to have persistent state</p>",
        "id": 221381930,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609558366
    },
    {
        "content": "<p>But you can write them manually too. The profiles currently are compiler, library, codegen, and user. I also plan to add <code>tools</code> once <a href=\"https://github.com/rust-lang/rust/pull/79540\">https://github.com/rust-lang/rust/pull/79540</a> is merged.</p>",
        "id": 221381991,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609558443
    },
    {
        "content": "<p>(zulip doesn't let me edit this late: \"default profiles\" is a typo, it should just say \"profiles\")</p>",
        "id": 221382005,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609558502
    },
    {
        "content": "<p>Head-up! As per <a href=\"https://forge.rust-lang.org/compiler/mcp.html#when-should-major-change-proposals-be-closed\">MCP policy</a>, this MCP will soon be closed for inactivity.</p>\n<p>Should instead the discussion go on, please don't hesitate to add comments here or on <a href=\"https://github.com/rust-lang/compiler-team/issues/396\">github</a>. <br>\nElse, you don't have to do anything, I will take care of closing it soon.</p>",
        "id": 234531962,
        "sender_full_name": "apiraino",
        "timestamp": 1618418186
    },
    {
        "content": "<p>I think we could make <em>some</em> improvement here. I don't know if it necessarily has to be different entrypoints.</p>",
        "id": 234532161,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618418276
    },
    {
        "content": "<p>maybe x.py could be more aggressive about giving warnings/errors if you're doing something that doesn't make sense for the current profile?</p>",
        "id": 234532272,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618418299
    },
    {
        "content": "<p>@oli do you think the architectural choice of putting the wrapper scripts in subdirectories is the main problem with this?</p>",
        "id": 245318368,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625753459
    },
    {
        "content": "<p>My  issue with <code>x.py</code> is really that there's no find project root and execute things from ther.</p>",
        "id": 245318453,
        "sender_full_name": "nagisa",
        "timestamp": 1625753496
    },
    {
        "content": "<p>e.g. I end up in <code>/src/tests</code> and want to <code>x.py test ...</code> and it doesn't work.</p>",
        "id": 245318489,
        "sender_full_name": "nagisa",
        "timestamp": 1625753511
    },
    {
        "content": "<p>So this proposal wouldn't help me in any way.</p>",
        "id": 245318566,
        "sender_full_name": "nagisa",
        "timestamp": 1625753535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> in response to your question -- \"yes\" for me too, I intentionally haven't seconded this. I'm still at least a little uncertain about continuing to expand the flexibility and interfaces to x.py without an owner that can review changes and spend time on it more holistically; I don't really have that ability.</p>",
        "id": 245318574,
        "sender_full_name": "simulacrum",
        "timestamp": 1625753539
    },
    {
        "content": "<p>I feel like it's only going half way. Ideally it would be like git or similar tools, they operate relative to their directory, but are aware of the entire repo</p>",
        "id": 245318656,
        "sender_full_name": "oli",
        "timestamp": 1625753571
    },
    {
        "content": "<p>like... you would just run <code>x.py test</code> in <code>src/test/ui/consts</code> and it would just run the tests in there. and if you do <code>x.py test issue-43.rs</code> it would just run that test in that folder</p>",
        "id": 245318789,
        "sender_full_name": "oli",
        "timestamp": 1625753634
    },
    {
        "content": "<p>similarly for tools and libstd and ...</p>",
        "id": 245318809,
        "sender_full_name": "oli",
        "timestamp": 1625753642
    },
    {
        "content": "<p>I think in theory you're not wrong, but in practice I at least am very hesitant to move us in such a direction with the current maintenance budget on x.py</p>",
        "id": 245318945,
        "sender_full_name": "simulacrum",
        "timestamp": 1625753694
    },
    {
        "content": "<p>does this MCP as written help with that?</p>",
        "id": 245319005,
        "sender_full_name": "oli",
        "timestamp": 1625753723
    },
    {
        "content": "<p>will managing it become easier?</p>",
        "id": 245319028,
        "sender_full_name": "oli",
        "timestamp": 1625753733
    },
    {
        "content": "<p>no, it's why I didn't second it</p>",
        "id": 245319061,
        "sender_full_name": "simulacrum",
        "timestamp": 1625753751
    },
    {
        "content": "<p>I think this MCP is likely to make things harder by adding more modes of use to x.py</p>",
        "id": 245319127,
        "sender_full_name": "simulacrum",
        "timestamp": 1625753770
    },
    {
        "content": "<p>as long as the current workflows are not affected, adding more workflows for no cost but a few scripts that forward to the root with arguments seems ok</p>",
        "id": 245319146,
        "sender_full_name": "oli",
        "timestamp": 1625753784
    },
    {
        "content": "<p>I think strictly wrapper scripts is not too bad, but it's still adding some complexity, and usually we end up wanting some \"special\" behavior in my experience once we start differentiating some entrypoint</p>",
        "id": 245319261,
        "sender_full_name": "simulacrum",
        "timestamp": 1625753842
    },
    {
        "content": "<p>right, feature creep</p>",
        "id": 245319293,
        "sender_full_name": "oli",
        "timestamp": 1625753862
    },
    {
        "content": "<p>followed by maintenance creep</p>",
        "id": 245319305,
        "sender_full_name": "oli",
        "timestamp": 1625753869
    },
    {
        "content": "<p>well... I don't think having a few extra mostly-undocument wrapper scripts lying around is problematic...</p>",
        "id": 245319443,
        "sender_full_name": "oli",
        "timestamp": 1625753918
    },
    {
        "content": "<p>if it makes ppls lives easier, let's do it</p>",
        "id": 245319496,
        "sender_full_name": "oli",
        "timestamp": 1625753942
    },
    {
        "content": "<p>I agree the addition seems low cost at first glance, but it feels like it starts peeking into a can of worms :)</p>",
        "id": 245319886,
        "sender_full_name": "simulacrum",
        "timestamp": 1625754101
    },
    {
        "content": "<p>the alternative is people maintaining random scripts in their IDE that make their workflow effective, which also isn't great. idk, we can always revisit if it becomes a problem?</p>",
        "id": 245321134,
        "sender_full_name": "oli",
        "timestamp": 1625754615
    },
    {
        "content": "<p>could you distribute the wrapper script that does this (just search for x.py) with rustup?</p>",
        "id": 245342282,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1625764138
    },
    {
        "content": "<p>There's already a wrapper script in-tree in src/tools/x. I guess we could distribute it with rustup but that kind of seems like overkill.</p>",
        "id": 245363776,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1625774356
    },
    {
        "content": "<p>Honestly looking back I don't know how useful this idea was, I  like <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>'s idea that x.py is per-directory. But that means people using that currently will have different behavior (I know <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> uses a bunch of different dirs).</p>",
        "id": 245364004,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1625774435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> x test ... works from any directory</p>",
        "id": 245364057,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1625774457
    },
    {
        "content": "<p>I'll make sure to file bugs if I find myself hitting issues with it.</p>",
        "id": 245364251,
        "sender_full_name": "nagisa",
        "timestamp": 1625774538
    },
    {
        "content": "<p>It doesn't do very much, I would be shocked if it had bugs. But anything's possible haha</p>",
        "id": 245364528,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1625774674
    },
    {
        "content": "<p>One thing I’ll mention here:</p>",
        "id": 246585492,
        "sender_full_name": "pnkfelix",
        "timestamp": 1626788616
    },
    {
        "content": "<p>We may want to take a more holistic view of how we might revise the build infrastructure</p>",
        "id": 246585525,
        "sender_full_name": "pnkfelix",
        "timestamp": 1626788629
    },
    {
        "content": "<p>(At least, I saw at least one person respond on a poll about “if you wanted to contribute to rustc, but then opted not to, why?”, with the response “x.py”)</p>",
        "id": 246586420,
        "sender_full_name": "pnkfelix",
        "timestamp": 1626789042
    },
    {
        "content": "<p>I have several times just wanted to use <code>cargo build</code> on a crate and would have loved it if some rustup config scheme would have just given me the right stage0 rustc and it would have \"just worked\" like working on a regular crate</p>",
        "id": 246596350,
        "sender_full_name": "oli",
        "timestamp": 1626791664
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <code>cd compiler/rustc &amp;&amp; cargo +beta build -p rustc_mir</code></p>",
        "id": 246618864,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626800167
    },
    {
        "content": "<p>(or whatever crate you want)</p>",
        "id": 246618882,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626800175
    },
    {
        "content": "<p>That won't integrate with x.py's build cache though</p>",
        "id": 246618929,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626800206
    },
    {
        "content": "<p>If that more-or-less works, caching aside, that'd be great.</p>",
        "id": 246652120,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626815855
    },
    {
        "content": "<p>hmm, so I take it back, it doesn't work because rustc only supports being built with the in-tree standard library</p>",
        "id": 246662920,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626823590
    },
    {
        "content": "<p>cc <a href=\"#narrow/stream/131828-t-compiler/topic/Building.20rustc.20with.20beta.20libstd\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/Building.20rustc.20with.20beta.20libstd</a></p>",
        "id": 246662944,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626823620
    },
    {
        "content": "<p><code>cargo +nightly build</code> should work 90% of the time though (it worked for me just now)</p>",
        "id": 246662962,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626823636
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20different.20entry.20points.20for.20x.2Epy.20compiler-team.23396/near/246585525\">said</a>:</p>\n<blockquote>\n<p>We may want to take a more holistic view of how we might revise the build infrastructure</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> what do you mean by a more holistic view? Were you thinking of doing a survey of how people use x.py or something?</p>",
        "id": 246663232,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626823884
    },
    {
        "content": "<p>I get that x.py is hard to use but we can't fix that without making changes</p>",
        "id": 246663251,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626823904
    },
    {
        "content": "<p>I have another idea: What about making \"rustup\"  rustbuild-aware?  By leaving a <code>rust-toolchain</code> file in tree, saying \"bootstrap\" or something, rustup automatically defers work to x.py, invoking rustbuild from there and dwim.</p>",
        "id": 248688652,
        "sender_full_name": "Charles Lew",
        "timestamp": 1628301289
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> that's <a href=\"https://github.com/rust-lang/rust/issues/76419\">https://github.com/rust-lang/rust/issues/76419</a>, but I don't see how it helps: you still need to configure stages somehow, rustup doesn't know stages exist.</p>",
        "id": 248698311,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1628315111
    },
    {
        "content": "<p>Oh i just meant that instead of putting <code>*.py</code> everywhere, <code>rustup</code> might be able to locate <code>x.py</code> alongside with the workspace <code>Cargo.toml</code>, and rustbuild should be able to infer what to do according to the current directory.</p>",
        "id": 248698484,
        "sender_full_name": "Charles Lew",
        "timestamp": 1628315343
    },
    {
        "content": "<p>Or maybe <code>cargo</code> can do this too, i don't know.</p>",
        "id": 248698537,
        "sender_full_name": "Charles Lew",
        "timestamp": 1628315412
    },
    {
        "content": "<p>I don't see how that could be possible. Rustup does not know what build system you use, for all it knows you could be using make (rust-lang/rust used to a while ago).</p>\n<p>Inferring what to do based on the directory seems vaguely fine to me but I do think it will quickly get confusing if you have different config.tomls in different directories.</p>\n<p>I suggested always using the top level config.toml a while back but that didn't work either since some people were intentionally using per-directory configs.</p>",
        "id": 248715481,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1628341519
    }
]