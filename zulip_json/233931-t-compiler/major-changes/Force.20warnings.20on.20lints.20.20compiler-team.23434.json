[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/compiler-team/issues/434\">Force warnings on lints  #434</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 239602644,
        "sender_full_name": "triagebot",
        "timestamp": 1621521503
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span>: Proposal <a href=\"https://github.com/rust-lang/compiler-team/issues/434#issuecomment-845180970\">#434</a> has been seconded, and will be approved in 10 days if no objections are raised.</p>",
        "id": 239602725,
        "sender_full_name": "triagebot",
        "timestamp": 1621521536
    },
    {
        "content": "<p>Is this sort of lint 'cap-lints', but a 'minimum' level instead of a 'maximum' level?</p>",
        "id": 239603803,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621521927
    },
    {
        "content": "<p>e.g. we enforce that a lint is always at least <code>warn</code> (but it could still be denied/forbidden)</p>",
        "id": 239603857,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621521950
    },
    {
        "content": "<p>on particular lints, I think, right?</p>",
        "id": 239603858,
        "sender_full_name": "simulacrum",
        "timestamp": 1621521950
    },
    {
        "content": "<p>cap-lints is global.</p>",
        "id": 239603868,
        "sender_full_name": "simulacrum",
        "timestamp": 1621521954
    },
    {
        "content": "<p>right</p>",
        "id": 239603879,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621521959
    },
    {
        "content": "<p>Hm, I don't love that this is specific to warnings.</p>",
        "id": 240634801,
        "sender_full_name": "nagisa",
        "timestamp": 1622222381
    },
    {
        "content": "<p>--cap-lints does have sufficient flexibility that adjusting it to support specific lints is possible still. <code>--force-warn</code> doesn't really leave any room for implementing ability to force certain minimum lint levels anymore.</p>",
        "id": 240634964,
        "sender_full_name": "nagisa",
        "timestamp": 1622222454
    },
    {
        "content": "<p>I also find there's a lot overlap in purpose between this and <code>-F</code> and IME our lint permissions story is becoming a huge mess at this point tbh.</p>",
        "id": 240635156,
        "sender_full_name": "nagisa",
        "timestamp": 1622222535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> This <em>is</em> intended to be analogous to forbid.</p>",
        "id": 240636801,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622223320
    },
    {
        "content": "<p>Right, so it would make sense to me if we looked for ways to refactor <code>-F</code>/<code>--forbid</code> to enable specification different minimum lint levels, thus generalizing the flag/mechanism.</p>\n<p>At the very least the one benefit that this would give us that we would avoid having multiple similar in purpose flags each with their own slightly different behaviours and code paths.</p>",
        "id": 240641256,
        "sender_full_name": "nagisa",
        "timestamp": 1622225561
    },
    {
        "content": "<p>I still have no idea what the behaviour of this functionality should be when in combination with <code>--cap-lints</code>. Given its purpose it seems like <code>--force-warn</code> should override <code>--cap-lints</code> -- this is another point that concerns me. What when we want to add something that overrides <code>--force-warn</code>? Yet another flag?</p>",
        "id": 240641677,
        "sender_full_name": "nagisa",
        "timestamp": 1622225732
    },
    {
        "content": "<p>I don't think this is a slippery slope. force-warn exists for two main purposes:<br>\n1) future-compatibility warnings, where even with cap-lints we want to be able to surface/capture them so that people know their dependencies may have an issue. For this, it'd either be enabled for very specific lints or enabled by tools like cargo that may capture and summarize the output in some way, and either way it doesn't need an override.<br>\n2) People who want to apply a lint to all their dependencies to detect specific things. This would mean people are setting it explicitly, so it doesn't need an override.</p>",
        "id": 240644966,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622227305
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span>  I don't really agree with that characterization of the reason <code>--force-warn</code> exists. It is being added for one purpose, and that is <code>cargo fix --edition</code>. </p>\n<p>Future-incompatible warnings already have a \"force\" mechanism to override cap-lints (via <a href=\"https://github.com/rust-lang/rust/blob/0e44ca6dba86faf76daa7b06d9486f23812d4ccf/compiler/rustc_lint_defs/src/lib.rs#L144-L147\">future_breakage</a>). The intent is to slowly roll that out for additional future-incompat warnings, and I don't expect anyone to need to have manual control over that.</p>\n<p><code>--force-warn</code> could certainly be used for blanket controls for all dependencies, but that is not really a use case that I think should be encouraged. Forbid already exists to enforce things.</p>\n<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> , I agree that this is making things complicated and I was initially a little uncomfortable with it. From a CLI perspective, I'm not sure I see how things could be any different (other than changing the names). There needs to be some way to specify the minimum level and lint name. Having two flags to do that (one for errors, the other for warnings) seems reasonable. </p>\n<p>I'm uncertain about the implementation side of things. The current PR doesn't look too complicated, though I agree it is a little strange to have yet another code path. I suspect trying to generalize \"set min level\" would wind up being pretty complicated, too.</p>\n<p>As for <code>--cap-lints</code> interaction, that should probably be resolved, but isn't part of the intended use case (cargo doesn't combine them). I agree <code>force-warn</code> should probably take precedence over <code>cap-lints</code>, it might be good to ensure the PR includes a test for that.</p>",
        "id": 240661777,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622236722
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> That's entirely fair, and I'd agree with your description as being more accurate than mine. Thanks for the correction.</p>",
        "id": 240663092,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622237716
    },
    {
        "content": "<p>In particular, yes, applying rustfixes is much more relevant.</p>",
        "id": 240663116,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622237740
    },
    {
        "content": "<p>I think it's still the case that, because of the intended use cases, it isn't likely that someone would need to override <code>--force-warn</code> rather than just not passing it in the first place.</p>",
        "id": 240663184,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622237767
    },
    {
        "content": "<p>Is there a mechanism that cargo can use to enable a particular set of flags that wouldn't otherwise be available for the end-users?</p>",
        "id": 240663608,
        "sender_full_name": "nagisa",
        "timestamp": 1622238055
    },
    {
        "content": "<p>I think as long as we're confident this is cargo-only we can also do a bare minimum implementation/design work as well as strive to minimize the affect on the rustc implementation that this feature could otherwise have.</p>",
        "id": 240663716,
        "sender_full_name": "nagisa",
        "timestamp": 1622238110
    },
    {
        "content": "<p>There isn't really a way to have \"cargo only\" flags.  We could just leave it hidden and undocumented, but I'm not sure that would be effective long-term.    Another option would be to reject that flag in RUSTFLAGS, but I'm not too comfortable with that, either.</p>",
        "id": 240665243,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622239083
    },
    {
        "content": "<p>This proposal has been accepted: <a href=\"https://github.com/rust-lang/compiler-team/issues/434\">#434</a>.</p>",
        "id": 241374337,
        "sender_full_name": "triagebot",
        "timestamp": 1622717454
    }
]