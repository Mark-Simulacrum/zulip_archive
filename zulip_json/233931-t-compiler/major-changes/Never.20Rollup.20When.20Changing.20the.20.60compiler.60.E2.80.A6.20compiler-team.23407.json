[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/compiler-team/issues/407\">Never Rollup When Changing the <code>compiler</code> Directory #407</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 226406266,
        "sender_full_name": "triagebot",
        "timestamp": 1613407218
    },
    {
        "content": "<p>thought: this could also have a milder alternative: when people create a rollup (via <a href=\"https://bors.rust-lang.org/queue/rust\">https://bors.rust-lang.org/queue/rust</a> I believe is the state of art today), make it obvious to people rolling up that they should prefer rolling up certain PRs but not others.</p>",
        "id": 226406447,
        "sender_full_name": "nagisa",
        "timestamp": 1613407360
    },
    {
        "content": "<p>and possibly warn that they are rolling up PRs that generally should go through queue normally.</p>",
        "id": 226406468,
        "sender_full_name": "nagisa",
        "timestamp": 1613407377
    },
    {
        "content": "<p>I believe we already have a <code>rollup=iffy</code>, so we could piggy-back on that.</p>",
        "id": 226406522,
        "sender_full_name": "nagisa",
        "timestamp": 1613407413
    },
    {
        "content": "<p>The problem is that even reviewers will mark the PRs as rollup=always</p>",
        "id": 226410256,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613409710
    },
    {
        "content": "<p>I don't think the people rolling up are the ones who need to change, they don't have time to look at each PR individually</p>",
        "id": 226410317,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613409731
    },
    {
        "content": "<p>yeah I meant to suggest that we'd apply <code>rollup=iffy</code> by default. Maybe even disallow <code>rollup=always</code> for changes touching <code>compiler/</code>. That would be less strict than forcing <code>rollup=never</code>.</p>",
        "id": 226412493,
        "sender_full_name": "nagisa",
        "timestamp": 1613410877
    },
    {
        "content": "<p>I don't know if the people doing rollups take the <code>iffy</code> flag into account when rolling up, but if they don't then I think the homu/bors interface could be adjusted to make it more apparent that these are iffy.</p>",
        "id": 226412543,
        "sender_full_name": "nagisa",
        "timestamp": 1613410919
    },
    {
        "content": "<p>Do we know what impact this will have on time to land compiler related PR? Is the average daily number of successful bors runs &gt; average daily number of compiler related PRs that land currently?</p>",
        "id": 226412619,
        "sender_full_name": "tm",
        "timestamp": 1613410950
    },
    {
        "content": "<p>My primary concern is that we may get into a situation where we don't have any other choice but to rollup something, because the queue is full but everything that could be rolled up already was.</p>",
        "id": 226412640,
        "sender_full_name": "nagisa",
        "timestamp": 1613410965
    },
    {
        "content": "<p>I'm not familiar enough with the bors queue to say how frequently we run into an issue where we need to roll changes up to have any hope of getting the queue down. <code>rollup=iffy</code> is definitely another choice. It seems that many PRs are being labeled as \"maybe\", and still be rolled up despite (in my very humble opinion) they being very poor candidates for rollup.</p>",
        "id": 226413127,
        "sender_full_name": "rylev",
        "timestamp": 1613411256
    },
    {
        "content": "<p>Encouraging those performing rollups to be cautious with certain PRs would be another positive change IMO</p>",
        "id": 226413219,
        "sender_full_name": "rylev",
        "timestamp": 1613411292
    },
    {
        "content": "<p>Is <code>maybe</code> a separate rollup flag? I only know of <code>never</code>, <code>iffy</code>, default, <code>always</code> (in order from least rollable-up to the more rollable-up PRs)</p>",
        "id": 226413953,
        "sender_full_name": "nagisa",
        "timestamp": 1613411680
    },
    {
        "content": "<p>I think <code>maybe</code> might just be the default value?</p>",
        "id": 226414000,
        "sender_full_name": "nagisa",
        "timestamp": 1613411716
    },
    {
        "content": "<p>maybe is the default yeah</p>",
        "id": 226414028,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1613411733
    },
    {
        "content": "<p>Yes maybe is the default. I'd be curious to hear from those that do rollups on how they treat maybes - is there a general tendy to roll them up, do they check each one, etc.</p>",
        "id": 226414846,
        "sender_full_name": "rylev",
        "timestamp": 1613412193
    },
    {
        "content": "<p>I tend to decide based on what code they touch</p>",
        "id": 226414973,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1613412249
    },
    {
        "content": "<p>If they have a small diff, don't touch too many existing tests, and don't touch code that isn't tested during PR CI, I roll them up</p>",
        "id": 226415049,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1613412290
    },
    {
        "content": "<p>Yea it's tough. We've seen small refactorings (simply moving some code from one file to another) impact performance (usually do to inlining changes).</p>",
        "id": 226415365,
        "sender_full_name": "rylev",
        "timestamp": 1613412491
    },
    {
        "content": "<p>I think my thoughts on this MCP are: by default, if <code>compiler</code> code is touched, then it should be <code>rollup=iffy</code>; other changes can stay <code>rollup=maybe</code> by default. But otherwise, the policy around manually changing from to <code>rollup=always</code> stays mostly the same: only in cases where it's obviously not going to affect perf, i.e. doc changes, variable renaming, typos, adding tests (and compiler-touching code can be a bit stricter here; small cleanups in library code might also be okay to be marked as <code>rollup=always</code>).</p>\n<p>This way, the policy around <code>rollup=never</code> stays mostly the same: PRs that have a high likelihood of perf regressions, regressions, high impact, etc. This might be a good compromise between allowing small (3-5 PR) rollups when CI time is strained (where those might be a mix of <code>rollup=iffy</code> and <code>rollup=maybe</code>) (while also ensuring that PRs that really should <em>never</em> be rolled up aren't) and <em>generally</em> preferring compiler-touching code to not be rolled up.</p>",
        "id": 226418142,
        "sender_full_name": "Jack Huey",
        "timestamp": 1613414526
    },
    {
        "content": "<p>Just a little roughly scanned data: In the past 30 days there have been 171 merges (5.7/day). 31 of those were rollups, totaling 347 PRs (487 total PRs this past 30 days). Of the rollups, there were 157 total PRs that touched <code>/compiler/</code> (so roughly 5 compiler PRs per rollup).  </p>\n<p>(This doesn't count beta or stable PRs.)</p>\n<p>My instinct is that it will be difficult to reduce the number of compiler PRs in rollups. There's only going to be more PRs over time, and fewer merge slots per day.</p>",
        "id": 226421280,
        "sender_full_name": "Eric Huss",
        "timestamp": 1613416649
    },
    {
        "content": "<p>Thanks for the data. So ~45% of PRs involved in rollups touch the compiler folder. This certainly would decrease our ability to get through the bors queue. Perhaps we could first experiment with <code>rollup=iffy</code>as <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> has suggested, but my worry would be that those doing rollups would learn to ignore the <code>iffy</code> labelling. </p>\n<p>Perhaps we can come up with ways to more actively encouraging following the <a href=\"https://forge.rust-lang.org/release/rollups.html#selecting-pull-requests\">guidelines</a> for which PRs to include in rollups. For instance, if a PR labeled as \"maybe\" or \"iffy\" contains more than n number of \".rs\" files, we could require that the rollup paricipant actively opt into the \"risky\" rollup and we could specifically mention these PRs in the rollup PR.</p>",
        "id": 226490220,
        "sender_full_name": "rylev",
        "timestamp": 1613467788
    },
    {
        "content": "<p>It's also interesting to note that I mostly see r+ rollup which defaults to <code>rollup=maybe</code> even for changes to documentation or other changes that are IMO very rollup friendly and should be marked <code>rollup=always</code>. Perhaps the entire rollup system is not being used as it was intended and needs some tweaking.</p>",
        "id": 226492410,
        "sender_full_name": "rylev",
        "timestamp": 1613469097
    },
    {
        "content": "<p>My guess is that we can achieve almost anything with high precision by adjusting the interface people creating roll ups use. Right now it's checking a number of boxes and clicking a button. It is pretty easy to ignore the roll-up flag. If we grouped the prs by roll-up status in separate tables that would already make it way more what is safe to roll-up and what should be left alone. Grouping would also allow us to add some brief informational blurbs directly on the roll-up interface.</p>",
        "id": 226493568,
        "sender_full_name": "nagisa",
        "timestamp": 1613469719
    },
    {
        "content": "<p>Basically what I'm trying to say is we should put the responsibility on getting it right (more often) on the tooling not the people using it.</p>",
        "id": 226493746,
        "sender_full_name": "nagisa",
        "timestamp": 1613469789
    },
    {
        "content": "<p>(the other side of this equation is then automatically marking things as iffy ir never)</p>",
        "id": 226493899,
        "sender_full_name": "nagisa",
        "timestamp": 1613469858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span>  <code>r+ rollup</code> is the same as <code>rollup=always</code></p>",
        "id": 226516699,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613484564
    },
    {
        "content": "<p><a href=\"https://forge.rust-lang.org/compiler/reviews.html?highlight=Rollup#rollups\">https://forge.rust-lang.org/compiler/reviews.html?highlight=Rollup#rollups</a></p>",
        "id": 226516827,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613484617
    },
    {
        "content": "<p>Ah the documentation is wrong in another part then:</p>\n<blockquote>\n<p>rollup=maybe: This is the default if you do not specify a rollup status.</p>\n</blockquote>",
        "id": 226516922,
        "sender_full_name": "rylev",
        "timestamp": 1613484679
    },
    {
        "content": "<p>I think it's just worded poorly and referring to <code>r+</code> without a rollup keyword</p>",
        "id": 226517043,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613484740
    },
    {
        "content": "<p>Ok makes sense. We should clarify that.</p>",
        "id": 226517149,
        "sender_full_name": "rylev",
        "timestamp": 1613484785
    },
    {
        "content": "<p>I'm not sure what good next steps are. I've seen PRs marked as <code>r+ rollup</code> that seem in direct contradiction to the guidelines for when to rollup. And it's clear that we're not doing a good job of rolling up because we almost <em>always</em> have at least one rollup regression in performance triage.</p>",
        "id": 226517348,
        "sender_full_name": "rylev",
        "timestamp": 1613484870
    },
    {
        "content": "<p>Note that the prioritization of <code>rollup=never</code> meant that last time I tried <code>rollup=iffy</code> it meant that it took a really long time to get merged, since all the <code>never</code>s went first, and if it wasn't one of those, then the rollup got priority over it.</p>",
        "id": 226553219,
        "sender_full_name": "scottmcm",
        "timestamp": 1613499374
    },
    {
        "content": "<p>I find myself a bit uncertain about how to use the rollup flags</p>",
        "id": 227580571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614164130
    },
    {
        "content": "<p>I feel like we could probably automate the default a lot better by looking at the size of the diff and/or changed files</p>",
        "id": 227580604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614164156
    },
    {
        "content": "<p>My hunch is that some simple heuristics would get us very far</p>",
        "id": 227580668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614164170
    },
    {
        "content": "<p>FYI: I'm going to revisit this to include suggestions based on the feedback so far.</p>",
        "id": 227589809,
        "sender_full_name": "rylev",
        "timestamp": 1614169459
    },
    {
        "content": "<p>So to recap: we have a fundamental conflict of wanting to rollup as much as we can (to get through the queue faster) but to never rollup anything that breaks the build or hurts performance. I think an iterative approach to fixing rollups might be best. Some ideas:</p>\n<ul>\n<li>Logically assign \"rollup=maybe\" PRs 1 point, \"rollup=iffy\" PRs 2 points and \"rollup=always\" PRs zero points only allow 2 points total in each rollup and have bors clearly mark each PR that is not \"rollup=always\" as being \"risky\" in the rollup PR. This could allow easy rollup management by rerunning rollups without the risky PRs. </li>\n<li>Default all PRs that are not explicitly marked with some rollup directive to \"rollup=iffy\" if they meet one of the following requirements:<ul>\n<li>diffs larger than 10 lines in either compiler or bootstrap</li>\n<li>diffs larger than 500 lines (no matter if they touch compiler or not)</li>\n<li>We should add more over time</li>\n</ul>\n</li>\n</ul>",
        "id": 227778712,
        "sender_full_name": "rylev",
        "timestamp": 1614264721
    },
    {
        "content": "<blockquote>\n<p>diffs larger than 10 lines in either compiler or bootstrap</p>\n</blockquote>\n<p>I don't think <em>any</em> heuristic for bootstrap can be accurate - half the time it's fixing typos, and the other half one-line changes have enormous impact: <a href=\"https://github.com/rust-lang/rust/pull/81214\">https://github.com/rust-lang/rust/pull/81214</a></p>",
        "id": 227779136,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614264867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> that's true though this is only for PRs where an explicit rollup status was not specified. In the case of only changing typos, the hope is that the reviewer explicitly marks it for rollup.</p>",
        "id": 227780200,
        "sender_full_name": "rylev",
        "timestamp": 1614265267
    },
    {
        "content": "<p>sure, I guess I just don't think the heuristic will have any benefit over the reviewer's judgement</p>",
        "id": 227780255,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614265292
    },
    {
        "content": "<p>usually when I leave out a status, it's because I mean <code>rollup=maybe</code></p>",
        "id": 227780357,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614265327
    },
    {
        "content": "<p>In my experience performance changes in libstd are almost universally very small PRs.</p>",
        "id": 227788166,
        "sender_full_name": "nagisa",
        "timestamp": 1614268122
    },
    {
        "content": "<p>Ok so you're saying that you don't believe any heuristics will be able to better judge whether a PR should be <code>rollup=maybe</code> vs <code>rollup=iffy</code>?</p>",
        "id": 227904280,
        "sender_full_name": "rylev",
        "timestamp": 1614332786
    },
    {
        "content": "<p>Having better metrics on this would help. We should be tracking how often rollups fail (either fail to build) or have performance regressions of some sort and ideally we could track it back to the PR that caused this and how that PR was labeled (rollup=always, rollup=maybe, etc.). It would be nice to know how often a PR labeled rollup=$label causes a failure.</p>",
        "id": 227904458,
        "sender_full_name": "rylev",
        "timestamp": 1614332898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224872\">rylev</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Never.20Rollup.20When.20Changing.20the.20.60compiler.60.E2.80.A6.20compiler-team.23407/near/227904280\">said</a>:</p>\n<blockquote>\n<p>Ok so you're saying that you don't believe any heuristics will be able to better judge whether a PR should be <code>rollup=maybe</code> vs <code>rollup=iffy</code>?</p>\n</blockquote>\n<p>specifically for <code>src/bootstrap</code>, yes</p>",
        "id": 227936029,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614350100
    },
    {
        "content": "<p>When rollups fail because of a particular PR is the rollup status of that PR changed? Presumably if a PR causes a rollup build to fail, it should be labeled at least <code>rollup=iffy</code>, no?</p>",
        "id": 228429683,
        "sender_full_name": "rylev",
        "timestamp": 1614699290
    },
    {
        "content": "<p>the problem is that we don't know that automatically, so it would need to be done manually. Right now, a comment is left on the PR and it is unassigned</p>",
        "id": 228430841,
        "sender_full_name": "oli",
        "timestamp": 1614699681
    },
    {
        "content": "<p>Anecdotally I would say that these PRs aren't more likely to fail future rollups, but... I guess I could measure that by looking at the history of some rollups</p>",
        "id": 228430962,
        "sender_full_name": "oli",
        "timestamp": 1614699722
    },
    {
        "content": "<p>I'd like to do an analysis of what rollupm status failed PRs received and how likely they are to fail future PRs.</p>",
        "id": 228437350,
        "sender_full_name": "rylev",
        "timestamp": 1614701828
    },
    {
        "content": "<p>Some interesting patterns I've seen:</p>\n<ul>\n<li>Rollups that fail are retried with new PRs (instead of simply removing the failed PR and trying again). This sometimes leads to the new rollup failing due to the newly introduced PR. Shouldn't we simply remove the failed PR and try again? It seems that when doing so the rollup basically always succeeds.</li>\n<li>I have noticed that anecdotally (this info is very hard to gather programmatically) that PRs that fail due tend to fail again (and then eventually succeed)</li>\n</ul>",
        "id": 228572846,
        "sender_full_name": "rylev",
        "timestamp": 1614769073
    },
    {
        "content": "<p>Some concrete suggestions:</p>\n<ul>\n<li>Close this MCP - this has turned into a general \"improve rollups\" discussion which is a larger discussion than the original MCP was meant for.</li>\n<li>Add statistics gathering to bors:<ul>\n<li>Give each rollup status a \"risk\" point value and start tracking how many points each rollup has </li>\n</ul>\n</li>\n<li>Track the following questions:<ul>\n<li>Are higher risk rollups more likely to fail?</li>\n<li>What is a point value where the likelihood of failure reaches an acceptable level?</li>\n</ul>\n</li>\n</ul>",
        "id": 228573911,
        "sender_full_name": "rylev",
        "timestamp": 1614769612
    },
    {
        "content": "<p>We can take start here and then improve from there. In particular, I think it would be useful to better track that a PR has failed bors before. Those PRs should most likely be automatically labeled as at least rollup=iffy.</p>",
        "id": 228574010,
        "sender_full_name": "rylev",
        "timestamp": 1614769679
    },
    {
        "content": "<p>(I've closed the MCP issue)</p>",
        "id": 228577887,
        "sender_full_name": "rylev",
        "timestamp": 1614771913
    }
]