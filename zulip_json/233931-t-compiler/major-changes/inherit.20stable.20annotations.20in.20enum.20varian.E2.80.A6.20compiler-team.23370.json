[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/compiler-team/issues/370\">inherit stable annotations in enum variants and field items #370</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 213300886,
        "sender_full_name": "triagebot",
        "timestamp": 1602687348
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span>: Proposal <a href=\"https://github.com/rust-lang/compiler-team/issues/370#issuecomment-708458205\">#370</a> has been seconded, and will be approved in 10 days if no objections are raised.</p>",
        "id": 213300895,
        "sender_full_name": "triagebot",
        "timestamp": 1602687353
    },
    {
        "content": "<blockquote>\n<p>it is quite unusual to have a stable struct/enum with public fields that are unstable</p>\n</blockquote>\n<p>It used to be <em>very</em> common to have a public enum with an unstable variant, but thankfully <code>#[non_exhaustive]</code> has removed essentially all of those.</p>",
        "id": 213310018,
        "sender_full_name": "scottmcm",
        "timestamp": 1602690459
    },
    {
        "content": "<p>As an example of a case where I could see wanting unstable-in-stable, I've pondered adding <a href=\"https://llvm.org/docs/Atomics.html#unordered\">Unordered</a> to <code>sync::atomic::Ordering</code>, which would probably want to be unstable for a while.</p>\n<p>So I like this for reduced annotation burden, but it would be nice to have a \"reviewer checklist of things to look for in PRs adding something that's supposed to be unstable\" somewhere.</p>",
        "id": 213310952,
        "sender_full_name": "scottmcm",
        "timestamp": 1602690825
    },
    {
        "content": "<p>/me has long wanted a bot that tells me \"hey you're adding X Y Z to stable surface area\"</p>",
        "id": 213329701,
        "sender_full_name": "simulacrum",
        "timestamp": 1602698559
    },
    {
        "content": "<p><a href=\"https://github.com/rust-dev-tools/rust-semverver/\">https://github.com/rust-dev-tools/rust-semverver/</a></p>",
        "id": 213329840,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602698618
    },
    {
        "content": "<p>might be painful to get it to work with bootstrap though</p>",
        "id": 213329880,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602698637
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> one note -- we recently had a conversation about mcps and how contentious ones would be better approved via FCP rather than the \"Seconding\" process. I think there has certainly been enough back and forth here for that to be merited here.</p>",
        "id": 213359911,
        "sender_full_name": "simulacrum",
        "timestamp": 1602715712
    },
    {
        "content": "<p>(Though I am personally fine with this)</p>",
        "id": 213359921,
        "sender_full_name": "simulacrum",
        "timestamp": 1602715720
    },
    {
        "content": "<p>This proposal has been accepted: <a href=\"https://github.com/rust-lang/compiler-team/issues/370\">#370</a>.</p>",
        "id": 215723767,
        "sender_full_name": "triagebot",
        "timestamp": 1604588711
    }
]