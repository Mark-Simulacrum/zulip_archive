[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/compiler-team/issues/453\">Add <code>TyKind::Const</code> and remove <code>GenericArgKind::Const</code> #453</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 248479604,
        "sender_full_name": "triagebot",
        "timestamp": 1628171508
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"326189\">@jknodt</span></p>",
        "id": 248479689,
        "sender_full_name": "oli",
        "timestamp": 1628171533
    },
    {
        "content": "<blockquote>\n<p>The order of constants coming after types in generic arguments is already being removed, this makes it truly irrelevant.</p>\n</blockquote>\n<p>I don't think this is really true <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> we still have 2 kinds of parameters, one accepting all types except <code>TyKind::Const</code> and one accepting only <code>TyKind::Const</code></p>",
        "id": 248480574,
        "sender_full_name": "lcnr",
        "timestamp": 1628171940
    },
    {
        "content": "<p>behind a feature gate, right?</p>",
        "id": 248480964,
        "sender_full_name": "oli",
        "timestamp": 1628172103
    },
    {
        "content": "<blockquote>\n<p>Treating them the same requires less duplication of logic</p>\n</blockquote>\n<p>do you have some concrete ideas where we can simplify the logic thanks to this change? Thinking about the areas I am working on rn, I don't see how this change would have a meaningful impact there</p>",
        "id": 248481048,
        "sender_full_name": "lcnr",
        "timestamp": 1628172126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20.60TyKind.3A.3AConst.60.20and.20remove.20.60GenericAr.E2.80.A6.20compiler-team.23453/near/248480964\">said</a>:</p>\n<blockquote>\n<p>behind a feature gate, right?</p>\n</blockquote>\n<p>loosening the order restriction is behind a feature gate rn (and ready for stabilization afaik, it's just that noone pushed for it)</p>",
        "id": 248481165,
        "sender_full_name": "lcnr",
        "timestamp": 1628172199
    },
    {
        "content": "<p>having two different kind of parameters (types <code>T</code> and consts <code>const N: usize</code>) does not depend on the order of params, which is my concern here</p>",
        "id": 248481345,
        "sender_full_name": "lcnr",
        "timestamp": 1628172272
    },
    {
        "content": "<blockquote>\n<p>It feels very neat from a type system perspective</p>\n</blockquote>\n<p>the way I see this is that types are values of the kind <code>Type</code> while consts are values of their type. So unless we can use type to represent kinds containing the kind <code>Type</code>. I don't see much theoretical niceness from this change as long as <code>TyKind</code> can only represent the kind <code>Type</code> (and values with this change)</p>",
        "id": 248482535,
        "sender_full_name": "lcnr",
        "timestamp": 1628172777
    },
    {
        "content": "<p>do you also want to introduce <code>TyKind::Lifetime</code>? seems like that has similar tradeoffs</p>",
        "id": 248482851,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1628172931
    },
    {
        "content": "<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues/87648\">#87648</a> would not have to add a second comparison scheme at all</li>\n<li>The following uses of <code>GenericArgKind::Const</code> are an almost literal copy of the <code>::Type</code> arm or would trivially be handled by the <code>::Type</code> arm<br>\n    * <a href=\"https://github.com/rust-lang/rust/blob/e21e1d6a417330af5f4693004230fd0efdf9445a/compiler/rustc_infer/src/infer/canonical/query_response.rs#L278\">https://github.com/rust-lang/rust/blob/e21e1d6a417330af5f4693004230fd0efdf9445a/compiler/rustc_infer/src/infer/canonical/query_response.rs#L278</a><br>\n    * <a href=\"https://github.com/rust-lang/rust/blob/e21e1d6a417330af5f4693004230fd0efdf9445a/compiler/rustc_infer/src/infer/canonical/query_response.rs#L576\">https://github.com/rust-lang/rust/blob/e21e1d6a417330af5f4693004230fd0efdf9445a/compiler/rustc_infer/src/infer/canonical/query_response.rs#L576</a><br>\n    * <a href=\"https://github.com/rust-lang/rust/blob/e21e1d6a417330af5f4693004230fd0efdf9445a/compiler/rustc_infer/src/infer/outlives/verify.rs#L199\">https://github.com/rust-lang/rust/blob/e21e1d6a417330af5f4693004230fd0efdf9445a/compiler/rustc_infer/src/infer/outlives/verify.rs#L199</a><br>\n    * <a href=\"https://github.com/rust-lang/rust/blob/e21e1d6a417330af5f4693004230fd0efdf9445a/compiler/rustc_infer/src/infer/outlives/verify.rs#L63\">https://github.com/rust-lang/rust/blob/e21e1d6a417330af5f4693004230fd0efdf9445a/compiler/rustc_infer/src/infer/outlives/verify.rs#L63</a><br>\n    * <a href=\"https://github.com/rust-lang/rust/blob/e21e1d6a417330af5f4693004230fd0efdf9445a/compiler/rustc_middle/src/ty/relate.rs#L748\">https://github.com/rust-lang/rust/blob/e21e1d6a417330af5f4693004230fd0efdf9445a/compiler/rustc_middle/src/ty/relate.rs#L748</a></li>\n<li><code>ConstKind::Infer</code>, <code>::Bound</code> and <code>::Param</code> could probably just become the <code>TyKind</code> equivalents, which accounts for all of the other uses of <code>GenericArgKind::Const</code> that aren't just ignoring the argument or are just empty arms.</li>\n</ul>",
        "id": 248483882,
        "sender_full_name": "oli",
        "timestamp": 1628173360
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20.60TyKind.3A.3AConst.60.20and.20remove.20.60GenericAr.E2.80.A6.20compiler-team.23453/near/248482851\">said</a>:</p>\n<blockquote>\n<p>do you also want to introduce <code>TyKind::Lifetime</code>? seems like that has similar tradeoffs</p>\n</blockquote>\n<p>lifetimes are different, they don't participate in trait resolution or codegen</p>",
        "id": 248483971,
        "sender_full_name": "oli",
        "timestamp": 1628173391
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20.60TyKind.3A.3AConst.60.20and.20remove.20.60GenericAr.E2.80.A6.20compiler-team.23453/near/248482535\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>It feels very neat from a type system perspective</p>\n</blockquote>\n<p>the way I see this is that types are values of the kind <code>Type</code> while consts are values of their type. So unless we can use type to represent kinds containing the kind <code>Type</code>. I don't see much theoretical niceness from this change as long as <code>TyKind</code> can only represent the kind <code>Type</code> (and values with this change)</p>\n</blockquote>\n<p>hmm... Maybe I'm too much of a fan of <code>typenum</code>, but being able to encode arbitrary constants in the type system kind of already makes them types. This just makes it first class.</p>",
        "id": 248484284,
        "sender_full_name": "oli",
        "timestamp": 1628173527
    },
    {
        "content": "<p>hmm, I agree that type and constant arguments often end up with exactly the same treatment, and I was also annoyed by that in the past. Didn't think about these cases</p>",
        "id": 248486735,
        "sender_full_name": "lcnr",
        "timestamp": 1628174554
    },
    {
        "content": "<p>another example for stuff like that are <code>WellFormed</code> predicates, which do contain a <code>GenericArg</code> but are noops for lifetimes</p>",
        "id": 248486787,
        "sender_full_name": "lcnr",
        "timestamp": 1628174579
    },
    {
        "content": "<p>I would like to have some kind of <code>enum TyOrConst</code> as a <code>GenericArgKind</code> (or at least try that out)</p>",
        "id": 248486869,
        "sender_full_name": "lcnr",
        "timestamp": 1628174624
    },
    {
        "content": "<p>having <code>TyKind::Const</code> still doesn't feel great for me though <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> parts of this might be me disliking change though</p>",
        "id": 248487392,
        "sender_full_name": "lcnr",
        "timestamp": 1628174818
    },
    {
        "content": "<blockquote>\n<p>kind of already makes them types</p>\n</blockquote>\n<p>that's probably where our mental models differ, because for me, even if you can encode integers as types, their kind is still <code>Type</code>. Using associated consts you can convert these types into arbitrary integers but imo requiring this step matters</p>",
        "id": 248487979,
        "sender_full_name": "lcnr",
        "timestamp": 1628175010
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<blockquote>\n<p>People may get motivated to push for features like <code>impl Trait for 42 {}</code> or <code>let x: 42</code> ZST types</p>\n</blockquote>\n<p>now that's a reason for me to reject this MCP :p</p>\n</div></div>",
        "id": 248489010,
        "sender_full_name": "lcnr",
        "timestamp": 1628175396
    },
    {
        "content": "<p>Re: spoiler, I would expect people to ask for that regardless of this change <em>and</em> this change wouldn't have any user visible changes. We could in theory change back and forth every other release to use the current approach or the unified approach and <em>nothing should change</em> other than how annoyed us as maintainers would be, right?</p>",
        "id": 248494185,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1628177546
    },
    {
        "content": "<p>I'm in favor of the change (although I don't mind too much either way enough to go running head first into a flamewar <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>)</p>",
        "id": 248494304,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1628177608
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20.60TyKind.3A.3AConst.60.20and.20remove.20.60GenericAr.E2.80.A6.20compiler-team.23453/near/248487979\">said</a>:</p>\n<blockquote>\n<p>that's probably where our mental models differ, because for me, even if you can encode integers as types, their kind is still <code>Type</code>. Using associated consts you can convert these types into arbitrary integers but imo requiring this step matters</p>\n</blockquote>\n<p>yea... my model literally considers consts to be a type, and the fact that you can encode them is just \"proof\"</p>",
        "id": 248496100,
        "sender_full_name": "oli",
        "timestamp": 1628178408
    },
    {
        "content": "<p>I am aware how close I am in \"everything is a tuple\" territory, but... I like constants, a lot. They are the reason I work on rustc lol</p>",
        "id": 248496211,
        "sender_full_name": "oli",
        "timestamp": 1628178460
    },
    {
        "content": "<p>I have got an idea for some time that maybe there could be a user-facing const generic type? Then the syntax could be lowered into something around this.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[lang = </span><span class=\"s\">\"phantom_const\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">PhantomConst</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">V</span>: <span class=\"nc\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">V</span>: <span class=\"nc\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">PhantomConst</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"k\">type</span> <span class=\"nc\">Type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">VALUE</span>: <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 248567152,
        "sender_full_name": "Charles Lew",
        "timestamp": 1628220595
    },
    {
        "content": "<p>Yea, I would like to keep this out of user-facing space for now, but <code>PhantomConst</code> is certainly one good (possibly the best) way to represent it</p>",
        "id": 248590968,
        "sender_full_name": "oli",
        "timestamp": 1628243759
    },
    {
        "content": "<blockquote>\n<p>Const generics are (modulo syntax-level features) essentially equivalent to types </p>\n</blockquote>\n<p>I, uh, have a <em>lot</em> of disagreement with that statement.^^</p>",
        "id": 248608822,
        "sender_full_name": "RalfJ",
        "timestamp": 1628255802
    },
    {
        "content": "<p>types classify values. const generics don't. so really they are fundamentally completely different beasts.</p>",
        "id": 248608852,
        "sender_full_name": "RalfJ",
        "timestamp": 1628255820
    },
    {
        "content": "<p>if Rust had dependent types I might agree with statements saying that types are basically also just constants (of type <code>Type</code>), but that would lead to a pretty different system I think</p>",
        "id": 248608977,
        "sender_full_name": "RalfJ",
        "timestamp": 1628255875
    },
    {
        "content": "<p>How is <code>PhantomConst</code> different from having constants directly as types?</p>",
        "id": 248612186,
        "sender_full_name": "oli",
        "timestamp": 1628257330
    },
    {
        "content": "<p>how does it have anything to do with that?</p>",
        "id": 248612285,
        "sender_full_name": "RalfJ",
        "timestamp": 1628257382
    },
    {
        "content": "<p>\"having constant as types\" just errors in my mental parser, it's a category error for me</p>",
        "id": 248612321,
        "sender_full_name": "RalfJ",
        "timestamp": 1628257399
    },
    {
        "content": "<p>so I cant even really make sense of the question^^</p>",
        "id": 248612334,
        "sender_full_name": "RalfJ",
        "timestamp": 1628257405
    },
    {
        "content": "<p>\"having types as constants\" would make a lot more sense :D</p>",
        "id": 248612356,
        "sender_full_name": "RalfJ",
        "timestamp": 1628257422
    },
    {
        "content": "<p>a constant is a <em>value</em>, a type is not...</p>",
        "id": 248612481,
        "sender_full_name": "RalfJ",
        "timestamp": 1628257480
    },
    {
        "content": "<p>a type describes sets of values (or more complicated things)</p>",
        "id": 248612529,
        "sender_full_name": "RalfJ",
        "timestamp": 1628257507
    },
    {
        "content": "<p>a type has invariants (validity invariant, safety invariant) and a public API</p>",
        "id": 248612567,
        "sender_full_name": "RalfJ",
        "timestamp": 1628257522
    },
    {
        "content": "<p>constants dont do any of that</p>",
        "id": 248612576,
        "sender_full_name": "RalfJ",
        "timestamp": 1628257529
    },
    {
        "content": "<p>Just like the unit type and its value are essentially interchangeable, so would a constant and its ZST type be</p>",
        "id": 248612747,
        "sender_full_name": "oli",
        "timestamp": 1628257623
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20.60TyKind.3A.3AConst.60.20and.20remove.20.60GenericAr.E2.80.A6.20compiler-team.23453/near/248612285\">said</a>:</p>\n<blockquote>\n<p>how does it have anything to do with that?</p>\n</blockquote>\n<p>it is exactly what I'm proposing, just without the language-level representation</p>",
        "id": 248612891,
        "sender_full_name": "oli",
        "timestamp": 1628257690
    },
    {
        "content": "<p>I just want the compiler to process it as such</p>",
        "id": 248612915,
        "sender_full_name": "oli",
        "timestamp": 1628257701
    },
    {
        "content": "<p>all possible language things are interesting, but not relevant here. I just want the compiler to internally not differentiate constants and types beyond the fact that it essentially now has a built in <code>PhantomConst</code> type</p>",
        "id": 248613029,
        "sender_full_name": "oli",
        "timestamp": 1628257762
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20.60TyKind.3A.3AConst.60.20and.20remove.20.60GenericAr.E2.80.A6.20compiler-team.23453/near/248612747\">said</a>:</p>\n<blockquote>\n<p>Just like the unit type and its value are essentially interchangeable, so would a constant and its ZST type be</p>\n</blockquote>\n<p>uh... no they are not,  they are completely different things^^</p>",
        "id": 248615484,
        "sender_full_name": "RalfJ",
        "timestamp": 1628258924
    },
    {
        "content": "<p>even with a dependent type lense this statement makes just no sense at all IMO</p>",
        "id": 248615501,
        "sender_full_name": "RalfJ",
        "timestamp": 1628258932
    },
    {
        "content": "<p>the term <code>tt</code> has type <code>()</code>, the term <code>()</code> has type <code>Type</code></p>",
        "id": 248615532,
        "sender_full_name": "RalfJ",
        "timestamp": 1628258948
    },
    {
        "content": "<p>they are not the same thing by even the most extreme stretch of the imagination</p>",
        "id": 248615549,
        "sender_full_name": "RalfJ",
        "timestamp": 1628258957
    },
    {
        "content": "<p>I have a good imagination and a really good lack of PLT</p>",
        "id": 248615772,
        "sender_full_name": "oli",
        "timestamp": 1628259070
    },
    {
        "content": "<p>of course once you have things of kind <code>const → type</code>, you can \"inject\" constants into types. we can do the same with lifetimes though:</p>\n<div class=\"codehilite\"><pre><span></span><code>struct PhantomLifetime&lt;&#39;a&gt;(&amp;&#39;a ());\n</code></pre></div>",
        "id": 248615793,
        "sender_full_name": "RalfJ",
        "timestamp": 1628259086
    },
    {
        "content": "<p>so, consts and types are the same thing only as much as lifetimes and types are the same thing</p>",
        "id": 248615802,
        "sender_full_name": "RalfJ",
        "timestamp": 1628259097
    },
    {
        "content": "<p>lifetimes don't participate in trait resolution or codegen</p>",
        "id": 248615892,
        "sender_full_name": "oli",
        "timestamp": 1628259125
    },
    {
        "content": "<p>(and usually when A injects into B we dont say they are the same thing)</p>",
        "id": 248615914,
        "sender_full_name": "RalfJ",
        "timestamp": 1628259138
    },
    {
        "content": "<p>constant and type parameters behave the same, lifetime parameters are different</p>",
        "id": 248615941,
        "sender_full_name": "oli",
        "timestamp": 1628259153
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20.60TyKind.3A.3AConst.60.20and.20remove.20.60GenericAr.E2.80.A6.20compiler-team.23453/near/248615892\">said</a>:</p>\n<blockquote>\n<p>lifetimes don't participate in trait resolution or codegen</p>\n</blockquote>\n<p>I dont see how thats even relevant</p>",
        "id": 248615942,
        "sender_full_name": "RalfJ",
        "timestamp": 1628259154
    },
    {
        "content": "<p>also AFAIK trait bounds like <code>Foo&lt;'a, 'a&gt;</code> are possible and then they to participate in trait resolution</p>",
        "id": 248615966,
        "sender_full_name": "RalfJ",
        "timestamp": 1628259171
    },
    {
        "content": "<p>or <code>Foo&lt;'static&gt;</code></p>",
        "id": 248615973,
        "sender_full_name": "RalfJ",
        "timestamp": 1628259174
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20.60TyKind.3A.3AConst.60.20and.20remove.20.60GenericAr.E2.80.A6.20compiler-team.23453/near/248615941\">said</a>:</p>\n<blockquote>\n<p>constant and type parameters behave the same, lifetime parameters are different</p>\n</blockquote>\n<p>your notion of \"behave\" must be radically different from mine^^</p>",
        "id": 248616005,
        "sender_full_name": "RalfJ",
        "timestamp": 1628259191
    },
    {
        "content": "<p>if this is just an internal thing that a user will never ever see, maybe its okay -- but you should still be aware that your terminology is extremely non-standard and confusing</p>",
        "id": 248616086,
        "sender_full_name": "RalfJ",
        "timestamp": 1628259226
    },
    {
        "content": "<p>to me const generics are just prettier <code>typenum</code>, which is fully defined in the type system</p>",
        "id": 248616090,
        "sender_full_name": "oli",
        "timestamp": 1628259231
    },
    {
        "content": "<p>all the confusing stuff came in this thread once other things got munched into my internal refactoring idea <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 248616241,
        "sender_full_name": "oli",
        "timestamp": 1628259289
    },
    {
        "content": "<p>the issue also already lists several things that clearly show that consts are not types -- like the various bits of the code that need to add nonsense <code>ty::Const</code> arms to their <code>match</code>es</p>",
        "id": 248616311,
        "sender_full_name": "RalfJ",
        "timestamp": 1628259319
    },
    {
        "content": "<p>we already have such nonsense arms for the other magic internal <code>TyKind</code> variants</p>",
        "id": 248616382,
        "sender_full_name": "oli",
        "timestamp": 1628259363
    },
    {
        "content": "<p>and it'll mostly be just another arm to that fallback list</p>",
        "id": 248616432,
        "sender_full_name": "oli",
        "timestamp": 1628259376
    },
    {
        "content": "<p>Rust has 3 \"kinds of terms\" in the type system: type, lifetime, const. We currently treat them nicely separately so we get some type safety (in the meta language) when dealing with them. I think you are saying that meta-level type safety is not buying us enough and we should just give up on it and make the type system \"untyped\" (or at least \"less typed\") from the meta language perspective.</p>",
        "id": 248616499,
        "sender_full_name": "RalfJ",
        "timestamp": 1628259414
    },
    {
        "content": "<p>but there is no principled way in which this can be justified IMO, and the fact that lifetimes are still different is an ad-hoc implementation artifact, nothing meaningful</p>",
        "id": 248616570,
        "sender_full_name": "RalfJ",
        "timestamp": 1628259452
    },
    {
        "content": "<p>(by meta language here I mean the host rustc that is implementing the type system but itself written in Rust as well)</p>",
        "id": 248616674,
        "sender_full_name": "RalfJ",
        "timestamp": 1628259503
    },
    {
        "content": "<p>we already have such \"optimizations\". For all intents and purposes <code>bool</code> is just <code>enum bool { true, false }</code>, but we keep it as a custom type</p>",
        "id": 248616752,
        "sender_full_name": "oli",
        "timestamp": 1628259556
    },
    {
        "content": "<p>the compiler could use more general representations of lots of things. I'm essentially proposing to move <code>typenum</code> types into a custom <code>TyKind</code> variant to make some things simpler in the compiler</p>",
        "id": 248616911,
        "sender_full_name": "oli",
        "timestamp": 1628259631
    },
    {
        "content": "<p>In Haskell there are higher-ranked types. Basically type parameters have a \"rank\" that determines what kind of thing you can put in the type parameter. The rank <code>*</code> corresponds to a regular type like <code>Option&lt;u8&gt;</code>, while say <code>* -&gt; *</code> corresponds to a type constructor like <code>Option</code>. Constraints (where clauses) also have a rank (<code>GHC.Prim.Constraint</code>). And finally types are valid ranks. This basically corresponds to const generics in rust.</p>",
        "id": 248616924,
        "sender_full_name": "bjorn3",
        "timestamp": 1628259641
    },
    {
        "content": "<p>I think <code>*</code> and <code>* → *</code> and the like are usually called \"kinds\", not \"ranks\"</p>",
        "id": 248616983,
        "sender_full_name": "RalfJ",
        "timestamp": 1628259674
    },
    {
        "content": "<p>(and that's how I used the term \"kind\" as well above)</p>",
        "id": 248617007,
        "sender_full_name": "RalfJ",
        "timestamp": 1628259688
    },
    {
        "content": "<p>I think you are right. My bad.</p>",
        "id": 248617037,
        "sender_full_name": "bjorn3",
        "timestamp": 1628259700
    },
    {
        "content": "<p>haskell <code>*</code> corresponds to what I called <code>type</code>/<code>Type</code> above</p>",
        "id": 248617041,
        "sender_full_name": "RalfJ",
        "timestamp": 1628259702
    },
    {
        "content": "<p>and no they dont correspond to const generics at all</p>",
        "id": 248617077,
        "sender_full_name": "RalfJ",
        "timestamp": 1628259722
    },
    {
        "content": "<p>const generics would be of kind <code>const</code></p>",
        "id": 248617126,
        "sender_full_name": "RalfJ",
        "timestamp": 1628259728
    },
    {
        "content": "<p>and e.g. the array type constructor would be of kind <code>* -&gt; const -&gt; *</code></p>",
        "id": 248617153,
        "sender_full_name": "RalfJ",
        "timestamp": 1628259739
    },
    {
        "content": "<p>i.e., const generics introduce a new \"primitive kind\" besides <code>*</code></p>",
        "id": 248617181,
        "sender_full_name": "RalfJ",
        "timestamp": 1628259755
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20.60TyKind.3A.3AConst.60.20and.20remove.20.60GenericAr.E2.80.A6.20compiler-team.23453/near/248617126\">said</a>:</p>\n<blockquote>\n<p>const generics would be of kind <code>const</code></p>\n</blockquote>\n<p>isn't it of kind <em>its type</em></p>",
        "id": 248617191,
        "sender_full_name": "lcnr",
        "timestamp": 1628259760
    },
    {
        "content": "<p>Rust already has two of those: <code>Type</code> and <code>Lifetime</code></p>",
        "id": 248617194,
        "sender_full_name": "RalfJ",
        "timestamp": 1628259762
    },
    {
        "content": "<p>array is <code>* -&gt; usize -&gt; *</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 248617214,
        "sender_full_name": "lcnr",
        "timestamp": 1628259772
    },
    {
        "content": "<p>well if we want to go full dependent types we could describe it like that as well, yes</p>",
        "id": 248617250,
        "sender_full_name": "RalfJ",
        "timestamp": 1628259791
    },
    {
        "content": "<p>I was going to keep a stratification between types and kinds</p>",
        "id": 248617270,
        "sender_full_name": "RalfJ",
        "timestamp": 1628259804
    },
    {
        "content": "<p>that's why I said from the beginning that treating types like a particular kind of consts (namely conts of type <code>Type</code>) makes some theoretic sense</p>",
        "id": 248617532,
        "sender_full_name": "RalfJ",
        "timestamp": 1628259918
    },
    {
        "content": "<p>but not the other way around</p>",
        "id": 248617539,
        "sender_full_name": "RalfJ",
        "timestamp": 1628259921
    },
    {
        "content": "<p>my work week is almost over XD see you all monday. I'll ponder on this a bit</p>",
        "id": 248617831,
        "sender_full_name": "oli",
        "timestamp": 1628260047
    },
    {
        "content": "<p>my weekend just begins, so perfect time to discuss this ;) but I see what you mean</p>",
        "id": 248618097,
        "sender_full_name": "RalfJ",
        "timestamp": 1628260191
    },
    {
        "content": "<p>during the week I just need to work, is the thing...^^</p>",
        "id": 248618131,
        "sender_full_name": "RalfJ",
        "timestamp": 1628260203
    },
    {
        "content": "<p>I'll try to find some time then <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 248619117,
        "sender_full_name": "oli",
        "timestamp": 1628260698
    },
    {
        "content": "<p>So... new plan. I get that constants are not types in PLT. we can rename Ty to Term and do this proposal on the renamed thing</p>",
        "id": 249124895,
        "sender_full_name": "oli",
        "timestamp": 1628696036
    },
    {
        "content": "<p>Would this unification help other than type inference?</p>",
        "id": 249484100,
        "sender_full_name": "Gary Guo",
        "timestamp": 1628987107
    },
    {
        "content": "<p>there is some more duplication, but I haven't checked in detail</p>",
        "id": 249830458,
        "sender_full_name": "oli",
        "timestamp": 1629282226
    },
    {
        "content": "<p>New plan v2: How about we avoid all this unpleasentness and create a <code>TyOrConst</code> (bikesheddable) type that can be <code>Ty</code>, <code>Const</code> or any of the shared inference/placeholder/GenericParam variants and then we remove the shared variants from the structures themselves. This will likely cause a lot of fallout, as anything that actually wants to handle these will need to start using <code>TyOrConst</code>, but it may be worth it, idk?</p>",
        "id": 249830697,
        "sender_full_name": "oli",
        "timestamp": 1629282396
    },
    {
        "content": "<p>I don't know a nice way to do this, so closing this MCP for now</p>",
        "id": 254715682,
        "sender_full_name": "oli",
        "timestamp": 1632494698
    }
]