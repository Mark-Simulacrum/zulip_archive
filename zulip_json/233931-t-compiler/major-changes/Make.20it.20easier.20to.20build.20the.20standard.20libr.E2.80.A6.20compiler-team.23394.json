[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/compiler-team/issues/394\">Make it easier to build the standard library #394</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 221145945,
        "sender_full_name": "triagebot",
        "timestamp": 1609259210
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> the bot works <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 221145950,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609259220
    },
    {
        "content": "<p>so, originally I expected 2. to be the controversial part of this proposal, but after looking at the discussion in <a href=\"https://github.com/rust-lang/rust/pull/76533\">https://github.com/rust-lang/rust/pull/76533</a> again it seems there's concerns about both parts</p>",
        "id": 221146539,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609259672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span>  do you mind expanding on why splitting library/ into a separate workspace means rustc-dep-of-std is necessary (and more necessary than it is now)?</p>",
        "id": 221146599,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609259730
    },
    {
        "content": "<p>What would be the benefit of using <code>git subtree</code>? Just cd'ing to <code>library/</code> should be enough for most users.</p>",
        "id": 221146819,
        "sender_full_name": "bjorn3",
        "timestamp": 1609259918
    },
    {
        "content": "<p>cloning the rust-lang/rust repository takes a while</p>",
        "id": 221146829,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609259931
    },
    {
        "content": "<p>and you have to know that the build process for the standard library is different than the compiler; the main issue is that <code>cargo build</code> in the top level of rust-lang/rust can never work</p>",
        "id": 221146857,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609259960
    },
    {
        "content": "<p>but I think <code>cargo build</code> in rust-lang/library is feasible</p>",
        "id": 221146865,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609259971
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> though, you suggested the subtree</p>",
        "id": 221146984,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609260051
    },
    {
        "content": "<p>Most of the time of cloning is cloning the submodules, which isn't necessary except for the <code>library/stdarch</code> and <code>library/backtrace</code> submodules.</p>",
        "id": 221146987,
        "sender_full_name": "bjorn3",
        "timestamp": 1609260054
    },
    {
        "content": "<p>ah ok I see - it's necessary now because of the unified workspace, but if the workspace were split x.py could be smarter about it</p>",
        "id": 221147035,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609260102
    },
    {
        "content": "<p>Is it allowed to have <code>.gitmodules</code> in a subdirectory by the way?</p>",
        "id": 221147053,
        "sender_full_name": "bjorn3",
        "timestamp": 1609260120
    },
    {
        "content": "<p>/me searches google</p>",
        "id": 221147099,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609260132
    },
    {
        "content": "<p>I think so, but it's weird. I remember it makes <code>git submodule</code> act weirdly.</p>",
        "id": 221147127,
        "sender_full_name": "Laurențiu",
        "timestamp": 1609260158
    },
    {
        "content": "<p>if it's not, we could consider making stdarch and backtrace subtrees too</p>",
        "id": 221147135,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609260161
    },
    {
        "content": "<p>(personally I find subtree a lot easier to understand than submodules)</p>",
        "id": 221147306,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609260277
    },
    {
        "content": "<p>Stdarch has an 8.2MB .git dir.</p>",
        "id": 221147452,
        "sender_full_name": "bjorn3",
        "timestamp": 1609260374
    },
    {
        "content": "<p>you'd have to download that anyway with submodules though, right?</p>",
        "id": 221147511,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609260431
    },
    {
        "content": "<p>there are cases where submodules aren't needed tho</p>",
        "id": 221147653,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1609260541
    },
    {
        "content": "<p>arm-intrinsics.html and x86-intel.xml are 21.8MB together.</p>",
        "id": 221147693,
        "sender_full_name": "bjorn3",
        "timestamp": 1609260569
    },
    {
        "content": "<p>(mostly on CI -- which doesn't use <code>git submodule</code> -- and when you need to interact with the commit history)</p>",
        "id": 221147725,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1609260592
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121055\">Pietro Albini</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Make.20it.20easier.20to.20build.20the.20standard.20libr.E2.80.A6.20compiler-team.23394/near/221147725\">said</a>:</p>\n<blockquote>\n<p>(mostly on CI -- which doesn't use <code>git submodule</code> -- and when you need to interact with the commit history)</p>\n</blockquote>\n<p>how does CI build the compiler without using x.py? x.py runs git submodule</p>",
        "id": 221148897,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609261480
    },
    {
        "content": "<p>and I'd be shocked to see anyone using the git history without running x.py at least once</p>",
        "id": 221148970,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609261534
    },
    {
        "content": "<p>anyway, far bigger than any of those is LLVM:</p>\n<div class=\"codehilite\"><pre><span></span><code>1.1G    .git/modules/src/llvm-project\n</code></pre></div>",
        "id": 221149297,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609261780
    },
    {
        "content": "<p>and that would go away completely with a subtree scheme</p>",
        "id": 221149305,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609261786
    },
    {
        "content": "<p>Don't use a subtree for LLVM!!! That will add the full 1.1GB to the rust-lang/rust repo itself.</p>",
        "id": 221149693,
        "sender_full_name": "bjorn3",
        "timestamp": 1609262047
    },
    {
        "content": "<p>haha, no that's not what I meant</p>",
        "id": 221149705,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609262058
    },
    {
        "content": "<p>if library/ is a subtree, then cloning rust-lang/library doesn't require cloning the llvm submodule</p>",
        "id": 221149718,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609262074
    },
    {
        "content": "<p>It doesn't anyway. It is <code>x.py</code> that clones it. It can easily avoid doing this if you only want to compile libstd. In fact it already avoids it when using prebuilt llvm or when you don't include LLVM in the <code>codegen-backends</code> key of <code>config.toml</code>.</p>",
        "id": 221149859,
        "sender_full_name": "bjorn3",
        "timestamp": 1609262168
    },
    {
        "content": "<p>Hmm, ok - if cargo build works on libstd, you never have to run x.py</p>",
        "id": 221149977,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609262277
    },
    {
        "content": "<p>note that this doesn't work currently because of the unified workspace:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: failed to read `/home/joshua/src/rust/rust2/src/tools/rust-installer/Cargo.toml`\n</code></pre></div>",
        "id": 221150110,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609262396
    },
    {
        "content": "<p>oh excellent, but on <a href=\"https://github.com/rust-lang/rust/pull/76533\">https://github.com/rust-lang/rust/pull/76533</a> it does work except for stdarch and version mismatches</p>",
        "id": 221150210,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609262478
    },
    {
        "content": "<p>I don't remember when it was added, but we should now need the <code>library/backtrace</code> submodule too.</p>",
        "id": 221150336,
        "sender_full_name": "bjorn3",
        "timestamp": 1609262545
    },
    {
        "content": "<p>yeah, let me rebase it</p>",
        "id": 221150367,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609262576
    },
    {
        "content": "<p>You should probably copy the <code>Cargo.lock</code> of the commit you rebase on top of and use it as both <code>Cargo.lock</code> and <code>library/Cargo.lock</code> for the branch. <code>cargo build</code> should then remove all unnecessary entries while keeping all versions intact.</p>",
        "id": 221150494,
        "sender_full_name": "bjorn3",
        "timestamp": 1609262666
    },
    {
        "content": "<p>for now I regenerated the file, I can fix it up later</p>",
        "id": 221150602,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609262755
    },
    {
        "content": "<p>just want to see if this can work</p>",
        "id": 221150608,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609262761
    },
    {
        "content": "<p>ok yes, after rebasing <a href=\"https://github.com/rust-lang/rust/pull/76533\">https://github.com/rust-lang/rust/pull/76533</a> and running <code>git submodule update library/{backtrace,stdarch}</code>, <code>cargo +nightly build</code> works from library/test without going through x.py :)</p>",
        "id": 221150871,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609262934
    },
    {
        "content": "<p>Doesn't <code>std</code> use <code>src/llvm-project/libunwind</code>?</p>",
        "id": 221150905,
        "sender_full_name": "cuviper",
        "timestamp": 1609262970
    },
    {
        "content": "<p>At least optionally</p>",
        "id": 221150910,
        "sender_full_name": "cuviper",
        "timestamp": 1609262976
    },
    {
        "content": "<p>I see <code>feature = llvm-libunwind</code>, but I'm ok with that just not working out of tree</p>",
        "id": 221151001,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609263028
    },
    {
        "content": "<p>Yes, <a href=\"https://github.com/rust-lang/rust/blob/d9a105fdd46c926ae606777a46dd90e5b838f92f/library/unwind/build.rs#L138\">https://github.com/rust-lang/rust/blob/d9a105fdd46c926ae606777a46dd90e5b838f92f/library/unwind/build.rs#L138</a></p>",
        "id": 221151002,
        "sender_full_name": "bjorn3",
        "timestamp": 1609263031
    },
    {
        "content": "<p>There are cases where it is not optional like linux + musl, fuchsia and fortanix.</p>",
        "id": 221151063,
        "sender_full_name": "bjorn3",
        "timestamp": 1609263091
    },
    {
        "content": "<p>if you try to enable it the error isn't <em>great</em> but it's not awful either:</p>\n<div class=\"codehilite\"><pre><span></span><code>  running: &quot;c++&quot; &quot;-O0&quot; &quot;-ffunction-sections&quot; &quot;-fdata-sections&quot; &quot;-fPIC&quot; &quot;-g&quot; &quot;-fno-omit-frame-pointer&quot; &quot;-m64&quot; &quot;-I&quot; &quot;../../src/llvm-project/libunwind/include&quot; &quot;-std=c99&quot; &quot;-std=c++11&quot; &quot;-nostdinc++&quot; &quot;-fno-exceptions&quot; &quot;-fno-rtti&quot; &quot;-fstrict-aliasing&quot; &quot;-funwind-tables&quot; &quot;-fvisibility=hidden&quot; &quot;-D__LITTLE_ENDIAN__=1&quot; &quot;-D_LIBUNWIND_DISABLE_VISIBILITY_ANNOTATIONS&quot; &quot;-o&quot; &quot;/home/joshua/.local/lib/cargo/target/debug/build/unwind-aac1f3c9ddb7d19f/out/../../src/llvm-project/libunwind/src/Unwind-EHABI.o&quot; &quot;-c&quot; &quot;../../src/llvm-project/libunwind/src/Unwind-EHABI.cpp&quot;\n  cargo:warning=c++: error: ../../src/llvm-project/libunwind/src/Unwind-EHABI.cpp: No such file or directory\n  cargo:warning=c++: fatal error: no input files\n  cargo:warning=compilation terminated.\n  exit code: 1\n</code></pre></div>",
        "id": 221151070,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609263103
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Make.20it.20easier.20to.20build.20the.20standard.20libr.E2.80.A6.20compiler-team.23394/near/221151063\">said</a>:</p>\n<blockquote>\n<p>There are cases where it is not optional like linux + musl, fuchsia and fortanix.</p>\n</blockquote>\n<p>ok, so don't support those out of tree <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> anyone doing complicated bootstrapping things will have to use x.py anyway</p>",
        "id": 221151137,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609263127
    },
    {
        "content": "<p>this is for the very simplest \"I want to add an API to the standard library\"</p>",
        "id": 221151178,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609263157
    },
    {
        "content": "<p>and in fact it would break on things like <a href=\"https://github.com/rust-lang/rust/pull/68692#issuecomment-580899667\">https://github.com/rust-lang/rust/pull/68692#issuecomment-580899667</a> (it would compile fine out of tree), but I'm ok with that because it's very rare and would be caught during the subtree sync</p>",
        "id": 221151359,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609263296
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Make.20it.20easier.20to.20build.20the.20standard.20libr.E2.80.A6.20compiler-team.23394/near/221148897\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"121055\">Pietro Albini</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Make.20it.20easier.20to.20build.20the.20standard.20libr.E2.80.A6.20compiler-team.23394/near/221147725\">said</a>:</p>\n<blockquote>\n<p>(mostly on CI -- which doesn't use <code>git submodule</code> -- and when you need to interact with the commit history)</p>\n</blockquote>\n<p>how does CI build the compiler without using x.py? x.py runs git submodule</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/ci/init_repo.sh\">https://github.com/rust-lang/rust/blob/master/src/ci/init_repo.sh</a></p>",
        "id": 221151689,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1609263534
    },
    {
        "content": "<p>executed before ./x.py</p>",
        "id": 221151705,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1609263545
    },
    {
        "content": "<p>basically for the big submodules we do some trickery to remove the submodule itself and replace it with the archive of the last commit</p>",
        "id": 221151745,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1609263589
    },
    {
        "content": "<p>which speeds up things a lot, especially for llvm</p>",
        "id": 221151755,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1609263596
    },
    {
        "content": "<p>oh boy <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 221151825,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609263623
    },
    {
        "content": "<p>it looks like you only do that for llvm and some of the docs though: <a href=\"https://github.com/rust-lang/rust/blob/158f8d034b15e65ba8dc0d066358dd0632bfcd6e/src/ci/init_repo.sh#L50\">https://github.com/rust-lang/rust/blob/158f8d034b15e65ba8dc0d066358dd0632bfcd6e/src/ci/init_repo.sh#L50</a></p>",
        "id": 221151834,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609263634
    },
    {
        "content": "<p>so it wouldn't be affected by making backtrace and stdarch a subtree</p>",
        "id": 221151850,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609263643
    },
    {
        "content": "<p>I'm curious how fast it would be if we ran that unconditionally for every submodule</p>",
        "id": 221151901,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1609263689
    },
    {
        "content": "<p>The concern is that if we want to make the dependency between rustc and the standard library explicit, it wouldn't work. For example:</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"c1\"># Somewhere in a rustc Cargo.toml.</span>\n<span class=\"n\">std</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s\">\"../../library/std\"</span> <span class=\"p\">}</span>\n</code></pre></div>\n<p>These can't cross workspace boundaries. It could maybe work if Cargo supported nested workspaces. Just pointing out that making it a separate workspace will make things more difficult. </p>\n<p>I understand that splitting into a separate repository has its benefits, but there are quite a few drawbacks as well:</p>\n<ul>\n<li>There seems to be a high risk that issue tracking would be a mess. How would this work?</li>\n<li>Someone would need to take the time to regularly do syncs between the two repositories. Who would do that?</li>\n<li>My understanding is that <code>git subtree</code> support is still not great. Is it really ready for more repositories?</li>\n<li>I suspect something like the standard library would end up with a lot of PRs landing in both repositories. This I think would make coordination of changes harder, and trouble with conflicts greater.</li>\n<li>How would CI be configured, such that commits to the standard library don't end up causing a lot of breakage? Is that affordable?</li>\n<li>Profiles may need to be specified in multiple places.</li>\n<li>How would the separate repository handle stylistic choices like tidy and rustfmt?</li>\n<li>I suspect once you have a separate repository, people will want to have some way do something other than <code>cargo test</code>, which I'm uncertain is possible.</li>\n</ul>\n<p>At least for using a separate workspace, I think it is feasible, but there are drawbacks which will make it harder to work with. The difference between <code>cd library &amp;&amp; cargo check</code> and <code>cargo check -p test</code> seems minimal and trivial, and I don't think the benefit of being able to <code>cd library &amp;&amp; cargo check</code> over <code>cargo check -p test</code> to be worth it.</p>\n<p>I'm not sure Zulip is really a great way to discuss all the issues.</p>",
        "id": 221152245,
        "sender_full_name": "Eric Huss",
        "timestamp": 1609263965
    },
    {
        "content": "<blockquote>\n<p>I'm not sure Zulip is really a great way to discuss all the issues.</p>\n</blockquote>\n<p>would hackmd be better maybe?</p>",
        "id": 221152353,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609264068
    },
    {
        "content": "<blockquote>\n<p>I don't think the benefit of being able to cd library &amp;&amp; cargo check over cargo check -p test to be worth it.</p>\n</blockquote>\n<p>I agree <em>if we can get <code>cargo check</code> to give a reasonable error</em></p>",
        "id": 221152405,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609264083
    },
    {
        "content": "<p>right now it gives about 150 errors that <code>Sized</code> isn't implemented for <code>()</code>, which is basically useless for figuring out what went wrong</p>",
        "id": 221152430,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609264100
    },
    {
        "content": "<p>I also want to point out one of the motivations is not just 'fewer commands' but also 'make the standard library less special'</p>",
        "id": 221152497,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609264170
    },
    {
        "content": "<p>IMO splitting the workspace is a good idea, but splitting the repo is not really.</p>",
        "id": 221152509,
        "sender_full_name": "bjorn3",
        "timestamp": 1609264177
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Make.20it.20easier.20to.20build.20the.20standard.20libr.E2.80.A6.20compiler-team.23394/near/221152509\">said</a>:</p>\n<blockquote>\n<p>IMO splitting the workspace is a good idea, but splitting the repo is not.</p>\n</blockquote>\n<p>after reading about CI and the issue tracker, I agree actually</p>",
        "id": 221152524,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609264201
    },
    {
        "content": "<p>I'll take that out of the MCP</p>",
        "id": 221152563,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609264206
    },
    {
        "content": "<blockquote>\n<p>I suspect once you have a separate repository, people will want to have some way do something other than cargo test, which I'm uncertain is possible.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> what do you mean by 'other than cargo test'?</p>",
        "id": 221152574,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609264225
    },
    {
        "content": "<p>another alternative to this is to make an x.py wrapper that knows that <code>x build</code> in library/std means <code>x.py build --stage 0 library/std</code> but that gets even further from the goal of 'make the standard library less special'</p>",
        "id": 221152642,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609264310
    },
    {
        "content": "<blockquote>\n<p>There seems to be a high risk that issue tracking would be a mess. How would this work?</p>\n</blockquote>\n<p>By disabling the issue tracker, maybe.</p>",
        "id": 221152699,
        "sender_full_name": "Laurențiu",
        "timestamp": 1609264337
    },
    {
        "content": "<p>You could have <code>./x.py</code> accept paths relative to the current working dir and have it default to <code>.</code>.</p>",
        "id": 221152729,
        "sender_full_name": "bjorn3",
        "timestamp": 1609264364
    },
    {
        "content": "<p>sure, and these would all be good QOL things, but they're mostly good for existing contributors</p>",
        "id": 221152781,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609264408
    },
    {
        "content": "<p>I want to help people who've never used x.py before and don't know why they need it</p>",
        "id": 221152802,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609264424
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Make.20it.20easier.20to.20build.20the.20standard.20libr.E2.80.A6.20compiler-team.23394/near/221152353\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I'm not sure Zulip is really a great way to discuss all the issues.</p>\n</blockquote>\n<p>would hackmd be better maybe?</p>\n</blockquote>\n<p>I'm not sure.  I don't really want to put much energy into this.  Just trying to point out that if you move forward, it will make things more difficult.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Make.20it.20easier.20to.20build.20the.20standard.20libr.E2.80.A6.20compiler-team.23394/near/221152405\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I don't think the benefit of being able to cd library &amp;&amp; cargo check over cargo check -p test to be worth it.</p>\n</blockquote>\n<p>I agree <em>if we can get <code>cargo check</code> to give a reasonable error</em></p>\n</blockquote>\n<p>I don't agree.  I wouldn't expect to be able to check out any large project and run random commands (like <code>make</code>) and just expect it to work.  </p>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Make.20it.20easier.20to.20build.20the.20standard.20libr.E2.80.A6.20compiler-team.23394/near/221152574\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I suspect once you have a separate repository, people will want to have some way do something other than cargo test, which I'm uncertain is possible.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120518\">Eric Huss</span> what do you mean by 'other than cargo test'?</p>\n</blockquote>\n<p>Like being able to build something with that customized standard library.</p>",
        "id": 221152973,
        "sender_full_name": "Eric Huss",
        "timestamp": 1609264550
    },
    {
        "content": "<blockquote>\n<p>I don't agree. I wouldn't expect to be able to check out any large project and run random commands (like make) and just expect it to work. </p>\n</blockquote>\n<p>For pretty much all rust projects, even large ones <code>cargo build</code> just works. (Assuming you have the necessary C libraries installed)</p>",
        "id": 221153077,
        "sender_full_name": "bjorn3",
        "timestamp": 1609264616
    },
    {
        "content": "<p>as a point of interest, servo also has <code>./mach build --dev</code></p>",
        "id": 221153965,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609265272
    },
    {
        "content": "<p>but the error for <code>cargo check</code>, while not exactly helpful, at least gives you some idea what went wrong:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0463]: can&#39;t find crate for `rustc_ast`\n  --&gt; components/script_plugins/lib.rs:22:1\n   |\n22 | extern crate rustc_ast;\n   | ^^^^^^^^^^^^^^^^^^^^^^^ can&#39;t find crate\n</code></pre></div>",
        "id": 221154011,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609265293
    },
    {
        "content": "<p>compare that to <code>cargo check</code> in library/std: <a href=\"https://termbin.com/txtu\">https://termbin.com/txtu</a></p>",
        "id": 221154072,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609265378
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\"># The beginning of this script is both valid shell and valid python,</span>\n<span class=\"c1\"># such that the script starts with the shell and is reexecuted with</span>\n<span class=\"c1\"># the right python.</span>\n<span class=\"s1\">''':'</span> <span class=\"o\">&amp;&amp;</span> <span class=\"k\">if</span> <span class=\"o\">[</span> ! -z <span class=\"s2\">\"</span><span class=\"nv\">$MSYSTEM</span><span class=\"s2\">\"</span> <span class=\"o\">]</span> <span class=\"p\">;</span> <span class=\"k\">then</span> <span class=\"nb\">exec</span> python <span class=\"s2\">\"</span><span class=\"nv\">$0</span><span class=\"s2\">\"</span> <span class=\"s2\">\"</span><span class=\"nv\">$@</span><span class=\"s2\">\"</span> <span class=\"p\">;</span> <span class=\"k\">else</span> which python2.7 &gt; /dev/null <span class=\"m\">2</span>&gt; /dev/null <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">exec</span> python2.7 <span class=\"s2\">\"</span><span class=\"nv\">$0</span><span class=\"s2\">\"</span> <span class=\"s2\">\"</span><span class=\"nv\">$@</span><span class=\"s2\">\"</span> <span class=\"o\">||</span> <span class=\"nb\">exec</span> python <span class=\"s2\">\"</span><span class=\"nv\">$0</span><span class=\"s2\">\"</span> <span class=\"s2\">\"</span><span class=\"nv\">$@</span><span class=\"s2\">\"</span> <span class=\"p\">;</span> <span class=\"k\">fi</span>\n<span class=\"s1\">''</span><span class=\"err\">'</span>\n</code></pre></div>\n<p>heh, maybe we should do this for x.py</p>",
        "id": 221154191,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609265491
    },
    {
        "content": "<p>That reminds me of <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/dbee13661efa269cb4cd57bb4c6b99a19732b484/scripts/filter_profile.rs\">https://github.com/bjorn3/rustc_codegen_cranelift/blob/dbee13661efa269cb4cd57bb4c6b99a19732b484/scripts/filter_profile.rs</a> which is a bash script that jit compiles itself as rust executable using cg_clif.</p>",
        "id": 221154486,
        "sender_full_name": "bjorn3",
        "timestamp": 1609265712
    },
    {
        "content": "<blockquote>\n<p>I don't agree. I wouldn't expect to be able to check out any large project and run random commands (like make) and just expect it to work.</p>\n</blockquote>\n<p>for what it's worth, this comes up over and over again:</p>\n<ul>\n<li><a href=\"#narrow/stream/131828-t-compiler/topic/cargo.20directly.20working.20in.20tree\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/cargo.20directly.20working.20in.20tree</a></li>\n<li><a href=\"#narrow/stream/131828-t-compiler/topic/mentoring/near/221139246\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/mentoring/near/221139246</a></li>\n<li><a href=\"#narrow/stream/238009-t-compiler/meetings/topic/planning%20meeting%202020.09.04/near/209245785\">https://rust-lang.zulipchat.com/#narrow/stream/238009-t-compiler/meetings/topic/planning%20meeting%202020.09.04/near/209245785</a></li>\n<li><a href=\"#narrow/stream/131828-t-compiler/topic/RIIR.20contributor.20entry.20point\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/RIIR.20contributor.20entry.20point</a></li>\n</ul>",
        "id": 221154646,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609265820
    },
    {
        "content": "<p>it's not just me :/</p>",
        "id": 221154656,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609265826
    },
    {
        "content": "<p>Sounds like it'd be harder to dogfood compiler features to me.</p>",
        "id": 221155999,
        "sender_full_name": "nagisa",
        "timestamp": 1609266851
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Make.20it.20easier.20to.20build.20the.20standard.20libr.E2.80.A6.20compiler-team.23394/near/221155999\">said</a>:</p>\n<blockquote>\n<p>Sounds like it'd be harder to dogfood compiler features to me.</p>\n</blockquote>\n<p>why do you think so?</p>",
        "id": 221156040,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609266896
    },
    {
        "content": "<p>well, if the expectation is that checking out a std/ repo (if we're splitting it out) and just cargo +nightly build works, then you need to have a nightly published with features you want to use</p>",
        "id": 221156137,
        "sender_full_name": "nagisa",
        "timestamp": 1609266969
    },
    {
        "content": "<p>which by definition precludes dogfooding in libstd at the same time a feature is implemented in the compiler.</p>",
        "id": 221156159,
        "sender_full_name": "nagisa",
        "timestamp": 1609266991
    },
    {
        "content": "<p>oh I see - we could use beta out of tree instead</p>",
        "id": 221156170,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609267001
    },
    {
        "content": "<p>and that actually works better because then we can add <code>rust-toolchain</code> and automatically have the right version</p>",
        "id": 221156185,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609267014
    },
    {
        "content": "<p>I'd just have to figure out a way to pass <code>--cfg bootstrap</code></p>",
        "id": 221156227,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609267067
    },
    {
        "content": "<p>if we don't split out std into a separate repo/worktree or whatever, then it doesn't really matter either way</p>",
        "id": 221156309,
        "sender_full_name": "nagisa",
        "timestamp": 1609267114
    },
    {
        "content": "<p>because then you can have a readme that reads something along the lines of \"well, you can try <code>cargo build</code> and if it doesn't work go run <code>x.py</code> from repo root...\"</p>",
        "id": 221156440,
        "sender_full_name": "nagisa",
        "timestamp": 1609267213
    },
    {
        "content": "<p>and in most cases the former would work.</p>",
        "id": 221156446,
        "sender_full_name": "nagisa",
        "timestamp": 1609267224
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Make.20it.20easier.20to.20build.20the.20standard.20libr.E2.80.A6.20compiler-team.23394/near/221156170\">said</a>:</p>\n<blockquote>\n<p>oh I see - we could use beta out of tree instead</p>\n</blockquote>\n<p>I don't see how that solves anything?</p>",
        "id": 221156463,
        "sender_full_name": "nagisa",
        "timestamp": 1609267247
    },
    {
        "content": "<p>Libstd has to compile with beta anyway for bootstrapping purposes.</p>",
        "id": 221156477,
        "sender_full_name": "bjorn3",
        "timestamp": 1609267266
    },
    {
        "content": "<p>Are there PRs that introduce new language/compiler features and also add them to <code>libstd</code> at the same time?</p>",
        "id": 221156483,
        "sender_full_name": "Laurențiu",
        "timestamp": 1609267270
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu Nicola</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Make.20it.20easier.20to.20build.20the.20standard.20libr.E2.80.A6.20compiler-team.23394/near/221156483\">said</a>:</p>\n<blockquote>\n<p>Are there PRs that introduce new language/compiler features and also add them to <code>libstd</code> at the same time?</p>\n</blockquote>\n<p>yes, let me find a link</p>",
        "id": 221156488,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609267277
    },
    {
        "content": "<p>IMHO, needing a published compiler is more of a feature than a bug</p>",
        "id": 221156506,
        "sender_full_name": "Laurențiu",
        "timestamp": 1609267300
    },
    {
        "content": "<blockquote>\n<p>Libstd has to compile with beta anyway for bootstrapping purposes.</p>\n</blockquote>\n<p>Sure, but its \"just\" a question of <code>cfg(stage0)</code>. Are you proposing that contributors would be changing stage0 code?</p>",
        "id": 221156519,
        "sender_full_name": "nagisa",
        "timestamp": 1609267311
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Make.20it.20easier.20to.20build.20the.20standard.20libr.E2.80.A6.20compiler-team.23394/near/221156519\">said</a>:</p>\n<blockquote>\n<p>Sure, but its \"just\" a question of <code>cfg(stage0)</code>. Are you proposing that contributors would be changing stage0 code?</p>\n</blockquote>\n<p>yes, I think that makes more sense then having them change stage1</p>",
        "id": 221156568,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609267326
    },
    {
        "content": "<p>who would ensure that <code>cfg(stage0)</code> and <code>cfg(not(stage0))</code> stay in sync? Until now typically you'd just delete the <code>cfg(stage0)</code> code when trains roll over.</p>",
        "id": 221156654,
        "sender_full_name": "nagisa",
        "timestamp": 1609267422
    },
    {
        "content": "<p>Why would that need to change?</p>",
        "id": 221156735,
        "sender_full_name": "bjorn3",
        "timestamp": 1609267460
    },
    {
        "content": "<p>If contributors adjust code in <code>cfg(stage0)</code> then we position ourselves for a situation where changes just disappear.</p>",
        "id": 221156736,
        "sender_full_name": "nagisa",
        "timestamp": 1609267462
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Make.20it.20easier.20to.20build.20the.20standard.20libr.E2.80.A6.20compiler-team.23394/near/221156654\">said</a>:</p>\n<blockquote>\n<p>who would ensure that <code>cfg(stage0)</code> and <code>cfg(not(stage0))</code> stay in sync? Until now typically you'd just delete the <code>cfg(stage0)</code> code when trains roll over.</p>\n</blockquote>\n<p>you could still do that with subtree syncs, the nice thing about subtree is you can change it on either end</p>",
        "id": 221156747,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609267467
    },
    {
        "content": "<p>it would make the syncs a little more prone to conflict but not by a ton I don't think</p>",
        "id": 221156762,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609267481
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Make.20it.20easier.20to.20build.20the.20standard.20libr.E2.80.A6.20compiler-team.23394/near/221156736\">said</a>:</p>\n<blockquote>\n<p>If contributors adjust code in <code>cfg(stage0)</code> then we position ourselves for a situation where changes just disappear.</p>\n</blockquote>\n<p>A non-compiler contributor rarely has to touch <code>cfg(not(bootstrap))</code> code. That is only for when the compiler changed.</p>",
        "id": 221156788,
        "sender_full_name": "bjorn3",
        "timestamp": 1609267511
    },
    {
        "content": "<p>what is a non-compiler contributor? Are we looking to reorganize the ownership of the libstd implementation again?</p>",
        "id": 221156888,
        "sender_full_name": "nagisa",
        "timestamp": 1609267601
    },
    {
        "content": "<p>Given that implementation of libstd is currently under T-compiler purview AFAIK</p>",
        "id": 221156911,
        "sender_full_name": "nagisa",
        "timestamp": 1609267627
    },
    {
        "content": "<p>I mean someone that only want to change libstd and not the compiler. For example to improve the performance of say <code>Vec</code> or add a new api.</p>",
        "id": 221156930,
        "sender_full_name": "bjorn3",
        "timestamp": 1609267643
    },
    {
        "content": "<p>'someone who primarily contributes to the standard library'</p>\n<blockquote>\n<p>Are we looking to reorganize the ownership of the libstd implementation again?</p>\n</blockquote>\n<p>no, none of this is oriented towards repeat contributors, this is for people who want to make a small API change and now have to think about bootstrapping</p>",
        "id": 221156948,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609267659
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Make.20it.20easier.20to.20build.20the.20standard.20libr.E2.80.A6.20compiler-team.23394/near/221156488\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu Nicola</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Make.20it.20easier.20to.20build.20the.20standard.20libr.E2.80.A6.20compiler-team.23394/near/221156483\">said</a>:</p>\n<blockquote>\n<p>Are there PRs that introduce new language/compiler features and also add them to <code>libstd</code> at the same time?</p>\n</blockquote>\n<p>yes, let me find a link</p>\n</blockquote>\n<p>couldn't find it :( but it was related to adding a new lang intrinsic</p>",
        "id": 221157317,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609268010
    },
    {
        "content": "<p>also I want to be clear: I am not proposing to change the bootstrapping model at all. I just want an easier way to say <code>x.py build --stage 0 library/std</code></p>",
        "id": 221157344,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609268038
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> see <a href=\"https://rustc-dev-guide.rust-lang.org/building/bootstrapping.html#stages-and-std\">https://rustc-dev-guide.rust-lang.org/building/bootstrapping.html#stages-and-std</a> for why 'use a fixed version of the compiler' doesn't work</p>",
        "id": 221157403,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609268077
    },
    {
        "content": "<p>Which part? I wasn't proposing that new compilers would be able to link an old <code>libstd</code> to produce working executables</p>",
        "id": 221157624,
        "sender_full_name": "Laurențiu",
        "timestamp": 1609268239
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu Nicola</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Make.20it.20easier.20to.20build.20the.20standard.20libr.E2.80.A6.20compiler-team.23394/near/221156506\">said</a>:</p>\n<blockquote>\n<p>IMHO, needing a published compiler is more of a feature than a bug</p>\n</blockquote>\n<p>^ this part</p>",
        "id": 221157650,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609268264
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Make.20it.20easier.20to.20build.20the.20standard.20libr.E2.80.A6.20compiler-team.23394/near/221157317\">said</a>:</p>\n<blockquote>\n<p>couldn't find it :( but it was related to adding a new lang intrinsic</p>\n</blockquote>\n<p>Yeah, that makes sense</p>",
        "id": 221157824,
        "sender_full_name": "Laurențiu",
        "timestamp": 1609268381
    },
    {
        "content": "<p>As far as subtrees are concerned, I have a hard time imagining myself going through multiple repos to review changes to libstd. Use of subtree has different tradeoffs here than clippy/miri/etc tools if nothing else about libstd changes. clippy/miri generally develop features in the separate repo and whatever compatibility bits necessary with the compiler in <code>rust-lang/rust</code>.</p>\n<p>The only way libstd split into another repo makes sense is if we look towards adopting a similar model to clippy/miri. Which also implies reduced dogfooding, which might actually be fine.</p>\n<p>Yet another consideration if we do so is how that impacts tooling around compiler that we have. For instance we do <code>@rust-timer perf</code> a number of libstd changes which then benches the bootstrapped compiler with the changed libstd -- having a separate repo for libstd makes that harder if not impossible to do automatically?</p>",
        "id": 221158071,
        "sender_full_name": "nagisa",
        "timestamp": 1609268579
    },
    {
        "content": "<p>personally I think we should drop the subtree part of this</p>",
        "id": 221158145,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609268634
    },
    {
        "content": "<p>like you and <span class=\"user-mention silent\" data-user-id=\"120518\">Eric Huss</span> brought up, that has a lot more complications that are incidental to the actual change I want, which is for <code>cargo build</code> to work</p>",
        "id": 221158205,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609268665
    },
    {
        "content": "<p>Yeah, if the change is just about getting <code>cd library/libstd &amp;&amp; cargo build</code> work out of the box (maybe most of the time if not always) then its a no-brainer.</p>",
        "id": 221158260,
        "sender_full_name": "nagisa",
        "timestamp": 1609268716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I see you striked out the subtree, you want to do same for \"Make a new rust-lang/library repository\" under \"Implementation\" section.</p>",
        "id": 221158504,
        "sender_full_name": "nagisa",
        "timestamp": 1609268912
    },
    {
        "content": "<p>thanks, done</p>",
        "id": 221159261,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609269533
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> FWIW, I really really hope that the library and similar don't start using subtree. That would make it much <em>harder</em> for me to contribute to them.</p>",
        "id": 221194782,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609312143
    },
    {
        "content": "<p>I do like the idea of being able to build in a subdirectory.</p>",
        "id": 221194795,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609312179
    },
    {
        "content": "<p>But keeping rust-lang/rust more self-contained makes contribution much simpler, to me.</p>",
        "id": 221194848,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609312215
    },
    {
        "content": "<p>And easier to coordinate changes.</p>",
        "id": 221194850,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609312224
    },
    {
        "content": "<p>(Caught up now, glad to hear the subtree was dropped, sorry for the distraction.)</p>",
        "id": 221194864,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609312259
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span>: Proposal <a href=\"https://github.com/rust-lang/compiler-team/issues/394#issuecomment-752788251\">#394</a> has been seconded, and will be approved in 10 days if no objections are raised.</p>",
        "id": 221255211,
        "sender_full_name": "triagebot",
        "timestamp": 1609370583
    },
    {
        "content": "<p>FWIW, if the main concern is \"people do <code>cargo check</code> and the resulting error is awful\", one could also imagine having a file like <code>.no-cargo</code> or so, which makes cargo bail immediately with a custom error message -- and that error could tell people the right <code>x.py</code> invocations instead.</p>",
        "id": 221447359,
        "sender_full_name": "RalfJ",
        "timestamp": 1609674312
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Make.20it.20easier.20to.20build.20the.20standard.20libr.E2.80.A6.20compiler-team.23394/near/221447359\">said</a>:</p>\n<blockquote>\n<p>FWIW, if the main concern is \"people do <code>cargo check</code> and the resulting error is awful\", one could also imagine having a file like <code>.no-cargo</code> or so, which makes cargo bail immediately with a custom error message -- and that error could tell people the right <code>x.py</code> invocations instead.</p>\n</blockquote>\n<p>I already tried this, it breaks things like <code>cargo tree</code>: <a href=\"https://github.com/rust-lang/rust/pull/79021\">https://github.com/rust-lang/rust/pull/79021</a></p>",
        "id": 221455510,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609687230
    },
    {
        "content": "<p>Well, that's using a hack to do this</p>",
        "id": 221458344,
        "sender_full_name": "RalfJ",
        "timestamp": 1609690934
    },
    {
        "content": "<p>if we add support for this in cargo we could do better</p>",
        "id": 221458350,
        "sender_full_name": "RalfJ",
        "timestamp": 1609690946
    },
    {
        "content": "<p>I would rather fix this properly than add hacks to cargo :/</p>",
        "id": 221459005,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609691769
    },
    {
        "content": "<p>I can't imagine anyone using this besides rust-lang/rust</p>",
        "id": 221459009,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609691782
    },
    {
        "content": "<p>Any other project that can't use cargo for some reason? Like maybe projects that need xargo</p>",
        "id": 221468175,
        "sender_full_name": "Nadrieril",
        "timestamp": 1609704145
    },
    {
        "content": "<p><code>rust-analyzer</code> and <code>Redox</code>?</p>",
        "id": 221469388,
        "sender_full_name": "oliver",
        "timestamp": 1609705681
    },
    {
        "content": "<p><code>rust-analyzer</code> uses <a href=\"https://github.com/rust-analyzer/rust-analyzer/tree/master/xtask/src\"><code>xtask</code></a> for a variety of things, but can be compiled just fine without. You then just have to build the vscode extension manually.</p>",
        "id": 221469716,
        "sender_full_name": "bjorn3",
        "timestamp": 1609706073
    },
    {
        "content": "<p>This proposal has been accepted: <a href=\"https://github.com/rust-lang/compiler-team/issues/394\">#394</a>.</p>",
        "id": 222716505,
        "sender_full_name": "triagebot",
        "timestamp": 1610631008
    }
]