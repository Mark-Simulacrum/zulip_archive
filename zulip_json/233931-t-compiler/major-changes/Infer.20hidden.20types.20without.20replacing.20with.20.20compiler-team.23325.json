[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/compiler-team/issues/325\">#325</a>. It will be<br>\n                announced at the next meeting to try and draw attention to it,<br>\n                but usually MCPs are not discussed during triage meetings. If<br>\n                you think this would benefit from discussion amongst the<br>\n                team, consider proposing a design meeting.</p>",
        "id": 202631099,
        "sender_full_name": "triagebot",
        "timestamp": 1593642402
    },
    {
        "content": "<p>I'd like to get feedback on this idea from <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> and <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>, at minimum =)</p>",
        "id": 202631126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593642433
    },
    {
        "content": "<p>I'd also like to know if people can come up with other examples that cause problems</p>",
        "id": 202631152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593642462
    },
    {
        "content": "<p>oh so this was one of the designs I think</p>",
        "id": 202631164,
        "sender_full_name": "eddyb",
        "timestamp": 1593642476
    },
    {
        "content": "<p>this stuff dropped off my radar but it makes sense</p>",
        "id": 202631207,
        "sender_full_name": "eddyb",
        "timestamp": 1593642485
    },
    {
        "content": "<p>My motivation is that I'd like to push impl trait to stabilization and elegantly handling these situations seems like the major blocker</p>",
        "id": 202631257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593642530
    },
    {
        "content": "<p>anyway g2g for now :) dinner time! <span aria-label=\"food\" class=\"emoji emoji-1f372\" role=\"img\" title=\"food\">:food:</span></p>",
        "id": 202631264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593642541
    },
    {
        "content": "<p>I guess this is simpler than other ways that use inference variables</p>",
        "id": 202631286,
        "sender_full_name": "eddyb",
        "timestamp": 1593642553
    },
    {
        "content": "<p>so... this is basically limiting the effect of opaque type restriction to the sites that actually go from an opaque type to a concrete type or vice versa, otherwise using the same opaque type everywhere (by letting inference carry it). So...</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">z</span>: <span class=\"nc\">OpaqueTy</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>what type will be inferred for <code>y</code>? the concrete type? and then only the <code>z = y</code> assignment will actually do any of the constraining of the opaque type to the concrete type?</p>",
        "id": 202656288,
        "sender_full_name": "oli",
        "timestamp": 1593673508
    },
    {
        "content": "<p>You posted a breaking change example but I don't quite get how it will break</p>",
        "id": 202656400,
        "sender_full_name": "oli",
        "timestamp": 1593673599
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> the type inferred for <code>y</code> would be <code>i32</code>, yes, and then assigning to <code>z</code> would create a constraint that <code>OpaqueTy = i32</code> basically</p>",
        "id": 202691817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593698395
    },
    {
        "content": "<p>but the type for <code>z</code> would be <code>OpaqueType</code></p>",
        "id": 202691832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593698401
    },
    {
        "content": "<p>similar to if you did</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">z</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 202691895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593698411
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Infer.20hidden.20types.20without.20replacing.20with.20.20compiler-team.23325/near/202656400\">said</a>:</p>\n<blockquote>\n<p>You posted a breaking change example but I don't quite get how it will break</p>\n</blockquote>\n<p>well, it doesn't <em>necessarily</em> break, but if we do it naively it will. You can kind of observe the same effect if you re-order the return statements. In that case, we initially infer the return type to <code>Box&lt;i32&gt;</code> and then get an error because we are returning a <code>Box&lt;dyn Debug&gt;</code>.</p>\n<p>In the same way, if we do the naive thing, we'll end up with two constraints:</p>\n<ul>\n<li><code>OpaqueType = Box&lt;i32&gt;</code></li>\n<li><code>OpaqueType = Box&lt;dyn Debug&gt;</code></li>\n</ul>\n<p>and we'll get an error because they are incompatible constraints.</p>\n<p>For the example to work, we have to figure out that a coercion is possible and apply it to one of the return statements.</p>",
        "id": 202692061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593698498
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span>: Proposal <a href=\"https://github.com/rust-lang/compiler-team/issues/325#issuecomment-654158174\">#325</a> has been seconded, and will be approved in 10 days if no objections are raised.</p>",
        "id": 202974651,
        "sender_full_name": "triagebot",
        "timestamp": 1594032324
    },
    {
        "content": "<p>I'm a bit confused as to how this is supposed to work. From what I can tell we have:</p>\n<ul>\n<li>If we have <code>known == Opaque</code> or <code>known &lt;: Opaque</code> we generate a predicate</li>\n<li>If we have <code>_ == Opaque(...)</code> or <code>_ &lt;: Opaque(...)</code> then we unify directly</li>\n</ul>\n<p>Given that I'm not sure how we handle:</p>\n<ul>\n<li>The same opaque type with different substs (admittedly we don't handle that currently either)</li>\n<li>If <code>Opaque</code> everything unifies with everything, how does selection not break.</li>\n</ul>",
        "id": 203012897,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1594053848
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> Selection is a good question. I did think about that at some point but it looks like I neglected to talk about it in the MCP, and now that I think a bit more about it I'm not sure that the idea I had actually makes sense.</p>",
        "id": 203033792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594065622
    },
    {
        "content": "<p>I guess a question would be what amount of trait selection we expect to succeed</p>",
        "id": 203033883,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594065667
    },
    {
        "content": "<p>i.e., just where can the contraints come from?</p>",
        "id": 203033899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594065675
    },
    {
        "content": "<p>I was imagining that trait selection might operate in a \"syntactic mode\" where traits are dispatched based only on the declared bounds of the opaque type.</p>",
        "id": 203033946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594065698
    },
    {
        "content": "<p>i.e., even if you are inside the \"inference region\", you can't prove that a value of the opaque type implements more trait than its bounds.</p>",
        "id": 203034038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594065734
    },
    {
        "content": "<p>I suppose that this is to some extent also a T-lang issue (\"what behavior do we expect\")</p>",
        "id": 203035601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594066579
    },
    {
        "content": "<p>This proposal has been accepted: <a href=\"https://github.com/rust-lang/compiler-team/issues/325\">#325</a>.</p>",
        "id": 204682920,
        "sender_full_name": "triagebot",
        "timestamp": 1595432379
    },
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/compiler-team/issues/325\">#325</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 204708722,
        "sender_full_name": "triagebot",
        "timestamp": 1595444576
    },
    {
        "content": "<p>This has open concerns</p>",
        "id": 204708783,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1595444613
    }
]