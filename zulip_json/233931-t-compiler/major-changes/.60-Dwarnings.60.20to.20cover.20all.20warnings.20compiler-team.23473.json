[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/compiler-team/issues/473\"><code>-Dwarnings</code> to cover all warnings #473</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 262876072,
        "sender_full_name": "triagebot",
        "timestamp": 1638023475
    },
    {
        "content": "<p>to be clear, \"all warnings\" means \"not just lint warnings\"; right now <code>deny(warnings)</code> only applies to lints and not to code using <code>sess.warn()</code></p>",
        "id": 262876269,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638023687
    },
    {
        "content": "<p>(and not all warnings <em>can</em> be lints, the one <span class=\"user-mention\" data-user-id=\"382653\">@ojeda</span> mentions in the MCP happens during argument parsing before the tcx is created)</p>",
        "id": 262876349,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638023770
    },
    {
        "content": "<p>Marking <code>-Dwarnings</code> cover all warnings may break cargo when using <code>-Dwarnings</code> in combination with compiling for targets not supporting dylibs, as in the case that one or more of the specified crate types are not supported by the target, but not all, rustc will give a warning like <code>dropping unsupported crate type `dylib` for target `wasm32-unknown-unknown` </code>. Cargo checks before compiling which crate types are supported and how they are named by running something like <code>rustc - --print file-names --crate-name ____ --crate-type rlib --crate-type dylib ...</code>.</p>\n<p>There are also other cases where warnings are really warnings not caused by the code itself, like when failing to remove an old incremental cache due to eg permission errors.</p>",
        "id": 262876820,
        "sender_full_name": "bjorn3",
        "timestamp": 1638024483
    },
    {
        "content": "<blockquote>\n<p>Cargo checks before compiling which crate types are supported and how they are named by running something like rustc - --print file-names --crate-name ____ --crate-type rlib --crate-type dylib ....</p>\n</blockquote>\n<p>cargo shouldn't be passing -Dwarnings for that though, right? I don't think it even applies RUSTFLAGS to the <code>--print file-names</code> command.</p>\n<blockquote>\n<p>like when failing to remove an old incremental cache due to eg permission errors.</p>\n</blockquote>\n<p>maybe we could mark these as \"internal\" errors somehow, and omit them from the deny?</p>",
        "id": 262876949,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638024644
    },
    {
        "content": "<p>these are the unconditional warnings I see currently: <a href=\"https://www.toptal.com/developers/hastebin/uxoteretil.rust\">https://www.toptal.com/developers/hastebin/uxoteretil.rust</a></p>",
        "id": 262877413,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638025302
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/.60-Dwarnings.60.20to.20cover.20all.20warnings.20compiler-team.23473/near/262876949\">said</a>:</p>\n<blockquote>\n<p>cargo shouldn't be passing -Dwarnings for that though, right? I don't think it even applies RUSTFLAGS to the <code>--print file-names</code> command.</p>\n</blockquote>\n<p>The <code>--print</code> command gets RUSTFLAGS (needed for some things like <code>cfg</code> checking).</p>",
        "id": 262878126,
        "sender_full_name": "Eric Huss",
        "timestamp": 1638026202
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/.60-Dwarnings.60.20to.20cover.20all.20warnings.20compiler-team.23473/near/262876349\">said</a>:</p>\n<blockquote>\n<p>(and not all warnings <em>can</em> be lints, the one <span class=\"user-mention silent\" data-user-id=\"382653\">ojeda</span> mentions in the MCP happens during argument parsing before the tcx is created)</p>\n</blockquote>\n<p>I thought we had a delayed linting scheme for this very reason?</p>",
        "id": 262879307,
        "sender_full_name": "oli",
        "timestamp": 1638027996
    },
    {
        "content": "<p>I believe the delayed linting scheme still needs a <code>ParseSess</code>. Creating a <code>ParseSess</code> needs argument parsing first AFAIK.</p>",
        "id": 262879586,
        "sender_full_name": "bjorn3",
        "timestamp": 1638028417
    },
    {
        "content": "<p>There are two reasons to output warnings outside of the linting infrastructure â€“ when it is intended that these warnings do not cause things to break (regardless of the flags specified) and when the linting infrastructure is not available at the location.</p>",
        "id": 262898230,
        "sender_full_name": "nagisa",
        "timestamp": 1638055192
    },
    {
        "content": "<p>in my experience latter is significantly more rare than the first.</p>",
        "id": 262898232,
        "sender_full_name": "nagisa",
        "timestamp": 1638055201
    },
    {
        "content": "<p>in particular json target schema is unstable and recently has been wildly so. Having it to deal with the concerns of people potentially using custom target jsons in combination of <code>-Dwarnings</code> would be pretty bad.</p>",
        "id": 262898441,
        "sender_full_name": "nagisa",
        "timestamp": 1638055540
    },
    {
        "content": "<p>at that point I would instead look at spending the work necessary to stabilize target customization.</p>",
        "id": 262898443,
        "sender_full_name": "nagisa",
        "timestamp": 1638055559
    },
    {
        "content": "<p>(JSON is probably not quite it)</p>",
        "id": 262898485,
        "sender_full_name": "nagisa",
        "timestamp": 1638055574
    },
    {
        "content": "<p>Yeah, I would love to see codegen options for half of what only target specs can currently do.</p>",
        "id": 262914230,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1638083221
    },
    {
        "content": "<p>Yes, please!</p>",
        "id": 263135570,
        "sender_full_name": "ojeda",
        "timestamp": 1638274604
    },
    {
        "content": "<p>I would like to see target specs in terms of Rust code, honestly.</p>",
        "id": 263203025,
        "sender_full_name": "Jubilee",
        "timestamp": 1638303773
    }
]