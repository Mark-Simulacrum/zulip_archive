[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/compiler-team/issues/449\">Make <code>resolve_instance</code> fallible #449</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 247258757,
        "sender_full_name": "triagebot",
        "timestamp": 1627332052
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> I've implemented the MCP in a tool (as a hacky-standalone version), I would like to do it properly within the compiler though, but I haven't heard back from anyone on the proposal</p>",
        "id": 250237400,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1629580367
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span>: Proposal <a href=\"https://github.com/rust-lang/compiler-team/issues/449#issuecomment-903232033\">#449</a> has been seconded, and will be approved in 10 days if no objections are raised.</p>",
        "id": 250262381,
        "sender_full_name": "triagebot",
        "timestamp": 1629620282
    },
    {
        "content": "<p>This proposal has been accepted: <a href=\"https://github.com/rust-lang/compiler-team/issues/449\">#449</a>.</p>",
        "id": 251593845,
        "sender_full_name": "triagebot",
        "timestamp": 1630515740
    },
    {
        "content": "<p>great! I'll clean up my code and open a pr :)</p>",
        "id": 251614555,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1630524194
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312719\">Xavier Denis</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Make.20.60resolve_instance.60.20fallible.20compiler-team.23449/near/251614555\">said</a>:</p>\n<blockquote>\n<p>great! I'll clean up my code and open a pr :)</p>\n</blockquote>\n<p>Hey Xavier, I just wanted to check the status on this. I ran into a similar problem when using <code>resolve_instance</code>.</p>",
        "id": 264285828,
        "sender_full_name": "Jonas",
        "timestamp": 1639048258
    },
    {
        "content": "<p>I implemented it locally but eventually realized that resolve instance wasn’t really what I wanted</p>",
        "id": 264425460,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1639130839
    },
    {
        "content": "<p>I think the real thing that’s missing is fallible trait instance resolution</p>",
        "id": 264425504,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1639130872
    },
    {
        "content": "<p>(A simple api for it)</p>",
        "id": 264425563,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1639130888
    },
    {
        "content": "<p>Resolve instance does more since it exists for monomorphization</p>",
        "id": 264425609,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1639130912
    }
]