[
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span>: Proposal <a href=\"https://github.com/rust-lang/compiler-team/issues/270#issuecomment-702644684\">#270</a> has been seconded, and will be approved in 10 days if no objections are raised.</p>",
        "id": 212055600,
        "sender_full_name": "triagebot",
        "timestamp": 1601633373
    },
    {
        "content": "<p>previous discussion: <a href=\"#narrow/stream/131828-t-compiler/topic/design%20meeting%202020-04-03%20compiler-team%23257/near/192806450\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/design%20meeting%202020-04-03%20compiler-team%23257/near/192806450</a></p>",
        "id": 212055724,
        "sender_full_name": "oli",
        "timestamp": 1601633440
    },
    {
        "content": "<p>It's working well for clippy, and as long as <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> is the one syncing (and using the patched <code>git subtree</code>), there's no additional work on our side beyond keeping the backend building</p>",
        "id": 212055770,
        "sender_full_name": "oli",
        "timestamp": 1601633487
    },
    {
        "content": "<p>I got the patched git-subtree installed locally using <code>make prefix=$HOME/.local/; make prefix=$HOME/.local/ install; cd contrib/subtree; make prefix=$HOME/.local/; make prefix=$HOME/.local/ install</code>.</p>",
        "id": 212057163,
        "sender_full_name": "bjorn3",
        "timestamp": 1601634423
    },
    {
        "content": "<p>I already have had a rust branch for the integration for a while now. It has a few things I want to change, but those should be easy.</p>",
        "id": 212057315,
        "sender_full_name": "bjorn3",
        "timestamp": 1601634512
    },
    {
        "content": "<p>sorry for forgetting about this MCP for so long. I only saw it again yesterday in the compiler team meeting</p>",
        "id": 212063416,
        "sender_full_name": "oli",
        "timestamp": 1601639182
    },
    {
        "content": "<p>No problem. I was actually waiting for the <code>git subtree</code> PR to be merged, but that has been taking long enough.</p>",
        "id": 212063479,
        "sender_full_name": "bjorn3",
        "timestamp": 1601639253
    },
    {
        "content": "<p>Should I submit a PR once it is ready, or wait for the fcp?</p>",
        "id": 212063571,
        "sender_full_name": "bjorn3",
        "timestamp": 1601639308
    },
    {
        "content": "<p>let's wait for after the stable release next week, so we can also just wait for the FCP which is just a few days after that</p>",
        "id": 212065179,
        "sender_full_name": "oli",
        "timestamp": 1601640535
    },
    {
        "content": "<p>ok</p>",
        "id": 212065229,
        "sender_full_name": "bjorn3",
        "timestamp": 1601640564
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Integration.20of.20the.20Cranelift.20backend.20with.E2.80.A6.20compiler-team.23270/near/212063479\">said</a>:</p>\n<blockquote>\n<p>No problem. I was actually waiting for the <code>git subtree</code> PR to be merged, but that has been taking long enough.</p>\n</blockquote>\n<p>still waiting for that for Miri... I am somewhat worried about rust basically depending on a fork of git^^<br>\ndoes anyone have contacts with upstream to figure out what it takes to get the PR through?</p>",
        "id": 212218527,
        "sender_full_name": "RalfJ",
        "timestamp": 1601810053
    },
    {
        "content": "<p>cg_clif used to use <code>-Zcodegen-backend</code> to integrate with rustc. In <a href=\"https://github.com/rust-lang/rust/issues/76474\">#76474</a> I introduced the alternative of using a custom driver. I ported most of cg_clif to use this interface as it makes it possible to always set certain options for cg_clif and allows adding extra arguments for for example enabling the jit mode instead of having to resort to env vars. As of <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/commit/faec12461f34db4145000a891c4ee5df2e8d4132\">https://github.com/bjorn3/rustc_codegen_cranelift/commit/faec12461f34db4145000a891c4ee5df2e8d4132</a> the last remaining thing still requiring <code>-Zcodegen-backend</code> is rustdoc. Unlike rustc, rustdoc doesn't have support for custom drivers. How do I port it too?</p>",
        "id": 212919288,
        "sender_full_name": "bjorn3",
        "timestamp": 1602341373
    },
    {
        "content": "<p>rustdoc uses drivers at all??</p>",
        "id": 212919347,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602341455
    },
    {
        "content": "<p>It doesn't. That is the problem.</p>",
        "id": 212919355,
        "sender_full_name": "bjorn3",
        "timestamp": 1602341476
    },
    {
        "content": "<p>librustdoc isn't included in the sysroot and only exports <code>main()</code>.</p>",
        "id": 212919371,
        "sender_full_name": "bjorn3",
        "timestamp": 1602341500
    },
    {
        "content": "<p>I'm not sure what you're trying to do.</p>",
        "id": 212919390,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602341522
    },
    {
        "content": "<p>I want to override the codegen backend used by rustdoc without passing <code>-Zcodegen-backend</code>. I want an executable that passes an <code>Box&lt;dyn CodegenBackend&gt;</code> and a list of arguments to rustdoc.</p>",
        "id": 212919438,
        "sender_full_name": "bjorn3",
        "timestamp": 1602341616
    },
    {
        "content": "<p>By the way why does librustdoc actually exist separate from the rustdoc crate, when the rustdoc crate is just <code>fn main() { rustdoc::main() }</code>.</p>",
        "id": 212919482,
        "sender_full_name": "bjorn3",
        "timestamp": 1602341647
    },
    {
        "content": "<p>For rustc I have <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/master/src/bin/cg_clif.rs\">https://github.com/bjorn3/rustc_codegen_cranelift/blob/master/src/bin/cg_clif.rs</a></p>",
        "id": 212919508,
        "sender_full_name": "bjorn3",
        "timestamp": 1602341704
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Integration.20of.20the.20Cranelift.20backend.20with.E2.80.A6.20compiler-team.23270/near/212919482\">said</a>:</p>\n<blockquote>\n<p>By the way why does librustdoc actually exist separate from the rustdoc crate, when the rustdoc crate is just <code>fn main() { rustdoc::main() }</code>.</p>\n</blockquote>\n<p>good question, I think it was something to do with compile times? <span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> might know</p>",
        "id": 212919523,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602341750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Integration.20of.20the.20Cranelift.20backend.20with.E2.80.A6.20compiler-team.23270/near/212919438\">said</a>:</p>\n<blockquote>\n<p>I want to override the codegen backend used by rustdoc without passing <code>-Zcodegen-backend</code>. I want an executable that passes an <code>Box&lt;dyn CodegenBackend&gt;</code> and a list of arguments to rustdoc.</p>\n</blockquote>\n<p>my question is where rustdoc gets a <code>CodegenBackend</code> from at all</p>",
        "id": 212919565,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602341770
    },
    {
        "content": "<p>like, where does it use it currently?</p>",
        "id": 212919566,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602341778
    },
    {
        "content": "<p><code>rustc_interface</code> has a default <code>CodegenBackend</code> that is cg_llvm.</p>",
        "id": 212919569,
        "sender_full_name": "bjorn3",
        "timestamp": 1602341800
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/cae8bc1f2324e31c98cb32b8ed37032fc9cef405/compiler/rustc_interface/src/util.rs#L373\">https://github.com/rust-lang/rust/blob/cae8bc1f2324e31c98cb32b8ed37032fc9cef405/compiler/rustc_interface/src/util.rs#L373</a></p>",
        "id": 212919581,
        "sender_full_name": "bjorn3",
        "timestamp": 1602341829
    },
    {
        "content": "<p>ok, and why do you want to change that? I don't think rustdoc actually uses the codegen backend</p>\n<div class=\"codehilite\"><pre><span></span><code>(-bash@build-server) ~/rustc2 ▶️ rg get_codegen_backend src/librustdoc/ # no output\n</code></pre></div>",
        "id": 212919638,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602341903
    },
    {
        "content": "<p>It uses it for compiling tests.</p>",
        "id": 212919643,
        "sender_full_name": "bjorn3",
        "timestamp": 1602341919
    },
    {
        "content": "<p>ahhh</p>",
        "id": 212919645,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602341925
    },
    {
        "content": "<p>ok that's what I was missing</p>",
        "id": 212919646,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602341928
    },
    {
        "content": "<p><code>get_codegen_backend</code> is called by <code>create_session</code> by the way.</p>",
        "id": 212919660,
        "sender_full_name": "bjorn3",
        "timestamp": 1602341966
    },
    {
        "content": "<p>ok I have a follow-up question: rustdoc uses all the arguments of rustc, why doesn't <code>-Z codegen-backend</code> work too?</p>",
        "id": 212919719,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602342040
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Integration.20of.20the.20Cranelift.20backend.20with.E2.80.A6.20compiler-team.23270/near/212919719\">said</a>:</p>\n<blockquote>\n<p>ok I have a follow-up question: rustdoc uses all the arguments of rustc, why doesn't <code>-Z codegen-backend</code> work too?</p>\n</blockquote>\n<p>err actually let me double check that</p>",
        "id": 212919746,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602342108
    },
    {
        "content": "<p>It does work</p>",
        "id": 212919748,
        "sender_full_name": "bjorn3",
        "timestamp": 1602342118
    },
    {
        "content": "<p>then I'm again confused what your question is</p>",
        "id": 212919799,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602342161
    },
    {
        "content": "<p>are we not propagating the backend to doctests?</p>",
        "id": 212919802,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602342173
    },
    {
        "content": "<p>In the current state doctests do work fine. I want to create an executable that passes <code>-Ztrim-diagnostic-paths=no -Cpanic=abort -Zpanic-abort-tests -Zcodegen-backend='$(pwd)'/target/'$CHANNEL'/librustc_codegen_cranelift.'$dylib_ext' --sysroot '$(pwd)'/build_sysroot/sysroot</code> to rustdoc. Where preferably <code>-Zcodegen-backend</code> is passing an <code>Box&lt;dyn CodegenBackend&gt;</code>. These are all the flags necessary for cg_clif. This is necessary to make using cg_clif a matter of <code>RUSTC=cg_clif RUSTDOC=cg_clif_rustdoc cargo test</code>.</p>",
        "id": 212919865,
        "sender_full_name": "bjorn3",
        "timestamp": 1602342264
    },
    {
        "content": "<p>The <code>RUSTC=cg_clif</code> part already works. The <code>RUSTDOC</code> part doesn't. Instead you need that long list of arguments in <code>RUSTDOCFLAGS</code>.</p>",
        "id": 212919887,
        "sender_full_name": "bjorn3",
        "timestamp": 1602342339
    },
    {
        "content": "<p>you want a way to do this programmatically instead of through CLI args</p>",
        "id": 212919931,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602342373
    },
    {
        "content": "<p>ok, I understand now</p>",
        "id": 212919934,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602342376
    },
    {
        "content": "<p>Yes</p>",
        "id": 212919937,
        "sender_full_name": "bjorn3",
        "timestamp": 1602342379
    },
    {
        "content": "<p>And preferably with an arbitrary <code>Box&lt;dyn CodegenBackend&gt;</code> instead of requiring <code>-Zcodegen-backend</code> to be passed. That makes it possible to pass in extra information to the codegen backend. For example it may be used to enable JITing  of tests instead of AOT compilation.</p>",
        "id": 212920003,
        "sender_full_name": "bjorn3",
        "timestamp": 1602342494
    },
    {
        "content": "<p>it looks like the equivalent function for rustc is <code>        rustc_driver::run_compiler</code></p>",
        "id": 212920099,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602342629
    },
    {
        "content": "<p>but rustdoc can't expose a function like that because it itself calls <code>run_compiler</code></p>",
        "id": 212920104,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602342644
    },
    {
        "content": "<p>maybe it could expose a wrapper around it?</p>",
        "id": 212920108,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602342650
    },
    {
        "content": "<p>I think so. That would require adding <code>librustdoc</code> to the sysroot.</p>",
        "id": 212920135,
        "sender_full_name": "bjorn3",
        "timestamp": 1602342706
    },
    {
        "content": "<p>I don't have any objections in principle, but I wouldn't know where to start with that</p>",
        "id": 212920191,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602342752
    },
    {
        "content": "<p>I can try it.</p>",
        "id": 212920211,
        "sender_full_name": "bjorn3",
        "timestamp": 1602342801
    },
    {
        "content": "<p>I'll give the rest of the team a heads-up</p>",
        "id": 212920221,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602342835
    },
    {
        "content": "<p>I just realized that adding librustdoc to the sysroot will require compiling it again for every stage.</p>",
        "id": 212921557,
        "sender_full_name": "bjorn3",
        "timestamp": 1602344858
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Integration.20of.20the.20Cranelift.20backend.20with.E2.80.A6.20compiler-team.23270/near/212919523\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Integration.20of.20the.20Cranelift.20backend.20with.E2.80.A6.20compiler-team.23270/near/212919482\">said</a>:</p>\n<blockquote>\n<p>By the way why does librustdoc actually exist separate from the rustdoc crate, when the rustdoc crate is just <code>fn main() { rustdoc::main() }</code>.</p>\n</blockquote>\n<p>good question, I think it was something to do with compile times? <span class=\"user-mention silent\" data-user-id=\"210316\">GuillaumeGomez</span> might know</p>\n</blockquote>\n<p>The idea is to allow to have different \"front-end\" to rustdoc in case you want to use librustdoc as a dependeny.</p>",
        "id": 212968560,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1602428494
    },
    {
        "content": "<p>I mean, in practice that's not reallly true because the only entry point is <code>rustdoc::main</code></p>",
        "id": 212968614,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602428580
    },
    {
        "content": "<p>so you have to take the exactly the same arguments as <code>rustdoc</code></p>",
        "id": 212968619,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602428596
    },
    {
        "content": "<p>This proposal has been accepted: <a href=\"https://github.com/rust-lang/compiler-team/issues/270\">#270</a>.</p>",
        "id": 213339218,
        "sender_full_name": "triagebot",
        "timestamp": 1602703554
    },
    {
        "content": "<p>I initially planned to expose cg_clif using -Zcodegen-backend. This would require several changes to bootstrap and rustc_interface to compile and load it. Recently I made a custom driver for cg_clif. This has the advantage that it can be integrated as a regular tool with an interface similar to miri, but it means that bootstrap can't use cg_clif as backend to compile later stages. Which one should I use?</p>",
        "id": 213397693,
        "sender_full_name": "bjorn3",
        "timestamp": 1602752910
    },
    {
        "content": "<p>What do you think <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>, <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>?</p>",
        "id": 213397862,
        "sender_full_name": "bjorn3",
        "timestamp": 1602753005
    },
    {
        "content": "<p>I would prefer codgen-backend, so we have a single API. I do realize the API is not well suited for backends other than LLVM, but I think the whole point was always to adjust it to needs as they come</p>",
        "id": 213407466,
        "sender_full_name": "oli",
        "timestamp": 1602759184
    },
    {
        "content": "<p>The -Zcodegen-backend api is suitable for other backends, but it needs rustc changes to load from the sysroot instead of just from a path. It also needs a bootstrap change to put it in the right place.</p>",
        "id": 213409299,
        "sender_full_name": "bjorn3",
        "timestamp": 1602760504
    },
    {
        "content": "<p>I think codegen-backend should be just fine. I'm not sure about the \"loading from sysroot\" bit - I recall intentionally removing some code there - but I think it should be fine. I'd not personally be opposed to linking rustc (optionally) directly with cranelift either</p>",
        "id": 213410715,
        "sender_full_name": "simulacrum",
        "timestamp": 1602761598
    },
    {
        "content": "<p>(so we don't need to ourselves go searching in various directories)</p>",
        "id": 213410726,
        "sender_full_name": "simulacrum",
        "timestamp": 1602761619
    },
    {
        "content": "<p>Directly linking it in won't work. <code>Cargo.toml</code> doesn't contain references for all <code>rustc_*</code> crates, so it has to load them from sysroot, which means that it has to be a separate build step.</p>",
        "id": 213410807,
        "sender_full_name": "bjorn3",
        "timestamp": 1602761677
    },
    {
        "content": "<p>Hm, ok. I guess that's not something you want to change :)</p>\n<p>I wish we already had support for = sysroot deps in cargo.toml, then we could do that sort of integration more easily.</p>",
        "id": 213411529,
        "sender_full_name": "simulacrum",
        "timestamp": 1602762142
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Can you take a look at <a href=\"https://github.com/rust-lang/rust/compare/master...bjorn3:cg_clif_subtree3\">https://github.com/rust-lang/rust/compare/master...bjorn3:cg_clif_subtree3</a></p>\n<p>This should work with the exception of needing to disable <code>lto</code> (otherwise the linking code omits all object files), disable the <code>nightly</code> feature of <code>parking_lot</code> (inline asm using <code>llvm_asm!</code>) and pass <code>-Ztrim-diagnostic-paths=no</code> when compiling using cg_clif (<a href=\"https://github.com/rust-lang/rust/issues/77458\">#77458</a>).</p>",
        "id": 213416663,
        "sender_full_name": "bjorn3",
        "timestamp": 1602765020
    },
    {
        "content": "<p>I will need to review in more detail, but nothing major seems wrong</p>",
        "id": 213417272,
        "sender_full_name": "simulacrum",
        "timestamp": 1602765353
    },
    {
        "content": "<p>Should I also compile (not test) it on a CI builder? If so, which?</p>",
        "id": 213417786,
        "sender_full_name": "bjorn3",
        "timestamp": 1602765581
    },
    {
        "content": "<p>we should make sure x.py check runs for it</p>",
        "id": 213418293,
        "sender_full_name": "simulacrum",
        "timestamp": 1602765821
    },
    {
        "content": "<p>And if you think an actual build beyond that is helpful (I'm not actually sure) then tools builder is what I'd suggest</p>",
        "id": 213418397,
        "sender_full_name": "simulacrum",
        "timestamp": 1602765857
    },
    {
        "content": "<p>Check should be enough. I don't do any crazy things that could fail during codegen.</p>",
        "id": 213418528,
        "sender_full_name": "bjorn3",
        "timestamp": 1602765940
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> How do I set a config var only for a specific job?</p>",
        "id": 213423146,
        "sender_full_name": "bjorn3",
        "timestamp": 1602767895
    },
    {
        "content": "<p>Can you say more? What do you mean by \"job\"?</p>",
        "id": 213423192,
        "sender_full_name": "simulacrum",
        "timestamp": 1602767911
    },
    {
        "content": "<p>A CI job</p>",
        "id": 213423223,
        "sender_full_name": "bjorn3",
        "timestamp": 1602767923
    },
    {
        "content": "<p>I would add it to the dockerfile</p>",
        "id": 213423262,
        "sender_full_name": "simulacrum",
        "timestamp": 1602767939
    },
    {
        "content": "<p>sr/cic/docker/host-x86_64/&lt;name of ci builder&gt;/Dockerfile</p>",
        "id": 213423298,
        "sender_full_name": "simulacrum",
        "timestamp": 1602767954
    },
    {
        "content": "<p>I want to set <code>rust.codegen-backends</code> for the check job.</p>",
        "id": 213423300,
        "sender_full_name": "bjorn3",
        "timestamp": 1602767955
    },
    {
        "content": "<p>you'll probably want to do a RUN_CHECK_WITH_CODEGEN_BACKENDS 1 and follow the PARALLEL_QUERIES grep</p>",
        "id": 213423383,
        "sender_full_name": "simulacrum",
        "timestamp": 1602767999
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Does <a href=\"https://github.com/rust-lang/rust/commit/437058e1f0b52f689993eb345fb123c1a22f5685\">https://github.com/rust-lang/rust/commit/437058e1f0b52f689993eb345fb123c1a22f5685</a> look correct?</p>",
        "id": 213424765,
        "sender_full_name": "bjorn3",
        "timestamp": 1602768457
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> I would move it up to where the main configure args are set, but yes seems fine</p>",
        "id": 213425877,
        "sender_full_name": "simulacrum",
        "timestamp": 1602768897
    },
    {
        "content": "<p>Should I open a PR once I am done?</p>",
        "id": 213425950,
        "sender_full_name": "bjorn3",
        "timestamp": 1602768952
    },
    {
        "content": "<p>Yes, I think so.</p>",
        "id": 213426094,
        "sender_full_name": "simulacrum",
        "timestamp": 1602769003
    },
    {
        "content": "<p>If CI is gated on cg_clif building, shouldn't it be compiled by default?</p>",
        "id": 213427490,
        "sender_full_name": "bjorn3",
        "timestamp": 1602769634
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> ^</p>",
        "id": 213427906,
        "sender_full_name": "bjorn3",
        "timestamp": 1602769831
    },
    {
        "content": "<p>no, I don't think so</p>",
        "id": 213427974,
        "sender_full_name": "simulacrum",
        "timestamp": 1602769864
    },
    {
        "content": "<p>at least I presume that would add a good bit of compile times and seems not necessary</p>",
        "id": 213428016,
        "sender_full_name": "simulacrum",
        "timestamp": 1602769884
    },
    {
        "content": "<p>(for most contributors)</p>",
        "id": 213428025,
        "sender_full_name": "simulacrum",
        "timestamp": 1602769888
    },
    {
        "content": "<p>eventually maybe but not for now</p>",
        "id": 213428047,
        "sender_full_name": "simulacrum",
        "timestamp": 1602769895
    },
    {
        "content": "<p>x.py check should check it by default though</p>",
        "id": 213428064,
        "sender_full_name": "simulacrum",
        "timestamp": 1602769902
    },
    {
        "content": "<p>It adds 2min for me when using <code>./x.py build</code>.</p>",
        "id": 213428172,
        "sender_full_name": "bjorn3",
        "timestamp": 1602769932
    },
    {
        "content": "<p>out of?</p>",
        "id": 213428269,
        "sender_full_name": "simulacrum",
        "timestamp": 1602769968
    },
    {
        "content": "<p>but realistically that feels too long to be acceptable regression at this point</p>",
        "id": 213428305,
        "sender_full_name": "simulacrum",
        "timestamp": 1602769983
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Building stage0 compiler artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu)\n[...]\n    Finished release [optimized] target(s) in 30m 46s\n</code></pre></div>",
        "id": 213428351,
        "sender_full_name": "bjorn3",
        "timestamp": 1602770003
    },
    {
        "content": "<p>I will make <code>./x.py check</code> enable it by default.</p>",
        "id": 213428669,
        "sender_full_name": "bjorn3",
        "timestamp": 1602770126
    },
    {
        "content": "<p>hm out of 30 minutes I'd be less worried. not sure. I think we should leave it off by default initially anyway, maybe that'll change over time though</p>",
        "id": 213428813,
        "sender_full_name": "simulacrum",
        "timestamp": 1602770177
    },
    {
        "content": "<p>On CI it adds 30s to <code>./x.py check</code>. Most of this is only for the first build, as changing any rustc crate doesn't require a rebuild of Cranelift.</p>",
        "id": 213433485,
        "sender_full_name": "bjorn3",
        "timestamp": 1602771946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Integration.20of.20the.20Cranelift.20backend.20with.E2.80.A6.20compiler-team.23270/near/213411529\">said</a>:</p>\n<blockquote>\n<p>Hm, ok. I guess that's not something you want to change :)</p>\n<p>I wish we already had support for = sysroot deps in cargo.toml, then we could do that sort of integration more easily.</p>\n</blockquote>\n<p>We'd love to have that in Cargo; someone just needs to propose and write it.</p>",
        "id": 213491830,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602798223
    },
    {
        "content": "<p>(That's closely related to std-aware cargo; you'd probably want to coordinate it with <span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> and others.)</p>",
        "id": 213491931,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602798267
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> I keep trying to find time for this but just haven't gotten cycles yet</p>",
        "id": 213496714,
        "sender_full_name": "simulacrum",
        "timestamp": 1602801524
    }
]