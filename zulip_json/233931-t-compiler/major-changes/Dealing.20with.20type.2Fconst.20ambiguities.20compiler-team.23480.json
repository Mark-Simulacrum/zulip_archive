[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/compiler-team/issues/480\">Dealing with type/const ambiguities #480</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 268533412,
        "sender_full_name": "triagebot",
        "timestamp": 1642596544
    },
    {
        "content": "<p>I am not 100% happy with this solution but wasn't able to think of a better one <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 268533492,
        "sender_full_name": "lcnr",
        "timestamp": 1642596598
    },
    {
        "content": "<p>especially the naming is a bit :/</p>",
        "id": 268533540,
        "sender_full_name": "lcnr",
        "timestamp": 1642596605
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> in case you have any suggestions or concerns here, especially whether the idea of <code>Res::ForGenericArg</code> would work. i.e. resolve ambiguous paths as both a type and value and if they could be both, just remember that</p>",
        "id": 268533847,
        "sender_full_name": "lcnr",
        "timestamp": 1642596767
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Dealing.20with.20type.2Fconst.20ambiguities.20compiler-team.23480/near/268533847\">said</a>:</p>\n<blockquote>\n<p>especially whether the idea of <code>Res::ForGenericArg</code> would work</p>\n</blockquote>\n<p><code>Res</code> doesn't look like the right thing to extend, if a HIR node has two potential resolutions, then it needs two instances of <code>Res</code>.</p>",
        "id": 269057563,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1642996615
    },
    {
        "content": "<p>I can't say I like the specific set of structures listed in <a href=\"https://github.com/rust-lang/compiler-team/issues/480\">https://github.com/rust-lang/compiler-team/issues/480</a>, but the best / most convenient set will probably be clear only after the implementation.</p>",
        "id": 269057725,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1642996806
    },
    {
        "content": "<p>I'd introduce an <code>AmbiguousPath</code> structure (with two <code>Res</code>s), and a variant with the same name in <code>GenericArg</code>, and keep regular paths in types and expressions without changes, most paths are not in the generic argument position after all.</p>",
        "id": 269057953,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1642997022
    },
    {
        "content": "<p>I guess it's probably easy to merge the least invasive solution that work first, and only then try to refactor it into something else.</p>",
        "id": 269058024,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1642997088
    },
    {
        "content": "<p>Do you plan to disambiguate only single-segment paths (like it's done now), or multi-segment paths too?</p>",
        "id": 269058039,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1642997140
    },
    {
        "content": "<p>i would like multi-segment paths as well, it seems nice to support. though that's not what i am an expert in, so i will probably just do whatever you think is appropriate</p>",
        "id": 269068361,
        "sender_full_name": "lcnr",
        "timestamp": 1643010026
    },
    {
        "content": "<p>my main concern with both paths and <code>_</code> is that we end up with a hir visitor looking at types which accidentally ignores <code>GenericArg::Path</code></p>",
        "id": 269079022,
        "sender_full_name": "lcnr",
        "timestamp": 1643016700
    },
    {
        "content": "<p>and moving <code>Path</code> out of <code>hir::Type</code> prevents that from happening (mostly)</p>",
        "id": 269079098,
        "sender_full_name": "lcnr",
        "timestamp": 1643016725
    }
]