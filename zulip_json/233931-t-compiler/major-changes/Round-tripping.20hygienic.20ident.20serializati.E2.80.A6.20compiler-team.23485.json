[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/compiler-team/issues/485\">Round-tripping hygienic ident serialization #485</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 272032443,
        "sender_full_name": "triagebot",
        "timestamp": 1644956470
    },
    {
        "content": "<p>(another semi-obvious option here would be to change nothing about the output, but add an unstable compiler parsing mode  that treats the hygiene info in comments as significant. I'll update the description to acknowledge it as an option, though its not one I prefer (seems more fragile than adding a new form of identifier)</p>",
        "id": 272033066,
        "sender_full_name": "pnkfelix",
        "timestamp": 1644956784
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> Sounds completely sensible to me. I don't <em>think</em> our grammar currently treats <code>ident#ident#...</code> as reserves in quite the same way <code>ident#ident</code> is, but it seems feasible.</p>",
        "id": 272033461,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644956986
    },
    {
        "content": "<p>And the ability to parse the \"human\" identifier out by looking right after the <code>h#</code> makes sense as well.</p>",
        "id": 272033536,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644957006
    },
    {
        "content": "<p>I'm now trying to double check whether my understanding of the identifier encoding is correct</p>",
        "id": 272033555,
        "sender_full_name": "pnkfelix",
        "timestamp": 1644957013
    },
    {
        "content": "<p>but it <em>seems</em> likely that it is, given the form of the output from <code>--expanded,hygiene</code></p>",
        "id": 272033622,
        "sender_full_name": "pnkfelix",
        "timestamp": 1644957051
    },
    {
        "content": "<p>I like it. If we want to go a little more lightweight on the first round we could attach the hygiene info just by separating it in regular identifiers by triple underscores or sth other equally rare (funky Unicode characters here we go)</p>",
        "id": 272034396,
        "sender_full_name": "oli",
        "timestamp": 1644957466
    },
    {
        "content": "<p>I guess since it is unstable, then there is no expectation that the hygiene annotations have any meaning nor will be round-trippable across versions? Because I imagine we want to be able to change hygiene info at will.</p>",
        "id": 272088703,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1645001981
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span>: Proposal <a href=\"https://github.com/rust-lang/compiler-team/issues/485#issuecomment-1041373074\">#485</a> has been seconded, and will be approved in 10 days if no objections are raised.</p>",
        "id": 272101623,
        "sender_full_name": "triagebot",
        "timestamp": 1645009644
    },
    {
        "content": "<p>Yea I imagine this is considered perma-unstable? and should not be used even in custom rustc drivers?</p>",
        "id": 272102106,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1645009932
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> some context / extra motivation, FWIW: <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/unstable.20features.20deliberately.20unsafe.2Funsound/near/270966982\">https://rust-lang.zulipchat.com/#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/unstable.20features.20deliberately.20unsafe.2Funsound/near/270966982</a></p>",
        "id": 272102610,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1645010253
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256841\">@Nick Cameron</span> I wouldnâ€™t want to try to guarantee portability across Rust versions, at least not at this stage. Maybe that comes later, after we have macros nailed down</p>",
        "id": 272479089,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645231632
    },
    {
        "content": "<p>I think even with macros nailed down, we probably don't want to guarantee portability across Rust versions. Seems like an unnecessary constraint on future evolution.</p>",
        "id": 272661856,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1645435605
    },
    {
        "content": "<p>This proposal has been accepted: <a href=\"https://github.com/rust-lang/compiler-team/issues/485\">#485</a>.</p>",
        "id": 273699055,
        "sender_full_name": "triagebot",
        "timestamp": 1646163813
    }
]