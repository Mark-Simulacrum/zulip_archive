[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/compiler-team/issues/487\">allow arbitrary inherent impls in the standard library #487</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 273614755,
        "sender_full_name": "triagebot",
        "timestamp": 1646128599
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/simplifying.20lang.20items.20to.20one.20per.20type\">https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/simplifying.20lang.20items.20to.20one.20per.20type</a> for an extensive prior discussion about this.</p>",
        "id": 273615696,
        "sender_full_name": "bjorn3",
        "timestamp": 1646129068
    },
    {
        "content": "<p>I don't think this can be (easily) implemented without a perf regression as I stated in that thread.</p>",
        "id": 273615772,
        "sender_full_name": "bjorn3",
        "timestamp": 1646129116
    },
    {
        "content": "<p>I think that thread is missing context. Where did the discussion start?</p>",
        "id": 273616298,
        "sender_full_name": "oli",
        "timestamp": 1646129348
    },
    {
        "content": "<p>If we accumulate the inherent impls through <code>staged_api</code> (which could also double as the feature gate for arbitrary inherent impls), then I'd think that at worst we should get a bit of metadata overhead in libstd and liballoc. Or did you mean a different perf problem than \"need to look everywhere for inherent impls now\"</p>",
        "id": 273616443,
        "sender_full_name": "oli",
        "timestamp": 1646129410
    },
    {
        "content": "<p>right, it started somewher in <a href=\"#narrow/stream/213817-t-lang/topic/Implementation.20Specific.20Behaviour\">https://rust-lang.zulipchat.com/#narrow/stream/213817-t-lang/topic/Implementation.20Specific.20Behaviour</a> I believe</p>",
        "id": 273616607,
        "sender_full_name": "bjorn3",
        "timestamp": 1646129504
    },
    {
        "content": "<p>yeah, that and need to look for foreign inherent impls for every type, not just a fixed set.</p>",
        "id": 273616745,
        "sender_full_name": "bjorn3",
        "timestamp": 1646129565
    },
    {
        "content": "<p>Oh right. That, too. I guess we'll let lcnr do perf experiments then?</p>",
        "id": 273617265,
        "sender_full_name": "oli",
        "timestamp": 1646129861
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span>: Proposal <a href=\"https://github.com/rust-lang/compiler-team/issues/487#issuecomment-1055273925\">#487</a> has been seconded, and will be approved in 10 days if no objections are raised.</p>",
        "id": 273618344,
        "sender_full_name": "triagebot",
        "timestamp": 1646130330
    },
    {
        "content": "<p>I seconded it. There's nothing inherently speaking against it, and I believe that we may be able to actually change the current infrastructure that requires per-builtin-type logic to something generic that is equally performant</p>",
        "id": 273618810,
        "sender_full_name": "oli",
        "timestamp": 1646130586
    },
    {
        "content": "<p>I'm interested in seeing this prototyped first so we can see the end result.<br>\nIt may end up worse than the current situation.</p>",
        "id": 273634318,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1646138736
    },
    {
        "content": "<p>For example, a number of places in the compiler rely on inherent impl types having <code>DefId</code>s.</p>",
        "id": 273634463,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1646138815
    },
    {
        "content": "<p>So you either have to remove this reliance, or give def-ids to primitive types by declaring them in libcore, for example, which may be a larger hackery than the status quo.</p>",
        "id": 273634645,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1646138937
    },
    {
        "content": "<p>This proposal has been accepted: <a href=\"https://github.com/rust-lang/compiler-team/issues/487\">#487</a>.</p>",
        "id": 275341984,
        "sender_full_name": "triagebot",
        "timestamp": 1647332991
    }
]