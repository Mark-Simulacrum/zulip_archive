[
    {
        "content": "<p>Creating the topic manually.</p>",
        "id": 220868895,
        "sender_full_name": "cjgillot",
        "timestamp": 1608815305
    },
    {
        "content": "<p>As long as perf allows for it, I think we should do it. <a href=\"https://github.com/rust-lang/rust/pull/80347#issuecomment-751052175\">https://github.com/rust-lang/rust/pull/80347#issuecomment-751052175</a> already has some suggestions to resolve any potential perf problems that we encounter. Can you prep the PR in a way that makes it runnable for perf? (I'm not sure if tests need to pass for try builds to succeed)</p>",
        "id": 220970555,
        "sender_full_name": "oli",
        "timestamp": 1609000815
    },
    {
        "content": "<p>The failing test is from polymorphization. I have no idea what is the failure. It says<br>\n<code>error: test compilation failed although it shouldn't!</code> on a <code>build-fail</code> test.</p>",
        "id": 220970823,
        "sender_full_name": "cjgillot",
        "timestamp": 1609001334
    },
    {
        "content": "<p>Still, I don't think perf needs passing tests.</p>",
        "id": 220970827,
        "sender_full_name": "cjgillot",
        "timestamp": 1609001356
    },
    {
        "content": "<p>ok, I'll launch perf then</p>",
        "id": 220972262,
        "sender_full_name": "oli",
        "timestamp": 1609003967
    },
    {
        "content": "<p>Perf says it need more work: <a href=\"https://perf.rust-lang.org/compare.html?start=30a42735a0ff678172f66f63aca746096a717293&amp;end=2e325a37b8ff6a4cce0abcacff6dc1b64a3cf624\">https://perf.rust-lang.org/compare.html?start=30a42735a0ff678172f66f63aca746096a717293&amp;end=2e325a37b8ff6a4cce0abcacff6dc1b64a3cf624</a></p>",
        "id": 220979287,
        "sender_full_name": "cjgillot",
        "timestamp": 1609017116
    },
    {
        "content": "<p>One of the issues is the number of calls to <code>optimized_mir</code> query. I am confused by the different tests in the old code around MIR encoding.<br>\nIn which cases should MIR be encoded at all?</p>",
        "id": 220979336,
        "sender_full_name": "cjgillot",
        "timestamp": 1609017192
    },
    {
        "content": "<p>What is the use of the PrefetchVisitor instead of a plain loop?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">def_id</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">mir_keys</span><span class=\"p\">(</span><span class=\"n\">LOCAL_CRATE</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">ensure</span><span class=\"p\">().</span><span class=\"n\">optimized_mir</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">);;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">ensure</span><span class=\"p\">().</span><span class=\"n\">promoted_mir</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">);;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 220979402,
        "sender_full_name": "cjgillot",
        "timestamp": 1609017303
    },
    {
        "content": "<p>Why is MIR emission sometimes gated? Example in Fn impl items:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">def_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">hir</span><span class=\"p\">().</span><span class=\"n\">local_def_id</span><span class=\"p\">(</span><span class=\"n\">impl_item</span><span class=\"p\">.</span><span class=\"n\">hir_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">generics</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">generics_of</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">.</span><span class=\"n\">to_def_id</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">needs_inline</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">generics</span><span class=\"p\">.</span><span class=\"n\">requires_monomorphization</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">codegen_fn_attrs</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">.</span><span class=\"n\">to_def_id</span><span class=\"p\">()).</span><span class=\"n\">requests_inline</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">is_const_fn</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"p\">.</span><span class=\"n\">header</span><span class=\"p\">.</span><span class=\"n\">constness</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">hir</span>::<span class=\"n\">Constness</span>::<span class=\"n\">Const</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">emit_mir</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">needs_inline</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">is_const_fn</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 220979463,
        "sender_full_name": "cjgillot",
        "timestamp": 1609017421
    },
    {
        "content": "<p>I think by default functions are compiled directly to assembly (or maybe bitcode?) and only generic functions need the MIR to be kept across crates</p>",
        "id": 220979512,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609017514
    },
    {
        "content": "<p>... but sometimes is not gated (example: trait items).</p>",
        "id": 220979530,
        "sender_full_name": "cjgillot",
        "timestamp": 1609017589
    },
    {
        "content": "<p>trait items (not <code>impl Trait for Type</code> items), must be available, because implementations need to instantiate them</p>",
        "id": 220983348,
        "sender_full_name": "oli",
        "timestamp": 1609024471
    },
    {
        "content": "<p>So yea, especially for <code>optimized_mir</code>, you need to replicate the rules that prevent the emission of MIR. Maybe a smaller step to your PR would be to implement those rules as a function that is just based on <code>DefId</code> queries?</p>",
        "id": 220983404,
        "sender_full_name": "oli",
        "timestamp": 1609024589
    },
    {
        "content": "<p>MCP closed for inactivity</p>",
        "id": 234480590,
        "sender_full_name": "apiraino",
        "timestamp": 1618398762
    }
]