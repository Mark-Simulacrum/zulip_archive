[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/compiler-team/issues/441\">Accept <code>pc</code> in place of <code>unknown</code> and <code>unknown</code> in place of <code>pc</code> for <code>x86_64</code> and <code>i?86</code> targets #441</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 243265298,
        "sender_full_name": "triagebot",
        "timestamp": 1624131168
    },
    {
        "content": "<p>fwiw, I really appreciate that rustc only uses a single canonical string for a target. Having aliases can cause confusion, and makes any tool that needs to deal with triples deal with the aliasing problems. For example, Cargo itself assumes there is a single triple, and its cfg matching wouldn't know about the aliases.</p>\n<p>I'm a bit uncertain from the context of the proposal. It seems like there is a desire to try to match GNU-style triples with rustc-style triples. Is that what the script is trying to do? It seems like that is a much larger problem than just differences of pc and unknown. My understanding of <a href=\"https://github.com/gcc-mirror/gcc/blob/master/config.guess\">config.guess</a> and GNU-style triples is that it supports a large number of heuristics for matching target triples, and those can be changed by distros to all sorts of different variants. I would be surprised if just pc and unknown would be sufficient to map the two in general.</p>",
        "id": 243269470,
        "sender_full_name": "Eric Huss",
        "timestamp": 1624137356
    },
    {
        "content": "<p>Cargo cfg matching uses <code>rustc --print cfg</code> so it would work fine with aliasing targets as soon as rustc supports it.</p>",
        "id": 243270461,
        "sender_full_name": "bjorn3",
        "timestamp": 1624138892
    },
    {
        "content": "<p>Not for exact target name matches.  And same with any build script or anything else that inspects the target name.  (though I think that practice is flawed, and I'm disappointed that exact target name matching is going to be added to <code>cfg</code>).</p>",
        "id": 243271824,
        "sender_full_name": "Eric Huss",
        "timestamp": 1624141079
    },
    {
        "content": "<p>I would rather eliminate the <code>pc</code> and <code>unknown</code> tag altogether, and simply refer to Windows as e.g. <code>x86_64-windows-msvc</code></p>",
        "id": 243271992,
        "sender_full_name": "Jubilee",
        "timestamp": 1624141371
    },
    {
        "content": "<blockquote>\n<p>I'm a bit uncertain from the context of the proposal. It seems like there is a desire to try to match GNU-style triples with rustc-style triples. Is that what the script is trying to do? It seems like that is a much larger problem than just differences of pc and unknown. </p>\n</blockquote>\n<p>If you are referring to the script I linked in the issue, right now, yes, that's what it's doing. It attempts to fix the host target name to one acceptable to the rust compiler detected previously. Since it's using the value of $host from autotools (this is an m4 macro), it will be automatically detected (if not overridden at the --build or --host levels) which is where the issue is (though it's not apparent there, as host checking isn't performed if --host isn't specified). As a result, I use a serious of nested case and if blocks to attempt to find a correct variation that is accepted.<br>\nThe current issues I've noted are pc vs. unknown as well as the generalization of i?86 (rustc only accepts i586 and i686 for linux and windows. I believe there is at least one i486.)</p>\n<p>I would note that the proposal is not to change the name of rustc's targets here, simply to accept these cases when passed explicitly to --target.</p>",
        "id": 243273354,
        "sender_full_name": "Connor Horman",
        "timestamp": 1624143523
    },
    {
        "content": "<blockquote>\n<p>Not for exact target name matches.  And same with any build script or anything else that inspects the target name.  (though I think that practice is flawed, and I'm disappointed that exact target name matching is going to be added to <code>cfg</code>).</p>\n</blockquote>\n<p>Exact name matching can be useful (eg. invoking other toolchains), and in those cases you may <em>want</em> a particular form as the end user.</p>",
        "id": 243273426,
        "sender_full_name": "Connor Horman",
        "timestamp": 1624143648
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Accept.20.60pc.60.20in.20place.20of.20.60unknown.60.20and.20.60un.E2.80.A6.20compiler-team.23441/near/243271992\">said</a>:</p>\n<blockquote>\n<p>I would rather eliminate the <code>pc</code> and <code>unknown</code> tag altogether, and simply refer to Windows as e.g. <code>x86_64-windows-msvc</code></p>\n</blockquote>\n<p>That would change the form of the target, though. While <code>pc</code> and <code>unknown</code> vendors are generally not distinct (for x86_64 and ix86), some are (for example, <code>x86_64-apple-darwin</code> is functionally distinct from <code>x86_64-unknown-darwin</code> or <code>x86_64-pc-darwin</code>)</p>",
        "id": 243273781,
        "sender_full_name": "Connor Horman",
        "timestamp": 1624144253
    },
    {
        "content": "<p>Sure, but we don't meaningfully support the distinction.</p>",
        "id": 243276950,
        "sender_full_name": "Jubilee",
        "timestamp": 1624148894
    },
    {
        "content": "<p>If we decided to have an <code>unknown-darwin</code> target that is, say, PureDarwin on a possibly-non-Apple-provided PC, that's fine.<br>\nMy argument is simply that it functionally is just one token for us. Truncating unnecessary data from the token is fine.</p>",
        "id": 243277229,
        "sender_full_name": "Jubilee",
        "timestamp": 1624149338
    },
    {
        "content": "<p>In any case, that would also operate counter to my proposal, which is intended to make it easier to use non-cargo tooling (such as autotools).</p>",
        "id": 243280530,
        "sender_full_name": "Connor Horman",
        "timestamp": 1624154633
    },
    {
        "content": "<p>Another reasonable use would be to nail down the semantics for non-rustc compilers.<br>\ngcc-rs will likely support every gcc target reguardless, including target aliases. This may or may not be less of a concern, because gcc is a single-target toolchain, so it will never be able to compile for both <code>x86_64-pc-linux-gnu</code> and <code>x86_64-unknown-linux-gnu</code> (despite them otherwise being semantically identical). <br>\n&lt;<a href=\"https://github.com/LightningCreations/lccc\">https://github.com/LightningCreations/lccc</a>&gt;, being written by myself, also would differ in that the frontend, which  would query target properties via the middle architecture library <code>libxlang</code>, would never be able to observe the difference, unless it needed to access the exact target name for various reasons (such as setting implicit cfg flags, such as <code>target</code>). In xlang itself, <code>Target{Architecture::X86_64,Vendor::PC,OperatingSystem::Linux,Environment::GNU,BinaryFormat::None}</code> (is the canonical representation of <code>x86_64-pc-linux-gnu</code>) maps to the same <code>const TargetDescriptor*</code> as <code>Target{Architecture::X86_64,Vendor::Unknown,OperatingSystem::Linux,Environment::GNU,BinaryFormat::None}</code>. Thus, if there are issues with aliasing targets, my <em>strong</em> preference is that they be resolved.</p>",
        "id": 243300015,
        "sender_full_name": "Connor Horman",
        "timestamp": 1624190614
    },
    {
        "content": "<p>I mean I don’t think the <code>pc</code> variant doesn’t have to be a literal alias, you could have distinct <code>unknown</code> and <code>pc</code> target variants for platforms that are functionally the same, so to rustc they’re two separate targets, but behind the scenes they’re derived from the same target spec with the only difference being the vendor name, similar to the base targets we already have today.</p>\n<p>That would fulfill the same goal of having compatibility with other tools.</p>",
        "id": 243303693,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1624196861
    },
    {
        "content": "<p>My understanding is our targets don't precisely match GCC's understanding of the targets, so that the apparent naming compatibility is somewhat misleading. Thus, I am in favor not of making them more alike but instead further differentiating them.</p>",
        "id": 243315973,
        "sender_full_name": "Jubilee",
        "timestamp": 1624214923
    },
    {
        "content": "<p>e.g. I believe i686 is a Pentium Pro to GCC and a Pentium 4 to Rust.<br>\nWhile this may seem somewhat orthogonal, if the goal of this is to provide seamless compatibility with GCC tooling, then we've already failed that.</p>",
        "id": 243316341,
        "sender_full_name": "Jubilee",
        "timestamp": 1624215487
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Accept.20.60pc.60.20in.20place.20of.20.60unknown.60.20and.20.60un.E2.80.A6.20compiler-team.23441/near/243316341\">said</a>:</p>\n<blockquote>\n<p>e.g. I believe i686 is a Pentium Pro to GCC and a Pentium 4 to Rust.<br>\nWhile this may seem somewhat orthogonal, if the goal of this is to provide seamless compatibility with GCC tooling, then we've already failed that.</p>\n</blockquote>\n<p>Isn't this technically wrong on the part of rustc, though (may or may not be an issue)? The sixth generation x86, 80686 or i686, is the Pentium Pro (from intel, at least).  <a href=\"https://en.wikipedia.org/wiki/X86#Chronology\">Wikipedia</a> seems to list Pentium 4 under \"Enhanced Platform\", not under 6th generation. That being said, I assume this is somewhat of a lesser issue, unless someone actually tries compiling for a Pentium Pro. I'm not looking for 100% seamless compatibility, just better compatibility with such tooling without absolute hacks being necessary, as well as compatibility with compilers that do use GNU-style tuples.</p>",
        "id": 243317736,
        "sender_full_name": "Connor Horman",
        "timestamp": 1624217515
    },
    {
        "content": "<blockquote>\n<p>Isn't this technically wrong on the part of rustc</p>\n</blockquote>\n<p>Yes, rustc is wrong here, but I believe that part of the reason i686 and i586 are separated is so that i686 would allow access to the target features present on common 64bit-capable hardware (namely sse and sse2). If my understanding is correct, then doing the \"correct\" thing here would somewhat defeat the point of having these targets.</p>",
        "id": 243318476,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1624218577
    },
    {
        "content": "<p>That's probably also wrong, if the intent is to allow 32-bit programs on a 64-bit machine.</p>",
        "id": 243318564,
        "sender_full_name": "Jubilee",
        "timestamp": 1624218708
    },
    {
        "content": "<p>Don't really need to look for 4D chess moves in all this. Targets grew in a very ad-hoc manner and in most cases making decisions about the targets went the way of \"seemed reasonable to do it like this at the time\". GNU toolchains made these arbitrary-ish decisions in somewhat a different direction. Where rust mostly worked backwards from \"what would make sense for this target name _today_?\", gnu toolchains mostly went \"what the name should be for this new hardware?\"</p>",
        "id": 243318803,
        "sender_full_name": "nagisa",
        "timestamp": 1624219065
    },
    {
        "content": "<p>Right.</p>",
        "id": 243318856,
        "sender_full_name": "Jubilee",
        "timestamp": 1624219129
    },
    {
        "content": "<p>But at the same time, GNU made sure that many names that could make sense are treated as the correct names in the end. Rust makes no such attempt currently.</p>",
        "id": 243318944,
        "sender_full_name": "Ray Redondo",
        "timestamp": 1624219298
    },
    {
        "content": "<p>Might not be too late. Just nobody cared about the naive implementation enough to work it to completion of some sort.</p>",
        "id": 243319007,
        "sender_full_name": "nagisa",
        "timestamp": 1624219371
    },
    {
        "content": "<p>In any case, my argument is that harmonizing the names with GCC re: <code>pc</code> and <code>unknown</code> without reconciling our differences in this regard is removing the appearance of a seam when there is very much a seam there. I have already had to be corrected on certain misunderstandings because I thought there was a direct parallel between Rust's tuples and the GNU build system's tuples. Providing more illusory seamlessness does not seem like a good time. I don't want others to have more opportunities to make my mistakes.</p>\n<p>If the differences are reconciled... well, I do not know if adopting GNU's decisions wholesale is a good idea either. But I would obviously wholly retract my objection re: making convenient something that should be (slightly) inconvenient.</p>",
        "id": 243319101,
        "sender_full_name": "Jubilee",
        "timestamp": 1624219547
    },
    {
        "content": "<p>Some newer targets like wasm32-wasi dropped the -unknown- part. If anything I would be in favor of renaming eg x86_64-unknown-linux-gnu to  x86_64-linux-gnu and making the former an alias to the later. That also more closely matches the target names debian uses. (It uses amd64 instead of x86_64 though I think.)</p>",
        "id": 243319342,
        "sender_full_name": "bjorn3",
        "timestamp": 1624219821
    },
    {
        "content": "<p><code>pc</code> vs <code>unknown</code> seems to not actually be a difference on x86; it's just different defaults for that slot.</p>\n<p>The field is just part of the standard target tuple format, and it was easier to keep it around with a placeholder value than eliminate it.</p>",
        "id": 243319438,
        "sender_full_name": "Ray Redondo",
        "timestamp": 1624220002
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Accept.20.60pc.60.20in.20place.20of.20.60unknown.60.20and.20.60un.E2.80.A6.20compiler-team.23441/near/243319342\">said</a>:</p>\n<blockquote>\n<p>Some newer targets like wasm32-wasi dropped the -unknown- part. If anything I would be in favor of renaming eg x86_64-unknown-linux-gnu to  x86_64-linux-gnu and making the former an alias to the later. That also more closely matches the target names debian uses. (It uses amd64 instead of x86_64 though I think.)</p>\n</blockquote>\n<p>Well, <code>x86_64-linux-gnu</code> is also a useful target, but it's not a canonical target, at least as far as config.sub is concerned. In fact, <code>x86_64-linux-gnu</code> canonicalizes to <code>x86_64-pc-linux-gnu</code>. </p>\n<p><span class=\"user-mention silent\" data-user-id=\"396093\">Ray Redondo</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Accept.20.60pc.60.20in.20place.20of.20.60unknown.60.20and.20.60un.E2.80.A6.20compiler-team.23441/near/243319438\">said</a>:</p>\n<blockquote>\n<p><code>pc</code> vs <code>unknown</code> seems to not actually be a difference on x86; it's just different defaults for that slot.</p>\n<p>The field is just part of the standard target tuple format, and it was easier to keep it around with a placeholder value than eliminate it.</p>\n</blockquote>\n<p><code>pc</code> and <code>unknown</code> are indeed not functionally distinct on i?86 or x86_64. The slot was kept to keep a consistent canonical form, as there are some architectures (and some vendors) where the vendor field is menaingful. Having consistenly 3 parts (where the third can sometimes be further split), makes it easier to split, and to match individual components, especially in shell scripting. Having worked on <code>config.sub</code> and also <a href=\"https://crates.io/crates/target-tuples\">https://crates.io/crates/target-tuples</a>, the consistent form of canonical targets is actually incredibly helpful (and working with non-canonical forms is also painful).</p>",
        "id": 243320410,
        "sender_full_name": "Connor Horman",
        "timestamp": 1624221524
    },
    {
        "content": "<p>In any case, based on further discussion on the IRLO thread (&lt;<a href=\"https://internals.rust-lang.org/t/expand-targets-acceptable-to-rustc/14885/16\">https://internals.rust-lang.org/t/expand-targets-acceptable-to-rustc/14885/16</a>&gt;), I believe this is something that warrants an RFC. Am I correct in assuming that an MCP can move to an RFC after approval for t-compiler?</p>",
        "id": 243320808,
        "sender_full_name": "Connor Horman",
        "timestamp": 1624222180
    },
    {
        "content": "<p>...So, now that we have extended key-value attributes stabilized by <a href=\"https://github.com/rust-lang/rust/pull/83366\">https://github.com/rust-lang/rust/pull/83366</a>, forgive me if I don't understand what it enables, but would it be possible to define a Target type with appropriate fields that allows (non-exhaustive, of course) pattern-matching on real types with real paths instead of strings? Forgive me if I don't understand.</p>\n<p>There are many errors related to the \"string typing\" interfaces of current targets such that I believe moving away from it would be preferable, and I believe we'd actually have a much easier time <strong>defining</strong> aliases to those real types if we actually had them, as well.</p>",
        "id": 243323034,
        "sender_full_name": "Jubilee",
        "timestamp": 1624225274
    },
    {
        "content": "<p>then \"pc\" and \"unknown\" becomes <code>Target { vendor: Unknown, .. }</code><br>\nand then when we talk about making the strings aliases, we know what the real value that we're pointing to is.</p>",
        "id": 243323182,
        "sender_full_name": "Jubilee",
        "timestamp": 1624225472
    },
    {
        "content": "<p>Sorry, I realize that this is getting a bit afield.</p>",
        "id": 243323287,
        "sender_full_name": "Jubilee",
        "timestamp": 1624225616
    },
    {
        "content": "<p>I don't understand how key-value attributes are related.</p>",
        "id": 243323302,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1624225665
    },
    {
        "content": "<p>they look like <code>#[KEY = VALUE]</code>, where <code>VALUE</code> may include 0 or more macros as long as they expand to a literal</p>",
        "id": 243323367,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1624225720
    },
    {
        "content": "<p>the one used most often is <code>#[doc = include_str!(\"x.md\")]</code></p>",
        "id": 243323622,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1624226103
    },
    {
        "content": "<p><del>The problem (or rather the good thing) with targets is that they are a map of string to target definition on the compiler side, rather than the language side.</del></p>\n<p>Lets see if I can reword this to read right:</p>\n<p>The good thing: the target string to target definition is entirely a compiler-side thing (that's good, it means we can change it)<br>\nThe bad thing: its a direct string -&gt; definition map, not something smarter (that's bad)</p>",
        "id": 243324241,
        "sender_full_name": "nagisa",
        "timestamp": 1624227074
    },
    {
        "content": "<p>Though <a href=\"https://github.com/rust-lang/rfcs/pull/2991\">https://github.com/rust-lang/rfcs/pull/2991</a> is set to bake the target strings into the language too.</p>",
        "id": 243324249,
        "sender_full_name": "nagisa",
        "timestamp": 1624227107
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> I’m not sure it’s correct to interpret <a href=\"https://github.com/rust-lang/rfcs/issues/2991\">rfcs#2991</a> as baking the string values into the language, as that would be incompatible with the target tier policy. We have reserved the right to remove targets so it’s perfectly valid for <code>#[cfg(target = “arch-vendor-env”)]</code> to work in one release, never in the next release, and then work again in another release.</p>\n<p>Additionally there are custom targets which get to set the names, so people are already using <code>cfg</code> with target components that aren’t available by default to the compiler.</p>",
        "id": 243326159,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1624230265
    },
    {
        "content": "<p>(Custom targets aren't stable, though, right? To some extent I guess that's <a href=\"https://github.com/rust-lang/rust/issues/71009\">https://github.com/rust-lang/rust/issues/71009</a>...)</p>",
        "id": 243326437,
        "sender_full_name": "simulacrum",
        "timestamp": 1624230802
    },
    {
        "content": "<p>I don't consider the target components to share the same issues for the purposes of this as they come from the target definition not the target string. Most notably target_arch will not always match the first component of the target triple and there isn't really a widespread expectation that it would.</p>",
        "id": 243326702,
        "sender_full_name": "nagisa",
        "timestamp": 1624231260
    },
    {
        "content": "<p>Target strings also aren't quite a combination of target arch/vendor/os/env though it might be interesting if they were canonically.</p>",
        "id": 243326799,
        "sender_full_name": "nagisa",
        "timestamp": 1624231434
    },
    {
        "content": "<p>Sure, I was just mostly trying to have a example, without getting caught up in the specifics of a real target.</p>",
        "id": 243332384,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1624240627
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Ah I didn’t know that was not intentional, the embedded WG use it in their guides, so I assumed it was intentional. Though the ship might have sailed in my opinion for disabling custom targets through JSON outright, because this is something being relied on in production situations. There are targets that simply can’t ever be put in rustc because they are proprietary and confidential to the point that you can’t contain any references unless it’s under NDA. These platforms need a custom target spec, and I feel like too many may already depend on it that if it was disabled, those users would just pin to the last version that accepted it.</p>",
        "id": 243332647,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1624241038
    },
    {
        "content": "<p>I think fully destabilizing is indeed likely not feasible, but identifying a stable subset might be more viable. The schema changes pretty regularly.</p>",
        "id": 243332712,
        "sender_full_name": "simulacrum",
        "timestamp": 1624241127
    },
    {
        "content": "<p>I think the schema being completely unstable is totally reasonable. In the situations where I’ve used custom targets we’re pinning to a version anyway and choose when to upgrade the compiler.</p>",
        "id": 243332787,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1624241235
    }
]