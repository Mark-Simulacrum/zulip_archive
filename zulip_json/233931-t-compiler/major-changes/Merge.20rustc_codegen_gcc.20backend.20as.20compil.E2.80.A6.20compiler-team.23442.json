[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/compiler-team/issues/442\">Merge rustc_codegen_gcc backend as compiler/rustc_codegen_gcc #442</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 243808783,
        "sender_full_name": "triagebot",
        "timestamp": 1624550898
    },
    {
        "content": "<p>Significant prior discussion at <a href=\"#narrow/stream/131828-t-compiler/topic/Considering.20a.20future.20integration.20of.20the.20gcc.20backend\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/Considering.20a.20future.20integration.20of.20the.20gcc.20backend</a></p>",
        "id": 243808960,
        "sender_full_name": "nagisa",
        "timestamp": 1624550997
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink  [he/him]</span> I'm really glad for the support, but I'm not sure if compiler-contributors can second a proposal. I think it needs one of the compiler-team members to second.</p>",
        "id": 243844676,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624567862
    },
    {
        "content": "<p>no, I've seconded MCPs before, probably the bot is just not cooperating</p>",
        "id": 243844729,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624567892
    },
    {
        "content": "<p>Ah, nevermind, I misunderstood the process. Sorry. :)</p>",
        "id": 243844946,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624567974
    },
    {
        "content": "<p><code>@rustbot</code> seems down, it's not applying labels on rust-lang/rust either</p>",
        "id": 243844996,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624567996
    },
    {
        "content": "<p>Ah, that would do it.</p>",
        "id": 243845015,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624568003
    },
    {
        "content": "<p>Yeah I think I know why, pushing up a fix shortly</p>",
        "id": 243845172,
        "sender_full_name": "simulacrum",
        "timestamp": 1624568072
    },
    {
        "content": "<p>yeah it's mentioned in the MCP text itself: \"A compiler team member or contributor who is knowledgeable in the area can second by writing...\" ^^</p>",
        "id": 243846984,
        "sender_full_name": "lqd",
        "timestamp": 1624568912
    },
    {
        "content": "<p>Applied the label manually</p>",
        "id": 243847168,
        "sender_full_name": "LÃ©o Lanteri Thauvin",
        "timestamp": 1624569017
    },
    {
        "content": "<blockquote>\n<p>We hope that in practice, Linux distributions will build and distribute the GCC backend once it passes enough of the testsuite to be widely useful, and especially once we have targets that depend on it.</p>\n</blockquote>\n<p>FWIW, for my part, Fedora and Red Hat do not generally ship cross compilers, and all our targets are already well supported by LLVM. I would have to see significant _additional_ benefit before I consider enabling another backend in our distros.</p>",
        "id": 243981759,
        "sender_full_name": "cuviper",
        "timestamp": 1624663846
    },
    {
        "content": "<p>but I do see how this will be attractive to Debian, for instance, as they have more \"niche\" arches</p>",
        "id": 243981783,
        "sender_full_name": "cuviper",
        "timestamp": 1624663868
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> Fully acknowledged. \"widely useful\" was an intentionally chosen phrase; if it won't be widely useful <em>to that distribution's users</em> then it probably won't get shipped.</p>",
        "id": 243986172,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624669133
    },
    {
        "content": "<p>I think another question will be if it generates better code for x86. I look forward to seeing that.</p>",
        "id": 243986180,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624669150
    },
    {
        "content": "<p>That said...</p>",
        "id": 243986186,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624669170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Merge.20rustc_codegen_gcc.20backend.20as.20compil.E2.80.A6.20compiler-team.23442/near/243981759\">said</a>:</p>\n<blockquote>\n<p>Fedora and Red Hat do not generally ship cross compilers</p>\n</blockquote>\n<p>Does that include things like the WebAssembly backend for rustc, or the ARM64 backend on x86-64 platforms? Given that LLVM already supports those, and it's just a matter of providing the prebuilt std, I'm hoping it'd be reasonable to ship those.</p>",
        "id": 243986249,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624669214
    },
    {
        "content": "<p>I actually did just start shipping wasm32-unknown-unknown</p>",
        "id": 243986593,
        "sender_full_name": "cuviper",
        "timestamp": 1624669652
    },
    {
        "content": "<p>But for other linux-gnu targets, it's not just std, you also need target cc, binutils, etc</p>",
        "id": 243986662,
        "sender_full_name": "cuviper",
        "timestamp": 1624669718
    },
    {
        "content": "<p>Fair enough. The toolchain doesn't seem like too big of a deal (and there's always clang), but once you start going down that road, you also need cross-compiled libc and similar, and you end up needing something like Debian's multiarch.</p>",
        "id": 243988088,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624671716
    },
    {
        "content": "<p>Question: is a potential benefit of this proposal that it further exercises Rusts pluggable backend model (which I know is something certain embedded communities with custom compilers could benefit from) or has the work on cranelift sufficiently proven out the model?</p>",
        "id": 244118886,
        "sender_full_name": "rylev",
        "timestamp": 1624871494
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span></p>",
        "id": 244152847,
        "sender_full_name": "oli",
        "timestamp": 1624890523
    },
    {
        "content": "<p>I think the pluggable backend model works quite well. cg_gcc may help with making cg_ssa more suitable for backends other than LLVM though. It is hard to use it in cg_clif due to some things being quite different from what Cranelift expects. In addition it not very suitable for a non-optimizing compiler backend like Cranelift as it gives up on trying to keep things in ssa variables quite early. cg_ssa only tries to use ssa variables for locals with a single defining use. cg_clif uses it for everything except locals that have their address taken or are not scalars or scalar pairs.</p>",
        "id": 244155229,
        "sender_full_name": "bjorn3",
        "timestamp": 1624891412
    },
    {
        "content": "<p>Just my experience working on rust-gpu, I would say that it pretty aligns with what <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> said. cg_clif has done a lot of the heavy lifting of making rustc more pluggable, but there's a lot of improvements to make, and assumptions to remove in the compiler about the backend.</p>\n<p>I don't remember specifics but we have run into issues before because rust-gpu is <em>both</em> a backend and a target that is outside of rustc.</p>",
        "id": 244171950,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1624898353
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224872\">rylev</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Merge.20rustc_codegen_gcc.20backend.20as.20compil.E2.80.A6.20compiler-team.23442/near/244118886\">said</a>:</p>\n<blockquote>\n<p>Question: is a potential benefit of this proposal that it further exercises Rusts pluggable backend model (which I know is something certain embedded communities with custom compilers could benefit from) or has the work on cranelift sufficiently proven out the model?</p>\n</blockquote>\n<p>I'll definitely want to see some changes to make <code>cg_ssa</code> more friendly to non-LLVM backends: I even believe that I won't be able to implement some features (e.g. unwinding) without changing <code>cg_ssa</code> and many other features required a hack in <code>cg_gcc</code> in order to make it work.</p>",
        "id": 244224531,
        "sender_full_name": "antoyo",
        "timestamp": 1624931193
    },
    {
        "content": "<p>This proposal has been accepted: <a href=\"https://github.com/rust-lang/compiler-team/issues/442\">#442</a>.</p>",
        "id": 245299776,
        "sender_full_name": "triagebot",
        "timestamp": 1625743501
    }
]