[
    {
        "content": "<p>A new proposal has been announced <a href=\"https://github.com/rust-lang/compiler-team/issues/294\">#294</a>. It will be brought up at the next meeting.</p>",
        "id": 198050067,
        "sender_full_name": "triagebot",
        "timestamp": 1589886564
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> what is the latest estimate of perf impact on this?</p>",
        "id": 198100235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589909275
    },
    {
        "content": "<p>I lost access to my other computer, so I can't measure locally. I just pushed a hopefully faster solution.</p>",
        "id": 198100843,
        "sender_full_name": "cjgillot",
        "timestamp": 1589909538
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> , I wanted to double-check with you about some aspects of this MCP</p>",
        "id": 198374745,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590093836
    },
    {
        "content": "<p>in particular, one thing I need to straighten out in my own mind is how we get the desired benefit (more incremental compilation) while not losing any current features. Specifically: when code layout (and thus spans) change in ways that otherwise do not affect semantics, what is your expectation? That the HIR will be unchanged (and computational queries based on it reused), but the side-table will be updated?</p>",
        "id": 198374935,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590093921
    },
    {
        "content": "<p>Is the above is correct, does your preliminary <a href=\"https://github.com/rust-lang/rust/issues/72015\">#72015</a> actually implement such side-table updating?</p>",
        "id": 198374974,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590093942
    },
    {
        "content": "<p>Yes, the idea is to have the HIR remain the same, and only the side table should change. <br>\n<a href=\"https://github.com/rust-lang/rust/issues/72015\">#72015</a> implements this partially: I have not removed all the spans from HIR. For now, I only handle those with an associated HirId.</p>",
        "id": 198379548,
        "sender_full_name": "cjgillot",
        "timestamp": 1590096393
    },
    {
        "content": "<p>Actually, after the 5th commit in <a href=\"https://github.com/rust-lang/rust/issues/72015\">#72015</a>, the side table is completely built. All the other commits are dedicated to removing spans from the HIR.</p>",
        "id": 198379894,
        "sender_full_name": "cjgillot",
        "timestamp": 1590096642
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span>: Proposal <a href=\"https://github.com/rust-lang/compiler-team/issues/294#issuecomment-632430017\">#294</a> has been seconded, and will be approved in 10 days if no objections are raised.</p>",
        "id": 198398495,
        "sender_full_name": "triagebot",
        "timestamp": 1590111316
    },
    {
        "content": "<p>There might be potential interactions with <a href=\"https://github.com/rust-lang/rust/issues/72625\">#72625</a> which adds a <code>Vec&lt;Span&gt;</code> to <code>InlineAsm</code> HIR and MIR nodes that contains the source spans for each line of the inline asm. This is passed to LLVM in codegen which allows assembler errors to be mapped back to a source line.</p>",
        "id": 199040778,
        "sender_full_name": "Amanieu",
        "timestamp": 1590680872
    },
    {
        "content": "<p>Also <code>InlineAsmTemplatePiece</code> is passed through all of the layers (HIR, MIR) and contains a <code>Span</code> that points to the individual placeholders (<code>{}</code>) in the asm template string. This span is only used for diagnostics in AST lowering and in the intrinsicsck pass (just after typeck, before MIR).</p>",
        "id": 199041337,
        "sender_full_name": "Amanieu",
        "timestamp": 1590681140
    },
    {
        "content": "<p>I don't think this is a pressing issue. Inline ASM has very specific needs, and is not of very wide use, so it is at the end of my roadmap. I will look for a solution, but keeping the <code>Vec&lt;Span&gt;</code> should be fine.</p>",
        "id": 199043757,
        "sender_full_name": "cjgillot",
        "timestamp": 1590682329
    },
    {
        "content": "<p>I am stuck with the regression in <a href=\"https://github.com/rust-lang/rust/issues/72878\">#72878</a>. Stable hashing of the spans seems to be one of the reasons. Does somebody have a suggestion on how to reduce its impact ?</p>",
        "id": 200511459,
        "sender_full_name": "cjgillot",
        "timestamp": 1591859380
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> I'm not sure, but can you say a bit more about why we have to stable hash the spans? Is it that we are hashing the spans that we see as the return type of queries? I guess I have to review the overall plan here, I forget the details.</p>",
        "id": 200947406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592256044
    },
    {
        "content": "<p>When talking to <span class=\"user-mention\" data-user-id=\"225192\">@Nell Shamrell-Harrington</span> today about an unrelated issue, I realized that an advantage of this approach is that, whenever you have a span, you would also have the <code>hir_id</code> of an expression, which is potentially quite useful in error reporting, since you can then analyze the source expression in a more structured way (cc <span class=\"user-mention\" data-user-id=\"119031\">@Esteban KÃ¼ber</span>).</p>",
        "id": 200947490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592256112
    },
    {
        "content": "<p>Well, maybe not <em>whenever</em>, but more often anyway.</p>",
        "id": 200947554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592256123
    },
    {
        "content": "<p>Yes, it happens at the return of the query.</p>",
        "id": 200947574,
        "sender_full_name": "cjgillot",
        "timestamp": 1592256134
    },
    {
        "content": "<p>The query is indexed using a local defid, and returns a vector of all the spans it owns. The latter can be sizeable.</p>",
        "id": 200947745,
        "sender_full_name": "cjgillot",
        "timestamp": 1592256241
    },
    {
        "content": "<p>There may be other sources of slowness. This the one I have identified.</p>",
        "id": 200947843,
        "sender_full_name": "cjgillot",
        "timestamp": 1592256275
    },
    {
        "content": "<p>Hi, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>. I did not manage to remove the perf regression. I still have a ~4% regression (~ 10ms) on many benchmarks. I would welcome some ideas.</p>",
        "id": 201710296,
        "sender_full_name": "cjgillot",
        "timestamp": 1592908803
    }
]