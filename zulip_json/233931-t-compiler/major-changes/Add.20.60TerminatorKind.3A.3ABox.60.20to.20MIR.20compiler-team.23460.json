[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/compiler-team/issues/460\">Add <code>TerminatorKind::Box</code> to MIR #460</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 252033116,
        "sender_full_name": "triagebot",
        "timestamp": 1630797311
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span>: Proposal <a href=\"https://github.com/rust-lang/compiler-team/issues/460#issuecomment-913053922\">#460</a> has been seconded, and will be approved in 10 days if no objections are raised.</p>",
        "id": 252033655,
        "sender_full_name": "triagebot",
        "timestamp": 1630797897
    },
    {
        "content": "<p>Would an alternative be to desugar box syntax to something that returns a <code>Box&lt;MaybeUninit&lt;T&gt;&gt;</code> instead of a <code>Box&lt;T&gt;</code> and once the value is initialized, transmute that to a <code>Box&lt;T&gt;</code>? That should alleviate the deep/shallow distinction. That distinction may be irrelevant anyway, but afaik <span class=\"user-group-mention\" data-user-group-id=\"810\">@WG-unsafe-code-guidelines</span> isn't decided on that yet.</p>",
        "id": 252060168,
        "sender_full_name": "oli",
        "timestamp": 1630829905
    },
    {
        "content": "<p>The godbolt snippet shows very poor codegen for that</p>",
        "id": 252084415,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630856899
    },
    {
        "content": "<p>Essentially we lack a way of direct initialize a value in place</p>",
        "id": 252084517,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630857003
    },
    {
        "content": "<p>I believe <code>move_val_init</code> once allowed that, but that's removed</p>",
        "id": 252084533,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630857016
    },
    {
        "content": "<p>An alternative would be add a <code>Rvalue::InitBox</code> that casts a pointer (or <code>Box&lt;MaybeUninit&lt;T&gt;&gt;</code>) and converts it to a shallow-initialized <code>Box&lt;T&gt;</code>.</p>",
        "id": 252084671,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630857161
    },
    {
        "content": "<p>I think <code>Box&lt;!&gt;</code> should be invalid, but for inhabited types indeed I am voting for making validity shallow</p>",
        "id": 252088655,
        "sender_full_name": "RalfJ",
        "timestamp": 1630861455
    },
    {
        "content": "<p>Do we have any actual language invariants around box? If not my belief is that the correct approach is to have allocation and initialization separate. That is have a malloc call and make that raw ptr into a box part separate in the IR.</p>",
        "id": 252094324,
        "sender_full_name": "nagisa",
        "timestamp": 1630867746
    },
    {
        "content": "<p>This would in some ways interact with some conceptual &amp;own references better.</p>",
        "id": 252094349,
        "sender_full_name": "nagisa",
        "timestamp": 1630867782
    },
    {
        "content": "<p>Boxes can already be moved out anyway, so it isn't much of a stretch to say that <code>box expr</code> moves a value into the box after allocating it empty.</p>",
        "id": 252095202,
        "sender_full_name": "bjorn3",
        "timestamp": 1630868619
    },
    {
        "content": "<p>Currently we already have a separate allocation and initialization. Box nullary op creates an uninitialized box, and then we construct the value directly into the uninitialized box.</p>",
        "id": 252102056,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630876127
    },
    {
        "content": "<p>So the most straightforward way, as proposed in this MCP, is to make the former step a terminator so it can unwind.</p>",
        "id": 252102149,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630876215
    },
    {
        "content": "<p>I am still experimenting to see if there are other ways that can avoid adding new terminator though</p>",
        "id": 252102172,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630876250
    },
    {
        "content": "<p>just calling Alloc::alloc is equivalent to the terminator, right? Or in other words: what does llvm lower the terminator to?</p>",
        "id": 252150881,
        "sender_full_name": "oli",
        "timestamp": 1630921065
    },
    {
        "content": "<p>It is lowered to a lang item that is roughly calls <code>GlobalAlloc.alloc</code> I believe.</p>",
        "id": 252150978,
        "sender_full_name": "bjorn3",
        "timestamp": 1630921111
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20.60TerminatorKind.3A.3ABox.60.20to.20MIR.20compiler-team.23460/near/252150881\">said</a>:</p>\n<blockquote>\n<p>just calling Alloc::alloc is equivalent to the terminator, right? Or in other words: what does llvm lower the terminator to?</p>\n</blockquote>\n<p>Right. I don't see a good reason to special case box specifically if <code>box</code> is just a special case of a <code>call</code>. Even if we wanted to we could check if we're calling some specific language item or a trait method or whatever and act accordingly later down the line (in e.g. optimisations) too.</p>",
        "id": 252177427,
        "sender_full_name": "nagisa",
        "timestamp": 1630935716
    },
    {
        "content": "<p>(it was a special case in the past too, I guess, but more so in that it had consequences on the graph shape, and it wouldn't with this proposal implemented)</p>",
        "id": 252177634,
        "sender_full_name": "nagisa",
        "timestamp": 1630935837
    },
    {
        "content": "<p>Their return place has different types. <code>Box</code> terminator would have a <code>Box&lt;T&gt;</code>, while alloc gives <code>*mut u8</code>. And we couldn't just call a function that returns <code>Box&lt;T&gt;</code> as well; for a <code>_1 = Box;</code> call, the data flow analysis knows that <code>_1</code> is initialized while <code>(*_1)</code> is not. This isn't true for function calls.</p>",
        "id": 252203028,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630948814
    },
    {
        "content": "<p>Drop elaboration needs to know that as well.</p>",
        "id": 252203103,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630948858
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20.60TerminatorKind.3A.3ABox.60.20to.20MIR.20compiler-team.23460/near/252084671\">said</a>:</p>\n<blockquote>\n<p>An alternative would be add a <code>Rvalue::InitBox</code> that casts a pointer and converts it to a shallow-initialized <code>Box&lt;T&gt;</code>.</p>\n</blockquote>\n<p>However I have a working prototype of this approach now, and I think it's not bad. <code>InitBox</code> takes a <code>*mut u8</code> operand and converts it into a <code>Box&lt;T&gt;</code>, shallowly initialized. It can mostly reuse the old <code>Rvalue::NullaryOp(NullOp::Box, _)</code> code.</p>",
        "id": 252203306,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630948980
    },
    {
        "content": "<p>Take <code>box f()</code> as an example, previous MIR would be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_1</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">ty</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">bb0</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">_1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">bb1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">unwind</span><span class=\"w\"> </span><span class=\"n\">bb2</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>now it'll be</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_1</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_2</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">ty</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">bb0</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">box_new</span>::<span class=\"o\">&lt;</span><span class=\"n\">ty</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">bb1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">unwind</span><span class=\"w\"> </span><span class=\"n\">bb2</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">bb1</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">InitBox</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"n\">_1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">_2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">bb3</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">unwind</span><span class=\"w\"> </span><span class=\"n\">bb2</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(where <code>box_new</code> is <code>exchange_malloc</code>, but changed to accept a generic argument instead from taking size and align, which isn't easy to synthesize in MIR because we don't have <code>Rvalue::NullaryOp(NullOp::AlignOf)</code>)</p>",
        "id": 252204026,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630949384
    },
    {
        "content": "<p>The prototype is in PR <a href=\"https://github.com/rust-lang/rust/issues/88700\">#88700</a> now. Can some one gives it a try and perf run?</p>",
        "id": 252204855,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630949919
    },
    {
        "content": "<p>Done</p>",
        "id": 252205189,
        "sender_full_name": "Amanieu",
        "timestamp": 1630950161
    },
    {
        "content": "<p>Perf run has completed with quite large regression. It seems to me though the issue is largely with the additional monomorphizations of <code>box_new</code>.</p>",
        "id": 252245162,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630984378
    },
    {
        "content": "<p>Here are a few options that I can think of:</p>\n<ul>\n<li>Go with the <code>TerminatorKind::Box</code> approach, so the backend can still \"magically\" turn it into an <code>exchange_malloc</code>.</li>\n<li>Add a <code>Rvalue::NullaryOp(NullOp::AlignOf, _)</code> so we can generate a MIR call to <code>exchange_malloc</code> easily.</li>\n<li>Make <code>box_new</code> an intrinsics, and lower it to <code>exchange_malloc</code> in the backend.</li>\n</ul>",
        "id": 252245471,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630984738
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20.60TerminatorKind.3A.3ABox.60.20to.20MIR.20compiler-team.23460/near/252203028\">said</a>:</p>\n<blockquote>\n<p>Their return place has different types. <code>Box</code> terminator would have a <code>Box&lt;T&gt;</code>, while alloc gives <code>*mut u8</code>. And we couldn't just call a function that returns <code>Box&lt;T&gt;</code> as well; for a <code>_1 = Box;</code> call, the data flow analysis knows that <code>_1</code> is initialized while <code>(*_1)</code> is not. This isn't true for function calls.</p>\n</blockquote>\n<p>if we desugar box syntax to a call to <code>Alloc::alloc</code> + write to that pointer + <code>Box(ptr, GlobalAlloc)</code> (which is just an <code>Rvalue::Aggregate</code>), then we do not have the initialization order problem, and the fallible part (<code>Alloc::alloc</code>) is now a terminator.</p>",
        "id": 252261951,
        "sender_full_name": "oli",
        "timestamp": 1630999241
    },
    {
        "content": "<p>Then we need to insert a free on the unwind bb, change Box to contain a raw pointer or make Unique a lang item, and make GlobalAlloc a lang item. It would be bad for codegen as well because it could no longer reuse the drop code.</p>",
        "id": 252301859,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631020114
    },
    {
        "content": "<p>Since boxes can be moved away, drop elaboration needs to handle a shallow initialized box anyway, so I think it's better to keep the current approach in general (as in create a shallow initialized Box and then initialized it).</p>",
        "id": 252302498,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631020410
    },
    {
        "content": "<p>Good point, thanks for elaborating.</p>",
        "id": 252305743,
        "sender_full_name": "oli",
        "timestamp": 1631021733
    },
    {
        "content": "<p>So... my favourite approach would be</p>",
        "id": 252306092,
        "sender_full_name": "oli",
        "timestamp": 1631021878
    },
    {
        "content": "<blockquote>\n<p>Add a Rvalue::NullaryOp(NullOp::AlignOf, _) so we can generate a MIR call to exchange_malloc easily.</p>\n</blockquote>",
        "id": 252306097,
        "sender_full_name": "oli",
        "timestamp": 1631021880
    },
    {
        "content": "<p>Can I request another perf run of <a href=\"https://github.com/rust-lang/rust/issues/88700\">#88700</a> please?</p>",
        "id": 252331936,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631031947
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303710\">@Gary Guo</span> It appears to be failing CI at the moment?</p>",
        "id": 252332906,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1631032331
    },
    {
        "content": "<p>This is an experimental, so I haven't bothered to fix all the CI issues and bless the tests.</p>",
        "id": 252333060,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631032396
    },
    {
        "content": "<p>launched perf#</p>",
        "id": 252333236,
        "sender_full_name": "oli",
        "timestamp": 1631032463
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20.60TerminatorKind.3A.3ABox.60.20to.20MIR.20compiler-team.23460/near/252333060\">said</a>:</p>\n<blockquote>\n<p>This is an experimental, so I haven't bothered to fix all the CI issues and bless the tests.</p>\n</blockquote>\n<p>Ah, I had assumed that <code>@bors try</code> would fail if CI failed.</p>",
        "id": 252334431,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1631032948
    },
    {
        "content": "<p>Perf run completed, mostly neutral in terms of performance, some regression on LLVM time.</p>",
        "id": 252367373,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631046555
    },
    {
        "content": "<p>So I guess add <code>Rvalue::InitBox</code> and <code>Rvalue::NullaryOp(NullOp::AlignOf)</code> would work, there is no need for an extra terminator.</p>",
        "id": 252367562,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631046639
    },
    {
        "content": "<p>Shall I close this MCP and open a new one?</p>",
        "id": 252367572,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631046647
    },
    {
        "content": "<p>BTW, reason for LLVM time regression: with this change <code>invoke</code> is used for <code>exchange_malloc</code> instead of <code>call</code>, so it's now up to LLVM to determine that <code>exchange_malloc</code> won't unwind and optimize <code>invoke</code> back to <code>call</code>.</p>",
        "id": 252368405,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631047002
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20.60TerminatorKind.3A.3ABox.60.20to.20MIR.20compiler-team.23460/near/252367562\">said</a>:</p>\n<blockquote>\n<p>So I guess add <code>Rvalue::InitBox</code> and <code>Rvalue::NullaryOp(NullOp::AlignOf)</code> would work, there is no need for an extra terminator.</p>\n</blockquote>\n<p>what do you think about just <code>Rvalue::InitPlace</code>? May be useful for moving deaggregation before elaborate drops</p>",
        "id": 252412780,
        "sender_full_name": "oli",
        "timestamp": 1631082617
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20.60TerminatorKind.3A.3ABox.60.20to.20MIR.20compiler-team.23460/near/252367572\">said</a>:</p>\n<blockquote>\n<p>Shall I close this MCP and open a new one?</p>\n</blockquote>\n<p>nah, just treat it as the new thing <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 252412827,
        "sender_full_name": "oli",
        "timestamp": 1631082647
    },
    {
        "content": "<p>What other type would InitPlace be useful?</p>",
        "id": 252429860,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631092843
    },
    {
        "content": "<p>All Adts. Basically if we transform <code>let x = Struct { a: 42, b: 43};</code> into <code>let x; x.a = 42; x.b = 43;</code>, which is what deaggregation does, we'll need a marker for borrowck and drop elab</p>",
        "id": 252438172,
        "sender_full_name": "oli",
        "timestamp": 1631097583
    },
    {
        "content": "<p>hold up XD, I think I misunderstood InitBox</p>",
        "id": 252440836,
        "sender_full_name": "oli",
        "timestamp": 1631099119
    },
    {
        "content": "<p>it's essentially an <code>Rvalue::Use</code>, but allows uninit input?</p>",
        "id": 252440884,
        "sender_full_name": "oli",
        "timestamp": 1631099151
    },
    {
        "content": "<p>We could have a sort of <code>StatementKind::MarkInit</code> that doesn't create a new place, but marks an existing one as fully init. Is that equivalent or am I still misunderstanding things?</p>",
        "id": 252441206,
        "sender_full_name": "oli",
        "timestamp": 1631099326
    },
    {
        "content": "<p>I think I give it a bad name. InitBox currently converts a *mut u8 to a shallow-initialized Box&lt;T&gt;.</p>",
        "id": 252441301,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631099386
    },
    {
        "content": "<p>I actually want to just call it Box but due to usage of <code>use Rvalue::*</code> it will cause conflict</p>",
        "id": 252441443,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631099457
    },
    {
        "content": "<p>heh</p>",
        "id": 252441457,
        "sender_full_name": "oli",
        "timestamp": 1631099466
    },
    {
        "content": "<p>so... it's still a Use, but also transmutes XD</p>",
        "id": 252441504,
        "sender_full_name": "oli",
        "timestamp": 1631099493
    },
    {
        "content": "<p>Pretty much :)</p>",
        "id": 252441517,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631099505
    },
    {
        "content": "<p>Essentially I just split the current NullOp::Box into two operations</p>",
        "id": 252441665,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631099569
    },
    {
        "content": "<p>We've talked before about Use being allowed to transmute. Maybe just add <code>UnOp::Transmute</code>? Not sure if I'm serious, should run it past wg-mir-opt, but feels right to me</p>",
        "id": 252441770,
        "sender_full_name": "oli",
        "timestamp": 1631099637
    },
    {
        "content": "<p>oh tbh Use could be <code>UnOp::Identity</code></p>",
        "id": 252441873,
        "sender_full_name": "oli",
        "timestamp": 1631099674
    },
    {
        "content": "<p>The op is special though because it gets <code>RvalueInitializationState::Shallow</code> rather than <code>Deep</code>.</p>",
        "id": 252442011,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631099743
    },
    {
        "content": "<p>anyway, just to be entirely clear: is there zero difference in your borrowck and other changes between Use and InitBox, other than the fact that the types don't need to match?</p>",
        "id": 252442018,
        "sender_full_name": "oli",
        "timestamp": 1631099747
    },
    {
        "content": "<p>heh, there we go</p>",
        "id": 252442041,
        "sender_full_name": "oli",
        "timestamp": 1631099759
    },
    {
        "content": "<p>There was some effort to make transmute a mir primitive IIRC, but don't remember what the outcomes of that were.</p>",
        "id": 252442303,
        "sender_full_name": "nagisa",
        "timestamp": 1631099867
    },
    {
        "content": "<p>Then let's call it <code>ShallowInit</code>?</p>",
        "id": 252442318,
        "sender_full_name": "oli",
        "timestamp": 1631099874
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20.60TerminatorKind.3A.3ABox.60.20to.20MIR.20compiler-team.23460/near/252442303\">said</a>:</p>\n<blockquote>\n<p>There was some effort to make transmute a mir primitive IIRC, but don't remember what the outcomes of that were.</p>\n</blockquote>\n<p>never implemented, but apparently also irrelevant here, I misunderstood things</p>",
        "id": 252442387,
        "sender_full_name": "oli",
        "timestamp": 1631099895
    },
    {
        "content": "<p>Maybe <code>ShallowInitBox</code>? Still want <code>Box</code> to be part of its name.</p>",
        "id": 252442476,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631099946
    },
    {
        "content": "<p>fine by me, only used for box rn, we can always rename if we figure out a better way</p>",
        "id": 252442520,
        "sender_full_name": "oli",
        "timestamp": 1631099976
    },
    {
        "content": "<p>still sad that the Box&lt;Maybeuninit&gt; and transmute thing doesn't optimize as well</p>",
        "id": 252442628,
        "sender_full_name": "oli",
        "timestamp": 1631100015
    },
    {
        "content": "<p>from the mir perspective that seems like the right thing</p>",
        "id": 252442664,
        "sender_full_name": "oli",
        "timestamp": 1631100040
    },
    {
        "content": "<p>Perf seems to be quite sensitive to Box, like even just adding a <code>box_new</code> blew the compilation time by extra monomorphizations.</p>",
        "id": 252443158,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631100303
    },
    {
        "content": "<p>one thing you can try out in a separate PR is to add AlignOf and give it a match arm in <a href=\"https://github.com/rust-lang/rust/blob/434cb437b55d61bcb54a01921de7ac752e6dee13/compiler/rustc_mir/src/transform/lower_intrinsics.rs#L95\">https://github.com/rust-lang/rust/blob/434cb437b55d61bcb54a01921de7ac752e6dee13/compiler/rustc_mir/src/transform/lower_intrinsics.rs#L95</a></p>",
        "id": 252443678,
        "sender_full_name": "oli",
        "timestamp": 1631100616
    },
    {
        "content": "<p>this by itself may affect perf</p>",
        "id": 252443687,
        "sender_full_name": "oli",
        "timestamp": 1631100626
    },
    {
        "content": "<p>I've included it in the experiment PR already</p>",
        "id": 252445209,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631101387
    },
    {
        "content": "<p>Do you mean try a perf run with just AlignOf?</p>",
        "id": 252445263,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631101413
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20.60TerminatorKind.3A.3ABox.60.20to.20MIR.20compiler-team.23460/near/252445263\">said</a>:</p>\n<blockquote>\n<p>Do you mean try a perf run with just AlignOf?</p>\n</blockquote>\n<p>yea, but it's not important, we can do the combined thing</p>",
        "id": 252600718,
        "sender_full_name": "oli",
        "timestamp": 1631181985
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20.60TerminatorKind.3A.3ABox.60.20to.20MIR.20compiler-team.23460/near/252445209\">said</a>:</p>\n<blockquote>\n<p>I've included it in the experiment PR already</p>\n</blockquote>\n<p>great!</p>",
        "id": 252600728,
        "sender_full_name": "oli",
        "timestamp": 1631181995
    },
    {
        "content": "<p>I filed AlignOf as a separate PR in <a href=\"https://github.com/rust-lang/rust/issues/88839\">#88839</a>.</p>",
        "id": 252866557,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631318376
    },
    {
        "content": "<p>I've written up the new approach in the MCP.</p>",
        "id": 253020293,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631490280
    },
    {
        "content": "<p>So to make sure I understand correctly -- the operational behavior of <code>ShallowInitBox</code> is to simply transmute the ptr from <code>*mut u8</code>  to <code>Box&lt;T&gt;</code>; the only thing that is special is that the type checker treats the contents of the box as not initialized?</p>",
        "id": 253612975,
        "sender_full_name": "RalfJ",
        "timestamp": 1631811092
    },
    {
        "content": "<p>Yes</p>",
        "id": 253613518,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631811256
    },
    {
        "content": "<p>The current behaviour of <code>NullOp::Box</code> is call <code>exchange_malloc</code> and then transmute the ptr from <code>*mut u8</code> to a shallow-init <code>Box&lt;T&gt;</code>, and the proposal is to split it into an explicit <code>exchange_malloc</code> call and a <code>ShallowInitBox</code> that does the later part.</p>",
        "id": 253613780,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631811362
    },
    {
        "content": "<p>okay. the MCP is not quite clear about what the operator actually <em>does</em> (what do Miri/codegen have to do with it) so I found it rather confusing.</p>",
        "id": 253613845,
        "sender_full_name": "RalfJ",
        "timestamp": 1631811376
    },
    {
        "content": "<p>Added a line to the MCP to clarify the operational behaviour.</p>",
        "id": 253615264,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631811865
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303710\">@Gary Guo</span> thanks, that helps a lot!</p>",
        "id": 253637104,
        "sender_full_name": "RalfJ",
        "timestamp": 1631820482
    }
]