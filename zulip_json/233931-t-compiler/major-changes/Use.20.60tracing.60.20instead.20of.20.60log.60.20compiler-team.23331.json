[
    {
        "content": "<p><code>tracing</code> is great. Recently we ported the code-base at my $DAYJOB and being able to just register a new subscriber such as <a href=\"https://docs.rs/tracing-tracy/0.1.2/tracing_tracy/\">tracing-tracy</a> to quickly expose the codebase to a full blown profiling tool has proved to be super helpful. I don’t think there exists yet a subscriber that outputs traces in e.g. a format that measureme or chromium devtools/firefox profiler understand, but that's something that will inevitably happen.</p>\n<p>That said, once we have some experience with tracing I suspect that we might want to port various ways to produce trace data (<code>-Zself-profile</code>) to tracing as well.</p>",
        "id": 203593171,
        "sender_full_name": "nagisa",
        "timestamp": 1594467991
    },
    {
        "content": "<p>@rustbot thirded ^^</p>",
        "id": 203593174,
        "sender_full_name": "nagisa",
        "timestamp": 1594467998
    },
    {
        "content": "<p>Do we have a plan for which subscriber to use? Cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> </p>\n<p>Step 2 looks like a lot of work too - maybe we don't need to make that replacement immediately and can do it as needed/wanted? It's not clear to me when a value is preferred over inclusion in the format string explicitly</p>",
        "id": 203599116,
        "sender_full_name": "simulacrum",
        "timestamp": 1594478159
    },
    {
        "content": "<p>how this issue is presented seems to suggest there was a discussion about this, because it does not say why tracing should be adopted</p>",
        "id": 203603518,
        "sender_full_name": "Tshepang Lekhonkhobe",
        "timestamp": 1594484790
    },
    {
        "content": "<p>There has been some discussion, most recently <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/anon_const_instance_printing/near/203584713\">https://rust-lang.zulipchat.com/#narrow/stream/146212-t-compiler.2Fconst-eval/topic/anon_const_instance_printing/near/203584713</a> but also over in wg-traits at <a href=\"#narrow/stream/144729-wg-traits/topic/tracing-tree/near/203605486\">https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits/topic/tracing-tree/near/203605486</a> and <a href=\"#narrow/stream/144729-wg-traits/topic/tracing.20in.20chalk/near/192424178\">https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits/topic/tracing.20in.20chalk/near/192424178</a> (a bit older)</p>",
        "id": 203605805,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594488642
    },
    {
        "content": "<p>To summarize the general idea of it:</p>",
        "id": 203605818,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594488669
    },
    {
        "content": "<p>Tracing offers a lot of support for being able to capture <em>hierarchical</em> data</p>",
        "id": 203605831,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594488710
    },
    {
        "content": "<p>In Chalk, this is super helpful if we consider that we trying recursively try to solve goals</p>",
        "id": 203605881,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594488755
    },
    {
        "content": "<p>In rustc, this kind of patterns comes up a lot too</p>",
        "id": 203605885,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594488774
    },
    {
        "content": "<p>But as <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> said, tracing also offers a lot in terms of the subscribers that you can use</p>",
        "id": 203605966,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594488905
    },
    {
        "content": "<p>One benefit of tracing is that with some subscribers you get an ability to combine events (e.g. log messages) and spans in a single unified infrastructure. I don’t know if <code>measureme</code> currently drains the log messages as events for exposition in those same chrome devtools, but its definitely something that I would find super useful if I ever needed to spelunk logs.</p>",
        "id": 203610742,
        "sender_full_name": "nagisa",
        "timestamp": 1594496995
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Use.20.60tracing.60.20instead.20of.20.60log.60.20compiler-team.23331/near/203599116\">said</a>:</p>\n<blockquote>\n<p>Do we have a plan for which subscriber to use? Cc <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> </p>\n</blockquote>\n<p>Hmm... I was just gonna use the official <code>tracing_subscriber::fmt::Subscriber</code> with the env filter, which gives us the existing behaviour. Then we can fine tune it. Likely once we start using spans, we'll need to figure out something better, because otherwise each log message becomes <em>very</em> long</p>\n<blockquote>\n<p>Step 2 looks like a lot of work too - maybe we don't need to make that replacement immediately and can do it as needed/wanted? </p>\n</blockquote>\n<p>oh yea, definitely, I didn't mean that as a single enormous step, we can do this like when we moved to rustfmt by rustfmting a crate or module at a time. </p>\n<blockquote>\n<p>It's not clear to me when a value is preferred over inclusion in the format string explicitly</p>\n</blockquote>\n<p>basically whenever the format string contains <code>foo = {:?}</code> you'll definitely want value printing. With a custom filter we could make events with certain values influence logging (e.g. only start logging after a certain value has been hit), so if things are values you can actually use them for such filters</p>",
        "id": 203636490,
        "sender_full_name": "oli",
        "timestamp": 1594547476
    },
    {
        "content": "<p>hmm</p>",
        "id": 203648314,
        "sender_full_name": "simulacrum",
        "timestamp": 1594568125
    },
    {
        "content": "<p>I'm still not quite sold on the value printing, to be honest -- it seems useful in theory, I guess, but I don't know that I'd want to rewrite existing code to use it (vs. doing so when we actually have use cases)</p>",
        "id": 203648397,
        "sender_full_name": "simulacrum",
        "timestamp": 1594568196
    },
    {
        "content": "<p>to take a concrete example that I just randomly found, for <a href=\"https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src/librustc_parse/lexer/mod.rs#L125\">https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src/librustc_parse/lexer/mod.rs#L125</a> -- it seems like it's not obvious that we want to pull those values out separately, because it makes reading the log possibly harder</p>",
        "id": 203648457,
        "sender_full_name": "simulacrum",
        "timestamp": 1594568302
    },
    {
        "content": "<p>yea, that case doesn't look like a case we should change mechanically</p>",
        "id": 203650626,
        "sender_full_name": "oli",
        "timestamp": 1594571868
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/0c03aee8b81185d65b5821518661c30ecdb42de5/src/librustc_mir/transform/check_consts/validation.rs#L264\">this</a> is a case I would change though</p>",
        "id": 203650685,
        "sender_full_name": "oli",
        "timestamp": 1594571974
    },
    {
        "content": "<p>hm okay -- maybe it makes sense to say a bit more about that in the proposal? I do think we might want something like a proc macro which to start would do the standard function and args logging and eventually maybe span-ify the function call</p>",
        "id": 203650978,
        "sender_full_name": "simulacrum",
        "timestamp": 1594572385
    },
    {
        "content": "<p>That sounds awfully like the <code>#[instrument]</code> macro, if I understand you correctly</p>",
        "id": 203653520,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594576154
    },
    {
        "content": "<p>hm, yes, that looks pretty close</p>",
        "id": 203653678,
        "sender_full_name": "simulacrum",
        "timestamp": 1594576409
    },
    {
        "content": "<p>not sure if it gets 100% of the way there</p>",
        "id": 203653684,
        "sender_full_name": "simulacrum",
        "timestamp": 1594576417
    },
    {
        "content": "<p>I know that tracing folk have said that they'd like to have better knobs for what <code>instrument</code> does/how it does it. For example, it doesn't work great for the playground's HTTP endpoints because I don't want to log the user's code but I do want to log every other parameter</p>",
        "id": 203653919,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594576748
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> for <code>-Z self-profile</code> we probably would want to integrate <code>tracing</code> in <code>rustc_data_structures::profiling</code> (which probably should just be <code>rustc_self_profiling</code> or something), and have that integration completely bypassed when using <code>-Z self-profile</code> without <code>tracing</code></p>",
        "id": 203670355,
        "sender_full_name": "eddyb",
        "timestamp": 1594603567
    },
    {
        "content": "<p>that's because I expect logging (especially string formatting) to have an order of magnitude (or worse) overhead compared to <code>measureme</code>, and it would impact measurements</p>",
        "id": 203670377,
        "sender_full_name": "eddyb",
        "timestamp": 1594603619
    },
    {
        "content": "<p>well yeah, it can be something on top</p>",
        "id": 203670384,
        "sender_full_name": "nagisa",
        "timestamp": 1594603637
    },
    {
        "content": "<p>FWIW I did start <a href=\"https://github.com/rust-lang/measureme/pull/120\">https://github.com/rust-lang/measureme/pull/120</a> though I didn’t benchmark it yet.</p>",
        "id": 203670387,
        "sender_full_name": "nagisa",
        "timestamp": 1594603654
    },
    {
        "content": "<p>we already wrap the <code>measureme</code> API to handle a basic filtering function and whatnot so I think that's the best place to integrate it</p>",
        "id": 203670389,
        "sender_full_name": "eddyb",
        "timestamp": 1594603660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> hmm maybe I should hurry with my <code>rdpmc</code> integration, so we can actually measure that properly :P</p>",
        "id": 203670430,
        "sender_full_name": "eddyb",
        "timestamp": 1594603694
    },
    {
        "content": "<p><code>measureme</code> is sadly too noisy atm due to using time, which as we all know, is a comfortable lie and nothing more,</p>",
        "id": 203670449,
        "sender_full_name": "eddyb",
        "timestamp": 1594603723
    },
    {
        "content": "<p>ability to integrate the queries that we measure with random <code>#[instrument]</code> spans elsewhere in the codebase would be cool.</p>",
        "id": 203670453,
        "sender_full_name": "nagisa",
        "timestamp": 1594603731
    },
    {
        "content": "<p>I definitely want <code>tracing</code> for getting a very in-depth view of what the compiler does and I'm willing to pay some extra cost for it, but maybe we can do stuff like sampling <code>rdpmc</code> before and after doing string formatting, to subtract that cost</p>",
        "id": 203670468,
        "sender_full_name": "eddyb",
        "timestamp": 1594603783
    },
    {
        "content": "<p>if we can have our cake and measure it too, that'd be really useful</p>",
        "id": 203670512,
        "sender_full_name": "eddyb",
        "timestamp": 1594603803
    },
    {
        "content": "<p>I think its plausible to avoid formatting at the tracing layer entirely (provided we don’t register the stdout/logging subscriber at all unless asked)</p>",
        "id": 203670521,
        "sender_full_name": "nagisa",
        "timestamp": 1594603830
    },
    {
        "content": "<p>completely unrelatedly, I ran <code>cargo rustc -- -C llvm-args=-print-after-all</code> on a crate that takes 14 seconds to compile in non-incremental release mode</p>",
        "id": 203670533,
        "sender_full_name": "eddyb",
        "timestamp": 1594603841
    },
    {
        "content": "<p>and it took almost <em>4 hours</em>, producing a 17 GB file, with just over <em>200 million</em> lines in it</p>",
        "id": 203670560,
        "sender_full_name": "eddyb",
        "timestamp": 1594603920
    },
    {
        "content": "<p>(although it's possible <code>-Z no-parallel-llvm</code>, which you need for coherent output, was part of the slowdown)</p>",
        "id": 203670603,
        "sender_full_name": "eddyb",
        "timestamp": 1594603951
    },
    {
        "content": "<p>wow.</p>",
        "id": 203670615,
        "sender_full_name": "nagisa",
        "timestamp": 1594603969
    },
    {
        "content": "<p>the worst part is that the thing I wanted to find in there wasn't even clearly visible (there were two many differences other than the one I was looking for - yeah, I ran 2 builds of 4h each)</p>",
        "id": 203670620,
        "sender_full_name": "eddyb",
        "timestamp": 1594603984
    },
    {
        "content": "<p>but it was only as an experiment / out of curiosity, having already found what I needed by modifying the source to only codegen one function (and its transitive callees)</p>",
        "id": 203670631,
        "sender_full_name": "eddyb",
        "timestamp": 1594604024
    },
    {
        "content": "<p>anyway, all in all, I'm excited for our traceable future :D</p>",
        "id": 203670678,
        "sender_full_name": "eddyb",
        "timestamp": 1594604068
    },
    {
        "content": "<p>oh and maybe we can start replacing boring <code>debug!</code> calls with <code>#[instrument]</code></p>",
        "id": 203670691,
        "sender_full_name": "eddyb",
        "timestamp": 1594604091
    },
    {
        "content": "<p>I guess we should prioritize making the breaking change to <code>#[instrument]</code> where you need to _opt-in_ what parameters you want recorded, as opposed to opting out. i'll see how quickly we can get that supported and landed.</p>",
        "id": 203729218,
        "sender_full_name": "David Barsky",
        "timestamp": 1594653930
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198819\">@David Barsky</span> Perhaps instead of making a breaking change there could be another keyword similar to skip, something like <code>#[instrument(only(a, b)]</code> to only record the listed parameters.</p>",
        "id": 203739333,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1594659069
    },
    {
        "content": "<p>Can you cut a ticket/suggestion about this on <a href=\"https://github.com/tokio-rs/tracing/issues\">https://github.com/tokio-rs/tracing/issues</a>? it'd help us track that/prioritize it</p>",
        "id": 203740164,
        "sender_full_name": "David Barsky",
        "timestamp": 1594659472
    },
    {
        "content": "<p>(i'm sorry, i've got to run to a work meeting now)</p>",
        "id": 203740208,
        "sender_full_name": "David Barsky",
        "timestamp": 1594659482
    },
    {
        "content": "<p>This proposal has been accepted: <a href=\"https://github.com/rust-lang/compiler-team/issues/331\">#331</a>.</p>",
        "id": 204682798,
        "sender_full_name": "triagebot",
        "timestamp": 1595432317
    }
]