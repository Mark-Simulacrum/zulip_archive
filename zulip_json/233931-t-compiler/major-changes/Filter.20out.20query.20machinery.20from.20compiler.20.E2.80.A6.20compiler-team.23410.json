[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/compiler-team/issues/410\">Filter out query machinery from compiler backtraces by default #410</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 228750078,
        "sender_full_name": "triagebot",
        "timestamp": 1614854589
    },
    {
        "content": "<p>oO that proposd implementation sounds a lot like a built-in hacky version of <a href=\"https://github.com/dtolnay/linkme\">https://github.com/dtolnay/linkme</a>, or am I misunderstanding? Cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 228752581,
        "sender_full_name": "RalfJ",
        "timestamp": 1614855916
    },
    {
        "content": "<p>it's pretty much exactly that, except imo it's less hacky than the <code>linkme</code> crate, as it does not rely on linker functionality. It's the MVP needed for <a href=\"https://github.com/rust-lang/const-eval/issues/25#issuecomment-533840428\">https://github.com/rust-lang/const-eval/issues/25#issuecomment-533840428</a> (which itself is desirable for custom test harnesses, tracing metadata and custom const-evaluated artifacts).</p>",
        "id": 228753293,
        "sender_full_name": "oli",
        "timestamp": 1614856259
    },
    {
        "content": "<p>I'm a bit surprised by the lexical order claim - is this performance sensitive for some reason? Seems fine, just interested if my assumption is wrong that it shouldn't really be called often</p>",
        "id": 228763623,
        "sender_full_name": "simulacrum",
        "timestamp": 1614861186
    },
    {
        "content": "<p>the list may get very big, I don't know. And we would have to walk it for every frame in the backtrace. But even so, I don't like having constants whose value depends on arbitrary decisions by the compiler</p>",
        "id": 228763841,
        "sender_full_name": "oli",
        "timestamp": 1614861273
    },
    {
        "content": "<p>Sure, was just wondering.</p>",
        "id": 228764106,
        "sender_full_name": "simulacrum",
        "timestamp": 1614861393
    },
    {
        "content": "<p>I was just doing premature optimizations. It would indeed be easier to just append them and not do any sorting, so we may just start out like this until we have a significant number of things marked</p>",
        "id": 228767905,
        "sender_full_name": "oli",
        "timestamp": 1614863064
    },
    {
        "content": "<p>I'll adjust the MCP accordingly</p>",
        "id": 228767919,
        "sender_full_name": "oli",
        "timestamp": 1614863074
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I think the reproducible builds argument is worthwhile, FWIW</p>",
        "id": 228772751,
        "sender_full_name": "simulacrum",
        "timestamp": 1614865066
    },
    {
        "content": "<p>I also want to note that symbol names might not be the best thing - those aren't necessarily available at runtime and are relatively expensive to resolve, maybe we can just store the ip addresses? (i.e. function pointers without the type signature basically)</p>",
        "id": 228772997,
        "sender_full_name": "simulacrum",
        "timestamp": 1614865161
    },
    {
        "content": "<p>hmm... I think I know how to implement that, but it may not actually work in practice if a function is duplicated, as it has multiple addresses then</p>",
        "id": 228776871,
        "sender_full_name": "oli",
        "timestamp": 1614866609
    },
    {
        "content": "<p>we can start with that and see how it goes</p>",
        "id": 228776896,
        "sender_full_name": "oli",
        "timestamp": 1614866623
    },
    {
        "content": "<p>Hm, yes</p>",
        "id": 228777127,
        "sender_full_name": "simulacrum",
        "timestamp": 1614866708
    },
    {
        "content": "<p>But surely the symbol name is then also not going to work? Unless it's the post demangling symbol... Maybe?</p>",
        "id": 228777214,
        "sender_full_name": "simulacrum",
        "timestamp": 1614866745
    },
    {
        "content": "<p>idk, I like the pointer idea and will start with that and see how it fares</p>",
        "id": 228777586,
        "sender_full_name": "oli",
        "timestamp": 1614866891
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> anyway happy to second, not sure if you wanted Felix to take a look specifically</p>",
        "id": 228787324,
        "sender_full_name": "simulacrum",
        "timestamp": 1614870266
    },
    {
        "content": "<p>I can likely also review impl, though depends on how involved with metadata it gets</p>",
        "id": 228787345,
        "sender_full_name": "simulacrum",
        "timestamp": 1614870279
    },
    {
        "content": "<p>I talked about this with felix, not the impl, just the idea. So it's not blocked on them</p>",
        "id": 228787465,
        "sender_full_name": "oli",
        "timestamp": 1614870330
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span>: Proposal <a href=\"https://github.com/rust-lang/compiler-team/issues/410#issuecomment-790686340\">#410</a> has been seconded, and will be approved in 10 days if no objections are raised.</p>",
        "id": 228788078,
        "sender_full_name": "triagebot",
        "timestamp": 1614870539
    },
    {
        "content": "<p>This topic was moved by <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> to <a class=\"stream-topic\" data-stream-id=\"146212\" href=\"/#narrow/stream/146212-t-compiler.2Fconst-eval/topic/aggregate.20arbitrary.20constants.20at.20compile-time.20into.20a.20sing.2E.2E.2E\">#t-compiler/const-eval &gt; aggregate arbitrary constants at compile-time into a sing...</a></p>",
        "id": 228935071,
        "sender_full_name": "Notification Bot",
        "timestamp": 1614942370
    },
    {
        "content": "<p>This proposal has been accepted: <a href=\"https://github.com/rust-lang/compiler-team/issues/410\">#410</a>.</p>",
        "id": 231877820,
        "sender_full_name": "triagebot",
        "timestamp": 1616707190
    }
]