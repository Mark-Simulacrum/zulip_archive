[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/compiler-team/issues/374\">TypeVisitor: use ops::ControlFlow instead of bool #374</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 213916879,
        "sender_full_name": "triagebot",
        "timestamp": 1603199880
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span>: Proposal <a href=\"https://github.com/rust-lang/compiler-team/issues/374#issuecomment-712845467\">#374</a> has been seconded, and will be approved in 10 days if no objections are raised.</p>",
        "id": 213917449,
        "sender_full_name": "triagebot",
        "timestamp": 1603200112
    },
    {
        "content": "<p>Seems reasonable, I get confused about what the bool means all the time</p>",
        "id": 213917549,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1603200138
    },
    {
        "content": "<p>yea, I'm all for using an explicit enum</p>",
        "id": 213917601,
        "sender_full_name": "oli",
        "timestamp": 1603200161
    },
    {
        "content": "<p>The only change that we could do is create ZSTs other than <code>()</code> that convey their meaning via their name</p>",
        "id": 213917689,
        "sender_full_name": "oli",
        "timestamp": 1603200199
    },
    {
        "content": "<p>like not even associated types, but just two global Zsts that we'd use</p>",
        "id": 213917739,
        "sender_full_name": "oli",
        "timestamp": 1603200219
    },
    {
        "content": "<p>what do you mean here?</p>",
        "id": 213917757,
        "sender_full_name": "lcnr",
        "timestamp": 1603200229
    },
    {
        "content": "<p>rn we can use both <code>ControlFlow::BREAK</code> and <code>ControlFlow::CONTINUE</code></p>",
        "id": 213917834,
        "sender_full_name": "lcnr",
        "timestamp": 1603200244
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> yea, don't mind me... I forgot the <code>()</code> are just extra data</p>",
        "id": 213917922,
        "sender_full_name": "oli",
        "timestamp": 1603200285
    },
    {
        "content": "<p>a bit unrelated, but for <a href=\"https://github.com/rust-lang/rust/issues/77307\">#77307</a> it would be nice to exit the <code>mir::Visitor</code> early, is there a reason we do not allow early exits there?</p>",
        "id": 213918210,
        "sender_full_name": "lcnr",
        "timestamp": 1603200419
    },
    {
        "content": "<p>visitors generally visit everything. I've had this problem before, too. One way would be to make the return value of the visitor a <code>Result</code> with an associated error type</p>",
        "id": 213918392,
        "sender_full_name": "oli",
        "timestamp": 1603200501
    },
    {
        "content": "<p>I would have opened an MCP for also using <code>ops::ControlFlow</code> there</p>",
        "id": 213918451,
        "sender_full_name": "lcnr",
        "timestamp": 1603200530
    },
    {
        "content": "<p>if you think that this is sensible</p>",
        "id": 213918520,
        "sender_full_name": "lcnr",
        "timestamp": 1603200566
    },
    {
        "content": "<p>that is reasonable, I think we could actually make quite a few existing visitors simpler this way</p>",
        "id": 213918779,
        "sender_full_name": "oli",
        "timestamp": 1603200694
    },
    {
        "content": "<p>while having a non-error value to be bubbled up is hard because then you need to combine it and stuff, just the <code>Break</code> value can trivially get bubbled up</p>",
        "id": 213918879,
        "sender_full_name": "oli",
        "timestamp": 1603200734
    },
    {
        "content": "<p>So, just for reference, one of the things we've been talking about in wg-traits is adopting the Chalk model for Visitor to rustc</p>",
        "id": 213950742,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603214270
    },
    {
        "content": "<p>Interesting, the Visitor in Chalk can have any type of <code>VisitResult</code></p>",
        "id": 213950842,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603214303
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/blob/8f88cdf677552115ed40e853a3ff422f4d55ff21/chalk-ir/src/visit.rs#L19\"><code>VisitResult</code></a></p>",
        "id": 213950885,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603214320
    },
    {
        "content": "<p>Using this, there are different types of results, like <code>FindAny</code> or <code>ReturnEarly</code></p>",
        "id": 213951111,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603214409
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> Do you plan to do the refractor? Do you want me to do it?</p>",
        "id": 213977116,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1603226719
    },
    {
        "content": "<p>hmm, if you are interested in working on this go ahead <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> at least this isn't something we might end up having to discard :)</p>",
        "id": 213977362,
        "sender_full_name": "lcnr",
        "timestamp": 1603226851
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/76614\">https://github.com/rust-lang/rust/pull/76614</a> is open to swap the type arguments so that the future \"In the future we may change the used type to <code>std::ops::ControlFlow&lt;(), Self::BreakTy&gt;</code>\" would be <code>ControlFlow&lt;Self::BreakTy&gt;</code> instead.</p>\n<p><span class=\"user-mention\" data-user-id=\"337175\">@Leonora Tindall</span> Any status update on that PR?  It would be nice to get that in before a whole bunch new usage sites show up...</p>\n<p>(Though I guess if this MCP would only use <code>ControlFlow&lt;(), ()&gt;</code> (the control flow Owl) changing the order wouldn't matter.)</p>",
        "id": 213999300,
        "sender_full_name": "scottmcm",
        "timestamp": 1603243864
    },
    {
        "content": "<p>Aside: there were some conversations (<a href=\"https://github.com/rust-lang/rust/pull/76318#discussion_r483467298\">pr thread</a>, <a href=\"#narrow/stream/219381-t-libs/topic/Simplifying.20continue-with-unit.20in.20.60ControlFlow.60/near/209151522\">zulip link</a>) about whether <code>ControlFlow::BREAK</code> and <code>ControlFlow::CONTINUE</code> were the best way of exposing the <code>()</code> versions.  If anyone as part of using this develops opinions about that (<span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span>?), please let the tracking issue know (<a href=\"https://github.com/rust-lang/rust/issues/75744\">#75744</a>).</p>",
        "id": 213999744,
        "sender_full_name": "scottmcm",
        "timestamp": 1603244439
    },
    {
        "content": "<p>(In the compiler you can even use <code>try{}</code> instead of <code>ControlFlow::Continue(())</code>...)</p>",
        "id": 213999783,
        "sender_full_name": "scottmcm",
        "timestamp": 1603244523
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/rust-lang/rust/issues/78182\">#78182</a> to implement the MCP.</p>",
        "id": 214044822,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1603284722
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/TypeVisitor.3A.20use.20ops.3A.3AControlFlow.20instead.E2.80.A6.20compiler-team.23374/near/213999300\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/pull/76614\">https://github.com/rust-lang/rust/pull/76614</a> is open to swap the type arguments so that the future \"In the future we may change the used type to <code>std::ops::ControlFlow&lt;(), Self::BreakTy&gt;</code>\" would be <code>ControlFlow&lt;Self::BreakTy&gt;</code> instead.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"337175\">Leonora Tindall</span> Any status update on that PR?  It would be nice to get that in before a whole bunch new usage sites show up...</p>\n<p>(Though I guess if this MCP would only use <code>ControlFlow&lt;(), ()&gt;</code> (the control flow Owl) changing the order wouldn't matter.)</p>\n</blockquote>\n<p>Also a simple find and replace should be enough to change <code>ControlFlow&lt;(), ()&gt;</code> to <code>ControlFlow&lt;()&gt;</code></p>",
        "id": 214044990,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1603284804
    },
    {
        "content": "<p>This proposal has been accepted: <a href=\"https://github.com/rust-lang/compiler-team/issues/374\">#374</a>.</p>",
        "id": 215130130,
        "sender_full_name": "triagebot",
        "timestamp": 1604080974
    }
]