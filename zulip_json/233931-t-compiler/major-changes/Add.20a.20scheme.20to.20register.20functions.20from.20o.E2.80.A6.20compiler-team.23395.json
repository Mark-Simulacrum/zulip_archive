[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/compiler-team/issues/395\">Add a scheme to register functions from other crates with TyCtxt #395</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 221244385,
        "sender_full_name": "triagebot",
        "timestamp": 1609360507
    },
    {
        "content": "<p>could we use this for shrinking rustc_middle even more? :)</p>",
        "id": 221244488,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609360588
    },
    {
        "content": "<p>Could we generalize the query subsystem to have queries that do not cache results and thus have lower overhead and don't require stablehash?</p>",
        "id": 221244837,
        "sender_full_name": "nagisa",
        "timestamp": 1609360903
    },
    {
        "content": "<p>I think we already have a bunch of attributes on queries in that direction. I was mostly hoping for avoiding the query infrastructure entirely and just have a function pointer and a wrapper function that calls the pointer</p>",
        "id": 221245010,
        "sender_full_name": "oli",
        "timestamp": 1609361044
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20a.20scheme.20to.20register.20functions.20from.20o.E2.80.A6.20compiler-team.23395/near/221244488\">said</a>:</p>\n<blockquote>\n<p>could we use this for shrinking rustc_middle even more? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>I'm hoping for this to be a welcome side effect of such a system, yes</p>",
        "id": 221245027,
        "sender_full_name": "oli",
        "timestamp": 1609361069
    },
    {
        "content": "<p>I think the rust language in general could benefit from 'header files' where you can declare the function separately from implementing it</p>",
        "id": 221245032,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609361083
    },
    {
        "content": "<p>I guess that's traits?</p>",
        "id": 221245036,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609361086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> what's the difference between your idea and an extension trait?</p>",
        "id": 221245057,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609361098
    },
    {
        "content": "<p>well... in my scheme, you can invoke the function on <code>TyCtxt</code> in <code>rustc_middle</code> and define the function in <code>rustc_mir</code></p>",
        "id": 221245093,
        "sender_full_name": "oli",
        "timestamp": 1609361152
    },
    {
        "content": "<p>an extension trait must be either defined in the extern crate, in which case it can't be used in <code>rustc_middle</code></p>",
        "id": 221245096,
        "sender_full_name": "lcnr",
        "timestamp": 1609361156
    },
    {
        "content": "<p>or defined in <code>rustc_middle</code> to use it, in which case you can't externally implement it for <code>TyCtxt</code></p>",
        "id": 221245152,
        "sender_full_name": "lcnr",
        "timestamp": 1609361177
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span>: Proposal <a href=\"https://github.com/rust-lang/compiler-team/issues/395#issuecomment-752753218\">#395</a> has been seconded, and will be approved in 10 days if no objections are raised.</p>",
        "id": 221245165,
        "sender_full_name": "triagebot",
        "timestamp": 1609361192
    },
    {
        "content": "<p>Hmm, that makes sense</p>",
        "id": 221245197,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609361233
    },
    {
        "content": "<p>rust could benefit from \"header files\" or well, we could instead use extern functions</p>",
        "id": 221245201,
        "sender_full_name": "lcnr",
        "timestamp": 1609361236
    },
    {
        "content": "<p>and use <code>#[no_mangle]</code></p>",
        "id": 221245209,
        "sender_full_name": "lcnr",
        "timestamp": 1609361246
    },
    {
        "content": "<p>but that seems worse to me</p>",
        "id": 221245215,
        "sender_full_name": "lcnr",
        "timestamp": 1609361254
    },
    {
        "content": "<p>This sort of sounds like #[global_allocator] where there should only be one implementation but you don't care where it is</p>",
        "id": 221245220,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609361261
    },
    {
        "content": "<p>which is pretty much how header files work</p>",
        "id": 221245233,
        "sender_full_name": "lcnr",
        "timestamp": 1609361274
    },
    {
        "content": "<p>Yea, I'm looking for something that doesn't give linker errors ^^</p>",
        "id": 221245312,
        "sender_full_name": "oli",
        "timestamp": 1609361339
    },
    {
        "content": "<p>c is a nice language because it hides it's ugliness</p>",
        "id": 221245313,
        "sender_full_name": "lcnr",
        "timestamp": 1609361342
    },
    {
        "content": "<p>I think starting with traits or so is right, and if it gets too painful or performance cost is too high we can replace it with linker and compiler magic.</p>",
        "id": 221245330,
        "sender_full_name": "simulacrum",
        "timestamp": 1609361362
    },
    {
        "content": "<p>In my opinion, rustc_middle now essentially contains datatype definitions and the query system. Without the query system, it is essentially of the same size at rustc_typeck. This kind of forward declarations can make the call graph even more complex than it is now.</p>",
        "id": 221255709,
        "sender_full_name": "cjgillot",
        "timestamp": 1609371167
    },
    {
        "content": "<p>I think my only concern here is debuggability -- already with queries, it can be quite hard to figure out \"which code is executed by this function call\". Grepping for \"the query implementation\" is non-trivial. It would be good to consider this.</p>",
        "id": 221287854,
        "sender_full_name": "RalfJ",
        "timestamp": 1609418841
    },
    {
        "content": "<p>E.g., there could be some macro that is used for this such that one has some \"key\" to grep for.</p>",
        "id": 221287877,
        "sender_full_name": "RalfJ",
        "timestamp": 1609418867
    },
    {
        "content": "<p>This proposal has been accepted: <a href=\"https://github.com/rust-lang/compiler-team/issues/395\">#395</a>.</p>",
        "id": 222716419,
        "sender_full_name": "triagebot",
        "timestamp": 1610630981
    }
]