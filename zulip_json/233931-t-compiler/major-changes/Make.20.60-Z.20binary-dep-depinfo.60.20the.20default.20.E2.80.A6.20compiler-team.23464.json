[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/compiler-team/issues/464\">Make <code>-Z binary-dep-depinfo</code> the default behavior #464</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 254744952,
        "sender_full_name": "triagebot",
        "timestamp": 1632505882
    },
    {
        "content": "<p>I just want to say I support this MCP because cargo-udeps supports using binary depinfo  as a backend, and right now all backends are nightly only. this MCP would thus allow cargo-udeps to support stable compilers as well. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 254747786,
        "sender_full_name": "est31",
        "timestamp": 1632507010
    },
    {
        "content": "<p>For more, see: <a href=\"https://github.com/est31/cargo-udeps/issues/73\">https://github.com/est31/cargo-udeps/issues/73</a></p>",
        "id": 254747808,
        "sender_full_name": "est31",
        "timestamp": 1632507022
    },
    {
        "content": "<p>why does this need to be the default? it sounds like just stabilizing the flag would be enough</p>",
        "id": 254749670,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632507797
    },
    {
        "content": "<p>-Zbinary-dep-depinfo includes paths from the sysroot. This makes it dependent on the location of the rust installation. In addition the sysroot as a whole needs to be copied anyway if you want to run rustc.</p>",
        "id": 254749890,
        "sender_full_name": "bjorn3",
        "timestamp": 1632507898
    },
    {
        "content": "<p>It also includes the codegen backend path, which would force everything to be rebuilt every time you make a change to it, even if it is irrelevant to all successfully built crates.</p>",
        "id": 254750147,
        "sender_full_name": "bjorn3",
        "timestamp": 1632507988
    },
    {
        "content": "<p>Yea, I would expect an MCP to address the outstanding issues on the tracking issue. I think it also lacks a precise description of what it actually does.</p>",
        "id": 254751340,
        "sender_full_name": "Eric Huss",
        "timestamp": 1632508464
    },
    {
        "content": "<p>I'll note that the early impl was basically just intended to suite the use cases of rustc bootstrap, so any usage beyond that may work but is likely more accident than not.</p>",
        "id": 254751982,
        "sender_full_name": "simulacrum",
        "timestamp": 1632508733
    },
    {
        "content": "<p>I think this use case really wants \"all the non-sysroot files that rustc will open during compilation\", which also includes rlibs that are opened but not used and source files from external crates that define macros, for instance</p>",
        "id": 254758394,
        "sender_full_name": "tmandry",
        "timestamp": 1632511378
    },
    {
        "content": "<p>someone I work with is making a change to include these</p>",
        "id": 254758862,
        "sender_full_name": "tmandry",
        "timestamp": 1632511580
    },
    {
        "content": "<p>that seems like the behavior we'd want to stabilize, potentially behind a new flag</p>",
        "id": 254758952,
        "sender_full_name": "tmandry",
        "timestamp": 1632511620
    },
    {
        "content": "<p>I originally suggested making this default behavior to the MCP author because I thought it was fixing a more general problem of link deps missing from depfiles</p>",
        "id": 254759057,
        "sender_full_name": "tmandry",
        "timestamp": 1632511675
    },
    {
        "content": "<p>(which it might be, these are overlapping use cases)</p>",
        "id": 254759117,
        "sender_full_name": "tmandry",
        "timestamp": 1632511687
    },
    {
        "content": "<p>but <em>transitive</em> rlibs don't necessarily have to be included to address that issue, since (as the MCP says) they're redundant</p>",
        "id": 254759486,
        "sender_full_name": "tmandry",
        "timestamp": 1632511838
    },
    {
        "content": "<p>There are three use cases I see for dep-info:</p>\n<ol>\n<li>Getting the set of source files in a crate for dev tools</li>\n<li>Collecting dynamic dependencies so a build system knows to rebuild this crate when one of those deps changes</li>\n<li>Collecting the set of files that rustc needs to run in a sandboxed environment (needs source files, link deps, transitive closure of rlibs, external source files that macro spans point to, etc.)</li>\n</ol>",
        "id": 254759972,
        "sender_full_name": "tmandry",
        "timestamp": 1632512068
    },
    {
        "content": "<p>I'm trying to decide if (2) is really distinct from (1), since most build systems already know the set of link deps and rlibs, and only really need the set of source files</p>",
        "id": 254760635,
        "sender_full_name": "tmandry",
        "timestamp": 1632512368
    },
    {
        "content": "<p>I think they're the same</p>",
        "id": 254761662,
        "sender_full_name": "tmandry",
        "timestamp": 1632512802
    },
    {
        "content": "<p>So maybe we eventually want two output modes</p>",
        "id": 254761798,
        "sender_full_name": "tmandry",
        "timestamp": 1632512857
    },
    {
        "content": "<p>Or we decide there's no cost to including everything (3) needs by default</p>",
        "id": 254761884,
        "sender_full_name": "tmandry",
        "timestamp": 1632512884
    },
    {
        "content": "<p>You can compute (3) by taking the union of the depinfo for the current crate, all the depinfo files corresponding to direct dependencies in the depinfo transitively as provided by (2) and the compiler sysroot.</p>",
        "id": 254763338,
        "sender_full_name": "bjorn3",
        "timestamp": 1632513491
    },
    {
        "content": "<p>The sysroot files are explicitly the reason rustbuild uses it, fwiw, though it generally is intended as a way to offload most of the \"recompile if\" management to Cargo. Previously there were a lot more bugs because that responsibility was more extensively shared.</p>",
        "id": 254772431,
        "sender_full_name": "simulacrum",
        "timestamp": 1632517533
    }
]