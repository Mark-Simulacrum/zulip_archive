[
    {
        "content": "<p>A new proposal has been announced <a href=\"https://github.com/rust-lang/compiler-team/issues/315\">#315</a>. It will be brought up at the next meeting.</p>",
        "id": 201408566,
        "sender_full_name": "triagebot",
        "timestamp": 1592582002
    },
    {
        "content": "<p>This is arguably a public facing feature, so it may require full FCP checkoff</p>",
        "id": 201408853,
        "sender_full_name": "pnkfelix",
        "timestamp": 1592582167
    },
    {
        "content": "<p>Well, true, but we <em>did</em> <del>affect</del> approve the RFC</p>",
        "id": 201408881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592582184
    },
    {
        "content": "<p>approve it, you mean I assume</p>",
        "id": 201408900,
        "sender_full_name": "pnkfelix",
        "timestamp": 1592582193
    },
    {
        "content": "<p>there are some implementation details that are part of the public API</p>",
        "id": 201408925,
        "sender_full_name": "pnkfelix",
        "timestamp": 1592582208
    },
    {
        "content": "<p>speciifcally, the artifact work added a new flag</p>",
        "id": 201408940,
        "sender_full_name": "pnkfelix",
        "timestamp": 1592582218
    },
    {
        "content": "<p><code>--json</code>, I think</p>",
        "id": 201408975,
        "sender_full_name": "pnkfelix",
        "timestamp": 1592582241
    },
    {
        "content": "<p>and that <em>might</em> be a good thing to use here to opt-into receiving this output</p>",
        "id": 201408998,
        "sender_full_name": "pnkfelix",
        "timestamp": 1592582257
    },
    {
        "content": "<p>rather than blindly piggy-backing it on every use of <code>--error-format json</code></p>",
        "id": 201409011,
        "sender_full_name": "pnkfelix",
        "timestamp": 1592582270
    },
    {
        "content": "<p>but yeah, maybe full team checkoff is not necessary for that level of detail</p>",
        "id": 201409068,
        "sender_full_name": "pnkfelix",
        "timestamp": 1592582287
    },
    {
        "content": "<p>I'm trying to think which people \"own\" the JSON output the most. I think <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> perhaps, and I could imagine maybe <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span></p>",
        "id": 201409089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592582302
    },
    {
        "content": "<p>anyway I was mostly eager to get this MCP posted, and the Zulip thread created, so that I could properly respond to <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> 's volunteering to work on this on the tracking issue</p>",
        "id": 201409128,
        "sender_full_name": "pnkfelix",
        "timestamp": 1592582323
    },
    {
        "content": "<p>(that's an example of where we might want dedicated zulip threads for each tracking issue)</p>",
        "id": 201409172,
        "sender_full_name": "pnkfelix",
        "timestamp": 1592582345
    },
    {
        "content": "<p>I think it would be reasonable to make a project group around this</p>",
        "id": 201409196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592582359
    },
    {
        "content": "<p>I definitely want to ask <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> some questions</p>",
        "id": 201409210,
        "sender_full_name": "pnkfelix",
        "timestamp": 1592582367
    },
    {
        "content": "<p>in fact I think it's a good idea</p>",
        "id": 201409211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592582367
    },
    {
        "content": "<p>There's an overdue rework of the schema for json output</p>",
        "id": 201409232,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1592582381
    },
    {
        "content": "<p>specifically, I tried to use <code>LintId</code> as a way to build the entries of the allow-list</p>",
        "id": 201409238,
        "sender_full_name": "pnkfelix",
        "timestamp": 1592582383
    },
    {
        "content": "<p>especially as a complete change involved cargo as well</p>",
        "id": 201409250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592582388
    },
    {
        "content": "<p>We currently can't encode some things correctly</p>",
        "id": 201409260,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1592582391
    },
    {
        "content": "<p>but it didn't work at all, the equivalence check didn't work, and I don't know why it failed</p>",
        "id": 201409274,
        "sender_full_name": "pnkfelix",
        "timestamp": 1592582401
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119031\">Esteban Küber</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20future-incompat.20entries.20to.20json.20diagno.20compiler-team.23315/near/201409260\">said</a>:</p>\n<blockquote>\n<p>We currently can't encode some things correctly</p>\n</blockquote>\n<p>can you speak more on this?</p>",
        "id": 201409339,
        "sender_full_name": "pnkfelix",
        "timestamp": 1592582415
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20future-incompat.20entries.20to.20json.20diagno.20compiler-team.23315/near/201409196\">said</a>:</p>\n<blockquote>\n<p>I think it would be reasonable to make a project group around this</p>\n</blockquote>\n<p>a project group for the json output in general? Or for report-future-incompat support?</p>",
        "id": 201409408,
        "sender_full_name": "pnkfelix",
        "timestamp": 1592582441
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20future-incompat.20entries.20to.20json.20diagno.20compiler-team.23315/near/201409274\">said</a>:</p>\n<blockquote>\n<p>but it didn't work at all, the equivalence check didn't work, and I don't know why it failed</p>\n</blockquote>\n<p>(so I hacked it up using the lint names as the keys instead of <code>LintId</code>s. It was a total hack, though maybe an acceptable one...)</p>",
        "id": 201409494,
        "sender_full_name": "pnkfelix",
        "timestamp": 1592582483
    },
    {
        "content": "<p>Multiple multi span suggestions are not representable and a single multipart suggestion  is not distinguishable from multiple suggestions</p>",
        "id": 201409510,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1592582492
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20future-incompat.20entries.20to.20json.20diagno.20compiler-team.23315/near/201409408\">said</a>:</p>\n<blockquote>\n<p>a project group for the json output in general? Or for report-future-incompat support?</p>\n</blockquote>\n<p>the latter</p>",
        "id": 201409511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592582492
    },
    {
        "content": "<p>This has been a blocker for rustfix for a year and a half</p>",
        "id": 201409621,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1592582527
    },
    {
        "content": "<p>But I haven't focused on it</p>",
        "id": 201409639,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1592582536
    },
    {
        "content": "<p>I don't know anything about this.</p>",
        "id": 201411519,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1592583463
    },
    {
        "content": "<p>I'd ask cargo or rls people because they work with this json more than anyone else.</p>",
        "id": 201411650,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1592583518
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> do yo know anything about why I might have had problems with <code>LintId</code>? I believe you were the one who added that datatype, but maybe I misremember</p>",
        "id": 201413984,
        "sender_full_name": "pnkfelix",
        "timestamp": 1592584818
    },
    {
        "content": "<p>(if you need to see a concrete example of what was going wrong, I can post a diff against my prototype branch.)</p>",
        "id": 201414044,
        "sender_full_name": "pnkfelix",
        "timestamp": 1592584861
    },
    {
        "content": "<p>(it was in <a href=\"https://github.com/pnkfelix/rust/commit/84b570ae1b14866e1abc9fae2d73e0c820fa6940#diff-eadaa1c9e135801995ae29eaec608049R544\">this bit of the code</a>, though for now you'll have to just imagine the construction a <code>LintId</code> wrapping <code>SAFE_PACKED_BORROWS</code> rather than what its currently doing there, and then a corresponding edit two lines down to the <code>.contains</code> call)</p>",
        "id": 201414180,
        "sender_full_name": "pnkfelix",
        "timestamp": 1592584951
    },
    {
        "content": "<p>While I'm already making notes about this code, I also noted this semi-odd future-incompat lint, <a href=\"https://github.com/pnkfelix/rust/blob/84b570ae1b14866e1abc9fae2d73e0c820fa6940/src/librustc_session/lint/builtin.rs#L379\">UNSTABLE_NAME_COLLISIONS</a>, that has been marked that it should <strong>never</strong> be removed nor changed to an error.</p>",
        "id": 201414353,
        "sender_full_name": "pnkfelix",
        "timestamp": 1592585055
    },
    {
        "content": "<p>I was sort of wondering whether the future-incompat structure is the wrong tool for that job then</p>",
        "id": 201414380,
        "sender_full_name": "pnkfelix",
        "timestamp": 1592585072
    },
    {
        "content": "<p>Here's the PR that added <code>LintId</code>s - <a href=\"https://github.com/rust-lang/rust/pull/15024\">https://github.com/rust-lang/rust/pull/15024</a></p>",
        "id": 201415150,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1592585503
    },
    {
        "content": "<p>whoops not you then, sorry!</p>",
        "id": 201415278,
        "sender_full_name": "pnkfelix",
        "timestamp": 1592585547
    },
    {
        "content": "<p>I didn't work much with the lint infra in general.</p>",
        "id": 201415317,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1592585575
    },
    {
        "content": "<p>I must have had a serious <code>M-x vc-annotate</code> fail</p>",
        "id": 201415341,
        "sender_full_name": "pnkfelix",
        "timestamp": 1592585596
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span>: Proposal <a href=\"https://github.com/rust-lang/compiler-team/issues/315#issuecomment-659435834\">#315</a> has been seconded, and will be approved in 10 days if no objections are raised.</p>",
        "id": 204087894,
        "sender_full_name": "triagebot",
        "timestamp": 1594908397
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> Now that the MCP has been accepted, what's the next step for this feature?</p>",
        "id": 206829847,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1597332564
    }
]