[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/compiler-team/issues/375\">Add a <code>NOOP_METHOD_CALL</code> lint for methods which should never be directly called #375</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 214128383,
        "sender_full_name": "triagebot",
        "timestamp": 1603323816
    },
    {
        "content": "<p>is there an existing clippy lint for this?</p>",
        "id": 214128459,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603323848
    },
    {
        "content": "<p>let me check</p>",
        "id": 214129060,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603324408
    },
    {
        "content": "<p>if so, I think we should uplift it</p>",
        "id": 214129066,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603324413
    },
    {
        "content": "<p>there's a <code>clone_double_ref</code> for <code>clone</code> specifically</p>",
        "id": 214129173,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603324495
    },
    {
        "content": "<p>but there's no generic lint that covers other noop methods on <code>&amp;T</code></p>",
        "id": 214129194,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603324517
    },
    {
        "content": "<p>so, I think we could remove the clippy one if we add the rustc one</p>",
        "id": 214129217,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603324542
    },
    {
        "content": "<p>the general case sounds hard to do - would there be a fixed list of no-ops? Or would the lint look for functions implemented as the identity function?</p>",
        "id": 214129282,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603324571
    },
    {
        "content": "<p>I don't think we'd want to do any autodetection</p>",
        "id": 214129325,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603324606
    },
    {
        "content": "<p>I proposed a <code>#[noop]</code> attribute in the MCP</p>",
        "id": 214129338,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603324614
    },
    {
        "content": "<p>though that doens't cover all of the cases in libstd</p>",
        "id": 214129350,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603324624
    },
    {
        "content": "<p>all of the methods I listed in the MCP are essentially the same (and any known calls to them can be removed), so I think it makes sense to have a single lint for all of them</p>",
        "id": 214129407,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603324669
    },
    {
        "content": "<p>conceptually: <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 214133191,
        "sender_full_name": "scottmcm",
        "timestamp": 1603328319
    },
    {
        "content": "<p><span aria-label=\"bike\" class=\"emoji emoji-1f6b2\" role=\"img\" title=\"bike\">:bike:</span><span aria-label=\"derelict house\" class=\"emoji emoji-1f3da\" role=\"img\" title=\"derelict house\">:derelict_house:</span>: <code>noop</code> doesn't really seem right for this to me.  <code>Clone::clone(&amp;true)</code> is silly, but not exactly a no-op.</p>",
        "id": 214133195,
        "sender_full_name": "scottmcm",
        "timestamp": 1603328321
    },
    {
        "content": "<p>Trouble for the attribute: there's no specific <code>&lt;&amp;T as ToOwned&gt;::to_owned</code> today.  That comes from the blanket <code>ToOwned</code> for <code>Clone</code> types.</p>",
        "id": 214133232,
        "sender_full_name": "scottmcm",
        "timestamp": 1603328363
    },
    {
        "content": "<p>Yeah - I discussed a couple of approaches to solving that in the mcp</p>",
        "id": 214140747,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603338215
    },
    {
        "content": "<p>If we start out by just linting std types, we don't have to commit ourselves to any particular way of marking the method</p>",
        "id": 214140807,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603338318
    },
    {
        "content": "<p>Also, I'm find with calling the attr something other than <code>noop</code> - it was the first thing that came to mind</p>",
        "id": 214140811,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603338342
    },
    {
        "content": "<p>There hasn't been any discussion of this for a week. Is anyone opposed to the overall concept of the lint (leaving aside the exact name and attributefor the moment)?</p>",
        "id": 214868673,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603905256
    },
    {
        "content": "<p>SGTM, but I'm still a little unclear exactly how it will be implemented. I guess that doesn't need to block the MCP though.</p>",
        "id": 214868788,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603905326
    },
    {
        "content": "<p>Since this is a new lint, does this require a T-Lang FCP?</p>",
        "id": 214989028,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603987544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> usually we FCP the PR</p>",
        "id": 215034971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604009402
    },
    {
        "content": "<p>but you could FCP before-hand too</p>",
        "id": 215035013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604009408
    },
    {
        "content": "<p>Does that happen before or after it's seconded?</p>",
        "id": 215035232,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1604009602
    },
    {
        "content": "<p>so I'm not sure if my script will pick up MCP changes for t-lang :)</p>",
        "id": 215035883,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604010050
    },
    {
        "content": "<p>you could file an issue and nominate it for now</p>",
        "id": 215035886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604010053
    },
    {
        "content": "<p>we should tweak these procedures</p>",
        "id": 215035892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604010057
    },
    {
        "content": "<p>(been on my mind to try and harmonize things a bit...)</p>",
        "id": 215035911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604010072
    },
    {
        "content": "<p>alternatively file a lang-team proposal :)</p>",
        "id": 215035919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604010080
    },
    {
        "content": "<p>any which way to get it on the triage meeting agenda</p>",
        "id": 215035924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604010085
    },
    {
        "content": "<p>(gotta run now)</p>",
        "id": 215035937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604010096
    },
    {
        "content": "<p>I'm presuming you want lang team input <em>before</em> you implement</p>",
        "id": 215035952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604010108
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/rust-lang/lang-team/issues/66\">https://github.com/rust-lang/lang-team/issues/66</a> with just the lint, leaving off the specific details about how to indicate the methods (e.g. <code>#[noop]</code>)</p>",
        "id": 215136240,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1604083974
    },
    {
        "content": "<p>let me know if I messed up the produce for opening these kinds of issues</p>",
        "id": 215136265,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1604083986
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> ack, that was the wrong sort of proposal, so I missed it</p>",
        "id": 215381445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604352495
    },
    {
        "content": "<p>would you object to closing and re-opening a <a href=\"https://github.com/rust-lang/lang-team/issues/new?assignees=&amp;labels=major-change%2C+T-lang&amp;template=project_proposal.md&amp;title=%28My+project+proposal%29\">project proposal</a>?</p>",
        "id": 215381480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604352517
    },
    {
        "content": "<p>should probably reorganize things a bit</p>",
        "id": 215381491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604352524
    },
    {
        "content": "<p>sure</p>",
        "id": 215383742,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1604353674
    },
    {
        "content": "<p>will there really be a 'project group', though?</p>",
        "id": 215383771,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1604353683
    },
    {
        "content": "<p>I think this lint will be very similar to <a href=\"https://github.com/rust-lang/rust/pull/75573\">https://github.com/rust-lang/rust/pull/75573</a> in terms of overall complexity</p>",
        "id": 215383839,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1604353707
    },
    {
        "content": "<p>or have some of the procedurs changed this that PR's FCP?</p>",
        "id": 215383866,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1604353724
    },
    {
        "content": "<p>no there would not be a project group</p>",
        "id": 215384254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604353922
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> that is one of the renamings I want to do :)</p>",
        "id": 215384310,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604353942
    },
    {
        "content": "<p>the idea is just to propose \"projects\", often they just end with \"go implement it\"</p>",
        "id": 215384328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604353952
    },
    {
        "content": "<p>only in rare cases do we need to create a whole group, though we can also create a stream if it's useful for design discussion</p>",
        "id": 215384357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604353975
    },
    {
        "content": "<p>sounds good</p>",
        "id": 215384379,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1604353990
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/rust-lang/lang-team/issues/67\">https://github.com/rust-lang/lang-team/issues/67</a></p>",
        "id": 215385891,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1604354794
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> are you going to work on the implementation for this? This sounds interesting and I would try to take a stab at it if you're busy with other things.</p>",
        "id": 220130214,
        "sender_full_name": "rylev",
        "timestamp": 1608132822
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@Ryan Levick</span> I was planning to, but feel free to work on it!</p>",
        "id": 220130348,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1608132881
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span>: Proposal <a href=\"https://github.com/rust-lang/compiler-team/issues/375#issuecomment-766236043\">#375</a> has been seconded, and will be approved in 10 days if no objections are raised.</p>",
        "id": 223785396,
        "sender_full_name": "triagebot",
        "timestamp": 1611446304
    },
    {
        "content": "<p>The implementation for this can be found here: <a href=\"https://github.com/rust-lang/rust/pull/80723\">https://github.com/rust-lang/rust/pull/80723</a></p>",
        "id": 223885191,
        "sender_full_name": "rylev",
        "timestamp": 1611575173
    },
    {
        "content": "<p>This proposal has been accepted: <a href=\"https://github.com/rust-lang/compiler-team/issues/375\">#375</a>.</p>",
        "id": 225187828,
        "sender_full_name": "triagebot",
        "timestamp": 1612457405
    }
]