[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/compiler-team/issues/397\">Remove PredicateKind in favor of only Binder&lt;PredicateAtom&gt; #397</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 221557571,
        "sender_full_name": "triagebot",
        "timestamp": 1609783124
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 221557644,
        "sender_full_name": "Jack Huey",
        "timestamp": 1609783166
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> i think this change is good but will leave it to <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> to second as I want him to also be informed here</p>",
        "id": 221558040,
        "sender_full_name": "lcnr",
        "timestamp": 1609783323
    },
    {
        "content": "<p>I can understand that. I don't know when he'll have time to be around/review.</p>",
        "id": 221558472,
        "sender_full_name": "Jack Huey",
        "timestamp": 1609783529
    },
    {
        "content": "<p>Heh, your concern is warranted :)</p>",
        "id": 221770912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1609942394
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span>: Proposal <a href=\"https://github.com/rust-lang/compiler-team/issues/397#issuecomment-755323703\">#397</a> has been seconded, and will be approved in 10 days if no objections are raised.</p>",
        "id": 221771326,
        "sender_full_name": "triagebot",
        "timestamp": 1609942624
    },
    {
        "content": "<p>I trust the two of you on this, and the change makes sense I think</p>",
        "id": 221771344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1609942635
    },
    {
        "content": "<p>I skimmed the PR at least</p>",
        "id": 221771363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1609942643
    },
    {
        "content": "<p>I updated based on your review</p>",
        "id": 221824589,
        "sender_full_name": "Jack Huey",
        "timestamp": 1609967741
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> can you review?</p>",
        "id": 221824611,
        "sender_full_name": "Jack Huey",
        "timestamp": 1609967750
    },
    {
        "content": "<p>Is this uncontroversial/small enough that we don't need to wait for the full 10 day FCP?</p>",
        "id": 221824690,
        "sender_full_name": "Jack Huey",
        "timestamp": 1609967786
    },
    {
        "content": "<p>hm, I would have just waited until the fcp is over</p>",
        "id": 221927841,
        "sender_full_name": "lcnr",
        "timestamp": 1610016766
    },
    {
        "content": "<p>yeah, intend to review that pr</p>",
        "id": 221927861,
        "sender_full_name": "lcnr",
        "timestamp": 1610016784
    },
    {
        "content": "<p>So, I'm making the changes for your review <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span>. But these end up being quite a heavy refactor in terms of code touched. So if these changes are uncontroversial and everybody is okay with it, I would prefer to try to land sooner rather than later to avoid bitrot.</p>",
        "id": 221955730,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610033535
    },
    {
        "content": "<p>i have kinda complex feelings about this</p>",
        "id": 221958324,
        "sender_full_name": "lcnr",
        "timestamp": 1610034636
    },
    {
        "content": "<p>i also think that these changes are uncontroversial and don't expect any concerns here</p>",
        "id": 221958470,
        "sender_full_name": "lcnr",
        "timestamp": 1610034707
    },
    {
        "content": "<p>but there is value in having fairly strict rules for stuff like this which does get weakened by skipping the fcp for some mcps</p>",
        "id": 221958670,
        "sender_full_name": "lcnr",
        "timestamp": 1610034791
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Remove.20PredicateKind.20in.20favor.20of.20only.20Bin.E2.80.A6.20compiler-team.23397/near/221955730\">said</a>:</p>\n<blockquote>\n<p>So, I'm making the changes for your review <span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span>. But these end up being quite a heavy refactor in terms of code touched. So if these changes are uncontroversial and everybody is okay with it, I would prefer to try to land sooner rather than later to avoid bitrot.</p>\n</blockquote>\n<p>I sympathise with this feeling, but I think the FCP process exists for a good reason, and it's not good to sidestep it.</p>",
        "id": 221958689,
        "sender_full_name": "varkor",
        "timestamp": 1610034799
    },
    {
        "content": "<p>I think unfortunate changes have been made in the past because a process like this was skipped.</p>",
        "id": 221958784,
        "sender_full_name": "varkor",
        "timestamp": 1610034842
    },
    {
        "content": "<p>@lcnr is <a href=\"https://github.com/rust-lang/rust/issues/80679\">#80679</a> good other than FCP?</p>",
        "id": 222716016,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610630810
    },
    {
        "content": "<p>still want to look at <a href=\"https://github.com/rust-lang/rust/pull/80679#discussion_r553482946\">https://github.com/rust-lang/rust/pull/80679#discussion_r553482946</a></p>",
        "id": 222716143,
        "sender_full_name": "lcnr",
        "timestamp": 1610630863
    },
    {
        "content": "<p>will get to that this saturday probably</p>",
        "id": 222716234,
        "sender_full_name": "lcnr",
        "timestamp": 1610630889
    },
    {
        "content": "<p>apart from that yes</p>",
        "id": 222716262,
        "sender_full_name": "lcnr",
        "timestamp": 1610630901
    },
    {
        "content": "<p>When you get to this and decide if I need to remove that impl or not, I'll rebase.</p>",
        "id": 223003884,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610828240
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> in case you missed ^</p>",
        "id": 223010862,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610836920
    },
    {
        "content": "<p>i did <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 223010903,
        "sender_full_name": "lcnr",
        "timestamp": 1610836940
    },
    {
        "content": "<p>will look now</p>",
        "id": 223010905,
        "sender_full_name": "lcnr",
        "timestamp": 1610836946
    },
    {
        "content": "<p>ok wow, how does this not blow up completely rn</p>",
        "id": 223011775,
        "sender_full_name": "lcnr",
        "timestamp": 1610838067
    },
    {
        "content": "<p>do we test rust on big endian systems?</p>",
        "id": 223011818,
        "sender_full_name": "lcnr",
        "timestamp": 1610838124
    },
    {
        "content": "<p>because if we did the current impl is incorrect or even unsound, wtf</p>",
        "id": 223011869,
        "sender_full_name": "lcnr",
        "timestamp": 1610838181
    },
    {
        "content": "<p>We don't</p>",
        "id": 223011896,
        "sender_full_name": "simulacrum",
        "timestamp": 1610838213
    },
    {
        "content": "<p>Or at least not really</p>",
        "id": 223011901,
        "sender_full_name": "simulacrum",
        "timestamp": 1610838222
    },
    {
        "content": "<p>I think debian does and sometimes files reports</p>",
        "id": 223011916,
        "sender_full_name": "simulacrum",
        "timestamp": 1610838237
    },
    {
        "content": "<p>There's an issue open for s390x right now I think that's suspected as a big endian problem IIRC</p>",
        "id": 223011972,
        "sender_full_name": "simulacrum",
        "timestamp": 1610838281
    },
    {
        "content": "<p>afaict decoding of types and predicates should be completely broken when using these systems</p>",
        "id": 223011976,
        "sender_full_name": "lcnr",
        "timestamp": 1610838285
    },
    {
        "content": "<p>and we just index into the void</p>",
        "id": 223012000,
        "sender_full_name": "lcnr",
        "timestamp": 1610838319
    },
    {
        "content": "<p>because we try reading the i32 discriminant as a usize, see that it's greater than <code>128</code> and just decide that it isn't worth it anymore</p>",
        "id": 223012042,
        "sender_full_name": "lcnr",
        "timestamp": 1610838364
    },
    {
        "content": "<p>or wait, we are saved because the default discriminant type is <code>isize</code></p>",
        "id": 223012169,
        "sender_full_name": "lcnr",
        "timestamp": 1610838572
    },
    {
        "content": "<p>which is good</p>",
        "id": 223012171,
        "sender_full_name": "lcnr",
        "timestamp": 1610838578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> <code>EncodableWithShorthand</code> for <code>Binder&lt;PredicateKind&gt;</code> is only correct because <code>Binder</code> doesn't actually hold any information</p>",
        "id": 223012319,
        "sender_full_name": "lcnr",
        "timestamp": 1610838830
    },
    {
        "content": "<p>Okay, I'll just remove that impl then</p>",
        "id": 223012368,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610838887
    },
    {
        "content": "<p>so we just skip it during encoding and the discriminant of <code>PredicateKind</code> is still the first thing we actually write</p>",
        "id": 223012369,
        "sender_full_name": "lcnr",
        "timestamp": 1610838890
    },
    {
        "content": "<p>Do we expect any perf change from that?</p>",
        "id": 223012372,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610838903
    },
    {
        "content": "<p>yeah, probably</p>",
        "id": 223012378,
        "sender_full_name": "lcnr",
        "timestamp": 1610838909
    },
    {
        "content": "<p>Okay I'll also queue a perf run just to check</p>",
        "id": 223012382,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610838930
    },
    {
        "content": "<p>Other than that, r=you?</p>",
        "id": 223012385,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610838941
    },
    {
        "content": "<p>yeah, if perf isn't too bad</p>",
        "id": 223012437,
        "sender_full_name": "lcnr",
        "timestamp": 1610839018
    },
    {
        "content": "<p>we probably do want to reenable this for any relevant enum</p>",
        "id": 223012442,
        "sender_full_name": "lcnr",
        "timestamp": 1610839038
    },
    {
        "content": "<p>So <code>PredicateKind</code>?</p>",
        "id": 223012445,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610839052
    },
    {
        "content": "<p>yeah, but that currently requires us to manually implement <code>Decode</code></p>",
        "id": 223012451,
        "sender_full_name": "lcnr",
        "timestamp": 1610839069
    },
    {
        "content": "<p>which is probably annoying</p>",
        "id": 223012456,
        "sender_full_name": "lcnr",
        "timestamp": 1610839074
    },
    {
        "content": "<p>I'm a little confused on exactly what <code>EncodableWithShortand</code> is supposed to do</p>",
        "id": 223012459,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610839081
    },
    {
        "content": "<p>enums are decoded as <code>discr: isize | data ...</code></p>",
        "id": 223012502,
        "sender_full_name": "lcnr",
        "timestamp": 1610839109
    },
    {
        "content": "<p>the biggest possible discriminant is really small</p>",
        "id": 223012522,
        "sender_full_name": "lcnr",
        "timestamp": 1610839165
    },
    {
        "content": "<p>so we use the remaining <code>usize::MAX - max_discr</code> values to instead point back to a previous instance of the same value if it already exists</p>",
        "id": 223012570,
        "sender_full_name": "lcnr",
        "timestamp": 1610839214
    },
    {
        "content": "<p>ah I see</p>",
        "id": 223012577,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610839251
    },
    {
        "content": "<p>so we would have <code>whatever ...| discr_A | data | ... | position_of discr_A | ...</code></p>",
        "id": 223012581,
        "sender_full_name": "lcnr",
        "timestamp": 1610839259
    },
    {
        "content": "<p>I mean, there's also some overlap with the fact that predicates are interned, right?</p>",
        "id": 223012649,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610839367
    },
    {
        "content": "<p>currently not</p>",
        "id": 223012659,
        "sender_full_name": "lcnr",
        "timestamp": 1610839402
    },
    {
        "content": "<p>rn we just decode the same predicate everytime</p>",
        "id": 223012664,
        "sender_full_name": "lcnr",
        "timestamp": 1610839429
    },
    {
        "content": "<p>not sure if that matters though as decoding stuff is quite fast i think</p>",
        "id": 223012722,
        "sender_full_name": "lcnr",
        "timestamp": 1610839499
    },
    {
        "content": "<p>but, I guess we don't even have to go through these hoops though? Like, encoding <code>Predicate</code> will try to encode <code>&amp;'tcx PredicateInner</code></p>",
        "id": 223012743,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610839547
    },
    {
        "content": "<p>And that is essentially a <code>&amp;'tcx Binder&lt;PredicateKind&gt;</code></p>",
        "id": 223012790,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610839574
    },
    {
        "content": "<p>So two predicate kinds that are the same shouldn't be decoded as two separate <code>Predicate</code>s</p>",
        "id": 223012797,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610839604
    },
    {
        "content": "<p>Unless I'm missing something</p>",
        "id": 223012801,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610839620
    },
    {
        "content": "<p>(you probably still want to manually implement <code>Decode</code> for <code>Predicate</code> to directly encode <code>Binder&lt;PredicateKind&gt;</code> instead of <code>PredicateInner</code>)</p>",
        "id": 223012865,
        "sender_full_name": "lcnr",
        "timestamp": 1610839699
    },
    {
        "content": "<p>s/<code>Decode</code>/<code>Encode</code>?</p>",
        "id": 223012872,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610839729
    },
    {
        "content": "<p>both <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 223012887,
        "sender_full_name": "lcnr",
        "timestamp": 1610839777
    },
    {
        "content": "<p>I'm pretty sure that is already implemented</p>",
        "id": 223012895,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610839797
    },
    {
        "content": "<p>opened <a href=\"https://github.com/rust-lang/rust/issues/81100\">#81100</a> to prevent ourselves from accidentally introducing the bug i was worried about</p>",
        "id": 223012911,
        "sender_full_name": "lcnr",
        "timestamp": 1610839803
    },
    {
        "content": "<p>yeah, but it currently uses <code>encode_with_shorthand</code></p>",
        "id": 223012940,
        "sender_full_name": "lcnr",
        "timestamp": 1610839814
    },
    {
        "content": "<p>ah gotcha</p>",
        "id": 223012956,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610839841
    },
    {
        "content": "<p>where we instead now always fully <code>Encode</code> and <code>Decode</code> the <code>Binder&lt;PredicateKind&gt;</code></p>",
        "id": 223012963,
        "sender_full_name": "lcnr",
        "timestamp": 1610839853
    },
    {
        "content": "<p>How much longer will you be around?</p>",
        "id": 223013058,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610839968
    },
    {
        "content": "<p>not too much longer, probably less than an hour</p>",
        "id": 223013082,
        "sender_full_name": "lcnr",
        "timestamp": 1610839995
    },
    {
        "content": "<p>I can get the rebase/change done and you can double check. Shouldn't take more than 15 mins</p>",
        "id": 223013090,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610840012
    },
    {
        "content": "<p>still have to wait for the perf run in case it's bad</p>",
        "id": 223013180,
        "sender_full_name": "lcnr",
        "timestamp": 1610840129
    },
    {
        "content": "<p>right, but assuming it's not, that's a simple <code>r=lcnr</code></p>",
        "id": 223013240,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610840183
    },
    {
        "content": "<p>i fear that this will have a noticeable impact on max-rss</p>",
        "id": 223013242,
        "sender_full_name": "lcnr",
        "timestamp": 1610840187
    },
    {
        "content": "<p>I'm not worried</p>",
        "id": 223013254,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610840213
    },
    {
        "content": "<p>precisely because we also store <code>PredicateKind</code>s as interned</p>",
        "id": 223013290,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610840280
    },
    {
        "content": "<p>but we don't encode them as such</p>",
        "id": 223013356,
        "sender_full_name": "lcnr",
        "timestamp": 1610840343
    },
    {
        "content": "<p>But it's simple to</p>",
        "id": 223013398,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610840398
    },
    {
        "content": "<p>is it?</p>",
        "id": 223013444,
        "sender_full_name": "lcnr",
        "timestamp": 1610840406
    },
    {
        "content": "<p>Yeah, I think so</p>",
        "id": 223013459,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610840435
    },
    {
        "content": "<p>I guess we'll see :)</p>",
        "id": 223013463,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610840441
    },
    {
        "content": "<p>Wait, I might be a bit confused</p>",
        "id": 223013827,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610840927
    },
    {
        "content": "<p>So how does <code>DiscriminantKind</code> work when enums have data</p>",
        "id": 223013869,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610840995
    },
    {
        "content": "<p>the discriminant and the actual layout of an enum don't have to match</p>",
        "id": 223013925,
        "sender_full_name": "lcnr",
        "timestamp": 1610841035
    },
    {
        "content": "<p><code>DiscriminantKind</code> is always <code>isize</code> even if the size of the enum is smaller</p>",
        "id": 223013936,
        "sender_full_name": "lcnr",
        "timestamp": 1610841066
    },
    {
        "content": "<p>unless you use an explicit <code>repr</code> attribute, in which case the size of the discriminant and the layout are the same</p>",
        "id": 223013939,
        "sender_full_name": "lcnr",
        "timestamp": 1610841090
    },
    {
        "content": "<p>so for <code>Option&lt;&amp;Ty&gt;</code></p>",
        "id": 223013942,
        "sender_full_name": "lcnr",
        "timestamp": 1610841108
    },
    {
        "content": "<p><code>discriminant_value(&amp;None)</code> is still 0 and <code>discriminant_value(&amp;Some(...))</code> is 1</p>",
        "id": 223013984,
        "sender_full_name": "lcnr",
        "timestamp": 1610841145
    },
    {
        "content": "<p>even though the actual representation of that type doesn't actually store the <code>1</code> anywhere</p>",
        "id": 223013998,
        "sender_full_name": "lcnr",
        "timestamp": 1610841174
    },
    {
        "content": "<p>and just checks for <code>ptr != 0</code></p>",
        "id": 223013999,
        "sender_full_name": "lcnr",
        "timestamp": 1610841183
    },
    {
        "content": "<p>ah, okay</p>",
        "id": 223014067,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610841305
    },
    {
        "content": "<p>So what exactly does is <code>DiscriminantKind</code> of a non-enum mean</p>",
        "id": 223014118,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610841388
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 223014120,
        "sender_full_name": "lcnr",
        "timestamp": 1610841399
    },
    {
        "content": "<p>it's pretty much meaningless</p>",
        "id": 223014122,
        "sender_full_name": "lcnr",
        "timestamp": 1610841409
    },
    {
        "content": "<p>so we just use 0u8</p>",
        "id": 223014129,
        "sender_full_name": "lcnr",
        "timestamp": 1610841420
    },
    {
        "content": "<p>because why not</p>",
        "id": 223014134,
        "sender_full_name": "lcnr",
        "timestamp": 1610841424
    },
    {
        "content": "<p>wanted to originally use <code>()</code> but eddy feared that we accidentally leak it into llvm which may interact badly with zero sized types</p>",
        "id": 223014149,
        "sender_full_name": "lcnr",
        "timestamp": 1610841466
    },
    {
        "content": "<p>for generators it's the current yield point</p>",
        "id": 223014171,
        "sender_full_name": "lcnr",
        "timestamp": 1610841484
    },
    {
        "content": "<p>or something like that</p>",
        "id": 223014193,
        "sender_full_name": "lcnr",
        "timestamp": 1610841489
    },
    {
        "content": "<p>and a <code>u32</code> i think</p>",
        "id": 223014200,
        "sender_full_name": "lcnr",
        "timestamp": 1610841507
    },
    {
        "content": "<p>Ugh I'm trying to remember where I saw code for encoding/decoding interned data</p>",
        "id": 223014340,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610841718
    },
    {
        "content": "<p>can't you repurpose the current impls</p>",
        "id": 223014384,
        "sender_full_name": "lcnr",
        "timestamp": 1610841753
    },
    {
        "content": "<p>not easily</p>",
        "id": 223014415,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610841822
    },
    {
        "content": "<p>isn't encode <code>e.kind().encode(encoder)</code></p>",
        "id": 223014465,
        "sender_full_name": "lcnr",
        "timestamp": 1610841862
    },
    {
        "content": "<p>well, yeah, we could just ignore interning</p>",
        "id": 223014480,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610841891
    },
    {
        "content": "<p>and decode</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"n\">decoder</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">ty</span>::<span class=\"n\">Predicate</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">D</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">predicate_kind</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\">  </span><span class=\"n\">ty</span>::<span class=\"n\">PredicateKind</span>::<span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">decoder</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">predicate</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">decoder</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">().</span><span class=\"n\">mk_predicate</span><span class=\"p\">(</span><span class=\"n\">predicate_kind</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">predicate</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 223014487,
        "sender_full_name": "lcnr",
        "timestamp": 1610841900
    },
    {
        "content": "<p>i still don't see how stuff being interned helps with encoding tbh <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 223014499,
        "sender_full_name": "lcnr",
        "timestamp": 1610841941
    },
    {
        "content": "<p>Hmm, maybe it's not helpful</p>",
        "id": 223014561,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610842022
    },
    {
        "content": "<p>Let's keep it simple to start and if there are perf problems, I'll think</p>",
        "id": 223014573,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610842080
    },
    {
        "content": "<p>also that decode isn't exactly right. Since we are decoding a <code>Binder&lt;PredicateKind&gt;</code></p>",
        "id": 223014716,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610842311
    },
    {
        "content": "<p>(and that's the bit that makes everything a bit more complicated)</p>",
        "id": 223014768,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610842388
    },
    {
        "content": "<p><code>Decode::decode(self.kind(), decoder)</code>?</p>",
        "id": 223014822,
        "sender_full_name": "lcnr",
        "timestamp": 1610842456
    },
    {
        "content": "<p>considering that <code>Binder</code> also implement decode</p>",
        "id": 223014829,
        "sender_full_name": "lcnr",
        "timestamp": 1610842475
    },
    {
        "content": "<p>I went with <code>ty::Binder::&lt;ty::PredicateKind&lt;'tcx&gt;&gt;::decode(decoder)</code> but yours is cleaner</p>",
        "id": 223014843,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610842506
    },
    {
        "content": "<p><code>Decodable::decode(decoder)</code></p>",
        "id": 223014917,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610842641
    },
    {
        "content": "<p>tru</p>",
        "id": 223014921,
        "sender_full_name": "lcnr",
        "timestamp": 1610842657
    },
    {
        "content": "<p>Ok, PR is updated</p>",
        "id": 223014971,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610842727
    },
    {
        "content": "<p>think everything's looking good</p>",
        "id": 223015026,
        "sender_full_name": "lcnr",
        "timestamp": 1610842817
    },
    {
        "content": "<p>if perf and max-rss stays about the same r=me</p>",
        "id": 223015030,
        "sender_full_name": "lcnr",
        "timestamp": 1610842835
    },
    {
        "content": "<p>So looks like there indeed a perf/max-rss regression compared to previously.</p>",
        "id": 223031246,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610871321
    },
    {
        "content": "<p>So...trying to think of a \"fix\"</p>",
        "id": 223031305,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610871406
    },
    {
        "content": "<p>I think the right fix is to <em>not</em> automatically derive <code>TyEncodable</code>/<code>TyDecodable</code> for <code>Binder</code></p>",
        "id": 223031530,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610871775
    },
    {
        "content": "<p>Okay, made some changes and they're in between now. Somewhat mixed, but acceptable I think. <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> can you take a look when you get a chance?</p>",
        "id": 223053002,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610903319
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 223053705,
        "sender_full_name": "lcnr",
        "timestamp": 1610904420
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> done :)</p>",
        "id": 223053924,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610904748
    },
    {
        "content": "<p>This proposal has been accepted: <a href=\"https://github.com/rust-lang/compiler-team/issues/397\">#397</a>.</p>",
        "id": 223270974,
        "sender_full_name": "triagebot",
        "timestamp": 1611081078
    }
]