[
    {
        "content": "<p>A new proposal has been announced <a href=\"https://github.com/rust-lang/compiler-team/issues/291\" title=\"https://github.com/rust-lang/compiler-team/issues/291\">#291</a>. It will be brought up at the next meeting.</p>",
        "id": 196928356,
        "sender_full_name": "triagebot",
        "timestamp": 1588960362
    },
    {
        "content": "<p>The \"this HackMD\" link links to the issue</p>",
        "id": 196930073,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1588961124
    },
    {
        "content": "<p>fixed</p>",
        "id": 196931926,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1588962066
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span>: Proposal <a href=\"https://github.com/rust-lang/compiler-team/issues/291#issuecomment-627153189\">#291</a> has been seconded, and will be approved in 10 days if no objections are raised.</p>",
        "id": 197239317,
        "sender_full_name": "triagebot",
        "timestamp": 1589266873
    },
    {
        "content": "<p>I'm curious to get <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>'s opinion on this scheme. I can't remember how much he and I have talked about it.</p>",
        "id": 197252016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589276102
    },
    {
        "content": "<p>It's sort of the first 'major' change to MIR since it's initial design</p>",
        "id": 197252039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589276109
    },
    {
        "content": "<p>so where do I find the details of the proposal? the issue linked here seems to only scratch the surface?</p>",
        "id": 197329993,
        "sender_full_name": "RalfJ",
        "timestamp": 1589313515
    },
    {
        "content": "<p>in particular, what exactly would<code>Rvalue</code> (<code>Value</code>?) and <code>Place</code> look like after this change?</p>",
        "id": 197330085,
        "sender_full_name": "RalfJ",
        "timestamp": 1589313549
    },
    {
        "content": "<p>oh its that hackmd... the text sounds like that would describe the grand plan and not just this one change</p>",
        "id": 197330173,
        "sender_full_name": "RalfJ",
        "timestamp": 1589313594
    },
    {
        "content": "<p>hm okay that hackmd unfortunately also doesnt show what exactly the enums would look like... but it contains more details so that's nice :D</p>",
        "id": 197330600,
        "sender_full_name": "RalfJ",
        "timestamp": 1589313775
    },
    {
        "content": "<p>this sounds almost like some kind \"first-class places\" to me, which seems nice :D though it only goes part of the way, I am still trying to figure out what exactly the limitations are</p>",
        "id": 197330659,
        "sender_full_name": "RalfJ",
        "timestamp": 1589313809
    },
    {
        "content": "<p>but I am not sure I agree with this:</p>\n<blockquote>\n<p>miri: trivial, we just treat the special locals as real locals of pointer to actual type instead of the actual type. Each StatementKind::Project just behaves like StatementKind::Assign with an Rvalue::Ref.</p>\n</blockquote>\n<p>so first of all, I presume this should be <code>Rvalue::AddressOf</code>, because we certainly dont want reborrowing. (so, no <code>Retag</code> emitted for these.)<br>\nbut secondly... a place is not isomorphic to a pointer. maybe it should be, I am not sure, but in Miri places also track the expected alignment, unlike pointers where the expected alignment is given by the type. and indeed I think the proposed scheme would break field access to packed structs.</p>",
        "id": 197330838,
        "sender_full_name": "RalfJ",
        "timestamp": 1589313907
    },
    {
        "content": "<p>if this is truly \"first-class places\", then miri should properly support \"place variables\" by storing a <code>Place</code> (<code>PlaceTy</code>? but seems odd to keep the layout) inside them.</p>",
        "id": 197330926,
        "sender_full_name": "RalfJ",
        "timestamp": 1589313961
    },
    {
        "content": "<p>which brings me to my main question:</p>\n<blockquote>\n<p>Thus, we propose to add virtual locals that donâ€™t actually have any own memory, but which are temporary variables for storing places.</p>\n</blockquote>\n<p>so can I imagine this like, there are now two kinds of locals, I'll call them \"value locals\"  (that we already have, they store <a href=\"https://rust-lang.github.io/unsafe-code-guidelines/glossary.html#value\">values</a>) and the new \"place locals\" which store <a href=\"https://rust-lang.github.io/unsafe-code-guidelines/glossary.html#place\">places</a>? Can the same variable be used in both <code>StatementKind::Project</code> and <code>StatementKind::Assign</code>? (I would think not.)<br>\nAlso <code>Project</code> is not a great name IMO, the projection is happening on the RHS, this is really just a normal assignment of a place to a place local... as opposed to a value local which gets assigned a value (hence the RHS of an <code>Assign</code> is <code>Value</code>, but the RHS of... <code>AssignPlace</code>?... is <code>Place</code> I presume, but the hachmd doesnt spell out the types)</p>",
        "id": 197331491,
        "sender_full_name": "RalfJ",
        "timestamp": 1589314227
    },
    {
        "content": "<p>Good questions. I agree we should extend the proposal with more details. Part of the reason I know this is true is that I don't know which answers I think are best just yet. :)</p>",
        "id": 197340790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589318236
    },
    {
        "content": "<p>is there some place I could write something more coherent than this stream-of-thoughts? the issue you linked says it is not for discussion... so what <em>is</em> for discussion?^^ It mentions Zulip, which is nice but not good for leaving deeply thought-out comments in my experience.</p>",
        "id": 197382866,
        "sender_full_name": "RalfJ",
        "timestamp": 1589359344
    },
    {
        "content": "<p>also FWIW I was rather confused by the first half of the linked issue as it seems to have nothing to do with the actual proposal, it's all meta stuff. I made a best guess at where the meta stuff ends without wanting to read it all in detail, I hope I got that right...</p>",
        "id": 197382925,
        "sender_full_name": "RalfJ",
        "timestamp": 1589359397
    },
    {
        "content": "<p>from the perspective of someone asked for feedback on the proposal, more than 2/3 of that post is noise that has nothing to do with the actual proposal. Things like \"If your change is proposing a new stable feature, such as a -C flag, [...]\" look as if they were accidentally left in from a template, though maybe that was on purpose? I assume \"you\" here is \"author of the MCP\" not \"reader of the MCP\", but that's not at all clear until mid-way through the sentence... usually when I read an issue and it says \"you\" I would assume that addresses all readers of the issue.</p>",
        "id": 197382965,
        "sender_full_name": "RalfJ",
        "timestamp": 1589359438
    },
    {
        "content": "<blockquote>\n<p>This is work towards the eventual goal of removing entirely PlaceElem::Index. You can see the full proposal in this HackMD.</p>\n</blockquote>\n<p>now I still dont know if the MCP is for the \"eventual goal\" or the \"full proposal\" or something else entirely.</p>",
        "id": 197383064,
        "sender_full_name": "RalfJ",
        "timestamp": 1589359512
    },
    {
        "content": "<p>(I understand this MCP stuff is new so consider this feedback on the parts of the process that maybe could use some polishing ;) )</p>",
        "id": 197383201,
        "sender_full_name": "RalfJ",
        "timestamp": 1589359634
    },
    {
        "content": "<p>On a different note, I have some concerns about the potential impact of this change on memory usage and compile time, both in general and in particular for codegen (both LLVM and Cranelift).</p>\n<p>IIUC, this change would increase the number of statements in most MIR bodies significantly. In return it would shrink <code>Place</code>, but this won't shrink <code>Statement</code> (since <code>StatementKind</code> currently boxes all places), and the <code>PlaceElem</code>s won't go away -- on the contrary, they are no longer interned, and each of them turns into a full <code>Statement</code> that has additional overhead. So I expect a significant increase in memory consumption. More statements also mean more work for essentially all MIR passes, even those who just ignore those statements.</p>\n<p>And for codegen, the HackMD outlines two options for how places might get handled after this change:</p>\n<ul>\n<li>Require \"place temporaries\" to be used only in the basic block where they're required, and let codegen scan the BB when a place is actually needed for a \"real\" operation. This seems potentially very inefficient in large basic blocks (which are rare, but still cause huge regressions when algorithms are quadratic or cubic in the size of the BB). It also seems like an annoying extra invariant to uphold while performing MIR transformations.</li>\n<li>Codegen the projections as assignments to virtual locals are encountered. This requires extra data structures that weren't needed before, probably not enormous but still. Even if you impose the invariant that these virtual locals are BB-local (again, seems like a potential headache), large basic blocks do exist. But, on the bright side, it has the potential to reduce IR bloat from repeating the same projection over and over, assuming we add a MIR optimization that merges identical virtual locals.</li>\n</ul>\n<p>None of this is necessarily a blocking concern, but IMO it should be considered carefully before moving forward. For example, I could imagine that it might be a good trade-off to keep the <code>List&lt;PlaceElem&gt;</code> representation for \"static\" projections and just split out the problematic kinds (deref, variable index).</p>",
        "id": 197387448,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1589362124
    },
    {
        "content": "<p>Yeah, especially for unsized places this would be a regression in cg_clif, as it always stores fat pointers on the stack, rather than in two registers.</p>",
        "id": 197387644,
        "sender_full_name": "bjorn3",
        "timestamp": 1589362226
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> Could you say a bit more about what this change is designed to achieve?</p>\n<p>I don't think that <a href=\"https://github.com/rust-lang/rust/issues/71265\">#71265</a> is enough to justify what would be a fairly major change. <code>ProjectionElem::Index</code> is pretty low on the list of potential footguns in the MIR, since it is handled automatically for anyone using the <code>Visitor</code> API. Personally, I'm more concerned about <code>Deref</code> projections, since unlike all other projections they refer to memory outside the base local of the <code>Place</code>. It seems quite easy for the various MIR transformations to overlook this, and there's no simple solution like \"just use  <code>Visitor::visit_local</code>\".</p>\n<p>That said, I think we should avoid changes of this scale unless there is something concrete to be gained, like enabling new optimizations or fixing soundness holes. The churn is not worth it otherwise, since we have built quite a few things on top of the existing system.</p>",
        "id": 197453061,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1589393161
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> I totally understand the concerns stated here but I think <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and probably <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> have way better understanding than myself to properly justify this</p>",
        "id": 197454058,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1589393604
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> this scheme can handle both indices and deref projections, that's the main appeal</p>",
        "id": 197461253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589396880
    },
    {
        "content": "<p>basically it allows us to build up arbitrarily complex places</p>",
        "id": 197461309,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589396888
    },
    {
        "content": "<p>with only \"gep-like\" places permitted within a single statement</p>",
        "id": 197461359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589396911
    },
    {
        "content": "<p>the entire reason to do this is to make it easier to write optimizations</p>",
        "id": 197461378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589396920
    },
    {
        "content": "<p>it makes the borrow checker harder :)</p>",
        "id": 197461395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589396924
    },
    {
        "content": "<p>I think there is a valid alternative btw</p>",
        "id": 197461422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589396936
    },
    {
        "content": "<p>in which we keep places just how they are today but we \"lower\" them to remove derefs and stuff and introduce temporaries</p>",
        "id": 197461452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589396954
    },
    {
        "content": "<p>That last suggestion seems much more manageable.</p>",
        "id": 197461672,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1589397053
    },
    {
        "content": "<p>i.e., if we had</p>\n<div class=\"codehilite\"><pre><span></span><code>let x = foo((*tmp[n]).f.g)\n</code></pre></div>\n\n\n<p>it might get converted to</p>\n<div class=\"codehilite\"><pre><span></span><code>let tmp = &amp;raw *tmp[n]\nlet x = foo((*tmp).f.g)\n</code></pre></div>\n\n\n<p>or whatever, idk</p>",
        "id": 197461680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589397056
    },
    {
        "content": "<p>this further digs in on the idea of two phases in the MIR</p>",
        "id": 197461710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589397067
    },
    {
        "content": "<p>the \"analyzable\" phase and the \"optimization\" phase</p>",
        "id": 197461731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589397078
    },
    {
        "content": "<p>I was concerned about possible interactions with stacked borrows</p>",
        "id": 197461747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589397086
    },
    {
        "content": "<p>i.e., creating raw pointers has a certain amount of \"side effects\"</p>",
        "id": 197461788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589397113
    },
    {
        "content": "<p>makes things legal that wouldn't have been legal if something had never had a raw pointer created</p>",
        "id": 197461846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589397125
    },
    {
        "content": "<p>so maybe the answer is that we lower not to <code>&amp;raw</code> but to safe borrows</p>",
        "id": 197461880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589397141
    },
    {
        "content": "<p>which I think for <em>stacked borrows</em> is fine</p>",
        "id": 197461892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589397148
    },
    {
        "content": "<p>but which creates problems for <em>borrow check</em></p>",
        "id": 197461901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589397154
    },
    {
        "content": "<p>Okay, I'm less worried about churn now. Retrofitting the borrow checker seemed pretty daunting to me. I guess I still share some concerns with <span class=\"user-mention silent\" data-user-id=\"124289\">Hanna Kruppe</span> and <span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> about the additional intermediate values making optimizations/codegen run slower.</p>",
        "id": 197462636,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1589397485
    },
    {
        "content": "<p>Would introducing a SROA pass somewhere in the optimization pipeline solve some of the same problems as this proposal? That might be even more difficult, however.</p>",
        "id": 197464337,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1589398237
    },
    {
        "content": "<p>I can't speak to the concerns around stacked borrows unfortunately.</p>",
        "id": 197464418,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1589398279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Virtual.20locals.20scheme.20compiler-team.23291/near/197461901\">said</a>:</p>\n<blockquote>\n<p>but which creates problems for <em>borrow check</em></p>\n</blockquote>\n<p>I thought this transformation was supposed to happen after analyses, so after borrow checking. In that case this wouldn't be a problem, right?</p>",
        "id": 197512566,
        "sender_full_name": "oli",
        "timestamp": 1589439948
    },
    {
        "content": "<p>That's not what the MCP in its current form proposes. It's a conceivable alternative, but not what that hackmd details.</p>",
        "id": 197522468,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1589444417
    },
    {
        "content": "<p>I was talking about the proposed altenrative by niko/ecstatic-morse, which is not to do the virtual locals thing but just \"normalize\" all projections to make deref projections only ever be the last projection in a chain, and never have multiple deref projections in a projection list</p>",
        "id": 197529375,
        "sender_full_name": "oli",
        "timestamp": 1589448824
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> if we apply the transformation as a lowering step (as <span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> and I were discussing) then indeed borrow check is not impacted</p>",
        "id": 197559055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589465305
    },
    {
        "content": "<p>that's kind of the point :)</p>",
        "id": 197559092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589465308
    },
    {
        "content": "<p>we can either do this during MIR construction, in which case we have to account for borrow check, or as a later lowering step, in which case we don't</p>",
        "id": 197559217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589465320
    },
    {
        "content": "<p>I think I lean towards the latter option but I think the concern was compilation times</p>",
        "id": 197559352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589465330
    },
    {
        "content": "<p>it's easy to benchmark such a transformation or even have it behind a flag at first, so I like that option</p>",
        "id": 197561595,
        "sender_full_name": "oli",
        "timestamp": 1589465839
    },
    {
        "content": "<p>I think we should close this proposal</p>",
        "id": 197564248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589467059
    },
    {
        "content": "<p>and write up a fresh one with the new approach</p>",
        "id": 197564262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589467065
    },
    {
        "content": "<p>I can try to start that</p>",
        "id": 197564482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589467150
    },
    {
        "content": "<p>yes, that seems the best approach</p>",
        "id": 197564682,
        "sender_full_name": "oli",
        "timestamp": 1589467239
    },
    {
        "content": "<p>Score one for MCP :)</p>",
        "id": 197566053,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589467821
    },
    {
        "content": "<p>(This seems to have been a productive design conversation)</p>",
        "id": 197566068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589467831
    },
    {
        "content": "<p><span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span> <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span> <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span></p>",
        "id": 197568432,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1589468724
    },
    {
        "content": "<p>agreed! I like this structured way. Instead of just bumping ideas between everyone with no clear picture, this kinda forces us to have the same mental picture</p>",
        "id": 197573788,
        "sender_full_name": "oli",
        "timestamp": 1589470720
    },
    {
        "content": "<p>hackmd where I am writing up a brief MCP details: <a href=\"https://hackmd.io/ra2JEG69R1qAeWFEGK_T-w\">https://hackmd.io/ra2JEG69R1qAeWFEGK_T-w</a></p>",
        "id": 197591372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589478081
    },
    {
        "content": "<p>Some complexities:</p>\n<p>If you want to rewrite something like <code>&amp;&lt;place&gt;</code>, it's easy enough to add intermediate borrows</p>",
        "id": 197591601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589478191
    },
    {
        "content": "<p>But if you are doing a <em>move</em>, and that move is passing through a <code>Box</code>, what do you us for the intermediate pointer type?</p>",
        "id": 197591645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589478220
    },
    {
        "content": "<p>Or should we simply recommend writing <code>some_op(P)</code> (where <code>P</code> is a complex place) to </p>\n<div class=\"codehilite\"><pre><span></span><code>let tmp = move P;\nsome_op(tmp)\n</code></pre></div>\n\n\n<p>i.e., we limit complex places to the simple case of a <code>move place</code> operation?</p>",
        "id": 197591778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589478271
    },
    {
        "content": "<p>ps, <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>, regarding the naming of <code>Rvalue</code>, it felt very unnatural to write <code>Value</code> (or \"value expression\") in the above sentence... operation felt much more natural :)</p>",
        "id": 197591818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589478295
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span>, <span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> thoughts?</p>",
        "id": 197591873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589478328
    },
    {
        "content": "<p>Similarly, is it worth simplifying borrows? Or should we just say that the only place a \"complex\" place can appear is in borrows/moves?</p>",
        "id": 197591939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589478359
    },
    {
        "content": "<p>(I suppose that we could even do that during <em>construction</em> ... in fact, we probably almost do...)</p>",
        "id": 197592092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589478420
    },
    {
        "content": "<p>anyway, I'm going to stop typing now but feel free to edit <a href=\"https://hackmd.io/ra2JEG69R1qAeWFEGK_T-w\">the hackmd</a> here</p>",
        "id": 197592123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589478433
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Virtual.20locals.20scheme.20compiler-team.23291/near/197591818\">said</a>:</p>\n<blockquote>\n<p>ps, <span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span>, regarding the naming of <code>Rvalue</code>, it felt very unnatural to write <code>Value</code> (or \"value expression\") in the above sentence... operation felt much more natural :)</p>\n</blockquote>\n<p>\"<code>move place</code>\" expression\" feels natural though, doesn't it?</p>",
        "id": 197592881,
        "sender_full_name": "RalfJ",
        "timestamp": 1589478787
    },
    {
        "content": "<p>So one possible downside that should be discussed is that if you have a type like <code>[BigStruct; 20]</code> and want to get a field of a single struct in the array, the current scheme lets you do:</p>\n<div class=\"codehilite\"><pre><span></span><code>field = (arr[idx]).x\n</code></pre></div>\n\n\n<p>But if you separate out index projections, you have to do one of</p>\n<div class=\"codehilite\"><pre><span></span><code>tmp = arr[idx]  // Creates a large temporary on the stack\nfield = tmp.x\n</code></pre></div>\n\n\n<p>or</p>\n<div class=\"codehilite\"><pre><span></span><code>tptr = &amp;arr[idx] // Bad for our simple form of alias analysis\nfptr = &amp;tptr.x\nfield = *fptr\n</code></pre></div>\n\n\n<p>How would we address this issue? Or are we not worried about it? Also cc <span class=\"user-mention\" data-user-id=\"124289\">@Hanna Kruppe</span>  and <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span>, who I'm sure are better able to explain these kinds of concerns than I am.</p>",
        "id": 197592966,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1589478819
    },
    {
        "content": "<p>(FWIW I wasnt the one proposing \"value\" for this, precisely because it is getting awkward here. I got outvoted though... including by <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I believe :D )</p>",
        "id": 197592984,
        "sender_full_name": "RalfJ",
        "timestamp": 1589478827
    },
    {
        "content": "<p>a \"post borrowck lowering\" proposal has the problem that the invariants enforced by the lowering are not encoded in the types</p>",
        "id": 197593118,
        "sender_full_name": "RalfJ",
        "timestamp": 1589478876
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Virtual.20locals.20scheme.20compiler-team.23291/near/197592984\">said</a>:</p>\n<blockquote>\n<p>(FWIW I wasnt the one proposing \"value\" for this, precisely because it is getting awkward here. I got outvoted though... including by <span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> I believe :D )</p>\n</blockquote>\n<p>wait what. I wanted \"expression\". oh I can't remember.</p>",
        "id": 197598365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589481099
    },
    {
        "content": "<p>I thought eddyb wanted \"op\"?</p>",
        "id": 197598371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589481103
    },
    {
        "content": "<p>anyway</p>",
        "id": 197598373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589481104
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Virtual.20locals.20scheme.20compiler-team.23291/near/197593118\">said</a>:</p>\n<blockquote>\n<p>a \"post borrowck lowering\" proposal has the problem that the invariants enforced by the lowering are not encoded in the types</p>\n</blockquote>\n<p>say more?</p>",
        "id": 197598423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589481122
    },
    {
        "content": "<p>oh, you mean the MIR types?</p>",
        "id": 197598467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589481132
    },
    {
        "content": "<p>this is true, but I don't think it matters that much. that's just life</p>",
        "id": 197598513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589481152
    },
    {
        "content": "<p>i.e., we also split critical edges and so forth and that's not encoded</p>",
        "id": 197598541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589481162
    },
    {
        "content": "<p>but I DO think this is going further down the road of saying \"there are two IRs packed into one here\" -- or at least there is an important <em>subset</em></p>",
        "id": 197598583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589481184
    },
    {
        "content": "<p>I guess it's a drag that we have to <code>assert</code> for invalid enum variants, that is true</p>",
        "id": 197598608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589481196
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> clearly moving onto the stack is both incorrect and ineffecient. </p>\n<p>I think there are two options for <code>arr[idx].x</code>, either you do</p>\n<div class=\"codehilite\"><pre><span></span><code>tmp = move arr[idx].x // complex places only allowed in this kind of op, but they can be arbitrarily complex\n</code></pre></div>\n\n\n<p>or you do some variant of</p>\n<div class=\"codehilite\"><pre><span></span><code>tmp1 = &amp;arr[idx]\ntmp2 = &amp;tmp1.x\ndata = *tmp2\n</code></pre></div>\n\n\n<p>What did you mean by \"bad for our simple form of alias analysis?\" My main worry there is that moves out of references aren't allowed. Though maybe  the <code>&amp;</code> has semantic meaning for stacked borrows that may be problematic for later moves? (I think we decided it is ok for stacked borrows, but I'd want to check)</p>",
        "id": 197599065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589481387
    },
    {
        "content": "<p>Right, I suppose I was only considering <code>Copy</code> types.</p>\n<p>In the generator transform for example. As soon as something be comes borrowed, we have to assume that it requires storage across yield points. If we lower to the second form, <code>arr</code> would now require storage.</p>",
        "id": 197599721,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1589481675
    },
    {
        "content": "<p>To be more concrete:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">BigStruct</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">].</span><span class=\"n\">field</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// After lowering, creates a reference to `arr`</span>\n<span class=\"kr\">yield</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// borrowed locals need to live across yield points</span>\n</code></pre></div>",
        "id": 197600513,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1589481999
    },
    {
        "content": "<p>I suppose this isn't a problem if we put the <code>StorageDead</code> for <code>arr</code> in the right place, above the yield point.</p>",
        "id": 197600830,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1589482126
    },
    {
        "content": "<p>(if we use <code>arr</code> below the yield point, we have to store it regardless of whether it is borrowed, which I didn't realize at first)</p>",
        "id": 197601003,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1589482192
    },
    {
        "content": "<p>In any case, I'm mildly skeptical of a change that relies on creating more short-lived references or pointers, although I think this could be mitigated with the addition of an <code>InvalidateBorrows</code> statement.</p>",
        "id": 197601184,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1589482269
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">ecstatic-morse</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Virtual.20locals.20scheme.20compiler-team.23291/near/197599721\">said</a>:</p>\n<blockquote>\n<p>In the generator transform for example. As soon as something be comes borrowed, we have to assume that it requires storage across yield points. If we lower to the second form, <code>arr</code> would now require storage.</p>\n</blockquote>\n<p>I see. We would have to make that smarter, yes.</p>",
        "id": 197601642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589482446
    },
    {
        "content": "<p>I mean basically the whole <em>point</em> of this change is to create intermediate pointers.</p>",
        "id": 197601672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589482458
    },
    {
        "content": "<p>On the premise that today's places are too complex.</p>",
        "id": 197601691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589482466
    },
    {
        "content": "<p>That said, the variant I listed of \"limiting complex places to a single form of statement\" has none of these problems</p>",
        "id": 197601721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589482488
    },
    {
        "content": "<p>but maybe it doesn't actually <em>solve</em> any problems either</p>",
        "id": 197601736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589482495
    },
    {
        "content": "<p>That's true, but as you allude to, MIR optimizations will still have to handle complex places even if they are limited to a single statement kind.</p>",
        "id": 197603142,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1589483128
    },
    {
        "content": "<p>I feel like I'm being too pessimistic here. I certainly see the upsides, and would very much like to not think about derefs and variable array indices when writing MIR optimizations. I just don't have a good idea of whether the upsides outweigh the (potential) downsides enough to justify what I think would be a rather large refactoring, even if we don't have to touch the borrow checker. Maybe I'm just being irrationally averse to change though? I'd like to hear what others with more experience think about this, since no constructive alternatives are coming to mind.</p>",
        "id": 197603663,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1589483374
    },
    {
        "content": "<p>I'm just as happy to leave it as is :P I guess we would need to discuss with <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> what the full benefits were that they wanted to get</p>",
        "id": 197621953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589492472
    },
    {
        "content": "<p>Now that the visitor has been fixed to take index projections into account, and most of the special cases were removed, this might be a too invasive and time-consuming change to be worth it in the end.</p>",
        "id": 197622922,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1589493020
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Virtual.20locals.20scheme.20compiler-team.23291/near/197601691\">said</a>:</p>\n<blockquote>\n<p>On the premise that today's places are too complex.</p>\n</blockquote>\n<p>(place expressions <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span> ... I'm only partially joking though, the thing place expressions evaluate to -- what I think when I hear \"place\" -- isn#t affected by this change)</p>",
        "id": 197785399,
        "sender_full_name": "RalfJ",
        "timestamp": 1589619598
    },
    {
        "content": "<p>on the other hand, doing such a change might have prevented <a href=\"https://github.com/rust-lang/rust/pull/61559/files#r426146600\">what I think is a soundness bug</a>... our <code>visit_place</code> method does not actually visit every place any more since some are just implicitly encoded as prefixes of the chain of projections!</p>",
        "id": 197791988,
        "sender_full_name": "RalfJ",
        "timestamp": 1589629729
    },
    {
        "content": "<p>looks like <code>visit_projection_elem</code> can be used to visit every sub-place, but it doesnt give you a <code>Place</code> so that's rather inconvenient and also it only exists for read-only visitors? <br>\nAlso, <code>ProjectionElem::Field</code> is visited with <code>visit_ty</code> only on read-only visitors? That's odd.</p>",
        "id": 197793725,
        "sender_full_name": "RalfJ",
        "timestamp": 1589632449
    },
    {
        "content": "<p>are these <code>process_*</code> methods in the visitor meant to be overwritten or not?</p>",
        "id": 197793734,
        "sender_full_name": "RalfJ",
        "timestamp": 1589632493
    },
    {
        "content": "<p>oh the check is actually correct I think, it's just not necessary to have it in the loop</p>",
        "id": 197794590,
        "sender_full_name": "RalfJ",
        "timestamp": 1589633862
    },
    {
        "content": "<p>but actually visiting each \"sub-place\" seems hard now?</p>",
        "id": 197794598,
        "sender_full_name": "RalfJ",
        "timestamp": 1589633881
    },
    {
        "content": "<p>(Re: place expressions, indeed the distinction can be confusing, and the \"expression\" suffix is kind of long and clumsy, one of the reasons I wanted to use the term \"path\" to mean \"place expression\", so we could be precise...but let's not rehash it, though I'll note that also in your comments you mostly wrote \"place\" and not \"place expression\")</p>",
        "id": 197951229,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589815744
    },
    {
        "content": "<p>As for the visitor setup, I'm not sure how it ended up, but I do remember it was a bit difficult to figure out the right setup given interning</p>",
        "id": 197951293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589815774
    }
]