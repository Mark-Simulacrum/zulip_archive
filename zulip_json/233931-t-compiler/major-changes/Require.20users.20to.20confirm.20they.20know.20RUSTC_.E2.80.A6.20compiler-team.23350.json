[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/how.20does.20release.20branching.20work.3F/near/208037590\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>you could use a stable compiler to compile unstable features</p>\n</blockquote>\n<p>yes, using <code>RUSTC_BOOTSTRAP=1</code></p>\n</blockquote>\n<p>also please never use that env var unless you want to make rust devs really sad^^. it's for internal use only.</p>",
        "id": 208059954,
        "sender_full_name": "RalfJ",
        "timestamp": 1598426693
    },
    {
        "content": "<p>:) let people use it and make them all unhappy in a day.</p>",
        "id": 208060387,
        "sender_full_name": "lzutao",
        "timestamp": 1598427036
    },
    {
        "content": "<p>once upon a time, it required <code>RUSTC_BOOTSTRAP=&lt;some-hashed-value&gt;</code></p>",
        "id": 208110235,
        "sender_full_name": "cuviper",
        "timestamp": 1598457042
    },
    {
        "content": "<p>but we decided that obfuscation wasn't really worth it</p>",
        "id": 208110257,
        "sender_full_name": "cuviper",
        "timestamp": 1598457053
    },
    {
        "content": "<p>And then we discussed some weird crypto-y thing</p>",
        "id": 208110285,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598457071
    },
    {
        "content": "<p>I've always liked the more human approach to such things: <code>RUSTC_BOOTSTRAP=\"I understand that unstable features are unstable and may break at any time\"</code>.</p>",
        "id": 208112292,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598458017
    },
    {
        "content": "<p>ooh I like that</p>",
        "id": 208112457,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598458084
    },
    {
        "content": "<p>then you don't get people copy/pasting from reddit because they saw that it works</p>",
        "id": 208112471,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598458093
    },
    {
        "content": "<p>Exactly.</p>",
        "id": 208112538,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598458133
    },
    {
        "content": "<p>(also, if we were to change it, we could also change the name of the environment variable to something more clear)</p>",
        "id": 208112585,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598458160
    },
    {
        "content": "<p>The first time I saw this approach was in Debian's apt package manager, if you try to remove an essential package. It prints an explanatory paragraph, and then asks you to type \"Yes, do as I say!\".</p>",
        "id": 208112754,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598458242
    },
    {
        "content": "<p>Which makes someone stop long enough to read the paragraph, rather than just reflexively hitting y and pressing enter.</p>",
        "id": 208112802,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598458265
    },
    {
        "content": "<p>Likewise, GitHub makes you type the full name of a repository in order to delete it.</p>",
        "id": 208112839,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598458290
    },
    {
        "content": "<p>I think there's value in that.</p>",
        "id": 208112844,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598458297
    },
    {
        "content": "<p>(I always just copy and paste the repository name.)</p>",
        "id": 208113085,
        "sender_full_name": "Eh2406",
        "timestamp": 1598458417
    },
    {
        "content": "<p>same</p>",
        "id": 208114183,
        "sender_full_name": "Lokathor",
        "timestamp": 1598458922
    },
    {
        "content": "<p>That still takes enough time that you're no longer just reacting to a dialog \"getting in your way\".</p>",
        "id": 208116221,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598459970
    },
    {
        "content": "<p>/me would second this if someone wanted to propose changing it. :)</p>",
        "id": 208135432,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598469372
    },
    {
        "content": "<p>sounds good to me, it only needs an MCP, right? because it's explicitly not stable?</p>",
        "id": 208135496,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598469407
    },
    {
        "content": "<p>would that be T-compiler?</p>",
        "id": 208135506,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598469413
    },
    {
        "content": "<p>I the same vein: <code>I_KNOW_I_AM_USING_AN_OLD_AND_BUGGY_VERSION_OF_LIBXML2</code></p>",
        "id": 208138377,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598470882
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> yeah an MCP should be fine</p>",
        "id": 208141991,
        "sender_full_name": "simulacrum",
        "timestamp": 1598472575
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> <a href=\"#narrow/stream/122651-general/topic/how.20does.20release.20branching.20work.3F/near/208112585\">said</a>:</p>\n<blockquote>\n<p>(also, if we were to change it, we could also change the name of the environment variable to something more clear)</p>\n</blockquote>\n<p>do you have a preferred name?</p>",
        "id": 208142871,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598473003
    },
    {
        "content": "<p>maybe <code>ALLOW_UNSTABLE_ON_STABLE</code>?</p>",
        "id": 208142919,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598473028
    },
    {
        "content": "<p><code>I_OPT_OUT_OF_RUST_STABILITY_GUARANTEES_AND_CANNOT_COMPLAIN_ABOUT_IT</code></p>",
        "id": 208142970,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598473066
    },
    {
        "content": "<p>^</p>",
        "id": 208142995,
        "sender_full_name": "Lokathor",
        "timestamp": 1598473076
    },
    {
        "content": "<p>in addition to the text you have to set it to? or instead of? it seems it's getting pretty long <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 208143071,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598473108
    },
    {
        "content": "<p>no you just set it to 42</p>",
        "id": 208143106,
        "sender_full_name": "Lokathor",
        "timestamp": 1598473126
    },
    {
        "content": "<p>I'd say set vs unset</p>",
        "id": 208143121,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598473135
    },
    {
        "content": "<p>but also <code>I_OPT_OUT_OF_RUST_STABILITY_GUARANTEES=AND_CANNOT_COMPLAIN_ABOUT_IT</code> is possible</p>",
        "id": 208143142,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598473149
    },
    {
        "content": "<p>personally I like <code>ALLOW_UNSTABLE_ON_STABLE=\"I understand that unstable features are unstable and may break at any time\"</code>, but I'm ok with <code>I_OPT_OUT_OF_RUST_STABILITY_GUARANTEES_AND_UNDERSTAND_UNSTABLE_FEATURES_ARE_UNSTABLE</code></p>",
        "id": 208143183,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598473175
    },
    {
        "content": "<p>I've named a crate feature <code>unsafe_i_promise_to_not_run_this_on_the_wrong_platform</code></p>",
        "id": 208143274,
        "sender_full_name": "Lokathor",
        "timestamp": 1598473204
    },
    {
        "content": "<p>This is cute and all, but is there really any problem currently, that justifies changing this?</p>",
        "id": 208143334,
        "sender_full_name": "cuviper",
        "timestamp": 1598473244
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/122651-general/topic/how.20does.20release.20branching.20work.3F/near/208143334\">said</a>:</p>\n<blockquote>\n<p>This is cute and all, but is there really any problem currently, that justifies changing this?</p>\n</blockquote>\n<p>yes, I ran into someone a couple weeks ago who tried to use this</p>",
        "id": 208143398,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598473280
    },
    {
        "content": "<p>and just didn't understand why it was bad</p>",
        "id": 208143411,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598473287
    },
    {
        "content": "<p>one sec, let me find a link</p>",
        "id": 208143415,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598473291
    },
    {
        "content": "<p>IMO making it super long and unwieldy is unhelpful</p>",
        "id": 208143432,
        "sender_full_name": "simulacrum",
        "timestamp": 1598473300
    },
    {
        "content": "<p>Calling it RUSTC_FORCE_UNSTABLE, though, seems fine</p>",
        "id": 208143466,
        "sender_full_name": "simulacrum",
        "timestamp": 1598473319
    },
    {
        "content": "<p>the longer it is the harder it is to one-off use it in testing and such, and imo a long name doesn't buy you much</p>",
        "id": 208143539,
        "sender_full_name": "simulacrum",
        "timestamp": 1598473344
    },
    {
        "content": "<p>rustc_unstable_on_stable is probably the clearest name so far</p>",
        "id": 208143565,
        "sender_full_name": "Lokathor",
        "timestamp": 1598473361
    },
    {
        "content": "<p>see around <a href=\"https://discordapp.com/channels/273534239310479360/274215136414400513/746403450669105254\">https://discordapp.com/channels/273534239310479360/274215136414400513/746403450669105254</a></p>",
        "id": 208143595,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598473372
    },
    {
        "content": "<blockquote>\n<p>johndoe: is there a way to get a nightly build from the same commit as the latest stable? I want to use unstable features but (a) I don't want to get any regressions introduced in stable..nightly and (b) nightly is often missing components.<br>\nkoxiaet: You can set the RUSTC_BOOTSTRAP env variable I think<br>\njohndoe: I'll try RUSTC_BOOTSTRAP</p>\n</blockquote>",
        "id": 208143674,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598473414
    },
    {
        "content": "<p>I don't think we need to say \"unstable on stable\", just \"unstable\" seems enough to me. BOOTSTRAP is confusing because it has nothing to do with the flag's actual effect</p>",
        "id": 208143695,
        "sender_full_name": "simulacrum",
        "timestamp": 1598473426
    },
    {
        "content": "<p>and the real concern I have with this is that a) someone suggested it and b) the beginner accepted it without knowing it was bad</p>",
        "id": 208143708,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598473436
    },
    {
        "content": "<p>I mean at some point that's just ... the reality of help</p>",
        "id": 208143778,
        "sender_full_name": "simulacrum",
        "timestamp": 1598473453
    },
    {
        "content": "<p>but sure, renaming to RUSTC_UNSTABLE or whatever seems not unreasaonble</p>",
        "id": 208143801,
        "sender_full_name": "simulacrum",
        "timestamp": 1598473465
    },
    {
        "content": "<p>right, we can't fix a), but I think this would help with b)</p>",
        "id": 208143848,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598473493
    },
    {
        "content": "<p><code>UNSTABLE</code> indicates the effect, <code>BOOTSTRAP</code> the intended use case</p>",
        "id": 208144234,
        "sender_full_name": "cuviper",
        "timestamp": 1598473691
    },
    {
        "content": "<p>That change seems reasonable</p>",
        "id": 208144248,
        "sender_full_name": "cuviper",
        "timestamp": 1598473699
    },
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/compiler-team/issues/350\">Require users to confirm they know RUSTC_BOOTSTRAP is unsupported before using it #350</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 208144461,
        "sender_full_name": "triagebot",
        "timestamp": 1598473825
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/compiler-team/issues/350\">https://github.com/rust-lang/compiler-team/issues/350</a>, <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350\">https://rust-lang.zulipchat.com/#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350</a></p>",
        "id": 208144492,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598473846
    },
    {
        "content": "<p>previous discussion: <a href=\"#narrow/stream/122651-general/topic/how.20does.20release.20branching.20work.3F/near/208059954\">https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/how.20does.20release.20branching.20work.3F/near/208059954</a></p>",
        "id": 208144667,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598473929
    },
    {
        "content": "<p>If I remember correctly we used to, in the far past, have a specific passcode that you needed to supply to RUSTC_BOOTSTRAP</p>",
        "id": 208145028,
        "sender_full_name": "nagisa",
        "timestamp": 1598474110
    },
    {
        "content": "<p>and it would change every release.</p>",
        "id": 208145045,
        "sender_full_name": "nagisa",
        "timestamp": 1598474117
    },
    {
        "content": "<p>I'm going to move this discussion into the MCP stream</p>",
        "id": 208145077,
        "sender_full_name": "simulacrum",
        "timestamp": 1598474139
    },
    {
        "content": "<p>Can we add a zero-width whitespace character in either the name or the value? That would make it much harder to type in a regular shell. Putting it in the name would probably be the harder option, as the value may have a way to escape arbitrary bytes.</p>",
        "id": 208145168,
        "sender_full_name": "bjorn3",
        "timestamp": 1598474175
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"122651\" href=\"/#narrow/stream/122651-general/topic/how.20does.20release.20branching.20work.3F\">#general &gt; how does release branching work?</a> by <span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span></p>",
        "id": 208145181,
        "sender_full_name": "Notification Bot",
        "timestamp": 1598474181
    },
    {
        "content": "<blockquote>\n<p>That would make it much harder to type in a regular shell. </p>\n</blockquote>\n<p>I don't think that's really the point of the change</p>",
        "id": 208145211,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598474200
    },
    {
        "content": "<p>I am strongly opposed to making this hard to type</p>",
        "id": 208145219,
        "sender_full_name": "simulacrum",
        "timestamp": 1598474203
    },
    {
        "content": "<p>we're not trying to make it <em>difficult</em>, we're trying to make it a conscious decision</p>",
        "id": 208145246,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598474218
    },
    {
        "content": "<blockquote>\n<p>johndoe: is there a way to get a nightly build from the same commit as the latest stable? I want to use unstable features [...]</p>\n</blockquote>\n<p>it sounds like this user would be perfectly happy to use it by another name anyway</p>",
        "id": 208145506,
        "sender_full_name": "cuviper",
        "timestamp": 1598474366
    },
    {
        "content": "<p>what I ended up suggesting was pinning a nightly</p>",
        "id": 208145534,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598474394
    },
    {
        "content": "<p>and they were happy with that</p>",
        "id": 208145538,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598474397
    },
    {
        "content": "<p>which is sort of what bootstrap uses it for too, except built in beta mode to catch things like <a href=\"https://github.com/rust-lang/rust/issues/75951\">https://github.com/rust-lang/rust/issues/75951</a></p>",
        "id": 208145722,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598474502
    },
    {
        "content": "<p><code>RUSTC_BOOTSTRAP</code> is pretty useful for testing / debugging, even if it never goes to anything \"release\".</p>",
        "id": 208147789,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1598475535
    },
    {
        "content": "<p>It shouldn't be made harder to use.</p>",
        "id": 208147910,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1598475590
    },
    {
        "content": "<p>the intention isn't to make it harder, but to make it more clear that it's not supported by the release team</p>",
        "id": 208148013,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598475628
    },
    {
        "content": "<p>Meh.<br>\nRenaming will only be a nuisance, isn't worth the bikeshedding and script-updating efforts.</p>",
        "id": 208148426,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1598475830
    },
    {
        "content": "<p>I think if we do rename we'll keep both for at least a year or whatever</p>",
        "id": 208148552,
        "sender_full_name": "simulacrum",
        "timestamp": 1598475881
    },
    {
        "content": "<p>but I agree that I am uncertain about cost benefit here</p>",
        "id": 208148574,
        "sender_full_name": "simulacrum",
        "timestamp": 1598475895
    },
    {
        "content": "<p>I think it is worthwhile to dig up the original discussion that ultimately led us to making <code>RUSTC_BOOTSTRAP=1</code> as simple as it is today.</p>",
        "id": 208148600,
        "sender_full_name": "nagisa",
        "timestamp": 1598475909
    },
    {
        "content": "<p>I’m sure we were aware at the time of the fact that people will write these down in forums and possibly use them in a way we would rather them not to.</p>",
        "id": 208148753,
        "sender_full_name": "nagisa",
        "timestamp": 1598475969
    },
    {
        "content": "<p>tossing things out there: <code>RUSTC_BOOTSTRAP=1</code> could continue to work, but print a warning, which could either be suppressed normally or by setting <code>RUSTC_BOOTSTRAP=\"I understand I'm opting out of stability\"</code>.</p>",
        "id": 208148869,
        "sender_full_name": "scottmcm",
        "timestamp": 1598476035
    },
    {
        "content": "<p>I think I like that better actually</p>",
        "id": 208148940,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598476070
    },
    {
        "content": "<p>and maybe a link to <em>why</em> it's not recommended</p>",
        "id": 208148966,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598476079
    },
    {
        "content": "<p>Again, I don't want something longer than what we have today -- it's not worth the pain of typing it and piping it through tools</p>",
        "id": 208149128,
        "sender_full_name": "simulacrum",
        "timestamp": 1598476165
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350/near/208149128\">said</a>:</p>\n<blockquote>\n<p>Again, I don't want something longer than what we have today -- it's not worth the pain of typing it and piping it through tools</p>\n</blockquote>\n<p>tools could still use <code>RUSTC_BOOTSTRAP=1</code>, just with a warning</p>",
        "id": 208149227,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598476212
    },
    {
        "content": "<p>I don't want different behavior when using this flag</p>",
        "id": 208149263,
        "sender_full_name": "simulacrum",
        "timestamp": 1598476238
    },
    {
        "content": "<p>(Suggestion inspired by the \"Knock yourself out.\" banner on MIR output)</p>",
        "id": 208149265,
        "sender_full_name": "scottmcm",
        "timestamp": 1598476238
    },
    {
        "content": "<p>like, I'm fine with RUSTC_BOOTSTRAP=111 or something</p>",
        "id": 208149283,
        "sender_full_name": "simulacrum",
        "timestamp": 1598476246
    },
    {
        "content": "<p>it just shouldn't have spaces</p>",
        "id": 208149290,
        "sender_full_name": "simulacrum",
        "timestamp": 1598476251
    },
    {
        "content": "<p>ok, that works</p>",
        "id": 208149382,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598476307
    },
    {
        "content": "<p>Throwing this out there: <code>RUSTC_UNSAFE_BOOTSTRAP</code></p>",
        "id": 208152255,
        "sender_full_name": "Noah Lev",
        "timestamp": 1598477820
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350/near/208152255\">said</a>:</p>\n<blockquote>\n<p>Throwing this out there: <code>RUSTC_UNSAFE_BOOTSTRAP</code></p>\n</blockquote>\n<p>that still doesn't say what it's <em>doing</em> though</p>",
        "id": 208152464,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598477940
    },
    {
        "content": "<p>which is allowing you to use unstable features on stable</p>",
        "id": 208152488,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598477951
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350/near/208148600\">said</a>:</p>\n<blockquote>\n<p>I think it is worthwhile to dig up the original discussion</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/36548\">https://github.com/rust-lang/rust/issues/36548</a></p>",
        "id": 208155199,
        "sender_full_name": "Eric Huss",
        "timestamp": 1598479580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350/near/208148869\">said</a>:</p>\n<blockquote>\n<p>tossing things out there: <code>RUSTC_BOOTSTRAP=1</code> could continue to work, but print a warning, which could either be suppressed normally or by setting <code>RUSTC_BOOTSTRAP=\"I understand I'm opting out of stability\"</code>.</p>\n</blockquote>\n<p>I'm all for that. We can print a detailed message that explains what you're getting yourself into.</p>",
        "id": 208155449,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598479780
    },
    {
        "content": "<p>This is not a way to make it more difficult, or a way to shame people.</p>",
        "id": 208155555,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598479845
    },
    {
        "content": "<p>The <em>only</em> purpose of this is to make sure that nobody uses this <em>without</em> knowing what they're getting themselves into.</p>",
        "id": 208155591,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598479859
    },
    {
        "content": "<p>If someone <em>does</em> know what they're getting themselves into, so be it.</p>",
        "id": 208155614,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598479875
    },
    {
        "content": "<p>I want to see the \"oooh, a shiny option to let me do what I want!\" reaction slowed down a little bit, long enough for people to think about the implications.</p>",
        "id": 208155720,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598479932
    },
    {
        "content": "<p>Oh, minor nit: It should be <code>RUSTC_UNSTABLE=\"I understand I am opting out of stability\"</code>, not <code>I'm</code>, because let's not make people deal with quoting issues. ;)</p>",
        "id": 208156165,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598480253
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> fyi <span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> was not comfortable putting spaces in the required text: <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350/near/208149128\">https://rust-lang.zulipchat.com/#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350/near/208149128</a></p>",
        "id": 208156253,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598480304
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Ah, fair enough. I'm fine with modifying the text in question to eliminate the spaces.</p>",
        "id": 208156552,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598480519
    },
    {
        "content": "<p>Yeah spaces are bad for the same reason quote characters are bad</p>",
        "id": 208156651,
        "sender_full_name": "simulacrum",
        "timestamp": 1598480571
    },
    {
        "content": "<p>I would prefer something short but clear</p>",
        "id": 208156668,
        "sender_full_name": "simulacrum",
        "timestamp": 1598480590
    },
    {
        "content": "<p>(even something long is a bit annoying to remember the exact invocation of)</p>",
        "id": 208156694,
        "sender_full_name": "simulacrum",
        "timestamp": 1598480609
    },
    {
        "content": "<p><code>RUSTC_UNSTABLE=NO_STABILITY_GUARANTEES</code> ?</p>",
        "id": 208157018,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598480793
    },
    {
        "content": "<p>a bit on the long side, imo</p>",
        "id": 208162596,
        "sender_full_name": "simulacrum",
        "timestamp": 1598484745
    },
    {
        "content": "<p>otoh, we could document and try to push people towards using that but also support, say, RUSTC_UNSTABLE=1</p>",
        "id": 208162620,
        "sender_full_name": "simulacrum",
        "timestamp": 1598484771
    },
    {
        "content": "<p>If we do that then people end up copy/pasting <code>RUSTC_UNSTABLE=1</code> <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> we do get the benefit that the name makes more sense but I think it doesn't got across that's it's unsupported</p>",
        "id": 208166287,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598488054
    },
    {
        "content": "<p>I personally do not really want to type NO_STABILITY_GUARANTEES every time I use this, and I don't know that the cost of misuse is <em>that</em> high</p>",
        "id": 208168960,
        "sender_full_name": "simulacrum",
        "timestamp": 1598490741
    },
    {
        "content": "<p>Maybe we could do RUSTC_CHANNEL=nightly?</p>",
        "id": 208168981,
        "sender_full_name": "simulacrum",
        "timestamp": 1598490774
    },
    {
        "content": "<p>that would sort of communicate you are switching to unstable channel</p>",
        "id": 208168993,
        "sender_full_name": "simulacrum",
        "timestamp": 1598490792
    },
    {
        "content": "<p>I'd be ok with that</p>",
        "id": 208169216,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598491006
    },
    {
        "content": "<p>That seems good. <code>{RUSTC_,}FORCE_CHANNEL</code> is another option.</p>",
        "id": 208169406,
        "sender_full_name": "nagisa",
        "timestamp": 1598491241
    },
    {
        "content": "<p>and channel=nightly would make any compiler suddenly act like it was Nightly?</p>",
        "id": 208169810,
        "sender_full_name": "Lokathor",
        "timestamp": 1598491730
    },
    {
        "content": "<p>Although <code>RUSTC_CHANNEL=nightly</code> seems like people would think that's how you use nightly features when usually you should use <code>rustup</code> to get a nightly toolchain. Maybe <code>RUSTC_FEATURES=unstable</code>?</p>",
        "id": 208171496,
        "sender_full_name": "Noah Lev",
        "timestamp": 1598493559
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> How often do you type that by hand?</p>",
        "id": 208173726,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598496858
    },
    {
        "content": "<p>Probably roughly once a week? It's not terrible if it's long, I guess. We could also consider a sudo-like solution where you can add a .rustc-expert file in your home directory or so to let you use a shorter form</p>",
        "id": 208173760,
        "sender_full_name": "simulacrum",
        "timestamp": 1598496938
    },
    {
        "content": "<p>I mainly want to be able to remember it</p>",
        "id": 208173768,
        "sender_full_name": "simulacrum",
        "timestamp": 1598496958
    },
    {
        "content": "<p>(e.g., the cargo fingerprint logging i can never remember)</p>",
        "id": 208173814,
        "sender_full_name": "simulacrum",
        "timestamp": 1598496982
    },
    {
        "content": "<p>Mind if I ask what leads you to use it?</p>",
        "id": 208173820,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598496992
    },
    {
        "content": "<p>And to need to use it by hand rather than from a script?</p>",
        "id": 208173834,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598497024
    },
    {
        "content": "<p>Hm, I think it's mostly \"invoking older compilers with -Z flags\", usually for checking performance/assembly output, or simple bisection</p>",
        "id": 208173914,
        "sender_full_name": "simulacrum",
        "timestamp": 1598497101
    },
    {
        "content": "<p>If we have something long I'd probably have a rustc-unstable script</p>",
        "id": 208173924,
        "sender_full_name": "simulacrum",
        "timestamp": 1598497147
    },
    {
        "content": "<p>I would still be opposed to spaces or quotes to make it more likely that copy pasting it from e.g. failed rustc invocations just works</p>",
        "id": 208173991,
        "sender_full_name": "simulacrum",
        "timestamp": 1598497211
    },
    {
        "content": "<p>(Or will work once we print env variables there, I don't think we do today)</p>",
        "id": 208174003,
        "sender_full_name": "simulacrum",
        "timestamp": 1598497240
    },
    {
        "content": "<p>I also want to be able to give it to people when necessary without hunting down an invocation to copy paste, though I don't do that at all frequently</p>",
        "id": 208174088,
        "sender_full_name": "simulacrum",
        "timestamp": 1598497343
    },
    {
        "content": "<p>For people that use this regularly, another IMO reasonable option is to just write a simple shell wrapper that sets the env var</p>",
        "id": 208185897,
        "sender_full_name": "RalfJ",
        "timestamp": 1598513671
    },
    {
        "content": "<p>like, if you use it often enough that typing <code>RUSTC_UNSTABLE=NO_STABILITY_GUARANTEES</code> is actually annoying, then just make <code>rbootstrap rustc ...</code> work on your system (which is shorter than today)</p>",
        "id": 208185927,
        "sender_full_name": "RalfJ",
        "timestamp": 1598513702
    },
    {
        "content": "<p>There's few enough people that this applies to that IMO it's still justified</p>",
        "id": 208185943,
        "sender_full_name": "RalfJ",
        "timestamp": 1598513715
    },
    {
        "content": "<p>TBH, I'd like to see more examples of \"users use RUSTC_BOOTSTAP and then are burnt by this\" before we discuss the solution space here.</p>\n<p>The example from <a href=\"https://discordapp.com/channels/273534239310479360/274215136414400513/746403450669105254\">https://discordapp.com/channels/273534239310479360/274215136414400513/746403450669105254</a> doesn't sound convincing to me personally -- if the person is asking \"How can I find the nightly with the same commit as stable\", they are probably knowledgeable enough about Rust's stability story to understand what they are doing.</p>\n<p>From my own memory I can recall only a single instance of RUSTC_BOOTSTRAP misuse -- when simd_accel crate from Firefox set <code>RUST_BOOTSTRAP</code> in <code>build.rs</code>, and which than actually broke some code in the wild. That incident <em>didn't</em> have \"I don't know what I am doing\" factor to it.</p>\n<p>Searching GitHub for RUSTC_BOOTSTRAP does not contradict that picture: <a href=\"https://github.com/search?l=Rust&amp;p=6&amp;q=RUSTC_BOOTSTRAP&amp;type=Code\">https://github.com/search?l=Rust&amp;p=6&amp;q=RUSTC_BOOTSTRAP&amp;type=Code</a></p>\n<p>Almost all of hits are forks/copies of that single crate, with a couple of exceptions (which also set <code>RUSTC_BOOTSTRAP</code> in <code>build.rs</code>):</p>\n<ul>\n<li><a href=\"https://github.com/CasualX/obfstr/blob/master/build.rs\">https://github.com/CasualX/obfstr/blob/master/build.rs</a></li>\n<li><a href=\"https://github.com/EllenNyan/none-array/blob/05c53ea75b6819daa3df3e4088393b1f26c6abc0/none-array/build.rs\">https://github.com/EllenNyan/none-array/blob/05c53ea75b6819daa3df3e4088393b1f26c6abc0/none-array/build.rs</a></li>\n<li><a href=\"https://github.com/strake/hash-table.rs/blob/master/build.rs\">https://github.com/strake/hash-table.rs/blob/master/build.rs</a></li>\n</ul>\n<p>So, to sum up:</p>\n<ul>\n<li>I am not convinced that this something worth changing/discussion in absolute terms</li>\n<li>In relative terms, in the space of \"misuse of the RUSTC_BOOTSTRAP flag\", the \"unclearness\" problem seems to be strictly dominated by \"I'll just put RUSTC_BOOTSTRAP in my <a href=\"http://build.rs\">build.rs</a> YOLO\" (Amdahl's law)</li>\n</ul>",
        "id": 208194183,
        "sender_full_name": "matklad",
        "timestamp": 1598520110
    },
    {
        "content": "<p>People were also suggesting that xargo should just set <code>RUSTC_BOOTSTRAP</code> to work on stable, against wish I pushed back strongly.</p>",
        "id": 208195000,
        "sender_full_name": "RalfJ",
        "timestamp": 1598520814
    },
    {
        "content": "<p>oh wow I didn't know crates can set this in their own <code>build.rs</code>... that's horrible, it means even when I am on a stable compiler and not doing anything like this myself, some of the crates I am using might do this!</p>",
        "id": 208195073,
        "sender_full_name": "RalfJ",
        "timestamp": 1598520850
    },
    {
        "content": "<p>I feel like a more explicit flag would help inform <em>readers</em> of such code that this is not a thing that they should just copy-paste</p>",
        "id": 208195187,
        "sender_full_name": "RalfJ",
        "timestamp": 1598520946
    },
    {
        "content": "<p>Right now there's some danger that \"YOLO crates\" get copied by people without them knowing the YOLO nature of what they are doing. I don't have any data to back this up, but I also wouldn't how how to collect such data -- the risk seems real enough to me.</p>",
        "id": 208195271,
        "sender_full_name": "RalfJ",
        "timestamp": 1598520993
    },
    {
        "content": "<p>I agree that making env var somewhat more self-describing will somewhat decrease the risk of accidental copy-paste. It's just my impression than accidental copy-paste is very infrequent problem, in this case. </p>\n<p>For the <a href=\"http://buid.rs\">buid.rs</a> setting this env var, see <a href=\"https://github.com/rust-lang/cargo/issues/7088\">https://github.com/rust-lang/cargo/issues/7088</a> and associated issues (warning: long, heated discussion)</p>",
        "id": 208195709,
        "sender_full_name": "matklad",
        "timestamp": 1598521311
    },
    {
        "content": "<p>(actually a lot shorter than I expected)</p>",
        "id": 208212108,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598532835
    },
    {
        "content": "<p>the general feeling I gathered from that is that people are ok with <code>RUSTC_BOOTSTRAP=1 cargo build</code> but not with it being in <code>build.rs</code>, because that means people that depend on your library are suddenly using unstable features without knowing it</p>",
        "id": 208212238,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598532908
    },
    {
        "content": "<p>I do like <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> 's suggestion that this is per-binary, not per-environment, so that only the top-level crate <em>can</em> set it</p>",
        "id": 208212280,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598532939
    },
    {
        "content": "<p>I agree that this should not be settable from a <code>build.rs</code> script. I hadn't seen that particular issue.</p>",
        "id": 208270374,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598559431
    },
    {
        "content": "<p>There's a big difference between setting it yourself and having a crate set it for you.</p>",
        "id": 208270416,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598559451
    },
    {
        "content": "<p>The latter shouldn't be possible.</p>",
        "id": 208270429,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598559457
    },
    {
        "content": "<p>And I'd be <em>happy</em> to <code>rfcbot merge</code> a Cargo patch that just rejects an attempt to set <code>RUSTC_BOOTSTRAP</code> from <code>build.rs</code>.</p>",
        "id": 208270468,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598559480
    },
    {
        "content": "<p>\"unstable on stable\" is confusing to me</p>",
        "id": 208343902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598622135
    },
    {
        "content": "<p>(as a name)</p>",
        "id": 208344054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598622237
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350/near/208149265\">said</a>:</p>\n<blockquote>\n<p>(Suggestion inspired by the \"Knock yourself out.\" banner on MIR output)</p>\n</blockquote>\n<p>Amusing side note, I think that original text was a throw-away suggestion from <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> when I wanted to stabilize <code>--emit-mir</code> for the playground's usage. I kept it as-is because I felt it accurately and light-heartedly conveyed the fact that the _contents_ were not stable.</p>",
        "id": 208348399,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598624377
    },
    {
        "content": "<p>I think it was mine!</p>",
        "id": 208349320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598624821
    },
    {
        "content": "<p>(But I might be wrong.)</p>",
        "id": 208349343,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598624828
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350/near/208349320\">said</a>:</p>\n<blockquote>\n<p>I think it was mine!</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/pull/39891#issuecomment-283722173\">You are right</a></p>",
        "id": 208352062,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598626158
    },
    {
        "content": "<p>Sweet vindication</p>",
        "id": 208353950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598627013
    },
    {
        "content": "<p>Interesting, I did not know about that cargo issue. FWIW, I am all in favor.</p>",
        "id": 208371025,
        "sender_full_name": "RalfJ",
        "timestamp": 1598635022
    },
    {
        "content": "<p>that issue also has some folks express frustration at things being stabilized too slowly. that is a fair point, but silently smuggling a dependency on unstable features into a dependency graph and thus subverting the stability guarantee is <em>not</em> an appropriate solution. (I'd post that in the issue but don't want to split the discussion.) the solution is to fix the stabilization process, not to smash it to pieces. rocket also survived and thrived nightly-only for years -- and conversely, just imagine the disaster if rocket started using that hack... I'd rather not.^^</p>",
        "id": 208371398,
        "sender_full_name": "RalfJ",
        "timestamp": 1598635222
    },
    {
        "content": "<p>specifically, @hsivonen (not sure of their zulip nick) writes</p>\n<blockquote>\n<p>packed_simd is not at fault here. It has a rust-toolchain override, so even if you say rustup default stable, it picks your nightly compiler. However, if you try to build it as a dependency of another crate using the stable compiler, the build fails.</p>\n</blockquote>\n<p>Yes, and that is a feature! A user using stable should be able to rely on stability, ergo, they should be sure that all crates they build (transitively) are stable-only.</p>",
        "id": 208371645,
        "sender_full_name": "RalfJ",
        "timestamp": 1598635380
    },
    {
        "content": "<p>this parallels what <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> wrote above, to which I 100% agree: </p>\n<blockquote>\n<p>There's a big difference between setting it yourself and having a crate set it for you.</p>\n</blockquote>",
        "id": 208371691,
        "sender_full_name": "RalfJ",
        "timestamp": 1598635417
    },
    {
        "content": "<p>Clearly we need an arms race, with another env variable <code>DISALLOW_RUSTC_BOOTSTRAP</code> that supersedes the current one <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 208371889,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598635513
    },
    {
        "content": "<p>I think we're to the point of \"please send a PR\". If someone makes a PR to Cargo that prevents <code>build.rs</code> from setting <code>RUSTC_BOOTSTRAP</code>, I'll rfcbot merge it to confirm consensus.</p>",
        "id": 208372013,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598635566
    },
    {
        "content": "<p>But some will then ask for <code>DISALLOW_DISALLOW_RUSTC_BOOTSTRAP</code> <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 208372386,
        "sender_full_name": "bjorn3",
        "timestamp": 1598635796
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350/near/208372013\">said</a>:</p>\n<blockquote>\n<p>I think we're to the point of \"please send a PR\". If someone makes a PR to Cargo that prevents <code>build.rs</code> from setting <code>RUSTC_BOOTSTRAP</code>, I'll rfcbot merge it to confirm consensus.</p>\n</blockquote>\n<p>the issue says this is RFC material -- but I agree it feels to me like FCP is sufficient. not sure which teams though. lang and compiler?</p>",
        "id": 208372581,
        "sender_full_name": "RalfJ",
        "timestamp": 1598635870
    },
    {
        "content": "<p>this seems like it's not part of lang?</p>",
        "id": 208373016,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598636072
    },
    {
        "content": "<p>RUSTC_BOOTSTRAP has always been an implementation detail</p>",
        "id": 208373037,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598636080
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> The comment on that issue about an RFC was when someone tried to say \"you can't change this unless we also talk about stability policy!\".</p>",
        "id": 208373061,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598636096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> Changes to <code>RUSTC_BOOTSTRAP</code> itself would probably want to be compiler-team consensus, potentially in consultation with other teams.</p>",
        "id": 208373126,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598636134
    },
    {
        "content": "<p>But changing cargo to prevent <code>build.rs</code> from setting it is something that I think can start in the Cargo team.</p>",
        "id": 208373217,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598636170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350/near/208373016\">said</a>:</p>\n<blockquote>\n<p>this seems like it's not part of lang?</p>\n</blockquote>\n<p>Agreed, this isn't a lang question at all. <code>RUSTC_BOOTSTRAP</code> itself is compiler, and if it needs broader consensus, probably core. <code>build.rs</code> is cargo, potentially in consultation with compiler, and if necessary core.</p>",
        "id": 208373350,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598636267
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350/near/208373217\">said</a>:</p>\n<blockquote>\n<p>But changing cargo to prevent <code>build.rs</code> from setting it is something that I think can start in the Cargo team.</p>\n</blockquote>\n<p>oh, I didnt know there was a cargo team that you're on. :) makes sense though.</p>",
        "id": 208373523,
        "sender_full_name": "RalfJ",
        "timestamp": 1598636352
    },
    {
        "content": "<p>Would someone be up for writing that patch?</p>",
        "id": 208375644,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598637501
    },
    {
        "content": "<p>I might have time this weekend</p>",
        "id": 208376926,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598638221
    },
    {
        "content": "<p>but if someone has time sooner feel free to beat me to it ;)</p>",
        "id": 208376939,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598638230
    },
    {
        "content": "<p>Quick guide for that change: <code>src/cargo/core/compiler/custom_build.rs</code> processes <code>rustc-env</code> directives from <code>build.rs</code>, so you'd need to add a check there, and <code>anyhow::bail!</code> in that case.</p>",
        "id": 208377337,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598638475
    },
    {
        "content": "<p>Then just add a test case, and document the new behavior in the manual where it currently documents <code>rustc-env</code>.</p>",
        "id": 208377359,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598638496
    },
    {
        "content": "<p>Note that there's an existing patch for this, it might or might not make sense to rebase it: <a href=\"https://github.com/rust-lang/cargo/pull/6608\">https://github.com/rust-lang/cargo/pull/6608</a></p>",
        "id": 208402578,
        "sender_full_name": "matklad",
        "timestamp": 1598654631
    },
    {
        "content": "<p>hmm I'm reading through <a href=\"https://github.com/rust-lang/cargo/pull/6608#issuecomment-458546258\">https://github.com/rust-lang/cargo/pull/6608#issuecomment-458546258</a> and it seems like this would make the firefox people very unhappy</p>",
        "id": 208403234,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598655225
    },
    {
        "content": "<p>I'm ok writing the code for this but I don't feel very comfortable defending this change, especially when even the core team isn't sure what to do: <a href=\"https://github.com/rust-lang/cargo/pull/6608#issuecomment-459137496\">https://github.com/rust-lang/cargo/pull/6608#issuecomment-459137496</a></p>",
        "id": 208403370,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598655313
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> the code is here if you want it but I don't intend to make a PR with those changes: <a href=\"https://github.com/jyn514/cargo/tree/rustc-bootstrap\">https://github.com/jyn514/cargo/tree/rustc-bootstrap</a></p>",
        "id": 208403516,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598655439
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Reading through that thread, it sounds to me like people agree that crates shouldn't be setting this on behalf of projects. We're not proscribing the use of <code>RUSTC_BOOTSTRAP</code> at all, we're just making it so crates can't silently opt into it, since it affects the overall project.</p>",
        "id": 208403632,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598655539
    },
    {
        "content": "<p>sure, and if the cargo team wants to make that decision I have no objection</p>",
        "id": 208403650,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598655554
    },
    {
        "content": "<p>but I don't want to be the face of the change</p>",
        "id": 208403654,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598655559
    },
    {
        "content": "<p>I'd be perfectly fine adding a finer-grained mechanism to allow opting in on a per-crate basis, as long as the opt-in was at the top level.</p>",
        "id": 208403660,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598655575
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350/near/208403654\">said</a>:</p>\n<blockquote>\n<p>but I don't want to be the face of the change</p>\n</blockquote>\n<p>Sure, I understand that.</p>",
        "id": 208403663,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598655581
    },
    {
        "content": "<p>Do you object to your commit being used in someone else's pull request? I'm happy to send the PR.</p>",
        "id": 208403707,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598655603
    },
    {
        "content": "<p>Not at all, go ahead :)</p>",
        "id": 208403860,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598655729
    },
    {
        "content": "<p>Also, I just thought of one other thing that we should probably do to make this simpler for people to deal with.</p>",
        "id": 208403866,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598655739
    },
    {
        "content": "<p>Could we make it so that if <code>RUSTC_BOOTSTRAP</code> is set to <code>1</code> in <em>our</em> environment, we don't do this?</p>",
        "id": 208403884,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598655771
    },
    {
        "content": "<p>that seems reasonable</p>",
        "id": 208403903,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598655791
    },
    {
        "content": "<p>That way, if you go ahead and do <code>RUSTC_BOOTSTRAP=1 cargo ...</code> as suggested, it actually works.</p>",
        "id": 208403906,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598655797
    },
    {
        "content": "<p>And if people opt-in at the top level, as we're suggesting that they do, then they don't get this at all.</p>",
        "id": 208403920,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598655815
    },
    {
        "content": "<p>Rather than having to <em>also</em> go in and fix crates.</p>",
        "id": 208403931,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598655833
    },
    {
        "content": "<p>Another thing I think should happen first is allowing per-crate rustc bootstrap</p>",
        "id": 208403962,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598655842
    },
    {
        "content": "<p>Instead of a blanket 'everyome gets nightly'</p>",
        "id": 208403986,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598655854
    },
    {
        "content": "<p>That's a good call. For instance, <code>RUSTC_BOOTSTRAP=\"foo bar\"</code> to make those named crates use nightly?</p>",
        "id": 208404000,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598655872
    },
    {
        "content": "<p>I like that idea very much.</p>",
        "id": 208404008,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598655883
    },
    {
        "content": "<p>(not my idea originally: <a href=\"https://github.com/rust-lang/cargo/pull/6608#issuecomment-458546258\">https://github.com/rust-lang/cargo/pull/6608#issuecomment-458546258</a>)</p>",
        "id": 208404009,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598655883
    },
    {
        "content": "<p>That'd be a compiler change, I think, though technically Cargo <em>could</em> translate it.</p>",
        "id": 208404018,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598655903
    },
    {
        "content": "<p>I don't think Cargo <em>should</em>; I think it makes sense for rustc to do so.</p>",
        "id": 208404031,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598655921
    },
    {
        "content": "<p>But I agree that it's <em>probably</em> better to have that go in first.</p>",
        "id": 208404044,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598655953
    },
    {
        "content": "<p>And then cargo could avoid emitting the error if either <code>RUSTC_BOOTSTRAP=1</code> or <code>RUSTC_BOOTSTRAP</code> split on words contains the crate name.</p>",
        "id": 208404098,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598655989
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> First of all, <em>thank you</em> for implementing the Cargo side of this. I'm always happy to see more people contributing to Cargo.</p>",
        "id": 208404135,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598656043
    },
    {
        "content": "<p>Second: Would you be up for implementing the compiler side of this? 🥺</p>",
        "id": 208404200,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598656090
    },
    {
        "content": "<p>Yeah I'd be much more comfortable doing that</p>",
        "id": 208404828,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598656802
    },
    {
        "content": "<p>Once that's in, I'll submit the Cargo PR with your (modified) commit.</p>",
        "id": 208404892,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598656864
    },
    {
        "content": "<p>Also, once that's in, we can tell people to use <code>RUSTC_BOOTSTRAP=\"current_crate_name\"</code>.</p>",
        "id": 208404908,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598656897
    },
    {
        "content": "<p>Btw, one thing occurred to me -- the use of RUSTC_BOOTSTRAP=1 on stable has quite a few parallels with code deliberately causing UB that \"happens to work\". In both cases Rust has some problem (like a stable feature missing or something not being possible within the confines of the language spec), and then people start working around it as they feel unable to fix the source problem, and this in turn causes some fundamental problems for the project as a hole, and you end up with people accidentally relying on it somewhere in their dependency tree without realizing.</p>\n<p>I am saying this also because I recall <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> being very wary of breaking crates that deliberately exploit UB -- looks like you see this bootstrap situation as being different. I am wondering why.</p>",
        "id": 208426461,
        "sender_full_name": "RalfJ",
        "timestamp": 1598694980
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350/near/208404200\">said</a>:</p>\n<blockquote>\n<p>Second: Would you be up for implementing the compiler side of this? 🥺</p>\n</blockquote>\n<p>This turned out to be somewhat hard to implement in rustc, because <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Find.20the.20name.20of.20a.20crate.20before.20I.20know.20the.20edition.3F\">it wants to know stable/unstable extremely early in startup</a>. It would be easier to implement this in Cargo <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350/near/208404018\">as suggested by <span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> </a>, but I'm willing to try and add it rustc, it will just take a while.</p>",
        "id": 208431193,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598703959
    },
    {
        "content": "<p>I think it <em>needs</em> to be in rustc, because it needs to work without cargo.</p>",
        "id": 208437595,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598712809
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I don't like breaking crates that used UB when there was no other way to do something and it worked in practice. Here, there <em>is</em> a solution: use nightly.</p>",
        "id": 208437662,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598712885
    },
    {
        "content": "<p>I don't have nearly as much sympathy for UB when we provide a solution and that solution existed and was known when the code was written.</p>",
        "id": 208437687,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598712922
    },
    {
        "content": "<p>Does that answer your question?</p>",
        "id": 208437691,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598712931
    },
    {
        "content": "<p>It does, thanks.</p>",
        "id": 208438318,
        "sender_full_name": "RalfJ",
        "timestamp": 1598713682
    },
    {
        "content": "<p>hi</p>",
        "id": 211137912,
        "sender_full_name": "eddyb",
        "timestamp": 1600957299
    },
    {
        "content": "<p>I already wrote a comment here <a href=\"https://github.com/rust-lang/compiler-team/issues/350#issuecomment-698372654\">https://github.com/rust-lang/compiler-team/issues/350#issuecomment-698372654</a></p>",
        "id": 211137941,
        "sender_full_name": "eddyb",
        "timestamp": 1600957316
    },
    {
        "content": "<p>I haven't read all the discussion</p>",
        "id": 211137978,
        "sender_full_name": "eddyb",
        "timestamp": 1600957323
    },
    {
        "content": "<p>but I'll keep presenting my idea even if every single time nothing happens :P</p>",
        "id": 211138016,
        "sender_full_name": "eddyb",
        "timestamp": 1600957343
    },
    {
        "content": "<p>there's no reason to rely on env vars, it was entirely a \"let's get something working\" thing</p>",
        "id": 211138044,
        "sender_full_name": "eddyb",
        "timestamp": 1600957362
    },
    {
        "content": "<p>that we somehow have stuck with for, what, 5 years?</p>",
        "id": 211138081,
        "sender_full_name": "eddyb",
        "timestamp": 1600957382
    },
    {
        "content": "<p>Seems like a drawback to make stable rustc incapable of using nightly features. I use that very often to test things.</p>",
        "id": 211140145,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1600958190
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> I think eddyb is proposing we'd ship a rustc-unstable file on all channels, and you'd do something like RUSTC=$HOME/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc-unstable or so to get it</p>",
        "id": 211140617,
        "sender_full_name": "simulacrum",
        "timestamp": 1600958378
    },
    {
        "content": "<p>(or potentially <code>$(rustup which rustc-unstable)</code>)</p>",
        "id": 211140635,
        "sender_full_name": "simulacrum",
        "timestamp": 1600958388
    },
    {
        "content": "<p>Ah, I see, that could work, yeah</p>",
        "id": 211141083,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1600958570
    },
    {
        "content": "<p>Setting <code>RUSTC</code> means that cargo will recompile everything. You could then just as well switch to a nightly compiler.</p>",
        "id": 211141792,
        "sender_full_name": "bjorn3",
        "timestamp": 1600958827
    },
    {
        "content": "<p>Urg, yeah</p>",
        "id": 211144502,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1600959929
    },
    {
        "content": "<p>I don't always have a nightly compiler for a past stable release, and when dealing with perf regressions I recently used <code>RUSTC_BOOTSTRAP=1 cargo rustc -- -Zself-profile</code> or something like this, which felt really useful to me. I feel like <code>rustc-unstable</code> adds more steps here which doesn't seem worth it to me.</p>",
        "id": 211145541,
        "sender_full_name": "lcnr",
        "timestamp": 1600960303
    },
    {
        "content": "<p>Can we emit a warning when using <code>RUSTC_BOOTSTRAP</code>, which imo might be enough to make this more obvious</p>",
        "id": 211145639,
        "sender_full_name": "lcnr",
        "timestamp": 1600960336
    },
    {
        "content": "<p>and the additional noise doesn't seem like a problem to me, as situations where <code>RUSTC_BOOTSTRAP</code> is appropriate are already quite special, so imo it's ok to annoy people with a warning here</p>",
        "id": 211145815,
        "sender_full_name": "lcnr",
        "timestamp": 1600960424
    },
    {
        "content": "<p>so there are several different issues with the current setup</p>",
        "id": 211146375,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600960665
    },
    {
        "content": "<ol>\n<li>New users don't know RUSTC_BOOTSTRAP is bad and use it because they saw it on the internet. This would be helped by a warning, splitting into binaries, or changing the name.</li>\n<li>Codebases with a legitimate use, like <code>rustc</code> and (controversially) firefox, can't set it granularly, so they have the risk of allowing <em>other</em> crates that shouldn't build on stable into their dependency tree. This would be helped by <code>RUSTC_BOOTSTRAP=crate</code> but not much else.</li>\n</ol>\n<p><del>3. I forgot three, I'll try to think of it</del></p>",
        "id": 211146642,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600960776
    },
    {
        "content": "<p>I think any changes we take should take both use cases into account</p>",
        "id": 211146785,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600960823
    },
    {
        "content": "<p>and then there's a separate question of <em>should</em> there be legitimate uses other than finding compiler bugs, but I don't think we should try to tackle that here</p>",
        "id": 211147015,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600960919
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350/near/211141792\">said</a>:</p>\n<blockquote>\n<p>Setting <code>RUSTC</code> means that cargo will recompile everything. You could then just as well switch to a nightly compiler.</p>\n</blockquote>\n<p>I've done the <code>RUST_BOOTSTRAP</code> thing myself for testing purposes and after I switch back to not using it, I get errors from crates that do auto-detection whether nightly features are available. Forgot which crate it was, but I think it's in cargo's dependency tree.</p>",
        "id": 211164873,
        "sender_full_name": "est31",
        "timestamp": 1600969041
    },
    {
        "content": "<p>Oh I remember, it's anyhow</p>",
        "id": 211165071,
        "sender_full_name": "est31",
        "timestamp": 1600969116
    },
    {
        "content": "<p><a href=\"https://github.com/dtolnay/anyhow/blob/master/build.rs\">https://github.com/dtolnay/anyhow/blob/master/build.rs</a></p>",
        "id": 211165194,
        "sender_full_name": "est31",
        "timestamp": 1600969198
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350/near/211146642\">said</a>:</p>\n<blockquote>\n<ol>\n<li>New users don't know RUSTC_BOOTSTRAP is bad and use it because they saw it on the internet. This would be helped by a warning, splitting into binaries, or changing the name.</li>\n<li>Codebases with a legitimate use, like <code>rustc</code> and (controversially) firefox, can't set it granularly, so they have the risk of allowing <em>other</em> crates that shouldn't build on stable into their dependency tree. This would be helped by <code>RUSTC_BOOTSTRAP=crate</code> but not much else.</li>\n</ol>\n<p><del>3. I forgot three, I'll try to think of it</del></p>\n</blockquote>\n<p>Regarding 2: I've said it in other threads: Firefox <em>can</em> set it granularly. They could use a rustc wrapper and pass RUSTC_BOOTSTRAP to the wrapped rustc based on the crate name that the wrapper gets. That's no rocket science.</p>",
        "id": 211992297,
        "sender_full_name": "est31",
        "timestamp": 1601598469
    },
    {
        "content": "<p>But if something gets done about RUSTC_BOOTSTRAP I'd be really glad. Two compiler binaries would be a good start.</p>",
        "id": 211992394,
        "sender_full_name": "est31",
        "timestamp": 1601598549
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120096\">est31</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350/near/211992394\">said</a>:</p>\n<blockquote>\n<p>Two compiler binaries would be a good start.</p>\n</blockquote>\n<p>Good start into the bad direction, IMO.<br>\nIf that happens, we'll need to at least ensure that the unstable rust binary is always shipped together with the stable one.<br>\nRight now env var is the most convenient and non-invasive way to unlock the nightly features if it becomes necessary.<br>\nI don't want to end up wanting <code>--pretty=expanded</code> to debug something now, but having to, for example, wait for several days for admins to install the necessary unstable components, which is a pretty realistic scenario in a corporate environment.</p>",
        "id": 212053822,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1601632259
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> well in theory, with that proposal, the .so file is always around and you can always compile a custom nightly using rustc for it. I'm sure that someone will publish something like that to github once the problem arises. Your use case is legitimate though, often you want to test something on the precise same compiler version that compiles your thing for production.</p>",
        "id": 212189915,
        "sender_full_name": "est31",
        "timestamp": 1601759217
    },
    {
        "content": "<p>The first step was mostly about making sure crates cannot \"silently\" move to nightly without the user even knowing, i.e., the <code>build.rs</code> problem...  what is the status of that? <a href=\"https://github.com/rust-lang/cargo/issues/7088\">https://github.com/rust-lang/cargo/issues/7088</a> didn't see any activity it seems.</p>",
        "id": 212218857,
        "sender_full_name": "RalfJ",
        "timestamp": 1601810676
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I wanted to make sure there was an alternative to RUSTC_BOOTSTRAP=1 before forbidding it, namely <code>RUSTC_BOOTSTRAP=crate</code>. That hasn't been implemented and I don't think it makes sense to forbid this in build scripts until it is</p>",
        "id": 212221985,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601815801
    },
    {
        "content": "<p>(see <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Find.20the.20name.20of.20a.20crate.20before.20I.20know.20the.20edition.3F\">https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/Find.20the.20name.20of.20a.20crate.20before.20I.20know.20the.20edition.3F</a> for some of the trouble I was having, I haven't worked on it in a while)</p>",
        "id": 212222123,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601815962
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> that is a neat feature, but I dont think it should block the <code>build.rs</code> change</p>",
        "id": 212222724,
        "sender_full_name": "RalfJ",
        "timestamp": 1601817060
    },
    {
        "content": "<p><code>RUSTC_BOOTSTRAP=crate cargo build</code> is better than <code>RUSTC_BOOTSTRAP=1 cargo build</code> but even that is better than <code>cargo build</code> just silently using the env var for some crates</p>",
        "id": 212222744,
        "sender_full_name": "RalfJ",
        "timestamp": 1601817087
    },
    {
        "content": "<p>I mean, personally I disagree but I'm not on t-cargo and don't really have a stake in this fight ;) I'm just not willing to make the change <em>myself</em> until this is implemented</p>",
        "id": 212222819,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601817186
    },
    {
        "content": "<p>I hope this is not a fight :)</p>",
        "id": 212223603,
        "sender_full_name": "RalfJ",
        "timestamp": 1601818457
    },
    {
        "content": "<p>I recall <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> supporting this change; Josh -- do you think this needs <code>RUSTC_BOOTSTRAP=crate</code> or can we disable the env var on the cargo side before having more fine-grained env var control?</p>",
        "id": 212223615,
        "sender_full_name": "RalfJ",
        "timestamp": 1601818500
    },
    {
        "content": "<p>I support the eddyb approach if we're making a <em>cough</em> breaking <em>cough</em> change here.</p>",
        "id": 212224681,
        "sender_full_name": "nagisa",
        "timestamp": 1601820250
    },
    {
        "content": "<p>as for <a href=\"http://build.rs\">build.rs</a> I vote filter out entirely</p>",
        "id": 212224699,
        "sender_full_name": "nagisa",
        "timestamp": 1601820301
    },
    {
        "content": "<p>from <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span>'s comment <a href=\"https://github.com/rust-lang/compiler-team/issues/350#issuecomment-698372654\">https://github.com/rust-lang/compiler-team/issues/350#issuecomment-698372654</a></p>\n<blockquote>\n<p>The important aspect, IMO, is that CI and distro build environments can remove access to it entirely, leaving the regular rustc incapable of turning into rustc-unstable, no matter its environment.</p>\n</blockquote>\n<p>I really don't think that this is desirable. Using <code>RUSTC_BOOTSTRAP</code> is often very helpful when quickly looking at regressions so I don't want to see this made harder/impossible to do.</p>\n<p>More explicitly warning when it is used (by either changing the name or emitting a warning everytime it is used) seems better to me</p>",
        "id": 212224868,
        "sender_full_name": "lcnr",
        "timestamp": 1601820578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> what is your stanza re: <code>RUSTC_BOOTSTRAP</code> in <code>build.rs</code>? keep it, kill it ASAP, or kill it when we have <code>RUSTC_BOOTSTRAP=crate</code>?</p>",
        "id": 212224948,
        "sender_full_name": "RalfJ",
        "timestamp": 1601820684
    },
    {
        "content": "<p>hmm, I guess it's an issue if it is used in a crate and the crate consumer does not notice this <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 212224993,
        "sender_full_name": "lcnr",
        "timestamp": 1601820732
    },
    {
        "content": "<p>imo a warning which can't be silenced would be enough there though</p>",
        "id": 212225000,
        "sender_full_name": "lcnr",
        "timestamp": 1601820759
    },
    {
        "content": "<p>though <code>RUSTC_BOOTSTRAP</code> has to always be used when bootstrapping the compiler afaik so always getting a warning there also doesn't seem great :/</p>",
        "id": 212225155,
        "sender_full_name": "lcnr",
        "timestamp": 1601821008
    },
    {
        "content": "<p>Distro rustc has to bootstrap the next rustc, so we can't kill that entirely</p>",
        "id": 212225224,
        "sender_full_name": "cuviper",
        "timestamp": 1601821121
    },
    {
        "content": "<p>Same goes for CI builds today, though I suppose that could start using alternate builds as stage0</p>",
        "id": 212225247,
        "sender_full_name": "cuviper",
        "timestamp": 1601821189
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350/near/212225224\">said</a>:</p>\n<blockquote>\n<p>Distro rustc has to bootstrap the next rustc, so we can't kill that entirely</p>\n</blockquote>\n<p>Distros can choose to ship a package with unstable-enabled rustc driver, either separately, in a different output, or in the same output within libexec or similar.</p>",
        "id": 212225534,
        "sender_full_name": "nagisa",
        "timestamp": 1601821621
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> In theory, it would be my preference to prohibit <a href=\"http://build.rs\">build.rs</a> files from using <code>RUSTC_BOOTSTRAP</code> immediately. However, from a pragmatic point of view, as soon as we do that, people will adapt their build environments to start supplying that variable when they need to, and when we do that, I would like to have a better alternative for them to switch to that we could provide an automatic suggestion for. For example, we could detect that the <a href=\"http://build.rs\">build.rs</a> script of the crate <code>xyz</code> is attempting to export <code>RUSTC_BOOTSTRAP</code>, and we could error out but suggest that they export <code>RUSTC_BOOTSTRAP=xyz</code>.</p>",
        "id": 212230890,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601830404
    },
    {
        "content": "<p>If we don't have that available, then people who encounter that error are likely to end up building their entire crate hierarchy using nightly, rather than just the one crate that wants it.</p>",
        "id": 212230948,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601830499
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> How goes the change to support <code>=crate</code>?</p>",
        "id": 212230962,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601830561
    },
    {
        "content": "<p>uhhh</p>",
        "id": 212231171,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601830875
    },
    {
        "content": "<p>I have not put <del>any</del> much time into it</p>",
        "id": 212231175,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601830883
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> No pressure, just wondered. Life happens. :)</p>",
        "id": 212232035,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601832241
    },
    {
        "content": "<p>Banning <code>RUSTC_BOOTSTRAP</code> in <a href=\"http://build.rs\">build.rs</a> should be a no-brainer at this point. As I've said in the cargo threads, firefox can just use a rustc wrapper that passes <code>RUSTC_BOOTSTRAP</code>. That wrapper has to be set using .cargo/config which makes it much harder to upload \"encapsulated nightly use\" to <a href=\"http://crates.io\">crates.io</a> without detection. The wrapper also gives them the desired control over what can use nightly and what can't because the rustc wrapper can parse the arguments passed to it and only set RUSTC_BOOTSTRAP for those crate names they are interested in.</p>",
        "id": 212515056,
        "sender_full_name": "est31",
        "timestamp": 1602046315
    },
    {
        "content": "<p>Also as I understand it, firefox uses mach anyways instead of cargo</p>",
        "id": 212515258,
        "sender_full_name": "est31",
        "timestamp": 1602046612
    },
    {
        "content": "<p>Firefox would be my primary concern, so if the folks there would accept needing to do that, I would happily rfcbot merge a cargo patch to filter that out of <a href=\"http://build.rs\">build.rs</a> and warn.</p>",
        "id": 212573813,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602083808
    },
    {
        "content": "<p>Not error, because that would break existing crates and require revving them all to unbreak. But catching attempts to set RUSTC_BOOTSTRAP from <a href=\"http://build.rs\">build.rs</a> and rejecting that with a warning sounds great.</p>",
        "id": 212574165,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602083932
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350/near/212574165\">said</a>:</p>\n<blockquote>\n<p>Not error, because that would break existing crates and require revving them all to unbreak. But catching attempts to set RUSTC_BOOTSTRAP from <a href=\"http://build.rs\">build.rs</a> and rejecting that with a warning sounds great.</p>\n</blockquote>\n<p>with a plan to make this a hard error eventually, future-incompat style?</p>",
        "id": 212912578,
        "sender_full_name": "RalfJ",
        "timestamp": 1602330727
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350/near/212573813\">said</a>:</p>\n<blockquote>\n<p>Firefox would be my primary concern, so if the folks there would accept needing to do that, I would happily rfcbot merge a cargo patch to filter that out of <a href=\"http://build.rs\">build.rs</a> and warn.</p>\n</blockquote>\n<p>what would be the best way to reach out to them?</p>",
        "id": 212912585,
        "sender_full_name": "RalfJ",
        "timestamp": 1602330741
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/rust-lang/rust/pull/77802\">https://github.com/rust-lang/rust/pull/77802</a>.</p>",
        "id": 212929991,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602356484
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span>, I finally got around to it <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 212930767,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602357562
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> No, with a plan to make it an error immediately, but offer an alternative.</p>",
        "id": 212934503,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602363875
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> \"reject it with a warning\" was perhaps ambiguous.</p>",
        "id": 212934508,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602363884
    },
    {
        "content": "<p>I meant \"reject it and provide a message\"</p>",
        "id": 212934514,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602363891
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Reading.</p>",
        "id": 212934516,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602363895
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350/near/212934514\">said</a>:</p>\n<blockquote>\n<p>I meant \"reject it and provide a message\"</p>\n</blockquote>\n<p>oh, \"warning\" as in \"continue the cargo build\", but not actually with <code>RUSTC_BOOTSTRAP</code> set. understood.</p>",
        "id": 212956119,
        "sender_full_name": "RalfJ",
        "timestamp": 1602406261
    },
    {
        "content": "<p>Yes, exactly.</p>",
        "id": 212971782,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602433831
    },
    {
        "content": "<p>related: now that <code>RUSTC_BOOTSTRAP=0</code> is no longer going to have meaning, can we repurpose that to mean 'emulate a stable compiler on nightly'?</p>",
        "id": 212978290,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602444617
    },
    {
        "content": "<p>It would be helpful for testing rustdoc's <del>misuse of</del> stability-dependent code, like <a href=\"https://github.com/rust-lang/rust/pull/75953\">https://github.com/rust-lang/rust/pull/75953</a> and <a href=\"https://github.com/rust-lang/rust/pull/77827\">https://github.com/rust-lang/rust/pull/77827</a></p>",
        "id": 212978303,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602444667
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Oh, I love that idea.</p>",
        "id": 212981014,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602449255
    },
    {
        "content": "<p>I <em>really</em> love that idea.</p>",
        "id": 212981016,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602449260
    },
    {
        "content": "<p>It'd also be nice to have an in-Rust-code equivalent that you can put at the top of a file, to opt out of nightly even on a nightly compiler.</p>",
        "id": 212981063,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602449295
    },
    {
        "content": "<p>But having a quick way to do that on the command line seems like a good plan.</p>",
        "id": 212981066,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602449305
    },
    {
        "content": "<p>Using <code>RUSTC_BOOTSTRAP</code> for that is...quirky, but amusing.</p>",
        "id": 212981069,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602449315
    },
    {
        "content": "<p>Might also make sense to do it with a separate dedicated variable.</p>",
        "id": 212981071,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602449329
    },
    {
        "content": "<p>'I am <em>not</em> bootstrapping'</p>",
        "id": 212981074,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602449335
    },
    {
        "content": "<p>sure, separate variable seems fine</p>",
        "id": 212981080,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602449348
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350/near/212981074\">said</a>:</p>\n<blockquote>\n<p>'I am <em>not</em> bootstrapping'</p>\n</blockquote>\n<p><code>RUSTC_VENTURE_CAPITAL=1</code>. ;)</p>",
        "id": 212981084,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602449357
    },
    {
        "content": "<p>actually - someone mentioned <code>RUSTC_FORCE_UNSTABLE</code> a while ago, maybe eventually we could have both that and <code>RUSTC_FORCE_STABLE</code></p>",
        "id": 212981137,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602449438
    },
    {
        "content": "<p>I like both those names better than <code>RUSTC_BOOTSTRAP</code></p>",
        "id": 212981139,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602449450
    },
    {
        "content": "<p>and they could both support per-crate opt-in/out</p>",
        "id": 212981145,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602449464
    },
    {
        "content": "<p>I like that concept. Should be straightforward to modify your patch to use <code>RUSTC_ALLOW_UNSTABLE=crate1,crate2</code> or similar, instead of modifying <code>RUSTC_BOOTSTRAP</code>.</p>",
        "id": 212981320,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602449802
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350/near/212981063\">said</a>:</p>\n<blockquote>\n<p>It'd also be nice to have an in-Rust-code equivalent that you can put at the top of a file, to opt out of nightly even on a nightly compiler.</p>\n</blockquote>\n<p>isn't that just \"don't add any <code>feature</code> attribute\"?</p>",
        "id": 212983454,
        "sender_full_name": "RalfJ",
        "timestamp": 1602453367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> is suggesting something like <code>forbid(features)</code> I think</p>",
        "id": 212983610,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602453622
    },
    {
        "content": "<p>Where adding a feature gives a compile error</p>",
        "id": 212983614,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602453632
    },
    {
        "content": "<p>Although even that wouldn't help with rustdoc because it's bad at using feature gates :/</p>",
        "id": 212983638,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602453695
    },
    {
        "content": "<p>Related: <a href=\"https://github.com/rust-lang/rust/issues/63305\">https://github.com/rust-lang/rust/issues/63305</a></p>",
        "id": 212983759,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602453852
    },
    {
        "content": "<p>I asked on the PR but I'll ask again here: what's the path forward for <a href=\"https://github.com/rust-lang/rust/pull/77802\">https://github.com/rust-lang/rust/pull/77802</a> ? Do I need a new MCP? Should I update this one? Does it need FCP? I don't want it to hang in limbo forever.</p>",
        "id": 213504112,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602807512
    },
    {
        "content": "<p>I think an FCP would be appropriate. I can't kick that off myself, but I expect <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> or <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> will when they get a chance (presuming they agree).</p>",
        "id": 213513815,
        "sender_full_name": "simulacrum",
        "timestamp": 1602817790
    },
    {
        "content": "<p>Done.</p>",
        "id": 213622755,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1602888932
    },
    {
        "content": "<p>What about all the existing code and scripts using <code>R..C_B..P=1</code>?</p>",
        "id": 213686031,
        "sender_full_name": "oliver",
        "timestamp": 1602992472
    },
    {
        "content": "<p>they'll still work</p>",
        "id": 213686076,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602992525
    },
    {
        "content": "<p>the only thing that will break is people doing weird things like <code>RUSTC_BOOTSTRAP=0</code>, but I don't find that very compelling, especially this is not in any way stable</p>",
        "id": 213686081,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602992555
    },
    {
        "content": "<p>Codes and scripts using <code>R..C_B..P=0</code> are okay as well?</p>",
        "id": 213686096,
        "sender_full_name": "oliver",
        "timestamp": 1602992607
    },
    {
        "content": "<p>no, they'll break</p>",
        "id": 213686126,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602992644
    },
    {
        "content": "<p>but =0 is weird and I don't know why you'd use it</p>",
        "id": 213686147,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602992653
    },
    {
        "content": "<p>Maybe only a few do</p>",
        "id": 213686151,
        "sender_full_name": "oliver",
        "timestamp": 1602992668
    },
    {
        "content": "<p>but there are some</p>",
        "id": 213686155,
        "sender_full_name": "oliver",
        "timestamp": 1602992682
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> if you're intentionally breaking rust's stability guarentees I'm not particularly inclined to be bug-for-bug compatible in helping you do it</p>",
        "id": 213686161,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602992703
    },
    {
        "content": "<p>It's not a problem since no one would ever do it</p>",
        "id": 213686170,
        "sender_full_name": "oliver",
        "timestamp": 1602992741
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350/near/212224948\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> what is your stanza re: <code>RUSTC_BOOTSTRAP</code> in <code>build.rs</code>? keep it, kill it ASAP, or kill it when we have <code>RUSTC_BOOTSTRAP=crate</code>?</p>\n</blockquote>\n<p>FYI I ended up opening <a href=\"https://github.com/rust-lang/cargo/pull/9181\">https://github.com/rust-lang/cargo/pull/9181</a>, which is the \"kill it when we have <code>RUSTC_BOOTSTRAP=crate</code>\" option</p>",
        "id": 227677327,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614202632
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Is that PR now hack-free? Would you consider it ready for merge?</p>",
        "id": 227684044,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614205010
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> it's hack free but there have been a lot of changes since the last review,  I was hoping <span class=\"user-mention silent\" data-user-id=\"120518\">Eric Huss</span> or another team member could take a look</p>",
        "id": 227684267,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614205087
    },
    {
        "content": "<p>Also there's a TODO floating around I forgot to comment on</p>",
        "id": 227684403,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614205140
    },
    {
        "content": "<p>I looked it over, and I think the change to nightly_features_allowed seems reasonable to me.</p>",
        "id": 227684484,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614205183
    },
    {
        "content": "<p>Side note, I wonder if any <a href=\"http://build.rs\">build.rs</a> scripts attempt to set RUSTFLAGS or similar?</p>",
        "id": 227685159,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614205494
    },
    {
        "content": "<p>I just responded to the TODO, and to one other open review comment.</p>",
        "id": 227685714,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614205735
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350/near/227685159\">said</a>:</p>\n<blockquote>\n<p>Side note, I wonder if any <a href=\"http://build.rs\">build.rs</a> scripts attempt to set RUSTFLAGS or similar?</p>\n</blockquote>\n<p>that seems fine though - I can imagine setting <code>-C link-arg</code> or something conditionally if you're linking a dependency statically or dynamically</p>",
        "id": 227686415,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614206071
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350/near/212225155\">said</a>:</p>\n<blockquote>\n<p>though <code>RUSTC_BOOTSTRAP</code> has to always be used when bootstrapping the compiler afaik so always getting a warning there also doesn't seem great :/</p>\n</blockquote>\n<p>note that setting BOOTSTRAP at the top level is not the same as setting it in <a href=\"http://build.rs\">build.rs</a>. AFAIK nothing sets it in <a href=\"http://build.rs\">build.rs</a> in rust-lang/rust, it just assumes it's being built with an unstable toolchain.</p>",
        "id": 227688677,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614207100
    },
    {
        "content": "<p>(If something is setting that in <a href=\"http://build.rs\">build.rs</a>, I'd personally consider it a bug)</p>",
        "id": 227688875,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614207193
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350/near/227686415\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350/near/227685159\">said</a>:</p>\n<blockquote>\n<p>Side note, I wonder if any <a href=\"http://build.rs\">build.rs</a> scripts attempt to set RUSTFLAGS or similar?</p>\n</blockquote>\n<p>that seems fine though - I can imagine setting <code>-C link-arg</code> or something conditionally if you're linking a dependency statically or dynamically</p>\n</blockquote>\n<p>Do you actually expect that that's used? You said \"I imagine we'd break half the ecosystem if we prevented that\", but do you really think half the ecosystem is setting those from <a href=\"http://build.rs\">build.rs</a>?</p>",
        "id": 227729948,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614239268
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I just posted one more followup comment on the PR, regarding one other place that you changed to pass down config that you now shouldn't need to change anymore.</p>",
        "id": 227730386,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614239606
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350/near/227729948\">said</a>:</p>\n<blockquote>\n<p>do you really think half the ecosystem is setting those from <a href=\"http://build.rs\">build.rs</a>?</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><code>$ rg rustc-env $CARGO_HOME/registry | tee env.txt\n</code></pre></div>\n<p><a href=\"/user_uploads/4715/Nd89JD2SdT-mIfaj1lHCrvkv/env.txt\">env.txt</a><br>\nSurprisingly I don't see <code>RUSTFLAGS</code> anywhere, although this is just what I happen to have cached locally, not the whole index.</p>\n<p>I guess my real concern is I don't see any reason to forbid it. It doesn't break anything and it just makes life harder for the authors of build scripts.</p>",
        "id": 227771993,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614262186
    },
    {
        "content": "<p>I can think of several reasons. I wouldn't want a crate changing my target features, for instance.</p>",
        "id": 227801902,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614272980
    },
    {
        "content": "<p>Or passing -l rather than telling Cargo to link a library.</p>",
        "id": 227802022,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614273011
    },
    {
        "content": "<p>Or changing optimization flags.</p>",
        "id": 227803706,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614273686
    },
    {
        "content": "<p>I really can't think of any legitimate reason why a build script should ever be able to change RUSTFLAGS.</p>",
        "id": 227803832,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614273730
    },
    {
        "content": "<p>Does setting <code>RUSTFLAGS</code> from build scripts have any effect?<br>\nIt seems that <code>rustc</code> doesn't respect that environment variable:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$</span> <span class=\"nv\">RUSTFLAGS</span><span class=\"o\">=</span>invalid rustc - <span class=\"o\">&lt;&lt;&lt;</span><span class=\"s1\">'fn main() {}'</span>\n<span class=\"gp\">$</span> <span class=\"nb\">echo</span> <span class=\"nv\">$?</span>\n<span class=\"go\">0</span>\n</code></pre></div>\n<p>And it's <code>rustc-env</code>, so Cargo probably doesn't read it?</p>",
        "id": 227806109,
        "sender_full_name": "hyd-dev",
        "timestamp": 1614274588
    },
    {
        "content": "<p>Nope. Doesn't have any effect.</p>",
        "id": 227806659,
        "sender_full_name": "bjorn3",
        "timestamp": 1614274804
    },
    {
        "content": "<p>Ah, even better.</p>",
        "id": 227823579,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614281454
    }
]