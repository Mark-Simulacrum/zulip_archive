[
    {
        "content": "<p>A new proposal has been announced <a href=\"https://github.com/rust-lang/compiler-team/issues/277\" title=\"https://github.com/rust-lang/compiler-team/issues/277\">#277</a>. It will be brought up at the next meeting.</p>",
        "id": 194545129,
        "sender_full_name": "triagebot",
        "timestamp": 1587217158
    },
    {
        "content": "<p>The state of my understanding is:<br>\nThe current monolithic query plumbing does not need to be in librustc_middle.<br>\nThe list of all queries and their key types is required to define the DepKinds and DepNodes.<br>\nI don't know how to remove the use of the DepGraph by TyCtxt.</p>",
        "id": 194550646,
        "sender_full_name": "cjgillot",
        "timestamp": 1587224457
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> we might want a bit more detail here in terms of the proposed approach. =) <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> described <a href=\"https://github.com/rust-lang/rust/pull/70951#issuecomment-612156842\" title=\"https://github.com/rust-lang/rust/pull/70951#issuecomment-612156842\">their preferred approach</a>. I don't have a strong opinion yet but I am in favor of the overarching goal. I'd actually like to see us reconciling a bit with salsa, longer term, but I'm not pushing on that yet, in part because I don't have enough energy to keep up with salsa anyway :P</p>",
        "id": 196290289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588674454
    },
    {
        "content": "<p>I don't really have a converged design in mind. I would like to get to something like @eddyb described. Each crate would be able to only define a set of queries. The same crate, or a downstream crate would then be able to <code>provide</code> it. </p>\n<p>However, I don't yet have a plan to get there. AFAIK, the main blocker is the definition of the <code>DepKind</code> type, and how to get rid of it / render it opaque.<br>\nFrom my experiments, all the query invocation system can be moved out of librustc_middle. I think the definition of the <code>Providers</code> struct would be movable. The issue is the <code>DepKind</code> enum, and the types in <code>rustc_middle::dep_graph</code>. They are intertwined into manual dependency handling, for instance with the <code>WithDepNode</code> type. I don't have a path forward for this.</p>",
        "id": 196345475,
        "sender_full_name": "cjgillot",
        "timestamp": 1588702708
    },
    {
        "content": "<p>Hmm, so, salsa's solution here is that the dep-kind winds up getting generated at the very last crate (e.g., the driver), but very little code needs to interact with it anyhow.</p>",
        "id": 196353733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588706416
    },
    {
        "content": "<p>We use a trait instead of providers, so that each crate can get a <code>&amp;dyn Database</code> with all the query methods -- this has some pros and some cons</p>",
        "id": 196353787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588706448
    },
    {
        "content": "<p>The problem is not so much of the DepKind being used, but of the DepKind being required to instantiate the DepGraph. And the DepGraph is accessed directly. The first step would be to get rid of these direct accesses to the DepGraph, and replace them with some (query-based?) abstraction.</p>",
        "id": 196369838,
        "sender_full_name": "cjgillot",
        "timestamp": 1588713687
    },
    {
        "content": "<p>The largest use of the DepGraph in rustc_middle is in traits/select.rs. A first step may be to integrate the selection and evaluation caches into the query system. What are the constraints on the design for these caches?</p>",
        "id": 196370678,
        "sender_full_name": "cjgillot",
        "timestamp": 1588714093
    },
    {
        "content": "<p>I think i have an idea about this.</p>\n<p>The goal: to decouple the compiler crates and remove unnecessary dependency.</p>\n<p>The plan:</p>\n<p>Split <code>Providers</code> into many different smaller Providers,  and store them in a <a href=\"https://docs.rs/typemap/0.3.3/typemap/struct.TypeMap.html\"><code>TypeMap</code></a>. </p>\n<p>Instead of <code>rustc_interface</code> invoking each <code>provide</code> fn separately, each module declare them into a <a href=\"https://docs.rs/linkme/0.2.2/linkme/\"><code>distributed_slice</code></a>, and <code>rustc_interface</code> will execute these functions to populate the <code>TypeMap</code> with the provider.</p>\n<p>When one crate want to execute a provider defined within another crate, it imports the definition of that provider from that crate, and retrieve an instance of it from the <code>TypeMap</code>, since everything is already initialized it can succeed in doing so.</p>\n<p>In this way, i think we can decouple all the modules. No one needs to use or import a provider it neither provides nor uses.</p>",
        "id": 204333894,
        "sender_full_name": "Charles Lew",
        "timestamp": 1595136170
    },
    {
        "content": "<p>-</p>",
        "id": 204333937,
        "sender_full_name": "Charles Lew",
        "timestamp": 1595136244
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> that's far too dynamic for my liking. not to mention inefficient by default (<code>TypeMap</code>, that is)</p>",
        "id": 204604482,
        "sender_full_name": "eddyb",
        "timestamp": 1595366587
    },
    {
        "content": "<blockquote>\n<p>A library for safe cross-platform linker shenanigans.</p>\n</blockquote>\n<p>\"Press X to doubt\" comes to mind</p>",
        "id": 204604505,
        "sender_full_name": "eddyb",
        "timestamp": 1595366607
    },
    {
        "content": "<p>like that's top 10 famous last words of all time right there</p>",
        "id": 204604597,
        "sender_full_name": "eddyb",
        "timestamp": 1595366658
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> also this just doesn't seem necessary? look at how salsa does it. and even salsa seems a bit too much for rustc for me (but arguably doable)</p>",
        "id": 204604689,
        "sender_full_name": "eddyb",
        "timestamp": 1595366755
    },
    {
        "content": "<blockquote>\n<p>The largest use of the DepGraph in rustc_middle is in traits/select.rs. A first step may be to integrate the selection and evaluation caches into the query system.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> sorry, I just saw this - couldn't we just make that code be in a crate that depends on all the crates that <em>define</em> queries? (not necessary all the crates that <em>implement</em> them)</p>",
        "id": 204604975,
        "sender_full_name": "eddyb",
        "timestamp": 1595366943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> the problem with the trait system not being querifiable is mostly to do with cycles, which the trait system handles in a sound way, but queries in general cannot soundly depend on themselves. there also used to be inference too but we got around that with canonicalization. not sure how Chalk would integrate with incremental tbh</p>",
        "id": 204605159,
        "sender_full_name": "eddyb",
        "timestamp": 1595367057
    }
]