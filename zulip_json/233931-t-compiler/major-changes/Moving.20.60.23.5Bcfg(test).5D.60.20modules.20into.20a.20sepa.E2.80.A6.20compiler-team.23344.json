[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/compiler-team/issues/344\">#344</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 206804794,
        "sender_full_name": "triagebot",
        "timestamp": 1597319027
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span> as reviewer of <a href=\"https://github.com/rust-lang/rust/pull/75108\">https://github.com/rust-lang/rust/pull/75108</a><br>\ncc <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> do you want to be a mentor of this proposal?</p>",
        "id": 206805077,
        "sender_full_name": "lzutao",
        "timestamp": 1597319232
    },
    {
        "content": "<p>IMO we don't need an MCP for this, we can just do it. But I'm not opposed to reviewing PRs finishing this (IIRC <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> has done this for several compiler crates already).</p>",
        "id": 206805193,
        "sender_full_name": "simulacrum",
        "timestamp": 1597319318
    },
    {
        "content": "<p>One point I’d have here is that it be nice to make the current scheme of the cfg in the file better as a <em>lot</em> of existing code does it outside of the stdlib.</p>",
        "id": 206806858,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1597320579
    },
    {
        "content": "<p>I feel like I'm missing something, you still have to recompile <code>std</code> with <code>--cfg test</code> to have the tests included.</p>",
        "id": 206815390,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597325929
    },
    {
        "content": "<p>iirc the compiler doesn't emit the <a href=\"http://test.rs\">test.rs</a> into dep-info for the non-test compilation, which means that you don't recompile the library <em>twice</em> with this approach, but I forget how exactly it works</p>",
        "id": 206816470,
        "sender_full_name": "simulacrum",
        "timestamp": 1597326462
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Moving.20.60.23.5Bcfg(test).5D.60.20modules.20into.20a.20sepa.E2.80.A6.20compiler-team.23344/near/206805193\">said</a>:</p>\n<blockquote>\n<p>IMO we don't need an MCP for this, we can just do it.</p>\n</blockquote>\n<p>I would like to have a consensus about moving <code>cfg(test)</code> tests to files.<br>\nSo we don't have to discuss whether to move tests in each PR.</p>",
        "id": 206821470,
        "sender_full_name": "lzutao",
        "timestamp": 1597328984
    },
    {
        "content": "<p>hm well I don't think there was any opposition</p>",
        "id": 206821578,
        "sender_full_name": "simulacrum",
        "timestamp": 1597329024
    },
    {
        "content": "<p>but mcp doesn't seem bad I guess to re-affirm that</p>",
        "id": 206821596,
        "sender_full_name": "simulacrum",
        "timestamp": 1597329032
    },
    {
        "content": "<p>I mean moving tests is kind of big changes (in diff) and has disadvantage in <code>git blame</code>.<br>\nSo reviewer may feel hesitant to accept PR like that.</p>",
        "id": 206822411,
        "sender_full_name": "lzutao",
        "timestamp": 1597329444
    },
    {
        "content": "<p>I'm not too worried about large PRs that are <em>just</em> moving things around</p>",
        "id": 206822531,
        "sender_full_name": "simulacrum",
        "timestamp": 1597329499
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span>: Proposal <a href=\"https://github.com/rust-lang/compiler-team/issues/344#issuecomment-673630248\">#344</a> has been seconded, and will be approved in 10 days if no objections are raised.</p>",
        "id": 206849531,
        "sender_full_name": "triagebot",
        "timestamp": 1597342127
    },
    {
        "content": "<p>This is already done for all crates <em>except</em> for <code>std</code>, which is whitelisted in <code>tidy</code>.</p>",
        "id": 206849603,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1597342185
    },
    {
        "content": "<p>I didn't migrate <code>std</code> in <a href=\"https://github.com/rust-lang/rust/issues/63207\">#63207</a> because it contained a lot of tests, needed platform-specific testing, and was maintained by the library team.</p>",
        "id": 206849926,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1597342363
    },
    {
        "content": "<p>It would be great if someone could finish this work now.</p>",
        "id": 206849950,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1597342383
    },
    {
        "content": "<p>Relevant tidy check - <a href=\"https://github.com/rust-lang/rust/blob/master/src/tools/tidy/src/unit_tests.rs\">https://github.com/rust-lang/rust/blob/master/src/tools/tidy/src/unit_tests.rs</a></p>",
        "id": 206850000,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1597342424
    },
    {
        "content": "<p>Why shouldn’t every Rust crate ever follow suit here? What makes the standard library different?</p>",
        "id": 206865946,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1597350140
    },
    {
        "content": "<p>AFAIK all crates should do this, given current compiler/cargo limitations</p>",
        "id": 206866018,
        "sender_full_name": "simulacrum",
        "timestamp": 1597350175
    },
    {
        "content": "<p>I was afraid you’d say that. Do we have any sense of how to fix those limitations? Adding tests in this way has been the <em>de-facto</em> recommendation since Rust 1.0.</p>",
        "id": 206882338,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1597360086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> to be clear, the difference is between <code>#[cfg(test)] mod foo { ... }</code> and <code>#[cfg(test)] mod foo;</code>, both of which seem pretty canonical to me. It is true that the first option is in some sense more ergonomic (and recommended, e.g., cargo new --lib generates it), though.</p>\n<p>I think fixing this basically isn't possible given the current file-based interface layer between rustc and Cargo; I am not aware of build systems that operate on a more granular level, but perhaps they exist. We could make rustc emit some more detailed information that isolated cfg-removed code as \"not important\" or Cargo could have a \"quick run\" feature for rustc where we pass in a hash that makes rustc exit early if, for example, the parsed (and expanded) crate is not different. Maybe incremental will eventually mean that the point here is moot, as recompiling will be sufficiently instant that it won't be a problem, but I think this is not going to be true for a long while -- and perhaps never.</p>\n<p>The primary problem at least for most crates is not in the <em>individual</em> case of recompiling the library when running cargo test, but the fact that said recompilation forces Cargo to recompile all downstream crates too.</p>\n<p>I guess an alternative is that we get reproducible builds to 100% and incremental far enough to where the recompilation of the library gives cargo an identical binary which it can then say \"hey skip recompiling things depending on this\".</p>",
        "id": 206889788,
        "sender_full_name": "simulacrum",
        "timestamp": 1597368092
    },
    {
        "content": "<p>I read <a href=\"https://john-millikin.com/first-impressions-of-rust#single-crate-packaging\">somewhere else</a> that bazel has capabilities to avoid rebuilding leaf files.</p>",
        "id": 206892066,
        "sender_full_name": "lzutao",
        "timestamp": 1597370890
    },
    {
        "content": "<p>But I've never used bazel so</p>",
        "id": 206892080,
        "sender_full_name": "lzutao",
        "timestamp": 1597370913
    },
    {
        "content": "<p>I'm not sure that is the case, but I also don't really know what the author meant by that - it seems like doing what I suggest wouldn't be possible without a Rust parser and I doubt they have that :)</p>",
        "id": 206893275,
        "sender_full_name": "simulacrum",
        "timestamp": 1597372607
    },
    {
        "content": "<blockquote>\n<p>the difference is between #[cfg(test)] mod foo { ... } and #[cfg(test)] mod foo;</p>\n</blockquote>\n<p>Good to hear, that was what I was envisioning.</p>\n<blockquote>\n<p>but the fact that said recompilation forces Cargo to recompile all downstream crates too.</p>\n</blockquote>\n<p>That sounds promising — I'm not seeing how that impacts a normal user with a single crate or even a workspace. Is this really just a problem for the complicated setup inherent to the compiler itself?</p>",
        "id": 206928197,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1597411251
    },
    {
        "content": "<p>I think workspaces would have the same problem</p>",
        "id": 206928302,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597411327
    },
    {
        "content": "<p>if you modify any file in <code>rusoto_core</code> all 200 downstream crates now have to be recompiled</p>",
        "id": 206928324,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597411342
    },
    {
        "content": "<p>and having tests inline means that changing tests counts as changing a source file</p>",
        "id": 206928343,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597411363
    },
    {
        "content": "<p>Well, it still impacts people with just one crate, just less - you still invoke rustc twice if they're inline vs not</p>",
        "id": 206935781,
        "sender_full_name": "simulacrum",
        "timestamp": 1597415893
    },
    {
        "content": "<p>I'm sure I could figure this out by issue spelunking, but  how is this not already trivially handled by incremental? Shouldn't the queries resolve to the exact same thing because all the changes happened in the cfg-gated section?</p>\n<p>Or is the problem that we end up relinking, even without any compilation?</p>",
        "id": 206974429,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1597435075
    },
    {
        "content": "<blockquote>\n<p>both of which seem pretty canonical to me</p>\n</blockquote>\n<p>Likewise in the \"if I weren't so lazy\" camp, I wonder what a search of github for <code>mod test;</code> vs <code>mod test {</code> would turn up. I'd pretty strongly expect inline test modules to be 90% of the case, if not more.</p>\n<p>As a data point, it's what I've encouraged at every training session I've ever given.</p>",
        "id": 206974960,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1597435195
    },
    {
        "content": "<p>incremental is both not always on and doesn't give you zero-time -- in particular, we still parse and expand code at <em>least</em></p>",
        "id": 206975546,
        "sender_full_name": "simulacrum",
        "timestamp": 1597435352
    },
    {
        "content": "<p>and incremental isn't perfect even on identical code</p>",
        "id": 206975562,
        "sender_full_name": "simulacrum",
        "timestamp": 1597435363
    },
    {
        "content": "<p>much less when you've actually changed things just in cfg'd out code</p>",
        "id": 206975584,
        "sender_full_name": "simulacrum",
        "timestamp": 1597435373
    },
    {
        "content": "<p>Moving the tests to a separate file doesn't give you zero time either, right? You still parse and expand all the non-test code to get to the <code>#[cfg(test)] mod test</code>, yeah?</p>",
        "id": 206976569,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1597436003
    },
    {
        "content": "<p>no</p>",
        "id": 206977886,
        "sender_full_name": "simulacrum",
        "timestamp": 1597436811
    },
    {
        "content": "<p>if it's a separate file you only run rustc once</p>",
        "id": 206977898,
        "sender_full_name": "simulacrum",
        "timestamp": 1597436819
    },
    {
        "content": "<p>I wonder if salsa will help improving this case.</p>",
        "id": 207237174,
        "sender_full_name": "lzutao",
        "timestamp": 1597740865
    },
    {
        "content": "<p>also, anybody want to take this issue after finishing proposal.<br>\nIf I take this issue, should I do it part-by-part or all-in-once?</p>",
        "id": 207237332,
        "sender_full_name": "lzutao",
        "timestamp": 1597741008
    },
    {
        "content": "<blockquote>\n<p>I wonder if salsa will help improving this case.</p>\n</blockquote>\n<p>Not completely, \"has this file changed?\" is an important coars-grained granularity used by any build system. No matter how smart you make the compiler to be, it won't help you to determine if you should run the compiler in the first place.</p>",
        "id": 207237487,
        "sender_full_name": "matklad",
        "timestamp": 1597741124
    },
    {
        "content": "<p>I agree, but will the compiler do less work and run faster?</p>",
        "id": 207237821,
        "sender_full_name": "lzutao",
        "timestamp": 1597741379
    },
    {
        "content": "<p>Yes, in a rather general sense that \"improving incremental compilation will improve incremental compilation\". I don't think there's anything specific to salsa per se -- it uses roughly the same red-green logic as the one already in the compiler.</p>",
        "id": 207238228,
        "sender_full_name": "matklad",
        "timestamp": 1597741767
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Moving.20.60.23.5Bcfg(test).5D.60.20modules.20into.20a.20sepa.E2.80.A6.20compiler-team.23344/near/206977898\">said</a>:</p>\n<blockquote>\n<p>if it's a separate file you only run rustc once</p>\n</blockquote>\n<p>I'm totally missing something then. My understanding is that Cargo invokes <code>rustc src/lib.rs</code> which then has to parse that file to find all the modules to include them. </p>\n<p>Is this after that step, when we've output the <code>.d</code> files? So in non-test mode the <code>.d</code> files don't include the separate <code>test.rs</code> files, but the <code>.d</code> files in test mode do?</p>",
        "id": 207275549,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1597765116
    },
    {
        "content": "<p>so the process if it's in a separate file is:</p>\n<ul>\n<li>edit test</li>\n<li>run cargo test<br>\n    * runs rustc --test <a href=\"http://foo.rs\">foo.rs</a> --extern mycrate=libcrate.rlib</li>\n</ul>\n<p>so the process if it's in the same file is:</p>\n<ul>\n<li>edit test</li>\n<li>run cargo test<br>\n    * runs rustc <a href=\"http://lib.rs\">lib.rs</a><br>\n    * runs rustc --test <a href=\"http://lib.rs\">lib.rs</a> --extern mycrate=libcrate.rlib</li>\n</ul>",
        "id": 207275807,
        "sender_full_name": "simulacrum",
        "timestamp": 1597765263
    },
    {
        "content": "<p>yeah there' separate .d for the <code>--test</code> run and not</p>",
        "id": 207275852,
        "sender_full_name": "simulacrum",
        "timestamp": 1597765290
    },
    {
        "content": "<p>(<code>foo.rs</code>?)</p>",
        "id": 207275875,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1597765308
    },
    {
        "content": "<p>er, <a href=\"http://lib.rs\">lib.rs</a></p>",
        "id": 207276054,
        "sender_full_name": "simulacrum",
        "timestamp": 1597765389
    },
    {
        "content": "<p>And these processes are only for the second run of <code>cargo test</code>, right, as the first run Cargo has no knowledge about the files involved yet?</p>",
        "id": 207276259,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1597765491
    },
    {
        "content": "<p>And is the distinction <strong>powered</strong> by the <code>.d</code> files?</p>",
        "id": 207276359,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1597765544
    },
    {
        "content": "<p>hm well the first run would need to build the crate anyway</p>",
        "id": 207276447,
        "sender_full_name": "simulacrum",
        "timestamp": 1597765574
    },
    {
        "content": "<p>but if you're after e.g. cargo build, then it doesn't need to</p>",
        "id": 207276467,
        "sender_full_name": "simulacrum",
        "timestamp": 1597765582
    },
    {
        "content": "<p>Just to be clear, the first call to <code>rustc lib.rs</code> is only for integration tests and doctests.  If you run <code>cargo test --lib</code>, it won't do that step (which I think is relevant here, since we're talking about modifying unit tests).  There is no <code>--extern</code> for unit tests pointing to itself.</p>",
        "id": 207278083,
        "sender_full_name": "Eric Huss",
        "timestamp": 1597766343
    },
    {
        "content": "<p>ah, yes, that is a good point</p>",
        "id": 207278466,
        "sender_full_name": "simulacrum",
        "timestamp": 1597766518
    },
    {
        "content": "<p>but <span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> that doesn't help speed up rebuild times in the case that your crate also has integration tests, right? Because you'll still wait for the crate to build twice unless passing --lib</p>",
        "id": 207278598,
        "sender_full_name": "simulacrum",
        "timestamp": 1597766566
    },
    {
        "content": "<p>(obviously in parallel to some extent)</p>",
        "id": 207278625,
        "sender_full_name": "simulacrum",
        "timestamp": 1597766578
    },
    {
        "content": "<p>Yea, in the context of <code>x.py</code>, AFAIK there doesn't exist that fine-grained control, so I think the original proposal is good for the standard library.  However, I'm not sure I entirely agree that it should be a general pattern everyone should necessarily use. I generally use targeted flags (like <code>--lib</code>), but maybe most people don't?</p>",
        "id": 207278992,
        "sender_full_name": "Eric Huss",
        "timestamp": 1597766761
    },
    {
        "content": "<p>I can't remember the names associated with them (flag itself) or the \"target names\" needed</p>",
        "id": 207281038,
        "sender_full_name": "simulacrum",
        "timestamp": 1597767657
    },
    {
        "content": "<p>Maybe if we did the x.py thing of cargo test src/foo/test.rs</p>",
        "id": 207281061,
        "sender_full_name": "simulacrum",
        "timestamp": 1597767669
    },
    {
        "content": "<p>(x.py would love to move that logic out to cargo so it works for more than just ui testing)</p>",
        "id": 207281108,
        "sender_full_name": "simulacrum",
        "timestamp": 1597767694
    },
    {
        "content": "<p>almost 10 days since the proposal seconded<br>\nI'd ask again:<br>\n<span class=\"user-mention silent\" data-user-id=\"209117\">lzutao</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Moving.20.60.23.5Bcfg(test).5D.60.20modules.20into.20a.20sepa.E2.80.A6.20compiler-team.23344/near/207237332\">said</a>:</p>\n<blockquote>\n<p>also, anybody want to take this issue after finishing proposal.<br>\nIf I take this issue, should I do it part-by-part or all-in-once?</p>\n</blockquote>",
        "id": 207842264,
        "sender_full_name": "lzutao",
        "timestamp": 1598275486
    },
    {
        "content": "<p>This proposal has been accepted: <a href=\"https://github.com/rust-lang/compiler-team/issues/344\">#344</a>.</p>",
        "id": 208142426,
        "sender_full_name": "triagebot",
        "timestamp": 1598472792
    },
    {
        "content": "<p>Proposal is being implemented in <a href=\"https://github.com/rust-lang/rust/pull/75979\">https://github.com/rust-lang/rust/pull/75979</a> (draft state).</p>",
        "id": 208220164,
        "sender_full_name": "lzutao",
        "timestamp": 1598536839
    }
]