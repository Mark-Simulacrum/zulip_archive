[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/compiler-team/issues/319\">#319</a>. It will be brought up at the next meeting.</p>",
        "id": 201727958,
        "sender_full_name": "triagebot",
        "timestamp": 1592920221
    },
    {
        "content": "<p>The proposal has a level for less debug+little comp time cost and one for less debug+bigger comp time cost. What if you want to enable optimizations that have a big compile time cost, but you do want full debugability?</p>",
        "id": 201732492,
        "sender_full_name": "bjorn3",
        "timestamp": 1592922247
    },
    {
        "content": "<p>As an example, what I had in mind were things like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>where under heavy optimization, this might become the equivalent of:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>But it's not as debuggable because you can't step into the <code>add</code> invocation or put a breakpoint on line 2. You can still have full debug symbols and line information, but it's not the same experience you might hope for without the aggressive optimizations enabled.</p>",
        "id": 201734921,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1592923327
    },
    {
        "content": "<p>I'd prefer if <code>-Zunsound-mir-optimizations</code> would be called <code>-Zexperimental-mir-optimizations</code>, or something to that extent, since IMO it is more useful to have it as a sort of staging area for new optimizations, where we might not be sure how well they work in practice, but they don't have any acute known soundness issues.</p>",
        "id": 201736788,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592924180
    },
    {
        "content": "<p>Yeah, I like that a lot better. Great suggestion!</p>",
        "id": 201737718,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1592924569
    },
    {
        "content": "<p>are the two flags important to be able to, say, have an experimental optimization at level 0, rather than have <code>-Zmir-opt-level=experimental</code> ?</p>",
        "id": 201738362,
        "sender_full_name": "lqd",
        "timestamp": 1592924847
    },
    {
        "content": "<p>I think the stuff we know is broken or whatever should be gated separately from the stuff that works, but might be bad or compile times or whatever.</p>",
        "id": 201738751,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1592925039
    },
    {
        "content": "<p>So I was leaning toward two flags for social/documentation reasons not technical ones.</p>",
        "id": 201738773,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1592925056
    },
    {
        "content": "<p>understood</p>",
        "id": 201738811,
        "sender_full_name": "lqd",
        "timestamp": 1592925074
    },
    {
        "content": "<p>My impression is that some users out there will just go <code>-O9999</code> if you let them</p>",
        "id": 201738822,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1592925079
    },
    {
        "content": "<p><code>-Zexperimental-mir-optimizations</code> to me is kind of like a feature flag</p>",
        "id": 201738876,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1592925105
    },
    {
        "content": "<p>But there's really no reason ever for end-users to set it</p>",
        "id": 201738903,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1592925120
    },
    {
        "content": "<p>yeah :) quite a number of papers have <code>-O9</code> or more</p>",
        "id": 201738966,
        "sender_full_name": "lqd",
        "timestamp": 1592925131
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 201738985,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1592925139
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/-Zmir-opt-level.20Reform.20compiler-team.23319/near/201732492\">said</a>:</p>\n<blockquote>\n<p>The proposal has a level for less debug+little comp time cost and one for less debug+bigger comp time cost. What if you want to enable optimizations that have a big compile time cost, but you do want full debugability?</p>\n</blockquote>\n<p>Given that we don't really have an equivalent to GCC's <code>-Og</code> with LLVM, I think it's reasonably to punt on this for MIR optimizations as well, at least for now.</p>",
        "id": 201739172,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592925223
    },
    {
        "content": "<p>(your earlier example was also very interesting, wrt the planned story around users' ability to develop/debug <code>const fns</code> which I don't see being mentioned often I don't think, or might have missed but that's another topic altogether)</p>",
        "id": 201739193,
        "sender_full_name": "lqd",
        "timestamp": 1592925231
    },
    {
        "content": "<p>I suppose at some point after this we'd turn on <code>-Zmir-opt-level=2</code> when <code>-Copt-level=2/3</code> is passed, right?</p>",
        "id": 201739382,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592925304
    },
    {
        "content": "<p>Yeah, that seems reasonable to me but I didn't want to suggest a ton of changes all in the same proposal.</p>",
        "id": 201739555,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1592925385
    },
    {
        "content": "<p>If we decide to go this way, it seems like there's also the potential for having an official stabilization path for new MIR optimizations.</p>",
        "id": 201739615,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1592925421
    },
    {
        "content": "<p>But, again, \"Future Work\" <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 201739675,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1592925446
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span>: Proposal <a href=\"https://github.com/rust-lang/compiler-team/issues/319#issuecomment-648232490\">#319</a> has been seconded, and will be approved in 10 days if no objections are raised.</p>",
        "id": 201739998,
        "sender_full_name": "triagebot",
        "timestamp": 1592925581
    },
    {
        "content": "<p>Seems like perhaps we <em>should</em> have an opt-level=g option.</p>",
        "id": 201751488,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1592930845
    },
    {
        "content": "<p>I support this, expect I dont like \"experimental\" as a euphemism for \"buggy\"</p>",
        "id": 201754643,
        "sender_full_name": "RalfJ",
        "timestamp": 1592932390
    },
    {
        "content": "<p>I think the flag to enable known-incorrect optimizations should contain a trigger word like \"broken\", \"wrong\", \"incorrect\", \"unsound\" or so</p>",
        "id": 201754690,
        "sender_full_name": "RalfJ",
        "timestamp": 1592932409
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/-Zmir-opt-level.20Reform.20compiler-team.23319/near/201736788\">said</a>:</p>\n<blockquote>\n<p>I'd prefer if <code>-Zunsound-mir-optimizations</code> would be called <code>-Zexperimental-mir-optimizations</code>, or something to that extent, since IMO it is more useful to have it as a sort of staging area for new optimizations, where we might not be sure how well they work in practice, but they don't have any acute known soundness issues.</p>\n</blockquote>\n<p>the thing is, we have some passes with known accute soundness issues</p>",
        "id": 201754846,
        "sender_full_name": "RalfJ",
        "timestamp": 1592932478
    },
    {
        "content": "<p>what do you suggest we do with those?</p>",
        "id": 201754854,
        "sender_full_name": "RalfJ",
        "timestamp": 1592932485
    },
    {
        "content": "<p>see e.g. <a href=\"https://github.com/rust-lang/rust/pull/73262\">https://github.com/rust-lang/rust/pull/73262</a></p>",
        "id": 201754950,
        "sender_full_name": "RalfJ",
        "timestamp": 1592932543
    },
    {
        "content": "<p>I expect that not <em>all</em> optimizations controlled by the flag will have known soundness issues, some optimizations might just be complex and new so we aren't yet confident that they're correct in practice (eg. the destination propagation pass once it's merged). For those it would make little sense to label them all as \"unsound\" off the bat.</p>\n<p>(Perhaps the flag should take a pass name and only enable <em>that</em> pass, to make it easier to test out a specific experimental pass and avoid the known-unsound ones?)</p>",
        "id": 201755671,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592932874
    },
    {
        "content": "<blockquote>\n<p>I expect that not all optimizations controlled by the flag will have known soundness issues, some optimizations might just be complex and new so we aren't yet confident that they're correct in practice (eg. the destination propagation pass once it's merged). For those it would make little sense to label them all as \"unsound\" off the bat.</p>\n</blockquote>\n<p>that sounds like we have 2 different usecases: a \"holding area\" for known-unsound optimizations, and a \"staging area\" for new optimizations</p>",
        "id": 201758553,
        "sender_full_name": "RalfJ",
        "timestamp": 1592934410
    },
    {
        "content": "<p>they might warrant separate treatment</p>",
        "id": 201758578,
        "sender_full_name": "RalfJ",
        "timestamp": 1592934423
    },
    {
        "content": "<p>Thanks for the feedback <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>!</p>",
        "id": 201759447,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1592934889
    },
    {
        "content": "<p>It feels to me like in practice, those two different flags would be used in very similar ways.</p>",
        "id": 201759507,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1592934927
    },
    {
        "content": "<p>I suppose it doesn't cost us very much to have two flags but it does feel a bit redundant.</p>",
        "id": 201759639,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1592934988
    },
    {
        "content": "<p>Is your concern that users won't know that this flag could cause misoptimizations/unsound behavior and just turn it on to get more optimization?</p>",
        "id": 201760055,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1592935184
    },
    {
        "content": "<p>We could emit a warning if this flag is used that explains it enables <code>\"experimental, buggy and potentially unsound optimizations that may break your code\"</code> or something to that effect.</p>",
        "id": 201760240,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1592935252
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/-Zmir-opt-level.20Reform.20compiler-team.23319/near/201760055\">said</a>:</p>\n<blockquote>\n<p>Is your concern that users won't know that this flag could cause misoptimizations/unsound behavior and just turn it on to get more optimization?</p>\n</blockquote>\n<p>essentially, yes</p>",
        "id": 201761790,
        "sender_full_name": "RalfJ",
        "timestamp": 1592936018
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/-Zmir-opt-level.20Reform.20compiler-team.23319/near/201760240\">said</a>:</p>\n<blockquote>\n<p>We could emit a warning if this flag is used that explains it enables <code>\"experimental, buggy and potentially unsound optimizations that may break your code\"</code> or something to that effect.</p>\n</blockquote>\n<p>hm. I guess there is precedent for that with the \"incomplete features\" lint.</p>",
        "id": 201761821,
        "sender_full_name": "RalfJ",
        "timestamp": 1592936034
    },
    {
        "content": "<p>I personally prefer to be as aggressive as possible about this, with a really scary flag name, but I could see how people disagree with that ;)</p>",
        "id": 201761890,
        "sender_full_name": "RalfJ",
        "timestamp": 1592936052
    },
    {
        "content": "<p>Maybe the flag should require a pass name to enable? Would make it impossible to enable multiple passes, but normally developers will likely only need to test one pass, unless I'm mistaken.</p>",
        "id": 201762222,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592936227
    },
    {
        "content": "<p>Maybe add a <code>-Zmir-passes</code> option that is like <code>-Cpasses</code> except for MIR optimizations instead of LLVM optimizations?</p>",
        "id": 201767156,
        "sender_full_name": "bjorn3",
        "timestamp": 1592938599
    },
    {
        "content": "<p>I was thinking of building a \"proper\" MIR pass manager, but that seems like it'd have much bigger scope than what's proposed here</p>",
        "id": 201769789,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592939746
    },
    {
        "content": "<p>(I'm hoping something like that will fall out of our Sealed Rust work eventually)</p>",
        "id": 201769935,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592939810
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/-Zmir-opt-level.20Reform.20compiler-team.23319/near/201762222\">said</a>:</p>\n<blockquote>\n<p>Maybe the flag should require a pass name to enable? </p>\n</blockquote>\n<p>I thought about that but the primary reason I wanted this flag was so we could keep using the mir-opt tests with our unstable/buggy/unsound/experimental optimizations and those tests already test against the output of specific passes. So it seemed fine to just make a binary on/off flag.</p>",
        "id": 201772411,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1592941236
    },
    {
        "content": "<p>maybe \"incomplete\"  optimizations?</p>",
        "id": 201859641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593011145
    },
    {
        "content": "<p>\"dangerous\"?</p>",
        "id": 201869600,
        "sender_full_name": "RalfJ",
        "timestamp": 1593015510
    },
    {
        "content": "<p>I'd rather not have a new flag, but since it'd be unstable, I guess I don’t care strongly either way… as long as its not something we would ever consider stabilising.</p>",
        "id": 202255151,
        "sender_full_name": "nagisa",
        "timestamp": 1593378190
    },
    {
        "content": "<p>Also, turns out you cannot post a reploy without subscribing to the stream – interesting!</p>",
        "id": 202255159,
        "sender_full_name": "nagisa",
        "timestamp": 1593378210
    },
    {
        "content": "<p>(Ability to turn on and off separate passes have many benefits, and is ultimately most flexible)</p>",
        "id": 202255224,
        "sender_full_name": "nagisa",
        "timestamp": 1593378255
    },
    {
        "content": "<p>(but as been mentioned above, it'd also involve most engineering effort, and managing optimisation ordering is a hard problem)</p>",
        "id": 202255241,
        "sender_full_name": "nagisa",
        "timestamp": 1593378301
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/-Zmir-opt-level.20Reform.20compiler-team.23319/near/202255151\">said</a>:</p>\n<blockquote>\n<p>I'd rather not have a new flag, but since it'd be unstable, I guess I don’t care strongly either way… as long as its not something we would ever consider stabilising.</p>\n</blockquote>\n<p>Yes, I completely agree. The flag would explicitly be permanently unstable.</p>",
        "id": 202264839,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1593393939
    },
    {
        "content": "<p>even with per-pass control I feel like there should be a speed bump to enabling a pass that is considered broken. but that could be in the pass name (<code>-Zmir-opt-pass=simplify-match-arms_unsound</code> etc)</p>",
        "id": 202909240,
        "sender_full_name": "RalfJ",
        "timestamp": 1593933206
    },
    {
        "content": "<p>Omg I almost missed this discussion! I'm glad I'm here.</p>",
        "id": 202962656,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594022626
    },
    {
        "content": "<p>I have two cents</p>",
        "id": 202962666,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594022638
    },
    {
        "content": "<p>First: I agree with Ralf in that the \"experimental\" (read: many of these are still broken) opts should have a speedbump or two in the compiler UI</p>",
        "id": 202962734,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594022681
    },
    {
        "content": "<p>I would use a harsh-ish word at least in the flag</p>",
        "id": 202962767,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594022721
    },
    {
        "content": "<p>Also, wait, tangent: thank you <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> for making this proposal. I had this in my mind after the discussion regarding mir opt levels but never took the time to continue with it. Thank you thank you thank you.</p>",
        "id": 202962854,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594022784
    },
    {
        "content": "<p>Second: Wesley, I might be misreading the proposal, but... are all the current Level 2 optimizations classified as being broken?</p>",
        "id": 202962905,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594022833
    },
    {
        "content": "<p>Because I know for a fact that there's one that isn't broken but that we gated at Level 2!</p>",
        "id": 202962929,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594022859
    },
    {
        "content": "<p>(That small thing that we did together to const-propagate function parameters, do you remember?)</p>",
        "id": 202963032,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594022955
    },
    {
        "content": "<p>(We gated that at level 2 because it gave a performance regression from the codegen units that rustc sends to llvm)</p>",
        "id": 202963077,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594023000
    },
    {
        "content": "<p>Yeah, I think the only 1:1 correspondence we have right now is the <code>mir-opt-level=1</code> is our stable, performant optimizations. Part of implementing this MCP will involve figuring out what <code>mir-opt-level</code> our other optimizations should go into and also gating some behind the unstable/experimental/unsound flag.</p>",
        "id": 202999161,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594046895
    },
    {
        "content": "<p>Great to hear you have that in mind <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 203025890,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594061028
    },
    {
        "content": "<p>Ping me whenever that initiative gets started so that I can help :3</p>",
        "id": 203026037,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594061106
    },
    {
        "content": "<p>This proposal has been accepted: <a href=\"https://github.com/rust-lang/compiler-team/issues/319\">#319</a>.</p>",
        "id": 203270548,
        "sender_full_name": "triagebot",
        "timestamp": 1594216853
    },
    {
        "content": "<p>okay so the MCP has been closed, but what does that mean for the still open discussion around what to call the flag(s) to enable unfinishd or known-broken optimizations?</p>",
        "id": 203276208,
        "sender_full_name": "RalfJ",
        "timestamp": 1594219606
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I was planning to leave that discussion to the PR which adds said flag(s). Does that seem reasonable to you?</p>",
        "id": 203280011,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594221321
    },
    {
        "content": "<p>yeah that seems fair</p>",
        "id": 203518241,
        "sender_full_name": "RalfJ",
        "timestamp": 1594393730
    }
]