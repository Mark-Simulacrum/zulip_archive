[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/compiler-team/issues/347\">#347</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 207470240,
        "sender_full_name": "triagebot",
        "timestamp": 1597877177
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"261224\">triagebot</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Uplift.20.60drop-bounds.60.20lint.20from.20clippy.20int.E2.80.A6.20compiler-team.23347/near/207470240\">said</a>:</p>\n<blockquote>\n<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/compiler-team/issues/347\">#347</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>\n</blockquote>\n<p>The reason this lint is set as warn, instead of deny like in Clippy, is to avoid breaking libraries like pin-project that use the trait coherence rules to prevent client crates from implementing Drop. And it's not like T: Drop is UB or anything, just useless most of the time.</p>\n<p>If you're using T: Drop correctly, then you know why this lint exists and know enough to disable it. But I don't want to break too much existing code. Does anybody know how this will interact with pin-project?</p>",
        "id": 207472069,
        "sender_full_name": "Michael Howell",
        "timestamp": 1597878545
    },
    {
        "content": "<p>we can make it <code>deny</code>, dependencies' lints are capped to <code>allow</code> anyway, so only building the crate directly will make you see the lint</p>",
        "id": 207493505,
        "sender_full_name": "oli",
        "timestamp": 1597906081
    },
    {
        "content": "<p>Meta-Meta: the same \"warn vs deny\" issue came up with CString lint as well. Do we have lint level policy written down somewhere? It seems like it's a better process to mechanically decide by looking at the flow chart, rather than debate in each particular case. </p>\n<p>Meta: I <em>think</em> rustc and clippy should use different criteria for <code>deny</code>. To me it seems that both lints should be deny in clippy and warn in rustc -- they are likely bugs, but not something invalid according to language per se.</p>",
        "id": 207504738,
        "sender_full_name": "matklad",
        "timestamp": 1597916125
    },
    {
        "content": "<p>Note that the linked forum post _does_ link to a valid use-case for this kind of bound.</p>",
        "id": 207523582,
        "sender_full_name": "nagisa",
        "timestamp": 1597931152
    },
    {
        "content": "<p>and overall, I wonder, is there another way to prevent users from implementing/instantiating something for <code>Copy</code> types without bounding on <code>Drop</code>?</p>",
        "id": 207523731,
        "sender_full_name": "nagisa",
        "timestamp": 1597931241
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> during the clippy 1.0 rfc this was already kinda decided, clippy deny lints rougly match up to rustc warn lints (very few rustc lints are deny)</p>",
        "id": 207528890,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1597934095
    },
    {
        "content": "<p>that said, not against making it deny</p>",
        "id": 207528905,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1597934101
    },
    {
        "content": "<p>I was mainly commenting on the fact that even <code>deny</code> is not a breaking change for dependencies</p>",
        "id": 207531412,
        "sender_full_name": "oli",
        "timestamp": 1597935334
    },
    {
        "content": "<p>I'm totally good with <code>warn</code></p>",
        "id": 207531426,
        "sender_full_name": "oli",
        "timestamp": 1597935342
    },
    {
        "content": "<blockquote>\n<p>Do we have lint level policy written down somewhere?</p>\n</blockquote>\n<p><a href=\"https://rustc-dev-guide.rust-lang.org/diagnostics.html#diagnostic-levels\">https://rustc-dev-guide.rust-lang.org/diagnostics.html#diagnostic-levels</a></p>\n<p>(See the top of that chapter for other guidelines, style, lint vs fixed diagnostic, etc.)</p>",
        "id": 207535042,
        "sender_full_name": "Eric Huss",
        "timestamp": 1597936994
    },
    {
        "content": "<p>(Scroll down a bit for lint <em>levels</em>)</p>",
        "id": 207535108,
        "sender_full_name": "Eric Huss",
        "timestamp": 1597937037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Uplift.20.60drop-bounds.60.20lint.20from.20clippy.20int.E2.80.A6.20compiler-team.23347/near/207493505\">said</a>:</p>\n<blockquote>\n<p>we can make it <code>deny</code>, dependencies' lints are capped to <code>allow</code> anyway, so only building the crate directly will make you see the lint</p>\n</blockquote>\n<p>pin-project is using drop bounds in a macro</p>",
        "id": 208144529,
        "sender_full_name": "Michael Howell",
        "timestamp": 1598473865
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span>: Proposal <a href=\"https://github.com/rust-lang/compiler-team/issues/347#issuecomment-694275482\">#347</a> has been seconded, and will be approved in 10 days if no objections are raised.</p>",
        "id": 210397963,
        "sender_full_name": "triagebot",
        "timestamp": 1600353031
    },
    {
        "content": "<p>This proposal has been accepted: <a href=\"https://github.com/rust-lang/compiler-team/issues/347\">#347</a>.</p>",
        "id": 211848371,
        "sender_full_name": "triagebot",
        "timestamp": 1601505034
    }
]