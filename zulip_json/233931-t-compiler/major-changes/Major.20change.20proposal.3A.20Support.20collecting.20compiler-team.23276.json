[
    {
        "content": "<p>A new proposal has been announced <a href=\"https://github.com/rust-lang/compiler-team/issues/276\" title=\"https://github.com/rust-lang/compiler-team/issues/276\">#276</a>. It will be brought up at the next meeting.</p>",
        "id": 194523191,
        "sender_full_name": "triagebot",
        "timestamp": 1587179703
    },
    {
        "content": "<p>Hmm, <span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span>, did you have any thoughts about how to implement this proposal?</p>",
        "id": 194539596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587209176
    },
    {
        "content": "<p>It's going to be tricky to combine with incremental compilation</p>",
        "id": 194539606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587209188
    },
    {
        "content": "<p>Well, not <em>necessarily</em>, you can certainly have a query that works the entire AST or something</p>",
        "id": 194539611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587209201
    },
    {
        "content": "<p>which we would usually write as one that walks each function and invokes a sub-query, to actually get some caching</p>",
        "id": 194539619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587209222
    },
    {
        "content": "<p>there are also other annoying details, like <code>#[cfg]</code> to consider</p>",
        "id": 194539626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587209238
    },
    {
        "content": "<p>Hm it seems like this is the kind of thing that at least in theory could run at resolution time, rather than trying to collect everything?</p>",
        "id": 194549860,
        "sender_full_name": "simulacrum",
        "timestamp": 1587223500
    },
    {
        "content": "<p>unless I misunderstood and we specifically want to do something like \"compare against all other defined idents\"</p>",
        "id": 194549887,
        "sender_full_name": "simulacrum",
        "timestamp": 1587223527
    },
    {
        "content": "<p>ah yes, I see the RFC now as well</p>",
        "id": 194549939,
        "sender_full_name": "simulacrum",
        "timestamp": 1587223571
    },
    {
        "content": "<p>It feels ... plausible that this could be embedded into resolution though. We have a pretty global view of all idents there I think</p>",
        "id": 194549952,
        "sender_full_name": "simulacrum",
        "timestamp": 1587223602
    },
    {
        "content": "<p>Frankly i don't really know much about  compiler internals yet, let alone figuring out how to fit this piece architecturally into the existing rustc architecture. So i opened this major change proposal mostly seeking for mentoring on this.</p>\n<p>I implemented the a few earlier bullet points of the RFC: performing normalization at the parser site and proc-macro-server site; linting uncommon codepoints for the name of each item within the lint architecture; this piece seems harder.</p>",
        "id": 194574274,
        "sender_full_name": "Charles Lew",
        "timestamp": 1587262380
    },
    {
        "content": "<blockquote>\n<p>nikomatsakis: Well, not necessarily, you can certainly have a query that works the entire AST or something<br>\nnikomatsakis: which we would usually write as one that walks each function and invokes a sub-query, to actually get some caching</p>\n<p>simulacrum: plausible that this could be embedded into resolution though. We have a pretty global view of all idents there I think</p>\n</blockquote>\n<p>Thanks for the pointers!  With your hints I digged into the code a little this morning (in my timezone) and began understanding how we might want to make this work.</p>",
        "id": 194577222,
        "sender_full_name": "Charles Lew",
        "timestamp": 1587268206
    },
    {
        "content": "<p>Actually i found that there is a <code>LintBuffer</code> that persisted during the whole early linting stage. This was introduced in <br>\n<a href=\"https://github.com/rust-lang/rust/commit/0374e6aab7ef60b523872556ae4aca33c59fbfc9#diff-771d6215d1fb5e7f5503514f9895f7bdR371\" title=\"https://github.com/rust-lang/rust/commit/0374e6aab7ef60b523872556ae4aca33c59fbfc9#diff-771d6215d1fb5e7f5503514f9895f7bdR371\">https://github.com/rust-lang/rust/commit/0374e6aab7ef60b523872556ae4aca33c59fbfc9#diff-771d6215d1fb5e7f5503514f9895f7bdR371</a>   and stored as part of the <code>EarlyContext</code> of linting.</p>",
        "id": 194577427,
        "sender_full_name": "Charles Lew",
        "timestamp": 1587268649
    },
    {
        "content": "<p>So i can either finish this linting within <code>librustc_resolve</code> and add any possible outputs to this lint_buffer, or i can keep a big table of symbols in it and leave the checking logic to <code>librustc_lint</code>.</p>\n<p>Which is better?</p>",
        "id": 194577889,
        "sender_full_name": "Charles Lew",
        "timestamp": 1587269439
    },
    {
        "content": "<p>I will try to read the code of <code>librustc_resolve</code> next, it seems <code>librustc_resolve</code> is already emitting a few lints like <code>UNUSED_IMPORTS</code>, <code>UNUSED_LABELS</code>, <code>UNUSED_MACROS</code>, etc.</p>",
        "id": 194578015,
        "sender_full_name": "Charles Lew",
        "timestamp": 1587269719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> we should be free to use the early linting stuff</p>",
        "id": 194594580,
        "sender_full_name": "simulacrum",
        "timestamp": 1587298373
    },
    {
        "content": "<p>one question I have though is whether we expect the list to be cross-crate</p>",
        "id": 194594586,
        "sender_full_name": "simulacrum",
        "timestamp": 1587298384
    },
    {
        "content": "<p>in that case it might be a bit more difficult</p>",
        "id": 194594588,
        "sender_full_name": "simulacrum",
        "timestamp": 1587298390
    },
    {
        "content": "<p>The RFC did not elaborate on whether the list should be cross-crate. Personally i think the contents of the crate itself should be enough, but it would be nice if we can include the wildcard <code>use</code> imported identifiers and macro expanded identifiers, as a bonus point, i think...</p>",
        "id": 194599413,
        "sender_full_name": "Charles Lew",
        "timestamp": 1587305310
    },
    {
        "content": "<p>Yeah, if it's \"things in scope\" I imagine that would be simpler than \"all identifiers anywhere\". OTOH, if you don't get all idents, I guess some of the usefulness of the lint is lost</p>",
        "id": 194601919,
        "sender_full_name": "simulacrum",
        "timestamp": 1587308594
    },
    {
        "content": "<p>(since afaict it only warns if you actually have two things -- so if you don't import the right thing because of the unicode confusables then you'd not get the lint)</p>",
        "id": 194601940,
        "sender_full_name": "simulacrum",
        "timestamp": 1587308629
    },
    {
        "content": "<p>I'd cc <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> on this :)</p>",
        "id": 194725175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587412819
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span></p>",
        "id": 194831692,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1587488318
    },
    {
        "content": "<p>Search for <code>nfc_normalize</code> in rustc code.<br>\nThe locations with <code>nfc_normalize</code> are exactly the locations where you need to insert the identifier skeletons into some <code>HashMap&lt;Symbol, SomeDataForDiagnostics&gt;</code> kept in <code>ParseSession</code>.</p>",
        "id": 194832045,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1587488491
    },
    {
        "content": "<p>One more location where we can create arbitrary new identifier tokens is <code>src\\librustc_builtin_macros\\concat_idents.rs</code>, but it doesn't use <code>nfc_normalize</code> because if you concatenate two normalized tokens you get a normalized token as well (if that's not true, then we have bug). So we need to populate the confusable identifier table in that place as well (if we want to warn on macro-produced identifiers at all).</p>",
        "id": 194832538,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1587488700
    },
    {
        "content": "<p>The table can then be processed in an early lint pass that goes through it and reports everything suspicious.</p>",
        "id": 194832625,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1587488748
    },
    {
        "content": "<p>Oh, and I don't think this is a major change that require any special process.</p>",
        "id": 194832950,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1587488887
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span>  Thank you for your instructions!</p>",
        "id": 194880134,
        "sender_full_name": "Charles Lew",
        "timestamp": 1587518753
    },
    {
        "content": "<p>Have put up an initial implementation at <a href=\"https://github.com/rust-lang/rust/pull/71542\" title=\"https://github.com/rust-lang/rust/pull/71542\">https://github.com/rust-lang/rust/pull/71542</a> modulo the <code>concat_idents</code> part.</p>",
        "id": 195262741,
        "sender_full_name": "Charles Lew",
        "timestamp": 1587780439
    }
]