[
    {
        "content": "<blockquote>\n<p>That the compiler built with --stage 1 (or without, since the proposal makes it the default) won't be able to compile code that requires the standard library?</p>\n</blockquote>\n<p>That is the current behavior: the stage2 compiler (stage1 artifact) will not have a working libcore. My proposal is to always build libstd+libcore at the same time as the compiler, since the current situation of compiler without libcore is not very useful.</p>",
        "id": 202697308,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1593700806
    },
    {
        "content": "<p>My major concern here is that we would be defaulting to technically unsound builds, right? e.g. a stage 1 compiler might not always work correctly</p>",
        "id": 202702672,
        "sender_full_name": "mark-i-m",
        "timestamp": 1593703226
    },
    {
        "content": "<p>no, it should always work correctly</p>",
        "id": 202705822,
        "sender_full_name": "simulacrum",
        "timestamp": 1593704541
    },
    {
        "content": "<p>it's just that you're not perfectly matching what users see -- in particular, if you break the compiler (codegen, mostly) in such a way that std isn't affected but the compiler itself is you could miss that</p>",
        "id": 202705910,
        "sender_full_name": "simulacrum",
        "timestamp": 1593704591
    },
    {
        "content": "<p>but since CI will still be checking stage2, this isn't all that big a concern imo</p>",
        "id": 202705941,
        "sender_full_name": "simulacrum",
        "timestamp": 1593704605
    },
    {
        "content": "<p>it used to be that stage2 was needed for proc macros because they linked against the compiler itself, but that's also no longer true</p>",
        "id": 202705979,
        "sender_full_name": "simulacrum",
        "timestamp": 1593704628
    },
    {
        "content": "<p>That's good to know, but I feel like I've seen tests fail at stage 1 and not on stage 2 before (though it's been a while since that happened last)</p>",
        "id": 202742796,
        "sender_full_name": "mark-i-m",
        "timestamp": 1593722969
    },
    {
        "content": "<p>that should only be if the test does e.g. <code>extern crate rustc_metadata;</code> or similar. Everything else is almost certainly a bug these days</p>",
        "id": 202743193,
        "sender_full_name": "simulacrum",
        "timestamp": 1593723177
    },
    {
        "content": "<p>Ok, I will be on the watch for that next time I build locally</p>",
        "id": 202743410,
        "sender_full_name": "mark-i-m",
        "timestamp": 1593723307
    },
    {
        "content": "<p>I feel pretty good about these defaults.</p>",
        "id": 202744442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593723903
    },
    {
        "content": "<p>There was some feedback in <a href=\"https://github.com/rust-lang/rust/pull/73964#issuecomment-653134345\">https://github.com/rust-lang/rust/pull/73964#issuecomment-653134345</a> that <code>debug = true</code> makes the fast path for \"run all the tests\" slightly slower. Personally I would find it hard to debug things without <code>RUST_LOG=debug</code> but since this is only a default I'm fine <del>changing it</del> keeping it as is.</p>",
        "id": 202745715,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1593724640
    },
    {
        "content": "<p>Is there some way we could compile in enough support for <code>RUST_LOG=debug</code> without actually having debug symbols?</p>",
        "id": 202762667,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593742019
    },
    {
        "content": "<p>Otherwise this seems great to me. I would just like to further reduce build time and link time, if we can.</p>",
        "id": 202762678,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593742047
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> we could set <code>debug = true</code> and <code>debuginfo = 0</code>. That would still have debug assertions but I think that's a good thing, if you're breaking invariants during tests you should know about it.</p>\n<p>It would be great to have some statistics on how much time debuginfo = 1 adds to the build, if it's 10 seconds out of a 5 minute build I doubt there would be much opposition.</p>",
        "id": 202768616,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1593751807
    },
    {
        "content": "<p>Also see my comment on the PR - debuginfo 1 takes a lot less time than debuginfo 2</p>",
        "id": 202768626,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1593751875
    },
    {
        "content": "<p>I'm actually less concerned about the time (given comments that it's apparently negligible) and more concerned about memory usage during the build.</p>",
        "id": 202773430,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593759225
    },
    {
        "content": "<p>I'm hoping debug 1 will be an improvement in that regard.</p>",
        "id": 202773474,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593759247
    },
    {
        "content": "<p>debug asserts are a pretty big performance hit last I checked, which is why we have a separate debug-assertions-std now (but just compiler asserts are still a 50% hit in performance IIRC)</p>",
        "id": 202797048,
        "sender_full_name": "simulacrum",
        "timestamp": 1593778299
    },
    {
        "content": "<p>Ok, it sounds like debug = true is not the best change for everyone (or at least, not a clear win the way the other changes are). I'll remove it from the MCP and my PR.</p>",
        "id": 202801178,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1593781184
    },
    {
        "content": "<p>This has gone a few days without discussion or a second ... Did I miss a concern someone had? If not, what are the next steps?</p>",
        "id": 203203673,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594156330
    },
    {
        "content": "<p>I think the next step would be to convert the draft PR to a non-draft PR, and suggest that someone on the team do an \"rfcbot merge\" to confirm consensus.</p>",
        "id": 203206492,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594157840
    },
    {
        "content": "<p>Neat, that means I need to fix the test failures first then <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> thanks!</p>",
        "id": 203206709,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594157992
    },
    {
        "content": "<p>Also, a request: could you please change the PR/commit title, to something like \"Improve defaults in x.py\", rather than using \"sane\"? I don't think it's appropriate to use terms like \"sane\" in this context, both because they're pejorative to the past code (implying it's \"insane\" rather than just suboptimal), and because analogies to mental health are problematic for various reasons. (This is something I'm still working on myself, but I try to catch it and deal with it when I notice it.)</p>",
        "id": 203206724,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594158000
    },
    {
        "content": "<p>Will do</p>",
        "id": 203206801,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594158023
    },
    {
        "content": "<p>Thank you, I appreciate it. :)</p>",
        "id": 203206819,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594158032
    },
    {
        "content": "<p>And thanks for working on this!</p>",
        "id": 203206828,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594158036
    },
    {
        "content": "<p>Oh hmm editing zulip streams does not work the way I thought it did haha</p>",
        "id": 203206883,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594158070
    },
    {
        "content": "<p>(As an aside, I'm so thankful for the Rust community providing the comfort and safety to be able to raise things like that without a high probability of backlash.)</p>",
        "id": 203206928,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594158093
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I can edit the rustbot message to link to the right stream.</p>",
        "id": 203207055,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594158154
    },
    {
        "content": "<p>No, I mean it split this channel into two streams</p>",
        "id": 203207080,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594158169
    },
    {
        "content": "<p>Oh, that's strange.</p>",
        "id": 203207089,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594158181
    },
    {
        "content": "<p>the other one I can't edit, I think because I hadn't commented yet?</p>",
        "id": 203207104,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594158190
    },
    {
        "content": "<p>fwiw I don't think we need an fcp merge here to get total team consensus</p>",
        "id": 203209700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594159809
    },
    {
        "content": "<p>I think a rustbot second suffices</p>",
        "id": 203209707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594159812
    },
    {
        "content": "<p>also, I'm glad you raised the \"sane\" question, I wanted to bring it up ...</p>",
        "id": 203209712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594159820
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span>: Proposal <a href=\"https://github.com/rust-lang/compiler-team/issues/326#issuecomment-655162912\">#326</a> has been seconded, and will be approved in 10 days if no objections are raised.</p>",
        "id": 203209773,
        "sender_full_name": "triagebot",
        "timestamp": 1594159879
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Where is the repo for rustbot and the MCP automation? I'd like to file an issue regarding title changes.</p>",
        "id": 203210583,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594160452
    },
    {
        "content": "<p>unfortunately github doesn't let me change the name of the branch without making an entirely new PR :/</p>",
        "id": 203211822,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594161453
    },
    {
        "content": "<p>the repo is <a href=\"https://github.com/rust-lang/triagebot/\">https://github.com/rust-lang/triagebot/</a> I think</p>",
        "id": 203211836,
        "sender_full_name": "lqd",
        "timestamp": 1594161468
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span> <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> how much is this going to break CI? I can probably figure out most of the straight-up failures if I debug enough, but I'm worried I'm going to break stable releases or something</p>",
        "id": 203776250,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594677072
    },
    {
        "content": "<p>should I just <code>sed -i s/x.py/x.py --stage 2/g src/ci/*</code>?</p>",
        "id": 203776300,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594677114
    },
    {
        "content": "<p>That sounds fine to me as a start. We should note any problems fairly early on -- try builds and the like -- and we're coming up on the end of a cycle so we'll have a full 12 weeks to get it all nailed down if we land it fairly soon.</p>",
        "id": 203776422,
        "sender_full_name": "simulacrum",
        "timestamp": 1594677197
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ rg x.py src/ci --no-filename --no-heading | wc -l\n90\n</code></pre></div>\n\n\n<p>:whistles:</p>",
        "id": 203776451,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594677233
    },
    {
        "content": "<p>oh nice, I forgot about try builds</p>",
        "id": 203776512,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594677270
    },
    {
        "content": "<p>going to let <a href=\"https://github.com/rust-lang/rust/pull/73964/checks?check_run_id=866988967\">https://github.com/rust-lang/rust/pull/73964/checks?check_run_id=866988967</a> run to make sure all the defaults for <code>--stage 1</code> work then I'll push a commit changing it all to use <code>--stage 2</code></p>",
        "id": 203776744,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594677466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> bootstrap tests are failing because they expect --stage 2 to be the default. Do you want me to update them to match --stage 1 or to pass --stage 2 explicitly?</p>",
        "id": 203781364,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594680859
    },
    {
        "content": "<p>(going to pass --stage 2 unless I hear otherwise, you'll see it again in the PR)</p>",
        "id": 203782646,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594681947
    },
    {
        "content": "<p>I guess this means <code>x.py</code> now needs a way to specify 'build rustc but not anything else', right now there's no way to build stage2 rustc without passing <code>test --stage 2</code>.</p>",
        "id": 203784274,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594683578
    },
    {
        "content": "<p>I just realized I didn't address rustdoc at all in the MCP - are people ok with not building rustdoc by default? Or should I leave that as is, so that <code>x.py build</code> will build both <code>src/libstd</code> and <code>src/tools/rustdoc</code>?</p>",
        "id": 203788282,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594687489
    },
    {
        "content": "<p>personally I think it makes sense not to build it unless it was explicitly requested but I don't feel strongly about it</p>",
        "id": 203788320,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594687530
    },
    {
        "content": "<p>yeah I'd expect to pass stage 2 there, though we may want some stage 1 tests as well</p>",
        "id": 203827207,
        "sender_full_name": "simulacrum",
        "timestamp": 1594729943
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I was wondering the following from your proposal ...</p>",
        "id": 203889226,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594761255
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>The proposed new behavior is as follows:\n\n    x.py build --stage 0:\n        stage0 libstd\n\nThis is suitable for contributors only working on the standard library,\nas it means rustc never has to be compiled.\n\n    x.py build --stage 1:\n        stage0 libstd\n        stage1 rustc\n        stage1 libstd\n\nThis is suitable for contributors working on the compiler. It ensures\nthat you have a working rustc and libstd without having to pass\nsrc/libstd in addition.\n\n    x.py build --stage 2:\n        stage0 libstd\n        stage1 rustc\n        stage1 libstd\n        stage2 rustc\n        stage2 libstd\n        stage2 rustdoc, tools, etc.\n</code></pre></div>",
        "id": 203889263,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594761274
    },
    {
        "content": "<p>this seems more clear in my opinion to what we have</p>",
        "id": 203889279,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594761285
    },
    {
        "content": "<p>but I wonder something else here ...</p>",
        "id": 203889302,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594761299
    },
    {
        "content": "<p>I guess I may not be understanding well what we mean by some stage N or I may have a different idea</p>",
        "id": 203889396,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594761355
    },
    {
        "content": "<p>but couldn't this be more like ...</p>",
        "id": 203889455,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594761374
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>The proposed new behavior is as follows:\n\n    x.py build --stage 0 (doesn&#39;t make sense, stage 0 is beta compiler and std)\n\n    x.py build --stage 1:\n        stage1 libstd\n        stage1 rustc\n\n    x.py build --stage 2:\n        stage1 libstd\n        stage1 rustc\n        stage2 libstd\n        stage2 rustc\n</code></pre></div>",
        "id": 203889520,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594761425
    },
    {
        "content": "<p>I know that if you do this the typical workflow would change a bit, but on the other hand things are more clear</p>",
        "id": 203889570,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594761450
    },
    {
        "content": "<p>and you would need stage 3</p>",
        "id": 203889584,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594761457
    },
    {
        "content": "<p>just in case, to be clear, more than suggesting an alternative or discussing it, I want to understand why do we have what we have :)</p>",
        "id": 203889662,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594761485
    },
    {
        "content": "<blockquote>\n<p>stage 0 is beta compiler and std</p>\n</blockquote>\n<p>This depends how you number it. Currently numbering is split between 'what it is' and 'what compiler it was built by'</p>",
        "id": 203889678,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594761493
    },
    {
        "content": "<p>if you say <code>build --stage 0 src/libstd</code>, that means build libstd with the beta compiler</p>",
        "id": 203889702,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594761511
    },
    {
        "content": "<p>it does not mean use the distributed beta libstd</p>",
        "id": 203889714,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594761520
    },
    {
        "content": "<blockquote>\n<p>doesn't make sense</p>\n</blockquote>\n<p>I don't see why not? You can build libstd without building the compiler first, that's what I expect people contributing to libstd do</p>",
        "id": 203889776,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594761578
    },
    {
        "content": "<p>I meant, if you give <code>--stage N </code> the meaning of build the stage N compiler, stage 0 doesn't make sense because it already exists</p>",
        "id": 203889980,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594761648
    },
    {
        "content": "<blockquote>\n<p>and you would need stage 3</p>\n</blockquote>\n<p>Yeah I missed that in the MCP, it's in the PR. I'll update the description.</p>",
        "id": 203889983,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594761648
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Improve.20defaults.20in.20x.2Epy.20compiler-team.23326/near/203889983\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>and you would need stage 3</p>\n</blockquote>\n<p>Yeah I missed that in the MCP, it's in the PR. I'll update the description.</p>\n</blockquote>\n<p>what I meant here is that in my schema stage 3 is really needed</p>",
        "id": 203890016,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594761670
    },
    {
        "content": "<p>that's not the current meaning of --stage N though</p>",
        "id": 203890036,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594761681
    },
    {
        "content": "<p>yes I know</p>",
        "id": 203890045,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594761687
    },
    {
        "content": "<p>I was just trying to understand</p>",
        "id": 203890048,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594761692
    },
    {
        "content": "<p>the problem I have is ...</p>",
        "id": 203890060,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594761703
    },
    {
        "content": "<p>if you give <code>--stage 1</code> the meaning of use stage 1 compiler to produce artifacts, shouldn't those artifacts be stage 2 artifacts and be named like so?</p>",
        "id": 203890156,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594761747
    },
    {
        "content": "<p>I don't propose in this MCP to change the meaning of --stage N (even though I think it's a good change)</p>",
        "id": 203890204,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594761778
    },
    {
        "content": "<p>I think one of the most confusing things is giving <code>--stage 1</code> the meaning of use stage 1 compiler to produce artifacts and then name those artifacts with the number 1</p>",
        "id": 203890208,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594761783
    },
    {
        "content": "<p>I'm only saying \"don't build rustc by default for <code>x.py build</code>\"</p>",
        "id": 203890243,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594761801
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Improve.20defaults.20in.20x.2Epy.20compiler-team.23326/near/203890204\">said</a>:</p>\n<blockquote>\n<p>I don't propose in this MCP to change the meaning of --stage N (even though I think it's a good change)</p>\n</blockquote>\n<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>, again, I'm not trying to discuss your proposal :)</p>",
        "id": 203890260,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594761810
    },
    {
        "content": "<p>was just interested in understanding a bit better this</p>",
        "id": 203890271,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594761820
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Improve.20defaults.20in.20x.2Epy.20compiler-team.23326/near/203890243\">said</a>:</p>\n<blockquote>\n<p>I'm only saying \"don't build rustc by default for <code>x.py build</code>\"</p>\n</blockquote>\n<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 203890283,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594761828
    },
    {
        "content": "<p>oh I see what you mean</p>",
        "id": 203890299,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594761837
    },
    {
        "content": "<p>yeah I named them confusingly</p>",
        "id": 203890355,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594761852
    },
    {
        "content": "<p>should I say 'stage 1 artifacts' instead?</p>",
        "id": 203890365,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594761859
    },
    {
        "content": "<p>currently I use 'stage1 rustc' to mean the thing in <code>stage1/bin/rustc</code> but 'stage1 libstd' to mean the thing built by stage1 rustc</p>",
        "id": 203890421,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594761893
    },
    {
        "content": "<p>yeah to be honest I'm not really sure what currently happens :)</p>",
        "id": 203890474,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594761928
    },
    {
        "content": "<p>it's a bit confusing to me, didn't spend time trying to understand properly</p>",
        "id": 203890507,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594761945
    },
    {
        "content": "<p>but what I think should look better is ...</p>",
        "id": 203890542,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594761962
    },
    {
        "content": "<p>Yeah it is definitely confusing, I had a discussion about this yesterday in <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/freeze.20stage0\">https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/freeze.20stage0</a></p>",
        "id": 203890632,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594761996
    },
    {
        "content": "<p>if you want to give <code>--stage 0</code> the meaning of use stage 0 to produce artifacts, maybe a more explicit name for that should be better, like <code>--use-stage 0</code></p>",
        "id": 203890655,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594762005
    },
    {
        "content": "<p>and then your proposal be something like ...</p>",
        "id": 203890677,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594762014
    },
    {
        "content": "<p>Ooh I definitely like the name <code>--use-stage</code> better</p>",
        "id": 203890763,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594762067
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>The proposed new behavior is as follows:\n\n    x.py build --use-stage 0:\n        stage1 libstd\n\nThis is suitable for contributors only working on the standard library,\nas it means rustc never has to be compiled.\n\n    x.py build --use-stage 1:\n        stage1 libstd\n        stage1 rustc\n        stage2 libstd\n\nThis is suitable for contributors working on the compiler. It ensures\nthat you have a working rustc and libstd without having to pass\nsrc/libstd in addition.\n\n    x.py build --use-stage 2:\n        stage1 libstd\n        stage1 rustc\n        stage2 libstd\n        stage2 rustc\n        stage3 libstd\n        stage3 rustdoc, tools, etc.\n</code></pre></div>",
        "id": 203890774,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594762078
    },
    {
        "content": "<p>as opposed to currently I think people assume it means <code>--build-stage</code>, which is not correct</p>",
        "id": 203890780,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594762081
    },
    {
        "content": "<p>right</p>",
        "id": 203890829,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594762093
    },
    {
        "content": "<p>it can also have a shorter way like <code>-s 1</code></p>",
        "id": 203890869,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594762129
    },
    {
        "content": "<p>unsure if there's something like that currently</p>",
        "id": 203890877,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594762139
    },
    {
        "content": "<p>I'll make a PR adding that alias separately I think, and then we can use <code>--use-stage</code> in documentation</p>",
        "id": 203890894,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594762157
    },
    {
        "content": "<p>there's no -s shorthand I know of currently</p>",
        "id": 203890922,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594762177
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Improve.20defaults.20in.20x.2Epy.20compiler-team.23326/near/203890774\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>The proposed new behavior is as follows:\n\n    x.py build --use-stage 0:\n        stage1 libstd\n\nThis is suitable for contributors only working on the standard library,\nas it means rustc never has to be compiled.\n\n    x.py build --use-stage 1:\n        stage1 libstd\n        stage1 rustc\n        stage2 libstd\n\nThis is suitable for contributors working on the compiler. It ensures\nthat you have a working rustc and libstd without having to pass\nsrc/libstd in addition.\n\n    x.py build --use-stage 2:\n        stage1 libstd\n        stage1 rustc\n        stage2 libstd\n        stage2 rustc\n        stage3 libstd\n        stage3 rustdoc, tools, etc.\n</code></pre></div>\n\n\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> what do you think about <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> ?, do you think it make sense?</p>",
        "id": 203891053,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594762261
    },
    {
        "content": "<p>I don't want to change the terminology though</p>",
        "id": 203891072,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594762272
    },
    {
        "content": "<p>yeah, I'm not talking about your PR</p>",
        "id": 203891092,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594762285
    },
    {
        "content": "<p>maybe like something for the future</p>",
        "id": 203891115,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594762303
    },
    {
        "content": "<p>but I want to know if what I'm saying even make sense to others</p>",
        "id": 203891136,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594762319
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> he feels strongly about stage naming</p>",
        "id": 203891143,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594762322
    },
    {
        "content": "<p>and if so, why don't we have an schema like that</p>",
        "id": 203891187,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594762331
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  what do you think about keeping the behavior as discussed but we change the names we use for things?</p>",
        "id": 203891220,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594762350
    },
    {
        "content": "<p>^ see the chart <span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> wrote above</p>",
        "id": 203891243,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594762360
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I think you're falling into the same  trap.... <code>stageN</code> directories are <em>not</em> the stages</p>",
        "id": 203891254,
        "sender_full_name": "eddyb",
        "timestamp": 1594762368
    },
    {
        "content": "<p>right :)</p>",
        "id": 203891286,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594762384
    },
    {
        "content": "<p>if we changed something, the first thing is to make those as clear as possible</p>",
        "id": 203891290,
        "sender_full_name": "eddyb",
        "timestamp": 1594762387
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Improve.20defaults.20in.20x.2Epy.20compiler-team.23326/near/203891254\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> I think you're falling into the same  trap.... <code>stageN</code> directories are <em>not</em> the stages</p>\n</blockquote>\n<p>yeah I know, but isn't that confusing?</p>",
        "id": 203891312,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594762398
    },
    {
        "content": "<p>so <code>--stage 1</code> currently really is \"build stage1\" where \"stage1\" is <code>stage1-*</code> and <code>stage1</code> just happens to be where we put the sysroot</p>",
        "id": 203891344,
        "sender_full_name": "eddyb",
        "timestamp": 1594762415
    },
    {
        "content": "<p>ok, so, it's build stage1? or is it build with stage1?</p>",
        "id": 203891420,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594762451
    },
    {
        "content": "<p>it's the former, and <code>stage1</code> is a badly named directory</p>",
        "id": 203891434,
        "sender_full_name": "eddyb",
        "timestamp": 1594762464
    },
    {
        "content": "<p><code>stage1/bin/rustc</code> is an <em>input</em> to stage1</p>",
        "id": 203891452,
        "sender_full_name": "eddyb",
        "timestamp": 1594762475
    },
    {
        "content": "<p>isn't that different to what <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> was saying then?</p>",
        "id": 203891464,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594762486
    },
    {
        "content": "<p><code>stage1</code> is the stage1 sysroot, but improperly labelled</p>",
        "id": 203891468,
        "sender_full_name": "eddyb",
        "timestamp": 1594762489
    },
    {
        "content": "<p>wait now I'm confused :(</p>",
        "id": 203891489,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594762504
    },
    {
        "content": "<p>I would call that directory <code>stage1-sysroot</code> or <code>stage0to1</code></p>",
        "id": 203891496,
        "sender_full_name": "eddyb",
        "timestamp": 1594762506
    },
    {
        "content": "<p>it's not stage1 as much as it's used by/to build stage1</p>",
        "id": 203891513,
        "sender_full_name": "eddyb",
        "timestamp": 1594762522
    },
    {
        "content": "<p>it's the least stage1 directory out of all the ones with that prefix :P</p>",
        "id": 203891535,
        "sender_full_name": "eddyb",
        "timestamp": 1594762539
    },
    {
        "content": "<p>so --use-stage is not correct? I thought <code>--stage N src/libstd</code> means 'build libstd with stage N'</p>",
        "id": 203891538,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594762542
    },
    {
        "content": "<p>it's build <em>at</em> stage N</p>",
        "id": 203891551,
        "sender_full_name": "eddyb",
        "timestamp": 1594762553
    },
    {
        "content": "<p>so it builds <code>stageN-std</code></p>",
        "id": 203891553,
        "sender_full_name": "eddyb",
        "timestamp": 1594762558
    },
    {
        "content": "<p>the newer directories with dashes in them fit much better overall than the old nonsense</p>",
        "id": 203891617,
        "sender_full_name": "eddyb",
        "timestamp": 1594762586
    },
    {
        "content": "<p>and by newer I mean post-makefiles :P</p>",
        "id": 203891629,
        "sender_full_name": "eddyb",
        "timestamp": 1594762597
    },
    {
        "content": "<p>so then ... stage0 libstd and stage0 beta compiler are part of the same stage ???</p>",
        "id": 203891646,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594762619
    },
    {
        "content": "<p>\"stage0 beta compiler\" isn't a thing</p>",
        "id": 203891668,
        "sender_full_name": "eddyb",
        "timestamp": 1594762631
    },
    {
        "content": "<p><code>stage0</code>, just like <code>stage1</code>, is the <em>inputs</em> to that stage</p>",
        "id": 203891697,
        "sender_full_name": "eddyb",
        "timestamp": 1594762651
    },
    {
        "content": "<p>ok, so then stage0 libstd and the first rustc built by beta are the same stage</p>",
        "id": 203891720,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594762670
    },
    {
        "content": "<p>correct</p>",
        "id": 203891727,
        "sender_full_name": "eddyb",
        "timestamp": 1594762676
    },
    {
        "content": "<p><code>stage0/bin/rustc</code> is the compiler that will be used to build stage0, and unlike renaming <code>stage1</code> to<code>stage0to1</code>, there isn't something to rename <code>stage0</code> to, with the same scheme, lol</p>",
        "id": 203891793,
        "sender_full_name": "eddyb",
        "timestamp": 1594762713
    },
    {
        "content": "<p>I guess what I feel is that there are kind of different meanings of what really stage means flying around</p>",
        "id": 203891806,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594762725
    },
    {
        "content": "<p>I understand those are the current directory names (stage0-std, stage0-rustc and all that), but can you explain again why it makes sense to consider those both part of the same stage?</p>",
        "id": 203891807,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594762728
    },
    {
        "content": "<p>short of <code>stage0-sysroot</code> (which is already taken up because we need two sysroots lol)</p>",
        "id": 203891812,
        "sender_full_name": "eddyb",
        "timestamp": 1594762729
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> because the only difference is which crate is being compiled</p>",
        "id": 203891834,
        "sender_full_name": "eddyb",
        "timestamp": 1594762753
    },
    {
        "content": "<p>you could imagine <code>src/librustc_*</code> just explicitly depending on <code>src/libstd</code></p>",
        "id": 203891861,
        "sender_full_name": "eddyb",
        "timestamp": 1594762778
    },
    {
        "content": "<p>it's all one big compilation</p>",
        "id": 203891869,
        "sender_full_name": "eddyb",
        "timestamp": 1594762787
    },
    {
        "content": "<p>you don't switch from one stage to the next without changing the compiler... that's \"staging\"</p>",
        "id": 203891954,
        "sender_full_name": "eddyb",
        "timestamp": 1594762825
    },
    {
        "content": "<p>ok, they belong to each other because they're linked together?</p>",
        "id": 203891964,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594762835
    },
    {
        "content": "<p>think of, idk, a rocket</p>",
        "id": 203891967,
        "sender_full_name": "eddyb",
        "timestamp": 1594762835
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Improve.20defaults.20in.20x.2Epy.20compiler-team.23326/near/203891964\">said</a>:</p>\n<blockquote>\n<p>ok, they belong to each other because they're linked together?</p>\n</blockquote>\n<p>yes! and that has a lot of implications</p>",
        "id": 203891979,
        "sender_full_name": "eddyb",
        "timestamp": 1594762847
    },
    {
        "content": "<p>the sections of the rocket are the \"stages\", whereas the engine would be the compiler</p>",
        "id": 203892012,
        "sender_full_name": "eddyb",
        "timestamp": 1594762869
    },
    {
        "content": "<p>the engines are more or less between the stages</p>",
        "id": 203892021,
        "sender_full_name": "eddyb",
        "timestamp": 1594762879
    },
    {
        "content": "<p>so then you would say there is no stage3</p>",
        "id": 203892063,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594762911
    },
    {
        "content": "<p>so you have <code>stage0/bin/rustc</code> as the bottom-most engine, followed by an entire stage0, then this repeats for each stage</p>",
        "id": 203892065,
        "sender_full_name": "eddyb",
        "timestamp": 1594762913
    },
    {
        "content": "<p>no, not unless you build <code>stage3-std</code> and maybe <code>stage3-rustc</code> (which you could trivially use to link <code>stage4/bin/rustc</code>)</p>",
        "id": 203892129,
        "sender_full_name": "eddyb",
        "timestamp": 1594762941
    },
    {
        "content": "<p>right</p>",
        "id": 203892139,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594762948
    },
    {
        "content": "<p>ok I will update the numbering in the MCP to match that</p>",
        "id": 203892143,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594762956
    },
    {
        "content": "<p>we could have it so instead of <code>stage1/bin/rustc</code> you use <code>stage0-output/bin/rustc</code></p>",
        "id": 203892151,
        "sender_full_name": "eddyb",
        "timestamp": 1594762963
    },
    {
        "content": "<p>maybe that would make it more obvious</p>",
        "id": 203892154,
        "sender_full_name": "eddyb",
        "timestamp": 1594762967
    },
    {
        "content": "<p>and then hide the sysroot better or something</p>",
        "id": 203892160,
        "sender_full_name": "eddyb",
        "timestamp": 1594762973
    },
    {
        "content": "<p>personally I think <code>stage1</code> is silly and we should use <code>stage0-rustc</code> directly</p>",
        "id": 203892188,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594763000
    },
    {
        "content": "<p>it's only confusing because there's \"segments\" and \"points\" between them (that are the output of one segment and the input of the next)</p>",
        "id": 203892195,
        "sender_full_name": "eddyb",
        "timestamp": 1594763005
    },
    {
        "content": "<p>then you don't have people getting confused like this</p>",
        "id": 203892198,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594763010
    },
    {
        "content": "<p>oh yeah I definitely agree</p>",
        "id": 203892205,
        "sender_full_name": "eddyb",
        "timestamp": 1594763015
    },
    {
        "content": "<p>I was saying elsewhere that I'd prefer if we symlink'd <code>stage0-rustc/$HOST/release/rustc</code> directly into the rustup toolchain dir or w/e</p>",
        "id": 203892232,
        "sender_full_name": "eddyb",
        "timestamp": 1594763042
    },
    {
        "content": "<p>I much prefer the dashed directories</p>",
        "id": 203892285,
        "sender_full_name": "eddyb",
        "timestamp": 1594763058
    },
    {
        "content": "<p>partly because of what I remember from the makefile days, cursed be their memory</p>",
        "id": 203892314,
        "sender_full_name": "eddyb",
        "timestamp": 1594763088
    },
    {
        "content": "<p>and remind me why rustdoc is off-by-one? it links against the previous compiler or something?</p>",
        "id": 203892478,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594763197
    },
    {
        "content": "<p>yeah, IMO running the tests should build the previous stage of tools, that way building rustdoc itself shouldn't need an off by one</p>",
        "id": 203892724,
        "sender_full_name": "eddyb",
        "timestamp": 1594763362
    },
    {
        "content": "<p>basically today <code>x.py test --stage N src/test/ui/rustdoc</code> depends on <code>x.py build --stage N src/tools/rustdoc</code> and the latter uses <code>x.py build --stage N-1</code> compiler libs, not <code>x.py build --stage N</code> compiler libs, so it feels wrong</p>",
        "id": 203892841,
        "sender_full_name": "eddyb",
        "timestamp": 1594763439
    },
    {
        "content": "<p>instead we could have <code>x.py test --stage N src/test/ui/rustdoc</code> depend on <code>x.py build --stage N-1 src/tools/rustdoc</code></p>",
        "id": 203892856,
        "sender_full_name": "eddyb",
        "timestamp": 1594763452
    },
    {
        "content": "<p>ok, so how does this new numbering look</p>",
        "id": 203892887,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594763466
    },
    {
        "content": "<p><a href=\"https://gist.github.com/jyn514/e3da90ee203d5eb9194255afef428d2c\">https://gist.github.com/jyn514/e3da90ee203d5eb9194255afef428d2c</a></p>",
        "id": 203892917,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594763488
    },
    {
        "content": "<p>rustdoc is the one I'm not sure about</p>",
        "id": 203892930,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594763501
    },
    {
        "content": "<p>err actually that was off a bit, I updated it</p>",
        "id": 203893456,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594763849
    },
    {
        "content": "<p>Updated the MCP to use the revised numbering</p>",
        "id": 203894277,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594764370
    },
    {
        "content": "<p>I would use the same numbering for rustc and rustdoc</p>",
        "id": 203895170,
        "sender_full_name": "eddyb",
        "timestamp": 1594765031
    },
    {
        "content": "<p>so that only libstd is on the last stage</p>",
        "id": 203895194,
        "sender_full_name": "eddyb",
        "timestamp": 1594765054
    },
    {
        "content": "<p>even though what you're calling <code>stage1 rustdoc</code> is built with <code>build --stage 2 src/tools/rustdoc</code>?</p>",
        "id": 203895323,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594765149
    },
    {
        "content": "<p>I think the current <code>build</code> behavior for rustdoc is wrong</p>",
        "id": 203895344,
        "sender_full_name": "eddyb",
        "timestamp": 1594765171
    },
    {
        "content": "<p>either that or all the other tools are wrong and we have to find a good way to handle all of them</p>",
        "id": 203895410,
        "sender_full_name": "eddyb",
        "timestamp": 1594765203
    },
    {
        "content": "<p>but technically <code>rustdoc</code> is in the minority with its behavior</p>",
        "id": 203895420,
        "sender_full_name": "eddyb",
        "timestamp": 1594765212
    },
    {
        "content": "<p>Sure, it's definitely it's the odd man out</p>",
        "id": 203895433,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594765236
    },
    {
        "content": "<p>but I think we should keep consistency with x.py</p>",
        "id": 203895441,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594765246
    },
    {
        "content": "<p>and it would make your gist read much better</p>",
        "id": 203895447,
        "sender_full_name": "eddyb",
        "timestamp": 1594765250
    },
    {
        "content": "<p>to what end? it just introduces confusion</p>",
        "id": 203895465,
        "sender_full_name": "eddyb",
        "timestamp": 1594765269
    },
    {
        "content": "<p>also note that <code>x.py build</code> will build other tools as well, if they're enabled in <code>config.toml</code></p>",
        "id": 203895482,
        "sender_full_name": "eddyb",
        "timestamp": 1594765284
    },
    {
        "content": "<p>ok, I'll say <code>stageN tools</code> then</p>",
        "id": 203895494,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594765303
    },
    {
        "content": "<p>and in your gist, they're like <code>rustc</code> not like <code>rustdoc</code></p>",
        "id": 203895496,
        "sender_full_name": "eddyb",
        "timestamp": 1594765305
    },
    {
        "content": "<p>thanks ^_^</p>",
        "id": 203895499,
        "sender_full_name": "eddyb",
        "timestamp": 1594765309
    },
    {
        "content": "<p>where N is the stage of the compiler they're linked to</p>",
        "id": 203895507,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594765319
    },
    {
        "content": "<p>wait no now I'm confused again</p>",
        "id": 203895729,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594765500
    },
    {
        "content": "<p>If I say <code>x.py build --stage 1 src/tools/cargo</code>, does that build rustc once or twice?</p>",
        "id": 203895751,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594765516
    },
    {
        "content": "<p>good question</p>",
        "id": 203895780,
        "sender_full_name": "eddyb",
        "timestamp": 1594765548
    },
    {
        "content": "<p>Cargo doesn't depend on rustc libraries, so probably only once</p>",
        "id": 203895805,
        "sender_full_name": "eddyb",
        "timestamp": 1594765562
    },
    {
        "content": "<p>(i.e. <code>x.py build --stage 1 src/libstd</code> + Cargo build)</p>",
        "id": 203895853,
        "sender_full_name": "eddyb",
        "timestamp": 1594765577
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span></p>",
        "id": 203895868,
        "sender_full_name": "eddyb",
        "timestamp": 1594765592
    },
    {
        "content": "<p>so in the case of tools, it really is --use-stage</p>",
        "id": 203895875,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594765596
    },
    {
        "content": "<p>It's only for things that link to rustc that it's --build-stage</p>",
        "id": 203895900,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594765612
    },
    {
        "content": "<p>I mean, you might be conflating a few things? the various steps still have dependencies</p>",
        "id": 203895939,
        "sender_full_name": "eddyb",
        "timestamp": 1594765641
    },
    {
        "content": "<p>Should be correct - not sure if entirely the case today (cargo tests <em>do</em> have rustc sysroot deps, currently)</p>",
        "id": 203895974,
        "sender_full_name": "simulacrum",
        "timestamp": 1594765668
    },
    {
        "content": "<p>so the difference is Cargo depends on std but clippy depends on rustc (and transitively on std)</p>",
        "id": 203896028,
        "sender_full_name": "eddyb",
        "timestamp": 1594765683
    },
    {
        "content": "<p>all of these dependencies are satisfied within/\"at\" the stage provided in <code>--stage</code></p>",
        "id": 203896044,
        "sender_full_name": "eddyb",
        "timestamp": 1594765697
    },
    {
        "content": "<p>maybe I should just omit the tools altogether lol</p>",
        "id": 203896067,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594765723
    },
    {
        "content": "<p>I'm not changing how they behave</p>",
        "id": 203896075,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594765728
    },
    {
        "content": "<p>you'd only need to change <code>rustdoc</code> for them to appear sensible <em>shrug</em></p>",
        "id": 203896099,
        "sender_full_name": "eddyb",
        "timestamp": 1594765743
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> wait what why would Cargo tests want to do that</p>",
        "id": 203896139,
        "sender_full_name": "eddyb",
        "timestamp": 1594765766
    },
    {
        "content": "<p>The difference between std-dep tools and rustc-dep tools, including rustc itself in some sense is one of the core confusions I think with stage-naming</p>",
        "id": 203896152,
        "sender_full_name": "simulacrum",
        "timestamp": 1594765771
    },
    {
        "content": "<p>surely it's not for proc macros?</p>",
        "id": 203896169,
        "sender_full_name": "eddyb",
        "timestamp": 1594765786
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I don't think it's \"want\" more so just no one's purged all of that</p>",
        "id": 203896177,
        "sender_full_name": "simulacrum",
        "timestamp": 1594765790
    },
    {
        "content": "<p>No it's like plugin testing or something</p>",
        "id": 203896193,
        "sender_full_name": "simulacrum",
        "timestamp": 1594765797
    },
    {
        "content": "<p>I wonder why Cargo wanted to ever test that :/</p>",
        "id": 203896251,
        "sender_full_name": "eddyb",
        "timestamp": 1594765814
    },
    {
        "content": "<p>maybe it has something to do with Servo <em>shrug</em></p>",
        "id": 203896270,
        "sender_full_name": "eddyb",
        "timestamp": 1594765828
    },
    {
        "content": "<p>It can probably be removed/replaced today</p>",
        "id": 203896295,
        "sender_full_name": "simulacrum",
        "timestamp": 1594765851
    },
    {
        "content": "<p>/me is more confused than when he started</p>",
        "id": 203896406,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594765922
    },
    {
        "content": "<p>this is what you get from touching staging,</p>",
        "id": 203896504,
        "sender_full_name": "eddyb",
        "timestamp": 1594766017
    },
    {
        "content": "<p>I'm going to leave the MCP the same pending me figuring out what's going on</p>",
        "id": 203896511,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594766022
    },
    {
        "content": "<p>I don't think the numbering of the tools affects it much anyway</p>",
        "id": 203896526,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594766036
    },
    {
        "content": "<p>I kept wanting to make things clearer for years but dreaded what you're going through :P</p>",
        "id": 203896531,
        "sender_full_name": "eddyb",
        "timestamp": 1594766041
    },
    {
        "content": "<p>I'm not even trying to make them clearer, just less painful lol</p>",
        "id": 203896595,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594766076
    },
    {
        "content": "<p>or what I'm going through trying to explain why some things make sense to me, and failing most of the time</p>",
        "id": 203896601,
        "sender_full_name": "eddyb",
        "timestamp": 1594766082
    },
    {
        "content": "<p>the end goal is like <span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span> said, to make it so that <code>x.py build</code> 'just works' and people don't have to think about it</p>",
        "id": 203896636,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594766129
    },
    {
        "content": "<p>the simplest way IMO is to just say that x.py by default does minimal, instead of maximal, work. and only <code>./configure &amp;&amp; make</code> retains the maximal behavior</p>",
        "id": 203896714,
        "sender_full_name": "eddyb",
        "timestamp": 1594766192
    },
    {
        "content": "<p>/me forgot to update configure and make in the PR</p>",
        "id": 203896733,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594766213
    },
    {
        "content": "<p>so <code>x.py build</code> and <code>x.py build --stage 1</code> and <code>x.py build src/libstd</code> and <code>x.py build --stage 1 src/libstd</code> would all do the same thing</p>",
        "id": 203896751,
        "sender_full_name": "eddyb",
        "timestamp": 1594766236
    },
    {
        "content": "<p>i.e. if you don't pass a stage, it's 1, if you don't pass a filter, it's src/libstd</p>",
        "id": 203896766,
        "sender_full_name": "eddyb",
        "timestamp": 1594766252
    },
    {
        "content": "<p>anything more explicit doesn't change at all</p>",
        "id": 203896782,
        "sender_full_name": "eddyb",
        "timestamp": 1594766265
    },
    {
        "content": "<p>That's not actually the current behavior, it will still build rustdoc by default</p>",
        "id": 203896797,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594766274
    },
    {
        "content": "<p>Because I forgot to mention it in the original MCP</p>",
        "id": 203896846,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594766286
    },
    {
        "content": "<p>lol</p>",
        "id": 203896852,
        "sender_full_name": "eddyb",
        "timestamp": 1594766291
    },
    {
        "content": "<p>maybe that should be treated just like all the other tools and you have to put it into <code>config.toml</code> that you want <code>rustdoc</code></p>",
        "id": 203896876,
        "sender_full_name": "eddyb",
        "timestamp": 1594766322
    },
    {
        "content": "<p>or maybe it can be default <em>shrug</em></p>",
        "id": 203896889,
        "sender_full_name": "eddyb",
        "timestamp": 1594766332
    },
    {
        "content": "<p>I would be happy with making rustdoc more like other tools</p>",
        "id": 203896903,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594766345
    },
    {
        "content": "<p>but I think that's a different MCP</p>",
        "id": 203896911,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594766350
    },
    {
        "content": "<p>but ideally <code>x.py build --stage 1 src/libstd</code> would also build the same tools (at stage 0)</p>",
        "id": 203896916,
        "sender_full_name": "eddyb",
        "timestamp": 1594766356
    },
    {
        "content": "<p>at least that's the simple approach for this in my view</p>",
        "id": 203896925,
        "sender_full_name": "eddyb",
        "timestamp": 1594766367
    },
    {
        "content": "<p>at this point I think the code speaks more clearly than I can <a href=\"https://github.com/rust-lang/rust/pull/73964/commits/41a339d1c8753a655a691f605d29c20fba856e46\">https://github.com/rust-lang/rust/pull/73964/commits/41a339d1c8753a655a691f605d29c20fba856e46</a></p>",
        "id": 203897006,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594766408
    },
    {
        "content": "<p>(not sure about the <code>all_crates</code> change but I figure someone will notice if it breaks things)</p>",
        "id": 203897028,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594766434
    },
    {
        "content": "<p>Since I didn't see it mentioned in the MCP: will the default stage for the <code>dist</code> and <code>install</code> commands also change?</p>",
        "id": 204243226,
        "sender_full_name": "tmandry",
        "timestamp": 1595011378
    },
    {
        "content": "<p>this would break people who are using x.py to build and distribute rust themselves (like we do on fuchsia)</p>",
        "id": 204243300,
        "sender_full_name": "tmandry",
        "timestamp": 1595011417
    },
    {
        "content": "<p>which I'm fine with, but <code>--stage 1</code> doesn't seem like the right default for those commands to me</p>",
        "id": 204243337,
        "sender_full_name": "tmandry",
        "timestamp": 1595011439
    },
    {
        "content": "<p>Also FYI: rustbot's link to this stream on the MCP issue was broken</p>",
        "id": 204243761,
        "sender_full_name": "tmandry",
        "timestamp": 1595011612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> I filed an issue: <a href=\"https://github.com/rust-lang/triagebot/issues/701\">rust-lang/triagebot#701</a></p>",
        "id": 204247026,
        "sender_full_name": "Noah Lev",
        "timestamp": 1595013190
    },
    {
        "content": "<blockquote>\n<p>Since I didn't see it mentioned in the MCP: will the default stage for the <code>dist</code> and <code>install</code> commands also change?</p>\n</blockquote>\n<p>Hmm that's a good point. I don't see any reason they should change, since it seems very rare to want to install the stage 1 compiler. I'll clarify that in the MCP.</p>",
        "id": 204264500,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595023099
    },
    {
        "content": "<p>ok here are the subcommands that look relevant:</p>\n<ul>\n<li>build</li>\n<li>test</li>\n<li>bench</li>\n<li>doc</li>\n<li>dist</li>\n<li>install</li>\n<li>run</li>\n</ul>\n<p>I have no idea what <code>run</code> does except for the suggestion of <code>expand-yaml-anchors</code> (cc <span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span> who wrote that command - <code>-h -v</code> doesn't show the available paths). Anyone have suggestions?<br>\nThe default for <code>dist</code> and <code>install</code> seems like it should stay at 2.<br>\nThe default for <code>build</code> and <code>test</code> should change to 1 (that's kind of the point of the MCP :P).<br>\nI think <code>doc</code> should actually be 0, since normally when you document things you're just fixing a typo. For this release cycle only that will have very different results between beta and nightly (due to <a href=\"https://github.com/rust-lang/rust/pull/73101\">https://github.com/rust-lang/rust/pull/73101</a>) but in general I think stage 0 is a good default.<br>\nPresumably <code>bench</code> should use stage 2 since it's measuring performance? I've never used it before.</p>",
        "id": 204265048,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595023508
    },
    {
        "content": "<p>that sounds about right</p>",
        "id": 204278971,
        "sender_full_name": "eddyb",
        "timestamp": 1595038697
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> FWIW you should probably use <code>./configure</code> and <code>make</code> to get the \"distro-facing\" stable interface</p>",
        "id": 204278991,
        "sender_full_name": "eddyb",
        "timestamp": 1595038737
    },
    {
        "content": "<p>worst case, if you need some special <code>config.toml</code> settings (not exposed otherwise), you can still pass them to <code>./configure</code> with <code>--set</code> I believe</p>",
        "id": 204279013,
        "sender_full_name": "eddyb",
        "timestamp": 1595038784
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> thanks, good to know.</p>",
        "id": 204279698,
        "sender_full_name": "tmandry",
        "timestamp": 1595039772
    },
    {
        "content": "<p>updated the MCP with the stage changes</p>",
        "id": 204281607,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595043293
    },
    {
        "content": "<p>btw <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> thanks for bringing it up, I would never have thought of x.py dist <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 204282056,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595044069
    },
    {
        "content": "<p>The confusing naming is something that's really confused me when I've dabbled with rustc, and this seems like a significant improvement!</p>",
        "id": 204285765,
        "sender_full_name": "comex",
        "timestamp": 1595050742
    },
    {
        "content": "<blockquote>\n<p>since it seems very rare to want to install the stage 1 compiler</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> that's actually <em>all</em> I've been doing recently... <a href=\"https://github.com/shepmaster/rust/blob/silicon/silicon/README.md\">https://github.com/shepmaster/rust/blob/silicon/silicon/README.md</a></p>\n<p>Is there a \"translation guide\" from the old style to the new style commands?</p>",
        "id": 204296522,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595071081
    },
    {
        "content": "<p>ideally we can just keep them (the <code>dist</code>/<code>install</code> commands) behaving the same</p>",
        "id": 204296573,
        "sender_full_name": "eddyb",
        "timestamp": 1595071158
    },
    {
        "content": "<p>as for <code>x.py build</code> commands, depends how explicit they were - if you pass both <code>--stage</code> and e.g. <code>src/libstd</code> (or some other path), I'm against that changing behavior</p>",
        "id": 204296624,
        "sender_full_name": "eddyb",
        "timestamp": 1595071227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> all the <code>x.py</code> commands I can see in that README look explicit enough to not need any changes</p>",
        "id": 204296697,
        "sender_full_name": "eddyb",
        "timestamp": 1595071339
    },
    {
        "content": "<p>like, I think you will be able to shorten:<br>\n<code>../../x.py build -i --stage 1 src/libstd</code><br>\nto:<br>\n<code>../../x.py build -i</code><br>\nbut you won't have to</p>",
        "id": 204296710,
        "sender_full_name": "eddyb",
        "timestamp": 1595071412
    },
    {
        "content": "<p>Currently the MCP says rustdoc will also be built by default. I don't feel strongly about that, though.</p>",
        "id": 204299174,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595076068
    },
    {
        "content": "<p>So you would still need <code>src/libstd</code> to avoid building rustdoc</p>",
        "id": 204299179,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595076092
    },
    {
        "content": "<blockquote>\n<p>The confusing naming is something that's really confused me when I've dabbled with rustc, and this seems like a significant improvement!</p>\n</blockquote>\n<p>Thank you! This doesn't actually change the numbering, it just makes the defaults somewhat better. Changing the numbering is another whole can of worms <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 204299240,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595076236
    },
    {
        "content": "<p>It's been 12 days since <span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> seconded the MCP - the description says it should have been accepted after 10 days. Is there a bug in the automation maybe?</p>",
        "id": 204379903,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595209801
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Improve.20defaults.20in.20x.2Epy.20compiler-team.23326/near/204379903\">said</a>:</p>\n<blockquote>\n<p>It's been 12 days since <span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> seconded the MCP - the description says it should have been accepted after 10 days. Is there a bug in the automation maybe?</p>\n</blockquote>\n<p>it isn't a _bug_ but missing functionality. currently someone has to add <code>major-change-accepted</code> manually iirc</p>",
        "id": 204397482,
        "sender_full_name": "Yuki Okushi",
        "timestamp": 1595233801
    },
    {
        "content": "<p>I usually manually accept MCPs just before our thursday's meetings</p>",
        "id": 204472254,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1595277038
    },
    {
        "content": "<p>got it, thanks :) I'll try to contain my impatience <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 204472390,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595277106
    },
    {
        "content": "<p>This proposal has been accepted: <a href=\"https://github.com/rust-lang/compiler-team/issues/326\">#326</a>.</p>",
        "id": 204682877,
        "sender_full_name": "triagebot",
        "timestamp": 1595432355
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> this is just waiting for your review of the implementation I think :) <a href=\"https://github.com/rust-lang/rust/pull/73964\">https://github.com/rust-lang/rust/pull/73964</a></p>",
        "id": 204998652,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595673321
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Improve.20defaults.20in.20x.2Epy.20compiler-team.23326/near/203896751\">said</a>:</p>\n<blockquote>\n<p>so <code>x.py build</code> and <code>x.py build --stage 1</code> and <code>x.py build src/libstd</code> and <code>x.py build --stage 1 src/libstd</code> would all do the same thing</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Improve.20defaults.20in.20x.2Epy.20compiler-team.23326/near/204296710\">said</a>:</p>\n<blockquote>\n<p>like, I think you will be able to shorten:<br>\n<code>../../x.py build -i --stage 1 src/libstd</code><br>\nto:<br>\n<code>../../x.py build -i</code><br>\nbut you won't have to</p>\n</blockquote>\n<p>so ... I think this is a great idea (and <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> agreed on <a href=\"https://github.com/rust-lang/blog.rust-lang.org/pull/666#discussion_r470428415\">https://github.com/rust-lang/blog.rust-lang.org/pull/666#discussion_r470428415</a>) but it didn't make it into the MCP. Is it ok if I make a follow-up MR with the implementation? Or should I open a new MCP for changing that default?</p>",
        "id": 206924772,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597408743
    },
    {
        "content": "<p>to be clear, the current default is that <code>x.py build</code> and <code>x.py build --stage 1 library/std src/tools/*</code> are the same</p>",
        "id": 206924821,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597408800
    },
    {
        "content": "<p>heh, this makes me really glad I made the change: <a href=\"https://github.com/rust-lang/compiler-team/issues/326#issuecomment-686464359\">https://github.com/rust-lang/compiler-team/issues/326#issuecomment-686464359</a></p>",
        "id": 208965510,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599139375
    }
]