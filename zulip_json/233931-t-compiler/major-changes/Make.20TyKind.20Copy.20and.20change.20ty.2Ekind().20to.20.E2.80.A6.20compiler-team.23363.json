[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/compiler-team/issues/363\">Make TyKind Copy and change ty.kind() to return TyKind instead of &amp;TyKind #363</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 210558103,
        "sender_full_name": "triagebot",
        "timestamp": 1600453735
    },
    {
        "content": "<p>I realized this change can be split into multiple sub PRs, so it might not even deserve an MCP. cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span> I guess this is the most relevant for you rn. Would just go ahead and implement this myself if I get an ok here :)</p>",
        "id": 210560588,
        "sender_full_name": "lcnr",
        "timestamp": 1600454925
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span>: Proposal <a href=\"https://github.com/rust-lang/compiler-team/issues/363#issuecomment-695031579\">#363</a> has been seconded, and will be approved in 10 days if no objections are raised.</p>",
        "id": 210561139,
        "sender_full_name": "triagebot",
        "timestamp": 1600455196
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> I am in favor of the plan, however you package it up, subject to measurements of course that show it's not a perf regression. (I think it's definitely an ergonomics improvement.)</p>",
        "id": 210561199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600455226
    },
    {
        "content": "<p>About ergonomics: when first investigation, I found some (rare) cases where the borrow checker was complaining (I don't remember the specifics though, but it was fixable by changing the code a bit). Though I think this is minor compared to all the pattern matching and <code>*ty.kind()</code></p>",
        "id": 210572034,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1600461133
    },
    {
        "content": "<p>I just remembered you found this other issue <span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span> , but I guess <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> will encounter it too and either find a solution  or w'ell discuss it then</p>",
        "id": 210572790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600461621
    },
    {
        "content": "<p>The only concern I might personally have is <a href=\"#narrow/stream/144729-wg-traits/topic/fn.20kind%28%29.20-.3E.20TypeKind.20or.20-.3E.20.26TypeKind/near/208444172\">this</a>: if you need to return a reference, you can't make it live as long as the input <code>kind</code>. This made it impossible to return a <code>&amp;TyKind</code> when using the <code>ty.kind()</code> method. Also note that, as it's a trait implementation, we can't change the return type.</p>\n<p>In that case we can work around that by not invoking <code>ty.kind()</code> and accessing <code>ty.kind</code> directly as we're in <code>rustc_middle</code>, but if we want to keep the <code>kind</code> private, this means that such a code in some other crate won't be possible.</p>",
        "id": 210572795,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1600461625
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Make.20TyKind.20Copy.20and.20change.20ty.2Ekind().20to.20.E2.80.A6.20compiler-team.23363/near/210572790\">said</a>:</p>\n<blockquote>\n<p>I just remembered you found this other issue <span class=\"user-mention silent\" data-user-id=\"255061\">LeSeulArtichaut</span> , but I guess <span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> will encounter it too and either find a solution  or w'ell discuss it then</p>\n</blockquote>\n<p>I was writing about that <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 210572876,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1600461670
    },
    {
        "content": "<p>tbh, we can change <code>EncodableWithShorthand</code> to return <code>Self::Variant</code> directly. Both <code>ty::PredicateKind</code> and <code>ty::TyKind</code> should really be <code>Copy</code>.</p>",
        "id": 210573047,
        "sender_full_name": "lcnr",
        "timestamp": 1600461773
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Make.20TyKind.20Copy.20and.20change.20ty.2Ekind().20to.20.E2.80.A6.20compiler-team.23363/near/210560588\">said</a>:</p>\n<blockquote>\n<p>I realized this change can be split into multiple sub PRs, so it might not even deserve an MCP. cc <span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <span class=\"user-mention silent\" data-user-id=\"255061\">LeSeulArtichaut</span> I guess this is the most relevant for you rn. Would just go ahead and implement this myself if I get an ok here :)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> Btw I'm willing to help you make the refractor if you want. I had a branch where I started the work but I think I wiped it out :/</p>",
        "id": 210620639,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1600529454
    },
    {
        "content": "<p>I guess the easiest way to do this is:</p>\n<p>Making <code>TyKind</code> <code>Copy</code> ~&gt; A few PRs changing <code>ty.kind()</code> to <code>*ty.kind()</code> and removing all <code>&amp;ty::Variant</code> ~&gt; actually change <code>fn kind</code></p>",
        "id": 210620738,
        "sender_full_name": "lcnr",
        "timestamp": 1600529596
    },
    {
        "content": "<p>so yeah, if you want we can split step 2 here</p>",
        "id": 210620747,
        "sender_full_name": "lcnr",
        "timestamp": 1600529617
    },
    {
        "content": "<p>Would be quite helpful for me <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 210620792,
        "sender_full_name": "lcnr",
        "timestamp": 1600529646
    },
    {
        "content": "<p>Actually I have a stash saved with 60 lines changed</p>",
        "id": 210620805,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1600529671
    },
    {
        "content": "<p>Strategically named \"Make <code>ty.kind()</code> return <code>TyKind</code>\". Otherwise I don't think I would have retrieved it :D</p>",
        "id": 210620857,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1600529729
    },
    {
        "content": "<p>Since the MCP is now seconded, do you want me to push that somewhere?</p>",
        "id": 210620906,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1600529768
    },
    {
        "content": "<p>This proposal has been accepted: <a href=\"https://github.com/rust-lang/compiler-team/issues/363\">#363</a>.</p>",
        "id": 211848284,
        "sender_full_name": "triagebot",
        "timestamp": 1601504986
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> wait what we made it fast enough to be able to improve perf now??</p>",
        "id": 211927338,
        "sender_full_name": "eddyb",
        "timestamp": 1601565809
    },
    {
        "content": "<p>err small enough</p>",
        "id": 211927364,
        "sender_full_name": "eddyb",
        "timestamp": 1601565823
    },
    {
        "content": "<p>I guess it makes sense, before LLVM might've loaded the components separately</p>",
        "id": 211927395,
        "sender_full_name": "eddyb",
        "timestamp": 1601565838
    },
    {
        "content": "<p>I think we do, will have to perf the PRs itself to be sure though</p>",
        "id": 211929196,
        "sender_full_name": "lcnr",
        "timestamp": 1601566555
    },
    {
        "content": "<p>I mostly added that line because of <code>Relate</code></p>",
        "id": 211929302,
        "sender_full_name": "lcnr",
        "timestamp": 1601566579
    },
    {
        "content": "<p>where going from <code>&amp;T</code> to <code>T</code> gave a small perf benefit</p>",
        "id": 211929427,
        "sender_full_name": "lcnr",
        "timestamp": 1601566623
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I have now changed 130 files and I'm facing the first \"cannot return value referencing temporary value\" problem: <a href=\"https://github.com/rust-lang/rust/blob/a585aaefb662ae26f8675955f26fad9be4fea96b/compiler/rustc_typeck/src/check/cast.rs#L83-L147\"><code>FnCtxt::pointer_kind</code></a>.</p>\n<p>Here we want to return a <code>PointerKind&lt;'tcx&gt;</code> that we extract from a <code>ty::Param</code>, but since we now copy the <code>TyKind</code>, we can't return a reference to it.<br>\nIs the only way out of this problem is to change the definition of <code>PointerKind</code> to own the <code>ParamTy</code>? Or did I miss an easy solution?</p>",
        "id": 212098451,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1601656542
    },
    {
        "content": "<p>I think directly using <code>ParamTy</code> and <code>ProjectionTy</code> is fine here</p>",
        "id": 212115307,
        "sender_full_name": "lcnr",
        "timestamp": 1601665676
    },
    {
        "content": "<p>they both have the same size as the <code>OfOpaque</code> variant, so I guess that shouldn't hurt perf</p>",
        "id": 212115391,
        "sender_full_name": "lcnr",
        "timestamp": 1601665703
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/rust-lang/rust/issues/77482\">#77482</a>, could someone (cc <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span>) request a perf run?</p>",
        "id": 212169287,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1601728007
    },
    {
        "content": "<p>From a private convo with <span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span> about the negative perf impact <a href=\"https://github.com/rust-lang/rust/pull/77482#issuecomment-703167312\">https://github.com/rust-lang/rust/pull/77482#issuecomment-703167312</a>:</p>\n<p>I think I know the issue<br>\nand we can't fix it<br>\n<a href=\"https://github.com/rust-lang/rust/blob/9fdaeb393a16951f6fdef087193fef576e36aba6/compiler/rustc_middle/src/ty/structural_impls.rs#L936\">https://github.com/rust-lang/rust/blob/9fdaeb393a16951f6fdef087193fef576e36aba6/compiler/rustc_middle/src/ty/structural_impls.rs#L936</a></p>\n<p><code>TypeFoldable</code> takes self by reference</p>\n<p>so if <code>kind()</code> returns <code>&amp;TyKind</code>, we branch on the discriminant and then call <code>subelement.fold_with</code> with <code>ty_ptr_value + offset</code></p>\n<p>if <code>kind()</code> returns <code>TyKind</code>, we also branch on the discriminant but then have to copy the subelements on the stack and take a reference to that</p>\n<p>and this has the same issue</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[allow(rustc::usage_of_ty_tykind)]</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Borrow</span><span class=\"o\">&lt;</span><span class=\"n\">TyKind</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Interned</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TyS</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">borrow</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">TyKind</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">kind</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212460531,
        "sender_full_name": "lcnr",
        "timestamp": 1602005953
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> as the second of the MCP)</p>",
        "id": 212460585,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1602005989
    },
    {
        "content": "<blockquote>\n<p>TypeFoldable takes self by reference</p>\n</blockquote>\n<p>this reminds me - is there a reason it takes the type by reference? I glanced at <code>resolve_vars_if_possible</code> and in the common case that it doesn't need substitions it has to clone the type</p>",
        "id": 212461206,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602006336
    },
    {
        "content": "<p>maybe we could make it take the type by value?</p>",
        "id": 212461218,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602006345
    },
    {
        "content": "<p>because <code>TypeFoldable</code> is also used for types which really shouldn't be folded imo</p>",
        "id": 212461243,
        "sender_full_name": "lcnr",
        "timestamp": 1602006361
    },
    {
        "content": "<p>what does that mean?</p>",
        "id": 212461337,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602006388
    },
    {
        "content": "<p>or wait, that's actually not it, we have to clone them anyways, so why aren't we doing so</p>",
        "id": 212461343,
        "sender_full_name": "lcnr",
        "timestamp": 1602006393
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> I might have been overthinking this</p>",
        "id": 212461362,
        "sender_full_name": "lcnr",
        "timestamp": 1602006404
    },
    {
        "content": "<p>yeah if they need to be cloned the caller can always clone them</p>",
        "id": 212461390,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602006416
    },
    {
        "content": "<p>We are implementing <code>TypeFoldable</code> for things like <code>mir::Body</code></p>",
        "id": 212461400,
        "sender_full_name": "lcnr",
        "timestamp": 1602006421
    },
    {
        "content": "<p>where cloning is really expensive, but that doesn't actually seem like a reason to not take it by value</p>",
        "id": 212461439,
        "sender_full_name": "lcnr",
        "timestamp": 1602006444
    },
    {
        "content": "<p>considering that we have to clone it anyways (which I didn't realize up until now)</p>",
        "id": 212461498,
        "sender_full_name": "lcnr",
        "timestamp": 1602006474
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_infer/infer/mod.rs.html#1360\">https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_infer/infer/mod.rs.html#1360</a></p>",
        "id": 212461605,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602006507
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> are you interested in making that pr? ;)</p>",
        "id": 212461669,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602006544
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Make.20TyKind.20Copy.20and.20change.20ty.2Ekind().20to.20.E2.80.A6.20compiler-team.23363/near/212461669\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> are you interested in making that pr? ;)</p>\n</blockquote>\n<p>god no</p>",
        "id": 212461684,
        "sender_full_name": "lcnr",
        "timestamp": 1602006553
    },
    {
        "content": "<p>that one would be enormous</p>",
        "id": 212461694,
        "sender_full_name": "lcnr",
        "timestamp": 1602006560
    },
    {
        "content": "<p>changing <code>Relate</code> was already bad enough <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <a href=\"https://github.com/rust-lang/rust/issues/73705\">#73705</a></p>",
        "id": 212461819,
        "sender_full_name": "lcnr",
        "timestamp": 1602006615
    },
    {
        "content": "<p>if I made a such a PR, do you think it would be accepted?</p>",
        "id": 212461869,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602006649
    },
    {
        "content": "<p>after an MCP and neutral/good perf results.. yeah</p>",
        "id": 212461916,
        "sender_full_name": "lcnr",
        "timestamp": 1602006674
    },
    {
        "content": "<blockquote>\n<p>considering that we have to clone it anyways (which I didn't realize up until now)</p>\n</blockquote>\n<p>we should probably move that into its own topic, but I do realize that's not quite right</p>",
        "id": 212462098,
        "sender_full_name": "lcnr",
        "timestamp": 1602006769
    },
    {
        "content": "<p>is there anything else that should change other than <code>resolve_vars_if_possible</code>? Maybe <code>fold_with</code> and <code>super_fold_with</code>?</p>",
        "id": 212462141,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602006789
    },
    {
        "content": "<p>wait, you mean you want to only change <code>resolve_vars_if_possible</code>?</p>",
        "id": 212462190,
        "sender_full_name": "lcnr",
        "timestamp": 1602006815
    },
    {
        "content": "<p>I have no idea how the compiler works <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> which is why I asked you to do it first</p>",
        "id": 212462223,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602006833
    },
    {
        "content": "<p>One issue I have is stuff like <code>impl&lt;'tcx, T: TypeFoldable&lt;'tcx&gt;&gt; TypeFoldable&lt;'tcx&gt; for Vec&lt;T&gt; { ... }</code></p>",
        "id": 212462347,
        "sender_full_name": "lcnr",
        "timestamp": 1602006881
    },
    {
        "content": "<p>rn we can simply implement fold as <code>vec.iter().map(|e| e.fold_with(folder)).collect())</code></p>",
        "id": 212462424,
        "sender_full_name": "lcnr",
        "timestamp": 1602006932
    },
    {
        "content": "<p><code>into_iter()</code> after my change even</p>",
        "id": 212462524,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602006967
    },
    {
        "content": "<p>then it can reuse the allocation</p>",
        "id": 212462541,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602006979
    },
    {
        "content": "<p>yeah, but that means that we rely on specialization to not reallocate</p>",
        "id": 212462555,
        "sender_full_name": "lcnr",
        "timestamp": 1602006989
    },
    {
        "content": "<p>and do we have the same for <code>HashMap</code>, <code>IndexVec</code> etc</p>",
        "id": 212462575,
        "sender_full_name": "lcnr",
        "timestamp": 1602007000
    },
    {
        "content": "<p>it's no worse than now, where it <em>always</em> reallocates</p>",
        "id": 212462597,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602007014
    },
    {
        "content": "<p>but when taking <code>T</code> by value it would then allocate <em>twice</em></p>",
        "id": 212462631,
        "sender_full_name": "lcnr",
        "timestamp": 1602007032
    },
    {
        "content": "<p>where's the second one?</p>",
        "id": 212462682,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602007063
    },
    {
        "content": "<p>outside of <code>fold_with</code></p>",
        "id": 212462713,
        "sender_full_name": "lcnr",
        "timestamp": 1602007080
    },
    {
        "content": "<p>we now have <code>thing_ref.clone().fold_with(&amp;mut visitor)</code></p>",
        "id": 212462871,
        "sender_full_name": "lcnr",
        "timestamp": 1602007138
    },
    {
        "content": "<p>ah I see what you mean</p>",
        "id": 212462904,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602007149
    },
    {
        "content": "<p>FWIW the only collections this is implemented on is Vec, Box[T], and IndexVec <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/fold/trait.TypeFoldable.html#impl-TypeFoldable%3C%27tcx%3E-for-Box%3CT%3E\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/fold/trait.TypeFoldable.html#impl-TypeFoldable%3C%27tcx%3E-for-Box%3CT%3E</a></p>",
        "id": 212463106,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602007219
    },
    {
        "content": "<p>hmm, that does not too bad actually</p>",
        "id": 212463390,
        "sender_full_name": "lcnr",
        "timestamp": 1602007353
    },
    {
        "content": "<p>So <code>Box</code> has the same problem as <code>Box&lt;[T]&gt;</code>, but that's still not too bad</p>",
        "id": 212463425,
        "sender_full_name": "lcnr",
        "timestamp": 1602007378
    },
    {
        "content": "<p>so yeah, it seems worth trying <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> This change is really large though and I can't think of a good way to split it into smaller chunks</p>",
        "id": 212464031,
        "sender_full_name": "lcnr",
        "timestamp": 1602007684
    },
    {
        "content": "<p>It seems mostly mechanical, I wonder if rust-analyzer has good enough refactor support</p>",
        "id": 212464069,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602007719
    },
    {
        "content": "<p>hmm, might be worth it to create an MCP for this with a note that this refactoring might fail</p>",
        "id": 212465662,
        "sender_full_name": "lcnr",
        "timestamp": 1602008537
    },
    {
        "content": "<p>though the question is if there is someone to actually implement all of this <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 212465827,
        "sender_full_name": "lcnr",
        "timestamp": 1602008616
    },
    {
        "content": "<p><span aria-label=\"rolling eyes\" class=\"emoji emoji-1f644\" role=\"img\" title=\"rolling eyes\">:rolling_eyes:</span></p>",
        "id": 212476210,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1602013842
    },
    {
        "content": "<p>well, opened <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Change.20type.20folding.20to.20take.20self.20by.20value.20compiler-team.23371\">https://rust-lang.zulipchat.com/#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Change.20type.20folding.20to.20take.20self.20by.20value.20compiler-team.23371</a> and will probably implement this myself</p>",
        "id": 213642153,
        "sender_full_name": "lcnr",
        "timestamp": 1602924773
    }
]