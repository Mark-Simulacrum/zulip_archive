[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/compiler-team/issues/504\">Add -Zlazily-normalize-type-aliases to keep type alias information #504</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 277727751,
        "sender_full_name": "triagebot",
        "timestamp": 1649077535
    },
    {
        "content": "<p>I'm not exactly sure what the proposal is here</p>",
        "id": 277739267,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649082702
    },
    {
        "content": "<p>My understanding from snooping on rustdoc discussions is this is about retaining the info across crates by encoding it in metadata</p>",
        "id": 277739625,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649082861
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Noah Lev</span> or <span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> would know more</p>",
        "id": 277739670,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649082886
    },
    {
        "content": "<p>don't know why they chose an unstable flag instead of just doing it unconditionally</p>",
        "id": 277739709,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649082908
    },
    {
        "content": "<p>It's a discussion I had with <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> : having this information unconditionally would very likely impact compiler performance negatively and it's only useful for rustdoc and diagnostics. So <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> suggested that the best way for this information to be available will be to make it through an option</p>",
        "id": 277740078,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1649083083
    },
    {
        "content": "<p>I don't understand how the option helps rustdoc. Making it conditional means that either<br>\na) cargo will have to change its build model and rerun <code>rustc --emit metadata</code> before running rustdoc (unlikely to happen given the team is short on reviews lately), or<br>\nb) it just won't work at all unless you pass it unconditionally in RUSTFLAGS.</p>",
        "id": 277740487,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649083239
    },
    {
        "content": "<p>I assumed that rustdoc was rebuilding all dependencies anyway and generating its own set of metadata. Didn't think it was reusing the existing metadata</p>",
        "id": 277740719,
        "sender_full_name": "oli",
        "timestamp": 1649083321
    },
    {
        "content": "<p>correct, it reuses existing metadta. Rustdoc doesn't even have an <code>--emit=metadata</code> flag</p>",
        "id": 277740794,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649083340
    },
    {
        "content": "<p>(maybe you're thinking of clippy)</p>",
        "id": 277740815,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649083346
    },
    {
        "content": "<p>yea, I thought they were the same...</p>",
        "id": 277740847,
        "sender_full_name": "oli",
        "timestamp": 1649083358
    },
    {
        "content": "<p>no, clippy uses RUSTC_WORKSPACE_WRAPPER or whatever cargo calls it</p>",
        "id": 277740872,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649083371
    },
    {
        "content": "<p>in that case, maybe we should rewrite rustdoc to work solely off metadata instead of being a full driver XD</p>",
        "id": 277740882,
        "sender_full_name": "oli",
        "timestamp": 1649083376
    },
    {
        "content": "<p>cargo doesn't actually special-case clippy in any way, unlike rustdoc</p>",
        "id": 277740914,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649083386
    },
    {
        "content": "<p>anyway, back to the topic (&lt;-- that is a reminder to myself)</p>",
        "id": 277740917,
        "sender_full_name": "oli",
        "timestamp": 1649083386
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20-Zlazily-normalize-type-aliases.20to.20ke.E2.80.A6.20compiler-team.23504/near/277740882\">said</a>:</p>\n<blockquote>\n<p>in that case, maybe we should rewrite rustdoc to work solely off metadata instead of being a full driver XD</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/2206\">https://github.com/rust-lang/rust/issues/2206</a></p>",
        "id": 277740963,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649083413
    },
    {
        "content": "<p>god is that a low issue number</p>",
        "id": 277741000,
        "sender_full_name": "oli",
        "timestamp": 1649083433
    },
    {
        "content": "<p>second-oldest rustdoc issue :P</p>",
        "id": 277741001,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649083434
    },
    {
        "content": "<p>aaanyway. ok, this MCP then obviously won't work, so let's edit it to \"enable unconditionally if we can figure it out without a perf hit\"?</p>",
        "id": 277741146,
        "sender_full_name": "oli",
        "timestamp": 1649083478
    },
    {
        "content": "<p>Sounds to me like maybe this is asking for type aliases to be treated somewhat like TAITs, but where the \"hidden type\" is always known</p>",
        "id": 277741258,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649083530
    },
    {
        "content": "<p>yea</p>",
        "id": 277741274,
        "sender_full_name": "oli",
        "timestamp": 1649083535
    },
    {
        "content": "<p>pretty much</p>",
        "id": 277741277,
        "sender_full_name": "oli",
        "timestamp": 1649083538
    },
    {
        "content": "<p>but also normalization will just reveal it</p>",
        "id": 277741301,
        "sender_full_name": "oli",
        "timestamp": 1649083546
    },
    {
        "content": "<p>so it's more treating it like projections to associated types</p>",
        "id": 277741334,
        "sender_full_name": "oli",
        "timestamp": 1649083559
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20-Zlazily-normalize-type-aliases.20to.20ke.E2.80.A6.20compiler-team.23504/near/277740882\">said</a>:</p>\n<blockquote>\n<p>in that case, maybe we should rewrite rustdoc to work solely off metadata instead of being a full driver XD</p>\n</blockquote>\n<p>btw part of the reason this hasn't been done is exactly <em>because</em> of things like this MCP are trying to fix, there is significantly more info available through the driver than through metadata. So there's a reluctance to make rustdoc on the final crate use metadata because it will regress that crate, even if it brings it into consistency with dependencies.</p>",
        "id": 277741342,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649083561
    },
    {
        "content": "<p>except it's not associated to anything</p>",
        "id": 277741388,
        "sender_full_name": "oli",
        "timestamp": 1649083565
    },
    {
        "content": "<p>I wonder about the syntax <code>opaque type Foo: Trait;</code> and <code>opaque type Foo: Trait = Bar;</code></p>",
        "id": 277741457,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649083595
    },
    {
        "content": "<p>But I dont like it all that much</p>",
        "id": 277741477,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649083603
    },
    {
        "content": "<p>I'm confused, sorry, how is syntax related at all?</p>",
        "id": 277741523,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649083623
    },
    {
        "content": "<p>I would expect this to be an internal change only</p>",
        "id": 277741542,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649083628
    },
    {
        "content": "<p>yes</p>",
        "id": 277741551,
        "sender_full_name": "oli",
        "timestamp": 1649083633
    },
    {
        "content": "<p>this is simply changing the hir -&gt; ty lowering to not peel away type aliases</p>",
        "id": 277741609,
        "sender_full_name": "oli",
        "timestamp": 1649083653
    },
    {
        "content": "<p>and instead doing that during normalization</p>",
        "id": 277741645,
        "sender_full_name": "oli",
        "timestamp": 1649083669
    },
    {
        "content": "<p>ah I see this is about how to print it with <code>-Zunpretty=hir</code></p>",
        "id": 277741721,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649083686
    },
    {
        "content": "<p>I guess, somewhat orthogonal</p>",
        "id": 277741761,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649083703
    },
    {
        "content": "<p>hmm... not sure if unpretty is affected, does that process anything but the HIR?</p>",
        "id": 277741874,
        "sender_full_name": "oli",
        "timestamp": 1649083743
    },
    {
        "content": "<p>ok then I'm still confused how syntax is related to lazy-normalizing type aliases</p>",
        "id": 277741900,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649083754
    },
    {
        "content": "<p>syntax is <em>not</em> related</p>",
        "id": 277741941,
        "sender_full_name": "oli",
        "timestamp": 1649083770
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20-Zlazily-normalize-type-aliases.20to.20ke.E2.80.A6.20compiler-team.23504/near/277741542\">said</a>:</p>\n<blockquote>\n<p>I would expect this to be an internal change only</p>\n</blockquote>\n<p>the \"yes\"was to this</p>",
        "id": 277741996,
        "sender_full_name": "oli",
        "timestamp": 1649083794
    },
    {
        "content": "<p>The \"problem\" here somewhat intersects \"I have a type alias where I want to specify the type at definition, but I want uses to use it opaquely\"</p>",
        "id": 277742098,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649083820
    },
    {
        "content": "<p>But yeah, mostly unrelated.</p>",
        "id": 277742113,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649083825
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20-Zlazily-normalize-type-aliases.20to.20ke.E2.80.A6.20compiler-team.23504/near/277741609\">said</a>:</p>\n<blockquote>\n<p>this is simply changing the hir -&gt; ty lowering to not peel away type aliases</p>\n</blockquote>\n<p>reminds me a bit of chalk-ir, with the <code>Alias</code> variant</p>",
        "id": 277742343,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649083917
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/blob/1f43e8265eb0472700286bf5c0afa30fcf4cec5a/chalk-ir/src/lib.rs#L647\">https://github.com/rust-lang/chalk/blob/1f43e8265eb0472700286bf5c0afa30fcf4cec5a/chalk-ir/src/lib.rs#L647</a></p>",
        "id": 277742555,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649083975
    },
    {
        "content": "<p>I think the third option is actually not implemented though</p>",
        "id": 277742588,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649083989
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> do you have an idea for how hard this would be to implement? e.g. roughly how long it would take you to do (even if someone else ends up doing the work)?</p>",
        "id": 277744297,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649084639
    },
    {
        "content": "<p>Hmm. I think the first part of creating the <code>TyKind</code> and changing the lowering of hir -&gt; ty would be pretty easy and straightforward. But then you also have to modify projection-related code to normalize <code>TyAlias</code>, which could be a bit heavy. And even once all that is in place, I'm not exactly sure if it would be \"smooth\" after that or not. There's almost certainly going to be places where more normalize calls are needed, for example.</p>",
        "id": 277745163,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649084985
    },
    {
        "content": "<p>It's not unattainable, but it's not \"trivial\"</p>",
        "id": 277745271,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649085011
    },
    {
        "content": "<p>what's the failure mode for a missing <code>normalize</code> call? will the compiler ICE?</p>",
        "id": 277745449,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649085085
    },
    {
        "content": "<p>not necessary an ICE. Just as likely is something like a \"mismatched types\" error</p>",
        "id": 277745570,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649085124
    },
    {
        "content": "<p>oof, gotcha. so there will likely be a long tail of bugs :( which will be harder to spot because it's unclear whether they're bugs or not</p>",
        "id": 277745622,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649085147
    },
    {
        "content": "<p>Just have type equality checks ice when finding <code>TyAlias</code>?</p>",
        "id": 277745750,
        "sender_full_name": "bjorn3",
        "timestamp": 1649085192
    },
    {
        "content": "<p>Yeah, that's probably the right thing <em>for now</em></p>",
        "id": 277745944,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649085254
    },
    {
        "content": "<p>In a lazy norm world, we probably delay normalizing <code>TyAlias</code>es too</p>",
        "id": 277746001,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649085275
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20-Zlazily-normalize-type-aliases.20to.20ke.E2.80.A6.20compiler-team.23504/near/277745622\">said</a>:</p>\n<blockquote>\n<p>oof, gotcha. so there will likely be a long tail of bugs <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span> which will be harder to spot because it's unclear whether they're bugs or not</p>\n</blockquote>\n<p>well... this is exactly what we have with associated types today, so it should in theory not give us more bugs, just that the existing bugs will show up for type aliases now, too</p>",
        "id": 277749570,
        "sender_full_name": "oli",
        "timestamp": 1649086654
    },
    {
        "content": "<p>on the bright side, when people complain about regressions for type aliases, it will also fix things for associated types! :P</p>",
        "id": 277751545,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649087391
    },
    {
        "content": "<p>Think positive!</p>",
        "id": 277752538,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1649087780
    },
    {
        "content": "<p>I'm glad this is being discussed! Lazy norm. of type aliases would allow removing tons of extra rustdoc code paths that I've been wanting to get rid of for a long time.</p>",
        "id": 277800617,
        "sender_full_name": "Noah Lev",
        "timestamp": 1649110095
    },
    {
        "content": "<p>I wrote up some details on how rustdoc processes type aliases <a href=\"#narrow/stream/266220-rustdoc/topic/To.20alias.20or.20not.20to.20alias\">here</a> in case it's helpful.</p>",
        "id": 277800662,
        "sender_full_name": "Noah Lev",
        "timestamp": 1649110139
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span>: Proposal <a href=\"https://github.com/rust-lang/compiler-team/issues/504#issuecomment-1091601628\">#504</a> has been seconded, and will be approved in 10 days if no objections are raised.</p>",
        "id": 278146898,
        "sender_full_name": "triagebot",
        "timestamp": 1649329681
    }
]