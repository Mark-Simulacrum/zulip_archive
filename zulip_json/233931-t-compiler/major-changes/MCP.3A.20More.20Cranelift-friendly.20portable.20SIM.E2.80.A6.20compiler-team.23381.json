[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/compiler-team/issues/381\">MCP: More Cranelift-friendly portable SIMD intrinsics #381</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 215569238,
        "sender_full_name": "triagebot",
        "timestamp": 1604489766
    },
    {
        "content": "<p>Seems like these should go in compiler_builtins, not miri/the const eval engine, otherwise you can only execute them at compile time.</p>",
        "id": 215575116,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1604494051
    },
    {
        "content": "<p>But then any backend needs support for SIMD as part of the calling convention, and any use of an intrinsic incurs a function call.</p>",
        "id": 215575252,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1604494118
    },
    {
        "content": "<p>You can have the compiler_builtins implementation as fallback for when there is no native implementation for a platform-intrinsic. SIMD supports as part of the calling convention is not necessary. You can just pass the arguments using the regular struct calling convention. A disadvantage of having it in compiler_builtins is that platform-intrinsics work for any combination of lane type and vector size, while regular functions can't.</p>",
        "id": 215582350,
        "sender_full_name": "bjorn3",
        "timestamp": 1604497884
    },
    {
        "content": "<p>So in reference to this part of the MCP:</p>\n<blockquote>\n<p>We want to write reference implementations in plain Rust rather than in MIR, but also want backends to be able to use them to emit code. Is this something that's possible in the compiler? Is compiler-builtins the right place for them?</p>\n</blockquote>\n<p>This is probably the same as what <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> said, but what I would imagine is that we would write \"plain Rust\" functions but give them some kind of special attribute</p>",
        "id": 215583749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604498529
    },
    {
        "content": "<p>such that if there is a <em>direct call</em> to the function (in a backend that can handle it) we generate special SIMD code</p>",
        "id": 215584125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604498691
    },
    {
        "content": "<p>but otherwise we can treat it like a normal function call</p>",
        "id": 215584139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604498696
    },
    {
        "content": "<p>I think this is how we handle intrinsics anyway?</p>",
        "id": 215584157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604498701
    },
    {
        "content": "<p>I know that <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> had proposed this model in particular to handle things like indirect function calls</p>",
        "id": 215584186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604498714
    },
    {
        "content": "<p>though I think in that original proposal you'd see something</p>",
        "id": 215584199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604498719
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">some_intrinsic</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">some_intrinsic</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 215584215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604498727
    },
    {
        "content": "<p>the idea being that an indirect call invokes the <code>some_intrinsic</code> function and the function body itself contains a <em>direct call</em>, which gets generated with the special behavior</p>",
        "id": 215584252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604498745
    },
    {
        "content": "<p>That is basically what <code>drop_in_place</code> does I think.</p>",
        "id": 215584356,
        "sender_full_name": "bjorn3",
        "timestamp": 1604498785
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">drop_in_place</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">to_drop</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Code here does not matter - this is replaced by the</span>\n<span class=\"w\">    </span><span class=\"c1\">// real drop glue by the compiler.</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// SAFETY: see comment above</span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">drop_in_place</span><span class=\"p\">(</span><span class=\"n\">to_drop</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 215584641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604498910
    },
    {
        "content": "<p>sounds right</p>",
        "id": 215584646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604498912
    },
    {
        "content": "<p>anyway, I think this would work, right? the idea being that we give the \"reference impl\" semantics as plain rust</p>",
        "id": 215584676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604498927
    },
    {
        "content": "<p>How would the \"reference impl\" be written for say <code>simd_add</code> though? The full signature is <code>extern \"platform-intrinsic { fn simd_add&lt;T&gt;(a: T, b: T) -&gt; T; }</code>. This accepts vector types with any lane size and lane count.</p>",
        "id": 215584898,
        "sender_full_name": "bjorn3",
        "timestamp": 1604499016
    },
    {
        "content": "<p>Well, the final version would probably need some trait bounds, or just compile error if unacceptable types are put in.</p>\n<p>However, being allowed to use types without direct hardware support is <em>by design</em>, so that much at least has to be allowed.</p>",
        "id": 215586456,
        "sender_full_name": "Lokathor",
        "timestamp": 1604499643
    },
    {
        "content": "<p>I am not talking about the interface. I am talking about the implementation. What would you write in the function body?</p>",
        "id": 215586611,
        "sender_full_name": "bjorn3",
        "timestamp": 1604499708
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> yeah that wouldn't work :)  I agree it would need some kind of trait bounds to make it writeable</p>",
        "id": 215616856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604511935
    },
    {
        "content": "<p>Currently all intrinsics in compiler_builtins are non-generic. I don't know if it is possible to introduce generics given that the public interface is through unmangled symbols and there is a lot of special casing of compiler_builtins in rustc.</p>",
        "id": 215617040,
        "sender_full_name": "bjorn3",
        "timestamp": 1604512033
    },
    {
        "content": "<p>Hmm, I guess it could be done like doc items or something -- write everything as all normal rust functions but with a special attribute on them so the backend can swap them out for whatever the IR has if they have support for the operation.</p>",
        "id": 215651099,
        "sender_full_name": "scottmcm",
        "timestamp": 1604530163
    },
    {
        "content": "<p>It sounds like our first job is to figure out how to write these reference implementations and we’re generally ok with using <code>extern “platform-intrinsic”</code>?</p>",
        "id": 215653899,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1604532224
    },
    {
        "content": "<p>The reason I was pushing for plain Rust reference implementations that we can directly call was that I was expecting an API that hands backends MIR would obscure the contract of these portable methods and make them harder to work on. But if coming up with a few macros to make “I have a <code>simd_add</code>, what code should I emit?” easier to understand for us non-compiler folk has fewer unknowns than trying to come up with a pure Rust approach then maybe we should try go that way</p>",
        "id": 215669460,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1604549162
    },
    {
        "content": "<p>I have to bring some of those back into cache obviously but</p>",
        "id": 215723394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604588578
    },
    {
        "content": "<p>I remember that way back in Ye Olde Days huonw had these special intrinsics that kind of hard-coded simd over some set of types but that set was ad-hoc and not defined via traits</p>",
        "id": 215723498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604588611
    },
    {
        "content": "<p>(probably this is still true?)</p>",
        "id": 215723508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604588615
    },
    {
        "content": "<p>I guess I didn't get a clear picture from the MCP what kind of data types these intrinsics need to operate over</p>",
        "id": 215723571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604588642
    },
    {
        "content": "<p>I think it'd be nice if we can write \"plain old Rust\" and not hard-coded MIR etc</p>",
        "id": 215723641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604588654
    },
    {
        "content": "<p>The data types they work on are all <code>#[repr(simd)]</code> types with the correct lane types.</p>",
        "id": 215723692,
        "sender_full_name": "bjorn3",
        "timestamp": 1604588680
    },
    {
        "content": "<p>yes ok this is roughly what I remember</p>",
        "id": 215726078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604589714
    },
    {
        "content": "<p>So specifically the types would be signed and unsigned integer types (all widths) and float types (all widths) for 128-bit simd initially, but also 64, 256, 512 eventually, and in the far future doubtlessly more. These would need to be supported <em>even if</em> they're not hardware supported, so on some targets a particular op might need a fallback even if most ops for that type don't.</p>",
        "id": 215759771,
        "sender_full_name": "Lokathor",
        "timestamp": 1604603365
    },
    {
        "content": "<p>when i say \"integer\" i include usize/isize but i do not include char or bool.</p>",
        "id": 215759893,
        "sender_full_name": "Lokathor",
        "timestamp": 1604603411
    },
    {
        "content": "<p>and the operations available for floats would be not be the exact same operations as for integers (eg: float has sqrt, integer does not)</p>",
        "id": 215760012,
        "sender_full_name": "Lokathor",
        "timestamp": 1604603469
    },
    {
        "content": "<p>Ok, so what if we wrote our fallback implementations in pure Rust in terms of <code>[T; N]</code>, and then manually monomorphized a bunch of them as <code>compiler_builtins</code> using a naming convention we can easily generate from the inputs, like LLVM’s intrinsics. Kind of <a href=\"https://play.integer32.com/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=2a75bda1e28f70ee08c0ec3612ba2388\">like this</a>.</p>",
        "id": 215928989,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1604719436
    },
    {
        "content": "<p>We could easily use macros to generate <code>simd_add_i32x4</code>-style functions from our single generic <code>simd_add</code></p>",
        "id": 215929050,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1604719524
    },
    {
        "content": "<p>Or we could <a href=\"https://play.integer32.com/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=6925edb0799459177ccafcc4e3814c27\">use some traits</a> to specialize behavior, while still generating the same monomorphized intrinsics</p>",
        "id": 215936735,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1604727697
    },
    {
        "content": "<p>I’ve updated the MCP text to include some more details on how these fallbacks could be written.</p>",
        "id": 215990942,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1604814662
    },
    {
        "content": "<p>I've updated this MCP again. It's now got a conceptual, but working, example of how this could all hang together: <a href=\"https://github.com/rust-lang/compiler-team/issues/381\">https://github.com/rust-lang/compiler-team/issues/381</a></p>\n<p>It would be great to get some more <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span> on it!</p>",
        "id": 216774924,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1605423201
    },
    {
        "content": "<p>I assume the <code>codegen_support</code> and <code>codegen_cranelift</code> modules are what the compiler would do and not included directly in <code>compiler_builtins</code>, right?</p>",
        "id": 216779708,
        "sender_full_name": "bjorn3",
        "timestamp": 1605430037
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> I think so, yeh. The idea being Cranelift only has to come up with an implementation of that <code>codegen_cranelift::simd_fallback</code> that can pack and unpack <code>#[repr(simd)]</code> types as slices so they can be passed to the builtin it names by convention</p>",
        "id": 216781058,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1605431855
    },
    {
        "content": "<p>So I think the difference between this and the API you were originally talking about is instead of being handed some MIR you get handed a function to call</p>",
        "id": 216781103,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1605431905
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span>: Proposal <a href=\"https://github.com/rust-lang/compiler-team/issues/381#issuecomment-811957026\">#381</a> has been seconded, and will be approved in 10 days if no objections are raised.</p>",
        "id": 232768289,
        "sender_full_name": "triagebot",
        "timestamp": 1617288212
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span> Thank you so much.</p>",
        "id": 235534665,
        "sender_full_name": "Jubilee",
        "timestamp": 1619020095
    },
    {
        "content": "<p>This proposal has been accepted: <a href=\"https://github.com/rust-lang/compiler-team/issues/381\">#381</a>.</p>",
        "id": 237694962,
        "sender_full_name": "triagebot",
        "timestamp": 1620321005
    }
]