[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/compiler-team/issues/330\">#330</a>. It will be<br>\n                announced at the next meeting to try and draw attention to it,<br>\n                but usually MCPs are not discussed during triage meetings. If<br>\n                you think this would benefit from discussion amongst the<br>\n                team, consider proposing a design meeting.</p>",
        "id": 202934541,
        "sender_full_name": "triagebot",
        "timestamp": 1593977054
    },
    {
        "content": "<p>That looks like a language MCP in the wrong repo</p>",
        "id": 202934837,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1593977641
    },
    {
        "content": "<p>It seems like two MCPs to me, one of which is a lang feature (support for unsized return values) and the other could be appropriate for T-compiler in principle (implementation side, at least as far as it applies to <em>sized types</em>) but quite under-specified: placement of sized types is claimed to be one of the consequences, but I don't see anything addressing the core implementation issue of how we can \"guarantee\" to avoid large temporaries in MIR/LLVM IR/machine code.</p>",
        "id": 202935340,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1593978440
    },
    {
        "content": "<p>I believe we'd better implement copy elision for sized places before we even experiment unsized return types. Copy elision is minor while the proposed solution for unsized return types seems a major change.</p>",
        "id": 202936853,
        "sender_full_name": "Gary Guo",
        "timestamp": 1593980775
    },
    {
        "content": "<p>I would not call copy elision \"minor\"; properly implementing it (and understanding the scope and limitations) seems like a full compiler MCP all on its own. Which is why I'm honestly a bit disappointed by this MCP, it glosses over that (important) topic.</p>",
        "id": 202937393,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1593981603
    },
    {
        "content": "<p>It is certainly not minor for the compiler implementation but it is waaaay less major than the unsized return part!</p>",
        "id": 202937867,
        "sender_full_name": "Gary Guo",
        "timestamp": 1593982485
    },
    {
        "content": "<p>The <a href=\"https://github.com/PoignardAzur/placement-by-return/blob/placement-by-return/text/0000-placement-by-return.md\">linked RFC PR</a> contains a lot more information on the proposed mechanism, which I suspect is (part of) why the MCP is so light on detail.</p>",
        "id": 202939029,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1593984539
    },
    {
        "content": "<p>I've only skimmed it now (I read it more thoroughly in the past) but I believe: no, the kind of details I would expect from a compiler MCP working towards implementing placement are entirely absent. There is a great deal of detail about the proposed language feature (which ought to be a lang team MCP as noted earlier), but the challenges of generating code that adheres to the \"guaranteed copy elision\" wish list are not even mentioned, let alone addressed.</p>",
        "id": 202941107,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1593988303
    },
    {
        "content": "<p>(no real argument here. Then again, I'm not exactly certain how much detail is expected from the MCP and how much is left to be discussed here; I've mostly stuck to the libs part of things.)</p>",
        "id": 202950251,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1594005317
    }
]