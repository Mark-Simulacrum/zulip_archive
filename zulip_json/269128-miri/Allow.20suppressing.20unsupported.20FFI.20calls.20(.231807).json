[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> hope it's ok to ping you here. With regards to <a href=\"https://github.com/rust-lang/miri/issues/1807\">https://github.com/rust-lang/miri/issues/1807</a> I was taking a stab at implementing panicking instead of raising an error, and unfortunately I think you were right that panicking right before an FFI call may not work:</p>\n<div class=\"codehilite\" data-code-language=\"error\"><pre><span></span><code>   --&gt; C:\\Users\\lander\\.rustup\\toolchains\\miri\\lib\\rustlib\\src\\rust\\library\\core\\src\\panicking.rs:42:6\n    |\n42  |     }\n    |      ^ accessing a dead local variable\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n\n    = note: inside `core::panicking::panic` at C:\\Users\\lander\\.rustup\\toolchains\\miri\\lib\\rustlib\\src\\rust\\library\\core\\src\\panicking.rs:42:6\n</code></pre></div>\n<p>The patch is very straightforward: <a href=\"https://gist.github.com/landaire/d1351ba8cf2f5dd23db0d0c7dc553f77\">https://gist.github.com/landaire/d1351ba8cf2f5dd23db0d0c7dc553f77</a></p>",
        "id": 239668822,
        "sender_full_name": "Lander Brandt",
        "timestamp": 1621549821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"410528\">@Lander Brandt</span> hm, that is not the kind of UB I expected... this seems to be inside the panic runtime?</p>",
        "id": 239863918,
        "sender_full_name": "RalfJ",
        "timestamp": 1621680318
    },
    {
        "content": "<p>I think something else is going wrong.</p>",
        "id": 239863926,
        "sender_full_name": "RalfJ",
        "timestamp": 1621680324
    },
    {
        "content": "<p>the fact that you just pass <code>None</code> for the cleanup block is somewhat suspicious, but I am not sure if that could cause this problem</p>",
        "id": 239864034,
        "sender_full_name": "RalfJ",
        "timestamp": 1621680440
    },
    {
        "content": "<p>ah, the main issue is that you are falling through to returning <code>true</code></p>",
        "id": 239864155,
        "sender_full_name": "RalfJ",
        "timestamp": 1621680568
    },
    {
        "content": "<p>which instructs the caller to please jump to the return block</p>",
        "id": 239864161,
        "sender_full_name": "RalfJ",
        "timestamp": 1621680576
    },
    {
        "content": "<p>which you dont want -- you have to return <code>false</code> in this match arm</p>",
        "id": 239864170,
        "sender_full_name": "RalfJ",
        "timestamp": 1621680587
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/269128-miri/topic/Allow.20suppressing.20unsupported.20FFI.20calls.20.28.231807.29/near/239864170\">said</a>:</p>\n<blockquote>\n<p>which you dont want -- you have to return <code>false</code> in this match arm</p>\n</blockquote>\n<p>Just getting back around to this. Thank you, that works! I did originally pass the stack info to the panic handler but removed it as i thought it may cause weirdness in unwinding or something. This is great.</p>\n<p>The next issue I need to solve is, AFAIK the config is lost in  <code>eval::create_ecx</code> and I believe I would want to add another property to the <code>InterpCx</code> object, but that comes from <code>rustc_middle</code>. Should a change be made there to pass in <code>config.panic_on_unsupported_functionality</code> so that flag is available from <code>EvalContextExt::emulate_foreign_item_by_name</code> (and other related unsupported feature sites), or is there a better solution?</p>",
        "id": 240113665,
        "sender_full_name": "Lander Brandt",
        "timestamp": 1621891251
    },
    {
        "content": "<p>Ah I think this is a viable solution: <a href=\"https://gist.github.com/landaire/f0180e12b0b6c8a167f9f19ebb86e978\">https://gist.github.com/landaire/f0180e12b0b6c8a167f9f19ebb86e978</a></p>",
        "id": 240132102,
        "sender_full_name": "Lander Brandt",
        "timestamp": 1621904655
    },
    {
        "content": "<p>there's a <code>MiriConfig</code> struct that has a field for each Â´-Zmiri` command-line option</p>",
        "id": 240150777,
        "sender_full_name": "RalfJ",
        "timestamp": 1621927310
    },
    {
        "content": "<p>I did add it there but the <code>MiriConfig</code> is not available in the <code>emulate_foreign_item_by_name</code> context. The full diff at this time looks like this: <a href=\"https://gist.github.com/landaire/384730420647dec9a3f016e126945ebf\">https://gist.github.com/landaire/384730420647dec9a3f016e126945ebf</a></p>",
        "id": 240223739,
        "sender_full_name": "Lander Brandt",
        "timestamp": 1621964323
    },
    {
        "content": "<p>yeah, MiriConfig is the initial config used to create the evaluator object, so the field needs to be carried over to that</p>",
        "id": 240306363,
        "sender_full_name": "RalfJ",
        "timestamp": 1622026528
    }
]