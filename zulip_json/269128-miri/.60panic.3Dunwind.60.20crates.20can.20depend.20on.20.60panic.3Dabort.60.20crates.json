[
    {
        "content": "<p>I get <code>the panic=abort crate unwound</code> when I run this:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nv\">sysroot</span><span class=\"o\">=</span><span class=\"k\">$(</span>cargo miri setup --print-sysroot<span class=\"k\">)</span>\n<span class=\"nv\">MIRI_BE_RUSTC</span><span class=\"o\">=</span>target miri --sysroot <span class=\"s2\">\"</span><span class=\"nv\">$sysroot</span><span class=\"s2\">\"</span> --edition<span class=\"o\">=</span><span class=\"m\">2018</span> -Cpanic<span class=\"o\">=</span>abort --crate-type lib --emit<span class=\"o\">=</span>metadata compiled_with_panic_abort.rs\nmiri --sysroot <span class=\"s2\">\"</span><span class=\"nv\">$sysroot</span><span class=\"s2\">\"</span> --edition<span class=\"o\">=</span><span class=\"m\">2018</span> -Cpanic<span class=\"o\">=</span>unwind run_with_panic_unwind.rs --extern <span class=\"nv\">compiled_with_panic_abort</span><span class=\"o\">=</span>libcompiled_with_panic_abort.rmeta\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// compiled_with_panic_abort.rs</span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"Rust\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">miri_start_panic</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">!</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">panic</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">miri_start_panic</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// run_with_panic_unwind.rs</span>\n<span class=\"cp\">#![feature(core_intrinsics)]</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"p\">{</span><span class=\"n\">intrinsics</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">try_fn</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">compiled_with_panic_abort</span>::<span class=\"n\">panic</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">catch_fn</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"the panic=abort crate unwound\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">intrinsics</span>::<span class=\"n\">r</span>#<span class=\"kr\">try</span><span class=\"p\">(</span><span class=\"n\">try_fn</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptr</span>::<span class=\"n\">null_mut</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">catch_fn</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But <code>rustc</code> rejects such combination:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: the crate `compiled_with_panic_abort` is compiled with the panic strategy `abort` which is incompatible with this crate&#39;s strategy of `unwind`\n\nerror: aborting due to previous error\n</code></pre></div>\n<p>And it looks like Miri allows unwinding in a <code>panic=abort</code> crate (if the \"binary\" crate it's running is <code>panic=unwind</code>)... That sounds like something Miri should reject (by rejecting the <code>panic=abort</code> -&gt; <code>panic=unwind</code> combination or unwinding itself).</p>",
        "id": 242695194,
        "sender_full_name": "hyd-dev",
        "timestamp": 1623740876
    },
    {
        "content": "<p>Hm yeah we should inherit that check from rustc</p>",
        "id": 242698592,
        "sender_full_name": "RalfJ",
        "timestamp": 1623743322
    },
    {
        "content": "<p>Not sure why we don't</p>",
        "id": 242698597,
        "sender_full_name": "RalfJ",
        "timestamp": 1623743325
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/269128-miri/topic/.60panic.3Dunwind.60.20crates.20can.20depend.20on.20.60panic.3Dabort.60.20crates/near/242698592\">said</a>:</p>\n<blockquote>\n<p>Hm yeah we should inherit that check from rustc</p>\n</blockquote>\n<p>It looks like the check is in <code>compiler/rustc_metadata/src/dependency_format.rs</code>, so I guess it'll be performed by <code>dependency_formats</code> and Miri will still complain if any exported symbol is called.</p>",
        "id": 242699145,
        "sender_full_name": "hyd-dev",
        "timestamp": 1623743672
    },
    {
        "content": "<p>So I guess <a href=\"https://github.com/rust-lang/miri/issues/1832\">miri#1832</a> will make Miri inherit the check, but only when <code>miri_start_panic</code> is called. The program will still run fine before it hit <code>miri_start_panic</code>.</p>",
        "id": 242700600,
        "sender_full_name": "hyd-dev",
        "timestamp": 1623744638
    },
    {
        "content": "<blockquote>\n<p>The program will still run fine before it hit miri_start_panic.</p>\n</blockquote>\n<p>that sounds reasonable, no?</p>",
        "id": 242709279,
        "sender_full_name": "RalfJ",
        "timestamp": 1623749900
    },
    {
        "content": "<p>Not sure how <a href=\"https://github.com/rust-lang/miri/pull/1832\">https://github.com/rust-lang/miri/pull/1832</a> would affect this though</p>",
        "id": 242709334,
        "sender_full_name": "RalfJ",
        "timestamp": 1623749942
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/269128-miri/topic/.60panic.3Dunwind.60.20crates.20can.20depend.20on.20.60panic.3Dabort.60.20crates/near/242709334\">said</a>:</p>\n<blockquote>\n<p>Not sure how <a href=\"https://github.com/rust-lang/miri/pull/1832\">https://github.com/rust-lang/miri/pull/1832</a> would affect this though</p>\n</blockquote>\n<p>It'll call <code>dependency_formats</code> as part of <code>check_shim</code> to check that no crates define exported symbol <code>miri_start_panic</code>, so I guess it'll trigger the check.<br>\n<span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/269128-miri/topic/.60panic.3Dunwind.60.20crates.20can.20depend.20on.20.60panic.3Dabort.60.20crates/near/242709279\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>The program will still run fine before it hit miri_start_panic.</p>\n</blockquote>\n<p>that sounds reasonable, no?</p>\n</blockquote>\n<p>It's... not consistent with rustc, and it's relying on the fact that Miri relies on <code>extern \"Rust\" fn</code> <code>miri_start_panic</code> to unwind.</p>",
        "id": 242710473,
        "sender_full_name": "hyd-dev",
        "timestamp": 1623750598
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"374396\">hyd-dev</span> <a href=\"#narrow/stream/269128-miri/topic/.60panic.3Dunwind.60.20crates.20can.20depend.20on.20.60panic.3Dabort.60.20crates/near/242700600\">said</a>:</p>\n<blockquote>\n<p>The program will still run fine before it hit <code>miri_start_panic</code>.</p>\n</blockquote>\n<p>I guess it'll also trigger the check if it calls any other foreign item, not just <code>miri_start_panic</code>...</p>",
        "id": 242710942,
        "sender_full_name": "hyd-dev",
        "timestamp": 1623750826
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"374396\">hyd-dev</span> <a href=\"#narrow/stream/269128-miri/topic/.60panic.3Dunwind.60.20crates.20can.20depend.20on.20.60panic.3Dabort.60.20crates/near/242710942\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"374396\">hyd-dev</span> <a href=\"#narrow/stream/269128-miri/topic/.60panic.3Dunwind.60.20crates.20can.20depend.20on.20.60panic.3Dabort.60.20crates/near/242700600\">said</a>:</p>\n<blockquote>\n<p>The program will still run fine before it hit <code>miri_start_panic</code>.</p>\n</blockquote>\n<p>I guess it'll also trigger the check if it calls any other foreign item, not just <code>miri_start_panic</code>...</p>\n</blockquote>\n<p>that's weird^^</p>",
        "id": 242711064,
        "sender_full_name": "RalfJ",
        "timestamp": 1623750865
    },
    {
        "content": "<blockquote>\n<p>It's... not consistent with rustc, </p>\n</blockquote>\n<p>well, Miri only dynamically checks what needs to be true for the current execution; rustc needs to ensure safety statically</p>",
        "id": 242711100,
        "sender_full_name": "RalfJ",
        "timestamp": 1623750888
    },
    {
        "content": "<p>maybe you could add a testcase as a new PR, once that previous one landed? :D</p>",
        "id": 242711112,
        "sender_full_name": "RalfJ",
        "timestamp": 1623750899
    },
    {
        "content": "<p>My guess seems correct, but I found another issue:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>...\n<span class=\"go\">error: the crate `compiled_with_panic_abort` is compiled with the panic strategy `abort` which is incompatible with this crate's strategy of `unwind`</span>\n\n<span class=\"go\">the panic=abort crate unwound</span>\n<span class=\"gp\">$ </span><span class=\"nb\">echo</span> <span class=\"nv\">$?</span>\n<span class=\"go\">0</span>\n</code></pre></div>\n<p>The error is not fatal. Miri continues to run the program, and even exits with <code>0</code>.</p>",
        "id": 242716297,
        "sender_full_name": "hyd-dev",
        "timestamp": 1623754353
    },
    {
        "content": "<p>Maybe it's related to this:<br>\n<a href=\"https://github.com/rust-lang/miri/blob/35af23b6a94459da538ee1479e863c7699620f84/src/bin/miri.rs#L81-L87\">https://github.com/rust-lang/miri/blob/35af23b6a94459da538ee1479e863c7699620f84/src/bin/miri.rs#L81-L87</a></p>",
        "id": 242748243,
        "sender_full_name": "hyd-dev",
        "timestamp": 1623769796
    },
    {
        "content": "<p>I made this change:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>diff</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/src/bin/miri.rs b/src/bin/miri.rs</span>\n<span class=\"gh\">index d593f24c..a72c5427 100644</span>\n<span class=\"gd\">--- a/src/bin/miri.rs</span>\n<span class=\"gi\">+++ b/src/bin/miri.rs</span>\n<span class=\"gu\">@@ -54,6 +54,8 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {</span>\n     ) -&gt; Compilation {\n         compiler.session().abort_if_errors();\n\n<span class=\"gi\">+        let mut return_code = None;</span>\n<span class=\"gi\">+</span>\n         queries.global_ctxt().unwrap().peek_mut().enter(|tcx| {\n             init_late_loggers(tcx);\n             let (entry_def_id, _) = if let Some((entry_def, x)) = tcx.entry_fn(()) {\n<span class=\"gu\">@@ -77,15 +79,15 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {</span>\n                 env::set_current_dir(cwd).unwrap();\n             }\n\n<span class=\"gd\">-            if let Some(return_code) = miri::eval_main(tcx, entry_def_id, config) {</span>\n<span class=\"gd\">-                std::process::exit(</span>\n<span class=\"gd\">-                    i32::try_from(return_code).expect(\"Return value was too large!\"),</span>\n<span class=\"gd\">-                );</span>\n<span class=\"gd\">-            }</span>\n<span class=\"gi\">+            return_code = miri::eval_main(tcx, entry_def_id, config);</span>\n         });\n\n         compiler.session().abort_if_errors();\n\n<span class=\"gi\">+        if let Some(return_code) = return_code {</span>\n<span class=\"gi\">+            std::process::exit(i32::try_from(return_code).expect(\"Return value was too large!\"));</span>\n<span class=\"gi\">+        }</span>\n<span class=\"gi\">+</span>\n         Compilation::Stop\n     }\n }\n</code></pre></div>\n</div></div>\n<p>And now it works like this:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>...\n<span class=\"go\">error: the crate `compiled_with_panic_abort` is compiled with the panic strategy `abort` which is incompatible with this crate's strategy of `unwind`</span>\n\n<span class=\"go\">the panic=abort crate unwound</span>\n<span class=\"go\">error: aborting due to previous error</span>\n\n<span class=\"gp\">$ </span><span class=\"nb\">echo</span> <span class=\"nv\">$?</span>\n<span class=\"go\">1</span>\n</code></pre></div>\n<p>It has the correct exit code, although <code>the panic=abort crate unwound</code> is still printed. I guess I can make Miri abort after the error by calling <code>tcx.sess.abort_if_errors()</code> after calling <code>dependency_formats</code> or calling <code>dependency_formats</code> before <a href=\"https://github.com/rust-lang/miri/blob/35af23b6a94459da538ee1479e863c7699620f84/src/bin/miri.rs#L55\">https://github.com/rust-lang/miri/blob/35af23b6a94459da538ee1479e863c7699620f84/src/bin/miri.rs#L55</a>.</p>",
        "id": 242752201,
        "sender_full_name": "hyd-dev",
        "timestamp": 1623771273
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"374396\">hyd-dev</span> <a href=\"#narrow/stream/269128-miri/topic/.60panic.3Dunwind.60.20crates.20can.20depend.20on.20.60panic.3Dabort.60.20crates/near/242752201\">said</a>:</p>\n<blockquote>\n<p>I guess I can make Miri abort after the error by calling <code>tcx.sess.abort_if_errors()</code> after calling <code>dependency_formats</code> or calling <code>dependency_formats</code> before <a href=\"https://github.com/rust-lang/miri/blob/35af23b6a94459da538ee1479e863c7699620f84/src/bin/miri.rs#L55\">https://github.com/rust-lang/miri/blob/35af23b6a94459da538ee1479e863c7699620f84/src/bin/miri.rs#L55</a>.</p>\n</blockquote>\n<p>Adding <code>tcx.sess.abort_if_errors()</code> works. I don't know how to call <code>dependency_formats</code> before line 55 though, because <code>tcx</code> is only available in the closure (but I guess calling it and <code>abort_if_errors()</code> in that closure before <code>eval_main</code> is also an option).</p>",
        "id": 242754478,
        "sender_full_name": "hyd-dev",
        "timestamp": 1623772150
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/269128-miri/topic/.60panic.3Dunwind.60.20crates.20can.20depend.20on.20.60panic.3Dabort.60.20crates/near/242711112\">said</a>:</p>\n<blockquote>\n<p>maybe you could add a testcase as a new PR, once that previous one landed? :D</p>\n</blockquote>\n<p>This needs to be a multi-crate <code>compile-fail</code> test... Is that possible?</p>",
        "id": 242758999,
        "sender_full_name": "hyd-dev",
        "timestamp": 1623773740
    },
    {
        "content": "<p>hm, maybe with a compile-fail doctest?</p>",
        "id": 242759107,
        "sender_full_name": "RalfJ",
        "timestamp": 1623773768
    },
    {
        "content": "<p>though those must fail to <code>rustc</code> already I think, this is about failure during <code>miri</code></p>",
        "id": 242759153,
        "sender_full_name": "RalfJ",
        "timestamp": 1623773793
    },
    {
        "content": "<p>regarding the stuff above I have to admit I am a bit lost^^ I cant quite figure out how that diff even changes anything (maybe its because it is too hot to think here...). calling <code>abort_if_errors</code> in random places seems fishy.</p>",
        "id": 242759223,
        "sender_full_name": "RalfJ",
        "timestamp": 1623773835
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/269128-miri/topic/.60panic.3Dunwind.60.20crates.20can.20depend.20on.20.60panic.3Dabort.60.20crates/near/242759107\">said</a>:</p>\n<blockquote>\n<p>hm, maybe with a compile-fail doctest?</p>\n</blockquote>\n<p>The two crates need to be compiled with different panic strategies... Not sure if that's possible.</p>",
        "id": 242759403,
        "sender_full_name": "hyd-dev",
        "timestamp": 1623773907
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/269128-miri/topic/.60panic.3Dunwind.60.20crates.20can.20depend.20on.20.60panic.3Dabort.60.20crates/near/242759223\">said</a>:</p>\n<blockquote>\n<p>I cant quite figure out how that diff even changes anything</p>\n</blockquote>\n<p>That diff moves <code>exit()</code> to after <code>abort_if_errors()</code>, so <code>abort_if_errors()</code> is always called, even when <code>return_code</code> is <code>Some</code> (before the diff it will exit without calling <code>abort_if_errors()</code>).</p>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/269128-miri/topic/.60panic.3Dunwind.60.20crates.20can.20depend.20on.20.60panic.3Dabort.60.20crates/near/242759223\">said</a>:</p>\n<blockquote>\n<p>calling <code>abort_if_errors</code> in random places seems fishy.</p>\n</blockquote>\n<p>I actually prefer calling <code>dependency_formats</code> (or what <code>dependency_formats</code> calls, if Miri can call that) and <code>abort_if_errors</code> before <code>eval_main</code> to calling <code>abort_if_errors</code> in <code>lookup_exported_symbol</code>. That will also resolve the <a href=\"#narrow/stream/269128-miri/topic/.60panic.3Dunwind.60.20crates.20can.20depend.20on.20.60panic.3Dabort.60.20crates/near/242711064\">weirdness</a>.</p>\n<p>Maybe not adding any special handling is also acceptable, as long as Miri exits with the correct code, but I feel a bit strange that Miri is still interpreting the program after reporting the error (the program might  behave strangely or encounter UB due to unexpected unwinding with <code>panic=abort</code>). OTOH I think linking a <code>panic=abort</code> crate to a <code>panic=unwind</code> crate is rare (it might not even be possible when using Cargo), so it may not worth adding this.</p>",
        "id": 242761432,
        "sender_full_name": "hyd-dev",
        "timestamp": 1623774817
    },
    {
        "content": "<blockquote>\n<p>That diff moves exit() to after abort_if_errors(), so abort_if_errors() is always called, even when return_code is Some (before the diff it will exit without calling abort_if_errors()).</p>\n</blockquote>\n<p>Oh I see. So the program succeeds to evaluate and then after the fact we return code 1 because <code>abort_if_errors</code>? that's a strange way to do this...</p>",
        "id": 242894827,
        "sender_full_name": "RalfJ",
        "timestamp": 1623856253
    },
    {
        "content": "<blockquote>\n<p>I feel a bit strange that Miri is still interpreting the program after reporting the error</p>\n</blockquote>\n<p>indeed. so maybe <code>abort_if_errors</code> after every program step is not quite as weird as I thought it'd be.</p>",
        "id": 242894939,
        "sender_full_name": "RalfJ",
        "timestamp": 1623856304
    }
]