[
    {
        "content": "<p>Dear <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> and <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>\n<p>It would appear that the Miri cron job build failed. Would you mind investigating this issue?</p>\n<p>Thanks in advance!<br>\nSincerely,<br>\nThe Miri Cronjobs Bot</p>",
        "id": 231592082,
        "sender_full_name": "miri cronjobs",
        "timestamp": 1616570066
    },
    {
        "content": "<p>Oh fun, this is an ICE with <code>-Z mir-opt-level=4</code></p>",
        "id": 231620664,
        "sender_full_name": "RalfJ",
        "timestamp": 1616586675
    },
    {
        "content": "<blockquote>\n<p>error: internal compiler error: /usr/share/rust/.rustup/toolchains/master/lib/rustlib/src/rust/compiler/rustc_mir/src/interpret/eval_context.rs:188:17: The type checker should prevent reading from a never-written local</p>\n</blockquote>",
        "id": 231620807,
        "sender_full_name": "RalfJ",
        "timestamp": 1616586755
    },
    {
        "content": "<p>must be some new MIR optimization? Cc <span class=\"user-group-mention\" data-user-group-id=\"1162\">@WG-mir-opt</span></p>",
        "id": 231620836,
        "sender_full_name": "RalfJ",
        "timestamp": 1616586775
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_inner</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">_inner</span>: <span class=\"nc\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">uninitialized</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>now has MIR</p>\n<div class=\"codehilite\"><pre><span></span><code>    bb0: {\n        _4 = assert_uninit_valid::&lt;i32&gt;() -&gt; bb1; // scope 5 at tests/run-pass/move-uninit-primval.rs:10:21: 10:46\n                                         // mir::Constant\n                                         // + span: tests/run-pass/move-uninit-primval.rs:10:21: 10:46\n                                         // + literal: Const { ty: unsafe extern &quot;rust-intrinsic&quot; fn() {std::intrinsics::assert_uninit_valid::&lt;i32&gt;}, val: Value(Scalar(&lt;ZST&gt;)) }\n    }\n\n    bb1: {\n        _6 = assert_inhabited::&lt;i32&gt;() -&gt; bb2; // scope 8 at tests/run-pass/move-uninit-primval.rs:10:21: 10:46\n                                         // mir::Constant\n                                         // + span: tests/run-pass/move-uninit-primval.rs:10:21: 10:46\n                                         // + literal: Const { ty: unsafe extern &quot;rust-intrinsic&quot; fn() {std::intrinsics::assert_inhabited::&lt;i32&gt;}, val: Value(Scalar(&lt;ZST&gt;)) }\n    }\n\n    bb2: {\n        _7 = move (_5.1: std::mem::ManuallyDrop&lt;i32&gt;); // scope 8 at tests/run-pass/move-uninit-primval.rs:10:21: 10:46\n        _2 = move (_7.0: i32);           // scope 9 at tests/run-pass/move-uninit-primval.rs:10:21: 10:46\n        (_1.0: i32) = move _2;           // scope 1 at tests/run-pass/move-uninit-primval.rs:9:19: 11:10\n        _3 = move _1;                    // scope 2 at tests/run-pass/move-uninit-primval.rs:12:20: 12:23\n        return;                          // scope 0 at tests/run-pass/move-uninit-primval.rs:14:2: 14:2\n    }\n</code></pre></div>",
        "id": 231620979,
        "sender_full_name": "RalfJ",
        "timestamp": 1616586858
    },
    {
        "content": "<p>indeed <code>_5</code> is never written to before it is read</p>",
        "id": 231620992,
        "sender_full_name": "RalfJ",
        "timestamp": 1616586865
    },
    {
        "content": "<p>might be related to <a href=\"https://github.com/rust-lang/rust/issues/83177\">#83177</a>?</p>",
        "id": 231621100,
        "sender_full_name": "RalfJ",
        "timestamp": 1616586940
    },
    {
        "content": "<p>Cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> (does <code>@tmiasko</code> have zulip?)</p>",
        "id": 231621185,
        "sender_full_name": "RalfJ",
        "timestamp": 1616586980
    },
    {
        "content": "<p>it does not really fit though, these are not ZST in the testcase</p>",
        "id": 231622803,
        "sender_full_name": "RalfJ",
        "timestamp": 1616587947
    },
    {
        "content": "<p>mir-opt-level=2 is fine, =3 has the same problem</p>",
        "id": 231623020,
        "sender_full_name": "RalfJ",
        "timestamp": 1616588087
    },
    {
        "content": "<p>might be related to inlining <code>mem::uninitialized</code>, but why'd that change now?</p>",
        "id": 231623031,
        "sender_full_name": "RalfJ",
        "timestamp": 1616588101
    },
    {
        "content": "<p>oh... yeah it's about the ZSTs. <code>mem::uninitialized</code> calls <code>MaybeUninit::uninit().assume_init()</code>, and <code>MaybeUninit::uninit()</code> is</p>\n<div class=\"codehilite\"><pre><span></span><code>    pub const fn uninit() -&gt; MaybeUninit&lt;T&gt; {\n        MaybeUninit { uninit: () }\n    }\n</code></pre></div>",
        "id": 231623219,
        "sender_full_name": "RalfJ",
        "timestamp": 1616588213
    },
    {
        "content": "<p>when that write disappears, we have a local without backing store being read from</p>",
        "id": 231623251,
        "sender_full_name": "RalfJ",
        "timestamp": 1616588240
    },
    {
        "content": "<p>the backing store of locals is allocated lazily on first write to support unsized locals. it's a hack, but I don't see another way to support unsized locals. it'd be an even bigger hack to do lazy allocation <em>only</em> for unsized locals.</p>",
        "id": 231623303,
        "sender_full_name": "RalfJ",
        "timestamp": 1616588275
    },
    {
        "content": "<p>\"lazy allocation only for unsized locals\" - isn't this exactly what unsized locals are about?</p>",
        "id": 231637658,
        "sender_full_name": "tm",
        "timestamp": 1616594285
    },
    {
        "content": "<p>Destination propagation ignores unions to avoid the issue in MIRI.</p>",
        "id": 231639296,
        "sender_full_name": "tm",
        "timestamp": 1616594768
    },
    {
        "content": "<p>it's easy enough to avoid removing assignments to union fields, but I'm not sure if that's sufficient</p>\n<p>e.g. this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">union</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span>: <span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">y</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// EMIT_MIR remove_zsts_dont_touch_unions.get_union.RemoveZsts.after.mir</span>\n<span class=\"k\">fn</span> <span class=\"nf\">get_union</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>then becomes</p>\n<div class=\"codehilite\"><pre><span></span><code>fn get_union() -&gt; Foo {\n    let mut _0: Foo;                     // return place in scope 0 at $DIR/remove_zsts_dont_touch_unions.rs:12:19: 12:22\n    let mut _1: ();                      // in scope 0 at $DIR/remove_zsts_dont_touch_unions.rs:13:14: 13:16\n\n    bb0: {\n        StorageLive(_1);                 // scope 0 at $DIR/remove_zsts_dont_touch_unions.rs:13:14: 13:16\n        (_0.0: ()) = move _1;            // scope 0 at $DIR/remove_zsts_dont_touch_unions.rs:13:5: 13:18\n        StorageDead(_1);                 // scope 0 at $DIR/remove_zsts_dont_touch_unions.rs:13:17: 13:18\n        return;                          // scope 0 at $DIR/remove_zsts_dont_touch_unions.rs:14:2: 14:2\n    }\n}\n</code></pre></div>\n<p>and now, instead of the union field, <code>_1</code> is read and never written</p>\n<p>we could of course preserve all assignments that flow into union fields, but that would probably be too expensive</p>",
        "id": 231657910,
        "sender_full_name": "erikdesjardins",
        "timestamp": 1616600997
    },
    {
        "content": "<p>Accessing <code>_1</code> would work, because ZST locals are excluded from the check, and with <code>_0.0: ()) = move _1;</code> in place, accessing the return place would be fine as well.</p>",
        "id": 231660612,
        "sender_full_name": "tm",
        "timestamp": 1616601908
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/83445\">https://github.com/rust-lang/rust/pull/83445</a></p>",
        "id": 231670483,
        "sender_full_name": "erikdesjardins",
        "timestamp": 1616605321
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"352985\">@tm</span>  are you <code>@tmiasko</code> on GitHub? There's also a <code>@TM</code> here on Zulip... all very confusing.^^</p>",
        "id": 231681286,
        "sender_full_name": "RalfJ",
        "timestamp": 1616608997
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"352985\">tm</span> <a href=\"#narrow/stream/269128-miri/topic/Cron.20Job.20Failure.202021-03-24/near/231660612\">said</a>:</p>\n<blockquote>\n<p>Accessing <code>_1</code> would work, because ZST locals are excluded from the check, and with <code>_0.0: ()) = move _1;</code> in place, accessing the return place would be fine as well.</p>\n</blockquote>\n<p>indeed, ZST accesses \"don't actually happen\" in Miri</p>",
        "id": 231681526,
        "sender_full_name": "RalfJ",
        "timestamp": 1616609068
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"352985\">tm</span> <a href=\"#narrow/stream/269128-miri/topic/Cron.20Job.20Failure.202021-03-24/near/231639296\">said</a>:</p>\n<blockquote>\n<p>Destination propagation ignores unions to avoid the issue in MIRI.</p>\n</blockquote>\n<p>hm, I guess that works but it sounds like more of a work-around than a solution? We should decide if this is \"good MIR\" that Miri should support, or if there truly is something about this MIR that we consider invalid.</p>",
        "id": 231681641,
        "sender_full_name": "RalfJ",
        "timestamp": 1616609113
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"352985\">tm</span> <a href=\"#narrow/stream/269128-miri/topic/Cron.20Job.20Failure.202021-03-24/near/231637658\">said</a>:</p>\n<blockquote>\n<p>\"lazy allocation only for unsized locals\" - isn't this exactly what unsized locals are about?</p>\n</blockquote>\n<p>is it? I'd be much more happy if the size was somehow set at <code>StorageLive</code> time, IMO that would make a lot more sense.</p>",
        "id": 231681922,
        "sender_full_name": "RalfJ",
        "timestamp": 1616609229
    },
    {
        "content": "<p>if we did lazy alloc <em>only</em> for unsized locals, couldnt an optimization such as this still cause trouble, but only when used on unsized types?</p>",
        "id": 231681961,
        "sender_full_name": "RalfJ",
        "timestamp": 1616609250
    },
    {
        "content": "<p>I guess unsized unions arent a thing currently, but who knows if they might be in the future^^</p>",
        "id": 231681994,
        "sender_full_name": "RalfJ",
        "timestamp": 1616609265
    }
]