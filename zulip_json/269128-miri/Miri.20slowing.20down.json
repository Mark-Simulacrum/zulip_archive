[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> As part of the playground's CI, I make sure that Miri is hooked up by running this code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[];</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">get_unchecked_mut</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The test allows 5 seconds from clicking the Miri menu item until the response comes back (this includes network time, Docker spin up time, etc). That test has failed fairly reproducibly today (I haven't run these tests in a month or so). Just a heads up that there might be some recent slowdowns to look into.</p>",
        "id": 226755297,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613613111
    },
    {
        "content": "<p>And now Miri fell out of toolstate, so it might be a day or so before the playground gets updated <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 226756860,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613614774
    },
    {
        "content": "<p>Hm, not much changed on the Miri side so this could only be caused by rustc changes. But I'm afraid I won't have time to look into this for the coming weeks.<br>\nCc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> in case you have any idea what might be causing this. Of course it could also just be CI variance; in my experience CI services are basically useless to evaluate performance.</p>",
        "id": 226784362,
        "sender_full_name": "RalfJ",
        "timestamp": 1613640708
    },
    {
        "content": "<p>(btw, we have <a class=\"stream\" data-stream-id=\"269128\" href=\"/#narrow/stream/269128-miri\">#miri</a> nowaways :D )</p>",
        "id": 226784462,
        "sender_full_name": "RalfJ",
        "timestamp": 1613640742
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> would you mind moving this to <a class=\"stream\" data-stream-id=\"269128\" href=\"/#narrow/stream/269128-miri\">#miri</a> when you have a chance?</p>",
        "id": 226814463,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613657286
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"122651\" href=\"/#narrow/stream/122651-general/topic/Miri.20slowing.20down\">#general &gt; Miri slowing down</a> by <span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span></p>",
        "id": 226814612,
        "sender_full_name": "Notification Bot",
        "timestamp": 1613657358
    },
    {
        "content": "<blockquote>\n<p>Of course it could also just be CI variance; in my experience CI services are basically useless to evaluate performance.</p>\n</blockquote>\n<p>This also reproduced in the same way on my local machine. It’s still a ”big” test in that it’s more than Miri by itself, but I think it’s ok to say it’s not just noisy neighbors.</p>",
        "id": 226814968,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613657520
    },
    {
        "content": "<p>Tangentially, I’m trying out <a href=\"https://github.com/bheisler/iai\">https://github.com/bheisler/iai</a> to get CI-stable benchmarking. It runs cachegrind and captures the number of instructions executed.</p>",
        "id": 226815224,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613657625
    },
    {
        "content": "<p>(Not for the playground, a different project)</p>",
        "id": 226815429,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613657713
    },
    {
        "content": "<p>(the perf stats we are tracking can be seen in the commit messages <a href=\"https://github.com/shepmaster/sxd-pull-parser/commit/c17bea010f7d3d56dfedb3968b17ccd9a179c0be\">https://github.com/shepmaster/sxd-pull-parser/commit/c17bea010f7d3d56dfedb3968b17ccd9a179c0be</a>)</p>",
        "id": 226815938,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613657941
    },
    {
        "content": "<p>I guess a first step for finding out when this was really caused would be to bisect the nightly/CI miri versions over the last month</p>",
        "id": 226849918,
        "sender_full_name": "oli",
        "timestamp": 1613670254
    },
    {
        "content": "<p>If you want some help with that, I recommend opening an issue on the rustc repo about regressed miri perf and we can ask someone in the bisect team to have a look</p>",
        "id": 226850006,
        "sender_full_name": "oli",
        "timestamp": 1613670294
    },
    {
        "content": "<p>if it was a rustc change while miri was successfully compiling, we'll get the PR that is at fault, if miri didn't work, we at least get a PR range</p>",
        "id": 226850101,
        "sender_full_name": "oli",
        "timestamp": 1613670337
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>% hyperfine -i &#39;cargo +nightly-2020-11-24-x86_64-apple-darwin miri run&#39;\nBenchmark #1: cargo +nightly-2020-11-24-x86_64-apple-darwin miri run\n  Time (mean ± σ):     578.2 ms ±  25.3 ms    [User: 381.9 ms, System: 169.3 ms]\n  Range (min … max):   546.4 ms … 640.7 ms    10 runs\n\n% hyperfine -i -w3 &#39;cargo +nightly miri run&#39;\nBenchmark #1: cargo +nightly miri run\n  Time (mean ± σ):     634.2 ms ±  17.9 ms    [User: 418.9 ms, System: 183.4 ms]\n  Range (min … max):   616.3 ms … 680.1 ms    10 runs\n\n% cargo +nightly --version\ncargo 1.51.0-nightly (ab64d1393 2021-02-10)\n</code></pre></div>",
        "id": 226907623,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613696766
    },
    {
        "content": "<p>at least based on what I have lying around.</p>",
        "id": 226907634,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613696778
    },
    {
        "content": "<p>so that's a 10% slowdown. that would mean your test was close to its 5s limit before already and now something pushed it over the limit?</p>",
        "id": 226997298,
        "sender_full_name": "RalfJ",
        "timestamp": 1613755321
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> <code>2020-11-24</code> is an interesting one because that's just before the data race detector landed. but I cannot reproduce this, I went back to ce031b4e and that version actually is <em>slower</em> than the latest by &gt;5%. What does <code>cargo +nightly-2020-11-24-x86_64-apple-darwin miri --version</code> say?</p>",
        "id": 227084777,
        "sender_full_name": "RalfJ",
        "timestamp": 1613819598
    },
    {
        "content": "<p>okay that slowdown doesnt hold up with even olde version; probably only affecting some rsutc versions</p>",
        "id": 227085036,
        "sender_full_name": "RalfJ",
        "timestamp": 1613819944
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ cargo miri --version &amp;&amp; hyperfine -i -w2 &#39;cargo +miri miri run&#39;\nmiri 0.1.0 (277b59c0 2021-02-18)\nBenchmark #1: cargo +miri miri run\n  Time (mean ± σ):     257.3 ms ±   5.0 ms    [User: 171.5 ms, System: 87.9 ms]\n  Range (min … max):   250.9 ms … 265.4 ms    11 runs\n\n  Warning: Ignoring non-zero exit code.\n\n$ cargo miri --version &amp;&amp; rm target/ -rf &amp;&amp; hyperfine -i -w2 &#39;cargo +miri miri run&#39;\nmiri 0.1.0 (a09f8b0c 2020-12-31)\nBenchmark #1: cargo +miri miri run\n  Time (mean ± σ):     257.9 ms ±   3.8 ms    [User: 168.9 ms, System: 91.1 ms]\n  Range (min … max):   253.2 ms … 267.7 ms    11 runs\n\n  Warning: Ignoring non-zero exit code.\n\n$ cargo miri --version &amp;&amp; rm target/ -rf &amp;&amp; hyperfine -i -w2 &#39;cargo +miri miri run&#39;\nmiri 0.1.0 (ce031b4e 2020-11-22)\nBenchmark #1: cargo +miri miri run\n  Time (mean ± σ):     275.5 ms ±   2.1 ms    [User: 182.2 ms, System: 95.4 ms]\n  Range (min … max):   271.6 ms … 278.5 ms    10 runs\n\n  Warning: Ignoring non-zero exit code.\n\n$ cargo miri --version &amp;&amp; rm target/ -rf &amp;&amp; hyperfine -i -w2 &#39;cargo +miri miri run&#39;\nmiri 0.1.0 (66a58d43 2020-11-07)\nBenchmark #1: cargo +miri miri run\n  Time (mean ± σ):     253.6 ms ±   2.3 ms    [User: 165.6 ms, System: 90.5 ms]\n  Range (min … max):   251.3 ms … 258.6 ms    11 runs\n\n  Warning: Ignoring non-zero exit code.\n</code></pre></div>",
        "id": 227085052,
        "sender_full_name": "RalfJ",
        "timestamp": 1613819965
    },
    {
        "content": "<p>hm, looks like <em>on the apple target</em>, I do see a slowdown (of 5% though, not 10%):</p>\n<div class=\"codehilite\"><pre><span></span><code>$ cargo miri --version &amp;&amp; rm target/ -rf &amp;&amp; hyperfine -i -w2 &#39;cargo +miri miri run --target x86_64-apple-darwin&#39;\nmiri 0.1.0 (a09f8b0c 2020-12-31)\nBenchmark #1: cargo +miri miri run --target x86_64-apple-darwin\n  Time (mean ± σ):     258.5 ms ±   3.7 ms    [User: 174.9 ms, System: 85.7 ms]\n  Range (min … max):   254.0 ms … 267.8 ms    11 runs\n\n$ cargo miri --version &amp;&amp; rm target/ -rf &amp;&amp; hyperfine -i -w2 &#39;cargo +miri miri run --target x86_64-apple-darwin&#39;\nmiri 0.1.0 (277b59c0 2021-02-18)\nBenchmark #1: cargo +miri miri run --target x86_64-apple-darwin\n  Time (mean ± σ):     272.0 ms ±   4.6 ms    [User: 187.2 ms, System: 87.2 ms]\n  Range (min … max):   267.3 ms … 280.8 ms    10 runs\n</code></pre></div>",
        "id": 227086666,
        "sender_full_name": "RalfJ",
        "timestamp": 1613821980
    },
    {
        "content": "<p>bisecting that leads to</p>\n<div class=\"codehilite\"><pre><span></span><code>853254f467e26ee1d5d46b7079c96c4f53f072a1 is the first bad commit\ncommit 853254f467e26ee1d5d46b7079c96c4f53f072a1\nMerge: c26fa832 28577924\nAuthor: bors &lt;bors@rust-lang.org&gt;\nDate:   Sun Jan 24 15:50:51 2021 +0000\n\n    Auto merge of #1675 - hyd-dev:proc-macro-unit-test, r=RalfJung\n\n     [cargo-miri] Skip unit tests of `proc-macro` crates\n\n    Fixes #1660.\n</code></pre></div>",
        "id": 227090834,
        "sender_full_name": "RalfJ",
        "timestamp": 1613826679
    },
    {
        "content": "<p>that's <a href=\"https://github.com/rust-lang/miri/pull/1675\">https://github.com/rust-lang/miri/pull/1675</a></p>",
        "id": 227090855,
        "sender_full_name": "RalfJ",
        "timestamp": 1613826696
    },
    {
        "content": "<p>looks like this made the JSON a bit more complicated</p>",
        "id": 227090934,
        "sender_full_name": "RalfJ",
        "timestamp": 1613826756
    },
    {
        "content": "<p>but that's a one-time overhead in the cargo-miri wrapper, so for anything but trivial programs it should be insignificant</p>",
        "id": 227090943,
        "sender_full_name": "RalfJ",
        "timestamp": 1613826778
    },
    {
        "content": "<p>I have no idea why I can only measure this with the macos target though...</p>",
        "id": 227090955,
        "sender_full_name": "RalfJ",
        "timestamp": 1613826788
    },
    {
        "content": "<p>I've also noticed that Miri can be quite slow</p>\n<p>I had a unit test that tested initialize the <code>MyabeUninit</code> half of a dynamic allocation and I had to drop the size of the allocation from 2048 elements to 256 just to get the test to finish in a reasonable timeframe (it was taking minutes).</p>",
        "id": 231363262,
        "sender_full_name": "Christian Mazakas",
        "timestamp": 1616438676
    },
    {
        "content": "<p>did you try turning up the opt-level on the test profile? might help.</p>",
        "id": 231376088,
        "sender_full_name": "Lokathor",
        "timestamp": 1616443465
    },
    {
        "content": "<p>Ooh, no I didn't. Alright, I'll try that right now</p>",
        "id": 231377095,
        "sender_full_name": "Christian Mazakas",
        "timestamp": 1616443958
    },
    {
        "content": "<p>the danger is that optimizing out some parts of the code can also make the lines that are UB get optimized out, so you end up with UB in debug builds but not release builds.</p>",
        "id": 231377220,
        "sender_full_name": "Lokathor",
        "timestamp": 1616444016
    },
    {
        "content": "<p>yeah, optimizations can easily hide UB (and we are getting more and more MIR optimizations these days so that risk keeps increasing)</p>",
        "id": 231440443,
        "sender_full_name": "RalfJ",
        "timestamp": 1616490800
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399737\">@Christian Mazakas</span> for memory-related slowness, <code>-Zmiri-disable-stacked-borrows</code> can do wonders. of course that will also mean aliasing violations are not yet detected, but finding all sorts of other UB can still be useful.</p>",
        "id": 231440506,
        "sender_full_name": "RalfJ",
        "timestamp": 1616490843
    },
    {
        "content": "<p>Heh, in that <em>that</em> case I think it's far more useful to just reduce the size of the test data. I'd much rather keep all the stack borrow checking than iterate over more elements arbitrarily</p>",
        "id": 231482553,
        "sender_full_name": "Christian Mazakas",
        "timestamp": 1616510981
    }
]