[
    {
        "content": "<p>This test runs fine with <code>cargo miri test</code> on a target with <code>panic = \"unwind\"</code> support:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"cp\">#[should_panic]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">panic!</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>However, on a <code>panic = \"abort\"</code> target, such as <a href=\"https://github.com/rust-lang/rust/blob/bbf07c0b4f210ced7bd2785ab554e0d805644235/compiler/rustc_target/src/spec/thumbv7a_pc_windows_msvc.rs#L22\"><code>thumbv7a-pc-windows-msvc</code></a>:</p>\n<div class=\"codehilite\"><pre><span></span><code>running 1 test\nerror: abnormal termination: the program aborted execution\n...\n   |\n79 |                 core::intrinsics::abort();\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ the program aborted execution\n   |\n...\nnote: inside `foo` at ...\n  --&gt; src/lib.rs:4:5\n   |\n4  |     panic!();\n   |\n</code></pre></div>\n<p>That makes sense as on that target, <code>panic!()</code> == <code>core::intrinsics::abort()</code>. Maybe it also has this issue when running without Miri, but that's not going to be a problem since libtest is getting (unstable) <code>panic = \"abort\"</code> support. Unfortunately, that solution does not work with Miri:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ MIRIFLAGS=&#39;-Zpanic-abort-tests&#39; cargo miri test --target thumbv7a-pc-windows-msvc\n...\nrunning 1 test\nerror: unsupported operation: can&#39;t call foreign function: CreateFileW\n   --&gt; ...\n    |\n285 | /             c::CreateFileW(\n286 | |                 path.as_ptr(),\n287 | |                 opts.get_access_mode()?,\n288 | |                 opts.share_mode,\n...   |\n292 | |                 ptr::null_mut(),\n293 | |             )\n    | |_____________^ can&#39;t call foreign function: CreateFileW\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n\n    = note: inside `std::sys::windows::fs::File::open` at ...\n    = note: inside `std::sys::windows::process::Stdio::to_handle` at ...\n    = note: inside `std::sys::windows::process::Command::spawn` at ...\n    = note: inside `std::process::Command::output` at ...\n    = ...\n    = note: inside `test::spawn_test_subprocess` at ...\n</code></pre></div>\n<p>Looks like libtest is trying to spawn a process (probably the test \"executable\" itself) and capture its output, which is absolutely not supported in Miri. <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span><br>\nI can workaround this using <code>-- --exclude-should-panic -Zunstable-options</code> or <code>#![feature(cfg_panic)] #[cfg_attr(panic = \"abort\", ignore)]</code>, but what's the best way to resolve this conflict? Is there a proper solution/plan to resolve this in libtest or Miri?</p>",
        "id": 231215585,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616332230
    },
    {
        "content": "<p>I don't think there is anything that can be done apart from <code>--exclude-should-panic</code>. With <code>-Cpanic=abort</code> any panic by definition aborts the process. This means that <code>#[should_panic]</code> tests need to spawn a new process to run in.</p>",
        "id": 231216369,
        "sender_full_name": "bjorn3",
        "timestamp": 1616333208
    },
    {
        "content": "<p>If so, the best solution I can think of is to make that the default in libtest when <code>cfg(all(miri, panic = \"abort\"))</code>. <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 231216835,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616333766
    },
    {
        "content": "<p>Oh, I didnt know libtest is getting <code>panic=abort</code> support, interesting</p>",
        "id": 231294348,
        "sender_full_name": "RalfJ",
        "timestamp": 1616412326
    },
    {
        "content": "<p>the process spawn approach clearly cannot work in Miri</p>",
        "id": 231294357,
        "sender_full_name": "RalfJ",
        "timestamp": 1616412334
    },
    {
        "content": "<p>in principle, Miri could support unwinding even on targets that dont natively support it, so you could still use <code>-Cpanic=unwind</code>. I have no idea about the kind of gluing and infrastructure hacks that would require though.</p>",
        "id": 231294434,
        "sender_full_name": "RalfJ",
        "timestamp": 1616412370
    },
    {
        "content": "<p>If all you care about is catching a panic and not running any cleanup code, it should be a matter of calling <code>miri_start_panic</code> from <code>__rust_start_panic</code> in panic_abort and implementing <code>__rust_panic_cleanup</code> to not panic itself with <code>unreachable!()</code>.</p>",
        "id": 231296262,
        "sender_full_name": "bjorn3",
        "timestamp": 1616413498
    },
    {
        "content": "<p>If you also want to run cleanup code, you will have to patch rustc to emit it even with <code>-Cpanic=abort</code>, at which point it is easier to change the target definition to allow <code>-Cpanic=unwind</code>.</p>",
        "id": 231296374,
        "sender_full_name": "bjorn3",
        "timestamp": 1616413564
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/269128-miri/topic/.60.23.5Bshould_panic.5D.60.20tests.20on.20.60panic.20.3D.20.22abort.22.60.20targets/near/231296262\">said</a>:</p>\n<blockquote>\n<p>If all you care about is catching a panic and not running any cleanup code, it should be a matter of calling <code>miri_start_panic</code> from <code>__rust_start_panic</code> in panic_abort and implementing <code>__rust_panic_cleanup</code> to not panic itself with <code>unreachable!()</code>.</p>\n</blockquote>\n<p>except that <code>miri_start_panic</code> will throw an error with <code>-Cpanic=abort</code>. I just recently added that because I felt like panicking despite <code>panic=abort</code> would be UB (and indeed with all the <code>nounwind</code> everywhere it is).</p>",
        "id": 231440281,
        "sender_full_name": "RalfJ",
        "timestamp": 1616490714
    },
    {
        "content": "<p>but we could probably have a flag to control this, if there is demand</p>",
        "id": 231440384,
        "sender_full_name": "RalfJ",
        "timestamp": 1616490751
    }
]