[
    {
        "content": "<p>Hello!<br>\nI am using miri in my projects to try to detect as much errors as possible.<br>\nAnd in a recent work of my I triggered:</p>\n<div class=\"codehilite\"><pre><span></span><code>test tests::test_into_iter ... error: Undefined Behavior: trying to reborrow for SharedReadOnly at alloc100514+0x98, but parent tag &lt;251902&gt; does not have an appropriate item in the borrow stack\n    --&gt; /home/adema/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/cmp.rs:1396:27\n     |\n1396 |             PartialEq::eq(*self, *other)\n     |                           ^^^^^ trying to reborrow for SharedReadOnly at alloc100514+0x98, but parent tag &lt;251902&gt; does not have an appropriate item in the borrow stack\n     |\n     = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n     = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n</code></pre></div>",
        "id": 226204709,
        "sender_full_name": "marmeladema",
        "timestamp": 1613168777
    },
    {
        "content": "<p>Even though miri points to somewhere in libcore, the specific failing test was passing before my last commit so surely the problem is on my side but how would I do to debug this?<br>\nI don't even really understand the error message:</p>\n<div class=\"codehilite\"><pre><span></span><code> Undefined Behavior: trying to reborrow for SharedReadOnly at alloc100514+0x98, but parent tag &lt;251902&gt; does not have an appropriate item in the borrow stack\n</code></pre></div>",
        "id": 226204832,
        "sender_full_name": "marmeladema",
        "timestamp": 1613168856
    },
    {
        "content": "<p>uh, so you're dereferencing a &amp;T, i take it?</p>",
        "id": 226209709,
        "sender_full_name": "Lokathor",
        "timestamp": 1613171899
    },
    {
        "content": "<p>Maybe the &amp;T is from a pointer that was itself invalidated so the reference is invalidated?</p>",
        "id": 226209769,
        "sender_full_name": "Lokathor",
        "timestamp": 1613171937
    },
    {
        "content": "<p>it's hard to tell with just that one single line of code shown</p>",
        "id": 226209794,
        "sender_full_name": "Lokathor",
        "timestamp": 1613171951
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281572\">marmeladema</span> <a href=\"#narrow/stream/269128-miri/topic/Howto.20debug.20miri.20reported.20error/near/226204832\">said</a>:</p>\n<blockquote>\n<p>Even though miri points to somewhere in libcore, the specific failing test was passing before my last commit so surely the problem is on my side but how would I do to debug this?<br>\nI don't even really understand the error message:</p>\n<p><div class=\"codehilite\"><pre><span></span><code> Undefined Behavior: trying to reborrow for SharedReadOnly at alloc100514+0x98, but parent tag &lt;251902&gt; does not have an appropriate item in the borrow stack\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>So, I don't fully understand all the theory behind stacked borrows, but IIUC it works by creating a stack for borrows of an instance. There are rules for adding and popping items from the stack, and if those rules are violated, you get an error (like the one you linked).</p>\n<p>I think the relevant part of the docs is here: <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md#accessing-memory\">https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md#accessing-memory</a></p>\n<p>The original paper is also really good: <a href=\"https://plv.mpi-sws.org/rustbelt/stacked-borrows/paper.pdf\">https://plv.mpi-sws.org/rustbelt/stacked-borrows/paper.pdf</a></p>",
        "id": 226209966,
        "sender_full_name": "nyms",
        "timestamp": 1613172055
    },
    {
        "content": "<p>The code in question can be found at <a href=\"https://github.com/marmeladema/clru-rs/pull/31\">https://github.com/marmeladema/clru-rs/pull/31</a><br>\nThe problem happens in the <code>test_into_iter</code> test after using the mutable iterator that is defined at <a href=\"https://github.com/marmeladema/clru-rs/blob/split-capacity-preallocate/src/lib.rs#L345-L367\">https://github.com/marmeladema/clru-rs/blob/split-capacity-preallocate/src/lib.rs#L345-L367</a></p>",
        "id": 226214172,
        "sender_full_name": "marmeladema",
        "timestamp": 1613175288
    },
    {
        "content": "<p>that part is really the only place with unsafe code and I had trouble with miri before with it but I thought I solved it. Apparently not since the new code now fails. Maybe its a new bug introduced by the new code but it's seems unrelated to me. I could be wrong of course. It's just a gut feeling</p>",
        "id": 226214297,
        "sender_full_name": "marmeladema",
        "timestamp": 1613175370
    },
    {
        "content": "<p>What I am trying to do an iterator over mutable reference to element of a slice</p>",
        "id": 226218440,
        "sender_full_name": "marmeladema",
        "timestamp": 1613179788
    },
    {
        "content": "<p>There are a bunch of helper <code>-Z</code> flags that you can use: <a href=\"https://github.com/rust-lang/miri#miri--z-flags-and-environment-variables\">https://github.com/rust-lang/miri#miri--z-flags-and-environment-variables</a> </p>\n<p>You can plug the tag into <code>-Zmiri-track-pointer-tag=&lt;tag&gt;</code> to get some warnings whenever that tag is touched (including a backtrace), so you can see where these things happen in your own code</p>",
        "id": 226242236,
        "sender_full_name": "oli",
        "timestamp": 1613218266
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> that particular error usually means one of two things:</p>\n<ul>\n<li>(more likely) you are using a shared reference for some memory that it may no longer access because the memory was mutated, or had a new mutable reference created to it (usually through a reborrow), since the shared reference was created.</li>\n<li>(less likely) you are using a shared reference for some memory that it outside of the range it may access -- e.g. you have a <code>&amp;i32</code> that points into an array of <code>i32</code> and you are using that to access other, neighboring elements in the same error.</li>\n</ul>",
        "id": 226243033,
        "sender_full_name": "RalfJ",
        "timestamp": 1613219646
    },
    {
        "content": "<p>And indeed to debug this I'd start with <code>MIRIFLAGS=-Zmiri-track-pointer-tag=251902</code>. This will only work properly if execution is deterministic (which it is by default but if you passed \"disable-isolation\" it might not be).</p>",
        "id": 226243053,
        "sender_full_name": "RalfJ",
        "timestamp": 1613219725
    },
    {
        "content": "<p>Thanks a lot! I did manage to fix the issue by copying the approach used in the standard library for iterator over a mutable slice.<br>\nI used <code>NonNull</code> and to access each element I add the index of the element to the pointer and convert it back to a mutable ref.</p>",
        "id": 226244085,
        "sender_full_name": "marmeladema",
        "timestamp": 1613221389
    },
    {
        "content": "<p>I hope this time I got it right^^<br>\nThe code can be found at <a href=\"https://github.com/marmeladema/clru-rs/pull/31/commits/6f2c5ba6713ae4bcf876d06c1df05ccfd15a59a0\">https://github.com/marmeladema/clru-rs/pull/31/commits/6f2c5ba6713ae4bcf876d06c1df05ccfd15a59a0</a></p>",
        "id": 226244175,
        "sender_full_name": "marmeladema",
        "timestamp": 1613221543
    }
]