[
    {
        "content": "<p>Is it intended that this example only detects UB in the second dbg?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">ptr</span>::<span class=\"n\">addr_of_mut</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"k\">u8</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p_x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">addr_of_mut</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">addr_of_mut</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"k\">u8</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">p_x</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p_x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">addr_of_mut</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">p_x</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It seems like using addr_of_mut is different from a regular assignment </p>\n<p><a href=\"/user_uploads/4715/ZFQTOYS_mRFvldvXi7eBWHD4/imagen.png\">imagen.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/ZFQTOYS_mRFvldvXi7eBWHD4/imagen.png\" title=\"imagen.png\"><img src=\"/user_uploads/4715/ZFQTOYS_mRFvldvXi7eBWHD4/imagen.png\"></a></div>",
        "id": 277220104,
        "sender_full_name": "Nick12",
        "timestamp": 1648687065
    },
    {
        "content": "<p>Try passing -Ztrack-raw-pointers to miri.</p>",
        "id": 277233519,
        "sender_full_name": "bjorn3",
        "timestamp": 1648702783
    },
    {
        "content": "<p>Same thing with <code>$ENV:MIRIFLAGS=\"-Zmiri-symbolic-alignment-check -Zmiri-check-number-validity -Zmiri-tag-raw-pointers -Zmiri-disable-isolation -Zmiri-ignore-leaks -Zmiri-backtrace=full -Zmiri-track-raw-pointers\"</code><br>\n<a href=\"/user_uploads/4715/p1V-1dhImEmIsNOHc_QUXVWX/imagen.png\">imagen.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/p1V-1dhImEmIsNOHc_QUXVWX/imagen.png\" title=\"imagen.png\"><img src=\"/user_uploads/4715/p1V-1dhImEmIsNOHc_QUXVWX/imagen.png\"></a></div>",
        "id": 277237406,
        "sender_full_name": "Nick12",
        "timestamp": 1648707288
    },
    {
        "content": "<p>Yeah, we discussed about this on Discord a long time ago, I was personally convinced an assignment necessarily went through temporary <code>&amp;mut</code> upgrade, but for a type with no drop glue it's actually not necessary: <code>*ptr = value;</code> can in that case actually unsugar to <code>ptr.write(value);</code>, thence performing <code>Cell::set()</code>-like semantics.</p>\n<ul>\n<li>The very weird thing is that it seems to special-case <code>*ptr = value;</code>, since the general <code>place = value</code> as in <code>x = 3;</code> still seems to involve a <code>*(&amp;mut x) = 3;</code>. That's really off-putting, imho, and I would thus personally love for there either not be any UB, or there to be UB on first use.</li>\n</ul>\n<p>I tried to investigate that using the MIR output, but sadly the MIR \"pretty\"-printed representation just considers an assignment as a \"primitive\" operation, so doesn't unsugar beyond that <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 277253777,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1648718544
    },
    {
        "content": "<p>So rewriting your original snippet using <code>Cell</code>s (<code>addr_of_mut!(x)</code> becomes <code>&amp;x</code>, and assuming <code>*ptr = value;</code> and <code>var = value;</code> have different semantics when <code>*ptr</code> does not have drop glue):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span>::<span class=\"n\">core</span>::<span class=\"n\">cell</span>::<span class=\"n\">Cell</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Cell</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"k\">u8</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p_x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"k\">u8</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"n\">p_x</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p_x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">3.</span><span class=\"n\">into</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"n\">p_x</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 277254057,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1648718730
    },
    {
        "content": "<blockquote>\n<p>It seems like using addr_of_mut is different from a regular assignment </p>\n</blockquote>\n<p>Yes, that is currently intended. Regular assignment directly to a local is like creating <code>&amp;mut</code>, it's a full-on case of \"I assert uniqueness\".<br>\nbasically you can think of <code>x</code> (the name of the local) as a mutable reference.</p>",
        "id": 277298031,
        "sender_full_name": "RalfJ",
        "timestamp": 1648740265
    },
    {
        "content": "<p>Except that assigning to a field of a packed struct (eg: <code>let mut x = ReprPacked(10u8, 20u64); x.1 = 30;</code>)<br>\ndoesn't require the field to be aligned to its type.<br>\n(I'm assuming that this is what's elided in the comparison with<code>&amp;mut</code>)</p>",
        "id": 277338569,
        "sender_full_name": "matt1992",
        "timestamp": 1648760050
    },
    {
        "content": "<p>yeah. it's the uniqueness of <code>&amp;mut</code>, but not literally the same in all the other aspects.</p>",
        "id": 277341816,
        "sender_full_name": "RalfJ",
        "timestamp": 1648761717
    }
]