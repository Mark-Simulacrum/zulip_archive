[
    {
        "content": "<p>Dear <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>,</p>\n<p>The standard library test suite is failing under Miri. Would you mind investigating this issue?</p>\n<p>Thanks in advance!<br>\nSincerely,<br>\nThe Miri Cronjobs Bot</p>",
        "id": 264537369,
        "sender_full_name": "miri-test-libstd",
        "timestamp": 1639192043
    },
    {
        "content": "<p>oh fun, this is a use-after-free</p>\n<div class=\"codehilite\"><pre><span></span><code> 0.120626   test string::test_replace_range ... error: Undefined Behavior: pointer to alloc7865928 was dereferenced after this allocation got freed\n0.000066      --&gt; /home/runner/work/miri-test-libstd/miri-test-libstd/rust-src-patched/library/core/src/slice/raw.rs:91:14\n0.000013       |\n0.000007   91  |     unsafe { &amp;*ptr::slice_from_raw_parts(data, len) }\n0.000007       |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pointer to alloc7865928 was dereferenced after this allocation got freed\n0.000007       |\n0.000006       = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n</code></pre></div>",
        "id": 264537928,
        "sender_full_name": "RalfJ",
        "timestamp": 1639192827
    },
    {
        "content": "<p>I just did <code>git log -Gslice_from_raw_parts</code> and found this recent commit that looks like it might be the source: <a href=\"https://github.com/rust-lang/rust/commit/2d8a11bdbb2623a4e2983870006cbd00eb210ffb\">2d8a11bdbb2623a4e2983870006cbd00eb210ffb</a></p>\n<p>EDIT: Never mind, that doesn't actually change <code>slice_from_raw_parts</code> AFAICT</p>\n<p>EDIT 2: Actually, the Miri error seems to occur inside a Drop, so this could be it after all!</p>",
        "id": 264538304,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639193462
    },
    {
        "content": "<p>the test is calling <code>replace_range</code></p>",
        "id": 264538383,
        "sender_full_name": "RalfJ",
        "timestamp": 1639193543
    },
    {
        "content": "<p>on a string</p>",
        "id": 264538387,
        "sender_full_name": "RalfJ",
        "timestamp": 1639193561
    },
    {
        "content": "<p>But:</p>\n<div class=\"codehilite\"><pre><span></span><code>= note: inside `&lt;std::vec::Drain&lt;u8&gt; as std::ops::Drop&gt;::drop` at /home/runner/work/miri-test-libstd/miri-test-libstd/rust-src-patched/library/alloc/src/vec/drain.rs:131:24\n</code></pre></div>",
        "id": 264538388,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639193562
    },
    {
        "content": "<p>not sure if it is a new test though or things called by the test that changed</p>",
        "id": 264538399,
        "sender_full_name": "RalfJ",
        "timestamp": 1639193576
    },
    {
        "content": "<p>ah looks like replace_range calls drain</p>",
        "id": 264538406,
        "sender_full_name": "RalfJ",
        "timestamp": 1639193592
    },
    {
        "content": "<p>and I think drain changed recently?</p>",
        "id": 264538409,
        "sender_full_name": "RalfJ",
        "timestamp": 1639193598
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/269128-miri/topic/Cron.20Job.20Failure.202021-12-11/near/264538409\">said</a>:</p>\n<blockquote>\n<p>and I think drain changed recently?</p>\n</blockquote>\n<p>Yeah, that's the commit I linked to</p>",
        "id": 264538412,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639193619
    },
    {
        "content": "<p>ah I see</p>",
        "id": 264538456,
        "sender_full_name": "RalfJ",
        "timestamp": 1639193650
    },
    {
        "content": "<p>(Currently seeing if I can come up with a smaller repro)</p>",
        "id": 264538664,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639194038
    },
    {
        "content": "<p>Interestingly, this passes Miri (with correct splice range):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">splice</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but changing the range to <code>1..2</code> causes the use-after-free.</p>",
        "id": 264538989,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639194537
    },
    {
        "content": "<p>Opening a Rust issue: <a href=\"https://github.com/rust-lang/rust/issues/91772\">#91772</a></p>",
        "id": 264539082,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639194708
    },
    {
        "content": "<p>Is it possible that this is a false positive for length 0? My understanding is that any aligned, non-null pointer should be valid for zero-length slices.</p>",
        "id": 264563398,
        "sender_full_name": "The 8472",
        "timestamp": 1639230065
    }
]