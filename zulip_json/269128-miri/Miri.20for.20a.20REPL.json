[
    {
        "content": "<p><a href=\"https://github.com/rust-lang/miri/issues/511\">https://github.com/rust-lang/miri/issues/511</a> got closed mainly for the reason that Miri will simply be too slow for a REPL, even slower than the playground right? Well, isn't there something we can do to make it faster? Maybe disable some checks and leave only the minimum amount of checks on? I think it'd be great if we could kill two birds with one stone and use Miri both for checking for unwanted behavior (its current main purpose, it seems) and for a REPL. Are there any ways to make it work out?</p>",
        "id": 258980901,
        "sender_full_name": "ruster",
        "timestamp": 1635177733
    },
    {
        "content": "<p><a href=\"https://github.com/google/evcxr\">https://github.com/google/evcxr</a> (<code>cargo install evcxr_repl</code>) works pretty well as a repl in practice. it for sure has its limitations, but I'm not sure how many of those miri would fix</p>",
        "id": 258982727,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1635178466
    },
    {
        "content": "<p>Yeah I wonder how Miri compares.</p>",
        "id": 258988695,
        "sender_full_name": "ruster",
        "timestamp": 1635181209
    },
    {
        "content": "<p>The main limitation of evcxr is that it's slow :(</p>",
        "id": 259028080,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1635200394
    },
    {
        "content": "<p>I am honestly not quite sure why Miri would even be a good basis for a repl :) it is basically just another backend for rustc...</p>",
        "id": 259030644,
        "sender_full_name": "RalfJ",
        "timestamp": 1635201917
    },
    {
        "content": "<p>ive contributed a bunch to evcxr and i dont really think miri solves a problem that evcxr has</p>",
        "id": 259034907,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1635205419
    },
    {
        "content": "<p>i could definitely be wrong though. most of my contributions are to the repl and not the core (except for when a repl feature needs core changes)</p>",
        "id": 259034979,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1635205478
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/269128-miri/topic/Miri.20for.20a.20REPL/near/259030644\">said</a>:</p>\n<blockquote>\n<p>I am honestly not quite sure why Miri would even be a good basis for a repl :) it is basically just another backend for rustc...</p>\n</blockquote>\n<p>Because it's an interpreter?</p>",
        "id": 259042247,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1635212685
    },
    {
        "content": "<p>it still needs fully formed inputs thouhg. at lest the way it works now, it cant just evaluate an individual line (i'm not even sure such a thing is well formed for MIR)</p>",
        "id": 259043697,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1635214158
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"363998\">Ibraheem Ahmed</span> <a href=\"#narrow/stream/269128-miri/topic/Miri.20for.20a.20REPL/near/259042247\">said</a>:</p>\n<blockquote>\n<p>Because it's an interpreter?</p>\n</blockquote>\n<p>why is that on its own helpful though? the way Miri works, it asks rustc to compile a file, and then uses the usual rustc queries to get the MIR it needs to do interpretation</p>",
        "id": 259107406,
        "sender_full_name": "RalfJ",
        "timestamp": 1635259562
    },
    {
        "content": "<p>so, as Thom said, it's not \"incremental\" the way REPLs are. it has no support for \"extending\" the set of defined functions or so (at least not beyond what rustc itself supports, which I don't think is a lot).</p>",
        "id": 259107537,
        "sender_full_name": "RalfJ",
        "timestamp": 1635259605
    }
]