[
    {
        "content": "<p>Hi!</p>\n<p>Are there any documentation or good sources of examples anywhere on how to try and exercise certain forms of miri validation through test cases? I'm trying to work this out on a known bug and coming up with limited results.</p>",
        "id": 222435823,
        "sender_full_name": "P Queen",
        "timestamp": 1610460913
    },
    {
        "content": "<p>Miri test cases should showcase issues it can detect <a href=\"https://github.com/rust-lang/miri/tree/master/tests/compile-fail\">https://github.com/rust-lang/miri/tree/master/tests/compile-fail</a>, although I am not sure if this is what you are looking for?</p>",
        "id": 222455125,
        "sender_full_name": "tm",
        "timestamp": 1610468473
    },
    {
        "content": "<p>This is perfect as an instructive set of examples, thanks.</p>",
        "id": 222722393,
        "sender_full_name": "P Queen",
        "timestamp": 1610633965
    },
    {
        "content": "<p>that's a good question... writing the right testcases can be tricky since for some issues Miri works best with specifically crafted testcases</p>",
        "id": 222862547,
        "sender_full_name": "RalfJ",
        "timestamp": 1610720340
    },
    {
        "content": "<p>I know of one <em>good</em> example for this, which is how to test an iterator that yields mutable references:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Gather all references from a mutable iterator and make sure Miri notices if</span>\n<span class=\"c1\">// using them is dangerous.</span>\n<span class=\"k\">fn</span> <span class=\"nf\">test_all_refs</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">dummy</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">iter</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Gather all those references.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">refs</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Use them all. Twice, to be sure we got all interleavings.</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">refs</span><span class=\"p\">.</span><span class=\"n\">iter_mut</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">dummy</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">refs</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">dummy</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 222862641,
        "sender_full_name": "RalfJ",
        "timestamp": 1610720399
    },
    {
        "content": "<p>this code found issues in 2 or 3 iterators in the standard library</p>",
        "id": 222862713,
        "sender_full_name": "RalfJ",
        "timestamp": 1610720419
    },
    {
        "content": "<p>this could also provide some more general guidance, such as -- if the interface lets you grab a bunch of references that are all live at once, then make sure to actually <em>use</em> all of them so that Miri truly checks if theses accesses are okay</p>",
        "id": 222862834,
        "sender_full_name": "RalfJ",
        "timestamp": 1610720487
    }
]