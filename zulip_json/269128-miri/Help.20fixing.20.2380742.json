[
    {
        "content": "<p>Hello. I started working on <a href=\"https://github.com/rust-lang/rust/issues/80742\">#80742</a>. I don't have much experience in rustc code or in mir(i). I can see two ways of fixing this:</p>\n<ul>\n<li>\n<p>Avoid evaluating <code>size_of::&lt;non_const_arg&gt;</code> (or the caller of it) with miri somehow because the argument is not a const. This avoids the panic in miri. I think this involves checking (before evaluating a <code>const fn</code> application in miri) that the args are also consts. (I'd expect this to be done already, but maybe the check is missing in some call sites?)</p>\n</li>\n<li>\n<p>Evaluate it but return the error to the call site and handle it there. This returns an error value in miri instead of panicking.</p>\n</li>\n</ul>\n<p>If I compile <code>let x: [u8; size_of::&lt;dyn X&gt;];</code> it fails with <code>the size for values of type </code>dyn Debug<code> cannot be known at compilation time</code>. I think we want to fail the same way in this issue. The question is how. Can anyone advise? Does any of the ideas above make sense? Thanks!</p>",
        "id": 223087032,
        "sender_full_name": "osa1",
        "timestamp": 1610953725
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119169\">@osa1</span> great! the ICE message is</p>\n<blockquote>\n<p>SizeOf nullary MIR operator called for unsized type</p>\n</blockquote>\n<p>so I'd say the fix is to make the SizeOf operator support unsized types. :) So far that just wasn't necessary, but now it seems to be, and that shouldn't be very hard to do.</p>",
        "id": 223094249,
        "sender_full_name": "RalfJ",
        "timestamp": 1610960229
    },
    {
        "content": "<p>that operator is implemented here: <a href=\"https://github.com/rust-lang/rust/blob/0677d9729318441a1cdb0c74812ec4140fa4d35f/compiler/rustc_mir/src/interpret/step.rs#L264\">https://github.com/rust-lang/rust/blob/0677d9729318441a1cdb0c74812ec4140fa4d35f/compiler/rustc_mir/src/interpret/step.rs#L264</a></p>",
        "id": 223094268,
        "sender_full_name": "RalfJ",
        "timestamp": 1610960245
    },
    {
        "content": "<p>its implementation should be more like <code>size_of_val</code>, which you can find here: <a href=\"https://github.com/rust-lang/rust/blob/0677d9729318441a1cdb0c74812ec4140fa4d35f/compiler/rustc_mir/src/interpret/intrinsics.rs#L143\">https://github.com/rust-lang/rust/blob/0677d9729318441a1cdb0c74812ec4140fa4d35f/compiler/rustc_mir/src/interpret/intrinsics.rs#L143</a></p>",
        "id": 223094286,
        "sender_full_name": "RalfJ",
        "timestamp": 1610960267
    },
    {
        "content": "<p>oh no wait, that makes no sense</p>",
        "id": 223094341,
        "sender_full_name": "RalfJ",
        "timestamp": 1610960289
    },
    {
        "content": "<p><code>SizeOf</code> is a nullary operator... it <em>cannot</em> work on unsized types</p>",
        "id": 223094352,
        "sender_full_name": "RalfJ",
        "timestamp": 1610960303
    },
    {
        "content": "<p>so this is not a Miri bug, it's a MIR construction bug</p>",
        "id": 223094362,
        "sender_full_name": "RalfJ",
        "timestamp": 1610960313
    },
    {
        "content": "<p>so, you won't have to change anything in Miri to fix this; you'll have to change something where the MIR is being built, or change the type checker to reject more things, or something like that... I'm out of my league here. I'd suggest using the <a class=\"stream\" data-stream-id=\"131828\" href=\"/#narrow/stream/131828-t-compiler\">#t-compiler</a> stream for that, since this is not Miri-related.</p>",
        "id": 223094457,
        "sender_full_name": "RalfJ",
        "timestamp": 1610960403
    },
    {
        "content": "<p>(FWIW, \"Miri\" refers to <a href=\"https://github.com/rust-lang/miri/\">Miri-the-tool</a>... the channel for compile-time evaluation questions would be <a class=\"stream\" data-stream-id=\"146212\" href=\"/#narrow/stream/146212-t-compiler.2Fconst-eval\">#t-compiler/const-eval</a>... but I recognize this can be confusing^^ and anyway this issue is not about compile-time evaluation, it's about some other parts of the compiler)</p>",
        "id": 223094594,
        "sender_full_name": "RalfJ",
        "timestamp": 1610960498
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>, at least I know the problem is not the interpreter. I'll ask rest of the questions elsewhere.</p>\n<blockquote>\n<p>SizeOf is a nullary operator... it cannot work on unsized types</p>\n</blockquote>\n<p>It takes a type argument, no? Why do you say \"cannot\"? In the link you provided it has an argument for example (the variable <code>ty</code>).</p>",
        "id": 223094938,
        "sender_full_name": "osa1",
        "timestamp": 1610960731
    },
    {
        "content": "<p>to determine the size of an unsized type you need a type argument <em>and a value argument</em></p>",
        "id": 223097489,
        "sender_full_name": "RalfJ",
        "timestamp": 1610962506
    },
    {
        "content": "<p>like <a href=\"https://doc.rust-lang.org/nightly/std/mem/fn.size_of_val.html\"><code>size_of_val</code> does</a></p>",
        "id": 223097511,
        "sender_full_name": "RalfJ",
        "timestamp": 1610962522
    },
    {
        "content": "<p>the type on its own cannot be enough to determine the size since it's, well, unsized ;)</p>",
        "id": 223097522,
        "sender_full_name": "RalfJ",
        "timestamp": 1610962531
    },
    {
        "content": "<blockquote>\n<p>the type on its own cannot be enough to determine the size</p>\n</blockquote>\n<p>Make sense. Thanks again.</p>",
        "id": 223097637,
        "sender_full_name": "osa1",
        "timestamp": 1610962575
    },
    {
        "content": "<p>Looks like this was introduced by the lowering of size_of intrinsic to the nullary SizeOf operator. Is interpreting code that isn't well typed unavoidable currently?</p>",
        "id": 223102177,
        "sender_full_name": "tm",
        "timestamp": 1610965227
    },
    {
        "content": "<p><code>size_of</code> has an implicit <code>T: Sized</code> bound, so that call would already be invalid to begin with</p>",
        "id": 223102693,
        "sender_full_name": "RalfJ",
        "timestamp": 1610965577
    },
    {
        "content": "<blockquote>\n<p>Is interpreting code that isn't well typed unavoidable currently?</p>\n</blockquote>\n<p>it's an issue that comes up regularly, rustc is pretty bad at \"stopping\" when things have gone wrong. related issue: <a href=\"https://github.com/rust-lang/rust/issues/79047\">https://github.com/rust-lang/rust/issues/79047</a></p>",
        "id": 223102779,
        "sender_full_name": "RalfJ",
        "timestamp": 1610965617
    },
    {
        "content": "<p>Cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 223102828,
        "sender_full_name": "RalfJ",
        "timestamp": 1610965652
    },
    {
        "content": "<p>The call isn't valid, but it didn't used to cause an ICE before. Instead it succeeded computing the unsized layout, which incidently was also reported as <a href=\"https://github.com/rust-lang/rust/issues/80795\">#80795</a>.</p>",
        "id": 223127857,
        "sender_full_name": "tm",
        "timestamp": 1610980972
    },
    {
        "content": "<p>wait, is <a href=\"https://github.com/rust-lang/rust/issues/80742\">#80742</a> relying on this coherence bug? in that case I'd say the ICE is totally fine</p>",
        "id": 223129005,
        "sender_full_name": "RalfJ",
        "timestamp": 1610981569
    },
    {
        "content": "<p>it makes no sense to defend the compiler against this as that would mean literally not relying on the type checker for anything...</p>",
        "id": 223129039,
        "sender_full_name": "RalfJ",
        "timestamp": 1610981592
    },
    {
        "content": "<p>The <a href=\"https://github.com/rust-lang/rust/issues/80795\">#80795</a> was a feature request for an ICE.</p>",
        "id": 223129185,
        "sender_full_name": "tm",
        "timestamp": 1610981670
    },
    {
        "content": "<p>Which is exactly what is happening now.</p>",
        "id": 223129228,
        "sender_full_name": "tm",
        "timestamp": 1610981691
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"352985\">tm</span> <a href=\"#narrow/stream/269128-miri/topic/Help.20fixing.20.2380742/near/223129228\">said</a>:</p>\n<blockquote>\n<p>Which is exactly what is happening now.</p>\n</blockquote>\n<p>yeah I sprinkled tons of defensive asserts all over the CTFE engine...^^</p>",
        "id": 223129316,
        "sender_full_name": "RalfJ",
        "timestamp": 1610981737
    },
    {
        "content": "<p>If I wasn't clear, the ICE is already implemented :D.</p>",
        "id": 223129659,
        "sender_full_name": "tm",
        "timestamp": 1610981893
    },
    {
        "content": "<p>Sorry I couldn't follow the discussion. Can <a href=\"https://github.com/rust-lang/rust/issues/79047\">#79047</a> be closed now? Is there any changes in how we think <a href=\"https://github.com/rust-lang/rust/issues/80742\">#80742</a> should be fixed?</p>",
        "id": 223130992,
        "sender_full_name": "osa1",
        "timestamp": 1610982333
    },
    {
        "content": "<p>For now I would use similar approach to how we handle invalid transmute, i.e., <code>delay_span_bug</code> while returning an error from interpreter. Does that sound ok to you <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> , <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> ?</p>",
        "id": 223136433,
        "sender_full_name": "tm",
        "timestamp": 1610984998
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"352985\">@tm</span>  I'd prefer to understand where this comes from first... <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> can you confirm that this is like the <code>transmute</code> issue?</p>",
        "id": 223137759,
        "sender_full_name": "RalfJ",
        "timestamp": 1610985665
    },
    {
        "content": "<p>but yeah I guess that's the approach we have to go with for now... we should also open an issue similar to the transmute issue though, because really this is a hack that should not be needed</p>",
        "id": 223138530,
        "sender_full_name": "RalfJ",
        "timestamp": 1610986027
    },
    {
        "content": "<p>the actual fix should be that we register the error that occured in typeck somehwere for const eval to find it</p>",
        "id": 223140858,
        "sender_full_name": "oli",
        "timestamp": 1610987185
    },
    {
        "content": "<p>but for now adding more delay span bugs is fine</p>",
        "id": 223140893,
        "sender_full_name": "oli",
        "timestamp": 1610987219
    },
    {
        "content": "<p>I just submitted <a href=\"https://github.com/rust-lang/rust/issues/81185\">#81185</a> which \"fixes\" this bug by using <code>delay_span_bug</code>. It seems really hacky though.</p>\n<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> </p>\n<blockquote>\n<p>the actual fix should be that we register the error that occured in typeck somehwere for const eval to find it</p>\n</blockquote>\n<p>I'm confused about how we can make progress even though there's a type error. Could you elaborate on this?</p>",
        "id": 223193829,
        "sender_full_name": "osa1",
        "timestamp": 1611040866
    },
    {
        "content": "<blockquote>\n<p>I'm confused about how we can make progress even though there's a type error. Could you elaborate on this?</p>\n</blockquote>\n<p>I moved this q to <a class=\"stream\" data-stream-id=\"182449\" href=\"/#narrow/stream/182449-t-compiler.2Fhelp\">#t-compiler/help</a></p>",
        "id": 223194115,
        "sender_full_name": "osa1",
        "timestamp": 1611041214
    },
    {
        "content": "<p>My PR is now ready.</p>\n<blockquote>\n<p>the actual fix should be that we register the error that occured in typeck somehwere for const eval to find it</p>\n</blockquote>\n<p>Where can I learn more about this? Do we do this kind of thing elsewhere in the compiler? Where? I'd like to take a look.</p>",
        "id": 223234466,
        "sender_full_name": "osa1",
        "timestamp": 1611066990
    },
    {
        "content": "<p>well.. that's the thing. I don't know</p>",
        "id": 223242845,
        "sender_full_name": "oli",
        "timestamp": 1611070174
    },
    {
        "content": "<p>it <em>should</em> already be happening</p>",
        "id": 223242855,
        "sender_full_name": "oli",
        "timestamp": 1611070178
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/f09fb488f70c5965ec4f64453a6e681fbfcff56c/compiler/rustc_mir/src/const_eval/eval_queries.rs#L277-L279\">https://github.com/rust-lang/rust/blob/f09fb488f70c5965ec4f64453a6e681fbfcff56c/compiler/rustc_mir/src/const_eval/eval_queries.rs#L277-L279</a> is where we bail out if the typeck tables contain an error</p>",
        "id": 223243016,
        "sender_full_name": "oli",
        "timestamp": 1611070231
    },
    {
        "content": "<p>but some errors don't seem to get registered</p>",
        "id": 223243059,
        "sender_full_name": "oli",
        "timestamp": 1611070244
    },
    {
        "content": "<p>or happen in a different stage</p>",
        "id": 223243070,
        "sender_full_name": "oli",
        "timestamp": 1611070248
    },
    {
        "content": "<p>maybe the errors we see are MIR typeck errors, meaning we may need a flag on MIR bodies that state that an error has occurred on it</p>",
        "id": 223243179,
        "sender_full_name": "oli",
        "timestamp": 1611070283
    },
    {
        "content": "<p>or we need to make the MIR opt/check pipeline fallible, so <code>optmized_mir</code> can return an <code>Result&lt;&amp;'tcx mir::Body&lt;'tcx&gt;, ErrorReported&gt;</code></p>",
        "id": 223243330,
        "sender_full_name": "oli",
        "timestamp": 1611070327
    },
    {
        "content": "<p>idk, the design space is rather large, but first we need to know what the actual problem is, so we need to track where these errors occur and why they don't cause const eval to abort evaluation</p>",
        "id": 223243429,
        "sender_full_name": "oli",
        "timestamp": 1611070379
    },
    {
        "content": "<p>Interesting. I'll try to find out why this error is not caught in the code you linked.</p>",
        "id": 223244122,
        "sender_full_name": "osa1",
        "timestamp": 1611070650
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> what is the fastest way to rebuild stage 1 compiler when working MIR or const_eval parts of the compiler? I'm currently using<code> ./x.py build --stage 1</code>, with incremental compilation enabled, LLVM used from the system, debug logs are on.</p>",
        "id": 223245684,
        "sender_full_name": "osa1",
        "timestamp": 1611071284
    },
    {
        "content": "<p>I mostly run tests directly, so I use <code>./x.py test src/test/ui --bless --test-args the-test-I-want-to-run</code>, which automatically picks stage 1 and uses incremental due to the <code>config.toml</code></p>",
        "id": 223246201,
        "sender_full_name": "oli",
        "timestamp": 1611071500
    },
    {
        "content": "<p>unfortunately you need the whole shebang around building libcore/libstd every time you touch the compiler</p>",
        "id": 223246234,
        "sender_full_name": "oli",
        "timestamp": 1611071520
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119169\">@osa1</span> thanks for the PR! Would be good if you could make a follow-up PR to handle <a href=\"https://github.com/rust-lang/rust/pull/81185#discussion_r561872007\">this concern</a>. You can <code>r?</code> me on that.</p>",
        "id": 223505940,
        "sender_full_name": "RalfJ",
        "timestamp": 1611235111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> will do, thanks.</p>",
        "id": 223508275,
        "sender_full_name": "osa1",
        "timestamp": 1611236246
    }
]