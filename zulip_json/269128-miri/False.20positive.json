[
    {
        "content": "<p>Hi folks, I'm running Miri on some internal tests that unfortunately I cannot share, but I'm seeing strange behavior that makes me think the Miri error being triggered is a false positive.</p>\n<p>The error is: <code>no item granting read access to tag &lt;untagged&gt; at &lt;alloc&gt; found in borrow stack.</code></p>\n<p>This happens when attempting to do something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>let src = &amp;self.data.first_field as *const _ as *const u8;\nptr.copy_from(src, byte_count);\n</code></pre></div>\n<p>If I do the following the error goes away:</p>\n<div class=\"codehilite\"><pre><span></span><code>println!(&quot;Data len: {}&quot;, std::mem::size_of_val(&amp;self.data));\nlet src = &amp;self.data.first_field as *const _ as *const u8;\nptr.copy_from(src, byte_count);\n</code></pre></div>\n<p>Anyone know if there's an open issue for this item or why I may be seeing this behavior?</p>",
        "id": 239196915,
        "sender_full_name": "Lander Brandt",
        "timestamp": 1621312454
    },
    {
        "content": "<p>It's late at my TZ but I'm going to drop stuff just in case it helps.</p>",
        "id": 239197061,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1621312573
    },
    {
        "content": "<p>its kinda hard to know what's happening without a minimal example. That being said, could it be that your <code>println</code> call is creating a lifetime region where <code>self.data</code> can be read?</p>",
        "id": 239197130,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1621312666
    },
    {
        "content": "<p>I don't think so. If I put the <code>println</code> in its own scope I get the successful behavior (as if it was not in its own scope). I tried to create explicit references to <code>self.data</code> and get a reference to <code>first_field</code> from there and those fail as well.</p>",
        "id": 239197332,
        "sender_full_name": "Lander Brandt",
        "timestamp": 1621312890
    },
    {
        "content": "<p>And I know, I'm sorry for not being able to provide a minimal example. I'm relatively new to this codebase and thought hacking it up in the playground for a min PoC may take too long if it's a known issue. I'll see about providing one tomorrow though</p>",
        "id": 239197406,
        "sender_full_name": "Lander Brandt",
        "timestamp": 1621312981
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=35dcb91a4a334fe731786f960aa2f468\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=35dcb91a4a334fe731786f960aa2f468</a></p>\n<p>Here's a repro. if you uncomment the <code>println</code> the code works.</p>",
        "id": 239198667,
        "sender_full_name": "Lander Brandt",
        "timestamp": 1621314224
    },
    {
        "content": "<p>It's not a bug, but rather a limitation of the current stacked borrows model. This:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">larger_data</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">).</span><span class=\"n\">copy_from</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">&amp;</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">identifier</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>is undefined behavior because <code>&amp;data.identifier</code> only has access to that one byte and you are writing 4 bytes into it. However, if a pointer is created with access to all of <code>data</code>, then SB cannot exclude the possibility that your <code>&amp;data.identifier as *const _</code> pointer was actually derived from that other pointer which does have access to the entire allocation, so it is considered defined behavior. Ideally, both versions would be undefined behavior, but distinguishing pointers (i.e. pointer provenance) is a lot harder than references (which use the normal rust borrowing model).</p>",
        "id": 239199258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621314831
    },
    {
        "content": "<p>To fix the UB, you should use <code>addr_of!</code> like so:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">data_ptr</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">Data</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">data</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// this way the pointer has access to the whole of data</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">larger_data</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">).</span><span class=\"n\">copy_from</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">std</span>::<span class=\"n\">ptr</span>::<span class=\"n\">addr_of</span><span class=\"o\">!</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"n\">data_ptr</span><span class=\"p\">).</span><span class=\"n\">identifier</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// create a derived pointer with access to all of data</span>\n<span class=\"w\">            </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 239199447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621314998
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> nice, this makes sense. I changed the code to grab a pointer to the parent object and cast that as a  <code>*const u8</code> and the code now works. Thank you for your help.</p>",
        "id": 239199768,
        "sender_full_name": "Lander Brandt",
        "timestamp": 1621315325
    },
    {
        "content": "<p>Question.  I know const is for constant.  What’s *const?</p>",
        "id": 239289781,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1621357566
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"344328\">Charles Ellis O'Riley Jr.</span> <a href=\"#narrow/stream/269128-miri/topic/False.20positive/near/239289781\">said</a>:</p>\n<blockquote>\n<p>Question.  I know const is for constant.  What’s *const?</p>\n</blockquote>\n<p>is a raw pointer: there is <code>*const T</code> and <code>*mut T</code>. Neither of them have lifetime restrictions and dereferencing them is unsafe. The difference is that you cannot write to a <code>*const T</code> directly but you can write to a <code>*mut T</code>.</p>",
        "id": 239292564,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1621358566
    }
]