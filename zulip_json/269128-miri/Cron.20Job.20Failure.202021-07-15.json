[
    {
        "content": "<p>Dear <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>,</p>\n<p>The standard library test suite is failing under Miri. Would you mind investigating this issue?</p>\n<p>Thanks in advance!<br>\nSincerely,<br>\nThe Miri Cronjobs Bot</p>",
        "id": 246056351,
        "sender_full_name": "miri-test-libstd",
        "timestamp": 1626330463
    },
    {
        "content": "<p>That is strange, just one of the doctests is failing with a compiler error?<br>\n<a href=\"https://github.com/rust-lang/miri-test-libstd/runs/3073718536?check_suite_focus=true\">https://github.com/rust-lang/miri-test-libstd/runs/3073718536?check_suite_focus=true</a></p>",
        "id": 246058902,
        "sender_full_name": "RalfJ",
        "timestamp": 1626333005
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/86211\">https://github.com/rust-lang/rust/pull/86211</a> landed recently changing all that code, so it does not seem random</p>",
        "id": 246059171,
        "sender_full_name": "RalfJ",
        "timestamp": 1626333220
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"374396\">@hyd-dev</span> any idea why out of all the tests, just this one fails?</p>\n<div class=\"codehilite\"><pre><span></span><code>test ../libcore/src/option.rs - option (line 22) ... ok\ntest ../libcore/src/option.rs - option (line 261) ... ok\ntest ../libcore/src/option.rs - option (line 317) ... ok\ntest ../libcore/src/option.rs - option (line 350) - compile fail ... FAILED\ntest ../libcore/src/option.rs - option (line 331) ... ok\ntest ../libcore/src/option.rs - option (line 372) ... ok\ntest ../libcore/src/option.rs - option (line 389) ... ok\ntest ../libcore/src/option.rs - option (line 433) ... ok\ntest ../libcore/src/option.rs - option (line 447) ... ok\ntest ../libcore/src/option.rs - option (line 57) ... ok\n</code></pre></div>",
        "id": 246059440,
        "sender_full_name": "RalfJ",
        "timestamp": 1626333449
    },
    {
        "content": "<p>I can reproduce the problem locally, it's not just some weird flake of the CI environment</p>",
        "id": 246061258,
        "sender_full_name": "RalfJ",
        "timestamp": 1626334894
    },
    {
        "content": "<p>There are other compile_fail tests in libcore that work fine</p>",
        "id": 246061359,
        "sender_full_name": "RalfJ",
        "timestamp": 1626334959
    },
    {
        "content": "<p>but those are more self-contained</p>",
        "id": 246061372,
        "sender_full_name": "RalfJ",
        "timestamp": 1626334972
    },
    {
        "content": "<p>looks almost as if it's missing the prelude or something like that?</p>\n<div class=\"codehilite\"><pre><span></span><code> 80 | pub struct Range&lt;Idx&gt; {\n   | --------------------- doesn&#39;t satisfy `_: std::iter::Iterator`\n   |\n   = note: the following trait bounds were not satisfied:\n           `core_miri_test::ops::Range&lt;{integer}&gt;: std::iter::Iterator`\n           which is required by `&amp;mut core_miri_test::ops::Range&lt;{integer}&gt;: std::iter::Iterator`\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n3  | use core_miri_test::iter::Iterator;\n</code></pre></div>",
        "id": 246061420,
        "sender_full_name": "RalfJ",
        "timestamp": 1626335009
    },
    {
        "content": "<p>but then we have tons of</p>\n<div class=\"codehilite\"><pre><span></span><code>error: duplicate lang item in crate `core_miri_test`: `RangeTo`.\n</code></pre></div>\n<p>so that's more like it is importing the prelude twice</p>",
        "id": 246061489,
        "sender_full_name": "RalfJ",
        "timestamp": 1626335046
    },
    {
        "content": "<p>my guess would be that this</p>\n<div class=\"codehilite\"><pre><span></span><code>use std::iter::{empty, once};\n</code></pre></div>\n<p>somehow goes wrong, maybe a wrong sysroot or dylib-path or so</p>",
        "id": 246061517,
        "sender_full_name": "RalfJ",
        "timestamp": 1626335064
    },
    {
        "content": "<p>It looks like it loads both <code>core</code> from sysroot and <code>core_miri_test</code>, but I guess it should only load the former?</p>",
        "id": 246145990,
        "sender_full_name": "hyd-dev",
        "timestamp": 1626378494
    },
    {
        "content": "<blockquote>\n<p>use std::iter::{empty, once};</p>\n</blockquote>\n<p>But this compiles successfully <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">//! ```compile_fail,E0308</span>\n<span class=\"sd\">//! #![allow(warnings)]</span>\n<span class=\"sd\">//! # use std::iter::{empty, once};</span>\n<span class=\"sd\">//! ```</span>\n</code></pre></div>",
        "id": 246146097,
        "sender_full_name": "hyd-dev",
        "timestamp": 1626378553
    },
    {
        "content": "<p>It seems that it's caused by  <code>match x</code>. Changing it to <code>match do_insert</code> works.</p>",
        "id": 246189390,
        "sender_full_name": "hyd-dev",
        "timestamp": 1626417534
    },
    {
        "content": "<p>I think there are two libcore there: <code>core</code> in sysroot and <code>core_miri_test</code>. Cargo/rustdoc passes <code>--extern core_miri_test=...</code> to Miri in this test (and probably in other tests as well, I haven't confirmed that because I don't know a convenient way to see command-line arguments for passed tests). I guess although <code>--extern core_miri_test=...</code> is present, it's not actually loaded by Miri in other tests and it's not supposed to be loaded in this test either, but the unknown identifier <code>x</code> somehow makes Miri load it.</p>",
        "id": 246190583,
        "sender_full_name": "hyd-dev",
        "timestamp": 1626418788
    },
    {
        "content": "<p>Properly fixing this seems to require eliding one libcore, but I'm not sure how.</p>",
        "id": 246191559,
        "sender_full_name": "hyd-dev",
        "timestamp": 1626419461
    },
    {
        "content": "<p>I haven't find a way to stop Cargo/rustdoc from passing <code>--extern core_miri_test=...</code> or not use <code>core</code> from sysroot without hack (at least not yet), but this seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/core_miri_test/Cargo.toml b/core_miri_test/Cargo.toml</span>\n<span class=\"gh\">index 524cce8..b8df702 100644</span>\n<span class=\"gd\">--- a/core_miri_test/Cargo.toml</span>\n<span class=\"gi\">+++ b/core_miri_test/Cargo.toml</span>\n<span class=\"gu\">@@ -12,6 +12,10 @@ path = \"../libcore/src/lib.rs\"</span>\n test = false\n bench = false\n\n<span class=\"gi\">+[features]</span>\n<span class=\"gi\">+miri-test = []</span>\n<span class=\"gi\">+default = [\"miri-test\"]</span>\n<span class=\"gi\">+</span>\n [[test]]\n name = \"coretests\"\n path = \"../libcore/tests/lib.rs\"\n<span class=\"gh\">diff --git a/rust-src.diff b/rust-src.diff</span>\n<span class=\"gh\">index e69de29..965f559 100644</span>\n<span class=\"gd\">--- a/rust-src.diff</span>\n<span class=\"gi\">+++ b/rust-src.diff</span>\n<span class=\"gu\">@@ -0,0 +1,12 @@</span>\n<span class=\"gi\">+diff --git a/library/core/src/lib.rs b/library/core/src/lib.rs</span>\n<span class=\"gi\">+index 3557dbad..6c089b0c 100644</span>\n<span class=\"gi\">+--- a/library/core/src/lib.rs</span>\n<span class=\"gi\">++++ b/library/core/src/lib.rs</span>\n<span class=\"gi\">+@@ -49,6 +49,7 @@</span>\n<span class=\"gi\">+ //</span>\n<span class=\"gi\">+ // This cfg won't affect doc tests.</span>\n<span class=\"gi\">+ #![cfg(not(test))]</span>\n<span class=\"gi\">++#![cfg(any(not(feature = \"miri-test\"), doctest))]</span>\n<span class=\"gi\">+ #![stable(feature = \"core\", since = \"1.6.0\")]</span>\n<span class=\"gi\">+ #![doc(</span>\n<span class=\"gi\">+     html_playground_url = \"https://play.rust-lang.org/\",</span>\n</code></pre></div>",
        "id": 246194755,
        "sender_full_name": "hyd-dev",
        "timestamp": 1626422186
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"374396\">hyd-dev</span> <a href=\"#narrow/stream/269128-miri/topic/Cron.20Job.20Failure.202021-07-15/near/246146097\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>use std::iter::{empty, once};</p>\n</blockquote>\n<p>But this compiles successfully <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">//! ```compile_fail,E0308</span>\n<span class=\"sd\">//! #![allow(warnings)]</span>\n<span class=\"sd\">//! # use std::iter::{empty, once};</span>\n<span class=\"sd\">//! ```</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>even in core context?</p>\n<p>when I add</p>\n<div class=\"codehilite\"><pre><span></span><code>use std::iter::{empty, once};\n</code></pre></div>\n<p>do another doctest in core, it likewise fails. OTOH, <code>use std::collections::BTreeMap;</code> works fine.</p>\n<p>EDIT: ignore this, it ails with a totally different error.</p>",
        "id": 246197105,
        "sender_full_name": "RalfJ",
        "timestamp": 1626424073
    },
    {
        "content": "<blockquote>\n<p>but the unknown identifier x somehow makes Miri load it.</p>\n</blockquote>\n<p>ah, so maybe it is loaded by the code that makes suggestions for which things to import? I assume <code>x</code> here is a typo...</p>",
        "id": 246197185,
        "sender_full_name": "RalfJ",
        "timestamp": 1626424149
    },
    {
        "content": "<p>okay, fixing that typo fixes the bug... good catch <span class=\"user-mention\" data-user-id=\"374396\">@hyd-dev</span> !</p>",
        "id": 246197214,
        "sender_full_name": "RalfJ",
        "timestamp": 1626424198
    },
    {
        "content": "<p>There still is some problem with rustc not always using the right libcore, but at least we can run the test suite now</p>",
        "id": 246197305,
        "sender_full_name": "RalfJ",
        "timestamp": 1626424249
    },
    {
        "content": "<blockquote>\n<p>I think there are two libcore there: core in sysroot and core_miri_test</p>\n</blockquote>\n<p>yes but this is the case even when running these doctests without miri, and there it works.</p>",
        "id": 246197340,
        "sender_full_name": "RalfJ",
        "timestamp": 1626424290
    },
    {
        "content": "<p>opened <a href=\"https://github.com/rust-lang/miri/issues/1852\">https://github.com/rust-lang/miri/issues/1852</a> for that, and <a href=\"https://github.com/rust-lang/rust/pull/87183\">https://github.com/rust-lang/rust/pull/87183</a> to get the doctests to work again for now</p>",
        "id": 246197997,
        "sender_full_name": "RalfJ",
        "timestamp": 1626424757
    }
]