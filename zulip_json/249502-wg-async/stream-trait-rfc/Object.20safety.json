[
    {
        "content": "<p>There are some object-safety related issues with having <code>next</code> on <code>Stream</code> itself.<br>\nSee my comment for more: <a href=\"https://github.com/rust-lang/rust/pull/79023#pullrequestreview-557269331\">https://github.com/rust-lang/rust/pull/79023#pullrequestreview-557269331</a><br>\nAny thoughts?</p>",
        "id": 220720643,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1608662328
    },
    {
        "content": "<p>Yeah, the problem seems pretty fundamental</p>",
        "id": 221331955,
        "sender_full_name": "tmandry",
        "timestamp": 1609469781
    },
    {
        "content": "<p>I wrote a doc on it: <a href=\"https://hackmd.io/@CTI_5_5PSN2-6VHLeF5YuQ/r1Af46oaD/edit\">The <code>Stream::next()</code> problem</a></p>",
        "id": 221331956,
        "sender_full_name": "tmandry",
        "timestamp": 1609469809
    },
    {
        "content": "<p>We should just land without it initially imo</p>",
        "id": 221353102,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1609509932
    },
    {
        "content": "<p>I agree - I'm going to take it out of the RFC to hopefully get it to acceptance</p>",
        "id": 222195667,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1610236267
    },
    {
        "content": "<p>Done! <a href=\"https://github.com/rust-lang/rfcs/pull/2996\">https://github.com/rust-lang/rfcs/pull/2996</a></p>",
        "id": 222197878,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1610239826
    },
    {
        "content": "<p>I'll update the Stream PR this Friday to reflect the change in the RFC; was on vacation for the past few weeks so didn't have a chance to do it sooner.</p>",
        "id": 222702784,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1610621698
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts</span> !</p>",
        "id": 222971703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1610789755
    },
    {
        "content": "<p>Hey all - there's some more discussion on the RFC, but it's unclear to me whether it's something that would block acceptance of this RFC</p>",
        "id": 223000328,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1610824331
    },
    {
        "content": "<p>Would appreciate if people would weigh in when they have some time</p>",
        "id": 223000333,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1610824344
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"225192\">@Nell Shamrell-Harrington</span> weighted in with the very heavyweight suggestion of \"should channels actually fulfill the Stream interface?\" <a href=\"https://github.com/rust-lang/rfcs/pull/2996#issuecomment-762302488\">https://github.com/rust-lang/rfcs/pull/2996#issuecomment-762302488</a> (I think they shouldn't)</p>",
        "id": 223142545,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1610988235
    },
    {
        "content": "<p>I think they raise a good question, though.</p>",
        "id": 223142637,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1610988279
    },
    {
        "content": "<p>I think I'm leaning toward your viewpoint as well. Any ideas on how we would communicate that? Documentation? Checks in the compiler? Something else?</p>",
        "id": 223186334,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1611030407
    },
    {
        "content": "<p>Good question - they've since added another post saying that the effect is true for other structures, maybe it's worth giving an example there?</p>",
        "id": 223214241,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1611055931
    },
    {
        "content": "<p>I actually think it's a good discriminator, making a Stream something that stays in location and spills out its goods there :D</p>",
        "id": 223214283,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1611055960
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> <a href=\"#narrow/stream/249502-wg-async-foundations.2Fstream-trait-rfc/topic/Object.20safety/near/221331956\">said</a>:</p>\n<blockquote>\n<p>I wrote a doc on it: <a href=\"https://hackmd.io/@CTI_5_5PSN2-6VHLeF5YuQ/r1Af46oaD/edit\">The <code>Stream::next()</code> problem</a></p>\n</blockquote>\n<p>I was looking at this today, and noticed that <code>Iterator</code> has a very similar method to <code>Stream::next</code>: <code>Iterator::map</code> (which has no <code>Self : Sized</code> bound, as we'd prefer for <code>Stream::next</code>)</p>\n<p>Iterator IS object-safe (provided methods appear to not affect object safety), and map can be called on a &amp;mut dyn Iterator:<br>\n<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7dd33d65c9eff4abb0679deec2bf68c4\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7dd33d65c9eff4abb0679deec2bf68c4</a></p>\n<p>I think the difference is Iterator::map takes <code>self</code> and Stream::next takes <code>&amp;mut self</code>. Is that the difference that causes iterator to just work our and Stream::next have method resolution issues?  (looking at the method resolution algorithm</p>",
        "id": 224077916,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1611683930
    },
    {
        "content": "<p>I'm very late to the party here, but <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> is there a reason we can't use <code>where Self: Sized</code> on the <code>next()</code> method?</p>",
        "id": 224220920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611770280
    },
    {
        "content": "<p>I don't think it makes <code>next</code> harder to use in particular, since typically if you have a <code>dyn Stream</code>, you'll have a <code>Box&lt;dyn Stream&gt;</code>, and that is a sized type that implements <code>Stream</code></p>",
        "id": 224221036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611770314
    },
    {
        "content": "<p>I'm skimming the doc but I didn't notice this clearly discussed</p>",
        "id": 224221058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611770323
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> the problem is the method dispatch doesn't actually work that way</p>",
        "id": 224246602,
        "sender_full_name": "tmandry",
        "timestamp": 1611781278
    },
    {
        "content": "<p>here's a <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=1d941bb89e9c9c55d663ec9a11c12739\">playground</a> that shows what I'm talking about</p>",
        "id": 224246659,
        "sender_full_name": "tmandry",
        "timestamp": 1611781308
    },
    {
        "content": "<p>I can sort of imagine, but ok</p>",
        "id": 224246679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611781317
    },
    {
        "content": "<p>wow...Iterator::map actually does have a Self: Sized requirement but it doesn't actually show in rustdoc: <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.map\">https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.map</a> vs <a href=\"https://doc.rust-lang.org/src/core/iter/traits/iterator.rs.html#625\">https://doc.rust-lang.org/src/core/iter/traits/iterator.rs.html#625</a></p>\n<p>is this a rustdoc bug?</p>",
        "id": 224267137,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1611792157
    },
    {
        "content": "<p>also it appears the difference in self vs &amp;mut self makes all the difference: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=0bdebf1faaa318d59ef2776261e9c4f0\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=0bdebf1faaa318d59ef2776261e9c4f0</a></p>",
        "id": 224267474,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1611792365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> so..hm...we could probably fix this in the way we handle method dispatch</p>",
        "id": 224312037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611832378
    },
    {
        "content": "<p>We need to document better those rules there :) I always have to kind of \"re-remember\" what's going on</p>",
        "id": 224312169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611832463
    },
    {
        "content": "<p>I guess I am a bit surprised</p>",
        "id": 224312220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611832503
    },
    {
        "content": "<p>OK, so, <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> -- this playground is sort of incomplete, in that it doesn't include <code>impl Stream for &amp;mut S</code> and for <code>Box&lt;S&gt;</code>. If you add those, dispatch works as expected (<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=922dd26b2e3180ce1f5a58c656164739\">playground</a>). However, to actually <em>implement</em> <code>next()</code> for those cases will require copy-and-pasting the implementation; you can't just call <code>S::next(self)</code> because that would require that <code>S: Sized</code></p>",
        "id": 224312816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611832914
    },
    {
        "content": "<p>but that seems...ok</p>",
        "id": 224312821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611832919
    },
    {
        "content": "<p>we can call a helper method or something</p>",
        "id": 224312863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611832924
    },
    {
        "content": "<p>In particular, the dispatch rules are that we try</p>\n<ul>\n<li>by-value</li>\n<li>by-ref</li>\n<li>by-mut-ref</li>\n</ul>\n<p>in that order, and then we try adding derefs.</p>",
        "id": 224312892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611832948
    },
    {
        "content": "<p>In this case, we get <code>by-mut-ref</code> on <code>&amp;mut dyn Stream</code> or <code>Box&lt;dyn Stream&gt;</code> and it works, so we never proceed to add any derefs</p>",
        "id": 224312912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611832966
    },
    {
        "content": "<p>but if you lack the impls, we will add a deref, when means we would wind up invoking <code>by-mut-ref</code> on <code>dyn Stream</code> and get the \"must be sized\" error</p>",
        "id": 224312958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611832991
    },
    {
        "content": "<p>am I missing something here?</p>",
        "id": 224312963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611832994
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> in the <code>Iterator::map</code> case, the &amp;mut I and Box&lt;I&gt; impls don't need to reimplement the provided <code>map</code> method (actually they do reimplement some other provided methods but idk why), but dispatch seems to work. Is that because we try the by-value rule first?</p>",
        "id": 224358194,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1611853401
    },
    {
        "content": "<p>I have to look more closely, I think the other problem was <code>Unpin</code></p>",
        "id": 224358327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611853443
    },
    {
        "content": "<p>i.e., you can't call <code>S::next</code> because that would require that <code>S: Unpin</code> and you don't want to require that</p>",
        "id": 224367128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611856884
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I don't know if you saw <a href=\"https://hackmd.io/hggAwCSqTj-0YQJi4y9gjg\">this doc</a> on the issue</p>",
        "id": 224383120,
        "sender_full_name": "tmandry",
        "timestamp": 1611863419
    },
    {
        "content": "<p>I saw it</p>",
        "id": 224383169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611863444
    },
    {
        "content": "<p>but I only briefly read it</p>",
        "id": 224383179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611863449
    },
    {
        "content": "<p>I'll read it more carefully :)</p>",
        "id": 224383191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611863455
    },
    {
        "content": "<p>but yeah when I last looked it didn't seem like I could get the <code>&amp;mut (dyn Stream + Unpin)</code> case to work</p>",
        "id": 224383845,
        "sender_full_name": "tmandry",
        "timestamp": 1611863755
    },
    {
        "content": "<p>and it doesn't seem like it's working in that playground link</p>",
        "id": 224383902,
        "sender_full_name": "tmandry",
        "timestamp": 1611863766
    },
    {
        "content": "<p>I guess  I can build a branch of <span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts</span>'s PR and experiment</p>",
        "id": 224384342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611863973
    },
    {
        "content": "<p>I'm trying to remember why method dispatch was choosing the \"wrong\" method</p>",
        "id": 224387618,
        "sender_full_name": "tmandry",
        "timestamp": 1611865528
    },
    {
        "content": "<p>it seemed clear when I wrote that doc, but doesn't seem so clear from reading it <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span></p>",
        "id": 224387755,
        "sender_full_name": "tmandry",
        "timestamp": 1611865604
    },
    {
        "content": "<p>I think it might be that despite having a receiver of type <code>&amp;mut dyn (Stream&lt;Item = ()&gt; + Unpin)</code>, the algorithm starts with <code>dyn (Stream&lt;Item = ()&gt; + Unpin)</code> somehow</p>",
        "id": 224388003,
        "sender_full_name": "tmandry",
        "timestamp": 1611865779
    },
    {
        "content": "<p>Okay, that wasn't quite right</p>",
        "id": 224426753,
        "sender_full_name": "tmandry",
        "timestamp": 1611890590
    },
    {
        "content": "<p>I <del>somehow</del> got the algorithm pseudocode wrong in my doc</p>",
        "id": 224426771,
        "sender_full_name": "tmandry",
        "timestamp": 1611890617
    },
    {
        "content": "<p>it's quite subtle and the logic isn't all in one place. also I wrote that part late at night :(</p>",
        "id": 224427448,
        "sender_full_name": "tmandry",
        "timestamp": 1611891445
    },
    {
        "content": "<p>but what it comes down to is that we <em>always</em> consider inherent methods before extension methods, and the method provided by the <code>Stream</code> trait is considered an inherent method of <code>dyn Stream</code></p>",
        "id": 224428095,
        "sender_full_name": "tmandry",
        "timestamp": 1611892357
    },
    {
        "content": "<p>notably, we consider inherent methods of \"adjusted\" types, like autoderefs (so <code>dyn Stream</code> in this case)</p>",
        "id": 224428127,
        "sender_full_name": "tmandry",
        "timestamp": 1611892416
    },
    {
        "content": "<p>before ever considering extension methods, even those impl'd directly on the original type itself (<code>&amp;mut dyn ...</code> here)</p>",
        "id": 224428132,
        "sender_full_name": "tmandry",
        "timestamp": 1611892429
    },
    {
        "content": "<p>I updated the <a href=\"https://hackmd.io/hggAwCSqTj-0YQJi4y9gjg#Dispatch-algorithm\">dispatch algorithm</a> in the doc</p>",
        "id": 224428133,
        "sender_full_name": "tmandry",
        "timestamp": 1611892432
    },
    {
        "content": "<p>I think changing this \"priority\" scheme would be a breaking change</p>",
        "id": 224428301,
        "sender_full_name": "tmandry",
        "timestamp": 1611892662
    },
    {
        "content": "<p>one non-breaking way to fix it is to consider the where clauses on the methods themselves before picking them, which would cause us to skip over the inherent method causing our compiler error, and pick the extension method instead</p>",
        "id": 224428411,
        "sender_full_name": "tmandry",
        "timestamp": 1611892770
    },
    {
        "content": "<p>(this is strictly more permissive, since we are giving you a \"second chance\" during method dispatch resolution, essentially)</p>",
        "id": 224428481,
        "sender_full_name": "tmandry",
        "timestamp": 1611892821
    },
    {
        "content": "<p>but this and other approaches are included in the doc</p>",
        "id": 224428491,
        "sender_full_name": "tmandry",
        "timestamp": 1611892845
    },
    {
        "content": "<p>In case the above is hard to follow:</p>\n<ul>\n<li>an <strong>inherent method</strong> is a method defined inside <code>impl Foo {}</code> or <code>trait Bar {}</code></li>\n<li>an <strong>extension method</strong> is a method defined inside <code>impl Bar for Foo {}</code></li>\n</ul>",
        "id": 224428583,
        "sender_full_name": "tmandry",
        "timestamp": 1611892945
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> that makes sense, I wondered if it was to do with the \"inherent-ness\" of dyn types</p>",
        "id": 225193903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612460041
    },
    {
        "content": "<p>I wonder</p>",
        "id": 225193945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612460045
    },
    {
        "content": "<p>that is probably backwards compatible</p>",
        "id": 225193981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612460064
    },
    {
        "content": "<p>we already have special logic identifying those methods for the purposes of deciding if a trait is object safe</p>",
        "id": 225194003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612460078
    },
    {
        "content": "<p>it could exclude them from being inherent</p>",
        "id": 225194113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612460133
    },
    {
        "content": "<p>I'm curious why my playground wasn't encountering said problem?</p>",
        "id": 225194135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612460143
    },
    {
        "content": "<p>(<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2ae78226216e3e4c2ef984b4045a2a7d\">playground</a></p>",
        "id": 225194289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612460198
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=d728d6de2e1966b56767ede460d2dd4f\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=d728d6de2e1966b56767ede460d2dd4f</a> the problem is just <code>&amp;mut dyn</code>'s right?</p>",
        "id": 225213042,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1612468352
    },
    {
        "content": "<p>^ yep it seems like it's just <code>&amp;mut dyn</code></p>",
        "id": 225216243,
        "sender_full_name": "tmandry",
        "timestamp": 1612469725
    },
    {
        "content": "<p>I see</p>",
        "id": 226507581,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613478877
    },
    {
        "content": "<p>/me thinks</p>",
        "id": 226507601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613478896
    },
    {
        "content": "<p>Is the reason only <code>&amp;mut self</code> fails something like:<br>\nWe have these 4 impls</p>\n<ol>\n<li>\n<p><code>impl Iterator for dyn Iterator</code> (I think the compiler generates something like this?)<br>\n<code>map</code>'s self: dyn Iterator (Self: !Sized)</p>\n</li>\n<li>\n<p><code>impl&lt;I: Iterator + ?Sized&gt; Iterator for &amp;mut I</code><br>\n<code>map</code>'s self: &amp;mut dyn Iterator</p>\n</li>\n<li>\n<p><code>impl Stream for dyn Stream</code> (I think the compiler generates something like this?)<br>\n<code>map</code>'s self: &amp;mut dyn Iterator (but Self: !Sized)</p>\n</li>\n<li>\n<p><code>impl&lt;S: Stream + ?Sized&gt; Stream for &amp;mut S</code><br>\n<code>next</code>'s self = &amp;mut &amp;mut dyn Iterator</p>\n</li>\n</ol>\n<p>So for <code>self</code> things like Iterator::map, when <code>adj_self_ty = self_ty = &amp;mut dyn Iterator</code> <a href=\"https://github.com/rust-lang/rust/issues/1\">#1</a> isnt a candidate and is skipped, but in the &amp;mut Self case, <code>adt_self_ty = self_ty = &amp;mut dyn Iterator</code> matches <a href=\"https://github.com/rust-lang/rust/issues/3\">#3</a> and it is before we try <code>adt_self_ty = &amp;mut self_ty</code>and match <a href=\"https://github.com/rust-lang/rust/issues/4\">#4</a> correctly? (this is me only starting to understand what <code>xform_self</code> does)</p>",
        "id": 226749056,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1613607839
    },
    {
        "content": "<p>Though I could be wrong. while writing <a href=\"https://github.com/rust-lang/rust/issues/965\">#965</a> I saw that if you a \"reborrowing\" a &amp;mut to a method that takes &amp;Self its even worse: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a464f7d3df03f2189537531c306038f5\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a464f7d3df03f2189537531c306038f5</a></p>",
        "id": 226835342,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1613664756
    },
    {
        "content": "<p>requiring <code>(&amp;&amp;*mut_ref_dyn_obj).method_that_takes_shared_reference()</code>to resolve</p>",
        "id": 226835431,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1613664792
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> on twitter suggested that this may be resolvable without changing the language, and suggested I make an issue: <a href=\"https://github.com/rust-lang/rust/issues/82825\">https://github.com/rust-lang/rust/issues/82825</a></p>",
        "id": 229066112,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1615006996
    },
    {
        "content": "<p>Seems i somehow missed this thread! I posted my current thinking here: <a href=\"#narrow/stream/144729-wg-traits/topic/dyn.20trait.20.26.20.22auto.20trait.20polymorphism.22\">https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits/topic/dyn.20trait.20.26.20.22auto.20trait.20polymorphism.22</a></p>",
        "id": 270823616,
        "sender_full_name": "Charles Lew",
        "timestamp": 1644063463
    },
    {
        "content": "<p>Wrote a new version that almost works on current nightly rust. There's one <code>todo!</code> though that should be fixed somehow.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(ptr_metadata)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(adt_const_params)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(incomplete_features)]</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">future</span>::<span class=\"n\">Future</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">pin</span>::<span class=\"n\">Pin</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">task</span>::<span class=\"n\">Context</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">task</span>::<span class=\"n\">Poll</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">marker</span>::<span class=\"n\">PhantomData</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ptr</span>::<span class=\"p\">{</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">DynMetadata</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">rc</span>::<span class=\"n\">Rc</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(PartialEq, Eq)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">ThreadSafety</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">NA</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Send</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Sync</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">SendAndSync</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Next</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">TS</span>: <span class=\"nc\">ThreadSafety</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">async_iter_data</span>: <span class=\"o\">*</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">async_iter_metadata</span>: <span class=\"nc\">DynMetadata</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">AsyncIterator</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"n\">TS</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">Item</span><span class=\"o\">=</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">phantom_data</span>: <span class=\"nc\">PhantomData</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Rc</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">TS</span>: <span class=\"nc\">ThreadSafety</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Next</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">TS</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">poll</span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"nc\">Pin</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ctx</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Poll</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">iter</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">AsyncIterator</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"n\">TS</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ptr</span>::<span class=\"n\">from_raw_parts_mut</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">async_iter_data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">async_iter_metadata</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">iter</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">AsyncIterator</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"n\">TS</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">iter</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Pin</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">iter</span><span class=\"p\">).</span><span class=\"n\">poll_next</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Next</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">ThreadSafety</span>::<span class=\"nb\">Send</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Next</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">ThreadSafety</span>::<span class=\"nb\">Sync</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Next</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">ThreadSafety</span>::<span class=\"n\">SendAndSync</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Next</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">ThreadSafety</span>::<span class=\"n\">SendAndSync</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">AsyncIterator</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">TS</span>: <span class=\"nc\">ThreadSafety</span><span class=\"o\">&gt;</span>: <span class=\"nb\">Unpin</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">poll_next</span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"nc\">Pin</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cx</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Poll</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Next</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">TS</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">AsyncIterator</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"n\">TS</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">todo!</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// should be `self`</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">async_iter_data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">async_iter_metadata</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">to_raw_parts</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Next</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">async_iter_data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">async_iter_metadata</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">phantom_data</span>: <span class=\"nc\">PhantomData</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 271544954,
        "sender_full_name": "Charles Lew",
        "timestamp": 1644568721
    },
    {
        "content": "<p>Curious what people thinks. <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> <span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts [he/they]</span></p>",
        "id": 271545129,
        "sender_full_name": "Charles Lew",
        "timestamp": 1644568835
    },
    {
        "content": "<p>Seems the todo!() is <a href=\"https://github.com/rust-lang/rust/issues/54998\">#54998</a></p>",
        "id": 271562791,
        "sender_full_name": "Charles Lew",
        "timestamp": 1644578750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> thanks for sharing! I find it to be quite a bit to take in, and I'm not sure I fully understand it.</p>",
        "id": 271810391,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1644835938
    },
    {
        "content": "<p>Something worth noting though, and I'm not sure if you're addressing this, is that at least currently we're looking to make an <code>async fn next</code> function the primary interface which people need to implement. I believe this has interactions with object safety which may be different than what you're describing.</p>",
        "id": 271810506,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1644836006
    },
    {
        "content": "<p>I know the design has moved on:) This is just a thinking exercise trying to see what it takes to implement the \"original\" design, to see what's currently lacking in language expressiveness.</p>",
        "id": 272052638,
        "sender_full_name": "Charles Lew",
        "timestamp": 1644967486
    },
    {
        "content": "<p>auto trait polymorphism is something I'd like to be able to express, it's a question of how to spell it</p>",
        "id": 272161273,
        "sender_full_name": "tmandry",
        "timestamp": 1645037702
    }
]