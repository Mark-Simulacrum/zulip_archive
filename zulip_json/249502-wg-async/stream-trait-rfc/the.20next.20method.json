[
    {
        "content": "<p>So I was advocating for including the <code>next()</code> method, but in the recent lang team meeting, <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> raised the point that it makes migration from the futures crate just a bit more difficult</p>",
        "id": 208350698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598625499
    },
    {
        "content": "<p>In particular, if we just move the core trait, then we can seamlessly redirect futures-core to the new trait in stdlib in a minor release with zero possibility of breakage</p>",
        "id": 208350736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598625518
    },
    {
        "content": "<p>but if we add the <code>next</code> method, then there is the possibility of breakage unless people upgrade <em>both</em> futures-core <em>and</em> the futures-util library</p>",
        "id": 208350755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598625534
    },
    {
        "content": "<p>eventually we're going to have to wrestle with this (and we talked about some strategies, such as <code>[cfg(accessible)]</code>)</p>",
        "id": 208350781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598625552
    },
    {
        "content": "<p>but maybe we should put it off until then :)</p>",
        "id": 208350810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598625568
    },
    {
        "content": "<p>I guess the question is how many consumers of stream would be able to get by with just <code>next</code></p>",
        "id": 208350990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598625657
    },
    {
        "content": "<p>maybe <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span>, <span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts</span> or <span class=\"user-mention\" data-user-id=\"207781\">@Lucio Franco</span> you all have opinions on this?</p>",
        "id": 208351017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598625673
    },
    {
        "content": "<p>Tokio is about to publish a 0.3 and 1.0 later this year, I think we could accept some pain for a bit. I _personally_ am kinda in the boat that we just break stuff now for the future. I think having next on the stream trait would be nice.</p>",
        "id": 208352559,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1598626375
    },
    {
        "content": "<p>I think <code>try_next</code> and <code>next</code> are the main ones I've seen, you can basically achieve everything with those and a while loop. I can pass this question along to the others on the team to get some feedback.</p>",
        "id": 208352611,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1598626404
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 208352815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598626486
    },
    {
        "content": "<p>If the methods will be on the main <code>Stream</code> trait, like they are for <code>Iterator</code>, I think the longer we wait, the <strong>more</strong> code that <em>could</em> break. More <code>Ext</code> traits can appear, and be depended on. There was 1, but I now know of at least 4 that provide a <code>next</code> method: <code>futures-util</code>, <code>async-std</code>, <code>tokio</code>, and <code>futures-lite</code>.</p>",
        "id": 208355118,
        "sender_full_name": "Sean McArthur",
        "timestamp": 1598627531
    },
    {
        "content": "<p>What I mean to say is, I'd be for breaking earlier than later, because it could mean less breakage overall.</p>",
        "id": 208355451,
        "sender_full_name": "Sean McArthur",
        "timestamp": 1598627619
    },
    {
        "content": "<p>For <code>async-std</code> it would mean we would no longer need to depend on <code>futures-core</code> since all traits and types we use can be imported from <code>std</code> directly. Given we don't use <code>futures-util</code> but instead define our own Stream adapters we won't be affected by the same issues as other projects.</p>\n<p>This needs to be discussed this with the team, but my inclination is that we'll be able to bump the MSRV for <code>async-std</code> in a minor patch (like proposed for <code>futures-{core,util}</code>), and when doing so we can use that opportunity to also switch the <code>Stream::next</code> impl.</p>",
        "id": 208359112,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1598629277
    },
    {
        "content": "<p>Alternatively, this could be more motivation for \"high priority/low priority\" methods which would unblock addition of more Iterator methods as well</p>",
        "id": 208359844,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1598629623
    },
    {
        "content": "<p>Specifically on <code>futures-rs</code> though: I would think that bumping the minimum Rust version in a minor patch to cause more issues than a potential mismatch between the <code>futures-core</code> and <code>futures-util</code> versions.</p>\n<p>For example at work we're not able to upgrade to a recent compiler because of <a href=\"https://github.com/rust-lang/rust/issues/72470\">https://github.com/rust-lang/rust/issues/72470</a>. This means that if all of our dependencies switch over to use <code>std::stream::Stream</code> under the hood, we'll no longer be able to update our dependencies.</p>\n<p>The version mismatch issue of <code>futures-{core,util}</code> should be fixable in most projects by doing a <code>cargo update</code>. I think we're already accepting a certain degree of complications; adding <code>Stream::next</code> seems less of an issue in comparison.</p>\n<p><strong>edit</strong>: To clarify, <strong>not</strong> suggesting <code>futures-rs</code> take a different approach.</p>",
        "id": 208360750,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1598630023
    },
    {
        "content": "<p>I don't know if this is a good idea, but futures-rs <em>could</em> use a build script to either reexport from std or define Stream itself depending on the rust version</p>",
        "id": 208366421,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1598632835
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243558\">@Steven Fackler</span> we were thinking that the <code>cfg-accessible</code> feature would be ideal for that</p>",
        "id": 208378746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598639228
    },
    {
        "content": "<p>i.e., if the <code>Stream</code> trait exists, don't include the <code>next</code> method</p>",
        "id": 208378760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598639236
    },
    {
        "content": "<p>the main probelm is that we'll have to release a new minor version of <code>future-util</code> to make that change</p>",
        "id": 208378775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598639245
    },
    {
        "content": "<p>(same with a build-rs based change)</p>",
        "id": 208378781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598639250
    },
    {
        "content": "<p>Ah right</p>",
        "id": 208378789,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1598639254
    },
    {
        "content": "<p>and some folks may not upgrade to it</p>",
        "id": 208378796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598639256
    },
    {
        "content": "<p>though of course they can with <code>cargo update -p</code></p>",
        "id": 208378803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598639263
    },
    {
        "content": "<p>cfg-accessible also has MSRV issues, but a build script would avoid it</p>",
        "id": 208378882,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1598639284
    },
    {
        "content": "<p>yeah that's true</p>",
        "id": 208379107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598639419
    },
    {
        "content": "<p>We can add <code>next</code> method when releasing <code>futures-core</code> 1.0, so I think either is fine. (Personally, I prefer to add <code>next</code> method to <code>Stream</code>.)</p>",
        "id": 208416445,
        "sender_full_name": "Taiki Endo",
        "timestamp": 1598674857
    },
    {
        "content": "<p>If you are interested, this is a (wip) list of things I would like to do in the next version of <code>futures</code>: &lt;<a href=\"https://gist.github.com/taiki-e/c09532b59a5bcaef7854b46b01c65f48\">https://gist.github.com/taiki-e/c09532b59a5bcaef7854b46b01c65f48</a>&gt;</p>",
        "id": 208416507,
        "sender_full_name": "Taiki Endo",
        "timestamp": 1598674995
    },
    {
        "content": "<p>(I plan to open a similar one as an issue of futures-rs repo in the near future.)</p>",
        "id": 208416553,
        "sender_full_name": "Taiki Endo",
        "timestamp": 1598675052
    }
]