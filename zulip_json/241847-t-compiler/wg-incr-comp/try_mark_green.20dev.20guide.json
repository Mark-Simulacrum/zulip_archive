[
    {
        "content": "<p>Rustc Dev Guide explains the basic algorithm in the following way ...</p>",
        "id": 254067746,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1632151562
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Try-mark-green works as follows:\n\n- First check if the query Q was executed during the previous compilation.\n  - If not, we can just re-execute the query as normal, and assign it the\n    color of red.\n- If yes, then load the &#39;dependent queries&#39; of Q.\n- If there is a saved result, then we load the `reads(Q)` vector from the\n  query DAG. The &quot;reads&quot; is the set of queries that Q executed during\n  its execution.\n  - For each query R in `reads(Q)`, we recursively demand the color\n    of R using try-mark-green.\n    - Note: it is important that we visit each node in `reads(Q)` in same order\n      as they occurred in the original compilation. See [the section on the\n      query DAG below](#dag).\n    - If **any** of the nodes in `reads(Q)` wind up colored **red**, then Q is\n      dirty.\n      - We re-execute Q and compare the hash of its result to the hash of the\n        result from the previous compilation.\n      - If the hash has not changed, we can mark Q as **green** and return.\n    - Otherwise, **all** of the nodes in `reads(Q)` must be **green**. In that\n      case, we can color Q as **green** and return.\n</code></pre></div>",
        "id": 254067784,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1632151566
    },
    {
        "content": "<p>but it's missing what happens near the end when one or more <code>reads(Q)</code> are red if we re-execute query <code>Q</code> and the hash has changed</p>",
        "id": 254067980,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1632151650
    },
    {
        "content": "<p>I guess it should just say that Q is red and that we store the hash of the new result and maybe the result too (depending on how the query is configured)</p>",
        "id": 254068114,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1632151693
    },
    {
        "content": "<p>if I'm not wrong that's this part of the code <a href=\"https://github.com/rust-lang/rust/blob/497ee321af3b8496eaccd7af7b437f18bab81abf/compiler/rustc_query_system/src/dep_graph/graph.rs#L552-L562\">https://github.com/rust-lang/rust/blob/497ee321af3b8496eaccd7af7b437f18bab81abf/compiler/rustc_query_system/src/dep_graph/graph.rs#L552-L562</a></p>",
        "id": 254069306,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1632152161
    },
    {
        "content": "<p>so yeah, maybe saying that once you find one of such cases there's no need to keep checking for the rest of the dependencies and you can just re-execute Q, mark as red and store it's hash</p>",
        "id": 254069535,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1632152236
    }
]