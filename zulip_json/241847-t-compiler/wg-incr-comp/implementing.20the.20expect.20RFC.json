[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> -- I'm thinking about how to implement <a href=\"https://github.com/rust-lang/rust/issues/85549\">https://github.com/rust-lang/rust/issues/85549</a> (cc <span class=\"user-mention\" data-user-id=\"369415\">@xFrednet</span>).</p>",
        "id": 239766649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621610021
    },
    {
        "content": "<p>It doesn't fit especially well with our incremental system.</p>",
        "id": 239766668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621610029
    },
    {
        "content": "<p>What we need to do is to be able to tell:</p>\n<ul>\n<li>were any lints generated within this node?</li>\n</ul>",
        "id": 239766689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621610041
    },
    {
        "content": "<p>of course, those lints could be generated at any point in compilation</p>",
        "id": 239766758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621610057
    },
    {
        "content": "<p>I think this is a case where I would really want a model more like the adapton model</p>",
        "id": 239766834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621610101
    },
    {
        "content": "<p>where you can \"push writes\" to a bit of \"mutable state\"</p>",
        "id": 239766854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621610108
    },
    {
        "content": "<p>(a collection of \"seen lints\")</p>",
        "id": 239766863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621610112
    },
    {
        "content": "<p>I've thought about how to model that within salsa</p>",
        "id": 239766939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621610127
    },
    {
        "content": "<p>I was going to setup a method that generates \"side effects\"</p>",
        "id": 239766953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621610134
    },
    {
        "content": "<p>which basically get collected in a side-vector along the main result</p>",
        "id": 239766964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621610139
    },
    {
        "content": "<p>and accumulated by the (transitive) set of queries that a query Q performs</p>",
        "id": 239766985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621610147
    },
    {
        "content": "<p>so that you can say \"what side effects were part of Q\"</p>",
        "id": 239766998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621610151
    },
    {
        "content": "<p>and you get all the side-effects from Q and any queries that it transitively executed</p>",
        "id": 239767015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621610158
    },
    {
        "content": "<p>that way the lint pass could ask \"what expect lints were seen\" (for example)</p>",
        "id": 239767076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621610172
    },
    {
        "content": "<p>I've yet to come up with a better idea, maybe that's just the thing to do ?</p>",
        "id": 239767104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621610182
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/implementing.20the.20expect.20RFC/near/239766834\">said</a>:</p>\n<blockquote>\n<p>I think this is a case where I would really want a model more like the adapton model</p>\n</blockquote>\n<p>What is the adapton model?</p>",
        "id": 239767256,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1621610248
    },
    {
        "content": "<p><a href=\"http://adapton.org/\">http://adapton.org/</a></p>",
        "id": 239767440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621610316
    },
    {
        "content": "<p>I dont' actually think we want that</p>",
        "id": 239767453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621610323
    },
    {
        "content": "<p>I like the query system, it can be explained relatively easily</p>",
        "id": 239767471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621610333
    },
    {
        "content": "<p>the side-effects that I describe are a nice fit</p>",
        "id": 239767479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621610338
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'll let you know when I had time to think about this is some detail</p>",
        "id": 240174877,
        "sender_full_name": "mw",
        "timestamp": 1621943245
    },
    {
        "content": "<p>I might prototype my proposal in salsa, <span class=\"user-mention\" data-user-id=\"124287\">@mw</span></p>",
        "id": 240214894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621960394
    },
    {
        "content": "<p>Diagnostics are already saved and replayed by the incr. comp. engine. Adding a <code>source_lint: (HirId, Lint)</code> to the <code>Diagnostic</code> struct may provide with the necessary information. Then, an iteration over all the emitted diagnostics would have the necessary information to mark the <code>expect</code> attribute as used.</p>",
        "id": 240235174,
        "sender_full_name": "cjgillot",
        "timestamp": 1621969641
    },
    {
        "content": "<p>Another possibility would be to create some kind of <code>mark_attribute</code> query, and verify at the end of a compilation whether a DepNode for <code>mark_attribute(my_attr)</code> exists. The query engine will attempt to mark this query green, so it will create a DepNode in the current session with it. At the end of the compilation session, we just need to check the query's cache for filled/empty buckets.</p>",
        "id": 240235871,
        "sender_full_name": "cjgillot",
        "timestamp": 1621970006
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/implementing.20the.20expect.20RFC/near/240235174\">said</a>:</p>\n<blockquote>\n<p>Diagnostics are already saved and replayed by the incr. comp. engine. Adding a <code>source_lint: (HirId, Lint)</code> to the <code>Diagnostic</code> struct may provide with the necessary information. Then, an iteration over all the emitted diagnostics would have the necessary information to mark the <code>expect</code> attribute as used.</p>\n</blockquote>\n<p>Interesting, after reading this comment I've found a query called <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_query_impl/plumbing/struct.QueryCtxt.html#method.store_diagnostics\"><code>store_diagnostics</code></a> with a corresponding <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_query_impl/plumbing/struct.QueryCtxt.html#method.load_diagnostics\"><code>load_diagnostics</code></a> query. I'll investigate that lead for a bit <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 240243599,
        "sender_full_name": "xFrednet",
        "timestamp": 1621973495
    },
    {
        "content": "<p>Yes, we do record diagnostics for each query and store them so they can be replayed in a subsequent compilation session without actually re-executing the query. This is safe because there is no way to access the value of the diagnostics from a query, so no query result can depend on these \"side effects\". Extending that to also record data about lints being produced seems fine as long as we guarantee that that data is only accessed after the last query has been executed, right? </p>\n<p>We could think about an adapton-like extension to the query system where we have \"queries\" that can be written to and that panic if a write occurs after their result has been read for the first time. As long as the writes a query are completely determined by its inputs that should work too. However, I'd like to keep the query system as simple as possible, so unless this is really necessary I'd rather not go that route.</p>",
        "id": 240300126,
        "sender_full_name": "mw",
        "timestamp": 1622022505
    }
]