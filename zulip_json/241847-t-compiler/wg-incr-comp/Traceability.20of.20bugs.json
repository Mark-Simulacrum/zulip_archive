[
    {
        "content": "<p>So it seems so far that we need some better way to spot bugs in incr-comp. Let's talk about ideas here?</p>",
        "id": 203854646,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594744029
    },
    {
        "content": "<p>Somehow preserving the cache on ICE is IMO the highest-impact change. People often wipe it accidentally (which sometimes just needs another edit).</p>",
        "id": 203854825,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594744137
    },
    {
        "content": "<p>Idea: if ICE was triggered, store a copy of the cache so that it can be sent for inspection.<br>\nDrawback: space usage<br>\nPossible mitigations: discarding MIR and llvm bitcode before storing. Compressing the cache (in gzip or similar)</p>",
        "id": 203854842,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594744146
    },
    {
        "content": "<p>Idea: store the history of changes together with the cache.<br>\nJustification: it's basically a cross-platform way of tracking the incr-comp work.<br>\nDrawbacks: you'd need to store the project's codebase somehow.<br>\nMitigations: ??</p>",
        "id": 203855168,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594744320
    },
    {
        "content": "<p>(I put ?? There because I don't remember if we mentioned drawbacks for that idea)</p>",
        "id": 203855270,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594744353
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> yeah, I agree. Backing up the cache that broke incr-comp seems the most straightforward way of adding traceability to the process.</p>",
        "id": 203855374,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594744409
    },
    {
        "content": "<p>We only need a single diff</p>",
        "id": 203855383,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594744415
    },
    {
        "content": "<p>Or rather, we need the original code, and the diff, which I don't think we can obtain right now, unless we store the whole crate source code in the cache</p>",
        "id": 203855687,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594744569
    },
    {
        "content": "<p>Yes</p>",
        "id": 203855721,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594744588
    },
    {
        "content": "<p>I forgot that <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>'s work is still in progress. They're looking to answer the question \"could incr-comp benefit from changes that might make it history-dependent or not?\"</p>",
        "id": 203855812,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594744648
    },
    {
        "content": "<blockquote>\n<p>Or rather, we need the original code, and the diff, which I don't think we can obtain right now, unless we store the whole crate source code in the cache</p>\n</blockquote>\n<p>You're right!</p>",
        "id": 203855991,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594744723
    },
    {
        "content": "<p>I've added it to the entry</p>",
        "id": 203856094,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594744784
    },
    {
        "content": "<p>What's currently making the cache platform-dependent? More than just endianness and pointer size (which is little and 64-bit in almost all cases)?</p>",
        "id": 203856511,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594744987
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> ^</p>",
        "id": 203856732,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594745089
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 203856762,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594745102
    },
    {
        "content": "<p>I ask them because I have no idea</p>",
        "id": 203856763,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594745102
    },
    {
        "content": "<p>It seems to be a bit of a rabbit hole, from what I've heard. But I don't know for certain.</p>",
        "id": 203856811,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594745124
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 203856812,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594745124
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 203856813,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594745124
    },
    {
        "content": "<p>(Wait did Zulip actually ping you three times, or is it just me who's seeing this?)</p>",
        "id": 203856953,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594745170
    },
    {
        "content": "<p>The message was duplicated 3 times</p>",
        "id": 203856986,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594745191
    },
    {
        "content": "<p>Fuck</p>",
        "id": 203857002,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594745199
    },
    {
        "content": "<p>(There, better... damn, this app needs some work. Okay, sorry for that. Zulip mobile seems to stumble when there's bad internet)</p>",
        "id": 203857125,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594745276
    },
    {
        "content": "<p>I'm not sure what else would contribute to incr-comp data being platform-dependent.</p>",
        "id": 203857182,
        "sender_full_name": "davidtwco",
        "timestamp": 1594745288
    },
    {
        "content": "<p>Same (at least in terms of being able to read the data on a different platform)</p>",
        "id": 203857312,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594745353
    },
    {
        "content": "<p>I wonder if we could mark platform-dependent queries as such and have the triple be an implicit argument of some sort so that regular invalidation is all that is necessary - might be enough to debug some incr-comp bugs from other platforms?</p>",
        "id": 203857461,
        "sender_full_name": "davidtwco",
        "timestamp": 1594745419
    },
    {
        "content": "<p>Oh, cool! Then I misunderstood what was exactly not cross-platform. Maybe the post-MIR steps?</p>",
        "id": 203857484,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594745433
    },
    {
        "content": "<p>But I would be happy with just having the data, platform dependent or not.</p>",
        "id": 203857494,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594745440
    },
    {
        "content": "<p>Well</p>",
        "id": 203857503,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594745446
    },
    {
        "content": "<p>That said, maybe it already works something like that - I should understand more about it before speculating.</p>",
        "id": 203857515,
        "sender_full_name": "davidtwco",
        "timestamp": 1594745454
    },
    {
        "content": "<p>What's the goal of making it platform independent?</p>",
        "id": 203857526,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594745462
    },
    {
        "content": "<p>Is this just so we can investigate bugs or so we can actually use the data in the cache?</p>",
        "id": 203857558,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594745476
    },
    {
        "content": "<p>The former seems useful the latter not so much IMO</p>",
        "id": 203857576,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594745488
    },
    {
        "content": "<p>I assume the former.</p>",
        "id": 203857579,
        "sender_full_name": "davidtwco",
        "timestamp": 1594745489
    },
    {
        "content": "<p>I think the former</p>",
        "id": 203857638,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594745507
    },
    {
        "content": "<p>Ok, just making sure we're all talking about the same things</p>",
        "id": 203857690,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594745522
    },
    {
        "content": "<p>In that case, I'm not sure it matters that the results of some queries are platform dependent as long as the on-disk format isn't (or at least, has well defined semantics for conversion).</p>",
        "id": 203857889,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594745575
    },
    {
        "content": "<p>Yas</p>",
        "id": 203857952,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594745597
    },
    {
        "content": "<p>But even then, I'd prefer to steer the direction of this project toward just getting the data as it is now <em>first</em>.</p>",
        "id": 203857995,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594745623
    },
    {
        "content": "<p>As long as you can convert it to something one can debug later, I'm happy with it being platform-dependent</p>",
        "id": 203857999,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594745623
    },
    {
        "content": "<p>We often have a tendency to come up with the <em>best</em> long term solution and then block incremental improvements on that long term plan. When there's a lot of benefit to be had to the flawed but better thing right <em>now</em></p>",
        "id": 203858101,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594745665
    },
    {
        "content": "<blockquote>\n<p>But even then, I'd prefer to steer the direction of this project toward just getting the data as it is now <em>first</em>.</p>\n</blockquote>\n<p>I've got no complaints with that either ^^</p>",
        "id": 203858105,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594745666
    },
    {
        "content": "<p>Just having this data would improve things substantially IMO</p>",
        "id": 203858134,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594745682
    },
    {
        "content": "<p>It's also not that hard to get a Windows VM on Linux or vice versa.</p>",
        "id": 203858175,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594745706
    },
    {
        "content": "<p>Yup. If I understand it correctly, we basically got no way to get data on our hands rn regarding these kinds of bugs right?</p>",
        "id": 203858217,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594745740
    },
    {
        "content": "<p>And that's probably covers 75% of the bugs reports we've seen.</p>",
        "id": 203858231,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594745754
    },
    {
        "content": "<p>That would be amazing</p>",
        "id": 203858292,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594745772
    },
    {
        "content": "<p>I think occasionally we do get a copy of the user's incr-cache if they knew to upload it to the bug.</p>",
        "id": 203858314,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594745788
    },
    {
        "content": "<p>But I'm not sure we know <em>what</em> to do with that.</p>",
        "id": 203858325,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594745796
    },
    {
        "content": "<p>Right, right. No, that makes sense. If we haven't gone through the process of answering what to do with the evidence, then how would we use it when we have it?</p>",
        "id": 203858525,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594745891
    },
    {
        "content": "<p>Perhaps someone else has a plan with what to do with it but I'm not aware of anything</p>",
        "id": 203858582,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594745918
    },
    {
        "content": "<p>It seems like there could perhaps be some sort of validation process we could just run on the data to see if some obvious things are wrong. Ie: this slice claims to have a length of 6billion elements. That's probably wrong.</p>",
        "id": 203858677,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594745973
    },
    {
        "content": "<p>But then if have such an algorithm, it seems like we could run this at ICE time (what I suggested above).</p>",
        "id": 203858736,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594746002
    },
    {
        "content": "<p>I realize I'm steering the conversation one way so if anyone wants to talk about something else, please feel free to interrupt me</p>",
        "id": 203858876,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594746050
    },
    {
        "content": "<p>It's okay</p>",
        "id": 203858895,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594746063
    },
    {
        "content": "<p>So to reproduce bugs, we don't just need the incremental cache, but also the source code that was attempted to be compiled, and even that is hard to come by sometimes</p>",
        "id": 203858922,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594746076
    },
    {
        "content": "<p>The number one question on my mind is: Is the cache getting corrupted somehow or is the cache valid and we have bug when we use that valid data?</p>",
        "id": 203858935,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594746082
    },
    {
        "content": "<p>But I guess easy to save when the ICE handler also saves the cache</p>",
        "id": 203858955,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594746090
    },
    {
        "content": "<p>This is a very green field, I feel. There might be many directions to pursue which could give big benefits</p>",
        "id": 203858959,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594746092
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/Traceability.20of.20bugs/near/203856511\">said</a>:</p>\n<blockquote>\n<p>What's currently making the cache platform-dependent? More than just endianness and pointer size (which is little and 64-bit in almost all cases)?</p>\n</blockquote>\n<p>there might be file paths that would need. to be normalized/relativized. Not sure.</p>",
        "id": 203859000,
        "sender_full_name": "pnkfelix",
        "timestamp": 1594746117
    },
    {
        "content": "<p>Well, a checker of the cache could be really useful not only just at the event of an ICE. It could also be used to debug incr-cache. Imagine giving it as a compiler flag (-check-incr-cache) and run it through some tests to see if it breaks the cache.</p>",
        "id": 203859209,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594746226
    },
    {
        "content": "<p>It <em>just</em> occured to me that MCVEs aren't particularly practical to synthesise for incr-comp bugs - we'd probably be working with full projects (and tons more log output) rather than individual files..</p>",
        "id": 203859232,
        "sender_full_name": "davidtwco",
        "timestamp": 1594746234
    },
    {
        "content": "<p>(I'm not 100% convinced that having ICE-free incr. comp. is much more important than having <em>effective</em> incr. comp. – when an ICE happens the workaround is always trivial, but when incr. comp. results in unexpectedly long compile times there is no workaround)</p>",
        "id": 203859333,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594746271
    },
    {
        "content": "<p>Well, more than ICE free, you want it to be correct</p>",
        "id": 203859364,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594746301
    },
    {
        "content": "<p>ICE is just an indicator of some incorrectness (that word feels weird)</p>",
        "id": 203859420,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594746340
    },
    {
        "content": "<p>Yeah, sure, that <em>is</em> important, but I'm not sure if we have any correctness bugs?</p>",
        "id": 203859431,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594746348
    },
    {
        "content": "<p>How would we know?</p>",
        "id": 203859451,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594746360
    },
    {
        "content": "<p>more that they're really hard to detect</p>",
        "id": 203859495,
        "sender_full_name": "pnkfelix",
        "timestamp": 1594746365
    },
    {
        "content": "<blockquote>\n<p>Is the cache getting corrupted somehow or is the cache valid and we have bug when we use that valid data?</p>\n</blockquote>\n<p>If the cache is corrupt, then we're either:</p>\n<ul>\n<li>\n<p>writing bad data to it and we could narrow the search space by running the validation routine at the end of the compilation session when we write to the cache.</p>\n</li>\n<li>\n<p>writing ok data which something <em>else</em> is messing with. For windows users, this might be an AV program or something.</p>\n</li>\n</ul>\n<p>If the cache is valid, then maybe the bug has something to do with how we restore cached data into the current compilation session's in-memory query cache.</p>",
        "id": 203859503,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594746375
    },
    {
        "content": "<p>Ah, not <em>soundness</em> bug</p>",
        "id": 203859507,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594746378
    },
    {
        "content": "<p>There isn't any kind of checksum on the cache data, right?</p>",
        "id": 203859577,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594746420
    },
    {
        "content": "<p>That we're seeing these ICEs trying to use the incr-cache data after it's been loaded suggests we have correctness bugs because the ICE's aren't from asserts about the incr-cache, they're from general asserts in std lib (ie, index out of range).</p>",
        "id": 203859592,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594746428
    },
    {
        "content": "<p>I thought there was</p>",
        "id": 203859603,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594746433
    },
    {
        "content": "<p>Which is why it's perplexing to me that some of these issues get reported after a new release is shipped and clearing the cache goes away</p>",
        "id": 203859641,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594746457
    },
    {
        "content": "<p>That's what the checksum was supposed to prevent.</p>",
        "id": 203859655,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594746466
    },
    {
        "content": "<p>Probably related: I see frequent complaints from compiler devs that their stage1 cache isn't getting invalidated correctly.</p>",
        "id": 203859722,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594746487
    },
    {
        "content": "<p>And then you get weird linking errors</p>",
        "id": 203859742,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594746495
    },
    {
        "content": "<p>You mean having the compiler version in the cache?</p>",
        "id": 203859744,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594746497
    },
    {
        "content": "<p>Yeah I thought that was part of the checksum</p>",
        "id": 203859758,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594746505
    },
    {
        "content": "<p>I think that is separate</p>",
        "id": 203859773,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594746515
    },
    {
        "content": "<p>Ah</p>",
        "id": 203859781,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594746518
    },
    {
        "content": "<blockquote>\n<p>That we're seeing these ICEs trying to use the incr-cache data after it's been loaded suggests we have correctness bugs because the ICE's aren't from asserts about the incr-cache, they're from general asserts in std lib (ie, index out of range).</p>\n</blockquote>\n<p>This is why these issues worry me, mostly. If incr-comp is breaking basic invariants (\"hey NO bringing usizes below zero!\") then what the heck might be happening there.</p>",
        "id": 203859860,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594746565
    },
    {
        "content": "<p>I think we want to... just make sure incr-comp sits on steady foundations, mostly</p>",
        "id": 203860040,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594746648
    },
    {
        "content": "<p>Just in case</p>",
        "id": 203860055,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594746654
    },
    {
        "content": "<p>I don't want to have incr-comp be fast only to later realize it ain't compiling correctly. Like some -O3 optimizations in clang breaking your code</p>",
        "id": 203860176,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594746720
    },
    {
        "content": "<p>I don't know if these worries make sense. Can you break the compilation artifacts if incr-comp is not working correctly? I'm assuming you can, but maybe you can't?</p>",
        "id": 203860331,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594746807
    },
    {
        "content": "<p>things like that are an argument, in a way, against adding history-dependence</p>",
        "id": 203860345,
        "sender_full_name": "pnkfelix",
        "timestamp": 1594746816
    },
    {
        "content": "<p>because bugs are more shallow when results are history independent</p>",
        "id": 203860376,
        "sender_full_name": "pnkfelix",
        "timestamp": 1594746839
    },
    {
        "content": "<p>(because the search for bugs is more effectively distributed across the audience of Rust programmers)</p>",
        "id": 203860439,
        "sender_full_name": "pnkfelix",
        "timestamp": 1594746856
    },
    {
        "content": "<p>something kind of related to the discussion, I have seen some incr comp bug reports where we don't have the needed information to reproduce the issue but we don't provide the right information for people that report bugs to provide such information, so ...</p>",
        "id": 204023074,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594853717
    },
    {
        "content": "<p>I wonder if we can document something better or if we can have some kind of ICE breaker group that we can ping and a bot would ping some of us but also would provide some information to reporters</p>",
        "id": 204023175,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594853777
    },
    {
        "content": "<p>the problem I see also is that some reports are old and they may not be easy to reproduce because reporters may have move on</p>",
        "id": 204023215,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1594853825
    }
]