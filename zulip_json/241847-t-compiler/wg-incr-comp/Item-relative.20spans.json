[
    {
        "content": "<p>I recently submitted <a href=\"https://github.com/rust-lang/rust/issues/84373\">#84373</a>. This PR changes the incr-comp encoding of spans to only encode the position relative to the surrounding definition. This PR unlocks some massive opportunities for incr compilation: up to 25% for cargo-check. More gains will be accessible later to a review of span usage by the MIR optimizer (for instance).</p>\n<p>I am looking for a reviewer inside the work-group to evaluate the soundness of the design.</p>",
        "id": 236718226,
        "sender_full_name": "cjgillot",
        "timestamp": 1619719246
    },
    {
        "content": "<p>does this affect multithreaded builds?</p>",
        "id": 236718911,
        "sender_full_name": "oliver",
        "timestamp": 1619719468
    },
    {
        "content": "<p>Theoretically, yes.</p>",
        "id": 236719188,
        "sender_full_name": "cjgillot",
        "timestamp": 1619719594
    },
    {
        "content": "<p>if theoretical then no implementation</p>",
        "id": 236719574,
        "sender_full_name": "oliver",
        "timestamp": 1619719761
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 236734612,
        "sender_full_name": "cjgillot",
        "timestamp": 1619725952
    },
    {
        "content": "<p>does this pr actually involve multithreading rustc, or would that be an extension of the pr and this topic?</p>",
        "id": 236752215,
        "sender_full_name": "oliver",
        "timestamp": 1619732537
    },
    {
        "content": "<p>I think no</p>",
        "id": 236752252,
        "sender_full_name": "oliver",
        "timestamp": 1619732563
    },
    {
        "content": "<p>The modification is independent of multithreading, and should apply to both single and multi thread versions equally.</p>",
        "id": 236868157,
        "sender_full_name": "cjgillot",
        "timestamp": 1619802300
    },
    {
        "content": "<p>hi <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> and <span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span></p>",
        "id": 249994258,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629383208
    },
    {
        "content": "<p>I figure we can talk discussion of scheduling here</p>",
        "id": 249994265,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629383214
    },
    {
        "content": "<p>Aug 20, after the steering meeting works for me</p>",
        "id": 249994378,
        "sender_full_name": "mw",
        "timestamp": 1629383275
    },
    {
        "content": "<p>Before or after the steering meeting works for me.</p>",
        "id": 249994488,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1629383311
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> I didn’t know how to interpret your response on the other thread: did you mean that you had a conflict after the steering meeting? Or that you were available after the steering meeting?</p>",
        "id": 249995219,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629383641
    },
    {
        "content": "<p>I am available after the steering meeting.</p>",
        "id": 249995329,
        "sender_full_name": "cjgillot",
        "timestamp": 1629383679
    },
    {
        "content": "<p>okay. i’ll move the event. <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> and <span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> , can you privmsg me the appropriate emails to send Google Calendar invites to?</p>",
        "id": 249995779,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629383899
    },
    {
        "content": "<p>(or post them here if you don’t mind them being publicly archived.)</p>",
        "id": 249995803,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629383909
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> and <span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> , I forgot to say how we’d conduct the meeting</p>",
        "id": 250129604,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629471829
    },
    {
        "content": "<p>we can do it right here :)</p>",
        "id": 250129648,
        "sender_full_name": "mw",
        "timestamp": 1629471843
    },
    {
        "content": "<p>sounds great to me</p>",
        "id": 250129680,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629471852
    },
    {
        "content": "<p>so we’re here to discuss <a href=\"https://github.com/rust-lang/rust/pull/84373\">https://github.com/rust-lang/rust/pull/84373</a></p>",
        "id": 250129779,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629471906
    },
    {
        "content": "<p>regarding testing: <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> , you used to have a test infrastructure that used commit histories as basis for testing incr-comp, right?</p>",
        "id": 250130016,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629472003
    },
    {
        "content": "<p>I’m sitting here wondering if we could keep long-lived metadata somewhere about what commits in open-source Rust projects successfully compile. (I suppose a lot of them already have that in reports from their CI.) And then use that metadata to drive usage of commit logs</p>",
        "id": 250130142,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629472058
    },
    {
        "content": "<p>yes, but that was a long time ago</p>",
        "id": 250130149,
        "sender_full_name": "mw",
        "timestamp": 1629472061
    },
    {
        "content": "<p>basically, I’m really wondering about generalizing crater to operate on histories</p>",
        "id": 250130329,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629472133
    },
    {
        "content": "<p>so, you know, that slow thing can be even slower</p>",
        "id": 250130359,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629472144
    },
    {
        "content": "<p><code>:D</code></p>",
        "id": 250130383,
        "sender_full_name": "mw",
        "timestamp": 1629472154
    },
    {
        "content": "<p>I think anything like that is too far off for this PR</p>",
        "id": 250130426,
        "sender_full_name": "mw",
        "timestamp": 1629472175
    },
    {
        "content": "<p>Yes that is true</p>",
        "id": 250130435,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629472180
    },
    {
        "content": "<p>but its a problem that comes up again and again for us</p>",
        "id": 250130461,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629472194
    },
    {
        "content": "<p>Anyway the point is, for testing, it seems like the options are either: 1. figure out a way to get more automated testing to happen for incr-comp, or 2. get people to opt into using features like this</p>",
        "id": 250130603,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629472247
    },
    {
        "content": "<p>it would make for a good volunteer project: you don't have to know the compiler or Rust particularly well, just Git and so on</p>",
        "id": 250130616,
        "sender_full_name": "mw",
        "timestamp": 1629472256
    },
    {
        "content": "<p>In its current form, the PR is opt-in. I still need to adapt the incr hash tests (which is tedious).</p>",
        "id": 250130746,
        "sender_full_name": "cjgillot",
        "timestamp": 1629472310
    },
    {
        "content": "<p>I think ultimately we need both automated and manual testing</p>",
        "id": 250130915,
        "sender_full_name": "mw",
        "timestamp": 1629472383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> actually makes a good point, one that <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> already said on the PR: Its behind a <code>-Z</code> flag. The question of “how do we validate this” is a question we can work on answering <em>after we land the PR</em></p>",
        "id": 250130925,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629472387
    },
    {
        "content": "<p>so we don’t need to get bogged down in that here</p>",
        "id": 250130946,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629472403
    },
    {
        "content": "<p>yes, the fact that it is behind a flag makes it much easier to merge this, I think</p>",
        "id": 250130974,
        "sender_full_name": "mw",
        "timestamp": 1629472420
    },
    {
        "content": "<p>Apologies if this was answered in the PR thread but I didn't see it: does the PR affect performance if that flag isn't set? (I assume all of the benchmarks are with the flag enabled?)</p>",
        "id": 250131028,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1629472441
    },
    {
        "content": "<p>however, I'm a bit worried that the approach does not scale to a clean solution</p>",
        "id": 250131090,
        "sender_full_name": "mw",
        "timestamp": 1629472455
    },
    {
        "content": "<p>I mean, the implementation is pretty clean within the limits it has to work with</p>",
        "id": 250131134,
        "sender_full_name": "mw",
        "timestamp": 1629472481
    },
    {
        "content": "<p>but it needs to add extra hooks to dep tracking</p>",
        "id": 250131180,
        "sender_full_name": "mw",
        "timestamp": 1629472506
    },
    {
        "content": "<p>Latest perf with the flag unset features ~1.8% regression for incr-unchanged.</p>",
        "id": 250131215,
        "sender_full_name": "cjgillot",
        "timestamp": 1629472526
    },
    {
        "content": "<p>do we know where that comes from?</p>",
        "id": 250131367,
        "sender_full_name": "mw",
        "timestamp": 1629472575
    },
    {
        "content": "<p>hmm. Is there a way to guard more stuff with the flag to prevent that?</p>",
        "id": 250131371,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629472575
    },
    {
        "content": "<p>@mw: what would you consider as a clean solution for spans handling (in general)?</p>",
        "id": 250131396,
        "sender_full_name": "cjgillot",
        "timestamp": 1629472584
    },
    {
        "content": "<p>one that does not require a callback into the tracking system</p>",
        "id": 250131617,
        "sender_full_name": "mw",
        "timestamp": 1629472684
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/Item-relative.20spans/near/250131215\">said</a>:</p>\n<blockquote>\n<p>Latest perf with the flag unset features ~1.8% regression for incr-unchanged.</p>\n</blockquote>\n<p>is this the same as what <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> was commenting on <a href=\"https://github.com/rust-lang/rust/pull/84373#issuecomment-859452236\">here</a> ?</p>",
        "id": 250131670,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629472706
    },
    {
        "content": "<p>but I don't want to block work in this area. I don't have time to work on a \"clean solution\" myself</p>",
        "id": 250131705,
        "sender_full_name": "mw",
        "timestamp": 1629472729
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/Item-relative.20spans/near/250131371\">said</a>:</p>\n<blockquote>\n<p>hmm. Is there a way to guard more stuff with the flag to prevent that?</p>\n</blockquote>\n<p>I am not sure. There is the extra test for each span during lowering, and the modification of the span encoding.</p>",
        "id": 250131714,
        "sender_full_name": "cjgillot",
        "timestamp": 1629472731
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/Item-relative.20spans/near/250131670\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/Item-relative.20spans/near/250131215\">said</a>:</p>\n<blockquote>\n<p>Latest perf with the flag unset features ~1.8% regression for incr-unchanged.</p>\n</blockquote>\n<p>is this the same as what <span class=\"user-mention silent\" data-user-id=\"123856\">Vadim Petrochenkov</span> was commenting on <a href=\"https://github.com/rust-lang/rust/pull/84373#issuecomment-859452236\">here</a> ?</p>\n</blockquote>\n<p>Yes.</p>",
        "id": 250131739,
        "sender_full_name": "cjgillot",
        "timestamp": 1629472744
    },
    {
        "content": "<p>okay</p>",
        "id": 250131745,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629472747
    },
    {
        "content": "<p>You ask me, I think we should go for it</p>",
        "id": 250131768,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629472759
    },
    {
        "content": "<p>as in, progress here is worth the ~1.8% hit</p>",
        "id": 250131789,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629472769
    },
    {
        "content": "<p>the only other option I can imagine</p>",
        "id": 250131815,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629472786
    },
    {
        "content": "<p>is to dig into what <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> is talking about</p>",
        "id": 250131826,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629472792
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span>, do you know if eddyb's instruction-count based self-profiling already works?</p>",
        "id": 250131831,
        "sender_full_name": "mw",
        "timestamp": 1629472796
    },
    {
        "content": "<p>I can make a PR with just the encoding change, to have a comparison baseline.</p>",
        "id": 250131833,
        "sender_full_name": "cjgillot",
        "timestamp": 1629472796
    },
    {
        "content": "<p>that might help with pinning down the regression</p>",
        "id": 250131884,
        "sender_full_name": "mw",
        "timestamp": 1629472806
    },
    {
        "content": "<p>I'm generally OK with merging this</p>",
        "id": 250131934,
        "sender_full_name": "mw",
        "timestamp": 1629472838
    },
    {
        "content": "<p>I know they've used it successfully but it's not integrated into rustc yet. I think there's an open PR for that.</p>",
        "id": 250131935,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1629472839
    },
    {
        "content": "<p>we could enable it on nightly for check builds, maybe?</p>",
        "id": 250132016,
        "sender_full_name": "mw",
        "timestamp": 1629472882
    },
    {
        "content": "<p>I don't know how much that would help for finding bugs</p>",
        "id": 250132044,
        "sender_full_name": "mw",
        "timestamp": 1629472901
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/Item-relative.20spans/near/250132016\">said</a>:</p>\n<blockquote>\n<p>we could enable it on nightly for check builds, maybe?</p>\n</blockquote>\n<p>you mean in the CI alone?</p>",
        "id": 250132068,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629472917
    },
    {
        "content": "<p>We can enable it when rustc_bootstrap is set.</p>",
        "id": 250132074,
        "sender_full_name": "cjgillot",
        "timestamp": 1629472919
    },
    {
        "content": "<p>but it would be pretty harmless if there is one, right?</p>",
        "id": 250132081,
        "sender_full_name": "mw",
        "timestamp": 1629472920
    },
    {
        "content": "<p>I meant in general</p>",
        "id": 250132155,
        "sender_full_name": "mw",
        "timestamp": 1629472945
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/Item-relative.20spans/near/250132074\">said</a>:</p>\n<blockquote>\n<p>We can enable it when rustc_bootstrap is set.</p>\n</blockquote>\n<p>The motivation here is that then rustc developers would be trying it out?</p>",
        "id": 250132180,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629472958
    },
    {
        "content": "<p>but yeah, just for bootstrapping might be an idea too</p>",
        "id": 250132185,
        "sender_full_name": "mw",
        "timestamp": 1629472961
    },
    {
        "content": "<p>and presumably would know how to respond if something goes wrong?</p>",
        "id": 250132198,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629472967
    },
    {
        "content": "<p>That has not always worked well in the past :)</p>",
        "id": 250132212,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1629472977
    },
    {
        "content": "<p>But it is better than nothing</p>",
        "id": 250132240,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1629472992
    },
    {
        "content": "<p>hmm</p>",
        "id": 250132249,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629472996
    },
    {
        "content": "<p>well, we had this problem of people assuming that incremental in bootstrap doesn't work anyway</p>",
        "id": 250132278,
        "sender_full_name": "mw",
        "timestamp": 1629473016
    },
    {
        "content": "<p>and thus we would miss bugs that were already in beta</p>",
        "id": 250132299,
        "sender_full_name": "mw",
        "timestamp": 1629473028
    },
    {
        "content": "<p>I feel like there’s potentially something here, e.g. a “surprise me” mode in config.toml that people can use  to opt into being surprised.</p>",
        "id": 250132308,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629473034
    },
    {
        "content": "<p>We still have an action item to try to improve bootstrap’s handling of incremental</p>",
        "id": 250132417,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629473066
    },
    {
        "content": "<p>(in terms of doing a better job of reporting to people which ICEs, i.e. from which compiler stages and building which things, represent real bugs that should be reported…)</p>",
        "id": 250132469,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629473099
    },
    {
        "content": "<p>but anyway</p>",
        "id": 250132489,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629473106
    },
    {
        "content": "<p>A campaign to encourage rustc devs to use incremental for bootstrap</p>",
        "id": 250132672,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629473182
    },
    {
        "content": "<p>is something we should look into</p>",
        "id": 250132677,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629473186
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/Item-relative.20spans/near/250131617\">said</a>:</p>\n<blockquote>\n<p>one that does not require a callback into the tracking system</p>\n</blockquote>\n<p>I want to come back to this for a moment</p>",
        "id": 250132807,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629473242
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/Item-relative.20spans/near/250132807\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/Item-relative.20spans/near/250131617\">said</a>:</p>\n<blockquote>\n<p>one that does not require a callback into the tracking system</p>\n</blockquote>\n<p>I want to come back to this for a moment</p>\n</blockquote>\n<p>I wholeheartedly agree</p>",
        "id": 250132850,
        "sender_full_name": "cjgillot",
        "timestamp": 1629473267
    },
    {
        "content": "<p>I see there's also <a href=\"https://github.com/rust-lang/rust/pull/84762\">https://github.com/rust-lang/rust/pull/84762</a> which improves performance for the incr-patch scenarios. Is it likely we'd be able to land that in the next few months or is it still very much \"experimental\" as the title implies? I'm just trying to gauge the potential wins we're hoping for.</p>",
        "id": 250132872,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1629473282
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/Item-relative.20spans/near/250132872\">said</a>:</p>\n<blockquote>\n<p>I see there's also <a href=\"https://github.com/rust-lang/rust/pull/84762\">https://github.com/rust-lang/rust/pull/84762</a> which improves performance for the incr-patch scenarios. Is it likely we'd be able to land that in the next few months or is it still very much \"experimental\" as the title implies? I'm just trying to gauge the potential wins we're hoping for.</p>\n</blockquote>\n<p>This is essentially <a href=\"https://github.com/rust-lang/rust/issues/84373\">#84373</a> with the flag set by default.</p>",
        "id": 250133051,
        "sender_full_name": "cjgillot",
        "timestamp": 1629473355
    },
    {
        "content": "<p>Oh, I see. Thanks!</p>",
        "id": 250133078,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1629473371
    },
    {
        "content": "<p>(at least it will be once I rebase everything properly)</p>",
        "id": 250133279,
        "sender_full_name": "cjgillot",
        "timestamp": 1629473449
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/Item-relative.20spans/near/250132850\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/Item-relative.20spans/near/250132807\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/Item-relative.20spans/near/250131617\">said</a>:</p>\n<blockquote>\n<p>one that does not require a callback into the tracking system</p>\n</blockquote>\n<p>I want to come back to this for a moment</p>\n</blockquote>\n<p>I wholeheartedly agree</p>\n</blockquote>\n<p>My general feeling is that the handling of spans already is pretty messy</p>",
        "id": 250133416,
        "sender_full_name": "mw",
        "timestamp": 1629473506
    },
    {
        "content": "<p>a lot of that comes from them being generated by the query system exists</p>",
        "id": 250133528,
        "sender_full_name": "mw",
        "timestamp": 1629473540
    },
    {
        "content": "<p>My first attempt was to remove spans from the HIR. That was a disaster: large work, with little to no benefit.</p>",
        "id": 250133529,
        "sender_full_name": "cjgillot",
        "timestamp": 1629473540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/Item-relative.20spans/near/250133528\">said</a>:</p>\n<blockquote>\n<p>a lot of that comes from them being generated by the query system exists</p>\n</blockquote>\n<p>spans are generated by the query system?</p>",
        "id": 250133605,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629473583
    },
    {
        "content": "<p>sorry, \"generated before the query system exists\"</p>",
        "id": 250133655,
        "sender_full_name": "mw",
        "timestamp": 1629473610
    },
    {
        "content": "<p>oh oh oh</p>",
        "id": 250133665,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629473616
    },
    {
        "content": "<p>hmm.</p>",
        "id": 250133710,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629473636
    },
    {
        "content": "<p>I assume it would be a non-starter to have the parser itself depend on the query system</p>",
        "id": 250133799,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629473657
    },
    {
        "content": "<p>but maybe the PR is already as good as it can get...</p>",
        "id": 250133803,
        "sender_full_name": "mw",
        "timestamp": 1629473658
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/Item-relative.20spans/near/250133799\">said</a>:</p>\n<blockquote>\n<p>I assume it would be a non-starter to have the parser itself depend on the query system</p>\n</blockquote>\n<p>This is a 2y project :)</p>",
        "id": 250133849,
        "sender_full_name": "cjgillot",
        "timestamp": 1629473686
    },
    {
        "content": "<p>yeah okay</p>",
        "id": 250133864,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629473696
    },
    {
        "content": "<p>so maybe not a non-starter, but not a short term thing</p>",
        "id": 250133892,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629473706
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/Item-relative.20spans/near/250133529\">said</a>:</p>\n<blockquote>\n<p>My first attempt was to remove spans from the HIR. That was a disaster: large work, with little to no benefit.</p>\n</blockquote>\n<p>It was my hope that that's the solution (IIRC)</p>",
        "id": 250134086,
        "sender_full_name": "mw",
        "timestamp": 1629473794
    },
    {
        "content": "<p>but if it doesn't work in practice ...</p>",
        "id": 250134122,
        "sender_full_name": "mw",
        "timestamp": 1629473810
    },
    {
        "content": "<p>maybe then we can talk about how that failed</p>",
        "id": 250134131,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629473813
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> do you have a comment somewhere explaining what went wrong there?</p>",
        "id": 250134191,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629473836
    },
    {
        "content": "<p>okay, it was <a href=\"https://github.com/rust-lang/rust/pull/72015\">https://github.com/rust-lang/rust/pull/72015</a></p>",
        "id": 250134348,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629473887
    },
    {
        "content": "<p>PR size : +4,244 −3,307<br>\nApproximately a rebase every week.<br>\nRegressions up to 8%, for improvements up to 12%.</p>",
        "id": 250134418,
        "sender_full_name": "cjgillot",
        "timestamp": 1629473924
    },
    {
        "content": "<p>so the performance hit to lowering was huge</p>",
        "id": 250134424,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629473927
    },
    {
        "content": "<p>or no, you mitigated that</p>",
        "id": 250134452,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629473948
    },
    {
        "content": "<p>Last perf : <a href=\"https://github.com/rust-lang/rust/pull/72015#issuecomment-755845433\">https://github.com/rust-lang/rust/pull/72015#issuecomment-755845433</a></p>",
        "id": 250134482,
        "sender_full_name": "cjgillot",
        "timestamp": 1629473971
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/72015#issuecomment-631264342\">comment</a>:</p>\n<blockquote>\n<p>For a very few cases, the query count is lower, and compilation is faster. For the rest, the query count is unchanged, and compilation is slower: it takes more work to get the spans.</p>\n</blockquote>",
        "id": 250134484,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629473973
    },
    {
        "content": "<p>its really interesting</p>",
        "id": 250134510,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629473992
    },
    {
        "content": "<p>Did that also remove spans from MIR?</p>",
        "id": 250134569,
        "sender_full_name": "mw",
        "timestamp": 1629474009
    },
    {
        "content": "<p>so the item-relative span approach doesn’t have as much overhead as the approach you used in PR <a href=\"https://github.com/rust-lang/rust/issues/72015\">#72015</a>?</p>",
        "id": 250134584,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629474017
    },
    {
        "content": "<p>It did not remove spans from MIR (which should have been a first step).</p>",
        "id": 250134628,
        "sender_full_name": "cjgillot",
        "timestamp": 1629474051
    },
    {
        "content": "<p>The new approach does not have a side table for spans, so most of the client code doesn't see a difference. Only diagnostics are affected.</p>",
        "id": 250134724,
        "sender_full_name": "cjgillot",
        "timestamp": 1629474111
    },
    {
        "content": "<p>I’d like to ask a hypothetical question, largely targeted at <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> : lets assume, for a moment, that removing spans from the HIR <em>is</em> the right answer, for the long term</p>",
        "id": 250134798,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629474131
    },
    {
        "content": "<p>do you think that landing PR <a href=\"https://github.com/rust-lang/rust/issues/84373\">#84373</a> (the item-relative span encoding) would be a huge mistake, in terms of technical debt it introduces?</p>",
        "id": 250134884,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629474176
    },
    {
        "content": "<p>no, I don't think so</p>",
        "id": 250134917,
        "sender_full_name": "mw",
        "timestamp": 1629474194
    },
    {
        "content": "<p>(i.e. I’m assuming here that in a year or two someone comes in and figures out a way to rip spans out of HIR anyway)</p>",
        "id": 250134940,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629474207
    },
    {
        "content": "<p>what do you think about that, <span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> ?</p>",
        "id": 250134985,
        "sender_full_name": "mw",
        "timestamp": 1629474225
    },
    {
        "content": "<p>I tend to agree.</p>",
        "id": 250135009,
        "sender_full_name": "cjgillot",
        "timestamp": 1629474237
    },
    {
        "content": "<p>Okay. My inclination is to push on landing PR <a href=\"https://github.com/rust-lang/rust/issues/84373\">#84373</a>. It does provide a nice benefit (once its turned on). The architecture may not be quite as clean as we would like, but the right answer there might lie with the eventual librarification of the compiler as a whole</p>",
        "id": 250135145,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629474286
    },
    {
        "content": "<p>Okay, great. So, in that case: <span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> , you’ll rebase (again, sorry), and I assume either <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> or <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> will take lead on reviewing it?</p>",
        "id": 250135308,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629474362
    },
    {
        "content": "<p>were there any remaining action items for the PR itself, things that needed to be addressed? I didn’t see any.</p>",
        "id": 250135388,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629474388
    },
    {
        "content": "<p>No problem with rebasing. I still have to adapt the incremental tests to test the option.</p>",
        "id": 250135437,
        "sender_full_name": "cjgillot",
        "timestamp": 1629474417
    },
    {
        "content": "<p>I can do another reviewing pass but it would be great if <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> could also take another look</p>",
        "id": 250135448,
        "sender_full_name": "mw",
        "timestamp": 1629474421
    },
    {
        "content": "<p>Okay</p>",
        "id": 250135458,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629474424
    },
    {
        "content": "<p>This is great. Thanks so much for you work here <span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> . And thanks to <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> and <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> for taking the time to meet about this.</p>",
        "id": 250135511,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629474451
    },
    {
        "content": "<p>(i would love for us to fire up regular wg-incr-comp meetings again, if only on zulip. I think I’ll be in a much better place to plan that in about three weeks or so, once all three of my kids are out of our house going to school.)</p>",
        "id": 250135664,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629474503
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/Item-relative.20spans/near/250132469\">said</a>:</p>\n<blockquote>\n<p>(in terms of doing a better job of reporting to people which ICEs, i.e. from which compiler stages and building which things, represent real bugs that should be reported…)</p>\n</blockquote>\n<p>well, the issue partly that x.py has so many <em>other</em> bugs</p>",
        "id": 250151998,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629482519
    },
    {
        "content": "<p>e.g. I hit <a href=\"https://github.com/rust-lang/rust/issues/81381\">https://github.com/rust-lang/rust/issues/81381</a> pretty regularly until I turned off llvm assertions (<a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/undefined.20reference.20to.20DisableABIBreakingChecks.40LLVM_12\">https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/undefined.20reference.20to.20DisableABIBreakingChecks.40LLVM_12</a>)</p>",
        "id": 250152101,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629482553
    },
    {
        "content": "<p>and so people get used to \"broken windows\"; <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> was talking about this in the context of rust-analyzer a while ago</p>",
        "id": 250152154,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629482581
    }
]