[
    {
        "content": "<p>As a result of the miscompilation induced by incremental compilation in <a href=\"https://github.com/rust-lang/rust/issues/82920\">https://github.com/rust-lang/rust/issues/82920</a>, I opened PR <a href=\"https://github.com/rust-lang/rust/pull/83007\">https://github.com/rust-lang/rust/pull/83007</a> to turn on <code>-Z incremental-verify-ch</code>. Having this option on by default would have turned the miscompilation into an ICE.</p>\n<p>Unfortunately, the performance impact is awful (<a href=\"https://perf.rust-lang.org/compare.html?start=61365c06250e2ba6e0a578ae990f055ac5339107&amp;end=213521923e2df5e849eee21b917477d429078204\">https://perf.rust-lang.org/compare.html?start=61365c06250e2ba6e0a578ae990f055ac5339107&amp;end=213521923e2df5e849eee21b917477d429078204</a>) - regressions were anywhere from 1% to 320% (though the 320% was for a stress test benchmark).</p>",
        "id": 230129497,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1615604065
    },
    {
        "content": "<p>it looks like <code>incremental_verify_ich</code> gets called for both re-computed results and re-computed results. I think we could safely skip recomputing the hashes for results loaded from disk - if the hash were to change, it would be caused by a completely different kind of issue (the <code>HashStable</code> implementation would have to be non-deterministic, I think)</p>",
        "id": 230129633,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1615604227
    },
    {
        "content": "<p>I'll see if that makes the performance any better.</p>",
        "id": 230129642,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1615604243
    },
    {
        "content": "<p>I'm not 100% certain, but I think a non-deterministic <code>HashStable</code> impl would only lead to spuriouly marking a query as red (assuming that it didn't produce hash collisions), and could not lead to the unsoundness that results from the query result actually changing</p>",
        "id": 230129901,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1615604497
    },
    {
        "content": "<p>Commented on the PR but I'll say it here too -- I think performance hit is acceptable for mitigating this soundness hole.</p>",
        "id": 230130066,
        "sender_full_name": "simulacrum",
        "timestamp": 1615604650
    },
    {
        "content": "<p>Looking at <a href=\"https://perf.rust-lang.org/compare.html?start=61365c06250e2ba6e0a578ae990f055ac5339107&amp;end=213521923e2df5e849eee21b917477d429078204&amp;stat=wall-time\">wall-times</a> and disabling full and incr-full (both of which are not reusing results so don't really see impacts) you get at most a 50% hit on the stress test and only 5-15% wall time hits on most benchmarks. That's bad, but it's not horrible. IMO, it makes sense to land it on nightly at least - I'd rather ship a slower but correct compiler. Ultimately the 15% hits are also in the faster benchmarks; unsurprisingly opt and other builds which end up rerunning e.g. LLVM this is not as visible.</p>",
        "id": 230130249,
        "sender_full_name": "simulacrum",
        "timestamp": 1615604838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/Enabling.20.60-Z.20incremental-verify-ich.60/near/230129633\">said</a>:</p>\n<blockquote>\n<p>it looks like <code>incremental_verify_ich</code> gets called for both re-computed results and re-computed results. I think we could safely skip recomputing the hashes for results loaded from disk - if the hash were to change, it would be caused by a completely different kind of issue (the <code>HashStable</code> implementation would have to be non-deterministic, I think)</p>\n</blockquote>\n<p>I would have said exactly the opposite. The re-computed queries are already hashed to determine the red/green color of the dep-node. Only the results loaded from disk are implicitly assumed to be green.</p>",
        "id": 230160995,
        "sender_full_name": "cjgillot",
        "timestamp": 1615640002
    },
    {
        "content": "<blockquote>\n<p>The re-computed queries are already hashed to determine the red/green color of the dep-node.</p>\n</blockquote>\n<p>That's only the case when at least one of the dependencies could not be marked green. In that case, <a href=\"https://github.com/rust-lang/rust/blob/301ad8a4fa3ea56fb980443b7997c8f9d72dd717/compiler/rustc_query_system/src/dep_graph/graph.rs#L678\"><code>try_mark_previous_green</code> returns <code>None</code></a>, so we <a href=\"https://github.com/rust-lang/rust/blob/32dce353dec5f9069c941d4cd0c059ecc67b7c2b/compiler/rustc_query_system/src/query/plumbing.rs#L476-L489\">will never call <code>load_from_disk_and_cache_in_memory</code></a></p>\n<p>Instead, we will end up <a href=\"https://github.com/rust-lang/rust/blob/32dce353dec5f9069c941d4cd0c059ecc67b7c2b/compiler/rustc_query_system/src/query/plumbing.rs#L496\">calling <code>force_query_with_job</code></a>, which <em>does</em> hash the result to determine the red/green color</p>",
        "id": 230174431,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1615653871
    },
    {
        "content": "<p>My change only affects the case where all the inputs are green - the query system currentl assumes that the query output will be unchanged, without actually checking it</p>",
        "id": 230174465,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1615653917
    },
    {
        "content": "<p>More generally, we can end up with miscompilations if the query system assumes that a query result hasn't changed when it actually has. I think this is the only case where that can happen - all other cases are either:</p>\n<ol>\n<li>Running a query for the first time, so nothing could already be expecting a different result</li>\n<li>We're loading something from disk - unless the incremental cache got corrupted, then we're getting back whatever we serialized (assuming no bugs in the serialization/deserialization impl)</li>\n<li>We're re-running a query because some of its inputs are not green. We already re-hash the result as part of the red/green algorithm, so the worst that can happen is that we spuriously throw mark a query as red, leading to unencessary work</li>\n</ol>",
        "id": 230174831,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1615654288
    },
    {
        "content": "<blockquote>\n<p>We're loading something from disk - unless the incremental cache got corrupted, then we're getting back whatever we serialized (assuming no bugs in the serialization/deserialization impl)</p>\n</blockquote>\n<p>shouldn't the compiler handle these sorts of errors, though? having unsoundness because of bugs in deserialize seems not great</p>",
        "id": 230175455,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615654926
    },
    {
        "content": "<p>and theoretically someone could mess with with the incremental cache; the threat model is probably not super realistic, but it seems better to ICE than to generate broken code</p>",
        "id": 230175489,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615654981
    },
    {
        "content": "<p>Actually, incremental-verify-ich is already restricted to loading from the on-disk cache.</p>",
        "id": 230175655,
        "sender_full_name": "cjgillot",
        "timestamp": 1615655110
    },
    {
        "content": "<p>The incremental serialization and deserialization are not straightforward at all. For instance, the path for a DefId is <code>DefId -&gt; DefPathHash -&gt; DefId</code>, so the input and output <code>DefId</code>s are not guaranteed to be the same. This is the source of the issues with sorting by DefId.</p>",
        "id": 230175810,
        "sender_full_name": "cjgillot",
        "timestamp": 1615655245
    },
    {
        "content": "<p>Computing a query always computes its hash, inside <code>DepGraph::with_task_impl</code> (except for no-hash queries).</p>",
        "id": 230175936,
        "sender_full_name": "cjgillot",
        "timestamp": 1615655357
    },
    {
        "content": "<blockquote>\n<p>and theoretically someone could mess with with the incremental cache; the threat model is probably not super realistic, but it seems better to ICE than to generate broken code</p>\n</blockquote>\n<p>I think a better way of detecting that kind of issue would be to store hash the entire incremental file, store that somewhere, and verify it when we load it</p>",
        "id": 230175949,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1615655376
    },
    {
        "content": "<p>(not sure if we already do something like that)</p>",
        "id": 230175952,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1615655382
    },
    {
        "content": "<p>someone could mess with that hash too though</p>",
        "id": 230175959,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615655395
    },
    {
        "content": "<p>if you don't trust part of the file system, you can't trust any of it</p>",
        "id": 230176003,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615655406
    },
    {
        "content": "<p>I was thinking of guarding against corruption</p>",
        "id": 230176112,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1615655538
    },
    {
        "content": "<p>not deliberate modification</p>",
        "id": 230176121,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1615655544
    },
    {
        "content": "<p>hmm, maybe a better example is that bootstrap reuses the same cache between different nightly compilers</p>",
        "id": 230176159,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615655608
    },
    {
        "content": "<p>it would be cool if the compiler could catch that somehow - I don't know if that's what verify-ich is actually for though</p>",
        "id": 230176169,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615655626
    },
    {
        "content": "<blockquote>\n<p>Computing a query always computes its hash, inside DepGraph::with_task_impl (except for no-hash queries).</p>\n</blockquote>\n<p>Maybe you mean something specific by 'compute', but the underlying query provider can get run without hashing the result. The query provider <a href=\"https://github.com/rust-lang/rust/blob/32dce353dec5f9069c941d4cd0c059ecc67b7c2b/compiler/rustc_query_system/src/query/plumbing.rs#L544\">gets directly invoked via <code>compute</code></a> inside <code>load_from_disk_and_cache_in_memory</code>, which is the case my PR addresses</p>",
        "id": 230176227,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1615655669
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/32dce353dec5f9069c941d4cd0c059ecc67b7c2b/compiler/rustc_query_impl/src/plumbing.rs#L391-L401\">https://github.com/rust-lang/rust/blob/32dce353dec5f9069c941d4cd0c059ecc67b7c2b/compiler/rustc_query_impl/src/plumbing.rs#L391-L401</a></p>",
        "id": 230176235,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1615655695
    },
    {
        "content": "<blockquote>\n<p>hmm, maybe a better example is that bootstrap reuses the same cache between different nightly compilers</p>\n</blockquote>\n<p>Do you mean between different beta compilers, or re-using the stage0 incr cache with the stage1 compiler?</p>",
        "id": 230176334,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1615655773
    },
    {
        "content": "<blockquote>\n<p>re-using the stage0 incr cache with the stage1 compiler?</p>\n</blockquote>\n<p>^ this one</p>",
        "id": 230176349,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615655820
    },
    {
        "content": "<p>also, I'm pretty sure cargo throws away everything when the compiler version changes (which includes switching nightly versions) - the only time that doesn't work is when using a stage1 compiler, which just has <code>-dev</code> in the name</p>",
        "id": 230176350,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1615655821
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/Enabling.20.60-Z.20incremental-verify-ich.60/near/230176350\">said</a>:</p>\n<blockquote>\n<p>also, I'm pretty sure cargo throws away everything when the compiler version changes (which includes switching nightly versions) - the only time that doesn't work is when using a stage1 compiler, which just has <code>-dev</code> in the name</p>\n</blockquote>\n<p>yup that's exactly what I mean</p>",
        "id": 230176361,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615655835
    },
    {
        "content": "<p>I think any issue with the stage0/stage1 cache should be done in bootstrap</p>",
        "id": 230176367,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1615655851
    },
    {
        "content": "<p>bootstrap can't do anything other than completely throw away the cache though :/</p>",
        "id": 230176376,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615655872
    },
    {
        "content": "<p>since that's a really weird use-case that's only relevant for the compiler</p>",
        "id": 230176378,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1615655875
    },
    {
        "content": "<p>there's an option today to do that but no one uses it</p>",
        "id": 230176381,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615655880
    },
    {
        "content": "<p>what would you want it to do?</p>",
        "id": 230176382,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1615655881
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/Enabling.20.60-Z.20incremental-verify-ich.60/near/230176378\">said</a>:</p>\n<blockquote>\n<p>since that's a really weird use-case that's only relevant for the compiler</p>\n</blockquote>\n<p>yeah that's fair, it's probably off topic for this thread</p>",
        "id": 230176425,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615655892
    },
    {
        "content": "<p>This change has already found another query implementation bug: <a href=\"https://github.com/rust-lang/rust/issues/83126\">https://github.com/rust-lang/rust/issues/83126</a></p>",
        "id": 230269344,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1615757293
    },
    {
        "content": "<p><code>extern_mod_stmt_cnum</code> uses global untracked state, but wasn't marked <code>eval_always</code></p>",
        "id": 230269364,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1615757321
    }
]