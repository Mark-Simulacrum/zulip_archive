[
    {
        "content": "<p>After <a href=\"https://github.com/rust-lang/rust/pull/87835\">https://github.com/rust-lang/rust/pull/87835</a>, the ordering of lint <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/enum.Level.html\"><code>Level</code></a>s now depends ultimately on HirId.  This has thrown up another block to removing Ord from HirId (see <a href=\"https://github.com/rust-lang/rust/issues/90317\">#90317</a>). I'm not sure how to overcome this. I'm even worried that this <code>expect</code> feature as implemented is incompatible with our desires for incr comp correctness. I'd love to get some advice on this.</p>\n<p>See my PR here for removing Ord from HirId: <a href=\"https://github.com/rust-lang/rust/pull/92233\">https://github.com/rust-lang/rust/pull/92233</a></p>\n<p>(Also, I know there are larger discussions about incr comp in general. I remain convinced that work on <a href=\"https://github.com/rust-lang/rust/issues/90317\">#90317</a> is worthwhile.)</p>",
        "id": 277776316,
        "sender_full_name": "pierwill",
        "timestamp": 1649097669
    },
    {
        "content": "<p>Can the PartialOrd/Ord impls be easily removed from LintExpectationId?</p>",
        "id": 277776812,
        "sender_full_name": "cjgillot",
        "timestamp": 1649097914
    },
    {
        "content": "<p>The PartialOrd impl on Level could be implemented manually on the discriminant only.  Does it need to be total?</p>",
        "id": 277776990,
        "sender_full_name": "cjgillot",
        "timestamp": 1649098000
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/Ordering.20of.20LintExpectationId/near/277776812\">said</a>:</p>\n<blockquote>\n<p>Can the PartialOrd/Ord impls be easily removed from LintExpectationId?</p>\n</blockquote>\n<p>Not easily enough that the solution's been obvious to me :)</p>\n<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/Ordering.20of.20LintExpectationId/near/277776990\">said</a>:</p>\n<blockquote>\n<p>The PartialOrd impl on Level could be implemented manually on the discriminant only.  Does it need to be total?</p>\n</blockquote>\n<p>I'll try this, thanks!</p>",
        "id": 277777131,
        "sender_full_name": "pierwill",
        "timestamp": 1649098071
    },
    {
        "content": "<p>Not sure about the total ordering</p>",
        "id": 277777160,
        "sender_full_name": "pierwill",
        "timestamp": 1649098082
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"369415\">@xFrednet</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 277777243,
        "sender_full_name": "cjgillot",
        "timestamp": 1649098121
    },
    {
        "content": "<p>For reference: here are the errors with Ord and PartialOrd removed from LintExpectationId: <a href=\"https://github.com/rust-lang/rust/runs/5820880160?check_suite_focus=true\">https://github.com/rust-lang/rust/runs/5820880160?check_suite_focus=true</a></p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>error[E0277]: the trait bound `HirId: Ord` is not satisfied\n   --&gt; compiler/rustc_lint_defs/src/lib.rs:131:20\n    |\n131 |     type KeyType = (HirId, u16, u16);\n    |                    ^^^^^^^^^^^^^^^^^ the trait `Ord` is not implemented for `HirId`\n    |\n    = note: required because of the requirements on the impl of `Ord` for `(HirId, u16, u16)`\nnote: required by a bound in `rustc_data_structures::stable_hasher::ToStableHashKey::KeyType`\n   --&gt; /checkout/compiler/rustc_data_structures/src/stable_hasher.rs:206:19\n    |\n206 |     type KeyType: Ord + Sized + HashStable&lt;HCX&gt;;\n    |                   ^^^ required by this bound in `rustc_data_structures::stable_hasher::ToStableHashKey::KeyType`\n\nerror[E0277]: can't compare `HirId` with `HirId`\n    --&gt; compiler/rustc_lint_defs/src/lib.rs:86:14\n     |\n77   |   #[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash, Encodable, Decodable)]\n     |                                    ---------- in this derive macro expansion\n...\n86   |       Stable { hir_id: HirId, attr_index: u16, lint_index: Option&lt;u16&gt; },\n     |                ^^^^^^^^^^^^^ no implementation for `HirId &lt; HirId` and `HirId &gt; HirId`\n     |\n    ::: /checkout/library/core/src/cmp.rs:1172:1\n     |\n1172 | / pub macro PartialOrd($item:item) {\n1173 | |     /* compiler built-in */\n1174 | | }\n     | |_- in this expansion of `#[derive(PartialOrd)]`\n     |\n     = help: the trait `std::cmp::PartialOrd` is not implemented for `HirId`\n\nerror[E0277]: the trait bound `HirId: Ord` is not satisfied\n   --&gt; compiler/rustc_lint_defs/src/lib.rs:86:14\n    |\n77  |   #[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash, Encodable, Decodable)]\n    |                                                    --- in this derive macro expansion\n...\n86  |       Stable { hir_id: HirId, attr_index: u16, lint_index: Option&lt;u16&gt; },\n    |                ^^^^^^^^^^^^^ the trait `Ord` is not implemented for `HirId`\n    |\n   ::: /checkout/library/core/src/cmp.rs:860:1\n    |\n860 | / pub macro Ord($item:item) {\n861 | |     /* compiler built-in */\n862 | | }\n    | |_- in this expansion of `#[derive(Ord)]`\n\nFor more information about this error, try `rustc --explain E0277`.\nerror: could not compile `rustc_lint_defs` due to 3 previous errors\nwarning: build failed, waiting for other jobs to finish...\nerror: build failed\nBuild completed unsuccessfully in 0:01:42\n== clock drift check ==\n  local time: Mon Apr  4 17:23:05 UTC 2022\n  network time: Mon, 04 Apr 2022 17:23:05 GMT\n== end clock drift check ==\nError: Process completed with exit code 1.\n</code></pre></div>",
        "id": 277777309,
        "sender_full_name": "pierwill",
        "timestamp": 1649098169
    },
    {
        "content": "<p>Maybe the impl here could be changed? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>  <a href=\"https://github.com/pierwill/rust/blob/ce78487ea0ce0db337711425041ee9ecd6dd485f/compiler/rustc_lint_defs/src/lib.rs#L130-L144\">https://github.com/pierwill/rust/blob/ce78487ea0ce0db337711425041ee9ecd6dd485f/compiler/rustc_lint_defs/src/lib.rs#L130-L144</a></p>",
        "id": 277777523,
        "sender_full_name": "pierwill",
        "timestamp": 1649098287
    },
    {
        "content": "<p>The <code>ToStableHashKey</code> for <code>HirId</code> sets <code>KeyType = (DefPathHash, hir::ItemLocalId)</code>.</p>",
        "id": 277777735,
        "sender_full_name": "cjgillot",
        "timestamp": 1649098387
    },
    {
        "content": "<p>You can replace <code>HirId</code> with it, and call <code>hir_id.to_stable_hash_key()</code>.</p>",
        "id": 277777760,
        "sender_full_name": "cjgillot",
        "timestamp": 1649098410
    },
    {
        "content": "<p>This makes me think: if we need to keep the total ordering on <code>LintExpectationId</code>, you can replace all <code>HirId</code>s by <code>(DefPathHash, hir::ItemLocalId)</code>.  This could do the trick, but beware of diagnostic order.</p>",
        "id": 277778045,
        "sender_full_name": "cjgillot",
        "timestamp": 1649098538
    },
    {
        "content": "<p>I used the <code>HirId</code> to have a stable order in the lint emissions. Changing the key and removing <code>Ord</code> / <code>PartialOrd</code> should be okay, if I remember correctly.</p>",
        "id": 277778295,
        "sender_full_name": "xFrednet",
        "timestamp": 1649098643
    },
    {
        "content": "<p>And to implement <code>ToStableHashKey</code> but that would be covered by the suggested change :)</p>",
        "id": 277778438,
        "sender_full_name": "xFrednet",
        "timestamp": 1649098693
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> and <span class=\"user-mention\" data-user-id=\"369415\">@xFrednet</span> !</p>",
        "id": 277791672,
        "sender_full_name": "pierwill",
        "timestamp": 1649105417
    },
    {
        "content": "<p>Here's the latest: <a href=\"https://github.com/rust-lang/rust/pull/92233/files/491edf334e3eb8f58137d84da1d3bb6afccab811..9a9daff653b119fdcf70022cc9ecaa49bd2922d1\">https://github.com/rust-lang/rust/pull/92233/files/491edf334e3eb8f58137d84da1d3bb6afccab811..9a9daff653b119fdcf70022cc9ecaa49bd2922d1</a></p>",
        "id": 277791679,
        "sender_full_name": "pierwill",
        "timestamp": 1649105423
    },
    {
        "content": "<p>Now I just need to handle these two errors:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>error[E0277]: can't compare `LintExpectationId` with `LintExpectationId`\n    --&gt; compiler/rustc_lint_defs/src/lib.rs:165:12\n     |\n150  |   #[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n     |                                    ---------- in this derive macro expansion\n...\n165  |       Expect(LintExpectationId),\n     |              ^^^^^^^^^^^^^^^^^ no implementation for `LintExpectationId &lt; LintExpectationId` and `LintExpectationId &gt; LintExpectationId`\n     |\n    ::: /Users/will/repos/rust/library/core/src/cmp.rs:1172:1\n     |\n1172 | / pub macro PartialOrd($item:item) {\n1173 | |     /* compiler built-in */\n1174 | | }\n     | |_- in this expansion of `#[derive(PartialOrd)]`\n     |\n     = help: the trait `std::cmp::PartialOrd` is not implemented for `LintExpectationId`\n\nerror[E0277]: the trait bound `LintExpectationId: Ord` is not satisfied\n   --&gt; compiler/rustc_lint_defs/src/lib.rs:165:12\n    |\n150 |   #[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n    |                                                    --- in this derive macro expansion\n...\n165 |       Expect(LintExpectationId),\n    |              ^^^^^^^^^^^^^^^^^ the trait `Ord` is not implemented for `LintExpectationId`\n    |\n   ::: /Users/will/repos/rust/library/core/src/cmp.rs:860:1\n    |\n860 | / pub macro Ord($item:item) {\n861 | |     /* compiler built-in */\n862 | | }\n    | |_- in this expansion of `#[derive(Ord)]`\n</code></pre></div>",
        "id": 277791815,
        "sender_full_name": "pierwill",
        "timestamp": 1649105491
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/Ordering.20of.20LintExpectationId/near/277776990\">said</a>:</p>\n<blockquote>\n<p>The PartialOrd impl on Level could be implemented manually on the discriminant only.  Does it need to be total?</p>\n</blockquote>\n<p>How would I go about doing this?</p>",
        "id": 277791862,
        "sender_full_name": "pierwill",
        "timestamp": 1649105518
    },
    {
        "content": "<p>Can't these be implemented with <code>DefPathHash</code> and <code>ItemLocalId</code> as well?</p>",
        "id": 277792207,
        "sender_full_name": "xFrednet",
        "timestamp": 1649105671
    },
    {
        "content": "<p>Never mind, I misunderstood the change at first <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 277792302,
        "sender_full_name": "xFrednet",
        "timestamp": 1649105724
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"316352\">pierwill</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/Ordering.20of.20LintExpectationId/near/277791862\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/Ordering.20of.20LintExpectationId/near/277776990\">said</a>:</p>\n<blockquote>\n<p>The PartialOrd impl on Level could be implemented manually on the discriminant only.  Does it need to be total?</p>\n</blockquote>\n<p>How would I go about doing this?</p>\n</blockquote>\n<p>This would mean implementing by hand <code>PartialOrd</code>.  For instance:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">PartialOrd</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Level</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">partial_cmp</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Ordering</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">discriminant</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">).</span><span class=\"n\">partial_cmp</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">discriminant</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 277792738,
        "sender_full_name": "cjgillot",
        "timestamp": 1649105944
    },
    {
        "content": "<p>With that impl, I'm getting</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>error[E0599]: the method `partial_cmp` exists for struct `std::mem::Discriminant&lt;Level&gt;`, but its trait bounds were not satisfied\n    --&gt; compiler/rustc_lint_defs/src/lib.rs:182:38\n     |\n182  |         std::mem::discriminant(self).partial_cmp(std::mem::discriminant(other))\n     |                                      ^^^^^^^^^^^ method cannot be called on `std::mem::Discriminant&lt;Level&gt;` due to unsatisfied trait bounds\n     |\n    ::: /Users/will/repos/rust/library/core/src/mem/mod.rs:1032:1\n     |\n1032 | pub struct Discriminant&lt;T&gt;(&lt;T as DiscriminantKind&gt;::Discriminant);\n     | ------------------------------------------------------------------ doesn't satisfy `std::mem::Discriminant&lt;Level&gt;: Iterator`\n     |\n     = note: the following trait bounds were not satisfied:\n             `std::mem::Discriminant&lt;Level&gt;: Iterator`\n             which is required by `&amp;mut std::mem::Discriminant&lt;Level&gt;: Iterator`\n</code></pre></div>",
        "id": 277796514,
        "sender_full_name": "pierwill",
        "timestamp": 1649107851
    },
    {
        "content": "<p>Too bad, that means we will have to implement it manually using a <code>match</code> on <code>Level</code>.</p>",
        "id": 277851203,
        "sender_full_name": "cjgillot",
        "timestamp": 1649151768
    },
    {
        "content": "<p>Maybe it would be easier to manually implement PartialOrd (maybe Ord?) on <code>LintExpectationId</code>, ignoring the HirIds where they appear...?</p>",
        "id": 278608880,
        "sender_full_name": "pierwill",
        "timestamp": 1649707483
    }
]