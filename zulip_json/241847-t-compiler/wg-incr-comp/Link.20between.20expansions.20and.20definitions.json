[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> I am trying to understand what are the goal of <code>expansion_that_defined</code> and <code>parent_module_of_macro_def</code>. What are the goals of those functions? Are they tracked for incr. comp. in any way? Should they be?</p>",
        "id": 241430681,
        "sender_full_name": "cjgillot",
        "timestamp": 1622743946
    },
    {
        "content": "<blockquote>\n<p>Are they tracked for incr. comp. in any way?</p>\n</blockquote>\n<p>No idea.</p>",
        "id": 241433604,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1622745339
    },
    {
        "content": "<blockquote>\n<p>Should they be?</p>\n</blockquote>\n<p>Well, probably yes.<br>\nIf values returned by these function change, then results of type-based name resolution may change as well.</p>",
        "id": 241433772,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1622745403
    },
    {
        "content": "<blockquote>\n<p>I am trying to understand what are the goal of expansion_that_defined and parent_module_of_macro_def.</p>\n</blockquote>\n<p>The main idea is that name resolution performed during type checking (things like <code>Type::assoc_item</code> or <code>object.method</code>) is performed hygienically with macros 2.0, in the same way as name resolution performed during the main resolution pass that is run earlier.<br>\nFor that we need to keep some hygiene data around, e.g. for resolving a name using def-site hygiene we need to know location of a macro that produced that name (to try resolving the name at that location).</p>",
        "id": 241434469,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1622745742
    },
    {
        "content": "<p>That's the idea, but the current implementation may be somewhat sketchy and I don't remember its details right now.</p>",
        "id": 241434646,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1622745841
    },
    {
        "content": "<p>Thank you.<br>\nI think the regression in <a href=\"https://github.com/rust-lang/rust/issues/85153\">#85153</a> comes from an over-pessimistic invalidation of dependents of those two functions. Since they are directly called from typeck, compile_codegen_unit... those expensive queries had to be recomputed every time.<br>\nI'd like to querify them. However, <code>ExpnId</code> cannot be recovered from a fingerprint, so the query cannot be marked green if it has not been invoked manually.<br>\nSince this is an existing bug, we could let it fly, but this makes me slightly uncomfortable.</p>",
        "id": 241437812,
        "sender_full_name": "cjgillot",
        "timestamp": 1622747247
    },
    {
        "content": "<p>The (somewhat) good news is that these functions only have effect on unstable kinds of macros, so all possible bugs are limited to nightly.</p>",
        "id": 241455430,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1622754988
    }
]