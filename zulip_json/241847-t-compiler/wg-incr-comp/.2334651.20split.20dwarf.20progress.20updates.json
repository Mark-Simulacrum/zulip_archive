[
    {
        "content": "<p>So, a brief update as to my progress after this morning's meeting:</p>\n<ul>\n<li>rustc is generating ELF that contains <code>DW_AT_GNU_dwo_name</code> (which is GNU's pre-standard split dwarf, if DWARF 5 is enabled then LLVM emits <code>DW_AT_dwo_name</code>), see example below.</li>\n<li>rustc is spitting a bunch of random files out that have broken unicode names because my emission of dwo files is broken.</li>\n</ul>\n<p>The code needs some cleaning up, but so far the changes aren't all that invasive. The example below contains a dwo file path that would be per-codegen-unit, I don't know if that's going to be the case in the end, it's just the strings that I had to hand.</p>\n<div class=\"codehilite\"><pre><span></span><code> &lt;0&gt;&lt;9b&gt;: Abbrev Number: 1 (DW_TAG_compile_unit)\n    &lt;9c&gt;   DW_AT_stmt_list   : 0xe8\n    &lt;a0&gt;   DW_AT_comp_dir    : (indirect string, offset: 0x13b): /home/david/Projects/rust/rust0\n    &lt;a4&gt;   DW_AT_GNU_dwo_name: (indirect string, offset: 0x15b): foo.foo.7rcbfp3g-cgu.0.rcgu.dwo\n    &lt;a8&gt;   DW_AT_GNU_dwo_id  : 0x357472a2b032d7b9\n    &lt;b0&gt;   DW_AT_low_pc      : 0x0\n    &lt;b8&gt;   DW_AT_ranges      : 0x40\n    &lt;bc&gt;   DW_AT_GNU_addr_base: 0x0\n</code></pre></div>\n\n\n<p>Once I've got it emitting the dwo files correctly, I'll start looking into platform checks and things like that.</p>",
        "id": 210897786,
        "sender_full_name": "davidtwco",
        "timestamp": 1600792921
    },
    {
        "content": "<p><em>Another update:</em><br>\nI now have split dwarf working - still needs some tidying up but compiling with <code>-Zsplit-dwarf=split</code> will output a <code>.dwo</code> file per codegen-unit which is referenced by the DWARF in the binary. If I run gdb then it appears to load them and if I move them then gdb complains.</p>",
        "id": 211011462,
        "sender_full_name": "davidtwco",
        "timestamp": 1600871445
    },
    {
        "content": "<p>I want to clean up the code a little bit, make some changes to the flag I've added, check for appropriate targets (unsure what LLVM does when I pass it this on Windows for example), figure out whether to write to a single dwo file rather than a per-codegen-unit file or if I can link them together or something like that, and check that the single mode works.</p>",
        "id": 211011732,
        "sender_full_name": "davidtwco",
        "timestamp": 1600871541
    },
    {
        "content": "<p>Oh, and I need to figure out how to write tests for this.</p>",
        "id": 211011768,
        "sender_full_name": "davidtwco",
        "timestamp": 1600871560
    },
    {
        "content": "<p>Should <code>-Zsplit-dwarf=split</code> be equivalent to <code>-Zrun-dsymutil=no</code> on macOS?</p>",
        "id": 211011940,
        "sender_full_name": "bjorn3",
        "timestamp": 1600871640
    },
    {
        "content": "<p>I'm not familiar with <code>-Zrun-dsymutil=no</code> on macOS.</p>",
        "id": 211012001,
        "sender_full_name": "davidtwco",
        "timestamp": 1600871654
    },
    {
        "content": "<p>On macOS the linker doesn't add the debuginfo to the generated executable. Instead it adds a section that specifies which part of which object file ended up where in the executable. dsymutil is then run to take all the debuginfo for used functions and rewrite it into a <code>.dSYM</code> file. If <code>-Zrun-dsymutil=no</code> is used, no <code>.dSYM</code> file is generated. Instead the temporary object files are kept to make debuggers still able to get the debuginfo.</p>",
        "id": 211012486,
        "sender_full_name": "bjorn3",
        "timestamp": 1600871855
    },
    {
        "content": "<p>It's similar, I think:</p>\n<p>My understanding is that Split DWARF partitions the debuginfo sections into those that require link-time relocation and those which don't. Those which don't are typically larger. The debuginfo that doesn't require link-time relocation is processed by the linker and that wastes time and memory under normal circumstances, but Split DWARF makes it so that debuginfo won't be seen by the linker. There are two ways it can do that - clang calls them split and single (\"kinds of dwarf fission\", which comes from the name of the original project to do this in gcc land). </p>\n<p>Split fission creates DWO (dwarf object) files containing the debuginfo that doesn't require link-time relocation and the linker doesn't look at them at all; the objects contain <code>DW_AT_GNU_dwo_name</code> and <code>DW_AT_GNU_dwo_id</code> DWARF attributes which have a path to the file (it's relative currently). Those attributes change if LLVM thinks we're doing DWARF 5 but it all works the same as far as I can tell.</p>\n<p>Single fission still writes the debuginfo to the relocatable object but in such a way that its ignored by the linker - I don't know more about it than that.</p>\n<p>So, compared with <code>-Zrun-dsymutil</code>:<code>-Zsplit-dwarf=split</code> will put debuginfo in a separate file, but whether or not that's one file or many depends on how I implement this - currently it outputs a dwo file per-codegen-unit - I suspect that'll change and I'll just output a <code>foo.dwo</code> alongside the <code>foo</code> binary, and using save-temps might keep the original per-codegen-unit files but I don't know exactly yet, not looked into how to do any of that part yet.</p>",
        "id": 211013821,
        "sender_full_name": "davidtwco",
        "timestamp": 1600872440
    },
    {
        "content": "<p>Does that make sense?</p>",
        "id": 211014010,
        "sender_full_name": "davidtwco",
        "timestamp": 1600872517
    },
    {
        "content": "<p>Opened draft PR at <a href=\"https://github.com/rust-lang/rust/issues/77117\">#77117</a> with what I've got so far.</p>",
        "id": 211033032,
        "sender_full_name": "davidtwco",
        "timestamp": 1600880905
    },
    {
        "content": "<p>Updated the PR today to resolve the linking issue that I described at our last issue, turns out that LLVM has a tool for doing what I needed which I wasn't aware of.</p>",
        "id": 213332132,
        "sender_full_name": "davidtwco",
        "timestamp": 1602699858
    },
    {
        "content": "<p>cc <a class=\"stream-topic\" data-stream-id=\"131828\" href=\"/#narrow/stream/131828-t-compiler/topic/split.20dwarf.20and.20dependencies\">#t-compiler &gt; split dwarf and dependencies</a></p>",
        "id": 222784975,
        "sender_full_name": "davidtwco",
        "timestamp": 1610658817
    }
]