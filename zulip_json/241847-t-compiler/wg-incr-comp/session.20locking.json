[
    {
        "content": "<p>I have a naive question.  Is locking of the session directory necessary when running under Cargo?  From my understanding, a single <code>rustc</code> invocation only uses a single session directory for the crate being built. That directory name includes the crate disambiguator. Since cargo always gives unique <code>-C metadata</code>, there should never be a circumstance where there are concurrent rustc processes pointing at the same incremental directory.  Does that sound about right?</p>",
        "id": 240362833,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622051101
    },
    {
        "content": "<p>I don't think it should be necessary for successful builds, but it can't hurt.</p>",
        "id": 240371075,
        "sender_full_name": "bjorn3",
        "timestamp": 1622054524
    },
    {
        "content": "<p>It causes problems for filesystems that don't support locking.</p>\n<p>There's more context at <a href=\"https://github.com/rust-lang/rust/pull/85698\">https://github.com/rust-lang/rust/pull/85698</a>.  I fixed the ICE that happens, but I'm trying to decide if I should go further and change the behavior when it can't lock.  Cargo just silently ignores it.  I'm thinking of changing rustc to do the same.  But then, I was thinking, why does rustc bother locking at all?  </p>\n<p>WDYT about just ignoring unsupported file locks?</p>",
        "id": 240371766,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622054836
    },
    {
        "content": "<p>When cargo doesn't lock at worst two compilations at the same time could cause an SVH mismatch causing rustc to error out due to not finding an indirect dependency with the right SVH. When rustc doesn't lock the incremental session dir, the depgraph, workproduct index and the cached object files could be read at different times and thus go out of sync with each other. In the best case this will result in a linker error or an ICE. In the worst case this will cause a silent miscompilation.</p>",
        "id": 240386564,
        "sender_full_name": "bjorn3",
        "timestamp": 1622060950
    },
    {
        "content": "<p>Erroring on out of sync depgraph and workproduct index would be possible if both embed the SVH, but the object files don't have any kind of unique identifier embedded and using a hash of the object files to detecr mismatches would be slow due to the hashing and it would be necessary to copy the object files to a temp dir, then check the hash and finally link the copy to prevent a TOCTOU race.</p>",
        "id": 240387099,
        "sender_full_name": "bjorn3",
        "timestamp": 1622061176
    },
    {
        "content": "<p>Some thoughts:</p>\n<ul>\n<li>Even if we could assume that <code>rustc</code> runs under cargo I'd still feel a lot better to have precautions in place that (try to) make sure that no two <code>rustc</code> process use the same cache directory. As <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> points out anything can happen in that case.</li>\n<li>I think file locks are also used for making sure that directories don't get garbage collected while another process is still accessing them. At some point in the history of incr. comp. <code>rustc</code> processes would read data from the cache directories of upstream crates. I don't know if that is still true but if it is, there can be any number of processes reading a cache directory concurrently and locks are the way to make sure garbage collection knows about that.</li>\n<li>The whole synchronization setup is woefully underdocumented <code>:/</code> I suspect that it isn't optimal either performance-wise. Unfortunately, since anything interacting with filesystems is rather brittle and platform-dependent, it would be quite a bit of work to change things here. Might be an interesting project for <span class=\"user-group-mention\" data-user-group-id=\"3282\">@wg-incr-comp</span> at some point.</li>\n</ul>",
        "id": 240443592,
        "sender_full_name": "mw",
        "timestamp": 1622110034
    },
    {
        "content": "<p>Having a good error message instead of a panic is a great improvement! Thanks for implementing that, <span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span>!</p>",
        "id": 240444505,
        "sender_full_name": "mw",
        "timestamp": 1622110595
    },
    {
        "content": "<p>Out of curiosity: how does cargo synchronize between concurrent processes trying to build the same directory? From the message on the commandline it looks like it's using file locks too:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ cargo build\nBlocking waiting for file lock on build directory\n</code></pre></div>",
        "id": 240445514,
        "sender_full_name": "mw",
        "timestamp": 1622111205
    },
    {
        "content": "<p>There is a file <code>.cargo-lock</code> inside <code>target/{debug,release}</code>.</p>",
        "id": 240446140,
        "sender_full_name": "bjorn3",
        "timestamp": 1622111566
    },
    {
        "content": "<p>The locking code is <a href=\"https://github.com/rust-lang/cargo/blob/e931e4796b61de593aa1097649445e535c9c7ee0/src/cargo/util/flock.rs#L262-L343\">here</a>.  It is slightly more complicated than the rustc version, in that it checks for NFS mounts, and will block to wait for the lock instead of returning immediately.</p>\n<p>Thanks for the responses!  I think keeping it as-is for now is probably good.  Hopefully the note added in the PR will guide people on how to resolve the issue.</p>",
        "id": 240488047,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622130364
    },
    {
        "content": "<p>I think not coincidentally, both implementations were written by Alex.</p>",
        "id": 240488759,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622130647
    }
]