[
    {
        "content": "<p>When we load <code>SourceFile</code>s from an external crate, we try to 'devirtualized' paths that point into the standard library: <a href=\"https://github.com/rust-lang/rust/blob/e1d49aaad4fde33469fdb786c29838a95a5d8a11/compiler/rustc_metadata/src/rmeta/decoder.rs#L1633-L1682\">https://github.com/rust-lang/rust/blob/e1d49aaad4fde33469fdb786c29838a95a5d8a11/compiler/rustc_metadata/src/rmeta/decoder.rs#L1633-L1682</a><br>\nThe result of the devirtualiztion depends on global untracked state (whether or not the <code>rust-src</code> exists during the current compilation session), represented by <code>sess.real_rust_source_base_dir</code>. As a result, adding/removing the <code>rust-src</code> compoonent can lead to an ICE now that we verify query result hashes.</p>\n<p>Currently, all external queries depend on the <code>eval_always</code> query <code>crate_hash</code>, which ensures that they get invalidated if an upstream crate is changed. I think the simplest way to fix this issue would be to make <code>crate_hash</code> depend on <code>real_rust_source_base_dir</code>. Unfortunately, this would mean that the crate computed seen during compilation of a crate is not necessarily the same as the crate hash that gets seen by a downstream crate.</p>\n<p>Another alternative would be to make a new query <code>crate_dependecy(CrateNum) -&gt; (Svh, String)</code> that explcitily includes <code>real_rust_source_base_dir</code> in its result. This would then cause external queries to be re-computed as necessary, without the need to modify the crate hash.</p>\n<p>I don't really like either of these solutions - I'm open to any other suggestions. The root issue is that data loaded from <em>foreign</em> crates depends on the state of our current compilation session,, but there's nothing we can do about that.</p>",
        "id": 233331863,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1617720791
    },
    {
        "content": "<p>I think we should keep using the virtualized path everywhere and only use the devirtualized path to actually read the source files. Currently builds are not reproducible with <code>rust-src</code> installed or not installed as it leaks into the debuginfo as far as I know.</p>",
        "id": 233335061,
        "sender_full_name": "bjorn3",
        "timestamp": 1617721495
    },
    {
        "content": "<p>I thought the leaking in the debuginfo was intentional, so that you get nice-looking paths in panic messages</p>",
        "id": 233335332,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1617721552
    },
    {
        "content": "<p>is there another use-case for devirtualized paths?</p>",
        "id": 233335463,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1617721569
    },
    {
        "content": "<p>Devirtualized paths are used to load the source for sysroot crates to show in error messages.</p>",
        "id": 233335630,
        "sender_full_name": "bjorn3",
        "timestamp": 1617721605
    },
    {
        "content": "<p>Maybe the debuginfo was also intentional, but I don't like it.</p>",
        "id": 233335776,
        "sender_full_name": "bjorn3",
        "timestamp": 1617721633
    },
    {
        "content": "<p>unfortunately, I think we cache diagnostics as part of a result</p>",
        "id": 233335941,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1617721671
    },
    {
        "content": "<p>and you could potentially emit a warning with a span that points into a devirtualized path</p>",
        "id": 233336008,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1617721684
    },
    {
        "content": "<p>so just using devirtualized paths for reading source files could still leak untracked global state into the query system</p>",
        "id": 233336097,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1617721702
    },
    {
        "content": "<p>not to mention the fact that that Cargo is unaware of the existence of <code>rustc-src</code>, so you could have a mixture of devirtualized and virtualized paths in the same crate graph</p>",
        "id": 233336685,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1617721836
    },
    {
        "content": "<p>I wonder if we could deprecate and remove the automatic detection, and require explictly passing in the path via a command-line argument</p>",
        "id": 233336953,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1617721901
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/Handling.20of.20'devirtualized'.20paths/near/233336097\">said</a>:</p>\n<blockquote>\n<p>so just using devirtualized paths for reading source files could still leak untracked global state into the query system</p>\n</blockquote>\n<p>I mean delaying the devirtualization until the <code>fs::read_to_string</code>, so the <code>SourceMap</code> would still contain the virtualized paths.</p>",
        "id": 233337020,
        "sender_full_name": "bjorn3",
        "timestamp": 1617721917
    },
    {
        "content": "<p>hmm</p>",
        "id": 233337103,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1617721932
    },
    {
        "content": "<p>that could work - we'd want some kind of wrapper around the <code>RealFileName</code> fields to ensure that a query can't use the actual path bytes</p>",
        "id": 233337364,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1617721990
    }
]