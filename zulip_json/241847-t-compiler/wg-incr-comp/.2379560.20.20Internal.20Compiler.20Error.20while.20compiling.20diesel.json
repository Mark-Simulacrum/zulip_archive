[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> <a href=\"https://github.com/rust-lang/rust/blob/ffe52882ed79be67344dd6085559e308241e7f60/compiler/rustc_query_system/src/query/plumbing.rs#L581-L593\">https://github.com/rust-lang/rust/blob/ffe52882ed79be67344dd6085559e308241e7f60/compiler/rustc_query_system/src/query/plumbing.rs#L581-L593</a></p>",
        "id": 218413977,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1606825288
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/48923\">#48923</a> looks strongly related to me</p>",
        "id": 218413995,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1606825302
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/48923#issuecomment-374681537\">https://github.com/rust-lang/rust/issues/48923#issuecomment-374681537</a></p>",
        "id": 218414130,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1606825364
    },
    {
        "content": "<p><code>Ident</code> uses <code>Symbol</code> internally so this could be a very similar issue</p>",
        "id": 218414186,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1606825401
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/eighth.20meeting.202020-12-01/near/218413977\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"https://github.com/rust-lang/rust/blob/ffe52882ed79be67344dd6085559e308241e7f60/compiler/rustc_query_system/src/query/plumbing.rs#L581-L593\">https://github.com/rust-lang/rust/blob/ffe52882ed79be67344dd6085559e308241e7f60/compiler/rustc_query_system/src/query/plumbing.rs#L581-L593</a></p>\n</blockquote>\n<p>yeah, have seen this and the problem seems to be because of 2.</p>",
        "id": 218415236,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606825962
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/eighth.20meeting.202020-12-01/near/218413995\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/48923\">#48923</a> looks strongly related to me</p>\n</blockquote>\n<p>taking a look at this ...</p>",
        "id": 218415260,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606825971
    },
    {
        "content": "<p>opening a new thread for this ...</p>",
        "id": 218415419,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606826059
    },
    {
        "content": "<p>on the issue it says ...</p>",
        "id": 218415518,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606826122
    },
    {
        "content": "<p>\" It can be compiled once (after \"cargo clean\"), with CARGO_INCREMENTAL=1\"</p>",
        "id": 218415521,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606826123
    },
    {
        "content": "<p>in my case it can't even be compiled once</p>",
        "id": 218415541,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606826142
    },
    {
        "content": "<p>still reading ...</p>",
        "id": 218415559,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606826154
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> seems like a similar problem, yeah</p>",
        "id": 218416448,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606826649
    },
    {
        "content": "<p>would need to debug this</p>",
        "id": 218416462,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606826656
    },
    {
        "content": "<p>any debugging tip for this? other than just placing <code>debug!</code> calls here and there?</p>",
        "id": 218416839,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606826871
    },
    {
        "content": "<p>unsure if we have some way to run and dump some incr compilation information</p>",
        "id": 218416894,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606826887
    },
    {
        "content": "<p>I don't know of any way to dump better info</p>",
        "id": 218419665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606828472
    },
    {
        "content": "<p>but it does seem plausible that this could lead to the same problem</p>",
        "id": 218419692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606828490
    },
    {
        "content": "<p>though I'm not sure</p>",
        "id": 218419716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606828505
    },
    {
        "content": "<p>maybe not <em>specifically</em> a problem with <code>gensym</code></p>",
        "id": 218419732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606828518
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>DEBUG rustc_middle::dep_graph::dep_node to_fingerprint: (test[317d]::Deserialize::deserialize, test[317d]::Deserialize::deserialize::D, Error)\nDEBUG rustc_middle::dep_graph::dep_node to_fingerprint#def_path_hash1: 46388f61ff57330d-8ef732f8c03e2f10\nDEBUG rustc_middle::dep_graph::dep_node to_fingerprint#def_path_hash2: e2b3ab1d0dd1b0c9-85e71e2a2f063f35\nDEBUG rustc_middle::dep_graph::dep_node to_fingerprint#ident: a78981997a1f2967-8341e972ee8212d0\nDEBUG rustc_middle::dep_graph::dep_node to_fingerprint: (test[317d]::{impl#0}::deserialize, test[317d]::{impl#0}::deserialize::D, Error)\nDEBUG rustc_middle::dep_graph::dep_node to_fingerprint#def_path_hash1: 2e00cbd8dce5e78b-e67cc8dccb8280b6\nDEBUG rustc_middle::dep_graph::dep_node to_fingerprint#def_path_hash2: ebf144ecf4c8c8e7-aa4a2d4229f5bfa1\nDEBUG rustc_middle::dep_graph::dep_node to_fingerprint#ident: f5d376ec0e1d1d43-8c120db5448a65bc\nDEBUG rustc_middle::dep_graph::dep_node to_fingerprint: (test[317d]::{impl#1}::deserialize, test[317d]::{impl#1}::deserialize::D, Error)\nDEBUG rustc_middle::dep_graph::dep_node to_fingerprint#def_path_hash1: 2828145dc72efaea-74cbee32e3cb672e\nDEBUG rustc_middle::dep_graph::dep_node to_fingerprint#def_path_hash2: 63ffbbeee9a2026e-59bd904979d916d\nDEBUG rustc_middle::dep_graph::dep_node to_fingerprint#ident: f5d376ec0e1d1d43-8c120db5448a65bc\n\n---\n\nDEBUG rustc_middle::dep_graph::dep_node to_fingerprint: (test[317d]::Deserializer, Some(Error#0))\nDEBUG rustc_middle::dep_graph::dep_node to_fingerprint#def_path_hash: 2440077b7e61b04a-f8b5b58c1f0bb9f0\nDEBUG rustc_middle::dep_graph::dep_node to_fingerprint#ident: a78981997a1f2967-8341e972ee8212d0\nDEBUG rustc_middle::dep_graph::dep_node to_fingerprint: (test[317d]::Deserializer, Some(Error#7))\nDEBUG rustc_middle::dep_graph::dep_node to_fingerprint#def_path_hash: 2440077b7e61b04a-f8b5b58c1f0bb9f0\nDEBUG rustc_middle::dep_graph::dep_node to_fingerprint#ident: f5d376ec0e1d1d43-8c120db5448a65bc\nDEBUG rustc_middle::dep_graph::dep_node to_fingerprint: (test[317d]::Deserializer, Some(Error#8))\nDEBUG rustc_middle::dep_graph::dep_node to_fingerprint#def_path_hash: 2440077b7e61b04a-f8b5b58c1f0bb9f0\nDEBUG rustc_middle::dep_graph::dep_node to_fingerprint#ident: f5d376ec0e1d1d43-8c120db5448a65bc\n</code></pre></div>",
        "id": 218473360,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606852845
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 218473375,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606852856
    },
    {
        "content": "<p>the first part is ok</p>",
        "id": 218473489,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606852906
    },
    {
        "content": "<p>in the second part as you can see for the <code>Ident</code> <code>Error#7</code> and <code>Error#8</code> I'm getting the same fingerprint</p>",
        "id": 218473582,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606852932
    },
    {
        "content": "<p>the code was ...</p>",
        "id": 218474020,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606853171
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Deserializer</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Error</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Deserialize</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">deserialize</span><span class=\"o\">&lt;</span><span class=\"n\">D</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">D</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">D</span>::<span class=\"n\">Error</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">D</span>: <span class=\"nc\">Deserializer</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">impl_deserialize</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$name</span>:<span class=\"nc\">ident</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Deserialize</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"cp\">$name</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">fn</span> <span class=\"nf\">deserialize</span><span class=\"o\">&lt;</span><span class=\"n\">D</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">D</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">D</span>::<span class=\"n\">Error</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">D</span>: <span class=\"nc\">Deserializer</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">formats</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">$($name</span>:<span class=\"nc\">ident</span><span class=\"p\">,)</span><span class=\"o\">*</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">$(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"cp\">$name</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"n\">impl_deserialize</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"cp\">$name</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">formats</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218474023,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606853174
    },
    {
        "content": "<p>I think I shouldn't be getting the same fingerprint because one's <code>D::Error</code> inside <code>Foo</code>'s declaration and the other one is on <code>Bar</code>'s declaration</p>",
        "id": 218474104,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606853227
    },
    {
        "content": "<p>also ...</p>",
        "id": 218477266,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606854708
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>DEBUG rustc_middle::dep_graph::dep_node to_fingerprint: (test[317d]::Deserializer, Some(Error#7))\nDEBUG rustc_middle::dep_graph::dep_node to_fingerprint#def_path_hash: 2440077b7e61b04a-f8b5b58c1f0bb9f0\nDEBUG rustc_middle::dep_graph::dep_node to_fingerprint#ident: f5d376ec0e1d1d43-8c120db5448a65bc\nDEBUG rustc_middle::dep_graph::dep_node to_fingerprint#ident#hash: 2b4b3c2f82ba3d31-e4fadc0c321fe9c5\nDEBUG rustc_middle::dep_graph::dep_node to_fingerprint: (test[317d]::Deserializer, Some(Error#8))\nDEBUG rustc_middle::dep_graph::dep_node to_fingerprint#def_path_hash: 2440077b7e61b04a-f8b5b58c1f0bb9f0\nDEBUG rustc_middle::dep_graph::dep_node to_fingerprint#ident: f5d376ec0e1d1d43-8c120db5448a65bc\nDEBUG rustc_middle::dep_graph::dep_node to_fingerprint#ident#hash: b32f1c09bee5a8ec-924268d9b1f8e736\n</code></pre></div>",
        "id": 218477270,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606854711
    },
    {
        "content": "<p>as I was guessing <code>hash_stable</code> is the same but <code>hash</code> differs</p>",
        "id": 218477302,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606854723
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">CTX</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">HashStable</span><span class=\"o\">&lt;</span><span class=\"n\">CTX</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Symbol</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">hash_stable</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">hcx</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">CTX</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">hasher</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">StableHasher</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">().</span><span class=\"n\">hash_stable</span><span class=\"p\">(</span><span class=\"n\">hcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">hasher</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218477544,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606854824
    },
    {
        "content": "<p>it's clear why is this happening, what's not clear to me is how to fix it :)</p>",
        "id": 218477624,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606854845
    },
    {
        "content": "<p>would I need to use <code>InternedString</code></p>",
        "id": 218477806,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606854950
    },
    {
        "content": "<p>like <a href=\"https://github.com/rust-lang/rust/issues/49695\">#49695</a></p>",
        "id": 218477818,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606854957
    },
    {
        "content": "<p>I could be wrong, but I think this is sort of the opposite situation from <a href=\"https://github.com/rust-lang/rust/issues/49695\">#49695</a>. In that one, we had two different <code>Symbol</code>s that logically should have produced the same value but did not because their hygiene was different so using <code>InternedString</code> which just cares about the string value itself worked. </p>\n<p>As you say, in this case, these actually refer to different things (the expanded <code>Error</code> for <code>Foo</code> and the expanded <code>Error</code> for <code>Bar</code>). But it looks like what's happening is that we're getting the same hash values (because it uses <code>self.as_str()</code>) when they really should be different. This leads to colliding fingerprints for different <code>DepNodes</code></p>",
        "id": 218478737,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1606855455
    },
    {
        "content": "<p>It kind of seems to me that the bug is that <code>&lt;Symbol as HashStable&gt;::hash_stable</code> does not take hygiene or whatever into account.</p>",
        "id": 218478935,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1606855563
    },
    {
        "content": "<p>But perhaps fixing that will break lots of other parts of the compiler. IDK.</p>",
        "id": 218478980,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1606855580
    },
    {
        "content": "<p>yeah, what you're saying makes sense and it's right that <code>InternetString</code> won't be a solution</p>",
        "id": 218479054,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606855622
    },
    {
        "content": "<p>I wouldn't change that, shouldn't we just wrap <code>Ident</code> in a different struct for this case or something like that?</p>",
        "id": 218479149,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606855670
    },
    {
        "content": "<p>That seems like a pragmatic solution to me <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 218479254,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1606855711
    },
    {
        "content": "<p>well, maybe we should pass a type that has some kind of context that makes these things different</p>",
        "id": 218479263,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606855713
    },
    {
        "content": "<p>At the very least, it's worth a test to see if it resolves the issue. That would pretty much confirm what's happening.</p>",
        "id": 218479300,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1606855730
    },
    {
        "content": "<p>because these two things as <code>Ident</code>s are the same if I'm not wrong</p>",
        "id": 218479306,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606855734
    },
    {
        "content": "<p>Er yeah</p>",
        "id": 218479327,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1606855744
    },
    {
        "content": "<p>they involve <code>Symbol</code> and <code>Span</code> which are <code>==</code></p>",
        "id": 218479341,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606855751
    },
    {
        "content": "<p>Wrap <code>Symbol</code> and implement <code>HashStable</code> correctly</p>",
        "id": 218479367,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1606855765
    },
    {
        "content": "<p>hmm what would that mean?</p>",
        "id": 218479401,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606855788
    },
    {
        "content": "<p>Huh, I'd assumed the <code>#8</code> part of <code>Error#8</code> was some kind of scoping identifier or something but I don't see anything like that inside <code>Symbol</code></p>",
        "id": 218480016,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1606856077
    },
    {
        "content": "<p>Is that actually just part of the string?</p>",
        "id": 218480042,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1606856091
    },
    {
        "content": "<p>I was confused by the same</p>",
        "id": 218480508,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606856295
    },
    {
        "content": "<p>but I guess that's something related to the fact that there are two instances in memory of that type</p>",
        "id": 218480559,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606856314
    },
    {
        "content": "<p>and actually the hash is different</p>",
        "id": 218480572,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606856321
    },
    {
        "content": "<p>because the values in memory are different</p>",
        "id": 218480594,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606856329
    },
    {
        "content": "<p>but when you <code>hash_stable</code> you get the same value as expected</p>",
        "id": 218480624,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606856342
    },
    {
        "content": "<p>It can't be part of the <code>Symbol</code> text itself then because <code>Error#7</code> and <code>Error#8</code> get the same hash</p>",
        "id": 218480650,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1606856357
    },
    {
        "content": "<p>I'm not sure about <code>Symbol</code> but the <code>Ident</code>'s hash are different</p>",
        "id": 218480743,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606856394
    },
    {
        "content": "<p>what's the same is the <code>hash_stable</code> not the <code>hash</code></p>",
        "id": 218480788,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606856404
    },
    {
        "content": "<p>let me check the code again</p>",
        "id": 218480845,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606856419
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Hash</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Ident</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">hash</span><span class=\"o\">&lt;</span><span class=\"n\">H</span>: <span class=\"nc\">Hasher</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">state</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">.</span><span class=\"n\">ctxt</span><span class=\"p\">().</span><span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218480965,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606856470
    },
    {
        "content": "<p><code>Symbol</code> derives <code>Hash</code></p>",
        "id": 218481072,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606856520
    },
    {
        "content": "<p>so yeah, <code>Symbol</code> hash is also different</p>",
        "id": 218481132,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606856533
    },
    {
        "content": "<p>I believe <code>Symbol::hash</code> is implemented by hashing the pointer/index to the string in the intern table. <code>&lt;Symbol as HashStable&gt;::hash_stable</code> hashes the text content itself.</p>",
        "id": 218481445,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1606856685
    },
    {
        "content": "<p>If you can figure out where the <code>#8</code> thing is coming from, that will probably tell you what data needs to be hashed as well as the string content.</p>",
        "id": 218481659,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1606856789
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Might know off hand or be able to point you in the right direction as well as confirm if my analysis <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/.2379560.20.20Internal.20Compiler.20Error.20while.20compiling.20diesel/near/218478737\">here</a> is off base or not.</p>",
        "id": 218481980,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1606856962
    },
    {
        "content": "<p>So</p>",
        "id": 218494718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606863886
    },
    {
        "content": "<p>It seems like the problem <em>is</em> related to <code>gensym</code>, eh? Or at least hygiene</p>",
        "id": 218494732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606863897
    },
    {
        "content": "<p>I guess that <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> has important context here</p>",
        "id": 218494743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606863902
    },
    {
        "content": "<p>one other note <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> is that we maybe didn't want <code>Ident</code> in the first place, as I guess that includes a <code>Span</code></p>",
        "id": 218494810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606863939
    },
    {
        "content": "<p>or...maybe I'm confused, sorry</p>",
        "id": 218494891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606863966
    },
    {
        "content": "<p>actually, I don't think I am</p>",
        "id": 218494936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606864003
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/.2379560.20.20Internal.20Compiler.20Error.20while.20compiling.20diesel/near/218477806\">said</a>:</p>\n<blockquote>\n<p>would I need to use <code>InternedString</code></p>\n</blockquote>\n<p>I think using <code>InternedString</code> could actually work</p>",
        "id": 218495031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606864062
    },
    {
        "content": "<p>it is maybe not <em>ideal</em></p>",
        "id": 218495106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606864098
    },
    {
        "content": "<p>the ideal would be probably to use <code>Symbol</code>, since hygiene info is relevant</p>",
        "id": 218495163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606864137
    },
    {
        "content": "<p>but if we passed in just the \"plain text\" and had a less precise comparison</p>",
        "id": 218495171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606864145
    },
    {
        "content": "<p>that would still solve the bug</p>",
        "id": 218495174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606864148
    },
    {
        "content": "<p>We no longer have gensym <code>Symbol</code>s, all the hygiene bits are in <code>Span</code> now.</p>",
        "id": 218495988,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1606864657
    },
    {
        "content": "<p><code>Symbol</code> is just a string now.</p>",
        "id": 218496012,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1606864673
    },
    {
        "content": "<p><code>InternedString</code> is also gone.</p>",
        "id": 218496114,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1606864719
    },
    {
        "content": "<p>Looks like it was renamed to <code>SymbolStr</code>, I don't quite remember when it happened.</p>",
        "id": 218496223,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1606864803
    },
    {
        "content": "<p>I can confirm that in the past these kinds of bugs were always related to <code>StableHash</code> impls ignoring information, often related to things like hygiene information.</p>",
        "id": 218556081,
        "sender_full_name": "mw",
        "timestamp": 1606916144
    },
    {
        "content": "<p>ok, thanks everyone for sharing this info</p>",
        "id": 218563341,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606919428
    },
    {
        "content": "<p>I don't know what kind of hygiene info is being ignored in this case</p>",
        "id": 218563401,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606919452
    },
    {
        "content": "<p>well as Niko have said, I may need to not use <code>Ident</code> and change to something else</p>",
        "id": 218563452,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606919471
    },
    {
        "content": "<p>but I have no idea what to use instead to fix this problem and be able to provide all the needed information</p>",
        "id": 218563545,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606919513
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> As <code>petrochenkov</code> said, I think you want to use <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/symbol/struct.SymbolStr.html\"><code>SymbolStr</code></a></p>",
        "id": 218564275,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1606919800
    },
    {
        "content": "<p>can try that but don't understand why that would solve the issue</p>",
        "id": 218564421,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606919863
    },
    {
        "content": "<p>I meant, I guess those hash stables would differ but unsure why/how</p>",
        "id": 218564527,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606919893
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">CTX</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">HashStable</span><span class=\"o\">&lt;</span><span class=\"n\">CTX</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SymbolStr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">hash_stable</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">hcx</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">CTX</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">hasher</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">StableHasher</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">string</span><span class=\"p\">.</span><span class=\"n\">hash_stable</span><span class=\"p\">(</span><span class=\"n\">hcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">hasher</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218564915,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606920026
    },
    {
        "content": "<p>seems like unless I encode some information inside the string it will return the same hash_stable</p>",
        "id": 218564976,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606920053
    },
    {
        "content": "<p>The hashing mismatch might creep in through the special HashStable impl for <code>Span</code> (which is a field of <code>Ident</code>): <a href=\"https://github.com/rust-lang/rust/blob/c7cff213e937c1bb301be807ce04fcf6092b9163/compiler/rustc_span/src/lib.rs#L1853-L1931\">https://github.com/rust-lang/rust/blob/c7cff213e937c1bb301be807ce04fcf6092b9163/compiler/rustc_span/src/lib.rs#L1853-L1931</a></p>",
        "id": 218669122,
        "sender_full_name": "mw",
        "timestamp": 1606987091
    },
    {
        "content": "<p>All \"invalid\" spans hash to the same value in <code>HashStable</code>, but <code>Hash</code> and <code>Eq</code> are based on the spans actual bits.</p>",
        "id": 218669191,
        "sender_full_name": "mw",
        "timestamp": 1606987152
    },
    {
        "content": "<p>So using <code>Symbol</code> or <code>SymbolStr</code> instead of <code>Ident</code> might solve the problem.</p>",
        "id": 218669222,
        "sender_full_name": "mw",
        "timestamp": 1606987182
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/.2379560.20.20Internal.20Compiler.20Error.20while.20compiling.20diesel/near/218669122\">said</a>:</p>\n<blockquote>\n<p>The hashing mismatch might creep in through the special HashStable impl for <code>Span</code> (which is a field of <code>Ident</code>): <a href=\"https://github.com/rust-lang/rust/blob/c7cff213e937c1bb301be807ce04fcf6092b9163/compiler/rustc_span/src/lib.rs#L1853-L1931\">https://github.com/rust-lang/rust/blob/c7cff213e937c1bb301be807ce04fcf6092b9163/compiler/rustc_span/src/lib.rs#L1853-L1931</a></p>\n</blockquote>\n<p>I'm clearly not following something here or in general</p>",
        "id": 218703955,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1607007587
    },
    {
        "content": "<p>I'm getting two \"different\" <code>Ident</code>s to give the same <code>hash_stable</code></p>",
        "id": 218704062,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1607007613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> was telling me the same thing as you</p>",
        "id": 218704089,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1607007625
    },
    {
        "content": "<p><code>Ident</code> is <code>Symbol</code> + <code>Span</code> and if I'm getting the same <code>hash_stable</code> I don't understand how getting rid of <code>Span</code> would now give different <code>hash_stable</code> values</p>",
        "id": 218704256,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1607007689
    },
    {
        "content": "<p><code>Error#7</code> and <code>Error#8</code> are the same <code>Ident</code> (<code>Error</code>), but the disambiguator, which should also be included in <code>hash_stable</code> is different.</p>",
        "id": 218704261,
        "sender_full_name": "bjorn3",
        "timestamp": 1607007691
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/definitions/struct.DisambiguatedDefPathData.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/definitions/struct.DisambiguatedDefPathData.html</a></p>",
        "id": 218704461,
        "sender_full_name": "bjorn3",
        "timestamp": 1607007757
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/.2379560.20.20Internal.20Compiler.20Error.20while.20compiling.20diesel/near/218704261\">said</a>:</p>\n<blockquote>\n<p><code>Error#7</code> and <code>Error#8</code> are the same <code>Ident</code> (<code>Error</code>), but the disambiguator, which should also be included in <code>hash_stable</code> is different.</p>\n</blockquote>\n<p>so you meant something different to what <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> and <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> are saying, what you're suggesting is that <code>hash_stable</code> implementation for <code>Ident</code> should include the disambiguator information?</p>",
        "id": 218710802,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1607009933
    },
    {
        "content": "<p>No, the <code>Ident</code> should be identical (except for maybe the <code>Span</code>), but the <code>DisambiguatedDefPathData</code>, which contains the disambiguator should be different and thus result in a different <code>hash_stable</code>.</p>",
        "id": 218711156,
        "sender_full_name": "bjorn3",
        "timestamp": 1607010059
    },
    {
        "content": "<p>Summary of my understanding quickly reading which I think explains the confusion: Ident has a span and the error is understood by some to be that two different errors have the same ident (because their name and span are equivalent, but are supposed to be different), while others understand that two idents that should Eq, don't purely because of the span.<br>\nIf the later is the case, then using SymbolStr instead does fix the issue.</p>",
        "id": 218712549,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1607010621
    },
    {
        "content": "<p>in cases like this is where I again confirm that I have severe english understanding issues :'(</p>",
        "id": 218739820,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1607022387
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/.2379560.20.20Internal.20Compiler.20Error.20while.20compiling.20diesel/near/218711156\">said</a>:</p>\n<blockquote>\n<p>No, the <code>Ident</code> should be identical (except for maybe the <code>Span</code>), but the <code>DisambiguatedDefPathData</code>, which contains the disambiguator should be different and thus result in a different <code>hash_stable</code>.</p>\n</blockquote>\n<p>ok, I got what you meant, but I'm not sure what are you suggesting. Are you suggesting to use the disambiguator?</p>",
        "id": 218739945,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1607022464
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119031\">Esteban Küber</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/.2379560.20.20Internal.20Compiler.20Error.20while.20compiling.20diesel/near/218712549\">said</a>:</p>\n<blockquote>\n<p>Summary of my understanding quickly reading which I think explains the confusion: Ident has a span and the error is understood by some to be that two different errors have the same ident (because their name and span are equivalent, but are supposed to be different), while others understand that two idents that should Eq, don't purely because of the span.<br>\nIf the later is the case, then using SymbolStr instead does fix the issue.</p>\n</blockquote>\n<p>I'm in the group that understand what you've said first.</p>",
        "id": 218740341,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1607022640
    },
    {
        "content": "<p>my problem is with \" then using SymbolStr instead does fix the issue\" I'm not sure how you all are concluding this</p>",
        "id": 218740371,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1607022661
    },
    {
        "content": "<p>given that most of you suggest that I'd guess that's correct but I have no idea where this conclusion comes from</p>",
        "id": 218740401,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1607022680
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/.2379560.20.20Internal.20Compiler.20Error.20while.20compiling.20diesel/near/218495171\">said</a>:</p>\n<blockquote>\n<p>but if we passed in just the \"plain text\" and had a less precise comparison<br>\nthat would sill solve the bug</p>\n</blockquote>\n<p>I think this is is the part that got missed. Niko is saying that just comparing the plain text should solve the bug and that's what <code>SymbolStr</code> does.</p>",
        "id": 218740762,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1607022844
    },
    {
        "content": "<p>I think the key is ... do we want these two idents to be different and be interpreted as different things by incr comp? or do we want them to be the same and be interpreted as the same thing by incr comp?</p>",
        "id": 218740897,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1607022905
    },
    {
        "content": "<p>what's currently going on seems to me that both things are different but have the same hash</p>",
        "id": 218740935,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1607022925
    },
    {
        "content": "<p>so it's neither of the things that would make incr comp happy</p>",
        "id": 218740968,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1607022940
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/.2379560.20.20Internal.20Compiler.20Error.20while.20compiling.20diesel/near/218740897\">said</a>:</p>\n<blockquote>\n<p>I think the key is ... do we want these two idents to be different and be interpreted as different things by incr comp? or do we want them to be the same and be interpreted as the same thing by incr comp?</p>\n</blockquote>\n<p>still these two things are semantically different</p>",
        "id": 218741065,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1607022968
    },
    {
        "content": "<p>and I'm not sure which one is right</p>",
        "id": 218741076,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1607022975
    },
    {
        "content": "<p>Yeah that's definitely the issue</p>",
        "id": 218741079,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1607022978
    },
    {
        "content": "<p>My intuition was that we should make sure they compare differently if they are different things but it sounds like that difference does not matter in this case so it's ok if we treat them as equal.</p>",
        "id": 218741157,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1607023018
    },
    {
        "content": "<p>yeah that's right but ...</p>",
        "id": 218741334,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1607023094
    },
    {
        "content": "<p>as I've said, should these two things be equal and have the same hash or should they be different and have different hashes?</p>",
        "id": 218741394,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1607023126
    },
    {
        "content": "<p>what that would semantically mean in terms of incr comp would be different</p>",
        "id": 218741420,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1607023142
    },
    {
        "content": "<p>in the sense that equals things would be reused</p>",
        "id": 218741453,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1607023157
    },
    {
        "content": "<p>so do I want that what <code>format!(Foo)</code> generates be reused when <code>format!(Bar)</code> is called in that context?</p>",
        "id": 218741495,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1607023186
    },
    {
        "content": "<p>I think from what niko was saying, either option would work but making them equal with equal hashes via <code>SymbolStr</code> is probably going to be easier.</p>",
        "id": 218742384,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1607023594
    },
    {
        "content": "<p>I found out a bit more about how the hash mismatch happens: <a href=\"https://github.com/rust-lang/rust/issues/79560#issuecomment-738714717\">https://github.com/rust-lang/rust/issues/79560#issuecomment-738714717</a></p>",
        "id": 218817390,
        "sender_full_name": "mw",
        "timestamp": 1607079035
    },
    {
        "content": "<p>but I have too little insight into hygiene and macro expansion to propose a solution.</p>",
        "id": 218817445,
        "sender_full_name": "mw",
        "timestamp": 1607079074
    }
]