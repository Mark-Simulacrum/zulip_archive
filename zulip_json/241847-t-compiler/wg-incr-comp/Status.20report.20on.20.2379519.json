[
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"3282\">@wg-incr-comp</span>: I was watching the last meeting's video, and a status update on <a href=\"https://github.com/rust-lang/rust/issues/79519\">#79519</a> is useful.</p>\n<p>The objective of the PR is to remove all the <code>&amp;[Attribute]</code> slices from the HIR.<br>\nThe operational assumption is that attributes only impact one pass of the compilation process (eg: allow one lint). Therefore, removing them from the HIR would allow to reuse a lot of analyses.<br>\nTechnically, the attributes are stored out of the HIR tree in a <code>HirId -&gt; &amp;[Attribute]</code> map. This map is accessible through a <code>hir_attrs(HIR owner)</code> query. The commits modify the HIR nodes one by one along with the fallout in other crates. A few commits contain refactorings, btu not nearly enough.<br>\nThe first version used nested <code>IndexVec</code>s, and had a ~5% instruction-count regression.<br>\nThe latest version uses a <code>BTreeMap&lt;HirId, &amp;[Attribute]&gt;</code>, considering attributes are rare and this map should be sparse. The instruction-count regression is at ~2%.</p>\n<p>I am out of ideas on how to remove this perf regression.</p>",
        "id": 225879302,
        "sender_full_name": "cjgillot",
        "timestamp": 1612979447
    },
    {
        "content": "<p>is the <code>ThinIndexVec</code> idea unlikely to have a better performance profile than the <code>BTreeMap</code> ?</p>",
        "id": 225880057,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612979725
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/Status.20report.20on.20.2379519/near/225880057\">said</a>:</p>\n<blockquote>\n<p>is the <code>ThinIndexVec</code> idea unlikely to have a better performance profile than the <code>BTreeMap</code> ?</p>\n</blockquote>\n<p>To expand on this, the idea was what I mentioned <a href=\"https://github.com/rust-lang/rust/pull/79519#issuecomment-766271830\">here</a> and to try using a <code>IndexVec&lt;LocalDefId, ThinIndexVec&lt;ItemLocalId, &amp;'tcx [Attribute]&gt;&gt;</code> instead of the original <code>IndexVec&lt;LocalDefId, IndexVec&lt;ItemLocalId, &amp;'tcx [Attribute]&gt;&gt;</code> which is now a <code>BTreeMap</code>. We could then compare the <code>BTreeMap</code> performance vs the <code>IndexVec&lt;LocalDefId, ThinIndexVec&lt;ItemLocalId, &amp;'tcx [Attribute]&gt;&gt;</code> performance and see which is better.</p>",
        "id": 225882501,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1612980710
    },
    {
        "content": "<p>I haven't tried ThinIndexVec yet (missed that part of your comment).<br>\nI am not sure it would help: going from <code>IndexVec</code> to <code>ThinIndex</code> is a pessimisation in terms of instruction count.<br>\n<code>BTreeMap</code> is already less-bad in instr-count, and a win in max-rss.<br>\nNevertheless, I will try the ThinIndexVec just to be sure.</p>",
        "id": 225887044,
        "sender_full_name": "cjgillot",
        "timestamp": 1612982549
    },
    {
        "content": "<p>No worries! The <code>BTreeMap</code> helped a lot more than I thought it would but it would still be interesting to compare with the <code>ThinIndexVec</code> idea.</p>",
        "id": 225896050,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1612986189
    },
    {
        "content": "<p>-&gt; <a href=\"https://github.com/rust-lang/rust/issues/81970\">#81970</a></p>",
        "id": 225899517,
        "sender_full_name": "cjgillot",
        "timestamp": 1612987717
    },
    {
        "content": "<p>Perf results for ThinIndexVec in <a href=\"https://perf.rust-lang.org/compare.html?start=07194ffcd25b0871ce560b9f702e52db27ac9f77&amp;end=f45ada695c0cefd9467ffed78545a63ef2341bbd\">https://perf.rust-lang.org/compare.html?start=07194ffcd25b0871ce560b9f702e52db27ac9f77&amp;end=f45ada695c0cefd9467ffed78545a63ef2341bbd</a></p>",
        "id": 225922878,
        "sender_full_name": "cjgillot",
        "timestamp": 1612996845
    },
    {
        "content": "<p>Perf regression ~6%, a bit worse than the original IndexVec version. No significant difference on max-rss.</p>",
        "id": 225923079,
        "sender_full_name": "cjgillot",
        "timestamp": 1612996949
    }
]