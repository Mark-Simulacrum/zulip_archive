[
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> lets talk here</p>",
        "id": 278361978,
        "sender_full_name": "pnkfelix",
        "timestamp": 1649451783
    },
    {
        "content": "<p>so, for context, the topic is the MCVE reported in <a href=\"https://github.com/rust-lang/rust/issues/91114#issuecomment-1092293478\">https://github.com/rust-lang/rust/issues/91114#issuecomment-1092293478</a></p>",
        "id": 278362109,
        "sender_full_name": "pnkfelix",
        "timestamp": 1649451851
    },
    {
        "content": "<p>Let me post the slightly smaller repro I generated in that issue.</p>",
        "id": 278362130,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1649451862
    },
    {
        "content": "<p>did you get rid of the anyhow dep?</p>",
        "id": 278362404,
        "sender_full_name": "pnkfelix",
        "timestamp": 1649452023
    },
    {
        "content": "<p>to me that seems like the obvious first thing to <em>attempt</em> (just to make something we'll be able to make an immediate regression test from); but it also may just be impossible to do so without hiding the bug</p>",
        "id": 278362456,
        "sender_full_name": "pnkfelix",
        "timestamp": 1649452064
    },
    {
        "content": "<p>(when I myself removed anyhow, it didn't immediately repro)</p>",
        "id": 278362526,
        "sender_full_name": "lqd",
        "timestamp": 1649452093
    },
    {
        "content": "<p>To continue with the important context here: the reported MCVE, Wesley clarified to me, reproduces the bug in question where all you need to do is: 1. <code>cargo build</code>, 2. <code>touch src/lib.rs</code>, 3. <code>cargo build</code></p>",
        "id": 278362539,
        "sender_full_name": "pnkfelix",
        "timestamp": 1649452101
    },
    {
        "content": "<p>No I wasn't able to remove the anyhow dep.</p>",
        "id": 278362545,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1649452106
    },
    {
        "content": "<p>it seems to need another crate, and anyhow could likely be minimized as well</p>",
        "id": 278362643,
        "sender_full_name": "lqd",
        "timestamp": 1649452178
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/evaluate_obligation.20ICE.20.2391114/near/278362539\">said</a>:</p>\n<blockquote>\n<p>To continue with the important context here: the reported MCVE, Wesley clarified to me, reproduces the bug in question where all you need to do is: 1. <code>cargo build</code>, 2. <code>touch src/lib.rs</code>, 3. <code>cargo build</code></p>\n</blockquote>\n<p>this observation led me to realize: That is a <em>trivial</em> scenario for us to test. its like, the minimum bar we should strive for.</p>",
        "id": 278362648,
        "sender_full_name": "pnkfelix",
        "timestamp": 1649452183
    },
    {
        "content": "<p>(i.e. build, touch <code>src/lib.rs</code> (or maybe <code>touch src/*.rs</code> ?), and then rebuild.)</p>",
        "id": 278362673,
        "sender_full_name": "pnkfelix",
        "timestamp": 1649452201
    },
    {
        "content": "<p>It doesn't seem like it should be <em>that</em> difficult to teach crater how to do that ...</p>",
        "id": 278362970,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1649452377
    },
    {
        "content": "<p>So I guess there's a few things we can do from here:</p>\n<ol>\n<li>Try to work on minimizing the repro further and then tease out what is causing the fingerprint mismatch. </li>\n<li>Work on crater support for basic incremental testing of the no-op case.</li>\n<li>Look at bisecting rustc and see where this started happening. </li>\n<li>others?</li>\n</ol>",
        "id": 278363467,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1649452685
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/evaluate_obligation.20ICE.20.2391114/near/278363467\">said</a>:</p>\n<blockquote>\n<ol start=\"3\">\n<li>Look at bisecting rustc and see where this started happening. </li>\n</ol>\n</blockquote>\n<p>bisection seems to point towards <a href=\"https://github.com/rust-lang/rust/pull/93572\">https://github.com/rust-lang/rust/pull/93572</a></p>",
        "id": 278367543,
        "sender_full_name": "lqd",
        "timestamp": 1649455284
    },
    {
        "content": "<p>hm, if bisection is pointing to library changes then the issue probably existed in rustc but wasn't triggered until then</p>",
        "id": 278368720,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1649456062
    },
    {
        "content": "<p>might be too much work, but i wonder if you could bisect reapplying <a href=\"https://github.com/rust-lang/rust/issues/93572\">#93572</a> on top</p>",
        "id": 278368747,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1649456090
    },
    {
        "content": "<p>yeah I'm trying to revert the few PRs depending on that change that have since landed (it's a conflict fest)</p>",
        "id": 278368973,
        "sender_full_name": "lqd",
        "timestamp": 1649456237
    },
    {
        "content": "<p>at least it seems reverting <a href=\"https://github.com/rust-lang/rust/issues/93572\">#93572</a> <a href=\"https://github.com/rust-lang/rust/issues/94041\">#94041</a> and <a href=\"https://github.com/rust-lang/rust/issues/94115\">#94115</a> prevents the repro + libcore from hitting the incremental bug</p>",
        "id": 278370283,
        "sender_full_name": "lqd",
        "timestamp": 1649457229
    },
    {
        "content": "<p>bisecting by rebuilding rustc + those 3 PRs at each step (if they apply cleanly) (or just 93572 if that is enough for the repro to build) sounds a bit painful <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 278370689,
        "sender_full_name": "lqd",
        "timestamp": 1649457545
    },
    {
        "content": "<p>maybe libcore could be minimized with the repro</p>",
        "id": 278370748,
        "sender_full_name": "lqd",
        "timestamp": 1649457602
    },
    {
        "content": "<p>lol, messaged the wrong zulip thread -- but I think I have the root cause</p>",
        "id": 278374837,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1649461398
    },
    {
        "content": "<p>so we're evaluating the predicate to EvaluatedToOk during the first run, and then EvaluatedToOkModuloRegions during the second run</p>",
        "id": 278374851,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1649461415
    },
    {
        "content": "<p>i can scan through the rustc_trait_selection debug output to find out why that might be the case</p>",
        "id": 278374862,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1649461431
    },
    {
        "content": "<p>Oh, excellent! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 278375294,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1649461893
    },
    {
        "content": "<p>my theory is something (probably during typeck) is \"priming\" the trait selection cache during the first run. but then during the second run, we have a fresh cache, re-evaluate the trait predicate, and have some left-over outlives predicates, leading to ModuloRegions on the second run.</p>",
        "id": 278376512,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1649463184
    },
    {
        "content": "<p>i'm still scanning the output logs and can see some differences, still looking though</p>",
        "id": 278376519,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1649463200
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> ran into issues like this when the incremental tracking issue was first made I think, might have suggestions</p>",
        "id": 278378786,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649466091
    },
    {
        "content": "<p>well this seems to be due to the projection cache</p>",
        "id": 278380895,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1649468998
    },
    {
        "content": "<p>spent too much time on this, but I wrote up some findings here: <a href=\"https://github.com/rust-lang/rust/issues/91114#issuecomment-1093698736\">https://github.com/rust-lang/rust/issues/91114#issuecomment-1093698736</a></p>",
        "id": 278388671,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1649481191
    },
    {
        "content": "<p>similar issues with a predicate being evaluated to EvaluatedToOK and OkModuloRegions with the projection cache have happened before, eg see a fix for sub-obligations by <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span>'s PR <a href=\"https://github.com/rust-lang/rust/pull/85868\">https://github.com/rust-lang/rust/pull/85868</a></p>",
        "id": 278396688,
        "sender_full_name": "lqd",
        "timestamp": 1649492795
    },
    {
        "content": "<p>Oof... modulo regions <em>again</em> <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 278400265,
        "sender_full_name": "oli",
        "timestamp": 1649498005
    }
]