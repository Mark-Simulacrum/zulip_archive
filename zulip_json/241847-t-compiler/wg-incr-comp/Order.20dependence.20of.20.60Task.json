[
    {
        "content": "<p>I've been experimenting locally with removing <code>TaskDeps.reads</code>, and just using <code>TaskDeps.read_set</code>. However, it appears that something is relying on the insertion order being preserved. If I just rely on the iteration order of the <code>FxHashSet</code> (where we previously iterated over <code>TaskDeps.reads</code>, then two incremental tests fail. If I switch it to use <code>linked_hash_set::LinkedHashSet</code>, then the tests pass</p>",
        "id": 241713678,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1623018141
    },
    {
        "content": "<p>the insertion order is itself pretty arbitrary (whatever order the query access its dependencies in), so I think that the problem arises from the order <em>changing</em>.  The failing tests both fail to recover a <code>DefId</code>, which suggests that we're incorrectly marking a query as green (e.g. we are somehow  losing track of edges). However, I don't see anything in the code that relies on the order of edges being unchanged</p>",
        "id": 241713756,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1623018284
    },
    {
        "content": "<p>Never mind - nothing was getting marked green incorrectly. Since the edges were in a different order during loading, marking the node green tried to load a different query before the <code>tcx.hir()</code> dependency. When the edges are loaded in order, the 'parent' dependency (e.g. <code>hir().local_def_id_to_hir_id</code> will always be run first, which prevents this problem)</p>",
        "id": 241725911,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1623038093
    },
    {
        "content": "<p>Can you elaborate on your reasoning? I am not sure I follow.<br>\nNeither <code>tcx.hir()</code> nor <code>tcx.hir().local_def_id_to_hir_id</code> are queries.</p>",
        "id": 241805135,
        "sender_full_name": "cjgillot",
        "timestamp": 1623084170
    },
    {
        "content": "<p>I didn't look to closely into it - the failing query was <code>lookup_deprecation_entry</code></p>",
        "id": 241830980,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1623095475
    },
    {
        "content": "<p>I see - I forgot that <code>tcx.hir()</code> doesn't actually invoke any queries</p>",
        "id": 241831215,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1623095610
    },
    {
        "content": "<p>what I think happened was something like <code>let res = tcx.first_query(val); tcx.second_query(res)</code> inside of a query impl</p>",
        "id": 241831300,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1623095644
    },
    {
        "content": "<p>when we tried to mark the deps of that query as green, we started with <code>second_query</code></p>",
        "id": 241831333,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1623095663
    },
    {
        "content": "<p>normally, we would have started with <code>first_query</code>, which would have failed, so we would never get to <code>second_query</code></p>",
        "id": 241831450,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1623095700
    },
    {
        "content": "<p>This could probably be reproduced without any of the hash set changes by inserting <code>tasl+deps.reads.reverse()</code> in the proper place</p>",
        "id": 241833990,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1623096782
    },
    {
        "content": "<p>Preserving the order of dependencies is needed for correctness. A query provider is still just a regular procedure. I don't have time right now but I'll try to come up with a good example tomorrow.</p>",
        "id": 241942641,
        "sender_full_name": "mw",
        "timestamp": 1623167946
    }
]