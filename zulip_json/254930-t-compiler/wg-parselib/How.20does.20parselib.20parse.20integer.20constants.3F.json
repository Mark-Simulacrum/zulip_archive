[
    {
        "content": "<p>Does anyone know or can point me to how rustc parses integer constants. It's a surprisingly tricky problem when the language supports expressions like let x = a-3. If the minus is directly consumed by the lexer and produces an integer atom, x - 3 will work with the regular binary expression rules, but x-3 will be Var(x) Int(-3) which if you create custom exceptions for in the parser isn't trivial either to avoid botching precedence. It gets more complicated, with signed integers the largest positive is one smaller than the smallest negative, so you can't parse the int without the minus, or you have to delay error production or str to int to some later pass. Which is annyoing if you want to produce an AST in one go.</p>",
        "id": 275799355,
        "sender_full_name": "Lukas Bergdoll",
        "timestamp": 1647608849
    },
    {
        "content": "<p>the lexer doesn't produce negative literals, the parser parses them as unary minus expressions if they are alone, or in the case of <code>x-3</code> as a binary minus operation</p>",
        "id": 275804910,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1647611476
    },
    {
        "content": "<p>But how does it doe that? How does it store the constant along the way, and when is the error handling done. No matter what I can't find a way to do something like this in a single pass.</p>",
        "id": 275809031,
        "sender_full_name": "Lukas Bergdoll",
        "timestamp": 1647613356
    },
    {
        "content": "<p>For example if you store a i32 literal as i32 literal you run into problems for i32::min when you try to negate <code>-2147483648</code>. <code>2147483648</code> is not a valid i32.</p>",
        "id": 275809193,
        "sender_full_name": "Lukas Bergdoll",
        "timestamp": 1647613436
    },
    {
        "content": "<p>literal values are stored as u128, all possible literals fit in that</p>",
        "id": 275810293,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1647613966
    },
    {
        "content": "<p>Do  you know when and in which component an error is produced?</p>",
        "id": 276012972,
        "sender_full_name": "Lukas Bergdoll",
        "timestamp": 1647846679
    },
    {
        "content": "<p>literal errors are here: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/util/literal/enum.LitError.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/util/literal/enum.LitError.html#</a></p>\n<p>the parser turns them into diagnostics here: <a href=\"https://github.com/rust-lang/rust/blob/051d1176b786aadd7d7c048f822cb6bfab00fe03/compiler/rustc_parse/src/parser/expr.rs#L1843\">https://github.com/rust-lang/rust/blob/051d1176b786aadd7d7c048f822cb6bfab00fe03/compiler/rustc_parse/src/parser/expr.rs#L1843</a></p>",
        "id": 276050976,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1647869760
    }
]