[
    {
        "content": "<p>This is a topic to collect \"maybe\" work items -- from bona fide issues, to vague ideas which needs some looking into before deciding if they are good.</p>",
        "id": 208408803,
        "sender_full_name": "matklad",
        "timestamp": 1598662270
    },
    {
        "content": "<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues/76046\">https://github.com/rust-lang/rust/issues/76046</a> -- seems something we should do, but is a bit unclear how</li>\n</ul>",
        "id": 208408813,
        "sender_full_name": "matklad",
        "timestamp": 1598662306
    },
    {
        "content": "<ul>\n<li>removing <code>StringReader</code> from <code>code_block_checker</code></li>\n</ul>",
        "id": 208408870,
        "sender_full_name": "matklad",
        "timestamp": 1598662423
    },
    {
        "content": "<p>Similar to the previous issue, this thing uses <code>StringReader</code>: <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustdoc/passes/check_code_block_syntax.rs\">https://github.com/rust-lang/rust/blob/master/src/librustdoc/passes/check_code_block_syntax.rs</a></p>",
        "id": 208408873,
        "sender_full_name": "matklad",
        "timestamp": 1598662441
    },
    {
        "content": "<p>It caches <em>some</em> syntax errors in code blocks, but definitely not all of them (as it uses string reader, and not the parser).  This feels like a weird middle ground. I think (but am not sure), that we should do either of the following:</p>\n<ul>\n<li>replace <code>StringReader</code> here with <code>rustc_lexer</code> -- we'll be able to say if the code block is valid or not, but we'll lose error reporting fore code inside fenced blocks.</li>\n<li>replace <code>StringReader</code> with a full parser, so that we get a complete set of syntax errors.</li>\n</ul>",
        "id": 208408961,
        "sender_full_name": "matklad",
        "timestamp": 1598662563
    },
    {
        "content": "<h1>Removing FatalErrors from StringReader</h1>\n<p><a href=\"https://github.com/rust-lang/rust/issues/76065\">https://github.com/rust-lang/rust/issues/76065</a></p>\n<p>This seems to be a nice, independent up-for-grabs piece of work, so cc <span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span></p>",
        "id": 208429299,
        "sender_full_name": "matklad",
        "timestamp": 1598700374
    },
    {
        "content": "<h1>Fixing <code>into_token_trees</code> error reporting</h1>\n<p>This signature feels just wrong: <a href=\"https://github.com/rust-lang/rust/blob/ef55a0a92f3cb6572ef67d99f4aefbdeb7b6b804/compiler/rustc_parse/src/lexer/tokentrees.rs#L15\">https://github.com/rust-lang/rust/blob/ef55a0a92f3cb6572ef67d99f4aefbdeb7b6b804/compiler/rustc_parse/src/lexer/tokentrees.rs#L15</a></p>\n<p>In this function, there are three disjoint channels for reporting errors:</p>\n<ul>\n<li>One error we return as an <code>Err</code></li>\n<li>Other errors we buffer into <code>Vec&lt;UnmachedBrace&gt;</code></li>\n<li>And yet other errors we directly emit</li>\n</ul>\n<p>This needs to be cleaned up  <em>somehow</em>, but I've looked at it for half an hour today, and didn't find easy simplifications</p>",
        "id": 209101557,
        "sender_full_name": "matklad",
        "timestamp": 1599230655
    }
]