[
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"2645\">@T-libs</span>, our next meeting is in about two hours, at <time datetime=\"2021-01-20T20:00:00Z\">2021-01-20T21:00:00+01:00</time>. Agenda here: <a href=\"https://hackmd.io/6HMIT5dKRjuwxm-RpU0P-w?view\">https://hackmd.io/6HMIT5dKRjuwxm-RpU0P-w?view</a></p>",
        "id": 223412366,
        "sender_full_name": "Mara",
        "timestamp": 1611166400
    },
    {
        "content": "<p>I don't think I was able to articulate very clearly what I meant about division of responsibilities around unstable features.</p>\n<p>I'd meant if we have, say Libs Impl responsible for r+'ing unstable features and Libs responsible for stabilizing them, with the measure of success for Libs Impl being zero open PRs, and the measure of success for Libs being zero unstable features, then a degenerate system would be for Libs Impl to simply r+ everything. Since the bar for landing unstable features is lower than the bar for stabilizing them we'll always have (and want) unstable features that are actively in progress. If Libs isn't the team that r+'es unstable features then whoever does should be trying to use Libs judgement to decide whether the feature is likely to be stabilized and how much effort there is between that first r+ and stabilization.</p>",
        "id": 223436794,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611177424
    },
    {
        "content": "<p>If we don't want to push that Libs judgement requirement onto Libs Impl then it sounds like it would still be up to Libs to r+ unstable features</p>",
        "id": 223436942,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611177496
    },
    {
        "content": "<p>So I think whatever team is responsible for landing new unstable features should also be the one that wants to burn down the unstable feature backlog, even if whoever that team is Libs is the one who actually pushes through stabilizations</p>",
        "id": 223437244,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611177649
    },
    {
        "content": "<p>Ah, i see what you mean. Yes, that makes sense.</p>",
        "id": 223437689,
        "sender_full_name": "Mara",
        "timestamp": 1611177890
    },
    {
        "content": "<p>yeah if we can grow libs-impl big enough, it would definitely make sense to have that team do it.</p>",
        "id": 223437784,
        "sender_full_name": "Mara",
        "timestamp": 1611177949
    },
    {
        "content": "<p>And maybe scoping Libs Impl not to be concerned with unstable features for a start could help keep it clear?</p>",
        "id": 223437852,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611177966
    },
    {
        "content": "<p>At least not responsible for having to r+ or garden them</p>",
        "id": 223437895,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611177989
    },
    {
        "content": "<p>hm, if we get a few more people to join i think it might be fine to pick that up right away.</p>",
        "id": 223437934,
        "sender_full_name": "Mara",
        "timestamp": 1611178004
    },
    {
        "content": "<p>If I guess Lib’s measure of success is to have stable APIs that are more useful than they are debt then it’s in the interests of both the team that shepherds unstable features and Libs to have a clear path to stabilization available for the set of unstable features, so the ones that are likely to stabilize can follow it and the ones that aren’t can be identified and pruned sooner rather than later</p>",
        "id": 223441775,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611179844
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119235\">@David Tolnay</span> Is that pretty much what you were trying to get at today?</p>",
        "id": 223441982,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611179930
    }
]