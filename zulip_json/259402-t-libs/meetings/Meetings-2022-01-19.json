[
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"4493\">@T-libs</span> Does anyone have an interesting topic to deep-dive into next week (or another time)? (Either something presented by you, or something you want to hear someone else talk about.)</p>",
        "id": 267786948,
        "sender_full_name": "Mara",
        "timestamp": 1642021933
    },
    {
        "content": "<p>I wonder if we might invite Dan Gohman to talk about rustix, and we could talk about what that might say about the future paths of the standard library?</p>",
        "id": 267787054,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1642022004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> Do you think we could get (obviously not for today) some of the Rust in Linux folks to come and talk about their needs for cfg'ing out parts of std/alloc/core and maybe spend some time in that meeting on how we can (want to?) accommodate that in a more stable way? (Or maybe there's already a good write up?)</p>",
        "id": 268548338,
        "sender_full_name": "simulacrum",
        "timestamp": 1642603117
    },
    {
        "content": "<p>Does anyone have anything they want to present/talk about in the <span class=\"user-group-mention\" data-user-group-id=\"4493\">@T-libs</span> meeting in a few hours? If not, I propose we skip it. (There's no backports, critical issues, etc.)</p>\n<p>For next time it might be interesting to brainstorm a bit about a) how to better separate std/sys, std/sys_common, and the rest of std, and how to make out-of-tree 'ports' of std easier, and/or b) collaborating with the other teams to see how close we can get to a std that doesn't depend nightly features. Or we could invite someone as proposed above.</p>",
        "id": 268569354,
        "sender_full_name": "Mara",
        "timestamp": 1642611265
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"2645\">@T-libs-api</span>  meeting at <time datetime=\"2022-01-19T20:00:00Z\">2022-01-19T21:00:00+01:00</time>, agenda+notes: <a href=\"https://hackmd.io/mos0pSj-QA2h005WnRGk-Q\">https://hackmd.io/mos0pSj-QA2h005WnRGk-Q</a></p>\n<p>We also have zero nominated issues today, but we have plenty of open FCPs that could probably use some attention, and plenty of stalled tracking issues that we should look at. (Feel free to tag any issues with <code>I-libs-api-nominated</code> before the meeting if you want to prioritize any specific (tracking) issue.)</p>",
        "id": 268570039,
        "sender_full_name": "Mara",
        "timestamp": 1642611551
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310399\">Mara</span> <a href=\"#narrow/stream/259402-t-libs.2Fmeetings/topic/Meetings-2022-01-19/near/268569354\">said</a>:</p>\n<blockquote>\n<p>For next time it might be interesting to brainstorm a bit about a) how to better separate std/sys, std/sys_common, and the rest of std, and how to make out-of-tree 'ports' of std easier, and/or b) collaborating with the other teams to see how close we can get to a std that doesn't depend nightly features. Or we could invite someone as proposed above.</p>\n</blockquote>\n<p>I'd love to have a discussion about this. I've seen a number of cases where people are building out-of-tree std-like libraries, and sometimes it seems like those libraries should just <em>be</em> std for a particular target.</p>",
        "id": 268588494,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1642619205
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"2645\">@T-libs-api</span> meeting time! agenda/notes: <a href=\"https://hackmd.io/mos0pSj-QA2h005WnRGk-Q\">https://hackmd.io/mos0pSj-QA2h005WnRGk-Q</a>   jitsi: <a href=\"https://meet.jit.si/rust-libs-meeting-crxoz2at8hiccp7b3ixf89qgxfymlbwr\">https://meet.jit.si/rust-libs-meeting-crxoz2at8hiccp7b3ixf89qgxfymlbwr</a></p>",
        "id": 268595184,
        "sender_full_name": "Mara",
        "timestamp": 1642622400
    },
    {
        "content": "<p>Oh wow. I just realized that jitsi's volume slider initial position doesn't reflect the actual volume. Everyone was quiet because my default audio is scaled to 0.1 and jitsi was displaying it as 1.0 <span aria-label=\"disappointed\" class=\"emoji emoji-1f61e\" role=\"img\" title=\"disappointed\">:disappointed:</span></p>",
        "id": 268602091,
        "sender_full_name": "The 8472",
        "timestamp": 1642625829
    },
    {
        "content": "<p>oh heh, yeah jitsi has some quirks. (if you know something better that doesn't require accounts or installing software, i'd love to hear it)</p>",
        "id": 268603530,
        "sender_full_name": "Mara",
        "timestamp": 1642626412
    }
]