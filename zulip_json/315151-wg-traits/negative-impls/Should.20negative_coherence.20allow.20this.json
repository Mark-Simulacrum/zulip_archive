[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/315151-wg-traits.2Fnegative-impls/topic/PR.20.2393652/near/272460862\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> I think your case is a case where the feature flag is making diagnostics regress, right?</p>\n</blockquote>\n<p>I don't know exactly <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>  hence my asking around here before posting issues:</p>\n<ul>\n<li>\n<p>is that \"just\" a diagnostic regression (<em>w.r.t.</em> something nonetheless denied by coherence)?</p>\n</li>\n<li>\n<p>or should a <code>with_negative_coherence</code>-aware coherence checker allow such an impl?</p>\n</li>\n</ul>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>original snippet</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/315151-wg-traits.2Fnegative-impls/topic/PR.20.2393652/near/272433217\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(trivial_bounds, with_negative_coherence)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span>::<span class=\"n\">core</span>::<span class=\"n\">marker</span>::<span class=\"n\">PhantomPinned</span><span class=\"w\"> </span>: <span class=\"nb\">Unpin</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>complaining about:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"go\">9  | impl Trait for ()</span>\n<span class=\"go\">   |      ^^^^^ cannot infer type for `()`</span>\n</code></pre></div>\n<ul>\n<li>(trivial bounds is here to make the example simpler, but is not necessary).</li>\n</ul>\n</blockquote>\n</div></div>",
        "id": 272521185,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1645280511
    },
    {
        "content": "<p>but there are no negative impls, right?</p>",
        "id": 272736434,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645478670
    },
    {
        "content": "<p>I was thinking of the <a href=\"https://doc.rust-lang.org/1.58.1/src/core/marker.rs.html#781\"><code>impl !Unpin for PhantomPinned</code> in <code>::core</code></a></p>",
        "id": 272749746,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1645491790
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 272849038,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645555686
    },
    {
        "content": "<p>want to hear Niko's thoughts but my understanding is that this shouldn't work</p>",
        "id": 272849240,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645555789
    },
    {
        "content": "<p>although, the error message is bad</p>",
        "id": 272849304,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645555804
    }
]