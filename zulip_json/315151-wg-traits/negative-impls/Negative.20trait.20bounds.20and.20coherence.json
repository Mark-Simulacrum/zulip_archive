[
    {
        "content": "<p>hi! I was wondering if there's been any prior work or planning around allowing negative trait bounds, subject to the existing negative coherence rules (i.e. <code>T: !Trait</code> is satisfied for local types by lack of impl, but <code>impl !Trait for T</code> for external types). I've seen a few discussions of negative trait bounds, but the concerns seem to have been around breaking changes if <code>T: !Trait</code> is satisfied by lack of impl. (I did see <a href=\"https://internals.rust-lang.org/t/negative-bounds-mutually-exclusive-traits/2006\">this</a> internals thread, which is pretty close)</p>\n<p>This came up because I was wondering (in <a class=\"stream-topic\" data-stream-id=\"213817\" href=\"/#narrow/stream/213817-t-lang/topic/E0184.2FE0367.3A.20impl.20both.20Drop.20and.20Copy.3F\">#t-lang &gt; E0184/E0367: impl both Drop and Copy?</a>) if there's a way to have non-ovelapping impls of <code>Copy</code> and <code>Drop</code> for a type, dependent on a type parameter (e.g. <code>Foo&lt;T: Copy&gt; : Copy</code> and <code>Foo&lt;T: Drop&gt; : Drop</code>), which it seems is not <em>currently</em> possible.</p>",
        "id": 278734554,
        "sender_full_name": "sharnoff",
        "timestamp": 1649788537
    }
]