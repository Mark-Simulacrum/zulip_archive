[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// check-pass</span>\n\n<span class=\"cp\">#![feature(negative_impls)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(with_negative_coherence)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">B</span>: <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 274459523,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646688084
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 274459552,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646688100
    },
    {
        "content": "<p>it's being a while since a don't touch negative impls :)</p>",
        "id": 274459575,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646688112
    },
    {
        "content": "<p>we've talked about overlapping negative traits</p>",
        "id": 274459595,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646688121
    },
    {
        "content": "<p>this example compiles</p>",
        "id": 274459641,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646688126
    },
    {
        "content": "<p>may try out other kind of cases but I remember you wanted to check some overlapping examples, is there some specific one that comes to your mind?</p>",
        "id": 274459706,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646688160
    },
    {
        "content": "<p>and there's this example ...</p>",
        "id": 274460936,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646688688
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// check-pass</span>\n\n<span class=\"cp\">#![feature(negative_impls)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(rustc_attrs)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(with_negative_coherence)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait1</span>: <span class=\"nc\">Trait2</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait2</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">MyType</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">Trait2</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyType</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[rustc_strict_coherence]</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Trait1</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyType</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 274460968,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646688700
    },
    {
        "content": "<p>where we get ...</p>",
        "id": 274461019,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646688718
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0119]: conflicting implementations of trait `Foo` for type `MyType`\n  --&gt; /home/spastorino/src/oss/rust1/src/test/ui/coherence/coherence-overlap-double-negative2.rs:16:1\n   |\nLL | impl&lt;T: Trait1&gt; Foo for T {}\n   | ------------------------- first implementation here\nLL | impl Foo for MyType {}\n   | ^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyType`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0119`.\n</code></pre></div>",
        "id": 274461030,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646688722
    },
    {
        "content": "<p>which clearly should work but doesn't :)</p>",
        "id": 274461115,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646688760
    },
    {
        "content": "<p>so a couple of questions ...</p>",
        "id": 274461344,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646688891
    },
    {
        "content": "<p>1) should this example work before stabilizing this?</p>",
        "id": 274461400,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646688923
    },
    {
        "content": "<p>2) is there any other overlapping example that you can think of?</p>",
        "id": 274461417,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646688935
    },
    {
        "content": "<p>3) a way to fix this overlapping example would be to check if any of its super traits have a negative impl, right?</p>",
        "id": 274461847,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646689151
    },
    {
        "content": "<p>Question: what does <code>rustc_strict_coherence</code> do? Is it to make the coherence checker treat <code>MyType</code> as a remote/non-local type (so that lack of <code>impl Trait1 for MyType {}</code> does not imply <code>impl !Trait1 for MyType {}</code>?)</p>\n<ul>\n<li>(Aside: that could be a nifty tool for future-proofing the soundness of <code>pin_project</code>, so it could be worth considering keeping it around, later on, outside of <code>rustc_</code>-only usage)</li>\n</ul>",
        "id": 274534999,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1646743270
    },
    {
        "content": "<p>Regarding <code>1)</code> (and/or <code>3)</code>?), from a <em>semver</em> / language semantics point of view, it does look that way to me: by definition <code>Trait1 : Trait2</code> states that we can rely on <code>T : Trait2</code> whenever <code>T :  Trait1</code>. Since the former is known never to hold, even in the future, for <code>MyType</code>, then the latter can't hold for it either. So <code>impl Foo for MyType {}</code> ought to be allowed.<br>\n(I don't know how hard it would be to implement in the compiler though)</p>",
        "id": 274535374,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1646743503
    },
    {
        "content": "<p>Regarding <code>3)</code>, I'd hope for negative impls to be allowed to overlap, since they're kind of a <code>#[marker]</code> property.<br>\nIt would be annoying if something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span>: <span class=\"nb\">Copy</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">Trait1</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\">   </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\">           </span><span class=\"o\">!</span><span class=\"n\">Trait2</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>were to be denied, imho.</p>",
        "id": 274535970,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1646743832
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/315151-wg-traits.2Fnegative-impls/topic/overlapping.20negative.20impls/near/274459641\">said</a>:</p>\n<blockquote>\n<p>this example compiles</p>\n</blockquote>\n<p>interesting example. I don't see a problem with it compiling, but it does make me wonder -- </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">B</span>: <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[rustc_strict_coherence]</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I expect this gets an error?</p>",
        "id": 274562724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1646755826
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/315151-wg-traits.2Fnegative-impls/topic/overlapping.20negative.20impls/near/274461115\">said</a>:</p>\n<blockquote>\n<p>which clearly should work but doesn't :)</p>\n</blockquote>\n<p>oh, ok, I should have read more :)</p>",
        "id": 274562769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1646755844
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/315151-wg-traits.2Fnegative-impls/topic/overlapping.20negative.20impls/near/274534999\">said</a>:</p>\n<blockquote>\n<p>Question: what does <code>rustc_strict_coherence</code> do? Is it to make the coherence checker treat <code>MyType</code> as a remote/non-local type (so that lack of <code>impl Trait1 for MyType {}</code> does not imply <code>impl !Trait1 for MyType {}</code>?)</p>\n</blockquote>\n<p>yes.</p>",
        "id": 274562813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1646755862
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/315151-wg-traits.2Fnegative-impls/topic/overlapping.20negative.20impls/near/274461847\">said</a>:</p>\n<blockquote>\n<p>3) a way to fix this overlapping example would be to check if any of its super traits have a negative impl, right?</p>\n</blockquote>\n<p>yeah, we could add an implicit rule for <code>trait A: B</code> like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Implemented</span><span class=\"p\">(</span><span class=\"n\">T</span>: <span class=\"o\">!</span><span class=\"n\">A</span><span class=\"p\">)</span><span class=\"w\"> </span>:<span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Implemented</span><span class=\"p\">(</span><span class=\"n\">T</span>: <span class=\"o\">!</span><span class=\"n\">B</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 274562966,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1646755915
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/315151-wg-traits.2Fnegative-impls/topic/overlapping.20negative.20impls/near/274562724\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/315151-wg-traits.2Fnegative-impls/topic/overlapping.20negative.20impls/near/274459641\">said</a>:</p>\n<blockquote>\n<p>this example compiles</p>\n</blockquote>\n<p>interesting example. I don't see a problem with it compiling, but it does make me wonder -- </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">B</span>: <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[rustc_strict_coherence]</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I expect this gets an error?</p>\n</blockquote>\n<p>this example compiles, why shouldn't it?</p>",
        "id": 275303129,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1647294811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> sorry</p>",
        "id": 275303219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647294855
    },
    {
        "content": "<p>I messed up the example</p>",
        "id": 275303222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647294857
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">B</span>: <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[rustc_strict_coherence]</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">B</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 275303234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647294868
    },
    {
        "content": "<p>ahh let me try out just in case ...</p>",
        "id": 275303242,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1647294880
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0119]: conflicting implementations of trait `C` for type `u32`\n  --&gt; src/test/ui/coherence/coherence-overlap-double-negative3.rs:15:1\n   |\n14 | impl C for u32 {}\n   | -------------- first implementation here\n15 | impl&lt;T: B&gt; C for T {}\n   | ^^^^^^^^^^^^^^^^^^ conflicting implementation for `u32`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0119`.\n</code></pre></div>",
        "id": 275303295,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1647294916
    },
    {
        "content": "<p>I guess the error is not great but that one shouldn't compile</p>",
        "id": 275303390,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1647294965
    },
    {
        "content": "<p>not great in the sense of ... maybe this should point that <code>impl !A for u32 {}</code> exists and is what causes the error</p>",
        "id": 275303466,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1647295029
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/315151-wg-traits.2Fnegative-impls/topic/overlapping.20negative.20impls/near/275303390\">said</a>:</p>\n<blockquote>\n<p>I guess the error is not great but that one shouldn't compile</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> ideally, though, I think this one <em>would</em> compile (the second example)</p>",
        "id": 275401862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647363282
    },
    {
        "content": "<p>after all, there is no way to implement <code>B</code> for <code>u32</code> (since implementing <code>B</code> requires implementing <code>A</code>)</p>",
        "id": 275401901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647363302
    },
    {
        "content": "<p>ohh yeah, I've misread the example, <code>impl&lt;T: A&gt; C for T { }</code> this always hold unless when <code>T</code> if <code>u32</code> if there where an impl for <code>u32</code> it would fail but as is, is correct yeah</p>",
        "id": 275421970,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1647371538
    },
    {
        "content": "<p>should be relatively easy to fix, I imagine</p>",
        "id": 275424293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647372782
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/315151-wg-traits.2Fnegative-impls/topic/overlapping.20negative.20impls/near/275424293\">said</a>:</p>\n<blockquote>\n<p>should be relatively easy to fix, I imagine</p>\n</blockquote>\n<p>Niko, just in case, I guess this problem is the same we've already talked about, right?</p>",
        "id": 275548698,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1647451878
    },
    {
        "content": "<p>I meant, not considering super traits in the check</p>",
        "id": 275548724,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1647451888
    },
    {
        "content": "<p>right</p>",
        "id": 275554631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647454185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> does this <a href=\"https://github.com/spastorino/rust/commit/5e058eda232456fbb3bf144b3a429f0e12651412\">https://github.com/spastorino/rust/commit/5e058eda232456fbb3bf144b3a429f0e12651412</a> sound reasonable?</p>",
        "id": 275577477,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1647464901
    },
    {
        "content": "<p>just quickly tried it and doesn't work, need to debug it a bit :)</p>",
        "id": 275577485,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1647464913
    },
    {
        "content": "<p>ok, <code>super_predicates_of</code> is always empty</p>",
        "id": 275580067,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1647466319
    },
    {
        "content": "<p>unsure why :/</p>",
        "id": 275580527,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1647466586
    },
    {
        "content": "<p>What is the <code>DefId</code> here?</p>",
        "id": 275580761,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647466698
    },
    {
        "content": "<p>For <code>Trait1</code>?</p>",
        "id": 275580815,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647466735
    },
    {
        "content": "<p>yes</p>",
        "id": 275581076,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1647466882
    },
    {
        "content": "<p>well this compares 2 impl headers</p>",
        "id": 275581122,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1647466915
    },
    {
        "content": "<p>def_id of the trait that's in the left of the equation but we equate, impl1, impl2 and impl2, impl1</p>",
        "id": 275581218,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1647466949
    },
    {
        "content": "<p>trait_ref is definitely wrong :)</p>",
        "id": 275583044,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1647467998
    },
    {
        "content": "<p>I guess we may want to grab the trait_ref from the obligation rather than use that one</p>",
        "id": 275585213,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1647469486
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> opened <a href=\"https://github.com/rust-lang/rust/issues/95039\">#95039</a></p>",
        "id": 275668748,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1647530224
    }
]