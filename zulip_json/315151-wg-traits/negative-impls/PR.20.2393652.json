[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> left a <a href=\"https://github.com/rust-lang/rust/pull/93652#pullrequestreview-878978114\">review</a></p>",
        "id": 271447240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1644506903
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> there's no derive clone for <code>InferCtxt</code></p>",
        "id": 271451815,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1644508768
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> then how it is calling <code>clone</code>?</p>",
        "id": 271451849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1644508780
    },
    {
        "content": "<p>why I'm not able to find any impl of clone?</p>",
        "id": 271451870,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1644508787
    },
    {
        "content": "<p>no, I mena, the <code>fork</code> code was calling <code>clone</code></p>",
        "id": 271451898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1644508802
    },
    {
        "content": "<p>it's really happening on <code>&amp;InferCtxt</code></p>",
        "id": 271451944,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1644508804
    },
    {
        "content": "<p>how did that work?</p>",
        "id": 271451963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1644508810
    },
    {
        "content": "<p>/me confused</p>",
        "id": 271452000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1644508820
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/315151-wg-traits.2Fnegative-impls/topic/PR.20.2393652/near/271451898\">said</a>:</p>\n<blockquote>\n<p>no, I mena, the <code>fork</code> code was calling <code>clone</code></p>\n</blockquote>\n<p>yes, that's what I'm not sure about</p>",
        "id": 271452050,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1644508833
    },
    {
        "content": "<p>oh, i see</p>",
        "id": 271452053,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1644508833
    },
    {
        "content": "<p>that seems buggy :)</p>",
        "id": 271452069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1644508838
    },
    {
        "content": "<p>I think it should return <code>-&gt; Self</code></p>",
        "id": 271452080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1644508842
    },
    {
        "content": "<p>maybe defined in a macro or something?</p>",
        "id": 271452081,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1644508842
    },
    {
        "content": "<p>not <code>-&gt; &amp;Self</code></p>",
        "id": 271452095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1644508848
    },
    {
        "content": "<p>you're just copying the pointer</p>",
        "id": 271452121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1644508854
    },
    {
        "content": "<p>yeah but why cloning is doing that on <code>InferCtxt</code>?</p>",
        "id": 271452265,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1644508905
    },
    {
        "content": "<p>I'm a bit confused on what's going on</p>",
        "id": 271452286,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1644508912
    },
    {
        "content": "<p>and also, why is this working? if we're not even cloning?</p>",
        "id": 271452378,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1644508936
    },
    {
        "content": "<p>clone on <code>InferCtxt</code> is returning <code>&amp;InferCtxt</code></p>",
        "id": 271452432,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1644508960
    },
    {
        "content": "<p>and no idea where is defined</p>",
        "id": 271452447,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1644508966
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/315151-wg-traits.2Fnegative-impls/topic/PR.20.2393652/near/271452432\">said</a>:</p>\n<blockquote>\n<p>clone on <code>InferCtxt</code> is returning <code>&amp;InferCtxt</code></p>\n</blockquote>\n<p>no</p>",
        "id": 271452823,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1644509117
    },
    {
        "content": "<p>clone in <code>&amp;InferCtxt</code> is returning <code>&amp;InferCtxt</code> :)</p>",
        "id": 271452838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1644509124
    },
    {
        "content": "<p>ohh I see</p>",
        "id": 271452902,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1644509155
    },
    {
        "content": "<p>but then I'm not sure what/how do we want to clone</p>",
        "id": 271453035,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1644509193
    },
    {
        "content": "<p>I meant, my first question is ...</p>",
        "id": 271453087,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1644509218
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">fork</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">foo</span>: <span class=\"nc\">self</span><span class=\"p\">.</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 271453118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1644509228
    },
    {
        "content": "<p>given that we are not cloning anything and this is working, do we really need fork?</p>",
        "id": 271453135,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1644509234
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/315151-wg-traits.2Fnegative-impls/topic/PR.20.2393652/near/271453118\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">fork</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">....</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>yes yes :)</p>",
        "id": 271453155,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1644509243
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/315151-wg-traits.2Fnegative-impls/topic/PR.20.2393652/near/271453135\">said</a>:</p>\n<blockquote>\n<p>given that we are not cloning anything and this is working, do we really need fork?</p>\n</blockquote>\n<p>but <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span>, why? if we are not doing it and all this works</p>",
        "id": 271453210,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1644509261
    },
    {
        "content": "<p>can't answer a lot more just now :)</p>",
        "id": 271453247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1644509277
    },
    {
        "content": "<p>will write more later</p>",
        "id": 271453254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1644509279
    },
    {
        "content": "<p>but yes, I think we want it ...</p>",
        "id": 271453299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1644509283
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 271453346,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1644509301
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> back, can't clone because it requires clone on things from ena crate</p>",
        "id": 271477964,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1644519615
    },
    {
        "content": "<p>hmm</p>",
        "id": 271478030,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1644519631
    },
    {
        "content": "<p>ok :) we can add that I suppose</p>",
        "id": 271478048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1644519637
    },
    {
        "content": "<p>sounds like we were never cloning <em>before</em></p>",
        "id": 271478065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1644519644
    },
    {
        "content": "<p>we were just cloning the reference?</p>",
        "id": 271478081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1644519648
    },
    {
        "content": "<p>yeah</p>",
        "id": 271478105,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1644519657
    },
    {
        "content": "<p>maybe we can re-create things in some way</p>",
        "id": 271478140,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1644519669
    },
    {
        "content": "<p>without calling clone</p>",
        "id": 271478158,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1644519678
    },
    {
        "content": "<p>in particular this <a href=\"https://github.com/rust-lang/rust/blob/0232de964997bf8dd3a96372802401722fbfa384/compiler/rustc_infer/src/infer/type_variable.rs#L17\">https://github.com/rust-lang/rust/blob/0232de964997bf8dd3a96372802401722fbfa384/compiler/rustc_infer/src/infer/type_variable.rs#L17</a></p>",
        "id": 271478617,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1644519859
    },
    {
        "content": "<p>would require <code>sv::UndoLog</code> from <code>ena</code> to be <code>Clone</code></p>",
        "id": 271478667,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1644519889
    },
    {
        "content": "<p>so I guess I can place a PR on the crate, wait for it to be merged, released and then in this same PR bump the dependency and finish the clone impl, which is ready modulo that thing</p>",
        "id": 271481822,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1644521243
    },
    {
        "content": "<p>I'm wrong, we don't need to implement it because it's already done, there were some inner bounds that were not <code>Clone</code></p>",
        "id": 271482645,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1644521573
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> should be now ready for review</p>",
        "id": 271483669,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1644522070
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> excellent!</p>",
        "id": 271492082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1644526200
    },
    {
        "content": "<p>OK, I opened <a href=\"https://github.com/rust-lang/rust/issues/93875\">https://github.com/rust-lang/rust/issues/93875</a> and r+'d</p>",
        "id": 271493068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1644526645
    },
    {
        "content": "<p>great, was going to ask if you did create the issue <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 271493112,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1644526667
    },
    {
        "content": "<p>Hey, it seems the latest patch broke the <code>impl Termination for T where T: Future</code> example.</p>\n<ul>\n<li><a href=\"https://gist.github.com/yoshuawuyts/81aac115e284d9cc57954720c7e72ef7\">py ./x.py build output</a></li>\n<li><a href=\"https://github.com/yoshuawuyts/rust/tree/future-for-termination-3\">rust-lang/rust repro branch</a></li>\n</ul>",
        "id": 272404175,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645192597
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 272404259,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645192643
    },
    {
        "content": "<p>from what I see it's missing the feature flag</p>",
        "id": 272404284,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645192661
    },
    {
        "content": "<p>I might have forgotten to enable new features</p>",
        "id": 272404285,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645192661
    },
    {
        "content": "<p>ah!</p>",
        "id": 272404291,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645192665
    },
    {
        "content": "<p>let me point you to an example</p>",
        "id": 272404301,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645192671
    },
    {
        "content": "<p>you basically need <code>#![feature(with_negative_coherence)]</code></p>",
        "id": 272404471,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645192749
    },
    {
        "content": "<p>but you can check the tests added in the PR starting from here <a href=\"https://github.com/rust-lang/rust/pull/93652/files#diff-609bf3b33f89c7ceadd17b6309e6eae1f3efb71f56423934235ce921f26058c6\">https://github.com/rust-lang/rust/pull/93652/files#diff-609bf3b33f89c7ceadd17b6309e6eae1f3efb71f56423934235ce921f26058c6</a></p>",
        "id": 272404499,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645192768
    },
    {
        "content": "<p>(brb)</p>",
        "id": 272405048,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645193019
    },
    {
        "content": "<p>(back)</p>",
        "id": 272407108,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645194077
    },
    {
        "content": "<p>sorry, there's a hurricane starting here. Had to rush to move all of our things on the balconies inside.</p>",
        "id": 272407172,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645194108
    },
    {
        "content": "<p>oh oh, hope everything is ok</p>",
        "id": 272407425,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645194216
    },
    {
        "content": "<p>heh, yeah it's all good now (:</p>",
        "id": 272407764,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645194379
    },
    {
        "content": "<p>yay!</p>",
        "id": 272407834,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645194426
    },
    {
        "content": "<p>so hmm, I expected the feature to be enabled already in <code>library/src/std/lib.rs</code>, just like all other features. But it wasn't. And when I try and enable it, I get:</p>\n<div class=\"codehilite\" data-code-language=\"txt\"><pre><span></span><code>error[E0635]: unknown feature `with_negative_coherence`\n   --&gt; library\\std\\src\\lib.rs:343:12\n    |\n343 | #![feature(with_negative_coherence)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n\nFor more information about this error, try `rustc --explain E0635`.\nerror: could not compile `std` due to previous error\n</code></pre></div>",
        "id": 272407853,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645194441
    },
    {
        "content": "<p>I feel like I'm missing something?</p>",
        "id": 272407900,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645194473
    },
    {
        "content": "<p>that may be because of bootstrapping</p>",
        "id": 272407914,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645194481
    },
    {
        "content": "<p><code>#![feature(negative_impls)]</code> is in there</p>",
        "id": 272407954,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645194485
    },
    {
        "content": "<p>when it's failing like that?</p>",
        "id": 272407968,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645194495
    },
    {
        "content": "<p><code>x.py check</code></p>",
        "id": 272407983,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645194502
    },
    {
        "content": "<p>oh yeah I guess that makes sense!</p>",
        "id": 272408018,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645194530
    },
    {
        "content": "<p>but I meant, it's when it's using stage 0 compiler or when?</p>",
        "id": 272408023,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645194533
    },
    {
        "content": "<p>in any case you can just try ...</p>",
        "id": 272408044,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645194545
    },
    {
        "content": "<p>Ahh, yeah:</p>\n<div class=\"codehilite\"><pre><span></span><code>Checking stage0 std artifacts (x86_64-pc-windows-msvc -&gt; x86_64-pc-windows-msvc)\n</code></pre></div>",
        "id": 272408057,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645194551
    },
    {
        "content": "<p>you want this ...</p>",
        "id": 272408285,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645194666
    },
    {
        "content": "<p>Oh, do I need to do a <code>cfg_attr</code> to set the attribute?</p>",
        "id": 272408290,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645194669
    },
    {
        "content": "<p><code>#![cfg_attr(not(bootstrap), feature(with_negative_coherence))]</code></p>",
        "id": 272408305,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645194682
    },
    {
        "content": "<p>yesssss, trying that now!</p>",
        "id": 272408371,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645194714
    },
    {
        "content": "<p>and you would also need to wrap the code you're adding with a <code>cfg_attr</code> too</p>",
        "id": 272408421,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645194726
    },
    {
        "content": "<p>yes yes yes, already have that</p>",
        "id": 272408480,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645194769
    },
    {
        "content": "<p>sorry but I'm lacking some context on what you were working on, just curious, are you opening a PR? about what exactly?</p>",
        "id": 272408491,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645194780
    },
    {
        "content": "<p>I think last time I tried this this was also very new</p>",
        "id": 272408492,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645194780
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/315151-wg-traits.2Fnegative-impls/topic/PR.20.2393652/near/272408491\">said</a>:</p>\n<blockquote>\n<p>sorry but I'm lacking some context on what you were working on, just curious, are you opening a PR? about what exactly?</p>\n</blockquote>\n<p>are you asking what the code that I wrote does, and what the plan for it is?</p>",
        "id": 272408542,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645194813
    },
    {
        "content": "<p>yes, kind of :)</p>",
        "id": 272408622,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645194844
    },
    {
        "content": "<p>I didn't pay a lot of attention to the code but I was guessing that was part of some bigger plans</p>",
        "id": 272408645,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645194856
    },
    {
        "content": "<p>I meant, I guess you're trying to add async support on main functions or something like that?</p>",
        "id": 272408717,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645194902
    },
    {
        "content": "<p>So, initially I wrote this just as a proof of concept. I'd been theorizing for a couple of years that the <code>async fn main</code> could be enabled if we resolved one of two blockers:</p>\n<ol>\n<li>Implement negative coherence in the compiler.</li>\n<li>Unify <code>core</code> and <code>std</code> into a single library.</li>\n</ol>\n<p>But that was just the theory, not the practice. So I kind of let it sit and waited for either one of those to be done. And negative coherence was implemented first.</p>",
        "id": 272408768,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645194935
    },
    {
        "content": "<p>So I wrote this to _validate_ that that is indeed the case. And it turns out it indeed worked! -- which is great</p>",
        "id": 272408804,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645194956
    },
    {
        "content": "<p>right</p>",
        "id": 272408877,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645194980
    },
    {
        "content": "<p>cool :)</p>",
        "id": 272408882,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645194982
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/315151-wg-traits.2Fnegative-impls/topic/PR.20.2393652/near/272408717\">said</a>:</p>\n<blockquote>\n<p>I meant, I guess you're trying to add async support on main functions or something like that?</p>\n</blockquote>\n<p>That's exactly right. Right now the stdlib has all sorts of async functionality, and no way of actually running it.</p>",
        "id": 272408896,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645194992
    },
    {
        "content": "<p>so are you opening a PR with this or what's the plan?</p>",
        "id": 272408903,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645194995
    },
    {
        "content": "<p>That's a good question! I haven't completely made up my mind yet, but I'm starting to think we just should make it a PR.</p>",
        "id": 272408956,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645195034
    },
    {
        "content": "<p>Probably should write a post for it first.</p>",
        "id": 272408962,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645195038
    },
    {
        "content": "<p>cool, please share all the stuff you do and if you open a PR cc me :)</p>",
        "id": 272408991,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645195057
    },
    {
        "content": "<p>just interested in this :)</p>",
        "id": 272409001,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645195069
    },
    {
        "content": "<p>it's cool</p>",
        "id": 272409019,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645195081
    },
    {
        "content": "<p>There's a few considerations, where we would like to allow custom runtimes to override the implementation backing <code>async fn main</code>. But that's ways off, and I think we could add that capability in a backwards-compatible way later on.</p>",
        "id": 272409021,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645195082
    },
    {
        "content": "<p>I see</p>",
        "id": 272409107,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645195120
    },
    {
        "content": "<p>So yeah, this would give the stdlib a way to actually start writing examples using futures _which can be run_. And that seems useful, so I'm contemplating just pushing for it.</p>",
        "id": 272409122,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645195127
    },
    {
        "content": "<p>Likely first step: write a blog post. I'll share it once I have something.</p>",
        "id": 272409177,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645195157
    },
    {
        "content": "<p>PR is likely a step after that (:</p>",
        "id": 272409208,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645195175
    },
    {
        "content": "<p>very cool <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 272409351,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645195234
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I think I found a possible bug? <a href=\"https://gist.github.com/yoshuawuyts/4651d37bd4b94dc926b6a6deeaaa68fd\">https://gist.github.com/yoshuawuyts/4651d37bd4b94dc926b6a6deeaaa68fd</a></p>",
        "id": 272412640,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645196828
    },
    {
        "content": "<p>Enabled all features, but getting a panic during compilation now</p>",
        "id": 272412671,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645196843
    },
    {
        "content": "<p>Pushed the branch: <a href=\"https://github.com/yoshuawuyts/rust/tree/future-for-termination-3\">https://github.com/yoshuawuyts/rust/tree/future-for-termination-3</a></p>",
        "id": 272412909,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645196950
    },
    {
        "content": "<p>This crashed when running: <code>py ./x.py build --stage 2</code></p>",
        "id": 272412944,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645196964
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 272414016,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645197515
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts [he/they]</span> that started to happen when you made this change <a href=\"https://github.com/yoshuawuyts/rust/commit/859fa268c643ffff2efb4321aae4004445f58401#diff-ce8cd7d0ae24d8c6503198eeb502052175fc9c47d15fbc85258236b53e312ba0R135\">https://github.com/yoshuawuyts/rust/commit/859fa268c643ffff2efb4321aae4004445f58401#diff-ce8cd7d0ae24d8c6503198eeb502052175fc9c47d15fbc85258236b53e312ba0R135</a> ?</p>",
        "id": 272415885,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645198415
    },
    {
        "content": "<p>ooooopsssssss</p>",
        "id": 272415916,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645198435
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211722\">Yoshua Wuyts [he/they]</span> <a href=\"#narrow/stream/315151-wg-traits.2Fnegative-impls/topic/PR.20.2393652/near/272412944\">said</a>:</p>\n<blockquote>\n<p>This crashed when running: <code>py ./x.py build --stage 2</code></p>\n</blockquote>\n<p>are you saying that this works if you build with <code>--stage 1</code> but doens't with<code>--stage 2</code>?</p>",
        "id": 272415926,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645198441
    },
    {
        "content": "<p>I thought <code>--stage 1</code> doesn't build a bootstrap compiler first? And we need that in order to try this feature because we have <code>#[cfg(not(bootstrap))]</code> everywhere</p>",
        "id": 272416033,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645198483
    },
    {
        "content": "<p>(rebuilding now without that change. That's totally on me, sorry)</p>",
        "id": 272416254,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645198597
    },
    {
        "content": "<p>Though I guess I still wouldn't have expected it to ICE?</p>",
        "id": 272416268,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645198606
    },
    {
        "content": "<p>yeah, it shouldn't ICE, I was wondering what's the case that makes it ICE</p>",
        "id": 272417110,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645199002
    },
    {
        "content": "<p>it's not being able to retrieve a trait ref from an impl header</p>",
        "id": 272417152,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645199020
    },
    {
        "content": "<p>unsure why</p>",
        "id": 272417157,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645199023
    },
    {
        "content": "<p>Even if I revert the change to <code>Infallible</code> I still get the same ICE</p>",
        "id": 272417650,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645199231
    },
    {
        "content": "<p>You're right that I shouldn't have changed that in that test run, but it also doesn't seem to have been the cause.</p>",
        "id": 272417730,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1645199273
    },
    {
        "content": "<p>it works if you build <code>--stage 1</code>?</p>",
        "id": 272420237,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645200431
    },
    {
        "content": "<p>I'd be surprised by that</p>",
        "id": 272420266,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645200440
    },
    {
        "content": "<p>Two questions related to this feature <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> </p>\n<p>First, the following currently fails but with a weird message:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(trivial_bounds, with_negative_coherence)]</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span>::<span class=\"n\">core</span>::<span class=\"n\">marker</span>::<span class=\"n\">PhantomPinned</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">PhantomPinned</span><span class=\"w\"> </span>: <span class=\"nb\">Unpin</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>complaining about:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"go\">9  | impl Trait for Foo</span>\n<span class=\"go\">   |      ^^^^^ cannot infer type for enum `Foo`</span>\n</code></pre></div>\n<ul>\n<li>(trivial bounds is here to make the example simpler, but is not necessary).</li>\n</ul>\n<p>Also, if this were to work, I suspect it could cause problems with <code>pin_project</code>, like hinted <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.3A.20backlog.20bonanza/near/269471299\">over here</a></p>",
        "id": 272433217,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1645206421
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts [he/they]</span> can you open an issue with the stuff you've mentioned? so I can give it a shoot next week</p>",
        "id": 272460673,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645220159
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/315151-wg-traits.2Fnegative-impls/topic/PR.20.2393652/near/272433217\">said</a>:</p>\n<blockquote>\n<p>Two questions related to this feature <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> </p>\n<p>First, the following currently fails but with a weird message:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(trivial_bounds, with_negative_coherence)]</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span>::<span class=\"n\">core</span>::<span class=\"n\">marker</span>::<span class=\"n\">PhantomPinned</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">PhantomPinned</span><span class=\"w\"> </span>: <span class=\"nb\">Unpin</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>complaining about:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"go\">9  | impl Trait for Foo</span>\n<span class=\"go\">   |      ^^^^^ cannot infer type for enum `Foo`</span>\n</code></pre></div>\n<ul>\n<li>(trivial bounds is here to make the example simpler, but is not necessary).</li>\n</ul>\n<p>Also, if this were to work, I suspect it could cause problems with <code>pin_project</code>, like hinted <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.3A.20backlog.20bonanza/near/269471299\">over here</a></p>\n</blockquote>\n<p>same :), can you open an issue?</p>",
        "id": 272460739,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645220174
    },
    {
        "content": "<p>please cc me</p>",
        "id": 272460745,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645220177
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> I think your case is a case where the feature flag is making diagnostics regress, right?</p>",
        "id": 272460862,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645220254
    },
    {
        "content": "<p>we could create issues here <a href=\"https://github.com/rust-lang/negative-impls-initiative/\">https://github.com/rust-lang/negative-impls-initiative/</a></p>",
        "id": 272461043,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645220369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> regarding the ICE here:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">impl1_trait_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">impl_trait_ref</span><span class=\"p\">(</span><span class=\"n\">impl1_def_id</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"></span>\n</code></pre></div>\n<p>that's kind of weird. AFAIK, that thing only returns <code>None</code> for inherent impls, and this should not be an inherent impl.</p>",
        "id": 272465582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1645222615
    },
    {
        "content": "<p>Do you have a reproduction?</p>",
        "id": 272466521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1645223130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211722\">Yoshua Wuyts [he/they]</span> <a href=\"#narrow/stream/315151-wg-traits.2Fnegative-impls/topic/PR.20.2393652/near/272412909\">said</a>:</p>\n<blockquote>\n<p>Pushed the branch: <a href=\"https://github.com/yoshuawuyts/rust/tree/future-for-termination-3\">https://github.com/yoshuawuyts/rust/tree/future-for-termination-3</a></p>\n</blockquote>\n<p>it's this <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span>, would be nice if we extract a test case for rustc</p>",
        "id": 272484936,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645237082
    },
    {
        "content": "<p>didn't do that yet</p>",
        "id": 272484979,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1645237095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> opened an issue: <a href=\"https://github.com/rust-lang/rust/issues/94526\">https://github.com/rust-lang/rust/issues/94526</a></p>",
        "id": 273824561,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1646235279
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts [he/they]</span> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 273826135,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646235814
    }
]