[
    {
        "content": "<p>Hello, I am currently trying to write this impl:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"n\">Mask</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Mask</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">MaskElement</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">U</span>: <span class=\"nc\">MaskElement</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">LaneCount</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span>: <span class=\"nc\">SupportedLaneCount</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from</span><span class=\"p\">(</span><span class=\"n\">value</span>: <span class=\"nc\">Mask</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Mask</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Mask</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">convert</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But this conflicts with the <code>From&lt;T&gt; for T</code> blanket impl.<br>\nI have worked through various different features and variants of this but it seems nothing resolves correctly.<br>\nIs this within scope for a feature that is in development?</p>",
        "id": 274460725,
        "sender_full_name": "Jubilee",
        "timestamp": 1646688614
    },
    {
        "content": "<p>I don't know of a way to do this with negative impls, for similar stuff in error handling land I'm under the impression that this needs lattice specialization which is not currently being worked on</p>",
        "id": 274462211,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1646689347
    },
    {
        "content": "<p>does this need to be done via the <code>From</code> trait?</p>",
        "id": 274462275,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1646689395
    },
    {
        "content": "<p>I don't think it absolutely has to IMO.</p>",
        "id": 274473101,
        "sender_full_name": "Jubilee",
        "timestamp": 1646694972
    },
    {
        "content": "<p>Anyways I can take this elsewhere if here is inappropriate.<br>\nThough... what is \"lattice specialization\", exactly?</p>",
        "id": 274473135,
        "sender_full_name": "Jubilee",
        "timestamp": 1646695009
    },
    {
        "content": "<p>its specializing precise overlaps of two implementations</p>",
        "id": 274473157,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1646695021
    },
    {
        "content": "<p>Ahhh.</p>",
        "id": 274473172,
        "sender_full_name": "Jubilee",
        "timestamp": 1646695034
    },
    {
        "content": "<p>the language of the specialization RFC says it was ruled out and not planned, but when I've talked to niko about it he has said he still hopes we end up getting it</p>",
        "id": 274473214,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1646695067
    },
    {
        "content": "<p>I plan to basically do a \"do-over\" with the specialization RFC, and I think it's essential that we have some form of lattice-like specializaiton, though maybe not in the first iteration, yes</p>",
        "id": 274563767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1646756191
    },
    {
        "content": "<p>(I've been digging a bit into some related research on default logics, but haven't gotten too far yet)</p>",
        "id": 274563794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1646756202
    }
]