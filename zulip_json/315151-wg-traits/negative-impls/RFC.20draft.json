[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> where is the RFC draft you were working on?</p>",
        "id": 275712600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647544897
    },
    {
        "content": "<p><a href=\"https://hackmd.io/ZmpF0ITPRWKx6jYxgCWS7g?both\">https://hackmd.io/ZmpF0ITPRWKx6jYxgCWS7g?both</a></p>",
        "id": 275717757,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1647547350
    },
    {
        "content": "<p>it's mosly unfilled</p>",
        "id": 275717816,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1647547376
    },
    {
        "content": "<p>I guess here, if we're talking about the RFC</p>",
        "id": 276473051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648127464
    },
    {
        "content": "<p>let me take a look</p>",
        "id": 276473065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648127471
    },
    {
        "content": "<p>I think the motivations for this...</p>",
        "id": 276473079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648127479
    },
    {
        "content": "<p>I remember us talking about it, not sure if we took notes on that conversation</p>",
        "id": 276473102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648127489
    },
    {
        "content": "<p>I would say...</p>",
        "id": 276473108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648127492
    },
    {
        "content": "<p>again, remember that I didn't do much on the RFC :)</p>",
        "id": 276473114,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648127498
    },
    {
        "content": "<p>just throw a couple of motivations there</p>",
        "id": 276473125,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648127506
    },
    {
        "content": "<ul>\n<li><strong>Soundness</strong> -- some things, like pin, have to reason about the fact that an impl does NOT exist. Previous attempts to lean on the coherence rules for this were problematic. Negative impls solve this.</li>\n</ul>",
        "id": 276473142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648127515
    },
    {
        "content": "<ul>\n<li><strong>Coherence</strong> -- not a general fix, but we can solve some coherence problems if you can make negative impls.</li>\n</ul>",
        "id": 276473201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648127535
    },
    {
        "content": "<ul>\n<li><strong>Auto traits</strong> -- they have always required an opt-out mechanism, and negative impls are good for this &lt;-- note that we have to finish this part so make them <em>fully</em> opt out</li>\n</ul>",
        "id": 276473228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648127557
    },
    {
        "content": "<p>There is one more thing I just realized we should evaluate, it's possible that negative impls could serve as a replacement for one aspect of <code>#[fundamental]</code></p>",
        "id": 276473286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648127593
    },
    {
        "content": "<p>we should actually test that</p>",
        "id": 276473290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648127596
    },
    {
        "content": "<p>basically see if can remove the concept of <em>fundamental traits</em></p>",
        "id": 276473311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648127610
    },
    {
        "content": "<p>(we still need <em>fundamental types</em>)</p>",
        "id": 276473319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648127615
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/315151-wg-traits.2Fnegative-impls/topic/RFC.20draft/near/276473286\">said</a>:</p>\n<blockquote>\n<p>There is one more thing I just realized we should evaluate, it's possible that negative impls could serve as a replacement for one aspect of <code>#[fundamental]</code></p>\n</blockquote>\n<p>yes, I have this in my todo list</p>",
        "id": 276473324,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648127619
    },
    {
        "content": "<p>that would fit under the \"coherence\" motivation though</p>",
        "id": 276473373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648127641
    },
    {
        "content": "<p>do all of those motiations make sense to you? I imagine you might want to know more about the soundness one</p>",
        "id": 276473469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648127680
    },
    {
        "content": "<p>make sense</p>",
        "id": 276473530,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648127706
    },
    {
        "content": "<p>I understand the soundness one too</p>",
        "id": 276473558,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648127716
    },
    {
        "content": "<p>I wonder, may how do we explain these things on an RFC</p>",
        "id": 276473621,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648127734
    },
    {
        "content": "<p>but I guess I can check other RFCs, try to come up with something and then we can iterate my writings</p>",
        "id": 276473666,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648127755
    },
    {
        "content": "<p>I think I would mostly reference the issue</p>",
        "id": 276473675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648127760
    },
    {
        "content": "<p>I imagine something like</p>",
        "id": 276473719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648127764
    },
    {
        "content": "<p>The <code>Pin</code> API, when originally designed, included this impl</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">SomethingOrOther</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">T</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The assumption was that <code>&amp;T: DerefMut</code> would never be true. But in Issue <a href=\"https://github.com/rust-lang/rust/issues/123\">#123</a>, it was found that the coherence rules <em>did</em> permit such an impl, admittedly in a roundabout way:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>To fix this, we introduced an explicit <strong>negative impl</strong> of <code>DerefMut</code> for <code>&amp;T</code>, effectively committing to the idea that it would never be implemented:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">DerefMut</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This establishes a general principle: unsafe code should never rely on \"this impl hasn't been added\" or \"doesn't exist\", as such logic is easily broken. Instead, it should rely on <strong>explicit negative impls</strong>.</p>",
        "id": 276473787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648127806
    },
    {
        "content": "<p>you meant <a href=\"https://github.com/rust-lang/rust/issues/123\">#123</a> as a placeholder, I guess</p>",
        "id": 276473886,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648127865
    },
    {
        "content": "<p>checking the issue :)</p>",
        "id": 276473897,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648127874
    },
    {
        "content": "<p>Yes... I don't remember the number :)</p>",
        "id": 276473946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648127886
    },
    {
        "content": "<p>I can find it out</p>",
        "id": 276474019,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648127929
    },
    {
        "content": "<p>what about rationale and alternatives?</p>",
        "id": 276474120,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648127992
    },
    {
        "content": "<p>because it's obviously the best idea :P</p>",
        "id": 276474192,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648128012
    },
    {
        "content": "<p>Well, I would probably talk more about the limitations there</p>",
        "id": 276474357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648128107
    },
    {
        "content": "<p>I tend to replace that section with Frequently Asked Questions tbh :)</p>",
        "id": 276474366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648128115
    },
    {
        "content": "<p>I find it a better structure</p>",
        "id": 276474372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648128117
    },
    {
        "content": "<p>I think one FAQ would be \"Why are we not adding negative where clauses?\"</p>",
        "id": 276474427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648128127
    },
    {
        "content": "<p>e.g., why can't I do <code>where Foo: !Bar</code></p>",
        "id": 276474432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648128132
    },
    {
        "content": "<p>the answer is... (a) we don't need that to meet these motivations and (b) it raises some questions about whether we can deduce that <code>Foo: !Trait</code> for local types just from the lack of an impl. On that last point, introducing \"failure to prove == not true\" is not something we want to do because it makes the logic solver much more complex, and is a bit dubious</p>",
        "id": 276474566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648128204
    },
    {
        "content": "<p>so it's not to say we could <em>never</em> do it, but if we did it, it would only be true if there was an explicit negative impl</p>",
        "id": 276474585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648128222
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 276474610,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648128240
    },
    {
        "content": "<p>and the main use case is being able to do things like \"exclusive traits\" (e.g., at most one of these traits is implemented), and it might be better to model that explicitly</p>",
        "id": 276474656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648128246
    },
    {
        "content": "<p>I'm not sure what other FAQ to add, but we can see what questions people ask :)</p>",
        "id": 276474688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648128274
    },
    {
        "content": "<p>that's one nice thing about calling it FAQ, you can update it with questions from the thread very easily</p>",
        "id": 276474706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648128285
    },
    {
        "content": "<p>yes, that's cool</p>",
        "id": 276474806,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648128351
    },
    {
        "content": "<p>thanks Niko</p>",
        "id": 276474818,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648128358
    },
    {
        "content": "<p>unsure if you have more comments or things?</p>",
        "id": 276474872,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648128365
    },
    {
        "content": "<p>that's about it for now :) I can help draft some text later if you want</p>",
        "id": 276475161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648128531
    },
    {
        "content": "<p>we oughta spell out the semantics etc</p>",
        "id": 276475172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648128539
    },
    {
        "content": "<p>but we have some notes on that stuff in the hackmds</p>",
        "id": 276475192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648128549
    },
    {
        "content": "<p>One thing that I like most about negative impls is that it might lead to better error messages. I often help rust newbies, and they tend to struggle with errors like <code>move occurs because </code>s<code> has type </code>String<code>, which does not implement the </code>Copy<code> trait</code>. So perhaps impls like <code>impl !Copy for String {}</code> could help with this.</p>",
        "id": 276475876,
        "sender_full_name": "mejrs",
        "timestamp": 1648128911
    },
    {
        "content": "<p>Perhaps this is best mentioned in \"future possibilities\" rather than a motivation.</p>",
        "id": 276475911,
        "sender_full_name": "mejrs",
        "timestamp": 1648128934
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> about the test case you've mentioned on the PR</p>",
        "id": 276528887,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648150600
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// check-pass</span>\n\n<span class=\"cp\">#![feature(negative_impls)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(rustc_attrs)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(with_negative_coherence)]</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[rustc_strict_coherence]</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">MyStruct</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">MyStruct</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">method</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">MyStruct</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">method</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276528892,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648150603
    },
    {
        "content": "<p>I thought that that may have reproduced the problem you were suggesting but it's not</p>",
        "id": 276528916,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648150620
    },
    {
        "content": "<p>it ends as an specialization case I guess</p>",
        "id": 276529135,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648150756
    },
    {
        "content": "<p>trying to come up with an example maybe like ...</p>",
        "id": 276530212,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648151339
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(negative_impls)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(rustc_attrs)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(with_negative_coherence)]</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[rustc_strict_coherence]</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">MyStruct</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">MyStruct</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276530217,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648151342
    },
    {
        "content": "<p>hmm</p>",
        "id": 276531352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648151856
    },
    {
        "content": "<p>out of curiosity, <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>, try reordering the impls :)</p>",
        "id": 276531372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648151866
    },
    {
        "content": "<p>in the first example</p>",
        "id": 276531380,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648151870
    },
    {
        "content": "<p>let me see</p>",
        "id": 276531541,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648151924
    },
    {
        "content": "<p>talking about ...</p>",
        "id": 276531589,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648151944
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// check-pass</span>\n\n<span class=\"cp\">#![feature(negative_impls)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(rustc_attrs)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(with_negative_coherence)]</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[rustc_strict_coherence]</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">MyStruct</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">MyStruct</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">method</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">MyStruct</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">method</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276531600,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648151947
    },
    {
        "content": "<p>I guess</p>",
        "id": 276531603,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648151949
    },
    {
        "content": "<p>if so, that passes tests too</p>",
        "id": 276531618,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648151956
    },
    {
        "content": "<p>not sure what would change by doing that :/</p>",
        "id": 276531664,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648151981
    },
    {
        "content": "<p>I was wondering it might affect which impl is impl1 vs impl2</p>",
        "id": 276531690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648151996
    },
    {
        "content": "<p>I have to look at the code a bit more closely</p>",
        "id": 276531703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648152000
    },
    {
        "content": "<p>ahh ok</p>",
        "id": 276531769,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648152008
    },
    {
        "content": "<p>the thing I was trying to say is ... the bound may be ignored as you noted but still the code compiles if the bound is ignored so this is not a good example</p>",
        "id": 276531866,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648152039
    },
    {
        "content": "<p>well, if you remove the where clause, I think it will error?</p>",
        "id": 276532006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648152110
    },
    {
        "content": "<p>worth a test :)</p>",
        "id": 276532009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648152111
    },
    {
        "content": "<p>I get <code>duplicate method</code> error</p>",
        "id": 276532149,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648152171
    },
    {
        "content": "<p>I meant that the test pass without the negative impl</p>",
        "id": 276532184,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648152198
    },
    {
        "content": "<p>so I guess this is not properly testing negative impls' where bounds on inherent impls</p>",
        "id": 276532274,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648152240
    },
    {
        "content": "<p>my reasoning is ...</p>",
        "id": 276532447,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648152334
    },
    {
        "content": "<p>given that the code fails without the where bound and pass with the bound, I guess negative impls are considering where bounds already?</p>",
        "id": 276532533,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648152364
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/315151-wg-traits.2Fnegative-impls/topic/RFC.20draft/near/276532184\">said</a>:</p>\n<blockquote>\n<p>I meant that the test pass without the negative impl</p>\n</blockquote>\n<p><em>oh</em></p>",
        "id": 276532567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648152385
    },
    {
        "content": "<p>it's because <code>#[rustc_strict_coherence]</code> is in the wrong place</p>",
        "id": 276532579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648152395
    },
    {
        "content": "<p>i.e., it's supposed to be on the <em>trait</em> that has conflicting impls</p>",
        "id": 276532589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648152405
    },
    {
        "content": "<p>but here there is no trait</p>",
        "id": 276532593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648152407
    },
    {
        "content": "<p>oh oh</p>",
        "id": 276532623,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648152431
    },
    {
        "content": "<p>there's no <em>right</em> place to put it</p>",
        "id": 276532640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648152441
    },
    {
        "content": "<p>maybe on <code>MyStruct</code></p>",
        "id": 276532657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648152451
    },
    {
        "content": "<p>ok now yes</p>",
        "id": 276532795,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648152506
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(negative_impls)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(rustc_attrs)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(with_negative_coherence)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[rustc_strict_coherence]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">MyStruct</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">MyStruct</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">method</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">MyStruct</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">method</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276532805,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648152511
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0592</span><span class=\"p\">]</span>: <span class=\"nc\">duplicate</span><span class=\"w\"> </span><span class=\"n\">definitions</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">method</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">spastorino</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">oss</span><span class=\"o\">/</span><span class=\"n\">rust1</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">ui</span><span class=\"o\">/</span><span class=\"n\">coherence</span><span class=\"o\">/</span><span class=\"n\">coherence</span><span class=\"o\">-</span><span class=\"n\">negative</span><span class=\"o\">-</span><span class=\"n\">inherent</span><span class=\"o\">-</span><span class=\"k\">where</span><span class=\"o\">-</span><span class=\"n\">bounds</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">15</span>:<span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"n\">LL</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"k\">fn</span> <span class=\"nf\">method</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"o\">^^^^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">duplicate</span><span class=\"w\"> </span><span class=\"n\">definitions</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">method</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">LL</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"k\">fn</span> <span class=\"nf\">method</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"o\">----------------</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"w\"> </span><span class=\"n\">definition</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">method</span><span class=\"err\">`</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276532815,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648152518
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> do you know how to fix?</p>",
        "id": 276533621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648152948
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> sorry, was brewing coffee :)</p>",
        "id": 276534742,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648153555
    },
    {
        "content": "<p>I never know :P</p>",
        "id": 276534841,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648153587
    },
    {
        "content": "<p>I guess I can figure it out</p>",
        "id": 276534864,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648153598
    },
    {
        "content": "<p>we need to get the obligations given an impl header</p>",
        "id": 276534889,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648153617
    },
    {
        "content": "<p>there should be a way</p>",
        "id": 276534894,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648153620
    },
    {
        "content": "<p>whatever is done in <code>impl_trait_ref_and_oblig</code> should help, I guess</p>",
        "id": 276534919,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648153639
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> actually don't we need to do the same thing we are doing in that function but instead of doing it trait_ref doing it for ty (tcx.type_of(def_id))?</p>",
        "id": 276535785,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648154068
    },
    {
        "content": "<p>fixed</p>",
        "id": 276537265,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648154783
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_trait_selection/src/traits/util.rs#L196\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_trait_selection/src/traits/util.rs#L196</a></p>",
        "id": 276538143,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648155290
    },
    {
        "content": "<p>that link doesn't work</p>",
        "id": 276538159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648155299
    },
    {
        "content": "<p>I meant to say, basically we need to do that for both trait ref and inherent impls</p>",
        "id": 276538221,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648155325
    },
    {
        "content": "<p>I've just copied the impl and the test now passes</p>",
        "id": 276538241,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648155336
    },
    {
        "content": "<p>I guess this method should now handle <code>ImplSubject</code></p>",
        "id": 276538253,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648155349
    },
    {
        "content": "<p>so <code>subst</code> should probably be implemented to <code>ImplSubject</code></p>",
        "id": 276538306,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648155364
    },
    {
        "content": "<p>and so on</p>",
        "id": 276538311,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648155366
    },
    {
        "content": "<p>and then we would also want to make a deeper refactor <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_trait_selection/src/traits/specialize/mod.rs#L192\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_trait_selection/src/traits/specialize/mod.rs#L192</a></p>",
        "id": 276538350,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648155406
    },
    {
        "content": "<p>the code there is almost the same we have in negative impls</p>",
        "id": 276538365,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648155420
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> just pushed the test, the fix and a little change to make this function use <code>ImplSubject</code></p>",
        "id": 276543172,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648158147
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/315151-wg-traits.2Fnegative-impls/topic/RFC.20draft/near/276538350\">said</a>:</p>\n<blockquote>\n<p>and then we would also want to make a deeper refactor <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_trait_selection/src/traits/specialize/mod.rs#L192\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_trait_selection/src/traits/specialize/mod.rs#L192</a></p>\n</blockquote>\n<p>I didn't do the deeper refactor mentioned here <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 276543193,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648158168
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/315151-wg-traits.2Fnegative-impls/topic/RFC.20draft/near/276538306\">said</a>:</p>\n<blockquote>\n<p>so <code>subst</code> should probably be implemented to <code>ImplSubject</code></p>\n</blockquote>\n<p>if you implement \"type foldable\" you'll get all that \"for free\"</p>",
        "id": 276557219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648167967
    }
]