[
    {
        "content": "<p>In the linked issue, the defining use</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">_defining_use</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">b</span> <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"p\">())</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Converter</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>implies <code>'a: 'b</code> (can be added explicitly, too). The opaque type does not have this outlives bound, and since it's a TAIT, we can directly invoke methods on it. Those methods are run on the hidden type's impl, and can now be mis-used because the impl for <code>&amp;'b &amp;'a ()</code> can rightly rely on the outlives bound. The bug is that this defining use is accepted.</p>",
        "id": 277158848,
        "sender_full_name": "oli",
        "timestamp": 1648652676
    },
    {
        "content": "<p>For RPIT this is not an issue, because you actually need to invoke the function with a valid argument: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=3208524b2dcf9efc9aad7e49bc735065\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=3208524b2dcf9efc9aad7e49bc735065</a></p>",
        "id": 277159119,
        "sender_full_name": "oli",
        "timestamp": 1648652785
    },
    {
        "content": "<p>we already check that the defining uses don't have stricter trait bounds than the opaque type definition, I guess we failed to check the same for outlives bounds</p>",
        "id": 277159404,
        "sender_full_name": "oli",
        "timestamp": 1648652902
    },
    {
        "content": "<p>TLDR:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">Underconstrained</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"c1\">// no `'b: 'a` bound</span>\n<span class=\"k\">fn</span> <span class=\"nf\">underconstrain</span><span class=\"o\">&lt;'</span><span class=\"na\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">y</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Underconstrained</span><span class=\"o\">&lt;'</span><span class=\"na\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">y</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//~^ should error here, but doesn't right now</span>\n<span class=\"w\">    </span><span class=\"fm\">unimplemented!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 277160452,
        "sender_full_name": "oli",
        "timestamp": 1648653301
    },
    {
        "content": "<p>Hmm... I wonder if we can make</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">type</span> <span class=\"nc\">Underconstrained</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"c1\">// no `Trait` bound</span>\n<span class=\"k\">fn</span> <span class=\"nf\">underconstrain</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Trait</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Underconstrained</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//~^ ERROR the trait bound `T: Trait`</span>\n<span class=\"w\">    </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>unsound, too?</p>",
        "id": 277163205,
        "sender_full_name": "oli",
        "timestamp": 1648654538
    }
]