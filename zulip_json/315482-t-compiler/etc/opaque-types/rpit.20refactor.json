[
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"144729\" href=\"/#narrow/stream/144729-wg-traits/topic/rpit.20refactor\">#wg-traits &gt; rpit refactor</a> by <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span>.</p>",
        "id": 271859417,
        "sender_full_name": "Notification Bot",
        "timestamp": 1644859572
    },
    {
        "content": "<p>Is this thread to track re-landing the lazy tait pr?</p>",
        "id": 271904489,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1644881248
    },
    {
        "content": "<p>No, I was just trying to move all the threads over to this stream for organization purposes</p>",
        "id": 271942828,
        "sender_full_name": "oli",
        "timestamp": 1644915008
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 274003369,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646326855
    },
    {
        "content": "<p>just got ...</p>",
        "id": 274003404,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646326866
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0277]: the size for values of type `My-T` cannot be known at compilation time\n  --&gt; /home/spastorino/src/oss/rust4/src/test/ui/impl-trait/v2/generics-assoc-type.rs:9:51\n   |\nLL | fn ident_as_my_trait&lt;&#39;a, T&gt;(_u: &amp;&#39;a i32, t: T) -&gt; impl MyTrait&lt;T&gt;\n   |                          -                        ^^^^^^^^^^^^^^^ doesn&#39;t have a size known at compile-time\n   |                          |\n   |                          this type parameter needs to be `std::marker::Sized`\n</code></pre></div>",
        "id": 274003422,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646326873
    },
    {
        "content": "<p>interesting ...</p>",
        "id": 274003458,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646326884
    },
    {
        "content": "<p>and another test that was failing is now passing</p>",
        "id": 274003504,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646326899
    },
    {
        "content": "<p>looks like there's still a mix-up between the duplicated and original generics</p>",
        "id": 274004852,
        "sender_full_name": "oli",
        "timestamp": 1646327444
    },
    {
        "content": "<p>oh</p>",
        "id": 274004926,
        "sender_full_name": "oli",
        "timestamp": 1646327480
    },
    {
        "content": "<p>hold up</p>",
        "id": 274004931,
        "sender_full_name": "oli",
        "timestamp": 1646327481
    },
    {
        "content": "<p>that's just a diagnostic bug</p>",
        "id": 274004946,
        "sender_full_name": "oli",
        "timestamp": 1646327488
    },
    {
        "content": "<p>ha, it's working. The error is probably because we only duplicate the generic params but not their bounds</p>",
        "id": 274005001,
        "sender_full_name": "oli",
        "timestamp": 1646327506
    },
    {
        "content": "<p>so it's missing the implicit <code>Sized</code> bound</p>",
        "id": 274005024,
        "sender_full_name": "oli",
        "timestamp": 1646327517
    },
    {
        "content": "<p>I guess I should be copying here <a href=\"https://github.com/rust-lang/rust/blob/4c245bfca05ef0bec7ba2fe24acfb06022765fc8/compiler/rustc_ast_lowering/src/lib.rs#L821\">https://github.com/rust-lang/rust/blob/4c245bfca05ef0bec7ba2fe24acfb06022765fc8/compiler/rustc_ast_lowering/src/lib.rs#L821</a> instead of passing <code>&amp;[]</code></p>",
        "id": 274027995,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646336561
    },
    {
        "content": "<p>well, this set is empty, I guess I should be calling some kind of query that gives me not only the bounds that come from the AST but also the computes ones</p>",
        "id": 274037170,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646340370
    },
    {
        "content": "<p>I'm not sure if the problem I'm having right now is because I'd need to properly lower param bounds on ast lowering and in particular compute the implicit ones or that's something that needs to be computed on typeck when building args</p>",
        "id": 274037839,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646340668
    },
    {
        "content": "<p>I'm not exactly sure where auto trait bounds are materialized</p>",
        "id": 274039532,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646341350
    },
    {
        "content": "<p>I'd guess somewhere on <code>astconv</code></p>",
        "id": 274039583,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646341377
    },
    {
        "content": "<p>Before trying to add bounds: what exactly is the error? is it a duplicate of the \"normal\" error?</p>",
        "id": 274039762,
        "sender_full_name": "cjgillot",
        "timestamp": 1646341446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/315482-t-compiler.2Fetc.2Fopaque-types/topic/rpit.20refactor/near/274003422\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\"><pre><span></span><code>error[E0277]: the size for values of type `My-T` cannot be known at compilation time\n  --&gt; /home/spastorino/src/oss/rust4/src/test/ui/impl-trait/v2/generics-assoc-type.rs:9:51\n   |\nLL | fn ident_as_my_trait&lt;&#39;a, T&gt;(_u: &amp;&#39;a i32, t: T) -&gt; impl MyTrait&lt;T&gt;\n   |                          -                        ^^^^^^^^^^^^^^^ doesn&#39;t have a size known at compile-time\n   |                          |\n   |                          this type parameter needs to be `std::marker::Sized`\n</code></pre></div><br>\n</p>\n</blockquote>\n<p><span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 274039962,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646341553
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> as @<strong>_oli</strong> have said, I guess we are missing bounds for generic parameters</p>",
        "id": 274040051,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646341592
    },
    {
        "content": "<p>went ahead and copied them over without thinking that much but then realized that the set was empty (probably something I should have done since the beginning anyway) but is not helping in this case because these are auto traits, so those are not going to show up on ast lowering</p>",
        "id": 274040117,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646341630
    },
    {
        "content": "<p>I think we need something like <a href=\"https://github.com/rust-lang/rust/blob/4c245bfca05ef0bec7ba2fe24acfb06022765fc8/compiler/rustc_ast_lowering/src/lib.rs#L1670\">https://github.com/rust-lang/rust/blob/4c245bfca05ef0bec7ba2fe24acfb06022765fc8/compiler/rustc_ast_lowering/src/lib.rs#L1670</a> to get the where bounds to put onto <a href=\"https://github.com/rust-lang/rust/blob/4c245bfca05ef0bec7ba2fe24acfb06022765fc8/compiler/rustc_ast_lowering/src/lib.rs#L1751\">https://github.com/rust-lang/rust/blob/4c245bfca05ef0bec7ba2fe24acfb06022765fc8/compiler/rustc_ast_lowering/src/lib.rs#L1751</a></p>",
        "id": 274040251,
        "sender_full_name": "oli",
        "timestamp": 1646341685
    },
    {
        "content": "<p>hmm, <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 274040368,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646341744
    },
    {
        "content": "<p>Tho, that only works for where bounds I guess... you're right in that we should also add the non-where bounds in <a href=\"https://github.com/rust-lang/rust/blob/4c245bfca05ef0bec7ba2fe24acfb06022765fc8/compiler/rustc_ast_lowering/src/lib.rs#L821\">https://github.com/rust-lang/rust/blob/4c245bfca05ef0bec7ba2fe24acfb06022765fc8/compiler/rustc_ast_lowering/src/lib.rs#L821</a></p>",
        "id": 274040583,
        "sender_full_name": "oli",
        "timestamp": 1646341847
    },
    {
        "content": "<p>Probably better to start out with that and go to where bounds later</p>",
        "id": 274040606,
        "sender_full_name": "oli",
        "timestamp": 1646341867
    },
    {
        "content": "<p>They are lowered in <a href=\"https://github.com/rust-lang/rust/blob/4c245bfca05ef0bec7ba2fe24acfb06022765fc8/compiler/rustc_ast_lowering/src/lib.rs#L2275\">https://github.com/rust-lang/rust/blob/4c245bfca05ef0bec7ba2fe24acfb06022765fc8/compiler/rustc_ast_lowering/src/lib.rs#L2275</a></p>",
        "id": 274040867,
        "sender_full_name": "oli",
        "timestamp": 1646342006
    },
    {
        "content": "<p>ohh I've gone a different route</p>",
        "id": 274041385,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646342280
    },
    {
        "content": "<p>it's not working though</p>",
        "id": 274041430,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646342286
    },
    {
        "content": "<p>Probably need to start tracking the bounds via <a href=\"https://github.com/rust-lang/rust/blob/4c245bfca05ef0bec7ba2fe24acfb06022765fc8/compiler/rustc_ast_lowering/src/lib.rs#L917\">https://github.com/rust-lang/rust/blob/4c245bfca05ef0bec7ba2fe24acfb06022765fc8/compiler/rustc_ast_lowering/src/lib.rs#L917</a>, too, but not sure yet how (on mobile, can't help much rn)</p>",
        "id": 274041468,
        "sender_full_name": "oli",
        "timestamp": 1646342301
    },
    {
        "content": "<p>the problem I'm seeing is that <code>param.bounds</code> is empty</p>",
        "id": 274041474,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646342304
    },
    {
        "content": "<p>Uhm</p>",
        "id": 274041508,
        "sender_full_name": "oli",
        "timestamp": 1646342322
    },
    {
        "content": "<p>Where? ^^</p>",
        "id": 274041529,
        "sender_full_name": "oli",
        "timestamp": 1646342328
    },
    {
        "content": "<p>param is the stuff that's passed to <code>generic_param_from_name</code></p>",
        "id": 274041577,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646342359
    },
    {
        "content": "<p>it's a <code>GenericParam</code></p>",
        "id": 274041649,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646342397
    },
    {
        "content": "<p>so from AST</p>",
        "id": 274041651,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646342399
    },
    {
        "content": "<p>but I'm not sure how something from the AST would have that kind of information, if it's never written down</p>",
        "id": 274041738,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646342420
    },
    {
        "content": "<p>it's not that the code says <code>T: Send</code></p>",
        "id": 274041747,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646342428
    },
    {
        "content": "<p>Ah I see, that makes more sense than my approach I guess</p>",
        "id": 274041749,
        "sender_full_name": "oli",
        "timestamp": 1646342428
    },
    {
        "content": "<p>yeah, but the thing is ... where/how do I find <code>Send</code> bound there?</p>",
        "id": 274041790,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646342456
    },
    {
        "content": "<p>I was guessing that that was not going to be found on ast lowering</p>",
        "id": 274041817,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646342468
    },
    {
        "content": "<p>more likely on <code>astconv</code> or somewhere in <code>typeck</code> ?</p>",
        "id": 274041837,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646342476
    },
    {
        "content": "<p><code>Send</code>?</p>",
        "id": 274041861,
        "sender_full_name": "oli",
        "timestamp": 1646342489
    },
    {
        "content": "<p>I meant, the information that <code>Send</code> is a bound of <code>T</code> in <code>fn ident_as_my_trait&lt;'a, T&gt;(_u: &amp;'a i32, t: T) -&gt; impl MyTrait&lt;T&gt;</code></p>",
        "id": 274041907,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646342507
    },
    {
        "content": "<p>Where is <code>Send</code> coming from? Your error mentions <code>Sized</code></p>",
        "id": 274041913,
        "sender_full_name": "oli",
        "timestamp": 1646342510
    },
    {
        "content": "<p>the <code>Sized</code> is added if <code>?Sized</code> is missing later, so that's a separate issue probably</p>",
        "id": 274041987,
        "sender_full_name": "oli",
        "timestamp": 1646342537
    },
    {
        "content": "<p>sorry, I meant, <code>Sized</code>, anyway, auto traits :)</p>",
        "id": 274041999,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646342543
    },
    {
        "content": "<p>Ah ok</p>",
        "id": 274042026,
        "sender_full_name": "oli",
        "timestamp": 1646342558
    },
    {
        "content": "<p>Yea, there is no <code>Sized</code> here, but somewhere we imply <code>Sized</code> if no <code>?Sized</code> bound exists</p>",
        "id": 274042105,
        "sender_full_name": "oli",
        "timestamp": 1646342595
    },
    {
        "content": "<p>right</p>",
        "id": 274042126,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646342607
    },
    {
        "content": "<p>that's what I'm looking for and I'd guess that happens on <code>astconv</code>? or somewhere on <code>typeck</code>?</p>",
        "id": 274042183,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646342632
    },
    {
        "content": "<p>No clue, but you can go through the mentions of <code>sized_trait</code> or whatever the lang item function is called</p>",
        "id": 274042346,
        "sender_full_name": "oli",
        "timestamp": 1646342688
    },
    {
        "content": "<p>Or possibly SizedTrait for the enum variant</p>",
        "id": 274042371,
        "sender_full_name": "oli",
        "timestamp": 1646342701
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 274042458,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646342743
    },
    {
        "content": "<p>It does happen in <code>astconv</code></p>",
        "id": 274042871,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646342978
    },
    {
        "content": "<p>I think something like <code>add_implied_sized_bound</code></p>",
        "id": 274042888,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646342991
    },
    {
        "content": "<p>or something like that</p>",
        "id": 274042898,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646342995
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/32cbc7630b2d6b7141e2588f91380c1a58cf0016/compiler/rustc_typeck/src/astconv/mod.rs#L900\">https://github.com/rust-lang/rust/blob/32cbc7630b2d6b7141e2588f91380c1a58cf0016/compiler/rustc_typeck/src/astconv/mod.rs#L900</a></p>",
        "id": 274043126,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646343023
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 274043354,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646343129
    },
    {
        "content": "<p>gonna check how/where is called</p>",
        "id": 274043373,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646343136
    },
    {
        "content": "<p>right, on <code>gather_explicit_predicates_of</code></p>",
        "id": 274043456,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646343176
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/4c245bfca05ef0bec7ba2fe24acfb06022765fc8/compiler/rustc_typeck/src/collect.rs#L2180\">https://github.com/rust-lang/rust/blob/4c245bfca05ef0bec7ba2fe24acfb06022765fc8/compiler/rustc_typeck/src/collect.rs#L2180</a></p>",
        "id": 274043621,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646343260
    },
    {
        "content": "<p>I guess this needs a completely different treatment now</p>",
        "id": 274043783,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646343344
    },
    {
        "content": "<p>Yea, with your feature gate you need to not early return and instead fall through to the TAIT arm</p>",
        "id": 274045678,
        "sender_full_name": "oli",
        "timestamp": 1646344389
    },
    {
        "content": "<p>right, this is what I did but no luck</p>",
        "id": 274115472,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646393361
    },
    {
        "content": "<p>Sorry, can't help today. I guess try to follow the trail of that error and see where the bound (or lack thereof) comes from</p>",
        "id": 274116763,
        "sender_full_name": "oli",
        "timestamp": 1646394196
    },
    {
        "content": "<p>Like turn on tracing, run with and without your gate and compare the output</p>",
        "id": 274116796,
        "sender_full_name": "oli",
        "timestamp": 1646394230
    },
    {
        "content": "<p>so ... was investigating a bit</p>",
        "id": 274168026,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646417749
    },
    {
        "content": "<p><code>gather_explicit_predicates_of</code> is never called on this <code>OpaqueTy</code></p>",
        "id": 274168088,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646417771
    },
    {
        "content": "<p>it's called on a <code>Trait</code>, <code>Impl</code> and <code>Fn</code> but not on a <code>OpaqueTy</code></p>",
        "id": 274168130,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646417797
    },
    {
        "content": "<p>checking calls to this function, maybe for some reason is skipped and shouldn't</p>",
        "id": 274168155,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646417810
    },
    {
        "content": "<p>I'm finding stuff like</p>",
        "id": 274169442,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646418458
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>DEBUG rustc_typeck::collect predicates_of(def_id=DefId(0:7 ~ generics_assoc_type[66f0]::ident_as_my_trait)) = GenericPredicates { parent: None, predicates: [(Binder(TraitPredicate(&lt;T as std::marker::Sized&gt;,      polarity:Positive), []), src/test/ui/impl-trait/v2/generics-assoc-type.rs:9:26: 9:27 (#0)), (Binder(OutlivesPredicate(ReStatic, ReEarlyBound(0, &#39;a)), []), src/test/ui/impl-trait/v2/generics-assoc-type.rs:11:     14: 11:16 (#0))] }\n</code></pre></div>",
        "id": 274169561,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646418506
    },
    {
        "content": "<p>but not finding the bound for <code>My-T</code></p>",
        "id": 274169581,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646418520
    },
    {
        "content": "<p>ohh this is probably coming from <code>explicit_item_bounds</code></p>",
        "id": 274169850,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646418640
    },
    {
        "content": "<p>in particular from <a href=\"https://github.com/rust-lang/rust/blob/e8e52bd1dc27fe0f5f7936fb85139932faef3f73/compiler/rustc_typeck/src/collect/item_bounds.rs#L71\">https://github.com/rust-lang/rust/blob/e8e52bd1dc27fe0f5f7936fb85139932faef3f73/compiler/rustc_typeck/src/collect/item_bounds.rs#L71</a> I'd guess</p>",
        "id": 274169897,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646418675
    },
    {
        "content": "<p>What part of the compiler emits the error?  Does this happen with anything other than <code>Sized</code>?</p>",
        "id": 274171153,
        "sender_full_name": "cjgillot",
        "timestamp": 1646419089
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  ├─0ms DEBUG rustc_typeck::collect::item_bounds HERE: predicates=[(Binder(TraitPredicate(&lt;Opaque(DefId(0:10 ~ generics_assoc_type[66f0]::ident_as_my_trait::{opaque#0}), [My-T]) as std::marker::Sized&gt;, polarit     y:Positive), []), src/test/ui/impl-trait/v2/generics-assoc-type.rs:9:51: 9:66 (#3)), (Binder(TraitPredicate(&lt;Opaque(DefId(0:10 ~ generics_assoc_type[66f0]::ident_as_my_trait::{opaque#0}), [My-T]) as MyTrait&lt;     My-T&gt;&gt;, polarity:Positive), []), src/test/ui/impl-trait/v2/generics-assoc-type.rs:9:56: 9:66 (#0))]\n</code></pre></div>",
        "id": 274175265,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646420990
    },
    {
        "content": "<p>found that <code>item_bounds</code> and so <code>explicit_item_bounds</code> are returning the right thing</p>",
        "id": 274175342,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646421013
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/315482-t-compiler.2Fetc.2Fopaque-types/topic/rpit.20refactor/near/274171153\">said</a>:</p>\n<blockquote>\n<p>What part of the compiler emits the error?  Does this happen with anything other than <code>Sized</code>?</p>\n</blockquote>\n<p>happening in this query <a href=\"https://github.com/rust-lang/rust/blob/e8e52bd1dc27fe0f5f7936fb85139932faef3f73/compiler/rustc_typeck/src/lib.rs#L530\">https://github.com/rust-lang/rust/blob/e8e52bd1dc27fe0f5f7936fb85139932faef3f73/compiler/rustc_typeck/src/lib.rs#L530</a></p>",
        "id": 274175662,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646421172
    },
    {
        "content": "<p>more precisely <a href=\"https://github.com/rust-lang/rust/blob/e8e52bd1dc27fe0f5f7936fb85139932faef3f73/compiler/rustc_typeck/src/check/check.rs#L453\">https://github.com/rust-lang/rust/blob/e8e52bd1dc27fe0f5f7936fb85139932faef3f73/compiler/rustc_typeck/src/check/check.rs#L453</a></p>",
        "id": 274175787,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646421240
    },
    {
        "content": "<p>the error exactly comes from here <a href=\"https://github.com/rust-lang/rust/blob/e8e52bd1dc27fe0f5f7936fb85139932faef3f73/compiler/rustc_typeck/src/check/check.rs#L675-L678\">https://github.com/rust-lang/rust/blob/e8e52bd1dc27fe0f5f7936fb85139932faef3f73/compiler/rustc_typeck/src/check/check.rs#L675-L678</a></p>",
        "id": 274175924,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646421299
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> anyway, you get the idea :)</p>",
        "id": 274175943,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646421307
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/315482-t-compiler.2Fetc.2Fopaque-types/topic/rpit.20refactor/near/274175342\">said</a>:</p>\n<blockquote>\n<p>found that <code>item_bounds</code> and so <code>explicit_item_bounds</code> are returning the right thing</p>\n</blockquote>\n<p>given that this is returning the right thing, unsure what's going on really</p>",
        "id": 274176007,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646421345
    },
    {
        "content": "<p>hmm maybe <code>substs</code> here <a href=\"https://github.com/rust-lang/rust/blob/e8e52bd1dc27fe0f5f7936fb85139932faef3f73/compiler/rustc_typeck/src/check/check.rs#L767-L768\">https://github.com/rust-lang/rust/blob/e8e52bd1dc27fe0f5f7936fb85139932faef3f73/compiler/rustc_typeck/src/check/check.rs#L767-L768</a> are not correct?</p>",
        "id": 274176245,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646421480
    },
    {
        "content": "<p><code>substs</code> at that point contains <code>My-T</code></p>",
        "id": 274178959,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646422835
    },
    {
        "content": "<p>this is the sequence of events ...</p>",
        "id": 274179046,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646422887
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>   2 DEBUG rustc_typeck::collect::type_of concrete_ty = My-T\n   1 ┐rustc_typeck::check::check::check_opaque_meets_bounds def_id=DefId(0:10 ~ generics_assoc_type[66f0]::ident_as_my_trait::{opaque#0}), substs=[My-T], span=src/test/ui/impl-trait/v2/generics-assoc-type.rs:9:51     : 9:66 (#3), origin=FnReturn(DefId(0:7 ~ generics_assoc_type[66f0]::ident_as_my_trait))\n838  ├─0ms DEBUG rustc_typeck::check::check HERE: HERE: hir_id=HirId { owner: DefId(0:10 ~ generics_assoc_type[66f0]::ident_as_my_trait::{opaque#0}), local_id: 0 }\n   1 ├─0ms DEBUG rustc_typeck::check::check HERE: HERE: substs=[My-T]\n   2 ├─0ms DEBUG rustc_typeck::check::check HERE: HERE: opaque_ty=Opaque(DefId(0:10 ~ generics_assoc_type[66f0]::ident_as_my_trait::{opaque#0}), [My-T])\n   3 ├─0ms DEBUG rustc_typeck::check::inherited register_predicate(Obligation(predicate=Binder(TraitPredicate(&lt;_#0t as std::marker::Sized&gt;, polarity:Positive), []), cause=ObligationCause { span: src/test/ui/impl-     trait/v2/generics-assoc-type.rs:9:51: 9:66 (#3), body_id: HirId { owner: DefId(0:10 ~ generics_assoc_type[66f0]::ident_as_my_trait::{opaque#0}), local_id: 0 }, code: Some(OpaqueType) }, param_env=ParamEnv {      caller_bounds: [Binder(OutlivesPredicate(ReStatic, ReEarlyBound(0, &#39;a)), []), Binder(TraitPredicate(&lt;T as std::marker::Sized&gt;, polarity:Positive), [])], reveal: UserFacing, constness: NotConst }, depth=0))\n   4 ├─0ms DEBUG rustc_typeck::check::inherited register_predicate(Obligation(predicate=Binder(TraitPredicate(&lt;_#0t as MyTrait&lt;My-T&gt;&gt;, polarity:Positive), []), cause=ObligationCause { span: src/test/ui/impl-trait     /v2/generics-assoc-type.rs:9:51: 9:66 (#3), body_id: HirId { owner: DefId(0:10 ~ generics_assoc_type[66f0]::ident_as_my_trait::{opaque#0}), local_id: 0 }, code: Some(OpaqueType) }, param_env=ParamEnv { calle     r_bounds: [Binder(OutlivesPredicate(ReStatic, ReEarlyBound(0, &#39;a)), []), Binder(TraitPredicate(&lt;T as std::marker::Sized&gt;, polarity:Positive), [])], reveal: UserFacing, constness: NotConst }, depth=0))\n   5 ├─0ms DEBUG rustc_typeck::check::check HERE: HERE: hidden substs=[My-T]\n   6 ├─0ms DEBUG rustc_typeck::check::check HERE: HERE: hidden_type=My-T\n   7 ├─0ms TRACE rustc_typeck::check::check hidden_type=My-T\n   8 error[E0277]: the size for values of type `My-T` cannot be known at compilation time\n   9  --&gt; src/test/ui/impl-trait/v2/generics-assoc-type.rs:9:51\n  10   |\n  11 9 | fn ident_as_my_trait&lt;&#39;a, T&gt;(_u: &amp;&#39;a i32, t: T) -&gt; impl MyTrait&lt;T&gt;\n  12   |                          -                        ^^^^^^^^^^^^^^^ doesn&#39;t have a size known at compile-time\n  13   |                          |\n  14   |                          this type parameter needs to be `std::marker::Sized`\n</code></pre></div>",
        "id": 274179063,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646422899
    },
    {
        "content": "<p>I guess the problem is here <a href=\"https://github.com/rust-lang/rust/blob/e8e52bd1dc27fe0f5f7936fb85139932faef3f73/compiler/rustc_typeck/src/check/check.rs#L767\">https://github.com/rust-lang/rust/blob/e8e52bd1dc27fe0f5f7936fb85139932faef3f73/compiler/rustc_typeck/src/check/check.rs#L767</a></p>",
        "id": 274179918,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646423329
    },
    {
        "content": "<p>and I should be grabbing <code>generics</code>/<code>bounds</code> from the <code>OpaqueTy</code> and come with the corresponding <code>substs</code> but not 100% sure</p>",
        "id": 274179969,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646423367
    },
    {
        "content": "<p>This indeed semms like a ParamEnv issue.  Should we subtitute <code>T</code> into <code>My-T</code> in the ParamEnv, or would it just be worse?</p>",
        "id": 274183513,
        "sender_full_name": "cjgillot",
        "timestamp": 1646425134
    },
    {
        "content": "<p>Where does this ParamEnv come from? Why does it have a bound on <code>T</code>?</p>",
        "id": 274183610,
        "sender_full_name": "cjgillot",
        "timestamp": 1646425202
    },
    {
        "content": "<p>The ParamEnv comes from L644, so it contains all the bounds the defining function has.  But all of them are on <code>T</code> instead of <code>My-T</code>.</p>",
        "id": 274183783,
        "sender_full_name": "cjgillot",
        "timestamp": 1646425308
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> thanks for your thoughts, <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> was also chatting to me</p>",
        "id": 274185648,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646426399
    },
    {
        "content": "<p>it's fixed</p>",
        "id": 274185693,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646426405
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"w\"> </span>    let defining_use_anchor = match *origin {<span class=\"w\"></span>\n<span class=\"gd\">-        hir::OpaqueTyOrigin::FnReturn(did) | hir::OpaqueTyOrigin::AsyncFn(did) =&gt; did,</span><span class=\"w\"></span>\n<span class=\"gi\">+        hir::OpaqueTyOrigin::FnReturn(did) =&gt; {</span><span class=\"w\"></span>\n<span class=\"gi\">+            if tcx.sess.features_untracked().return_position_impl_trait_v2 { def_id } else { did }</span><span class=\"w\"></span>\n<span class=\"gi\">+        }</span><span class=\"w\"></span>\n<span class=\"gi\">+        hir::OpaqueTyOrigin::AsyncFn(did) =&gt; did,</span><span class=\"w\"></span>\n<span class=\"w\"> </span>        hir::OpaqueTyOrigin::TyAlias =&gt; def_id,<span class=\"w\"></span>\n</code></pre></div>",
        "id": 274185707,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646426418
    },
    {
        "content": "<p>we were getting <code>param_env</code> using the function instead of the <code>def_id</code> of the opaque type</p>",
        "id": 274185735,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646426446
    },
    {
        "content": "<p>another problem that I'm having right now is ...</p>",
        "id": 274609348,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646774760
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Captures</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Captures</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">nested_assoc_type</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">into_iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">nested_assoc_lifetime</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Captures</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">into_iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 274609422,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646774777
    },
    {
        "content": "<blockquote>\n<p>error: internal compiler error: compiler/rustc_middle/src/ty/subst.rs:635:17: type parameter <code>T/#1</code> (T/1) out of range when substituting, substs=[T]</p>\n</blockquote>",
        "id": 274609442,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646774789
    },
    {
        "content": "<p>and I see this in the logs ...</p>",
        "id": 274609489,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646774807
    },
    {
        "content": "<blockquote>\n<p>├─0ms DEBUG rustc_infer::infer::opaque_types predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [Opaque(DefId(0:10 ~ nested_return_type[c165]::nested_assoc_type::{opaque#0}), [My-T])], item_def_id:      DefId(2:7919 ~ core[23f5]::iter::traits::iterator::Iterator::Item) }, Ty(Opaque(DefId(0:11 ~ nested_return_type[c165]::nested_assoc_type::{opaque#0}::{opaque#0}), [T]))), [])</p>\n</blockquote>",
        "id": 274609559,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646774835
    },
    {
        "content": "<p>no idea why there are 2 elements in <code>substs</code> there</p>",
        "id": 274609616,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646774858
    },
    {
        "content": "<p>I'm guessing that projection obligation is coming from fold_opaque_ty, so I recommend logging that function and checking out whether it's already broken there</p>",
        "id": 274612178,
        "sender_full_name": "oli",
        "timestamp": 1646776056
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> as you have said the problem originates here <a href=\"https://github.com/rust-lang/rust/blob/73b4e591af0805abbd722d5f719b020858022f65/compiler/rustc_infer/src/infer/opaque_types.rs#L489\">https://github.com/rust-lang/rust/blob/73b4e591af0805abbd722d5f719b020858022f65/compiler/rustc_infer/src/infer/opaque_types.rs#L489</a></p>",
        "id": 274729238,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646849406
    },
    {
        "content": "<p>the content of <code>ty</code>, <code>opaque_type_key</code> and <code>origin</code> are ...</p>",
        "id": 274729294,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646849441
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>│ ├─0ms DEBUG rustc_infer::infer::opaque_types HERE: ty=Opaque(DefId(0:10 ~ nested_return_type[c165]::nested_assoc_type::{opaque#0}), [T])\n│ ├─0ms DEBUG rustc_infer::infer::opaque_types HERE: opaque_type_key=OpaqueTypeKey { def_id: DefId(0:10 ~ nested_return_type[c165]::nested_assoc_type::{opaque#0}), substs: [T] }\n│ ├─0ms DEBUG rustc_infer::infer::opaque_types HERE: origin=FnReturn(DefId(0:7 ~ nested_return_type[c165]::nested_assoc_type))\n</code></pre></div>",
        "id": 274729316,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646849451
    },
    {
        "content": "<p>then inside <code>fold_opaque_ty</code> here <a href=\"https://github.com/rust-lang/rust/blob/73b4e591af0805abbd722d5f719b020858022f65/compiler/rustc_infer/src/infer/opaque_types.rs#L549\">https://github.com/rust-lang/rust/blob/73b4e591af0805abbd722d5f719b020858022f65/compiler/rustc_infer/src/infer/opaque_types.rs#L549</a></p>",
        "id": 274729627,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646849602
    },
    {
        "content": "<p>we get</p>",
        "id": 274729637,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646849606
    },
    {
        "content": "<blockquote>\n<p>│ │ ├─0ms DEBUG rustc_infer::infer::opaque_types HERE: item_bounds=[(Binder(TraitPredicate(&lt;Opaque(DefId(0:10 ~ nested_return_type[c165]::nested_assoc_type::{opaque#0}), [My-T]) as std::marker::Sized&gt;, polarity:Positive), []), src/test/ui/impl-trait/v2/nested-return-type.rs:10:38: 10:70 (<a href=\"https://github.com/rust-lang/rust/issues/3\">#3</a>)), (Binder(TraitPredicate(&lt;Opaque(DefId(0:10 ~ nested_return_type[c165]::nested_assoc_type::{opaque#0}), [My-T]) as std::iter::Iterator&gt;, polarity:Positive), []), src/test/ui/impl-trait/v2/nested-return-type.rs:10:43: 10:70 (<a href=\"https://github.com/rust-lang/rust/issues/0\">#0</a>)), (Binder(ProjectionPredicate(ProjectionTy { substs: [Opaque(DefId(0:10 ~ nested_return_type[c165]::nested_assoc_type::{opaque#0}), [My-T])], item_def_id: DefId(2:7919 ~ core[23f5]::iter::traits::iterator::Iterator::Item) }, Ty(Opaque(DefId(0:11 ~ nested_return_type[c165]::nested_assoc_type::{opaque#0}::{opaque#0}), [T]))), []), src/test/ui/impl-trait/v2/nested-return-type.rs:10:52: 10:69 (<a href=\"https://github.com/rust-lang/rust/issues/0\">#0</a>))]</p>\n</blockquote>",
        "id": 274729651,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646849616
    },
    {
        "content": "<p>then after that we iterate over the <code>item_bounds</code></p>",
        "id": 274733033,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646851253
    },
    {
        "content": "<p>the last bound is</p>",
        "id": 274733041,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646851257
    },
    {
        "content": "<blockquote>\n<p>│ │ ├─0ms DEBUG rustc_infer::infer::opaque_types predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [Opaque(DefId(0:10 ~ nested_return_type[c165]::nested_assoc_type::{opaque#0}), [My-T])], item_def_id: DefId(2:7919 ~ core[23f5]::iter::traits::iterator::Iterator::Item) }, Ty(Opaque(DefId(0:11 ~ nested_return_type[c165]::nested_assoc_type::{opaque#0}::{opaque#0}), [T]))), [])</p>\n</blockquote>",
        "id": 274733052,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646851263
    },
    {
        "content": "<p>and when it calls <code>predicate.subst(tcx, substs);</code> in <a href=\"https://github.com/rust-lang/rust/blob/73b4e591af0805abbd722d5f719b020858022f65/compiler/rustc_infer/src/infer/opaque_types.rs#L555\">https://github.com/rust-lang/rust/blob/73b4e591af0805abbd722d5f719b020858022f65/compiler/rustc_infer/src/infer/opaque_types.rs#L555</a></p>",
        "id": 274733141,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646851301
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/315482-t-compiler.2Fetc.2Fopaque-types/topic/rpit.20refactor/near/274733052\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>│ │ ├─0ms DEBUG rustc_infer::infer::opaque_types predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [Opaque(DefId(0:10 ~ nested_return_type[c165]::nested_assoc_type::{opaque#0}), [My-T])], item_def_id: DefId(2:7919 ~ core[23f5]::iter::traits::iterator::Iterator::Item) }, Ty(Opaque(DefId(0:11 ~ nested_return_type[c165]::nested_assoc_type::{opaque#0}::{opaque#0}), [T]))), [])</p>\n</blockquote>\n</blockquote>\n<p>predicate is the one from here <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 274733393,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646851415
    },
    {
        "content": "<p>and subst comes from <code>opaque_type_key</code> from above, which is <code>substs: [T]</code></p>",
        "id": 274733496,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646851451
    },
    {
        "content": "<p>that's where we get ...</p>",
        "id": 274733523,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646851475
    },
    {
        "content": "<blockquote>\n<p>error: internal compiler error: compiler/rustc_middle/src/ty/subst.rs:635:17: type parameter <code>T/#1</code> (T/1) out of range when substituting, substs=[T]</p>\n</blockquote>",
        "id": 274733528,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646851476
    },
    {
        "content": "<p>anyway unsure why/how</p>",
        "id": 274733549,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646851485
    },
    {
        "content": "<p>I'd guess the impl trait inside the impl trait is somehow not being set up correctly but I can't see why/how</p>",
        "id": 274733877,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646851634
    },
    {
        "content": "<p>Where is the <code>T/#1</code> type in the predicate?</p>",
        "id": 274734366,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646851855
    },
    {
        "content": "<p>yeah, I'm not sure, I don't see that</p>",
        "id": 274734897,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646852093
    },
    {
        "content": "<p>is it that last <code>T</code>? (Is this <code>-Zverbose</code>?)</p>",
        "id": 274735119,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646852199
    },
    {
        "content": "<p><code>-Zverbose</code> yeah</p>",
        "id": 274735466,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646852381
    },
    {
        "content": "<p>if it's <code>T</code> and not <code>My-T</code> is the <code>T</code> that's coming from the function definition</p>",
        "id": 274735606,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646852415
    },
    {
        "content": "<p>unsure what you do you mean by last</p>",
        "id": 274735680,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646852431
    },
    {
        "content": "<p>I mean, the <code>T</code> in the <code>Opaque</code> substs</p>",
        "id": 274735999,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646852543
    },
    {
        "content": "<p>probably - that's the only <code>T</code> I see</p>",
        "id": 274736025,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646852551
    },
    {
        "content": "<p>yeah</p>",
        "id": 274736043,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646852560
    },
    {
        "content": "<p>just in case</p>",
        "id": 274736078,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646852575
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Check that nested impl Trait items work in functions with generic parameters.</span>\n<span class=\"c1\">// check-pass</span>\n\n<span class=\"cp\">#![feature(return_position_impl_trait_v2)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Captures</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Captures</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">nested_assoc_type</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">nested_assoc_lifetime</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Captures</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 274736084,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646852579
    },
    {
        "content": "<p>this is the example being executed and when you see <code>My-T</code> it's that <code>T</code> from the function but the one that's copied to the impl trait</p>",
        "id": 274736148,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646852606
    },
    {
        "content": "<p>Do you need both <code>nested_assoc_type</code> <em>and</em> <code>nested_assoc_lifetime</code> for it to fail?</p>",
        "id": 274736149,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646852607
    },
    {
        "content": "<p>probably not</p>",
        "id": 274736176,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646852617
    },
    {
        "content": "<p>If you only have one, what happens</p>",
        "id": 274736185,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646852618
    },
    {
        "content": "<p>let me reduce the test case</p>",
        "id": 274736193,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646852621
    },
    {
        "content": "<p>I guess this ...</p>",
        "id": 274736330,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646852669
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(return_position_impl_trait_v2)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">nested_assoc_type</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 274736338,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646852673
    },
    {
        "content": "<p>is a good test case</p>",
        "id": 274736342,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646852676
    },
    {
        "content": "<p>compiling ...</p>",
        "id": 274736380,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646852687
    },
    {
        "content": "<p>The predicate here is basically <code>&lt;(nested_assoc_type::opaque#0)&lt;My-T&gt; as Iterator&gt;::Item = (nested_assoc_type::opaque#0::opaque#0)&lt;T&gt;</code></p>",
        "id": 274736517,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646852746
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/315482-t-compiler.2Fetc.2Fopaque-types/topic/rpit.20refactor/near/274736338\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(return_position_impl_trait_v2)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">nested_assoc_type</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>this test case compiles</p>",
        "id": 274736739,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646852829
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(return_position_impl_trait_v2)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">nested_assoc_type</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 274736949,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646852905
    },
    {
        "content": "<p>this one fails</p>",
        "id": 274736959,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646852908
    },
    {
        "content": "<p>so we clearly see where the index 1 is coming from</p>",
        "id": 274736996,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646852922
    },
    {
        "content": "<p>How do you expect the lowering to be here? This?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">opaque</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&lt;</span><span class=\"n\">My</span><span class=\"o\">-</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>: <span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"o\">&lt;</span><span class=\"n\">My</span><span class=\"o\">-</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">opaque</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"o\">&lt;</span><span class=\"n\">My</span><span class=\"o\">-</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>: <span class=\"nb\">Sized</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">nested_assoc_type</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">X</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 274737057,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646852946
    },
    {
        "content": "<p>yes</p>",
        "id": 274737135,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646852970
    },
    {
        "content": "<p>and with the <code>'a</code> all the same but <code>fn nested_assoc_type&lt;'a: 'a, T&gt;() -&gt; X&lt;T&gt; {}</code></p>",
        "id": 274737187,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646852989
    },
    {
        "content": "<p>So, that last <code>T</code> should be <code>My-T</code>?</p>",
        "id": 274737203,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646852995
    },
    {
        "content": "<p>I think so, if I'm understanding correct what's going on yes</p>",
        "id": 274737333,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646853032
    },
    {
        "content": "<p>I guess we are getting the bounds from the function when we should be getting the bounds from the opaque type</p>",
        "id": 274737379,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646853048
    },
    {
        "content": "<p>Uh, maybe not bounds, but substs</p>",
        "id": 274737527,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646853114
    },
    {
        "content": "<p>yeah</p>",
        "id": 274737613,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646853132
    },
    {
        "content": "<p>another different thing but related to this issue</p>",
        "id": 274737659,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646853148
    },
    {
        "content": "<p>not sure what's going on with <code>ty_for_param</code></p>",
        "id": 274737681,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646853160
    },
    {
        "content": "<p>in the sense that ... it shows up in the backtrace in this way ...</p>",
        "id": 274737710,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646853175
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>577    13: &lt;rustc_middle::ty::subst::SubstFolder&gt;::ty_for_param\n   1   14: &lt;rustc_middle::ty::subst::SubstFolder as rustc_middle::ty::fold::TypeFolder&gt;::fold_ty\n   2              at ./compiler/rustc_middle/src/ty/subst.rs:594:29\n</code></pre></div>",
        "id": 274737756,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646853196
    },
    {
        "content": "<p>like is not pointing to a specific file/line of code</p>",
        "id": 274737783,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646853211
    },
    {
        "content": "<p>and also</p>",
        "id": 274737788,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646853212
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    fn ty_for_param(&amp;self, p: ty::ParamTy, source_ty: Ty&lt;&#39;tcx&gt;) -&gt; Ty&lt;&#39;tcx&gt; {\n        debug!(&quot;HERE: there we go&quot;);\n</code></pre></div>",
        "id": 274737828,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646853229
    },
    {
        "content": "<p>that's not printed</p>",
        "id": 274737832,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646853234
    },
    {
        "content": "<p>Maybe you need to set debug to true in your config.toml</p>",
        "id": 274738253,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646853422
    },
    {
        "content": "<p>I have it set to true</p>",
        "id": 274738560,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646853570
    },
    {
        "content": "<p>all the backtrace is showing the right stuff but that call and weirdly it doesn't print what's going on inside of it</p>",
        "id": 274738623,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646853601
    },
    {
        "content": "<p>anyway, that's weird but not really important because I clearly see what's going on inside of it</p>",
        "id": 274738837,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646853686
    },
    {
        "content": "<p>created a new topic about the debugging problem <a class=\"stream-topic\" data-stream-id=\"182449\" href=\"/#narrow/stream/182449-t-compiler.2Fhelp/topic/not.20seeing.20debug.20info.20ty_for_param\">#t-compiler/help &gt; not seeing debug info ty_for_param</a></p>",
        "id": 274739550,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646853965
    },
    {
        "content": "<p>anyway ... back to this as I've said I guess we are getting the substs from the function when we should be getting them from the opaque type or something similar</p>",
        "id": 274739678,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646854028
    },
    {
        "content": "<p>It's also separately weird: I dont know how you're getting an index of 1 for T</p>",
        "id": 274739930,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646854128
    },
    {
        "content": "<p>Unless for some reason the generics are like <code>[My-T, T]</code></p>",
        "id": 274739999,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646854175
    },
    {
        "content": "<p>I guess it's because you have <code>['a, T]</code></p>",
        "id": 274740119,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646854223
    },
    {
        "content": "<p><code>T</code> is index 1</p>",
        "id": 274740146,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646854232
    },
    {
        "content": "<p>so the <code>substs</code> that are wrong are the ones coming here I guess <a href=\"https://github.com/rust-lang/rust/blob/73b4e591af0805abbd722d5f719b020858022f65/compiler/rustc_infer/src/infer/opaque_types.rs#L450\">https://github.com/rust-lang/rust/blob/73b4e591af0805abbd722d5f719b020858022f65/compiler/rustc_infer/src/infer/opaque_types.rs#L450</a></p>",
        "id": 274740196,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646854254
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/315482-t-compiler.2Fetc.2Fopaque-types/topic/rpit.20refactor/near/274609422\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Captures</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Captures</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">nested_assoc_type</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">into_iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">nested_assoc_lifetime</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Captures</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">into_iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>There's no <code>'a</code> here though?</p>",
        "id": 274740545,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646854437
    },
    {
        "content": "<p>the last example I'm talking about is</p>",
        "id": 274740681,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646854496
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(return_position_impl_trait_v2)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">nested_assoc_type</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 274740685,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646854499
    },
    {
        "content": "<p>I think you are lowering the opaque type bounds in the function's scope. Right now you are only using the opaque type def id remapping to duplicate the generics. But the bounds need to be lowered in the same closure I believe</p>",
        "id": 274741157,
        "sender_full_name": "oli",
        "timestamp": 1646854722
    },
    {
        "content": "<p>I'm a bit confused right now but I think <a href=\"https://github.com/rust-lang/rust/compare/master...spastorino:rpit-refactor#diff-ad0c15bbde97a607d4758ec7eaf88248be5d6b8ae084dfc84127f81e3f7a9bb4R1782\">this</a> and <a href=\"https://github.com/rust-lang/rust/compare/master...spastorino:rpit-refactor#diff-ad0c15bbde97a607d4758ec7eaf88248be5d6b8ae084dfc84127f81e3f7a9bb4R1802\">this</a> need to go through <code>remapped_def_id</code></p>",
        "id": 274752383,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646859965
    },
    {
        "content": "<p>if I do so I get the following ...</p>",
        "id": 274752927,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646860259
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code> 1 error[E0277]: the size for values of type `My-T` cannot be known at compilation time\n  2  --&gt; src/test/ui/impl-trait/v2/nested-return-type.rs:6:38\n  3   |\n  4 6 | fn nested_assoc_type&lt;&#39;a: &#39;a, T&gt;() -&gt; impl Iterator&lt;Item = impl Sized&gt; {\n  5   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn&#39;t have a size known at compile-time\n  6   |\n  7 note: required by a bound in `nested_assoc_type::{opaque#0}`\n  8  --&gt; src/test/ui/impl-trait/v2/nested-return-type.rs:6:30\n  9   |\n 10 6 | fn nested_assoc_type&lt;&#39;a: &#39;a, T&gt;() -&gt; impl Iterator&lt;Item = impl Sized&gt; {\n 11   |                              ^ required by this bound in `nested_assoc_type::{opaque#0}`\n 12\n 13 thread &#39;rustc&#39; panicked at &#39;aborting due to `-Z treat-err-as-bug=1`&#39;, compiler/rustc_errors/src/lib.rs:1200:27\n</code></pre></div>",
        "id": 274752933,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646860261
    },
    {
        "content": "<p>it may be that that's a bit of progress but I'm not clearly thinking right now :)</p>",
        "id": 274753054,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646860323
    },
    {
        "content": "<p>Sounds like maybe param env or substs are off again</p>",
        "id": 274753670,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646860694
    },
    {
        "content": "<p>yeah</p>",
        "id": 274754048,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646860902
    },
    {
        "content": "<p>need to take a look at the logs</p>",
        "id": 274754055,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646860908
    },
    {
        "content": "<p>will check tomorrow</p>",
        "id": 274754068,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646860915
    },
    {
        "content": "<p><a href=\"https://gist.github.com/spastorino/ba217e0769ddbb97f24e10022cd2798a#file-gistfile1-txt-L125\">https://gist.github.com/spastorino/ba217e0769ddbb97f24e10022cd2798a#file-gistfile1-txt-L125</a></p>\n<p>Shows that you also modified the params in the return type, so your function signature is now <code>fn foo&lt;T&gt;() -&gt; GeneratedOpaqueTy&lt;My-T&gt;</code></p>",
        "id": 274801754,
        "sender_full_name": "oli",
        "timestamp": 1646899501
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">nested_assoc_type</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>\n<p>should desugar to</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">opaque</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Sized</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">opaque</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">nested_assoc_type</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but actually we get</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">opaque</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Sized</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">opaque</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">nested_assoc_type</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 274839756,
        "sender_full_name": "oli",
        "timestamp": 1646921526
    },
    {
        "content": "<p>So I guess the next step is to make <a href=\"https://github.com/spastorino/rust/blob/2084c20b4cacac3adf741b0da6e2b1ab3e23017a/compiler/rustc_ast_lowering/src/lib.rs#L1761\">https://github.com/spastorino/rust/blob/2084c20b4cacac3adf741b0da6e2b1ab3e23017a/compiler/rustc_ast_lowering/src/lib.rs#L1761</a> not an empty slice anymore, but copy the where bounds of the function, too</p>",
        "id": 274877559,
        "sender_full_name": "oli",
        "timestamp": 1646937590
    },
    {
        "content": "<p>So I guess the next step is to make <a href=\"https://github.com/spastorino/rust/blob/2084c20b4cacac3adf741b0da6e2b1ab3e23017a/compiler/rustc_ast_lowering/src/lib.rs#L1761\">https://github.com/spastorino/rust/blob/2084c20b4cacac3adf741b0da6e2b1ab3e23017a/compiler/rustc_ast_lowering/src/lib.rs#L1761</a> not an empty slice anymore, but copy the where bounds of the function, too</p>",
        "id": 274877560,
        "sender_full_name": "oli",
        "timestamp": 1646937590
    },
    {
        "content": "<p>For that we need to start passing them along like we do in_scope_generic_params</p>",
        "id": 274877561,
        "sender_full_name": "oli",
        "timestamp": 1646937590
    },
    {
        "content": "<p>Probably in <a href=\"https://github.com/spastorino/rust/blob/2084c20b4cacac3adf741b0da6e2b1ab3e23017a/compiler/rustc_ast_lowering/src/lib.rs#L945\">https://github.com/spastorino/rust/blob/2084c20b4cacac3adf741b0da6e2b1ab3e23017a/compiler/rustc_ast_lowering/src/lib.rs#L945</a>, but not sure where exactly</p>",
        "id": 274877718,
        "sender_full_name": "oli",
        "timestamp": 1646937658
    },
    {
        "content": "<p>where clauses: is this still about fixing the ICE, or the next implementation step?</p>",
        "id": 274885824,
        "sender_full_name": "cjgillot",
        "timestamp": 1646941480
    },
    {
        "content": "<p>Next impl step</p>",
        "id": 274889558,
        "sender_full_name": "oli",
        "timestamp": 1646943416
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/315482-t-compiler.2Fetc.2Fopaque-types/topic/rpit.20refactor/near/274885824\">said</a>:</p>\n<blockquote>\n<p>where clauses: is this still about fixing the ICE, or the next implementation step?</p>\n</blockquote>\n<p>just in case, the previously mentioned issues are all fixed now</p>",
        "id": 274892745,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646945252
    },
    {
        "content": "<p>for completion the problem we had was the thing I've mentioned yesterday when in some part of the code I wasn't remapping the def_id and also with inner impl traits, the remapping was being overriding by the inner impl trait making the remapping return the wrong def_id</p>",
        "id": 274892919,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646945352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/315482-t-compiler.2Fetc.2Fopaque-types/topic/rpit.20refactor/near/274877718\">said</a>:</p>\n<blockquote>\n<p>Probably in <a href=\"https://github.com/spastorino/rust/blob/2084c20b4cacac3adf741b0da6e2b1ab3e23017a/compiler/rustc_ast_lowering/src/lib.rs#L945\">https://github.com/spastorino/rust/blob/2084c20b4cacac3adf741b0da6e2b1ab3e23017a/compiler/rustc_ast_lowering/src/lib.rs#L945</a>, but not sure where exactly</p>\n</blockquote>\n<p>by this you meant that when we call <code>add_in_band_defs</code> to carry in band definitions at the call site we should also pass down predicates and store them inside that function so it can be used when the closure passed is called?</p>",
        "id": 274897011,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646947556
    },
    {
        "content": "<p>but in particular my question is ... if you mentioned this is because (I guess) you know that at the call site predicates of the function are available to be passed down</p>",
        "id": 274897109,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646947600
    },
    {
        "content": "<p>in particular I guess passing it down from here <a href=\"https://github.com/rust-lang/rust/blob/2084c20b4cacac3adf741b0da6e2b1ab3e23017a/compiler/rustc_ast_lowering/src/item.rs#L1304\">https://github.com/rust-lang/rust/blob/2084c20b4cacac3adf741b0da6e2b1ab3e23017a/compiler/rustc_ast_lowering/src/item.rs#L1304</a></p>",
        "id": 274897291,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646947695
    },
    {
        "content": "<p>and if that's the case unsure in particular what to do here <a href=\"https://github.com/rust-lang/rust/blob/2084c20b4cacac3adf741b0da6e2b1ab3e23017a/compiler/rustc_ast_lowering/src/item.rs#L366\">https://github.com/rust-lang/rust/blob/2084c20b4cacac3adf741b0da6e2b1ab3e23017a/compiler/rustc_ast_lowering/src/item.rs#L366</a></p>",
        "id": 274897434,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1646947790
    },
    {
        "content": "<p>I'm assuming we can get all info from the generics argument, so no need to touch call sites</p>",
        "id": 274957021,
        "sender_full_name": "oli",
        "timestamp": 1646994641
    },
    {
        "content": "<p>The current lowering of TAIT is different of RPIT.  TAITs implicitly inherit lifetimes of their environment (mostly the generics on the trait binding), while RPIT make an effort to drop them.  I need to have a uniform handling of both for <a href=\"https://github.com/rust-lang/rust/issues/91557\">#91557</a>, what should be the preferred model?</p>",
        "id": 275216589,
        "sender_full_name": "cjgillot",
        "timestamp": 1647253449
    },
    {
        "content": "<p>My preference is to do the following: for trivial TAITs (just an opaque type directly) we'd stop nesting the opaque type, and for all other TAITs, we'd do the same thing we're doing for RPIT. For now we can just do the RPIT thing for all TAITs and see into the optimization later</p>",
        "id": 275217323,
        "sender_full_name": "oli",
        "timestamp": 1647253864
    },
    {
        "content": "<p>This is not binding consensus, just my opinion</p>",
        "id": 275217369,
        "sender_full_name": "oli",
        "timestamp": 1647253884
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> was suggesting me that for my changes to be more self-contained that I make changes to the resolver</p>",
        "id": 276471387,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648126749
    },
    {
        "content": "<p>I was also mentioning this to <span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> and they were telling me that <a href=\"https://github.com/rust-lang/rust/issues/88186\">#88186</a> gets rid of <code>ResolverAstLowering</code></p>",
        "id": 276471477,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648126793
    },
    {
        "content": "<p>in particular here <a href=\"https://github.com/rust-lang/rust/pull/88186/files#diff-ad0c15bbde97a607d4758ec7eaf88248be5d6b8ae084dfc84127f81e3f7a9bb4L161\">https://github.com/rust-lang/rust/pull/88186/files#diff-ad0c15bbde97a607d4758ec7eaf88248be5d6b8ae084dfc84127f81e3f7a9bb4L161</a></p>",
        "id": 276471489,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648126798
    },
    {
        "content": "<p>wanted to bring up this discussion here so we can think about a better approach</p>",
        "id": 276471610,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648126827
    },
    {
        "content": "<p>if I understood <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>'s correctly, we would want to get rid of the need of remembering to do this kind of things <a href=\"https://github.com/rust-lang/rust/compare/master...spastorino:rpit-refactor#diff-ad0c15bbde97a607d4758ec7eaf88248be5d6b8ae084dfc84127f81e3f7a9bb4R669\">https://github.com/rust-lang/rust/compare/master...spastorino:rpit-refactor#diff-ad0c15bbde97a607d4758ec7eaf88248be5d6b8ae084dfc84127f81e3f7a9bb4R669</a></p>",
        "id": 276471795,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648126900
    },
    {
        "content": "<p>and have the def_id automatically be the right one</p>",
        "id": 276471904,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648126940
    },
    {
        "content": "<p>by containing all this logic in an impl of the resolver trait that basically have this mapping and does the right thing we would be hiding this things from users</p>",
        "id": 276471993,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648126983
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> thoughts? in particular if we are going to get rid of <code>ResolverAstLowering</code> doesn't make sense to base this changes on the existence of it</p>",
        "id": 276472124,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648127044
    },
    {
        "content": "<p>ah, well, that's even better, as in that case we can design exactly what we want instead of having to shoehorn it into <code>ResolverAstLowering</code></p>",
        "id": 276490448,
        "sender_full_name": "oli",
        "timestamp": 1648134967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> can you explain the \"exactly what we want\" part?</p>",
        "id": 276495188,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648136823
    },
    {
        "content": "<p>I'm still a bit confused on how to properly handle node_ids, hir_ids and def_ids for this let's copy generic parameters idea</p>",
        "id": 277451334,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648833774
    },
    {
        "content": "<p>yesterday I had a meeting with <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and ended mentioning him this problem</p>",
        "id": 277451398,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648833801
    },
    {
        "content": "<p>for instance ... in an example like</p>",
        "id": 277451551,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648833866
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Clone</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Clone</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">t</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 277451554,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648833869
    },
    {
        "content": "<p>in the AST we would have ...</p>",
        "id": 277451598,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648833893
    },
    {
        "content": "<ul>\n<li><code>ast::Fn</code>(node_id=N0)<ul>\n<li><code>ast::Generics</code><ul>\n<li>ast::GenericParam`(ident=T, node_id=N1)</li>\n</ul>\n</li>\n<li>ReturnType <code>ast::Ty</code>(node_id=N2)<ul>\n<li><code>TyKind::ImplTrait</code>(node_id=N3)</li>\n<li><code>ast::GenericBounds</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>",
        "id": 277451609,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648833897
    },
    {
        "content": "<p>in the name resolver we have created...</p>",
        "id": 277451915,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648834037
    },
    {
        "content": "<ul>\n<li>a DefId D1 for the function </li>\n<li>a DefId D2 for T </li>\n<li>a DefId D3 for the Impl Trait</li>\n</ul>",
        "id": 277451928,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648834043
    },
    {
        "content": "<p>and we have a map <code>resolver.node_id_to_def_id</code> that contains <em>at least</em> the def-id for each <em>declaration</em></p>",
        "id": 277451989,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648834067
    },
    {
        "content": "<ul>\n<li>N0 -&gt; D1</li>\n<li>N1 -&gt; D2</li>\n<li>N3 -&gt; D3 &lt;-- Niko has mixed feelings about this</li>\n</ul>",
        "id": 277451995,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648834070
    },
    {
        "content": "<p>we want to generate...</p>",
        "id": 277452066,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648834085
    },
    {
        "content": "<ul>\n<li><code>hir::ItemKind::Fn</code>: Item for the function<ul>\n<li>this has DefId D1</li>\n<li><code>hir::Generics</code><ul>\n<li><code>hir::GenericParam</code>(hir_id = H0, name = T)<ul>\n<li>this has DefId D2</li>\n<li><code>hir::GenericBounds</code><ul>\n<li>... <code>T: Clone</code> ... with hir_id H2</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>return type is a <code>hir::Ty</code> with...<ul>\n<li><code>hir::OpaqueDef</code>(D3, <code>[T]</code>)</li>\n</ul>\n</li>\n<li><code>hir::ItemKind::OpaqueTy</code><ul>\n<li>this has DefId D3 <em>which is a child of D1</em></li>\n<li><code>hir::Generics</code><ul>\n<li><code>hir::GenericParam</code>(hir_id = H1, name = U)<ul>\n<li>this has (fresh) DefId D4 </li>\n<li>[<code>hir::GenericBounds</code>][]<ul>\n<li>... <code>U: Clone</code> ... with hir_id H3</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>",
        "id": 277452201,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648834142
    },
    {
        "content": "<p>one of the things that we've talked about is that we would probably want to use DUMMY_NODE_ID for all this new hir nodes</p>",
        "id": 277452523,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648834268
    },
    {
        "content": "<p>I haven't tried that yet, but this makes sense to me given that there's no correspondence with anything in the AST for these new nodes</p>",
        "id": 277452572,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648834294
    },
    {
        "content": "<p>we need to lower things twice but with different hir_id_owners for the function and for the rpit</p>",
        "id": 277452692,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648834331
    },
    {
        "content": "<p>so I wanted to confirm with you guys <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> if all this stuff makes sense</p>",
        "id": 277452777,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648834367
    },
    {
        "content": "<p>in particular I have doubts if using <code>DUMMY_NODE_ID</code> will  work</p>",
        "id": 277452810,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648834383
    },
    {
        "content": "<p>and what I should exactly do with <code>OpaqueDef</code>'s generics</p>",
        "id": 277452835,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648834395
    },
    {
        "content": "<p>Do you mean you want to clone the main AST into a second (cleaned-up) copy of the AST?</p>",
        "id": 277452853,
        "sender_full_name": "cjgillot",
        "timestamp": 1648834406
    },
    {
        "content": "<p>And then lower this copy?</p>",
        "id": 277452863,
        "sender_full_name": "cjgillot",
        "timestamp": 1648834415
    },
    {
        "content": "<p>no</p>",
        "id": 277452892,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648834428
    },
    {
        "content": "<p>I'd be lowering the same AST node twice</p>",
        "id": 277452897,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648834434
    },
    {
        "content": "<p>just with different hir owner and using DUMMY_NODE_ID as the id of the node for the copy</p>",
        "id": 277452986,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648834462
    },
    {
        "content": "<p>Which node are you lowering twice?</p>",
        "id": 277453081,
        "sender_full_name": "cjgillot",
        "timestamp": 1648834524
    },
    {
        "content": "<p>the generic params</p>",
        "id": 277453221,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648834578
    },
    {
        "content": "<p>The issue with DUMMY_NODE_ID is that <code>lower_node_id</code> needs to be fixed-up to ignore it.  You have <code>next_id</code> which can do the same job.</p>",
        "id": 277453231,
        "sender_full_name": "cjgillot",
        "timestamp": 1648834583
    },
    {
        "content": "<p>(= provide you with a new node_id to be used)</p>",
        "id": 277453303,
        "sender_full_name": "cjgillot",
        "timestamp": 1648834620
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/315482-t-compiler.2Fetc.2Fopaque-types/topic/rpit.20refactor/near/277453231\">said</a>:</p>\n<blockquote>\n<p>The issue with DUMMY_NODE_ID is that <code>lower_node_id</code> needs to be fixed-up to ignore it.  You have <code>next_id</code> which can do the same job.</p>\n</blockquote>\n<p>from what I've seen yes, but it is not inserted in some maps</p>",
        "id": 277453366,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648834647
    },
    {
        "content": "<p>What is <code>it</code> referring to?</p>",
        "id": 277453446,
        "sender_full_name": "cjgillot",
        "timestamp": 1648834683
    },
    {
        "content": "<p>sorry, I got confused</p>",
        "id": 277453507,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648834704
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">lower_node_id</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ast_node_id</span>: <span class=\"nc\">NodeId</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">hir</span>::<span class=\"n\">HirId</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">assert_ne!</span><span class=\"p\">(</span><span class=\"n\">ast_node_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">DUMMY_NODE_ID</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 277453521,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648834712
    },
    {
        "content": "<p>yeah that needs to be fixed</p>",
        "id": 277453528,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648834717
    },
    {
        "content": "<p>Can't you just call <code>next_node_id</code>?</p>",
        "id": 277453627,
        "sender_full_name": "cjgillot",
        "timestamp": 1648834764
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/92e7288fae1fca7f1445a81fb302f56a79454c15/compiler/rustc_ast_lowering/src/lib.rs#L640-L647\">https://github.com/rust-lang/rust/blob/92e7288fae1fca7f1445a81fb302f56a79454c15/compiler/rustc_ast_lowering/src/lib.rs#L640-L647</a></p>",
        "id": 277453663,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648834781
    },
    {
        "content": "<p>there I could be using the remapping</p>",
        "id": 277453678,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648834788
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/315482-t-compiler.2Fetc.2Fopaque-types/topic/rpit.20refactor/near/277453627\">said</a>:</p>\n<blockquote>\n<p>Can't you just call <code>next_node_id</code>?</p>\n</blockquote>\n<p>I think I could but the question is why do we want to have a node id if we don't need it?</p>",
        "id": 277453929,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648834903
    },
    {
        "content": "<p>anyway, I can try this idea out and see how far I can get</p>",
        "id": 277453995,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648834923
    },
    {
        "content": "<p>if sounds reasonable</p>",
        "id": 277454011,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648834931
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> are you suggesting to have a node id for some specific reason I may not be seeing?</p>",
        "id": 277454211,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648835041
    },
    {
        "content": "<p>or should I just try out to see how far I can go with this idea?</p>",
        "id": 277454268,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648835054
    },
    {
        "content": "<p><code>next_node_id</code> just increments a counter, it won't do anything fishy behind your back :)</p>",
        "id": 277454326,
        "sender_full_name": "cjgillot",
        "timestamp": 1648835089
    },
    {
        "content": "<p>No reason besides because you need one.</p>",
        "id": 277454372,
        "sender_full_name": "cjgillot",
        "timestamp": 1648835110
    },
    {
        "content": "<p>I don't want to be creating node-ids because they <em>shouldn't</em> have to be there</p>",
        "id": 277454381,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835120
    },
    {
        "content": "<p>but let me check what piece of code you are talking about</p>",
        "id": 277454397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835134
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/315482-t-compiler.2Fetc.2Fopaque-types/topic/rpit.20refactor/near/277453231\">said</a>:</p>\n<blockquote>\n<p>The issue with DUMMY_NODE_ID is that <code>lower_node_id</code> needs to be fixed-up to ignore it.  You have <code>next_id</code> which can do the same job.</p>\n</blockquote>\n<p>I think this is a misunderstanding</p>",
        "id": 277454419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835145
    },
    {
        "content": "<p>though on whose part I'm not sure</p>",
        "id": 277454445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835154
    },
    {
        "content": "<p>the DUMMY_NODE_ID is only used when creating the (fresh) def-ids during lowering</p>",
        "id": 277454467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835162
    },
    {
        "content": "<p>and that function is already equipped to take a <code>DUMMY_NODE_ID</code> as argument</p>",
        "id": 277454520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835170
    },
    {
        "content": "<p>I don't think we need <code>DUMMY_NODE_ID</code> in any other places</p>",
        "id": 277454544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835181
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you're saying that in this case we should use that convenience not only because semmantically is more precise but also because when we are going to fetch a def_id for these new copied generics, we should do that through the remapping, correct?</p>",
        "id": 277454677,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648835253
    },
    {
        "content": "<p>right-- the node-id in question is used to update the resolver map</p>",
        "id": 277454704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835274
    },
    {
        "content": "<p>I don't think the resolver map should need to be updated :)</p>",
        "id": 277454719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835282
    },
    {
        "content": "<p>This resolver map is also used to build the <code>DefId &lt;-&gt; HirId</code> map.  If a DefId does not appear in it, there will be an ICE somewhere.</p>",
        "id": 277454832,
        "sender_full_name": "cjgillot",
        "timestamp": 1648835327
    },
    {
        "content": "<p>The <code>local_def_id_to_hir_id</code> map I mean. EDIT: the other one, sorry.</p>",
        "id": 277454861,
        "sender_full_name": "cjgillot",
        "timestamp": 1648835343
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/315482-t-compiler.2Fetc.2Fopaque-types/topic/rpit.20refactor/near/277454832\">said</a>:</p>\n<blockquote>\n<p>This resolver map is also used to build the <code>DefId &lt;-&gt; HirId</code> map.  If a DefId does not appear in it, there will be an ICE somewhere.</p>\n</blockquote>\n<p>I'm referring to the <code>node_id_to_hir_id</code> map</p>",
        "id": 277454884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835352
    },
    {
        "content": "<p>let me find the code in question, one sec</p>",
        "id": 277454900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835362
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/244a73c549d1468908bfd4efcb0f568a3b4ae557/compiler/rustc_resolve/src/lib.rs#L1226-L1264\">https://github.com/rust-lang/rust/blob/244a73c549d1468908bfd4efcb0f568a3b4ae557/compiler/rustc_resolve/src/lib.rs#L1226-L1264</a></p>",
        "id": 277455110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835441
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/244a73c549d1468908bfd4efcb0f568a3b4ae557/compiler/rustc_resolve/src/lib.rs#L1258\">this store</a> would not happen</p>",
        "id": 277455156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835467
    },
    {
        "content": "<p>and I think it should not have to happen</p>",
        "id": 277455168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835470
    },
    {
        "content": "<p>personally I would prefer for <a href=\"https://github.com/rust-lang/rust/blob/244a73c549d1468908bfd4efcb0f568a3b4ae557/compiler/rustc_resolve/src/lib.rs#L1229\">this argument</a> to be an <code>Option&lt;NodeId&gt;</code>, but anyway</p>",
        "id": 277455242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835499
    },
    {
        "content": "<p>This store is used by <code>lower_node_id</code> to update <code>local_id_to_def_id</code>.</p>",
        "id": 277455255,
        "sender_full_name": "cjgillot",
        "timestamp": 1648835504
    },
    {
        "content": "<p>yes, and that fn should never be called</p>",
        "id": 277455426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835556
    },
    {
        "content": "<p>i.e., if we made a \"new node id\" here</p>",
        "id": 277455444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835564
    },
    {
        "content": "<p>it would never be looked up</p>",
        "id": 277455452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835567
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 277455555,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648835612
    },
    {
        "content": "<p>what <em>will</em> happen</p>",
        "id": 277455580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835627
    },
    {
        "content": "<p>Then, you'd have a GenericParam whose HirId is not associated to a DefId.  I recall that some typechecking code assumes there is one such DefId in all case.</p>",
        "id": 277455582,
        "sender_full_name": "cjgillot",
        "timestamp": 1648835627
    },
    {
        "content": "<p>no, I don't think that's right</p>",
        "id": 277455646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835643
    },
    {
        "content": "<p>what I mean is</p>",
        "id": 277455674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835660
    },
    {
        "content": "<p>if you look at the example I wrote out above</p>",
        "id": 277455692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835671
    },
    {
        "content": "<p>we are lowering the same AST node twice</p>",
        "id": 277455700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835674
    },
    {
        "content": "<p>say it has the node-id N1</p>",
        "id": 277455709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835681
    },
    {
        "content": "<p>that is mapped by the resolver to DefId1</p>",
        "id": 277455724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835688
    },
    {
        "content": "<p>(in that <code>node_id_to_def_id</code> table)</p>",
        "id": 277455739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835695
    },
    {
        "content": "<p>so when we go to look it up, we get back <code>DefId1</code></p>",
        "id": 277455756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835704
    },
    {
        "content": "<p>but the second time, we've installed the def-id-remapper, which maps that to <code>DefId2</code> (the new <code>DefId</code> we created)</p>",
        "id": 277455778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835717
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/315482-t-compiler.2Fetc.2Fopaque-types/topic/rpit.20refactor/near/277455582\">said</a>:</p>\n<blockquote>\n<p>Then, you'd have a GenericParam whose HirId is not associated to a DefId.  I recall that some typechecking code assumes there is one such DefId in all case.</p>\n</blockquote>\n<p>where is this association between <code>HirId</code> and <code>DefId</code> made?</p>",
        "id": 277455801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835730
    },
    {
        "content": "<p>I told Santiago, my rule of thumb is that we should be shooting to have each IR be \"true to itself\".</p>",
        "id": 277455828,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835741
    },
    {
        "content": "<p>i.e., we don't need to make fake AST nodes, I hope</p>",
        "id": 277455865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835758
    },
    {
        "content": "<p>In lowering, it's called <code>local_id_to_def_id</code>.  Outside, it's <code>tcx.hir().local_def_id: HirId -&gt; LocalDefId</code>.</p>",
        "id": 277455926,
        "sender_full_name": "cjgillot",
        "timestamp": 1648835771
    },
    {
        "content": "<p>that's a map, it looks like</p>",
        "id": 277455971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835800
    },
    {
        "content": "<p>right</p>",
        "id": 277455986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835807
    },
    {
        "content": "<p>this is the map that gets reset when you have a new <code>hir_id_owner</code>, right?</p>",
        "id": 277455996,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835815
    },
    {
        "content": "<p>Yes.</p>",
        "id": 277456007,
        "sender_full_name": "cjgillot",
        "timestamp": 1648835823
    },
    {
        "content": "<p>that was important, that's part of why this whole thing works</p>",
        "id": 277456025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835834
    },
    {
        "content": "<p>right, it gets updated here</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resolver</span><span class=\"p\">.</span><span class=\"n\">opt_local_def_id</span><span class=\"p\">(</span><span class=\"n\">ast_node_id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">owners</span><span class=\"p\">.</span><span class=\"n\">ensure_contains_elem</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">hir</span>::<span class=\"n\">MaybeOwner</span>::<span class=\"n\">Phantom</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"n\">hir</span>::<span class=\"n\">MaybeOwner</span>::<span class=\"n\">Phantom</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">owners</span><span class=\"p\">[</span><span class=\"n\">def_id</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"c1\">// Do not override a `MaybeOwner::Owner` that may already here.</span>\n<span class=\"w\">                        </span><span class=\"o\">*</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">hir</span>::<span class=\"n\">MaybeOwner</span>::<span class=\"n\">NonOwner</span><span class=\"p\">(</span><span class=\"n\">hir_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">local_id_to_def_id</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">local_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">def_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 277456084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835861
    },
    {
        "content": "<p>this is the code I was talking about:</p>",
        "id": 277456086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835865
    },
    {
        "content": "<p>the <code>ast_node_id</code> we have there is NOT the new node-id you would create</p>",
        "id": 277456109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835877
    },
    {
        "content": "<p>it's the <em>old</em> node-id</p>",
        "id": 277456155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835884
    },
    {
        "content": "<p>or rather</p>",
        "id": 277456168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835888
    },
    {
        "content": "<p>the <em>only</em> node-id</p>",
        "id": 277456174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835890
    },
    {
        "content": "<p>since there is only one</p>",
        "id": 277456176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835893
    },
    {
        "content": "<p>in the branch today there are two, and we \"clone\" the AST node, but if we don't do that, there is only one</p>",
        "id": 277456222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835911
    },
    {
        "content": "<p>but we do have to remap the def-id we pull out of that table</p>",
        "id": 277456235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835916
    },
    {
        "content": "<p>I would argue that not doing so is an oversight regardless</p>",
        "id": 277456265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835926
    },
    {
        "content": "<p>I like the idea of wrapping <code>resolver</code> so we can't have such bugs</p>",
        "id": 277456282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648835934
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/315482-t-compiler.2Fetc.2Fopaque-types/topic/rpit.20refactor/near/277456235\">said</a>:</p>\n<blockquote>\n<p>but we do have to remap the def-id we pull out of that table</p>\n</blockquote>\n<p>Lowering only ever fill this table.</p>",
        "id": 277456415,
        "sender_full_name": "cjgillot",
        "timestamp": 1648835996
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/315482-t-compiler.2Fetc.2Fopaque-types/topic/rpit.20refactor/near/277456282\">said</a>:</p>\n<blockquote>\n<p>I like the idea of wrapping <code>resolver</code> so we can't have such bugs</p>\n</blockquote>\n<p>Which bug?</p>",
        "id": 277456523,
        "sender_full_name": "cjgillot",
        "timestamp": 1648836015
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/315482-t-compiler.2Fetc.2Fopaque-types/topic/rpit.20refactor/near/277456415\">said</a>:</p>\n<blockquote>\n<p>Lowering only ever fill this table.</p>\n</blockquote>\n<p>sorry, the table I meant is the result of calling <code>self.resolver.opt_local_def_id(ast_node_id)</code></p>",
        "id": 277456678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648836061
    },
    {
        "content": "<p>My concern is: we have a GenericParam for which we have created a <code>DefId2</code> and a <code>HirId2</code>.  We should link the two at one point.</p>",
        "id": 277456690,
        "sender_full_name": "cjgillot",
        "timestamp": 1648836067
    },
    {
        "content": "<p>and the fact that we don't remap that return value is the bug</p>",
        "id": 277456708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648836072
    },
    {
        "content": "<p>yes, and we will</p>",
        "id": 277456732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648836083
    },
    {
        "content": "<p>right at the code I showed you</p>",
        "id": 277456744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648836087
    },
    {
        "content": "<p>what will happen is this:</p>",
        "id": 277456752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648836090
    },
    {
        "content": "<p>we have the node id N1</p>",
        "id": 277456762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648836093
    },
    {
        "content": "<p>Why would we remap this return value?</p>",
        "id": 277456765,
        "sender_full_name": "cjgillot",
        "timestamp": 1648836094
    },
    {
        "content": "<p>because we've got a \"remap def ids\" table that contains <code>DefId1 -&gt; DefId2</code></p>",
        "id": 277456808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648836113
    },
    {
        "content": "<p>that's kind of the whole idea</p>",
        "id": 277456832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648836120
    },
    {
        "content": "<p>we want to lower the ast node twice, but remap the def-ids that we map to within it to point to the new generic parameters</p>",
        "id": 277456897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648836131
    },
    {
        "content": "<p>Oh. I get it. That is a very heavy hammer, considering you only need to remap the def-ids that appear in a <code>Res</code>, don't you?</p>",
        "id": 277457004,
        "sender_full_name": "cjgillot",
        "timestamp": 1648836191
    },
    {
        "content": "<p>basically: anything that referred to the old generic parameter has to be remapped to the new ones</p>",
        "id": 277457079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648836225
    },
    {
        "content": "<p>I think this occurs in two places</p>",
        "id": 277457112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648836235
    },
    {
        "content": "<p>one is the <code>Res</code> and the other is the one we are talking about now :)</p>",
        "id": 277457174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648836247
    },
    {
        "content": "<p>but there might be other places, I don't know</p>",
        "id": 277457182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648836250
    },
    {
        "content": "<p>I don't recall whether we searched</p>",
        "id": 277457203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648836259
    },
    {
        "content": "<p>I think we did, actually</p>",
        "id": 277457216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648836266
    },
    {
        "content": "<p>in any case it should happen always we are inside this with_remapping_call (we should switch to a resolver that always remaps)</p>",
        "id": 277457251,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648836284
    },
    {
        "content": "<p>didn't want to stop your discussion but if you agreed on this, my main doubt is ...</p>",
        "id": 277457306,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648836310
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/315482-t-compiler.2Fetc.2Fopaque-types/topic/rpit.20refactor/near/277452835\">said</a>:</p>\n<blockquote>\n<p>and what I should exactly do with <code>OpaqueDef</code>'s generics</p>\n</blockquote>\n<p><span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 277457329,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648836325
    },
    {
        "content": "<p><code>OpaqueDef</code> has <code>GenericArg</code>s</p>",
        "id": 277457393,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648836359
    },
    {
        "content": "<p>which are <code>Const</code>, <code>Type</code>, <code>Lifetime</code></p>",
        "id": 277457450,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648836369
    },
    {
        "content": "<p>in particular <code>Const</code> holds an <code>AnonConst</code></p>",
        "id": 277457464,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648836376
    },
    {
        "content": "<p>I was telling Niko that my idea of <code>OpaqueDef</code> is that it's the declaration part of the opaque type, so the thing that's placed on the function's return type</p>",
        "id": 277457538,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648836409
    },
    {
        "content": "<p>so I'd guess that we would need to have all the generic parameters inside it and all the things that are pointed by those generic parameters \"hold\" the same node_ids, hir_ids, def_id as the function does</p>",
        "id": 277457640,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648836455
    },
    {
        "content": "<p>because I found some errors with that, given that I was already creating new node_ids, hir_ids and things and I ended with the need of creating everything new for there on</p>",
        "id": 277457758,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648836489
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/315482-t-compiler.2Fetc.2Fopaque-types/topic/rpit.20refactor/near/277457174\">said</a>:</p>\n<blockquote>\n<p>one is the <code>Res</code> and the other is the one we are talking about now :)</p>\n</blockquote>\n<p>I did not consider what we are walking about as re-mapping, since we are creating the DefId entirely.<br>\nRemark: <code>Res</code> embeds a DefId, and <code>lower_res</code> never uses <code>resolver.local_def_id</code>, it must be handled separately.</p>",
        "id": 277457785,
        "sender_full_name": "cjgillot",
        "timestamp": 1648836500
    },
    {
        "content": "<p>but I guess we shouldn't do anything, we should just use fns stuff</p>",
        "id": 277457797,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648836505
    },
    {
        "content": "<p>anonymous constant ids... I wish they weren't present in the AST</p>",
        "id": 277457859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648836531
    },
    {
        "content": "<p>but</p>",
        "id": 277457864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648836532
    },
    {
        "content": "<p>well, do they have the surrounding generics in scope?</p>",
        "id": 277457911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648836548
    },
    {
        "content": "<p>The AnonConst only exists as a default argument, so we can probably drop it.</p>",
        "id": 277458031,
        "sender_full_name": "cjgillot",
        "timestamp": 1648836596
    },
    {
        "content": "<p>However, we still have the same question about the Const's type, which may contain its AnonConst.</p>",
        "id": 277458179,
        "sender_full_name": "cjgillot",
        "timestamp": 1648836647
    },
    {
        "content": "<p>Yeah, I'm pondering. The real question is what amount it makes sense to \"move over\" to the new item.</p>",
        "id": 277458371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648836729
    },
    {
        "content": "<p>(I'm also vaguely pondering the question of \"what <em>if</em> they shared generics\" -- i.e., what if we extend the core model to support that)</p>",
        "id": 277458430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648836754
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/315482-t-compiler.2Fetc.2Fopaque-types/topic/rpit.20refactor/near/277458031\">said</a>:</p>\n<blockquote>\n<p>The AnonConst only exists as a default argument, so we can probably drop it.</p>\n</blockquote>\n<p>yeah, that's correct</p>",
        "id": 277458677,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648836860
    },
    {
        "content": "<p>Allowing the inner type could access the outer function generics is the current model, isn't it?</p>",
        "id": 277458678,
        "sender_full_name": "cjgillot",
        "timestamp": 1648836860
    },
    {
        "content": "<p>anyway, I wonder what to do with the ids that are going to live inside <code>OpaqueDef</code></p>",
        "id": 277458720,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648836882
    },
    {
        "content": "<p>I'm not sure about that</p>",
        "id": 277458730,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648836886
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/315482-t-compiler.2Fetc.2Fopaque-types/topic/rpit.20refactor/near/277458678\">said</a>:</p>\n<blockquote>\n<p>Allowing the inner type could access the outer function generics is the current model, isn't it?</p>\n</blockquote>\n<p>Right, just want to make sure I'm advocating for the right change :)</p>",
        "id": 277458736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648836889
    },
    {
        "content": "<p>I know you were skeptical before :)</p>",
        "id": 277458748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648836895
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/315482-t-compiler.2Fetc.2Fopaque-types/topic/rpit.20refactor/near/277458031\">said</a>:</p>\n<blockquote>\n<p>The AnonConst only exists as a default argument, so we can probably drop it.</p>\n</blockquote>\n<p>can you say more about \"default argument\" here?</p>",
        "id": 277458849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648836938
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/315482-t-compiler.2Fetc.2Fopaque-types/topic/rpit.20refactor/near/277458736\">said</a>:</p>\n<blockquote>\n<p>Right, just want to make sure I'm advocating for the right change :)</p>\n</blockquote>\n<p>I still feel strongly that we should align the \"way we talk and think about it\" with \"the way it's implemented\", but it may be that dealing with constants makes me want to change the former, not the latter</p>",
        "id": 277458961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648836976
    },
    {
        "content": "<p>it's the default value of the generic parameter, and this is going to be substituted anyway by the actual value</p>",
        "id": 277458990,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648836995
    },
    {
        "content": "<p>in what context?</p>",
        "id": 277459014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648837007
    },
    {
        "content": "<p>like, do you mean that you have a specific example where this is the case?</p>",
        "id": 277459029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648837016
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"kt\">u32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">                      </span><span class=\"o\">^^^^^</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 277459245,
        "sender_full_name": "cjgillot",
        "timestamp": 1648837116
    },
    {
        "content": "<p>The <code>{ 5 }</code> is the AnonConst we are talking about.</p>",
        "id": 277459392,
        "sender_full_name": "cjgillot",
        "timestamp": 1648837177
    },
    {
        "content": "<p>correct and what I was saying is for this <code>{ 5 }</code> anon, I guess I could leave the same ids in the <code>OpaqueDef</code></p>",
        "id": 277459566,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648837232
    },
    {
        "content": "<p>I see.</p>",
        "id": 277459589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648837244
    },
    {
        "content": "<p><code>OpaqueDef</code> ids of F, same as in the fn, ids of <code>{ 5 }</code> same as in the fn</p>",
        "id": 277459636,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648837265
    },
    {
        "content": "<p>that's what I wonder if it's correct</p>",
        "id": 277459654,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1648837272
    },
    {
        "content": "<p>I'm thinking about a case like <code>T: Blah&lt;[u8; { .... }]&gt;</code></p>",
        "id": 277459682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648837281
    },
    {
        "content": "<p>I have to review how those kind of things are setup right now, when exactly they get isolated</p>",
        "id": 277459747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648837312
    },
    {
        "content": "<p>but I don't see any fundamental problem</p>",
        "id": 277459763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648837316
    },
    {
        "content": "<p>I suspect we just want to use the same def-id in both cases</p>",
        "id": 277459856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648837348
    },
    {
        "content": "<p>but apply it to different arguments</p>",
        "id": 277459867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648837354
    },
    {
        "content": "<p>Do you mean create an ad-hoc <code>const Foo&lt;T&gt; = { ... }</code> and use it?</p>",
        "id": 277460058,
        "sender_full_name": "cjgillot",
        "timestamp": 1648837418
    },
    {
        "content": "<p>No</p>",
        "id": 277460178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648837458
    },
    {
        "content": "<p>I mean, we already do that</p>",
        "id": 277460192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648837464
    },
    {
        "content": "<p>if I 'm not mistaken</p>",
        "id": 277460202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648837470
    },
    {
        "content": "<p>that is, those constants have their own def-ids</p>",
        "id": 277460215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648837478
    },
    {
        "content": "<p>Where do we do that?</p>",
        "id": 277460301,
        "sender_full_name": "cjgillot",
        "timestamp": 1648837521
    },
    {
        "content": "<p>I probably don't mean the same thing you did</p>",
        "id": 277460362,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648837559
    },
    {
        "content": "<p>The constants have their own def-id, but having generic parameters of their own would be new.</p>",
        "id": 277460401,
        "sender_full_name": "cjgillot",
        "timestamp": 1648837563
    },
    {
        "content": "<p>For now, they only have those of the enclosing item.</p>",
        "id": 277460442,
        "sender_full_name": "cjgillot",
        "timestamp": 1648837579
    },
    {
        "content": "<p>I have to go review later, gotta focus on other things for now :)</p>",
        "id": 277460522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648837622
    },
    {
        "content": "<p>we can still re-use the constant from the function. it doesn't matter that it is using the generics from the function, as we can still substitute those.</p>\n<p>basically reference that constant as <code>function_path::&lt;X, Y, Z&gt;::{constant#42}</code> where <code>X, Y, Z</code> are in the space of the opaque type. This may get a bit messy around lifetimes though, as the opaque type may not be binding all lifetimes so we end up having to insert <code>'static</code> for those</p>",
        "id": 277508843,
        "sender_full_name": "oli",
        "timestamp": 1648878738
    },
    {
        "content": "<p>as a first version we could also just use <code>'static</code> for all the lifetime params</p>",
        "id": 277508873,
        "sender_full_name": "oli",
        "timestamp": 1648878773
    }
]