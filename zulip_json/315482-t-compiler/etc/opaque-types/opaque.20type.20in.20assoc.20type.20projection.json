[
    {
        "content": "<p>The following snippet stops compiling with lazy TAIT but works on master. The reason for that is that we stop eagerly replacing nested opaque types with inference variables. Instead we leave the opaque types opaque, causing breakage when associated type normalization generates inference vars for the associated types and compares those (as the inference var now gets resolved to the opaque type instead of the hidden type)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Duh</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Duh</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span>: <span class=\"nc\">Duh</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// the fact that `R` is the `::Output` projection on `F` causes</span>\n<span class=\"c1\">// an intermediate inference var to be generated which is then later</span>\n<span class=\"c1\">// compared against the actually found `Assoc` type.</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">R</span>: <span class=\"nc\">Duh</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nb\">FnMut</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">R</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// The `impl Send` here is then later compared against the inference var</span>\n<span class=\"c1\">// created, causing the inference var to be set to `impl Send` instead of</span>\n<span class=\"c1\">// the hidden type. We already have obligations registered on the inference</span>\n<span class=\"c1\">// var to make it uphold the `: Duh` bound on `Trait::Assoc`. The opaque</span>\n<span class=\"c1\">// type does not implement `Duh`, even if its hidden type does. So we error out.</span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//~^ ERROR `impl Send: Duh` is not satisfied</span>\n<span class=\"w\">    </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 272835849,
        "sender_full_name": "oli",
        "timestamp": 1645550170
    },
    {
        "content": "<p>Note that</p>",
        "id": 272836098,
        "sender_full_name": "oli",
        "timestamp": 1645550269
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Duh</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Duh</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span>: <span class=\"nc\">Duh</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nc\">Duh</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">42</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>compiles fine, we specifically need the impl to have a projection in its bounds</p>",
        "id": 272836192,
        "sender_full_name": "oli",
        "timestamp": 1645550301
    },
    {
        "content": "<p>Note that this breakage was only found in a single crate: <a href=\"https://github.com/andrewhickman/mock-server\">https://github.com/andrewhickman/mock-server</a></p>\n<p>cc <span class=\"user-mention\" data-user-id=\"353015\">@Andrew Hickman</span> I'm not even sure this was ever meant to compile, as it's very confusing to have an <code>impl Send</code> satisfy any bound other than <code>Send</code>, but alas, this seems to have been stable for at least two years now <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 272837267,
        "sender_full_name": "oli",
        "timestamp": 1645550720
    },
    {
        "content": "<p>Then again, it's fairly logical how the compiler comes to this conclusion. it sees the <code>42</code> and starts looking for impls, and during this whole process, uses <code>i32</code> for <code>F</code> in the impl, which all succeeds. The only thing that happens then is that <code>F</code> (which is <code>i32</code>) gets compared to <code>impl Send</code>, because of checking whether the impl's assoc types match the specified assoc types</p>",
        "id": 272837779,
        "sender_full_name": "oli",
        "timestamp": 1645550945
    },
    {
        "content": "<p>A hacky way to fix this would be to change <a href=\"https://github.com/rust-lang/rust/blob/1e2f63de0a5e9a32d97d355f6351665e77455be2/compiler/rustc_trait_selection/src/traits/project.rs#L216-L228\">https://github.com/rust-lang/rust/blob/1e2f63de0a5e9a32d97d355f6351665e77455be2/compiler/rustc_trait_selection/src/traits/project.rs#L216-L228</a> to prefer setting hidden types to inference vars over resolving the inference var to an opaque type</p>",
        "id": 272838983,
        "sender_full_name": "oli",
        "timestamp": 1645551432
    },
    {
        "content": "<p>I did the quick hack by re-using the back-compat-hack function that I already used for two other regressions, so <a href=\"https://github.com/rust-lang/rust/pull/94081\">https://github.com/rust-lang/rust/pull/94081</a> now resolves all the issues found in crater</p>",
        "id": 272948763,
        "sender_full_name": "oli",
        "timestamp": 1645623376
    }
]