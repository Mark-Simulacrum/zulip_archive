[
    {
        "content": "<p>(Related a bit to the recent meeting discussion topic) Especially because of the query system, control flow in the compiler can be... complex. It might be helpful to have a section that explains where \"rustc::main\" is (both the literal entry point and also where the \"real work\" begins), and which things happen in what order for a reasonable entry point (let's say from scratch compilation since incremental compilation makes things more complicated). This might also be related to what the actual dynamic extent of the ubiquitous <code>'tcx</code> and <code>'hir</code> lifetimes are (Who actually owns that allocation? When is it cleaned up?). In some ways this is the same AST -&gt; HIR -&gt; MIR -&gt; LLVM pipeline, but due to the on-demand evaluation everything is just a bit on its side, like trying to figure out order of events in a haskell program. Some more clarity here would be great.</p>",
        "id": 226895212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613688373
    },
    {
        "content": "<p>Seems like a good idea to me.</p>",
        "id": 226896162,
        "sender_full_name": "Noah Lev",
        "timestamp": 1613688906
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> does this help? <a href=\"https://rustc-dev-guide.rust-lang.org/rustc-driver.html\">https://rustc-dev-guide.rust-lang.org/rustc-driver.html</a></p>",
        "id": 226909331,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613698171
    },
    {
        "content": "<p>Oh wow, that lead me to this rather imposing doc page -&gt; <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/query/struct.Providers.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/query/struct.Providers.html</a></p>",
        "id": 226909984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613698730
    },
    {
        "content": "<p>those are <em>all</em> the queries</p>",
        "id": 226910115,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613698879
    },
    {
        "content": "<p>the documentation for them doesn't live there though, it's on <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html</a></p>",
        "id": 226910120,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613698894
    },
    {
        "content": "<p>maybe it would be nice to use the same docs on both TyCtxt and Providers</p>",
        "id": 226910124,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613698907
    },
    {
        "content": "<p>Probably it would be better to instead link to the TyCtxt documentation, for example each field on providers links to the corresponding TyCtxt function, because the rustdoc presentation around types with many functions on them is better than giant struct with function pointers of complex types</p>",
        "id": 226912403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613701173
    }
]