[
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span></p>",
        "id": 181960656,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574800336
    },
    {
        "content": "<p>Hi.</p>",
        "id": 181960674,
        "sender_full_name": "nagisa",
        "timestamp": 1574800350
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1380\">@WG-learning</span> was hoping you could do a lecture about LLVM/codegen so we could add it to the rustc-guide</p>",
        "id": 181960690,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574800366
    },
    {
        "content": "<p>It is one of the biggest long-standing gaps in the guide</p>",
        "id": 181960715,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574800384
    },
    {
        "content": "<p>Alternately, we could do some sort of discussion here on zulip if you prefer that</p>",
        "id": 181960752,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574800413
    },
    {
        "content": "<p>like we did with macros/hygiene with petrochenkov:</p>",
        "id": 181960771,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574800433
    },
    {
        "content": "<p>I don’t have the means to record a lecture, sadly.</p>",
        "id": 181960773,
        "sender_full_name": "nagisa",
        "timestamp": 1574800433
    },
    {
        "content": "<p><a href=\"#narrow/stream/196385-t-compiler.2Fwg-learning/topic/macros.20discussion\" title=\"#narrow/stream/196385-t-compiler.2Fwg-learning/topic/macros.20discussion\">https://rust-lang.zulipchat.com/#narrow/stream/196385-t-compiler.2Fwg-learning/topic/macros.20discussion</a></p>",
        "id": 181960841,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574800466
    },
    {
        "content": "<p>Also LLVM and MIR→LLVM-IR codegen are two very distinct things and would deserve their separate two lectures.</p>",
        "id": 181960861,
        "sender_full_name": "nagisa",
        "timestamp": 1574800483
    },
    {
        "content": "<p>Hmm</p>",
        "id": 181960882,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574800499
    },
    {
        "content": "<p>that's good to know</p>",
        "id": 181960888,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574800503
    },
    {
        "content": "<p>Would you be able to do something like the macros discussion here on zulip? (like the link above)</p>",
        "id": 181960920,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574800531
    },
    {
        "content": "<p>?</p>",
        "id": 181960921,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574800532
    },
    {
        "content": "<p>We also understand if you are not able to</p>",
        "id": 181960997,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574800565
    },
    {
        "content": "<p>I can write down some broad outline and point out where to look for more specifics. But also, again, codegen is very deceptively prone to look small. Do you have lectures on backend (linking, etc.)?</p>",
        "id": 181961079,
        "sender_full_name": "nagisa",
        "timestamp": 1574800657
    },
    {
        "content": "<p>That would be an excellent start!</p>",
        "id": 181961108,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574800682
    },
    {
        "content": "<p>Unfortunately, we have nothing past the MIR opt</p>",
        "id": 181961146,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574800693
    },
    {
        "content": "<p>nothing on monomorphization, LLVM IR generation, and very little on LLVM itself</p>",
        "id": 181961170,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574800720
    },
    {
        "content": "<p>I have to go now. We would appreciate any information you can along in whatever format is most convenient for you. Please feel free to DM me</p>",
        "id": 181961648,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574801048
    },
    {
        "content": "<p>Not gonna get anything earlier than some weekend.</p>",
        "id": 181962513,
        "sender_full_name": "nagisa",
        "timestamp": 1574801456
    },
    {
        "content": "<p>I've been talking with <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> (can do some LLVM) and <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> who can do some of monomorphization and type layout</p>",
        "id": 182018055,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1574861011
    },
    {
        "content": "<p>could be good to coordinate, what would you cover <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> ?</p>",
        "id": 182018083,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1574861029
    },
    {
        "content": "<p>also, <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> do you have time and can cover some part?</p>",
        "id": 182018207,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1574861105
    },
    {
        "content": "<p>there's also <a href=\"https://github.com/rust-lang/rust/pull/54012\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54012\">https://github.com/rust-lang/rust/pull/54012</a> some people from there may know and be able to do something</p>",
        "id": 182018419,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1574861259
    },
    {
        "content": "<p>So, first, where do I see what we already have? I was planning to make a list of things that we should probably split into separate categories first.</p>",
        "id": 182256635,
        "sender_full_name": "nagisa",
        "timestamp": 1575149910
    },
    {
        "content": "<p>starting with \"monomorpization collector\" and ending with \"backend/linker invocation/lto\".</p>",
        "id": 182256650,
        "sender_full_name": "nagisa",
        "timestamp": 1575149941
    },
    {
        "content": "<p>There are few things I <em>cannot</em> cover in there, collector being one of those things.</p>",
        "id": 182256671,
        "sender_full_name": "nagisa",
        "timestamp": 1575149972
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> Thanks!<br>\nThis is all we have: <a href=\"https://rust-lang.github.io/rustc-guide/codegen.html\" target=\"_blank\" title=\"https://rust-lang.github.io/rustc-guide/codegen.html\">https://rust-lang.github.io/rustc-guide/codegen.html</a><br>\nso any info you have would be wonderful</p>",
        "id": 182257126,
        "sender_full_name": "mark-i-m",
        "timestamp": 1575150508
    },
    {
        "content": "<p>I guess we should create a placeholder chapter for each of the categories you come up with</p>",
        "id": 182257139,
        "sender_full_name": "mark-i-m",
        "timestamp": 1575150527
    },
    {
        "content": "<p><a href=\"https://gist.github.com/nagisa/a311a0dab09851397f266076130eefb6\" target=\"_blank\" title=\"https://gist.github.com/nagisa/a311a0dab09851397f266076130eefb6\">https://gist.github.com/nagisa/a311a0dab09851397f266076130eefb6</a> some braindumping</p>",
        "id": 182286060,
        "sender_full_name": "nagisa",
        "timestamp": 1575208709
    },
    {
        "content": "<p>Hi!</p>\n<p>I had a thread where I was pretty much asking about the same kind of lecture:<br>\n<a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Lecture.20Series.20Suggesion.3A.20Monomorphisation\" title=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Lecture.20Series.20Suggesion.3A.20Monomorphisation\">https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/Lecture.20Series.20Suggesion.3A.20Monomorphisation</a></p>\n<p>I think it'd be good to explain why monomorphisation occurs in the codegen, and not at the MIR level. This surprised me.</p>\n<p>Thanks</p>",
        "id": 182672435,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1575561072
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span></p>",
        "id": 182673047,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1575561364
    },
    {
        "content": "<p>relevant: <a href=\"https://github.com/rust-lang/rust/issues/66969\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66969\">https://github.com/rust-lang/rust/issues/66969</a></p>",
        "id": 182675827,
        "sender_full_name": "centril",
        "timestamp": 1575563021
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"223288\">@Edd Barrett</span> My understanding is that it sort of does happen at the MIR level. But first, we have to find out what to codegen (i.e. how do you codegen a <code>Vec&lt;T&gt;</code> without first knowing what <code>T</code> is?). So after the MIR is produced/checked/optimized, we monomorphize, then we generate code for the monomorphized versions.</p>",
        "id": 182681404,
        "sender_full_name": "mark-i-m",
        "timestamp": 1575566226
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198054\">@mark-i-m</span> But you don't generate a new MIR body for each monomorphisation, do you?</p>",
        "id": 182681613,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1575566384
    },
    {
        "content": "<p>Not sure, but I don't think so. My understanding is that we only collect a list of concrete instantiations of each generic MIR body. We then iterate through the list and generate code with that concrete instance. Not 100% sure though</p>",
        "id": 182683968,
        "sender_full_name": "mark-i-m",
        "timestamp": 1575567835
    },
    {
        "content": "<p>That's in line with my understanding.</p>",
        "id": 182684044,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1575567870
    },
    {
        "content": "<p>We figure out the necessary concrete instantiations as part of collector and codegen unit distribution (occurs right before we lower MIR into LLVM) and then for each such instantiation we run a separate lowering pass. Lowering then monomorphises various generic statements etc. within MIR as it goes.</p>",
        "id": 182686538,
        "sender_full_name": "nagisa",
        "timestamp": 1575569532
    },
    {
        "content": "<p>So yes, the descriptions above seem fairly on-point <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 182687063,
        "sender_full_name": "nagisa",
        "timestamp": 1575569854
    },
    {
        "content": "<p>Perhaps it is also good to mention why this decision has been made, because it is a tradeoff – we anticipate MIR to be optimised as far as it being generic allows first, so that we end up spending less time on lowering monomorphic forms and reducing the workload LLVM has to handle. That being said there’s nothing preventing us from having what <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> calls LIR which is essentially MIR but monomorphic.</p>",
        "id": 182687227,
        "sender_full_name": "nagisa",
        "timestamp": 1575569944
    },
    {
        "content": "<p>Turns out the collector has some nice documentation <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/monomorphize/collector/index.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/monomorphize/collector/index.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/monomorphize/collector/index.html</a> already</p>",
        "id": 183060352,
        "sender_full_name": "nagisa",
        "timestamp": 1575985716
    },
    {
        "content": "<p>It might also be useful to state the difference between \"declaring\" and \"defining\".</p>",
        "id": 183064146,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1575988292
    }
]