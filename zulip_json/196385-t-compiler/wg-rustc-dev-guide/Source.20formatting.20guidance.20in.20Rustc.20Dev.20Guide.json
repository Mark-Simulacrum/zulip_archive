[
    {
        "content": "<p>We have <a href=\"https://rustc-dev-guide.rust-lang.org/conventions.html#how-to-structure-your-pr\" target=\"_blank\" title=\"https://rustc-dev-guide.rust-lang.org/conventions.html#how-to-structure-your-pr\">documentation in the Rustc Dev Guide</a> that states the following:</p>\n<blockquote>\n<p>Only run rustfmt on new content. One day, we might enforce formatting for the rust-lang/rust repo. Meanwhile, we prefer that rustfmt not be run on existing code as that will generate large diffs and will make git blame harder to sift through. However, running rustfmt on new content, e.g. a new file or a largely new part of a file is ok. Small formatting adjustments nearby code you are already changing for other purposes are also ok.</p>\n</blockquote>\n<p>I reached out to the Rustfmt WG on Discord today and learned that rustfmt nightly has a <code>--file-lines</code> option for explicit source file line range formatting.  It is listed as being unstable with the following help docs:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"go\">If you want to restrict reformatting to specific sets of lines, you can</span>\n<span class=\"go\">use the `--file-lines` option. Its argument is a JSON array of objects</span>\n<span class=\"go\">with `file` and `range` properties, where `file` is a file name, and</span>\n<span class=\"go\">`range` is an array representing a range of lines like `[7,13]`. Ranges</span>\n<span class=\"go\">are 1-based and inclusive of both end points. Specifying an empty array</span>\n<span class=\"go\">will result in no files being formatted. For example,</span>\n\n<span class=\"go\">rustfmt --file-lines &#39;[</span>\n<span class=\"go\">    {&quot;file&quot;:&quot;src/lib.rs&quot;,&quot;range&quot;:[7,13]},</span>\n<span class=\"go\">    {&quot;file&quot;:&quot;src/lib.rs&quot;,&quot;range&quot;:[21,29]},</span>\n<span class=\"go\">    {&quot;file&quot;:&quot;src/foo.rs&quot;,&quot;range&quot;:[10,11]},</span>\n<span class=\"go\">    {&quot;file&quot;:&quot;src/foo.rs&quot;,&quot;range&quot;:[15,15]}]&#39;</span>\n\n<span class=\"go\">would format lines `7-13` and `21-29` of `src/lib.rs`, and lines `10-11`,</span>\n<span class=\"go\">and `15` of `src/foo.rs`. No other files would be formatted, even if they</span>\n<span class=\"go\">are included as out of line modules from `src/lib.rs`.</span>\n</pre></div>\n\n\n<p>Thoughts about our current Rustc Dev Guide fmt documentation for contributors and whether this unstable, nightly only rustfmt approach should be mentioned?  Anyone have experience with it?</p>",
        "id": 190343044,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1583969071
    },
    {
        "content": "<p>oh my, that is quite outdated</p>",
        "id": 190350369,
        "sender_full_name": "mark-i-m",
        "timestamp": 1583977705
    },
    {
        "content": "<p>The correct thing to do is run <code>./x.py fmt</code></p>",
        "id": 190350373,
        "sender_full_name": "mark-i-m",
        "timestamp": 1583977735
    },
    {
        "content": "<p>And the CI does enforce (via tidy) that ./x.py fmt --check passes</p>",
        "id": 190350390,
        "sender_full_name": "mark-i-m",
        "timestamp": 1583977799
    },
    {
        "content": "<p>Should the recommendation be <code>./x.py fmt [file you are working on]</code> or without an argument?</p>",
        "id": 190350632,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1583978134
    },
    {
        "content": "<p>x.py fmt does not take a file argument</p>",
        "id": 190351002,
        "sender_full_name": "simulacrum",
        "timestamp": 1583978703
    },
    {
        "content": "<p>you should run x.py fmt as-is</p>",
        "id": 190351017,
        "sender_full_name": "simulacrum",
        "timestamp": 1583978723
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/196385-t-compiler.2Fwg-learning/topic/Source.20formatting.20guidance.20in.20Rustc.20Dev.20Guide/near/190351017\" title=\"#narrow/stream/196385-t-compiler.2Fwg-learning/topic/Source.20formatting.20guidance.20in.20Rustc.20Dev.20Guide/near/190351017\">said</a>:</p>\n<blockquote>\n<p>you should run x.py fmt as-is</p>\n</blockquote>\n<p>ty!</p>",
        "id": 190351022,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1583978735
    },
    {
        "content": "<p>I would also (very) strongly recommend setting up rustfmt on save in your editor</p>",
        "id": 190351028,
        "sender_full_name": "simulacrum",
        "timestamp": 1583978746
    },
    {
        "content": "<p>a handy trick is to define a folder-local or project-local or w/e config to point rustfmt at the local downloaded rustfmt binary, e.g., I have <code>let g:rustfmt_command = \"/Users/mark/Edit/rust/build/x86_64-apple-darwin/stage0/bin/rustfmt\"</code> in my project-specific .vimrc</p>",
        "id": 190351079,
        "sender_full_name": "simulacrum",
        "timestamp": 1583978785
    },
    {
        "content": "<p>(This is not strictly necessary, but can be helpful, as rustfmt does diverge a little usually over time. I expect if you ask, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> may have a emacs config to share, and there's probably some level of crowd sourcing for others :)</p>",
        "id": 190351098,
        "sender_full_name": "simulacrum",
        "timestamp": 1583978838
    },
    {
        "content": "<p>This is great.  Thank you.  I'll try to update the documentation with this information.</p>",
        "id": 190351157,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1583978888
    },
    {
        "content": "<p>(FWIW, I had hoped that it was quite obvious what to do if CI failed, as it tells you to run x.py fmt, but it may be worth reading over the recent internals thread on this topic as well.)</p>",
        "id": 190351187,
        "sender_full_name": "simulacrum",
        "timestamp": 1583978982
    },
    {
        "content": "<p>er, that sentence diverged a bit there :)</p>\n<p>I meant that there seems to possibly be some confusion on this topic, so reading that internals thread may help guide what we should try to clarify in docs</p>",
        "id": 190351241,
        "sender_full_name": "simulacrum",
        "timestamp": 1583979023
    },
    {
        "content": "<p>This didn't come up during a fmt fail on CI.  I wandered across this comment in the Guide and looked into whether it is possible to do line level fmt'ing</p>",
        "id": 190351276,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1583979114
    },
    {
        "content": "<p>This one? <a href=\"https://internals.rust-lang.org/t/forced-rustfmt-is-a-roadblock-to-contributing/11913\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/forced-rustfmt-is-a-roadblock-to-contributing/11913\">https://internals.rust-lang.org/t/forced-rustfmt-is-a-roadblock-to-contributing/11913</a></p>",
        "id": 190351335,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1583979221
    },
    {
        "content": "<p>yes that thread</p>",
        "id": 190354312,
        "sender_full_name": "mark-i-m",
        "timestamp": 1583984289
    },
    {
        "content": "<p>and i agree, there seems to be a lot of questions around this. perhaps after we update the chapter we can make a blog/internals post</p>",
        "id": 190354338,
        "sender_full_name": "mark-i-m",
        "timestamp": 1583984386
    },
    {
        "content": "<p>Collecting some of the feedback from <a href=\"https://internals.rust-lang.org/t/forced-rustfmt-is-a-roadblock-to-contributing/11913\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/forced-rustfmt-is-a-roadblock-to-contributing/11913\">the Internals thread</a>...</p>",
        "id": 191379995,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1584852071
    },
    {
        "content": "<p><a href=\"https://internals.rust-lang.org/t/forced-rustfmt-is-a-roadblock-to-contributing/11913/15\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/forced-rustfmt-is-a-roadblock-to-contributing/11913/15\">Source</a></p>\n<blockquote>\n<p>To stick another voice on it, you want <code>./x.py fmt</code>. This will use the pinned, in-tree version of rustfmt, which is both a) guaranteed to work (as CI is gated on it working) and b) won't disagree with <code>./x.py tidy</code>, like a local version of rustfmt might.</p>\n<p>When working in the rustc tree, the current state is that you have to use <code>./x.py test</code> (which always runs tidy, even when narrowed) rather than cargo test. Even if you can/do get away with cargo-driven tests rather than bootstrap-driven tests, when in the rustc tree you should get into the habit of using <code>./x.py tidy</code>.</p>\n</blockquote>",
        "id": 191380043,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1584852141
    },
    {
        "content": "<p><a href=\"https://internals.rust-lang.org/t/forced-rustfmt-is-a-roadblock-to-contributing/11913/16\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/forced-rustfmt-is-a-roadblock-to-contributing/11913/16\">Source</a></p>\n<blockquote>\n<p>Yes there are all sorts of ways to avoid forgetting to rustfmt before committing</p>\n</blockquote>",
        "id": 191380106,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1584852319
    },
    {
        "content": "<p><a href=\"https://internals.rust-lang.org/t/forced-rustfmt-is-a-roadblock-to-contributing/11913/19\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/forced-rustfmt-is-a-roadblock-to-contributing/11913/19\">Source</a></p>\n<blockquote>\n<p>I also personally have rustfmt in my editor on every save, which makes me never forget formatting.</p>\n<p>For now, I think we should strive to make <code>x.py fmt</code> more discoverable (or <code>x.py test --bless</code>). I would appreciate PRs improving any docs or error messages from folks who were lost in this thread.</p>\n</blockquote>",
        "id": 191380161,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1584852473
    },
    {
        "content": "<p><a href=\"https://internals.rust-lang.org/t/forced-rustfmt-is-a-roadblock-to-contributing/11913/20\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/forced-rustfmt-is-a-roadblock-to-contributing/11913/20\">Source</a></p>\n<p>Re: don't use <code>cargo +[toolchain] fmt</code>...</p>\n<blockquote>\n<p>either we should say directly using cargo isn't supported in the rustc tree and push people harder to use x.py, or we should say using cargo to test a single component is supported and push to make ./x.py test libfoo and cargo test -p foo execute the same tests (including tidy).</p>\n</blockquote>",
        "id": 191380301,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1584852711
    },
    {
        "content": "<p><a href=\"https://internals.rust-lang.org/t/forced-rustfmt-is-a-roadblock-to-contributing/11913/30\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/forced-rustfmt-is-a-roadblock-to-contributing/11913/30\">Source</a></p>\n<p>Re: the need for more prominent guidance on fmt approach</p>\n<blockquote>\n<p>I wasn't aware [x.py fmt] existed!</p>\n</blockquote>",
        "id": 191380438,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1584852960
    },
    {
        "content": "<p><a href=\"https://internals.rust-lang.org/t/forced-rustfmt-is-a-roadblock-to-contributing/11913/49\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/forced-rustfmt-is-a-roadblock-to-contributing/11913/49\">Source</a></p>\n<p>Re: definition of a contributor workflow with fmt'ing</p>\n<blockquote>\n<p>I think it would be useful to split out two threads from this discussion: rustfmt being too aggressive, perhaps, in formatting code, and improvements we can make in rust-lang/rust specifically to user's workflow. I personally would suspect that making the latter easier would be where we can most easily make the largest wins -- I'm open to suggestions and reviewing patches to the fmt integration if that would be helpful to folks.</p>\n</blockquote>",
        "id": 191380696,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1584853436
    },
    {
        "content": "<p>Other reference material...</p>",
        "id": 191399467,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1584888094
    },
    {
        "content": "<p>This is the Rust code formatting RFC GitHub repository: <a href=\"https://github.com/rust-dev-tools/fmt-rfcs\" target=\"_blank\" title=\"https://github.com/rust-dev-tools/fmt-rfcs\">https://github.com/rust-dev-tools/fmt-rfcs</a></p>",
        "id": 191399521,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1584888143
    },
    {
        "content": "<p>that describes a RFC based formatting approval process: <a href=\"https://github.com/rust-dev-tools/fmt-rfcs#the-formatting-rfc-process\" target=\"_blank\" title=\"https://github.com/rust-dev-tools/fmt-rfcs#the-formatting-rfc-process\">https://github.com/rust-dev-tools/fmt-rfcs#the-formatting-rfc-process</a></p>",
        "id": 191399537,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1584888200
    },
    {
        "content": "<p>The Guide currently indicates:</p>\n<blockquote>\n<p>rustc is slowly moving towards the Rust standard coding style; at the moment, however, it follows a rather more chaotic style.</p>\n</blockquote>\n<p>where Rust standard coding style = style defined in the Rust code formatting RFC repository IIUC</p>",
        "id": 191399601,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1584888276
    },
    {
        "content": "<p>There is a \"style team\" that acts as the rustfmt RFC decision maker following a 2 wk open comment period called the Final Comment Period (FCP, announced on \"This Week in Rust\"):</p>\n<blockquote>\n<p>The style team will make the ultimate decision on accepting or closing a style issue. Decisions should be by consensus.</p>\n</blockquote>\n<p>Question: Is \"style team\" the rustfmt WG? (#wg-rustfmt on Discord)</p>",
        "id": 191399767,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1584888539
    },
    {
        "content": "<p>The fmt guiding principles are defined in <a href=\"https://github.com/rust-dev-tools/fmt-rfcs#guiding-principles\" target=\"_blank\" title=\"https://github.com/rust-dev-tools/fmt-rfcs#guiding-principles\">https://github.com/rust-dev-tools/fmt-rfcs#guiding-principles</a> as:</p>\n<blockquote>\n<ul>\n<li>readability</li>\n<li>aesthetics</li>\n<li>specifics</li>\n<li>application</li>\n</ul>\n</blockquote>\n<p>(decision thread is <a href=\"https://github.com/rust-dev-tools/fmt-rfcs/issues/4\" target=\"_blank\" title=\"https://github.com/rust-dev-tools/fmt-rfcs/issues/4\">https://github.com/rust-dev-tools/fmt-rfcs/issues/4</a>)</p>",
        "id": 191400101,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1584888991
    },
    {
        "content": "<p>Notable comments in those principles from the compiler fmt PoV:</p>\n<blockquote>\n<ul>\n<li>readability of code when quoted in rustc error messages</li>\n<li>compatibility with version control practices - preserving diffs, merge-friendliness, etc.</li>\n<li>ease of implementation (in Rustfmt, and in other tools/editors/code generators)</li>\n<li>internal consistency</li>\n</ul>\n</blockquote>",
        "id": 191400257,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1584889205
    },
    {
        "content": "<p>Question: Are there different (subset, superset, different set) principles required, or different priority levels for those defined, for compiler source code base fmt’ing? </p>\n<p>Enter <code>x.py fmt</code> and <code>tidy</code>...</p>",
        "id": 191402445,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1584892167
    },
    {
        "content": "<p>The Guide indicates the following about tidy:</p>\n<blockquote>\n<p>We do have some mandatory formatting conventions, which are automatically enforced by a script we affectionately call the \"tidy\" script. The tidy script runs automatically when you do ./x.py test and can be run in isolation with ./x.py test tidy.</p>\n</blockquote>\n<p>Question: Re: the \"mandatory formatting conventions\" statement,  are the conventions listed in <a href=\"https://rustc-dev-guide.rust-lang.org/conventions.html?highlight=tidy#formatting-and-the-tidy-script\" target=\"_blank\" title=\"https://rustc-dev-guide.rust-lang.org/conventions.html?highlight=tidy#formatting-and-the-tidy-script\">https://rustc-dev-guide.rust-lang.org/conventions.html?highlight=tidy#formatting-and-the-tidy-script</a> current and comprehensive guidance on what tidy enforces for compiler contributors?</p>",
        "id": 191403431,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1584893648
    },
    {
        "content": "<p>tidy entry point: <a href=\"https://github.com/rust-lang/rust/blob/master/src/tools/tidy/src/main.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/tools/tidy/src/main.rs\">https://github.com/rust-lang/rust/blob/master/src/tools/tidy/src/main.rs</a><br>\nrust code base style checks are defined in: <a href=\"https://github.com/rust-lang/rust/blob/master/src/tools/tidy/src/style.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/tools/tidy/src/style.rs\">https://github.com/rust-lang/rust/blob/master/src/tools/tidy/src/style.rs</a></p>",
        "id": 191403529,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1584893855
    },
    {
        "content": "<p><strong>Tidy style definitions</strong></p>\n<ul>\n<li>style checks are only performed on files with the extensions: \".rs\", \".py\", \".js\", \".sh\", \".c\", \".cpp\", \".h\", \".md\"(<a href=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L143-L146\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L143-L146\">src</a>)</li>\n<li>MD file checks are only for long error code files (<a href=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L160-L161\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L160-L161\">src</a>)</li>\n</ul>\n<p><strong> Style Errors</strong></p>\n<ul>\n<li>file content is empty (<a href=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L165-L167\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L165-L167\">src</a>)</li>\n<li>max columns = 80 for error code <code>.rs</code> files and all Markdown files, max columns = 100 for all other checked file types - exception: long URL (<a href=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L169-L173\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L169-L173\">src</a>)</li>\n<li>line contains tab character(s) (<a href=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L206\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L206\">src</a>)</li>\n<li>line ends with whitespace (<a href=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L209\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L209\">src</a>)</li>\n<li>line contains CR character (<a href=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L212\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L212\">src</a>)</li>\n<li>line contains the string \"TODO\" (<a href=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L216\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L216\">src</a>)</li>\n<li>line contains the string \"//\" and contains \"XXX\" (<a href=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L219\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L219\">src</a>)</li>\n<li>file contains a copyright statement with copyright holder \"Rust Developers\" or \"Rust Project Developers\" (<a href=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L237-L241\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L237-L241\">src</a>)</li>\n<li>line has unexplained doctest info ignore (<a href=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L248\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L248\">src</a>)</li>\n<li>file has a leading newline (<a href=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L254-L265\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L254-L265\">src</a>)</li>\n<li>file does not have a trailing newline (<a href=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L271\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L271\">src</a>)</li>\n<li>file has more than one trailing newline (<a href=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L273\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L273\">src</a>)</li>\n<li>file length &gt; 3000 lines (<a href=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L279-L290\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L279-L290\">src</a>)</li>\n<li><code>*.cpp</code> <em>only</em>: line contains string \"llvm_unreachable\" (<a href=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L251\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L251\">src</a>)</li>\n<li><code>libcore</code> <em>only</em>: line contains \"unsafe\" and is not a comment (<a href=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L225\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L225\">src</a>)</li>\n</ul>\n<p><strong>Tidy opt out</strong></p>\n<ul>\n<li>it is possible to opt out of checks with an <code>ignore-tidy-*</code> directive (<a href=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L115-L127\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L115-L127\">src</a>)</li>\n</ul>",
        "id": 191404977,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1584895871
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"sd\">//! Note that some of these rules are excluded from Rust files because we enforce rustfmt. It is</span>\n<span class=\"sd\">//! preferable to be formatted rather than tidy-clean.</span>\n</pre></div>\n\n\n<p>(<a href=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L13-L14\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src/tools/tidy/src/style.rs#L13-L14\">src</a>)</p>",
        "id": 191405461,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1584896571
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"262810\">@Chris Simpkins</span> Wow, thanks for doing all that research</p>",
        "id": 191420205,
        "sender_full_name": "mark-i-m",
        "timestamp": 1584917030
    },
    {
        "content": "<blockquote>\n<p>Question: Is \"style team\" the rustfmt WG? (#wg-rustfmt on Discord)</p>\n</blockquote>\n<p>Tbh, I didn't know this was a distinct team. Perhaps <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> knows?</p>\n<blockquote>\n<p>Question: Are there different (subset, superset, different set) principles required, or different priority levels for those defined, for compiler source code base fmt’ing? </p>\n</blockquote>\n<p>AFAICT, it varies from one compiler hacker to another what they value the most. Personally for me, readability and consistency across the (very large) codebase are the most important, but others may prioritize other things, I guess.</p>\n<blockquote>\n<p>Question: Re: the \"mandatory formatting conventions\" statement, are the conventions listed in <a href=\"https://rustc-dev-guide.rust-lang.org/conventions.html?highlight=tidy#formatting-and-the-tidy-script\" target=\"_blank\" title=\"https://rustc-dev-guide.rust-lang.org/conventions.html?highlight=tidy#formatting-and-the-tidy-script\">https://rustc-dev-guide.rust-lang.org/conventions.html?highlight=tidy#formatting-and-the-tidy-script</a> current and comprehensive guidance on what tidy enforces for compiler contributors?</p>\n</blockquote>\n<p>I don't think we document them anywhere. But generally, we use nightly <code>rustfmt</code> + <a href=\"https://github.com/rust-lang/rust/blob/master/rustfmt.toml\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/rustfmt.toml\">this <code>rustfmt.toml</code></a>. I don't personally know how important it is to document the specific things. I just run <code>./x.py fmt</code> before committing and don't really think about it again. Do you feel that it is an obstacle to new developers?</p>",
        "id": 191420464,
        "sender_full_name": "mark-i-m",
        "timestamp": 1584917353
    },
    {
        "content": "<p>It is no longer an active team, to my knowledge - used to be a WG (under, IIRC,  @nrc).</p>",
        "id": 191420524,
        "sender_full_name": "simulacrum",
        "timestamp": 1584917436
    },
    {
        "content": "<p>We basically only support x.py fmt (and you can do what it does yourself, e.g. on save).</p>",
        "id": 191420538,
        "sender_full_name": "simulacrum",
        "timestamp": 1584917493
    },
    {
        "content": "<blockquote>\n<p>I don't think we document them anywhere. But generally, we use nightly rustfmt + this rustfmt.toml. I don't personally know how important it is to document the specific things. I just run ./x.py fmt before committing and don't really think about it again. Do you feel that it is an obstacle to new developers?</p>\n</blockquote>\n<p>Not necessarily an obstacle, but the Internals thread points to a good deal of questioning about why it is necessary at all.  I wonder if helps to address <em>why</em> the formatting is used <strong>and</strong> how to easily accomplish it. There were active (IIUC reasonably long-term contributrors to rust) developers in the Internals thread who knew nothing of the ./x.py formatting approaches.  The arguments veered off into why make developers do it at all, just do it after they push land.  Maybe we try to address these things?</p>",
        "id": 191420609,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1584917597
    },
    {
        "content": "<p>Hmm... fair point</p>",
        "id": 191420696,
        "sender_full_name": "mark-i-m",
        "timestamp": 1584917678
    },
    {
        "content": "<p>Personally, I would rather get a statement on this from t-compiler or something</p>",
        "id": 191420711,
        "sender_full_name": "mark-i-m",
        "timestamp": 1584917721
    },
    {
        "content": "<p>That is, since it does appear to have a fair amount of controversy I would rather get guidance from project leaders on this topic</p>",
        "id": 191420775,
        "sender_full_name": "mark-i-m",
        "timestamp": 1584917798
    },
    {
        "content": "<p>I think you are right that it would be good to address in the guide at some point though</p>",
        "id": 191420788,
        "sender_full_name": "mark-i-m",
        "timestamp": 1584917833
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"198054\">mark-i-m</span> <a href=\"#narrow/stream/196385-t-compiler.2Fwg-learning/topic/Source.20formatting.20guidance.20in.20Rustc.20Dev.20Guide/near/191420775\" title=\"#narrow/stream/196385-t-compiler.2Fwg-learning/topic/Source.20formatting.20guidance.20in.20Rustc.20Dev.20Guide/near/191420775\">said</a>:</p>\n<blockquote>\n<p>That is, since it does appear to have a fair amount of controversy I would rather get guidance from project leaders on this topic</p>\n</blockquote>\n<p>Definitely makes sense.  I would be happy to pull together documentation for the Guide and/or a blog post on the topic once we understand if/how documentation might help to address concerns expressed there.   There is more to it than docs, but we may be able to help.</p>",
        "id": 191420887,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1584917973
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> </p>\n<blockquote>\n<p>We basically only support x.py fmt (and you can do what it does yourself, e.g. on save).</p>\n</blockquote>\n<p>And the recommended approach as I understand it, is to run <code>./x.py test -i --stage 1 [file | dir]</code> before committing.  This runs tidy so that you get the tidy lints and know that you need to fmt if you don't use a fmt on save approach.</p>",
        "id": 191421691,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1584919197
    },
    {
        "content": "<p>No, that's not generally how to get formatting. I would recommend just x.py fmt before committing if you don't have it set up on save.</p>",
        "id": 191421814,
        "sender_full_name": "simulacrum",
        "timestamp": 1584919399
    },
    {
        "content": "<p>(That is the right approach for testing, though)</p>",
        "id": 191421859,
        "sender_full_name": "simulacrum",
        "timestamp": 1584919453
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/196385-t-compiler.2Fwg-learning/topic/Source.20formatting.20guidance.20in.20Rustc.20Dev.20Guide/near/191421814\" title=\"#narrow/stream/196385-t-compiler.2Fwg-learning/topic/Source.20formatting.20guidance.20in.20Rustc.20Dev.20Guide/near/191421814\">said</a>:</p>\n<blockquote>\n<p>No, that's not generally how to get formatting. I would recommend just x.py fmt before committing if you don't have it set up on save.</p>\n</blockquote>\n<p>Sorry, I wasn't clear.  That lints the files IIUC and tidy informs you as part of the local test run that you need to fmt correct?  The Internals thread suggests that there are those who are surprised to find that (1) they didn't fmt; (2) their CI build fails minutes later and they don't know pass/fail status of build for their changes because the lack of fmt blocked completion of the build.  Local .x.py test run does run tidy?</p>",
        "id": 191421884,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1584919556
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"262810\">@Chris Simpkins</span> there is also <code>./x.py fmt --check</code> which is run by <code>./x.py test ...</code></p>",
        "id": 191428970,
        "sender_full_name": "mark-i-m",
        "timestamp": 1584932542
    },
    {
        "content": "<p>x.py test does run tidy, but generally speaking most people should not be running x.py test locally (it's long). I would personally recommend that most people just run UI tests after a compiler change, if that</p>",
        "id": 191474260,
        "sender_full_name": "simulacrum",
        "timestamp": 1584971049
    }
]