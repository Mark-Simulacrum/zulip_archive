[
    {
        "content": "<p>We will have a parser overview conversation with <span class=\"user-mention\" data-user-id=\"126931\">@centril</span>  today @ 1:30-2pm UTC in this thread.  This will be a high-level discussion aimed at drafting the parser section of the <code>rustc-dev-guide</code> Overview chapter.  We will also discuss plans for a more detailed discussion/video lecture to expand the parser chapter in the <code>rustc-dev-guide</code>.</p>",
        "id": 192620162,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1585802277
    },
    {
        "content": "<h1>Current <code>rustc-dev-guide</code> parser documentation</h1>\n<ul>\n<li><a href=\"https://rustc-dev-guide.rust-lang.org/high-level-overview.html\" title=\"https://rustc-dev-guide.rust-lang.org/high-level-overview.html\">High-level overview of the compiler source</a> - outdated info?</li>\n<li><a href=\"https://rustc-dev-guide.rust-lang.org/the-parser.html\" title=\"https://rustc-dev-guide.rust-lang.org/the-parser.html\">Lexing and Parsing</a> - <a href=\"https://github.com/rust-lang/rustc-dev-guide/pull/651/files\" title=\"https://github.com/rust-lang/rustc-dev-guide/pull/651/files\">Guide reorg underway</a> that will transition this chapter to a \"Frontend Compiler\" section of the Guide</li>\n<li>[rustc-dev-guide Overview] - a high-level overview of the <code>rustc</code> compiler that will serve as an intro to the Guide, currently a <a href=\"https://github.com/rust-lang/rustc-dev-guide/pull/633\" title=\"https://github.com/rust-lang/rustc-dev-guide/pull/633\">WIP with open PR</a></li>\n</ul>",
        "id": 192661930,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1585832772
    },
    {
        "content": "<h1>Discussion topics for 2020-04-02 meeting</h1>\n<ul>\n<li>Review source structure of the parser to update the \"High level overview of the compiler source\" section of the Guide and draft the parser section of the Overview</li>\n<li>High level run through of the input -&gt; output during the parser stage (what comes in?, what goes out?, where does it go?)</li>\n<li>Discuss how to approach / document a lecture on the parser to update the Guide chapter with more detailed information</li>\n</ul>",
        "id": 192664292,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1585833865
    },
    {
        "content": "<p>My current understanding:</p>\n<p>(rustc_interface) -&gt; [[ black magic ]] -&gt; (\"High Level\" Lexer / \"Low Level\" Lexer) -&gt; Token stream (<code>librustc_ast::TokenKind</code>) -&gt; [ PARSER ] -&gt; syntax well-formed -&gt; AST output -&gt; [[ black magic ]], syntax not well-formed -&gt; error handling</p>",
        "id": 192664534,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1585833975
    },
    {
        "content": "<p>The way I see parsing, it is a pure-ish function from  <code>TokenStream -&gt; SomeASTNode</code></p>",
        "id": 192665179,
        "sender_full_name": "centril",
        "timestamp": 1585834280
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <span class=\"user-mention\" data-user-id=\"126931\">@centril</span></p>",
        "id": 192665204,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1585834291
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 192665218,
        "sender_full_name": "centril",
        "timestamp": 1585834295
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"126931\">centril</span> <a href=\"#narrow/stream/196385-t-compiler.2Fwg-learning/topic/Parser.20Overview.20and.20Guide.20updates/near/192665179\" title=\"#narrow/stream/196385-t-compiler.2Fwg-learning/topic/Parser.20Overview.20and.20Guide.20updates/near/192665179\">said</a>:</p>\n<blockquote>\n<p>The way I see parsing, it is a pure-ish function from  <code>TokenStream -&gt; SomeASTNode</code></p>\n</blockquote>\n<p>Let's start there with the process.   I see that there are two levels of lexers.  For the input to the parser, you are taking <code>librustc_ast::TokenKind</code>?</p>",
        "id": 192665410,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1585834365
    },
    {
        "content": "<p>The <code>Parser</code> internally operates on individual tokens however, using <code>self.bump()</code> to advance the cursor, and then you have e.g. <code>self.token</code> and <code>self.prev_token</code> to access stuff</p>",
        "id": 192665417,
        "sender_full_name": "centril",
        "timestamp": 1585834368
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"262810\">@Chris Simpkins</span> Well the parser works on <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/token/struct.Token.html\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/token/struct.Token.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/token/struct.Token.html</a></p>",
        "id": 192665518,
        "sender_full_name": "centril",
        "timestamp": 1585834426
    },
    {
        "content": "<p>which has a <code>TokenKind</code></p>",
        "id": 192665533,
        "sender_full_name": "centril",
        "timestamp": 1585834432
    },
    {
        "content": "<p>and a <code>Token</code> has a <code>Span</code> as well, which is often used</p>",
        "id": 192665597,
        "sender_full_name": "centril",
        "timestamp": 1585834449
    },
    {
        "content": "<p>But from the outside, we can think of the parser as a function from a stream of tokens to some AST node</p>",
        "id": 192665635,
        "sender_full_name": "centril",
        "timestamp": 1585834470
    },
    {
        "content": "<p>And the parser lives in <code>rustc_parse::parser</code></p>",
        "id": 192665662,
        "sender_full_name": "centril",
        "timestamp": 1585834483
    },
    {
        "content": "<p>whereas the lexer lives mostly in <code>rustc_parse::lexer</code> and <code>rustc_lexer</code></p>",
        "id": 192665683,
        "sender_full_name": "centril",
        "timestamp": 1585834495
    },
    {
        "content": "<p>The lexers job is to produce tokens from a string</p>",
        "id": 192665719,
        "sender_full_name": "centril",
        "timestamp": 1585834513
    },
    {
        "content": "<p>(and the lexer you'll have to ask others about for the inner workings)</p>",
        "id": 192665761,
        "sender_full_name": "centril",
        "timestamp": 1585834537
    },
    {
        "content": "<p>What is the main entry point to the parser?  I tried to locate it in the source and it appears that maybe rustc_interface is calling the parser through a query function?  Can you explain at a bit higher level how the parser is integrated into the overall compiler process structure?</p>",
        "id": 192665969,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1585834637
    },
    {
        "content": "<p>Some things I think are important to mention:</p>\n<ul>\n<li>There are utility functions used all the time:<ul>\n<li><code>fn bump</code>, <code>fn check</code>, <code>fn eat</code>, <code>fn expect</code>, <code>fn look_ahead</code></li>\n<li>Even higher level: <code>parse_delim_comma_seq</code> parses a sequence of elements delimited by some <code>DelimToken</code></li>\n</ul>\n</li>\n</ul>",
        "id": 192665984,
        "sender_full_name": "centril",
        "timestamp": 1585834648
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"262810\">@Chris Simpkins</span>  There's a query which uses <code>rustc_interface::passes::parse</code>, but that's mostly for the entry point of the crate</p>",
        "id": 192666139,
        "sender_full_name": "centril",
        "timestamp": 1585834730
    },
    {
        "content": "<p>External modules <code>mod foo;</code> are parsed by <code>rustc_expand</code></p>",
        "id": 192666166,
        "sender_full_name": "centril",
        "timestamp": 1585834744
    },
    {
        "content": "<p>The external module parsing stuff mostly resides in <code>rustc_expand::module</code></p>",
        "id": 192666322,
        "sender_full_name": "centril",
        "timestamp": 1585834816
    },
    {
        "content": "<p>Ty!  Sorry to interrupt the discussion about the utility functions.</p>",
        "id": 192666346,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1585834836
    },
    {
        "content": "<p>(you'll want to grep for <code>parse_external_mod</code> as well, there's a call to it in the expansion visiting)</p>",
        "id": 192666390,
        "sender_full_name": "centril",
        "timestamp": 1585834860
    },
    {
        "content": "<p>(<code>InvocationCollector::flat_map_item</code>)</p>",
        "id": 192666407,
        "sender_full_name": "centril",
        "timestamp": 1585834870
    },
    {
        "content": "<p>Beyond this, macro expansion also calls into various \"black box\" parsers, e.g, <code>fn parse_expr</code></p>",
        "id": 192666468,
        "sender_full_name": "centril",
        "timestamp": 1585834900
    },
    {
        "content": "<p>And then there are parsing of the contents inside attributes, but that's a bit niche stuff</p>",
        "id": 192666548,
        "sender_full_name": "centril",
        "timestamp": 1585834932
    },
    {
        "content": "<p>Can you talk a bit about the recursive descent approach?  Where can the recursive functions be found?</p>",
        "id": 192666634,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1585834988
    },
    {
        "content": "<p>I'd say that important entry points inside the parser crate itself is <code>Parser::{parse_crate_mod, parse_mod}</code></p>",
        "id": 192666681,
        "sender_full_name": "centril",
        "timestamp": 1585835017
    },
    {
        "content": "<p>Sure; there are plenty of places in the parser where we have recursive grammars, e.g. expressions inside expressions, patterns inside patterns, types inside types</p>",
        "id": 192666798,
        "sender_full_name": "centril",
        "timestamp": 1585835055
    },
    {
        "content": "<p>This is handled by having various recursive functions, e.g., <code>parse_pat</code></p>",
        "id": 192666840,
        "sender_full_name": "centril",
        "timestamp": 1585835081
    },
    {
        "content": "<p>In some places we also need to handle precedence, in particular in expression parsing</p>",
        "id": 192666888,
        "sender_full_name": "centril",
        "timestamp": 1585835123
    },
    {
        "content": "<p>The parsing is organized by what sort of semantic construct is being parsed:</p>\n<ul>\n<li><code>expr.rs</code></li>\n<li><code>pat.rs</code></li>\n<li><code>ty.rs</code></li>\n<li><code>stmt.rs</code><br>\nand so on</li>\n</ul>",
        "id": 192666995,
        "sender_full_name": "centril",
        "timestamp": 1585835167
    },
    {
        "content": "<p>This tries to mirror other file names in e.g., AST lowering, type checking, etc.</p>",
        "id": 192667030,
        "sender_full_name": "centril",
        "timestamp": 1585835183
    },
    {
        "content": "<p>for example <code>expr.rs</code> or an <code>expr</code> folder can be found in the parser, lowering, type checking, HAIR lowering, MIR building</p>",
        "id": 192667159,
        "sender_full_name": "centril",
        "timestamp": 1585835245
    },
    {
        "content": "<p>(though that might not apply to e.g., <code>pat.rs</code> to the same extent, and other things)</p>",
        "id": 192667198,
        "sender_full_name": "centril",
        "timestamp": 1585835272
    },
    {
        "content": "<p>For error handling, the parser uses the standard <code>DiagnosticBuilder</code> API, but we try to recover, parsing a superset of Rust's grammar, while also emitting an error</p>",
        "id": 192667328,
        "sender_full_name": "centril",
        "timestamp": 1585835323
    },
    {
        "content": "<p>Recovery means that we try to return <code>Ok(recovered_ast_node)</code> instead of <code>Err(...)</code> which will get bubbled up using <code>self.parse_foobar()?</code></p>",
        "id": 192667395,
        "sender_full_name": "centril",
        "timestamp": 1585835358
    },
    {
        "content": "<p>The standard parser method signature is some form of:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">parse_foobar</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">...)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">PResult</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Foobar</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 192667534,
        "sender_full_name": "centril",
        "timestamp": 1585835416
    },
    {
        "content": "<p>Another thing of note is that when adding new syntax, e.g., for a new language feature, it needs to be <em>pre-expansion</em> feature gated</p>",
        "id": 192667643,
        "sender_full_name": "centril",
        "timestamp": 1585835472
    },
    {
        "content": "<p>What struct(s) is/are passed to the next stage of the compile process on the out side of the parser?</p>",
        "id": 192667678,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1585835490
    },
    {
        "content": "<p>AST nodes are the output of parsing; e.g., <code>rustc_ast::ast::{Crate, Mod, Expr, Pat, ...}</code></p>",
        "id": 192667771,
        "sender_full_name": "centril",
        "timestamp": 1585835523
    },
    {
        "content": "<p>The most important top level parsers would be producing <code>Crate</code> or <code>Mod</code></p>",
        "id": 192667811,
        "sender_full_name": "centril",
        "timestamp": 1585835552
    },
    {
        "content": "<p>but the black box parsers include <code>Expr</code>, <code>Item</code>, <code>Pat</code>, <code>Ty</code>, etc. (corresponding to various macro fragments)</p>",
        "id": 192667845,
        "sender_full_name": "centril",
        "timestamp": 1585835578
    },
    {
        "content": "<p>Very helpful.  Ty</p>",
        "id": 192667899,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1585835610
    },
    {
        "content": "<p>To do pre-expansion gating, we use e.g.,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">sess</span><span class=\"p\">.</span><span class=\"n\">gated_spans</span><span class=\"p\">.</span><span class=\"n\">gate</span><span class=\"p\">(</span><span class=\"n\">sym</span>::<span class=\"n\">or_patterns</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">some_span</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>This corresponds to some appropriate span to feature gate, for the feature <code>#![feature(or_patterns)]</code></p>",
        "id": 192667948,
        "sender_full_name": "centril",
        "timestamp": 1585835629
    },
    {
        "content": "<p>this collects a set of spans, which we then use in <code>rustc_ast_passes::feature_gate::check_crate</code></p>",
        "id": 192668073,
        "sender_full_name": "centril",
        "timestamp": 1585835671
    },
    {
        "content": "<p>After having parsed the AST, we then also do macro expansion, AST validation, feature gating, name resolution, some early linting, and finally we lower to HIR</p>",
        "id": 192668217,
        "sender_full_name": "centril",
        "timestamp": 1585835741
    },
    {
        "content": "<p>As I noted before, this is a bit circular, as macro expansion calls out for external module parsing and the various black box parsers</p>",
        "id": 192668340,
        "sender_full_name": "centril",
        "timestamp": 1585835785
    },
    {
        "content": "<p>Can you give an example of a syntax validation that is performed and elicits an error?  What is the general type of validation used at the parser stage?</p>",
        "id": 192668388,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1585835804
    },
    {
        "content": "<p>I think we shouldn't think of what the parser does as <em>validation</em> (see e.g., <a href=\"https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/\" title=\"https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/\">https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/</a> )</p>",
        "id": 192668447,
        "sender_full_name": "centril",
        "timestamp": 1585835842
    },
    {
        "content": "<p>Short on time so I will make this the last question so that you can get to the compiler meeting <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 192668464,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1585835848
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"126931\">centril</span> <a href=\"#narrow/stream/196385-t-compiler.2Fwg-learning/topic/Parser.20Overview.20and.20Guide.20updates/near/192668447\" title=\"#narrow/stream/196385-t-compiler.2Fwg-learning/topic/Parser.20Overview.20and.20Guide.20updates/near/192668447\">said</a>:</p>\n<blockquote>\n<p>I think we shouldn't think of what the parser does as <em>validation</em> (see e.g., <a href=\"https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/\" title=\"https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/\">https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/</a> )</p>\n</blockquote>\n<p>What is an \"error\" then?</p>",
        "id": 192668574,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1585835887
    },
    {
        "content": "<p>The parser might check that we're at some appropriate token, eat it, and then produce an AST</p>",
        "id": 192668676,
        "sender_full_name": "centril",
        "timestamp": 1585835937
    },
    {
        "content": "<p>or it might decide that there was an unexpected token, and produce an error</p>",
        "id": 192668698,
        "sender_full_name": "centril",
        "timestamp": 1585835948
    },
    {
        "content": "<p>But this is driven by parsing some structure</p>",
        "id": 192668740,
        "sender_full_name": "centril",
        "timestamp": 1585835966
    },
    {
        "content": "<p>which is different than what AST validation does (takes a whole AST and does various checks)</p>",
        "id": 192668770,
        "sender_full_name": "centril",
        "timestamp": 1585835983
    },
    {
        "content": "<p>Anyways... compiler meeting :D</p>",
        "id": 192668853,
        "sender_full_name": "centril",
        "timestamp": 1585836005
    },
    {
        "content": "<p>Thank you very much for your time!</p>",
        "id": 192668890,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1585836012
    },
    {
        "content": "<p><span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 192668916,
        "sender_full_name": "centril",
        "timestamp": 1585836023
    },
    {
        "content": "<p>I really appreciate it <span class=\"user-mention\" data-user-id=\"126931\">@centril</span></p>",
        "id": 192668943,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1585836032
    },
    {
        "content": "<p>I'll r=you when I have a draft of the Overview documentation if you don't mind having a look</p>",
        "id": 192669067,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1585836092
    },
    {
        "content": "<p>sure cc me any time</p>",
        "id": 192669100,
        "sender_full_name": "centril",
        "timestamp": 1585836110
    }
]