[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> Hi <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <br>\nI was wondering if you would have a chance sometime in the next month or so to just have a zulip discussion where you tell us (WG-learning) everything you know about macros/expansion/hygiene. We were thinking this could be less formal (and less work for you) than compiler lecture series lecture... thoughts?</p>",
        "id": 170484515,
        "sender_full_name": "mark-i-m",
        "timestamp": 1562701522
    },
    {
        "content": "<p>The goal is to fill out that long-standing gap in the rustc-guide</p>",
        "id": 170484561,
        "sender_full_name": "mark-i-m",
        "timestamp": 1562701555
    },
    {
        "content": "<p>Ok, I'm at UTC+03:00 and generally available in the evenings (or weekends).</p>",
        "id": 170486732,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1562703199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> Either of those works for me (your evenings are about lunch time for me :) ) Is there a particular date that would work best for you?</p>",
        "id": 170493035,
        "sender_full_name": "mark-i-m",
        "timestamp": 1562708624
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1380\">@WG-learning</span> Does anyone else have a preferred date?</p>",
        "id": 170493096,
        "sender_full_name": "mark-i-m",
        "timestamp": 1562708667
    },
    {
        "content": "<blockquote>\n<p>Is there a particular date that would work best for you?</p>\n</blockquote>\n<p>Nah, not much difference.<br>\n(If something changes for a specific day, I'll notify.)</p>",
        "id": 170494319,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1562709987
    },
    {
        "content": "<p>week days are better, but I'd say let's wait for <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> to say when they are ready for it and we can set a date</p>",
        "id": 170499146,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1562714929
    },
    {
        "content": "<p>also, we should record this so ... I guess it doesn't matter that much when :)</p>",
        "id": 170499156,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1562714945
    },
    {
        "content": "<blockquote>\n<p>also, we should record this so ... I guess it doesn't matter that much when :)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> My thinking was to just use zulip, so we would have the log</p>",
        "id": 170576428,
        "sender_full_name": "mark-i-m",
        "timestamp": 1562790147
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> <span class=\"user-group-mention\" data-user-group-id=\"1380\">@WG-learning</span>  How about 2 weeks from now: July 24 at 5pm UTC time (if I did the math right, that should be evening for Vadim)</p>",
        "id": 170576616,
        "sender_full_name": "mark-i-m",
        "timestamp": 1562790312
    },
    {
        "content": "<p>i can try and do this but I am starting a new job that week so cannot promise.</p>",
        "id": 170576730,
        "sender_full_name": "amanjeev",
        "timestamp": 1562790394
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"123856\">Vadim Petrochenkov</span> <span class=\"user-group-mention\" data-user-group-id=\"1380\">@WG-learning</span>  How about 2 weeks from now: July 24 at 5pm UTC time (if I did the math right, that should be evening for Vadim)</p>\n</blockquote>\n<p>works perfect for me</p>",
        "id": 170581615,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1562794643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198054\">@mark-i-m</span> I have access to the compiler calendar so I can add something there</p>",
        "id": 170581633,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1562794666
    },
    {
        "content": "<p>let me know if you want to add an event to the calendar, I can do that</p>",
        "id": 170581680,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1562794690
    },
    {
        "content": "<p>how long it would be?</p>",
        "id": 170581684,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1562794693
    },
    {
        "content": "<blockquote>\n<p>let me know if you want to add an event to the calendar, I can do that</p>\n</blockquote>",
        "id": 170593917,
        "sender_full_name": "mark-i-m",
        "timestamp": 1562807493
    },
    {
        "content": "<p>That could be good <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 170593919,
        "sender_full_name": "mark-i-m",
        "timestamp": 1562807498
    },
    {
        "content": "<blockquote>\n<p>how long it would be?</p>\n</blockquote>\n<p>Let's start with 30 minutes, and if we need to schedule another we cna</p>",
        "id": 170593974,
        "sender_full_name": "mark-i-m",
        "timestamp": 1562807540
    },
    {
        "content": "<blockquote>\n<p>5pm UTC</p>\n</blockquote>\n<p>1-2 hours later would be better, 5pm UTC is not evening enough.</p>",
        "id": 170853325,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563146209
    },
    {
        "content": "<p>How exactly do you plan the meeting to go (aka how much do I need to prepare)?</p>",
        "id": 170853332,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563146244
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>5pm UTC</p>\n</blockquote>\n<p>1-2 hours later would be better, 5pm UTC is not evening enough.</p>\n</blockquote>\n<p>Scheduled for 7pm UTC then</p>",
        "id": 170894657,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1563198767
    },
    {
        "content": "<blockquote>\n<p>How exactly do you plan the meeting to go (aka how much do I need to prepare)?</p>\n</blockquote>\n<p>/cc <span class=\"user-mention\" data-user-id=\"198054\">@mark-i-m</span></p>",
        "id": 170894736,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1563198824
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> </p>\n<blockquote>\n<p>How exactly do you plan the meeting to go (aka how much do I need to prepare)?</p>\n</blockquote>\n<p>My hope was that this could be less formal than for a compiler lecture series, but it would be nice if you could have in your mind a tour of the design and the code</p>\n<p>That is, imagine that a new person was joining the compiler team and needed to get up to speed about macros/expansion/hygiene. What would you tell such a person?</p>",
        "id": 170901496,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563203243
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> Are we still on for tomorrow at 7pm UTC?</p>",
        "id": 171534846,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563899618
    },
    {
        "content": "<p>Yes.</p>",
        "id": 171538051,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563902024
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> <span class=\"user-mention\" data-user-id=\"198054\">@mark-i-m</span> I've added an event on rust compiler team calendar</p>",
        "id": 171543193,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1563905385
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1380\">@WG-learning</span> <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> Hello!</p>",
        "id": 171632704,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563994404
    },
    {
        "content": "<p>We will be starting in ~7 minutes</p>",
        "id": 171632736,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563994437
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 171632889,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563994526
    },
    {
        "content": "<p>I'm here.</p>",
        "id": 171633143,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563994715
    },
    {
        "content": "<p>Cool :)</p>",
        "id": 171633288,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563994828
    },
    {
        "content": "<p>hello <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span></p>",
        "id": 171633292,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1563994832
    },
    {
        "content": "<p>Shall we start?</p>",
        "id": 171633293,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563994832
    },
    {
        "content": "<p>First off, <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> Thanks for doing this!</p>",
        "id": 171633316,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563994848
    },
    {
        "content": "<p>Here's some preliminary data I prepared.</p>",
        "id": 171633344,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563994877
    },
    {
        "content": "<p>Below I'll assume <a href=\"https://github.com/rust-lang/rust/issues/62771\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62771\">#62771</a> and <a href=\"https://github.com/rust-lang/rust/issues/62086\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62086\">#62086</a> has landed.</p>",
        "id": 171633348,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563994883
    },
    {
        "content": "<p>Where to find the code:<br>\nlibsyntax_pos/hygiene.rs - structures related to hygiene and expansion that are kept in global data (can be accessed from any <code>Ident</code> without any context)<br>\nlibsyntax_pos/lib.rs - some secondary methods like macro backtrace using primary methods from <a href=\"http://hygiene.rs\" target=\"_blank\" title=\"http://hygiene.rs\">hygiene.rs</a><br>\nlibsyntax_ext - implementations of built-in macros (including macro attributes and derives) and some other early code generation facilities like injection of standard library imports or generation of test harness.<br>\nlibsyntax/config.rs - implementation of cfg/cfg_attr (they treated specially from other macros), should probably be moved into libsyntax/ext.<br>\nlibsyntax/tokenstream.rs + libsyntax/parse/token.rs - structures for compiler-side tokens, token trees, and token streams.<br>\nlibsyntax/ext - various expansion-related stuff<br>\n    libsyntax/ext/base.rs - basic structures used by expansion<br>\n    libsyntax/ext/expand.rs - some expansion structures and the bulk of expansion infrastructure code - collecting macro invocations, calling into resolve for them, calling their expanding functions, and integrating the results back into AST<br>\n    libsyntax/ext/placeholder.rs - the part of <a href=\"http://expand.rs\" target=\"_blank\" title=\"http://expand.rs\">expand.rs</a> responsible for \"integrating the results back into AST\" basicallly, \"placeholder\" is a temporary AST node replaced with macro expansion result nodes<br>\n    libsyntax/ext/builer.rs - helper functions for building AST for built-in macros in libsyntax_ext (and user-defined syntactic plugins previously), can probably be moved into libsyntax_ext these days<br>\n    libsyntax/ext/proc_macro.rs + libsyntax/ext/proc_macro_server.rs - interfaces between the compiler and the stable <code>proc_macro</code> library, converting tokens and token streams between the two representations and sending them through C ABI<br>\n    libsyntax/ext/tt - implementation of <code>macro_rules</code>, turns <code>macro_rules</code> DSL into something with signature <code>Fn(TokenStream) -&gt; TokenStream</code> that can eat and produce tokens, @mark-i-m knows more about this<br>\nlibrustc_resolve/macros.rs - resolving macro paths, validating those resolutions, reporting various \"not found\"/\"found, but it's unstable\"/\"expected x, found y\" errors<br>\nlibrustc/hir/map/def_collector.rs + librustc_resolve/build_reduced_graph.rs - integrate an AST fragment freshly expanded from a macro into various parent/child structures like module hierarchy or \"definition paths\"</p>\n<p>Primary structures:<br>\nHygieneData - global piece of data containing hygiene and expansion info that can be accessed from any <code>Ident</code> without any context<br>\nExpnId - ID of a macro call or desugaring (and also expansion of that call/desugaring, depending on context)<br>\nExpnInfo/InternalExpnData - a subset of properties from both macro definition and macro call available through global data<br>\nSyntaxContext - ID of a chain of nested macro definitions (identified by <code>ExpnId</code>s)<br>\nSyntaxContextData - data associated with the given SyntaxContext, mostly a cache for results of filtering that chain in different ways<br>\nSpan - a code location + SyntaxContext<br>\nIdent - interned string (Symbol) + Span, i.e. a string with attached hygiene data<br>\nTokenStream - a collection of <code>TokenTree</code>s<br>\nTokenTree - a token (punctuation, identifier, or literal) or a delimited group (anything inside <code>()</code>/<code>[]</code>/<code>{}</code>)<br>\nSyntaxExtension - a lowered macro representation, contains its expander function transforming a tokenstream or AST into tokenstream or AST + some additional data like stability, or a list of unstable features allowed inside the macro.<br>\nSyntaxExtensionKind - expander functions may have several different signatures (take one token stream, or two, or a piece of AST, etc), this is an enum that lists them<br>\nProcMacro/TTMacroExpander/AttrProcMacro/MultiItemModifier - traits representing the expander signatures (TODO: change and rename the signatures into something more consistent)<br>\ntrait Resolver - a trait used to break crate dependencies (so resolver services can be used in libsyntax, despite librustc_resolve and pretty much everything else depending on libsyntax)<br>\nExtCtxt/ExpansionData - various intermediate data kept and used by expansion infra in the process of its work<br>\nAstFragment - a piece of AST that can be produced by a macro (may include multiple homogeneous AST nodes, like e.g. a list of items)<br>\nAnnotatable - a piece of AST that can be an attribute target, almost same thing as AstFragment except for types and patterns that can be produced by macros but cannot be annotated with attributes (TODO: Merge into AstFragment)<br>\ntrait MacResult - a \"polymorphic\" AST fragment, something that can turn into a different AstFragment depending on its context (aka AstFragmentKind - item, or expression, or pattern etc.)<br>\nInvocation/InvocationKind - a structure describing a macro call, these structures are collected by the expansion infra (InvocationCollector), queued, resolved, expanded when resolved, etc.</p>\n<p>Primary algorithms / actions:<br>\nTODO</p>",
        "id": 171633372,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563994901
    },
    {
        "content": "<p>Very useful <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 171633628,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563995092
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> Zulip doesn't have an indication of typing, so I'm not sure if you are waiting for me or not</p>",
        "id": 171633807,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563995248
    },
    {
        "content": "<p>The TODO part should be about how a crate transitions from the state \"macros exist as written in source\" to \"all macros are expanded\", but I didn't write it yet.</p>",
        "id": 171633816,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563995269
    },
    {
        "content": "<p>(That should probably better happen off-line.)</p>",
        "id": 171633895,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563995311
    },
    {
        "content": "<p>Now, if you have any questions?</p>",
        "id": 171633910,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563995328
    },
    {
        "content": "<p>Thanks :)</p>",
        "id": 171633941,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563995376
    },
    {
        "content": "<p>/me is still reading :P</p>",
        "id": 171634156,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563995552
    },
    {
        "content": "<p>Ok</p>",
        "id": 171634300,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563995692
    },
    {
        "content": "<p>So I guess my first question is about hygiene, since that remains the most mysterious to me... My understanding is that the parser outputs AST nodes, where each node has a <code>Span</code></p>",
        "id": 171634349,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563995744
    },
    {
        "content": "<p>In the absence of macros and desugaring, what does the syntax context of an AST node look like?</p>",
        "id": 171634438,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563995782
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span></p>",
        "id": 171634481,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563995800
    },
    {
        "content": "<p>Not each node, but many of them.<br>\nWhen a node is not macro-expanded, its context is <code>0</code>.</p>",
        "id": 171634510,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563995826
    },
    {
        "content": "<p>aka <code>SyntaxContext::empty()</code></p>",
        "id": 171634518,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563995837
    },
    {
        "content": "<p>it's a chain that consists of one expansion - expansion <code>0</code> aka <code>ExpnId::root</code>.</p>",
        "id": 171634572,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563995880
    },
    {
        "content": "<p>Do all expansions start at <code>root</code>?</p>",
        "id": 171634621,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563995898
    },
    {
        "content": "<p>Also, <code>SyntaxContext:empty()</code> is its own father.</p>",
        "id": 171634624,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563995899
    },
    {
        "content": "<p>Is this actually stored somewhere or is it a logical value?</p>",
        "id": 171634660,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563995941
    },
    {
        "content": "<p>All expansion hyerarchies (there are several of them) start at <code>ExpnId::root</code>.</p>",
        "id": 171634668,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563995945
    },
    {
        "content": "<p>Vectors in <code>HygieneData</code> has entries for both ctxt == 0 and expn_id == 0.</p>",
        "id": 171634706,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563995990
    },
    {
        "content": "<p>I don't think anyone looks into them much though.</p>",
        "id": 171634824,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563996066
    },
    {
        "content": "<p>Ok</p>",
        "id": 171634874,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563996109
    },
    {
        "content": "<p>Speaking of multiple hierarchies...</p>",
        "id": 171634875,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563996109
    },
    {
        "content": "<p>Go ahead :)</p>",
        "id": 171634974,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563996157
    },
    {
        "content": "<p>One is parent (expn_id1) -&gt; parent(expn_id2) -&gt; ...</p>",
        "id": 171635017,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563996186
    },
    {
        "content": "<p>This is the order in which macros are expanded.</p>",
        "id": 171635070,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563996230
    },
    {
        "content": "<p>Well.</p>",
        "id": 171635082,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563996240
    },
    {
        "content": "<p>When we are expanding one macro another macro is revealed in its output.</p>",
        "id": 171635146,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563996271
    },
    {
        "content": "<p>That's the parent-child relation in this hierarchy.</p>",
        "id": 171635168,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563996284
    },
    {
        "content": "<p><code>InternalExpnData::parent</code> is the child-&gt;parent link.</p>",
        "id": 171635218,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563996316
    },
    {
        "content": "<p>So in the above chain expn_id1 is the child?</p>",
        "id": 171635244,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563996348
    },
    {
        "content": "<p>Yes.</p>",
        "id": 171635295,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563996366
    },
    {
        "content": "<p>The second one is parent (SyntaxContext1) -&gt; parent(SyntaxContext2) -&gt; ...</p>",
        "id": 171635300,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563996376
    },
    {
        "content": "<p>This is about nested macro <em>definitions</em>.<br>\nWhen we are expanding one macro another macro definition is revealed in its output.</p>",
        "id": 171635323,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563996411
    },
    {
        "content": "<p><code>SyntaxContextData::parent</code> is the child-&gt;parent link here.</p>",
        "id": 171635341,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563996437
    },
    {
        "content": "<p>So, <code>SyntaxContext</code> is the whole chain in this hierarchy, and <code>outer_expn</code>s are individual elements in the chain.</p>",
        "id": 171635445,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563996514
    },
    {
        "content": "<p>So for example, suppose I have the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"o\">!</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Then AST nodes that are finally generated would have parent(expn_id_println) -&gt; parent(expn_id_foo), right?</p>",
        "id": 171635551,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563996602
    },
    {
        "content": "<p>Pretty common construction (at least it was, before refactorings) is <code>SyntaxContext::empty().apply_mark(expn_id)</code>, which means...</p>",
        "id": 171635569,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563996612
    },
    {
        "content": "<blockquote>\n<p>Then AST nodes that are finally generated would have parent(expn_id_println) -&gt; parent(expn_id_foo), right?</p>\n</blockquote>\n<p>Yes.</p>",
        "id": 171635594,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563996643
    },
    {
        "content": "<blockquote>\n<p>and outer_expns are individual elements in the chain.</p>\n</blockquote>\n<p>Sorry, what is <code>outer_expns</code>?</p>",
        "id": 171635616,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563996662
    },
    {
        "content": "<p><code>SyntaxContextData::outer_expn</code></p>",
        "id": 171635631,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563996680
    },
    {
        "content": "<p>Thanks :) Please continue</p>",
        "id": 171635641,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563996695
    },
    {
        "content": "<p>...which means a token produced by a built-in macro (which is defined in the root effectively).</p>",
        "id": 171635730,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563996758
    },
    {
        "content": "<p>Where does the <code>expn_id</code> come from?</p>",
        "id": 171635764,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563996807
    },
    {
        "content": "<p>Or a stable proc macro, which are always considered to be defined in the root because they are always cross-crate, and we don't have the cross-crate hygiene implemented, ha-ha.</p>",
        "id": 171635774,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563996813
    },
    {
        "content": "<blockquote>\n<p>Where does the expn_id come from?</p>\n</blockquote>",
        "id": 171635783,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563996828
    },
    {
        "content": "<p>ID of the built-in macro call like <code>line!()</code>.</p>",
        "id": 171635843,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563996852
    },
    {
        "content": "<p>Assigned continuously from 0 to N as soon as we discover new macro calls.</p>",
        "id": 171635873,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563996896
    },
    {
        "content": "<p>Sorry, I didn't quite understand. Do you mean that only built-in macros receive continuous IDs?</p>",
        "id": 171636013,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563996989
    },
    {
        "content": "<p>So, the second hierarchy has a catch - the context transplantation hack - <a href=\"https://github.com/rust-lang/rust/pull/51762#issuecomment-401400732\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/51762#issuecomment-401400732\">https://github.com/rust-lang/rust/pull/51762#issuecomment-401400732</a>.</p>",
        "id": 171636042,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563997015
    },
    {
        "content": "<blockquote>\n<p>Do you mean that only built-in macros receive continuous IDs?</p>\n</blockquote>",
        "id": 171636058,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563997027
    },
    {
        "content": "<p>No, all macro calls receive ID.</p>",
        "id": 171636065,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563997037
    },
    {
        "content": "<p>Built-ins have the typical pattern <code>SyntaxContext::empty().apply_mark(expn_id)</code> for syntax contexts produced by them.</p>",
        "id": 171636100,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563997079
    },
    {
        "content": "<p>I see, but this pattern is only used for built-ins, right?</p>",
        "id": 171636363,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563997270
    },
    {
        "content": "<p>And also all stable proc macros, see the comments above.</p>",
        "id": 171636506,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563997391
    },
    {
        "content": "<p>Got it</p>",
        "id": 171636531,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563997410
    },
    {
        "content": "<p>The third hierarchy is call-site hierarchy.</p>",
        "id": 171636587,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563997443
    },
    {
        "content": "<p>If <code>foo!(bar!(ident))</code> expands into <code>ident</code></p>",
        "id": 171636674,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563997507
    },
    {
        "content": "<p>then hierarchy 1 is root -&gt; foo -&gt; bar -&gt; ident</p>",
        "id": 171636728,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563997551
    },
    {
        "content": "<p>but hierarchy 3 is root -&gt; ident</p>",
        "id": 171636798,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563997580
    },
    {
        "content": "<p><code>ExpnInfo::call_site</code> is the child-parent link in this case.</p>",
        "id": 171636885,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563997651
    },
    {
        "content": "<p>When we expand, do we expand <code>foo</code> first or <code>bar</code>? Why is there a hierarchy 1 here? Is that <code>foo</code> expands first and it expands to something that contains <code>bar!(ident)</code>?</p>",
        "id": 171637061,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563997764
    },
    {
        "content": "<p>Ah, yes, let's assume both foo and bar are identity macros.</p>",
        "id": 171637097,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563997801
    },
    {
        "content": "<p>Then <code>foo!(bar!(ident))</code> -&gt; expand -&gt; <code>bar!(ident)</code> -&gt; expand -&gt; <code>ident</code></p>",
        "id": 171637181,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563997839
    },
    {
        "content": "<p>If <code>bar</code> were expanded first, that would be eager expansion - <a href=\"https://github.com/rust-lang/rfcs/pull/2320\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2320\">https://github.com/rust-lang/rfcs/pull/2320</a>.</p>",
        "id": 171637259,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563997903
    },
    {
        "content": "<p>And after we expand only <code>foo!</code> presumably whatever intermediate state has heirarchy 1 of root-&gt;foo-&gt;(bar_ident), right?</p>",
        "id": 171637345,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563997948
    },
    {
        "content": "<p>(We have it hacked into some built-in macros, but not generally.)</p>",
        "id": 171637350,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563997955
    },
    {
        "content": "<blockquote>\n<p>And after we expand only foo! presumably whatever intermediate state has heirarchy 1 of root-&gt;foo-&gt;(bar_ident), right?</p>\n</blockquote>",
        "id": 171637373,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563997978
    },
    {
        "content": "<p>Yes.</p>",
        "id": 171637384,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563997980
    },
    {
        "content": "<p>Got it :)</p>",
        "id": 171637414,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563997997
    },
    {
        "content": "<p>It looks like we have ~5 minutes left. This has been very helpful already, but I also have more questions. Shall we try to schedule another meeting in the future?</p>",
        "id": 171637759,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563998209
    },
    {
        "content": "<p>Sure, why not.</p>",
        "id": 171637803,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563998239
    },
    {
        "content": "<p>A thread for offline questions-answers would be good too.</p>",
        "id": 171637927,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563998304
    },
    {
        "content": "<blockquote>\n<p>A thread for offline questions-answers would be good too.</p>\n</blockquote>\n<p>I don't mind using this thread, since it already has a lot of info in it. We also plan to summarize the info from this thread into the rustc-guide.</p>\n<blockquote>\n<p>Sure, why not.</p>\n</blockquote>\n<p>Unfortunately, I'm unavailable for a few weeks. Would August 21-ish work for you (and <span class=\"user-group-mention\" data-user-group-id=\"1380\">@WG-learning</span> )?</p>",
        "id": 171638181,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563998494
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> Thanks very much for your time and knowledge!</p>",
        "id": 171638198,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563998516
    },
    {
        "content": "<p>One last question: are there more hierarchies?</p>",
        "id": 171638257,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563998543
    },
    {
        "content": "<p>Not that I know of.<br>\nThree + the context transplantation hack is already more complex than I'd like.</p>",
        "id": 171638339,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563998619
    },
    {
        "content": "<p>Yes, one wonders what it would be like if one also had to think about eager expansion...</p>",
        "id": 171638438,
        "sender_full_name": "mark-i-m",
        "timestamp": 1563998668
    },
    {
        "content": "<p>sorry but I couldn't follow that much today, will read it when I have some time later</p>",
        "id": 171638888,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1563998995
    },
    {
        "content": "<p>btw <a href=\"https://github.com/rust-lang/rustc-guide/issues/398\" target=\"_blank\" title=\"https://github.com/rust-lang/rustc-guide/issues/398\">https://github.com/rust-lang/rustc-guide/issues/398</a></p>",
        "id": 171638891,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1563998997
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> Would 7pm UTC on August 21 work for a followup?</p>",
        "id": 172622866,
        "sender_full_name": "mark-i-m",
        "timestamp": 1565121135
    },
    {
        "content": "<p>Tentatively yes.</p>",
        "id": 172625015,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1565122894
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> <span class=\"user-group-mention\" data-user-group-id=\"1380\">@WG-learning</span>  Does this still work for everyone?</p>",
        "id": 173402443,
        "sender_full_name": "mark-i-m",
        "timestamp": 1565985038
    },
    {
        "content": "<p>August 21 is still ok.</p>",
        "id": 173432762,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566030312
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1380\">@WG-learning</span> <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> We will start in ~30min</p>",
        "id": 173820204,
        "sender_full_name": "mark-i-m",
        "timestamp": 1566412229
    },
    {
        "content": "<p>Oh.<br>\nThanks for the reminder, I forgot about this entirely.</p>",
        "id": 173821022,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566412806
    },
    {
        "content": "<p>Hello!</p>",
        "id": 173822673,
        "sender_full_name": "mark-i-m",
        "timestamp": 1566414009
    },
    {
        "content": "<p>(I'll be here in a couple of minutes.)</p>",
        "id": 173822718,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566414051
    },
    {
        "content": "<p>Ok, I'm here.</p>",
        "id": 173823107,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566414365
    },
    {
        "content": "<p>Hi :)</p>",
        "id": 173823113,
        "sender_full_name": "mark-i-m",
        "timestamp": 1566414377
    },
    {
        "content": "<p>Hi.</p>",
        "id": 173823123,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566414388
    },
    {
        "content": "<p>so last time, we talked about the 3 context heirarchies</p>",
        "id": 173823126,
        "sender_full_name": "mark-i-m",
        "timestamp": 1566414395
    },
    {
        "content": "<p>Right.</p>",
        "id": 173823140,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566414412
    },
    {
        "content": "<p>Was there anything you wanted to add to that? If not, I think it would be good to get a big-picture... Given some piece of rust code, how do we get to the point where things are expanded and hygiene context is computed?</p>",
        "id": 173823262,
        "sender_full_name": "mark-i-m",
        "timestamp": 1566414517
    },
    {
        "content": "<p>(I'm assuming that hygiene info is computed as we expand stuff, since I don't think you can discover it beforehand)</p>",
        "id": 173823288,
        "sender_full_name": "mark-i-m",
        "timestamp": 1566414545
    },
    {
        "content": "<p>Ok, let's move from hygiene to expansion.</p>",
        "id": 173823317,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566414593
    },
    {
        "content": "<p>Especially given that I don't remember the specific hygiene algorithms like <code>adjust</code> in detail.</p>",
        "id": 173823387,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566414633
    },
    {
        "content": "<blockquote>\n<p>Given some piece of rust code, how do we get to the point where things are expanded </p>\n</blockquote>\n<p>So, first of all, the \"some piece of rust code\" is the whole crate.</p>",
        "id": 173823457,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566414693
    },
    {
        "content": "<p>Just to confirm, the algorithms are well-encapsulated, right? Like a function or a struct as opposed to a bunch of conventions distributed across the codebase?</p>",
        "id": 173823472,
        "sender_full_name": "mark-i-m",
        "timestamp": 1566414708
    },
    {
        "content": "<p>We run <code>fully_expand_fragment</code> in it.</p>",
        "id": 173823474,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566414711
    },
    {
        "content": "<blockquote>\n<p>Just to confirm, the algorithms are well-encapsulated, right?</p>\n</blockquote>\n<p>Yes, the algorithmic parts are entirely inside <code>hygiene.rs</code>.</p>",
        "id": 173823555,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566414753
    },
    {
        "content": "<p>Ok, some are in <code>fn resolve_crate_root</code>, but those are hacks.</p>",
        "id": 173823600,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566414790
    },
    {
        "content": "<p>(Continuing about expansion.)<br>\nIf <code>fully_expand_fragment</code> is run <em>not</em> on a whole crate, it means that we are performing eager expansion.</p>",
        "id": 173823690,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566414853
    },
    {
        "content": "<p>Eager expansion is done for arguments of some built-in macros that expect literals.</p>",
        "id": 173823731,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566414903
    },
    {
        "content": "<p>It generally performs a subset of actions performed by the non-eager expansion.</p>",
        "id": 173823747,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566414928
    },
    {
        "content": "<p>So, I'll talk about non-eager expansion for now.</p>",
        "id": 173823760,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566414947
    },
    {
        "content": "<p>Eager expansion is not exposed as a language feature, right? i.e. it is not possible for me to write an eager macro?</p>",
        "id": 173823887,
        "sender_full_name": "mark-i-m",
        "timestamp": 1566415030
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/53778#issuecomment-419224049\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53778#issuecomment-419224049\">https://github.com/rust-lang/rust/pull/53778#issuecomment-419224049</a><br>\n(vvv The link is explained below vvv )</p>",
        "id": 173823902,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566415042
    },
    {
        "content": "<blockquote>\n<p>Eager expansion is not exposed as a language feature, right? i.e. it is not possible for me to write an eager macro?</p>\n</blockquote>\n<p>Yes, it's entirely an ability of some built-in macros.</p>",
        "id": 173823937,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566415073
    },
    {
        "content": "<p>Not exposed for general use.</p>",
        "id": 173823985,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566415083
    },
    {
        "content": "<p><code>fully_expand_fragment</code> works in iterations.</p>",
        "id": 173824032,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566415117
    },
    {
        "content": "<p>Iterations looks roughly like this:<br>\n- Resolve imports in our partially built crate as much as possible.<br>\n- Collect as many macro invocations as possible from our partially built crate (fn-like, attributes, derives) from the crate and add them to the queue.</p>",
        "id": 173824204,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566415262
    },
    {
        "content": "<ul>\n<li>Take a macro from the queue, and attempt to resolve it.</li>\n</ul>",
        "id": 173824260,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566415306
    },
    {
        "content": "<ul>\n<li>If it's resolved - run its expander function that consumes tokens or AST and produces tokens or AST (depending on the macro kind).</li>\n</ul>",
        "id": 173824335,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566415362
    },
    {
        "content": "<ul>\n<li>(If it's not resolved, then put it back into the queue.)</li>\n</ul>",
        "id": 173824359,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566415385
    },
    {
        "content": "<p>^^^ That's where we fill in the hygiene data associated with <code>ExpnId</code>s.</p>",
        "id": 173824386,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566415419
    },
    {
        "content": "<p>When we put it back in the queue?</p>",
        "id": 173824472,
        "sender_full_name": "mark-i-m",
        "timestamp": 1566415461
    },
    {
        "content": "<p>or do you mean the collect step in general?</p>",
        "id": 173824556,
        "sender_full_name": "mark-i-m",
        "timestamp": 1566415512
    },
    {
        "content": "<p>Once we resolved the macro call to the macro definition we know everything about the macro and can call <code>set_expn_data</code> to fill in its properties in the global data.</p>",
        "id": 173824567,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566415520
    },
    {
        "content": "<p>I mean, immediately after successful resolution.</p>",
        "id": 173824592,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566415545
    },
    {
        "content": "<p>That's the first part of hygiene data, the second one is associated with <code>SyntaxContext</code> rather than with <code>ExpnId</code>, it's filled in later during expansion.</p>",
        "id": 173824689,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566415605
    },
    {
        "content": "<p>So, after we run the macro's expander function and got a piece of AST (or got tokens and parsed them into a piece of AST) we need to integrate that piece of AST into the big existing partially built AST.</p>",
        "id": 173824858,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566415705
    },
    {
        "content": "<p>This integration is a really important step where the next things happen:<br>\n- <code>NodeId</code>s are assigned.</p>",
        "id": 173824949,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566415786
    },
    {
        "content": "<ul>\n<li>\"def paths\"s and their IDs (<code>DefId</code>s) are created</li>\n</ul>",
        "id": 173825044,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566415834
    },
    {
        "content": "<ul>\n<li>Names are put into modules from the resolver point of view.</li>\n</ul>",
        "id": 173825132,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566415890
    },
    {
        "content": "<p>So, we are basically turning some vague token-like mass into proper set in stone hierarhical AST and side tables.</p>",
        "id": 173825230,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566415947
    },
    {
        "content": "<p>Where exactly this happens - <code>NodeId</code>s are assigned by <code>InvocationCollector</code> (which also collects new macro calls from this new AST piece and adds them to the queue), <code>DefId</code>s are created by <code>DefCollector</code>, and modules are filled by <code>BuildReducedGraphVisitor</code>.</p>",
        "id": 173825403,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566416089
    },
    {
        "content": "<p>These three passes run one after another on every AST fragment freshly expanded from a macro.</p>",
        "id": 173825457,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566416130
    },
    {
        "content": "<p>After expanding a single macro and integrating its output we again try to resolve all imports in the crate, and then return to the big queue processing loop and pick up the next macro.</p>",
        "id": 173825618,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566416262
    },
    {
        "content": "<p>Repeat until there's no more macros.</p>",
        "id": 173825689,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566416287
    },
    {
        "content": "<hr>",
        "id": 173825724,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566416326
    },
    {
        "content": "<p>The integration step is where we would get parser errors too right?</p>",
        "id": 173825737,
        "sender_full_name": "mark-i-m",
        "timestamp": 1566416336
    },
    {
        "content": "<p>Also, when do we know definitively that resolution has failed for particular ident?</p>",
        "id": 173825781,
        "sender_full_name": "mark-i-m",
        "timestamp": 1566416374
    },
    {
        "content": "<blockquote>\n<p>The integration step is where we would get parser errors too right?</p>\n</blockquote>\n<p>Yes, if the macro produced tokens (rather than AST directly) and we had to parse them.</p>",
        "id": 173825806,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566416391
    },
    {
        "content": "<blockquote>\n<p>when do we know definitively that resolution has failed for particular ident?</p>\n</blockquote>\n<p>So, ident is looked up in a number of scopes during resolution.<br>\nFrom closest like the current block or module, to far away like preludes or built-in types.</p>",
        "id": 173826005,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566416525
    },
    {
        "content": "<p>If lookup is certainly failed in <em>all</em> of the scopes, then it's certainly failed.</p>",
        "id": 173826038,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566416558
    },
    {
        "content": "<p>This is after all expansions and integrations are done, right?</p>",
        "id": 173826082,
        "sender_full_name": "mark-i-m",
        "timestamp": 1566416605
    },
    {
        "content": "<p>\"Certainly\" is determined differently for different scopes, e.g. for a module scope it means no unexpanded macros and no unresolved glob imports in that module.</p>",
        "id": 173826091,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566416614
    },
    {
        "content": "<blockquote>\n<p>This is after all expansions and integrations are done, right?</p>\n</blockquote>\n<p>For macro and import names this happens <em>during</em> expansions and integrations.</p>",
        "id": 173826164,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566416666
    },
    {
        "content": "<p>Makes sense</p>",
        "id": 173826190,
        "sender_full_name": "mark-i-m",
        "timestamp": 1566416703
    },
    {
        "content": "<p>For all other names we certainly know whether a name is resolved successfully or not on the first attempt, because no new names can appear.</p>",
        "id": 173826197,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566416712
    },
    {
        "content": "<p>(They are resolved in a later pass, see <code>librustc_resolve/late.rs</code>.)</p>",
        "id": 173826220,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566416735
    },
    {
        "content": "<p>And if at the end of the iteration, there are still things in the queue that can't be resolve, this represents an error, right?</p>",
        "id": 173826233,
        "sender_full_name": "mark-i-m",
        "timestamp": 1566416757
    },
    {
        "content": "<p>i.e. an undefined macro?</p>",
        "id": 173826285,
        "sender_full_name": "mark-i-m",
        "timestamp": 1566416772
    },
    {
        "content": "<p>Yes, if we make no progress during an iteration, then we are stuck and that state represent an error.</p>",
        "id": 173826302,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566416799
    },
    {
        "content": "<p>We attempt to recover though, using dummies expanding into nothing or <code>ExprKind::Err</code> or something like that for unresolved macros.</p>",
        "id": 173826349,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566416849
    },
    {
        "content": "<p>This is for the purposes of diagnostics, though, right?</p>",
        "id": 173826433,
        "sender_full_name": "mark-i-m",
        "timestamp": 1566416896
    },
    {
        "content": "<p>But if we are going through recovery, then compilation must result in an error anyway.</p>",
        "id": 173826452,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566416921
    },
    {
        "content": "<p>Yes, that's for diagnostics, without recovery we would stuck at the first unresolved macro or import.</p>",
        "id": 173826479,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566416945
    },
    {
        "content": "<hr>\n<p>So, about the <code>SyntaxContext</code> hygiene...</p>",
        "id": 173826619,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566417042
    },
    {
        "content": "<p>New syntax contexts are created during macro expansion.</p>",
        "id": 173826662,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566417095
    },
    {
        "content": "<p>If the token had context <code>X</code> before being produced by a macro, e.g. here <code>ident</code> has context <code>SyntaxContext::root()</code>:</p>",
        "id": 173826778,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566417184
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kr\">macro</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ident</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 173826796,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566417201
    },
    {
        "content": "<p>, then after being produced by the macro it has context <code>X -&gt; macro_id</code>.</p>",
        "id": 173826903,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566417256
    },
    {
        "content": "<p>I.e. our <code>ident</code> has context <code>ROOT -&gt; id(m)</code> after it's produced by <code>m</code>.</p>",
        "id": 173826991,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566417339
    },
    {
        "content": "<p>The \"chaining operator\" <code>-&gt;</code> is <code>apply_mark</code> in compiler code.</p>",
        "id": 173827021,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566417362
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kr\">macro</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kr\">macro</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ident</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 173827119,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566417424
    },
    {
        "content": "<p>In this example the <code>ident</code> has context <code>ROOT</code> originally, then <code>ROOT -&gt; id(m)</code>, then <code>ROOT -&gt; id(m) -&gt; id(n)</code>.</p>",
        "id": 173827219,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566417488
    },
    {
        "content": "<p>Note that these chains are <em>not</em> entirely determined by their last element, in other words <code>ExpnId</code> is not isomorphic to <code>SyntaxCtxt</code>.</p>",
        "id": 173827379,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566417612
    },
    {
        "content": "<p>Couterexample:</p>",
        "id": 173827401,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566417623
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kr\">macro</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"p\">(</span><span class=\"cp\">$i</span>: <span class=\"nc\">ident</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kr\">macro</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"cp\">$i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">m</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 173827464,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566417706
    },
    {
        "content": "<p><code>foo</code> has context <code>ROOT -&gt; id(n)</code> and <code>bar</code> has context <code>ROOT -&gt; id(m) -&gt; id(n)</code> after all the expansions.</p>",
        "id": 173827555,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566417771
    },
    {
        "content": "<p>Cool :)</p>",
        "id": 173827745,
        "sender_full_name": "mark-i-m",
        "timestamp": 1566417909
    },
    {
        "content": "<p>It looks like we are out of time</p>",
        "id": 173827761,
        "sender_full_name": "mark-i-m",
        "timestamp": 1566417929
    },
    {
        "content": "<p>Is there anything you wanted to add?</p>",
        "id": 173827776,
        "sender_full_name": "mark-i-m",
        "timestamp": 1566417947
    },
    {
        "content": "<p>We can schedule another meeting if you would like</p>",
        "id": 173827846,
        "sender_full_name": "mark-i-m",
        "timestamp": 1566417979
    },
    {
        "content": "<p>Yep, 23.06 already.<br>\nNo, I think this is an ok point to stop.</p>",
        "id": 173827901,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566418027
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 173827928,
        "sender_full_name": "mark-i-m",
        "timestamp": 1566418056
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> ! This was very helpful</p>",
        "id": 173827934,
        "sender_full_name": "mark-i-m",
        "timestamp": 1566418070
    },
    {
        "content": "<p>Yeah, we can schedule another one.<br>\nSo far it's been like 1 hour of meetings per month? Certainly not a big burden.</p>",
        "id": 173828035,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566418145
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> I'm finally getting around to turning this into a real chapter (sorry for taking so long!)... One question I had is why we have the three expansion hierarchies. Why do we need them? Can you give some examples of how the hygiene data from each hierarchy is used?</p>",
        "id": 195792583,
        "sender_full_name": "mark-i-m",
        "timestamp": 1588213450
    },
    {
        "content": "<p>Plan to read your PR over the weekend Mark. Will be in touch with any comments.  Look forward to learning more about this area.</p>",
        "id": 195962507,
        "sender_full_name": "Chris Simpkins",
        "timestamp": 1588341041
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198054\">@mark-i-m</span></p>",
        "id": 196186425,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1588602059
    },
    {
        "content": "<p>Well, for different many things.</p>",
        "id": 196186456,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1588602071
    },
    {
        "content": "<p><code>call_site</code> is mostly for diagnostics, macro backtraces are based on it.<br>\nIt's also used for the \"hygiene transplantation hack\".</p>",
        "id": 196186677,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1588602159
    },
    {
        "content": "<p><code>ExpnId::parent</code> is for tracking position of macros in AST and module structures, and also for introducing \"time\" into macro expansion to prevent paradoxes with macros expanded \"later\" affecting macros expanded \"earlier\".</p>",
        "id": 196187062,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1588602337
    },
    {
        "content": "<p><code>SyntaxContext::parent</code> I don't even remember why it may be needed in isolation, it's more important that the whole \"chain\" is unique.</p>",
        "id": 196187329,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1588602428
    },
    {
        "content": "<p>In general, I have most of this stuff out of cache and need to re-learn it every time I return to doing something with hygiene, so I can't help too much right now without spending hours (or perhaps days) on rereading the code.</p>",
        "id": 196187631,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1588602545
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> when you need to go over the code again it would be great if you do a brain dump here and the working group would probably be able to place that into the guide <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 196200167,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1588607426
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> Thanks! No worries. I'm just trying to fill out this PR: <a href=\"https://github.com/rust-lang/rustc-dev-guide/pull/683\" title=\"https://github.com/rust-lang/rustc-dev-guide/pull/683\">https://github.com/rust-lang/rustc-dev-guide/pull/683</a></p>",
        "id": 196205726,
        "sender_full_name": "mark-i-m",
        "timestamp": 1588609746
    }
]