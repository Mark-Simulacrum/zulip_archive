[
    {
        "content": "<p>It appears that work on <a href=\"https://github.com/rust-lang/rfcs/pull/2366\">https://github.com/rust-lang/rfcs/pull/2366</a> and <code>packed_simd</code> has stalled due to lack of roadmap commitment: <a href=\"https://github.com/rust-lang/packed_simd/issues/213#issuecomment-549282056\">https://github.com/rust-lang/packed_simd/issues/213#issuecomment-549282056</a> .</p>\n<p>How could we get consensus at least on the 128-bit part of <code>packed_simd</code> to become <code>std::simd</code>? The formulation of the types was waiting for const generics, but: 1) the user will use <code>u8x16</code>, <code>u16x8</code>, etc., anyway without caring about the lower-level formulation and 2) the types need to be zero-cost transmutable to <code>core::arch</code> types anyway, so low-level representation issues are already constrained by whatever has been shipped to stable under <code>core::arch</code>.</p>",
        "id": 201596344,
        "sender_full_name": "Henri Sivonen",
        "timestamp": 1592826967
    },
    {
        "content": "<p>As mentioned by email, I think the next step would be to file an MCP for a portable SIMD project group, to consider what the shape of portable SIMD in std should look like.</p>",
        "id": 201776949,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1592943528
    },
    {
        "content": "<p>This is likely something that crosses over between libs and lang, which should be doable given appropriate liaisons from both teams.</p>",
        "id": 201777007,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1592943567
    },
    {
        "content": "<p>I would also not take it as a given that the correct outcome will be to merge an unmodified version of any particular crate from the ecosystem.</p>",
        "id": 201777295,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1592943683
    },
    {
        "content": "<p>Before starting a group, I wanted a place for answering the questions that, from experience, I know will come up. To that end, I created a <a href=\"https://github.com/hsivonen/rfcs/blob/ppv/text/0000-ppv.md#faq\">fork of the closed RFC with a FAQ section added</a>.</p>\n<p>Due to the history of the <code>simd</code> crate and the <code>packed_simd</code> crate, I still wish to push for merging the existing crate instead of starting from starting discussion as if running code didn't already exist. <code>packed_simd</code> is already an attempt to start from scratch. We should value running code. With a task this large, otherwise, there's the risk of always getting almost there, the project getting abandoned and the next person redesigning the whole thing, getting almost there, and the cycle continuing. For this reason, I think it's important that effort is cumulative towards getting the running code into the standard library instead of starting from scratch again. (As a practical matter, I may have the bandwidth to advocate from <code>packed_simd</code>, but I for sure don't have the bandwidth to implement a different design.)</p>",
        "id": 201861577,
        "sender_full_name": "Henri Sivonen",
        "timestamp": 1593011980
    },
    {
        "content": "<p>I want to be clear about something here: it is <em>entirely possible</em> that the net result of the discussion will be to merge some form of <code>packed_simd</code> into <code>std</code>. The concern is that that cannot be the <em>starting point</em> of the discussion. We can't start the discussion of \"how do we solve this problem\" with \"we're going to solve it <em>this specific way</em> or not at all\".</p>",
        "id": 201881217,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593021157
    },
    {
        "content": "<p>We cannot just have a pro-forma discussion of \"how are we going to rubber-stamp this particular library without any actual discussion or changes\".</p>",
        "id": 201881259,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593021187
    },
    {
        "content": "<p>Also, nobody is saying \"let's redesign from scratch\".</p>",
        "id": 201881316,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593021229
    },
    {
        "content": "<p>I don't think it's unreasonable to make sure we're in agreement on the requirements and that we will have a solution that meets them. I don't think it's reasonable to decide in advance that the requirements are \"whatever this specific crate does because we're not changing it\".</p>",
        "id": 201881653,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593021384
    },
    {
        "content": "<p>I very much understand the scenario you're concerned about, and <em>I do not want to see that happen either</em>.</p>",
        "id": 201881733,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593021427
    },
    {
        "content": "<p>I don't think anyone does. Wasted effort is a terrible thing.</p>",
        "id": 201881772,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593021450
    },
    {
        "content": "<p>Also, portions of that FAQ are incredibly useful. There are a few answers in that FAQ that I would disagree with, but much of it I'm in complete agreement with.</p>",
        "id": 201881976,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593021537
    },
    {
        "content": "<p>In any case, I really don't want to litigate specific points of that FAQ point-by-point right now. My concern is that we need to be <em>able</em> to have that discussion, without the answers being \"no, because that's not what <code>packed_simd</code> currently does\".</p>",
        "id": 201882346,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593021712
    },
    {
        "content": "<p>To give just two specific examples:</p>\n<ul>\n<li>I'm not saying \"let's redesign our entire strategy for handling <code>cpuid</code>\". I'm saying \"let's have a strategy for being <em>able</em> to do runtime detection and calling pre-compiled functions with different target features, without runtime overhead inside inner loops\". That strategy might be as simple as some examples showing how to have two different functions compiled with different target features, inside which the portable SIMD methods will compile to different code (which may need some extra language support to make sure those methods get inlined two different ways), and then showing how to use a function pointer to decide which to call. I want to make sure something like that <em>works</em>, and that there isn't some fundamental blocker to doing so. That's an example of what I mean by talking through requirements.</li>\n<li>You said that \"When the target supports SIMD vectors of a given width, the portable SIMD types of that width is guaranteed to be zero-cost transmutable to the corresponding std::arch type.\". Given that, could we add <em>safe</em> <code>From</code> impls that allow a zero-cost safe <code>.into()</code>? Is there something preventing us from doing that? If not, adding that would substantially improve the usability of a combination of portable SIMD and target-specific SIMD.</li>\n</ul>",
        "id": 201883190,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593022153
    },
    {
        "content": "<p>These are exactly the kinds of things a project group could talk through and find solutions to. And they would not <em>necessarily</em> result in a massive amount of additional work or rework or rewriting.</p>",
        "id": 201883235,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593022185
    },
    {
        "content": "<p>FWIW, a few points of the FAQ I <em>enthusiastically</em> agree with, and very much want to see remain as requirements: yes, we should absolutely have shuffles even if not every platform uses them; yes, we should absolutely pick a layout that lets people rely on endianness; and I don't think we should wait on const generics either.</p>",
        "id": 201883849,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593022519
    },
    {
        "content": "<p>(That last one is a major reason why I want to make sure we have a good solution for runtime detection, because I think it'll be critical for people to know if their platform has 128/256/512-bit vectors and write algorithms accordingly.)</p>",
        "id": 201883992,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593022585
    },
    {
        "content": "<p>Also, regarding ABI, if the target supports SIMD vectors of a given width, and the portable SIMD types are guaranteed to be zero-cost transmutable, then making it possible to pass those in the ABI-defined vector registers seems valuable. That doesn't have to happen in the very first version, but having it as a requirement and putting it on the roadmap will help make sure we don't have a design decision that makes it impossible to do so.</p>",
        "id": 201884212,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593022713
    },
    {
        "content": "<p>I filed <a href=\"https://github.com/rust-lang/compiler-team/issues/321\">an MCP</a>, but I fail to find the Zulip stream that I'm supposed to post it to.</p>\n<p>Regarding <code>cpuid</code>-based run-time multiversioning, I think portable SIMD should not be blocked by it. It has applicability beyond SIMD to e.g. <code>popcnt</code>, so I think it should be a separate project on its own.</p>\n<p>I agree that adding <code>From</code> and <code>.into()</code> as appropriate makes sense. It's not essential for it to be part of the initial landing. It could be added later. Or at the initial landing. I'm not at all suggesting that nothing could be added to <code>packed_simd</code>. I'm interested in getting it landed after which for sure people will think of features to add.</p>",
        "id": 201958589,
        "sender_full_name": "Henri Sivonen",
        "timestamp": 1593085775
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"314350\">Henri Sivonen</span> <a href=\"#narrow/stream/196563-t-lang.2Fwg-meta/topic/Promoting.20packed_simd.20to.20std.3A.3Asimd/near/201958589\">said</a>:</p>\n<blockquote>\n<p>I filed <a href=\"https://github.com/rust-lang/compiler-team/issues/321\">an MCP</a>, but I fail to find the Zulip stream that I'm supposed to post it to.</p>\n</blockquote>\n<p><a href=\"#narrow/stream/233931-xxx/topic/Portable.20SIMD.20project.20group.20compiler-team.23321\">https://rust-lang.zulipchat.com/#narrow/stream/233931-xxx/topic/Portable.20SIMD.20project.20group.20compiler-team.23321</a></p>",
        "id": 201960500,
        "sender_full_name": "bjorn3",
        "timestamp": 1593087169
    },
    {
        "content": "<blockquote>\n<p>NEON is opt-in in the third two-bit case</p>\n</blockquote>\n<p>*thirty-two-bit</p>",
        "id": 201960816,
        "sender_full_name": "bjorn3",
        "timestamp": 1593087363
    },
    {
        "content": "<blockquote>\n<p>my bother<br>\n*why</p>\n</blockquote>",
        "id": 201960906,
        "sender_full_name": "bjorn3",
        "timestamp": 1593087437
    },
    {
        "content": "<p>Thanks for the link to the right stream. I fixed the errors you found. Thanks.</p>",
        "id": 201987436,
        "sender_full_name": "Henri Sivonen",
        "timestamp": 1593100165
    },
    {
        "content": "<p>heh, that should probably have been a lang-team MCP</p>",
        "id": 202025899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593119705
    },
    {
        "content": "<p>sorry <span class=\"user-mention\" data-user-id=\"314350\">@Henri Sivonen</span> :) that is, on this repo <a href=\"https://github.com/rust-lang/lang-team/\">https://github.com/rust-lang/lang-team/</a></p>",
        "id": 202025936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593119731
    },
    {
        "content": "<p>anyway, I think my take is that it is indeed a good idea to not start from a frame of \"just adopt this thing\" but I also wouldn't want to spend too much time relitigating everything, there is value in continuity</p>",
        "id": 202026041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593119776
    },
    {
        "content": "<p>That's a reasonable phrasing. I don't want to see anything relitigated, I just want to make sure there's alignment on the requirements and understanding of how to achieve those requirements with whatever plan we go with.</p>",
        "id": 202037815,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593127971
    },
    {
        "content": "<p>OK. I filed a <a href=\"#narrow/stream/243200-xxx/topic/Portable.20SIMD.20project.20group.20lang-team.2329\">lang team MCP</a>. Should I close the compiler one?</p>",
        "id": 202065517,
        "sender_full_name": "Henri Sivonen",
        "timestamp": 1593161090
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"314350\">@Henri Sivonen</span> yep</p>",
        "id": 202141089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593204778
    }
]