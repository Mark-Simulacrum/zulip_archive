[
    {
        "content": "<p><a href=\"https://github.com/rust-lang/stdarch/pull/803#issuecomment-540565592\" target=\"_blank\" title=\"https://github.com/rust-lang/stdarch/pull/803#issuecomment-540565592\">from here</a></p>",
        "id": 177809199,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1570713959
    },
    {
        "content": "<p>why you would do this?</p>",
        "id": 177809268,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1570713981
    },
    {
        "content": "<p>and why it would be an UB?</p>",
        "id": 177809278,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1570713991
    },
    {
        "content": "<p>it was just an example</p>",
        "id": 177831915,
        "sender_full_name": "gnzlbg",
        "timestamp": 1570727791
    },
    {
        "content": "<p>what i meant is that one can write code like that, that would invoke UB if it were executed</p>",
        "id": 177831937,
        "sender_full_name": "gnzlbg",
        "timestamp": 1570727809
    },
    {
        "content": "<p>but since <code>is_x86_feature_detected!</code> and <code>cfg(target_feature)</code> are \"consistent\" with each other,  such code will never be executed</p>",
        "id": 177831981,
        "sender_full_name": "gnzlbg",
        "timestamp": 1570727838
    },
    {
        "content": "<p>so as a consequence, right now, code like that never exhibits UB</p>",
        "id": 177831993,
        "sender_full_name": "gnzlbg",
        "timestamp": 1570727848
    },
    {
        "content": "<p>if we were to change <code>is_x86_..._detected</code> under miri to be inconsistent with <code>cfg(target_feature)</code>, then such UB could end up being executed</p>",
        "id": 177832125,
        "sender_full_name": "gnzlbg",
        "timestamp": 1570727928
    },
    {
        "content": "<p>this reminds me of the environment variable to override the macro results</p>",
        "id": 177833269,
        "sender_full_name": "gnzlbg",
        "timestamp": 1570728699
    },
    {
        "content": "<p>The assumption is that you can always disable a path even if you build such path</p>",
        "id": 178080950,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1571039507
    },
    {
        "content": "<p>the env override is the equivalent of shutting off the simd flag at kernel level or just executing the binary on a different cpu</p>",
        "id": 178081035,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1571039591
    },
    {
        "content": "<p>so if something would be a UB in that case there is a much worse problem than just miri being strange</p>",
        "id": 178081063,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1571039630
    },
    {
        "content": "<p>You may short-circuit <code>is_..._detected!</code> to always return false if <code>cfg(target_feature)</code> is false, but it may and should return true or false if <code>cfg(target_feature)</code> is true.</p>",
        "id": 178081229,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1571039767
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131070\">@Luca Barbato</span> if you compile a binary for a CPU that has some feature enable, the behavior is undefined if the CPU does not have the feature enabled</p>",
        "id": 178081352,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571039900
    },
    {
        "content": "<p>so what happens if I want to build a binary using a compiler that supports avx2 and then run it on a cpu that does not have avx2?</p>",
        "id": 178081385,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1571039962
    },
    {
        "content": "<p>so if the following assert fails, your program has exhibited UB the moment you started executing it</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">cfg</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">target_feature</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">&quot;X&quot;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">is_x86_feature_detected</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;X&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 178081390,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571039971
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131070\">@Luca Barbato</span> that's UB</p>",
        "id": 178081407,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571039997
    },
    {
        "content": "<p>we will optimize your whole program under the assumption that AVX2 is available</p>",
        "id": 178081459,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571040009
    },
    {
        "content": "<p>so we make no guarantees about what happens if you try to run such program on a CPU without AVX2</p>",
        "id": 178081467,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571040021
    },
    {
        "content": "<p>it is a problem</p>",
        "id": 178081477,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1571040028
    },
    {
        "content": "<p>anything can happen</p>",
        "id": 178081479,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571040028
    },
    {
        "content": "<p>that makes the runtime checks for cpu features not exactly useful</p>",
        "id": 178081496,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1571040047
    },
    {
        "content": "<p>you can compile your whole program without AVX2, and one function with AVX2</p>",
        "id": 178081527,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571040072
    },
    {
        "content": "<p>as long as you don't call that function on CPUs without AVX2, no UB happens</p>",
        "id": 178081537,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571040083
    },
    {
        "content": "<p>the run-time checks tell you whether calling that function is ok</p>",
        "id": 178081557,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571040095
    },
    {
        "content": "<p>but if you compiled your whole program for AVX2, then the run-time check returns always true</p>",
        "id": 178081582,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571040111
    },
    {
        "content": "<p>that's my expectation, I'm not sure I understand then \"compile your whole program for\"</p>",
        "id": 178081642,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1571040128
    },
    {
        "content": "<p>because we don't allow such programs running on CPUs without AVX2</p>",
        "id": 178081644,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571040130
    },
    {
        "content": "<p><code>-C target-feature=+avx2</code></p>",
        "id": 178081656,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571040139
    },
    {
        "content": "<p>The only way <code>cfg!(target_feature = \"avx2\")</code> returns true is if AVX2 is enabled for all functions in a program</p>",
        "id": 178081695,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571040180
    },
    {
        "content": "<p>this needs some additional documentation</p>",
        "id": 178081715,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1571040195
    },
    {
        "content": "<p>That's documented in the std::arch docs</p>",
        "id": 178081718,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571040205
    },
    {
        "content": "<p>and in the compiler docs</p>",
        "id": 178081720,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571040211
    },
    {
        "content": "<p>(the compiler user guide)</p>",
        "id": 178081727,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571040216
    },
    {
        "content": "<p><code>-C target-feature=+avx2</code> says the CPU this binary runs on has the AVX2 feature, so use it wherever you want</p>",
        "id": 178081775,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571040244
    },
    {
        "content": "<p><code>-C target-cpu=foo</code> says the CPU this binary runs on is <code>foo</code>, so use all features that <code>foo</code> has</p>",
        "id": 178081788,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571040265
    },
    {
        "content": "<p>The different target triples enable different base CPUs, features, etc.</p>",
        "id": 178081818,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571040302
    },
    {
        "content": "<p>This is not different than compiling a binary for <code>x86_64-unknown-linux-gnu</code>, and trying to run that binary on windows</p>",
        "id": 178081844,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571040321
    },
    {
        "content": "<p>we can't even guarantee that that fails</p>",
        "id": 178081867,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571040341
    },
    {
        "content": "<p>there are no checks or anything that we can reasonably insert to prevent the execution of such a program</p>",
        "id": 178081924,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571040373
    },
    {
        "content": "<p>those checks would be compiled for linux, and they would be meaningless on other systems</p>",
        "id": 178081943,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571040393
    },
    {
        "content": "<p>same for AVX2</p>",
        "id": 178081945,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571040395
    },
    {
        "content": "<p>My reading of <a href=\"https://doc.rust-lang.org/core/arch/index.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/core/arch/index.html\">this</a></p>",
        "id": 178081957,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1571040413
    },
    {
        "content": "<p>the compiler will generate code for those checks under the assumption that AVX2 is available</p>",
        "id": 178081961,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571040417
    },
    {
        "content": "<p>would be that you need to turn the target_feature on to build the code</p>",
        "id": 178081971,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1571040436
    },
    {
        "content": "<blockquote>\n<p>Statically enabling a feature is typically done with the -C target-feature or -C target-cpu flags to the compiler. <br>\nNote that when you compile a binary with a particular feature enabled it's important to ensure that you only run the binary on systems which satisfy the required feature set.</p>\n</blockquote>",
        "id": 178081990,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571040464
    },
    {
        "content": "<p>the question now is \"how do I build something that has avx2 code while running also on non-avx2 machines?\"</p>",
        "id": 178082078,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1571040535
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/reference/blob/master/src/behavior-considered-undefined.md\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/reference/blob/master/src/behavior-considered-undefined.md\">https://github.com/rust-lang-nursery/reference/blob/master/src/behavior-considered-undefined.md</a></p>\n<blockquote>\n<p>Behavior considered undefined: [...]<br>\nExecuting code compiled with platform features that the current platform does not support (see target_feature).</p>\n</blockquote>",
        "id": 178082084,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571040539
    },
    {
        "content": "<blockquote>\n<p>the question now is \"how do I build something that has avx2 code while running also on non-avx2 machines?\"</p>\n</blockquote>\n<p>You compile for a target that doesn't have AVX2, use <code>#[target_feature]</code> to enable AVX2 on the functions in which you want to allow the compiler to use it, and guard calls to those functions with <code>is_x86_feature_detected!(\"avx2\")</code></p>",
        "id": 178082136,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571040593
    },
    {
        "content": "<p><code>#[target_feature(enable = \"avx2\")]</code> vs `#[cfg(target_feature = \"avx2\")]</p>",
        "id": 178082137,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1571040595
    },
    {
        "content": "<p>this should be stressed ^^</p>",
        "id": 178082195,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1571040611
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/core/arch/index.html#dynamic-cpu-feature-detection\" target=\"_blank\" title=\"https://doc.rust-lang.org/core/arch/index.html#dynamic-cpu-feature-detection\">https://doc.rust-lang.org/core/arch/index.html#dynamic-cpu-feature-detection</a></p>",
        "id": 178082213,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571040636
    },
    {
        "content": "<blockquote>\n<p>Sometimes statically dispatching isn't quite what you want. Instead you might want to build a portable binary that runs across a variety of CPUs, but at runtime it selects the most optimized implementation available. This allows you to build a \"least common denominator\" binary which has certain sections more optimized for different CPUs.</p>\n<p>Taking our previous example from before, we're going to compile our binary without AVX2 support, but we'd like to enable it for just one function.</p>\n</blockquote>",
        "id": 178082234,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571040664
    },
    {
        "content": "<p>I guess that's enough and it is me not reading carefully</p>",
        "id": 178082343,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1571040738
    },
    {
        "content": "<p>having a <code>-C target_feature=miri</code> would be enough to avoid the UB?</p>",
        "id": 178082500,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1571040937
    },
    {
        "content": "<p>Well not really - cc <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span></p>",
        "id": 178083683,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571042049
    },
    {
        "content": "<p>The problem is that <code>miri</code> doesn't want to be a rust target</p>",
        "id": 178083701,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571042077
    },
    {
        "content": "<p>But instead emulate all targets supported by Rust</p>",
        "id": 178083720,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571042090
    },
    {
        "content": "<p>So if that's miris goal, the problem is that miri doesn't emulate run-time feature detection yet</p>",
        "id": 178083738,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571042107
    },
    {
        "content": "<p>nor the intrinsics</p>",
        "id": 178083751,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571042124
    },
    {
        "content": "<p>We could implement emulation of run-time feature detection for miri, e.g., by just returning the same value as <code>cfg!(target_feature)</code>, for example</p>",
        "id": 178083821,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571042167
    },
    {
        "content": "<p>and then we could implement all intrinsics that those features allow on miri</p>",
        "id": 178083829,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571042183
    },
    {
        "content": "<p>that's a titanic amount of work, but if <code>miri</code>s goal is to emulate the semantics of a target, then... that's what it has to do</p>",
        "id": 178083872,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571042240
    },
    {
        "content": "<p>at least, to be able to run code that uses these parts of the language</p>",
        "id": 178083878,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571042253
    },
    {
        "content": "<p>I'm tending more that this would be the right thing to do according to miris goal's, this means that all code using intrinsics would just abort on the first intrinsic, and until miri supports them such code can just <code>cfg!(miri)</code> its way out of the situation</p>",
        "id": 178083979,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571042347
    },
    {
        "content": "<p><code>is_x86_feature_detected!</code> can use <code>cfg!(miri)</code> to just return the value of <code>cfg!(target_feature)</code>, but it cannot returne <code>false</code> for a query for which <code>cfg!(target_feature)</code> returns <code>true</code> because that would be an error in the abstract machine</p>",
        "id": 178084094,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571042449
    },
    {
        "content": "<p>if that happens, the behavior is undefined, according to the reference, so doing so would be purportedly implementing <code>is_x86_feature_detected</code> to have UB under miri</p>",
        "id": 178084129,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571042479
    },
    {
        "content": "<p>So I think that the logic that you implemented <span class=\"user-mention\" data-user-id=\"131070\">@Luca Barbato</span> is indeed the correct one</p>",
        "id": 178084317,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571042642
    },
    {
        "content": "<p>I wonder if -C target_feature=-${foo} is doing what it should</p>",
        "id": 178084521,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1571042825
    },
    {
        "content": "<p>that _might_ solve the current problem and allows to flip on the cpu feature once it is supported</p>",
        "id": 178084554,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1571042869
    },
    {
        "content": "<p>Maybe we could expand the cfg(miri) comment with the information, that a consequence of returning <code>true</code> for the features enabled at compile-time is that branches on, e.g., <code>is_x86_feature_detected!(\"sse\")</code> will return <code>true</code> for  <code>miri</code> causing <code>miri</code> to try to execute SSE intrinsics, which will fail. Users that don't want this to happen should handle the <code>cfg!(miri)</code> case instead.</p>",
        "id": 178084565,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571042878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131070\">@Luca Barbato</span> <code>-C target-feature=-sse</code> disables SSE for the crates compiled with that flag</p>",
        "id": 178084614,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571042902
    },
    {
        "content": "<p>and in those crates, <code>cfg!(target_feature = \"sse\")</code> will return false</p>",
        "id": 178084625,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571042915
    },
    {
        "content": "<p>and so will <code>is_x86_feature_detected!</code></p>",
        "id": 178084642,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571042926
    },
    {
        "content": "<p>so it would short circuit correctly</p>",
        "id": 178084651,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1571042935
    },
    {
        "content": "<p>in general, libstd is not re-compiled with <code>-C target-features</code></p>",
        "id": 178084663,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571042944
    },
    {
        "content": "<p>so SSE will still be enabled for libstd, and that changes the Rust ABI of, e.g., which registers are used for passing floats</p>",
        "id": 178084686,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571042965
    },
    {
        "content": "<p>it would just need a tiny wrapper to turn off all the unsupported features</p>",
        "id": 178084688,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1571042966
    },
    {
        "content": "<p>so that would trigger UB of the form \"calling an function through an incompatible ABI declaration\"</p>",
        "id": 178084711,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571042999
    },
    {
        "content": "<p>If <code>miri</code> re-compiles <code>libstd</code></p>",
        "id": 178084774,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571043010
    },
    {
        "content": "<p>Then that would not have UB on miri though</p>",
        "id": 178084780,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571043019
    },
    {
        "content": "<p>So <code>miri</code> could, on x86_64, always call rustc with <code>-C target-feature=-mmx</code></p>",
        "id": 178084798,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571043046
    },
    {
        "content": "<p>to avoid many of the stable intrinsics</p>",
        "id": 178084808,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571043060
    },
    {
        "content": "<p>as long as it recompiles libstd with it</p>",
        "id": 178084823,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571043067
    },
    {
        "content": "<p>Maybe we could add a <code>-C target-cpu=miri</code> that does this ? cc <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span></p>",
        "id": 178084848,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571043092
    },
    {
        "content": "<p>sounds a path to consider to me</p>",
        "id": 178084852,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1571043099
    },
    {
        "content": "<p>I don't know if <code>-C target-feature=-mmx</code> would be enough, maybe one needs <code>-C target-feature=-mmx,-sse,-sse2,...,-avx512f,avx512foobarbaz</code></p>",
        "id": 178084945,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571043166
    },
    {
        "content": "<p>yep, thus why I suggested a wrapper :)</p>",
        "id": 178084956,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1571043184
    },
    {
        "content": "<p>or just the shorthand above</p>",
        "id": 178084971,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1571043200
    },
    {
        "content": "<p>miri would probably want to detect whether the user tries to use <code>-C target-feature</code> or <code>-C target-cpu</code> in their RUSTFLAGS or cargo config and error or warn</p>",
        "id": 178084984,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571043212
    },
    {
        "content": "<p><code>=miri</code> -&gt; <code>=-all</code></p>",
        "id": 178084989,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1571043218
    },
    {
        "content": "<p>yeah</p>",
        "id": 178085006,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571043238
    },
    {
        "content": "<p>I'll open an issue on the miri repo</p>",
        "id": 178085078,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571043267
    }
]