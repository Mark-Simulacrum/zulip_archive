[
    {
        "content": "<p>Do we have any documentation/pattern/proc_macro already on what's the best way to write simd-specific variants?</p>",
        "id": 177036492,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1569920844
    },
    {
        "content": "<p>What do you mean by “variants”?</p>",
        "id": 177037511,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569921812
    },
    {
        "content": "<p>you have some function you can reimplement using arch-specific simd (or even assembly directly)</p>",
        "id": 177038645,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1569922711
    },
    {
        "content": "<p>you would like to select at runtime which one to use</p>",
        "id": 177038681,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1569922734
    },
    {
        "content": "<p>The students trying to add neon support in rav1e shown me that what I consider self-explaining and basic is not</p>",
        "id": 177038869,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1569922922
    },
    {
        "content": "<p>There are crates in <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> for doing that but the std arch docs should cover the rest, otherwise there is also the RFC</p>",
        "id": 177057042,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569938078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131070\">@Luca Barbato</span> cfg-if 0.1.10 recently got support so it works inside methods, you can also do runtime detection of course</p>",
        "id": 177070031,
        "sender_full_name": "Lokathor",
        "timestamp": 1569945921
    },
    {
        "content": "<p>Do you have other crates in mind?</p>",
        "id": 177073105,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1569947820
    },
    {
        "content": "<p>What you're using SIMD for greatly affects the sort of API you want to build.</p>\n<p>I recently released 0.1 of the <code>wide</code> crate which aims to have an f32x4 type that is as close as possible to being a drop-in replacement for normal f32. It supports all traits and methods that f32 does except for eq/ord. I'm honestly not sure how I'll handle those.</p>\n<p>You can just use intrinsics/asm and runtime detection, but runtime detecting has a small cost so usually you need to run your check once, do a fair amount of SIMD to make up for the cost of the check (not just 1 add or something), and then have fallbacks too and all that. I wouldn't do that myself. I've always stuck to compile time checks only</p>",
        "id": 177098571,
        "sender_full_name": "Lokathor",
        "timestamp": 1569964322
    },
    {
        "content": "<p>Also, if you use arrays of 4 and align it to 16 then _most_ of the work will be done for you by llvm</p>",
        "id": 177098628,
        "sender_full_name": "Lokathor",
        "timestamp": 1569964372
    },
    {
        "content": "<p>of course that's with optimizations on, you need to write it by hand if you want debug performance too</p>",
        "id": 177098665,
        "sender_full_name": "Lokathor",
        "timestamp": 1569964401
    },
    {
        "content": "<p>unfortunately it's kinda specific to the SIMD set you want. A neon oriented library will probably end up different from an sse based library</p>",
        "id": 177098795,
        "sender_full_name": "Lokathor",
        "timestamp": 1569964479
    },
    {
        "content": "<p>In my case I need to boost the dispatch part, not the writing part (we share asm code with another project).</p>",
        "id": 177137057,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1570011339
    },
    {
        "content": "<p>just gotta use std. Unfortunately, detecting it at runtime demands that you interface with the OS to handle all the edge cases properly. you can check the implementation of the <code>is_x86_feature_detected!</code> macro if you want to get into the details there.</p>",
        "id": 177304630,
        "sender_full_name": "Lokathor",
        "timestamp": 1570154295
    },
    {
        "content": "<p>that part is done, I'm thinking on make the whole experience more streamlined</p>",
        "id": 177461770,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1570369113
    },
    {
        "content": "<p>e.g. auto-populate/auto-generate impl blocks and provide facilities to instantiate the right variant to call around the code</p>",
        "id": 177461826,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1570369256
    },
    {
        "content": "<p>since currently the experience isn't better than the C-way of making a struct of fn, populate it and then call from the struct</p>",
        "id": 177461841,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1570369309
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131070\">@Luca Barbato</span> check out the “multiversion” crate</p>",
        "id": 177781569,
        "sender_full_name": "gnzlbg",
        "timestamp": 1570686874
    },
    {
        "content": "<p>That's quite similar to what I had in mind, I wanted to use attributes and impl blocks, this is probably even better :)</p>",
        "id": 177784156,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1570690561
    },
    {
        "content": "<p>(even if it is a bit overkill in the way it works... )</p>",
        "id": 177784478,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1570690937
    }
]