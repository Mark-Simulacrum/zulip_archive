[
    {
        "content": "<p>What would be the process for getting progress made on the <code>arm</code> and <code>aarch64</code> intrinsics?</p>\n<p>It seems that currently there's some of it in Nightly. However, the number of intrinsics available seems to be in the \"hundreds\" amount, not really in the \"thousands\" amount as one might expect if the full set of Neon was there.</p>\n<p>(1) short term, what's the process for adding more ARM intrinsics to Nightly?</p>\n<p>(2) long term, would T-libs want <em>all</em> of Neon fully set and working before stabilizing any of it, or would stabilizing groups of operations be preferred, or what's the story there?</p>",
        "id": 200310972,
        "sender_full_name": "Lokathor",
        "timestamp": 1591752410
    },
    {
        "content": "<p>The same question got asked about AVX512. The current stance is that we would like all of the base NEON intrinsics implemented before stabilizing it.</p>",
        "id": 200316378,
        "sender_full_name": "Amanieu",
        "timestamp": 1591759499
    },
    {
        "content": "<p>The process for adding intrinsics to nightly is to implement them in stdarch and then send a PR to bump the submodule in rust-lang/rust.</p>",
        "id": 200316396,
        "sender_full_name": "Amanieu",
        "timestamp": 1591759530
    },
    {
        "content": "<p>Ah, i found the issue for it buried on the last page: <a href=\"https://github.com/rust-lang/stdarch/issues/148\">https://github.com/rust-lang/stdarch/issues/148</a></p>",
        "id": 200317170,
        "sender_full_name": "Lokathor",
        "timestamp": 1591760798
    },
    {
        "content": "<p>Question: <em>how much</em> does one truly benefit from an intrinsic compared to a one-liner of inline-asm?</p>",
        "id": 200317184,
        "sender_full_name": "Lokathor",
        "timestamp": 1591760875
    },
    {
        "content": "<p>Constant propagation, better instruction scheduling.</p>",
        "id": 200319494,
        "sender_full_name": "Amanieu",
        "timestamp": 1591765027
    },
    {
        "content": "<p>Generally the compiler can optimize the code better.</p>",
        "id": 200319502,
        "sender_full_name": "Amanieu",
        "timestamp": 1591765059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> as the list of intrinsics grows, it seems like it will become a pain to have the LLVM extern declarations in one place and the actual function in another.</p>\n<p>Since each extern decl is used in just one place, would it be fine to just put the extern declaration <em>inside</em> the intrinsic that uses it? I seem to recall that's how some of the x86/x64 intrinsics were set up.</p>",
        "id": 204418927,
        "sender_full_name": "Lokathor",
        "timestamp": 1595250169
    },
    {
        "content": "<p>That's fine.</p>",
        "id": 204418994,
        "sender_full_name": "Amanieu",
        "timestamp": 1595250203
    }
]