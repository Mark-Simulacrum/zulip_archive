[
    {
        "content": "<p>Added some wording to the draft RFC around using Unpin with streams and generator syntax <a href=\"https://github.com/rust-lang/wg-async-foundations/pull/17\">https://github.com/rust-lang/wg-async-foundations/pull/17</a></p>",
        "id": 205966936,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1596578844
    },
    {
        "content": "<p>Gentle reminder on ^ (does anyone seen anything that would potentially block opening the RFC on rust-lang/rfcs?)</p>",
        "id": 206481789,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1597077054
    },
    {
        "content": "<p>Just opened up a new draft of the RFC - this one incorporating feedback from the lang team meeting a few weeks ago</p>",
        "id": 210053568,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1600112632
    },
    {
        "content": "<p>And it would help if I actually linked to it...https://github.com/rust-lang/wg-async-foundations/pull/18</p>",
        "id": 210054967,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1600113330
    },
    {
        "content": "<p>gah, forgot I already had a PR open</p>",
        "id": 210055060,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1600113363
    },
    {
        "content": "<p>merging them</p>",
        "id": 210055069,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1600113365
    },
    {
        "content": "<p>Done</p>",
        "id": 210056205,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1600113933
    },
    {
        "content": "<p>.https://github.com/rust-lang/wg-async-foundations/pull/18 is the latest draft!</p>",
        "id": 210056225,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1600113942
    },
    {
        "content": "<p>I just updated the RFC with the suggestions made by <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> last week</p>",
        "id": 211068035,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1600898780
    },
    {
        "content": "<p>@WG-async-foundations are there any objections to me opening up the formal stream RFC with the content in this pull request? <a href=\"https://github.com/rust-lang/wg-async-foundations/pull/18\">https://github.com/rust-lang/wg-async-foundations/pull/18</a></p>",
        "id": 211068081,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1600898822
    },
    {
        "content": "<p>I'd love to get the formal RFC moving</p>",
        "id": 211068097,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1600898830
    },
    {
        "content": "<p><a href=\"https://github.com/nellshamrell/wg-async-foundations/blob/update-async-draft/rfc-drafts/stream.md\">Rendered</a></p>",
        "id": 211068478,
        "sender_full_name": "tmandry",
        "timestamp": 1600899063
    },
    {
        "content": "<p>None from me! If it needs further edits and clarifications, those can always happen once it's up</p>",
        "id": 211068662,
        "sender_full_name": "tmandry",
        "timestamp": 1600899177
    },
    {
        "content": "<p>But we've poured a lot of effort into this and I think it looks great <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 211068844,
        "sender_full_name": "tmandry",
        "timestamp": 1600899269
    },
    {
        "content": "<p>Noticed a minor thing.. in the guide-level explanation it doesn't look like the <code>next</code> method is provided. If we gave it a body (possibly ellipsized), like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"c1\">// Convenience methods (covered later on in the RFC):</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Next</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span>: <span class=\"nb\">Unpin</span>\n    <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>it might be clearer</p>",
        "id": 211069112,
        "sender_full_name": "tmandry",
        "timestamp": 1600899427
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"225192\">@Nell Shamrell-Harrington</span> for all the work you've done on this</p>",
        "id": 211069298,
        "sender_full_name": "tmandry",
        "timestamp": 1600899552
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 211435644,
        "sender_full_name": "Sam Sartor",
        "timestamp": 1601242586
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"222520\">@Sam Sartor</span> - I'm going to go ahead and open this, but that would be a great question to ask on the RFC once it is open so the whole community can see it and weigh in :)</p>",
        "id": 211646438,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1601396834
    },
    {
        "content": "<p>RFC is live <a href=\"https://github.com/rust-lang/rfcs/pull/2996\">https://github.com/rust-lang/rfcs/pull/2996</a></p>",
        "id": 211650872,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1601398716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"225192\">@Nell Shamrell-Harrington</span> Josh mentioned in the thread that an <code>Iterator -&gt; Stream</code> utility might be a good addition in the future; this may be useful to mention under <code># future possibilities</code>. Would it be useful to submit a PR to the PR for this, or is it easier if you add it, or..? -- It's been a while since I've contributed to an existing PR haha</p>",
        "id": 211980614,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1601589193
    },
    {
        "content": "<p>Heh, I can go ahead and add it :)</p>",
        "id": 211983821,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1601591200
    },
    {
        "content": "<p>Done!</p>",
        "id": 211985384,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1601592257
    },
    {
        "content": "<p>Yay!</p>",
        "id": 212044050,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1601625905
    },
    {
        "content": "<p>Hello all! (I promise I have not completely disappeared!)</p>",
        "id": 217088621,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1605665794
    },
    {
        "content": "<p>I've updated the RFC with some of KodrAus's requests for addition (<a href=\"https://github.com/rust-lang/rfcs/pull/2996#issuecomment-725696389\">https://github.com/rust-lang/rfcs/pull/2996#issuecomment-725696389</a>) , including</p>\n<ul>\n<li>examples of how we expect Streams to be written and consumed (thank you to <span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts</span> for your PR to add Stream to the standard library - I was able to pull examples from there!)</li>\n<li>how unergonomic using a Stream without next would be</li>\n<li>inlining more of the discussion around why we require Self: Unpin in the next method</li>\n</ul>\n<p>There are a couple of points where I could use some help:</p>\n<ul>\n<li>why is relying on extension traits not sufficient with re: to streams?</li>\n<li>how does requiring Self:Unpin in the next method potentially affect adding for loops in the future?</li>\n</ul>",
        "id": 217088845,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1605666042
    },
    {
        "content": "<p>We've been working on this for so long, I'm really anxious to see it land!</p>",
        "id": 217088860,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1605666066
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"225192\">@Nell Shamrell-Harrington</span> can you elaborate what you mean by: \"Why is relying on extension traits not sufficient\"</p>",
        "id": 217089167,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1605666421
    },
    {
        "content": "<p>I'm assuming this is just about <code>next</code>? — I don't believe either <code>size_hint</code> or <code>poll_next</code> can be expressed as an extension — <code>size_hint</code> is expected to be overwritten which cannot be done because of the blanket impl on <code>Stream</code> prevents if from being manually implemented (which is required to override it)</p>",
        "id": 217089436,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1605666668
    },
    {
        "content": "<p>For <code>next</code>, it goes back to ergonomics.. it's probably going to be the most used method, so requiring importing an extension trait is not ideal</p>",
        "id": 217089759,
        "sender_full_name": "tmandry",
        "timestamp": 1605666987
    },
    {
        "content": "<blockquote>\n<p>how does requiring Self:Unpin in the next method potentially affect adding for loops in the future?</p>\n</blockquote>\n<p>I'd say it doesn't affect it very much. It remains the case that you need to have something be <code>Unpin</code> (possibly by pinning it!) before looping over it. We could make for loops always pin on the stack for you in the desugaring.</p>\n<p><code>Pin&lt;&amp;mut T&gt;: Unpin</code> for any <code>T</code>, so they can always satisfy the bound that way (by invoking <code>next</code> through the blanket Stream impl for Pin)</p>",
        "id": 217090125,
        "sender_full_name": "tmandry",
        "timestamp": 1605667359
    },
    {
        "content": "<p>Would you two mind mentioning those points in the RFC?</p>",
        "id": 217093288,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1605671139
    },
    {
        "content": "<p>My impression from this comment <a href=\"https://github.com/rust-lang/rfcs/pull/2996#issuecomment-725696389\">https://github.com/rust-lang/rfcs/pull/2996#issuecomment-725696389</a> was that accepting the RFC was blocked without incorporating answers to those questions in the RFC</p>",
        "id": 217093341,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1605671182
    },
    {
        "content": "<p>(mention in the comments on the RFC, that is)</p>",
        "id": 217093344,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1605671189
    },
    {
        "content": "<p>Done!</p>",
        "id": 217095203,
        "sender_full_name": "tmandry",
        "timestamp": 1605673629
    },
    {
        "content": "<p>ty!</p>",
        "id": 217171008,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1605721551
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> you read my mind on what I was going to ask for help responding to in the RFC :)</p>",
        "id": 218509104,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1606876763
    },
    {
        "content": "<p>ty!</p>",
        "id": 218509109,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1606876766
    },
    {
        "content": "<p>np :) I've been meaning to give it a final pass (doing now)</p>",
        "id": 218509170,
        "sender_full_name": "tmandry",
        "timestamp": 1606876825
    },
    {
        "content": "<p>Does this code example make sense for using Box::pin?</p>\n<div class=\"codehilite\"><pre><span></span><code>let stream = Box::pin(non_unpin_stream());\nwhile let Some(item) = stream.next().await {\n  ...\n}\n</code></pre></div>",
        "id": 218509528,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1606877224
    },
    {
        "content": "<p>yeah</p>",
        "id": 218509535,
        "sender_full_name": "tmandry",
        "timestamp": 1606877237
    },
    {
        "content": "<p>cool</p>",
        "id": 218509536,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1606877240
    },
    {
        "content": "<p>I will add that in</p>",
        "id": 218509538,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1606877243
    },
    {
        "content": "<p>only <code>pin_mut!</code> needs its own line</p>",
        "id": 218509541,
        "sender_full_name": "tmandry",
        "timestamp": 1606877249
    },
    {
        "content": "<p>cool!</p>",
        "id": 218509548,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1606877260
    },
    {
        "content": "<p>(and that's part of the futures crate, not std)</p>",
        "id": 218509549,
        "sender_full_name": "tmandry",
        "timestamp": 1606877265
    },
    {
        "content": "<p>pin_mut! is?</p>",
        "id": 218509555,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1606877277
    },
    {
        "content": "<p>yeah</p>",
        "id": 218509563,
        "sender_full_name": "tmandry",
        "timestamp": 1606877282
    },
    {
        "content": "<p>I see it as part of the pin_utils crate here <a href=\"https://docs.rs/pin-utils/0.1.0-alpha.4/pin_utils/macro.pin_mut.html\">https://docs.rs/pin-utils/0.1.0-alpha.4/pin_utils/macro.pin_mut.html</a></p>",
        "id": 218509626,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1606877342
    },
    {
        "content": "<p>(which futures might call)</p>",
        "id": 218509635,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1606877351
    },
    {
        "content": "<p>dagnammit</p>",
        "id": 218509642,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1606877370
    },
    {
        "content": "<p>yeah, it's part of that too</p>",
        "id": 218509645,
        "sender_full_name": "tmandry",
        "timestamp": 1606877372
    },
    {
        "content": "<p>confirmed :)</p>",
        "id": 218509649,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1606877377
    },
    {
        "content": "<p>even though it's not in std, I personally like to show it to emphasize that our safety abstractions aren't requiring anyone to allocate =)</p>",
        "id": 218509698,
        "sender_full_name": "tmandry",
        "timestamp": 1606877410
    },
    {
        "content": "<p>totes!</p>",
        "id": 218509704,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1606877420
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"225192\">@Nell Shamrell-Harrington</span> I don't know if you saw, I posted another round of comments last night (I reviewed each half separately)</p>",
        "id": 218634104,
        "sender_full_name": "tmandry",
        "timestamp": 1606950949
    },
    {
        "content": "<p>Yep! I'll address them when I am off work today :)</p>",
        "id": 218638538,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1606954015
    },
    {
        "content": "<p>OMG we are so close! <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> finally was able to address your comments today, we just have one that is waiting on Boat's confirmation</p>",
        "id": 218966909,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1607226014
    },
    {
        "content": "<p>Ok - all comment addressed in <a href=\"https://github.com/rust-lang/rfcs/pull/2996\">https://github.com/rust-lang/rfcs/pull/2996</a> - hope it gets approved now?</p>",
        "id": 219931419,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1608000136
    },
    {
        "content": "<p>ohhh, FCP started!</p>",
        "id": 220355140,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1608286683
    },
    {
        "content": "<p>Hi all. I have a few concerns about the current proposal for <code>Stream</code> that I've <a href=\"https://github.com/rust-lang/rfcs/pull/2996\">put up on the issue</a>, along with a proposal that would improve the usefulness of the trait and remove a glass ceiling on the efficiency of certain implementers.</p>",
        "id": 223125528,
        "sender_full_name": "Joshua Barretto",
        "timestamp": 1610979843
    },
    {
        "content": "<p>Understood, and I think those are valid concerns. Could others on the team weigh in as well? I'd like to gather more perspectives before drafting a change to the language of the RFC. At them moment, in order to keep the initial implementation as minimal as possible, I'm leaning toward somehow conveying that we don't recommend the use of streams with certain types of channels. I would really like more input, though.</p>",
        "id": 223186278,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1611030352
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"225192\">@Nell Shamrell-Harrington</span> I worry that this might make the initial implementation incompatible with future changes. If not in the easy way (compilation errors) then in the hard way (logic errors due to invariants not being upheld). Although I appreciate all of the work that has gone into this proposal so far, I don't think that in its current form it is insufficient to fulfill the needs that people expect of it, nor is it forward-compatible with a design that is.</p>",
        "id": 223236752,
        "sender_full_name": "Joshua Barretto",
        "timestamp": 1611068017
    },
    {
        "content": "<p>What could those future changes be?</p>",
        "id": 223237174,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1611068187
    }
]