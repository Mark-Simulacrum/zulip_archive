[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"250715\">@Joshua Barretto</span> -- I was reading your comments on the RFC (I'm catching up here) and I had a few questions. You wrote:</p>\n<blockquote>\n<p>This also means that there is no longer a natural duality between Stream and Iterator as the RFC claims.</p>\n</blockquote>\n<p>Just to check I understand, it is correct that this problem is specific to MPMC channels, right? (As <span class=\"user-mention\" data-user-id=\"295632\">@Diggsey</span> <a href=\"https://github.com/rust-lang/rfcs/pull/2996#issuecomment-763263104\">noted here</a>, for example).</p>\n<p>In the case of an MPMC <em>synchronous</em> channel, how does this work? You register interest when you call <code>next()</code> and de-register interest when <code>next()</code> returns an item?</p>",
        "id": 224224078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611771449
    },
    {
        "content": "<p>With a synchronous channel, you always have the guarantee that the thread will be woken up at the end of the waiting period (via unparking in most cases). There's no way to interrupt this process because threads cannot be externally panicked or anything like that (at least, not without obviously invalidating a bunch of invariants).</p>\n<p>With futures/streams, there's no such guarantee. Futures and streams are frequently polled partially and then dropped (or just forgotten about for a while). This is true for both, but it's more true for streams where items are commonly extracted one at a time with arbitrary delays between each item.</p>\n<p>This fact means that the future/stream must <em>always</em> be ready to never be polled again and this means that optimisations such as 'inboxes' (a location where channel senders can dump items for the receiver to pick up when it wakes) that persist between successive polls are not viable strategies in the async world, leading to less efficient channel implementations.</p>\n<p>This is not a problem that's <em>specific</em> to channels, but it is very visible with channels since they act as a shared pool.</p>\n<p>Futures are a little more resistant to this problem because they are <em>usually</em> dropped immediately after they stop being polled and so you can add your deregister logic in the <code>Drop</code> impl. This is not the case for streams though since they may often be left to lie around for a long time between successive polls for items.</p>\n<p>This 'can-be-dropped-whenever' behaviour of async code is also something that I don't believe is mentioned enough in documentation. It means that unsafe code <em>must</em> return the program to a safe state across all <code>await</code> points since it's an opportunity for the future to be arbitrarily dropped. I imagine that many users of async fail to properly accommodate for this fact when writing async code.</p>",
        "id": 224224968,
        "sender_full_name": "Joshua Barretto",
        "timestamp": 1611771777
    },
    {
        "content": "<p>I see.</p>",
        "id": 224227556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611772772
    },
    {
        "content": "<p>I'm not sure how much the \"usually\" part matters (i.e., for futures vs streams), but I do see the point you're raising there too.</p>",
        "id": 224230293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611773764
    },
    {
        "content": "<p>That said, it's not clear to me that (e.g.) adding in the calls you mentioned will work -- after all, the stream may be part of some other future or stream that <em>itself</em> is not going to be polled again, right?</p>",
        "id": 224230404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611773814
    },
    {
        "content": "<p>It seems like the problem is kind of \"recursive\", you ultimately need to propagate that information down</p>",
        "id": 224230461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611773839
    },
    {
        "content": "<p>Perhaps the point is that, in practice, it's a reasonable assumption to assume all futures will be polled again, but it's less true of streams</p>",
        "id": 224230495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611773855
    },
    {
        "content": "<p>Sound correct?</p>",
        "id": 224230560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611773879
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/249502-wg-async-foundations.2Fstream-trait-rfc/topic/start.2Fend.20polling/near/224230495\">said</a>:</p>\n<blockquote>\n<p>Perhaps the point is that, in practice, it's a reasonable assumption to assume all futures will be polled again, but it's less true of streams</p>\n</blockquote>\n<p>Yes, this is the crux of my point. In the case of streams, it isn't really a recursive issue if users/consumers of the stream (<code>for_each</code>, <code>next</code>, etc.) correctly call the start/stop methods (since their usages just decay to futures which we can sort of assume to have this 'poll-until-completion-or-immediately-drop' property. For this reason, I think there is utility in such methods.</p>",
        "id": 224233831,
        "sender_full_name": "Joshua Barretto",
        "timestamp": 1611775176
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"295632\">@Diggsey</span>, I think, mentioned starting a task to do some of this work.</p>",
        "id": 224243553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611779746
    },
    {
        "content": "<blockquote>\n<p>'inboxes' (a location where channel senders can dump items for the receiver to pick up when it wakes) that persist between successive polls are not viable strategies in the async world, leading to less efficient channel implementations.</p>\n</blockquote>\n<p>This is actually implemented in futures-intrusive mpmc channels (which can be  unbuffered). You are right that it's not as efficient as a synchronous channel, but this is mostly due to extra synchronization being required due to the fact that any async function can be cancelled at any point, which requires the need to unregister resources in an atomic/synchronized fashion</p>",
        "id": 224254957,
        "sender_full_name": "Matthias247",
        "timestamp": 1611785083
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204219\">@Matthias247</span> is the strategy there that messages get moved to another inbox when a future is cancelled?</p>",
        "id": 224311701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611832179
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> the strategy is that the value stays inside the senders state („inbox“) - which is actually the send <code>Future</code> - and gets only moved when a receiver polls. Since this operation can’t be aborted after the poll finished, the value is guaranteed to either be transmitted to stay inside the send future. If sending is aborted the value can be extracted from the send future.</p>",
        "id": 224437493,
        "sender_full_name": "Matthias247",
        "timestamp": 1611904608
    }
]