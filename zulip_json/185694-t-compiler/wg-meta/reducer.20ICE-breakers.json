[
    {
        "content": "<p>The other idea we had was to have a ICE-breaker around bisecting and reducing -- we need a good name for this -- but I definitely think we should do it. Leaving a thread here.</p>",
        "id": 180740395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573744935
    },
    {
        "content": "<p>We did have an issue on it, I think</p>",
        "id": 180740403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573744938
    },
    {
        "content": "<p>boy I <em>really</em> better finish writing the blog post I started drafting on this subject (on reducing in particular)</p>",
        "id": 180762265,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573758185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> btw, what would the bisecting and reducing wg would be about exactly?</p>",
        "id": 180762739,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1573758480
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> sometimes we have a bug report</p>",
        "id": 180762802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573758493
    },
    {
        "content": "<p>that is like \"something crashed in my repo\"</p>",
        "id": 180762810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573758497
    },
    {
        "content": "<p>the idea would be to have people who just try to turn that from \"something crashed\" to</p>",
        "id": 180762827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573758507
    },
    {
        "content": "<p>\"here is a self-contained playground example that broke because of PR <a href=\"https://github.com/rust-lang/rust/issues/123\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/123\">#123</a>\"</p>",
        "id": 180762851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573758517
    },
    {
        "content": "<p>I see</p>",
        "id": 180762951,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1573758574
    },
    {
        "content": "<p>So I think an alternative could be to try and have a dedicated set of people (sort of like a standard working group) oriented around this thing, but I think I'd sort of prefer the \"just ping a bunch of people and at least one or two of them get interested\" and see if it works</p>",
        "id": 180763039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573758606
    },
    {
        "content": "<p>yeah makes sense</p>",
        "id": 180763301,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1573758768
    },
    {
        "content": "<p>Do they give access to their repos?  If they're saying that something crashed <em>and nothing else</em>, then things will be... difficult.</p>",
        "id": 180763774,
        "sender_full_name": "Cem Karan",
        "timestamp": 1573759012
    },
    {
        "content": "<p>we tend to ask for the source crate and the build/test invocation</p>",
        "id": 180764068,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573759194
    },
    {
        "content": "<p>(at the very least)</p>",
        "id": 180764125,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573759208
    },
    {
        "content": "<p>OK, please forgive my ignorance, but would it be possible to script <code>git bisect</code> to do most of this work for you?  Or is the goal to <em>really</em> minimize the output of <code>git bisect</code>?</p>",
        "id": 180764350,
        "sender_full_name": "Cem Karan",
        "timestamp": 1573759330
    },
    {
        "content": "<p>(as an example, i spent a while today hunting for some way to reproduce <a href=\"https://github.com/rust-lang/rust/issues/65774\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/65774\">#65774</a>, before giving up and closing the bug)</p>",
        "id": 180764448,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573759395
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"202560\">@Cem Karan</span> oh, hold on: I think <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> failed to provide context about what we are reducing and bisecting-over</p>",
        "id": 180764589,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573759459
    },
    {
        "content": "<p>The \"reduction\" under discussion here is not the git history (which is what <code>git bisect</code> attacks)</p>",
        "id": 180764636,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573759494
    },
    {
        "content": "<p>the reduction is instead of the input source crate (or crates)</p>",
        "id": 180764672,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573759515
    },
    {
        "content": "<p>and likewise the bisection is over that source code</p>",
        "id": 180764699,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573759534
    },
    {
        "content": "<p>to try to reduce the source code to some minimal amount where the problem of interest still arises</p>",
        "id": 180764796,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573759573
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> OK, thanks for the explanation, but if the crate or crates are also under <code>git</code>, then could we do <code>git bisect</code> on those crates to at least get a clue as to what chunk of code is causing the issue?  I know it isn't ideal as different people have different qualities of committing, but it will pare down the amount of code that needs to be reviewed.  Once that's done, then you can go in by hand to find the real problem area.</p>\n<p>Or am I still missing the point???</p>",
        "id": 180765133,
        "sender_full_name": "Cem Karan",
        "timestamp": 1573759782
    },
    {
        "content": "<p>yes, that is also a technique for identifying smoking guns</p>",
        "id": 180765250,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573759818
    },
    {
        "content": "<p>one that we are familiar with; after all, we use it ourself (for <code>cargo-bisect-rustc</code>)</p>",
        "id": 180765326,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573759867
    },
    {
        "content": "<p>And its not unreasonable to include it under the techniques available for trying to identify the problem area</p>",
        "id": 180765374,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573759898
    },
    {
        "content": "<p>But even with that identified git commit in hand, the <code>rustc</code> developers will <strong>still</strong> ask you to provide a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\" target=\"_blank\" title=\"https://stackoverflow.com/help/minimal-reproducible-example\">mcve</a></p>",
        "id": 180765690,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573760048
    },
    {
        "content": "<p>and of course, while the diff from a single commit may be small, that diff is usually <em>not</em> sufficient the bug report. So you'd still need to figure out how best to reduce the original test (either by building up a new example from scratch, informed by the identified commit; or by reducing down the original crate source)</p>",
        "id": 180765937,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573760188
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I should have realized that you guys would already have thought of that!</p>",
        "id": 180766014,
        "sender_full_name": "Cem Karan",
        "timestamp": 1573760224
    },
    {
        "content": "<p>Note that <code>cargo-bisect-rustc</code> is tailored solely for bisecting the <code>rustc</code> development history, not arbitrary crates. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 180766090,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573760265
    },
    {
        "content": "<p>Yes, and I just thought of something else; the rust project has done a really, really good job of trying to ensure that PRs will always compile at the very least before they are accepted.  Random crates out the wild may not be that clean, so <code>git bisect</code> might not even be a good option.</p>",
        "id": 180766538,
        "sender_full_name": "Cem Karan",
        "timestamp": 1573760520
    },
    {
        "content": "<p>OK, this is a wild spitballing type of idea, which is likely to be difficult to do, but...</p>",
        "id": 180766686,
        "sender_full_name": "Cem Karan",
        "timestamp": 1573760601
    },
    {
        "content": "<p>Since <code>rustc</code> has access to the complete AST, is it possible to selectively delete portions of the tree?  If the crate compiles and the problem still exists, repeat the process, otherwise back out what you did, and try to delete a different portion.  Over time, you'll have a minimal code base that you can test.</p>\n<p>I'll be the first to admit that it would be difficult to implement, but it might be a starting point for a better idea...</p>",
        "id": 180766960,
        "sender_full_name": "Cem Karan",
        "timestamp": 1573760749
    },
    {
        "content": "<p>no its not a bad idea at all. The blog post I'm in the process of authoring describes a set of transformations similar to that (though not always deleting)</p>",
        "id": 180767063,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573760792
    },
    {
        "content": "<p>for example, replacing function bodies with <code>loop { }</code> is almost always \"valid\"</p>",
        "id": 180767086,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573760804
    },
    {
        "content": "<p>so I indeed have often mused about trying to implement a tool that mechanizes the search over these reducing transformations</p>",
        "id": 180767134,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573760834
    },
    {
        "content": "<p>or leveraging something like quickcheck to do the search</p>",
        "id": 180767146,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573760843
    },
    {
        "content": "<p>quickcheck/proptest would be a good way to go...</p>",
        "id": 180767176,
        "sender_full_name": "Cem Karan",
        "timestamp": 1573760865
    },
    {
        "content": "<p>but I wanted to first <em>document</em> the transformations I find useful for reducing by hand</p>",
        "id": 180767180,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573760868
    },
    {
        "content": "<p>and let some one else worry about implementing the reduction tool</p>",
        "id": 180767256,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573760889
    },
    {
        "content": "<p>What about using <code>unimplemented!()</code> instead of <code>loop {}</code>?  If a function with <code>loop{}</code> is called, the program will just hang, which may make finding the bug harder.  </p>\n<p>Alternatively, if the function's return value implements <code>Default</code>, you might just replace the function body with <code>Default::default()</code>, which should always produce a valid, if unexpected, value.</p>",
        "id": 180767467,
        "sender_full_name": "Cem Karan",
        "timestamp": 1573761020
    },
    {
        "content": "<blockquote>\n<p>for example, replacing function bodies with <code>loop { }</code> is almost always \"valid\"</p>\n</blockquote>\n<p>(when one is debugging ICE's, that is)</p>",
        "id": 180767484,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573761032
    },
    {
        "content": "<p>sorry, I forgot to include that detail before</p>",
        "id": 180767505,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573761047
    },
    {
        "content": "<p>A <em>lot</em> of the bugs we are trying to reduce are solely compile-time issues</p>",
        "id": 180767527,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573761063
    },
    {
        "content": "<p>and so the runtime behavior is irrelevant and can be discarded entirely</p>",
        "id": 180767551,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573761077
    },
    {
        "content": "<p>OK, then you're right, it doesn't matter what goes in the function body.</p>",
        "id": 180767597,
        "sender_full_name": "Cem Karan",
        "timestamp": 1573761117
    },
    {
        "content": "<p>Actually... what about procedural macros?</p>",
        "id": 180767663,
        "sender_full_name": "Cem Karan",
        "timestamp": 1573761143
    },
    {
        "content": "<p>well the behavior of <em>those</em> may or may not need to be preserved, depending on the bug</p>",
        "id": 180767726,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573761192
    },
    {
        "content": "<p>so I'm not really talking about <em>blindly</em> replacing <em>all</em> method bodies and throwing up your hands if things go awry afterwards</p>",
        "id": 180767780,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573761233
    },
    {
        "content": "<p>(you cannot do such blind replacement anyway. Reason 1: you may need one or more bodies to reproduce the bug. Especially if <code>impl Trait</code> in return position is involved. Reason 2: <code>const fn</code> does not support <code>loop { }</code> as  body.)</p>",
        "id": 180767953,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573761342
    },
    {
        "content": "<blockquote>\n<p>so I'm not really talking about <em>blindly</em> replacing <em>all</em> method bodies and throwing up your hands if things go awry afterwards</p>\n</blockquote>\n<p>Makes sense; so what you need to do is figure out what can be replaced, and what you can replace it with.</p>\n<blockquote>\n<p>(you cannot do such blind replacement anyway. Reason 1: you may need one or more bodies to reproduce the bug. Especially if <code>impl Trait</code> in return position is involved. Reason 2: <code>const fn</code> does not support <code>loop { }</code> as  body.)</p>\n</blockquote>\n<p>Does <code>const fn</code> support <code>unimplemented!()</code>?</p>",
        "id": 180768207,
        "sender_full_name": "Cem Karan",
        "timestamp": 1573761464
    },
    {
        "content": "<p>Can't help with reason 1</p>",
        "id": 180768328,
        "sender_full_name": "Cem Karan",
        "timestamp": 1573761515
    },
    {
        "content": "<p>As for not blindly replacing method bodies, let's take a look at that.  One method of solving this problem is to do <em>exactly</em> that, randomly replacing method bodies and recompiling.  One of two things will happen; either the compile will fail, or it will succeed.  If it fails, then back out the changes, if it succeeds, then keep the body swap.  This can continue until you have some minimal set of methods that you can't replace any more.  At that point, you can start deleting methods/functions that have had their bodies replaced.  This will further reduce the code.  It may be enough to get to the root of the bug, or it may not, no way to know without trying.</p>",
        "id": 180768789,
        "sender_full_name": "Cem Karan",
        "timestamp": 1573761789
    },
    {
        "content": "<p>I think we are in vigorous agreement?</p>",
        "id": 180778909,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573768187
    },
    {
        "content": "<p>By the way, a reason I choose to use <code>loop { }</code> rather than <code>unimplemented!()</code> is that it removes the dependence on that <code>unimplemented!()</code> macro (and the underlying panic machinery).</p>",
        "id": 180779615,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573768556
    },
    {
        "content": "<p>For many bugs, this distinction doesn't matter.</p>",
        "id": 180779633,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573768562
    },
    {
        "content": "<p>But there are some bugs where you are working in a  <code>#![no_core]</code> scenario, and you do not have that macro available.</p>",
        "id": 180779799,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573768675
    },
    {
        "content": "<blockquote>\n<p>Does <code>const fn</code> support <code>unimplemented!()</code>?</p>\n</blockquote>\n<p>No. Not yet at least.</p>",
        "id": 180779934,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573768754
    },
    {
        "content": "<p>We are seeing so many cases of 'needs minimization' over in <a class=\"stream\" data-stream-id=\"187312\" href=\"/#narrow/stream/187312-wg-async-foundations\">#wg-async-foundations</a> -- too bad we didn't set this up yet!</p>",
        "id": 185036908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578420445
    },
    {
        "content": "<p>yeah we need to set this up ASAP</p>",
        "id": 185213163,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1578577983
    }
]