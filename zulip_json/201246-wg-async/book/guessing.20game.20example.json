[
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts</span> I am having a few unanticipated concerns arise as I try to move my \"guessing game\" edits into proper testable snippets. Here are a few of them:</p>\n<ul>\n<li>the existing example uses <code>stream.split()</code> -- actually, this seems probably ok, as we can basically explain what it does and give a \"forward ref\" to the streams chapter where you will explain it</li>\n<li>runtime release is currently something like 0.3.0-alpha4, I guess that's...ok. 1.0 would be better. Do you think we'd be considering a 1.0 at any point?</li>\n<li>right now the example uses <code>failure::Error</code>, but I was hoping to avoid referencing <code>failure</code>. Annoyingly, you can't actually use <code>Box&lt;dyn Error + Send&gt;</code> because (dear god) there is no <code>From</code> impls for doing the conversion from <code>std::io::Error</code> (those exist only for <code>Box&lt;dyn Error&gt;</code>, <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span> )</li>\n</ul>",
        "id": 168967877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561490005
    },
    {
        "content": "<blockquote>\n<p>hoping to avoid referencing failure</p>\n</blockquote>\n<p>Shameless self-promotion, but SNAFU has built-in futures 0.1 and 0.3 support :-)</p>\n<p>I’m sure that you just want to avoid using any crates, though.</p>",
        "id": 168969904,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561491478
    },
    {
        "content": "<p>I've not really looked at SNAFU, I must admit</p>",
        "id": 168970742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561492118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you can use <code>Box&lt;dyn Error + Send + Sync&gt;</code></p>",
        "id": 169052361,
        "sender_full_name": "Nemo157",
        "timestamp": 1561570528
    },
    {
        "content": "<p>I’d appreciate an aside about “we are doing convenient error handling to focus on async and not advocating any particular style” (so long as that’s true). People tend to copy-paste and then treat as gospel such examples.</p>",
        "id": 169069769,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561575707
    },
    {
        "content": "<p>I think the sad truth is I wouldn't know what error handling style to recommend</p>",
        "id": 169072916,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561577871
    },
    {
        "content": "<blockquote>\n<p>Do you think we'd be considering a 1.0 [runtime release] at any point?</p>\n</blockquote>\n<p>@nikomatsakis Yeah definitely, though I think the first milestone is to get us off alpha.x releases. Which kind of depends on futures-rs moving off there too.</p>",
        "id": 169096008,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1561598721
    },
    {
        "content": "<p>K</p>",
        "id": 169238022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561738092
    }
]