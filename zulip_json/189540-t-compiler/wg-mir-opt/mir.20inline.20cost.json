[
    {
        "content": "<p>what is the cost that is calculated for mir inlining? While looking in to why the instance_def_size_estimate function estimate do not match the number of llvm-ir instructions there was alot of code that only is generated in llvm so I guess my question is if that shall be handled in the mir inline cost?<br>\ne.g. mir calls/drops that have a cleanup generate one extra BB (landingpad) that contains 10 llvm-ir instructions and also mir resume results in 9 llvm-ir instructions</p>",
        "id": 190114908,
        "sender_full_name": "andjo403",
        "timestamp": 1583786099
    },
    {
        "content": "<p>The cost calculation is here <a href=\"https://github.com/rust-lang/rust/blob/3dbade652ed8ebac70f903e01f51cd92c4e4302c/src/librustc_mir/transform/inline.rs#L215\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/3dbade652ed8ebac70f903e01f51cd92c4e4302c/src/librustc_mir/transform/inline.rs#L215\">https://github.com/rust-lang/rust/blob/3dbade652ed8ebac70f903e01f51cd92c4e4302c/src/librustc_mir/transform/inline.rs#L215</a></p>",
        "id": 190115431,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1583786416
    },
    {
        "content": "<p>It's done at the MIR statement level so there's definitely a disconnect between that and what LLVM sees.</p>",
        "id": 190115503,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1583786472
    },
    {
        "content": "<p>my thinking is that maybe at eg line <a href=\"https://github.com/rust-lang/rust/blob/3dbade652ed8ebac70f903e01f51cd92c4e4302c/src/librustc_mir/transform/inline.rs#L331\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/3dbade652ed8ebac70f903e01f51cd92c4e4302c/src/librustc_mir/transform/inline.rs#L331\">https://github.com/rust-lang/rust/blob/3dbade652ed8ebac70f903e01f51cd92c4e4302c/src/librustc_mir/transform/inline.rs#L331</a> to increase the cost with 10 due to the landingpad BB</p>",
        "id": 190115690,
        "sender_full_name": "andjo403",
        "timestamp": 1583786602
    },
    {
        "content": "<p>You mean add another 10 for calls that can unwind?</p>",
        "id": 190115786,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1583786658
    },
    {
        "content": "<p>yes so eg. for mir <code>_2 = const std::vec::Vec::&lt;T&gt;::as_mut_ptr(move _3) -&gt; [return: bb2, unwind: bb15];</code><br>\nthe extra bb cleanup bb is before bb15 in llvm ir <br>\n<code> cleanup:                                          ; preds = %bb12, %bb11, %bb10, %bb8, %bb4, %bb5, %bb2, %start\n  %27 = landingpad { i8*, i32 }\n          cleanup\n  %28 = bitcast { i8*, i32 }* %2 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 16, i8* %28)\n  %29 = extractvalue { i8*, i32 } %27, 0\n  %30 = extractvalue { i8*, i32 } %27, 1\n  %31 = getelementptr inbounds { i8*, i32 }, { i8*, i32 }* %2, i32 0, i32 0\n  store i8* %29, i8** %31, align 8\n  %32 = getelementptr inbounds { i8*, i32 }, { i8*, i32 }* %2, i32 0, i32 1\n  store i32 %30, i32* %32, align 8\n  br label %bb15</code></p>",
        "id": 190116132,
        "sender_full_name": "andjo403",
        "timestamp": 1583786918
    },
    {
        "content": "<p>That's a good idea!</p>",
        "id": 190117032,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1583787568
    },
    {
        "content": "<p>call and assert also  have a cleanup variable that also generate a landingpad</p>",
        "id": 190118411,
        "sender_full_name": "andjo403",
        "timestamp": 1583788471
    },
    {
        "content": "<p>I think inline costs at the MIR level are more pseudo than science</p>",
        "id": 190383227,
        "sender_full_name": "eddyb",
        "timestamp": 1584016064
    },
    {
        "content": "<p>but I don't have the time to relitigate that so let's pretend I didn't say anything :P</p>",
        "id": 190385812,
        "sender_full_name": "eddyb",
        "timestamp": 1584017788
    }
]