[
    {
        "content": "<p>So I've been chatting a bit with <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> about MIR optimizations and I realized we should be holding that conversation here.</p>",
        "id": 174879494,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567602539
    },
    {
        "content": "<p>The context is that there have been a lot of complaints about intermediate memcpy's being a particular kind of poor codegen, particularly coming from the stylo/servo projects, and I'm trying to drill down to what the specific steps are for us to improve that situation.</p>",
        "id": 174879560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567602598
    },
    {
        "content": "<p>I've also talked to a few people who've been waiting for these optimizations for years</p>",
        "id": 174879647,
        "sender_full_name": "eddyb",
        "timestamp": 1567602630
    },
    {
        "content": "<p>OK, so so far we identified that we need to improve MIR debuginfo -- and <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> has a draft PR that tries to introduce a new representation based on <code>(name, scope, place)</code> tuples -- but that work needs to be completed. This would enable us to track the name of user-given things through optimizations.</p>",
        "id": 174879662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567602638
    },
    {
        "content": "<p>apologies notwithstanding, it would be good to actually get them in</p>",
        "id": 174879666,
        "sender_full_name": "eddyb",
        "timestamp": 1567602643
    },
    {
        "content": "<p>You were then talking about SROA?</p>",
        "id": 174879670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567602645
    },
    {
        "content": "<p>Say a bit more about that</p>",
        "id": 174879685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567602653
    },
    {
        "content": "<p>I guess by SROA you mean taking a MIR literal like <code>Foo { ... }</code> and converting it into individual wri.... oh, no, you mean promoting the fields of a stack-allocated literal to distinct variables, of course</p>",
        "id": 174879713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567602689
    },
    {
        "content": "<p>first off, the tuple is not as clear as it could be. the printed syntax is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">scope</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 174879721,
        "sender_full_name": "eddyb",
        "timestamp": 1567602695
    },
    {
        "content": "<p>ok</p>",
        "id": 174879779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567602722
    },
    {
        "content": "<p>I'm not sure which is clearer, but that makes sense</p>",
        "id": 174879812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567602733
    },
    {
        "content": "<blockquote>\n<p>I've also talked to a few people who've been waiting for these optimizations for years</p>\n</blockquote>\n<p>it would be really good to get specific examples -- I think maybe you mentioned you have some floating around?</p>",
        "id": 174879898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567602790
    },
    {
        "content": "<p>the difference with SROA is that you are replacing <code>local.x.y.z</code> with <code>local_x_y_z</code> so if you want debuggers to still show a composite image of <code>local</code>, from all of the locals it has been split in</p>",
        "id": 174879902,
        "sender_full_name": "eddyb",
        "timestamp": 1567602794
    },
    {
        "content": "<p>one of my fears -- I consider it basically a certainty -- is that we'll do this work and then find it's not helping the <em>actual</em> example programs</p>",
        "id": 174879918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567602807
    },
    {
        "content": "<p>you also need projections (although more limited) on the LHS</p>",
        "id": 174879923,
        "sender_full_name": "eddyb",
        "timestamp": 1567602813
    },
    {
        "content": "<p>(which just means we'll have to figure out what the next blocker is)</p>",
        "id": 174879928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567602815
    },
    {
        "content": "<p>I have examples  I was testing on, and which were working :D</p>",
        "id": 174879938,
        "sender_full_name": "eddyb",
        "timestamp": 1567602823
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Newtype</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Huge</span><span class=\"p\">(</span><span class=\"kt\">u64</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Newtype</span><span class=\"o\">&lt;</span><span class=\"n\">Huge</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Huge</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Newtype</span><span class=\"p\">(</span><span class=\"n\">Newtype</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)).</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 174879964,
        "sender_full_name": "eddyb",
        "timestamp": 1567602837
    },
    {
        "content": "<p>I think this is the most simplified version</p>",
        "id": 174880022,
        "sender_full_name": "eddyb",
        "timestamp": 1567602853
    },
    {
        "content": "<p>(maybe we can collect those examples at some point in the <a href=\"https://github.com/rust-lang/compiler-team/tree/master/content/working-groups/mir-opt\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/tree/master/content/working-groups/mir-opt\">mir-opt working group directory</a>)</p>",
        "id": 174880050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567602879
    },
    {
        "content": "<p>yeah, I think what would prob be good is (a) a reduced example and (b) a link to the original source and benchmark if possible</p>",
        "id": 174880071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567602897
    },
    {
        "content": "<p>but that's great</p>",
        "id": 174880074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567602899
    },
    {
        "content": "<p>I have presented some of these before, so I guess that means they never got collected :(</p>",
        "id": 174880076,
        "sender_full_name": "eddyb",
        "timestamp": 1567602900
    },
    {
        "content": "<p>not afaik</p>",
        "id": 174880089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567602905
    },
    {
        "content": "<p>I'd love to be wrong</p>",
        "id": 174880095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567602908
    },
    {
        "content": "<p>there's the docs from the all hands that had at least some of these with annotations?</p>",
        "id": 174880117,
        "sender_full_name": "simulacrum",
        "timestamp": 1567602922
    },
    {
        "content": "<blockquote>\n<p>the difference with SROA is that you are replacing <code>local.x.y.z</code> with <code>local_x_y_z</code> so if you want debuggers to still show a composite image of <code>local</code>, from all of the locals it has been split in</p>\n</blockquote>\n<p>how is this represented in your proposed debuginfo?</p>",
        "id": 174880122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567602926
    },
    {
        "content": "<p>yeah! I forgot about those</p>",
        "id": 174880132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567602943
    },
    {
        "content": "<p>so that's what I was getting to, it needs extending with:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">scope</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"p\">(.</span><span class=\"n\">field</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 174880149,
        "sender_full_name": "eddyb",
        "timestamp": 1567602961
    },
    {
        "content": "<blockquote>\n<p>there's the docs from the all hands that had at least some of these with annotations?</p>\n</blockquote>\n<p>I guess you mean <a href=\"https://paper.dropbox.com/doc/Topic-MIR-2.0-and-MIR-Optimizations--AWnIuLeFMVhIFyWf7XyyquyDAg-BwHR7kOhxDwL6vuAUoSTQ\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Topic-MIR-2.0-and-MIR-Optimizations--AWnIuLeFMVhIFyWf7XyyquyDAg-BwHR7kOhxDwL6vuAUoSTQ\">this MIR 2.0 dropbox paper</a></p>",
        "id": 174880234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567602998
    },
    {
        "content": "<p>the codegen for this is easy once MIR variable debuginfo is implemented, since you just need to use the \"slicing\" feature of DWARF (which IIRC LLVM exposes)</p>",
        "id": 174880241,
        "sender_full_name": "eddyb",
        "timestamp": 1567603001
    },
    {
        "content": "<blockquote>\n<p>so that's what I was getting to, it needs extending with:</p>\n</blockquote>\n<p>ok, that makes sense</p>",
        "id": 174880268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567603030
    },
    {
        "content": "<p>in fact, I think LLVM itself does this in its own SROA (lol)</p>",
        "id": 174880269,
        "sender_full_name": "eddyb",
        "timestamp": 1567603030
    },
    {
        "content": "<p>technically NRVO only depends on MIR var debuginfo</p>",
        "id": 174880290,
        "sender_full_name": "eddyb",
        "timestamp": 1567603053
    },
    {
        "content": "<p>while SROA requires that extension</p>",
        "id": 174880302,
        "sender_full_name": "eddyb",
        "timestamp": 1567603060
    },
    {
        "content": "<p>OK, so, maybe we can consider that a distinct step? i.e., land the debuginfo you described before, then extract with more complex names?</p>",
        "id": 174880310,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567603065
    },
    {
        "content": "<p>but we need both optimizations for most of the interesting cases (SROA runs first, to strength-reduce locals for NRVO)</p>",
        "id": 174880370,
        "sender_full_name": "eddyb",
        "timestamp": 1567603084
    },
    {
        "content": "<p>yupp!</p>",
        "id": 174880382,
        "sender_full_name": "eddyb",
        "timestamp": 1567603093
    },
    {
        "content": "<p>that has been the plan for like a year</p>",
        "id": 174880389,
        "sender_full_name": "eddyb",
        "timestamp": 1567603097
    },
    {
        "content": "<p>it just hasn't happened for reasons</p>",
        "id": 174880393,
        "sender_full_name": "eddyb",
        "timestamp": 1567603103
    },
    {
        "content": "<p>the PR is <a href=\"https://github.com/rust-lang/rust/pull/56231\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56231\">https://github.com/rust-lang/rust/pull/56231</a></p>",
        "id": 174880399,
        "sender_full_name": "eddyb",
        "timestamp": 1567603109
    },
    {
        "content": "<p>OK</p>",
        "id": 174880452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567603148
    },
    {
        "content": "<p>I decided today that the best way forward is to actually introduce the representation in that PR in <code>rustc_codegen_ssa</code> alone</p>",
        "id": 174880470,
        "sender_full_name": "eddyb",
        "timestamp": 1567603165
    },
    {
        "content": "<p>and refactor the mess that is MIR codegen debuginfo interactions</p>",
        "id": 174880492,
        "sender_full_name": "eddyb",
        "timestamp": 1567603180
    },
    {
        "content": "<p>and <em>then</em> do that PR (which lets optimizations preserve debuginfo)</p>",
        "id": 174880506,
        "sender_full_name": "eddyb",
        "timestamp": 1567603191
    },
    {
        "content": "<p>so that would mean starting over (for now, at least)</p>",
        "id": 174880513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567603196
    },
    {
        "content": "<p>yeah</p>",
        "id": 174880516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567603197
    },
    {
        "content": "<p>ok, so once debug info work lands, what blocks us from doing the SROA optimization?</p>",
        "id": 174880604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567603227
    },
    {
        "content": "<p>well, I have never implemented the codegen bits</p>",
        "id": 174880605,
        "sender_full_name": "eddyb",
        "timestamp": 1567603227
    },
    {
        "content": "<p>right, I just mean that it'd be a fresh PR</p>",
        "id": 174880614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567603235
    },
    {
        "content": "<p>starting from master</p>",
        "id": 174880618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567603238
    },
    {
        "content": "<p>maybe stealing bits from the other, I don't know</p>",
        "id": 174880632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567603246
    },
    {
        "content": "<p>nothing blocks us, the SROA PR has been around for even longer</p>",
        "id": 174880658,
        "sender_full_name": "eddyb",
        "timestamp": 1567603262
    },
    {
        "content": "<p>one thing I can imagine</p>",
        "id": 174880684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567603274
    },
    {
        "content": "<p>well, we can land the PR</p>",
        "id": 174880686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567603276
    },
    {
        "content": "<p>but what might block us from  <em>enabling it on stable</em> is the lack of any performance monitoring story for our generated code</p>",
        "id": 174880706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567603289
    },
    {
        "content": "<p>NRVO has some philosophical (in the absence of a proof assistant) and performance concerns</p>",
        "id": 174880708,
        "sender_full_name": "eddyb",
        "timestamp": 1567603290
    },
    {
        "content": "<blockquote>\n<p>nothing blocks us, the SROA PR has been around for even longer</p>\n</blockquote>\n<p>link?</p>",
        "id": 174880747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567603316
    },
    {
        "content": "<p>also the work <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> has been doing with generators has highlighted a few things</p>",
        "id": 174880803,
        "sender_full_name": "eddyb",
        "timestamp": 1567603329
    },
    {
        "content": "<p>about the analysis I was doing for NRVO</p>",
        "id": 174880811,
        "sender_full_name": "eddyb",
        "timestamp": 1567603334
    },
    {
        "content": "<p>ok, so NRVO would be kind of a \"next step\" after SROA?</p>",
        "id": 174880831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567603347
    },
    {
        "content": "<p>and nowadays I think I'd favor implementing several analyses and cross-checking them via crater (if only that ran faster...)</p>",
        "id": 174880840,
        "sender_full_name": "eddyb",
        "timestamp": 1567603355
    },
    {
        "content": "<p>yeah, SROA is an easy decision IMO, and we could right away run constprop after it</p>",
        "id": 174880882,
        "sender_full_name": "eddyb",
        "timestamp": 1567603386
    },
    {
        "content": "<p>if certain fields are constant but others are not etc.</p>",
        "id": 174880914,
        "sender_full_name": "eddyb",
        "timestamp": 1567603405
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/48300\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/48300\">https://github.com/rust-lang/rust/pull/48300</a></p>",
        "id": 174880960,
        "sender_full_name": "eddyb",
        "timestamp": 1567603436
    },
    {
        "content": "<p>OK</p>",
        "id": 174881139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567603514
    },
    {
        "content": "<p>I guess not getting a contract early last summer threw a wrench into my plans, ugh</p>",
        "id": 174881268,
        "sender_full_name": "eddyb",
        "timestamp": 1567603572
    },
    {
        "content": "<p>(looking at the date on that PR)</p>",
        "id": 174881283,
        "sender_full_name": "eddyb",
        "timestamp": 1567603580
    },
    {
        "content": "<p>do we think that SROA alone would have an impact on any real use cases?</p>",
        "id": 174881308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567603595
    },
    {
        "content": "<p>doubtful but possible if LLVM gets confused on them</p>",
        "id": 174881335,
        "sender_full_name": "eddyb",
        "timestamp": 1567603612
    },
    {
        "content": "<p>oh, you know where it would help? debug mode</p>",
        "id": 174881351,
        "sender_full_name": "eddyb",
        "timestamp": 1567603622
    },
    {
        "content": "<p>since LLVM's wouldn't run</p>",
        "id": 174881366,
        "sender_full_name": "eddyb",
        "timestamp": 1567603628
    },
    {
        "content": "<p>I'm skimming over the notes from the all hands</p>",
        "id": 174881393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567603647
    },
    {
        "content": "<p>(and since we preserve debuginfo, we can have it on by default)</p>",
        "id": 174881423,
        "sender_full_name": "eddyb",
        "timestamp": 1567603666
    },
    {
        "content": "<p>seems like \"inlining\" is another key optimization</p>",
        "id": 174881523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567603713
    },
    {
        "content": "<p>that might help with debug mode compilation</p>",
        "id": 174881529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567603715
    },
    {
        "content": "<p>I suggest we enable inlining by default with a strict no-branch/no-loop heuristic, and small body otherwise</p>",
        "id": 174881575,
        "sender_full_name": "eddyb",
        "timestamp": 1567603759
    },
    {
        "content": "<p>I guess there are kind of 3 possible goals around MIR optimizations:</p>\n<ul>\n<li>improving on the perf of <em>optimized</em> code (i.e., doing what LLVM won't do)</li>\n<li>improving compilation times for optimized code (and potentially debug code) (i.e., making less LLVM IR)</li>\n<li>improving the perf of <em>unoptimized</em> code (i.e., doing what LLVM does, but faster)</li>\n</ul>",
        "id": 174881599,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567603774
    },
    {
        "content": "<p>one exception for branches would be them being based off arguments in a way that would get simplified</p>",
        "id": 174881693,
        "sender_full_name": "eddyb",
        "timestamp": 1567603813
    },
    {
        "content": "<blockquote>\n<p>I suggest we enable inlining by default with a strict no-branch/no-loop heuristic, and small body otherwise</p>\n</blockquote>\n<p>iirc from when <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> was looking into this, we encountered some bugs in the existing inliner, not sure if they've been fixed</p>",
        "id": 174881708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567603823
    },
    {
        "content": "<p>heh</p>",
        "id": 174881717,
        "sender_full_name": "eddyb",
        "timestamp": 1567603831
    },
    {
        "content": "<p>also the existing inliner can't preserve debuginfo wrt. closures I think?</p>",
        "id": 174881728,
        "sender_full_name": "eddyb",
        "timestamp": 1567603845
    },
    {
        "content": "<p>obviously, that can be done. just trying to enumerate work items and possible goals.</p>",
        "id": 174881736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567603855
    },
    {
        "content": "<p>The Inliner needs some (more) work. I did some work on it last year and found a bunch of basic issues with it but it's still doing something bad and causes ICEs if you try to bootstrap with it turned on. (<a href=\"https://github.com/rust-lang/rust/issues/63802\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/63802\">https://github.com/rust-lang/rust/issues/63802</a>)</p>",
        "id": 174881740,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1567603857
    },
    {
        "content": "<p>my PR already can, I think it's reflected in one of the testcase</p>",
        "id": 174881744,
        "sender_full_name": "eddyb",
        "timestamp": 1567603862
    },
    {
        "content": "<p>yeah, so that too is kind of wanting to be integrated with your representation</p>",
        "id": 174881791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567603898
    },
    {
        "content": "<p>actually that's another question</p>",
        "id": 174881798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567603903
    },
    {
        "content": "<p>can we generate the proper debuginfo for inlined things?</p>",
        "id": 174881800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567603908
    },
    {
        "content": "<p>do you think I should focus on MIR? seemes easier than trying to do a million things</p>",
        "id": 174881810,
        "sender_full_name": "eddyb",
        "timestamp": 1567603916
    },
    {
        "content": "<blockquote>\n<p>nikomatsakis: can we generate the proper debuginfo for inlined things?</p>\n</blockquote>\n<p>with my PR, variable debuginfo. but, hmpf</p>",
        "id": 174881881,
        "sender_full_name": "eddyb",
        "timestamp": 1567603941
    },
    {
        "content": "<p>inlining <em>would</em> break location information, unless we can encode it somehow</p>",
        "id": 174881901,
        "sender_full_name": "eddyb",
        "timestamp": 1567603960
    },
    {
        "content": "<blockquote>\n<p>do you think I should focus on MIR? seemes easier than trying to do a million things</p>\n</blockquote>\n<p>what does \"focus on MIR\" mean</p>",
        "id": 174881910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567603964
    },
    {
        "content": "<p>I wonder if <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> has thought about this enough</p>",
        "id": 174881931,
        "sender_full_name": "eddyb",
        "timestamp": 1567603975
    },
    {
        "content": "<blockquote>\n<p>inlining <em>would</em> break location information, unless we can encode it somehow</p>\n</blockquote>\n<p>I mean LLVM does it somehow</p>",
        "id": 174881938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567603981
    },
    {
        "content": "<p>focus on MIR vs, say, incremental, or other stuff</p>",
        "id": 174881957,
        "sender_full_name": "eddyb",
        "timestamp": 1567603993
    },
    {
        "content": "<p>at least, when I build with debuginfo on linux, I get stacktraces that are aware of inlining</p>",
        "id": 174881961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567603998
    },
    {
        "content": "<p>I see. Yes, I think we should focus on MIR optimizations</p>",
        "id": 174881968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567604006
    },
    {
        "content": "<p>(so far my priorities have been pretty out of whack)</p>",
        "id": 174881984,
        "sender_full_name": "eddyb",
        "timestamp": 1567604015
    },
    {
        "content": "<p>Certainly I think we should focus on one thing</p>",
        "id": 174881991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567604018
    },
    {
        "content": "<p>And I think they're a good choice, in part because I think we have a lot of \"almost there\" parts, and I think (as you said) there's a lot of pent-up demand</p>",
        "id": 174882016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567604039
    },
    {
        "content": "<p>DWARF can represent inlining but I'm not sure how much LLVM exposes. some people have looked into it for macros and it's tricky</p>",
        "id": 174882064,
        "sender_full_name": "eddyb",
        "timestamp": 1567604044
    },
    {
        "content": "<p>one thing I forgot to bring up is I'm thinking more and more about VSDG, since it models so many things so well</p>",
        "id": 174882087,
        "sender_full_name": "eddyb",
        "timestamp": 1567604066
    },
    {
        "content": "<p>and, while I don't want to outright propose it, there is something (R)VSDG does that is kind of hilarious in the historical context of MIR</p>",
        "id": 174882123,
        "sender_full_name": "eddyb",
        "timestamp": 1567604094
    },
    {
        "content": "<p>I'm torn in that I think we should think about using the best representations, but I also don't want to let perfect be the enemy of the good.</p>",
        "id": 174882128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567604100
    },
    {
        "content": "<p>(R)VSDG is structured control-flow while MIR is a desugaring of structured control-flow into CFGs</p>",
        "id": 174882148,
        "sender_full_name": "eddyb",
        "timestamp": 1567604114
    },
    {
        "content": "<p>so a discussion we should maybe have at some point is: what would the MIR borrowck look like if it had to work with a structural replacement for CFG?</p>",
        "id": 174882180,
        "sender_full_name": "eddyb",
        "timestamp": 1567604150
    },
    {
        "content": "<p>(Especially since we have LLVM to do the \"heavy lifting\")</p>",
        "id": 174882184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567604153
    },
    {
        "content": "<p>Yeah, that also intersects polonius somewhat</p>",
        "id": 174882245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567604166
    },
    {
        "content": "<p>I don't think it would be a big issue</p>",
        "id": 174882272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567604174
    },
    {
        "content": "<p>(let's say it's still blocky with mutable variables like today, but the overall graph is not an arbitrary CFG)</p>",
        "id": 174882278,
        "sender_full_name": "eddyb",
        "timestamp": 1567604179
    },
    {
        "content": "<p>For the most part, the borrow check is a dataflow computation</p>",
        "id": 174882294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567604190
    },
    {
        "content": "<p>The main problem MIR was intended to solve was that we had \"two sources of truth\"</p>",
        "id": 174882304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567604198
    },
    {
        "content": "<p>(in the context of the borrow check, I mean)</p>",
        "id": 174882313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567604208
    },
    {
        "content": "<p>that is, we kind of \"desugared\" once for borrow check, and then again for codegen, and they were different</p>",
        "id": 174882325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567604221
    },
    {
        "content": "<p>the reason is that you can sort of treat (R)VSDG like a pure term DAG, intern it, etc.</p>",
        "id": 174882343,
        "sender_full_name": "eddyb",
        "timestamp": 1567604237
    },
    {
        "content": "<p>but OTOH we have a bunch of information like <code>SourceInfo</code> that would probably defeat any interning-like MIR storage optimization</p>",
        "id": 174882393,
        "sender_full_name": "eddyb",
        "timestamp": 1567604280
    },
    {
        "content": "<p>I have to admit that this sounds like kind of a big distraction :)</p>",
        "id": 174882439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567604289
    },
    {
        "content": "<p>yes, but OTOH one of the reasons I keep doing things other than MIR is because MIR is a huge headache of an IR</p>",
        "id": 174882459,
        "sender_full_name": "eddyb",
        "timestamp": 1567604311
    },
    {
        "content": "<p>i.e., it sounds like you're proposing replacing MIR with something wholly different</p>",
        "id": 174882460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567604316
    },
    {
        "content": "<p>well, not necessarily. maybe there is a small change we can make to make it easier to reason about</p>",
        "id": 174882506,
        "sender_full_name": "eddyb",
        "timestamp": 1567604348
    },
    {
        "content": "<p>Hmm. The structures weren't designed for editing, and places are too complex, but other than that?</p>",
        "id": 174882517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567604357
    },
    {
        "content": "<p>reasoning about state on a CFG is hard</p>",
        "id": 174882535,
        "sender_full_name": "eddyb",
        "timestamp": 1567604376
    },
    {
        "content": "<p>you have to constantly keep track of what you can trust and how well / under what conditions</p>",
        "id": 174882623,
        "sender_full_name": "eddyb",
        "timestamp": 1567604416
    },
    {
        "content": "<p>What do you mean by \"state\" here</p>",
        "id": 174882627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567604418
    },
    {
        "content": "<p>local variables (plus the implicit global state that e.g. raw pointers and function calls can do arbitrary things to)</p>",
        "id": 174882668,
        "sender_full_name": "eddyb",
        "timestamp": 1567604446
    },
    {
        "content": "<p>but most things on the MIR are arguably pure-ish because Rust lends itself to a style of code which C doesn't</p>",
        "id": 174882730,
        "sender_full_name": "eddyb",
        "timestamp": 1567604483
    },
    {
        "content": "<p>I guess kind of how many locals are in SSA form but that has to be detected every single time</p>",
        "id": 174882758,
        "sender_full_name": "eddyb",
        "timestamp": 1567604511
    },
    {
        "content": "<p>anyway it <em>is</em> a distraction given the work already done</p>",
        "id": 174882815,
        "sender_full_name": "eddyb",
        "timestamp": 1567604527
    },
    {
        "content": "<p>(hence me proposing we find time to discuss it without delving into it. guess I failed :P)</p>",
        "id": 174882865,
        "sender_full_name": "eddyb",
        "timestamp": 1567604542
    },
    {
        "content": "<p>yeah, ok, that's what I thought you probably meant.</p>",
        "id": 174882923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567604590
    },
    {
        "content": "<p>I could certainly imagine moving towards a more SSA-like setup</p>",
        "id": 174882937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567604605
    },
    {
        "content": "<p>the logical conclusion of the data dependencies of SSA is encoding state dependencies as linear data dependencies</p>",
        "id": 174882978,
        "sender_full_name": "eddyb",
        "timestamp": 1567604642
    },
    {
        "content": "<p>then things are more like functional programs, but without higher-order CPS headaches</p>",
        "id": 174883040,
        "sender_full_name": "eddyb",
        "timestamp": 1567604667
    },
    {
        "content": "<p>linear state &gt; CPS, effectively</p>",
        "id": 174883060,
        "sender_full_name": "eddyb",
        "timestamp": 1567604687
    },
    {
        "content": "<p>still, it feels like we should try to get some working, shipping optimizations -- doing the refactorings we feel are <em>needed</em> for that, but not a lot more. I guess it just seems like we can leave the \"heavy lifting\" to LLVM for now, but even just doing relatively few, simple optimizations would get us the majority of benefit. And those are not that hard to express on a CFG</p>",
        "id": 174883113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567604719
    },
    {
        "content": "<p>(but we don't have to do any one thing in particular - I'd rather we find the changes we need <em>keeping</em> the advanced models in mind)</p>",
        "id": 174883133,
        "sender_full_name": "eddyb",
        "timestamp": 1567604737
    },
    {
        "content": "<p>And then we'd have a better idea what our needs are</p>",
        "id": 174883137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567604741
    },
    {
        "content": "<p>one thing that is super easy, for example, is (R)VSDG intra-BB</p>",
        "id": 174883205,
        "sender_full_name": "eddyb",
        "timestamp": 1567604773
    },
    {
        "content": "<p>mostly means your statement list is replaced with a chain of stateful statements but anything \"shallowly pure\" forms more of a DAG around that</p>",
        "id": 174883249,
        "sender_full_name": "eddyb",
        "timestamp": 1567604823
    },
    {
        "content": "<p>which could be a dataflow performance boost, for example</p>",
        "id": 174883261,
        "sender_full_name": "eddyb",
        "timestamp": 1567604844
    },
    {
        "content": "<p>jumping back to implementing and enabling optimizations, to what extent do you think that is blocked on refactoring MIR (and which refactors)</p>",
        "id": 174883355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567604887
    },
    {
        "content": "<p>ignoring debuginfo</p>",
        "id": 174883374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567604905
    },
    {
        "content": "<p>SROA is easy, NRVO is annoying to analyze but also easy once you have the interference predicate</p>",
        "id": 174883381,
        "sender_full_name": "eddyb",
        "timestamp": 1567604913
    },
    {
        "content": "<p>both of  them are ready (minus debuginfo), NRVO may require a heuristic threshold (it's quadratic so a lot of locals slows it down)</p>",
        "id": 174883400,
        "sender_full_name": "eddyb",
        "timestamp": 1567604938
    },
    {
        "content": "<p>I'm thinking of things like:</p>\n<ul>\n<li>moving away from using indices everywhere, and towards linked lists and/or stable identifiers</li>\n<li>refactoring place to (local, proj*)  (in progress)</li>\n<li>refactoring place to remove deref and indexing (harder)</li>\n</ul>",
        "id": 174883438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567604971
    },
    {
        "content": "<p>(the NRVO PR actually has some log of me doing speedups of many orders of magnitude or something just because I was optimizing the term under the quadratic :P)</p>",
        "id": 174883447,
        "sender_full_name": "eddyb",
        "timestamp": 1567604982
    },
    {
        "content": "<blockquote>\n<p>SROA is easy, NRVO is annoying to analyze but also easy once you have the interference predicate</p>\n</blockquote>\n<p>ok -- so they're not blocked on those kinds of changes. To what extent would they <em>benefit</em> from them?</p>",
        "id": 174883542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567605019
    },
    {
        "content": "<blockquote>\n<p>I'm thinking of things like:</p>\n</blockquote>\n<p>also, are there other things you would add to this list</p>",
        "id": 174883565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567605033
    },
    {
        "content": "<p>a flatter/simplest Place makes it easier to run dataflow, do replacements, etc.</p>",
        "id": 174883577,
        "sender_full_name": "eddyb",
        "timestamp": 1567605046
    },
    {
        "content": "<p>so it would be 1. slightly cleaner implementation 2. may run a bit faster</p>",
        "id": 174883587,
        "sender_full_name": "eddyb",
        "timestamp": 1567605061
    },
    {
        "content": "<blockquote>\n<p>also, are there other things you would add to this list</p>\n</blockquote>\n<p>well, I don't know the full implications of it, wrt <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>'s models, but some sort of \"alias\" might be interesting</p>",
        "id": 174883747,
        "sender_full_name": "eddyb",
        "timestamp": 1567605178
    },
    {
        "content": "<p>like a raw pointer except not <em>specifically</em> raw or reference or Box</p>",
        "id": 174883765,
        "sender_full_name": "eddyb",
        "timestamp": 1567605192
    },
    {
        "content": "<p>and it would need to be borrowed to actually be turned into something you can access \"dynamically\"</p>",
        "id": 174883841,
        "sender_full_name": "eddyb",
        "timestamp": 1567605242
    },
    {
        "content": "<p>could just as well significantly complicate analysis though so I'm not sure</p>",
        "id": 174883869,
        "sender_full_name": "eddyb",
        "timestamp": 1567605248
    },
    {
        "content": "<blockquote>\n<p>well, I don't know the full implications of it, wrt <span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span>'s models, but some sort of \"alias\" might be interesting</p>\n</blockquote>\n<p>can you elaborate a bit on that? is this intended as an intermediate value when desugaring complex places?</p>",
        "id": 174883916,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567605292
    },
    {
        "content": "<p>e.g., I've thought about -- as (maybe?) an intermediate step -- convering the MIR after borrowck so that complex places create intermediate values.</p>",
        "id": 174883952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567605327
    },
    {
        "content": "<p>anyway, we're running up against my quota for this conversation. this was helpful.</p>",
        "id": 174883990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567605359
    },
    {
        "content": "<p>maybe, yeah</p>",
        "id": 174884038,
        "sender_full_name": "eddyb",
        "timestamp": 1567605366
    },
    {
        "content": "<p>a really cool thing is eqsat, but it requires something more advanced than CFG+SSA, (R)VSDG being one of the possible choices (you need to be able to share a lot of IR subgraphs)</p>\n<p>it lets you run many optimizations on a \"pick all the things that you can do, then do them\" basis, without forcing an ordering between them, and assuming your rules are sound, it keeps making derivations (and you can have thresholds so you're not generating an infinity of equally useless equivalent programs)</p>",
        "id": 174884279,
        "sender_full_name": "eddyb",
        "timestamp": 1567605534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> what do you mean?</p>",
        "id": 175765520,
        "sender_full_name": "RalfJ",
        "timestamp": 1568580620
    }
]