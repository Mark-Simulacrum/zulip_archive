[
    {
        "content": "<p>Is there something preventing us from creating mir like this?</p>\n<div class=\"codehilite\"><pre><span></span><code>        StorageLive(_2);                 // scope 0 at ./example.rs:3:9: 3:10\n        _2 = Eq(_1, const 3_i32);   // scope 0 at ./example.rs:3:13: 3:21\n        StorageLive(_4);                 // scope 1 at ./example.rs:4:9: 4:10\n        _4 = &amp;mut _1;                    // scope 1 at ./example.rs:4:13: 4:21\n        (*_4) = const 4_i32;             // scope 2 at ./example.rs:5:5: 5:11\n        StorageLive(_5);                 // scope 2 at ./example.rs:6:8: 6:9\n        _5 = _2;                         // scope 2 at ./example.rs:6:8: 6:9\n        switchInt(_5) -&gt; [false: bb1, otherwise: bb2];\n</code></pre></div>",
        "id": 212278083,
        "sender_full_name": "lcnr",
        "timestamp": 1601891500
    },
    {
        "content": "<p>using a local by copy and then taking a mutable reference to that local</p>",
        "id": 212278168,
        "sender_full_name": "lcnr",
        "timestamp": 1601891552
    },
    {
        "content": "<p>I am kind of afraid that we misoptimize something like this <a href=\"https://rust.godbolt.org/z/865eW4\">https://rust.godbolt.org/z/865eW4</a></p>",
        "id": 212278181,
        "sender_full_name": "lcnr",
        "timestamp": 1601891574
    },
    {
        "content": "<p>but we first insert</p>\n<div class=\"codehilite\"><pre><span></span><code>_2 = _1\n_4 = Eq(move _2, const 3_i32);\n</code></pre></div>",
        "id": 212278217,
        "sender_full_name": "lcnr",
        "timestamp": 1601891620
    },
    {
        "content": "<p>so this seems like it might be an non issue, even if I would feel safer if we only apply <code>SimplyfyComparisionIntegral</code> if the op is a move (or we explicitly check if that local is leaked after the comparision)</p>",
        "id": 212278299,
        "sender_full_name": "lcnr",
        "timestamp": 1601891669
    },
    {
        "content": "<p>(recently had this misoptimization in my own compiler <a href=\"https://github.com/lcnr/computer/blob/2e75238dd3f10ca8d856aadfa3677007a4575b5a/boulder/lir/src/optimize/simplify_comparision_branch.rs#L24\">https://github.com/lcnr/computer/blob/2e75238dd3f10ca8d856aadfa3677007a4575b5a/boulder/lir/src/optimize/simplify_comparision_branch.rs#L24</a>)</p>",
        "id": 212278515,
        "sender_full_name": "lcnr",
        "timestamp": 1601891846
    }
]