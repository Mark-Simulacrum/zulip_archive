[
    {
        "content": "<p>Hey hi, I've been following the constant propagation efforts here. Do you think there is some kind of low hanging fruit to work on?</p>",
        "id": 166493120,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1558734284
    },
    {
        "content": "<p>hmm... <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> is munching away at const prop right now. They probably have  a better picture of the situation right now</p>",
        "id": 166493623,
        "sender_full_name": "oli",
        "timestamp": 1558734891
    },
    {
        "content": "<p>So I'm working on implementing support for the <code>Len</code> operand. Here's the other stuff I'm aware of but not (yet) actively working on: support for <code>Immediate</code>s, adding more tests in <code>src/test/mir-opt/const-prop/</code>, Zoxc mentioned moving const-prop earlier so that we can handle <code>Yield</code> termiantors.</p>",
        "id": 166504698,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558750011
    },
    {
        "content": "<p>There's probably other stuff but that's all I can think of for now</p>",
        "id": 166504709,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558750027
    },
    {
        "content": "<p>what should happen when an <code>Immediate</code> inner  scalar is undef?</p>",
        "id": 166512613,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1558764162
    },
    {
        "content": "<p>We should stop trying to const-prop that value if it's undef. Most of the <code>eval_*</code> functions return <code>Option</code> so you can just <code>return None</code> in that case.</p>\n<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Correct me if I'm wrong ^</p>",
        "id": 166515058,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558768645
    },
    {
        "content": "<p>I'd like to take care of adding support for <code>Immediate</code>s then</p>",
        "id": 166536595,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1558805803
    },
    {
        "content": "<p>Sorry, I just realized, when I was saying <code>Immediate</code>, what I actually meant was <code>Indirect</code> <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/interpret/enum.Operand.html#variant.Indirect\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/interpret/enum.Operand.html#variant.Indirect\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/interpret/enum.Operand.html#variant.Indirect</a></p>",
        "id": 166542213,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558815541
    },
    {
        "content": "<p>We already handle <code>Immediate</code></p>",
        "id": 166542229,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558815565
    },
    {
        "content": "<p>The code you need to change is in this function <a href=\"https://github.com/rust-lang/rust/blob/02f5786a324c40b2d8b2d0df98456e48fb45d30c/src/librustc_mir/transform/const_prop.rs#L517\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/02f5786a324c40b2d8b2d0df98456e48fb45d30c/src/librustc_mir/transform/const_prop.rs#L517\">https://github.com/rust-lang/rust/blob/02f5786a324c40b2d8b2d0df98456e48fb45d30c/src/librustc_mir/transform/const_prop.rs#L517</a></p>",
        "id": 166542283,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558815621
    },
    {
        "content": "<p>Great! I'll start reading a little bit and come back with questions :)</p>",
        "id": 166640530,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1558966295
    },
    {
        "content": "<p>At the end this should get the <code>MemPlace</code> inside the <code>Indirect</code> and using the <code>Scalar</code> inside it, update <code>rval</code> as in <a href=\"https://github.com/rust-lang/rust/blob/02f5786a324c40b2d8b2d0df98456e48fb45d30c/src/librustc_mir/transform/const_prop.rs#L528\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/02f5786a324c40b2d8b2d0df98456e48fb45d30c/src/librustc_mir/transform/const_prop.rs#L528\">https://github.com/rust-lang/rust/blob/02f5786a324c40b2d8b2d0df98456e48fb45d30c/src/librustc_mir/transform/const_prop.rs#L528</a>, right?</p>",
        "id": 166877852,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559187655
    },
    {
        "content": "<p>you need to read the scalar from the <code>MemPlace</code> first</p>",
        "id": 166886568,
        "sender_full_name": "oli",
        "timestamp": 1559200762
    },
    {
        "content": "<p>the <code>MemPlace</code> just refers to memory</p>",
        "id": 166886569,
        "sender_full_name": "oli",
        "timestamp": 1559200772
    },
    {
        "content": "<p>so that \"Scalar\" is actually a pointer into memory</p>",
        "id": 166886575,
        "sender_full_name": "oli",
        "timestamp": 1559200788
    },
    {
        "content": "<p>may just be an integer in the case of ZSTs</p>",
        "id": 166886579,
        "sender_full_name": "oli",
        "timestamp": 1559200796
    },
    {
        "content": "<p>because reading a ZST doesn't actually read from memory, so you don't need actual backing memory</p>",
        "id": 166886628,
        "sender_full_name": "oli",
        "timestamp": 1559200816
    },
    {
        "content": "<p>And how do I get the real scalar that the memplace's scalar is pointing to?</p>",
        "id": 166928496,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559237575
    },
    {
        "content": "<p>I think you want <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/interpret/struct.InterpretCx.html#method.deref_operand\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/interpret/struct.InterpretCx.html#method.deref_operand\"><code>deref_operand</code></a></p>",
        "id": 166957918,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559262929
    },
    {
        "content": "<p>great!</p>",
        "id": 166958661,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559263758
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> Let me know if you have any questions. I have some free time tonight/tomorrow if you need any assistance <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 167025921,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559330625
    },
    {
        "content": "<p>Are you sure you aren't a magician? I was just creating the branch to start working on this hahahaha</p>",
        "id": 167026289,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559330874
    },
    {
        "content": "<p>Ok more or less i have this</p>",
        "id": 167028341,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559332319
    },
    {
        "content": "<p>to use <code>deref_operand</code> i need an <code>OpTy</code>, which can be obtained using <code>eval_operand</code>, to get the operand I used <code>operand_with_scalar(ptr, value.layout.ty, span)</code> where  <code>ptr</code>  is the scalar inside the <code>MemPlace</code>.</p>",
        "id": 167028458,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559332388
    },
    {
        "content": "<p>That looks correct to me yeah</p>",
        "id": 167028509,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559332434
    },
    {
        "content": "<p>now the thing is,  <code>deref_operand</code> returns an <code>MPlaceTy</code>, how do I produce an <code>Rvalue</code> from it?</p>",
        "id": 167028620,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559332499
    },
    {
        "content": "<p>So</p>",
        "id": 167029164,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559332875
    },
    {
        "content": "<p>You need to do something kind of like what we do here <a href=\"https://github.com/rust-lang/rust/blob/75f464481ed8c924086fc0b9a2d31841bbdbcabd/src/librustc_mir/transform/const_prop.rs#L504\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/75f464481ed8c924086fc0b9a2d31841bbdbcabd/src/librustc_mir/transform/const_prop.rs#L504\">https://github.com/rust-lang/rust/blob/75f464481ed8c924086fc0b9a2d31841bbdbcabd/src/librustc_mir/transform/const_prop.rs#L504</a></p>",
        "id": 167029191,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559332906
    },
    {
        "content": "<p>But instead of <code>ty::Const::from_scalar()</code>, you need to create a <code>Const</code> whose value is <code>ConstValue::ByRef</code> <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/interpret/enum.ConstValue.html#variant.ByRef\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/interpret/enum.ConstValue.html#variant.ByRef\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/interpret/enum.ConstValue.html#variant.ByRef</a></p>",
        "id": 167029325,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559332991
    },
    {
        "content": "<p>If that makes sense...</p>",
        "id": 167029454,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559333078
    },
    {
        "content": "<blockquote>\n<p>If that makes sense...</p>\n</blockquote>\n<p>what do you mean?</p>",
        "id": 167030019,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559333475
    },
    {
        "content": "<p>Basically you need to add a function similar to <code>operand_from_scalar</code> but for references (<code>operand_from_ref</code> maybe?)</p>",
        "id": 167030556,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559333863
    },
    {
        "content": "<p>The main difference between these functions is going to be what the <code>ty::Const</code> value is</p>",
        "id": 167030633,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559333894
    },
    {
        "content": "<p>Here we create a <code>Const</code> which points to a scalar value <a href=\"https://github.com/rust-lang/rust/blob/75f464481ed8c924086fc0b9a2d31841bbdbcabd/src/librustc_mir/transform/const_prop.rs#L510\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/75f464481ed8c924086fc0b9a2d31841bbdbcabd/src/librustc_mir/transform/const_prop.rs#L510\">https://github.com/rust-lang/rust/blob/75f464481ed8c924086fc0b9a2d31841bbdbcabd/src/librustc_mir/transform/const_prop.rs#L510</a></p>",
        "id": 167030665,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559333914
    },
    {
        "content": "<p>But in the new function, we need to create a <code>Const</code> which points to that <code>MPlace</code></p>",
        "id": 167030731,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559333931
    },
    {
        "content": "<p>There should be a way to get a <code>Pointer</code> and <code>Allocation</code> from the <code>MPlace</code> you have</p>",
        "id": 167030799,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559333986
    },
    {
        "content": "<p>Ok let me see and I'll come back to you</p>",
        "id": 167031057,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559334158
    },
    {
        "content": "<blockquote>\n<p>But in the new function, we need to create a <code>Const</code> which points to that <code>MPlace</code></p>\n</blockquote>\n<p>When you say that <code>MPlace</code> you mean the <code>MPlaceTy</code>, right?</p>",
        "id": 167031600,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559334534
    },
    {
        "content": "<p>Yeah</p>",
        "id": 167031658,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559334593
    },
    {
        "content": "<p><code>MPlaceTy</code> is basically just a tuple of <code>(MPlace, TyLayout)</code></p>",
        "id": 167031726,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559334608
    },
    {
        "content": "<p>ok :P</p>",
        "id": 167031739,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559334626
    },
    {
        "content": "<p>Ok i can get the <code>Pointer</code> from <code>MPlaceTy::vtable</code> but this return a result, how are errors handled here? should <code>operand_from_ref</code> return a result?</p>",
        "id": 167032057,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559334858
    },
    {
        "content": "<p>It can probably just return <code>Option&lt;Operand&lt;'tcx&gt;&gt;</code></p>",
        "id": 167032302,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559335050
    },
    {
        "content": "<p>Then the calling code can use <code>self.operand_from_ref(...)?</code></p>",
        "id": 167032317,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559335064
    },
    {
        "content": "<p>mmm... but  <code>replace_with_const</code> returns <code>()</code></p>",
        "id": 167032735,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559335375
    },
    {
        "content": "<p>oh, good point</p>",
        "id": 167032945,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559335508
    },
    {
        "content": "<blockquote>\n<p>to use <code>deref_operand</code> i need an <code>OpTy</code>, which can be obtained using <code>eval_operand</code>, to get the operand I used <code>operand_with_scalar(ptr, value.layout.ty, span)</code> where  <code>ptr</code>  is the scalar inside the <code>MemPlace</code>.</p>\n</blockquote>\n<p>also to call <code>eval_operand</code> in need the <code>source_info</code></p>",
        "id": 167032979,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559335537
    },
    {
        "content": "<p>You can do <code>if let Some(...) = self.operand_from_ref(...)</code> then</p>",
        "id": 167032982,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559335538
    },
    {
        "content": "<p>If we get <code>None</code> that's not an error, it just means we can't const propagate</p>",
        "id": 167033005,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559335554
    },
    {
        "content": "<p>oh damn and <code>vtable</code> is private, i cannot use it</p>",
        "id": 167033222,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559335683
    },
    {
        "content": "<p>Do you need <code>vtable</code>?</p>",
        "id": 167033317,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559335780
    },
    {
        "content": "<p>well, I used to get the <code>Pointer</code> from the <code>MPlaceTy</code></p>",
        "id": 167033402,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559335837
    },
    {
        "content": "<p>Hmm... I'm not sure I'm following</p>",
        "id": 167033518,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559335926
    },
    {
        "content": "<p>Can you explain a bit more?</p>",
        "id": 167033525,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559335932
    },
    {
        "content": "<p>yeah this is messy</p>",
        "id": 167033546,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559335961
    },
    {
        "content": "<p>let me see</p>",
        "id": 167033549,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559335962
    },
    {
        "content": "<p>Oh do you mean <code>MPlaceTy::vtable()</code>?</p>",
        "id": 167033589,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559336009
    },
    {
        "content": "<p>yep</p>",
        "id": 167033593,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559336014
    },
    {
        "content": "<p>I don't think that's what you want</p>",
        "id": 167033600,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559336024
    },
    {
        "content": "<p>should i just call <code>to_ptr</code>?</p>",
        "id": 167033658,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559336044
    },
    {
        "content": "<p>That (<code>vtable()</code>) will give you a pointer to the object's vtable (if that's a valid operation for the kind of reference you have)</p>",
        "id": 167033661,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559336046
    },
    {
        "content": "<p>Yeah, I think  <code>to_ptr</code> is what you want</p>",
        "id": 167033672,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559336062
    },
    {
        "content": "<p>Not sure if it counts as a low hanging fruit, but <a href=\"https://github.com/rust-lang/rust/issues/66234\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66234\">https://github.com/rust-lang/rust/issues/66234</a> at least has parts that shouldn't be enormously hard to implement</p>",
        "id": 180287313,
        "sender_full_name": "oli",
        "timestamp": 1573260089
    },
    {
        "content": "<p>count me in :)</p>",
        "id": 180299633,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1573281674
    },
    {
        "content": "<p>Filed <a href=\"https://github.com/rust-lang/rust/pull/66282\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/66282\">https://github.com/rust-lang/rust/pull/66282</a> <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 180405233,
        "sender_full_name": "centril",
        "timestamp": 1573460046
    }
]