[
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/77355\">#77355</a></p>\n<p><code>if matches!(..)</code> currently results in two branches, one setting a local to true or false and the second one actually branching on that local, what would be <del>the best</del> <em>a good</em> way to optimize this (and probably also <code>if !matches!(...)</code>)?</p>",
        "id": 211721927,
        "sender_full_name": "lcnr",
        "timestamp": 1601448981
    },
    {
        "content": "<p>Have you tried with mir opt level 2 or 3? I'm almost certain I reviewed a PR that fixes this</p>",
        "id": 211724041,
        "sender_full_name": "oli",
        "timestamp": 1601450793
    },
    {
        "content": "<p><code>-Zmir-opt-level=3</code></p>",
        "id": 211724332,
        "sender_full_name": "lcnr",
        "timestamp": 1601451012
    },
    {
        "content": "<p><a href=\"https://godbolt.org/z/8K79o8\">https://godbolt.org/z/8K79o8</a></p>",
        "id": 211724372,
        "sender_full_name": "lcnr",
        "timestamp": 1601451047
    },
    {
        "content": "<p>hmm... I'm searching for that PR now</p>",
        "id": 211725564,
        "sender_full_name": "oli",
        "timestamp": 1601452013
    },
    {
        "content": "<p>aaah, it works with <code>matches!(num, Foo::B)</code> but not with `matches!(num, Foo::B | Foo::C)</p>",
        "id": 211725802,
        "sender_full_name": "oli",
        "timestamp": 1601452130
    },
    {
        "content": "<p>what opt pass is responsible here?</p>",
        "id": 211727071,
        "sender_full_name": "lcnr",
        "timestamp": 1601453170
    },
    {
        "content": "<p>and how easy is it to extend that to group match arms with identical targets together</p>",
        "id": 211727084,
        "sender_full_name": "lcnr",
        "timestamp": 1601453190
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_mir/src/transform/match_branches.rs\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_mir/src/transform/match_branches.rs</a></p>",
        "id": 211727633,
        "sender_full_name": "oli",
        "timestamp": 1601453581
    },
    {
        "content": "<p>should be fairly easy to adjust by just checking whether there are only two destinations in the switch targets, even if there are multiple conditions</p>",
        "id": 211727669,
        "sender_full_name": "oli",
        "timestamp": 1601453616
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/c0127e4dbf3a9d3a67ddb1da19f8441019aab8f8/compiler/rustc_mir/src/transform/match_branches.rs#L51\">https://github.com/rust-lang/rust/blob/c0127e4dbf3a9d3a67ddb1da19f8441019aab8f8/compiler/rustc_mir/src/transform/match_branches.rs#L51</a> is very conservative</p>",
        "id": 211727692,
        "sender_full_name": "oli",
        "timestamp": 1601453631
    },
    {
        "content": "<p>So my initial idea was to replace <code>bb1</code> with <code>bb4</code> and <code>bb2</code> with <code>bb5</code></p>",
        "id": 211728373,
        "sender_full_name": "lcnr",
        "timestamp": 1601454041
    },
    {
        "content": "<p>extending what we are currently doing in <code>match_branches</code> would mean that we use</p>\n<div class=\"codehilite\"><pre><span></span><code>_temp1 = Eq(move _3, const 1);\n_temp2 = Eq(move_3, const 2);\n_2 = BinOr(move _temp1, move _temp2);\n</code></pre></div>",
        "id": 211728503,
        "sender_full_name": "lcnr",
        "timestamp": 1601454135
    },
    {
        "content": "<p>uh</p>",
        "id": 211728697,
        "sender_full_name": "oli",
        "timestamp": 1601454282
    },
    {
        "content": "<p>why would it mean that?</p>",
        "id": 211728701,
        "sender_full_name": "oli",
        "timestamp": 1601454289
    },
    {
        "content": "<p>oh</p>",
        "id": 211728831,
        "sender_full_name": "oli",
        "timestamp": 1601454385
    },
    {
        "content": "<p>the current code is already buggy, isn't it</p>",
        "id": 211728843,
        "sender_full_name": "oli",
        "timestamp": 1601454391
    },
    {
        "content": "<p>I don't think it's buggy <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> why do you think that?</p>",
        "id": 211728875,
        "sender_full_name": "lcnr",
        "timestamp": 1601454411
    },
    {
        "content": "<p>it will mis-optimize if the const bool assignment is used within the same block and not just for the switch</p>",
        "id": 211728880,
        "sender_full_name": "oli",
        "timestamp": 1601454416
    },
    {
        "content": "<p>but it only allows const bool assignments in these blocks</p>",
        "id": 211728918,
        "sender_full_name": "lcnr",
        "timestamp": 1601454447
    },
    {
        "content": "<p>doesn't it?</p>",
        "id": 211728932,
        "sender_full_name": "lcnr",
        "timestamp": 1601454459
    },
    {
        "content": "<p>nope, it allows any kind of 100% equal statement in those blocks, too</p>",
        "id": 211728936,
        "sender_full_name": "oli",
        "timestamp": 1601454464
    },
    {
        "content": "<p>and moves them around</p>",
        "id": 211728941,
        "sender_full_name": "oli",
        "timestamp": 1601454466
    },
    {
        "content": "<p>not sure if we have any code where that generality is necessary for though</p>",
        "id": 211728999,
        "sender_full_name": "oli",
        "timestamp": 1601454486
    },
    {
        "content": "<p>but isn't that still fine, as we keep the assignments in order?</p>",
        "id": 211729013,
        "sender_full_name": "lcnr",
        "timestamp": 1601454500
    },
    {
        "content": "<p>yea, but we remove the assignment from the bool</p>",
        "id": 211729073,
        "sender_full_name": "oli",
        "timestamp": 1601454546
    },
    {
        "content": "<p>so if we had <code>_temp = const true;</code> in one block and <code>_temp = const false</code> in the other and <code>_x = _temp</code> in both, then that would now read from an uninit variable</p>",
        "id": 211729103,
        "sender_full_name": "oli",
        "timestamp": 1601454581
    },
    {
        "content": "<p>won't this add<br>\n_temp = Eq(_branch_var, branch_int)</p>",
        "id": 211729189,
        "sender_full_name": "lcnr",
        "timestamp": 1601454610
    },
    {
        "content": "<p>anyway, this is easy to solve, we just bail out on anything but a <code>_temp = const X;</code> in that block, as we don't have an example that actually uses it</p>",
        "id": 211729194,
        "sender_full_name": "oli",
        "timestamp": 1601454614
    },
    {
        "content": "<p>which initializes temp</p>",
        "id": 211729197,
        "sender_full_name": "lcnr",
        "timestamp": 1601454618
    },
    {
        "content": "<p>sure but then you need the or-logic and everything, too</p>",
        "id": 211729205,
        "sender_full_name": "oli",
        "timestamp": 1601454625
    },
    {
        "content": "<p>(for your example with multiple variants)</p>",
        "id": 211729250,
        "sender_full_name": "oli",
        "timestamp": 1601454657
    },
    {
        "content": "<p>let's simplify first to things we actually have unit tests for</p>",
        "id": 211729267,
        "sender_full_name": "oli",
        "timestamp": 1601454673
    },
    {
        "content": "<p>or... let my try to manually generate such code</p>",
        "id": 211729287,
        "sender_full_name": "oli",
        "timestamp": 1601454692
    },
    {
        "content": "<p>still a bit confused</p>",
        "id": 211729302,
        "sender_full_name": "lcnr",
        "timestamp": 1601454709
    },
    {
        "content": "<p>one moment</p>",
        "id": 211729304,
        "sender_full_name": "oli",
        "timestamp": 1601454714
    },
    {
        "content": "<p>does the current implementation result in incorrect code?</p>",
        "id": 211729328,
        "sender_full_name": "lcnr",
        "timestamp": 1601454723
    },
    {
        "content": "<p>trying to build a miscompilation on nightly</p>",
        "id": 211729351,
        "sender_full_name": "oli",
        "timestamp": 1601454724
    },
    {
        "content": "<p>it does under very weird circumstances</p>",
        "id": 211729367,
        "sender_full_name": "oli",
        "timestamp": 1601454732
    },
    {
        "content": "<p>hmm... we have too many optimizations interacting here: <a href=\"https://godbolt.org/z/GcYPeT\">https://godbolt.org/z/GcYPeT</a></p>",
        "id": 211731542,
        "sender_full_name": "oli",
        "timestamp": 1601456130
    },
    {
        "content": "<p>I can't get it to miscompile</p>",
        "id": 211731555,
        "sender_full_name": "oli",
        "timestamp": 1601456139
    },
    {
        "content": "<p>can you write out the mir which would get misoptimized directly?</p>",
        "id": 211731962,
        "sender_full_name": "lcnr",
        "timestamp": 1601456354
    },
    {
        "content": "<p>I believe <a href=\"https://gist.github.com/oli-obk/2c703799342217ea8b9dbc596e08ee6b\">https://gist.github.com/oli-obk/2c703799342217ea8b9dbc596e08ee6b</a> will get misoptimized</p>",
        "id": 211736979,
        "sender_full_name": "oli",
        "timestamp": 1601459338
    },
    {
        "content": "<p>is it important to use <code>switchInt(move _3) -&gt; [1_isize: bb2, 2_isize: bb2, otherwise: bb1];</code> here,<br>\nor would <code>switchInt(move _3) -&gt; [1_isize: bb2, otherwise: bb1];</code> also work?</p>",
        "id": 211737459,
        "sender_full_name": "lcnr",
        "timestamp": 1601459654
    },
    {
        "content": "<p>for the simpler switch (which we optimize rn), this would get optimized to the following, wouldn't it?</p>\n<div class=\"codehilite\"><pre><span></span><code>bb0: {\n        StorageLive(_2);                 // scope 0 at /rustc/381b445ff5751f9f39ec672b623372dff09c276e/library/core/src/macros/mod.rs:246:9: 249:10\n        _3 = discriminant(_1);           // scope 0 at ./example.rs:11:22: 11:28\n        _2 = Eq(move _3, const 1);\n        _4 = _2 as i32;\n        goto -&gt; bb3;\n    }\n</code></pre></div>",
        "id": 211737720,
        "sender_full_name": "lcnr",
        "timestamp": 1601459822
    },
    {
        "content": "<p>which seems correct to me</p>",
        "id": 211737732,
        "sender_full_name": "lcnr",
        "timestamp": 1601459828
    },
    {
        "content": "<p>yea, we need that switch, otherwise you're ignoring the <code>| Foo::C</code> and only doing the body if <code>Foo::B</code></p>",
        "id": 211758064,
        "sender_full_name": "oli",
        "timestamp": 1601472206
    },
    {
        "content": "<p>your example specifically uses <code>Foo::B | Foo::C</code></p>",
        "id": 211758116,
        "sender_full_name": "oli",
        "timestamp": 1601472242
    },
    {
        "content": "<p>so you need 3 branches, one for <code>B</code> one for <code>C</code> (going to the same block) and one for everything else</p>",
        "id": 211758184,
        "sender_full_name": "oli",
        "timestamp": 1601472260
    },
    {
        "content": "<p>oh wait, you're asking if the <code>matches!(foo, Foo::B)</code> also misoptimizes, yes</p>",
        "id": 211758354,
        "sender_full_name": "oli",
        "timestamp": 1601472341
    },
    {
        "content": "<p>that's a slightly different problem, but the same issue essentially</p>",
        "id": 211758475,
        "sender_full_name": "oli",
        "timestamp": 1601472386
    },
    {
        "content": "<p>oh yea</p>",
        "id": 211758691,
        "sender_full_name": "oli",
        "timestamp": 1601472488
    },
    {
        "content": "<p>no misoptimization, you're right</p>",
        "id": 211758700,
        "sender_full_name": "oli",
        "timestamp": 1601472492
    },
    {
        "content": "<p>I forgot about the <code>Eq</code> being inserted</p>",
        "id": 211758723,
        "sender_full_name": "oli",
        "timestamp": 1601472501
    },
    {
        "content": "<p>I thought we were forwarding directly to the switch, but that is <em>another</em> optimization <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 211758759,
        "sender_full_name": "oli",
        "timestamp": 1601472519
    },
    {
        "content": "<p>so if we reorder opts, the <code>Eq</code> would disappear again</p>",
        "id": 211758781,
        "sender_full_name": "oli",
        "timestamp": 1601472529
    },
    {
        "content": "<p>(which we should totally do)</p>",
        "id": 211758798,
        "sender_full_name": "oli",
        "timestamp": 1601472535
    },
    {
        "content": "<p>do we opt <code>_temp = (a == 3) || (a == 4); switchInt(_temp)</code> to a branch on a directly</p>",
        "id": 211758999,
        "sender_full_name": "lcnr",
        "timestamp": 1601472620
    },
    {
        "content": "<p>probably not <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 211759016,
        "sender_full_name": "lcnr",
        "timestamp": 1601472627
    },
    {
        "content": "<p>nope</p>",
        "id": 211759056,
        "sender_full_name": "oli",
        "timestamp": 1601472643
    },
    {
        "content": "<p>but we can tune the optimization to start handling chains</p>",
        "id": 211759073,
        "sender_full_name": "oli",
        "timestamp": 1601472653
    },
    {
        "content": "<p>so we probably still have suboptimal code for matches with multiple variants here, even if we extend <code>match_branches</code> to insert bitors</p>",
        "id": 211759129,
        "sender_full_name": "lcnr",
        "timestamp": 1601472678
    },
    {
        "content": "<p>yes</p>",
        "id": 211759567,
        "sender_full_name": "oli",
        "timestamp": 1601472887
    },
    {
        "content": "<p>but less suboptimal</p>",
        "id": 211759586,
        "sender_full_name": "oli",
        "timestamp": 1601472894
    },
    {
        "content": "<p>and with a path forward for fixing it</p>",
        "id": 211759597,
        "sender_full_name": "oli",
        "timestamp": 1601472899
    },
    {
        "content": "<blockquote>\n<p>but we can tune the optimization to start handling chains</p>\n</blockquote>\n<p>what exactly do you mean with that?</p>",
        "id": 211759656,
        "sender_full_name": "lcnr",
        "timestamp": 1601472923
    },
    {
        "content": "<p><code>SimplifyComparisonIntegral</code> optimizes <code>_x = Eq(_y, 42); switchInt(_x, [false =&gt; bb1, otherwise =&gt; bb2])</code> to <code>switchInt(_y, [42 =&gt; bb2, otherwise =&gt; bb1])</code></p>",
        "id": 211759874,
        "sender_full_name": "oli",
        "timestamp": 1601473020
    },
    {
        "content": "<p>we could teach that optimization about the multi-eq chained by <code>Or</code> situation</p>",
        "id": 211759947,
        "sender_full_name": "oli",
        "timestamp": 1601473056
    },
    {
        "content": "<p>are you planning on working on this or can I look into mentoring someone in doing it?</p>",
        "id": 211759955,
        "sender_full_name": "oli",
        "timestamp": 1601473059
    },
    {
        "content": "<p>feel free to mentor someone else <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> while I would be interested in working on this myself I don't think I actually have the time to do so rn</p>",
        "id": 211760344,
        "sender_full_name": "lcnr",
        "timestamp": 1601473211
    },
    {
        "content": "<p>heh, gotcha</p>",
        "id": 211760633,
        "sender_full_name": "oli",
        "timestamp": 1601473325
    },
    {
        "content": "<p>Sorry for digging up an older thread, but for the miscompilation, I believe there were some subsequent PRs after the initial implementation that corrected the errors</p>",
        "id": 212941318,
        "sender_full_name": "jknodt",
        "timestamp": 1602375807
    },
    {
        "content": "<p>There were also hypothetical miscompiles. Not sure if we fixed those, too.</p>",
        "id": 212954269,
        "sender_full_name": "oli",
        "timestamp": 1602402869
    },
    {
        "content": "<p>I need to reread the opt before being able to give you reliable info</p>",
        "id": 212954271,
        "sender_full_name": "oli",
        "timestamp": 1602402890
    }
]