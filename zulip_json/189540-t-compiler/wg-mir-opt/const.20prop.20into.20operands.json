[
    {
        "content": "<p>propagating into operands is an independent thing of the cross basic-block optimization, if someone wants to implement that for more things than call terminators, I'd be happy to mentor</p>",
        "id": 204339934,
        "sender_full_name": "oli",
        "timestamp": 1595149090
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  wanna give me some pointers, this seems interesting</p>",
        "id": 204340338,
        "sender_full_name": "lcnr",
        "timestamp": 1595149854
    },
    {
        "content": "<p>Basically we have this very specific optimization for const propping into the operands in function arguments: <a href=\"https://github.com/rust-lang/rust/blob/0701419e96d94e5493c7ebfcecb66511ab0aa778/src/librustc_mir/transform/const_prop.rs#L1102\">https://github.com/rust-lang/rust/blob/0701419e96d94e5493c7ebfcecb66511ab0aa778/src/librustc_mir/transform/const_prop.rs#L1102</a></p>",
        "id": 204341046,
        "sender_full_name": "oli",
        "timestamp": 1595151090
    },
    {
        "content": "<p>I think we can remove most of that and add a <code>visit_operand</code> method to the visitor that does the <code>Operand::Copy</code> or <code>Operand::Move</code> to <code>Operand::Const</code> conversion if the local is a  known constant</p>",
        "id": 204341121,
        "sender_full_name": "oli",
        "timestamp": 1595151150
    },
    {
        "content": "<p>Thanks <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 204341529,
        "sender_full_name": "lcnr",
        "timestamp": 1595151947
    },
    {
        "content": "<p>Awesome! I was going to start this after doing Boolean identities but the more the merrier :)</p>",
        "id": 204342364,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1595153409
    },
    {
        "content": "<blockquote>\n<p>The following code would appear to be incomplete, because<br>\n                          the function <code>Operand::place()</code> returns <code>None</code> if the<br>\n<code>Operand</code> is of the variant <code>Operand::Constant</code>.</p>\n</blockquote>",
        "id": 204342551,
        "sender_full_name": "lcnr",
        "timestamp": 1595153870
    },
    {
        "content": "<p>what should be done for <code>Operand::Constant</code> here, afaict we go from <code>Operand::Copy|Move</code> to <code>Operand::Constant</code></p>",
        "id": 204342590,
        "sender_full_name": "lcnr",
        "timestamp": 1595153909
    },
    {
        "content": "<p>so I don't see what we would do for constants if they appeared here</p>",
        "id": 204342591,
        "sender_full_name": "lcnr",
        "timestamp": 1595153937
    },
    {
        "content": "<p>don't do anything for <code>Operand::Const</code></p>",
        "id": 204342598,
        "sender_full_name": "oli",
        "timestamp": 1595153956
    },
    {
        "content": "<p>it's already constant ^^ nothing to propagate here</p>",
        "id": 204342599,
        "sender_full_name": "oli",
        "timestamp": 1595153965
    },
    {
        "content": "<p>yeah, but I don't understand that comment rn</p>",
        "id": 204342600,
        "sender_full_name": "lcnr",
        "timestamp": 1595153976
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/0701419e96d94e5493c7ebfcecb66511ab0aa778/src/librustc_mir/transform/const_prop.rs#L1108-L1111\">https://github.com/rust-lang/rust/blob/0701419e96d94e5493c7ebfcecb66511ab0aa778/src/librustc_mir/transform/const_prop.rs#L1108-L1111</a></p>",
        "id": 204342604,
        "sender_full_name": "lcnr",
        "timestamp": 1595153999
    },
    {
        "content": "<p>oh there's a comment? <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 204342605,
        "sender_full_name": "oli",
        "timestamp": 1595154000
    },
    {
        "content": "<p>I want to replace this with <code>for opr in args { self.visit_operand(opr, location) }</code></p>",
        "id": 204342651,
        "sender_full_name": "lcnr",
        "timestamp": 1595154025
    },
    {
        "content": "<p>oooh</p>",
        "id": 204342657,
        "sender_full_name": "oli",
        "timestamp": 1595154040
    },
    {
        "content": "<p>I think we should just have <code>walk_terminator</code> directly at the beginning of <code>visit_terminator</code></p>",
        "id": 204342707,
        "sender_full_name": "oli",
        "timestamp": 1595154126
    },
    {
        "content": "<p>then you don't need any replacement code for the thing you linked</p>",
        "id": 204342711,
        "sender_full_name": "oli",
        "timestamp": 1595154143
    },
    {
        "content": "<p>don't we already use <code>super_terminator</code> here?</p>",
        "id": 204342720,
        "sender_full_name": "lcnr",
        "timestamp": 1595154175
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/0701419e96d94e5493c7ebfcecb66511ab0aa778/src/librustc_mir/transform/const_prop.rs#L999\">https://github.com/rust-lang/rust/blob/0701419e96d94e5493c7ebfcecb66511ab0aa778/src/librustc_mir/transform/const_prop.rs#L999</a></p>",
        "id": 204342727,
        "sender_full_name": "lcnr",
        "timestamp": 1595154188
    },
    {
        "content": "<p>do all mir-opt-tests run with <code>mir-opt-level =2</code> by default?</p>",
        "id": 204342861,
        "sender_full_name": "lcnr",
        "timestamp": 1595154390
    },
    {
        "content": "<p>this felt slightly too easy so I might have missed something here: <a href=\"https://github.com/rust-lang/rust/issues/74507\">#74507</a></p>",
        "id": 204343074,
        "sender_full_name": "lcnr",
        "timestamp": 1595154798
    },
    {
        "content": "<p>O_o</p>",
        "id": 204343241,
        "sender_full_name": "oli",
        "timestamp": 1595155106
    },
    {
        "content": "<p>I think you can remove the <code>TerminatorKind::SwitchInt</code> arm, too</p>",
        "id": 204343253,
        "sender_full_name": "oli",
        "timestamp": 1595155162
    },
    {
        "content": "<p>and the <code>else</code> arm in <code>Assert</code></p>",
        "id": 204343261,
        "sender_full_name": "oli",
        "timestamp": 1595155199
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 204343456,
        "sender_full_name": "lcnr",
        "timestamp": 1595155540
    },
    {
        "content": "<p>As a casual observer, Iâ€™d love for these things to be documented as expected to improve compile performance (eg reduced LLVM IR) improve runtime performance (eg reduced code in the final executable) or other. </p>\n<p>But as a casual observer, I donâ€™t want to make any demands ðŸ˜‡</p>",
        "id": 204353024,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595168688
    },
    {
        "content": "<p>it doesn't look like this improves the compile time <a href=\"https://github.com/rust-lang/rust/pull/74507#issuecomment-660685419\">https://github.com/rust-lang/rust/pull/74507#issuecomment-660685419</a></p>\n<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> do we want to restrict this to <code>mir-opt-level = 2</code>?</p>",
        "id": 204364555,
        "sender_full_name": "lcnr",
        "timestamp": 1595183380
    },
    {
        "content": "<p>I think we do</p>",
        "id": 204364695,
        "sender_full_name": "FÃ©lix Fischer",
        "timestamp": 1595183592
    },
    {
        "content": "<p>This might be related to CGU partitioning, which has been a problem in the past (see: the propagation step into function arguments)</p>",
        "id": 204364750,
        "sender_full_name": "FÃ©lix Fischer",
        "timestamp": 1595183657
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> do you think that's the case here as well?</p>",
        "id": 204364754,
        "sender_full_name": "FÃ©lix Fischer",
        "timestamp": 1595183675
    },
    {
        "content": "<p>That this regresses because of the CGU partitioning scheme?</p>",
        "id": 204364765,
        "sender_full_name": "FÃ©lix Fischer",
        "timestamp": 1595183718
    },
    {
        "content": "<p>I think per <a href=\"https://github.com/rust-lang/compiler-team/issues/319\">https://github.com/rust-lang/compiler-team/issues/319</a> it needs to go under<code> mir-opt-level=3</code></p>",
        "id": 204364982,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1595184034
    },
    {
        "content": "<p>Oh, true!</p>",
        "id": 204365334,
        "sender_full_name": "FÃ©lix Fischer",
        "timestamp": 1595184663
    },
    {
        "content": "<p>:)</p>",
        "id": 204365336,
        "sender_full_name": "FÃ©lix Fischer",
        "timestamp": 1595184665
    },
    {
        "content": "<p>would it be worth investigating the regressions further?</p>",
        "id": 204367687,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1595187477
    },
    {
        "content": "<p>because doing this opt would unlock a lot of further opportunities for optimization</p>",
        "id": 204367729,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1595187498
    },
    {
        "content": "<p>looking at the worst test case it seems to spend 15s more in <code>LLVM_lto_optimize</code>, 5 more in <code>LLVM_thin_lto_import</code> and 8 more in <code>LLVM_module_codegen_emit_obj</code>, could it be that this transformation is too aggressive and blowing up the size of code that needs to be generated?</p>",
        "id": 204368025,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1595187969
    },
    {
        "content": "<p>there's been a design meeting on this CGU partitioning issue already, see <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.20codegen.20unit.20partitioning.20compiler-team.23281\">this topic</a> (I don't remember what the plan is, maybe the incremental compilation wg will look at it)</p>",
        "id": 204369143,
        "sender_full_name": "lqd",
        "timestamp": 1595189856
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312719\">@Xavier Denis</span> regarding the code generation: we seem to currently be at a local optimum, i.e. the code generation unit partitioning scheme for incremental compilation seems to be tuned in favor of how the compiler behaves today, and its performance gets easily broken by changes in how we generate code (e.g. with better MIR opts)</p>",
        "id": 204370713,
        "sender_full_name": "FÃ©lix Fischer",
        "timestamp": 1595192680
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> was looking into it. If I remember correctly, they did a refactor of the current scheme to prepare it for future changes.</p>",
        "id": 204370730,
        "sender_full_name": "FÃ©lix Fischer",
        "timestamp": 1595192755
    },
    {
        "content": "<p>Yeah, I think this is something the wg-incr-comp group wants to work on</p>",
        "id": 204370778,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1595192786
    },
    {
        "content": "<p>But, of course, anyone is welcome to dig in and look for solutions <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 204370780,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1595192805
    },
    {
        "content": "<p>They were also experimenting with generating a lot more CGUs, so that incremental compilation didn't have to re-do as much work as it is doing today for trivial changes like adding a println!</p>",
        "id": 204370782,
        "sender_full_name": "FÃ©lix Fischer",
        "timestamp": 1595192813
    },
    {
        "content": "<p>Because big CGUs help for runtime performance, which we don't really care about in debug incremental compilation</p>",
        "id": 204370800,
        "sender_full_name": "FÃ©lix Fischer",
        "timestamp": 1595192858
    },
    {
        "content": "<p>I would bet that at least half of the current \"implemented but disabled\" mir-opts regress just from the CGU partitioning scheme alone x3</p>",
        "id": 204370845,
        "sender_full_name": "FÃ©lix Fischer",
        "timestamp": 1595192927
    },
    {
        "content": "<p>is there any way to debug CGU partitioning? ie: is it possible to see how the units are determined before &amp; after a change?</p>",
        "id": 204371710,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1595194395
    },
    {
        "content": "<p>No idea. That sounds like it could be super useful to debug the quality of the scheme, tho!</p>",
        "id": 204372951,
        "sender_full_name": "FÃ©lix Fischer",
        "timestamp": 1595196628
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> please tell me if I'm pinging you too much, but I think you're like the only one in the team who's remotely familiar with the CGU partitioning step?</p>",
        "id": 204372962,
        "sender_full_name": "FÃ©lix Fischer",
        "timestamp": 1595196679
    },
    {
        "content": "<p>It's fine :)</p>",
        "id": 204377388,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1595205049
    },
    {
        "content": "<p>I've been using <code>RUSTC_LOG=rustc_mir::monomorphize::partitioning {rustc or cargo invocation here}</code></p>",
        "id": 204377399,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1595205099
    },
    {
        "content": "<p>I believe there's also a <code>-Z</code> flag which dumps some data on this</p>",
        "id": 204377406,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1595205110
    },
    {
        "content": "<p>yes <code>-Z print-mono-items=lazy</code>(or say, \"eager\") :)</p>",
        "id": 204401533,
        "sender_full_name": "lqd",
        "timestamp": 1595236808
    },
    {
        "content": "<p>(which I'm slowly working on, to try and make slightly more helpful for different use cases, like at least 1. seeing the gains of polymorphization AKA \"david's use case\", 2. seeing the advantages/drawbacks of our cgu partitioning scheme and process and diff that AKA \"wesley/wg-incr's\", 3. having more visibility into the amount/cost of monomorphizations and the likes AKA \"niko/matklad's/everyone with long compile times\")</p>",
        "id": 204401610,
        "sender_full_name": "lqd",
        "timestamp": 1595236885
    },
    {
        "content": "<p>it'd be awesome to print the size estimates of different items so that we could compare the before and after of a change like this and see what actually changed</p>",
        "id": 204415485,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1595248034
    },
    {
        "content": "<p>restricted this to mir-opt-level=3. As we now have the same locations for all operand propagations, this also disables it for <code>SwitchInt</code> and <code>Assert</code>, which isn't great. Not sure how to deal with that without just closing this PR <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 204607014,
        "sender_full_name": "lcnr",
        "timestamp": 1595368304
    },
    {
        "content": "<p>breaks an incremental test</p>",
        "id": 204638326,
        "sender_full_name": "lcnr",
        "timestamp": 1595404184
    },
    {
        "content": "<p>yea, see also my comment on the PR <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 204638335,
        "sender_full_name": "oli",
        "timestamp": 1595404199
    },
    {
        "content": "<p>let's not regress things while blocking only the advanced things under mir-opt-level 3</p>",
        "id": 204638395,
        "sender_full_name": "oli",
        "timestamp": 1595404234
    },
    {
        "content": "<p>i still want to know why this happens though, we probably remove the changed span due to the opt</p>",
        "id": 204638399,
        "sender_full_name": "lcnr",
        "timestamp": 1595404239
    },
    {
        "content": "<p>which seems interesting</p>",
        "id": 204638403,
        "sender_full_name": "lcnr",
        "timestamp": 1595404246
    },
    {
        "content": "<p>oh, you mean \"breaks a test\" as in turning off propagation makes it mark less stuff as dirty?</p>",
        "id": 204638431,
        "sender_full_name": "oli",
        "timestamp": 1595404289
    },
    {
        "content": "<p>more stuff is dirty</p>",
        "id": 204638437,
        "sender_full_name": "lcnr",
        "timestamp": 1595404303
    },
    {
        "content": "<p>if the optimization is not run at all</p>",
        "id": 204638444,
        "sender_full_name": "lcnr",
        "timestamp": 1595404313
    },
    {
        "content": "<p>right, that makes sense</p>",
        "id": 204638528,
        "sender_full_name": "oli",
        "timestamp": 1595404371
    },
    {
        "content": "<p>how can I emit the final mir in a test?</p>",
        "id": 204638531,
        "sender_full_name": "lcnr",
        "timestamp": 1595404375
    },
    {
        "content": "<p>I want to see what exactly changes here</p>",
        "id": 204638539,
        "sender_full_name": "lcnr",
        "timestamp": 1595404384
    },
    {
        "content": "<p>if we optimize away an <code>if false</code> in both cases, the contents of the branch don't matter</p>",
        "id": 204638542,
        "sender_full_name": "oli",
        "timestamp": 1595404386
    },
    {
        "content": "<p>uh.... something something <code>-Z emir=mir</code>?</p>",
        "id": 204638565,
        "sender_full_name": "oli",
        "timestamp": 1595404405
    },
    {
        "content": "<p>using<code>// EMIT_MIR rustc.try_identity.SimplifyLocals.after.mir</code></p>",
        "id": 204638571,
        "sender_full_name": "lcnr",
        "timestamp": 1595404416
    },
    {
        "content": "<p>I alway use <code>-Z dump-mir=all</code> and be done with it XD</p>",
        "id": 204638572,
        "sender_full_name": "oli",
        "timestamp": 1595404417
    },
    {
        "content": "<p>Has anyone checked if the compile time regression went away with LLVM 11?</p>",
        "id": 211004149,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1600868539
    },
    {
        "content": "<p>I don't think so. Feel free to open a PR trying out setting the mir-opt-level to 1 and ping me, I'll start a perf run</p>",
        "id": 211005793,
        "sender_full_name": "oli",
        "timestamp": 1600869183
    },
    {
        "content": "<p>Thanks! Hope I did it correctly. I cc'd you on GH but just in case, <a href=\"https://github.com/rust-lang/rust/issues/77107\">#77107</a></p>",
        "id": 211006752,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1600869554
    },
    {
        "content": "<p>The results are in, and at least there's no 24% regression anywhere, but I don't know if it counts as good enough or not.</p>",
        "id": 211029829,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1600879407
    }
]