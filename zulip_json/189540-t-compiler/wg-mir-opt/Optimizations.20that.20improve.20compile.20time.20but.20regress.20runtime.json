[
    {
        "content": "<p>So in <a href=\"https://github.com/rust-lang/rust/issues/77680\">#77680</a> I tried turning on <code>UnreachablePropagation</code> by default, and as it turns out the LLVM regression is gone. Unfortunately the way the optimization works kind of fundamentally removes information that LLVM would be able to exploit (to determine possible integer ranges/values, etc.), so it regresses runtime performance.</p>\n<p>I wonder what the right way to handle this would be. Maybe mir-opt-level=2 should be the default when opt-level&gt;=2, then we could run this optimization only at mir-opt-level=1 without regressing runtime perf?</p>",
        "id": 212834312,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1602254361
    },
    {
        "content": "<blockquote>\n<p>Maybe mir-opt-level=2 should be the default when opt-level&gt;=2, then we could run this optimization only at mir-opt-level=1 without regressing runtime perf?</p>\n</blockquote>\n<p>Yes, I would really like for it to work that way. Inlining (or at least, the more aggressive version of it) is probably another MIR optimization that would be good to enable if the user is requesting optimizations and should be disabled otherwise.</p>",
        "id": 212834689,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1602254533
    },
    {
        "content": "<p>MIR-level inlining might still be useful at low opt levels for generic functions calling tiny generic functions, since it can probably reduce the amount of code materially.</p>",
        "id": 212854208,
        "sender_full_name": "scottmcm",
        "timestamp": 1602264554
    },
    {
        "content": "<p>Things like <code>Option::as_ref</code> just disappearing seems like good at all levels.</p>",
        "id": 212854630,
        "sender_full_name": "scottmcm",
        "timestamp": 1602264815
    },
    {
        "content": "<p>For sure! I think we will definitely want to tweak the inlining strategy for different opt-levels though. For debug builds, incremental performance matters a lot and inlining can create additional scenarios where we'd need to recompile functions besides the ones you just changed (because maybe the function you changed was inlined into a bunch of other functions). </p>\n<blockquote>\n<p>generic functions calling tiny generic functions, since it can probably reduce the amount of code materially.</p>\n</blockquote>\n<p>That's definitely true. We may even want to consider just skipping the inliner entirely if the function we're processing isn't generic (for debug builds).</p>",
        "id": 212855090,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1602265074
    },
    {
        "content": "<p>There are also a few simple transformation one could start doing at opt-level=0 and debuginfo=0. At opt-level=0, we could remove the storage markers since they won't be used by LLVM nor by CTFE, which \"soon\" will have its own MIR. Similarly at debuginfo=0, the locals that are used only by debuginfo could be removed.</p>",
        "id": 222476939,
        "sender_full_name": "tm",
        "timestamp": 1610477369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"352985\">@tm</span> \"its own MIR\"? Interesting. Can you say more about that?</p>",
        "id": 223145974,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610990298
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> That landed in <a href=\"https://github.com/rust-lang/rust/pull/78407\">https://github.com/rust-lang/rust/pull/78407</a>. CTFE now uses unoptimized MIR so that it can detect UB that might not have been preserved by optimizations.</p>",
        "id": 223146306,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1610990469
    },
    {
        "content": "<p>Ah, so the same MIR, just at a different phase? That makes more sense.</p>",
        "id": 223146427,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610990540
    },
    {
        "content": "<p>It's the same MIR in the sense that it's identical to the MIR before optimization occurs but it is <code>clone()</code>'d I believe.</p>",
        "id": 223146491,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1610990584
    }
]