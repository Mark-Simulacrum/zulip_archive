[
    {
        "content": "<p>So it looks like <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> was absolutely correct <a href=\"https://github.com/rust-lang/rust/issues/66901#issuecomment-559967497\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66901#issuecomment-559967497\">here</a> when they suggested that <code>Instance::resolve()</code> is not correctly handling <code>default</code> trait items. I took their suggestion and added the logic to <code>Instance::resolve()</code> in <a href=\"https://github.com/rust-lang/rust/compare/master...wesleywiser:optimizations_handle_specialization\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...wesleywiser:optimizations_handle_specialization\">this branch</a>. That fixes the bad optimizations (issues in <code>Inline</code>, <code>ConstProp</code>, and also <code>SimplifyBranches</code>) but it breaks a few UI tests and I'm not exactly sure why. </p>\n<div class=\"codehilite\"><pre><span></span>failures:\n    [ui] ui/associated-consts/associated-const-cross-crate-defaults.rs\n    [ui] ui/associated-consts/associated-const-use-default.rs\n    [ui] ui/consts/miri_unleashed/assoc_const.rs\n    [ui] ui/consts/miri_unleashed/assoc_const_2.rs\n    [ui] ui/consts/trait_specialization.rs\n    [ui] ui/custom_test_frameworks/dynamic.rs\n    [ui] ui/issues/issue-11205.rs\n    [ui] ui/rfcs/rfc-2005-default-binding-mode/constref.rs\n    [ui] ui/ufcs-polymorphic-paths.rs\n</pre></div>\n\n\n<p>The most common failure is <a href=\"https://github.com/rust-lang/rust/blob/a916ac22b9f7f1f0f7aba0a41a789b3ecd765018/src/librustc_mir/const_eval.rs#L668\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/a916ac22b9f7f1f0f7aba0a41a789b3ecd765018/src/librustc_mir/const_eval.rs#L668\">this assertion</a> failing. cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I think you authored this. </p>\n<p>I believe the issue is that with my patch <code>Reveal::UserFacing</code> can cause <code>Instance::resolve()</code> to return <code>None</code> where with <code>Reveal::All</code> it would return a default impl.</p>",
        "id": 184119755,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577122388
    },
    {
        "content": "<p>I guess my question is: why does the calling code use <code>Reveal::All</code> but here we change it to use <code>Reveal::UserFacing</code>?</p>",
        "id": 184119778,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577122420
    },
    {
        "content": "<p>Oh wait, the comment in <code>const_eval_raw_provider()</code> does explain this...</p>",
        "id": 184119956,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577122592
    },
    {
        "content": "<p>I guess this code needs to be updated to handle <code>TooGeneric</code> differently because <code>TooGeneric</code> when <code>Reveal::UserFacing</code> does not necessarily mean it will fail when <code>Reveal::All</code> is used.</p>",
        "id": 184119995,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577122660
    },
    {
        "content": "<p>oh, yea that assert makes no sense this way</p>",
        "id": 184120119,
        "sender_full_name": "oli",
        "timestamp": 1577122798
    },
    {
        "content": "<p>feel free to remove it without a replacement</p>",
        "id": 184120168,
        "sender_full_name": "oli",
        "timestamp": 1577122810
    },
    {
        "content": "<p>Won't that re-introduce <a href=\"https://github.com/rust-lang/rust/issues/55454\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55454\">#55454</a>?</p>",
        "id": 184120187,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577122835
    },
    {
        "content": "<p>No, this assert is not load bearing. It's just something I assumed to never happen</p>",
        "id": 184120237,
        "sender_full_name": "oli",
        "timestamp": 1577122916
    },
    {
        "content": "<p>Ok, gotcha. Looks like there's a covering test so I can remove and make sure those tests still pass to verify nothing else breaks.</p>",
        "id": 184120303,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577122972
    },
    {
        "content": "<p>well, the test isn't ICEing, so the assert can't have an effect on it</p>",
        "id": 184120334,
        "sender_full_name": "oli",
        "timestamp": 1577123041
    },
    {
        "content": "<p>Ah right</p>",
        "id": 184120377,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577123054
    },
    {
        "content": "<p>but if you want to keep the assert, you can put it in <a href=\"https://github.com/rust-lang/rust/blob/a916ac22b9f7f1f0f7aba0a41a789b3ecd765018/src/librustc_mir/const_eval.rs#L784\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/a916ac22b9f7f1f0f7aba0a41a789b3ecd765018/src/librustc_mir/const_eval.rs#L784\">https://github.com/rust-lang/rust/blob/a916ac22b9f7f1f0f7aba0a41a789b3ecd765018/src/librustc_mir/const_eval.rs#L784</a> (assert that <code>key.param_env.reveal != Reveal::All || err_inval!(TooGeneric) != err.error</code>)</p>",
        "id": 184120413,
        "sender_full_name": "oli",
        "timestamp": 1577123112
    },
    {
        "content": "<p>9 test failures -&gt; 5</p>",
        "id": 184120538,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577123234
    },
    {
        "content": "<p>There's an LLVM failure I have no idea how to debug so I'm going to leave that for last and hope it get's fixed along the way :)</p>",
        "id": 184120619,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577123286
    },
    {
        "content": "<p>Not sure what ui test failures you're getting, but maybe some are legit fixes?</p>",
        "id": 184120835,
        "sender_full_name": "oli",
        "timestamp": 1577123535
    },
    {
        "content": "<p>Down to 2, I'll post the details when this build finishes</p>",
        "id": 184120964,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577123705
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>failures:\n\n---- [ui] ui/rfcs/rfc-2005-default-binding-mode/constref.rs stdout ----\n\nerror: test compilation failed although it shouldn&#39;t!\nstatus: exit code: 1\ncommand: &quot;/home/wesley/code/rust/rust/build/x86_64-unknown-linux-gnu/stage1/bin/rustc&quot; &quot;/home/wesley/code/rust/rust/build/x86_64-unknown-linux-gnu/stage1/bin/rustc&quot; &quot;/home/wesley/code/rust/rust/src/test/ui/rfcs/rfc-2005-default-binding-mode/constref.rs&quot; &quot;-Zthreads=1&quot; &quot;--target=x86_64-unknown-linux-gnu&quot; &quot;--error-format&quot; &quot;json&quot; &quot;-Zui-testing&quot; &quot;-C&quot; &quot;prefer-dynamic&quot; &quot;-o&quot; &quot;/home/wesley/code/rust/rust/build/x86_64-unknown-linux-gnu/test/ui/rfcs/rfc-2005-default-binding-mode/constref/a&quot; &quot;-Crpath&quot; &quot;-Cdebuginfo=0&quot; &quot;-Zunstable-options&quot; &quot;-Lnative=/home/wesley/code/rust/rust/build/x86_64-unknown-linux-gnu/native/rust-test-helpers&quot; &quot;-L&quot; &quot;/home/wesley/code/rust/rust/build/x86_64-unknown-linux-gnu/test/ui/rfcs/rfc-2005-default-binding-mode/constref/auxiliary&quot;\nstdout:\n------------------------------------------\n\n------------------------------------------\nstderr:\n------------------------------------------\nerror[E0158]: associated consts cannot be referenced in patterns\n  --&gt; /home/wesley/code/rust/rust/src/test/ui/rfcs/rfc-2005-default-binding-mode/constref.rs:32:10\n   |\nLL |         (i32::CONST_REF_DEFAULT, i32::CONST_REF, i64::CONST_REF_DEFAULT, i64::CONST_REF) =&gt; true,\n   |          ^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0158`.\n\n------------------------------------------\n\n\n---- [ui] ui/ufcs-polymorphic-paths.rs stdout ----\n\nerror: test compilation failed although it shouldn&#39;t!\nstatus: exit code: 101\ncommand: &quot;/home/wesley/code/rust/rust/build/x86_64-unknown-linux-gnu/stage1/bin/rustc&quot; &quot;/home/wesley/code/rust/rust/build/x86_64-unknown-linux-gnu/stage1/bin/rustc&quot; &quot;/home/wesley/code/rust/rust/src/test/ui/ufcs-polymorphic-paths.rs&quot; &quot;-Zthreads=1&quot; &quot;--target=x86_64-unknown-linux-gnu&quot; &quot;--error-format&quot; &quot;json&quot; &quot;-Zui-testing&quot; &quot;-C&quot; &quot;prefer-dynamic&quot; &quot;-o&quot; &quot;/home/wesley/code/rust/rust/build/x86_64-unknown-linux-gnu/test/ui/ufcs-polymorphic-paths/a&quot; &quot;-Crpath&quot; &quot;-Cdebuginfo=0&quot; &quot;-Zunstable-options&quot; &quot;-Lnative=/home/wesley/code/rust/rust/build/x86_64-unknown-linux-gnu/native/rust-test-helpers&quot; &quot;-L&quot; &quot;/home/wesley/code/rust/rust/build/x86_64-unknown-linux-gnu/test/ui/ufcs-polymorphic-paths/auxiliary&quot;\nstdout:\n------------------------------------------\n\n------------------------------------------\nstderr:\n------------------------------------------\nGlobal is external, but doesn&#39;t have external or weak linkage!\ni64 ()** @_ZN22ufcs_polymorphic_paths4main1S17h617838d98e0a145aE\nGlobal is external, but doesn&#39;t have external or weak linkage!\ni64 ()** @_ZN22ufcs_polymorphic_paths4main1S17h6d6a871d84675c61E\nGlobal is external, but doesn&#39;t have external or weak linkage!\ni64 ()** @_ZN22ufcs_polymorphic_paths4main1S17h08975e9ef2b0831eE\nGlobal is external, but doesn&#39;t have external or weak linkage!\ni32 (%XorShiftRng*)** @_ZN22ufcs_polymorphic_paths4main1S17h348875713cbbb989E\nGlobal is external, but doesn&#39;t have external or weak linkage!\ni32 (%XorShiftRng*)** @_ZN22ufcs_polymorphic_paths4main1S17h4e60c7352cd11b4aE\nGlobal is external, but doesn&#39;t have external or weak linkage!\ni32 (%XorShiftRng*)** @_ZN22ufcs_polymorphic_paths4main1S17h5ff48db54f3efa7aE\nGlobal is external, but doesn&#39;t have external or weak linkage!\ni32 (%XorShiftRng*)** @_ZN22ufcs_polymorphic_paths4main1S17hf6a8ed03bf7edb7eE\nGlobal is external, but doesn&#39;t have external or weak linkage!\ni32 (%XorShiftRng*)** @_ZN22ufcs_polymorphic_paths4main1S17hdf6a847ad5e63ca9E\nGlobal is external, but doesn&#39;t have external or weak linkage!\ni32 (%XorShiftRng*)** @_ZN22ufcs_polymorphic_paths4main1S17h93c1cfcdf807a32bE\nGlobal is external, but doesn&#39;t have external or weak linkage!\ni32 (%XorShiftRng*)** @_ZN22ufcs_polymorphic_paths4main1S17h49ed8eee2ac98a8fE\nGlobal is external, but doesn&#39;t have external or weak linkage!\ni32 (%XorShiftRng*)** @_ZN22ufcs_polymorphic_paths4main1S17h000c406925f8c1b6E\nLLVM ERROR: Broken module found, compilation aborted!\n\n------------------------------------------\n\n\n\nfailures:\n    [ui] ui/rfcs/rfc-2005-default-binding-mode/constref.rs\n    [ui] ui/ufcs-polymorphic-paths.rs\n\ntest result: FAILED. 9381 passed; 2 failed; 45 ignored; 0 measured; 0 filtered out\n</pre></div>",
        "id": 184121234,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577123941
    },
    {
        "content": "<p>I think I resolved the <code>constref.rs</code> test but I'm not 100% sure about the changes. The <code>ufcs-polymorphic-paths</code> test continues to elude me...</p>",
        "id": 184128229,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577130827
    },
    {
        "content": "<p>I'm starting to wonder if there's something wrong with my llvm build:</p>\n<div class=\"codehilite\"><pre><span></span>wesley@endurance:~/code/rust/rust&gt; rustc +stage1 src/test/ui/ufcs-polymorphic-paths.rs\nGlobal is external, but doesn&#39;t have external or weak linkage!\ni64 ()** @_ZN22ufcs_polymorphic_paths4main1S17h0036ecaaa6b24075E\nLLVM ERROR: Broken module found, compilation aborted!\nLLVM ERROR: &quot; Ȇ�DVnspecified&quot; pass is not registered.\n</pre></div>",
        "id": 184170573,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577195605
    },
    {
        "content": "<p>maybe we're missing a few things because we don't collect them correctly now?</p>",
        "id": 184176107,
        "sender_full_name": "oli",
        "timestamp": 1577202601
    },
    {
        "content": "<p>like if we forget to adjust substs correctly I'd imagine the collector to miss some items, but they'll still be referred to</p>",
        "id": 184176167,
        "sender_full_name": "oli",
        "timestamp": 1577202636
    },
    {
        "content": "<p>we've had problems like this with exposed bodies before</p>",
        "id": 184176181,
        "sender_full_name": "oli",
        "timestamp": 1577202672
    },
    {
        "content": "<p>Maybe?</p>",
        "id": 184176412,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577202951
    },
    {
        "content": "<p>I dumped the LLVM IR and here's the diff (minus unimportant stuff like hash changes):</p>\n<p>Before:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"vg\">@_ZN22ufcs_polymorphic_paths4main1S17h0036ecaaa6b24075E</span> <span class=\"p\">=</span> <span class=\"k\">internal</span> <span class=\"k\">constant</span> <span class=\"p\">&lt;{</span> <span class=\"k\">i8</span><span class=\"p\">*,</span> <span class=\"p\">[</span><span class=\"m\">0</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">]</span> <span class=\"p\">}&gt;</span> <span class=\"p\">&lt;{</span> <span class=\"k\">i8</span><span class=\"p\">*</span> <span class=\"k\">bitcast</span> <span class=\"p\">(</span><span class=\"k\">i64</span> <span class=\"p\">()*</span> <span class=\"vg\">@_ZN22ufcs_polymorphic_paths4Size4size17hb2d75803bb586561E</span> <span class=\"k\">to</span> <span class=\"k\">i8</span><span class=\"p\">*),</span> <span class=\"p\">[</span><span class=\"m\">0</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">]</span> <span class=\"k\">zeroinitializer</span> <span class=\"p\">}&gt;,</span> <span class=\"k\">align</span> <span class=\"m\">8</span>\n\n<span class=\"c\">; ufcs_polymorphic_paths::Size::size</span>\n<span class=\"c\">; Function Attrs: nonlazybind uwtable</span>\n<span class=\"k\">define</span> <span class=\"k\">internal</span> <span class=\"k\">i64</span> <span class=\"vg\">@_ZN22ufcs_polymorphic_paths4Size4size17hb2d75803bb586561E</span><span class=\"p\">()</span> <span class=\"k\">unnamed_addr</span> <span class=\"vg\">#0</span> <span class=\"p\">{</span>\n<span class=\"nl\">start:</span>\n  <span class=\"nv nv-Anonymous\">%0</span> <span class=\"p\">=</span> <span class=\"k\">alloca</span> <span class=\"k\">i64</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">8</span>\n  <span class=\"k\">store</span> <span class=\"k\">i64</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"k\">i64</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">8</span>\n  <span class=\"nv nv-Anonymous\">%1</span> <span class=\"p\">=</span> <span class=\"k\">load</span> <span class=\"k\">i64</span><span class=\"p\">,</span> <span class=\"k\">i64</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">8</span>\n  <span class=\"k\">br</span> <span class=\"k\">label</span> <span class=\"nv\">%bb1</span>\n\n<span class=\"nl\">bb1:</span>                                              <span class=\"c\">; preds = %start</span>\n  <span class=\"k\">ret</span> <span class=\"k\">i64</span> <span class=\"nv nv-Anonymous\">%1</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>After:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"vg\">@_ZN22ufcs_polymorphic_paths4main1S17h0036ecaaa6b24075E</span> <span class=\"p\">=</span> <span class=\"k\">internal</span> <span class=\"k\">global</span> <span class=\"k\">i64</span> <span class=\"p\">()*</span>\n</pre></div>",
        "id": 184176754,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577203401
    },
    {
        "content": "<p>So that seems like a strong possibility</p>",
        "id": 184176764,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577203413
    },
    {
        "content": "<p>I tried to look into this by deduplicating the bail out logic in <a href=\"https://github.com/oli-obk/rust/pull/new/instance_resolve_specialization\" target=\"_blank\" title=\"https://github.com/oli-obk/rust/pull/new/instance_resolve_specialization\">https://github.com/oli-obk/rust/pull/new/instance_resolve_specialization</a> to see if there are any differences between <code>assemble_candidates_from_impls</code> and <code>resolve</code></p>",
        "id": 184240221,
        "sender_full_name": "oli",
        "timestamp": 1577327892
    },
    {
        "content": "<p>But it seems like my scheme won't work</p>",
        "id": 184240225,
        "sender_full_name": "oli",
        "timestamp": 1577327920
    },
    {
        "content": "<p>but I noticed two things: the changes to ui on the \"erroneous constant\" tests are odd</p>",
        "id": 184240231,
        "sender_full_name": "oli",
        "timestamp": 1577327945
    },
    {
        "content": "<p>they used to get reported in const prop</p>",
        "id": 184240235,
        "sender_full_name": "oli",
        "timestamp": 1577327959
    },
    {
        "content": "<p>now they get reported at monomorphization time in codegen</p>",
        "id": 184240239,
        "sender_full_name": "oli",
        "timestamp": 1577327970
    },
    {
        "content": "<p>but the function was already monomorphic</p>",
        "id": 184240240,
        "sender_full_name": "oli",
        "timestamp": 1577327978
    },
    {
        "content": "<p>so shouldn't it keep getting reported from const prop?</p>",
        "id": 184240243,
        "sender_full_name": "oli",
        "timestamp": 1577327989
    },
    {
        "content": "<p>Hmm</p>",
        "id": 184240337,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577328140
    },
    {
        "content": "<p>the other thing I noticed: I can cause metadata loading to ICE if I make <code>confirm_impl_candidate</code> also succeed with the same strategy used in <code>assemble_candidates_from_impls</code></p>",
        "id": 184240341,
        "sender_full_name": "oli",
        "timestamp": 1577328174
    },
    {
        "content": "<blockquote>\n<p>ut I noticed two things: the changes to ui on the \"erroneous constant\" tests are odd</p>\n</blockquote>\n<p>Something interesting I'm looking into with the ufcs test is that it appears to be related to a constant being missed during codegen</p>",
        "id": 184240482,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577328519
    },
    {
        "content": "<p><span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span> since i think i'm blocked on <a href=\"https://github.com/rust-lang/rust/pull/67137#issuecomment-568655485\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/67137#issuecomment-568655485\">https://github.com/rust-lang/rust/pull/67137#issuecomment-568655485</a> bc of this</p>",
        "id": 184261471,
        "sender_full_name": "anp",
        "timestamp": 1577366581
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130111\">@anp</span> I found something: I think in your situation the bug is actually that <a href=\"https://github.com/rust-lang/rust/blob/acb6690e1d58fc5f262ada5b5030fe73e601f1e8/src/librustc_mir/transform/const_prop.rs#L414\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/acb6690e1d58fc5f262ada5b5030fe73e601f1e8/src/librustc_mir/transform/const_prop.rs#L414\">https://github.com/rust-lang/rust/blob/acb6690e1d58fc5f262ada5b5030fe73e601f1e8/src/librustc_mir/transform/const_prop.rs#L414</a> ignores <a href=\"https://github.com/rust-lang/rust/blob/a916ac22b9f7f1f0f7aba0a41a789b3ecd765018/src/librustc_mir/interpret/operand.rs#L565-L566\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/a916ac22b9f7f1f0f7aba0a41a789b3ecd765018/src/librustc_mir/interpret/operand.rs#L565-L566\">https://github.com/rust-lang/rust/blob/a916ac22b9f7f1f0f7aba0a41a789b3ecd765018/src/librustc_mir/interpret/operand.rs#L565-L566</a></p>",
        "id": 184261719,
        "sender_full_name": "oli",
        "timestamp": 1577366892
    },
    {
        "content": "<p>The constant has not yet been monomorphized</p>",
        "id": 184261725,
        "sender_full_name": "oli",
        "timestamp": 1577366905
    },
    {
        "content": "<p>interesting</p>",
        "id": 184261730,
        "sender_full_name": "anp",
        "timestamp": 1577366939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> this may in fact be what is causing the \"erroneous constant\" tests to change</p>",
        "id": 184261731,
        "sender_full_name": "oli",
        "timestamp": 1577366942
    },
    {
        "content": "<p>@anp I'll open a rustc PR, then you can rebase over it</p>",
        "id": 184261748,
        "sender_full_name": "oli",
        "timestamp": 1577366975
    },
    {
        "content": "<p><span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 184261824,
        "sender_full_name": "anp",
        "timestamp": 1577367063
    },
    {
        "content": "<p>ok, <a href=\"https://github.com/rust-lang/rust/pull/67631\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/67631\">that</a> should do it. lemme know if these tests still give you trouble</p>",
        "id": 184263898,
        "sender_full_name": "oli",
        "timestamp": 1577369738
    },
    {
        "content": "<p>no dice <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 184264658,
        "sender_full_name": "anp",
        "timestamp": 1577370574
    },
    {
        "content": "<p>anything you want me to try?</p>",
        "id": 184264726,
        "sender_full_name": "anp",
        "timestamp": 1577370649
    },
    {
        "content": "<p>hmm... can you try dumping the MIR at <code>ConstProp.before</code> for the test?</p>",
        "id": 184268201,
        "sender_full_name": "oli",
        "timestamp": 1577375548
    },
    {
        "content": "<p>also a backtrace by compiling the test with <code>-Ztreat-err-as-bug</code> could help pinpoint the source</p>",
        "id": 184268358,
        "sender_full_name": "oli",
        "timestamp": 1577375797
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130111\">@anp</span> actually, I may have done a stupid and not actually affected the code that evaluates the constant in your case. Try adding the same bailout check before <a href=\"https://github.com/rust-lang/rust/blob/acb6690e1d58fc5f262ada5b5030fe73e601f1e8/src/librustc_mir/transform/const_prop.rs#L561\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/acb6690e1d58fc5f262ada5b5030fe73e601f1e8/src/librustc_mir/transform/const_prop.rs#L561\">https://github.com/rust-lang/rust/blob/acb6690e1d58fc5f262ada5b5030fe73e601f1e8/src/librustc_mir/transform/const_prop.rs#L561</a> but for <code>rvalue</code></p>",
        "id": 184268445,
        "sender_full_name": "oli",
        "timestamp": 1577375913
    },
    {
        "content": "<p>I pushed an update</p>",
        "id": 184269585,
        "sender_full_name": "oli",
        "timestamp": 1577377698
    },
    {
        "content": "<p>you can try another rebase</p>",
        "id": 184269587,
        "sender_full_name": "oli",
        "timestamp": 1577377701
    },
    {
        "content": "<p>I wish <code>hub</code> had <code>hub pr rebase</code> and not just <code>hub pr checkout</code></p>",
        "id": 184269596,
        "sender_full_name": "oli",
        "timestamp": 1577377725
    },
    {
        "content": "<p>thanks! i’m in the office now and don’t have my rustc work checked out on this machine, will try in a few hours when the temp on our floor drives me back home</p>",
        "id": 184273795,
        "sender_full_name": "anp",
        "timestamp": 1577382680
    },
    {
        "content": "<p>that fixed it! woohoo :D</p>",
        "id": 184278188,
        "sender_full_name": "anp",
        "timestamp": 1577387648
    },
    {
        "content": "<p>awesome!</p>",
        "id": 184278529,
        "sender_full_name": "oli",
        "timestamp": 1577388242
    },
    {
        "content": "<p>i think <a href=\"https://github.com/rust-lang/rust/pull/67631\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/67631\">https://github.com/rust-lang/rust/pull/67631</a> may need to be r+'d again after the failed rollup?</p>",
        "id": 184294066,
        "sender_full_name": "anp",
        "timestamp": 1577412529
    },
    {
        "content": "<p>Rollups are manual so it should be ok :)</p>",
        "id": 184298810,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577421495
    },
    {
        "content": "<p>oh i must have missed it when i checked homu earlier, woops!</p>",
        "id": 184298817,
        "sender_full_name": "anp",
        "timestamp": 1577421571
    },
    {
        "content": "<p>I just talked with <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> maybe we should continue trying to pursue the branch that I started in <a href=\"https://github.com/oli-obk/rust/pull/new/instance_resolve_specialization\" target=\"_blank\" title=\"https://github.com/oli-obk/rust/pull/new/instance_resolve_specialization\">https://github.com/oli-obk/rust/pull/new/instance_resolve_specialization</a></p>",
        "id": 184311839,
        "sender_full_name": "oli",
        "timestamp": 1577440033
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> i'm around on&amp;off today if you want me to poke at stuff related to 67662</p>",
        "id": 184335577,
        "sender_full_name": "anp",
        "timestamp": 1577470589
    },
    {
        "content": "<p>I have an idea how we can have our <span aria-label=\"cake\" class=\"emoji emoji-1f370\" role=\"img\" title=\"cake\">:cake:</span> and eat it, too</p>",
        "id": 184335607,
        "sender_full_name": "oli",
        "timestamp": 1577470623
    },
    {
        "content": "<p>Wonderful!</p>",
        "id": 184335626,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577470663
    },
    {
        "content": "<p>I'll make my PR turn the hard error into a lint, then you can <code>warn(const_err)</code> in the test</p>",
        "id": 184335636,
        "sender_full_name": "oli",
        "timestamp": 1577470677
    },
    {
        "content": "<p>it's hacky, but it allows us to make the hard error change later while giving ppl a heads up that this is problematic <em>now</em></p>",
        "id": 184335686,
        "sender_full_name": "oli",
        "timestamp": 1577470700
    },
    {
        "content": "<p>Doesn't it already fall into the <code>const_prop</code> error handling machinery?</p>",
        "id": 184335699,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577470731
    },
    {
        "content": "<p>Or is because it's a cross crate macro that we have to do something special?</p>",
        "id": 184335710,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1577470746
    },
    {
        "content": "<p>no it's because using the constant will cause a hard error</p>",
        "id": 184335741,
        "sender_full_name": "oli",
        "timestamp": 1577470802
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/41501a6b03a8f10d8c29dfcb37dbd5ff84b33f34/src/librustc_mir/transform/const_prop.rs#L418\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/41501a6b03a8f10d8c29dfcb37dbd5ff84b33f34/src/librustc_mir/transform/const_prop.rs#L418\">https://github.com/rust-lang/rust/blob/41501a6b03a8f10d8c29dfcb37dbd5ff84b33f34/src/librustc_mir/transform/const_prop.rs#L418</a></p>",
        "id": 184335782,
        "sender_full_name": "oli",
        "timestamp": 1577470819
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[santiago@galago myapp (master)]$ hyperfine --warmup 3 &#39;rustc src/main.rs&#39; &#39;~/src/oss/rust2/build/x86_64-unknown-linux-gnu/stage1/bin/rustc src/main.rs&#39;\nBenchmark #1: rustc src/main.rs\n  Time (mean ± σ):     12.090 s ±  1.243 s    [User: 11.974 s, System: 0.045 s]\n  Range (min … max):    9.891 s … 14.533 s    10 runs\n\nBenchmark #2: ~/src/oss/rust2/build/x86_64-unknown-linux-gnu/stage1/bin/rustc src/main.rs\n  Time (mean ± σ):     14.321 s ±  1.798 s    [User: 14.200 s, System: 0.053 s]\n  Range (min … max):   12.783 s … 17.701 s    10 runs\n\nSummary\n  &#39;rustc src/main.rs&#39; ran\n    1.18 ± 0.19 times faster than &#39;~/src/oss/rust2/build/x86_64-unknown-linux-gnu/stage1/bin/rustc src/main.rs&#39;\n</pre></div>",
        "id": 184336039,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577471184
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> this is on my example</p>",
        "id": 184336043,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577471194
    },
    {
        "content": "<p>both patches</p>",
        "id": 184336047,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577471196
    },
    {
        "content": "<p>I think that's way better</p>",
        "id": 184336050,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577471213
    },
    {
        "content": "<p>definitely</p>",
        "id": 184336054,
        "sender_full_name": "oli",
        "timestamp": 1577471217
    },
    {
        "content": "<p>still 18% slower but at least not 50%</p>",
        "id": 184336058,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577471222
    },
    {
        "content": "<p><span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 184336064,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577471224
    },
    {
        "content": "<p>hehe</p>",
        "id": 184336066,
        "sender_full_name": "oli",
        "timestamp": 1577471228
    },
    {
        "content": "<p>I think we can work with this</p>",
        "id": 184336075,
        "sender_full_name": "oli",
        "timestamp": 1577471250
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> can you r+ 67631 again?</p>",
        "id": 184347293,
        "sender_full_name": "anp",
        "timestamp": 1577485803
    },
    {
        "content": "<p>no</p>",
        "id": 184348522,
        "sender_full_name": "oli",
        "timestamp": 1577487599
    },
    {
        "content": "<p>wait :D</p>",
        "id": 184348525,
        "sender_full_name": "oli",
        "timestamp": 1577487600
    },
    {
        "content": "<p>I'm fixing it up for the warning stuff</p>",
        "id": 184348569,
        "sender_full_name": "oli",
        "timestamp": 1577487609
    },
    {
        "content": "<p>sorry didn't get to that yet, but I have time now and should have something within the hour</p>",
        "id": 184348584,
        "sender_full_name": "oli",
        "timestamp": 1577487628
    },
    {
        "content": "<p>oh cool!</p>",
        "id": 184348610,
        "sender_full_name": "anp",
        "timestamp": 1577487680
    },
    {
        "content": "<p>Tests are running, going to bed now</p>",
        "id": 184352197,
        "sender_full_name": "oli",
        "timestamp": 1577494163
    },
    {
        "content": "<p>how'd they fare</p>",
        "id": 184382918,
        "sender_full_name": "anp",
        "timestamp": 1577553171
    },
    {
        "content": "<p>badly, fighting with the interner</p>",
        "id": 184383564,
        "sender_full_name": "oli",
        "timestamp": 1577554277
    },
    {
        "content": "<p>and people talk about fighting borrowck</p>",
        "id": 184383643,
        "sender_full_name": "anp",
        "timestamp": 1577554418
    }
]