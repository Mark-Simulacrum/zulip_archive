[
    {
        "content": "<p>Any idea why transferring over the memory contents (fields of <code>Memory</code> bar the tcx) could lead to a \"deallocated twice\" miri eval error?</p>",
        "id": 171955780,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564414211
    },
    {
        "content": "<p>transferring between different <code>InterpCx</code>s, that is</p>",
        "id": 171955819,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564414228
    },
    {
        "content": "<p>the second <code>InterpCx</code> would normally eval fine, with \"empty\" memory</p>",
        "id": 171955882,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564414277
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> maybe?</p>",
        "id": 171955887,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564414282
    },
    {
        "content": "<p>maybe I need to remap <code>AllocId</code>s?</p>",
        "id": 171956497,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564414708
    },
    {
        "content": "<p>uh... transferring things between <code>InterpCx</code> is not really supported^^</p>",
        "id": 171956886,
        "sender_full_name": "RalfJ",
        "timestamp": 1564414918
    },
    {
        "content": "<p>\"deallocated twice\" means it tried to deallocate something that wasnt there, which usually can only mean it has already been deallocated before. in your case it maybe means it hasnt been copied, or so.</p>",
        "id": 171956958,
        "sender_full_name": "RalfJ",
        "timestamp": 1564414951
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> yeah, I thought so. was trying to see if I could add support though. my solution now is very naive so... anyway, I'm just wondering why the MIR for the second <code>InterpCx</code> is even trying to access the old memory... maybe because the new <code>AllocId</code> accidentally point to it?</p>",
        "id": 171957955,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564415551
    },
    {
        "content": "<p>MIR always accesses the memory of the current <code>InterpCx</code></p>",
        "id": 171958377,
        "sender_full_name": "RalfJ",
        "timestamp": 1564415830
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> yeah, but I have fed the old <code>InterpCx'</code> <code>Memory</code> into the new <code>InterpCx</code>'s (tcx aside, which is fine because there are no dependencies on the tcx AFAICT)</p>",
        "id": 171958509,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564415911
    },
    {
        "content": "<p>i.e. copied over the fields <code>alloc_map</code>, <code>extra_fn_ptr_map</code>, <code>dead_alloc_map</code>, <code>extra</code></p>",
        "id": 171958581,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564415973
    },
    {
        "content": "<p>which is evidently too naive.</p>",
        "id": 171958589,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564415978
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> okay... <code>AllocId</code>doesn't seem like the problem actually. I think I need to copy over <code>tcx.alloc_map</code> too.</p>",
        "id": 171963719,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564419580
    },
    {
        "content": "<p>what role does <code>alloc_map</code> play exactly?is it separate from the <code>Memory</code>?</p>",
        "id": 171965475,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564420947
    },
    {
        "content": "<p>I guess it's only for consts and statics...?</p>",
        "id": 171969233,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564423428
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> okay... <code>AllocId</code>doesn't seem like the problem actually. I think I need to copy over <code>tcx.alloc_map</code> too.</p>\n</blockquote>\n<p>wait you didnt just create a new <code>InterpCx</code>, you created a new <code>tcx</code>?</p>",
        "id": 172012441,
        "sender_full_name": "RalfJ",
        "timestamp": 1564471562
    },
    {
        "content": "<p>that's... a whole different deal.^^ would have been worth mentioning that...</p>",
        "id": 172012482,
        "sender_full_name": "RalfJ",
        "timestamp": 1564471585
    },
    {
        "content": "<p>AFAIK literally everything in the compiler assumes there is exactly one instance of it</p>",
        "id": 172012483,
        "sender_full_name": "RalfJ",
        "timestamp": 1564471586
    },
    {
        "content": "<p>the global <code>alloc_map</code> is where statics and consts go after they have been computed (that's \"interning\"). it's also where fn ptr allocations go (so that a <code>Pointer</code> can point to a function)</p>",
        "id": 172012513,
        "sender_full_name": "RalfJ",
        "timestamp": 1564471623
    },
    {
        "content": "<p>Yea you can't just keep these in memory... you need to serialize them and \"refill\" them afterwards</p>",
        "id": 172018013,
        "sender_full_name": "oli",
        "timestamp": 1564476695
    },
    {
        "content": "<p>just like incremental does it</p>",
        "id": 172018016,
        "sender_full_name": "oli",
        "timestamp": 1564476699
    },
    {
        "content": "<p>otherwise all kinds of things break</p>",
        "id": 172018019,
        "sender_full_name": "oli",
        "timestamp": 1564476705
    },
    {
        "content": "<p>most notably the <code>Allocation</code> field of <code>ByRef</code> will be a dangling reference</p>",
        "id": 172018073,
        "sender_full_name": "oli",
        "timestamp": 1564476733
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> okay... <code>AllocId</code>doesn't seem like the problem actually. I think I need to copy over <code>tcx.alloc_map</code> too.</p>\n</blockquote>\n<p>wait you didnt just create a new <code>InterpCx</code>, you created a new <code>tcx</code>?</p>\n</blockquote>\n<p>@RalfJ Ah no no, I created a new <code>InterpCx</code>... but I just copied over all over<code>Memory</code> (minus the <code>txc</code>) into the new instance of <code>InterpCxz</code>.</p>",
        "id": 172052183,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564503263
    },
    {
        "content": "<blockquote>\n<p>the global <code>alloc_map</code> is where statics and consts go after they have been computed (that's \"interning\"). it's also where fn ptr allocations go (so that a <code>Pointer</code> can point to a function)</p>\n</blockquote>\n<p>the tcx's <code>alloc_map</code> you mean, not <code>Memory</code>'s, right? that would make sense.</p>",
        "id": 172052210,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564503284
    },
    {
        "content": "<blockquote>\n<p>Yea you can't just keep these in memory... you need to serialize them and \"refill\" them afterwards</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Yeah I kind of worried that would be the case... makes sense. Apparently incremental will already handle the restoration of statics/consts in <code>tcx.alloc_map</code>, but <code>interpret::Memory</code> I have to handle myself... is there an existing way to handle serialiasation and deserialisation of that?</p>",
        "id": 172052379,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564503370
    },
    {
        "content": "<p>No</p>",
        "id": 172053643,
        "sender_full_name": "oli",
        "timestamp": 1564504368
    },
    {
        "content": "<p>Note that you can't just serialize the memory as deserialization will duplicate all allocations to the global alloc_map</p>",
        "id": 172053794,
        "sender_full_name": "oli",
        "timestamp": 1564504511
    },
    {
        "content": "<p>Hmm</p>",
        "id": 172053810,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564504525
    },
    {
        "content": "<p>You literally need to do it all manually</p>",
        "id": 172053814,
        "sender_full_name": "oli",
        "timestamp": 1564504528
    },
    {
        "content": "<p>right</p>",
        "id": 172053817,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564504534
    },
    {
        "content": "<p>Or use serde and hack something so alloc IDs get created anew during deserialization</p>",
        "id": 172053877,
        "sender_full_name": "oli",
        "timestamp": 1564504576
    },
    {
        "content": "<p>But do not use rustc's serialization scheme</p>",
        "id": 172053898,
        "sender_full_name": "oli",
        "timestamp": 1564504595
    },
    {
        "content": "<p>right</p>",
        "id": 172053903,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564504604
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Not even thee serialisation infrastructure for crate metadata or whanot?</p>",
        "id": 172053927,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564504633
    },
    {
        "content": "<p>Hmm actually, if you don't care about memory usage that would work</p>",
        "id": 172053935,
        "sender_full_name": "oli",
        "timestamp": 1564504637
    },
    {
        "content": "<p>(or incremental)</p>",
        "id": 172053945,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564504651
    },
    {
        "content": "<p>Iirc miri duplicates all static memory locally on write</p>",
        "id": 172053953,
        "sender_full_name": "oli",
        "timestamp": 1564504663
    },
    {
        "content": "<p>the serialisation format is inefficient eh?</p>",
        "id": 172053961,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564504669
    },
    {
        "content": "<p>Inefficient? No, just fine tuned to a specific use case</p>",
        "id": 172054006,
        "sender_full_name": "oli",
        "timestamp": 1564504690
    },
    {
        "content": "<p>okay</p>",
        "id": 172054013,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564504701
    },
    {
        "content": "<p>What I mean is you can just dump all allocations via rust serialization and after deserialization don't deserialize into Memory</p>",
        "id": 172054048,
        "sender_full_name": "oli",
        "timestamp": 1564504747
    },
    {
        "content": "<p>Once miri touches memory, it will fetch the allocations from the global memory when you try writing to it</p>",
        "id": 172054080,
        "sender_full_name": "oli",
        "timestamp": 1564504790
    },
    {
        "content": "<p>Not sure if that works for any memory, but you can check out the copy on write scheme to see if it does what you need</p>",
        "id": 172054148,
        "sender_full_name": "oli",
        "timestamp": 1564504821
    },
    {
        "content": "<p>That will duplicate any memory you modify in a single run</p>",
        "id": 172054163,
        "sender_full_name": "oli",
        "timestamp": 1564504837
    },
    {
        "content": "<p>I see</p>",
        "id": 172054168,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564504841
    },
    {
        "content": "<p>Should be fairly minimal for a repl though, right?</p>",
        "id": 172054191,
        "sender_full_name": "oli",
        "timestamp": 1564504854
    },
    {
        "content": "<p>in theory yep</p>",
        "id": 172054210,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564504868
    },
    {
        "content": "<p>when you say \"don't deserialise into Memory\"... you mean only deserialise into the gcx alloc_map?</p>",
        "id": 172054288,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564504924
    },
    {
        "content": "<p>and Miri handles the rest?</p>",
        "id": 172054292,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564504929
    },
    {
        "content": "<p>Just deserialize the alloc ids</p>",
        "id": 172054662,
        "sender_full_name": "oli",
        "timestamp": 1564505247
    },
    {
        "content": "<p>Rustc does the rest</p>",
        "id": 172054675,
        "sender_full_name": "oli",
        "timestamp": 1564505260
    },
    {
        "content": "<p>Oh, interesting</p>",
        "id": 172054678,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564505262
    },
    {
        "content": "<p>Actually</p>",
        "id": 172054751,
        "sender_full_name": "oli",
        "timestamp": 1564505291
    },
    {
        "content": "<p>Ignore memory</p>",
        "id": 172054757,
        "sender_full_name": "oli",
        "timestamp": 1564505295
    },
    {
        "content": "<p>Just serialize your stack</p>",
        "id": 172054768,
        "sender_full_name": "oli",
        "timestamp": 1564505303
    },
    {
        "content": "<p>It contains everythjng</p>",
        "id": 172054780,
        "sender_full_name": "oli",
        "timestamp": 1564505309
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> what does the stack contain that I need, that Memory doesn't contain?</p>",
        "id": 172054995,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564505491
    },
    {
        "content": "<p>AllocIds</p>",
        "id": 172055300,
        "sender_full_name": "oli",
        "timestamp": 1564505706
    },
    {
        "content": "<p>And only live ones</p>",
        "id": 172055317,
        "sender_full_name": "oli",
        "timestamp": 1564505719
    },
    {
        "content": "<p>Leaked memory won't get serialized</p>",
        "id": 172055344,
        "sender_full_name": "oli",
        "timestamp": 1564505737
    },
    {
        "content": "<p>as for serialising/deserialising AllocIds, isn't the issue that a) they can change between compilation sessions, b) the gcx alloc_map may not store the allocations for all miri allocs, only statics/consts, c) inc. comp. may not serialise all over the gcx alloc_map even if everything I need is there?</p>",
        "id": 172055347,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564505738
    },
    {
        "content": "<p>oh</p>",
        "id": 172055359,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564505747
    },
    {
        "content": "<p>Don't worry, the serializer knows what it's doing</p>",
        "id": 172055380,
        "sender_full_name": "oli",
        "timestamp": 1564505758
    },
    {
        "content": "<p>It doesn't actually serialize alloc ids</p>",
        "id": 172055432,
        "sender_full_name": "oli",
        "timestamp": 1564505770
    },
    {
        "content": "<p>It just serializes the backing allocation or function reference</p>",
        "id": 172055450,
        "sender_full_name": "oli",
        "timestamp": 1564505791
    },
    {
        "content": "<p>I see</p>",
        "id": 172055476,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564505816
    },
    {
        "content": "<p>Excuse my ignorance... which serialiser is this? the inc. comp. one?</p>",
        "id": 172055555,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564505861
    },
    {
        "content": "<p>(which I guess I'd have to use independently from inc. comp.)</p>",
        "id": 172055626,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564505883
    },
    {
        "content": "<p>I've done this already for types, so it should be okay</p>",
        "id": 172055645,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564505895
    },
    {
        "content": "<p>^ <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  (in case you didn't see, sorry)</p>",
        "id": 172062027,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564510246
    },
    {
        "content": "<p>Metadata or incremental, doesn't matter</p>",
        "id": 172065652,
        "sender_full_name": "oli",
        "timestamp": 1564512762
    },
    {
        "content": "<p>Both use the same logic</p>",
        "id": 172065659,
        "sender_full_name": "oli",
        "timestamp": 1564512771
    },
    {
        "content": "<p>Yeah, that was my impression too from previous high-level reading</p>",
        "id": 172078424,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564522399
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> just serialising/deserialising the AllocIds will be a problem though, if <code>gcx.alloc_map</code> doesn't contain every miri allocation already, and that gets saved in the inc. comp. cache?</p>",
        "id": 172079027,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564522940
    },
    {
        "content": "<p>Oh right</p>",
        "id": 172101593,
        "sender_full_name": "oli",
        "timestamp": 1564552967
    },
    {
        "content": "<p>Nevermind then</p>",
        "id": 172101601,
        "sender_full_name": "oli",
        "timestamp": 1564552987
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>the global <code>alloc_map</code> is where statics and consts go after they have been computed (that's \"interning\"). it's also where fn ptr allocations go (so that a <code>Pointer</code> can point to a function)</p>\n</blockquote>\n<p>the tcx's <code>alloc_map</code> you mean, not <code>Memory</code>'s, right? that would make sense.</p>\n</blockquote>\n<p>but what is the new <code>InterpCx</code>'s <code>tcx</code>? If it is not the same as the old one's that means you got two <code>tcx</code>, which means you had to create a second one of those as well^^. And that's an extremely unsupported situation, to my knowledge.</p>",
        "id": 172114878,
        "sender_full_name": "RalfJ",
        "timestamp": 1564568156
    },
    {
        "content": "<p>If you use rustc's serialization and deserialization then everything will work out</p>",
        "id": 172117102,
        "sender_full_name": "oli",
        "timestamp": 1564570786
    },
    {
        "content": "<p>It won't serialize the tcx, and during deserialization it'll refill it with the actual one</p>",
        "id": 172117165,
        "sender_full_name": "oli",
        "timestamp": 1564570814
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Yeah, I thought it was unsupported too... but what Oli says seems reassuring. So, to summarise and make sure I understood this right:<br>\n1. Serialise every (relevant) <code>Allocation</code> in <code>machine.memory().alloc_map</code>, by transitively walking it (like <code>dump_allocs</code>). Use the encoding for inc. comp. / metadata.<br>\n2. Serialise the <code>AllocIds</code> for live locals (or even the entire stack) using the same method as above basically.<br>\n3. With the subsequent <code>InterpCx</code> &amp; tcz<code>, deserialise the above manually, making calls to </code>allocate_with` (I guess).</p>",
        "id": 172136169,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564585939
    },
    {
        "content": "<p>hopefully I'm not <em>too</em> off-track.</p>",
        "id": 172136175,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564585947
    },
    {
        "content": "<p>No</p>",
        "id": 172137542,
        "sender_full_name": "oli",
        "timestamp": 1564586958
    },
    {
        "content": "<p>Do not manually serialize any allocation</p>",
        "id": 172137557,
        "sender_full_name": "oli",
        "timestamp": 1564586968
    },
    {
        "content": "<p>Just serialize the stack</p>",
        "id": 172137575,
        "sender_full_name": "oli",
        "timestamp": 1564586984
    },
    {
        "content": "<p>That will serialize the live allocations</p>",
        "id": 172137697,
        "sender_full_name": "oli",
        "timestamp": 1564587040
    },
    {
        "content": "<p>But as I said earlier, check whether memory supports cow for any alloc</p>",
        "id": 172137767,
        "sender_full_name": "oli",
        "timestamp": 1564587104
    },
    {
        "content": "<blockquote>\n<p>Just serialize the stack</p>\n</blockquote>\n<p>Not everything is <code>RustcEncodable</code> in the stack, but I could maybe make it so...?</p>",
        "id": 172157179,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564600816
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I wouldn't know how to check for COW to be honest...</p>",
        "id": 172157230,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564600872
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Just serialize the stack</p>\n</blockquote>\n<p>Not everything is <code>RustcEncodable</code> in the stack, but I could maybe make it so...?</p>\n</blockquote>\n<p>yes you'd need to do that</p>",
        "id": 172157255,
        "sender_full_name": "oli",
        "timestamp": 1564600897
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> I wouldn't know how to check for COW to be honest...</p>\n</blockquote>\n<p>check what happens when <code>get_mut</code> can't find an alloc</p>",
        "id": 172157322,
        "sender_full_name": "oli",
        "timestamp": 1564600924
    },
    {
        "content": "<p>aha</p>",
        "id": 172157400,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564601017
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> it looks for a static (i.e. global tcx) allocation in such a case.</p>",
        "id": 172157529,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564601154
    },
    {
        "content": "<p>then it should all work out</p>",
        "id": 172157640,
        "sender_full_name": "oli",
        "timestamp": 1564601233
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> cool. because the global tcx stores <em>all</em> miri allocations and gets serialised to incremental already, I take it?</p>",
        "id": 172158025,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564601526
    },
    {
        "content": "<p>the global tcx only stores those allocations that end up in the final value of a static/const</p>",
        "id": 172158199,
        "sender_full_name": "RalfJ",
        "timestamp": 1564601681
    },
    {
        "content": "<p>temporary allocations that were created during CTFE (when computing said initial value) are not interned into the global tcx</p>",
        "id": 172158220,
        "sender_full_name": "RalfJ",
        "timestamp": 1564601701
    },
    {
        "content": "<p>yea, but if you serialize the stack, everything ends up in the global tcx</p>",
        "id": 172158429,
        "sender_full_name": "oli",
        "timestamp": 1564601831
    },
    {
        "content": "<p>ah, clever</p>",
        "id": 172158476,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564601876
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> even if I'm serialising it to a separate store (not the inc. comp. cache)?</p>",
        "id": 172158545,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564601898
    },
    {
        "content": "<p>yea, that doesn't change anything</p>",
        "id": 172158580,
        "sender_full_name": "oli",
        "timestamp": 1564601948
    },
    {
        "content": "<p>super. will give that a try now. hopefully implementing RustcEncodable for those types will be as simple as adding derive's. thanks for the advice!</p>",
        "id": 172158757,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564602098
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Ugh, does the RustcEncodable proc macro not handle default types properly? it seems to be only implementing e.g. <code>pub enum Operand&lt;Tag = (), Id = AllocId&gt;</code> for <code>Operand</code> with its default type params, not generically.</p>",
        "id": 172186638,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564628992
    },
    {
        "content": "<p>I mention this to you because I saw you made at least one or two PRs to that proc macro in the past... but let me know if there's someone better to handle this. :-)</p>",
        "id": 172187291,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564629887
    },
    {
        "content": "<p>I have no idea, sorry</p>",
        "id": 172197756,
        "sender_full_name": "oli",
        "timestamp": 1564644052
    },
    {
        "content": "<p>no prob</p>",
        "id": 172223414,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564668338
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I think you worked on this feature, so... is there any diff between <code>mem::uninitialized</code> and <code>MaybeUninit::uninit().assume_init()</code> presently?</p>",
        "id": 172411204,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564847295
    },
    {
        "content": "<p>no, not really. both are insta-UB or at least heavily unspecified for the vast majority of types.</p>",
        "id": 172411214,
        "sender_full_name": "RalfJ",
        "timestamp": 1564847331
    },
    {
        "content": "<p>see the <code>assume_init</code> docs</p>",
        "id": 172411222,
        "sender_full_name": "RalfJ",
        "timestamp": 1564847349
    },
    {
        "content": "<p>okay ta</p>",
        "id": 172411297,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564847445
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> would you tend to prefer one or the other?</p>",
        "id": 172411311,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564847489
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">uninitialized</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">MaybeUninit</span>::<span class=\"n\">uninit</span><span class=\"p\">().</span><span class=\"n\">assume_init</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 172411317,
        "sender_full_name": "centril",
        "timestamp": 1564847521
    },
    {
        "content": "<p>literally</p>",
        "id": 172411357,
        "sender_full_name": "centril",
        "timestamp": 1564847524
    },
    {
        "content": "<p>oh haha</p>",
        "id": 172411358,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564847528
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span>  don't use <code>uninitialized</code>; it's getting deprecated</p>",
        "id": 172411359,
        "sender_full_name": "centril",
        "timestamp": 1564847546
    },
    {
        "content": "<p>oh</p>",
        "id": 172411360,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564847553
    },
    {
        "content": "<p>I see</p>",
        "id": 172411361,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564847556
    },
    {
        "content": "<p>just because it's less explicit?</p>",
        "id": 172411364,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564847566
    },
    {
        "content": "<p>in almost all cases you want to <code>::uninit()</code> first, then do the initialization and finally <code>.assume_init()</code></p>",
        "id": 172411372,
        "sender_full_name": "centril",
        "timestamp": 1564847602
    },
    {
        "content": "<p>yeah, but this is for my REPL, where I'm doing crazy stuff internally ;-)</p>",
        "id": 172411415,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564847658
    },
    {
        "content": "<p><code>MaybeUninit::uninit().assume_init()</code> is sound and useful more or less for <code>[MaybeUninit&lt;T&gt;; N]</code></p>",
        "id": 172411420,
        "sender_full_name": "centril",
        "timestamp": 1564847665
    },
    {
        "content": "<p>(except that case is also going away in favor of language improvements)</p>",
        "id": 172411425,
        "sender_full_name": "centril",
        "timestamp": 1564847695
    },
    {
        "content": "<blockquote>\n<p>yeah, but this is for my REPL, where I'm doing crazy stuff internally ;-)</p>\n</blockquote>\n<p>crazy stuff is okay. Undefined Behavior is not.</p>",
        "id": 172416803,
        "sender_full_name": "RalfJ",
        "timestamp": 1564857795
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> would you tend to prefer one or the other?</p>\n</blockquote>\n<p>both should not be used. again, see the <a href=\"https://doc.rust-lang.org/nightly/core/mem/union.MaybeUninit.html#method.assume_init\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/core/mem/union.MaybeUninit.html#method.assume_init\"><code>assume_init</code> docs</a>. unless your type does not require initialziation, you might as well deref a NULL pointer -- same game.</p>",
        "id": 172416808,
        "sender_full_name": "RalfJ",
        "timestamp": 1564857836
    },
    {
        "content": "<p>To state it more bluntly, don't give the compiler free license to scramble your program. Their are better sources of random, unpredictable behavior.</p>",
        "id": 172416934,
        "sender_full_name": "Tom Phinney",
        "timestamp": 1564858051
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> yeah it won't be UB, because this is just to get the code to compile. when it gets interpreted, the machine will initialize the locals appropriately</p>",
        "id": 172424384,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564872564
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span>  I don't know what you mean... if that code is ever run, there is UB. or is this code you are, like, auto-generating and only running in the interpreter or so...?</p>",
        "id": 172441776,
        "sender_full_name": "RalfJ",
        "timestamp": 1564909950
    },
    {
        "content": "<p>Exactly. Generating this automatically, and it's only ever being run in a controlled interpreter environment.</p>",
        "id": 172456352,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564937972
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> okay, so the error I get when deserialising the frame is on the line <code>let pos = self.state.data_offsets[idx] as usize;</code> in <code>AllocDecodingSession::decode_alloc_id</code></p>",
        "id": 172460535,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564946142
    },
    {
        "content": "<p>kind of makes sense since <code>data_offsets</code> is initialised to an empty <code>Vec</code></p>",
        "id": 172460584,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564946199
    },
    {
        "content": "<p>also, if I try to actually encode the <code>AllocId</code> like <code>CacheEncoder</code> does (using <code>specialized_encode_alloc_id</code>), then I get the panic 'no value for given alloc ID' since the ID isn't in the global tcx alloc map</p>",
        "id": 172467106,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564958778
    },
    {
        "content": "<p>maybe it needs to fall back to the <code>InterpCx</code>'s <code>Memory</code> in that case somehow? hmm</p>",
        "id": 172467404,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1564959370
    },
    {
        "content": "<p>no ideas guys? no worries if so, I'll keep experimenting. :-)</p>",
        "id": 172598974,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1565105198
    },
    {
        "content": "<p>sorry this is far outside anything crazy I tried so far</p>",
        "id": 172602062,
        "sender_full_name": "RalfJ",
        "timestamp": 1565107263
    },
    {
        "content": "<p>hah fair enoiugh.</p>",
        "id": 172602567,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1565107606
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> the issue seems to be that the global tcx <code>alloc_map</code> doesn't contain all the <code>AllocId</code>s for thee interpreter... is this right?</p>",
        "id": 172617998,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1565117488
    },
    {
        "content": "<p>and if so, is there any way around this?</p>",
        "id": 172618005,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1565117493
    },
    {
        "content": "<p>quoting myself from a few days ago:</p>\n<blockquote>\n<p>the global tcx only stores those allocations that end up in the final value of a static/const</p>\n</blockquote>",
        "id": 172618161,
        "sender_full_name": "RalfJ",
        "timestamp": 1565117618
    },
    {
        "content": "<blockquote>\n<p>and if so, is there any way around this?</p>\n</blockquote>\n<p>depends. for CTFE you could hack things to just always use the global allocator. it would kill rustc memory usage but do you care?^^<br>\nfor Miri, the allocations in tcx have the wrong type. they cannot store Stacked Borrows state.</p>",
        "id": 172618247,
        "sender_full_name": "RalfJ",
        "timestamp": 1565117678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> aha. yeah, that's what I thought... maybe <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>'s suggested approach won't work then. let me try to hack around it though.</p>",
        "id": 172634685,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1565131047
    },
    {
        "content": "<p>ta</p>",
        "id": 172634686,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1565131048
    },
    {
        "content": "<p>yeah... the problem with the infrastructure around <code>AllocId</code> is that it's designed to only work with tcx allocs</p>",
        "id": 172638237,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1565134745
    },
    {
        "content": "<p>thus only static stuff, no stacked borrows, etc.</p>",
        "id": 172638244,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1565134754
    },
    {
        "content": "<p>perhaps if I extend <code>AllocDecodingSession</code> to work with <code>interpret::Memory</code>...</p>",
        "id": 172638950,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1565135613
    }
]