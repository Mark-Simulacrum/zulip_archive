[
    {
        "content": "<p>I'm looking into <a href=\"https://github.com/rust-lang/rust/issues/66339\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66339\">#66339</a> and I believe the issue is that we lost the code <a href=\"https://github.com/rust-lang/rust/blob/f1b882b55805c342e46ee4ca3beeef1d1fa2044b/src/librustc_mir/const_eval.rs#L162\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/f1b882b55805c342e46ee4ca3beeef1d1fa2044b/src/librustc_mir/const_eval.rs#L162\">here</a> which handles interning allocated memory. I think I can call <code>intern_const_alloc_recursive()</code> from the right places in <code>ConstProp</code> but it takes a <code>CompileTimeEvalContext</code> which is a <code>InterpCx&lt;'_, '_, CompileTimeInterpreter&gt;</code> and <code>ConstProp</code> has a <code>InterpCx&lt;'_, '_, ConstPropMachine&gt;</code>.</p>\n<p>I think it's possible to make this code more generic over the specific machine so it can be called from <code>ConstProp</code> but before I started doing that, I wanted to make sure that seems like the right thing to do. Thoughts?</p>",
        "id": 181299921,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1574339837
    },
    {
        "content": "<p>hmm... I wonder why it's hardcoded to <code>CompileTimeInterpreter</code></p>",
        "id": 181300169,
        "sender_full_name": "oli",
        "timestamp": 1574340031
    },
    {
        "content": "<p>are we using anything that only exists for that?</p>",
        "id": 181300172,
        "sender_full_name": "oli",
        "timestamp": 1574340039
    },
    {
        "content": "<p>if not, yea, just make it generic</p>",
        "id": 181300177,
        "sender_full_name": "oli",
        "timestamp": 1574340045
    },
    {
        "content": "<p>It relies on some of the associated types being specific types like <code>()</code></p>",
        "id": 181300218,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1574340115
    },
    {
        "content": "<p>Actually, I could be wrong. I tried this a while ago and ran into issues with having to add nasty type signatures everywhere to make the code generic but not I can't find where we actually need those associated types to be specific things.</p>",
        "id": 181300603,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1574340404
    },
    {
        "content": "<p>oh, yea these exist solely for miri's stacked borrows logic</p>",
        "id": 181304029,
        "sender_full_name": "oli",
        "timestamp": 1574343083
    },
    {
        "content": "<p>just keep them at <code>()</code> everywhere</p>",
        "id": 181304035,
        "sender_full_name": "oli",
        "timestamp": 1574343091
    },
    {
        "content": "<p>I can't define a polymorphic type alias right? Having this would make the diff so much neater:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">type</span> <span class=\"nc\">CompileTimeInterpCx</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;mir</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">M</span>: <span class=\"nc\">Machine</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;mir</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">AllocExtra</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">PointerTag</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">InterpCx</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;mir</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 181304760,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1574343623
    },
    {
        "content": "<p>There's a lot of this kind of thing in the diff:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gd\">-struct InternVisitor&lt;&#39;rt, &#39;mir, &#39;tcx&gt; {</span>\n<span class=\"gi\">+struct InternVisitor&lt;&#39;rt, &#39;mir, &#39;tcx, M&gt;</span>\n<span class=\"gi\">+where</span>\n<span class=\"gi\">+    M: Machine&lt;</span>\n<span class=\"gi\">+        &#39;mir,</span>\n<span class=\"gi\">+        &#39;tcx,</span>\n<span class=\"gi\">+        MemoryKinds = !,</span>\n<span class=\"gi\">+        PointerTag = (),</span>\n<span class=\"gi\">+        ExtraFnVal = !,</span>\n<span class=\"gi\">+        FrameExtra = (),</span>\n<span class=\"gi\">+        MemoryExtra = (),</span>\n<span class=\"gi\">+        AllocExtra = (),</span>\n<span class=\"gi\">+        MemoryMap = FxHashMap&lt;AllocId, (MemoryKind&lt;!&gt;, Allocation)&gt;,</span>\n<span class=\"gi\">+    &gt;,</span>\n<span class=\"gi\">+{</span>\n</pre></div>",
        "id": 181304801,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1574343666
    },
    {
        "content": "<p>you can, but the bounds are somewhat unchecked: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=91fbdf57bcb584898d9025fb70690a63\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=91fbdf57bcb584898d9025fb70690a63\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=91fbdf57bcb584898d9025fb70690a63</a></p>",
        "id": 181304933,
        "sender_full_name": "oli",
        "timestamp": 1574343767
    },
    {
        "content": "<p>not sure if they'll work for the use case</p>",
        "id": 181304945,
        "sender_full_name": "oli",
        "timestamp": 1574343777
    },
    {
        "content": "<p>I feel like I've tried this in the past and it didn't work because it ignored the bounds or something</p>",
        "id": 181305065,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1574343845
    },
    {
        "content": "<p>Thanks though</p>",
        "id": 181305071,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1574343853
    },
    {
        "content": "<p>isn't it bad if const-prop interns stuff?</p>",
        "id": 181643679,
        "sender_full_name": "RalfJ",
        "timestamp": 1574433833
    },
    {
        "content": "<p>IMO that should never ever happen</p>",
        "id": 181643730,
        "sender_full_name": "RalfJ",
        "timestamp": 1574433848
    },
    {
        "content": "<p>interning is for the results consts and statics and the like</p>",
        "id": 181643764,
        "sender_full_name": "RalfJ",
        "timestamp": 1574433874
    },
    {
        "content": "<p>hm iirc const prop prior to the \"use miri\" changes interned things in some situations as well</p>",
        "id": 181644058,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1574434066
    },
    {
        "content": "<p>when we moved to miri, that broke and caused issues like <a href=\"https://github.com/rust-lang/rust/issues/66339\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66339\">#66339</a></p>",
        "id": 181644089,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1574434082
    },
    {
        "content": "<p>perhaps that was the wrong behavior all along?</p>",
        "id": 181644130,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1574434098
    },
    {
        "content": "<p>Are you saying it should never intern anything? Or just certain things?</p>",
        "id": 181644156,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1574434124
    },
    {
        "content": "<p>if we produce new large constant values (e.g. an array), we need to store them somewhere, thus we intern them and provide a <code>ByRef</code> to them</p>",
        "id": 181645553,
        "sender_full_name": "oli",
        "timestamp": 1574435131
    },
    {
        "content": "<p>okay... hm.<br>\nlet me rephrase: interning should only happen \"at the end\", when a certain value was computed for something and is being inserted into the MIR. that basically adds a new static and puts the result of const-prop into that static. but intermediate computations shouldn't be interned.</p>",
        "id": 181646555,
        "sender_full_name": "RalfJ",
        "timestamp": 1574435673
    },
    {
        "content": "<p>right</p>",
        "id": 181646621,
        "sender_full_name": "oli",
        "timestamp": 1574435726
    }
]