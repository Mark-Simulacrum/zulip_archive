[
    {
        "content": "<p>was talking with <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> about a problem that is starting to show up when you intern projections</p>",
        "id": 177902078,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570796975
    },
    {
        "content": "<p>you need to pass <code>tcx: TyCtxt&lt;'tcx&gt;</code> around in a lot of places</p>",
        "id": 177902090,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570796995
    },
    {
        "content": "<p>one is that <code>MutVisitor</code> is going to need a blank <code>tcx() -&gt; TyCtxt&lt;'tcx&gt;</code> and implementors can roll their own thing</p>",
        "id": 177902171,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570797038
    },
    {
        "content": "<p>that's not thaat bad</p>",
        "id": 177902176,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570797043
    },
    {
        "content": "<p>besides needing to implement it in a lot of cases that are not even going to use it because they don't need to reintern place because they don't mutate it</p>",
        "id": 177902202,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570797079
    },
    {
        "content": "<p>but one of the main problems is <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/mir/mod.rs#L1862-L1894\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/mir/mod.rs#L1862-L1894\">https://github.com/rust-lang/rust/blob/master/src/librustc/mir/mod.rs#L1862-L1894</a></p>",
        "id": 177902268,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570797136
    },
    {
        "content": "<p>passing <code>tcx</code> there may be kind of a pain</p>",
        "id": 177902276,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570797147
    },
    {
        "content": "<p>unsure if I should follow that path or is there any smarter idea</p>",
        "id": 177902287,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570797164
    },
    {
        "content": "<p>/cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 177902798,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570797598
    },
    {
        "content": "<p>It's probably not too bad to fiddle through <code>TyCtxt</code>. Alternatively we can have <code>tcx.mk_place</code> that takes a <code>PlaceBase</code> and a <code>Vec&lt;PlaceElem&gt;</code> and just require the caller to work with <code>TyCtxt</code> directly instead of offering convenience functions</p>",
        "id": 177902936,
        "sender_full_name": "oli",
        "timestamp": 1570797699
    },
    {
        "content": "<p>this is aways the annoying question</p>",
        "id": 177947234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570826490
    },
    {
        "content": "<p>whether to do <code>tcx.foo(a, b)</code> or <code>a.foo(tcx, b)</code></p>",
        "id": 177947236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570826496
    },
    {
        "content": "<p>I can never make up my mind which I like better</p>",
        "id": 177947249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570826504
    },
    {
        "content": "<p>mostly I feel there is a missing language feature (maybe like scala implicits) to enable <code>a.foo(b)</code> while still passing (implicitly) the <code>tcx</code></p>",
        "id": 177947272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570826520
    },
    {
        "content": "<p>but oh well</p>",
        "id": 177947297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570826522
    },
    {
        "content": "<p>certainly not unique to Rust</p>",
        "id": 177947340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570826549
    },
    {
        "content": "<p>was tempted to do some weird thing with <code>ty::tls::with(|tcx| tcx.intern_place_elems(...), ty)</code></p>",
        "id": 177948314,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570827193
    },
    {
        "content": "<p>that gives lifetimes problems but I'm pretty sure that can be hacked with some unsafe sorcery :P</p>",
        "id": 177948362,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570827223
    }
]