[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"s\">&quot;Hello world!&quot;</span><span class=\"p\">).</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">s</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>I wonder if there's some configuration that can do the inlining at MIR level? I tried </p>\n<div class=\"codehilite\"><pre><span></span><code>rustc +nightly -O --emit mir src/main.rs -Z mir-opt-level=2\n</code></pre></div>\n\n\n<p>but the mir generated still contains the <code>Option::map</code> code.</p>",
        "id": 210604884,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600505281
    },
    {
        "content": "<p>Does it contain a call or the inlined body?</p>",
        "id": 210607222,
        "sender_full_name": "oli",
        "timestamp": 1600509065
    },
    {
        "content": "<p>it contains a call.</p>",
        "id": 210608407,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600511179
    },
    {
        "content": "<p>curious, but I guess our inliner is pretty unusable anyway, so not too surprising</p>",
        "id": 210609386,
        "sender_full_name": "oli",
        "timestamp": 1600512934
    },
    {
        "content": "<p>If there's anything a beginner (i) can do, i'm willing to help. Personally i think all inlining should happen before monomorphization in an ideal world...</p>",
        "id": 210609836,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600513795
    },
    {
        "content": "<p>ideally, yes. The current status is twofold: <a href=\"https://github.com/rust-lang/rust/pull/68828\">https://github.com/rust-lang/rust/pull/68828</a> is needed to make inlining work regardless of function declaration order within a crate. The second thing is that we need a non-heuristic algorithm for deciding when to inline a function</p>",
        "id": 210609953,
        "sender_full_name": "oli",
        "timestamp": 1600513963
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"131828\" href=\"/#narrow/stream/131828-t-compiler/topic/MIR-level.20inlining\">#t-compiler &gt; MIR-level inlining</a> by <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span></p>",
        "id": 210609966,
        "sender_full_name": "Notification Bot",
        "timestamp": 1600513997
    },
    {
        "content": "<p>the first is already implemented but there're some perf impacts?<br>\nthe second, maybe we can steal one from llvm? i'm also curious why do we need a non-heuristic one?</p>",
        "id": 210610617,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600515167
    },
    {
        "content": "<p>uff... for the second there was a huge discussion that I don't have a good summary of. Maybe <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> remembers where they discussed that?</p>",
        "id": 210611118,
        "sender_full_name": "oli",
        "timestamp": 1600515953
    },
    {
        "content": "<p>Uh, I wasn't sure why we couldn't use a heuristic either :)</p>",
        "id": 210611178,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1600515996
    },
    {
        "content": "<p>Maybe I'm misinterpreting what you mean by heuristic. AIUI LLVM just uses a set of heuristics too.</p>",
        "id": 210611195,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1600516033
    },
    {
        "content": "<p>I thought <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> came up with a plan for a deterministic inliner?</p>",
        "id": 210611198,
        "sender_full_name": "oli",
        "timestamp": 1600516047
    },
    {
        "content": "<p>The current set is actually based on those ones as I recall.</p>",
        "id": 210611199,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1600516050
    },
    {
        "content": "<p>Oh, is this because of the query system?</p>",
        "id": 210611204,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1600516061
    },
    {
        "content": "<p>no</p>",
        "id": 210611205,
        "sender_full_name": "oli",
        "timestamp": 1600516063
    },
    {
        "content": "<p>maybe that was for mir-opt-level=1</p>",
        "id": 210611213,
        "sender_full_name": "oli",
        "timestamp": 1600516073
    },
    {
        "content": "<p>I think the idea was to inline whenever we know that inlining is definitely an improvement</p>",
        "id": 210611260,
        "sender_full_name": "oli",
        "timestamp": 1600516109
    },
    {
        "content": "<p>e.g. <code>Vec::len</code></p>",
        "id": 210611265,
        "sender_full_name": "oli",
        "timestamp": 1600516130
    },
    {
        "content": "<p>For mir-opt-level=1, that's probably what we want to do even though it's very restrictive</p>",
        "id": 210611269,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1600516149
    },
    {
        "content": "<p>and then activate the heuristic at mir-opt-level=2 or wherever we allow expensive opts?</p>",
        "id": 210611274,
        "sender_full_name": "oli",
        "timestamp": 1600516182
    },
    {
        "content": "<p>Yeah, that makes sense</p>",
        "id": 210611337,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1600516246
    },
    {
        "content": "<p>anyway... I should probably revive my inlining cycle PR and see if it's still a perf regression if we also turn on inlining</p>",
        "id": 210611339,
        "sender_full_name": "oli",
        "timestamp": 1600516248
    },
    {
        "content": "<p>since right now all it does is extra work <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 210611343,
        "sender_full_name": "oli",
        "timestamp": 1600516271
    },
    {
        "content": "<p>I'd like to give some context here:</p>\n<div class=\"codehilite\"><pre><span></span><code>  Lines           Copies         Function name\n  -----           ------         -------------\n  7668776 (100%)  240632 (100%)  (TOTAL)\n   223241 (2.9%)    3437 (1.4%)  core::option::Option&lt;T&gt;::map\n   185588 (2.4%)   13396 (5.6%)  core::ptr::drop_in_place\n</code></pre></div>\n\n\n<p>This is cargo-llvm-lines result on <code>rustc_middle</code>.</p>",
        "id": 210611402,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600516351
    },
    {
        "content": "<p>no clue why the current heuristic doesn't inline <code>Option::map</code></p>",
        "id": 210611419,
        "sender_full_name": "oli",
        "timestamp": 1600516432
    },
    {
        "content": "<p>maybe it already inlined the closure call and then the body is too large to get inlined?</p>",
        "id": 210611471,
        "sender_full_name": "oli",
        "timestamp": 1600516486
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>fn main() -&gt; () {\n    let mut _0: ();                      // return place in scope 0 at src/main.rs:1:11: 1:11\n    let mut _1: std::option::Option&lt;()&gt;; // in scope 0 at src/main.rs:2:13: 2:66\n    let mut _2: std::option::Option&lt;&amp;str&gt;; // in scope 0 at src/main.rs:2:13: 2:33\n    let mut _3: [closure@src/main.rs:2:38: 2:64]; // in scope 0 at src/main.rs:2:38: 2:64\n    scope 1 {\n    }\n\n    bb0: {\n        StorageLive(_1);                 // scope 0 at src/main.rs:2:13: 2:66\n        StorageLive(_2);                 // scope 0 at src/main.rs:2:13: 2:33\n        ((_2 as Some).0: &amp;str) = const &quot;Hello world!&quot;; // scope 0 at src/main.rs:2:13: 2:33\n                                         // ty::Const\n                                         // + ty: &amp;str\n                                         // + val: Value(Slice { data: Allocation { bytes: [72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [4095], len: Size { raw: 12 } }, size: Size { raw: 12 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 12 })\n                                         // mir::Constant\n                                         // + span: src/main.rs:2:18: 2:32\n                                         // + literal: Const { ty: &amp;str, val: Value(Slice { data: Allocation { bytes: [72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [4095], len: Size { raw: 12 } }, size: Size { raw: 12 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 12 }) }\n        discriminant(_2) = 1;            // scope 0 at src/main.rs:2:13: 2:33\n        StorageLive(_3);                 // scope 0 at src/main.rs:2:38: 2:64\n        _1 = Option::&lt;&amp;str&gt;::map::&lt;(), [closure@src/main.rs:2:38: 2:64]&gt;(move _2, move _3) -&gt; bb1; // scope 0 at src/main.rs:2:13: 2:66\n                                         // mir::Constant\n                                         // + span: src/main.rs:2:34: 2:37\n                                         // + literal: Const { ty: fn(std::option::Option&lt;&amp;str&gt;, [closure@src/main.rs:2:38: 2:64]) -&gt; std::option::Option&lt;()&gt; {std::option::Option::&lt;&amp;str&gt;::map::&lt;(), [closure@src/main.rs:2:38: 2:64]&gt;}, val: Value(Scalar(&lt;ZST&gt;)) }\n    }\n\n    bb1: {\n        StorageDead(_3);                 // scope 0 at src/main.rs:2:65: 2:66\n        StorageDead(_2);                 // scope 0 at src/main.rs:2:65: 2:66\n        StorageDead(_1);                 // scope 0 at src/main.rs:2:66: 2:67\n        _0 = const ();                   // scope 0 at src/main.rs:1:11: 3:2\n        return;                          // scope 0 at src/main.rs:3:2: 3:2\n    }\n}\n</code></pre></div>",
        "id": 210611533,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600516585
    },
    {
        "content": "<p>This is mir main function</p>",
        "id": 210611540,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600516606
    },
    {
        "content": "<p>code is this:</p>\n<div class=\"codehilite\"><pre><span></span><code>fn main() {\n    let _ = Some(&quot;Hello world!&quot;).map(|s| { println!(&quot;{}&quot;, s); } );\n}\n</code></pre></div>",
        "id": 210611542,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600516621
    },
    {
        "content": "<p>I also wonder if it makes sense to have a separate program maybe called <code>mir-opt</code> to debug the mir optimization process directly. It's a pain to have to build whole rustc with any tiny change...</p>",
        "id": 210611735,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600516934
    },
    {
        "content": "<p>what I mean is that the body of <code>Option::&lt;&amp;str&gt;::map::&lt;(), [closure@src/main.rs:2:38: 2:64]&gt;</code> may have inlined the closure already. Thus the body of that function is really large and doesn't get inlined into <code>main</code></p>",
        "id": 210612038,
        "sender_full_name": "oli",
        "timestamp": 1600517517
    },
    {
        "content": "<p>try using a really simple closure</p>",
        "id": 210612077,
        "sender_full_name": "oli",
        "timestamp": 1600517528
    },
    {
        "content": "<p><code>map</code> is generic though, how could it inline the closure?</p>",
        "id": 210612144,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1600517587
    },
    {
        "content": "<p>well, the specific monomorphic instance could inline... oh we don't do that lol</p>",
        "id": 210612155,
        "sender_full_name": "oli",
        "timestamp": 1600517622
    },
    {
        "content": "<p>sorry idk where my mind went there</p>",
        "id": 210612163,
        "sender_full_name": "oli",
        "timestamp": 1600517641
    },
    {
        "content": "<p>ok</p>",
        "id": 210612166,
        "sender_full_name": "oli",
        "timestamp": 1600517642
    },
    {
        "content": "<p>so back to the basics... I guess you can use a debug rustc and enable logging to see what the inliner says about the fact that it's not inlining stuff</p>",
        "id": 210612207,
        "sender_full_name": "oli",
        "timestamp": 1600517677
    },
    {
        "content": "<p>I know that inside one crate we do some weird DefId comparisons which could prohibit this, but since <code>map</code> comes from libcore I don't see any reason it shouldn't get inlined</p>",
        "id": 210612208,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1600517681
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Thanks for the hints! what <code>RUSTC_LOG</code> setting should i use here? I'll give it a try tonight. (After i build a debug rustc...)</p>",
        "id": 210612270,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600517785
    },
    {
        "content": "<p><code>rustc_mir::transform::inline</code></p>",
        "id": 210612278,
        "sender_full_name": "oli",
        "timestamp": 1600517805
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/MIR-level.20inlining/near/210612155\">said</a>:</p>\n<blockquote>\n<p>well, the specific monomorphic instance could inline... oh we don't do that lol</p>\n</blockquote>\n<p>LLVM could be though since it does see the monmorphized <code>Option::map()</code> function. I think you're probably right that it's inlining the closure into <code>map</code> first and that makes it too big to inline into the callsite.</p>",
        "id": 210614154,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1600520752
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Sep 19 21:59:13.564 DEBUG rustc_mir::transform::inline: should_inline(CallSite { callee: DefId(2:5601 ~ core[93f7]::option[0]::{{impl}}[0]::map[0]), substs: [&amp;str, (), [closure@src\\main.rs:2:31: 2:57]], bb: bb0, location: SourceInfo { span: src\\main.rs:2:13: 2:58 (#0), scope: scope[0] } })\nSep 19 21:59:13.564 DEBUG rustc_mir::transform::inline:     final inline threshold = 100\nSep 19 21:59:13.564 DEBUG rustc_mir::transform::inline: NOT inlining CallSite { callee: DefId(2:5601 ~ core[93f7]::option[0]::{{impl}}[0]::map[0]), substs: [&amp;str, (), [closure@src\\main.rs:2:31: 2:57]], bb: bb0, location: SourceInfo { span: src\\main.rs:2:13: 2:58 (#0), scope: scope[0] } } [cost=222 &gt; threshold=100]\n</code></pre></div>",
        "id": 210616725,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600524192
    },
    {
        "content": "<p><span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">            </span><span class=\"c1\">// In debug builds, trigger a panic on overflow.</span>\n<span class=\"w\">            </span><span class=\"c1\">// This should optimize completely out in release builds.</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">forward_checked</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">).</span><span class=\"n\">is_none</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Add</span>::<span class=\"n\">add</span><span class=\"p\">(</span><span class=\"bp\">Self</span>::<span class=\"n\">MAX</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>with mir inlining this triggers const prop which will subsequently complain about the statically known overflow</p>",
        "id": 210618833,
        "sender_full_name": "oli",
        "timestamp": 1600526930
    },
    {
        "content": "<p><a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/trivial.20inliner/near/206853915\">https://rust-lang.zulipchat.com/#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/trivial.20inliner/near/206853915</a> <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 210619235,
        "sender_full_name": "lcnr",
        "timestamp": 1600527479
    },
    {
        "content": "<p>oh heh, I guess no solution there either</p>",
        "id": 210619783,
        "sender_full_name": "oli",
        "timestamp": 1600528214
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">// build-fail</span>\n<span class=\"c1\">// compile-flags: -Zmir-opt-level=2</span>\n\n<span class=\"cp\">#![deny(warnings)]</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[inline(always)]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u8</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//~^ ERROR this arithmetic operation will overflow</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"kt\">u8</span>::<span class=\"n\">MAX</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 210619791,
        "sender_full_name": "oli",
        "timestamp": 1600528226
    },
    {
        "content": "<p>repro... I guess I'm opening a new worktree</p>",
        "id": 210619798,
        "sender_full_name": "oli",
        "timestamp": 1600528235
    },
    {
        "content": "<p>damn all I wanted was to run perf</p>",
        "id": 210619807,
        "sender_full_name": "oli",
        "timestamp": 1600528247
    },
    {
        "content": "<p><span aria-label=\"rabbit\" class=\"emoji emoji-1f407\" role=\"img\" title=\"rabbit\">:rabbit:</span> <span aria-label=\"hole\" class=\"emoji emoji-1f573\" role=\"img\" title=\"hole\">:hole:</span> s it is</p>",
        "id": 210619811,
        "sender_full_name": "oli",
        "timestamp": 1600528258
    },
    {
        "content": "<p>So, for the original motivating case <code>Option::map</code>, on the MIR-level, currently MIR-level consider it too complex to be inlined. Cost  ~200 &gt; 100. From the user's side, i think it's fair to say that <code>#[inline]</code> on this particular API is not working as expected. And it should either be converted to a <code>#[inline(always)]</code> or be removed?</p>",
        "id": 210621001,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600529953
    },
    {
        "content": "<p><code>#[inline]</code> is also forwarded to llvm</p>",
        "id": 210621171,
        "sender_full_name": "oli",
        "timestamp": 1600530120
    },
    {
        "content": "<p>so there it will still work</p>",
        "id": 210621219,
        "sender_full_name": "oli",
        "timestamp": 1600530125
    },
    {
        "content": "<p>in fact, that was the sole use case of it until MIR came along and some time later MIR inlining</p>",
        "id": 210621239,
        "sender_full_name": "oli",
        "timestamp": 1600530157
    },
    {
        "content": "<p>since MIR inlining is only an unstable thing, that is still the sole use from a stable perspective</p>",
        "id": 210621246,
        "sender_full_name": "oli",
        "timestamp": 1600530180
    },
    {
        "content": "<p>ok...</p>",
        "id": 210621413,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600530428
    }
]