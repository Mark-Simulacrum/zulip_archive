[
    {
        "content": "<p>may i ask small question about mir... i see this code generated:<br>\n<code>drop(_2) -&gt; [return: bb4, unwind: bb5];</code> but i thought <code>dropping</code> cannot panic?</p>",
        "id": 210620344,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600529021
    },
    {
        "content": "<p>dropping can definitely panic, though usually doing so is bad practice because if your panicking drop gets run as part of unwinding, it'll abort</p>",
        "id": 210620418,
        "sender_full_name": "simulacrum",
        "timestamp": 1600529153
    },
    {
        "content": "<p>ISTR a proposal to make panic always abort in drop</p>",
        "id": 210620471,
        "sender_full_name": "cuviper",
        "timestamp": 1600529222
    },
    {
        "content": "<p>oh, ok, thanks!</p>",
        "id": 210620482,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600529238
    },
    {
        "content": "<p>yes, there's indeed such a proposal, but it is unclear how we'd roll it out and how to warn about the potential breakage. iirc one idea was to do it across an edition boundary, but it's unclear if that actually works well</p>",
        "id": 210621538,
        "sender_full_name": "simulacrum",
        "timestamp": 1600530660
    },
    {
        "content": "<p>Yeah, that seems awkward since the <code>Drop</code> implementation you're calling could have been written in a different edition.  So I guess it'd be \"drops that throw abort the program if that drop impl was compiled using edition vNNNN?\"  Seems difficult to rely on.</p>",
        "id": 210635516,
        "sender_full_name": "scottmcm",
        "timestamp": 1600549919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> yeah it's not the <em>best</em>, but I think if the theory is that no one is relying on this <em>now</em> but we aren't 100% confident in that, something like this could work</p>",
        "id": 210635627,
        "sender_full_name": "simulacrum",
        "timestamp": 1600550049
    },
    {
        "content": "<p>that said, I think the primary benefit of such a rule is the avoidance of code that tries to be intelligent about continuing to drop after panics in drop</p>",
        "id": 210635641,
        "sender_full_name": "simulacrum",
        "timestamp": 1600550110
    },
    {
        "content": "<p>so maybe this is not super helpful in that sense</p>",
        "id": 210635647,
        "sender_full_name": "simulacrum",
        "timestamp": 1600550117
    },
    {
        "content": "<p>I guess another option would be a different panic strategy, to make it global.  And changing panic strategy can already break dependencies, so...</p>",
        "id": 210635878,
        "sender_full_name": "scottmcm",
        "timestamp": 1600550447
    },
    {
        "content": "<p>Servo definitely does intentionally panic during drop, if not already panicking:<br>\n<a href=\"https://github.com/servo/servo/blob/4eefaa4a2c664e93f6f3cc18ad28b957b8200616/components/layout_2020/context.rs#L46\">https://github.com/servo/servo/blob/4eefaa4a2c664e93f6f3cc18ad28b957b8200616/components/layout_2020/context.rs#L46</a></p>",
        "id": 210636067,
        "sender_full_name": "Samuel Harrington",
        "timestamp": 1600550709
    },
    {
        "content": "<p>I have no opinion on whether that's a good idea, though :)</p>",
        "id": 210636144,
        "sender_full_name": "Samuel Harrington",
        "timestamp": 1600550814
    },
    {
        "content": "<p>Hm, interesting. The question I guess is whether that panic leading to an abort would be a problem for servo. I guess presumably yes...</p>",
        "id": 210636551,
        "sender_full_name": "simulacrum",
        "timestamp": 1600551456
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/panic.20during.20drop/near/210636551\">said</a>:</p>\n<blockquote>\n<p>Hm, interesting. The question I guess is whether that panic leading to an abort would be a problem for servo. I guess presumably yes...</p>\n</blockquote>\n<p>presumably that is why they only assert if things are not already panicking -- to avoid the double-panic abort.</p>",
        "id": 210662219,
        "sender_full_name": "RalfJ",
        "timestamp": 1600601067
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> ^</p>",
        "id": 210662229,
        "sender_full_name": "RalfJ",
        "timestamp": 1600601081
    },
    {
        "content": "<p>Yes, the branch for already panicking is to avoid the double-panic abort. Asserting in destructors to check invariants and catch bugs is useful. The proposal to make all panics in destructors abort would prevent that. What’s the benefit of that proposal?</p>",
        "id": 210662567,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1600601636
    },
    {
        "content": "<p>hm, not sure if there's a good summary somewhere... basically, it is really hard to make (unsafe) code handle that situation correctly</p>",
        "id": 210667760,
        "sender_full_name": "RalfJ",
        "timestamp": 1600609564
    },
    {
        "content": "<p>for unsafe code it is often very important to know if an operation can panic or not, and it is extremely easy to forget that every assignment or end of scope can implicitly cause panics if there are user-defined types being dropped there</p>",
        "id": 210667780,
        "sender_full_name": "RalfJ",
        "timestamp": 1600609601
    },
    {
        "content": "<p>IIRC even the standard library has bugs in that area semi-regularly</p>",
        "id": 210667785,
        "sender_full_name": "RalfJ",
        "timestamp": 1600609617
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> will probably know more</p>",
        "id": 210667793,
        "sender_full_name": "RalfJ",
        "timestamp": 1600609631
    },
    {
        "content": "<p>Yeah, I remember that panic-safety can be surprisingly tricky when writing generic unsafe code. Removing unwinding from destructors seems like a big hammer for only slightly improving that situation, though.</p>",
        "id": 210669831,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1600612980
    },
    {
        "content": "<p>I think there's that, but IIRC most of the discussions came about as a result of a series of patches trying to make the standard library drop more in the presence of panics in panics</p>\n<p>e.g. if you drop a vector, and dropping the 3rd element panics, currently we'll go on and try to drop the rest of the elements still</p>",
        "id": 210671578,
        "sender_full_name": "simulacrum",
        "timestamp": 1600615793
    },
    {
        "content": "<p>but that's more code and is (potentially) not great code-size wise etc</p>\n<p>if we just aborted in dtor panics, then that wouldn't be necessary</p>",
        "id": 210671625,
        "sender_full_name": "simulacrum",
        "timestamp": 1600615819
    },
    {
        "content": "<p>of course, the alternative is to just say \"that's not necessary\" :)</p>",
        "id": 210671630,
        "sender_full_name": "simulacrum",
        "timestamp": 1600615827
    },
    {
        "content": "<p>By that same logic if we never unwind and all panics are aborts, then we don’t need to worry about leaking the rest of a Vec’s items when dropping one of them panics.</p>",
        "id": 210672778,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1600617797
    },
    {
        "content": "<p>We already have a compiler flag for opting into that behavior</p>",
        "id": 210672787,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1600617824
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Looking more closely, the logic of \"leaking the rest of the items is bad, let’s nuke the whole process instead\" makes no sense to me</p>",
        "id": 210672955,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1600618074
    },
    {
        "content": "<p>Yeah, I don't think that it's a matter of being more logical to nuke the process -- it's more of a \"no one needs to think about this\" I guess. I agree it's not super well-motivated, so it's not too surprising that nothing has happened here yet</p>",
        "id": 210673034,
        "sender_full_name": "simulacrum",
        "timestamp": 1600618154
    },
    {
        "content": "<p>For the Vec case, leaking seems like a fine way to not think about this to me</p>",
        "id": 210673119,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1600618245
    },
    {
        "content": "<p>For <code>Vec&lt;Box&lt;dyn Trait&gt;&gt;</code> leaking the rest of the items would cause a memory leak. This is harder to debug than aborting the process.</p>",
        "id": 210673139,
        "sender_full_name": "bjorn3",
        "timestamp": 1600618292
    },
    {
        "content": "<p>Same leak like as <code>Vec&lt;AnythingThatOwnsHeapAllocations&gt;</code>, right?</p>",
        "id": 210674029,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1600619599
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> The idea of making it a different panic strategy makes sense. That would make it more difficult to deprecate the strategy that allows panics during drop, but it would allow a smooth transition.</p>",
        "id": 210674033,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600619616
    },
    {
        "content": "<p>And yes, there have absolutely been bugs in this area.</p>",
        "id": 210674124,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600619763
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> Why would making panics in destructors abort mean that you can't use assert to check important conditions inside destructors? The assertion would still take place, and would still catch potential bugs. A panic that aborts still prints a message before it does.</p>",
        "id": 210674223,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600619916
    },
    {
        "content": "<p>It just doesn't unwind.</p>",
        "id": 210674230,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600619931
    },
    {
        "content": "<p>Ok, that’s true. Still, I don’t get why this half-way strategy between panic=unwind and panic=abort is desirable</p>",
        "id": 210674923,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1600621062
    },
    {
        "content": "<p>It would avoid all the extra code required, and developer awareness required, for a potential unwind from a destructor.</p>",
        "id": 210675806,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600622390
    },
    {
        "content": "<p>In other words, it would reduce very likely bugs.</p>",
        "id": 210675856,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600622413
    },
    {
        "content": "<p>Writing \"unwind safe\" code is a source of bugs, for very minimal apparent value.</p>",
        "id": 210675882,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600622454
    },
    {
        "content": "<p>a \"half-way\" panic strategy wouldn't really help for collections that want to avoid leaks though, they'd still need that code</p>",
        "id": 210709277,
        "sender_full_name": "RalfJ",
        "timestamp": 1600673813
    },
    {
        "content": "<p>what would help is to establish \"it's okay for collections to abort-on-panic-in-drop\", add a little helper <code>abort_on_unwind</code> (a wrapper around <code>catch_unwind</code>), and use that in collections' <code>drop</code> impl</p>",
        "id": 210709340,
        "sender_full_name": "RalfJ",
        "timestamp": 1600673871
    },
    {
        "content": "<p>Setting that as a libs expectation makes sense to me.</p>\n<p>Prior Art: C++'s <code>Container</code> requires the element is <a href=\"https://en.cppreference.com/w/cpp/named_req/Destructible\"><code>Destructible</code></a> which requires that the destructor doesn't throw, so \"we abort if you panic in a destructor for an item in a vec\" seems like a reasonable translation of that requirement to safe rust.</p>",
        "id": 210710603,
        "sender_full_name": "scottmcm",
        "timestamp": 1600674927
    },
    {
        "content": "<p>Yes unwind-safety in generic unsafe code is very tricky but destructors are only part of it</p>",
        "id": 210732834,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1600690875
    },
    {
        "content": "<p>There is a precedent: in C++11, destructors were switched to be marked <code>noexcept</code> by default which casues them to abort if they throw an exception. You can still opt-in to allowing a destructor to throw by marking it <code>noexcept(false)</code>.</p>",
        "id": 210736164,
        "sender_full_name": "Amanieu",
        "timestamp": 1600692787
    },
    {
        "content": "<p>Also note that in C++ you get undefined behavior if the destructor of an object in a standard collection (eg. <code>std::vector</code>) throws.</p>",
        "id": 210736358,
        "sender_full_name": "Amanieu",
        "timestamp": 1600692885
    }
]