[
    {
        "content": "<p>So there's now two proposed MIR optimizations (<a href=\"https://github.com/rust-lang/rust/issues/66282\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66282\">#66282</a>, <a href=\"https://github.com/rust-lang/rust/issues/66329\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66329\">#66329</a>) that try to exploit \"executing unreachable is UB\" and need to take care that the <code>Unreachable</code> they're looking at is actually guaranteed to execute. I could imagine there's more in the future. Naively, this could require scanning lots of basic blocks.</p>\n<p>It seems like, perhaps, there should be a clean-up which runs once in a while and which other passes rely on for quality of optimizations (not for correctness ofc) rather than redoing analyses. Similar to CFG simplification, if you will. In fact, maybe <a href=\"https://github.com/rust-lang/rust/issues/66329\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66329\">#66329</a> could be that pass.</p>\n<p>Alternatively or in addition, as I sketched in <a href=\"https://github.com/rust-lang/rust/pull/66282#discussion_r346319446\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/66282#discussion_r346319446\">https://github.com/rust-lang/rust/pull/66282#discussion_r346319446</a>, we could trim <code>s1; s2; ...; sN; unreachable</code> to <code>s1; s2; ...; sK; unreachable</code> where <code>sK</code> is the last statement (if any) that can diverge (and thus, make the basic block not-UB). This could be very cheap in the case where nothing changes (only need to look at the last statement in the BB) so we could perhaps run it more frequently. And after this trimming, it's easy to identify basic blocks which will surely cause UB if jumped to (since their statement list is empty).</p>\n<p>What do y'all think? cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  <span class=\"user-mention\" data-user-id=\"126931\">@centril</span></p>",
        "id": 180734451,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1573741143
    },
    {
        "content": "<p>I like it, this seems like a much more modular (and thus maintainable) approach</p>",
        "id": 180735216,
        "sender_full_name": "oli",
        "timestamp": 1573741665
    },
    {
        "content": "<p>and it automatically errors on the conservative side instead of silently doing bad optimizations</p>",
        "id": 180735285,
        "sender_full_name": "oli",
        "timestamp": 1573741687
    },
    {
        "content": "<p>Seems good</p>",
        "id": 180735855,
        "sender_full_name": "centril",
        "timestamp": 1573742145
    },
    {
        "content": "<p>My one question is how we roll this out since we have two separate PRs now</p>",
        "id": 180735871,
        "sender_full_name": "centril",
        "timestamp": 1573742161
    },
    {
        "content": "<p>should we land both and then do cleanup after or do it from the get-go?</p>",
        "id": 180735939,
        "sender_full_name": "centril",
        "timestamp": 1573742178
    },
    {
        "content": "<p>I don't have a strong opinion on that.</p>",
        "id": 180736295,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1573742437
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> please instruct :P</p>",
        "id": 180736363,
        "sender_full_name": "centril",
        "timestamp": 1573742484
    },
    {
        "content": "<p>I think we can just make the current PRs mir-opt-level=3</p>",
        "id": 180736465,
        "sender_full_name": "oli",
        "timestamp": 1573742528
    },
    {
        "content": "<p>then we can merge them (+ have an open issue about the unsoundness of the optimizations)</p>",
        "id": 180736492,
        "sender_full_name": "oli",
        "timestamp": 1573742549
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> wouldn't be too difficult to filter out bbs with <code>InlineAsm</code>  in my PR</p>",
        "id": 180736526,
        "sender_full_name": "centril",
        "timestamp": 1573742594
    },
    {
        "content": "<p>so I can make it sound from the start</p>",
        "id": 180736533,
        "sender_full_name": "centril",
        "timestamp": 1573742605
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> as long as it has a FIXME with an issue</p>",
        "id": 180736559,
        "sender_full_name": "oli",
        "timestamp": 1573742638
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 180736609,
        "sender_full_name": "centril",
        "timestamp": 1573742649
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> what are you thoughts on inlining and my optimization?</p>",
        "id": 180736634,
        "sender_full_name": "centril",
        "timestamp": 1573742668
    },
    {
        "content": "<p>(also, why aren't we inlining atm on release mode?)</p>",
        "id": 180736653,
        "sender_full_name": "centril",
        "timestamp": 1573742684
    },
    {
        "content": "<p>inlining is still broken</p>",
        "id": 180739040,
        "sender_full_name": "oli",
        "timestamp": 1573744144
    },
    {
        "content": "<p>you can't boostrap rustc</p>",
        "id": 180739046,
        "sender_full_name": "oli",
        "timestamp": 1573744148
    },
    {
        "content": "<p>but I don't have the capacity to tackle another project atm</p>",
        "id": 180739059,
        "sender_full_name": "oli",
        "timestamp": 1573744163
    },
    {
        "content": "<p>and I don't even have any tips to give someone who'd want to tackle it</p>",
        "id": 180739075,
        "sender_full_name": "oli",
        "timestamp": 1573744177
    },
    {
        "content": "<p>ouch; then my optimization should definitely be -Z mir-opt-level=3</p>",
        "id": 180739531,
        "sender_full_name": "centril",
        "timestamp": 1573744444
    },
    {
        "content": "<blockquote>\n<p>and I don't even have any tips to give someone who'd want to tackle it</p>\n</blockquote>\n<p>I have been looking at this off and on but I'm currently sidetracked on const prop stuff. My previous approach was doing binary searches with the <code>-Z fuel</code> argument to find where the mis-optimization was occurring. But that's very time intensive...</p>",
        "id": 180740425,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1573744953
    }
]