[
    {
        "content": "<p>I feel like the more I read about data-flow analysis the less I understand it <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>\n<p>Isn't it just iterating over all the statements and terminators and keeping track of some state at each one? Or is it more involved? Thanks!</p>",
        "id": 215032012,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604007573
    },
    {
        "content": "<p>Sure, but program execution can also be thought of as \"iterating over instructions and keeping track of some state\" <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>As far as I can tell (and correct me if I'm wrong, I'm just trying to get into the topic myself), the point of DFA is to reason about a program and mine information that is useful for code transformations, without actually running it.</p>",
        "id": 215032977,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1604008133
    },
    {
        "content": "<p>I guess I wasn't very clear <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> When I said \"keeping track of some state\" I didn't mean executing the program, I meant e.g. what variables have been assigned to</p>",
        "id": 215037704,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604011289
    },
    {
        "content": "<p>It keeps track of state, and propagates that state along control flow edges, until that state doesn't change anymore</p>",
        "id": 215037837,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1604011366
    },
    {
        "content": "<p>The thing that confuses me is how it works for branching: How does it keep track of all the possibilities depending on which branches were taken? E.g. how does it keep track of <code>a</code>'s init status?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">function</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 215037923,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604011438
    },
    {
        "content": "<p>When multiple control flow edges enter a block, the state they carry is unified. In this case that means <code>&amp;</code>-ing the \"initialized\" state of each variable.</p>",
        "id": 215038099,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1604011512
    },
    {
        "content": "<p>So <code>a</code> is initialized at the end of the function if <code>a</code> is initialized at the end of the <code>if</code> and <code>else</code> block</p>",
        "id": 215038141,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1604011554
    },
    {
        "content": "<p>Well, the <code>else</code> arm is missing, so there are actually 3 control flow edges that reach the last <code>a</code>, one of which doesn't initialize <code>a</code></p>",
        "id": 215038235,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1604011599
    },
    {
        "content": "<p>So does the pass branch out like the program?</p>",
        "id": 215038271,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604011636
    },
    {
        "content": "<p>I.e. it follows each branch and then checks the results of each?</p>",
        "id": 215038297,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604011664
    },
    {
        "content": "<p>I guess I understand now how it works for the init check, but I still feel confused about how it works for optimizations</p>",
        "id": 215038371,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604011694
    },
    {
        "content": "<p>Yeah, it propagates the state through every block and edge</p>",
        "id": 215038375,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1604011699
    },
    {
        "content": "<p>Hmm, interesting</p>",
        "id": 215038388,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604011718
    },
    {
        "content": "<p>This stuff is so cool <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 215038396,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604011725
    },
    {
        "content": "<p>Check out the <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/dataflow/impls/struct.MaybeStorageLive.html\"><code>MaybeStorageLive</code></a> impl, it's relatively simple and used in optimizations</p>",
        "id": 215038407,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1604011739
    },
    {
        "content": "<p>Great, thanks! I'll check it out :)</p>",
        "id": 215038426,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604011752
    },
    {
        "content": "<p>I guess part of it is there's a lot of technical terminology that can be confusing</p>",
        "id": 215038509,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604011805
    },
    {
        "content": "<p>Yeah, lots of mathematics</p>",
        "id": 215038540,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1604011841
    },
    {
        "content": "<p>because dataflow state is modeled as a lattice</p>",
        "id": 215038553,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1604011856
    },
    {
        "content": "<p>Yes, the lattice part confuses me. I tried to read the section in the Dragon Book that talks about this and it was over my head when I got to the \"foundations of data-flow analysis\" section</p>",
        "id": 215038596,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604011916
    },
    {
        "content": "<p>I think I'll try to read that pass you mentioned and then try the Dragon Book again <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 215038657,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604011936
    },
    {
        "content": "<p>Actually it's a semilattice <a href=\"https://en.wikipedia.org/wiki/Semilattice\">https://en.wikipedia.org/wiki/Semilattice</a></p>",
        "id": 215038713,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1604011980
    },
    {
        "content": "<p>Which makes sense – the \"join\" operation is exactly what happens when you have &gt;1 incoming control flow edge</p>",
        "id": 215038739,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1604012005
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 215038751,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604012017
    },
    {
        "content": "<p>I think what confuses me is the combination of the semilattice and meet/join ops</p>",
        "id": 215038773,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604012038
    },
    {
        "content": "<p>If the question you're trying to answer is \"is this property <em>definitely</em> true for this local\" this <em>join</em> operation will usually be <code>&amp;</code>, if the question is \"<em>might</em> this property be true for this local\", then the <em>join</em> operation will be <code>|</code></p>",
        "id": 215038851,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1604012093
    },
    {
        "content": "<p>Interesting.</p>",
        "id": 215038865,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604012105
    },
    {
        "content": "<p>Does that make sense?</p>",
        "id": 215038873,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1604012112
    },
    {
        "content": "<p>Partially.</p>",
        "id": 215038892,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604012126
    },
    {
        "content": "<p>Do you know of a less-mathematical explanation that I could read before I get to the full version with all the equations? Something that goes through the analysis like you're the computer</p>",
        "id": 215038894,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604012133
    },
    {
        "content": "<p>Thanks for trying to explain this to me by the way :)</p>",
        "id": 215038913,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604012148
    },
    {
        "content": "<p>Unfortunately not</p>",
        "id": 215038915,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1604012151
    },
    {
        "content": "<p>Maybe once I understand it I'll try to write something like that...</p>",
        "id": 215038986,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604012180
    },
    {
        "content": "<p>I read <a href=\"http://smallcultfollowing.com/babysteps/blog/2017/03/25/unification-in-chalk-part-1/\">niko's post about unification</a> which helped clear things up a lot, so I was wondering if there was something like that for data-flow</p>",
        "id": 215039019,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604012204
    },
    {
        "content": "<p>In case anyone else is interested, I found this slide deck from CMU, though it's still pretty mathematical: <a href=\"http://www.cs.cmu.edu/afs/cs/academic/class/15745-s06/web/handouts/05.pdf\">http://www.cs.cmu.edu/afs/cs/academic/class/15745-s06/web/handouts/05.pdf</a></p>",
        "id": 215040870,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604013416
    },
    {
        "content": "<p>this series of videos is pretty approachable IIRC <a href=\"https://www.youtube.com/watch?v=NVBQSR_HdL0&amp;list=PL_sGR8T76Y58l3Gck3ZwIIHLWEmXrOLV_&amp;index=2\">https://www.youtube.com/watch?v=NVBQSR_HdL0&amp;list=PL_sGR8T76Y58l3Gck3ZwIIHLWEmXrOLV_&amp;index=2</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"NVBQSR_HdL0\" href=\"https://www.youtube.com/watch?v=NVBQSR_HdL0&amp;list=PL_sGR8T76Y58l3Gck3ZwIIHLWEmXrOLV_&amp;index=2\"><img src=\"https://i.ytimg.com/vi/NVBQSR_HdL0/default.jpg\"></a></div>",
        "id": 215041162,
        "sender_full_name": "lqd",
        "timestamp": 1604013606
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Camelid</span> If you have a (e)library available, I'm fond of <a href=\"https://www.cs.rochester.edu/~scott/pragmatics/\">https://www.cs.rochester.edu/~scott/pragmatics/</a> -- I found it more approachable than the dragon book.  (I have 3e in dead tree.)</p>",
        "id": 215041191,
        "sender_full_name": "scottmcm",
        "timestamp": 1604013638
    },
    {
        "content": "<p>Thanks! I'll check out the videos and the book :)</p>",
        "id": 215041333,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604013745
    },
    {
        "content": "<p>Side note: I think for some reason the most approachable part of the dragon book is in the middle, where they talk about three address code and other IRs. Not sure why <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 215041376,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604013788
    },
    {
        "content": "<p>This is not part of the 5 video playlist, but it's from the same lecture series. A 20 minute video walking through an example: <a href=\"https://www.youtube.com/watch?v=jnbMirDEByY\">https://www.youtube.com/watch?v=jnbMirDEByY</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"jnbMirDEByY\" href=\"https://www.youtube.com/watch?v=jnbMirDEByY\"><img src=\"https://i.ytimg.com/vi/jnbMirDEByY/default.jpg\"></a></div>",
        "id": 215041464,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1604013859
    },
    {
        "content": "<p>there's also an approachable chapter in Muchnick's book: its covers fundamentals, some of the mathematics, but also algorithms and pseudocode</p>",
        "id": 215041507,
        "sender_full_name": "lqd",
        "timestamp": 1604013908
    },
    {
        "content": "<p>(the rest of the book is great and approachable as well)</p>",
        "id": 215041665,
        "sender_full_name": "lqd",
        "timestamp": 1604014045
    },
    {
        "content": "<p>But yes, it's \"just\" iterating over everything and keeping state.  The interesting part is what to do for loops, and what order to visit basic blocks in.  For example, in <a href=\"https://github.com/rust-lang/rust/pull/46869/files#diff-48cfd8d23465df0fd4bf512c8a382a33cf215b8742b5a6f24cde53d348e47e14R93\">this (never-finished) pass</a> I went in reverse-post-order and assumed the worst.  You can also just run to a fixpoint, at the cost of more effort.</p>",
        "id": 215041744,
        "sender_full_name": "scottmcm",
        "timestamp": 1604014102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> Thanks for the video! I started watching it and so far it looks very helpful :)</p>",
        "id": 215041788,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604014165
    },
    {
        "content": "<p>I think I understand the meet/join operator now: It's just the set union operator, right?</p>",
        "id": 215042551,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604014950
    },
    {
        "content": "<p>It can also be intersection, depending on the analysis</p>",
        "id": 215042709,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1604015150
    },
    {
        "content": "<p>Huh, okay. I just finished the first video; it was helpful because it took the approach of \"being the computer\" which I've always found to be helpful. I'll look through the liveness analysis pass that you mentioned to try to understand this in practice.</p>",
        "id": 215042924,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604015358
    },
    {
        "content": "<p>Thanks again for the help!</p>",
        "id": 215042926,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604015362
    },
    {
        "content": "<p>(Said otherwise, inside a Basic Block this stuff is all easy.  It's those darn edges that cause all the problems :P)</p>",
        "id": 215049646,
        "sender_full_name": "scottmcm",
        "timestamp": 1604023426
    },
    {
        "content": "<p>And edges cause problems for human compilers too <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 215049737,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604023530
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/understanding.20data-flow.20analysis/near/215038851\">said</a>:</p>\n<blockquote>\n<p>If the question you're trying to answer is \"is this property <em>definitely</em> true for this local\" this <em>join</em> operation will usually be <code>&amp;</code>, if the question is \"<em>might</em> this property be true for this local\", then the <em>join</em> operation will be <code>|</code></p>\n</blockquote>\n<p>Now that I've watched more of the lecture series that <span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> recommended, I think I understand this. For example, you would use <code>&amp;</code> as the join operator if you were checking that a variable is initialized, since you need to know for sure. If you're trying to find all the possible values a variable can hold, you would use <code>|</code> as the join operator. Is that right?</p>",
        "id": 215536993,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604459689
    },
    {
        "content": "<p>And IIUC, a \"meet\" semilattice uses the <code>&amp;</code> operator and a \"join\" semilattice uses the <code>|</code> operator?</p>",
        "id": 215537377,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604460314
    }
]