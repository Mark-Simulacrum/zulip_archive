[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I have a checkout open working on it</p>",
        "id": 187270537,
        "sender_full_name": "oli",
        "timestamp": 1580742827
    },
    {
        "content": "<p>working on what?</p>",
        "id": 187270550,
        "sender_full_name": "eddyb",
        "timestamp": 1580742835
    },
    {
        "content": "<p>the protoype is quite invasive though</p>",
        "id": 187270554,
        "sender_full_name": "oli",
        "timestamp": 1580742837
    },
    {
        "content": "<p>I'm working on a real solution on the \"don't cause cycle errors in the inliner\"</p>",
        "id": 187270618,
        "sender_full_name": "oli",
        "timestamp": 1580742862
    },
    {
        "content": "<p>if you mean the inliner, the problem is a design one, not implementation</p>",
        "id": 187270637,
        "sender_full_name": "eddyb",
        "timestamp": 1580742877
    },
    {
        "content": "<p>how so?</p>",
        "id": 187270660,
        "sender_full_name": "oli",
        "timestamp": 1580742895
    },
    {
        "content": "<p>cycles in the query engine are not sound</p>",
        "id": 187270688,
        "sender_full_name": "eddyb",
        "timestamp": 1580742913
    },
    {
        "content": "<p>because for any non-trivial cycle, you have N \"mutually recursive\" queries, and depending which one is entered, the result of all of them will differ</p>",
        "id": 187270725,
        "sender_full_name": "eddyb",
        "timestamp": 1580742949
    },
    {
        "content": "<p>I'm not touching the query engine</p>",
        "id": 187271234,
        "sender_full_name": "oli",
        "timestamp": 1580743305
    },
    {
        "content": "<p>I think I have a solution completely side stepping any kind of issues</p>",
        "id": 187271330,
        "sender_full_name": "oli",
        "timestamp": 1580743356
    },
    {
        "content": "<p>I kind of doubt it, given everything I've heard about this before</p>",
        "id": 187271341,
        "sender_full_name": "eddyb",
        "timestamp": 1580743367
    },
    {
        "content": "<p>so talk to <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> and <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> (to be clear, I want to be impressed :P)</p>",
        "id": 187271394,
        "sender_full_name": "eddyb",
        "timestamp": 1580743400
    },
    {
        "content": "<p>I'm not saying it is a cheap or good solution, but a PoC giving us a starting point</p>",
        "id": 187271401,
        "sender_full_name": "oli",
        "timestamp": 1580743403
    },
    {
        "content": "<blockquote>\n<p>you have to be kidding me... it's sensitive to the declaration order?!</p>\n</blockquote>\n<p>Yes. You have no idea how many times I've done this exact thing trying to get the inliner to trigger only for the declaration order to be what's preventing it.</p>",
        "id": 187273956,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1580744895
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I just mean that this is a known design problem with no solutions that we know of that work <em>at all</em></p>",
        "id": 187274165,
        "sender_full_name": "eddyb",
        "timestamp": 1580745061
    },
    {
        "content": "<p>Let me be on my \"I solved this\"-high for a bit longer :P rebasing rn</p>",
        "id": 187274230,
        "sender_full_name": "oli",
        "timestamp": 1580745109
    },
    {
        "content": "<p>well played oli, you showed me <a href=\"https://github.com/rust-lang/rust/pull/68828#issuecomment-582235377\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/68828#issuecomment-582235377\">https://github.com/rust-lang/rust/pull/68828#issuecomment-582235377</a></p>",
        "id": 187425191,
        "sender_full_name": "eddyb",
        "timestamp": 1580877952
    },
    {
        "content": "<p>you (accidentally?) unblocked something that predates the query system and its cycle detection (and any way to catch such a cycle)</p>",
        "id": 187425414,
        "sender_full_name": "eddyb",
        "timestamp": 1580878296
    },
    {
        "content": "<p>I am in awe and also ashamed I told you anything discouraging</p>",
        "id": 187425601,
        "sender_full_name": "eddyb",
        "timestamp": 1580878634
    },
    {
        "content": "<p>but also I wish we could get the callers on optimized_mir just before inlining. do we just agree to put inlining first?</p>",
        "id": 187425650,
        "sender_full_name": "eddyb",
        "timestamp": 1580878687
    },
    {
        "content": "<p>that is, inlining seeing validated_mir just like the relevant queries</p>",
        "id": 187425668,
        "sender_full_name": "eddyb",
        "timestamp": 1580878726
    },
    {
        "content": "<p>(also feel free to split this topic somehow, it's getting all kinds of offtopicy)</p>",
        "id": 187425677,
        "sender_full_name": "eddyb",
        "timestamp": 1580878746
    },
    {
        "content": "<p>My scheme can be updated to work just before inlining by splitting the mir opt query, that just seemed too intrusive for me</p>",
        "id": 187429162,
        "sender_full_name": "oli",
        "timestamp": 1580884450
    }
]