[
    {
        "content": "<p>I'm trying to add support for const propagating <code>Rvalue::Ref</code>s but I'm struggling to write a test case that doesn't involve handling <code>Indirects</code> as they aren't supported yet. As a simple example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p><code>&amp;1</code> is promoted to a static which transforms the line into <code>*(&amp;promoted[0])</code> where <code>promoted[0]</code> is an <code>Indirect</code> which points to the static.</p>\n<p>Is there a kind of value I can use which can't/wont' be promoted to a static?</p>",
        "id": 166991823,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559305219
    },
    {
        "content": "<p>The question is whether there is anything that won't get promoted that we can const prop ;)</p>",
        "id": 166991944,
        "sender_full_name": "oli",
        "timestamp": 1559305327
    },
    {
        "content": "<p>like... unions field accesses aren't promoted, but we should probably not const prop them either</p>",
        "id": 166991959,
        "sender_full_name": "oli",
        "timestamp": 1559305357
    },
    {
        "content": "<p>Heh that's true</p>",
        "id": 166991967,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559305370
    },
    {
        "content": "<p>function calls I guess?</p>",
        "id": 166991984,
        "sender_full_name": "oli",
        "timestamp": 1559305387
    },
    {
        "content": "<p>but that would require implementing function calls first :P</p>",
        "id": 166991992,
        "sender_full_name": "oli",
        "timestamp": 1559305399
    },
    {
        "content": "<p>as in inlining?</p>",
        "id": 166992003,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559305421
    },
    {
        "content": "<p>or .... maybe... let me try sth</p>",
        "id": 166992004,
        "sender_full_name": "oli",
        "timestamp": 1559305422
    },
    {
        "content": "<p>no, not inlining, just having <code>let x = some_const_fn(42);</code> compute the result of <code>some_const_fn(42);</code> and put that directly into <code>x</code> instead of leaving the function call to llvm</p>",
        "id": 166992079,
        "sender_full_name": "oli",
        "timestamp": 1559305470
    },
    {
        "content": "<p>I tried something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>but promotion still happens</p>",
        "id": 166992200,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559305565
    },
    {
        "content": "<p>no I mean <code>fn test() -&gt; u32 { 1 }</code> and then having <code>let x = *&amp;test();</code></p>",
        "id": 166992315,
        "sender_full_name": "oli",
        "timestamp": 1559305687
    },
    {
        "content": "<p>Which makes sense because <code>'static &gt;= 'a forall 'a</code></p>",
        "id": 166992318,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559305691
    },
    {
        "content": "<p>So... slightly stupic idea: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6d3a2431a59f57a9aa068e01400b5402\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6d3a2431a59f57a9aa068e01400b5402\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6d3a2431a59f57a9aa068e01400b5402</a></p>",
        "id": 166992322,
        "sender_full_name": "oli",
        "timestamp": 1559305695
    },
    {
        "content": "<p>not sure if that acutally survives const prop</p>",
        "id": 166992330,
        "sender_full_name": "oli",
        "timestamp": 1559305704
    },
    {
        "content": "<p>Like we should be able to const prop the dereferencing of ZST references and raw pointers</p>",
        "id": 166992372,
        "sender_full_name": "oli",
        "timestamp": 1559305750
    },
    {
        "content": "<p>for that matter... why on earth is dereferencing ZST raw pointers unsafe?</p>",
        "id": 166992387,
        "sender_full_name": "oli",
        "timestamp": 1559305768
    },
    {
        "content": "<p>oh</p>",
        "id": 166992389,
        "sender_full_name": "oli",
        "timestamp": 1559305773
    },
    {
        "content": "<p>they may have private fields</p>",
        "id": 166992393,
        "sender_full_name": "oli",
        "timestamp": 1559305778
    },
    {
        "content": "<p>Doesn't that just fall out of deref of raw pointers being unsafe?</p>",
        "id": 166992402,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559305795
    },
    {
        "content": "<p>Looks like the compiler errors out on that before we get to running the <code>ConstProp</code> pass</p>",
        "id": 166992473,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559305832
    },
    {
        "content": "<p>yea</p>",
        "id": 166992479,
        "sender_full_name": "oli",
        "timestamp": 1559305838
    },
    {
        "content": "<p>but if you change the <code>&amp;'static</code> to just <code>&amp;</code>, then it doesn't error out ;)</p>",
        "id": 166992495,
        "sender_full_name": "oli",
        "timestamp": 1559305851
    },
    {
        "content": "<p>The last pass I see running is <code>QualifyAndPromoteConstants</code></p>",
        "id": 166992505,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559305858
    },
    {
        "content": "<p>that was just for demonstrating that promotion doesn't run on it</p>",
        "id": 166992518,
        "sender_full_name": "oli",
        "timestamp": 1559305866
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=dedbbd59d4cea4532e38e573dd437fee\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=dedbbd59d4cea4532e38e573dd437fee\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=dedbbd59d4cea4532e38e573dd437fee</a></p>",
        "id": 166992541,
        "sender_full_name": "oli",
        "timestamp": 1559305904
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> this is a compiling example</p>",
        "id": 166992544,
        "sender_full_name": "oli",
        "timestamp": 1559305912
    },
    {
        "content": "<p>that will never ever get promoted</p>",
        "id": 166992547,
        "sender_full_name": "oli",
        "timestamp": 1559305917
    },
    {
        "content": "<p>Oh</p>",
        "id": 166992905,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559306225
    },
    {
        "content": "<p>It looks like <code>&amp;A</code> gets promoted which introduces an <code>Indirect</code> which prevents const propagation right now</p>",
        "id": 166992928,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559306251
    },
    {
        "content": "<p>I think the answer here is \"wait until we can handle indirects\" <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 166992991,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559306289
    },
    {
        "content": "<p>argml</p>",
        "id": 166993291,
        "sender_full_name": "oli",
        "timestamp": 1559306636
    },
    {
        "content": "<p>What's that?</p>",
        "id": 166995058,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559308093
    },
    {
        "content": "<p>an expression of grumbling :D</p>",
        "id": 166996216,
        "sender_full_name": "oli",
        "timestamp": 1559309015
    }
]