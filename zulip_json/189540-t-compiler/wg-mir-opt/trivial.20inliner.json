[
    {
        "content": "<p>Would it make sense to add an optimization which only inlines functions which do not call any other function and try to run that opt with <code>mir-opt-level=1</code>?</p>",
        "id": 206830766,
        "sender_full_name": "lcnr",
        "timestamp": 1597332953
    },
    {
        "content": "<p>I think that makes sense</p>",
        "id": 206830984,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597333029
    },
    {
        "content": "<p>I guess we'd have to benchmark -- I personally suspect that's going to catch so few cases as to not be worth the analysis and other costs involved</p>",
        "id": 206831052,
        "sender_full_name": "simulacrum",
        "timestamp": 1597333052
    },
    {
        "content": "<p>Yeah, I guess simulacrum is right. It depends on how much this pattern appears in practice</p>",
        "id": 206831225,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597333100
    },
    {
        "content": "<p>I guess it would catch trivial cases like <code>Option::is_some()</code> perhaps, which could be good</p>",
        "id": 206831284,
        "sender_full_name": "simulacrum",
        "timestamp": 1597333129
    },
    {
        "content": "<p>I am thinking of stuff like <code>Option::as_ref</code> and friends which are used fairly frequently and afaik currently inhibit other optimizations</p>",
        "id": 206831346,
        "sender_full_name": "lcnr",
        "timestamp": 1597333154
    },
    {
        "content": "<p>Right</p>",
        "id": 206831355,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597333161
    },
    {
        "content": "<p>Hmm</p>",
        "id": 206831371,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597333164
    },
    {
        "content": "<p>we can just try it out</p>",
        "id": 206831477,
        "sender_full_name": "lcnr",
        "timestamp": 1597333205
    },
    {
        "content": "<p>An alternative could be to just have a list of all the std functions that have this property and inline them as soon as you see them</p>",
        "id": 206831481,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597333207
    },
    {
        "content": "<p>Do you mean an attribute <code>#[rustc_trivial_inline]</code> or something?</p>",
        "id": 206831551,
        "sender_full_name": "lcnr",
        "timestamp": 1597333243
    },
    {
        "content": "<p>Yas!</p>",
        "id": 206831565,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597333249
    },
    {
        "content": "<p>That would get you some of the way there, and I think it would definitely show up in the benchmarks if this has potential :3<br>\n<span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> how does that sound?</p>",
        "id": 206831675,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597333298
    },
    {
        "content": "<p>I would not want such an attribute generally speaking, we should start with the simpler option</p>",
        "id": 206831801,
        "sender_full_name": "simulacrum",
        "timestamp": 1597333340
    },
    {
        "content": "<p>will try to bodge something together today</p>",
        "id": 206831844,
        "sender_full_name": "lcnr",
        "timestamp": 1597333360
    },
    {
        "content": "<p>I think getting something good enough for first benchmarks should be fairly easy</p>",
        "id": 206831872,
        "sender_full_name": "lcnr",
        "timestamp": 1597333373
    },
    {
        "content": "<p>Ah yes, the attribute is a separate discussion for sure</p>",
        "id": 206832240,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597333514
    },
    {
        "content": "<p>But what I meant is having a list of the \"trivial to inline\" fns in std</p>",
        "id": 206832283,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597333539
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> If you mess with the <code>should_inline</code> function on the existing inliner, you should be able to get it do only inline functions that don't call other functions pretty easily.</p>",
        "id": 206845671,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597340229
    },
    {
        "content": "<p>I think I had tested something pretty close to that in this commit <a href=\"https://github.com/rust-lang/rust/commit/302a4ecea0248b5cd672e3d608174a8d09f61705\">https://github.com/rust-lang/rust/commit/302a4ecea0248b5cd672e3d608174a8d09f61705</a></p>\n<p>With ... interesting perf results <a href=\"https://perf.rust-lang.org/compare.html?start=dd155df0a69338757ca39a2a606a6accb7b8d342&amp;end=6989784c64acc4dbf0ddb012c416f1003790b219\">https://perf.rust-lang.org/compare.html?start=dd155df0a69338757ca39a2a606a6accb7b8d342&amp;end=6989784c64acc4dbf0ddb012c416f1003790b219</a></p>",
        "id": 206845929,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597340384
    },
    {
        "content": "<p>do we not inline constructors</p>",
        "id": 206847137,
        "sender_full_name": "lcnr",
        "timestamp": 1597340968
    },
    {
        "content": "<p>with the default opt level?</p>",
        "id": 206847176,
        "sender_full_name": "lcnr",
        "timestamp": 1597340986
    },
    {
        "content": "<p><a href=\"https://rust.godbolt.org/z/o6G9q5\">https://rust.godbolt.org/z/o6G9q5</a></p>",
        "id": 206847255,
        "sender_full_name": "lcnr",
        "timestamp": 1597341006
    },
    {
        "content": "<p>The MIR inliner is flagged off under <code>-Zmir-opt-level=2</code> so it doesn't run unless you explicitly change the mir opt leve.</p>",
        "id": 206847472,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597341109
    },
    {
        "content": "<p>does the <code>HINT_THRESHHOLD</code> apply to constructors</p>",
        "id": 206847585,
        "sender_full_name": "lcnr",
        "timestamp": 1597341154
    },
    {
        "content": "<p>There's no special treatment for constructors as far as I'm aware but it's been a while since I was in this code.</p>",
        "id": 206847741,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597341235
    },
    {
        "content": "<p>Constructors are lowered to <code>Rvalue::Aggregate</code> when constructing MIR.</p>",
        "id": 206847841,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1597341278
    },
    {
        "content": "<p><a href=\"https://rust.godbolt.org/z/o6G9q5\">https://rust.godbolt.org/z/o6G9q5</a></p>\n<p>right, what would be needed to fix that example then?</p>",
        "id": 206848082,
        "sender_full_name": "lcnr",
        "timestamp": 1597341406
    },
    {
        "content": "<p>What do you mean by fix?</p>",
        "id": 206848194,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597341470
    },
    {
        "content": "<p>optimizing it to <code>_0 = move _1</code></p>",
        "id": 206848256,
        "sender_full_name": "lcnr",
        "timestamp": 1597341488
    },
    {
        "content": "<p>That would probably be copy propagation</p>",
        "id": 206848314,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597341512
    },
    {
        "content": "<p>We do have a copy propagation pass which is (I think) under <code>mir-opt=3</code> but it doesn't seem to completely eliminate it either.</p>",
        "id": 206848518,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597341615
    },
    {
        "content": "<p>I wonder if the projection is throwing it off</p>",
        "id": 206848540,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597341628
    },
    {
        "content": "<p>IIRC it's pretty basic</p>",
        "id": 206848559,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597341638
    },
    {
        "content": "<p>and uh very slow lol</p>",
        "id": 206848568,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597341646
    },
    {
        "content": "<p>dest prop should handle that case</p>",
        "id": 206851209,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1597343033
    },
    {
        "content": "<p>running this I get a bunch of \"this arithmetic operation will overflow\" errors</p>",
        "id": 206853490,
        "sender_full_name": "lcnr",
        "timestamp": 1597344207
    },
    {
        "content": "<p>are they gated on opt level (if they consider inlining)</p>",
        "id": 206853582,
        "sender_full_name": "lcnr",
        "timestamp": 1597344247
    },
    {
        "content": "<p>I think const prop emits those, and it runs after inlining</p>",
        "id": 206853687,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1597344307
    },
    {
        "content": "<p>I am not even sure where these errors are caused</p>\n<div class=\"codehilite\"><pre><span></span><code>error: this arithmetic operation will overflow\n   --&gt; library/core/src/ops/arith.rs:94:45\n    |\n86  | / macro_rules! add_impl {\n87  | |     ($($t:ty)*) =&gt; ($(\n88  | |         #[stable(feature = &quot;rust1&quot;, since = &quot;1.0.0&quot;)]\n89  | |         impl Add for $t {\n...   |\n94  | |             fn add(self, other: $t) -&gt; $t { self + other }\n    | |                                             ^^^^^^^^^^^^ attempt to compute `u8::MAX + 1_u8` which would overflow\n...   |\n98  | |     )*)\n99  | | }\n    | |_- in this expansion of `add_impl!`\n100 |\n101 |   add_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n    |   ------------------------------------------------------------------------- in this macro invocation\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n</code></pre></div>",
        "id": 206853695,
        "sender_full_name": "lcnr",
        "timestamp": 1597344315
    },
    {
        "content": "<p>It shouldn't cause any false positives though</p>",
        "id": 206853706,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1597344320
    },
    {
        "content": "<p>can I somehow get the method into which this was inlined?</p>",
        "id": 206853915,
        "sender_full_name": "lcnr",
        "timestamp": 1597344424
    },
    {
        "content": "<p>oh god</p>",
        "id": 206858571,
        "sender_full_name": "lcnr",
        "timestamp": 1597346711
    },
    {
        "content": "<p>why</p>",
        "id": 206858575,
        "sender_full_name": "lcnr",
        "timestamp": 1597346712
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/0a49057dd35d9bd2fcc9760a054809c30eee2a58/library/core/src/iter/range.rs#L207\">https://github.com/rust-lang/rust/blob/0a49057dd35d9bd2fcc9760a054809c30eee2a58/library/core/src/iter/range.rs#L207</a></p>",
        "id": 206858634,
        "sender_full_name": "lcnr",
        "timestamp": 1597346751
    },
    {
        "content": "<p>why arent we just using <code>Add::add</code> directly here?</p>",
        "id": 206858850,
        "sender_full_name": "lcnr",
        "timestamp": 1597346849
    },
    {
        "content": "<p>heh, presumably <code>Self::MAX + 1</code> gives the warning even today?</p>",
        "id": 206859053,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1597346928
    },
    {
        "content": "<p>yeah</p>",
        "id": 206859119,
        "sender_full_name": "lcnr",
        "timestamp": 1597346964
    },
    {
        "content": "<p>but why are we using <code>Add::add(Self::MAX, 1)</code> instead of <code>start + n</code></p>",
        "id": 206859148,
        "sender_full_name": "lcnr",
        "timestamp": 1597346979
    },
    {
        "content": "<p>which should do the same thing without needing that hack</p>",
        "id": 206859172,
        "sender_full_name": "lcnr",
        "timestamp": 1597346990
    },
    {
        "content": "<p>Perhaps LLVM isn't smart enough to optimize out <code>start + n</code> in release mode for some reason? Seems unlikely to me though</p>",
        "id": 206861026,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597347909
    },
    {
        "content": "<p>My thought is that <code>start + n</code> replaces both the if branch in debug builds and <code>start.wrapping_add</code>in opt builds afaict</p>",
        "id": 206861230,
        "sender_full_name": "lcnr",
        "timestamp": 1597348016
    },
    {
        "content": "<p>aaah, if <code>n as Self</code> is truncating this breaks</p>",
        "id": 206861416,
        "sender_full_name": "lcnr",
        "timestamp": 1597348104
    },
    {
        "content": "<p>opened <a href=\"https://github.com/rust-lang/rust/issues/75495\">#75495</a>, some tests are still failing rn</p>",
        "id": 206862097,
        "sender_full_name": "lcnr",
        "timestamp": 1597348438
    },
    {
        "content": "<p>some just need <code>// compiler-flags: mir-opt-level=0</code> because less functions hit codegen now or something</p>",
        "id": 206862239,
        "sender_full_name": "lcnr",
        "timestamp": 1597348489
    },
    {
        "content": "<p>there's one ICE</p>",
        "id": 206862258,
        "sender_full_name": "lcnr",
        "timestamp": 1597348496
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: internal compiler error: src/librustc_trait_selection/traits/codegen/mod.rs:75:17: Encountered error `OutputTypeParameterMismatch(Binder(&lt;[closure@/home/lcnr/rust2/src/test/ui/async-await/async-await.rs:212:9: 216:10] as std::ops::Fn&lt;(&amp;u8,)&gt;&gt;), Binder(&lt;[closure@/home/lcnr/rust2/src/test/ui/async-await/async-await.rs:212:9: 216:10] as std::ops::Fn&lt;(&amp;u8,)&gt;&gt;), Sorts(ExpectedFound { expected: impl std::future::Future, found: std::future::from_generator::GenFuture&lt;[static generator@/home/lcnr/rust2/src/test/ui/async-await/async-await.rs:213:24: 215:14 x:&amp;u8 for&lt;&#39;r, &#39;s&gt; {std::future::ResumeTy, &amp;&#39;r u8, impl std::future::Future, ()}]&gt; }))` selecting `Binder(&lt;[closure@/home/lcnr/rust2/src/test/ui/async-await/async-await.rs:212:9: 216:10] as std::ops::Fn&lt;(&amp;u8,)&gt;&gt;)` during codegen\n</code></pre></div>",
        "id": 206862294,
        "sender_full_name": "lcnr",
        "timestamp": 1597348509
    },
    {
        "content": "<p>I think that's existing <a href=\"https://github.com/rust-lang/rust/issues/68347\">https://github.com/rust-lang/rust/issues/68347</a></p>",
        "id": 206862960,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597348813
    },
    {
        "content": "<p>I think the problem with <code>start + n</code> is when <code>std</code> is built in release, but you want the user's level for debug assertions</p>",
        "id": 206867769,
        "sender_full_name": "cuviper",
        "timestamp": 1597350939
    },
    {
        "content": "<p>(because <code>std</code> is almost always a release build itself)</p>",
        "id": 206867790,
        "sender_full_name": "cuviper",
        "timestamp": 1597350949
    },
    {
        "content": "<p>My recollection is that <code>Add::add</code> calls are used to avoid needing to <code>#[rustc_inherit_overflow_checks]</code> the method.</p>",
        "id": 206878024,
        "sender_full_name": "scottmcm",
        "timestamp": 1597356795
    },
    {
        "content": "<p>(I've gotten PR feedback to use <code>Add::add</code> when I'd otherwise been using the attribute: <a href=\"https://github.com/rust-lang/rust/pull/45754#issuecomment-341884683\">https://github.com/rust-lang/rust/pull/45754#issuecomment-341884683</a> .  Something might have changed since 2017 on that front, though...)</p>",
        "id": 206878179,
        "sender_full_name": "scottmcm",
        "timestamp": 1597356898
    },
    {
        "content": "<p>I think we should just figure out how to make <a href=\"https://github.com/rust-lang/rust/pull/68828\">https://github.com/rust-lang/rust/pull/68828</a> faster and solve inlining completely</p>",
        "id": 206904127,
        "sender_full_name": "oli",
        "timestamp": 1597388922
    },
    {
        "content": "<p>that query currently has a perf regression of less than 3% in all relevant queries, how much comp time do we gain by inlining?</p>",
        "id": 206911254,
        "sender_full_name": "lcnr",
        "timestamp": 1597396734
    },
    {
        "content": "<p>that's cheating! (I like it)</p>",
        "id": 206911381,
        "sender_full_name": "oli",
        "timestamp": 1597396828
    },
    {
        "content": "<p>I'm gonna rebase and try it out</p>",
        "id": 206911390,
        "sender_full_name": "oli",
        "timestamp": 1597396837
    },
    {
        "content": "<p>also do we want to inline during incremental compilation?</p>",
        "id": 206911435,
        "sender_full_name": "lcnr",
        "timestamp": 1597396887
    },
    {
        "content": "<p>The reason I am interested in something like <a href=\"https://github.com/rust-lang/rust/issues/75495\">#75495</a> is because I would <del>expect</del><em>hope</em> this to even give perf benefits with incremental as these small helper methods are often rarely changed and often used</p>",
        "id": 206911530,
        "sender_full_name": "lcnr",
        "timestamp": 1597396960
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> it would make a lot of sense to me if there was a place for inlining during incremental</p>",
        "id": 206960578,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597429236
    },
    {
        "content": "<p>at least for inlining of these helper methods</p>",
        "id": 206960608,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597429257
    },
    {
        "content": "<p>that are leaf functions</p>",
        "id": 206960617,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597429261
    },
    {
        "content": "<p>Although for some reason whenever I think of \"inlining\" I also jump to \"CGU partitioning\". If we see regressions in incremental, maybe that's the place to look for a source?</p>",
        "id": 206960758,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597429332
    },
    {
        "content": "<p>I might be completely off tho, but that's what my gut tells me</p>",
        "id": 206960796,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1597429352
    },
    {
        "content": "<blockquote>\n<p>@lcnr it would make a lot of sense to me if there was a place for inlining during incremental</p>\n</blockquote>\n<p>I think so too, which I why fixing the inlining cycles by looking at the mir bodies of all called functions does not seem like the final solution to me (and partially why I thought of trying to only inline leafs)</p>",
        "id": 206964113,
        "sender_full_name": "lcnr",
        "timestamp": 1597431192
    }
]