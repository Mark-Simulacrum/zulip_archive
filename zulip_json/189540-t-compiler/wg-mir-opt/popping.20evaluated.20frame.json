[
    {
        "content": "<p>Hi. Is there any way to either avoid Miri popping the initial frame, or add a hook before its popped off?</p>",
        "id": 170691200,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1562901945
    },
    {
        "content": "<p><code>pop_stack_frame()</code> <a href=\"https://github.com/rust-lang/rust/blob/1b1b538843503568994c7ef37ea8206f0ee3c2e4/src/librustc_mir/interpret/eval_context.rs#L587\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/1b1b538843503568994c7ef37ea8206f0ee3c2e4/src/librustc_mir/interpret/eval_context.rs#L587\">calls</a> <code>Machine::stack_pop()</code>. That's the only existing place I could see being used as a hook. The rest of <code>pop_stack_frame()</code> seems to expect that the initial frame will always be popped so it doesn't look like that's currently configurable.</p>",
        "id": 170713074,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1562929372
    },
    {
        "content": "<p>priroda prevents the last frame from being popped</p>",
        "id": 170716615,
        "sender_full_name": "oli",
        "timestamp": 1562933660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> thanks</p>",
        "id": 170725126,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1562940936
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> I'll look at what you said too. Ta.</p>",
        "id": 170725136,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1562940947
    },
    {
        "content": "<p>(presumably priroda calls <code>step</code> manually to do. will check soon)</p>",
        "id": 170725738,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1562941410
    },
    {
        "content": "<p>Guessing this is the relevant bit: <a href=\"https://github.com/oli-obk/priroda/blob/master/src/step.rs\" target=\"_blank\" title=\"https://github.com/oli-obk/priroda/blob/master/src/step.rs\">https://github.com/oli-obk/priroda/blob/master/src/step.rs</a></p>",
        "id": 170741948,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1562953955
    },
    {
        "content": "<p>specifically, the <code>step</code> fn there</p>",
        "id": 170741957,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1562953972
    },
    {
        "content": "<p>Ah, <code>before_terminator</code> + <code>is_ret</code> seems like a good way to hook onto such events. Not much different from stepping through manually (with <code>is_ret</code>) mind you... thanks for the tips guys.</p>",
        "id": 170764241,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1562975961
    },
    {
        "content": "<p>Slightly related question: is it possible to either to exclude or at least recognise drop glue for functions/frames in Miri? It seems stack-popping takes care of cleaning up such locals anyway, and I'd like to know which locals are \"live\" at the end of a function. (i.e. haven't been moved.)</p>",
        "id": 170766180,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1562978774
    },
    {
        "content": "<p>You know the liveness of a local by looking at its entry in the frame. StorageDead cleans up all locals that do not need to be live for the entire function. This is reflected in the LocalState iirc</p>",
        "id": 170779344,
        "sender_full_name": "oli",
        "timestamp": 1563003335
    },
    {
        "content": "<p>I see</p>",
        "id": 170791098,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1563026622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> What about moved locals? Are they reflected/treated differently in the frame state?</p>",
        "id": 170791141,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1563026684
    },
    {
        "content": "<p>They have storagedead statements</p>",
        "id": 170791704,
        "sender_full_name": "oli",
        "timestamp": 1563027711
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Right, so I guess I can't really distinguish between the two? Or somehow avoid having StorageDead statements for ones that are not moved but merely got unused after a certain point?</p>",
        "id": 170792721,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1563029578
    },
    {
        "content": "<p>No there's no difference</p>",
        "id": 170794763,
        "sender_full_name": "oli",
        "timestamp": 1563032927
    },
    {
        "content": "<p>You can collect the info yourself though</p>",
        "id": 170794766,
        "sender_full_name": "oli",
        "timestamp": 1563032939
    },
    {
        "content": "<p>Visit each statement and when you encounter a visit_local call check the context for moves</p>",
        "id": 170794782,
        "sender_full_name": "oli",
        "timestamp": 1563032974
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> makes sense. thanks!</p>",
        "id": 170795128,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1563033522
    },
    {
        "content": "<p>looks like <code>RequiresStorage</code> in <code>storage_liveness</code> already does something similar to this if I'm not mistaken</p>",
        "id": 170795816,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1563034658
    },
    {
        "content": "<p>That's static information right? Not dynamic,  so a variable that isn't used at all in a specific run will not be treated as unused</p>",
        "id": 170796195,
        "sender_full_name": "oli",
        "timestamp": 1563035139
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Ah true. It's dataflow analysis, so static... I think parts like the <code>MoveVisitor</code> can be reused though. It concerns itself with borrows though, which I probably don't need to worry about.</p>",
        "id": 170796616,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1563035851
    },
    {
        "content": "<p>Guys, is there any reason for the import style in miri, out of curiosity? That is, \"pooling\" everything as <code>pub use</code>s in the crate root.</p>",
        "id": 173701615,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566340119
    },
    {
        "content": "<p>and then doing <code>use crate::*</code> in various modules.</p>",
        "id": 173701622,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566340126
    },
    {
        "content": "<p>laziness, I guess?</p>",
        "id": 174035568,
        "sender_full_name": "RalfJ",
        "timestamp": 1566646467
    },
    {
        "content": "<blockquote>\n<p>laziness, I guess?</p>\n</blockquote>\n<p>hah okay. just checking there wasn't a particular reason... probably right.</p>",
        "id": 174057579,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566686858
    },
    {
        "content": "<p>there's many ways to structure your Rust programs, and with the sheer number of imports miri needs I have to say I like this style -- makes it much easier to split code into modules as you dont have to spend 30min teasing the imports apart.</p>",
        "id": 174075737,
        "sender_full_name": "RalfJ",
        "timestamp": 1566722855
    },
    {
        "content": "<p>Agreed. The only downside is that you lose \"structure\"... which can be a good or bad thing. But probably not terribly worth maintaining here.</p>",
        "id": 174112074,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566790076
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> is there any way to create values of stdlib types from inside miri (say, implementing an intrinsic)?</p>",
        "id": 174195645,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566879877
    },
    {
        "content": "<p>dozens of intrinsics and FFI stubs are already implemented, did you check those?</p>",
        "id": 174249238,
        "sender_full_name": "RalfJ",
        "timestamp": 1566925791
    },
    {
        "content": "<p>look for files called \"<a href=\"http://intrinsics.rs\" target=\"_blank\" title=\"http://intrinsics.rs\">intrinsics.rs</a>\"</p>",
        "id": 174249248,
        "sender_full_name": "RalfJ",
        "timestamp": 1566925798
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> oh yeah, saw that. nothing there to do with creating values of stdlib types though. just primitive types and pointers.</p>",
        "id": 174257083,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566931206
    },
    {
        "content": "<p>oh I see. then I don't think this has been done before.</p>",
        "id": 174258183,
        "sender_full_name": "RalfJ",
        "timestamp": 1566931944
    },
    {
        "content": "<p>there's certainly a way, but you'll have to manually interact with the interpreter APIs: allocate some space, obtain <code>Place</code>s for the fields you are about, writing to them, ...</p>",
        "id": 174258223,
        "sender_full_name": "RalfJ",
        "timestamp": 1566931975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> okay, I'll have a look, thanks</p>",
        "id": 174315373,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566944817
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> Hmm, would I not simply do this to return a null pointer (of any type), when implementing an intrinsnic?</p>",
        "id": 174423446,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1567054037
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">                </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">write_scalar</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">Scalar</span>::<span class=\"n\">ptr_null</span><span class=\"p\">(</span><span class=\"n\">this</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">dest</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 174423448,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1567054045
    },
    {
        "content": "<p>that works for intrinsics returning something of pointer type, yes</p>",
        "id": 174428210,
        "sender_full_name": "RalfJ",
        "timestamp": 1567060956
    },
    {
        "content": "<p>of course if it is a reference or <code>Box</code>, that cannot be right^^</p>",
        "id": 174428231,
        "sender_full_name": "RalfJ",
        "timestamp": 1567060990
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> yeah. It's a <code>*const dyn Debug</code> in fact</p>",
        "id": 174479421,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1567103060
    },
    {
        "content": "<p>weird that I'm getting this error then:</p>\n<div class=\"codehilite\"><pre><span></span>thread &#39;rustc&#39; panicked at &#39;assertion failed: `(left == right)`\n  left: `Size { raw: 8 }`,\n right: `Size { raw: 16 }`: Size mismatch when writing bits&#39;, src/librustc_mir/interpret/place.rs:705:21\n</pre></div>",
        "id": 174479470,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1567103091
    },
    {
        "content": "<p>(on that exact call to <code>write_scalar</code>, indeed)</p>",
        "id": 174479604,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1567103177
    },
    {
        "content": "<p>yeah, <code>ptr_null</code> is ptr-sized</p>",
        "id": 174479747,
        "sender_full_name": "RalfJ",
        "timestamp": 1567103303
    },
    {
        "content": "<p>wide raw pointers are twice as big</p>",
        "id": 174479751,
        "sender_full_name": "RalfJ",
        "timestamp": 1567103308
    },
    {
        "content": "<p>you'll need a <code>ScalarPair</code> where the first component is a <code>ptr_null</code>, and the 2nd points to a valid vtable</p>",
        "id": 174479780,
        "sender_full_name": "RalfJ",
        "timestamp": 1567103338
    },
    {
        "content": "<p>(there's a reason that there is no <code>ptr::null()</code> for unsized types...)</p>",
        "id": 174479803,
        "sender_full_name": "RalfJ",
        "timestamp": 1567103356
    },
    {
        "content": "<p>ah yes, that makes sennse</p>",
        "id": 174479808,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1567103360
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> seems to work now, thanks</p>",
        "id": 174481301,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1567104377
    },
    {
        "content": "<p>what are you using for the vtable?</p>",
        "id": 174483786,
        "sender_full_name": "RalfJ",
        "timestamp": 1567106208
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I just use the <code>*const T</code> argument to the intrinsic fn (but check that <code>T: Debug</code> actually holds first)</p>",
        "id": 174483904,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1567106317
    },
    {
        "content": "<p>I think that's okay?</p>",
        "id": 174483912,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1567106324
    },
    {
        "content": "<p>what is the intrinsic?</p>",
        "id": 174483923,
        "sender_full_name": "RalfJ",
        "timestamp": 1567106335
    },
    {
        "content": "<p><code>*const T</code> doesnt look like a vtable ptr to me...</p>",
        "id": 174483950,
        "sender_full_name": "RalfJ",
        "timestamp": 1567106374
    },
    {
        "content": "<p>it's a new one I'm making for the REPL. only available in the REPL. <code>as_debug</code></p>",
        "id": 174483967,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1567106387
    },
    {
        "content": "<p>hmm</p>",
        "id": 174483974,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1567106392
    },
    {
        "content": "<p>how would I get the vtable pointer just from that then?</p>",
        "id": 174483978,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1567106399
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I guess I need to destruct the fat pointer somehow... but how do I get the one for <code>Debug</code>?</p>",
        "id": 174484646,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1567106911
    },
    {
        "content": "<p>given the type and the trait, there are rustc methods to build a vtable for that</p>",
        "id": 174489372,
        "sender_full_name": "RalfJ",
        "timestamp": 1567110470
    },
    {
        "content": "<p>I think for Miri they are in <code>traits.rs</code></p>",
        "id": 174489384,
        "sender_full_name": "RalfJ",
        "timestamp": 1567110477
    },
    {
        "content": "<p>interesting</p>",
        "id": 174491107,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1567111700
    },
    {
        "content": "<p><code>machine.get_vtable</code> -- perfect</p>",
        "id": 174491194,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1567111762
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> the use in the <code>unsize_into_ptr</code> method... that's how I'd do it too? for a <code>*const T -&gt; *const dyn Debug</code> cast?</p>",
        "id": 174492907,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1567112914
    },
    {
        "content": "<p>assuming <code>T: Debug</code>, yes</p>",
        "id": 174523038,
        "sender_full_name": "RalfJ",
        "timestamp": 1567151488
    },
    {
        "content": "<p>got it, ta.</p>",
        "id": 174563365,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1567184664
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> Since my rebase I'm getting <code>no mir for std::rt::lang_start_internal</code> again. I guess this is because the <code>test-miri</code> config option is gone, so I no longer have a sysroot build. I looked at the README, but didn't see anything. What's the right approach presently?</p>",
        "id": 174847566,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1567566255
    },
    {
        "content": "<p>obviously this is using a nightly rustc still.</p>",
        "id": 174847702,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1567566526
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> maybe you know, too?</p>",
        "id": 174892655,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1567610714
    },
    {
        "content": "<p>Eh, don't worry... think I've figured it out.</p>",
        "id": 174905256,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1567619525
    },
    {
        "content": "<p>Get a weird stack overflow since the rebase though.</p>",
        "id": 174905270,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1567619535
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> Since my rebase I'm getting <code>no mir for std::rt::lang_start_internal</code> again. I guess this is because the <code>test-miri</code> config option is gone, so I no longer have a sysroot build. I looked at the README, but didn't see anything. What's the right approach presently?</p>\n</blockquote>\n<p>FTR, you have to use xargo to build libstd. <code>cargo miri setup</code> will do it for you.</p>",
        "id": 175748418,
        "sender_full_name": "RalfJ",
        "timestamp": 1568553151
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> thanks. I had figured that out, but sync the rebase, I'm getting a problem importing the prelude when compiling:<br>\n<code>error[E0433]: failed to resolve: unresolved import</code> -- ever encountered this before?</p>",
        "id": 175750715,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568556666
    },
    {
        "content": "<p>you might be running into <a href=\"https://github.com/rust-lang/rust/issues/64410\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64410\">https://github.com/rust-lang/rust/issues/64410</a> ?</p>",
        "id": 175799640,
        "sender_full_name": "RalfJ",
        "timestamp": 1568629065
    },
    {
        "content": "<p>hmm, interesting</p>",
        "id": 175824220,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568648476
    },
    {
        "content": "<p>let's see.</p>",
        "id": 175824226,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568648481
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> hmm, seems to be more of a strange issue with not being able to find the sysroot, but I'm not sure</p>",
        "id": 175826995,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568650242
    },
    {
        "content": "<p>I've checked the sysroot is getting built</p>",
        "id": 175827006,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568650250
    },
    {
        "content": "<p>and passed to the compiler correctly</p>",
        "id": 175827012,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568650255
    },
    {
        "content": "<p>miri finds it okay, but not my project</p>",
        "id": 175827040,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568650274
    }
]