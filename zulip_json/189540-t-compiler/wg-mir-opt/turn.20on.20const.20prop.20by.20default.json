[
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>, I hope you had a  good vacation!</p>\n<p>Now that ConstProp is in a bit better state, I think we should consider turning it on by default (it's currently gated under <code>-Z mir-opt-level=2</code>). I did a perf run recently and the numbers looked pretty decent <a href=\"https://github.com/rust-lang/rust/pull/66074\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/66074\">https://github.com/rust-lang/rust/pull/66074</a></p>\n<p>What do you think? There's a few changes left (some I have locally and some yet to do) before I think ConstProp is \"done\" but perhaps it's time to start talking about running it by default.</p>",
        "id": 180022465,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1573039367
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 180022473,
        "sender_full_name": "oli",
        "timestamp": 1573039379
    },
    {
        "content": "<p>I just did a double take</p>",
        "id": 180022497,
        "sender_full_name": "oli",
        "timestamp": 1573039423
    },
    {
        "content": "<p>\"pretty decent\" is a very humble way to describe this</p>",
        "id": 180022514,
        "sender_full_name": "oli",
        "timestamp": 1573039442
    },
    {
        "content": "<p>wow</p>",
        "id": 180022547,
        "sender_full_name": "oli",
        "timestamp": 1573039445
    },
    {
        "content": "<p>The cte stress tests are major outliers but yeah the rest looks good IMO</p>",
        "id": 180022554,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1573039464
    },
    {
        "content": "<p><span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 180022556,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1573039467
    },
    {
        "content": "<p>yea we should totally turn them on if optimizations are enabled. Though not in debug mode. I'm not sure how much mir optimizations and llvm optimizations are entangled</p>",
        "id": 180022590,
        "sender_full_name": "oli",
        "timestamp": 1573039536
    },
    {
        "content": "<p>Is your concern mangling debuginfo?</p>",
        "id": 180022662,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1573039581
    },
    {
        "content": "<p>(Debug perf.rlo results also show improvement so I'd love to get those compile time improvements as well)</p>",
        "id": 180022717,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1573039654
    },
    {
        "content": "<p>partially, but I also don't think we're running any opportunistic optimizations in debug mode right now</p>",
        "id": 180022719,
        "sender_full_name": "oli",
        "timestamp": 1573039656
    },
    {
        "content": "<p>hmm that's true though</p>",
        "id": 180022723,
        "sender_full_name": "oli",
        "timestamp": 1573039665
    },
    {
        "content": "<p>Yeah</p>",
        "id": 180022725,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1573039667
    },
    {
        "content": "<p>I think ConstProp is relatively safe in terms of the debugging experience because we don't (currently anyway) propagate away function calls</p>",
        "id": 180022779,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1573039709
    },
    {
        "content": "<p>I could create a compiler team FCP for it</p>",
        "id": 180022781,
        "sender_full_name": "oli",
        "timestamp": 1573039712
    },
    {
        "content": "<p>also we just prop temporaries</p>",
        "id": 180022796,
        "sender_full_name": "oli",
        "timestamp": 1573039741
    },
    {
        "content": "<p>so user code is not affected very much</p>",
        "id": 180022817,
        "sender_full_name": "oli",
        "timestamp": 1573039762
    },
    {
        "content": "<p>So beyond looking at the disassembly, the user shouldn't really be able to tell if, for example, <code>let x = 2 + 2</code> is happening at runtime or compile time.</p>",
        "id": 180022818,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1573039763
    },
    {
        "content": "<p>jup</p>",
        "id": 180022839,
        "sender_full_name": "oli",
        "timestamp": 1573039776
    },
    {
        "content": "<p>We could do either of those yeah</p>",
        "id": 180022840,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1573039777
    },
    {
        "content": "<p>why did you choose to not prop pointers?</p>",
        "id": 180022855,
        "sender_full_name": "oli",
        "timestamp": 1573039800
    },
    {
        "content": "<p>heh</p>",
        "id": 180022899,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1573039806
    },
    {
        "content": "<p>So when I introduced <code>ConstPropMachine</code>, we lost the code that handles interning <code>Memory</code>. It happens to work ok for the <code>mir-opt</code> tests, probably because the tests are small and compilation is deterministic enough to end up with <code>AllocId</code>s from <code>ConstPropMachine</code> matching up exactly with the same ones from <code>CompileTimeInterpreter</code>. However, if I just switch on const prop without that check in <code>should_const_prop</code>, the bootstrap will ICE when compiling <code>core</code>.</p>",
        "id": 180023005,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1573039926
    },
    {
        "content": "<p>So I added that code to skip pointers to avoid the ICE</p>",
        "id": 180023013,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1573039949
    },
    {
        "content": "<p>oh, interesting. This could probably be resolved by interning all such constants before throwing away the <code>InterpCx</code></p>",
        "id": 180023174,
        "sender_full_name": "oli",
        "timestamp": 1573040124
    },
    {
        "content": "<p>orthogonal though</p>",
        "id": 180023182,
        "sender_full_name": "oli",
        "timestamp": 1573040135
    },
    {
        "content": "<p>ok, let's go with integer-only const prop enabled even in debug mode for now and see how the rest of T-compiler likes it</p>",
        "id": 180023215,
        "sender_full_name": "oli",
        "timestamp": 1573040160
    },
    {
        "content": "<p>can you leave a comment explaining the no-pointer-strategy in the source code?</p>",
        "id": 180023262,
        "sender_full_name": "oli",
        "timestamp": 1573040182
    },
    {
        "content": "<p>Sure, yeah. That was just a throw-away commit to get the perf results.</p>",
        "id": 180023279,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1573040202
    },
    {
        "content": "<p>How does compiler team FCP work? Is that something we trigger on the PR?</p>",
        "id": 180023309,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1573040233
    },
    {
        "content": "<p>yea</p>",
        "id": 180023483,
        "sender_full_name": "oli",
        "timestamp": 1573040415
    },
    {
        "content": "<p>Ok, I'm adding some comments to that commit now and I'll push in a minute.</p>",
        "id": 180023499,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1573040439
    },
    {
        "content": "<p>Are you concerned about the slight regression in the codegen tests?</p>",
        "id": 180023506,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1573040450
    },
    {
        "content": "<p>I have some local changes that actually improve those to the point NO-OPT is equivalent to the other optimized cases.</p>",
        "id": 180023530,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1573040488
    },
    {
        "content": "<p>huh, why did no-opt optimize to <code>8</code> before this PR anyway?</p>",
        "id": 180024134,
        "sender_full_name": "oli",
        "timestamp": 1573041109
    },
    {
        "content": "<p>It only did in the test for <code>inline(always)</code></p>",
        "id": 180024242,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1573041216
    },
    {
        "content": "<p>I think it's an artifact related to inlining an optimized function</p>",
        "id": 180024251,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1573041238
    },
    {
        "content": "<p>oh lol, llvm already const props in debug mode, you're right</p>",
        "id": 180024737,
        "sender_full_name": "oli",
        "timestamp": 1573041642
    },
    {
        "content": "<p>the inlining does the trick</p>",
        "id": 180024740,
        "sender_full_name": "oli",
        "timestamp": 1573041649
    },
    {
        "content": "<p>ok, so there's no reason not do do const prop in debug mode</p>",
        "id": 180024751,
        "sender_full_name": "oli",
        "timestamp": 1573041658
    },
    {
        "content": "<p>llvm does it, so we should, too</p>",
        "id": 180024761,
        "sender_full_name": "oli",
        "timestamp": 1573041670
    },
    {
        "content": "<p>Yeah, I think this change is also ok <a href=\"https://github.com/rust-lang/rust/pull/66074/files#diff-d3d378e46f2b79fa680365c64848f456R34\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/66074/files#diff-d3d378e46f2b79fa680365c64848f456R34\">https://github.com/rust-lang/rust/pull/66074/files#diff-d3d378e46f2b79fa680365c64848f456R34</a></p>",
        "id": 180025107,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1573041949
    },
    {
        "content": "<p>lmk if you think otherwise</p>",
        "id": 180025109,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1573041955
    },
    {
        "content": "<p>I have a few commits locally that improve const prop and the simplify locals pass a bit more and actually get us to </p>\n<div class=\"codehilite\"><pre><span></span>// NO-OPT: ret i32 8\n</pre></div>\n\n\n<p>on these tests</p>",
        "id": 180025196,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1573042014
    },
    {
        "content": "<p>cool, we could merge that independently. About the <code>%0.1</code> -&gt; <code>%3</code> changes, I can't figure out how the <code>%3</code> actually happens, can you dump the entire llvm IR?</p>",
        "id": 180026345,
        "sender_full_name": "oli",
        "timestamp": 1573043100
    },
    {
        "content": "<p>I don't think the change is problematic, I just don't get what happened</p>",
        "id": 180026380,
        "sender_full_name": "oli",
        "timestamp": 1573043141
    },
    {
        "content": "<p>Before:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">; Function Attrs: nonlazybind uwtable</span>\n<span class=\"k\">define</span> <span class=\"k\">i32</span> <span class=\"vg\">@nothing</span><span class=\"p\">()</span> <span class=\"k\">unnamed_addr</span> <span class=\"vg\">#0</span> <span class=\"p\">{</span>\n<span class=\"nl\">start:</span>\n  <span class=\"nv nv-Anonymous\">%0</span> <span class=\"p\">=</span> <span class=\"k\">call</span> <span class=\"p\">{</span> <span class=\"k\">i32</span><span class=\"p\">,</span> <span class=\"k\">i1</span> <span class=\"p\">}</span> <span class=\"vg\">@llvm.sadd.with.overflow.i32</span><span class=\"p\">(</span><span class=\"k\">i32</span> <span class=\"m\">2</span><span class=\"p\">,</span> <span class=\"k\">i32</span> <span class=\"m\">2</span><span class=\"p\">)</span>\n  <span class=\"nv\">%_1.0</span> <span class=\"p\">=</span> <span class=\"k\">extractvalue</span> <span class=\"p\">{</span> <span class=\"k\">i32</span><span class=\"p\">,</span> <span class=\"k\">i1</span> <span class=\"p\">}</span> <span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span> <span class=\"m\">0</span>\n  <span class=\"nv\">%_1.1</span> <span class=\"p\">=</span> <span class=\"k\">extractvalue</span> <span class=\"p\">{</span> <span class=\"k\">i32</span><span class=\"p\">,</span> <span class=\"k\">i1</span> <span class=\"p\">}</span> <span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span> <span class=\"m\">1</span>\n  <span class=\"nv nv-Anonymous\">%1</span> <span class=\"p\">=</span> <span class=\"k\">call</span> <span class=\"k\">i1</span> <span class=\"vg\">@llvm.expect.i1</span><span class=\"p\">(</span><span class=\"k\">i1</span> <span class=\"nv\">%_1.1</span><span class=\"p\">,</span> <span class=\"k\">i1</span> <span class=\"k\">false</span><span class=\"p\">)</span>\n  <span class=\"k\">br</span> <span class=\"k\">i1</span> <span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">,</span> <span class=\"k\">label</span> <span class=\"nv\">%panic</span><span class=\"p\">,</span> <span class=\"k\">label</span> <span class=\"nv\">%bb1</span>\n\n<span class=\"nl\">bb1:</span>                                              <span class=\"c\">; preds = %start</span>\n  <span class=\"k\">ret</span> <span class=\"k\">i32</span> <span class=\"nv\">%_1.0</span>\n\n<span class=\"nl\">panic:</span>                                            <span class=\"c\">; preds = %start</span>\n<span class=\"c\">; call core::panicking::panic</span>\n  <span class=\"k\">call</span> <span class=\"k\">void</span> <span class=\"vg\">@_ZN4core9panicking5panic17h7eae3940edceae86E</span><span class=\"p\">([</span><span class=\"m\">0</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">]*</span> <span class=\"k\">noalias</span> <span class=\"k\">nonnull</span> <span class=\"k\">readonly</span> <span class=\"k\">align</span> <span class=\"m\">1</span> <span class=\"k\">bitcast</span> <span class=\"p\">([</span><span class=\"m\">28</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">]*</span> <span class=\"vg\">@str.0</span> <span class=\"k\">to</span> <span class=\"p\">[</span><span class=\"m\">0</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">]*),</span> <span class=\"k\">i64</span> <span class=\"m\">28</span><span class=\"p\">,</span> <span class=\"nv\">%&quot;core::panic::Location&quot;</span><span class=\"p\">*</span> <span class=\"k\">noalias</span> <span class=\"k\">readonly</span> <span class=\"k\">align</span> <span class=\"m\">8</span> <span class=\"k\">dereferenceable</span><span class=\"p\">(</span><span class=\"m\">24</span><span class=\"p\">)</span> <span class=\"k\">bitcast</span> <span class=\"p\">(&lt;{</span> <span class=\"k\">i8</span><span class=\"p\">*,</span> <span class=\"p\">[</span><span class=\"m\">16</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">]</span> <span class=\"p\">}&gt;*</span> <span class=\"vg\">@1</span> <span class=\"k\">to</span> <span class=\"nv\">%&quot;core::panic::Location&quot;</span><span class=\"p\">*))</span>\n  <span class=\"k\">unreachable</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>After:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">define</span> <span class=\"k\">i32</span> <span class=\"vg\">@nothing</span><span class=\"p\">()</span> <span class=\"k\">unnamed_addr</span> <span class=\"vg\">#0</span> <span class=\"p\">{</span>\n<span class=\"nl\">start:</span>\n  <span class=\"nv\">%_1</span> <span class=\"p\">=</span> <span class=\"k\">alloca</span> <span class=\"p\">{</span> <span class=\"k\">i32</span><span class=\"p\">,</span> <span class=\"k\">i8</span> <span class=\"p\">},</span> <span class=\"k\">align</span> <span class=\"m\">4</span>\n  <span class=\"nv nv-Anonymous\">%0</span> <span class=\"p\">=</span> <span class=\"k\">bitcast</span> <span class=\"p\">{</span> <span class=\"k\">i32</span><span class=\"p\">,</span> <span class=\"k\">i8</span> <span class=\"p\">}*</span> <span class=\"nv\">%_1</span> <span class=\"k\">to</span> <span class=\"k\">i32</span><span class=\"p\">*</span>\n  <span class=\"k\">store</span> <span class=\"k\">i32</span> <span class=\"m\">4</span><span class=\"p\">,</span> <span class=\"k\">i32</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">4</span>\n  <span class=\"nv nv-Anonymous\">%1</span> <span class=\"p\">=</span> <span class=\"k\">getelementptr</span> <span class=\"k\">inbounds</span> <span class=\"p\">{</span> <span class=\"k\">i32</span><span class=\"p\">,</span> <span class=\"k\">i8</span> <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"k\">i32</span><span class=\"p\">,</span> <span class=\"k\">i8</span> <span class=\"p\">}*</span> <span class=\"nv\">%_1</span><span class=\"p\">,</span> <span class=\"k\">i32</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"k\">i32</span> <span class=\"m\">1</span>\n  <span class=\"k\">store</span> <span class=\"k\">i8</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"k\">i8</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">4</span>\n  <span class=\"nv nv-Anonymous\">%2</span> <span class=\"p\">=</span> <span class=\"k\">bitcast</span> <span class=\"p\">{</span> <span class=\"k\">i32</span><span class=\"p\">,</span> <span class=\"k\">i8</span> <span class=\"p\">}*</span> <span class=\"nv\">%_1</span> <span class=\"k\">to</span> <span class=\"k\">i32</span><span class=\"p\">*</span>\n  <span class=\"nv nv-Anonymous\">%3</span> <span class=\"p\">=</span> <span class=\"k\">load</span> <span class=\"k\">i32</span><span class=\"p\">,</span> <span class=\"k\">i32</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%2</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">4</span>\n  <span class=\"k\">ret</span> <span class=\"k\">i32</span> <span class=\"nv nv-Anonymous\">%3</span>\n<span class=\"p\">}</span>\n</pre></div>",
        "id": 180032998,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1573047807
    },
    {
        "content": "<p>that seems like a pessimization :D</p>",
        "id": 180033512,
        "sender_full_name": "oli",
        "timestamp": 1573048116
    },
    {
        "content": "<p>oooh, I think I know what's going on. The <code>ConstValue::ByRef</code> of the tuple is not converted to an llvm tuple</p>",
        "id": 180033687,
        "sender_full_name": "oli",
        "timestamp": 1573048231
    },
    {
        "content": "<p>this seems like an easy fix in codegen that should improve all uses of such constants</p>",
        "id": 180033717,
        "sender_full_name": "oli",
        "timestamp": 1573048262
    },
    {
        "content": "<p>I don't really understand the cost model for LLVM instructions so I can't say. My thought was that before we actually did the add with overflow and branched on the result where as now we just put the correct values into variables and return the result from a variable load so it was probably faster?</p>",
        "id": 180035508,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1573049432
    },
    {
        "content": "<p>well. it's probably still cheaper than it was before, but the initial code we generate is a bit odd</p>",
        "id": 180036854,
        "sender_full_name": "oli",
        "timestamp": 1573050412
    },
    {
        "content": "<p>it computes pointers into the constant allocation and reads the tuple values out of it</p>",
        "id": 180036870,
        "sender_full_name": "oli",
        "timestamp": 1573050425
    },
    {
        "content": "<p>but llvm can work without an allocation by just creating a const tuple</p>",
        "id": 180036893,
        "sender_full_name": "oli",
        "timestamp": 1573050442
    },
    {
        "content": "<p>not sure what is better</p>",
        "id": 180036898,
        "sender_full_name": "oli",
        "timestamp": 1573050446
    },
    {
        "content": "<p>seems fine either way for the PR, but we should probably look into it</p>",
        "id": 180036926,
        "sender_full_name": "oli",
        "timestamp": 1573050457
    },
    {
        "content": "<blockquote>\n<p>oli: oooh, I think I know what's going on. The ConstValue::ByRef of the tuple is not converted to an llvm tuple</p>\n<p>oli: this seems like an easy fix in codegen that should improve all uses of such constants</p>\n</blockquote>\n<p>I've been wanting to learn more about LLVM so this sounds like an interesting project to me. Hopefully not too large? Do you think this would be something a newbie to LLVM could tackle?</p>",
        "id": 180037170,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1573050596
    },
    {
        "content": "<p>I need to check to be sure but I think some changes I have laying around my machine will change this to </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">define</span> <span class=\"k\">i32</span> <span class=\"vg\">@nothing</span><span class=\"p\">()</span> <span class=\"k\">unnamed_addr</span> <span class=\"vg\">#0</span> <span class=\"p\">{</span>\n<span class=\"nl\">start:</span>\n  <span class=\"k\">ret</span> <span class=\"k\">i32</span> <span class=\"m\">8</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>but I will need to retest to be certain. </p>\n<p>The main change is to allocate space for the MIR return value and allow propagating into that.</p>",
        "id": 180037346,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1573050691
    },
    {
        "content": "<blockquote>\n<p>I've been wanting to learn more about LLVM so this sounds like an interesting project to me. Hopefully not too large? Do you think this would be something a newbie to LLVM could tackle?</p>\n</blockquote>\n<p>Yea this should be very self-contained. But I'm not sure that doing it is useless complexity considering that llvm optimizations will clean it up nicely</p>",
        "id": 180041328,
        "sender_full_name": "oli",
        "timestamp": 1573053043
    },
    {
        "content": "<p>we may be able to get rid of it by doing the field reading in const prop, too, so that may be simpler</p>",
        "id": 180041363,
        "sender_full_name": "oli",
        "timestamp": 1573053072
    },
    {
        "content": "<p>Ok, I'll work on upstreaming my other const prop changes first and we can see if it's still necessary after that.</p>",
        "id": 180042032,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1573053522
    },
    {
        "content": "<blockquote>\n<p>Is your concern mangling debuginfo?</p>\n</blockquote>\n<p>well we know debuginfo is broken for opt-level=2... <a href=\"https://github.com/rust-lang/rust/issues/66077\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66077\">https://github.com/rust-lang/rust/issues/66077</a></p>",
        "id": 180044472,
        "sender_full_name": "RalfJ",
        "timestamp": 1573054878
    },
    {
        "content": "<blockquote>\n<p>So I added that code to skip pointers to avoid the ICE</p>\n</blockquote>\n<p>(about pointers)<br>\nso, uh, how reliable is that? contsprop results should obviously not be interned so I am not sure how that's related...<br>\nI guess I am asking, where is the ICE originating?</p>",
        "id": 180044664,
        "sender_full_name": "RalfJ",
        "timestamp": 1573054977
    },
    {
        "content": "<blockquote>\n<p>contsprop results should obviously not be interned</p>\n</blockquote>\n<p>that's not obvious to me</p>",
        "id": 180044746,
        "sender_full_name": "oli",
        "timestamp": 1573055031
    },
    {
        "content": "<p>if we have <code>Foo { a: 42, b: 99, c: 52 }</code> and we turn it into a single constant, why not intern its allocation?</p>",
        "id": 180044871,
        "sender_full_name": "oli",
        "timestamp": 1573055083
    },
    {
        "content": "<p>I was thinking of temporary intermediate computations... hm</p>",
        "id": 180044921,
        "sender_full_name": "RalfJ",
        "timestamp": 1573055108
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Is your concern mangling debuginfo?</p>\n</blockquote>\n<p>well we know debuginfo is broken for opt-level=2... <a href=\"https://github.com/rust-lang/rust/issues/66077\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66077\">https://github.com/rust-lang/rust/issues/66077</a></p>\n</blockquote>\n<p>That's related to the MIR Inline pass which is still gated under <code>-Z mir-opt-level=2</code> so I don't think it's really relevant to const prop. </p>\n<blockquote>\n<p>so, uh, how reliable is that?</p>\n</blockquote>\n<p>Should be totally reliable I believe unless I'm missing something <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span> </p>\n<p><a href=\"https://github.com/rust-lang/rust/pull/66074/files#diff-9e103702275cbef342c2decd3395bf3bR627-R634\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/66074/files#diff-9e103702275cbef342c2decd3395bf3bR627-R634\">https://github.com/rust-lang/rust/pull/66074/files#diff-9e103702275cbef342c2decd3395bf3bR627-R634</a></p>",
        "id": 180045969,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1573055721
    },
    {
        "content": "<blockquote>\n<p>Ok, I'll work on upstreaming my other const prop changes first and we can see if it's still necessary after that.</p>\n</blockquote>\n<p>Looks like LLVM changes won't be necessary. With <a href=\"https://github.com/rust-lang/rust/issues/66216\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66216\">#66216</a>, here's the LLVM ir that's generated:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">define</span> <span class=\"k\">i32</span> <span class=\"vg\">@nothing</span><span class=\"p\">()</span> <span class=\"k\">unnamed_addr</span> <span class=\"vg\">#0</span> <span class=\"p\">{</span>\n<span class=\"nl\">start:</span>\n  <span class=\"k\">ret</span> <span class=\"k\">i32</span> <span class=\"m\">4</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p><span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 180220913,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1573212146
    },
    {
        "content": "<p>In debug, no optimization mode <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 180220926,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1573212168
    },
    {
        "content": "<p>sweet</p>",
        "id": 180220956,
        "sender_full_name": "oli",
        "timestamp": 1573212218
    },
    {
        "content": "<p>Looks like most of the compiler team has <a href=\"https://github.com/rust-lang/rust/pull/66074#issuecomment-550274874\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/66074#issuecomment-550274874\">signed off</a> on turning on const prop by default. I don't know what the standard procedure for polls is. Should we wait until everyone signs off before merging?</p>",
        "id": 180431838,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1573485684
    },
    {
        "content": "<p>I think everyone but two is needed</p>",
        "id": 180443841,
        "sender_full_name": "oli",
        "timestamp": 1573494218
    },
    {
        "content": "<p>I suppose we're technically there but niko forgot to check his box off.</p>",
        "id": 180443987,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1573494354
    },
    {
        "content": "<p>(I'm assuming that's what <code>@rfcbot reviewed</code> means)</p>",
        "id": 180444043,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1573494376
    },
    {
        "content": "<p>jop</p>",
        "id": 180445651,
        "sender_full_name": "oli",
        "timestamp": 1573495622
    },
    {
        "content": "<p>I checked niko's box</p>",
        "id": 180445664,
        "sender_full_name": "oli",
        "timestamp": 1573495628
    },
    {
        "content": "<p>so</p>",
        "id": 180445667,
        "sender_full_name": "oli",
        "timestamp": 1573495631
    },
    {
        "content": "<p>I will rebase this tonight then and update the tests to reflect the final state so you can review.</p>",
        "id": 180445836,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1573495792
    }
]