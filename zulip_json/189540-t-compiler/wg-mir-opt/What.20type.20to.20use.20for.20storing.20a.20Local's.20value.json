[
    {
        "content": "<p>Hellu all.</p>\n<p>Today I'm starting to implement the dataflow pass for constant propagation, and it's been a while since I've worked on constprop. What MIR type should I use to store the constant propagated values? I'm indexing the values using <code>Local</code>, which I remember being the right approach, but I've forgotten how to best store these values.</p>\n<p>More context: I will be keeping an <code>IndexVec</code> for each basic block, indexed with <code>Local</code>, and I'll be mutating the values stored in it as the algorithm looks for a fixpoint. I need whatever I have stored in the <code>IndexVec</code> to encode type information, to be very easy to read (since in each iteration I'll look most of them up at least once) and writable as well, since more than one iteration will end up mutating the values.</p>",
        "id": 220619034,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608577978
    },
    {
        "content": "<p>(sorry if this is too obvious &gt;.&lt;; I'm just not sure of what container to use for this data)</p>",
        "id": 220619764,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608578425
    },
    {
        "content": "<p>Are you using the dataflow framework in rustc? I think that takes care of storing the values for you.</p>",
        "id": 220621862,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1608579624
    },
    {
        "content": "<p>I am :3</p>",
        "id": 220621933,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608579669
    },
    {
        "content": "<p>Wait, really? That would be odd...</p>",
        "id": 220622079,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608579729
    },
    {
        "content": "<p>(though very nice)</p>",
        "id": 220622099,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608579739
    },
    {
        "content": "<p>Let's see, I'm looking right now at <code>dataflow/impls/init_locals.rs</code></p>",
        "id": 220622135,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608579759
    },
    {
        "content": "<p>Hmm I thought it did but it's been a while since I looked at it.</p>",
        "id": 220622136,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1608579759
    },
    {
        "content": "<p>it's okay c:</p>",
        "id": 220622158,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608579774
    },
    {
        "content": "<p>init_locals stores a <code>BitSet</code></p>",
        "id": 220622173,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608579782
    },
    {
        "content": "<p><code>BitSet&lt;Local&gt;</code></p>",
        "id": 220622199,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608579797
    },
    {
        "content": "<p>One for every block, I think</p>",
        "id": 220622234,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608579820
    },
    {
        "content": "<p>(which may seem like a lot, but is actually fine for dataflow)</p>",
        "id": 220622253,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608579835
    },
    {
        "content": "<p>Every <code>BitSet</code> is initialized to <code>new_empty</code> (length: number of locals)</p>",
        "id": 220622338,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608579874
    },
    {
        "content": "<p><code>AnalysisDomain::Domain</code> is the type used by <code>ResultsCursor</code></p>",
        "id": 220622403,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1608579912
    },
    {
        "content": "<p>So I believe that's the state of the dataflow analysis</p>",
        "id": 220622426,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1608579926
    },
    {
        "content": "<p>yes</p>",
        "id": 220622444,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608579934
    },
    {
        "content": "<p>that's what I believe as well</p>",
        "id": 220622467,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608579947
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/dataflow/trait.AnalysisDomain.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/dataflow/trait.AnalysisDomain.html</a></p>",
        "id": 220622474,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1608579950
    },
    {
        "content": "<p><code>JoinSemiLattice</code> is implemented for <code>IndexVec&lt;I, J&gt;</code></p>",
        "id": 220622542,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1608579972
    },
    {
        "content": "<p>In the case of <code>init_locals.rs</code>, <code>Domain</code> is <code>BitSet&lt;Local&gt;</code> because it uses the <code>bool</code> lattice (where top and bottom are true and false respectively)</p>",
        "id": 220622573,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608579998
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/What.20type.20to.20use.20for.20storing.20a.20Local's.20value/near/220622542\">said</a>:</p>\n<blockquote>\n<p><code>JoinSemiLattice</code> is implemented for <code>IndexVec&lt;I, J&gt;</code></p>\n</blockquote>\n<p>nice!</p>",
        "id": 220622609,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608580021
    },
    {
        "content": "<p>but what I need is that <code>J</code>, that's where I'm a bit lost</p>",
        "id": 220622631,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608580034
    },
    {
        "content": "<p>Gimme a sec</p>",
        "id": 220622647,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608580043
    },
    {
        "content": "<p>I'll show what I have</p>",
        "id": 220622654,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608580046
    },
    {
        "content": "<p>This is my <code>J</code></p>",
        "id": 220622666,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608580058
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">LatticeElem</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">U</span>: <span class=\"nb\">Eq</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Bottom</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Elem</span><span class=\"p\">(</span><span class=\"n\">U</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Top</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 220622677,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608580063
    },
    {
        "content": "<p>Ah gotcha</p>",
        "id": 220622760,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1608580092
    },
    {
        "content": "<p>I'll be using the Constant Propagation Lattice, which is actually a different lattice for each type</p>",
        "id": 220622776,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608580097
    },
    {
        "content": "<p>Well that looks exactly like</p>",
        "id": 220622779,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1608580099
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/dataflow/lattice/enum.FlatSet.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/dataflow/lattice/enum.FlatSet.html</a></p>",
        "id": 220622790,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1608580107
    },
    {
        "content": "<p>Which impls <code>JoinSemiLattice</code> as well</p>",
        "id": 220622812,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1608580120
    },
    {
        "content": "<p>That <code>U</code> is where I want to store the computed value of the locals</p>",
        "id": 220622816,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608580125
    },
    {
        "content": "<p>Ohhh, <code>FlatSet</code> looks real nice</p>",
        "id": 220622848,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608580150
    },
    {
        "content": "<p>Wait, they named the valued part <code>Elem</code> as well XD</p>",
        "id": 220622892,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608580178
    },
    {
        "content": "<p>well, convergent evolution is at play I guess :D</p>",
        "id": 220622924,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608580194
    },
    {
        "content": "<p>Okay so I might be using <code>FlatSet</code>, or my equivalent if F.S. is limited in some way</p>",
        "id": 220623041,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608580229
    },
    {
        "content": "<p>but... what do I put as <code>T</code>?</p>",
        "id": 220623050,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608580236
    },
    {
        "content": "<p>If I was just propagating <code>i32</code>, I'd put <code>i32</code></p>",
        "id": 220623105,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608580263
    },
    {
        "content": "<p>But I need some way to encode the type and the value there</p>",
        "id": 220623129,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608580274
    },
    {
        "content": "<p>The hard part right now is not really in computing the <code>join</code>. That one's very easy for this lattice :3</p>",
        "id": 220623216,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608580320
    },
    {
        "content": "<p>Are you looking for <code>OpTy</code>?</p>",
        "id": 220623271,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1608580332
    },
    {
        "content": "<p>I just need <code>T</code> (<code>U</code> in my case) to be <code>Eq</code></p>",
        "id": 220623278,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608580339
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/interpret/struct.OpTy.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/interpret/struct.OpTy.html</a></p>",
        "id": 220623296,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1608580350
    },
    {
        "content": "<p>Thanks for the link!</p>",
        "id": 220623309,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608580358
    },
    {
        "content": "<p>Lemme check, one sec</p>",
        "id": 220623315,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608580362
    },
    {
        "content": "<p>That's how values are represented in miri and the current const prop pass</p>",
        "id": 220623350,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1608580381
    },
    {
        "content": "<p>I see~</p>",
        "id": 220623395,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608580409
    },
    {
        "content": "<p>Okay, the type and layout info are bound to the <code>'tcx</code> lifetime, but that should be alright since those are constant</p>",
        "id": 220623438,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608580437
    },
    {
        "content": "<p>wait... the layout... yeah, that's constant as well right? A local can't change its layout, right?</p>",
        "id": 220623519,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608580461
    },
    {
        "content": "<p>I assume you were going to use miri to do the actual evaluation? I don't think we want another const eval engine in rustc lol</p>",
        "id": 220623543,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1608580476
    },
    {
        "content": "<p>No, a local has a fixed layout</p>",
        "id": 220623562,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1608580487
    },
    {
        "content": "<p>excellent</p>",
        "id": 220623570,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608580492
    },
    {
        "content": "<p>Yes, I plan to use miri XD</p>",
        "id": 220623587,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608580500
    },
    {
        "content": "<p>I'm not that mad yet</p>",
        "id": 220623601,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608580506
    },
    {
        "content": "<p>So I assume <code>OpTy</code> lets one evaluate it and operate on it, right?</p>",
        "id": 220623654,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608580536
    },
    {
        "content": "<p>Like, can I ask miri to add two <code>OpTy</code>?</p>",
        "id": 220623675,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608580549
    },
    {
        "content": "<p>(assuming addition is defined for their type and layout)</p>",
        "id": 220623696,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608580560
    },
    {
        "content": "<p>Yeah but basically to do so you need to create an instance of the evaluator and set it up for the body being run</p>",
        "id": 220623761,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1608580584
    },
    {
        "content": "<p>I'd take a look at what the current pass does</p>",
        "id": 220623775,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1608580593
    },
    {
        "content": "<p>Thank you Wesleeeeeeey TuT</p>",
        "id": 220623810,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608580614
    },
    {
        "content": "<p>What you're looking for starts around here <a href=\"https://github.com/rust-lang/rust/blob/11c94a197726b6a981828cb1837d7c3eed1b841d/compiler/rustc_mir/src/transform/const_prop.rs#L370\">https://github.com/rust-lang/rust/blob/11c94a197726b6a981828cb1837d7c3eed1b841d/compiler/rustc_mir/src/transform/const_prop.rs#L370</a></p>",
        "id": 220623873,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1608580651
    },
    {
        "content": "<p>and then continues to the end of the function</p>",
        "id": 220623879,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1608580655
    },
    {
        "content": "<p>You're very welcome!</p>",
        "id": 220623885,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1608580661
    },
    {
        "content": "<p>You might want to make <code>ConstPropMachine</code> pub and re-use it</p>",
        "id": 220623972,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1608580691
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/What.20type.20to.20use.20for.20storing.20a.20Local's.20value/near/220623761\">said</a>:</p>\n<blockquote>\n<p>Yeah but basically to do so you need to create an instance of the evaluator and set it up for the body being run</p>\n</blockquote>\n<p>This should be fine, if the evaluator doesn't need to keep state or anything that would make it invalid to reuse across many propagations at different basic blocks :3</p>",
        "id": 220623984,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608580701
    },
    {
        "content": "<p>Oh boi yes, that <code>ConstPropMachine</code> uses some macros that I'd prefer to not need to read right now. I reckon I should re-use it for now and then after all of this is done, make it so the machine lives inside the new dataflow-based implementation's file :3</p>",
        "id": 220624191,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608580849
    },
    {
        "content": "<p>Okay, I think this is all I needed to go a long way for now. Thank you again Wesley <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 220624441,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608581002
    },
    {
        "content": "<p>Hmm ... iirc I think it would be possible to move the current statement pointer around and get it to do what you want</p>",
        "id": 220624446,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1608581004
    },
    {
        "content": "<p>I'm not totally sure so take what I said with a huge grain of salt lol</p>",
        "id": 220624466,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1608581020
    },
    {
        "content": "<p>statement pointer?</p>",
        "id": 220624468,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608581021
    },
    {
        "content": "<p>It takes a <code>Body</code> and then runs over the statements in it so it knows what the next statement to eval is</p>",
        "id": 220624545,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1608581050
    },
    {
        "content": "<p>what is a statement pointer in this context? This is the first time I read the phrase :o</p>",
        "id": 220624547,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608581050
    },
    {
        "content": "<p>oh</p>",
        "id": 220624553,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608581055
    },
    {
        "content": "<p>It's just an index into the statement vec</p>",
        "id": 220624562,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1608581060
    },
    {
        "content": "<p>I see!</p>",
        "id": 220624572,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608581068
    },
    {
        "content": "<p>But I believe you can mutate where it points</p>",
        "id": 220624576,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1608581071
    },
    {
        "content": "<p>Cool</p>",
        "id": 220624582,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608581076
    },
    {
        "content": "<p>You will probably need to overwrite what values it has for locals though</p>",
        "id": 220624598,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1608581090
    },
    {
        "content": "<p>Since the dataflow pass will iterate over the same statement multiple times as it gets to a fixedpoint</p>",
        "id": 220624634,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1608581113
    },
    {
        "content": "<p>yep</p>",
        "id": 220624646,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608581122
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/interpret/struct.InterpCx.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/interpret/struct.InterpCx.html</a> is the main thing you're going to be dealing with in terms of miri</p>",
        "id": 220624720,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1608581162
    },
    {
        "content": "<p>oh wow that's a big API</p>",
        "id": 220625022,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608581342
    },
    {
        "content": "<p>I'm seeing there some fns to evaluate operations, I think</p>",
        "id": 220625064,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608581369
    },
    {
        "content": "<p>That should be pretty close to what is needed for the transfer functions</p>",
        "id": 220625091,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608581386
    },
    {
        "content": "<p>Yeah, if you want to see how different operations are normally handled, I'd recommend starting with the <code>statement()</code> function and then tracing the call hierarchy from there <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_mir/interpret/step.rs.html#79-141\">https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_mir/interpret/step.rs.html#79-141</a></p>",
        "id": 220625230,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1608581470
    },
    {
        "content": "<p>How can I check if a <code>Local</code> is a constant?</p>\n<p>I was thinking of using <code>InterpCx::eval_operand</code> <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/interpret/struct.InterpCx.html#method.eval_operand\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/interpret/struct.InterpCx.html#method.eval_operand</a> and then checking if the <code>Operand</code> inside the <code>OpTy</code> that's given as a result is initialized. So either an <code>Operand::Indirect</code> or an <code>Operand::Immediate</code> whose <code>Scalars</code> are not of the <code>Uninitialized</code> variant</p>",
        "id": 220639021,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608590198
    },
    {
        "content": "<p>But that seems too convoluted to me</p>",
        "id": 220639052,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608590223
    },
    {
        "content": "<p>I must be missing some canonical way to do it <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 220639071,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608590234
    },
    {
        "content": "<p>Well what I really need to do is to seed the initial block with the values that are known at the beginning of the analysis</p>",
        "id": 220652415,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608603234
    },
    {
        "content": "<p>Be it by asking if a <code>Local</code> is a constant or by doing something else, doesn't really matter</p>",
        "id": 220652462,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608603267
    },
    {
        "content": "<p>I'm not quite sure what you mean. Are you talking about code like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and wanting to know if <code>x</code> and <code>y</code> are constant values or do you mean after dataflow runs or something?</p>",
        "id": 220688382,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1608643574
    },
    {
        "content": "<p>I mean sort of that code, but more like knowing that in here:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">FIVE</span>: <span class=\"kt\">u32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><code>FIVE</code>'s value is 5. Or are <code>const</code> not <code>Local</code>s for the block? In which case, I think the state of the initial block can be left as-is</p>",
        "id": 220692461,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608646220
    },
    {
        "content": "<p>Because, yeah, the value of <code>x</code> and <code>y</code>are assigned inside the block, so the facts that <code>x = 4</code> and <code>y = 2</code> will be picked up during the dataflow process</p>",
        "id": 220692661,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608646347
    },
    {
        "content": "<p><code>FIVE</code> will be stored in a temporary local when you use it in most cases.</p>",
        "id": 220692680,
        "sender_full_name": "bjorn3",
        "timestamp": 1608646363
    },
    {
        "content": "<p>It may also directly be used as <code>Operand::Constant</code>.</p>",
        "id": 220692718,
        "sender_full_name": "bjorn3",
        "timestamp": 1608646402
    },
    {
        "content": "<p>Oh, you're completely right. Look, it even gets propagated to <code>z</code> here: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=1f8bf0a26412ed46a90c7a35ca30a2f7\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=1f8bf0a26412ed46a90c7a35ca30a2f7</a></p>",
        "id": 220693060,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608646607
    },
    {
        "content": "<p>Although I wonder if that's a consequence of old constprop</p>",
        "id": 220693081,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608646618
    },
    {
        "content": "<p>x'D</p>",
        "id": 220693094,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608646624
    },
    {
        "content": "<p>Hmm, well, if it does indeed get stored in a temporary local, then that's all that's needed to use it in the dataflow steps</p>",
        "id": 220693243,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1608646757
    }
]