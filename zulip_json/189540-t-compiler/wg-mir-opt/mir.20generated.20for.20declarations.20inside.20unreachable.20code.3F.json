[
    {
        "content": "<p>I was messing around a bit and it seems that mir is generated for function declarations inside dead code (e..g. <code>if false { ..}</code>), is that something that could be skipped?<br>\n<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=e0b5d25c6b4554f4d1c06c9dcc4a307f\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=e0b5d25c6b4554f4d1c06c9dcc4a307f</a></p>",
        "id": 204373494,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1595197610
    },
    {
        "content": "<p>Yes!</p>",
        "id": 204373508,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595197668
    },
    {
        "content": "<p>Did it generate that after all the mir-opts?</p>",
        "id": 204373512,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595197682
    },
    {
        "content": "<p>hm, I only looked at godbolt and playground so far</p>",
        "id": 204373556,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1595197729
    },
    {
        "content": "<p>I think it's still there?<br>\n<code>fn foo::&lt;impl at bad.rs:6:9: 10:10&gt;::to_string(_1: &amp;foo::A) -&gt; std::string::String {</code><br>\nthat's with mirO3</p>",
        "id": 204373680,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1595197981
    },
    {
        "content": "<p>MIR is built for every function to borrow-check it</p>",
        "id": 204373747,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595198129
    },
    {
        "content": "<p>It's also optimized for every function to show const prop warnings</p>",
        "id": 204373749,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595198147
    },
    {
        "content": "<p>aaah so the compiler can reject dead-but-invalid code?</p>",
        "id": 204373751,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1595198149
    },
    {
        "content": "<p>Yeah</p>",
        "id": 204373788,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595198166
    },
    {
        "content": "<p>I also think it wouldn't save much time since most functions are reachable</p>",
        "id": 204373799,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595198218
    },
    {
        "content": "<p>For what it's worth: LLVM does eliminate dead code, so this is only an issue of whether or not to eliminate it at MIR level. Are we all on that boat? :3</p>",
        "id": 204374212,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595199014
    },
    {
        "content": "<blockquote>\n<p>LLVM does eliminate dead code</p>\n</blockquote>\n<p>mmmh <a href=\"https://rust.godbolt.org/z/T4bMnj\">https://rust.godbolt.org/z/T4bMnj</a></p>",
        "id": 204374632,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1595199737
    },
    {
        "content": "<p>the actual answer is \"probably not\" because Rust doesn’t really preserve distinction of items being declared in dead or not dead code.</p>",
        "id": 204375484,
        "sender_full_name": "nagisa",
        "timestamp": 1595201340
    },
    {
        "content": "<p>only the resolver is affected by scoping of items.</p>",
        "id": 204375488,
        "sender_full_name": "nagisa",
        "timestamp": 1595201355
    },
    {
        "content": "<p>and since implementations of public traits at least generate public symbols, there's no way for LLVM (or rust itself, at that point) to know that these aren’t really used. I think...</p>",
        "id": 204375538,
        "sender_full_name": "nagisa",
        "timestamp": 1595201413
    },
    {
        "content": "<p>if there was an actual analysis that could nuke these public functions/methods, it'd be fairly involved.</p>",
        "id": 204375541,
        "sender_full_name": "nagisa",
        "timestamp": 1595201432
    },
    {
        "content": "<p>In this particular instance it would be necessary to prove that it is impossible to construct an instance of <code>A</code> anywhere.</p>",
        "id": 204375548,
        "sender_full_name": "nagisa",
        "timestamp": 1595201464
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"217864\">matthiaskrgr</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/mir.20generated.20for.20declarations.20inside.20unreachable.20code.3F/near/204374632\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>LLVM does eliminate dead code</p>\n</blockquote>\n<p>mmmh <a href=\"https://rust.godbolt.org/z/T4bMnj\">https://rust.godbolt.org/z/T4bMnj</a></p>\n</blockquote>\n<p>I don't think that counts as dead code on a technicality?</p>\n<p>Like, yes, that <code>if</code> will never be executed. But all the names declared inside it will enter the binary's namespace. I'm pretty sure that's the case for Rust.</p>\n<p>The only thing that will not get executed is the <code>let x = 8;</code> part, which is getting removed from the compiled artifact.</p>",
        "id": 204375754,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595201916
    },
    {
        "content": "<p>If you for example remove all name declarations and try to do a print and stuff, all of that gets removed: <a href=\"https://rust.godbolt.org/z/1sMjhv\">https://rust.godbolt.org/z/1sMjhv</a></p>",
        "id": 204375770,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595201996
    },
    {
        "content": "<p>(btw, I changed the flag to check what happened if we upped it from opt-level 2 (=== to -O) to opt-level 3)</p>",
        "id": 204375830,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595202110
    },
    {
        "content": "<p>And what nagisa is saying is (implicitly) that the names / symbols being declared are public.<br>\nAnd then, that in order to actually remove them you'd need something like a global analysis that proved that those symbols were never being used anywhere in the program.</p>",
        "id": 204375949,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595202330
    },
    {
        "content": "<p>For what it's worth, it looks to me that the MIR output isn't deleting those lines: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=203ffc8a5e3fc4cee393bc0737ec8b42\">https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=203ffc8a5e3fc4cee393bc0737ec8b42</a></p>",
        "id": 204376049,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595202511
    },
    {
        "content": "<p>So it looks like LLVM doing all that work of deleting \"dead code\"</p>",
        "id": 204376050,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595202530
    },
    {
        "content": "<p>yeah its something LTO can achieve.</p>",
        "id": 204376111,
        "sender_full_name": "nagisa",
        "timestamp": 1595202668
    },
    {
        "content": "<p>or probably thinLTO</p>",
        "id": 204376114,
        "sender_full_name": "nagisa",
        "timestamp": 1595202680
    },
    {
        "content": "<p>Ohh, you mean that maybe LTO can do that proof and delete the code? Damn, LLVM is a beast</p>",
        "id": 204376222,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595202844
    },
    {
        "content": "<p>Makes sense tho, LTO is where you'd try to do it</p>",
        "id": 204376226,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595202866
    }
]