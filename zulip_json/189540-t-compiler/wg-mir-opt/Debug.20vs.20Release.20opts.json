[
    {
        "content": "<p>Correct me if I'm wrong here.<br>\nMy understanding is that currently, we have 3 \"levels\" of optimizations in MIR:</p>\n<ul>\n<li>Level 1: always on. These are <strong>sound</strong> and <strong>tend to improve compilation times in debug</strong></li>\n<li>Level 2: useable on nightly. Some are <strong>unsound</strong>, some are <strong>unstable</strong>, and some <strong>are sound but don't improve debug compilation times</strong></li>\n<li>Level 3: same as Level 2, more or less?</li>\n</ul>\n<p>What I think we could use, is having an enum-based opt mode instead of a level-based opt mode:</p>\n<ul>\n<li><strong>Debug</strong>: optimizations that <strong>improve compilation times in debug mode</strong>. All sound. Engaged in <code>--debug</code> mode.</li>\n<li><strong>Release</strong>: optimizations that either <strong>improve compilation times</strong> or <strong>improve runtime performance</strong> in release mode. All <strong>sound</strong>. Engaged in <code>--release</code> mode.</li>\n<li><strong>Unstable</strong>: optimizations that are either just <strong>unstable</strong> or still <strong>unsound</strong>. Never engaged, except for testing purposes.</li>\n</ul>\n<p><strong>Debug</strong> would more or less reflect our current <strong>Level 1</strong>. <strong>Release</strong> would allow us to start using optimizations that improve compilation times in release mode, like inlining (cc <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span>, you have experience in this example case :3). It would also allow us to use many opts that are currently chilling on level 2 or 3, which are sound and stable but otherwise not useable in Debug because the CGU partitioning scheme makes them a compile-time regression on Debug builds.</p>\n<p>Edit: I'm thinking in <code>cargo</code> terms for <code>debug</code> and <code>release</code> modes. Maybe <code>--debug</code> mode would equal <code>opt-level=0</code> and <code>--release</code> mode would equal <code>opt-level=3</code> here. Thanks <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> for pointing it out <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 198457033,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590162409
    },
    {
        "content": "<p>CC <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 198457353,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590162560
    },
    {
        "content": "<p>Note that rustc doesn't have a <code>--release</code> mode, it has opt-level=0,1,2,3,s,z instead</p>",
        "id": 198457901,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1590162810
    },
    {
        "content": "<p>Oh really? Lol, I'm clearly using cargo too much <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 198458008,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590162845
    },
    {
        "content": "<p>Still, don't people mainly use <code>cargo</code>? What's up with opt-levels being different in rustc and cargo? That's kinda weird</p>",
        "id": 198458081,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590162885
    },
    {
        "content": "<p>opt-levels are configurable in Cargo, it just defaults to 0 and 3 for the dev and release profiles, respectively</p>",
        "id": 198458194,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1590162953
    },
    {
        "content": "<p>To some degree I guess it's something rustc inherited from C compilers</p>",
        "id": 198458318,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1590162997
    },
    {
        "content": "<p>Yeah, it feels a lot that way :3</p>",
        "id": 198458341,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590163013
    },
    {
        "content": "<p>That feels very <code>gcc -OX ...</code></p>",
        "id": 198458373,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590163030
    },
    {
        "content": "<p>Kay, updated the original post to reflect that. Thank you Jonas :)</p>",
        "id": 198458745,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590163196
    },
    {
        "content": "<p>it <em>is</em> GCC/Clang -O</p>",
        "id": 198531640,
        "sender_full_name": "eddyb",
        "timestamp": 1590234392
    },
    {
        "content": "<p>idk why we call the \"dev\" Cargo profile \"Debug mode\" colloquially :P</p>",
        "id": 198531650,
        "sender_full_name": "eddyb",
        "timestamp": 1590234433
    },
    {
        "content": "<p>dev/release is inherited from... other language package managers, I'm guessing? it's not a compiler concept, although there is some implication that you'd want optimizations in release mode</p>",
        "id": 198531698,
        "sender_full_name": "eddyb",
        "timestamp": 1590234507
    },
    {
        "content": "<p>but something likely more meaningful is how <code>debug!</code> logging w/ the <code>log</code> crate is disabled in release builds</p>",
        "id": 198531700,
        "sender_full_name": "eddyb",
        "timestamp": 1590234533
    },
    {
        "content": "<p>(same with <code>debug_assert!</code>, which I keep forgetting exists)</p>",
        "id": 198531705,
        "sender_full_name": "eddyb",
        "timestamp": 1590234555
    },
    {
        "content": "<p>you can think of that \"you're releasing this to end-users, so you want it to be fast and it doesn't necessarily need to be debuggable\"</p>",
        "id": 198531710,
        "sender_full_name": "eddyb",
        "timestamp": 1590234575
    },
    {
        "content": "<p>(but as <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> mentioned, you can control both opt levels and debuginfo and I think maybe even debug assertions through Cargo profiles. there's no custom profiles... yet, although I know I few places which direly need them)</p>",
        "id": 198531753,
        "sender_full_name": "eddyb",
        "timestamp": 1590234622
    },
    {
        "content": "<p>/me is somewhat opposed to a debug/release optimization split, especially if debuginfo is involved, since I want to preserve debuginfo through as many optimizations as possible</p>",
        "id": 198531820,
        "sender_full_name": "eddyb",
        "timestamp": 1590234731
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"212698\">@Félix Fischer</span> however, I do like the unstable/unsound and compile-time vs run-time distinctions</p>",
        "id": 198531837,
        "sender_full_name": "eddyb",
        "timestamp": 1590234784
    },
    {
        "content": "<p>there should probably be a clear dedicated opt-in for \"known to be unsound\"</p>",
        "id": 198531845,
        "sender_full_name": "eddyb",
        "timestamp": 1590234828
    },
    {
        "content": "<p>frankly that's all we need to do, and maybe remove level -Zmir-opt-level=3?</p>",
        "id": 198531901,
        "sender_full_name": "eddyb",
        "timestamp": 1590234948
    },
    {
        "content": "<p>as for using an <code>enum</code>, it could be this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">MirOptLevel</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Disabled</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Default</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Aggressive</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 198531947,
        "sender_full_name": "eddyb",
        "timestamp": 1590235020
    },
    {
        "content": "<p>Can we also have a flag to specify the optimizations to run rather than choose a fixed combination? For example enable const-prop and inlining, but not copy-prop.</p>",
        "id": 198532013,
        "sender_full_name": "bjorn3",
        "timestamp": 1590235166
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> sure. That makes a lot of sense, specially for testing and for keeping the optimization suite as a whole sound over time.</p>",
        "id": 198546400,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590258484
    },
    {
        "content": "<p>(@eddyb)</p>\n<blockquote>\n<p>/me is somewhat opposed to a debug/release optimization split, especially if debuginfo is involved, since I want to preserve debuginfo through as many optimizations as possible</p>\n</blockquote>\n<p>I agree with you here, which makes me think that maybe we want a third, different compilation mode that's just for getting that extra 0.5% of performance out of the program:</p>\n<ul>\n<li>Debug: fast to compile</li>\n<li>Release: apply all opts, except ones that remove debug info</li>\n<li>Release-forget-debugging: Release, and remove debug info</li>\n</ul>",
        "id": 198546494,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590258683
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Debug.20vs.20Release.20opts/near/198531845\">said</a>:</p>\n<blockquote>\n<p>there should probably be a clear dedicated opt-in for \"known to be unsound\"</p>\n</blockquote>\n<p>really? IMO \"known to be unsound\" optimizations should just <em>not happen</em>, period. when we find a soundness issue, we either fix it or remove the offending optimization.</p>",
        "id": 198571638,
        "sender_full_name": "RalfJ",
        "timestamp": 1590306583
    },
    {
        "content": "<p>^</p>",
        "id": 198595417,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590346955
    },
    {
        "content": "<p>I mean... I'm imagining that just as there are clippy lints that are not really that great but some people want anyway, because they work for their setup or whatever, someone could want an optimization that happens to work soundly for their use case.</p>",
        "id": 198595428,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590347040
    },
    {
        "content": "<p>However there's a big difference</p>",
        "id": 198595467,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590347047
    },
    {
        "content": "<p>If a lint stops working for you, your code is rejected and you see it</p>",
        "id": 198595472,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590347067
    },
    {
        "content": "<p>That's the failure mode</p>",
        "id": 198595475,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590347073
    },
    {
        "content": "<p>Whereas if an optimization starts breaking your code, you'll not notice right away. That's a bad failure mode</p>",
        "id": 198595484,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590347106
    },
    {
        "content": "<p>I also would personally prefer to not inherit this thing which is very common in C compilers, which is that optimizations break perfectly sound code. That always sucks to debug. I would love it if we never did that to people, or at least not knowingly.</p>",
        "id": 198595545,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590347216
    },
    {
        "content": "<p>I mean... llvm does that to us already! We cannot use noalias because optimizations break it</p>",
        "id": 198595557,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590347254
    },
    {
        "content": "<p>I would much prefer it if we stopped this tradition of optimizations breaking people's code</p>",
        "id": 198595604,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590347295
    },
    {
        "content": "<p>:P</p>",
        "id": 198595606,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590347297
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"212698\">Félix Fischer</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Debug.20vs.20Release.20opts/near/198595604\">said</a>:</p>\n<blockquote>\n<p>I would much prefer it if we stopped this tradition of optimizations breaking people's code</p>\n</blockquote>\n<p>I can't even say how much I agree with this.^^</p>",
        "id": 198597374,
        "sender_full_name": "RalfJ",
        "timestamp": 1590350220
    },
    {
        "content": "<p>Somehow an entire industry came to accept that <code>-O3</code> sometimes breaks your code and that's just what optimizations do. (granted, most of those are probably cases of UB in the program, but there are also more than enough compiler bugs going around.) I don't know how we ended up there, but it's totally awful and really needs fixing. plus, Rust is a safe language, so it should care <em>even more</em> about fixing that.</p>",
        "id": 198597440,
        "sender_full_name": "RalfJ",
        "timestamp": 1590350313
    },
    {
        "content": "<p>I mean, telling users \"oh yeah, optimization X has soundness bugs but you can pass <code>-Zwhatever</code> to enable it anyway, it'll probably make your code faster\" would be a bad idea, duh. But in a situation where we know of a soundness issue in a MIR optimization and can't fix it promptly, I don't think \"remove the optimization\" is the best alternative. Removing the code (or at least, any way to run it) just makes it harder to work on a fix: you'd have to revert the removal and then fix up any bitrot that occurred in the mean time before you can even check if a test case for the unsoundness still reproduces. Leaving the optimization available behind a scary hidden flag also avoids miscompiling people's programs, but any existing tests for the pass keep running, mechanical refactors get applied to it, etc. and so development gets easier.</p>\n<p>BTW, this isn't too different from \"incomplete feature gates\", some of which also have soundness issues but we keep them in-tree to enable iterative development and testing.</p>",
        "id": 198599796,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1590353752
    },
    {
        "content": "<p>Yep, <span class=\"user-mention\" data-user-id=\"124289\">@Hanna Kruppe</span>, I think I completely agree with you. I think something that's really good about how we work right now, is that all mir optimizations have more or less their own test suite that <strong>always</strong> runs on the CI pipelines for rustc.</p>",
        "id": 198607021,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590366598
    },
    {
        "content": "<p>I would leave them summoneable through some scary flag, just as we do today. Something like <code>-Zwhatever</code> I think is fine.</p>",
        "id": 198607072,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590366695
    },
    {
        "content": "<p>I would definitely never allow unsound opts to get into the stable compiler though</p>",
        "id": 198607076,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590366720
    },
    {
        "content": "<p>And also that enum that <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> suggested, I would also change. From:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">MirOptLevel</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Disabled</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Default</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Aggressive</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>To:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">MirOptLevel</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Disabled</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Light</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Heavy</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Unsound</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 198607123,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590366825
    }
]