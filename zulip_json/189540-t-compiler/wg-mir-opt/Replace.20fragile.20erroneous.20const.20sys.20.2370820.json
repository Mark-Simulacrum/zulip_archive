[
    {
        "content": "<p>This PR should be ready for review, cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 194491022,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587152814
    },
    {
        "content": "<p>one thing I see though is that after running with --bless I see this changes ...</p>",
        "id": 194491050,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587152833
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>diff --git a/src/test/mir-opt/const_allocation2/64bit/rustc.main.ConstProp.after.mir b/src/test/mir-opt/const_allocation2/64bit/rustc.main.ConstProp.after.mir\nindex e61f0a8b69f..6d2806d820d 100644\n--- a/src/test/mir-opt/const_allocation2/64bit/rustc.main.ConstProp.after.mir\n+++ b/src/test/mir-opt/const_allocation2/64bit/rustc.main.ConstProp.after.mir\n@@ -30,44 +30,44 @@ fn main() -&gt; () {\n }\n\n alloc0 (static: FOO, size: 16, align: 8) {\n-    ╾──────alloc24+0──────╼ 03 00 00 00 00 00 00 00 │ ╾──────╼........\n+    ╾──────alloc20+0──────╼ 03 00 00 00 00 00 00 00 │ ╾──────╼........\n }\n\n-alloc24 (size: 72, align: 8) {\n-    0x00 │ 00 00 00 00 __ __ __ __ ╾──────alloc9+0───────╼ │ ....░░░░╾──────╼\n+alloc20 (size: 72, align: 8) {\n+    0x00 │ 00 00 00 00 __ __ __ __ ╾──────alloc4+0───────╼ │ ....░░░░╾──────╼\n     0x10 │ 00 00 00 00 00 00 00 00 00 00 00 00 __ __ __ __ │ ............░░░░\n-    0x20 │ ╾──────alloc14+0──────╼ 02 00 00 00 00 00 00 00 │ ╾──────╼........\n-    0x30 │ 01 00 00 00 2a 00 00 00 ╾──────alloc22+0──────╼ │ ....*...╾──────╼\n+    0x20 │ ╾──────alloc9+0───────╼ 02 00 00 00 00 00 00 00 │ ╾──────╼........\n+    0x30 │ 01 00 00 00 2a 00 00 00 ╾──────alloc18+0──────╼ │ ....*...╾──────╼\n     0x40 │ 03 00 00 00 00 00 00 00                         │ ........\n }\n\n-alloc9 (size: 0, align: 8) {}\n+alloc4 (size: 0, align: 8) {}\n\n-alloc14 (size: 16, align: 8) {\n-    ╾──────alloc12+0──────╼ ╾──────alloc13+0──────╼ │ ╾──────╼╾──────╼\n+alloc9 (size: 16, align: 8) {\n+    ╾──────alloc7+0───────╼ ╾──────alloc8+0───────╼ │ ╾──────╼╾──────╼\n }\n\n-alloc12 (size: 1, align: 1) {\n+alloc7 (size: 1, align: 1) {\n     05                                              │ .\n }\n\n-alloc13 (size: 1, align: 1) {\n+alloc8 (size: 1, align: 1) {\n     06                                              │ .\n }\n\n-alloc22 (size: 24, align: 8) {\n-    0x00 │ ╾──────alloc18+3──────╼ ╾──────alloc19+0──────╼ │ ╾──────╼╾──────╼\n-    0x10 │ ╾──────alloc21+2──────╼                         │ ╾──────╼\n+alloc18 (size: 24, align: 8) {\n+    0x00 │ ╾──────alloc14+3──────╼ ╾──────alloc15+0──────╼ │ ╾──────╼╾──────╼\n+    0x10 │ ╾──────alloc17+2──────╼                         │ ╾──────╼\n }\n\n-alloc18 (size: 4, align: 1) {\n+alloc14 (size: 4, align: 1) {\n     2a 45 15 6f                                     │ *E.o\n }\n\n-alloc19 (size: 1, align: 1) {\n+alloc15 (size: 1, align: 1) {\n     2a                                              │ *\n }\n\n-alloc21 (size: 4, align: 1) {\n+alloc17 (size: 4, align: 1) {\n     2a 45 15 6f                                     │ *E.o\n }\ndiff --git a/src/test/mir-opt/retain-never-const/rustc.no_codegen.PreCodegen.after.mir b/src/test/mir-opt/retain-never-const/rustc.no_codegen.PreCodegen.after.mir\nindex 2d7a79ee44c..07d28efb9c3 100644\n--- a/src/test/mir-opt/retain-never-const/rustc.no_codegen.PreCodegen.after.mir\n+++ b/src/test/mir-opt/retain-never-const/rustc.no_codegen.PreCodegen.after.mir\n@@ -2,20 +2,10 @@\n\n fn no_codegen() -&gt; () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/retain-never-const.rs:18:20: 18:20\n-    let mut _1: !;                       // in scope 0 at $DIR/retain-never-const.rs:19:13: 19:33\n     scope 1 {\n     }\n\n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/retain-never-const.rs:19:13: 19:33\n-        _1 = const PrintName::&lt;T&gt;::VOID; // bb0[1]: scope 0 at $DIR/retain-never-const.rs:19:13: 19:33\n-                                         // ty::Const\n-                                         // + ty: !\n-                                         // + val: Unevaluated(DefId(0:9 ~ retain_never_const[317d]::{{impl}}[0]::VOID[0]), [T], None)\n-                                         // mir::Constant\n-                                         // + span: $DIR/retain-never-const.rs:19:13: 19:33\n-                                         // + user_ty: UserType(0)\n-                                         // + literal: Const { ty: !, val: Unevaluated(DefId(0:9 ~ retain_never_const[317d]::{{impl}}[0]::VOID[0]), [T], None) }\n-        unreachable;                     // bb0[2]: scope 0 at $DIR/retain-never-const.rs:19:13: 19:33\n+        unreachable;                     // bb0[0]: scope 0 at $DIR/retain-never-const.rs:19:13: 19:33\n     }\n }\n</pre></div>",
        "id": 194491066,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587152845
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> also</p>",
        "id": 194491083,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587152856
    },
    {
        "content": "<p>checking if those changes are expected ...</p>",
        "id": 194491183,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587152898
    },
    {
        "content": "<p>It looks like a bunch of allocations got removed which is what we wanted to see.</p>",
        "id": 194491217,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1587152927
    },
    {
        "content": "<p>So good work <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 194491259,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1587152949
    },
    {
        "content": "<p>Have you done a perf run by any chance?</p>",
        "id": 194491311,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1587152997
    },
    {
        "content": "<p>nope</p>",
        "id": 194491358,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587153005
    },
    {
        "content": "<p>I don't think there would be any regressions but we should <code>rollup=never</code> that PR</p>",
        "id": 194491422,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1587153042
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 194491608,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587153147
    },
    {
        "content": "<p>can I rollup=never before accepting it?</p>",
        "id": 194491624,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587153162
    },
    {
        "content": "<p>maybe we should just comment that for the one that approves this</p>",
        "id": 194491649,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587153176
    },
    {
        "content": "<p>Yeah, I think you can do that at any time</p>",
        "id": 194491764,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1587153239
    },
    {
        "content": "<p>You can check the queue to see if it took effect <a href=\"https://buildbot2.rust-lang.org/homu/queue/rust\" title=\"https://buildbot2.rust-lang.org/homu/queue/rust\">https://buildbot2.rust-lang.org/homu/queue/rust</a></p>",
        "id": 194491878,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1587153273
    },
    {
        "content": "<p>one pending thing I have is ...</p>",
        "id": 194492726,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587153657
    },
    {
        "content": "<ul>\n<li>Change the <code>Vec&lt;Const&gt;</code> to be <code>IndexVec&lt;ConstId, &amp;'tcx ty::Const&lt;'tcx&gt;&gt;</code> and have the MIR store <code>ConstId</code> instead of repeating the whole <code>Const</code>.</li>\n</ul>",
        "id": 194492727,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587153658
    },
    {
        "content": "<p>anyway I think this could be merged as is and that could be done on a separate PR</p>",
        "id": 194492873,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587153733
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 194492882,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587153737
    },
    {
        "content": "<p>also I have a terminology question at <a href=\"https://github.com/rust-lang/rust/pull/70820#discussion_r410522129\" title=\"https://github.com/rust-lang/rust/pull/70820#discussion_r410522129\">https://github.com/rust-lang/rust/pull/70820#discussion_r410522129</a></p>",
        "id": 194585895,
        "sender_full_name": "RalfJ",
        "timestamp": 1587284712
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> will check this out tomorrow</p>",
        "id": 194598086,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587303464
    },
    {
        "content": "<p>btw, this PR <a href=\"https://github.com/rust-lang/rust/issues/70820\" title=\"https://github.com/rust-lang/rust/issues/70820\">#70820</a> is ready for review cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 194802109,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587476143
    },
    {
        "content": "<p>just the the move from visit_body to super_body, then it lgtm</p>",
        "id": 194803800,
        "sender_full_name": "oli",
        "timestamp": 1587476950
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> right, it makes sense</p>",
        "id": 194803945,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587477005
    },
    {
        "content": "<p>will do it quickly</p>",
        "id": 194803964,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587477012
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> pushed, let's see if CI is happy</p>",
        "id": 194804908,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587477427
    },
    {
        "content": "<p>got an ICE</p>",
        "id": 194805632,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587477707
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>query stack during panic:\n#0 [optimized_mir] processing `num::&lt;impl i128&gt;::min_value`  |  = note: this failure-note originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n\n#1 [const_eval_raw] const-evaluating `num::&lt;impl i128&gt;::min_value`  |  = note: this failure-note originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n\n#2 [const_eval_raw] const-evaluating `i128::MIN`\n#3 [const_eval_validated] const-evaluating + checking `i128::MIN`\n#4 [const_eval_validated] const-evaluating + checking `i128::MIN`\n#5 [analysis] running analysis passes on this crate\nend of query stack\nerror: could not compile `core`.\n</pre></div>",
        "id": 194805807,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587477771
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>thread &#39;rustc&#39; panicked at &#39;called `Option::unwrap()` on a `None` value&#39;, src/librustc_mir/transform/const_prop.rs:823:38\n</pre></div>",
        "id": 194805837,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587477784
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <a href=\"https://github.com/rust-lang/rust/blob/9601d1fc7b448e28675d758e606f8be8f2a9ff7f/src/librustc_mir/transform/const_prop.rs#L823\" title=\"https://github.com/rust-lang/rust/blob/9601d1fc7b448e28675d758e606f8be8f2a9ff7f/src/librustc_mir/transform/const_prop.rs#L823\">https://github.com/rust-lang/rust/blob/9601d1fc7b448e28675d758e606f8be8f2a9ff7f/src/librustc_mir/transform/const_prop.rs#L823</a>, <code>source_info</code> is <code>None</code> in this case</p>",
        "id": 194806042,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587477850
    },
    {
        "content": "<p>actually, why do we want this in the <code>Visitor</code>? won't this make the code to be evaluated several times? like one for each visitor that doesn't override <code>visit_body</code> or overrides it but calls <code>super_body</code>?</p>",
        "id": 194806245,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587477919
    },
    {
        "content": "<p>I think I've fixed the problem, testing but still ... won't be call this several times?</p>",
        "id": 194806560,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587478032
    },
    {
        "content": "<p>sec, let me check the PR diff</p>",
        "id": 194807095,
        "sender_full_name": "oli",
        "timestamp": 1587478244
    },
    {
        "content": "<p>all this does is cause <code>visit_constant</code> to be called, there's no evaluation happening there unless the visitor chooses to do so</p>",
        "id": 194807174,
        "sender_full_name": "oli",
        "timestamp": 1587478279
    },
    {
        "content": "<p>ohh you're right</p>",
        "id": 194807218,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587478302
    },
    {
        "content": "<p>ok, let's wait for the CI and ship it then :)</p>",
        "id": 194807245,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587478317
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 194807303,
        "sender_full_name": "oli",
        "timestamp": 1587478328
    },
    {
        "content": "<p>r=me with CI passing</p>",
        "id": 194807312,
        "sender_full_name": "oli",
        "timestamp": 1587478332
    },
    {
        "content": "<p>got a bunch of failures <a href=\"https://gist.github.com/spastorino/2c3fd74d12ab7a39d073328fbd3b58f3\" title=\"https://gist.github.com/spastorino/2c3fd74d12ab7a39d073328fbd3b58f3\">https://gist.github.com/spastorino/2c3fd74d12ab7a39d073328fbd3b58f3</a></p>",
        "id": 194809838,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587479419
    },
    {
        "content": "<p>hmm... while we could just bless them away, I think for now it would be best to check which <code>visit_constant</code> implementor causes this and make its <code>visit_body</code> function not invoke <code>super_body</code>, but just walk the blocks and nothing else</p>",
        "id": 194810279,
        "sender_full_name": "oli",
        "timestamp": 1587479629
    },
    {
        "content": "<p>makes sense</p>",
        "id": 194810592,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587479755
    },
    {
        "content": "<p>so as <code>visit_constant</code> implementors we have <a href=\"https://github.com/rust-lang/rust/blob/2db3c35b3f5bafd884a4e206916137892798f595/src/librustc_mir/util/pretty.rs#L375\" title=\"https://github.com/rust-lang/rust/blob/2db3c35b3f5bafd884a4e206916137892798f595/src/librustc_mir/util/pretty.rs#L375\">ExtraComments</a>, <a href=\"https://github.com/rust-lang/rust/blob/2db3c35b3f5bafd884a4e206916137892798f595/src/librustc_mir/transform/const_prop.rs#L820\" title=\"https://github.com/rust-lang/rust/blob/2db3c35b3f5bafd884a4e206916137892798f595/src/librustc_mir/transform/const_prop.rs#L820\">ConstPropagator</a> and <a href=\"https://github.com/rust-lang/rust/blob/2db3c35b3f5bafd884a4e206916137892798f595/src/librustc_mir/borrow_check/type_check/mod.rs#L286\" title=\"https://github.com/rust-lang/rust/blob/2db3c35b3f5bafd884a4e206916137892798f595/src/librustc_mir/borrow_check/type_check/mod.rs#L286\">TypeVerifier</a></p>",
        "id": 194815321,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587481475
    },
    {
        "content": "<p>gonna try to see which one causes this</p>",
        "id": 194815768,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587481652
    },
    {
        "content": "<p><code>ConstProp</code> is a likely candidate considering the additional diagnostics</p>",
        "id": 194816312,
        "sender_full_name": "oli",
        "timestamp": 1587481866
    },
    {
        "content": "<p>yeap</p>",
        "id": 194819562,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587483059
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Replace.20fragile.20erroneous.20const.20sys.20.2370820/near/194816312\" title=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Replace.20fragile.20erroneous.20const.20sys.20.2370820/near/194816312\">said</a>:</p>\n<blockquote>\n<p><code>ConstProp</code> is a likely candidate considering the additional diagnostics</p>\n</blockquote>\n<p>I'm not sure what exactly do we want visit_body to do there, the most obvious thing that will work is to not have those calls I've added but keep the rest of the behavior</p>",
        "id": 194819873,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1587483175
    }
]