[
    {
        "content": "<p>I'm trying to track down the ICE that lead me to add <a href=\"https://github.com/rust-lang/rust/pull/61532/commits/5be005df9876ff191cc9e193bc3fb5bb1f972424\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61532/commits/5be005df9876ff191cc9e193bc3fb5bb1f972424\">this change</a>.</p>\n<p>The minimal repro is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>which ICEs with:</p>\n<div class=\"codehilite\"><pre><span></span>thread &#39;rustc&#39; panicked at &#39;value should already be a valid const: EvalError { kind: type validation failed: encountered a pointer, but expected initialized plain (non-pointer) bytes, backtrace: None }&#39;, src/libcore/result.rs:999:5\nstack backtrace:\n   0: std::sys_common::backtrace::print\n   1: std::panicking::default_hook::{{closure}}\n   2: std::panicking::default_hook\n   3: rustc::util::common::panic_hook\n   4: std::panicking::rust_panic_with_hook\n   5: std::panicking::continue_panic_fmt\n   6: rust_begin_unwind\n   7: core::panicking::panic_fmt\n   8: core::result::unwrap_failed\n   9: &lt;rustc_mir::transform::const_prop::ConstPropagator as rustc::mir::visit::MutVisitor&gt;::visit_statement\n  10: rustc::mir::visit::MutVisitor::visit_body\n  11: &lt;rustc_mir::transform::const_prop::ConstProp as rustc_mir::transform::MirPass&gt;::run_pass\n</pre></div>\n\n\n<p>I noticed in the call <a href=\"https://github.com/rust-lang/rust/blob/daf1ed0e98e75c64c3b883fd845b37bfa42358de/src/librustc_mir/transform/const_prop.rs#L532\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/daf1ed0e98e75c64c3b883fd845b37bfa42358de/src/librustc_mir/transform/const_prop.rs#L532\">here</a> to <code>validate_operand()</code>, we pass <code>const_mode: true</code> but in <code>InterpretCtx::write_immediate()</code> we <a href=\"https://github.com/rust-lang/rust/blob/daf1ed0e98e75c64c3b883fd845b37bfa42358de/src/librustc_mir/interpret/place.rs#L660\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/daf1ed0e98e75c64c3b883fd845b37bfa42358de/src/librustc_mir/interpret/place.rs#L660\">pass false</a>.</p>\n<p>Should we be passing <code>true</code> or <code>false</code> in const prop? (If  I pass <code>false</code>, the ICE goes away and the program seems to compile fine.)</p>",
        "id": 167475035,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559822738
    },
    {
        "content": "<p>I think we should just turn the <code>expect</code> into <code>.ok()?</code></p>",
        "id": 167475182,
        "sender_full_name": "oli",
        "timestamp": 1559822848
    },
    {
        "content": "<p>That would work too</p>",
        "id": 167475202,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559822869
    },
    {
        "content": "<p>we can't really promise that const prop won't end up in some way emitting a constant that doesn't pass the validity checks</p>",
        "id": 167475220,
        "sender_full_name": "oli",
        "timestamp": 1559822881
    },
    {
        "content": "<p>while we could probably allow that, let's stay conservative</p>",
        "id": 167475273,
        "sender_full_name": "oli",
        "timestamp": 1559822893
    },
    {
        "content": "<p>Are we concerned that a Const that does't validate has already been put into <code>self.places[local]</code>?</p>",
        "id": 167475324,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559822936
    },
    {
        "content": "<p>Ie, we might try to use that value when we go to const prop again in a later statement</p>",
        "id": 167475352,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559822954
    },
    {
        "content": "<p>yes, and I believe it's perfectly alright to have them in <code>self.places</code>, just not in <code>mir::Body</code></p>",
        "id": 167475364,
        "sender_full_name": "oli",
        "timestamp": 1559822969
    },
    {
        "content": "<p>Ok</p>",
        "id": 167475367,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559822975
    },
    {
        "content": "<p>I'l change that first commit as you suggest. I'm going to leave the test in though since it was ICE-ing before</p>",
        "id": 167475457,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559823015
    },
    {
        "content": "<p>you could have <code>main as usize as fn()</code> and the first <code>_1 = main</code> is ok, the <code>_2 = _1 as usize</code> will not get changed and the <code>_3 = _2 as fn()</code> will get replaced by <code>_3 = some_constant_pointer_to_main</code></p>",
        "id": 167475478,
        "sender_full_name": "oli",
        "timestamp": 1559823042
    },
    {
        "content": "<p>yes, leave the test in, regression tests are important</p>",
        "id": 167475488,
        "sender_full_name": "oli",
        "timestamp": 1559823057
    },
    {
        "content": "<p>Ok, I'll do that</p>",
        "id": 167475506,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559823068
    },
    {
        "content": "<p>Do you think the performance measurement needs to be done before landing the PR?</p>",
        "id": 167475524,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559823092
    },
    {
        "content": "<p>you mean about my <code>measureme</code> comment?</p>",
        "id": 167475749,
        "sender_full_name": "oli",
        "timestamp": 1559823281
    },
    {
        "content": "<p>Yeah</p>",
        "id": 167475863,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559823392
    },
    {
        "content": "<p>hm. I don't really know if we have an official policy. You can open an issue with all info needed to repro (commit ids and link to the perf run) and assign it to me. I'll see if I can setup something to run these things conveniently (I really just want to be like <code>measureme_helper.sh commit_id_1 commit_id_2</code> in some folder with a <code>Cargo.toml</code> and get output</p>",
        "id": 167476340,
        "sender_full_name": "oli",
        "timestamp": 1559823804
    },
    {
        "content": "<p>There's a open issue on <code>measureme</code> to add a built-in diff mode. Maybe I just need to go do that first <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 167476442,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559823878
    },
    {
        "content": "<p>oh right, in this case, if we wait for the PR to get merged, we can download the rustcs via <code>rustup-toolchain-master</code></p>",
        "id": 167476603,
        "sender_full_name": "oli",
        "timestamp": 1559824040
    },
    {
        "content": "<p>I was thinking we'd have to build both versions</p>",
        "id": 167476617,
        "sender_full_name": "oli",
        "timestamp": 1559824065
    },
    {
        "content": "<p>Yeah, that's true</p>",
        "id": 167476707,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559824136
    },
    {
        "content": "<p>so I guess r=me with the cast bailout replaced by a validation bailout</p>",
        "id": 167476949,
        "sender_full_name": "oli",
        "timestamp": 1559824334
    },
    {
        "content": "<p>It looks like these changes cause some new const eval warnings to appear:</p>\n<div class=\"codehilite\"><pre><span></span>[01:00:06] ---- [ui] ui/consts/const-eval/promoted_errors.rs stdout ----\n[01:00:06] diff of stderr:\n[01:00:06]\n[01:00:06] 16 LL |     println!(&quot;{}&quot;, 1/(1-1));\n[01:00:06] 18\n[01:00:06] + warning: this expression will panic at runtime\n[01:00:06] +   --&gt; $DIR/promoted_errors.rs:9:20\n[01:00:06] +    |\n[01:00:06] +    |\n[01:00:06] + LL |     println!(&quot;{}&quot;, 1/(1-1));\n[01:00:06] +\n[01:00:06] 19 warning: attempt to divide by zero\n[01:00:06] 20   --&gt; $DIR/promoted_errors.rs:11:14\n[01:00:06] 21    |\n[01:00:06] 21    |\n[01:00:06]\n[01:00:06] 33    |\n[01:00:06] 34 LL |     println!(&quot;{}&quot;, 1/(false as u32));\n[01:00:06] +\n[01:00:06] + warning: this expression will panic at runtime\n[01:00:06] +   --&gt; $DIR/promoted_errors.rs:14:20\n[01:00:06] +    |\n[01:00:06] +    |\n[01:00:06] + LL |     println!(&quot;{}&quot;, 1/(false as u32));\n[01:00:06] 36\n</pre></div>\n\n\n<p>Is that ok or is that a backwards compatibility issue?</p>",
        "id": 167481976,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559828262
    },
    {
        "content": "<blockquote>\n<p>we can't really promise that const prop won't end up in some way emitting a constant that doesn't pass the validity checks</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  This sounds like an optimization taking valid code and making it into invalid code...? That sounds like it violates type preservation to me ==&gt; soundness hole.</p>",
        "id": 167488640,
        "sender_full_name": "centril",
        "timestamp": 1559832734
    },
    {
        "content": "<p>uhm... the validity checks are there exactly to prevent that ;)</p>",
        "id": 167488739,
        "sender_full_name": "oli",
        "timestamp": 1559832819
    },
    {
        "content": "<p>we don't prop if the constant would be invalid</p>",
        "id": 167488762,
        "sender_full_name": "oli",
        "timestamp": 1559832837
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> so hmm; you take known-to-be-valid code and const prop on it and that may yield invalid code?</p>",
        "id": 167488866,
        "sender_full_name": "centril",
        "timestamp": 1559832888
    },
    {
        "content": "<p>that is later rejected...?</p>",
        "id": 167488871,
        "sender_full_name": "centril",
        "timestamp": 1559832893
    },
    {
        "content": "<p>heh well. <code>main as usize</code> is const-invalid</p>",
        "id": 167488897,
        "sender_full_name": "oli",
        "timestamp": 1559832914
    },
    {
        "content": "<p>so we don't const prop that</p>",
        "id": 167488911,
        "sender_full_name": "oli",
        "timestamp": 1559832927
    },
    {
        "content": "<p>Idk if that answers my question =P</p>",
        "id": 167489047,
        "sender_full_name": "centril",
        "timestamp": 1559832995
    },
    {
        "content": "<p>well. we prop known-to-be-valid code and durin const prop realize it's not const-valid, so we throw it away</p>",
        "id": 167489103,
        "sender_full_name": "oli",
        "timestamp": 1559833036
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  ah, but you don't cause a compile time error?</p>",
        "id": 167489543,
        "sender_full_name": "centril",
        "timestamp": 1559833271
    },
    {
        "content": "<p>no</p>",
        "id": 167489555,
        "sender_full_name": "oli",
        "timestamp": 1559833278
    },
    {
        "content": "<p>we just silently do nothing</p>",
        "id": 167489565,
        "sender_full_name": "oli",
        "timestamp": 1559833284
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>  so not a soundness issue</p>",
        "id": 167489574,
        "sender_full_name": "centril",
        "timestamp": 1559833292
    },
    {
        "content": "<p>optimizations can be opportunistic like that :D</p>",
        "id": 167489584,
        "sender_full_name": "oli",
        "timestamp": 1559833298
    },
    {
        "content": "<p>we may emit warnings if we encounter wrong code though</p>",
        "id": 167489603,
        "sender_full_name": "oli",
        "timestamp": 1559833315
    },
    {
        "content": "<p>Such as those <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 167489701,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559833363
    },
    {
        "content": "<p>So I guess new warnings are ok then?</p>",
        "id": 167489847,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559833451
    },
    {
        "content": "<p>Do we need to worry about people with <code>#[deny(warnings)]</code>?</p>",
        "id": 167489913,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559833508
    },
    {
        "content": "<p>nope</p>",
        "id": 167490052,
        "sender_full_name": "oli",
        "timestamp": 1559833576
    },
    {
        "content": "<p>we can have as many new warnings as we want</p>",
        "id": 167490063,
        "sender_full_name": "oli",
        "timestamp": 1559833585
    },
    {
        "content": "<p>I even have an accepted RFC for that</p>",
        "id": 167490070,
        "sender_full_name": "oli",
        "timestamp": 1559833593
    },
    {
        "content": "<p>1229</p>",
        "id": 167490077,
        "sender_full_name": "oli",
        "timestamp": 1559833598
    },
    {
        "content": "<p>Ok. I'll bless the tests tonight when I get home and then <code>r=you</code>. I already made the cast -&gt; validation ballout and test change we discussed.</p>",
        "id": 167490171,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1559833680
    }
]