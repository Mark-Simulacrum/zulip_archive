[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> --</p>\n<p>So <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> and I were talking about the \"Place 2.0\" work. Now that the interning of projections is basically done, we were talking about what further simplifications we could do. One thought that <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> mentioned, and which I think probably makes sense, is to remove \"statics\" from <code>PlaceBase</code>, so that all places begin with a local variable. This not only simplifies the definition of a \"place\", it also means we can reduce them to be (a) Copy and (b) 128 bits. <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n<p>We wrote up a hackmd document containing a <a href=\"https://hackmd.io/qH-ptngCSdyDInPq5kwFmA?view\" target=\"_blank\" title=\"https://hackmd.io/qH-ptngCSdyDInPq5kwFmA?view\">proposal for how to go about this</a> -- please take a look and see what you think! It includes some rough details of how this would interact with the borrow checker, unsafe code, etc, as well as some possible implementation steps.</p>",
        "id": 178521321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571446053
    },
    {
        "content": "<p>Ah, that's very interesting. I am not sure what exactly the interactions with Stacked Borrows will be but I don't feel the document gives them justice. :D but off the top of my head I think this is a good change, yes. This actually fixes some UB I was worried about with statics and Stacked Borrows :D</p>",
        "id": 178538605,
        "sender_full_name": "RalfJ",
        "timestamp": 1571478792
    },
    {
        "content": "<p>so in the light of the <code>static mut</code> discussion, is it correct that <code>RefStatic</code> would never be used for a mutable static?</p>",
        "id": 178538610,
        "sender_full_name": "RalfJ",
        "timestamp": 1571478825
    },
    {
        "content": "<p>that makes me wonder if it wouldn't be easier to also not have it for normal <code>static</code></p>",
        "id": 178538651,
        "sender_full_name": "RalfJ",
        "timestamp": 1571478848
    },
    {
        "content": "<p>I dislike the duplication of <code>RefStatic</code> and <code>RawStatic</code>. Maybe we could have a <code>PlaceOrStatic</code> type that we use for these specific operations?</p>",
        "id": 178538655,
        "sender_full_name": "oli",
        "timestamp": 1571478881
    },
    {
        "content": "<p>we could just have only <code>RawStatic</code></p>",
        "id": 178538659,
        "sender_full_name": "RalfJ",
        "timestamp": 1571478898
    },
    {
        "content": "<p>and desugar <code>&amp;mut S</code> to <code>&amp;mut *RawStatic(S)</code></p>",
        "id": 178538668,
        "sender_full_name": "RalfJ",
        "timestamp": 1571478911
    },
    {
        "content": "<p>here are some incoherent Stacked Borrows thoughts (could someone add that to the document? I dont seem to have edit permissions):<br>\nThis moves us towards a model where the static itself does <em>not</em> have a \"tag\" at all as it isn't a place. There's no \"unique root identity\" at the bottom of the borrow stack of a static. That's in strong contrast to locals where there's a unique tag at the bottom. This unique tag is what makes <code>local = 5</code> kill all other pointers to that local. I thought the same should happen for statics and actually already did some implementation work along those lines in Miri (making sure we pick a consistent tag for the <code>static</code> place), but this proposal indicates to me that we maybe don't want a base identity for statics, and that <code>STATIC = 5</code> should <em>not</em> kill all other pointers (including raw pointers)!</p>\n<p>So, this is illegal:</p>\n<div class=\"codehilite\"><pre><span></span>let mut x: u32 = 0;\nlet ptr = &amp;raw mut x;\nx = 2;\nlet _val = *ptr; // UB\n</pre></div>\n\n\n<p>But this is allowed:</p>\n<div class=\"codehilite\"><pre><span></span>static mut X: u32 = 0;\nlet ptr = &amp;raw mut x;\nX = 2;\nlet _val = *ptr; // all is good\n</pre></div>\n\n\n<p>I'd be happy to remove the code I wrote to make statics more like locals, it's somewhat annoyingly complicated (and other people ran into that code like a brick wall when trying to implement shims for an extern static in Miri).</p>\n<p>So, summary: The change seems fine to me. It <em>does</em> have some effects on Stacked Borrows, maybe more than you expected, but I think these are good effects. Basically it we could take this to mean that there is an inconsistency between <code>static</code> and locals <em>both</em> in Stacked Borrows and the rustc internal data structure, and it's nice to at least be consistent in these inconsistencies :D</p>",
        "id": 178538920,
        "sender_full_name": "RalfJ",
        "timestamp": 1571479415
    },
    {
        "content": "<p>so you'd want to treat statics more like leaked global allocations?</p>",
        "id": 178541308,
        "sender_full_name": "eddyb",
        "timestamp": 1571483535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I think we can do this without any MIR btw :)</p>",
        "id": 178541336,
        "sender_full_name": "eddyb",
        "timestamp": 1571483597
    },
    {
        "content": "<p>AFAIK we can already represent a reference/raw pointer to a static in a <code>ty::Const</code> (I hope <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> or <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> confirm this)</p>",
        "id": 178541388,
        "sender_full_name": "eddyb",
        "timestamp": 1571483653
    },
    {
        "content": "<p>omgz</p>",
        "id": 178541391,
        "sender_full_name": "oli",
        "timestamp": 1571483664
    },
    {
        "content": "<p>yes we can</p>",
        "id": 178541397,
        "sender_full_name": "oli",
        "timestamp": 1571483673
    },
    {
        "content": "<p>I forget when I first considered this and I'm sorry I didn't write it down before</p>",
        "id": 178541401,
        "sender_full_name": "eddyb",
        "timestamp": 1571483686
    },
    {
        "content": "<p>this is similar to not having an <code>Rvalue</code> for literals</p>",
        "id": 178541409,
        "sender_full_name": "eddyb",
        "timestamp": 1571483703
    },
    {
        "content": "<p>hmm... how does that fare with generic statics though</p>",
        "id": 178541476,
        "sender_full_name": "oli",
        "timestamp": 1571483775
    },
    {
        "content": "<p>in terms of stacked borrows, I believe this has the same effect as using <code>RawStatic</code> (except without needing a MIR reborrow if you want a reference)</p>",
        "id": 178541478,
        "sender_full_name": "eddyb",
        "timestamp": 1571483779
    },
    {
        "content": "<p>generic statics are impossible</p>",
        "id": 178541484,
        "sender_full_name": "eddyb",
        "timestamp": 1571483786
    },
    {
        "content": "<p>promoteds then</p>",
        "id": 178541486,
        "sender_full_name": "oli",
        "timestamp": 1571483792
    },
    {
        "content": "<p>same thing</p>",
        "id": 178541488,
        "sender_full_name": "oli",
        "timestamp": 1571483795
    },
    {
        "content": "<p>ooooh I forgot we made those use the same infrastructure ugh</p>",
        "id": 178541497,
        "sender_full_name": "eddyb",
        "timestamp": 1571483821
    },
    {
        "content": "<p>ah</p>",
        "id": 178541500,
        "sender_full_name": "oli",
        "timestamp": 1571483825
    },
    {
        "content": "<p>no we can fix that</p>",
        "id": 178541504,
        "sender_full_name": "oli",
        "timestamp": 1571483828
    },
    {
        "content": "<p>we just refer to them by value</p>",
        "id": 178541506,
        "sender_full_name": "oli",
        "timestamp": 1571483833
    },
    {
        "content": "<p>like the constant represents the promoted</p>",
        "id": 178541512,
        "sender_full_name": "oli",
        "timestamp": 1571483852
    },
    {
        "content": "<p>how do references to <code>static</code>s work in <code>ty::Const</code> today?</p>",
        "id": 178541562,
        "sender_full_name": "eddyb",
        "timestamp": 1571483890
    },
    {
        "content": "<p>is the <code>Instance</code>(-like) information in the <code>ty::Const</code> or behind some sort of ID?</p>",
        "id": 178541570,
        "sender_full_name": "eddyb",
        "timestamp": 1571483914
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> so you'd want to revert promoteds back to not being places?</p>",
        "id": 178541582,
        "sender_full_name": "eddyb",
        "timestamp": 1571483958
    },
    {
        "content": "<p>I think we should do that first hmpf</p>",
        "id": 178541584,
        "sender_full_name": "eddyb",
        "timestamp": 1571483963
    },
    {
        "content": "<p>the only case where we rely on the place-like nature is the <code>&amp;promoted[runtime]</code> replacement which can be <code>&amp;(*promoted)[runtime]</code>, I think?</p>",
        "id": 178541642,
        "sender_full_name": "eddyb",
        "timestamp": 1571484044
    },
    {
        "content": "<p>I guess we'd need to agree where we stick the <code>Promoted</code> back into</p>",
        "id": 178541674,
        "sender_full_name": "eddyb",
        "timestamp": 1571484095
    },
    {
        "content": "<p>unevaluated <code>ty::Const</code> perhaps?</p>",
        "id": 178541721,
        "sender_full_name": "eddyb",
        "timestamp": 1571484132
    },
    {
        "content": "<p>yes</p>",
        "id": 178543666,
        "sender_full_name": "oli",
        "timestamp": 1571487426
    },
    {
        "content": "<blockquote>\n<p>generic statics are impossible</p>\n</blockquote>\n<p>What does that mean? Once we kill dylibs we could have generic statics, no?</p>",
        "id": 178549408,
        "sender_full_name": "centril",
        "timestamp": 1571496525
    },
    {
        "content": "<p>impossible right now</p>",
        "id": 178549418,
        "sender_full_name": "oli",
        "timestamp": 1571496557
    },
    {
        "content": "<p>that might not remain the case</p>",
        "id": 178549420,
        "sender_full_name": "centril",
        "timestamp": 1571496571
    },
    {
        "content": "<p>it will still be doable with this scheme</p>",
        "id": 178549479,
        "sender_full_name": "oli",
        "timestamp": 1571496616
    },
    {
        "content": "<p>actually it will be trivial</p>",
        "id": 178549485,
        "sender_full_name": "oli",
        "timestamp": 1571496645
    },
    {
        "content": "<p>much better than how it could be done right now</p>",
        "id": 178549490,
        "sender_full_name": "oli",
        "timestamp": 1571496665
    },
    {
        "content": "<p>cool</p>",
        "id": 178549553,
        "sender_full_name": "centril",
        "timestamp": 1571496749
    },
    {
        "content": "<p>I'm not sure you need to kill dylibs as much as you want some strong semantics from linkers</p>",
        "id": 178595365,
        "sender_full_name": "eddyb",
        "timestamp": 1571581518
    },
    {
        "content": "<p>to deduplicate based on... symbol name? at least I think that's correct</p>",
        "id": 178595367,
        "sender_full_name": "eddyb",
        "timestamp": 1571581540
    },
    {
        "content": "<p>at least with v0 mangling we were forced to encode the typesystem into symbol names</p>",
        "id": 178595424,
        "sender_full_name": "eddyb",
        "timestamp": 1571581627
    },
    {
        "content": "<p>I've always felt like generic/associated statics are impossible, given that nobody could give me an implementation strategy but I may have overlooked preexisting features</p>",
        "id": 178595428,
        "sender_full_name": "eddyb",
        "timestamp": 1571581678
    },
    {
        "content": "<p>there's ODR stuff for... C++ I think? I wonder if that works</p>",
        "id": 178595470,
        "sender_full_name": "eddyb",
        "timestamp": 1571581691
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>, I was talking to both of you in private about this</p>",
        "id": 178852834,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1571837112
    },
    {
        "content": "<p>I have a couple of really minor next things to do related to mir 2.0</p>",
        "id": 178852856,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1571837125
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> told me that they are working on this specifically because there is some mess around</p>",
        "id": 178852908,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1571837157
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> can you elaborate that a bit more for <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ?</p>",
        "id": 178852968,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1571837176
    },
    {
        "content": "<p>and then, question for you both, do you guys see something else that I can go after?</p>",
        "id": 178852989,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1571837196
    },
    {
        "content": "<blockquote>\n<p>generic statics are impossible</p>\n</blockquote>\n<p>this is just an arbitrary limitation, I don't think we should bank on it</p>",
        "id": 178853088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571837276
    },
    {
        "content": "<p>(ah, ok, catching up)</p>",
        "id": 178853161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571837309
    },
    {
        "content": "<blockquote>\n<p>I've always felt like generic/associated statics are impossible, given that nobody could give me an implementation strategy but I may have overlooked preexisting features</p>\n</blockquote>\n<p>(ok, I agree, not <em>entirely</em> arbitrary)</p>",
        "id": 178853220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571837352
    },
    {
        "content": "<blockquote>\n<p>I dislike the duplication of <code>RefStatic</code> and <code>RawStatic</code>. Maybe we could have a <code>PlaceOrStatic</code> type that we use for these specific operations?</p>\n</blockquote>\n<p>so I guess I don't fully understand the plan you have in mind -- it sounds like you are planning to embed the <code>&amp;Foo</code> or <code>*mut Foo</code> that references a static into a constant?</p>\n<p>That said, let me explain why I added both <code>RefStatic</code> and <code>RawStatic</code> -- I agree you would only need the raw pointer version, but I was trying to avoid having <code>&amp;X.foo</code> insert a \"unsafe\" (but blessed) operation. Here by unsafe I mean: something that the unsafe checker would flag. But I argee there's no fundamental reason to do that.</p>",
        "id": 178853426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571837485
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I'll add that to the doc -- I agree that we probably don't want a unique tag for statics. To me at least they feel \"different\"in that they are globally accessible.</p>",
        "id": 178854540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571838199
    },
    {
        "content": "<p>In any case, it seems to me <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> that regardless of what happens with <code>RawStatic</code>, <code>RefStatic</code>, etc, the first implementation step that I described in the document remains relevant:</p>\n<ul>\n<li>First don't change the definition of place at all. Instead, just change place <em>lowering</em> so that for an expression like <code>x = &amp;S.foo</code> we produce the MIR:<br>\n    * <code>TMP = &amp;S</code> where <code>TMP: &amp;T</code><br>\n    * <code>x = &amp;(*TMP).goo</code></li>\n</ul>",
        "id": 178854953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571838492
    },
    {
        "content": "<p>ok, can try to do that</p>",
        "id": 178855003,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1571838533
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> can you perhaps update <a href=\"https://hackmd.io/qH-ptngCSdyDInPq5kwFmA?edit\" target=\"_blank\" title=\"https://hackmd.io/qH-ptngCSdyDInPq5kwFmA?edit\">the proposal hackmd</a> -- I've saved the RefStatic/RawStatic version as a named revision in hackmd, so feel free to edit away</p>",
        "id": 178855155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571838607
    },
    {
        "content": "<p>I have a branch that passes all compile-pass and run-pass tests since 5 hours ago</p>",
        "id": 178862096,
        "sender_full_name": "oli",
        "timestamp": 1571842760
    },
    {
        "content": "<p>I did not add <code>RawStatic</code> or <code>RefStatic</code>, but instead did the lowering of treating any use of <code>STATIC</code> like <code>*&amp;STATIC</code> where the <code>&amp;STATIC</code> is a constant</p>",
        "id": 178862210,
        "sender_full_name": "oli",
        "timestamp": 1571842806
    },
    {
        "content": "<p>Here's the branch: <a href=\"https://github.com/oli-obk/rust/pull/new/static_unification_theory_teil_eins\" target=\"_blank\" title=\"https://github.com/oli-obk/rust/pull/new/static_unification_theory_teil_eins\">https://github.com/oli-obk/rust/pull/new/static_unification_theory_teil_eins</a></p>",
        "id": 178866446,
        "sender_full_name": "oli",
        "timestamp": 1571845210
    },
    {
        "content": "<p>To reintroduce all the checks around statics we've had before, I'll need to check all constants instead of the static places</p>",
        "id": 178866582,
        "sender_full_name": "oli",
        "timestamp": 1571845282
    },
    {
        "content": "<p>Skimming the branch now but I feel like I'm somehow missing something</p>",
        "id": 178964417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931336
    },
    {
        "content": "<p>I guess the idea is that we when you have <code>&amp;S</code> in the source code, you get <code>X = Constant(&amp;S)</code> now?</p>",
        "id": 178964451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931354
    },
    {
        "content": "<p>and presumably something like <code>let x = &amp;S.foo</code> becomes </p>\n<div class=\"codehilite\"><pre><span></span>TMP = Constant(&amp;S)\nX = &amp;(*TMP).foo\n</pre></div>\n\n\n<p>where <code>TMP: &amp;typeof(S)</code></p>",
        "id": 178964543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931393
    },
    {
        "content": "<p>something like that, <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>?</p>",
        "id": 178964564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931407
    },
    {
        "content": "<p>(This does raise the question of <code>#[thread_local]</code> statics and the current errors that we give there, I see you removed that logic)</p>",
        "id": 178964602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931434
    },
    {
        "content": "<p>(But honestly that logic is a bit weird anyway)</p>",
        "id": 178964643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931457
    },
    {
        "content": "<p>yea that's how it's implemented right now, and the logic is only removed in the <code>WIP</code> commit</p>",
        "id": 178964686,
        "sender_full_name": "oli",
        "timestamp": 1571931477
    },
    {
        "content": "<p>Currently in your branch I see that there is still <code>Promoted</code> as part of a place</p>",
        "id": 178964737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931485
    },
    {
        "content": "<p>that commit should probably be called <code>TODO</code></p>",
        "id": 178964748,
        "sender_full_name": "oli",
        "timestamp": 1571931487
    },
    {
        "content": "<p>is the plan to remove that?</p>",
        "id": 178964753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931490
    },
    {
        "content": "<p>yes, promoteds will get reverted back to constants, too</p>",
        "id": 178964769,
        "sender_full_name": "oli",
        "timestamp": 1571931497
    },
    {
        "content": "<blockquote>\n<p>yea that's how it's implemented right now, and the logic is only removed in the <code>WIP</code> commit</p>\n</blockquote>\n<p>I don't know where it will be added back in</p>",
        "id": 178964781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931503
    },
    {
        "content": "<p>under this approach, from the borrow checker's point of view, it seems like borrows of statics are \"invisible\"</p>",
        "id": 178964816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931524
    },
    {
        "content": "<p>they're part of a constant, they just always existed</p>",
        "id": 178964851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931543
    },
    {
        "content": "<p>oh cool that you jumped in Niko, I'm gonna take over <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>'s branch and continue</p>",
        "id": 178964886,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1571931560
    },
    {
        "content": "<p>(that seems... ok to me, but it doesn't leave room for that particular thread-local logic)</p>",
        "id": 178964888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931563
    },
    {
        "content": "<p>so being all in the same page, seems good :)</p>",
        "id": 178964894,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1571931567
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/commit/4e51411f71c0c8a2c04ee9031bd3da28bc6e515b\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/4e51411f71c0c8a2c04ee9031bd3da28bc6e515b\">https://github.com/rust-lang/rust/commit/4e51411f71c0c8a2c04ee9031bd3da28bc6e515b</a> is how I did it for const qualif</p>",
        "id": 178964895,
        "sender_full_name": "oli",
        "timestamp": 1571931568
    },
    {
        "content": "<p>I think this can be repeated in most places where I removed the static-place logic</p>",
        "id": 178965021,
        "sender_full_name": "oli",
        "timestamp": 1571931614
    },
    {
        "content": "<p>I was afraid you were going to show me something like this :)</p>",
        "id": 178965043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931625
    },
    {
        "content": "<p>hehehe</p>",
        "id": 178965046,
        "sender_full_name": "oli",
        "timestamp": 1571931628
    },
    {
        "content": "<p>it's mainly diagnostics</p>",
        "id": 178965057,
        "sender_full_name": "oli",
        "timestamp": 1571931634
    },
    {
        "content": "<p>I think everything works</p>",
        "id": 178965064,
        "sender_full_name": "oli",
        "timestamp": 1571931638
    },
    {
        "content": "<p>I think what your'e doing is sort of special-casing the case of \"a constant that is <code>&amp;S</code> for a static\"</p>",
        "id": 178965066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931639
    },
    {
        "content": "<p>except that some diagnostics have regressed badly</p>",
        "id": 178965075,
        "sender_full_name": "oli",
        "timestamp": 1571931645
    },
    {
        "content": "<blockquote>\n<p>it's mainly diagnostics</p>\n</blockquote>\n<p>it's not</p>",
        "id": 178965076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931646
    },
    {
        "content": "<p>I mean, not for this borrow-checker case?</p>",
        "id": 178965085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931653
    },
    {
        "content": "<p>Like, it determines <em>if</em> we give an error or not</p>",
        "id": 178965090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931657
    },
    {
        "content": "<p>right, for the thread local check it won't work by default I guess</p>",
        "id": 178965120,
        "sender_full_name": "oli",
        "timestamp": 1571931680
    },
    {
        "content": "<p>because you just have a reference</p>",
        "id": 178965125,
        "sender_full_name": "oli",
        "timestamp": 1571931684
    },
    {
        "content": "<p>that said, I do like this approach :)</p>",
        "id": 178965132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931690
    },
    {
        "content": "<p>I guess we could do some hacky thing around the thread-local check, or just .. not do it</p>",
        "id": 178965166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931715
    },
    {
        "content": "<p>loads of errors are now \"can't do X with immutable reference\" instead of \"can't do X with immutable static\"</p>",
        "id": 178965217,
        "sender_full_name": "oli",
        "timestamp": 1571931725
    },
    {
        "content": "<p>yeah, no doubt</p>",
        "id": 178965231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931733
    },
    {
        "content": "<p>pardon my ignorance but what's the thread-local check you're talking about?</p>",
        "id": 178965266,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1571931753
    },
    {
        "content": "<p>for that kind of thing I think maybe the approach you're using is ok, or else we should maybe just find a \"middle wording\"</p>",
        "id": 178965273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931756
    },
    {
        "content": "<p>that's why I did the const qualif change, to improve diagnostics again</p>",
        "id": 178965275,
        "sender_full_name": "oli",
        "timestamp": 1571931758
    },
    {
        "content": "<p>I don't love our wording anyway tbh</p>",
        "id": 178965280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931762
    },
    {
        "content": "<p>I've always though we give far too many details</p>",
        "id": 178965284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931766
    },
    {
        "content": "<p>that are often only semi-relevant</p>",
        "id": 178965302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931774
    },
    {
        "content": "<p>besides the term \"immutable reference\" is in my view just wrong :P</p>",
        "id": 178965312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931780
    },
    {
        "content": "<p>(but obviously this is a separate concern...)</p>",
        "id": 178965336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931795
    },
    {
        "content": "<p>yea, any ideas on how to unify this and use less specialized diagnostics are very welcome :D</p>",
        "id": 178965377,
        "sender_full_name": "oli",
        "timestamp": 1571931818
    },
    {
        "content": "<blockquote>\n<p>pardon my ignorance but what's the thread-local check you're talking about?</p>\n</blockquote>\n<p>this compiles </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">S</span>: <span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"n\">S</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 178965379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931819
    },
    {
        "content": "<p>this does not</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[thread_local]</span><span class=\"w\"></span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">S</span>: <span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"n\">S</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 178965399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931833
    },
    {
        "content": "<p><code>#[thread_local]</code> is an unstable feature in any case</p>",
        "id": 178965448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931846
    },
    {
        "content": "<p>and not one with a clear path to stabilization, never RFC'd, etc</p>",
        "id": 178965465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931854
    },
    {
        "content": "<p>heh, I have an idea</p>",
        "id": 178965470,
        "sender_full_name": "oli",
        "timestamp": 1571931856
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 178965476,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1571931858
    },
    {
        "content": "<p>for thread locals</p>",
        "id": 178965479,
        "sender_full_name": "oli",
        "timestamp": 1571931859
    },
    {
        "content": "<p>the reason the second one does not compile is because maybe <code>foo</code> is the \"main\" of a thread, I think</p>",
        "id": 178965512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931878
    },
    {
        "content": "<p>the code that creates the constant (in the first commit), could detect that it's a thread local and use a function local lifetime for the reference</p>",
        "id": 178965524,
        "sender_full_name": "oli",
        "timestamp": 1571931888
    },
    {
        "content": "<p>that seems weird too -- a constant with a lifetime that is local to the fn?</p>",
        "id": 178965568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931910
    },
    {
        "content": "<p>also, that's not even meaningful</p>",
        "id": 178965571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931913
    },
    {
        "content": "<p>i.e., we literally erase all the lifetimes at the start of NLL</p>",
        "id": 178965595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931922
    },
    {
        "content": "<p>/me does not know a thing about borrowck</p>",
        "id": 178965599,
        "sender_full_name": "oli",
        "timestamp": 1571931924
    },
    {
        "content": "<p>and recompute them from scratch</p>",
        "id": 178965604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931926
    },
    {
        "content": "<p>oh <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 178965609,
        "sender_full_name": "oli",
        "timestamp": 1571931930
    },
    {
        "content": "<p>in any case I agree we could hack <em>something</em> up, but it feels...like part of the elegance of this approach comes from <em>not</em> needing a special case :)</p>",
        "id": 178965646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931956
    },
    {
        "content": "<p>I think we should ignore that for now</p>",
        "id": 178965755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571932002
    },
    {
        "content": "<p>and continue with your approach</p>",
        "id": 178965757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571932005
    },
    {
        "content": "<p>once everything else seems good, we can worry about <code>#[thread_local]</code> and the best way to re-encode that</p>",
        "id": 178965787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571932019
    },
    {
        "content": "<p>so you mean if we changed the wording in  const qualif to not refer to references or statics, we could remove all the special casing for statics and just report \"cannot mutate immutable value\" or sth</p>",
        "id": 178965803,
        "sender_full_name": "oli",
        "timestamp": 1571932025
    },
    {
        "content": "<p>right</p>",
        "id": 178965827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571932040
    },
    {
        "content": "<p>yea, for now I'd rather make the PR</p>",
        "id": 178965828,
        "sender_full_name": "oli",
        "timestamp": 1571932040
    },
    {
        "content": "<p>not change behaviour</p>",
        "id": 178965833,
        "sender_full_name": "oli",
        "timestamp": 1571932044
    },
    {
        "content": "<p>and then have follow-up PRs</p>",
        "id": 178965851,
        "sender_full_name": "oli",
        "timestamp": 1571932053
    },
    {
        "content": "<p>(maybe once promoteds are also not places anymore)</p>",
        "id": 178965875,
        "sender_full_name": "oli",
        "timestamp": 1571932062
    },
    {
        "content": "<p>yes, it's just kind of annoying if we have to add a bunch of logic and then we wind up removing it. but it seems better to not bring together  changing the error message <em>and</em> changing MIR</p>",
        "id": 178965914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571932082
    },
    {
        "content": "<p>I don't honestly remember what const-qualif even does</p>",
        "id": 178965968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571932099
    },
    {
        "content": "<p>I guess it gives errors for doing things in constants you should not do?</p>",
        "id": 178965990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571932115
    },
    {
        "content": "<p>ensure that we don't have <code>Cell</code> constants behind references</p>",
        "id": 178965996,
        "sender_full_name": "oli",
        "timestamp": 1571932119
    },
    {
        "content": "<p>(I don't have a strong opinion about <em>its</em> error messages)</p>",
        "id": 178966005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571932122
    },
    {
        "content": "<p>and fancy variants of that</p>",
        "id": 178966009,
        "sender_full_name": "oli",
        "timestamp": 1571932125
    },
    {
        "content": "<p>yeah ok</p>",
        "id": 178966020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571932129
    },
    {
        "content": "<p>that's sort of what I imagined</p>",
        "id": 178966037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571932136
    },
    {
        "content": "<p>oh, const qualif does need the static check</p>",
        "id": 178966078,
        "sender_full_name": "oli",
        "timestamp": 1571932161
    },
    {
        "content": "<p>because it also ensures that constants can't refer to statics</p>",
        "id": 178966089,
        "sender_full_name": "oli",
        "timestamp": 1571932168
    },
    {
        "content": "<p>ps I think the changes to const qualif might be fine -- I'm not as familiar with the code there --</p>",
        "id": 178966416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571932324
    },
    {
        "content": "<p>one thing I do wonder though</p>",
        "id": 178966430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571932331
    },
    {
        "content": "<p>if the user writes</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">FOO</span>: <span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">BAR</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">u32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">FOO</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 178966469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571932347
    },
    {
        "content": "<p>presumably const-qualif can see the difference between <code>BAR</code> and the new constants we are introducing?</p>",
        "id": 178966511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571932370
    },
    {
        "content": "<p>yes</p>",
        "id": 178966943,
        "sender_full_name": "oli",
        "timestamp": 1571932617
    }
]