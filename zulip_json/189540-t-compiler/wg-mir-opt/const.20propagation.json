[
    {
        "content": "<p>Are there any other tasks that could be worked on while <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> works on the places refactoring? I'd love to get involved <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 164168312,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556197851
    },
    {
        "content": "<p>One thing we have is a const propagator pass that does not propagate constants XD</p>",
        "id": 164168582,
        "sender_full_name": "oli",
        "timestamp": 1556198088
    },
    {
        "content": "<p>there are a few <code>Place</code> related changes, but they conflict with the current place work, so I'd rather delay that</p>",
        "id": 164168701,
        "sender_full_name": "oli",
        "timestamp": 1556198168
    },
    {
        "content": "<p>We want to have stable identifiers for e.g. basic blocks (<a href=\"https://paper.dropbox.com/doc/Topic-MIR-2.0-and-MIR-Optimizations--Ab7LrtY0ql6SAFF3bvSTlMgWAQ-BwHR7kOhxDwL6vuAUoSTQ\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Topic-MIR-2.0-and-MIR-Optimizations--Ab7LrtY0ql6SAFF3bvSTlMgWAQ-BwHR7kOhxDwL6vuAUoSTQ\">https://paper.dropbox.com/doc/Topic-MIR-2.0-and-MIR-Optimizations--Ab7LrtY0ql6SAFF3bvSTlMgWAQ-BwHR7kOhxDwL6vuAUoSTQ</a>) so that removing a block does not invalidate the ids</p>",
        "id": 164168778,
        "sender_full_name": "oli",
        "timestamp": 1556198267
    },
    {
        "content": "<p>according to the all hands notes we should be comparing notes with cranelift</p>",
        "id": 164168855,
        "sender_full_name": "oli",
        "timestamp": 1556198307
    },
    {
        "content": "<p>also we'll want some sort of transaction-like mir passes so we can do e.g. inlining, see if that improved anything, if not: just drop the inlined code and keep the old</p>",
        "id": 164169160,
        "sender_full_name": "oli",
        "timestamp": 1556198559
    },
    {
        "content": "<p>one funky idea is to make <code>MIR</code> independent of rustc, not sure if we can do that in small steps</p>",
        "id": 164169241,
        "sender_full_name": "oli",
        "timestamp": 1556198619
    },
    {
        "content": "<p>but we can start by pulling all types that do not depend on general compiler types from <code>rustc::mir</code> to <code>rustc_target</code> or similar</p>",
        "id": 164169371,
        "sender_full_name": "oli",
        "timestamp": 1556198707
    },
    {
        "content": "<blockquote>\n<p>One thing we have is a const propagator pass that does not propagate constants XD</p>\n</blockquote>\n<p>This is interesting. Is there an issue with more details?</p>",
        "id": 164169379,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556198713
    },
    {
        "content": "<p>lol I just found <a href=\"https://github.com/rust-lang/rust/issues/28238\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/28238\">https://github.com/rust-lang/rust/issues/28238</a></p>",
        "id": 164169541,
        "sender_full_name": "oli",
        "timestamp": 1556198862
    },
    {
        "content": "<p>I guess we can close that</p>",
        "id": 164169548,
        "sender_full_name": "oli",
        "timestamp": 1556198868
    },
    {
        "content": "<p>hmm.. maybe need to see if my two issues have been fixed</p>",
        "id": 164169632,
        "sender_full_name": "oli",
        "timestamp": 1556198934
    },
    {
        "content": "<p>so.. unfortunately I think we have no additional info, but I think it shouldn't be too hard to make the const propagator replace <code>Assign</code> rhs with the evaluated value if one has been found (instead of just carrying the values in a shadow datastructure and lint about const eval failures)</p>",
        "id": 164169771,
        "sender_full_name": "oli",
        "timestamp": 1556199028
    },
    {
        "content": "<p>Ok. I have a vague idea of what const propagation is supposed to do but I haven't looked at the code yet. I'll do that soon and come back to you if I have any questions.</p>",
        "id": 164170065,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556199265
    },
    {
        "content": "<p>Ok. I've read through the <code>const_prop</code> module and I think I've got a handle on how it currently works.</p>",
        "id": 164392958,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556465474
    },
    {
        "content": "<p>I see there's a lot of TODO and FIXME comments that will probably have to be addressed soon</p>",
        "id": 164392962,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556465498
    },
    {
        "content": "<p>Am I correct that in order to get this to actually const prop instead of just lint, I need to add some code <a href=\"https://github.com/rust-lang/rust/blob/3991285f55a4b7cd92b7ffcdc396a3023076f5cb/src/librustc_mir/transform/const_prop.rs#L566-L569\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/3991285f55a4b7cd92b7ffcdc396a3023076f5cb/src/librustc_mir/transform/const_prop.rs#L566-L569\">here-ish</a> to mutate <code>rval</code> to be the <code>value</code> we have?</p>",
        "id": 164393038,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556465616
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 164393042,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556465635
    },
    {
        "content": "<p>yea, you'd need to turn it into a <code>MutVisitor</code> in order to get mut access and then replace the <code>rval</code> with an <code>Rvalue::Use(Operand::Constant(...))</code></p>",
        "id": 164393168,
        "sender_full_name": "oli",
        "timestamp": 1556465769
    },
    {
        "content": "<p>note that the replacing should not happen with <code>-O0</code>, not even sure if <code>-O1</code> should have it</p>",
        "id": 164393181,
        "sender_full_name": "oli",
        "timestamp": 1556465804
    },
    {
        "content": "<p>Because it's slow or some other reason?</p>",
        "id": 164393197,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556465845
    },
    {
        "content": "<p>Also, it took a bit of experimentation to get a test case that seemed to actually trigger this codepath in the current const_prop code. Does this look like a reasonable test case? </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"p\">[</span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">42</span><span class=\"p\">];</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">std</span>::<span class=\"n\">process</span>::<span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 164393320,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556466004
    },
    {
        "content": "<p>(I added the exit call just to make sure <code>x</code> wouldn't be removed as dead code.</p>",
        "id": 164393331,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556466031
    },
    {
        "content": "<p>Slow might be one thing, but that's not really a problem since we're running all of it anyway for diagnostics</p>",
        "id": 164400452,
        "sender_full_name": "oli",
        "timestamp": 1556476405
    },
    {
        "content": "<p>the problem is that it'll do source code folding so debug information disappears</p>",
        "id": 164400457,
        "sender_full_name": "oli",
        "timestamp": 1556476426
    },
    {
        "content": "<p>I don't think we have a good setup for this kind of thing yet</p>",
        "id": 164400459,
        "sender_full_name": "oli",
        "timestamp": 1556476440
    },
    {
        "content": "<p>Shouldn't <code>let x = 1 + 1;</code> already trigger the code you linked?</p>",
        "id": 164400509,
        "sender_full_name": "oli",
        "timestamp": 1556476476
    },
    {
        "content": "<p>I mean <code>let x = 0u8 - 1;</code> causes a diagnostic via <code>const_prop</code>, so something is happening</p>",
        "id": 164400530,
        "sender_full_name": "oli",
        "timestamp": 1556476507
    },
    {
        "content": "<p>and I hope <code>let x = (1u8 - 1) - 1;</code> also triggers a diagnostic</p>",
        "id": 164400539,
        "sender_full_name": "oli",
        "timestamp": 1556476541
    },
    {
        "content": "<p>Oh, perhaps. I thought I tried <code>let x = 1 + 1</code> but didn't see anything in the log output</p>",
        "id": 164404630,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556482118
    },
    {
        "content": "<p>Ah, ok. I think I tried that before I really understood what was going on.</p>",
        "id": 164405711,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556483667
    },
    {
        "content": "<p>That works fine.</p>",
        "id": 164405712,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556483669
    },
    {
        "content": "<p>Now I just need to figure out how to handle <code>ScalarPair</code> lol</p>",
        "id": 164405717,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556483685
    },
    {
        "content": "<p>This seems to have worked <a href=\"https://github.com/rust-lang/rust/commit/f20b16235409465c84a396321b3d1abbd74e0d3a\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/f20b16235409465c84a396321b3d1abbd74e0d3a\">https://github.com/rust-lang/rust/commit/f20b16235409465c84a396321b3d1abbd74e0d3a</a></p>",
        "id": 164418171,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556503410
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> if you prefer I can do the const_eval refactoring, this is technical debt built up by me</p>",
        "id": 164451655,
        "sender_full_name": "oli",
        "timestamp": 1556544325
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> No, I don't mind at all unless you really want to do it :)</p>",
        "id": 164457668,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556548638
    },
    {
        "content": "<p>Heh, getting more eyes on that code is great! It's mostly been <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> and I throwing PRs at each other</p>",
        "id": 164474731,
        "sender_full_name": "oli",
        "timestamp": 1556561402
    },
    {
        "content": "<p>So, all yours!</p>",
        "id": 164474764,
        "sender_full_name": "oli",
        "timestamp": 1556561408
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Ok, so I think I followed your instructions correctly. That left one instance of <code>self.mir</code>: <a href=\"https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src/librustc_mir/transform/const_prop.rs#L546\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src/librustc_mir/transform/const_prop.rs#L546\">https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src/librustc_mir/transform/const_prop.rs#L546</a></p>\n<p>I wasn't sure what to do with that so I tried just removing the need to get the span in the first place. There was really only one line that needed it: <a href=\"https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src/librustc_mir/transform/const_prop.rs#L257\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src/librustc_mir/transform/const_prop.rs#L257\">https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src/librustc_mir/transform/const_prop.rs#L257</a></p>\n<p>It seemed to compile even with removing that. Here's the full diff of my changes:<br>\n<a href=\"https://github.com/rust-lang/rust/compare/master...wesleywiser:const_prop_refactoring?expand=1#diff-9e103702275cbef342c2decd3395bf3b#L546\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...wesleywiser:const_prop_refactoring?expand=1#diff-9e103702275cbef342c2decd3395bf3b#L546\">https://github.com/rust-lang/rust/compare/master...wesleywiser:const_prop_refactoring?expand=1#diff-9e103702275cbef342c2decd3395bf3b#L546</a></p>",
        "id": 164502386,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556586652
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> Hmm... I believe I added that to improve diagnostic spans, does <code>./x.py test --stage 1 src/test/ui --bless --test-args const</code> change no stderr files?</p>",
        "id": 164529327,
        "sender_full_name": "oli",
        "timestamp": 1556622194
    },
    {
        "content": "<p>I'm not sure. I'm getting an ICE earlier in the build</p>",
        "id": 164529346,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556622234
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>thread &#39;rustc&#39; panicked at &#39;index out of bounds: the len is 0 but the index is 0&#39;, /Users/wesley/code/rust/rust/src/libcore/slice/mod.rs:2687:10\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\nstack backtrace:\n   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace\n   1: std::sys_common::backtrace::print\n   2: std::panicking::default_hook::{{closure}}\n   3: std::panicking::default_hook\n   4: rustc::util::common::panic_hook\n   5: std::panicking::rust_panic_with_hook\n   6: std::panicking::continue_panic_fmt\n   7: rust_begin_unwind\n   8: core::panicking::panic_fmt\n   9: core::panicking::panic_bounds_check\n  10: rustc::mir::Mir::return_ty\n  11: &lt;rustc_mir::transform::const_prop::ConstProp as rustc_mir::transform::MirPass&gt;::run_pass\n</pre></div>",
        "id": 164529413,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556622295
    },
    {
        "content": "<p>Does this part look right to you? <a href=\"https://github.com/wesleywiser/rust/blob/94bd101dc679acdf1af16b3b487503711e0466a2/src/librustc_mir/transform/const_prop.rs#L132-L143\" target=\"_blank\" title=\"https://github.com/wesleywiser/rust/blob/94bd101dc679acdf1af16b3b487503711e0466a2/src/librustc_mir/transform/const_prop.rs#L132-L143\">https://github.com/wesleywiser/rust/blob/94bd101dc679acdf1af16b3b487503711e0466a2/src/librustc_mir/transform/const_prop.rs#L132-L143</a></p>",
        "id": 164529501,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556622377
    },
    {
        "content": "<p>I assume the issue is that <code>Visitor::super_visit_mir()</code> calls <code>Mir::return_ty()</code>but by this point, <code>mir.local_decls</code> has been replaced with an empty <code>IndexVec</code> and so the return local's index is out of bounds</p>",
        "id": 164529628,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556622574
    },
    {
        "content": "<p>Should I just clone <code>mir.local_decls</code> instead?</p>",
        "id": 164529689,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556622622
    },
    {
        "content": "<p>for now that seems reasonable. Add a <code>FIXME</code> so we'll clean it up</p>",
        "id": 164530515,
        "sender_full_name": "oli",
        "timestamp": 1556623655
    },
    {
        "content": "<p><code>copy_prop</code> doesn't care about <code>visit_ty</code> and it seems overly expensive to have all visitors fetch those types when most of them don' t use them</p>",
        "id": 164530583,
        "sender_full_name": "oli",
        "timestamp": 1556623697
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I pushed a PR with just the <code>const_eval</code> changes (<a href=\"https://github.com/rust-lang/rust/issues/60428\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60428\">#60428</a>). I also fixed the ICE and got a test run of the <code>ui</code> tests. I'm seeing three changes to test output (see <a href=\"https://github.com/rust-lang/rust/commit/900c618c950cdafeb4c17dcd9cd7aa56e1e231b8\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/900c618c950cdafeb4c17dcd9cd7aa56e1e231b8\">this commit</a> for the test diff).</p>",
        "id": 164586872,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556667795
    },
    {
        "content": "<p>yea, that diff is what I feared</p>",
        "id": 164605238,
        "sender_full_name": "oli",
        "timestamp": 1556694191
    },
    {
        "content": "<p>what happens if you use <code>c.span</code> instead of <code>source_info.span</code>?</p>",
        "id": 164605597,
        "sender_full_name": "oli",
        "timestamp": 1556694750
    },
    {
        "content": "<p>is that the right span or is it of the const definition site instead of the use site?</p>",
        "id": 164605606,
        "sender_full_name": "oli",
        "timestamp": 1556694768
    },
    {
        "content": "<p>otherwise I guess we'll have to change the visitor to pass down the <code>SourceInfo</code> of the <code>Rvalue</code> or <code>Statement</code></p>",
        "id": 164605626,
        "sender_full_name": "oli",
        "timestamp": 1556694824
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Oh, that worked pretty well actually</p>",
        "id": 164617839,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556711499
    },
    {
        "content": "<p>Pushing a diff now...</p>",
        "id": 164617841,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556711506
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/commit/84335207f18542e195fdd8cd412097ca6e7d2496\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/84335207f18542e195fdd8cd412097ca6e7d2496\">https://github.com/rust-lang/rust/commit/84335207f18542e195fdd8cd412097ca6e7d2496</a></p>",
        "id": 164617918,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556711602
    },
    {
        "content": "<p>oh, sweet, that's even an improvement</p>",
        "id": 164618086,
        "sender_full_name": "oli",
        "timestamp": 1556711799
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Ok, I think after that PR you r+'d merges, the code is ready to begin actually doing constant propagation. You mentioned that we shouldn't <em>always</em> do this because it will mess up debuginfo. What flag(s) should I gate the optimization under? <code>mir-opt</code>? Regular <code>opt</code>?</p>",
        "id": 164739809,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556826944
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> there's some optimization level checking code in the MIR inliner, you can just do the same thing for const prop and not do the copying if the level is not high enough. We should probably start at O3 and can move to lower levels later</p>",
        "id": 164776871,
        "sender_full_name": "oli",
        "timestamp": 1556872393
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> </p>\n<blockquote>\n<p>create a helper function for obtaining an Operand from a ty::Const (or maybe even from a Scalar + Ty, although in the future we'll probably need the ty::Const, too)</p>\n</blockquote>\n<p>Do you mean add a helper function to <code>OpTy</code> (<code>OpTy</code> is aliased as <code>Const</code> on line 82)?</p>",
        "id": 165064206,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557230260
    },
    {
        "content": "<p>oh</p>",
        "id": 165064220,
        "sender_full_name": "oli",
        "timestamp": 1557230273
    },
    {
        "content": "<p>right</p>",
        "id": 165064223,
        "sender_full_name": "oli",
        "timestamp": 1557230275
    },
    {
        "content": "<p>wait</p>",
        "id": 165064274,
        "sender_full_name": "oli",
        "timestamp": 1557230291
    },
    {
        "content": "<p>no I think I meant <code>ty::Const</code>, but let me check</p>",
        "id": 165064280,
        "sender_full_name": "oli",
        "timestamp": 1557230304
    },
    {
        "content": "<p>in <a href=\"https://github.com/rust-lang/rust/pull/60597/files#diff-9e103702275cbef342c2decd3395bf3bR506\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60597/files#diff-9e103702275cbef342c2decd3395bf3bR506\">https://github.com/rust-lang/rust/pull/60597/files#diff-9e103702275cbef342c2decd3395bf3bR506</a> you need an <code>Operand::Constant</code> to put into the <code>Rvalue::Use</code> and in <a href=\"https://github.com/rust-lang/rust/pull/60597/files#diff-9e103702275cbef342c2decd3395bf3bR527\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60597/files#diff-9e103702275cbef342c2decd3395bf3bR527\">https://github.com/rust-lang/rust/pull/60597/files#diff-9e103702275cbef342c2decd3395bf3bR527</a> you need <code>Operand::Constant</code> for the <code>Vec</code> of the tuple elements</p>",
        "id": 165064436,
        "sender_full_name": "oli",
        "timestamp": 1557230425
    },
    {
        "content": "<p>so the helper should directly produce <code>Operand</code> (which would always be <code>Operand::Const</code>), in order to reduce duplication between the sites going from a <code>Scalar</code> + <code>Ty</code> to <code>Operand</code></p>",
        "id": 165064455,
        "sender_full_name": "oli",
        "timestamp": 1557230446
    },
    {
        "content": "<p>Oh, ok. But the helper function goes from <code>rustc_mir::interpret::Scalar</code> to <code>Operand</code> right?</p>",
        "id": 165064562,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557230556
    },
    {
        "content": "<p>I don't have a <code>Const</code> to turn into an <code>Operand</code></p>",
        "id": 165064571,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557230568
    },
    {
        "content": "<p>heh, right, my comment about <code>Const</code> was about <code>ty::Const</code>, which you'd have to create</p>",
        "id": 165065160,
        "sender_full_name": "oli",
        "timestamp": 1557231133
    },
    {
        "content": "<p>but that's unnecessary right now</p>",
        "id": 165065167,
        "sender_full_name": "oli",
        "timestamp": 1557231146
    },
    {
        "content": "<p>might become necessary in the future</p>",
        "id": 165065174,
        "sender_full_name": "oli",
        "timestamp": 1557231153
    },
    {
        "content": "<p>but then we can split the helper into two</p>",
        "id": 165065181,
        "sender_full_name": "oli",
        "timestamp": 1557231159
    },
    {
        "content": "<p>Ok, sounds good. I'll push up the changes in a minute</p>",
        "id": 165065238,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557231236
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Did you still want to do a perf run of <a href=\"https://github.com/rust-lang/rust/issues/60597\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60597\">#60597</a>?</p>",
        "id": 165149271,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557309622
    },
    {
        "content": "<p>no, you're right, it's useless right now</p>",
        "id": 165150161,
        "sender_full_name": "oli",
        "timestamp": 1557310646
    },
    {
        "content": "<p>we'll do that when we lower the O level</p>",
        "id": 165150166,
        "sender_full_name": "oli",
        "timestamp": 1557310658
    },
    {
        "content": "<p>Ok</p>",
        "id": 165150459,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557310942
    },
    {
        "content": "<p>If you want, I can push a temporary commit to remove the o3 check just for the perf run</p>",
        "id": 165150474,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557310962
    },
    {
        "content": "<p>nah, we'll do that in a separate PR</p>",
        "id": 165151222,
        "sender_full_name": "oli",
        "timestamp": 1557311846
    },
    {
        "content": "<p>I mean... we could experiment with moving this to <code>O1</code> since most of the work is being done <em>anyway</em></p>",
        "id": 165151234,
        "sender_full_name": "oli",
        "timestamp": 1557311870
    },
    {
        "content": "<p>True</p>",
        "id": 165151343,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557311959
    },
    {
        "content": "<p>Let me push a commit just so we can see what the performance impact is and then we can decide whether to put it in <code>O1</code> or <code>O3</code></p>",
        "id": 165151427,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557312006
    },
    {
        "content": "<p>sgtm</p>",
        "id": 165151437,
        "sender_full_name": "oli",
        "timestamp": 1557312024
    },
    {
        "content": "<p>(if you're alright with the PR taking longer to get merged, otherwise we can do a PR with just the move to O1)</p>",
        "id": 165151455,
        "sender_full_name": "oli",
        "timestamp": 1557312061
    },
    {
        "content": "<p>It's fine with me either way. eddyb still needs to review and if that happens soon, we can do the move to O1 in another PR as you said</p>",
        "id": 165151655,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557312255
    },
    {
        "content": "<p>heh ping <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 165151666,
        "sender_full_name": "oli",
        "timestamp": 1557312273
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  Do you have any thoughts about what optimization level this should be gated on? The performance results are in <a href=\"https://github.com/rust-lang/rust/pull/60597#issuecomment-490479633\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60597#issuecomment-490479633\">this comment</a>.</p>",
        "id": 165264619,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557416886
    },
    {
        "content": "<p>Yea, imo we should go with O1</p>",
        "id": 165265062,
        "sender_full_name": "oli",
        "timestamp": 1557417165
    },
    {
        "content": "<p>uncontroversial would be O2, so we could start there though</p>",
        "id": 165265099,
        "sender_full_name": "oli",
        "timestamp": 1557417192
    },
    {
        "content": "<p>O1 is also what I was thinking</p>",
        "id": 165265142,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557417217
    },
    {
        "content": "<p>I'll make that change tonight and fix any test fallout</p>",
        "id": 165265156,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557417237
    },
    {
        "content": "<p>Are the changes to to codegen tests concerning? When <code>-O</code> is enabled, they seem to optimize to the same thing.</p>\n<p><a href=\"https://gist.github.com/wesleywiser/2af3fd2ef1fec4df3ba75786098ef3b5/revisions\" target=\"_blank\" title=\"https://gist.github.com/wesleywiser/2af3fd2ef1fec4df3ba75786098ef3b5/revisions\">Diff between mir-opt-level=0 and mir-opt-level=1</a></p>",
        "id": 165329866,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557489368
    },
    {
        "content": "<p>oh <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span> That's not good</p>",
        "id": 165334600,
        "sender_full_name": "oli",
        "timestamp": 1557493878
    },
    {
        "content": "<p>llvm will clean it up, but still</p>",
        "id": 165334608,
        "sender_full_name": "oli",
        "timestamp": 1557493888
    },
    {
        "content": "<p>I guess our constant -&gt; llvm lowering step isn't very good</p>",
        "id": 165334619,
        "sender_full_name": "oli",
        "timestamp": 1557493903
    },
    {
        "content": "<p>that may explain why the unoptimized case regressed in the perf run</p>",
        "id": 165334646,
        "sender_full_name": "oli",
        "timestamp": 1557493922
    },
    {
        "content": "<p>I can kinda see how that would happen... Maybe we should try to read a <code>ScalarPair</code> out of a constant before converting it to llvm</p>",
        "id": 165334896,
        "sender_full_name": "oli",
        "timestamp": 1557494122
    },
    {
        "content": "<p>Basically if we have <code>TyLayout</code> with<code>Abi::ScalarPair</code>, but <code>ConstValue::ByRef</code>, we'd read a pair from the <code>Allocation</code>. I think I tried to setup some code for that a while back, but never got around to actually ripping it out of <code>InterpCtx</code> and moving it to <code>Allocation</code></p>",
        "id": 165335001,
        "sender_full_name": "oli",
        "timestamp": 1557494225
    },
    {
        "content": "<p>I guess the other thing would be to improve the const propagation a bit more. As it is, you end up with code like:</p>\n<div class=\"codehilite\"><pre><span></span>      _2 = (const 2u32, const false);\n      assert(!move (_2.1: bool), &quot;attempt to add with overflow&quot;) -&gt; bb1;\n</pre></div>\n\n\n<p>where <code>!move (_2.1: bool)</code> should just become <code>const false</code> and then simplify branches should take care of it from there</p>",
        "id": 165335814,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557494868
    },
    {
        "content": "<p>yea, there's some code that will emit the <code>attempt to add with overflow</code> diagnostic from assertions know to trigger. That same place could overwrite the <code>_2.1</code> with the propagated value. I don't know if we should do that in the same PR though</p>",
        "id": 165335937,
        "sender_full_name": "oli",
        "timestamp": 1557494961
    },
    {
        "content": "<p>the same thing goes for other branches with know-constant branching (which are turned into <code>goto</code> once the constant is promoted into the terminator)</p>",
        "id": 165335965,
        "sender_full_name": "oli",
        "timestamp": 1557494994
    },
    {
        "content": "<p>Sure, that could be done in another PR. I guess we should gate this under O2 then?</p>",
        "id": 165336215,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557495160
    },
    {
        "content": "<p>I think part of the issue is this <a href=\"https://github.com/rust-lang/rust/blob/0ac53da03dad79655e2f3e65a58f94a2f3314d5f/src/librustc_mir/transform/const_prop.rs#L527\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/0ac53da03dad79655e2f3e65a58f94a2f3314d5f/src/librustc_mir/transform/const_prop.rs#L527\">https://github.com/rust-lang/rust/blob/0ac53da03dad79655e2f3e65a58f94a2f3314d5f/src/librustc_mir/transform/const_prop.rs#L527</a></p>",
        "id": 165336222,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557495170
    },
    {
        "content": "<p>Once a Local is determined to be propagatable, shouldn't uses of it also be propagatable?</p>",
        "id": 165336277,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557495213
    },
    {
        "content": "<p>I don't think that currently happens but I might be wrong</p>",
        "id": 165336284,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557495227
    },
    {
        "content": "<p>ah, no that's a different issue</p>",
        "id": 165336422,
        "sender_full_name": "oli",
        "timestamp": 1557495355
    },
    {
        "content": "<p>we need dataflow in order to know what we can actually promote</p>",
        "id": 165336476,
        "sender_full_name": "oli",
        "timestamp": 1557495369
    },
    {
        "content": "<p>but at that point we should be merging const prop and copy prop I guess</p>",
        "id": 165336482,
        "sender_full_name": "oli",
        "timestamp": 1557495383
    },
    {
        "content": "<p>Ah ok</p>",
        "id": 165336485,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557495385
    },
    {
        "content": "<p>I'm surprised <code>move (_2.1: bool)</code> isn't already const propagated</p>",
        "id": 165336537,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557495439
    },
    {
        "content": "<p>Since it's just reading a constant</p>",
        "id": 165336543,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557495445
    },
    {
        "content": "<p>oh it is, but your code only writes propagations to locals</p>",
        "id": 165336560,
        "sender_full_name": "oli",
        "timestamp": 1557495470
    },
    {
        "content": "<p>this is a propagation into an <code>Operand</code></p>",
        "id": 165336563,
        "sender_full_name": "oli",
        "timestamp": 1557495478
    },
    {
        "content": "<p>Oh gotcha</p>",
        "id": 165336628,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557495508
    },
    {
        "content": "<p>right now as the PR stands there is no propagation into terminators</p>",
        "id": 165336632,
        "sender_full_name": "oli",
        "timestamp": 1557495513
    },
    {
        "content": "<p>just into assignment statements</p>",
        "id": 165336638,
        "sender_full_name": "oli",
        "timestamp": 1557495520
    },
    {
        "content": "<p>Is that still in scope for <code>ConstProp</code>?</p>",
        "id": 165336639,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557495522
    },
    {
        "content": "<p>yea</p>",
        "id": 165336643,
        "sender_full_name": "oli",
        "timestamp": 1557495525
    },
    {
        "content": "<p>that's what I meant with \"not in this PR\"</p>",
        "id": 165336670,
        "sender_full_name": "oli",
        "timestamp": 1557495544
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 165336676,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557495549
    },
    {
        "content": "<p>Do you want me to switch this back to <code>O2</code> then?</p>",
        "id": 165336698,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557495569
    },
    {
        "content": "<p>yea, I guess go back to O2 and I'll try to figure out the better llvm codegen story</p>",
        "id": 165336701,
        "sender_full_name": "oli",
        "timestamp": 1557495573
    },
    {
        "content": "<p>So there's no regressions</p>",
        "id": 165336702,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557495574
    },
    {
        "content": "<p>Alright</p>",
        "id": 165336713,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557495585
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 165336718,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557495590
    },
    {
        "content": "<p>I don't remember what the problems were, maybe they have become obsolete</p>",
        "id": 165336729,
        "sender_full_name": "oli",
        "timestamp": 1557495597
    },
    {
        "content": "<p>That would be nice</p>",
        "id": 165336797,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557495621
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <code>ConstProp</code> into terminators helps a lot <a href=\"https://github.com/rust-lang/rust/pull/60745#issuecomment-491530334\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60745#issuecomment-491530334\">https://github.com/rust-lang/rust/pull/60745#issuecomment-491530334</a></p>",
        "id": 165437187,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557621023
    },
    {
        "content": "<p>wow, that's awesome</p>",
        "id": 165456927,
        "sender_full_name": "oli",
        "timestamp": 1557653520
    },
    {
        "content": "<p>I guess it makes sense, because subsequent passes can eliminate a lot of basic blocks this way</p>",
        "id": 165456977,
        "sender_full_name": "oli",
        "timestamp": 1557653586
    },
    {
        "content": "<p>It looks like it's improved the codegen quite a bit from those results I posted the other day. The code generated is still different but it may actually be reasonable now.</p>",
        "id": 165493465,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557715680
    },
    {
        "content": "<p>Latest results: <a href=\"https://gist.github.com/wesleywiser/548f58348bd2d24fcf7e5aa1603f53c6/revisions\" target=\"_blank\" title=\"https://gist.github.com/wesleywiser/548f58348bd2d24fcf7e5aa1603f53c6/revisions\">https://gist.github.com/wesleywiser/548f58348bd2d24fcf7e5aa1603f53c6/revisions</a></p>",
        "id": 165493606,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557715899
    },
    {
        "content": "<p>There's still some dead variables in there but removing the panic checks seem like a win to me. I don't know a lot about LLVM though.</p>",
        "id": 165493664,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557715981
    },
    {
        "content": "<p>wait this is for release mode!?</p>",
        "id": 165507638,
        "sender_full_name": "oli",
        "timestamp": 1557735519
    },
    {
        "content": "<p>No, this is <code>-Copt-level=0</code></p>",
        "id": 165516822,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557744477
    },
    {
        "content": "<p>With <code>-Copt-level=3</code>, there's no change in generated IR. LLVM optimizes everything to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">; Function Attrs: norecurse nounwind readnone uwtable</span>\n<span class=\"k\">define</span> <span class=\"k\">i32</span> <span class=\"vg\">@nothing</span><span class=\"p\">()</span> <span class=\"k\">unnamed_addr</span> <span class=\"vg\">#0</span> <span class=\"p\">{</span>\n<span class=\"nl\">start:</span>\n  <span class=\"k\">ret</span> <span class=\"k\">i32</span> <span class=\"m\">4</span>\n<span class=\"p\">}</span>\n</pre></div>",
        "id": 165517041,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557744717
    },
    {
        "content": "<p>ah ok, that makes sense</p>",
        "id": 165517989,
        "sender_full_name": "oli",
        "timestamp": 1557745745
    },
    {
        "content": "<p>still probably makes LLVM faster at doing it's thing</p>",
        "id": 165583175,
        "sender_full_name": "simulacrum",
        "timestamp": 1557795222
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>, what did you mean with this feedback? <a href=\"https://github.com/rust-lang/rust/pull/60597/files/ba7b8312929f39b890f437063f2eec27984fdd19#r283381539\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60597/files/ba7b8312929f39b890f437063f2eec27984fdd19#r283381539\">https://github.com/rust-lang/rust/pull/60597/files/ba7b8312929f39b890f437063f2eec27984fdd19#r283381539</a></p>",
        "id": 165610837,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557830089
    },
    {
        "content": "<p>what I mean is that you should be able to take <code>value: Const&lt;'tcx&gt;</code> and turn it into <code>ty::Const</code></p>",
        "id": 165610855,
        "sender_full_name": "eddyb",
        "timestamp": 1557830138
    },
    {
        "content": "<p>the same way miri does when you do <code>tcx.const_eval</code> or w/e</p>",
        "id": 165610863,
        "sender_full_name": "eddyb",
        "timestamp": 1557830158
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> knows this better than me</p>",
        "id": 165610917,
        "sender_full_name": "eddyb",
        "timestamp": 1557830191
    },
    {
        "content": "<p>We've already done <code>const-eval</code> at this point and got a <code>OpTy</code></p>",
        "id": 165610918,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557830195
    },
    {
        "content": "<p>but we need to turn the <code>OpTy</code> into an <code>Rvalue</code></p>",
        "id": 165610925,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557830213
    },
    {
        "content": "<p>(there's a <code>type Const = OpTy;</code> statement much earlier in this file)</p>",
        "id": 165610947,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557830274
    },
    {
        "content": "<p>The specific branch you commented on handles the case where <code>OpTy</code> is a <code>Immediate::ScalarPair</code> which happens when evaluating checked math.</p>",
        "id": 165611169,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557830530
    },
    {
        "content": "<p>This test case triggers that code path: <a href=\"https://github.com/rust-lang/rust/pull/60597/files/ba7b8312929f39b890f437063f2eec27984fdd19#diff-441c8694f396fc233e098b0ed39d59a1\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60597/files/ba7b8312929f39b890f437063f2eec27984fdd19#diff-441c8694f396fc233e098b0ed39d59a1\">https://github.com/rust-lang/rust/pull/60597/files/ba7b8312929f39b890f437063f2eec27984fdd19#diff-441c8694f396fc233e098b0ed39d59a1</a></p>",
        "id": 165611214,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557830630
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> ^ <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 165611285,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557830694
    },
    {
        "content": "<p>my point is that it doesn't matter what kind of <code>OpTy</code> this is</p>",
        "id": 165611310,
        "sender_full_name": "eddyb",
        "timestamp": 1557830733
    },
    {
        "content": "<p>it can be uniformly converted into a <code>ty::Const</code></p>",
        "id": 165611314,
        "sender_full_name": "eddyb",
        "timestamp": 1557830744
    },
    {
        "content": "<p>and it should be going through <em>that</em> pathway</p>",
        "id": 165611317,
        "sender_full_name": "eddyb",
        "timestamp": 1557830758
    },
    {
        "content": "<p>which probably does even more validity checks</p>",
        "id": 165611366,
        "sender_full_name": "eddyb",
        "timestamp": 1557830766
    },
    {
        "content": "<p>I don't think you're using <em>literally</em> <code>tcx.const_eval(...)</code>, but rather using miri directly</p>",
        "id": 165611393,
        "sender_full_name": "eddyb",
        "timestamp": 1557830821
    },
    {
        "content": "<p><code>tcx.const_eval(...)</code> <em>in particular</em> has a conversion step, from miri to <code>ty::Const</code></p>",
        "id": 165611408,
        "sender_full_name": "eddyb",
        "timestamp": 1557830838
    },
    {
        "content": "<p>Ok</p>",
        "id": 165611491,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557830954
    },
    {
        "content": "<p>Looks like we use <code>eval_promoted</code> <a href=\"https://github.com/rust-lang/rust/blob/ba7b8312929f39b890f437063f2eec27984fdd19/src/librustc_mir/transform/const_prop.rs#L328\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/ba7b8312929f39b890f437063f2eec27984fdd19/src/librustc_mir/transform/const_prop.rs#L328\">https://github.com/rust-lang/rust/blob/ba7b8312929f39b890f437063f2eec27984fdd19/src/librustc_mir/transform/const_prop.rs#L328</a></p>",
        "id": 165611495,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557830964
    },
    {
        "content": "<p>The problem is code like binary op evaluation: <a href=\"https://github.com/rust-lang/rust/blob/ba7b8312929f39b890f437063f2eec27984fdd19/src/librustc_mir/transform/const_prop.rs#L479\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/ba7b8312929f39b890f437063f2eec27984fdd19/src/librustc_mir/transform/const_prop.rs#L479\">https://github.com/rust-lang/rust/blob/ba7b8312929f39b890f437063f2eec27984fdd19/src/librustc_mir/transform/const_prop.rs#L479</a></p>",
        "id": 165612232,
        "sender_full_name": "oli",
        "timestamp": 1557831718
    },
    {
        "content": "<p>for checked bin ops you get a pair of the result + the overflow bit</p>",
        "id": 165612302,
        "sender_full_name": "oli",
        "timestamp": 1557831762
    },
    {
        "content": "<p>I don't see any functions for converting an <code>MPlaceTy</code> to a <code>ty::Const</code></p>",
        "id": 165612835,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557832265
    },
    {
        "content": "<p>mplace-&gt;const is private: <a href=\"https://github.com/rust-lang/rust/blob/13fde05b12c28e1ed66bd13fdf1ea392f166b811/src/librustc_mir/const_eval.rs#L65\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/13fde05b12c28e1ed66bd13fdf1ea392f166b811/src/librustc_mir/const_eval.rs#L65\">https://github.com/rust-lang/rust/blob/13fde05b12c28e1ed66bd13fdf1ea392f166b811/src/librustc_mir/const_eval.rs#L65</a></p>",
        "id": 165613392,
        "sender_full_name": "oli",
        "timestamp": 1557832781
    },
    {
        "content": "<p>and I don't think we should use it</p>",
        "id": 165613396,
        "sender_full_name": "oli",
        "timestamp": 1557832789
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> converting to a <code>ty::Const</code> would be extra effort, what's the problem you see with the <code>mir::Aggregate</code>?</p>",
        "id": 165613452,
        "sender_full_name": "oli",
        "timestamp": 1557832818
    },
    {
        "content": "<p>I think the current implementation is hacky</p>",
        "id": 165613470,
        "sender_full_name": "eddyb",
        "timestamp": 1557832840
    },
    {
        "content": "<p>and we should be doing something that's both more general <em>and</em> validity-checked</p>",
        "id": 165613480,
        "sender_full_name": "eddyb",
        "timestamp": 1557832852
    },
    {
        "content": "<p>hm. that will require useless addtional miri allocations (useless because they will often not end up in llvm)</p>",
        "id": 165613510,
        "sender_full_name": "oli",
        "timestamp": 1557832894
    },
    {
        "content": "<p>because <code>ty::Const</code> can't represent arbitrary pairs?</p>",
        "id": 165613615,
        "sender_full_name": "eddyb",
        "timestamp": 1557832931
    },
    {
        "content": "<p>what was the reasoning behind that?</p>",
        "id": 165613618,
        "sender_full_name": "eddyb",
        "timestamp": 1557832944
    },
    {
        "content": "<p>can you at least move the scalar -&gt; <code>ty::Const</code> logic to miri, share it with <code>tcx.const_eval(...)</code> and have it do validity checks?</p>",
        "id": 165613679,
        "sender_full_name": "eddyb",
        "timestamp": 1557833001
    },
    {
        "content": "<p>the reasoning was that we didn't really use that feature and most uses just want slice information</p>",
        "id": 165613682,
        "sender_full_name": "oli",
        "timestamp": 1557833009
    },
    {
        "content": "<p>and then we can keep the <code>ty::Tuple</code> hack with a comment that it might be better to just represent the scalar pair case in <code>ty::Const</code></p>",
        "id": 165613691,
        "sender_full_name": "eddyb",
        "timestamp": 1557833039
    },
    {
        "content": "<p>ah, now I understand what issue you have with this.</p>",
        "id": 165613797,
        "sender_full_name": "oli",
        "timestamp": 1557833137
    },
    {
        "content": "<p>Ok, so we can expose <a href=\"https://github.com/rust-lang/rust/blob/13fde05b12c28e1ed66bd13fdf1ea392f166b811/src/librustc_mir/const_eval.rs#L85\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/13fde05b12c28e1ed66bd13fdf1ea392f166b811/src/librustc_mir/const_eval.rs#L85\">https://github.com/rust-lang/rust/blob/13fde05b12c28e1ed66bd13fdf1ea392f166b811/src/librustc_mir/const_eval.rs#L85</a> via a wrapper that also does <a href=\"https://github.com/rust-lang/rust/blob/13fde05b12c28e1ed66bd13fdf1ea392f166b811/src/librustc_mir/const_eval.rs#L493\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/13fde05b12c28e1ed66bd13fdf1ea392f166b811/src/librustc_mir/const_eval.rs#L493\">https://github.com/rust-lang/rust/blob/13fde05b12c28e1ed66bd13fdf1ea392f166b811/src/librustc_mir/const_eval.rs#L493</a> first</p>",
        "id": 165613905,
        "sender_full_name": "oli",
        "timestamp": 1557833242
    },
    {
        "content": "<p>yeah that makes sense</p>",
        "id": 165614057,
        "sender_full_name": "eddyb",
        "timestamp": 1557833407
    },
    {
        "content": "<p>I'm not sure how one would get an invalid constant here, we should probably just ICE when that happens. We start out with validated constants and are const propagating the various operations via miri code. What do you think about doing validation directly on the operations just like miri the tool does it and then don't do the propagation if validation fails</p>",
        "id": 165614084,
        "sender_full_name": "oli",
        "timestamp": 1557833434
    },
    {
        "content": "<p>sure</p>",
        "id": 165614090,
        "sender_full_name": "eddyb",
        "timestamp": 1557833451
    },
    {
        "content": "<p>basically the const prop optimizations can then be used more wildly, because they will be rolled back if anything looks awry</p>",
        "id": 165614112,
        "sender_full_name": "oli",
        "timestamp": 1557833480
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> So, as a first step we'd need a test ensuring that <code>&amp;1 as *const i32 as usize</code> does not result in a <code>ty::Const</code> of type <code>usize</code> with value <code>Scalar(Ptr(AllocId(some_number), 0))</code></p>",
        "id": 165614296,
        "sender_full_name": "oli",
        "timestamp": 1557833724
    },
    {
        "content": "<p>(after optimizations)</p>",
        "id": 165614302,
        "sender_full_name": "oli",
        "timestamp": 1557833739
    },
    {
        "content": "<p>that will probably fail right now</p>",
        "id": 165614306,
        "sender_full_name": "oli",
        "timestamp": 1557833755
    },
    {
        "content": "<p>Then you can add a call to <code>ecx.validate_operand(op, vec![], Some(&amp;mut RefTracking::new(op)), /*const_mode*/true)?;</code> to the conversion method.</p>",
        "id": 165614496,
        "sender_full_name": "oli",
        "timestamp": 1557833962
    },
    {
        "content": "<p>For good measure throw the conversion method onto <code>InterpCx</code>, since I believe it needs nothing from the const propagator</p>",
        "id": 165614519,
        "sender_full_name": "oli",
        "timestamp": 1557833996
    },
    {
        "content": "<p>Alright</p>",
        "id": 165614581,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557834043
    },
    {
        "content": "<p>So this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>results in </p>\n<div class=\"codehilite\"><pre><span></span>        _3 = &amp;(promoted[0]: i32);\n        _2 = move _3 as *const i32 (Misc);\n        _1 = move _2 as usize (Misc);\n        _4 = const read(move _1) -&gt; bb1;\n</pre></div>",
        "id": 165614709,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557834208
    },
    {
        "content": "<p>(Before and after my changes)</p>",
        "id": 165614714,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557834217
    },
    {
        "content": "<p>Which seems correct to me</p>",
        "id": 165614717,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557834226
    },
    {
        "content": "<p>Right?</p>",
        "id": 165614745,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557834242
    },
    {
        "content": "<p>hmm. I guess we haven't implemented <code>&amp;</code></p>",
        "id": 165615042,
        "sender_full_name": "oli",
        "timestamp": 1557834526
    },
    {
        "content": "<p>use an intermediate <code>const FOO: &amp;i32 = &1; let x = FOO as *const i32 as usize;</code></p>",
        "id": 165615061,
        "sender_full_name": "oli",
        "timestamp": 1557834555
    },
    {
        "content": "<p>I don't see any difference there either:</p>\n<div class=\"codehilite\"><pre><span></span>        _2 = const Unevaluated(DefId(0/0:5 ~ test[317d]::main[0]::FOO[0]), []) : &amp;i32 as *const i32 (Misc); // bb0[1]: scope 0 at test.rs:6:13: 6:16\n                                         // ty::Const\n                                         // + ty: &amp;i32\n                                         // + val: Unevaluated(DefId(0/0:5 ~ test[317d]::main[0]::FOO[0]), [])\n                                         // mir::Constant\n                                         // + span: test.rs:6:13: 6:16\n                                         // + ty: &amp;i32\n                                         // + literal: Const { ty: &amp;i32, val: Unevaluated(DefId(0/0:5 ~ test[317d]::main[0]::FOO[0]), []) }\n        _1 = move _2 as usize (Misc);\n        StorageDead(_2);\n        _3 = const read(move _1) -&gt; bb1;\n</pre></div>",
        "id": 165615190,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557834704
    },
    {
        "content": "<p>(Guessing that you're correct and <code>&amp;</code> isn't implemented leading to the <code>Unevaluated</code> stuff)</p>",
        "id": 165615248,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557834745
    },
    {
        "content": "<p>No, <code>Unevaluated</code> happens because we're early in the optimization pipeline</p>",
        "id": 165615281,
        "sender_full_name": "oli",
        "timestamp": 1557834808
    },
    {
        "content": "<p><code>&amp;</code> is not implemented for const prop</p>",
        "id": 165615286,
        "sender_full_name": "oli",
        "timestamp": 1557834817
    },
    {
        "content": "<p>Oh, ok</p>",
        "id": 165615338,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557834859
    },
    {
        "content": "<p>hm, oh sorry I forgot about this thread. Let's see why this isn't getting optimized</p>",
        "id": 165617051,
        "sender_full_name": "oli",
        "timestamp": 1557836614
    },
    {
        "content": "<p>I don't get it. All the parts are there. are you testing this with your PR and the appropriate optimization levels?</p>",
        "id": 165617375,
        "sender_full_name": "oli",
        "timestamp": 1557836874
    },
    {
        "content": "<p>Here's what I'm doing:</p>\n<div class=\"codehilite\"><pre><span></span>rustc +stage1-2 --emit mir -C overflow-checks=on -Copt-level=0 -Z mir-opt-level=3 -Z dump-mir=&quot;&quot; test.rs\n</pre></div>",
        "id": 165617664,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557837074
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>narada:rust wesley$ cat test.rs\n<span class=\"c1\">#[inline(never)]</span>\nfn read&lt;T&gt;<span class=\"o\">(</span>_: T<span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"o\">}</span>\n\nfn main<span class=\"o\">()</span> <span class=\"o\">{</span>\n    const FOO: <span class=\"p\">&amp;</span><span class=\"nv\">i32</span> <span class=\"o\">=</span> <span class=\"p\">&amp;</span><span class=\"m\">1</span><span class=\"p\">;</span>\n    <span class=\"nb\">let</span> <span class=\"nv\">x</span> <span class=\"o\">=</span> FOO as *const i32 as usize<span class=\"p\">;</span>\n    read<span class=\"o\">(</span>x<span class=\"o\">)</span><span class=\"p\">;</span>\n<span class=\"o\">}</span>\n</pre></div>",
        "id": 165617687,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557837102
    },
    {
        "content": "<p>very weird. I'm assuming <code>1i32 as u32</code> works though?</p>",
        "id": 165617752,
        "sender_full_name": "oli",
        "timestamp": 1557837135
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>narada:rust wesley$ cat mir_dump/rustc.main.003-018.ConstProp.after.mir\n// MIR for `main`\n// source = MirSource { instance: Item(DefId(0/0:4 ~ test[317d]::main[0])), promoted: None }\n// pass_name = ConstProp\n// disambiguator = after\n\nfn  main() -&gt; () {\n    let mut _0: ();                      // return place in scope 0 at test.rs:4:11: 4:11\n    let mut _2: *const i32;              // in scope 0 at test.rs:6:13: 6:30\n    let mut _3: &amp;i32;                    // in scope 0 at test.rs:6:13: 6:16\n    let mut _4: &amp;i32;                    // in scope 0 at test.rs:6:13: 6:16\n    let mut _5: ();                      // in scope 0 at test.rs:7:5: 7:12\n    let mut _6: usize;                   // in scope 0 at test.rs:7:10: 7:11\n    scope 1 {\n        let _1: usize;                   // &quot;x&quot; in scope 1 at test.rs:6:9: 6:10\n    }\n    scope 2 {\n    }\n\n    bb0: {\n        StorageLive(_1);                 // bb0[0]: scope 0 at test.rs:6:9: 6:10\n        StorageLive(_2);                 // bb0[1]: scope 0 at test.rs:6:13: 6:30\n        StorageLive(_3);                 // bb0[2]: scope 0 at test.rs:6:13: 6:16\n        StorageLive(_4);                 // bb0[3]: scope 0 at test.rs:6:13: 6:16\n        _4 = const Unevaluated(DefId(0/0:5 ~ test[317d]::main[0]::FOO[0]), []) : &amp;i32; // bb0[4]: scope 0 at test.rs:6:13: 6:16\n                                         // ty::Const\n                                         // + ty: &amp;i32\n                                         // + val: Unevaluated(DefId(0/0:5 ~ test[317d]::main[0]::FOO[0]), [])\n                                         // mir::Constant\n                                         // + span: test.rs:6:13: 6:16\n                                         // + ty: &amp;i32\n                                         // + literal: Const { ty: &amp;i32, val: Unevaluated(DefId(0/0:5 ~ test[317d]::main[0]::FOO[0]), []) }\n        _3 = _4;                         // bb0[5]: scope 0 at test.rs:6:13: 6:16\n        _2 = move _3 as *const i32 (Misc); // bb0[6]: scope 0 at test.rs:6:13: 6:16\n        StorageDead(_3);                 // bb0[7]: scope 0 at test.rs:6:15: 6:16\n        _1 = move _2 as usize (Misc);    // bb0[8]: scope 0 at test.rs:6:13: 6:39\n        StorageDead(_2);                 // bb0[9]: scope 0 at test.rs:6:38: 6:39\n        StorageDead(_4);                 // bb0[10]: scope 0 at test.rs:6:39: 6:40\n        StorageLive(_6);                 // bb0[11]: scope 2 at test.rs:7:10: 7:11\n        _6 = _1;                         // bb0[12]: scope 2 at test.rs:7:10: 7:11\n        _5 = const read(move _6) -&gt; bb1; // bb0[13]: scope 2 at test.rs:7:5: 7:12\n                                         // ty::Const\n                                         // + ty: fn(usize) {read::&lt;usize&gt;}\n                                         // + val: Scalar(Bits { size: 0, bits: 0 })\n                                         // mir::Constant\n                                         // + span: test.rs:7:5: 7:9\n                                         // + ty: fn(usize) {read::&lt;usize&gt;}\n                                         // + literal: Const { ty: fn(usize) {read::&lt;usize&gt;}, val: Scalar(Bits { size: 0, bits: 0 }) }\n    }\n\n    bb1: {\n        StorageDead(_6);                 // bb1[0]: scope 2 at test.rs:7:11: 7:12\n        _0 = ();                         // bb1[1]: scope 0 at test.rs:4:11: 8:2\n        StorageDead(_1);                 // bb1[2]: scope 0 at test.rs:8:1: 8:2\n        return;                          // bb1[3]: scope 0 at test.rs:8:2: 8:2\n    }\n\n    bb2 (cleanup): {\n        resume;                          // bb2[0]: scope 0 at test.rs:4:1: 8:2\n    }\n}\n</pre></div>",
        "id": 165617780,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557837171
    },
    {
        "content": "<p>If I do <code>let x = 1i32 as u32</code>, I get this:</p>\n<div class=\"codehilite\"><pre><span></span>        _1 = const 1i32 as u32 (Misc);   // bb0[1]: scope 0 at test.rs:5:13: 5:24\n                                         // ty::Const\n                                         // + ty: i32\n                                         // + val: Scalar(Bits { size: 4, bits: 1 })\n                                         // mir::Constant\n                                         // + span: test.rs:5:13: 5:17\n                                         // + ty: i32\n                                         // + literal: Const { ty: i32, val: Scalar(Bits { size: 4, bits: 1 }) }\n        StorageLive(_3);                 // bb0[2]: scope 2 at test.rs:6:10: 6:11\n        _3 = _1;                         // bb0[3]: scope 2 at test.rs:6:10: 6:11\n        _2 = const read(move _3) -&gt; bb1;\n</pre></div>",
        "id": 165617845,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557837239
    },
    {
        "content": "<p>ok, that is super odd. Because const prop works (<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e3ce68eb4e44d21853e27f67ff989576\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e3ce68eb4e44d21853e27f67ff989576\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e3ce68eb4e44d21853e27f67ff989576</a>)</p>",
        "id": 165617926,
        "sender_full_name": "oli",
        "timestamp": 1557837322
    },
    {
        "content": "<p>did you build with debug assertions?</p>",
        "id": 165617946,
        "sender_full_name": "oli",
        "timestamp": 1557837349
    },
    {
        "content": "<p>can you run with <code>RUSTC_LOG=rustc_mir::transforms::const_prop</code> and past the output somewhere?</p>",
        "id": 165618002,
        "sender_full_name": "oli",
        "timestamp": 1557837376
    },
    {
        "content": "<p>I think so?</p>",
        "id": 165618003,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557837377
    },
    {
        "content": "<p>/me checking</p>",
        "id": 165618008,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557837380
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>TRACE 2019-05-14T12:36:33Z: rustc_mir::transform::const_prop: ConstProp starting for DefId(0/0:4 ~ test[317d]::main[0])\nTRACE 2019-05-14T12:36:33Z: rustc_mir::transform::const_prop: visit_statement: StorageLive(_1)\nTRACE 2019-05-14T12:36:33Z: rustc_mir::transform::const_prop: visit_statement: _1 = const 1i32 as u32 (Misc)\nTRACE 2019-05-14T12:36:33Z: rustc_mir::transform::const_prop: checking whether OpTy { op: Indirect(MemPlace { ptr: Ptr(Pointer { alloc_id: AllocId(0), offset: Size { raw: 0 }, tag: () }), align: Align { pow2: 2 }, meta: None }), layout: TyLayout { ty: u32, details: LayoutDetails { variants: Single { index: 0 }, fields: Union(0), abi: Scalar(Scalar { value: Int(I32, false), valid_range: 0..=4294967295 }), align: AbiAndPrefAlign { abi: Align { pow2: 2 }, pref: Align { pow2: 2 } }, size: Size { raw: 4 } } } } can be stored to _1\nTRACE 2019-05-14T12:36:33Z: rustc_mir::transform::const_prop: visit_constant: const 1i32\nTRACE 2019-05-14T12:36:33Z: rustc_mir::transform::const_prop: visit_statement: StorageLive(_3)\nTRACE 2019-05-14T12:36:33Z: rustc_mir::transform::const_prop: visit_statement: _3 = _1\nTRACE 2019-05-14T12:36:33Z: rustc_mir::transform::const_prop: visit_constant: const read\nTRACE 2019-05-14T12:36:33Z: rustc_mir::transform::const_prop: visit_statement: StorageDead(_3)\nTRACE 2019-05-14T12:36:33Z: rustc_mir::transform::const_prop: visit_statement: _0 = ()\nTRACE 2019-05-14T12:36:33Z: rustc_mir::transform::const_prop: visit_statement: StorageDead(_1)\nTRACE 2019-05-14T12:36:33Z: rustc_mir::transform::const_prop: ConstProp done for DefId(0/0:4 ~ test[317d]::main[0])\nTRACE 2019-05-14T12:36:33Z: rustc_mir::transform::const_prop: ConstProp starting for DefId(0/0:3 ~ test[317d]::read[0])\nTRACE 2019-05-14T12:36:33Z: rustc_mir::transform::const_prop: visit_statement: _0 = ()\nTRACE 2019-05-14T12:36:33Z: rustc_mir::transform::const_prop: ConstProp done for DefId(0/0:3 ~ test[317d]::read[0])\n</pre></div>",
        "id": 165618030,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557837407
    },
    {
        "content": "<p><code>debug-assertions = true</code> in my config.toml</p>",
        "id": 165618059,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557837441
    },
    {
        "content": "<p>oh, ignore my example! that was just a check</p>",
        "id": 165618065,
        "sender_full_name": "oli",
        "timestamp": 1557837446
    },
    {
        "content": "<p>(I've got to run unfortunately)</p>",
        "id": 165618066,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557837448
    },
    {
        "content": "<p>what's the output on your code?</p>",
        "id": 165618071,
        "sender_full_name": "oli",
        "timestamp": 1557837452
    },
    {
        "content": "<p>no prob! cu</p>",
        "id": 165618079,
        "sender_full_name": "oli",
        "timestamp": 1557837462
    },
    {
        "content": "<p>The MIR output</p>",
        "id": 165618080,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557837462
    },
    {
        "content": "<p>?</p>",
        "id": 165618085,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557837467
    },
    {
        "content": "<p>No, that you already pasted</p>",
        "id": 165618088,
        "sender_full_name": "oli",
        "timestamp": 1557837472
    },
    {
        "content": "<p>the trace</p>",
        "id": 165618089,
        "sender_full_name": "oli",
        "timestamp": 1557837474
    },
    {
        "content": "<p>oh I'm stupid</p>",
        "id": 165618138,
        "sender_full_name": "oli",
        "timestamp": 1557837490
    },
    {
        "content": "<p>ignore me, you posted everything</p>",
        "id": 165618142,
        "sender_full_name": "oli",
        "timestamp": 1557837495
    },
    {
        "content": "<p>I'll look into it</p>",
        "id": 165618147,
        "sender_full_name": "oli",
        "timestamp": 1557837499
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> and <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>!</p>",
        "id": 165618156,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557837519
    },
    {
        "content": "<p>ttyl</p>",
        "id": 165618157,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557837521
    },
    {
        "content": "<p>So I have no clue why it isn't working. We'll need some more debug output. <a href=\"https://github.com/rust-lang/rust/blob/b92b1a76e175f396d7986177d0a2d5907bbba888/src/librustc_mir/transform/const_prop.rs#L547\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/b92b1a76e175f396d7986177d0a2d5907bbba888/src/librustc_mir/transform/const_prop.rs#L547\">https://github.com/rust-lang/rust/blob/b92b1a76e175f396d7986177d0a2d5907bbba888/src/librustc_mir/transform/const_prop.rs#L547</a> and all other places setting <code>can_const_prop</code> to false should emit a <code>trace</code> with the <code>local</code> and the  reason</p>",
        "id": 165620936,
        "sender_full_name": "oli",
        "timestamp": 1557839786
    },
    {
        "content": "<p>So <a href=\"https://github.com/rust-lang/rust/blob/b92b1a76e175f396d7986177d0a2d5907bbba888/src/librustc_mir/transform/const_prop.rs#L527\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/b92b1a76e175f396d7986177d0a2d5907bbba888/src/librustc_mir/transform/const_prop.rs#L527\">https://github.com/rust-lang/rust/blob/b92b1a76e175f396d7986177d0a2d5907bbba888/src/librustc_mir/transform/const_prop.rs#L527</a> too</p>",
        "id": 165620982,
        "sender_full_name": "oli",
        "timestamp": 1557839830
    },
    {
        "content": "<p>From your debug trace we hit the line before <a href=\"https://github.com/rust-lang/rust/blob/b92b1a76e175f396d7986177d0a2d5907bbba888/src/librustc_mir/transform/const_prop.rs#L588\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/b92b1a76e175f396d7986177d0a2d5907bbba888/src/librustc_mir/transform/const_prop.rs#L588\">https://github.com/rust-lang/rust/blob/b92b1a76e175f396d7986177d0a2d5907bbba888/src/librustc_mir/transform/const_prop.rs#L588</a> but never the one after</p>",
        "id": 165621127,
        "sender_full_name": "oli",
        "timestamp": 1557839947
    },
    {
        "content": "<p>I can add some of those traces when I get back home tonight</p>",
        "id": 165621460,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557840180
    },
    {
        "content": "<p>I've also seen some things like:</p>\n<div class=\"codehilite\"><pre><span></span>_2 = const 1i32;\n_3 = move _2;\n_4 = move _3;\n</pre></div>\n\n\n<p>defeat const prop.</p>",
        "id": 165621610,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557840263
    },
    {
        "content": "<p>In some situations <code>_3</code> will be <code>can_const_prop = false</code></p>",
        "id": 165621655,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557840303
    },
    {
        "content": "<p>if <code>_3</code> is written twice or a variable, then that is ok</p>",
        "id": 165623162,
        "sender_full_name": "oli",
        "timestamp": 1557841346
    },
    {
        "content": "<p>we are only const propagating temporaries atm</p>",
        "id": 165623174,
        "sender_full_name": "oli",
        "timestamp": 1557841358
    },
    {
        "content": "<p>hmm... variables that are only ever written once should be ok, too. I just have a feeling I tried that before and realized there's some odd way it doesn't work</p>",
        "id": 165623290,
        "sender_full_name": "oli",
        "timestamp": 1557841451
    },
    {
        "content": "<p>maybe <code>let x = if true { 42 } else { 43 };</code>? not sure</p>",
        "id": 165623317,
        "sender_full_name": "oli",
        "timestamp": 1557841478
    },
    {
        "content": "<p>I have a change locally that improves some of that which I think is ok but would have to be reviewed carefully.</p>",
        "id": 165623527,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557841630
    },
    {
        "content": "<p>It doesn't break any tests though</p>",
        "id": 165623535,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557841638
    },
    {
        "content": "<p>yea, we should do that in a separate PR</p>",
        "id": 165623572,
        "sender_full_name": "oli",
        "timestamp": 1557841670
    },
    {
        "content": "<p>same thing with this weird issue around casts</p>",
        "id": 165623628,
        "sender_full_name": "oli",
        "timestamp": 1557841684
    },
    {
        "content": "<p>Regarding the conversion method, should I move that from <code>const_eval.rs</code> to <code>eval_context.rs</code> where <code>InterpretCtx</code> lives? Or should I just make it <code>pub</code> so that it can be called from the conversion method?</p>",
        "id": 165623930,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557841917
    },
    {
        "content": "<p>I thought you created that method in <code>transforms/const_prop.rs</code>?</p>",
        "id": 165624215,
        "sender_full_name": "oli",
        "timestamp": 1557842107
    },
    {
        "content": "<p>we may be talking about different conversion methods :D</p>",
        "id": 165624236,
        "sender_full_name": "oli",
        "timestamp": 1557842130
    },
    {
        "content": "<p>Yeah, I think so lol</p>",
        "id": 165624245,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557842136
    },
    {
        "content": "<p>the ones in <code>const_eval.rs</code> are overkill</p>",
        "id": 165624257,
        "sender_full_name": "oli",
        "timestamp": 1557842144
    },
    {
        "content": "<blockquote>\n<p>Then you can add a call to <code>ecx.validate_operand(op, vec![], Some(&amp;mut RefTracking::new(op)), /*const_mode*/true)?;</code> to the conversion method.</p>\n</blockquote>",
        "id": 165624264,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557842152
    },
    {
        "content": "<p>Did you mean a new conversion method?</p>",
        "id": 165624268,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557842157
    },
    {
        "content": "<p>Or the stuff I had added in <code>const_prop</code>?</p>",
        "id": 165624327,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557842167
    },
    {
        "content": "<p>I mean the <code>Scalar</code> -&gt; <code>ty::Const</code> you wrote in <code>const_prop</code></p>",
        "id": 165624336,
        "sender_full_name": "oli",
        "timestamp": 1557842176
    },
    {
        "content": "<p>Ah ok</p>",
        "id": 165624349,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557842183
    },
    {
        "content": "<p>just validate the <code>OpTy</code> directly and do your conversion afterwards</p>",
        "id": 165624365,
        "sender_full_name": "oli",
        "timestamp": 1557842194
    },
    {
        "content": "<p>Ok</p>",
        "id": 165624405,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557842223
    },
    {
        "content": "<p>I'm not sure what you meant here then: <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/const.20propagation/near/165613905\" title=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/const.20propagation/near/165613905\">https://rust-lang.zulipchat.com/#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/const.20propagation/near/165613905</a></p>",
        "id": 165624419,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557842233
    },
    {
        "content": "<p>that was one of the options. And not my favourite one ^^</p>",
        "id": 165624449,
        "sender_full_name": "oli",
        "timestamp": 1557842259
    },
    {
        "content": "<p>Ok got it</p>",
        "id": 165624462,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557842266
    },
    {
        "content": "<p>Calling <code>ecx.validate_operand</code> from the <code>Scalar</code> -&gt; <code>Const</code> function in <code>const_prop</code> should be easy enough then</p>",
        "id": 165624568,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557842323
    },
    {
        "content": "<p>The reason why <code>const 1i32 as u32 (Misc);</code> doesn't get const-propagates is because it gets evaluated to an <code>Indirect</code> which <code>replace_with_const</code> doesn't handle:</p>\n<div class=\"codehilite\"><pre><span></span>TRACE 2019-05-15T11:58:05Z: rustc_mir::transform::const_prop: storing OpTy { op: Indirect(MemPlace { ptr: Ptr(Pointer { alloc_id: AllocId(0), offset: Size { raw: 0 }, tag: () }), align: Align { pow2: 2 }, meta: None }), layout: TyLayout { ty: u32, details: LayoutDetails { variants: Single { index: 0 }, fields: Union(0), abi: Scalar(Scalar { value: Int(I32, false), valid_range: 0..=4294967295 }), align: AbiAndPrefAlign { abi: Align { pow2: 2 }, pref: Align { pow2: 2 } }, size: Size { raw: 4 } } } } to _2\n</pre></div>",
        "id": 165707831,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557921677
    },
    {
        "content": "<p>ha! good catch</p>",
        "id": 165807034,
        "sender_full_name": "oli",
        "timestamp": 1558011566
    },
    {
        "content": "<p>I don't think anything speaks against handling <code>Indirect</code> by just creating a <code>ByRef</code> constant</p>",
        "id": 165807058,
        "sender_full_name": "oli",
        "timestamp": 1558011593
    },
    {
        "content": "<p>oh, maybe something does</p>",
        "id": 165807075,
        "sender_full_name": "oli",
        "timestamp": 1558011602
    },
    {
        "content": "<p>heh, this can be interesting</p>",
        "id": 165807115,
        "sender_full_name": "oli",
        "timestamp": 1558011609
    },
    {
        "content": "<p>I have written everything very defensively, so it should work, but I may have forgotten some places</p>",
        "id": 165807137,
        "sender_full_name": "oli",
        "timestamp": 1558011632
    },
    {
        "content": "<p>So if the <code>Indirect</code> doesn't point to the start of an allocation, we may run into trouble down the road</p>",
        "id": 165807162,
        "sender_full_name": "oli",
        "timestamp": 1558011651
    },
    {
        "content": "<p>I mean ideally we would not even create a duplicate of the allocation in llvm, but just create the const allocation and point to the sub-part of it</p>",
        "id": 165807217,
        "sender_full_name": "oli",
        "timestamp": 1558011699
    },
    {
        "content": "<p>oh, that may already work (the deduplication in llvm, not sure about the pointing at the right place)</p>",
        "id": 165807236,
        "sender_full_name": "oli",
        "timestamp": 1558011721
    },
    {
        "content": "<p>Ok. I can look into handling <code>Indirect</code> soon-ish.</p>",
        "id": 165809022,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558013081
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/60597\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60597\">#60597</a> is ready for review again I believe.</p>",
        "id": 165809040,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558013092
    },
    {
        "content": "<p>Thanks oli!</p>",
        "id": 165816997,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558018131
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I'm not sure what RFC <a href=\"https://github.com/rust-lang/rust/pull/60745#issuecomment-493735645\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60745#issuecomment-493735645\">your comment</a> is referring to but I think changing the <code>SwitchInt</code> test to call a function other than <code>std::process:exit()</code> should fix the build error on wasm.</p>",
        "id": 166039747,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558299206
    },
    {
        "content": "<p>lolwat, sorry. I commented on the wrong PR</p>",
        "id": 166039804,
        "sender_full_name": "oli",
        "timestamp": 1558299249
    },
    {
        "content": "<p>sorry, removed the comment and commented on the correct PR</p>",
        "id": 166039833,
        "sender_full_name": "oli",
        "timestamp": 1558299325
    },
    {
        "content": "<p>E-too-many-tabs</p>",
        "id": 166039835,
        "sender_full_name": "oli",
        "timestamp": 1558299329
    },
    {
        "content": "<p>Haha I figured :)</p>",
        "id": 166039991,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558299597
    },
    {
        "content": "<p>You should const prop into <code>Yield</code> terminators too. Just repeating here since github likes to hide comments</p>",
        "id": 166040624,
        "sender_full_name": "Zoxc",
        "timestamp": 1558300495
    },
    {
        "content": "<p>hmm curious. I would have assumed <code>Yield</code> to do the same thing that <code>return</code> does and just write to a magic local before the terminator</p>",
        "id": 166040820,
        "sender_full_name": "oli",
        "timestamp": 1558300796
    },
    {
        "content": "<p>Nah, it's more source code like. Not sure why we use Pascal style returns in MIR =P</p>",
        "id": 166040962,
        "sender_full_name": "Zoxc",
        "timestamp": 1558300990
    },
    {
        "content": "<p>because it allows some optimizations like filling in the return value element wise instead of creating a local, filling that in and copying all over at once in the return</p>",
        "id": 166042719,
        "sender_full_name": "oli",
        "timestamp": 1558303808
    },
    {
        "content": "<p>the same should go for yields</p>",
        "id": 166042725,
        "sender_full_name": "oli",
        "timestamp": 1558303814
    },
    {
        "content": "<p>It would probably optimize to the same code post-transformation anyway</p>",
        "id": 166043225,
        "sender_full_name": "Zoxc",
        "timestamp": 1558304644
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> Do you have an example which generates <code>Yield</code>s? Whenever I try it, I just get MIR that's already had the <code>Yield</code> lowered: <a href=\"https://gist.github.com/wesleywiser/8af2517dfa5254cd226b8ae6631266e7\" target=\"_blank\" title=\"https://gist.github.com/wesleywiser/8af2517dfa5254cd226b8ae6631266e7\">https://gist.github.com/wesleywiser/8af2517dfa5254cd226b8ae6631266e7</a></p>",
        "id": 166053587,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558322767
    },
    {
        "content": "<p>You'll have to run <code>ConstProp</code> before the transform</p>",
        "id": 166053671,
        "sender_full_name": "Zoxc",
        "timestamp": 1558322982
    },
    {
        "content": "<p>Oh, ok. I see</p>",
        "id": 166053728,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558323034
    },
    {
        "content": "<p>I think it was moved up due to an issue with one of the later passes</p>",
        "id": 166053744,
        "sender_full_name": "Zoxc",
        "timestamp": 1558323071
    },
    {
        "content": "<p>The commit which added the Deaggregator moved it</p>",
        "id": 166053796,
        "sender_full_name": "Zoxc",
        "timestamp": 1558323172
    },
    {
        "content": "<p>hmm... we'd have to run <code>ConstProp</code> multiple times then or move const qualif also before the generator lowering</p>",
        "id": 166068447,
        "sender_full_name": "oli",
        "timestamp": 1558342948
    },
    {
        "content": "<p>because <code>ConstProp</code> can't run before <code>const_qualif</code></p>",
        "id": 166068454,
        "sender_full_name": "oli",
        "timestamp": 1558342971
    },
    {
        "content": "<p><code>const_qualif</code> is a guaranteed optimization (wrt promotion)</p>",
        "id": 166068470,
        "sender_full_name": "oli",
        "timestamp": 1558342991
    },
    {
        "content": "<p>const prop may mess that up</p>",
        "id": 166068489,
        "sender_full_name": "oli",
        "timestamp": 1558343008
    },
    {
        "content": "<p>Have you tested whether always running const prop would help compile times? i.e. also for debug?</p>",
        "id": 166125585,
        "sender_full_name": "centril",
        "timestamp": 1558391799
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> Yes: <a href=\"https://perf.rust-lang.org/compare.html?start=5f1924c9922c640108d2225d6b68e69e589b94ae&amp;end=7f66c41c4e89b51c8b68f7019cad02c0f46cd1e1\" target=\"_blank\" title=\"https://perf.rust-lang.org/compare.html?start=5f1924c9922c640108d2225d6b68e69e589b94ae&amp;end=7f66c41c4e89b51c8b68f7019cad02c0f46cd1e1\">https://perf.rust-lang.org/compare.html?start=5f1924c9922c640108d2225d6b68e69e589b94ae&amp;end=7f66c41c4e89b51c8b68f7019cad02c0f46cd1e1</a></p>",
        "id": 166126255,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558392419
    },
    {
        "content": "<p>cool</p>",
        "id": 166126277,
        "sender_full_name": "centril",
        "timestamp": 1558392450
    },
    {
        "content": "<p>Why does it help check builds?</p>",
        "id": 166126626,
        "sender_full_name": "Zoxc",
        "timestamp": 1558392827
    },
    {
        "content": "<p>I assume it's because CTFE tests run less code?</p>",
        "id": 166126873,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1558393087
    }
]