[
    {
        "content": "<p>Hi! About the constant propagation: I have a large generic that can benefit from it a lot but post-instantiation. Is this something that the new pass will still improve? Or does it only work pre-instantiation?</p>",
        "id": 182408292,
        "sender_full_name": "Giovanni Bajo",
        "timestamp": 1575337007
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252458\">@Giovanni Bajo</span> MIR optimizations are currently just pre-instantiation so it's unlikely to help. If you can provide a sample though, we can test and verify for sure.</p>",
        "id": 182409463,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1575338467
    },
    {
        "content": "<p>Actually, let me walk some of that back. Even in a generic function, we can sometimes still perform optimizations in a generic context. If you can link to the code, I'd be happy to take a look. That may also give us some ideas for future improvements or other optimizations.</p>",
        "id": 182409935,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1575339122
    },
    {
        "content": "<p>Also once it gets inlined into a less generic context we can optimize there</p>",
        "id": 182421982,
        "sender_full_name": "oli",
        "timestamp": 1575357097
    },
    {
        "content": "<p>[]</p>",
        "id": 182612860,
        "sender_full_name": "Giovanni Bajo",
        "timestamp": 1575503281
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"252458\">Giovanni Bajo</span> MIR optimizations are currently just pre-instantiation so it's unlikely to help. If you can provide a sample though, we can test and verify for sure.</p>\n</blockquote>\n<p>The code is a MIPS64 interpreter (part of my Nintendo64 emulator). The MIPS architecture consists of several generation where new opcodes were added (and sometimes removed) over the years. The interpreter core is a generic parametrized over a trait which describes the architecture. Since each architecture can basically disable specific opcodes, and (for performance reasons too long to explain) I don't have an enum representing each opcode, I ended up using a function called with literal strings.</p>\n<p>Example of opcode:<br>\n<a href=\"https://github.com/rasky/r64emu/blob/74c82c6b0e90c2efd7fbe613944f0fd9807ec90b/emu/cpu/mips64/src/cpu.rs#L314\" target=\"_blank\" title=\"https://github.com/rasky/r64emu/blob/74c82c6b0e90c2efd7fbe613944f0fd9807ec90b/emu/cpu/mips64/src/cpu.rs#L314\">https://github.com/rasky/r64emu/blob/74c82c6b0e90c2efd7fbe613944f0fd9807ec90b/emu/cpu/mips64/src/cpu.rs#L314</a></p>\n<p>Example of architecture disabling opcodes:<br>\n<a href=\"https://github.com/rasky/r64emu/blob/74c82c6b0e90c2efd7fbe613944f0fd9807ec90b/emu/cpu/mips64/src/arch.rs#L55\" target=\"_blank\" title=\"https://github.com/rasky/r64emu/blob/74c82c6b0e90c2efd7fbe613944f0fd9807ec90b/emu/cpu/mips64/src/arch.rs#L55\">https://github.com/rasky/r64emu/blob/74c82c6b0e90c2efd7fbe613944f0fd9807ec90b/emu/cpu/mips64/src/arch.rs#L55</a></p>\n<p>All the has_op function called are removed by LLVM optimizer, but I'm sure it generates lots of code that is then removed.</p>",
        "id": 182613099,
        "sender_full_name": "Giovanni Bajo",
        "timestamp": 1575503443
    }
]