[
    {
        "content": "<p>Hello! I've suddenly got a lot of time on my hands and I'd really like to get more involved in rustc. The rustc dev guide suggested joining a wg and mir opt is something I'm particularly interested in (although my knowledge of mir is very limited). Are there any issues that are a good place for me to start?</p>",
        "id": 200087611,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1591617803
    },
    {
        "content": "<p>Welcome! This one I filed a few days ago should be fairly straightforward: <a href=\"https://github.com/rust-lang/rust/issues/72959\">https://github.com/rust-lang/rust/issues/72959</a></p>",
        "id": 200087852,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1591617971
    },
    {
        "content": "<p>Awesome! I'll have a look :)</p>",
        "id": 200087940,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1591618023
    },
    {
        "content": "<p>Something else that would be fairly useful would be documenting the MIR invariants that the validator and Miri are enforcing as doc comments on the MIR types themselves</p>",
        "id": 200089008,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1591618745
    },
    {
        "content": "<p>I can definitely have a look at that as well</p>",
        "id": 200089213,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1591618882
    },
    {
        "content": "<p>For unwind blocks I think this is already the case</p>",
        "id": 200089299,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1591618936
    },
    {
        "content": "<p>(As in the invariant is documented, but it's not yet enforced)</p>",
        "id": 200089326,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1591618962
    },
    {
        "content": "<p>I had a quick look (<a href=\"https://github.com/rust-lang/rust/issues/73133\">#73133</a>) some feedback on how to write tests/if this is the right idea would be amazing</p>",
        "id": 200092895,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1591621004
    },
    {
        "content": "<p>unfortunately we have no way to generate arbitrary MIR, but we'd like to have: <a href=\"https://github.com/rust-lang/miri/issues/196\">https://github.com/rust-lang/miri/issues/196</a></p>",
        "id": 200103032,
        "sender_full_name": "oli",
        "timestamp": 1591625752
    },
    {
        "content": "<p>without a way to generate abitrary MIR, you can't test for broken MIR, as rustc should not be emitting broken MIR</p>",
        "id": 200103107,
        "sender_full_name": "oli",
        "timestamp": 1591625769
    },
    {
        "content": "<p>note that your validation checks seem to have found a bug in the MIR building phase</p>",
        "id": 200103227,
        "sender_full_name": "oli",
        "timestamp": 1591625829
    },
    {
        "content": "<p>You can also set <code>RUSTFLAGS_NOT_BOOTSTRAP=-Zvalidate-mir</code> to run the validator after every MIR transformation. This should give you a good idea of whether some pass produces broken MIR.</p>",
        "id": 200103502,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1591625935
    },
    {
        "content": "<p>Ok, thanks a lot! I'll investigate the breakage (just want to check should all edges between cleanup blocks be unwind?)</p>",
        "id": 200108713,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1591628059
    },
    {
        "content": "<p>No, they can also have normal edges</p>",
        "id": 200109055,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1591628187
    },
    {
        "content": "<p>But once in a cleanup block you can never go back to a non-cleanup block</p>",
        "id": 200109086,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1591628201
    },
    {
        "content": "<p>Ok got it!</p>",
        "id": 200109257,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1591628270
    },
    {
        "content": "<p>With that relaxation the validation seems to pass fine</p>",
        "id": 200109797,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1591628437
    },
    {
        "content": "<p>Edges between cleanup blocks should only be normal edges.</p>",
        "id": 200109846,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1591628458
    },
    {
        "content": "<p>Ah, right</p>",
        "id": 200109946,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1591628496
    },
    {
        "content": "<p>Panicking in cleanup aborts</p>",
        "id": 200110021,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1591628519
    },
    {
        "content": "<p>should this use a dataflow algorithm?</p>",
        "id": 200110161,
        "sender_full_name": "oli",
        "timestamp": 1591628553
    },
    {
        "content": "<p>any custom algorithm would have to basically replicate dataflow I think</p>",
        "id": 200110226,
        "sender_full_name": "oli",
        "timestamp": 1591628584
    },
    {
        "content": "<p>We mark which blocks are cleanup. There's no need for dataflow.</p>",
        "id": 200110428,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1591628649
    },
    {
        "content": "<p>Ok that's an easy fix - I don't think it needs data-flow</p>",
        "id": 200110433,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1591628652
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Joining/near/200103502\">said</a>:</p>\n<blockquote>\n<p>You can also set <code>RUSTFLAGS_NOT_BOOTSTRAP=-Zvalidate-mir</code> to run the validator after every MIR transformation. This should give you a good idea of whether some pass produces broken MIR.</p>\n</blockquote>\n<p>oh <em>that</em>s how you do that :D</p>",
        "id": 201474493,
        "sender_full_name": "RalfJ",
        "timestamp": 1592653661
    }
]