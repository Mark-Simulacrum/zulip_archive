[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> we have MIR 2.0 next steps meeting in ~ 40 mins</p>",
        "id": 185014270,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1578406875
    },
    {
        "content": "<p>the current document is located at <a href=\"https://hackmd.io/aQ8y79EfS72VCUoEmzLQpg\" target=\"_blank\" title=\"https://hackmd.io/aQ8y79EfS72VCUoEmzLQpg\">https://hackmd.io/aQ8y79EfS72VCUoEmzLQpg</a></p>",
        "id": 185015262,
        "sender_full_name": "oli",
        "timestamp": 1578407488
    },
    {
        "content": "<p>Hey everyone</p>",
        "id": 185018231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578409233
    },
    {
        "content": "<p>hi Niko</p>",
        "id": 185018284,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1578409275
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> seems like is time, hi everyone!</p>",
        "id": 185018293,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1578409284
    },
    {
        "content": "<p>hey</p>",
        "id": 185018301,
        "sender_full_name": "oli",
        "timestamp": 1578409291
    },
    {
        "content": "<p>as <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> pointed out we have <a href=\"https://hackmd.io/aQ8y79EfS72VCUoEmzLQpg\" target=\"_blank\" title=\"https://hackmd.io/aQ8y79EfS72VCUoEmzLQpg\">https://hackmd.io/aQ8y79EfS72VCUoEmzLQpg</a></p>",
        "id": 185018329,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1578409305
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> is on mobile, so flaky around zulip</p>",
        "id": 185018332,
        "sender_full_name": "oli",
        "timestamp": 1578409306
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 185018354,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1578409320
    },
    {
        "content": "<p>I think there were other documents but this should contain everything at least all the stuff I know about</p>",
        "id": 185018428,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1578409340
    },
    {
        "content": "<p>I tried to link the other documents at the bottom</p>",
        "id": 185018458,
        "sender_full_name": "oli",
        "timestamp": 1578409360
    },
    {
        "content": "<p>is there anything else related to MIR 2.0 that's not included in the document?</p>",
        "id": 185018464,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1578409366
    },
    {
        "content": "<p>but yea, this is the current \"active\" plan</p>",
        "id": 185018468,
        "sender_full_name": "oli",
        "timestamp": 1578409370
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 185018478,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1578409376
    },
    {
        "content": "<p>ok, I'm going to look it over real quick</p>",
        "id": 185018525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578409398
    },
    {
        "content": "<p>so one of the last pieces that is not already merged is <a href=\"https://github.com/rust-lang/rust/pull/67000/\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/67000/\">https://github.com/rust-lang/rust/pull/67000/</a></p>",
        "id": 185018529,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1578409402
    },
    {
        "content": "<p>of these, I feel like removing deref + index from the list of projections is \"different in kind\" from the others</p>",
        "id": 185018548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578409431
    },
    {
        "content": "<p>i.e., interning and things are basically perf optimizations</p>",
        "id": 185018561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578409441
    },
    {
        "content": "<p>with that we will have promoted being constants instead of statics, we won't have statics anymore, and neither PlaceBase, so Place would be Local + projections</p>",
        "id": 185018562,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1578409441
    },
    {
        "content": "<p>but don't have a \"dramatic\" effect on MIR</p>",
        "id": 185018618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578409453
    },
    {
        "content": "<p>it seemed like <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> that <a href=\"https://github.com/rust-lang/rust/issues/67000\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67000\">#67000</a> had a few implications</p>",
        "id": 185018674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578409491
    },
    {
        "content": "<p>yeah maybe we should define what's worth discussing first but my guess is removing deref, index and field?</p>",
        "id": 185018678,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1578409493
    },
    {
        "content": "<p>I'm thinking of the question of what's a legal static etc</p>",
        "id": 185018681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578409499
    },
    {
        "content": "<p>and <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>'s soundness concerns around promotion</p>",
        "id": 185018700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578409509
    },
    {
        "content": "<p>but I guess that's probably somewhat orthogonal -- i.e., we already have the behavior in question that is sort of dubious</p>",
        "id": 185018725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578409524
    },
    {
        "content": "<p>what does \"Formalizing out parameters (or args passed by pointer because they are too large)\" mean?</p>",
        "id": 185018755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578409546
    },
    {
        "content": "<blockquote>\n<p>it seemed like <span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> that <a href=\"https://github.com/rust-lang/rust/issues/67000\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67000\">#67000</a> had a few implications</p>\n</blockquote>\n<p>what do you mean? I guess you're talking about some discussion that I may have missed</p>",
        "id": 185018757,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1578409549
    },
    {
        "content": "<p>yeah, perhaps, there was an issue, I'm trying to find it</p>",
        "id": 185018840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578409590
    },
    {
        "content": "<blockquote>\n<p>what does \"Formalizing out parameters (or args passed by pointer because they are too large)\" mean?</p>\n</blockquote>\n<p>this is from the last all hands, we talked about teaching MIR about things like writing a value directly into the parent frame (and into fields of things no less)</p>",
        "id": 185018876,
        "sender_full_name": "oli",
        "timestamp": 1578409626
    },
    {
        "content": "<p>I see</p>",
        "id": 185018903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578409648
    },
    {
        "content": "<p>I don't remember the details, but it got pretty funky around enum variants</p>",
        "id": 185018908,
        "sender_full_name": "oli",
        "timestamp": 1578409652
    },
    {
        "content": "<p>one thing that I don't see on the list</p>",
        "id": 185018931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578409681
    },
    {
        "content": "<p>would be modifying MIR to be more easily edited</p>",
        "id": 185018975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578409689
    },
    {
        "content": "<p>e.g., convering from vectors and things identified by index</p>",
        "id": 185018985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578409698
    },
    {
        "content": "<p>basically all the NRVO stuff under <a href=\"https://paper.dropbox.com/doc/Topic-MIR-2.0-and-MIR-Optimizations--Ar_DezRvHY6zSzu1gCqSwicbAg-BwHR7kOhxDwL6vuAUoSTQ#:uid=104340020150096374938901&amp;h2=NRVO-Discussion\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Topic-MIR-2.0-and-MIR-Optimizations--Ar_DezRvHY6zSzu1gCqSwicbAg-BwHR7kOhxDwL6vuAUoSTQ#:uid=104340020150096374938901&amp;h2=NRVO-Discussion\">https://paper.dropbox.com/doc/Topic-MIR-2.0-and-MIR-Optimizations--Ar_DezRvHY6zSzu1gCqSwicbAg-BwHR7kOhxDwL6vuAUoSTQ#:uid=104340020150096374938901&amp;h2=NRVO-Discussion</a></p>",
        "id": 185018995,
        "sender_full_name": "oli",
        "timestamp": 1578409708
    },
    {
        "content": "<p>into \"linked lists\" (perhaps threaded by index through a vector)</p>",
        "id": 185018996,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578409708
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> can you add that to the list maybe?</p>",
        "id": 185019016,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1578409732
    },
    {
        "content": "<blockquote>\n<p>I don't remember the details, but it got pretty funky around enum variants</p>\n</blockquote>\n<p>this makes me wonder again about trying to separate out \"MIR for optimization\" from \"MIR for analysis\" more clearly</p>",
        "id": 185019050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578409767
    },
    {
        "content": "<p>actually the stuff about removing projections and so forth has the same question</p>",
        "id": 185019065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578409782
    },
    {
        "content": "<p>hmm right, we talked about this at the all hands, too. I thought that it was still not clear whether we'd want that or whether we'd want transactional changes</p>",
        "id": 185019067,
        "sender_full_name": "oli",
        "timestamp": 1578409783
    },
    {
        "content": "<p>I don't really know what \"transactional\" means</p>",
        "id": 185019076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578409792
    },
    {
        "content": "<p>it sounds like extra complexity</p>",
        "id": 185019090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578409797
    },
    {
        "content": "<p>well, like with databases</p>",
        "id": 185019095,
        "sender_full_name": "oli",
        "timestamp": 1578409800
    },
    {
        "content": "<p>I mean I know what it <em>means</em></p>",
        "id": 185019099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578409802
    },
    {
        "content": "<p>where you can specifiy an atomic change</p>",
        "id": 185019146,
        "sender_full_name": "oli",
        "timestamp": 1578409807
    },
    {
        "content": "<p>right, I guess I am proposing a simpler variant</p>",
        "id": 185019168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578409819
    },
    {
        "content": "<p>where we just make MIR easier to mutate</p>",
        "id": 185019172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578409824
    },
    {
        "content": "<p>right</p>",
        "id": 185019180,
        "sender_full_name": "oli",
        "timestamp": 1578409827
    },
    {
        "content": "<p>and we write the code carefully :)</p>",
        "id": 185019181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578409828
    },
    {
        "content": "<p>heheh</p>",
        "id": 185019190,
        "sender_full_name": "oli",
        "timestamp": 1578409833
    },
    {
        "content": "<p>regardless it seems like a good \"first step\"</p>",
        "id": 185019217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578409853
    },
    {
        "content": "<p>that said, I guess <code>MirPatch</code> is some kind of transactional system?</p>",
        "id": 185019222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578409859
    },
    {
        "content": "<p>but it always struck me as an elaborate workaround for the fact that MIR is a PITA to edit</p>",
        "id": 185019234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578409868
    },
    {
        "content": "<p>yea</p>",
        "id": 185019250,
        "sender_full_name": "oli",
        "timestamp": 1578409884
    },
    {
        "content": "<p>I'm going to edit the hackmd slightly to break things into</p>",
        "id": 185019254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578409885
    },
    {
        "content": "<p>yeah I've added that to the list because I'm not sure if what was proposed is not covered by <code>MirPatch</code></p>",
        "id": 185019260,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1578409889
    },
    {
        "content": "<ul>\n<li>\"space optimizations and minor tweaks\"</li>\n</ul>",
        "id": 185019263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578409895
    },
    {
        "content": "<ul>\n<li>Improving the ergonomics of MIR &lt;-- I guess this is what I am talking about</li>\n</ul>",
        "id": 185019364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578409933
    },
    {
        "content": "<p>One thing that also came up is merging mir optimizations so not all of them repeat the entire visiting logic</p>",
        "id": 185019366,
        "sender_full_name": "oli",
        "timestamp": 1578409934
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> actually, what we did with the <code>extra_statements</code>, can't be done with <code>MirPatch</code>?</p>",
        "id": 185019372,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1578409939
    },
    {
        "content": "<p>yea but we didn't want to mingle improvements with reverts</p>",
        "id": 185019388,
        "sender_full_name": "oli",
        "timestamp": 1578409961
    },
    {
        "content": "<p>right</p>",
        "id": 185019405,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1578409978
    },
    {
        "content": "<ul>\n<li>Extending MIR to better support optimizations</li>\n</ul>\n<p>this covers removing deref/field/etc as well as formalizing out parameters</p>",
        "id": 185019408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578409980
    },
    {
        "content": "<blockquote>\n<p>One thing that also came up is merging mir optimizations so not all of them repeat the entire visiting logic</p>\n</blockquote>\n<p>merging how exactly?</p>",
        "id": 185019453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410033
    },
    {
        "content": "<p>like, in some \"automatic\" way?</p>",
        "id": 185019459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410038
    },
    {
        "content": "<p>or writing a \"meta patch\"?</p>",
        "id": 185019502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410045
    },
    {
        "content": "<p>yea, meta patch that merges them similar to how lints are merged</p>",
        "id": 185019514,
        "sender_full_name": "oli",
        "timestamp": 1578410056
    },
    {
        "content": "<p>so you walk and invoke methods on the pass depending on where you are instead of each pass walking the entire mir::Body</p>",
        "id": 185019535,
        "sender_full_name": "oli",
        "timestamp": 1578410083
    },
    {
        "content": "<p>I guess this then touches on the transactional thing</p>",
        "id": 185019597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410129
    },
    {
        "content": "<p>since if you are making edits</p>",
        "id": 185019614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410138
    },
    {
        "content": "<p>it's potentially strange to be \"editing\" at the same time?</p>",
        "id": 185019634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410148
    },
    {
        "content": "<p>that said</p>",
        "id": 185019636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410151
    },
    {
        "content": "<p>a lot of compiler's I've seen distinguish <em>peephole</em> optimizations</p>",
        "id": 185019643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410158
    },
    {
        "content": "<p>from other sorts</p>",
        "id": 185019647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410162
    },
    {
        "content": "<p>and peephole optimizations are 'chained' in this way</p>",
        "id": 185019691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410170
    },
    {
        "content": "<p>since they (by definition) require only very local context and tend also to sometimes build on one another</p>",
        "id": 185019707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410184
    },
    {
        "content": "<p>side note:</p>",
        "id": 185019719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410195
    },
    {
        "content": "<p>MIR inlining has come up a few times recently</p>",
        "id": 185019727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410201
    },
    {
        "content": "<p>as being of particular importance</p>",
        "id": 185019733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410208
    },
    {
        "content": "<p>yea, I think we're still not able to bootstrap with MIR inlining, but <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> has been working on getting rid of a few bugs relating to that</p>",
        "id": 185019808,
        "sender_full_name": "oli",
        "timestamp": 1578410271
    },
    {
        "content": "<p>I think I would propose that we focus on \"less dramatic stuff\" still </p>\n<ul>\n<li>space optimizations</li>\n<li>ergonomics of manipulating MIR</li>\n</ul>\n<p>If we were going to do anything more ambitious, I would think that simplifying projections might be it, and I still think the scheme I roughly described for that is probably best, but I don't really remember who I was talking with about it way back when</p>",
        "id": 185019875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410297
    },
    {
        "content": "<p>Hmm... it now says \"remove <code>field</code> from projections\", but why?</p>",
        "id": 185019949,
        "sender_full_name": "oli",
        "timestamp": 1578410362
    },
    {
        "content": "<p>(PS, I'm trying to edit <a href=\"https://hackmd.io/aQ8y79EfS72VCUoEmzLQpg?edit\" target=\"_blank\" title=\"https://hackmd.io/aQ8y79EfS72VCUoEmzLQpg?edit\">hackmd</a> to categorize and extend things)</p>",
        "id": 185019969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410380
    },
    {
        "content": "<p>isn't <code>field</code> just an offset</p>",
        "id": 185019972,
        "sender_full_name": "oli",
        "timestamp": 1578410381
    },
    {
        "content": "<blockquote>\n<p>Hmm... it now says \"remove <code>field</code> from projections\", but why?</p>\n</blockquote>\n<p>well I think that was the most extreme version, I don't know that it makes any sense</p>",
        "id": 185019989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410395
    },
    {
        "content": "<p>I think the most extreme version would just .. not have \"places\" really, just local variables in some sense</p>",
        "id": 185020059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410425
    },
    {
        "content": "<p>yea</p>",
        "id": 185020064,
        "sender_full_name": "oli",
        "timestamp": 1578410429
    },
    {
        "content": "<p>either all the way, or keep fields + const index together</p>",
        "id": 185020107,
        "sender_full_name": "oli",
        "timestamp": 1578410452
    },
    {
        "content": "<p>we may just want to collect statistics on this before we talk about the merit of either</p>",
        "id": 185020131,
        "sender_full_name": "oli",
        "timestamp": 1578410475
    },
    {
        "content": "<p>so one thought</p>",
        "id": 185020139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410485
    },
    {
        "content": "<p>the main reason to do this change</p>",
        "id": 185020143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410487
    },
    {
        "content": "<p>is to make advanced optimizations easier</p>",
        "id": 185020147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410493
    },
    {
        "content": "<p>the challenge is that it makes borrowck harder and sort of interferes w/ stacked borrows</p>",
        "id": 185020154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410511
    },
    {
        "content": "<p>potentially anyway</p>",
        "id": 185020159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410517
    },
    {
        "content": "<p>what I was going to say is that you could do it by a \"postprocessing\" step</p>",
        "id": 185020211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410528
    },
    {
        "content": "<p>it doesn't solve the stacked borrows part of thing, but that's still .. somewhat WIP</p>",
        "id": 185020222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410539
    },
    {
        "content": "<p>i.e., you can easily imagine walking down MIR as a peephole transformation and replacing deref projections etc with temporaries of the kind I described</p>",
        "id": 185020251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410567
    },
    {
        "content": "<p>right</p>",
        "id": 185020261,
        "sender_full_name": "oli",
        "timestamp": 1578410575
    },
    {
        "content": "<p>this would enable the <em>optimizations</em> at least without blocking on this other question</p>",
        "id": 185020267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410583
    },
    {
        "content": "<p>we could start out with adding such an optimization and moving it earlier and earlier until we can just remove the projection itself</p>",
        "id": 185020293,
        "sender_full_name": "oli",
        "timestamp": 1578410604
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> are you here?</p>",
        "id": 185020303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410613
    },
    {
        "content": "<blockquote>\n<p>we could start out with adding such an optimization and moving it earlier and earlier until we can just remove the projection itself</p>\n</blockquote>\n<p>maybe -- or maybe we never remove it</p>",
        "id": 185020315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410624
    },
    {
        "content": "<p>though I think a scheme where we build up \"complex projections\" in some way is actually reasonably nice</p>",
        "id": 185020413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410665
    },
    {
        "content": "<p>but it is definitely moving MIR closer to optimization and further from the \"ideal borrowck repr\"</p>",
        "id": 185020430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410684
    },
    {
        "content": "<p>I guess I could imagine just having a LIR for optimization</p>",
        "id": 185020450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410697
    },
    {
        "content": "<p>but the compilation time or memory costs of that may not be worthwhile</p>",
        "id": 185020476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410706
    },
    {
        "content": "<p>doesn't borrowck already have to handle all this because you can rewrite almost all logic where there are temporaries by introducing variables?</p>",
        "id": 185020489,
        "sender_full_name": "oli",
        "timestamp": 1578410713
    },
    {
        "content": "<p>no, that is very different from borrowck's perpsective</p>",
        "id": 185020548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410732
    },
    {
        "content": "<p>I'm not sure what you mean by temporaries</p>",
        "id": 185020555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410740
    },
    {
        "content": "<p>but Places are designed to be .. almost exactly the kinds of path that borrowck understands, modulo reasoning about indices and equality</p>",
        "id": 185020661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410780
    },
    {
        "content": "<p>(also I think we should rename Place to Path, but I guess that's neither here nor there)</p>",
        "id": 185020673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410791
    },
    {
        "content": "<p>one thing I will say about borrowck though</p>",
        "id": 185020694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410806
    },
    {
        "content": "<p>well <code>5 + 6 + 7</code> has a temporary local for <code>tmp = 5 + 6</code> which is then added via <code>tmp + 7</code>, and you can write this in user code. I thought except for some drop rules from mir building the behaviour was also the same in mir borrowck no matter whether you have temporaries or user defined locals</p>",
        "id": 185020720,
        "sender_full_name": "oli",
        "timestamp": 1578410819
    },
    {
        "content": "<p>yes, that's fine</p>",
        "id": 185020731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410824
    },
    {
        "content": "<p>and borrowck doesn't do any special reasoning about those</p>",
        "id": 185020740,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410830
    },
    {
        "content": "<blockquote>\n<p>the behaviour was also the same in mir borrowck no matter whether you have temporaries or user defined locals</p>\n</blockquote>\n<p>this is true -- but it can't be true for the temporaries we would be introducing for deref projections</p>",
        "id": 185020794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410855
    },
    {
        "content": "<p>let me give an example</p>",
        "id": 185020801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410859
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">foo</span><span class=\"p\">).</span><span class=\"n\">bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">foo</span><span class=\"p\">).</span><span class=\"n\">baz</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 185020829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410876
    },
    {
        "content": "<p>this type- and borrow-checks today</p>",
        "id": 185020887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410891
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">t0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">t0</span><span class=\"p\">.</span><span class=\"n\">bar</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">t1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"n\">bar</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 185020924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410916
    },
    {
        "content": "<p>this doesn't</p>",
        "id": 185020928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410919
    },
    {
        "content": "<p>hm right</p>",
        "id": 185020940,
        "sender_full_name": "oli",
        "timestamp": 1578410925
    },
    {
        "content": "<p>(not that introducing such a temporary makes all that much sense)</p>",
        "id": 185020950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410937
    },
    {
        "content": "<p>(in that <em>specific example</em>)</p>",
        "id": 185020963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410946
    },
    {
        "content": "<p>yea but it's what the compiler would do</p>",
        "id": 185020998,
        "sender_full_name": "oli",
        "timestamp": 1578410958
    },
    {
        "content": "<p>this is also the same problem for stacked borrows</p>",
        "id": 185021007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410962
    },
    {
        "content": "<p>yeah you get the idea</p>",
        "id": 185021017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410967
    },
    {
        "content": "<p>I mean now plausibly we could make borrowck smarter, and enable it to understand and accept that code</p>",
        "id": 185021040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410980
    },
    {
        "content": "<p>but it would be a pretty deep change</p>",
        "id": 185021046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410988
    },
    {
        "content": "<p>and it would have impact on stacked borrows etc</p>",
        "id": 185021051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578410993
    },
    {
        "content": "<p>(and, if we went too far, even invalidate I think some of the logic in libstd)</p>",
        "id": 185021114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411008
    },
    {
        "content": "<p>which is why I was thinking that we would rather have some kind of \"blessing\" concept</p>",
        "id": 185021137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411026
    },
    {
        "content": "<p>where you desugar e.g. <code>(*foo).bar</code> into</p>",
        "id": 185021166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411045
    },
    {
        "content": "<p>(a) creating the \"place value\" and then (b) accessing the place value</p>",
        "id": 185021201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411058
    },
    {
        "content": "<p>and place values can get built piece by piece but are not considered a borrow, just an inert pointer, until they are either \"loaded from\" or \"borrowed\"</p>",
        "id": 185021235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411081
    },
    {
        "content": "<p>and the borrow checker kind of tracks the path that a place value comes from</p>",
        "id": 185021243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411088
    },
    {
        "content": "<p>well... that's essentially what <span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> suggested with <code>Rvalue::DerefProjection</code> where you still do this in one step, but you can't use a projection as the place that you deref</p>",
        "id": 185021322,
        "sender_full_name": "oli",
        "timestamp": 1578411125
    },
    {
        "content": "<p>I don't think we can accept any restrictions</p>",
        "id": 185021345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411149
    },
    {
        "content": "<p>maybe I don't understand</p>",
        "id": 185021350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411151
    },
    {
        "content": "<p>but e.g. <code>*(*foo.bar).baz</code> etc is a valid path today</p>",
        "id": 185021365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411163
    },
    {
        "content": "<p>so we'd have primitives that are just what we need to keep the current behaviour but stop allowing a projection to have multiple derefs in one projection list</p>",
        "id": 185021379,
        "sender_full_name": "oli",
        "timestamp": 1578411171
    },
    {
        "content": "<p>and borrowck gets that?</p>",
        "id": 185021394,
        "sender_full_name": "oli",
        "timestamp": 1578411183
    },
    {
        "content": "<p>yes sure</p>",
        "id": 185021403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411190
    },
    {
        "content": "<p>oic</p>",
        "id": 185021407,
        "sender_full_name": "oli",
        "timestamp": 1578411194
    },
    {
        "content": "<p>wow</p>",
        "id": 185021422,
        "sender_full_name": "oli",
        "timestamp": 1578411204
    },
    {
        "content": "<p>like I said, a Place is designed to be exactly the kind of path borrowck understands, I don't really think we can simpify it</p>",
        "id": 185021433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411208
    },
    {
        "content": "<p>ok</p>",
        "id": 185021462,
        "sender_full_name": "oli",
        "timestamp": 1578411222
    },
    {
        "content": "<p>( but we could build it up piece by piece )</p>",
        "id": 185021463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411222
    },
    {
        "content": "<p>and that \"lowers\" (for optimization purposes) into pointer manipulation</p>",
        "id": 185021543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411247
    },
    {
        "content": "<p>yea makes sense</p>",
        "id": 185021564,
        "sender_full_name": "oli",
        "timestamp": 1578411259
    },
    {
        "content": "<p>but stacked borrows would still choke on it</p>",
        "id": 185021589,
        "sender_full_name": "oli",
        "timestamp": 1578411276
    },
    {
        "content": "<p>meaning we couldn't have miri run optimized code anymore</p>",
        "id": 185021605,
        "sender_full_name": "oli",
        "timestamp": 1578411286
    },
    {
        "content": "<p>well</p>",
        "id": 185021631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411301
    },
    {
        "content": "<p>that depends</p>",
        "id": 185021661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411305
    },
    {
        "content": "<p>i.e., if we had some notion of \"blessing\" a place value</p>",
        "id": 185021684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411318
    },
    {
        "content": "<p>maybe that is retained in the MIR but optimized out to a no-op at llvm generation time</p>",
        "id": 185021708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411334
    },
    {
        "content": "<p>I guess all I mean is</p>",
        "id": 185021724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411343
    },
    {
        "content": "<p>the <code>&amp;</code> that the user wrote might be special</p>",
        "id": 185021742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411354
    },
    {
        "content": "<p>and distinguished from the pointer manipulation that goes into constructing the path</p>",
        "id": 185021791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411363
    },
    {
        "content": "<p>and stacked borrows can likely still see that</p>",
        "id": 185021799,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411369
    },
    {
        "content": "<p>right</p>",
        "id": 185021801,
        "sender_full_name": "oli",
        "timestamp": 1578411373
    },
    {
        "content": "<blockquote>\n<p>meaning we couldn't have miri run optimized code anymore</p>\n</blockquote>\n<p>but yes this is why I think it takes us some design to get this right</p>",
        "id": 185021812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411382
    },
    {
        "content": "<p>tbh I'm finding the notation a bit hard to express, which is annoying</p>",
        "id": 185021819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411388
    },
    {
        "content": "<p>part of it is the C legacy of <code>*foo.bar</code> meaning \"load value from\" and <code>&amp;*foo.bar</code> meaning \"take address of\"</p>",
        "id": 185021850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411410
    },
    {
        "content": "<p>it makes it confusing to keep track of when a real load occurs :)</p>",
        "id": 185021870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411421
    },
    {
        "content": "<p>I was going to try to write out some example and kept getting tripped up :P</p>",
        "id": 185021915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411454
    },
    {
        "content": "<p>yea, having an <code>Rvalue::RefProject</code> that doesn't actually have a <code>Deref</code> in it is basically this idea of having a reference and just offsetting the pointer</p>",
        "id": 185022010,
        "sender_full_name": "oli",
        "timestamp": 1578411504
    },
    {
        "content": "<p>but anyway the high-level idea would be that we have \"place temporaries\" that get defined by a limited set of operations and which cannot be \"used\" by ordinary things; you have to either \"load\" from them or borrow them.</p>",
        "id": 185022107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411574
    },
    {
        "content": "<p>They'd probably be affine - i.e., consumed at most once</p>",
        "id": 185022133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411586
    },
    {
        "content": "<p>And those \"load\" and \"borrow\" operations are where stacked borrows would kick in I guess</p>",
        "id": 185022152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411599
    },
    {
        "content": "<p>well I mean we have to define how to handle them in stacked borrows, they'd be part of it, but those load/borrow operations would correspond to some of the stacked borrows changes that occur today</p>",
        "id": 185022251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411634
    },
    {
        "content": "<p>I forget how much <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> and I talked about this</p>",
        "id": 185022268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411646
    },
    {
        "content": "<p>I guess then that <code>x = &amp;*(*tmp.bar).baz</code> would be something like</p>\n<div class=\"codehilite\"><pre><span></span>P0 = LOAD(tmp.bar) // P0 is a &quot;place temporary&quot;, meaning that it is a pointer effectively\nP1 = LOAD(P0.baz)\nX = &amp;P1\n</pre></div>\n\n\n<p>and borrowck would understand that (e.g.) tmp.bar was not borrowed</p>",
        "id": 185022484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411782
    },
    {
        "content": "<p>in some ways this might simplify borrowck, since right now I think we have to figure out which loads and other accesses occur as part of a borrow.. maybe? that maybe just falls out</p>",
        "id": 185022539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411816
    },
    {
        "content": "<p>anyway, I think we should table these details and turn back to the higher level questions?</p>",
        "id": 185022549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411825
    },
    {
        "content": "<p>(I'm open to other schemes, just want to emphasize, this is the only one I've thought of though)</p>",
        "id": 185022582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411837
    },
    {
        "content": "<blockquote>\n<p>anyway, I think we should table these details and turn back to the higher level questions?</p>\n</blockquote>\n<p>I was wondering exactly the same, maybe we should lay out a higher level plan with at least some first steps and we can organize more meetings to define some of the missing details if needed</p>",
        "id": 185022726,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1578411926
    },
    {
        "content": "<p>yeah so all of these concerns is what motivated me to think:</p>",
        "id": 185022749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411938
    },
    {
        "content": "<p>focus on the lower-hanging fruit of optimizing MIR and making it <del>more expressive</del> easier to edit</p>",
        "id": 185022773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411955
    },
    {
        "content": "<p>and if we needed to eliminate deref to make it tractable, do it by local rewriting <em>before</em> the optimization</p>",
        "id": 185022825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411968
    },
    {
        "content": "<p>(that <em>will</em> mess up stacked borrows tho)</p>",
        "id": 185022842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411978
    },
    {
        "content": "<p>(though there may be a desugaring involving <code>&amp;raw</code> that is relatively harmless?)</p>",
        "id": 185022868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578411990
    },
    {
        "content": "<p>ooh</p>",
        "id": 185022887,
        "sender_full_name": "oli",
        "timestamp": 1578411998
    },
    {
        "content": "<p>that's an idea</p>",
        "id": 185022892,
        "sender_full_name": "oli",
        "timestamp": 1578412002
    },
    {
        "content": "<p>I don't think that works so well for <em>borrow check</em></p>",
        "id": 185022920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578412017
    },
    {
        "content": "<p>but it might work for stacked borrows</p>",
        "id": 185022941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578412026
    },
    {
        "content": "<p>btw, just pure ignorance, how far are we from having stacked borrows in code? I haven't followed that that much</p>",
        "id": 185023070,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1578412126
    },
    {
        "content": "<p>well, there's a prototype that works, but</p>",
        "id": 185023090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578412139
    },
    {
        "content": "<p>(a) it works on miri only of course</p>",
        "id": 185023100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578412146
    },
    {
        "content": "<p>(b) by \"works\" I mean that it runs the rules and detects violations</p>",
        "id": 185023111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578412155
    },
    {
        "content": "<p>(c) but the rules themselves are not fully  agreed to nor widely understood :)</p>",
        "id": 185023126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578412165
    },
    {
        "content": "<p>ok</p>",
        "id": 185023163,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1578412186
    },
    {
        "content": "<p>(d) and in particular lots of extant code, including code in libstd, gets errors, and we haven't decided whether all of those things <em>ought</em> to be errors</p>",
        "id": 185023169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578412190
    },
    {
        "content": "<p>still, I think it is pretty widely recognized as the most promising start we have towards a set of workable rules</p>",
        "id": 185023217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578412203
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 185023265,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1578412217
    },
    {
        "content": "<p>so we have 10 more minutes ...</p>",
        "id": 185023309,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1578412238
    },
    {
        "content": "<p>should we define some next steps?</p>",
        "id": 185023379,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1578412301
    },
    {
        "content": "<p>or I mean, what would be best to define in this last minutes?</p>",
        "id": 185023409,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1578412320
    },
    {
        "content": "<p>seems like it to me</p>",
        "id": 185023410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578412321
    },
    {
        "content": "<p>also worth noting: next all hands, presuming it happens :), will be mid March</p>",
        "id": 185023482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578412345
    },
    {
        "content": "<p>so that is a time frame to keep in mind</p>",
        "id": 185023491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578412349
    },
    {
        "content": "<p>yep</p>",
        "id": 185023502,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1578412358
    },
    {
        "content": "<p>I won't be there</p>",
        "id": 185023503,
        "sender_full_name": "oli",
        "timestamp": 1578412359
    },
    {
        "content": "<p>:'(</p>",
        "id": 185023513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578412363
    },
    {
        "content": "<p>ouch :(</p>",
        "id": 185023527,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1578412368
    },
    {
        "content": "<p>still, I feel like talking over deref/index and how to adjust borrowck would be a topic that might be well covered in person</p>",
        "id": 185023538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578412376
    },
    {
        "content": "<p>Need to be back in germany on saturday</p>",
        "id": 185023540,
        "sender_full_name": "oli",
        "timestamp": 1578412377
    },
    {
        "content": "<p>you didn't figure out trains I guess?</p>",
        "id": 185023555,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1578412388
    },
    {
        "content": "<p>(you could leave early or something? but ok)</p>",
        "id": 185023575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578412394
    },
    {
        "content": "<blockquote>\n<p>Need to be back in germany on saturday</p>\n</blockquote>\n<p>ahh</p>",
        "id": 185023576,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1578412396
    },
    {
        "content": "<p>yea, I could just be there for a few days I guess</p>",
        "id": 185023613,
        "sender_full_name": "oli",
        "timestamp": 1578412421
    },
    {
        "content": "<blockquote>\n<p>yea, I could just be there for a few days I guess</p>\n</blockquote>\n<p>do it :)</p>",
        "id": 185023631,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1578412434
    },
    {
        "content": "<blockquote>\n<p>still, I feel like talking over deref/index and how to adjust borrowck would be a topic that might be well covered in person</p>\n</blockquote>\n<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 185023666,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1578412443
    },
    {
        "content": "<p>I'm curious <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> what you think about making MIR more ergonomic to edit</p>",
        "id": 185023700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578412465
    },
    {
        "content": "<p>maybe we need to get more detailed about what that would mean</p>",
        "id": 185023713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578412473
    },
    {
        "content": "<p>as a start, we could make basic block indices persistent :)</p>",
        "id": 185023731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578412485
    },
    {
        "content": "<p>Yea, I'm worried that the medicine is worse than the illness</p>",
        "id": 185023733,
        "sender_full_name": "oli",
        "timestamp": 1578412487
    },
    {
        "content": "<p>I don't know what that means in this context :)</p>",
        "id": 185023745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578412496
    },
    {
        "content": "<p>well... the linked list stuff sounds rather easy to mess up</p>",
        "id": 185023764,
        "sender_full_name": "oli",
        "timestamp": 1578412508
    },
    {
        "content": "<p>interesting. I was thinking the opposite.</p>",
        "id": 185023786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578412524
    },
    {
        "content": "<p>so we'd need a good API around it... which may just make ppl run index lists on their side again</p>",
        "id": 185023818,
        "sender_full_name": "oli",
        "timestamp": 1578412539
    },
    {
        "content": "<p>I guess maybe the question is what it means to \"mess up\"</p>",
        "id": 185023819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578412540
    },
    {
        "content": "<p>/me is following along on mobile but probably going to lose service in a minute.</p>",
        "id": 185023824,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1578412545
    },
    {
        "content": "<p>yea, maybe I just can't imagine how it'd look</p>",
        "id": 185023842,
        "sender_full_name": "oli",
        "timestamp": 1578412554
    },
    {
        "content": "<p>probably what makes the most sense is to look at what things optimizations are doing <em>now</em></p>",
        "id": 185023891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578412565
    },
    {
        "content": "<p>and also to compare, I think, against the setup of cranelift</p>",
        "id": 185023920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578412588
    },
    {
        "content": "<p>but jsut starting with: basic block ids are not indices into a vector but rather keys into a hashmap</p>",
        "id": 185023942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578412609
    },
    {
        "content": "<p>The inliner is kind of the biggest stress test now since it adjusts locals/places, statement indexes, etc</p>",
        "id": 185023952,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1578412619
    },
    {
        "content": "<p>yeah, it does a lot of random things, although some of them it sort of has to do</p>",
        "id": 185023970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578412629
    },
    {
        "content": "<p>but I agree it'd be a good candidate to examine</p>",
        "id": 185024003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578412657
    },
    {
        "content": "<p>also the drop elaboration?</p>",
        "id": 185024014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578412662
    },
    {
        "content": "<p>welp I have to run to another meeting; seems like no firm conclusions, but good to chat about things?</p>",
        "id": 185024370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578412876
    },
    {
        "content": "<p>yeah</p>",
        "id": 185024402,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1578412896
    },
    {
        "content": "<p>I guess we can conclude something async?</p>",
        "id": 185024418,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1578412904
    },
    {
        "content": "<blockquote>\n<p>and also to compare, I think, against the setup of cranelift</p>\n</blockquote>\n<p>cg_clif with mir opt and my clif stack opt pass is a bit faster than cg_llvm without optimizations for the runtime of one benchmark.</p>",
        "id": 185024591,
        "sender_full_name": "bjorn3",
        "timestamp": 1578413003
    },
    {
        "content": "<p>I'm not sure I understand what that means--</p>",
        "id": 185025063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578413248
    },
    {
        "content": "<p>I meant more like \"it'd be good to compare how the data structures are setup\"</p>",
        "id": 185025074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578413258
    },
    {
        "content": "<p>I though you meant performance.</p>",
        "id": 185025183,
        "sender_full_name": "bjorn3",
        "timestamp": 1578413311
    },
    {
        "content": "<p>Ah ok :) good to know though!</p>",
        "id": 185025345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578413403
    },
    {
        "content": "<p>Cranelift separates the data structure containing all instructions combined with arguments (DataFlowGraph) and the data structure containing the actual place an instruction exists (Layout)</p>",
        "id": 185025473,
        "sender_full_name": "bjorn3",
        "timestamp": 1578413488
    },
    {
        "content": "<p>When an instruction argument would cause the instruction enum to become larger, then it is often stored in a side table instead with the instruction pointing to the index.</p>",
        "id": 185025618,
        "sender_full_name": "bjorn3",
        "timestamp": 1578413581
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I dont remember talking about how this interacts with Stacked Borrows at all^^</p>",
        "id": 185050805,
        "sender_full_name": "RalfJ",
        "timestamp": 1578428582
    },
    {
        "content": "<p>but the plan sounds reasonable. it's already the case now that <code>&amp;</code> doesn't do anything, just <code>Retag(place)</code> does. so it seems all we have to do is make sure that retag insertion can distinguish user-written <code>&amp;</code> from those introduced by lowering.</p>",
        "id": 185050863,
        "sender_full_name": "RalfJ",
        "timestamp": 1578428626
    },
    {
        "content": "<blockquote>\n<p>e.g., convering from vectors and things identified by index</p>\n</blockquote>\n<p>Thanks for mentioning this. </p>\n<p>Circling back around mutation: I consider something transactional a requirement. This is what enables easy estimation of value in mutation.</p>",
        "id": 185403249,
        "sender_full_name": "nagisa",
        "timestamp": 1578772936
    },
    {
        "content": "<p>This is <em>especially</em> relevant in context of peephole optimisations. LLVM has a some truoble with certain peephole \"deoptimisations\" that ought to enable further peephole optimisations. Having something transactional allows to do pretty much whatever in between beginning and figuring out whether it should be applied at all.</p>",
        "id": 185403280,
        "sender_full_name": "nagisa",
        "timestamp": 1578773035
    },
    {
        "content": "<p>It perhaps even allows exploring \"alternatives\".</p>",
        "id": 185403347,
        "sender_full_name": "nagisa",
        "timestamp": 1578773141
    },
    {
        "content": "<p>though I think another thing we should do is figure out how optimisation-oriented we want to make MIR.</p>",
        "id": 185403352,
        "sender_full_name": "nagisa",
        "timestamp": 1578773158
    },
    {
        "content": "<p>If all we care about is some inlining, basic const propagation and basic instruction combination, then perhaps doing too much is plain counterproductive.</p>",
        "id": 185403399,
        "sender_full_name": "nagisa",
        "timestamp": 1578773208
    },
    {
        "content": "<p>FWIW I’m still thinking if I should make time to go to all hands. This is basically the only topic I have anything to say about</p>",
        "id": 185403472,
        "sender_full_name": "nagisa",
        "timestamp": 1578773396
    }
]