[
    {
        "content": "<p>So. My vision for our fancy MIR-future where we do all sorts of cool stuff with mir opts includes the idea of proving the soundness of the transformations we make while optimizing MIR.</p>\n<p>This is of course a long term project more than a \"right now\" thing. Specially because it would need a precise understanding of MIR semantics, which haven't yet been fully defined if I understood correctly.</p>\n<p>BUT. I want to help push this forward at some point. I don't know if I can do a good job of it, I don't know if there's a tool for this, and I only sort of understand one of the opts (the const-prop one). Still, I think it would be really good to have.</p>\n<p>So:<br>\nHave there been discussions on this topic? Also, is there a group in the community that has experience proving these kinds of things?</p>\n<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> you've probably thought about this at some point, right? :3<br>\nAnywho, I ping you because I'd figure you'd want to chip in here ^^</p>",
        "id": 201697954,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1592899850
    },
    {
        "content": "<p>The Stacked Borrows paper (<a href=\"https://plv.mpi-sws.org/rustbelt/stacked-borrows/\">https://plv.mpi-sws.org/rustbelt/stacked-borrows/</a>) includes proofs for some optimizations justified by the aliasing rules -- though, as far as I can tell, only for some specific pairs of programs which illustrate the desired optimization (rather than giving an optimization algorithm, and then proving it correct for all programs). A noteworthy alternative/complement to traditional \"pen and paper\" (or Coq) formalization of algorithms is  <em>translation validation</em>,  which addresses the problem of gaps between the formalization of the optimization and its production implementation. The Alive project (<a href=\"https://blog.regehr.org/archives/1722\">https://blog.regehr.org/archives/1722</a>) has been doing this very successfully with LLVM optimizations, a similar approach may be effective for MIR optimizations once we have precise semantics for it.</p>",
        "id": 201703821,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1592903784
    },
    {
        "content": "<p>(Though I do wonder if/how translation from IR to SMT formulas, as done in Alive, can be reconciled with MIR being polymorphic. Last I heard, even generalizing over integer bit widths was an area of active research. Perhaps the simple approach of \"try some concrete instances and hope that will catch most bugs\"  will be good enough for a start?)</p>",
        "id": 201723012,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1592917986
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"212698\">@Félix Fischer</span> the \"formal-methods\" stream might be a better fit for this topic, actually :)</p>",
        "id": 201751643,
        "sender_full_name": "RalfJ",
        "timestamp": 1592930908
    },
    {
        "content": "<p>I have many thoughts, indeed.^^ but realistically, rustc isn't going to get CompCert-style Coq proofs. Those are too much work, there are too few people who can do them, and there is now they they could keep up with Rust's development pace.</p>",
        "id": 201751768,
        "sender_full_name": "RalfJ",
        "timestamp": 1592930966
    },
    {
        "content": "<p>So I think our best bet is something like Alive2, as mentioned by <span class=\"user-mention\" data-user-id=\"124289\">@Hanna Kruppe</span></p>",
        "id": 201751798,
        "sender_full_name": "RalfJ",
        "timestamp": 1592930983
    },
    {
        "content": "<p>(the stacked borrows proofs show that some reorderings are in principle possible in an idealized Rust. this is a crucial first step, but there's a significant gap between that and verifying what our MIR optimizations are doing.)</p>",
        "id": 201751941,
        "sender_full_name": "RalfJ",
        "timestamp": 1592931041
    },
    {
        "content": "<p>(also, aliasing-based optimizations are amongst the hardest to verify. I think we should start with easier ones. :D )</p>",
        "id": 201752036,
        "sender_full_name": "RalfJ",
        "timestamp": 1592931085
    },
    {
        "content": "<p>coming back to Alive2, I would happily be involved with figuring out MIR semantics more precisely, but I have no idea how Alive2 does its actual checking</p>",
        "id": 201752100,
        "sender_full_name": "RalfJ",
        "timestamp": 1592931119
    },
    {
        "content": "<p>my background is in doing complex proofs by hand in coq, I know little about automated theorem proving</p>",
        "id": 201752170,
        "sender_full_name": "RalfJ",
        "timestamp": 1592931144
    },
    {
        "content": "<p>Ohh, I see!</p>",
        "id": 201921665,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593046317
    },
    {
        "content": "<p>Btw <span class=\"user-mention\" data-user-id=\"124289\">@Hanna Kruppe</span> those are great links, thank you &lt;3</p>",
        "id": 201921714,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593046329
    },
    {
        "content": "<p>So... I was thinking more of doing proofs by hand</p>",
        "id": 201921730,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593046344
    },
    {
        "content": "<p>Like</p>",
        "id": 201921731,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593046346
    },
    {
        "content": "<p>After we exhaust one branch of optimization (like const prop for example, in which I'm planning to put some serious effort after I get some bureaucracy done with uni, hopefully during the following weeks)</p>",
        "id": 201921773,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593046406
    },
    {
        "content": "<p>We freeze the code, or the algorithm at least</p>",
        "id": 201921776,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593046414
    },
    {
        "content": "<p>And we try to prove that some invariants are being held through each step of the optimization pass</p>",
        "id": 201921808,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593046443
    },
    {
        "content": "<p>I think that just that could be big</p>",
        "id": 201921847,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593046464
    },
    {
        "content": "<p>It would at least make us question our code's soundness and try to prove that the edge cases hold it</p>",
        "id": 201921864,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593046490
    },
    {
        "content": "<p>I think that's most of what we need. With the algorithm being frozen, and the proof being out in the open, even if it's not actually machine-verified, it could be checked by the eyes of everyone that wants to help.</p>",
        "id": 201921975,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593046638
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Proofs.20of.20soundness/near/201751643\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"212698\">Félix Fischer</span> the \"formal-methods\" stream might be a better fit for this topic, actually :)</p>\n</blockquote>\n<p>Haha that's fair. Is it possible to move it there?</p>",
        "id": 201922047,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593046690
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"212698\">Félix Fischer</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Proofs.20of.20soundness/near/201921776\">said</a>:</p>\n<blockquote>\n<p>We freeze the code, or the algorithm at least</p>\n</blockquote>\n<p>I strongly doubt such a freeze will ever happen...</p>",
        "id": 201947862,
        "sender_full_name": "RalfJ",
        "timestamp": 1593077128
    },
    {
        "content": "<p>Right, for const prop in particular this would mean freezing both the definition of MIR (well, the subset that const prop operates on) and miri (again, at least the parts relevant to const prop). This seems very invasive and undesirable.</p>",
        "id": 201948082,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1593077309
    },
    {
        "content": "<p>I also have serious doubts about the value of (mechanized or pen-and-paper) proofs for this particular part. The \"core\" of constant evaluation is conceptually trivial once operational semantics for MIR are fixed (OTOH, picking reasonable semantics is quite challenging). This is not to say there aren't any bugs in it -- but many are either</p>\n<ol>\n<li>integration issues (e.g., <a href=\"https://github.com/rust-lang/rust/issues/67019\">#67019</a> was due to not accounting for layout optimizations properly) where focusing solely on the pass itself won't help</li>\n<li>Plainly incorrect transformations (e.g., <a href=\"https://github.com/rust-lang/rust/issues/73609\">#73609</a>) that can be found just as well by simpler means than attempting proofs</li>\n</ol>\n<p>In my personal view, the kind of approach you described is more valuable when there's subtle invariants <em>internal</em> to a reasonably small module (e.g., a very clever data structure), because then you can actually confidently state and validate a useful invariant, rather than either verifying trivial things (\"miri indeed performs an addition when there's an <code>Add</code> operation in the MIR\") or having to content with many integration points.</p>",
        "id": 201949666,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1593078576
    },
    {
        "content": "<p>Ohh, I see. Both of you two expose very fair points.</p>\n<p>Re: freeze<br>\nI guess I didn't see that we'd have to freeze MIR and maybe miri for that (although now that I've worked on const-prop, I'm not sure what is and what isn't miri anymore. I was sure I hadn't ever touched it until someone said that it was used for const prop, so I guess all of what I did touch was actually miri? Anywho). And yeah, that sure seems invasive. Specially freezing miri. Freezing MIR seems like it could be a thing tho? Like after semantics are well defined and all of that. In the long term, there might be a day when MIR is frozen right?</p>",
        "id": 202002415,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593107643
    },
    {
        "content": "<p>Re: proofs.<br>\nI think I more or less agree with you, Hanna. That makes sense :)</p>",
        "id": 202002635,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593107739
    },
    {
        "content": "<p>I see no reason to expect either the \"surface\" Rust language or rustc implementation details (e.g., internal architecture, data structures) to ever be frozen, and changes to either of those lead to MIR changes, even if they are backwards compatible changes.</p>",
        "id": 202002819,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1593107816
    },
    {
        "content": "<p>Ahh, you mean the produced MIR code</p>",
        "id": 202004035,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593108413
    },
    {
        "content": "<p>I was thinking more on the definition and semantics of MIR itself <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 202004063,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593108434
    },
    {
        "content": "<p>Okay, now I think I really get what you mean</p>",
        "id": 202004081,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593108444
    },
    {
        "content": "<p>No, I mean the definition and semantics of MIR itself.</p>",
        "id": 202004103,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1593108455
    },
    {
        "content": "<p>Really? Wait, how would that cha- ohh. Okay, yeah, the compiler IS sort of the definition and semantics of MIR</p>",
        "id": 202004200,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593108493
    },
    {
        "content": "<p>So if you change the compiler, you change MIR</p>",
        "id": 202004232,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593108510
    },
    {
        "content": "<p>For example, the specific way NLL is done right now influences the definition of MIR statements and places, and future changes (like Polonius) will probably fit better with different representations.</p>",
        "id": 202004248,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1593108515
    },
    {
        "content": "<p>(Or the other way around: changes to MIR are being proposed and running into challenges related to borrow checking; if borrow checking changes then different designs become more attractive.)</p>",
        "id": 202004374,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1593108572
    },
    {
        "content": "<p>(Right! :D)</p>",
        "id": 202004438,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593108599
    },
    {
        "content": "<p>That makes sense</p>",
        "id": 202004503,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593108614
    },
    {
        "content": "<p>Thank you for the explanation, Hanna ^^</p>",
        "id": 202004543,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593108635
    },
    {
        "content": "<p>I feel like it's much more valuable to prove the optimizations correct on a idealised version of Rust than to attempt to prove the actual implementation. At least then the gap narrows to 'does the implementation behave like the idealised version'?</p>",
        "id": 202178850,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1593253242
    },
    {
        "content": "<p>That's a good point</p>",
        "id": 202205020,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593291974
    },
    {
        "content": "<p>yeah, that's why this is what we did with Stacked Borrows</p>",
        "id": 202909186,
        "sender_full_name": "RalfJ",
        "timestamp": 1593933078
    },
    {
        "content": "<p>it's about validation that the optimizations are eight <em>in principle</em>, not that they are implemented correctly</p>",
        "id": 202909190,
        "sender_full_name": "RalfJ",
        "timestamp": 1593933100
    },
    {
        "content": "<p>experience with LLVM shows that this is non-trivial in many cases</p>",
        "id": 202909192,
        "sender_full_name": "RalfJ",
        "timestamp": 1593933115
    },
    {
        "content": "<p>const-prop is just very simple, conceptually, which makes it less interesting to look at here</p>",
        "id": 202909230,
        "sender_full_name": "RalfJ",
        "timestamp": 1593933136
    },
    {
        "content": "<p>Haha, no wonder I like const-prop so much <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> it felt really approachable</p>",
        "id": 202956923,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594017001
    }
]