[
    {
        "content": "<p>I'm writing MIR opt tests, and I'd like to get an index into an array into the same basic block as some other code. Specifically, I want a place where the projection consists of just a single <code>Index</code>. Is there a way to get this kind of MIR to be emitted? I'd considered asking the test runner to run const prop + branch simplification first, but writing tests that aren't out by that is a little annoying.</p>",
        "id": 272318513,
        "sender_full_name": "Jake",
        "timestamp": 1645129841
    },
    {
        "content": "<p>Oh nevermind, I got it, what I was doing before worked with only little modification</p>",
        "id": 272318892,
        "sender_full_name": "Jake",
        "timestamp": 1645130048
    },
    {
        "content": "<p>Follow up question now: I've written my optimization, and it passes <code>src/test/ui</code> and the MIR opt tests I've written. Unfortunately, it breaks a bunch of other MIR opt tests by optimizing the test out. Is there some way to ask the mir opt test suite to not run a particular pass for some tests? I could modify the actual test code to try and prevent my optimization from kicking in, but that seems both error prone and not very future proof</p>",
        "id": 272394570,
        "sender_full_name": "Jake",
        "timestamp": 1645186802
    },
    {
        "content": "<p>Is your opt essentially replacing the other opts? Should we remove them?</p>",
        "id": 272396692,
        "sender_full_name": "oli",
        "timestamp": 1645188179
    },
    {
        "content": "<p>Not replacing. My opt is doing some basic dead store elimination, restricted to within a single basic block. This affects all the opt tests that just write things to locals and never use them again</p>",
        "id": 272397081,
        "sender_full_name": "Jake",
        "timestamp": 1645188425
    },
    {
        "content": "<p>For example, many of the simplify locals tests are just completely removed by this, although because that pass can do reasoning across bbs its definitely not replaced</p>",
        "id": 272397214,
        "sender_full_name": "Jake",
        "timestamp": 1645188487
    },
    {
        "content": "<p>Is adding a <code>-Z run-pass=PassName</code> the right thing to do here? This might be a good thing to have for the mir opt test suite, but I'm a little unsure of how to implement it because there isn't a clear distinction between mandatory and optional passes</p>",
        "id": 272397844,
        "sender_full_name": "Jake",
        "timestamp": 1645188906
    },
    {
        "content": "<p>For example, my tests would also benefit from not having const prop run, but there's a comment above that pass that says that it's at least some level of necessary. Not sure if it could safely be disabled for mir opt tests that don't want to deal with it</p>",
        "id": 272398227,
        "sender_full_name": "Jake",
        "timestamp": 1645189172
    },
    {
        "content": "<p>Disabling passes is not really possible, no. There is desire to write a pass manager that can do that, but we didn't get to it yet</p>",
        "id": 272398834,
        "sender_full_name": "oli",
        "timestamp": 1645189520
    },
    {
        "content": "<p>Hm, ok. In the meantime I guess I'm gonna put in some <code>core::hint::black_box(());</code>s to break up bbs</p>",
        "id": 272399387,
        "sender_full_name": "Jake",
        "timestamp": 1645189851
    },
    {
        "content": "<p>I've filed <a href=\"https://github.com/rust-lang/rust/issues/94118\">#94118</a> , and was able to fix all but one of the tests. I'll wait for review to give feedback on what to do about the last one</p>",
        "id": 272405949,
        "sender_full_name": "Jake",
        "timestamp": 1645193514
    },
    {
        "content": "<p>Last I hit this I ended up adding a bunch of </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[inline(never)]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">unknown</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"fm\">unimplemented!</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>to fix all the <code>if true</code> tests by changing them to <code>if unknown()</code>, though that PR never got checked in.</p>\n<p><a href=\"https://github.com/rust-lang/rust/pull/91222/files#diff-b168614f658f0442c56097971389891a9f6bde7baaa0d09e3c38d4c276aa0121R12\">https://github.com/rust-lang/rust/pull/91222/files#diff-b168614f658f0442c56097971389891a9f6bde7baaa0d09e3c38d4c276aa0121R12</a></p>",
        "id": 272446167,
        "sender_full_name": "scottmcm",
        "timestamp": 1645212583
    }
]