[
    {
        "content": "<p><a href=\"https://github.com/rust-lang/compiler-team/issues/319\">This MCP</a> lists the highest possible MIR opt level as level 3. <code>rustc_mir_transform</code> currently contains 7 passes that run only on MIR opt level 4 - this is also what compiletest enables. Has the meaning of the MIR opt levels changed, and is the MCP out of date? How does opt level 4 distinguish itself from the <code>-Zunsound-mir-opts</code> flag?</p>",
        "id": 276709208,
        "sender_full_name": "Jak{e,ob} Degen",
        "timestamp": 1648276066
    },
    {
        "content": "<p>We introduced a new level between 1 and 2 for when optimizations are enabled. Old: 0 no opt, 1 default, 2 more opt, 3 all opt. New: 0 no opt, 1 debug mode default, 2 release mode default, 3 more opt, 4 all opt.</p>",
        "id": 276710276,
        "sender_full_name": "bjorn3",
        "timestamp": 1648277784
    },
    {
        "content": "<p>-Zunsound-mir-opts is for broken optimizations. Opt level 4 is for slow optimizations and maybe also those that break debuginfo.</p>",
        "id": 276710300,
        "sender_full_name": "bjorn3",
        "timestamp": 1648277844
    },
    {
        "content": "<p>So I don't find it very useful to think in terms of \"amount\" of opts - what is the selection criteria for opt level 3 vs 4 right now?</p>",
        "id": 276746267,
        "sender_full_name": "Jak{e,ob} Degen",
        "timestamp": 1648329389
    },
    {
        "content": "<p>Maybe mir-level-4 is \"never run this on stable\"?</p>",
        "id": 276746371,
        "sender_full_name": "scottmcm",
        "timestamp": 1648329597
    },
    {
        "content": "<p>But for what reason? It seems that the obvious reasons are \"it's slow to run\" which is covered by 3 and \"it's unsound\" which is covered by the unsound opts flag</p>",
        "id": 276746434,
        "sender_full_name": "Jak{e,ob} Degen",
        "timestamp": 1648329649
    },
    {
        "content": "<p>Oh, hmm, there's an \"it's not an optimization but a pessimization\" reason</p>",
        "id": 276746449,
        "sender_full_name": "Jak{e,ob} Degen",
        "timestamp": 1648329678
    },
    {
        "content": "<p>If that's the one that is represented by level 4 though, that should really be documented somewhere</p>",
        "id": 276746455,
        "sender_full_name": "Jak{e,ob} Degen",
        "timestamp": 1648329698
    },
    {
        "content": "<p>Uh... afaicr level 4 is for new opts that we still need to figure out where to place and whether they are fine. Basically what the MCP wanted under a special experimental flag</p>",
        "id": 276746606,
        "sender_full_name": "oli",
        "timestamp": 1648329914
    },
    {
        "content": "<p>2 and 3 are allowed to mess with debug info, but we really try to avoid breaking debug info for any opts</p>",
        "id": 276746669,
        "sender_full_name": "oli",
        "timestamp": 1648329984
    },
    {
        "content": "<p>Ah, I see. \"Don't know\" is a good option too. So opt level 3 includes MIR opts that are either slow to run or pessimize code?</p>",
        "id": 276746743,
        "sender_full_name": "Jak{e,ob} Degen",
        "timestamp": 1648330093
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Meaning.20of.20MIR.20Opt.20Levels/near/276746606\">said</a>:</p>\n<blockquote>\n<p>Uh... afaicr level 4 is for new opts that we still need to figure out where to place and whether they are fine. Basically what the MCP wanted under a special experimental flag</p>\n</blockquote>\n<p>Hmm, actually, shouldn't opts that we're not confident are fine go into the unsound MIR opts bucket until we know otherwise?</p>",
        "id": 276746784,
        "sender_full_name": "Jak{e,ob} Degen",
        "timestamp": 1648330177
    },
    {
        "content": "<p>Weeeelll... you can't change the mir opt level on stable... so it's nightly only, and we want ppl to actually try them out. The unsound bucket is for when we know it's unsound</p>",
        "id": 276746975,
        "sender_full_name": "oli",
        "timestamp": 1648330367
    },
    {
        "content": "<p>Do we actually have any pessimization opts?</p>",
        "id": 276746986,
        "sender_full_name": "oli",
        "timestamp": 1648330390
    },
    {
        "content": "<p>If we had I feel like they'd deserve a separate flag</p>",
        "id": 276746993,
        "sender_full_name": "oli",
        "timestamp": 1648330408
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Meaning.20of.20MIR.20Opt.20Levels/near/276746975\">said</a>:</p>\n<blockquote>\n<p>Weeeelll... you can't change the mir opt level on stable... so it's nightly only, and we want ppl to actually try them out. The unsound bucket is for when we know it's unsound</p>\n</blockquote>\n<p>Hmm, ok, fair. So summarizing from the perspective of a rustc contributor: <code>-Zunsound-mir-opts</code> is for opts that we either know are unsound or at least have a semi-specific reason to believe are unsound. Then, opt levels are:</p>\n<ul>\n<li>0: Only \"mandatory\" passes, ie passes that will cause ICEs later on in rustc if they don't run</li>\n<li>1: Only opts that have no negative impact on debugability</li>\n<li>2: Opts that may have a negative impact on debugability and do not fall into either of the next two categories</li>\n<li>3: Opts that may be slow to execute but would otherwise belong in 2</li>\n<li>4: Opts that either a) break debug info in unacceptable ways or b) we are less confident are sound, although they have passed code review and we have not identified a specific reason for concern</li>\n</ul>",
        "id": 276747547,
        "sender_full_name": "Jak{e,ob} Degen",
        "timestamp": 1648331224
    },
    {
        "content": "<p>the classic opt-level 2/3 difference of \"3 might pessimize binary size\" might apply too -- like an aggressive MIR unroller might want to be level 3 even if it runs quickly?</p>",
        "id": 276747709,
        "sender_full_name": "scottmcm",
        "timestamp": 1648331430
    },
    {
        "content": "<p>That sounds reasonable, edited</p>",
        "id": 276747794,
        "sender_full_name": "Jak{e,ob} Degen",
        "timestamp": 1648331574
    },
    {
        "content": "<p>Yeah, so it sounds like opt level 4 can be summed up with \"opts that are broken, or potentially broken, but not in a way that is unsound.\" ie something that <em>hugely</em> pessimizes binary size (maybe it starts monomorphizing lifetimes or something) would go in there too</p>",
        "id": 276747919,
        "sender_full_name": "Jak{e,ob} Degen",
        "timestamp": 1648331745
    },
    {
        "content": "<p>What would be the best place to document this? Should it go in the rustc dev guide?</p>",
        "id": 276803733,
        "sender_full_name": "Jak{e,ob} Degen",
        "timestamp": 1648409478
    },
    {
        "content": "<p>The rustc dev guide already has a section on MIR opts IIRC so that would be the best place.</p>",
        "id": 276878716,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1648476713
    },
    {
        "content": "<p>Sorry for the noob question, but where do I see which MIR pass belong to which opt level?</p>",
        "id": 276954340,
        "sender_full_name": "Emanuel Lima",
        "timestamp": 1648524663
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"262681\">Emanuel Lima</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Meaning.20of.20MIR.20Opt.20Levels/near/276954340\">said</a>:</p>\n<blockquote>\n<p>Sorry for the noob question, but where do I see which MIR pass belong to which opt level?</p>\n</blockquote>\n<p>MIR passes usually define a <code>is_enabled</code> function that the pass manager uses to decide if they should run or not. For example <a href=\"https://github.com/rust-lang/rust/blob/ad5b6f6b72091261ac421d1331b2350f628d1fcb/compiler/rustc_mir_transform/src/dest_prop.rs#L120-L126\">here</a>. This is a function on the <code>MirPass</code> trait, and it has a default impl that always returns true, meaning that if no such function is defined they run on all opt levels</p>",
        "id": 276955334,
        "sender_full_name": "Jak{e,ob} Degen",
        "timestamp": 1648526144
    },
    {
        "content": "<p>Btw, this is also where they check for the <code>-Zunsound-mir-opts</code> flag if they only run with the flag turned on</p>",
        "id": 276955472,
        "sender_full_name": "Jak{e,ob} Degen",
        "timestamp": 1648526297
    },
    {
        "content": "<p>Right, but there is no documentation on which passes are present for a given level?</p>",
        "id": 276955486,
        "sender_full_name": "Emanuel Lima",
        "timestamp": 1648526331
    },
    {
        "content": "<p>Not as far as I know, no</p>",
        "id": 276955516,
        "sender_full_name": "Jak{e,ob} Degen",
        "timestamp": 1648526394
    }
]