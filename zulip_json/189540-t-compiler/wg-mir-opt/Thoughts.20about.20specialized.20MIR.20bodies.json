[
    {
        "content": "<p>I randomly looked at how Option::map is generated into MIR, and that gave me some thoughts that I would be interested in bouncing here. Consider this Godbolt setup <a href=\"https://godbolt.org/z/nxjEz3\">https://godbolt.org/z/nxjEz3</a><br>\nIt contains two rust implementations of the map function. One is restricted to <code>F: Copy + FnOnce(T) -&gt; U</code>, while the other is just <code>F: FnOnce(T) -&gt; U</code>. Since nothings needs to be dropped in the first impl, we don't generate any <code>drop</code>s which simplifies the MIR body of map_copy somewhat, compared to map. (The unoptimized LLVM is also simpler)</p>\n<p>Now my thought is if it would be worthwhile to have a scheme with multiple variants of a MIR function with Copy, Non-Copy versions. Then we could dispatch on the \"best\" variation at the call-site. So if we call Option&lt;T&gt;::map with a Copy closure, then we call the Copy variant. Inlining <code>map</code>would also work of course, but the above scheme would also work for functions that are not inlined.</p>",
        "id": 222478569,
        "sender_full_name": "Simon Vandel Sillesen",
        "timestamp": 1610478120
    },
    {
        "content": "<p>Can we use <em>actual</em> impl specialization for this?</p>",
        "id": 222478911,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610478281
    },
    {
        "content": "<p>I have zero experience with specialization, sorry. Does a specialization always have to be for a trait?</p>",
        "id": 222480211,
        "sender_full_name": "Simon Vandel Sillesen",
        "timestamp": 1610478828
    },
    {
        "content": "<p>yeah</p>",
        "id": 222480407,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610478910
    },
    {
        "content": "<p>but it's used a lot already</p>",
        "id": 222480419,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610478917
    },
    {
        "content": "<p>and if the <code>drop</code> calls are actually what's causing the slowdown, it should be possible to avoid them by just specializing on <code>Copy</code></p>",
        "id": 222480522,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610478943
    },
    {
        "content": "<p>My only metric has been looking at lines of MIR and LLVM-IR produced, so it's probably not a slowdown. But if the MIR can be improved for such a core function that would be nice</p>",
        "id": 222480733,
        "sender_full_name": "Simon Vandel Sillesen",
        "timestamp": 1610479048
    },
    {
        "content": "<p>well if it has no practical impact that seems like a pointless exercise</p>",
        "id": 222480956,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610479160
    },
    {
        "content": "<p>I'm not saying it's pointless, i'm just saying I don't have any data backing that it will be a small/large improvement/regression</p>",
        "id": 222481081,
        "sender_full_name": "Simon Vandel Sillesen",
        "timestamp": 1610479210
    },
    {
        "content": "<p>Is still similar to what you meant? <a href=\"https://godbolt.org/z/crTxW9\">https://godbolt.org/z/crTxW9</a><br>\nIt does generate two MIR bodies so as long the the correct spezialization is chosen at the call site, then it doesn't have to deal with drop</p>",
        "id": 222485873,
        "sender_full_name": "Simon Vandel Sillesen",
        "timestamp": 1610481446
    },
    {
        "content": "<p>looks about right, yeah</p>",
        "id": 222485998,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610481491
    },
    {
        "content": "<p>Just doing this specialization on Option::map manually is probably not doing much in the grand scheme of things, but i would imagine there's quite a few functions where this could have some use. What are your thoughts on a MIR opt pass that creates auto specializations for call-sites?</p>\n<ul>\n<li>If a fn has T as a bound, but is called with T:Copy, then create that T:Copy specialization that does not need drops</li>\n<li>If a fn has T:Clone as a bound, but it is called with T:Copy, then create the T:Copy specialization that does not need .clone()</li>\n</ul>",
        "id": 222488692,
        "sender_full_name": "Simon Vandel Sillesen",
        "timestamp": 1610482818
    }
]