[
    {
        "content": "<p>These mir-opt tests all show empty diffs:</p>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/tree/master/src/test/mir-opt/copy_propagation_arg\">https://github.com/rust-lang/rust/tree/master/src/test/mir-opt/copy_propagation_arg</a></li>\n</ul>\n<p>This one seems okay:</p>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/blob/master/src/test/mir-opt/copy_propagation/rustc.test.CopyPropagation.diff\">https://github.com/rust-lang/rust/blob/master/src/test/mir-opt/copy_propagation/rustc.test.CopyPropagation.diff</a></li>\n</ul>",
        "id": 198705028,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1590444143
    },
    {
        "content": "<p>My destination propagation pass will also make the latter a no-op. I guess we can remove the copy-prop pass entirely, it's slow and hasn't seen any significant improvements in years.</p>",
        "id": 198705136,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1590444297
    },
    {
        "content": "<p>Ohh, that's super cool <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span></p>",
        "id": 198710217,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590451800
    },
    {
        "content": "<p>So I'm guessing that copy-prop and destination prop are the same optimization in this context?</p>",
        "id": 198710270,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590451853
    },
    {
        "content": "<p>Only they are different names</p>",
        "id": 198710274,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590451860
    },
    {
        "content": "<p>Like copy-prop is the old one, and dest-prop is the new one you're making?</p>",
        "id": 198710277,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590451874
    },
    {
        "content": "<p>Or is destination prop a generalization of copy prop?</p>",
        "id": 198710280,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590451886
    },
    {
        "content": "<p>My understanding is that copy propagation is a general concept, not a specific optimization. The old copy propagation pass is very simplistic and only handles a couple of cases, so it's possible that my pass can optimize strictly more code, although I haven't checked this. Destination propagation is a somewhat more specific term that includes the way copies are propagated (by moving the <code>x</code> destination of some <code>x = y;</code> copy backwards to where <code>y</code> used to be).</p>",
        "id": 198745520,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1590490493
    },
    {
        "content": "<p>Ahh, I see :)</p>",
        "id": 198792587,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590512969
    },
    {
        "content": "<p>We now have a bit more data on this: <a href=\"https://github.com/rust-lang/rust/pull/76569#issuecomment-691162316\">https://github.com/rust-lang/rust/pull/76569#issuecomment-691162316</a></p>\n<p>It looks like dest prop performs roughly the same number of propagations as the old copy prop pass, but they are different subsets, so copy prop is still beneficial.</p>\n<p>This makes sense, since copy prop does forward propagation, while dest prop propagates backwards. Some propagations only work in one direction.</p>",
        "id": 210583908,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1600470195
    },
    {
        "content": "<p>(I'm still going to go ahead with the removal – turns out copy prop has been unsound for a while <a href=\"https://github.com/rust-lang/rust/issues/76740\">#76740</a>, and we should be able to reuse a bunch of the logic from dest prop in a future forwards propagation pass)</p>",
        "id": 210584428,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1600470606
    },
    {
        "content": "<p>if you want best efficiency, you want to combine and interleave forward and back propagation together with const propagation in a single pass that does all of these things until it reaches a fixpoint.</p>",
        "id": 210586745,
        "sender_full_name": "nagisa",
        "timestamp": 1600473471
    },
    {
        "content": "<p>there are examples of instruction sequences where any one of the three missing would miss an optimisation.</p>",
        "id": 210586793,
        "sender_full_name": "nagisa",
        "timestamp": 1600473494
    },
    {
        "content": "<p>That said, we still haven’t an alias analysis in rustc, so I have no idea how y'all are planning to make any sound propagation optimisation.</p>",
        "id": 210586807,
        "sender_full_name": "nagisa",
        "timestamp": 1600473545
    },
    {
        "content": "<p>Sounds reasonable</p>",
        "id": 210586905,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1600473627
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Is.20CopyPropagation.20working.20correctly.3F/near/210586807\">said</a>:</p>\n<blockquote>\n<p>That said, we still haven’t an alias analysis in rustc, so I have no idea how y'all are planning to make any sound propagation optimisation.</p>\n</blockquote>\n<p>Currently by ignoring locals whose addresses are taken entirely</p>",
        "id": 210586921,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1600473648
    },
    {
        "content": "<p>hm, I have a feeling that this was not sufficient last time I looked at implementing propagation many many years ago, but I don’t remember if that was actually true anymore.</p>",
        "id": 210587040,
        "sender_full_name": "nagisa",
        "timestamp": 1600473778
    },
    {
        "content": "<p>There's lots of code in the dest prop pass to track conflicts between locals, if that's what you mean</p>",
        "id": 210587137,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1600473887
    },
    {
        "content": "<p>It also bails out when a candidate place contains indirection in general, etc.</p>",
        "id": 210587243,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1600474007
    }
]