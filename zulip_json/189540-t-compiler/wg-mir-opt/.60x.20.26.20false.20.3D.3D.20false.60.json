[
    {
        "content": "<p>if you have some other issues that need hands let me know! I'd like to help out where I can</p>",
        "id": 203698991,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594636264
    },
    {
        "content": "<p>We have a moderate list <a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3AA-mir-opt\">https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3AA-mir-opt</a> but I need to pick out good entry level optimizations. It's not like most of them are really hard per se, but if you have to learn rustc contribution and mir optimizations at the same time, it's better to start with something that isn't gonna be a 4 week rabbit hole</p>",
        "id": 203699515,
        "sender_full_name": "oli",
        "timestamp": 1594636675
    },
    {
        "content": "<p>oooh I have one for you</p>",
        "id": 203700402,
        "sender_full_name": "oli",
        "timestamp": 1594637317
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/72751\">https://github.com/rust-lang/rust/issues/72751</a></p>",
        "id": 203700403,
        "sender_full_name": "oli",
        "timestamp": 1594637318
    },
    {
        "content": "<p>This one is great</p>",
        "id": 203700405,
        "sender_full_name": "oli",
        "timestamp": 1594637321
    },
    {
        "content": "<p><code>x &amp; false</code> is guaranteed <code>false</code> but const prop can't figure that out</p>",
        "id": 203700428,
        "sender_full_name": "oli",
        "timestamp": 1594637343
    },
    {
        "content": "<p>If you look at <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=1ef992fe05b4e49b40ff5f63acc796d5\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=1ef992fe05b4e49b40ff5f63acc796d5</a>, and click (MIR in the menu in the top left corner), you can see that there's a <code>BitAnd</code> operation that doesn't actually make sense</p>",
        "id": 203700568,
        "sender_full_name": "oli",
        "timestamp": 1594637446
    },
    {
        "content": "<p>you can basically follow the instructions in <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/multiple.20return.20terminators/near/203699347\">https://rust-lang.zulipchat.com/#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/multiple.20return.20terminators/near/203699347</a></p>",
        "id": 203700597,
        "sender_full_name": "oli",
        "timestamp": 1594637497
    },
    {
        "content": "<p>to get started</p>",
        "id": 203700598,
        "sender_full_name": "oli",
        "timestamp": 1594637499
    },
    {
        "content": "<p>but you won't create your own new optimization, you'll work on <code>src/librustc_mir/transform/const_prop.rs</code></p>",
        "id": 203700610,
        "sender_full_name": "oli",
        "timestamp": 1594637518
    },
    {
        "content": "<p>basically you have to change <a href=\"https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src/librustc_mir/transform/const_prop.rs#L534\">https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src/librustc_mir/transform/const_prop.rs#L534</a> into a match and add arms for <code>BitAnd</code> and <code>BitOr</code></p>",
        "id": 203700952,
        "sender_full_name": "oli",
        "timestamp": 1594637779
    },
    {
        "content": "<p>if the type of the values being operated on is <code>bool</code>, then the idea is to read the left and right side of the operators, but read them fallibly. We're fine with one value not existing in case the other has a short circuiting value</p>",
        "id": 203701047,
        "sender_full_name": "oli",
        "timestamp": 1594637870
    },
    {
        "content": "<p>though, now that I'm looking at this, I think you need to work at <a href=\"https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src/librustc_mir/transform/const_prop.rs#L613\">https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src/librustc_mir/transform/const_prop.rs#L613</a> instead of inside the function being called from there</p>",
        "id": 203701176,
        "sender_full_name": "oli",
        "timestamp": 1594637966
    },
    {
        "content": "<p>Cool :) I’ve got my rustc working already so I’ll take a look this afternoon</p>",
        "id": 203701561,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594638204
    },
    {
        "content": "<p>ok I think I understand how all these functions fit together to decide prop</p>",
        "id": 203746321,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594662439
    },
    {
        "content": "<p>I'll add support for &amp;&amp; and || and push a PR this evening</p>",
        "id": 203746346,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594662453
    },
    {
        "content": "<p>how do I add a new testcase?</p>",
        "id": 203746809,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594662645
    },
    {
        "content": "<p>nvm i think i found it in the book</p>",
        "id": 203746876,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594662680
    },
    {
        "content": "<p>You can take a look at some of the existing tests (for example <code>src/test/mir-opt/const_prop/aggregate.rs</code>). The main thing to notice is the <code>// EMIT_MIR rustc.main.ConstProp.diff</code> directive.</p>",
        "id": 203747048,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594662765
    },
    {
        "content": "<p>After you add your new test file, you can run <code>./x.py test --stage 1 -i --bless src/test/mir-opt</code> to have it generate the diff file for you</p>",
        "id": 203747087,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594662794
    },
    {
        "content": "<p>just did that :)</p>",
        "id": 203747451,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594662986
    },
    {
        "content": "<p>:'( built the compiler without <code>trace!</code> and <code>debug!</code></p>",
        "id": 203750160,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594664130
    },
    {
        "content": "<p>hmm, it seems like this specific optimization is just an instance of a more general pattern where constant prop doesn't work if only one arg is defined</p>",
        "id": 203757986,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594667731
    },
    {
        "content": "<p>for example: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=618c614caefa638e6b5782e519b07e03\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=618c614caefa638e6b5782e519b07e03</a></p>",
        "id": 203758012,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594667751
    },
    {
        "content": "<p>we should expect <code>a  + 0 == a</code></p>",
        "id": 203758070,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594667765
    },
    {
        "content": "<p>at the very least for all builtin types, no?</p>",
        "id": 203758098,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594667783
    },
    {
        "content": "<p>it's all because <code>check_binary_op</code> which is meant to verify if there are overflows expects both args to be defined and if not will abort the constant propagation for that BinaryOp</p>",
        "id": 203758225,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594667873
    },
    {
        "content": "<p>it needs both args in order to call <code>overflowing_binary_op</code>. </p>\n<p>PS: I'm logging my work here hopefully it doesn't bother anyone :) let me know otherwise</p>",
        "id": 203758347,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594667928
    },
    {
        "content": "<p>Yes, you're correct.</p>",
        "id": 203758366,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594667937
    },
    {
        "content": "<p>IMO this feels a bit more like a \"peephole optimization\" to me than something that has to go in <code>const_prop</code></p>",
        "id": 203758411,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594667966
    },
    {
        "content": "<p>yea honestly that's the feeling im getting</p>",
        "id": 203758439,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594667985
    },
    {
        "content": "<p>I feel like we have an existing pass for that kind of thing</p>",
        "id": 203758477,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594668002
    },
    {
        "content": "<p>One sec</p>",
        "id": 203758503,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594668004
    },
    {
        "content": "<p>Yeah <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/transform/instcombine.rs\">https://github.com/rust-lang/rust/blob/master/src/librustc_mir/transform/instcombine.rs</a></p>",
        "id": 203758539,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594668035
    },
    {
        "content": "<p>instcombine?</p>",
        "id": 203758542,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594668038
    },
    {
        "content": "<p>yea</p>",
        "id": 203758544,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594668039
    },
    {
        "content": "<p>Given that you don't need any interpreter state to recognize the <code>a + 0 == a</code> case (or any of the other binary operators) that pass seems like a better fit for this to me</p>",
        "id": 203758668,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594668121
    },
    {
        "content": "<p>yea, is it run for several iterations?</p>",
        "id": 203758740,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594668140
    },
    {
        "content": "<p>Not currently it looks like</p>",
        "id": 203758782,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594668165
    },
    {
        "content": "<p>these kind of identity opts can ripple through</p>",
        "id": 203758789,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594668170
    },
    {
        "content": "<p>If it doesn't hurt our perf benchmarks, I don't think there would be any objection to making it do so</p>",
        "id": 203758847,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594668199
    },
    {
        "content": "<p>Alternatively, we might 80% of the cases just by running it twice during the optimization pipeline.</p>",
        "id": 203758984,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594668247
    },
    {
        "content": "<p>I don't have an issue running it to a fixed point though.</p>",
        "id": 203759044,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594668275
    },
    {
        "content": "<p>I think a constant number of iterations probs is good enough</p>",
        "id": 203759124,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594668310
    },
    {
        "content": "<p>or bounded fixpoint</p>",
        "id": 203759137,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594668315
    },
    {
        "content": "<p>I'll start by implementing the opt :)</p>",
        "id": 203759184,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594668337
    },
    {
        "content": "<p>Yeah, I'd start with that</p>",
        "id": 203759199,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594668345
    },
    {
        "content": "<p>I don't think running it multiple times will be very beneficial currently</p>",
        "id": 203759223,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594668357
    },
    {
        "content": "<p>it's trivial to write examples that defeat a single pass but uncertain how common they are in practice</p>",
        "id": 203759349,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594668410
    },
    {
        "content": "<p>ie: <code>y &amp; (x &amp; false)</code></p>",
        "id": 203759395,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594668434
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/.60x.20.26.20false.20.3D.3D.20false.60/near/203758668\">said</a>:</p>\n<blockquote>\n<p>Given that you don't need any interpreter state to recognize the <code>a + 0 == a</code> case (or any of the other binary operators) that pass seems like a better fit for this to me</p>\n</blockquote>\n<p>I do though, since I need to evaluate the places? unless I misunderstood you</p>",
        "id": 203759938,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594668679
    },
    {
        "content": "<p>I'd say go a head and include some examples of that kind of expression in the MIR tests you add. When we make <code>InstrCombine</code> iterate, we should see those expressions get optimized.</p>",
        "id": 203759972,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594668699
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312719\">Xavier Denis</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/.60x.20.26.20false.20.3D.3D.20false.60/near/203759938\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/.60x.20.26.20false.20.3D.3D.20false.60/near/203758668\">said</a>:</p>\n<blockquote>\n<p>Given that you don't need any interpreter state to recognize the <code>a + 0 == a</code> case (or any of the other binary operators) that pass seems like a better fit for this to me</p>\n</blockquote>\n<p>I do though, since I need to evaluate the places? unless I misunderstood you</p>\n</blockquote>\n<p>Hmm I was thinking that if this ran after <code>ConstProp</code>, then we'd see things like </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">_4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CheckedAdd</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"n\">_3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"k\">i32</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 203760199,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594668817
    },
    {
        "content": "<p>So you'd just walk every MIR statement looking for things like <code>CheckedAdd</code> or <code>Add</code> where one of the arguments is <code>const 0i{size}</code></p>",
        "id": 203760311,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594668864
    },
    {
        "content": "<p>for whatever reason in the original bitand example</p>",
        "id": 203760356,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594668893
    },
    {
        "content": "<p>the false is not propagated</p>",
        "id": 203760365,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594668898
    },
    {
        "content": "<p>so in the original example we get <code>BitAnd(_X, _Y)</code></p>",
        "id": 203760404,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594668919
    },
    {
        "content": "<p>Hmm</p>",
        "id": 203760416,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594668928
    },
    {
        "content": "<p>seems like there could be a seperate issue propagating bools?</p>",
        "id": 203760436,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594668940
    },
    {
        "content": "<p>I'll start by adding this peephole opt for binary operations</p>",
        "id": 203760459,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594668953
    },
    {
        "content": "<p>then i'll figure out why <code>false</code> is not propagating</p>",
        "id": 203760531,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594668979
    },
    {
        "content": "<p>Is this what you're seeing? <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=5352bfb0576e4efc33a357bde970def7\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=5352bfb0576e4efc33a357bde970def7</a></p>",
        "id": 203760636,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594669047
    },
    {
        "content": "<blockquote>\n<p>_4 = BitAnd(move _5, const false); // scope 0 at src/lib.rs:2:10: 2:21</p>\n</blockquote>",
        "id": 203760667,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594669068
    },
    {
        "content": "<p>look at oli's example</p>",
        "id": 203760740,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594669084
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=1ef992fe05b4e49b40ff5f63acc796d5\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=1ef992fe05b4e49b40ff5f63acc796d5</a></p>",
        "id": 203760743,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594669085
    },
    {
        "content": "<p><code> _3 = const false;</code><br>\n<code>_5 = BitAnd(move _3, move _4); </code></p>",
        "id": 203760791,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594669114
    },
    {
        "content": "<p>Oh</p>",
        "id": 203760827,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594669132
    },
    {
        "content": "<p>Gotcha</p>",
        "id": 203760834,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594669134
    },
    {
        "content": "<p>ohhh i think that's cuz the bitand</p>",
        "id": 203760842,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594669137
    },
    {
        "content": "<p>Yeah, we don't do partial propagation yet</p>",
        "id": 203760873,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594669150
    },
    {
        "content": "<p>is inserted during lowering</p>",
        "id": 203760881,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594669153
    },
    {
        "content": "<p><code>ConstProp</code> currently really wants to evaluate &amp; replace the entire statement</p>",
        "id": 203760913,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594669176
    },
    {
        "content": "<p>ah nvm, I thought it could have been from a pass between const prop and instcombine</p>",
        "id": 203760927,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594669180
    },
    {
        "content": "<p>yep, I noticed :P</p>",
        "id": 203760943,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594669191
    },
    {
        "content": "<p>Not just whatever parts it knows the values to</p>",
        "id": 203760946,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594669192
    },
    {
        "content": "<p>Heh</p>",
        "id": 203760950,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594669196
    },
    {
        "content": "<p>but couldn't it still propagate <code>_3</code> into <code>_5</code>?</p>",
        "id": 203761057,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594669237
    },
    {
        "content": "<p>it knows it's value...</p>",
        "id": 203761064,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594669241
    },
    {
        "content": "<p><code>InstCombine</code> is also run before <code>ConstProp</code></p>",
        "id": 203761375,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594669394
    },
    {
        "content": "<p>hmm seems like for this opt to be useful it has to be in <code>ConstProp</code> and I'll need to write something like <code>eval_rval_into_place</code> which only does binaryops with missing args</p>",
        "id": 203765924,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594671693
    },
    {
        "content": "<p>or, I need to get constant prop to properly propagate simple constants into rvalues + flip the ordering between the passes</p>",
        "id": 203766100,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594671788
    },
    {
        "content": "<p>That's true. Putting it in const props seems fine.</p>",
        "id": 203767532,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594672537
    },
    {
        "content": "<p>in summary: rustc only propagates constants into binops if both args are constant. this means that when an operation uses a non-constant value, propagation isn't done. this prevents writing a simple peephole opt which folds neutral elements / top elements for <code>&amp;</code>, <code>|</code>, <code>+</code>, <code>-</code>, <code>/</code> etc..</p>",
        "id": 203770376,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594673888
    },
    {
        "content": "<p>Hellu</p>",
        "id": 203801054,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594706119
    },
    {
        "content": "<p>I think it makes sense to run this after const-prop</p>",
        "id": 203801057,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594706130
    },
    {
        "content": "<p>Um</p>",
        "id": 203801059,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594706132
    },
    {
        "content": "<p>Also!</p>",
        "id": 203801068,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594706150
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312719\">@Xavier Denis</span> I'm getting ready to write my thesis on mir-opts. I plan to complete the current const-prop implementation, by letting it go past blocks</p>",
        "id": 203801123,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594706216
    },
    {
        "content": "<p>Currently const-prop propagates constants more or less forever</p>",
        "id": 203801128,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594706235
    },
    {
        "content": "<p>Like \"const\" constants</p>",
        "id": 203801133,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594706248
    },
    {
        "content": "<p>But we don't have the same yet for local variables that <em>also happen to reduce to a constant at compile time</em>, if that makes sense</p>",
        "id": 203801142,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594706277
    },
    {
        "content": "<p>I will be working on that so don't worry</p>",
        "id": 203801203,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594706359
    },
    {
        "content": "<p>I'll cover those bases for you</p>",
        "id": 203801205,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594706365
    },
    {
        "content": "<p><span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span>️</p>",
        "id": 203801206,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594706369
    },
    {
        "content": "<p>We have an algorithm ready (that oli and I think is correct). I just need to get past bureaucracy with uni now ^^</p>",
        "id": 203801271,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594706432
    },
    {
        "content": "<p>But yeah, coming back to local vars. The reason they don't get propagated further is that we have restricted their propagation to just their own blocks</p>",
        "id": 203801294,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594706500
    },
    {
        "content": "<p>Because when you get into other blocks you have to be aware of control flow</p>",
        "id": 203801338,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594706531
    },
    {
        "content": "<p>I think it makes sense to add your opt in const-prop. </p>\n<p>Adding zero, multiplying by one, multiplying by zero, doing &amp; false and | true, are all edge cases of expression evaluation that can result in simplified expressions at compile time.</p>",
        "id": 203801442,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594706713
    },
    {
        "content": "<p>So... I think it makes sense. To add it to const-prop. <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> what do you think?</p>",
        "id": 203801501,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594706790
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/.60x.20.26.20false.20.3D.3D.20false.60/near/203760873\">said</a>:</p>\n<blockquote>\n<p>Yeah, we don't do partial propagation yet</p>\n</blockquote>\n<p>that's why I wanted to do this in const prop first. Another reason is that in contrast to <code>a + 0</code>, we can continue const propping after <code>true | a</code>, so if we do it in const prop we don't need a fixed point iteration</p>",
        "id": 203807018,
        "sender_full_name": "oli",
        "timestamp": 1594713167
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/.60x.20.26.20false.20.3D.3D.20false.60/near/203758668\">said</a>:</p>\n<blockquote>\n<p>Given that you don't need any interpreter state to recognize the <code>a + 0 == a</code> case (or any of the other binary operators) that pass seems like a better fit for this to me</p>\n</blockquote>\n<p>well there can be advantages to doing both together, if a const-prop simplification and an instcombine mutually depend on each other.<br>\nout constprop likely is not powerful enough for that though.</p>",
        "id": 203923934,
        "sender_full_name": "RalfJ",
        "timestamp": 1594798321
    },
    {
        "content": "<p>I got <code>x || false</code> and <code>x &amp;&amp; true</code> working :) but getting cases like <code>x + 0</code> working is awkward with the current const_prop setup and would be better suited to instcombine currently I think.</p>",
        "id": 204267081,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1595025113
    },
    {
        "content": "<p>sounds good, let's do nop integer math on non-constants in a separate PR</p>",
        "id": 204287918,
        "sender_full_name": "oli",
        "timestamp": 1595054800
    },
    {
        "content": "<p>I noticed however that constant prop misses a lot of opportunities currently, it doesn't actually push constants into the operands of rvalues!</p>",
        "id": 204316058,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1595103486
    },
    {
        "content": "<p>this makes it easy to get code like _1 = 5; _2 = x + _1 it'd be nice for it to at least constprop _1 into _2</p>",
        "id": 204316078,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1595103571
    },
    {
        "content": "<p>I think it's just a matter of adding another case to the visitor so that we properly substitute into operands</p>",
        "id": 204316713,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1595104611
    },
    {
        "content": "<p>As a side question: is this at least an optimization the LLVM catches later in the compilation? and then adding this to MIR just helps generics and miri and such?</p>",
        "id": 204327366,
        "sender_full_name": "Lokathor",
        "timestamp": 1595124099
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> the one that Xavier just mentioned? Yes. This is something that LLVM catches later.</p>",
        "id": 204338095,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595145300
    },
    {
        "content": "<p>Adding this to MIR helps because MIR is more aware of everything. LLVM has to do a lot of work to optimize our code. Doing it in MIR is more efficient.</p>",
        "id": 204338155,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595145410
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312719\">@Xavier Denis</span> it actually does push them, but it cannot currently do so for all cases. Locals aren't propagated outside of their own block.</p>",
        "id": 204338160,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595145478
    },
    {
        "content": "<p>That is what I'll be working on</p>",
        "id": 204338199,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595145497
    },
    {
        "content": "<p>Because the code that you posted should and will be able to propagate ^^</p>",
        "id": 204338200,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595145514
    },
    {
        "content": "<p>I'm not yet coding it because I have to wait on uni to start my thesis. But it's the first on my list, and oli and I have an algorithm in mind to do the propagation without breaking correct code.</p>",
        "id": 204338325,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595145686
    },
    {
        "content": "<p>I checked it doesn’t and they are marked as always propagate</p>",
        "id": 204341076,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1595151118
    },
    {
        "content": "<p>The problem is the code only propagates into a statement if that statement itself is good to propagate</p>",
        "id": 204341118,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1595151143
    },
    {
        "content": "<p>But I’ll leave it to toy</p>",
        "id": 204341126,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1595151171
    },
    {
        "content": "<p>it only propagates into assignments to locals if the entire local is constant</p>",
        "id": 204341132,
        "sender_full_name": "oli",
        "timestamp": 1595151185
    },
    {
        "content": "<p>if you have <code>x + known_to_be_const</code>, there's no partial propagation happening</p>",
        "id": 204341140,
        "sender_full_name": "oli",
        "timestamp": 1595151202
    },
    {
        "content": "<p>discussion and impl about that continues in <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/const.20prop.20into.20operands/near/204339934\">https://rust-lang.zulipchat.com/#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/const.20prop.20into.20operands/near/204339934</a></p>",
        "id": 204341149,
        "sender_full_name": "oli",
        "timestamp": 1595151218
    },
    {
        "content": "<p>Yep that’s what I meant</p>",
        "id": 204342305,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1595153305
    },
    {
        "content": "<p>Ahhh I see, my bad</p>",
        "id": 204364529,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595183308
    },
    {
        "content": "<p>:)</p>",
        "id": 204364530,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595183310
    },
    {
        "content": "<p>weeiiird... I'm getting a bizarre failure from my changes</p>",
        "id": 204478010,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1595280171
    },
    {
        "content": "<p>but it's not actually the optimization??</p>",
        "id": 204478017,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1595280178
    },
    {
        "content": "<p>it seems related to running these lines:</p>\n<div class=\"codehilite\"><pre><span></span><code>                    let l = this.ecx.eval_operand(left, None);\n                    let r = this.ecx.eval_operand(right, None);\n\n                    if let (Ok(_), Ok(_)) = (&amp;l, &amp;r) {\n                        this.ecx.eval_rvalue_into_place(rvalue, place)?;\n                        return Ok(());\n                    }\n</code></pre></div>",
        "id": 204480305,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1595281623
    },
    {
        "content": "<p>but i really don't see how that would cause <code>crossbeam-utils</code> to no longer compile</p>",
        "id": 204480332,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1595281640
    },
    {
        "content": "<p>if i replace the <code>if let</code> by using <code>is_ok</code> everything compiles?</p>",
        "id": 204491776,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1595284274
    }
]