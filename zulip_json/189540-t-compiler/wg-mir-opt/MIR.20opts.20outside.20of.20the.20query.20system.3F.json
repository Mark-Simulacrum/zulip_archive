[
    {
        "content": "<p>Seeing the bug about the cycles caused by MIR inlining and const-eval, I was wondering: should we eventually move away from queries once MIR is built/checked, and use a manual dependency tracking using anonymous nodes like the type checker does?<br>\nThis would (1) avoid stolen MIR errors, (2) allow for multiple optimisation passes (fixed-point loop?), (3) allow to drop the HIR.<br>\nOn the other hand, this would require to explicit the MIR optimisation &amp; inlining global loop.</p>",
        "id": 219406347,
        "sender_full_name": "cjgillot",
        "timestamp": 1607551824
    },
    {
        "content": "<p>That would probably be hard to integrate with the rest of the incremental system such that the optimized mir and compiled codegen units can still be cached.</p>",
        "id": 219406985,
        "sender_full_name": "bjorn3",
        "timestamp": 1607552123
    },
    {
        "content": "<p>Anonymous nodes don't avoid dependency tracking. I think they just attribute the dependencies to the query that invoked the anonymous query.</p>",
        "id": 219407122,
        "sender_full_name": "bjorn3",
        "timestamp": 1607552191
    },
    {
        "content": "<p>Oh, yes, I forgot about the caching. So no dropping the TyCtxt early.<br>\nGiven the list of red optimized_mir nodes, we would be able to construct a work list of the required optimization work queue. Treating it as a queue, would avoid having cycles. I mention anonymous nodes to track the dependencies each time the MIR for one item requires a previously optimised MIR.</p>",
        "id": 219408657,
        "sender_full_name": "cjgillot",
        "timestamp": 1607552895
    },
    {
        "content": "<p>This is what I have in mind:</p>\n<div class=\"codehilite\"><pre><span></span><code>let mut items = FxHashMap&lt;DefId, (Mir, DepNode)&gt;;\nlet mut queue = Vec::new();\nfor def_id in all_def_ids {\n  if /* optimised_mir is green */ {\n    items.insert(def_id, (tcx.validated_mir(def_id), /* validated MIR dep_node */));\n  } else {\n    items.insert(def_id, (tcx.validated_mir(def_id), /* validated MIR dep_node */));\n    queue.push(def_id);\n  }\n}\nwhile !queue.is_empty() {\n   let def_id = queue.pop();\n  let (mir, old_node) = items[def_id];\n  // create a new anonymous dep node `node`\n  // add an edge `node -&gt; old_node`\n  /* optimisation passes */\n  // inlining\n  for i_def_id in inlined_items {\n    assert_ne!(def_id, i_def_id);\n    // add a dependency edge `node -&gt; items[i_def_id].1`\n  }\n  items[def_id] = (mir, node);\n  // reschedule if we have some more fuel or some dependencies are in the queue\n}\n</code></pre></div>",
        "id": 219409610,
        "sender_full_name": "cjgillot",
        "timestamp": 1607553443
    },
    {
        "content": "<p>Using fuel is not compatible with incremental compilation. Any tiny change can cause all functions to be optimized differently.</p>",
        "id": 219410236,
        "sender_full_name": "bjorn3",
        "timestamp": 1607553792
    }
]