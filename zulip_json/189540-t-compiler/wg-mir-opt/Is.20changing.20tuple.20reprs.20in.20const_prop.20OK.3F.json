[
    {
        "content": "<p>I'm looking at a few const_prop bugs (<a href=\"https://github.com/rust-lang/rust/issues/66971\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66971\">#66971</a> and <a href=\"https://github.com/rust-lang/rust/issues/67019\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67019\">#67019</a>) -- should const_prop be changing representations of tuple values at all? I think the problem may be more general than just values represented as two values (<code>ScalarPair</code>s). Here's an example program:</p>\n<div class=\"codehilite\"><pre><span></span>fn test(this: ((u8,),)) {\n    assert!((this.0).0 == 0);\n}\n\nfn main() {\n    test(((0,),));\n}\n</pre></div>\n\n\n<p>const_prop changes the argument tuple from</p>\n<div class=\"codehilite\"><pre><span></span>        _3 = (const 0u8,);\n        _2 = (move _3,);\n</pre></div>\n\n\n<p>to</p>\n<div class=\"codehilite\"><pre><span></span>        _3 = const Scalar(0x00) : (u8,);\n        _2 = const Scalar(0x00) : ((u8,),);\n</pre></div>\n\n\n<p>While this is probably correct in the sense that <code>((0,),)</code> is represented the same as <code>0</code> in the final assembly, I'm not sure if this is something that <code>const_prop</code> is supposed to be doing. Is this expected? Can anyone comment on this?</p>",
        "id": 182555409,
        "sender_full_name": "osa1",
        "timestamp": 1575466452
    },
    {
        "content": "<p>I think I agree with you. MIR optimizations should try to avoid depending on the layout of types as much as possible IMO.</p>",
        "id": 182556616,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1575467374
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Do you have thoughts? ^</p>",
        "id": 182556631,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1575467389
    },
    {
        "content": "<p>what do you mean by \"depending on the layout of types\"?</p>",
        "id": 182564051,
        "sender_full_name": "oli",
        "timestamp": 1575472158
    },
    {
        "content": "<p>I think using the layout is totally something we should do (same with the optimization shown above where we get trivial constants for tuples and such)</p>",
        "id": 182564100,
        "sender_full_name": "oli",
        "timestamp": 1575472190
    },
    {
        "content": "<p>Hmm... I guess my feeling was that if you have an <em>n</em>-element tuple, you should always have <em>n</em> operands when assigning to that tuple even if some of the inner types are ZSTs.</p>",
        "id": 182564870,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1575472563
    },
    {
        "content": "<p>However, I think the most important thing is consistency with the rest of the MIR pipeline. If everyone is already using layout to do various computations, we should do that as well.</p>",
        "id": 182564927,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1575472599
    },
    {
        "content": "<p>oh yea, definitely, iirc <span class=\"user-mention\" data-user-id=\"119169\">@osa1</span> already fixed that in their PR</p>",
        "id": 182565000,
        "sender_full_name": "oli",
        "timestamp": 1575472646
    },
    {
        "content": "<p>I don't want other passes to have care whether or not ConstProp has run. So the MIR should be just as consistent after ConstProp runs as it is before</p>",
        "id": 182565005,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1575472648
    },
    {
        "content": "<p>yes, definitely, the previous code was just broken</p>",
        "id": 182565039,
        "sender_full_name": "oli",
        "timestamp": 1575472676
    },
    {
        "content": "<p>Agreed</p>",
        "id": 182565043,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1575472680
    },
    {
        "content": "<p>cool, all on one boat, I was just misreading</p>",
        "id": 182565103,
        "sender_full_name": "oli",
        "timestamp": 1575472699
    },
    {
        "content": "<p>No, it's probably my bad. I haven't had <span aria-label=\"coffee\" class=\"emoji emoji-2615\" role=\"img\" title=\"coffee\">:coffee:</span> yet</p>",
        "id": 182565125,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1575472712
    },
    {
        "content": "<p>Hmm, so it's fine for const-prop to turns a <code>(0,)</code> to <code>0</code>? I was thinking that that's accidentally done as it changes the logical representation of the variable.</p>",
        "id": 182633476,
        "sender_full_name": "osa1",
        "timestamp": 1575529541
    },
    {
        "content": "<p>Huh, that shouldn't happen, but a Scalar(0) does not mean a 0, it can still be a <code>(0,)</code>.</p>",
        "id": 182653436,
        "sender_full_name": "oli",
        "timestamp": 1575548227
    },
    {
        "content": "<p>In memory a single elem tuple looks the same as the single elem. The same is true for constants in rustc</p>",
        "id": 182653471,
        "sender_full_name": "oli",
        "timestamp": 1575548273
    },
    {
        "content": "<p>That does not happen, sorry my example is not quite right (though the question is valid) -- I should've said \"turns a ((0, 1),) to a (0, 1)\". Agreed that they're represented the same in runtime.</p>",
        "id": 182654244,
        "sender_full_name": "osa1",
        "timestamp": 1575548897
    },
    {
        "content": "<p>Yea, that's wrong</p>",
        "id": 182655078,
        "sender_full_name": "oli",
        "timestamp": 1575549666
    },
    {
        "content": "<p>Sorry, your answers are a bit too concise for me to understand. Maybe you can respond to my question here <a href=\"https://github.com/rust-lang/rust/issues/67019\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67019\">https://github.com/rust-lang/rust/issues/67019</a> ?</p>",
        "id": 182655637,
        "sender_full_name": "osa1",
        "timestamp": 1575550140
    },
    {
        "content": "<p>Sorry about that. I'll write up sth more detailed when I get to a PC</p>",
        "id": 182656266,
        "sender_full_name": "oli",
        "timestamp": 1575550616
    },
    {
        "content": "<p>Thanks</p>",
        "id": 182664530,
        "sender_full_name": "osa1",
        "timestamp": 1575556720
    },
    {
        "content": "<p>I made a writeup on the issue</p>",
        "id": 182745989,
        "sender_full_name": "oli",
        "timestamp": 1575627362
    },
    {
        "content": "<p>If you want to just fix the ICE for now, you can also just bail out if the tuple doesn't have exactly two fields with <code>Scalar</code> layout</p>",
        "id": 182746171,
        "sender_full_name": "oli",
        "timestamp": 1575627510
    },
    {
        "content": "<p>this allows the full fix (actually more features, because we'd const prop more) to bake in a separate PR and makes your PR easier to backport in case we need to move it to beta</p>",
        "id": 182746218,
        "sender_full_name": "oli",
        "timestamp": 1575627555
    },
    {
        "content": "<p>Thanks @oli, that's really helpful. I think I understand the basic idea, I'll give it a try.</p>",
        "id": 182749861,
        "sender_full_name": "osa1",
        "timestamp": 1575630100
    },
    {
        "content": "<p>@oli I'm trying to implement the idea. So far I added two lines to <code>replace_with_const</code>:</p>\n<div class=\"codehilite\"><pre><span></span>        let _x = crate::const_eval::op_to_const(&amp;crate::const_eval::mk_eval_cx(self.tcx, DUMMY_SP, self.param_env), value);\n        debug!(&quot;op_to_const = {:#?}&quot;, _x);\n</pre></div>\n\n\n<p>but that triggered an assertion in <code>const_eval</code>:</p>\n<div class=\"codehilite\"><pre><span></span>thread &#39;rustc&#39; panicked at &#39;assertion failed: `(left == right)`\n  left: `8`,\n right: `1`&#39;, src/librustc/mir/interpret/value.rs:319:9\nstack backtrace:\n   0: backtrace::backtrace::libunwind::trace\n             at /home/omer/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/libunwind.rs:88\n   1: backtrace::backtrace::trace_unsynchronized\n             at /home/omer/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/mod.rs:66\n   2: std::sys_common::backtrace::_print_fmt\n             at src/libstd/sys_common/backtrace.rs:84\n   3: &lt;std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display&gt;::fmt\n             at src/libstd/sys_common/backtrace.rs:61\n   4: core::fmt::write\n             at src/libcore/fmt/mod.rs:1025\n   5: std::io::Write::write_fmt\n             at src/libstd/io/mod.rs:1428\n   6: std::sys_common::backtrace::_print\n             at src/libstd/sys_common/backtrace.rs:65\n   7: std::sys_common::backtrace::print\n             at src/libstd/sys_common/backtrace.rs:50\n   8: std::panicking::default_hook::{{closure}}\n             at src/libstd/panicking.rs:193\n   9: std::panicking::default_hook\n             at src/libstd/panicking.rs:210\n  10: &lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call\n             at ./src/liballoc/boxed.rs:983\n  11: rustc_driver::report_ice\n             at src/librustc_driver/lib.rs:1174\n  12: std::panicking::rust_panic_with_hook\n             at src/libstd/panicking.rs:475\n  13: rust_begin_unwind\n             at src/libstd/panicking.rs:375\n  14: std::panicking::begin_panic_fmt\n             at src/libstd/panicking.rs:326\n  15: rustc::mir::interpret::value::Scalar&lt;Tag&gt;::check_raw\n             at ./&lt;::std::macros::panic macros&gt;:9\n  16: rustc::mir::interpret::value::Scalar&lt;Tag&gt;::to_bits\n             at ./src/librustc/mir/interpret/value.rs:329\n  17: rustc::mir::interpret::value::Scalar&lt;Tag&gt;::to_machine_usize\n             at ./src/librustc/mir/interpret/value.rs:409\n  18: rustc::mir::interpret::value::ScalarMaybeUndef&lt;Tag&gt;::to_machine_usize\n             at ./src/librustc/mir/interpret/value.rs:569\n  19: rustc_mir::const_eval::op_to_const\n             at src/librustc_mir/const_eval.rs:121\n  20: rustc_mir::transform::const_prop::ConstPropagator::replace_with_const\n             at src/librustc_mir/transform/const_prop.rs:624\n...\n</pre></div>\n\n\n<p>Am I misusing <code>op_to_const</code> or is this something to debug and fix?</p>",
        "id": 182753089,
        "sender_full_name": "osa1",
        "timestamp": 1575633316
    },
    {
        "content": "<p>you should not create a new eval_cx, but reuse the one from the const propagator. You'll have to make <code>op_to_const</code> generic over the machine parameter in order to do this</p>",
        "id": 182753420,
        "sender_full_name": "oli",
        "timestamp": 1575633710
    },
    {
        "content": "<p>I can't tell if this is the cause of the ICE though, but without that change you'd run into errors later because some allocations don't exist outside the const prop machine</p>",
        "id": 182753477,
        "sender_full_name": "oli",
        "timestamp": 1575633746
    },
    {
        "content": "<p>OK, I'll try that. <code>1 == 8</code> seems like the LHS is in words but RHS is in bytes so maybe there's a confusion there, but I'm not sure. I'll check.</p>",
        "id": 182753615,
        "sender_full_name": "osa1",
        "timestamp": 1575633851
    },
    {
        "content": "<blockquote>\n<p>you should not create a new eval_cx, but reuse the one from the const propagator. You'll have to make <code>op_to_const</code> generic over the machine parameter in order to do this</p>\n</blockquote>\n<p>There's a typedef I introduced the last time I had to do that which you can probably reuse. <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/const_eval/type.CompileTimeEvalContext.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/const_eval/type.CompileTimeEvalContext.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/const_eval/type.CompileTimeEvalContext.html</a></p>",
        "id": 182753630,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1575633865
    },
    {
        "content": "<p>Yea the assert failure is a <code>Scalar</code> that is one byte being accessed with a type that is 8. The 8 is correct, since the code uses <code>to_machine_usize</code>, which on a 64bit system looks for an 8 byte value</p>",
        "id": 182753718,
        "sender_full_name": "oli",
        "timestamp": 1575633930
    },
    {
        "content": "<p>Ok, I found the ICE</p>",
        "id": 182753846,
        "sender_full_name": "oli",
        "timestamp": 1575634061
    },
    {
        "content": "<p>lol what on earth was I thinking?</p>",
        "id": 182753855,
        "sender_full_name": "oli",
        "timestamp": 1575634067
    },
    {
        "content": "<p>I think this may be triggerable on stable</p>",
        "id": 182753863,
        "sender_full_name": "oli",
        "timestamp": 1575634078
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/7b482cdf7ce55e05ee8392e1ade70966e3189cfd/src/librustc_mir/const_eval.rs#L108\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/7b482cdf7ce55e05ee8392e1ade70966e3189cfd/src/librustc_mir/const_eval.rs#L108\">https://github.com/rust-lang/rust/blob/7b482cdf7ce55e05ee8392e1ade70966e3189cfd/src/librustc_mir/const_eval.rs#L108</a> does not check for slice type and just assumes scalar pairs are slices</p>",
        "id": 182753919,
        "sender_full_name": "oli",
        "timestamp": 1575634100
    },
    {
        "content": "<p><span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 182753920,
        "sender_full_name": "osa1",
        "timestamp": 1575634101
    },
    {
        "content": "<p>ah no. we have checks: <a href=\"https://github.com/rust-lang/rust/blob/7b482cdf7ce55e05ee8392e1ade70966e3189cfd/src/librustc_mir/const_eval.rs#L67\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/7b482cdf7ce55e05ee8392e1ade70966e3189cfd/src/librustc_mir/const_eval.rs#L67\">https://github.com/rust-lang/rust/blob/7b482cdf7ce55e05ee8392e1ade70966e3189cfd/src/librustc_mir/const_eval.rs#L67</a></p>",
        "id": 182754028,
        "sender_full_name": "oli",
        "timestamp": 1575634205
    },
    {
        "content": "<p>phew</p>",
        "id": 182754033,
        "sender_full_name": "oli",
        "timestamp": 1575634208
    },
    {
        "content": "<p>But the ICE is still there because <a href=\"https://github.com/rust-lang/rust/blob/7b482cdf7ce55e05ee8392e1ade70966e3189cfd/src/librustc_mir/const_eval.rs#L80\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/7b482cdf7ce55e05ee8392e1ade70966e3189cfd/src/librustc_mir/const_eval.rs#L80\">https://github.com/rust-lang/rust/blob/7b482cdf7ce55e05ee8392e1ade70966e3189cfd/src/librustc_mir/const_eval.rs#L80</a> is wrong in the const prop usage</p>",
        "id": 182754096,
        "sender_full_name": "oli",
        "timestamp": 1575634314
    },
    {
        "content": "<p>Hmm, right</p>",
        "id": 182754240,
        "sender_full_name": "osa1",
        "timestamp": 1575634428
    },
    {
        "content": "<p>Ok... this is not too fun. I guess you need to split up <code>op_to_const</code> into three parts. </p>\n<ol>\n<li><a href=\"https://github.com/rust-lang/rust/blob/7b482cdf7ce55e05ee8392e1ade70966e3189cfd/src/librustc_mir/const_eval.rs#L58-L76\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/7b482cdf7ce55e05ee8392e1ade70966e3189cfd/src/librustc_mir/const_eval.rs#L58-L76\">https://github.com/rust-lang/rust/blob/7b482cdf7ce55e05ee8392e1ade70966e3189cfd/src/librustc_mir/const_eval.rs#L58-L76</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/blob/7b482cdf7ce55e05ee8392e1ade70966e3189cfd/src/librustc_mir/const_eval.rs#L77-L86\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/7b482cdf7ce55e05ee8392e1ade70966e3189cfd/src/librustc_mir/const_eval.rs#L77-L86\">https://github.com/rust-lang/rust/blob/7b482cdf7ce55e05ee8392e1ade70966e3189cfd/src/librustc_mir/const_eval.rs#L77-L86</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/blob/7b482cdf7ce55e05ee8392e1ade70966e3189cfd/src/librustc_mir/const_eval.rs#L77-L131\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/7b482cdf7ce55e05ee8392e1ade70966e3189cfd/src/librustc_mir/const_eval.rs#L77-L131\">https://github.com/rust-lang/rust/blob/7b482cdf7ce55e05ee8392e1ade70966e3189cfd/src/librustc_mir/const_eval.rs#L77-L131</a></li>\n</ol>",
        "id": 182754311,
        "sender_full_name": "oli",
        "timestamp": 1575634463
    },
    {
        "content": "<p>The first and third part is what we can reuse, but the second part we need to change the else-part to actually force allocate the value we got</p>",
        "id": 182754335,
        "sender_full_name": "oli",
        "timestamp": 1575634508
    },
    {
        "content": "<p>So I'm still trying to find this eval_cx in const-prop. I don't think const-prop has an eval_cx, does it? I can't find it</p>",
        "id": 182754361,
        "sender_full_name": "osa1",
        "timestamp": 1575634541
    },
    {
        "content": "<p>At this point I really suggest you make a small PR just fixing the bug as described earlier, and make the full change in a separate PR, because otherwise we won't be able to tell apart problems from the small fix from problems in the big fix</p>",
        "id": 182754371,
        "sender_full_name": "oli",
        "timestamp": 1575634554
    },
    {
        "content": "<p>Oh, I think I found it.</p>",
        "id": 182754426,
        "sender_full_name": "osa1",
        "timestamp": 1575634582
    },
    {
        "content": "<p>XD you get it by calling <code>use_ecx</code> :D</p>",
        "id": 182754432,
        "sender_full_name": "oli",
        "timestamp": 1575634589
    },
    {
        "content": "<p>you can't use it directly</p>",
        "id": 182754445,
        "sender_full_name": "oli",
        "timestamp": 1575634601
    },
    {
        "content": "<p>(or you shouldn't)</p>",
        "id": 182754456,
        "sender_full_name": "oli",
        "timestamp": 1575634610
    },
    {
        "content": "<p>Hmm, <code>InterpCx&lt;'mir, 'tcx, ConstPropMachine&gt;</code> is what I have in const-prop, but I really need <code>InterpCx&lt;'mir, 'tcx, CompileTimeInterpreter&lt;'mir, 'tcx&gt;&gt;</code>. Can I use the former for the latter? The Machine arguments are different</p>",
        "id": 182754563,
        "sender_full_name": "osa1",
        "timestamp": 1575634738
    },
    {
        "content": "<blockquote>\n<p>At this point I really suggest you make a small PR just fixing the bug as described earlier, and make the full change in a separate PR, because otherwise we won't be able to tell apart problems from the small fix from problems in the big fix</p>\n</blockquote>\n<p>The bug described earlier is <a href=\"https://github.com/rust-lang/rust/issues/66971\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66971\">#66971</a> ? Or something else?</p>",
        "id": 182754616,
        "sender_full_name": "osa1",
        "timestamp": 1575634802
    },
    {
        "content": "<p>No, you can't. You need to make <code>op_to_const</code> generic over the machine</p>",
        "id": 182754650,
        "sender_full_name": "oli",
        "timestamp": 1575634805
    },
    {
        "content": "<blockquote>\n<p>If you want to just fix the ICE for now, you can also just bail out if the tuple doesn't have exactly two fields with <code>Scalar</code> layout</p>\n</blockquote>\n<p>this is the \"fix explanation\", I can make it more detailed</p>",
        "id": 182754671,
        "sender_full_name": "oli",
        "timestamp": 1575634838
    },
    {
        "content": "<blockquote>\n<p>this is the \"fix explanation\", I can make it more detailed</p>\n</blockquote>\n<p>OK, that makes sense though that disables the optimization when type and ABI layout doesn't match... which may be fine I guess.</p>",
        "id": 182754726,
        "sender_full_name": "osa1",
        "timestamp": 1575634916
    },
    {
        "content": "<p>I'll do that and then we can discuss the next steps if that's OK.</p>",
        "id": 182754778,
        "sender_full_name": "osa1",
        "timestamp": 1575634930
    },
    {
        "content": "<p>well, the bug being fixed by checking that it's a two element tuple with each field being <code>Scalar</code> layout is both <a href=\"https://github.com/rust-lang/rust/issues/66971\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66971\">#66971</a> and <a href=\"https://github.com/rust-lang/rust/issues/67019\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67019\">#67019</a></p>",
        "id": 182754780,
        "sender_full_name": "oli",
        "timestamp": 1575634933
    },
    {
        "content": "<p>yea, let's pessimize for now, there's no nice way to resolve this without adding more (and possibly more fragile) code</p>",
        "id": 182754810,
        "sender_full_name": "oli",
        "timestamp": 1575634966
    },
    {
        "content": "<p>Alright. Just curious about the plan, is this optimization (when type and ABI layout doesn't match) something we want to do in the future or are we shelving it?</p>",
        "id": 182754915,
        "sender_full_name": "osa1",
        "timestamp": 1575635052
    },
    {
        "content": "<p>we want do do it. The type and ABI layout <em>do</em> match, it's just that they are entirely orthogonal ways to think about a type. It is no conflict that the layout of a three element tuple is a <code>ScalarPair</code> if one of the elements is a ZST</p>",
        "id": 182755165,
        "sender_full_name": "oli",
        "timestamp": 1575635256
    },
    {
        "content": "<p>The bug occurred because we forgot that these things are independent ways to look at values and should not be mixed</p>",
        "id": 182755230,
        "sender_full_name": "oli",
        "timestamp": 1575635284
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> </p>\n<blockquote>\n<p>bail out if the tuple doesn't have exactly two fields with Scalar layout</p>\n</blockquote>\n<p>How do I check if the type has two fields with Scalar layout?</p>",
        "id": 182759578,
        "sender_full_name": "osa1",
        "timestamp": 1575638618
    },
    {
        "content": "<p>you check <code>if let Abi::Scalar(_) = ecx.layout_of(field_ty)?.details.abi</code> (inside a <code>use_ecx</code>). You get the field types from the <code>if let ty::Tuple(substs) = ty {</code></p>",
        "id": 182760136,
        "sender_full_name": "oli",
        "timestamp": 1575639008
    },
    {
        "content": "<p>OK, I have a patch. Starting testing now.</p>",
        "id": 182763543,
        "sender_full_name": "osa1",
        "timestamp": 1575641464
    },
    {
        "content": "<p>Sigh I accidentally cleaned the tree so I'll have to build rustc from scratch now. I'll update the PR in an hour or so.</p>",
        "id": 182765346,
        "sender_full_name": "osa1",
        "timestamp": 1575642664
    },
    {
        "content": "<p>XD oh no</p>",
        "id": 182765358,
        "sender_full_name": "oli",
        "timestamp": 1575642676
    },
    {
        "content": "<p>But the good news is the test passes. I'll try the other relevant issues now once I have a working build again</p>",
        "id": 182765383,
        "sender_full_name": "osa1",
        "timestamp": 1575642698
    },
    {
        "content": "<p>After this I'd be happy to work on the more general solution to propagating pairs</p>",
        "id": 182765471,
        "sender_full_name": "osa1",
        "timestamp": 1575642726
    },
    {
        "content": "<p>Awesome!</p>",
        "id": 182765551,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1575642798
    },
    {
        "content": "<p>I think your changes will fix a crash I'm seeing locally when I try to allow propagation into user variables.</p>",
        "id": 182765632,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1575642853
    },
    {
        "content": "<p>PR updated. It fixes 3 issues that I know of.</p>",
        "id": 182767035,
        "sender_full_name": "osa1",
        "timestamp": 1575643713
    },
    {
        "content": "<p><span aria-label=\"party ball\" class=\"emoji emoji-1f38a\" role=\"img\" title=\"party ball\">:party_ball:</span></p>",
        "id": 182767097,
        "sender_full_name": "oli",
        "timestamp": 1575643761
    }
]