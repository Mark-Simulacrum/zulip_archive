[
    {
        "content": "<p>I've started trying to implement something, but I'm having trouble generating the MIR dump as per step 2 of the guide on creating a new optimization. When I add <code>// EMIT_MIR simplify_obvious_switch.diff</code> above the function I want a dump of, it gives me an error about wanting files to exist:</p>\n<div class=\"codehilite\"><pre><span></span><code>Output file `/home/theodegioanni/github/rust/build/x86_64-unknown-linux-gnu/test/mir-opt/simplify_obvious_switch/simplify_obvious_switch.mir` from test does not exist, available files are in `/home/theodegioanni/github/rust/build/x86_64-unknown-linux-gnu/test/mir-opt/simplify_obvious_switch`\n</code></pre></div>\n<p>but the thing is that I want it to generate those files, right? I might be misunderstanding, could somebody shed light upon this?</p>",
        "id": 238500132,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620835452
    },
    {
        "content": "<p>Doesn't the ConstGoto optimization already perform half of the objective?</p>",
        "id": 238500488,
        "sender_full_name": "cjgillot",
        "timestamp": 1620835577
    },
    {
        "content": "<p>oh well</p>",
        "id": 238500953,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620835747
    },
    {
        "content": "<p>it's doing exactly what I wanted to add</p>",
        "id": 238500962,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620835748
    },
    {
        "content": "<p>hmm actually</p>",
        "id": 238501099,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620835803
    },
    {
        "content": "<p>why does ConstGoto stick to gotos?</p>",
        "id": 238501155,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620835810
    },
    {
        "content": "<p>it could do what it does on any terminator, right?</p>",
        "id": 238501180,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620835821
    },
    {
        "content": "<p>IIRC, ConstGoto was meant to be a fast version of the constant propagation and destination propagation, which can propagate across arbitrary terminators.</p>",
        "id": 238501542,
        "sender_full_name": "cjgillot",
        "timestamp": 1620835972
    },
    {
        "content": "<p>is it? I'm having trouble visualizing the link, I'll give it more thought</p>",
        "id": 238501967,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620836140
    },
    {
        "content": "<p>ah never mind i'm a dumdum</p>",
        "id": 238502065,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620836168
    },
    {
        "content": "<p>weirdly enough, with opt-level 3, this does not seem to get optimized:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">ControlFlow</span>::<span class=\"n\">Continue</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">ControlFlow</span>::<span class=\"n\">Break</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ControlFlow</span>::<span class=\"n\">Continue</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ControlFlow</span>::<span class=\"n\">Break</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 238502764,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620836444
    },
    {
        "content": "<p>we'd only need one switch yet two are generated</p>",
        "id": 238502832,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620836455
    },
    {
        "content": "<p>ConstGoto is gated on level 4, isn't it?</p>",
        "id": 238503752,
        "sender_full_name": "cjgillot",
        "timestamp": 1620836815
    },
    {
        "content": "<p>I tried level 4, same issue</p>",
        "id": 238503943,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620836895
    },
    {
        "content": "<p><a href=\"https://rust.godbolt.org/z/WcaWoKhTr\">https://rust.godbolt.org/z/WcaWoKhTr</a></p>",
        "id": 238503950,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620836896
    },
    {
        "content": "<p>tell me what you think</p>",
        "id": 238503954,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620836899
    },
    {
        "content": "<p>There's something fishy. With this level of optimizations, the RemoveStorageMarkers pass should trigger.</p>",
        "id": 238505272,
        "sender_full_name": "cjgillot",
        "timestamp": 1620837386
    },
    {
        "content": "<p>if we've been staring at unoptimized MIR from the beginning I'm going to be sad</p>",
        "id": 238505780,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620837615
    },
    {
        "content": "<p>What does a local build give you?</p>",
        "id": 238506288,
        "sender_full_name": "cjgillot",
        "timestamp": 1620837843
    },
    {
        "content": "<p>a local build gives me the exact same thing</p>",
        "id": 238506916,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620838090
    },
    {
        "content": "<p>my nightly is probably something like 3 days old</p>",
        "id": 238506935,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620838099
    },
    {
        "content": "<p>Ok, my bad. RemoveStorageMarkers is only enabled with -C opt-level=0, because it removes annotations that LLVM needs.</p>",
        "id": 238507349,
        "sender_full_name": "cjgillot",
        "timestamp": 1620838309
    },
    {
        "content": "<p>stable gives relatively the same thing however</p>",
        "id": 238507418,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620838328
    },
    {
        "content": "<p>ConstGoto is currently limited to blocks without any statement. Lifting this limitation for blocks with a <em>few</em> statements may be the optimization you are looking for (with <em>few</em> to define).</p>",
        "id": 238507566,
        "sender_full_name": "cjgillot",
        "timestamp": 1620838398
    },
    {
        "content": "<p>Hmm, looking at <code>const_goto</code> it also says \"// We only apply this optimization if the <em>last statement</em> is a const assignment\" -- I guess that's why the conversation above about the <code>StorageDead</code>s?</p>",
        "id": 238513951,
        "sender_full_name": "scottmcm",
        "timestamp": 1620840987
    },
    {
        "content": "<p>Maybe just copy <code>const_goto</code> for now to special case it to discriminants -- \"if the block sets a discriminant then gotos to a block that switchInts on that same discriminant, we copy the target block onto the tail of the source block\" or something.</p>\n<p>Feels like that should be safe, because even if something weird ends up overwriting that discriminant afterwards in the block it'd still do the right thing (and for easy cases the const prop will later fix the switch into a goto).  And might help for a whole bunch of things like inlining functions that return options -- even something like <code>match some_iter.next(...)</code> would be better with this since it'd CFG rewrite <code>return None</code> to go to the correct place directly...</p>",
        "id": 238520311,
        "sender_full_name": "scottmcm",
        "timestamp": 1620843516
    },
    {
        "content": "<p>Surely the discriminant not being touched should be enough for it to be sound on any code block?</p>",
        "id": 238522999,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620844544
    },
    {
        "content": "<p>Ah actually I’m neglecting references</p>",
        "id": 238523161,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620844594
    },
    {
        "content": "<p>I don’t know how modifying a local via a reference is translated in MIR</p>",
        "id": 238523231,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620844626
    },
    {
        "content": "<p><code>*_4</code> is a place if <code>_4</code> is a reference.</p>",
        "id": 238523506,
        "sender_full_name": "scottmcm",
        "timestamp": 1620844730
    },
    {
        "content": "<p>But tracking aliasing is probably not worth it most of the time in mir opts, when just copying the target block is easy enough.</p>",
        "id": 238523719,
        "sender_full_name": "scottmcm",
        "timestamp": 1620844818
    },
    {
        "content": "<p>Oh, here's another nice test case for you: <a href=\"https://rust.godbolt.org/z/oGz64vKjh\">https://rust.godbolt.org/z/oGz64vKjh</a></p>\n<p>Even with <code>-Z unsound-mir-opts=y</code> it's still a non-optimal CFG.</p>\n<p>(People probably wouldn't write that manually, but after inlining I could totally see it.)</p>",
        "id": 238524306,
        "sender_full_name": "scottmcm",
        "timestamp": 1620845066
    },
    {
        "content": "<p>I meant that if you have something like</p>\n<div class=\"codehilite\"><pre><span></span><code>_2 = &amp;mut _3;\n*_2 = whatever\n</code></pre></div>\n<p>it’s hard to track changes to _3</p>",
        "id": 238524325,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620845072
    },
    {
        "content": "<p>Wouldn’t your test case compile to the same as the chained match?</p>",
        "id": 238524444,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620845123
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"409735\">Théo Degioanni</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Suggestions.20for.20a.20beginner/near/238524444\">said</a>:</p>\n<blockquote>\n<p>Wouldn’t your test case compile to the same as the chained match?</p>\n</blockquote>\n<p>Yeah, it basically does; I just think it's a more realistic situation to hit outside of <code>?</code>.</p>",
        "id": 238524637,
        "sender_full_name": "scottmcm",
        "timestamp": 1620845184
    },
    {
        "content": "<p>By the way, would someone mind explaining how optimizations are tested? I’m having trouble understanding the testing setup</p>",
        "id": 238524638,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620845185
    },
    {
        "content": "<p>I can try to help, but probably don't know any nuances.  It's been a while since I wrote a mir-opt, and even then I think I just copied whatever some other test was doing.</p>",
        "id": 238524763,
        "sender_full_name": "scottmcm",
        "timestamp": 1620845242
    },
    {
        "content": "<p>Right. I seem to struggle even with that lol</p>",
        "id": 238524843,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620845268
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"409735\">Théo Degioanni</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Suggestions.20for.20a.20beginner/near/238524325\">said</a>:</p>\n<blockquote>\n<p>I meant that if you have something like</p>\n<div class=\"codehilite\"><pre><span></span><code>_2 = &amp;mut _3;\n*_2 = whatever\n</code></pre></div>\n<p>it’s hard to track changes to _3</p>\n</blockquote>\n<p>Agreed.  That's why I was saying to just copy the other block, not to try to actually lookup the const in the <code>switchInt</code> and simplify it further as part of the pass.</p>",
        "id": 238524879,
        "sender_full_name": "scottmcm",
        "timestamp": 1620845281
    },
    {
        "content": "<p>The \"diff\" files in mir-opt-tests are new from last I wrote anything in mir-opt too.  (Nice, though!  Way easier to read what it's trying to test.)</p>",
        "id": 238525022,
        "sender_full_name": "scottmcm",
        "timestamp": 1620845324
    },
    {
        "content": "<p>(I can’t seem to be able to answer to specific posts on mobiles, so here is an answer to the \"Agreed\" message): I don’t understand what you mean. have you read the message I sent to you on discord by te way? I had not Zulip installed on my phone at that time</p>",
        "id": 238525199,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620845400
    },
    {
        "content": "<p>Oh I think I just understood how to get started. I think the book is outdated.</p>",
        "id": 238525364,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620845446
    },
    {
        "content": "<p>You have to make the diff manually</p>",
        "id": 238525390,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620845455
    },
    {
        "content": "<p>And the test framework actually uses it for testing</p>",
        "id": 238525428,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620845470
    },
    {
        "content": "<p>Oh, no, haven't checked discord lately.</p>",
        "id": 238525862,
        "sender_full_name": "scottmcm",
        "timestamp": 1620845649
    },
    {
        "content": "<p>Yeah sorry to have split the convo, I was really exited to get that message to you lol</p>",
        "id": 238526006,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620845713
    },
    {
        "content": "<p>Oh, yeah, so your message there is basically what I said <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>\n<p>But I wasn't thinking of including the \"take the block that value would lead to\" because that requires knowing there's no aliasing problems.</p>",
        "id": 238526124,
        "sender_full_name": "scottmcm",
        "timestamp": 1620845755
    },
    {
        "content": "<p>Yeah right</p>",
        "id": 238526242,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620845797
    },
    {
        "content": "<p>I guess it could be done with some extra restrictions like \"and there's no other writes between the write and switching on it\"</p>",
        "id": 238526287,
        "sender_full_name": "scottmcm",
        "timestamp": 1620845803
    },
    {
        "content": "<p>I guess that would work</p>",
        "id": 238526323,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620845817
    },
    {
        "content": "<p>but I think that if this pass just removes the arrow from the CFG by duplicating the <code>switchInt</code>, the existing const prop pass will turn the <code>switchInt</code> into a <code>goto</code>.</p>",
        "id": 238526463,
        "sender_full_name": "scottmcm",
        "timestamp": 1620845875
    },
    {
        "content": "<p>Yes I was about to suggest that</p>",
        "id": 238526540,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620845898
    },
    {
        "content": "<p>And that pass is way smarter than this one would have to be -- it'd even pick it up if written through a mutable reference or raw pointer and such.</p>",
        "id": 238526548,
        "sender_full_name": "scottmcm",
        "timestamp": 1620845902
    },
    {
        "content": "<p>Yeah that sounds very good</p>",
        "id": 238526580,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620845914
    },
    {
        "content": "<p>Now to detect where to apply the opt in a meaningful way</p>",
        "id": 238526851,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620846007
    },
    {
        "content": "<p>And, well, \"remove an arrow by copying the contents of the target block\" seems like the correctness would be way more obvious than something smart <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 238526951,
        "sender_full_name": "scottmcm",
        "timestamp": 1620846035
    },
    {
        "content": "<p>Yeah right</p>",
        "id": 238527005,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620846053
    },
    {
        "content": "<p>I developed a curiosity about formally verifying MIR passes</p>",
        "id": 238527080,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620846084
    },
    {
        "content": "<p>It’s not completely unreasonable, which in a way is impressive</p>",
        "id": 238527115,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620846101
    },
    {
        "content": "<p>Anyway that’s the way to go. I’ll try my new understanding of the testing set up and get to work</p>",
        "id": 238527330,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620846188
    },
    {
        "content": "<p>Yeah, kudos to Ralf and co for trying to make MIR good for such things -- ferrocene is looking at using it as the validation target too.</p>",
        "id": 238527376,
        "sender_full_name": "scottmcm",
        "timestamp": 1620846204
    },
    {
        "content": "<p>Good luck!</p>",
        "id": 238527435,
        "sender_full_name": "scottmcm",
        "timestamp": 1620846239
    },
    {
        "content": "<p>Figured out the testing setup! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 238723444,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620972935
    },
    {
        "content": "<p>Hmmm... I'm afraid we might have to do <em>some</em> change tracking.</p>",
        "id": 238723806,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620973276
    },
    {
        "content": "<p>Because there's still one indirection from the enum to the place storing the determinant.</p>",
        "id": 238723844,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620973304
    },
    {
        "content": "<p>Now I think I can do basic tracking and whitelist the determinant as an edge that is accepted as side-effect free, but that's too bad.</p>",
        "id": 238723924,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620973351
    },
    {
        "content": "<p>This is what I'll do for now.</p>",
        "id": 238723941,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620973386
    },
    {
        "content": "<p>Actually I could also do a coarse estimation and duplicate aggressively. How bad is it to abusively duplicate code in situations where it might not actually be useful, in the hope it helps propagating consts?</p>",
        "id": 238724909,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620974160
    },
    {
        "content": "<p>It's a tradeoff. For instance, if all the duplicated statements are storagelive/storagedead/nop, this is ok. If you are duplicating tens of non-trivial statements, its probably not worth it.</p>",
        "id": 238729855,
        "sender_full_name": "cjgillot",
        "timestamp": 1620977721
    },
    {
        "content": "<p>Okay. I'll attempt that but with conservative (tweakable) limitations so it does not explode in complexity.</p>",
        "id": 238730043,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620977827
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> I checked something I forgot to check before in godbolt. The <code>too_complex</code> test and the one you suggested both get remarkably well optimized by LLVM later down the line, here is for the first one:</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nl\">too_complex:</span>\n        <span class=\"nf\">mov</span>     <span class=\"no\">edx</span><span class=\"p\">,</span> <span class=\"no\">esi</span>\n        <span class=\"nf\">xor</span>     <span class=\"no\">eax</span><span class=\"p\">,</span> <span class=\"no\">eax</span>\n        <span class=\"nf\">test</span>    <span class=\"no\">edi</span><span class=\"p\">,</span> <span class=\"no\">edi</span>\n        <span class=\"nf\">sete</span>    <span class=\"no\">al</span>\n        <span class=\"nf\">ret</span>\n</code></pre></div>\n<p>which makes me question the necessity of the optimization. Considering it's not really a compile-time-oriented optimization, is it worth doing in MIR?</p>",
        "id": 238735677,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1620981536
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"409735\">Théo Degioanni</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Optimizing.20a.20match.20on.20a.20just-constructed.20enum.20.2385133/near/238735677\">said</a>:</p>\n<blockquote>\n<p>which makes me question the necessity of the optimization.</p>\n</blockquote>\n<p>So, here's the most direct demo of how it's valuable: <a href=\"https://rust.godbolt.org/z/45jMGTPaE\">https://rust.godbolt.org/z/45jMGTPaE</a></p>\n<p>Basically that <code>test</code>+<code>sete</code> _is_ pretty good, but it's still not the nothing that it could be.</p>",
        "id": 238793939,
        "sender_full_name": "scottmcm",
        "timestamp": 1621010063
    },
    {
        "content": "<p>Unfortunately (as I understand it) LLVM really like losing the range information from <code>switchInt [ 0 =&gt; bb1, 1 =&gt; bb2, _ =&gt; unreachable ]</code>, turning it into just a two-way \"was it zero?\" branch, and thus not being able to just copy over the discriminant like it ought to, which is why doing this in MIR is useful.</p>",
        "id": 238794191,
        "sender_full_name": "scottmcm",
        "timestamp": 1621010195
    },
    {
        "content": "<p>Okay, thank you for that info. I think I’ll make the test case exactly that.</p>",
        "id": 238828124,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621025605
    },
    {
        "content": "<p>That test is basically <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/codegen/try_identity.rs\">https://github.com/rust-lang/rust/blob/master/src/test/codegen/try_identity.rs</a> -- so I'm not sure there's a good way to run it in your tree unless you either disable <code>SimplifyArmIdentity</code> or rebase atop my PR that changes <code>?</code>.</p>",
        "id": 238829341,
        "sender_full_name": "scottmcm",
        "timestamp": 1621026187
    },
    {
        "content": "<p>For now I'll stick to the example test, I think adding the ? desugar specifically as a test can be done in a second pass</p>",
        "id": 238830561,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621026735
    },
    {
        "content": "<p>By the way, what's the best way to obtain the parents of a bb?</p>",
        "id": 238830669,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621026805
    },
    {
        "content": "<p>I can't find any example of that in other passes weirdly enough</p>",
        "id": 238830692,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621026823
    },
    {
        "content": "<p>Or maybe I don't see them as what they are...</p>",
        "id": 238830698,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621026831
    },
    {
        "content": "<p>I think there's a post-order iterator for BBs, but I don't know if there's a simple table kind of thing for it.</p>",
        "id": 238830969,
        "sender_full_name": "scottmcm",
        "timestamp": 1621026883
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_data_structures/graph/iterate/fn.post_order_walk.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_data_structures/graph/iterate/fn.post_order_walk.html</a></p>",
        "id": 238831080,
        "sender_full_name": "scottmcm",
        "timestamp": 1621026945
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/struct.Body.html#method.predecessors\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/struct.Body.html#method.predecessors</a></p>",
        "id": 238831215,
        "sender_full_name": "nagisa",
        "timestamp": 1621027025
    },
    {
        "content": "<p>I feel silly for not being able to find that. Thank you.</p>",
        "id": 238831355,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621027087
    },
    {
        "content": "<p>though do take care about calling it often while modifying MIR at the same time – its quite expensive to recompute and is thus cached. And modifications do invalidate the cache.</p>",
        "id": 238831414,
        "sender_full_name": "nagisa",
        "timestamp": 1621027128
    },
    {
        "content": "<p>I see optimizations use a visitor pattern instead of simply iterating over blocks. What are the advantages of that?</p>",
        "id": 238831759,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621027332
    },
    {
        "content": "<p>for example ConstGoto uses a visitor on terminators, but it could just as well iterate over blocks and look at the terminators</p>",
        "id": 238831850,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621027407
    },
    {
        "content": "<p>I think I've successfully made a function that approximates what places determine the value of a place within a single block. I hope that was not duplicate effort. Was it?</p>",
        "id": 238888309,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621075680
    },
    {
        "content": "<p>I think the optimization is working, but when building the test setup i'm hitting <a href=\"https://github.com/rust-lang/rust/blob/eac3c7c5bd38ec38062ebde475bd2ea6317d0c09/compiler/rustc_codegen_ssa/src/mir/analyze.rs#L394\">https://github.com/rust-lang/rust/blob/eac3c7c5bd38ec38062ebde475bd2ea6317d0c09/compiler/rustc_codegen_ssa/src/mir/analyze.rs#L394</a></p>",
        "id": 238917573,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621104291
    },
    {
        "content": "<p>I have no idea what it is or why it  even is an issue that something would have 2 parents, does somebody have an explanation?</p>",
        "id": 238917586,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621104312
    },
    {
        "content": "<p>What does the MIR look like?</p>",
        "id": 238917875,
        "sender_full_name": "cjgillot",
        "timestamp": 1621104605
    },
    {
        "content": "<p>I don't really know, because I'm getting this while building stage1 I believe</p>",
        "id": 238917908,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621104659
    },
    {
        "content": "<p>Is there a way to see the MIR in that context?</p>",
        "id": 238917921,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621104691
    },
    {
        "content": "<p>what I've been doing is copying blocks so that's probably how a \"two parents\" situation would arise</p>",
        "id": 238918003,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621104755
    },
    {
        "content": "<p>I managed to run stage0 on an example</p>",
        "id": 238918085,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621104844
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>// WARNING: This output format is intended for human consumers only\n// and is subject to change without notice. Knock yourself out.\nfn main() -&gt; () {\n    let mut _0: ();                      // return place in scope 0 at src/test/mir-opt/separate_const_switch.rs:26:11: 26:11\n    let _1: std::option::Option&lt;i32&gt;;    // in scope 0 at src/test/mir-opt/separate_const_switch.rs:27:5: 27:35\n    let mut _2: std::result::Result&lt;i32, u32&gt;; // in scope 0 at src/test/mir-opt/separate_const_switch.rs:27:29: 27:34\n\n    bb0: {\n        StorageLive(_1);                 // scope 0 at src/test/mir-opt/separate_const_switch.rs:27:5: 27:35\n        StorageLive(_2);                 // scope 0 at src/test/mir-opt/separate_const_switch.rs:27:29: 27:34\n        ((_2 as Ok).0: i32) = const 0_i32; // scope 0 at src/test/mir-opt/separate_const_switch.rs:27:29: 27:34\n        discriminant(_2) = 0;            // scope 0 at src/test/mir-opt/separate_const_switch.rs:27:29: 27:34\n        _1 = too_complex::&lt;i32, u32&gt;(move _2) -&gt; bb1; // scope 0 at src/test/mir-opt/separate_const_switch.rs:27:5: 27:35\n                                         // mir::Constant\n                                         // + span: src/test/mir-opt/separate_const_switch.rs:27:5: 27:28\n                                         // + literal: Const { ty: fn(std::result::Result&lt;i32, u32&gt;) -&gt; std::option::Option&lt;i32&gt; {too_complex::&lt;i32, u32&gt;}, val: Value(Scalar(&lt;ZST&gt;)) }\n    }\n\n    bb1: {\n        StorageDead(_2);                 // scope 0 at src/test/mir-opt/separate_const_switch.rs:27:34: 27:35\n        StorageDead(_1);                 // scope 0 at src/test/mir-opt/separate_const_switch.rs:27:35: 27:36\n        return;                          // scope 0 at src/test/mir-opt/separate_const_switch.rs:28:2: 28:2\n    }\n}\n\nfn too_complex(_1: Result&lt;T, E&gt;) -&gt; Option&lt;T&gt; {\n    debug x =&gt; _1;                       // in scope 0 at src/test/mir-opt/separate_const_switch.rs:7:22: 7:23\n    let mut _0: std::option::Option&lt;T&gt;;  // return place in scope 0 at src/test/mir-opt/separate_const_switch.rs:7:42: 7:51\n    let mut _2: std::result::Result&lt;E, T&gt;; // in scope 0 at src/test/mir-opt/separate_const_switch.rs:15:11: 20:6\n    let mut _3: isize;                   // in scope 0 at src/test/mir-opt/separate_const_switch.rs:17:13: 17:18\n    let _4: T;                           // in scope 0 at src/test/mir-opt/separate_const_switch.rs:17:16: 17:17\n    let mut _5: T;                       // in scope 0 at src/test/mir-opt/separate_const_switch.rs:17:26: 17:27\n    let _6: E;                           // in scope 0 at src/test/mir-opt/separate_const_switch.rs:18:17: 18:18\n    let mut _7: E;                       // in scope 0 at src/test/mir-opt/separate_const_switch.rs:18:26: 18:27\n    let mut _8: isize;                   // in scope 0 at src/test/mir-opt/separate_const_switch.rs:21:9: 21:15\n    let _9: T;                           // in scope 0 at src/test/mir-opt/separate_const_switch.rs:21:13: 21:14\n    let mut _10: T;                      // in scope 0 at src/test/mir-opt/separate_const_switch.rs:21:24: 21:25\n    let _11: E;                          // in scope 0 at src/test/mir-opt/separate_const_switch.rs:22:12: 22:13\n    scope 1 {\n        debug v =&gt; _4;                   // in scope 1 at src/test/mir-opt/separate_const_switch.rs:17:16: 17:17\n    }\n    scope 2 {\n        debug r =&gt; _6;                   // in scope 2 at src/test/mir-opt/separate_const_switch.rs:18:17: 18:18\n    }\n    scope 3 {\n        debug v =&gt; _9;                   // in scope 3 at src/test/mir-opt/separate_const_switch.rs:21:13: 21:14\n    }\n    scope 4 {\n        debug r =&gt; _11;                  // in scope 4 at src/test/mir-opt/separate_const_switch.rs:22:12: 22:13\n    }\n\n    bb0: {\n        StorageLive(_2);                 // scope 0 at src/test/mir-opt/separate_const_switch.rs:15:11: 20:6\n        _3 = discriminant(_1);           // scope 0 at src/test/mir-opt/separate_const_switch.rs:17:13: 17:18\n        switchInt(move _3) -&gt; [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at src/test/mir-opt/separate_const_switch.rs:17:13: 17:18\n    }\n\n    bb1: {\n        StorageLive(_6);                 // scope 0 at src/test/mir-opt/separate_const_switch.rs:18:17: 18:18\n        _6 = move ((_1 as Err).0: E);    // scope 0 at src/test/mir-opt/separate_const_switch.rs:18:17: 18:18\n        StorageLive(_7);                 // scope 2 at src/test/mir-opt/separate_const_switch.rs:18:26: 18:27\n        _7 = move _6;                    // scope 2 at src/test/mir-opt/separate_const_switch.rs:18:26: 18:27\n        ((_2 as Ok).0: E) = move _7;     // scope 2 at src/test/mir-opt/separate_const_switch.rs:18:23: 18:28\n        discriminant(_2) = 0;            // scope 2 at src/test/mir-opt/separate_const_switch.rs:18:23: 18:28\n        StorageDead(_7);                 // scope 2 at src/test/mir-opt/separate_const_switch.rs:18:27: 18:28\n        StorageDead(_6);                 // scope 0 at src/test/mir-opt/separate_const_switch.rs:18:27: 18:28\n        goto -&gt; bb4;                     // scope 0 at src/test/mir-opt/separate_const_switch.rs:16:9: 19:10\n    }\n\n    bb2: {\n        unreachable;                     // scope 0 at src/test/mir-opt/separate_const_switch.rs:16:15: 16:16\n    }\n\n    bb3: {\n        StorageLive(_4);                 // scope 0 at src/test/mir-opt/separate_const_switch.rs:17:16: 17:17\n        _4 = move ((_1 as Ok).0: T);     // scope 0 at src/test/mir-opt/separate_const_switch.rs:17:16: 17:17\n        StorageLive(_5);                 // scope 1 at src/test/mir-opt/separate_const_switch.rs:17:26: 17:27\n        _5 = move _4;                    // scope 1 at src/test/mir-opt/separate_const_switch.rs:17:26: 17:27\n        ((_2 as Err).0: T) = move _5;    // scope 1 at src/test/mir-opt/separate_const_switch.rs:17:22: 17:28\n        discriminant(_2) = 1;            // scope 1 at src/test/mir-opt/separate_const_switch.rs:17:22: 17:28\n        StorageDead(_5);                 // scope 1 at src/test/mir-opt/separate_const_switch.rs:17:27: 17:28\n        StorageDead(_4);                 // scope 0 at src/test/mir-opt/separate_const_switch.rs:17:27: 17:28\n        goto -&gt; bb4;                     // scope 0 at src/test/mir-opt/separate_const_switch.rs:16:9: 19:10\n    }\n\n    bb4: {\n        _8 = discriminant(_2);           // scope 0 at src/test/mir-opt/separate_const_switch.rs:21:9: 21:15\n        switchInt(move _8) -&gt; [0_isize: bb5, 1_isize: bb7, otherwise: bb6]; // scope 0 at src/test/mir-opt/separate_const_switch.rs:21:9: 21:15\n    }\n\n    bb5: {\n        StorageLive(_11);                // scope 0 at src/test/mir-opt/separate_const_switch.rs:22:12: 22:13\n        _11 = move ((_2 as Ok).0: E);    // scope 0 at src/test/mir-opt/separate_const_switch.rs:22:12: 22:13\n        discriminant(_0) = 0;            // scope 4 at src/test/mir-opt/separate_const_switch.rs:22:18: 22:22\n        drop(_11) -&gt; bb8;                // scope 0 at src/test/mir-opt/separate_const_switch.rs:22:21: 22:22\n    }\n\n    bb6: {\n        unreachable;                     // scope 0 at src/test/mir-opt/separate_const_switch.rs:15:11: 20:6\n    }\n\n    bb7: {\n        StorageLive(_9);                 // scope 0 at src/test/mir-opt/separate_const_switch.rs:21:13: 21:14\n        _9 = move ((_2 as Err).0: T);    // scope 0 at src/test/mir-opt/separate_const_switch.rs:21:13: 21:14\n        StorageLive(_10);                // scope 3 at src/test/mir-opt/separate_const_switch.rs:21:24: 21:25\n        _10 = move _9;                   // scope 3 at src/test/mir-opt/separate_const_switch.rs:21:24: 21:25\n        ((_0 as Some).0: T) = move _10;  // scope 3 at src/test/mir-opt/separate_const_switch.rs:21:19: 21:26\n        discriminant(_0) = 1;            // scope 3 at src/test/mir-opt/separate_const_switch.rs:21:19: 21:26\n        StorageDead(_10);                // scope 3 at src/test/mir-opt/separate_const_switch.rs:21:25: 21:26\n        StorageDead(_9);                 // scope 0 at src/test/mir-opt/separate_const_switch.rs:21:25: 21:26\n        goto -&gt; bb9;                     // scope 0 at src/test/mir-opt/separate_const_switch.rs:15:5: 23:6\n    }\n\n    bb8: {\n        StorageDead(_11);                // scope 0 at src/test/mir-opt/separate_const_switch.rs:22:21: 22:22\n        goto -&gt; bb9;                     // scope 0 at src/test/mir-opt/separate_const_switch.rs:15:5: 23:6\n    }\n\n    bb9: {\n        StorageDead(_2);                 // scope 0 at src/test/mir-opt/separate_const_switch.rs:24:1: 24:2\n        return;                          // scope 0 at src/test/mir-opt/separate_const_switch.rs:24:2: 24:2\n    }\n}\n</code></pre></div>",
        "id": 238918127,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621104918
    },
    {
        "content": "<p>this is what I get running stage0 on the example</p>",
        "id": 238918144,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621104926
    },
    {
        "content": "<p>I don't think the optimization triggered tho, I ran <code>rustc +stage0 src/test/mir-opt/separate_const_switch.rs --emit=mir -O</code><br>\nedit: yeah that's not running it</p>",
        "id": 238918156,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621104944
    },
    {
        "content": "<p>I should also mention that this is not the one that errors out. I don’t know how to retrieve that one specifically as the error comes from within the stage1 build process</p>",
        "id": 238919735,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621106587
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  Compiling test v0.0.0 (/home/theodegioanni/github/rust/library/test)\nerror: internal compiler error: compiler/rustc_codegen_ssa/src/mir/analyze.rs:394:21: funclet bb235 has 2 parents - bb221 and bb273\n   --&gt; library/test/src/lib.rs:201:1\n    |\n201 | / pub fn run_tests&lt;F&gt;(\n202 | |     opts: &amp;TestOpts,\n203 | |     tests: Vec&lt;TestDescAndFn&gt;,\n204 | |     mut notify_about_test_event: F,\n...   |\n388 | |     Ok(())\n389 | | }\n    | |_^\n\nthread &#39;rustc&#39; panicked at &#39;Box&lt;Any&gt;&#39;, /home/theodegioanni/github/rust/library/std/src/panic.rs:59:5\nstack backtrace:\n   0: std::panicking::begin_panic\n             at ./library/std/src/panicking.rs:519:12\n   1: std::panic::panic_any\n             at ./library/std/src/panic.rs:59:5\n   2: rustc_errors::HandlerInner::span_bug\n             at ./compiler/rustc_errors/src/lib.rs:951:9\n   3: rustc_errors::Handler::span_bug\n             at ./compiler/rustc_errors/src/lib.rs:670:9\n   4: rustc_middle::util::bug::opt_span_bug_fmt::{{closure}}\n             at ./compiler/rustc_middle/src/util/bug.rs:33:40\n   5: rustc_middle::ty::context::tls::with_opt::{{closure}}\n             at ./compiler/rustc_middle/src/ty/context.rs:1800:40\n   6: rustc_middle::ty::context::tls::with_context_opt\n             at ./compiler/rustc_middle/src/ty/context.rs:1752:22\n   7: rustc_middle::ty::context::tls::with_opt\n             at ./compiler/rustc_middle/src/ty/context.rs:1800:9\n   8: rustc_middle::util::bug::opt_span_bug_fmt\n             at ./compiler/rustc_middle/src/util/bug.rs:30:5\n   9: rustc_middle::util::bug::span_bug_fmt\n             at ./compiler/rustc_middle/src/util/bug.rs:21:5\n  10: rustc_codegen_ssa::mir::analyze::cleanup_kinds::propagate::{{closure}}\n             at ./compiler/rustc_codegen_ssa/src/mir/analyze.rs:394:21\n  11: rustc_codegen_ssa::mir::analyze::cleanup_kinds::propagate\n             at ./compiler/rustc_codegen_ssa/src/mir/analyze.rs:439:29\n  12: rustc_codegen_ssa::mir::analyze::cleanup_kinds\n             at ./compiler/rustc_codegen_ssa/src/mir/analyze.rs:451:5\n  13: rustc_codegen_ssa::mir::codegen_mir\n             at ./compiler/rustc_codegen_ssa/src/mir/mod.rs:152:25\n  14: rustc_codegen_ssa::base::codegen_instance\n             at ./compiler/rustc_codegen_ssa/src/base.rs:342:5\n  15: &lt;rustc_middle::mir::mono::MonoItem as rustc_codegen_ssa::mono_item::MonoItemExt&gt;::define\n             at ./compiler/rustc_codegen_ssa/src/mono_item.rs:70:17\n  16: rustc_codegen_llvm::base::compile_codegen_unit::module_codegen\n             at ./compiler/rustc_codegen_llvm/src/base.rs:141:17\n  17: rustc_query_system::dep_graph::graph::DepGraph&lt;K&gt;::with_task_impl\n             at ./compiler/rustc_query_system/src/dep_graph/graph.rs:270:14\n  18: rustc_query_system::dep_graph::graph::DepGraph&lt;K&gt;::with_task\n             at ./compiler/rustc_query_system/src/dep_graph/graph.rs:205:9\n  19: rustc_codegen_llvm::base::compile_codegen_unit\n             at ./compiler/rustc_codegen_llvm/src/base.rs:117:9\n  20: &lt;rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_ssa::traits::backend::ExtraBackendMethods&gt;::compile_codegen_unit\n             at ./compiler/rustc_codegen_llvm/src/lib.rs:108:9\n  21: rustc_codegen_ssa::base::codegen_crate\n             at ./compiler/rustc_codegen_ssa/src/base.rs:646:38\n  22: &lt;rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_ssa::traits::backend::CodegenBackend&gt;::codegen_crate\n             at ./compiler/rustc_codegen_llvm/src/lib.rs:265:18\n  23: rustc_interface::passes::start_codegen::{{closure}}\n             at ./compiler/rustc_interface/src/passes.rs:1017:9\n  24: rustc_data_structures::profiling::VerboseTimingGuard::run\n             at ./compiler/rustc_data_structures/src/profiling.rs:573:9\n  25: rustc_session::utils::&lt;impl rustc_session::session::Session&gt;::time\n             at ./compiler/rustc_session/src/utils.rs:16:9\n  26: rustc_interface::passes::start_codegen\n             at ./compiler/rustc_interface/src/passes.rs:1016:19\n  27: rustc_interface::queries::Queries::ongoing_codegen::{{closure}}::{{closure}}\n             at ./compiler/rustc_interface/src/queries.rs:296:20\n  28: rustc_interface::passes::QueryContext::enter::{{closure}}\n             at ./compiler/rustc_interface/src/passes.rs:750:42\n  29: rustc_middle::ty::context::tls::enter_context::{{closure}}\n             at ./compiler/rustc_middle/src/ty/context.rs:1735:50\n  30: rustc_middle::ty::context::tls::set_tlv\n             at ./compiler/rustc_middle/src/ty/context.rs:1719:9\n  31: rustc_middle::ty::context::tls::enter_context\n             at ./compiler/rustc_middle/src/ty/context.rs:1735:9\n  32: rustc_interface::passes::QueryContext::enter\n             at ./compiler/rustc_interface/src/passes.rs:750:9\n  33: rustc_interface::queries::Queries::ongoing_codegen::{{closure}}\n             at ./compiler/rustc_interface/src/queries.rs:287:13\n  34: rustc_interface::queries::Query&lt;T&gt;::compute\n             at ./compiler/rustc_interface/src/queries.rs:40:28\n  35: rustc_interface::queries::Queries::ongoing_codegen\n             at ./compiler/rustc_interface/src/queries.rs:285:9\n  36: rustc_driver::run_compiler::{{closure}}::{{closure}}\n             at ./compiler/rustc_driver/src/lib.rs:415:13\n  37: rustc_interface::queries::&lt;impl rustc_interface::interface::Compiler&gt;::enter\n             at ./compiler/rustc_interface/src/queries.rs:428:19\n  38: rustc_driver::run_compiler::{{closure}}\n             at ./compiler/rustc_driver/src/lib.rs:314:22\n  39: rustc_interface::interface::create_compiler_and_run::{{closure}}\n             at ./compiler/rustc_interface/src/interface.rs:208:13\n  40: rustc_span::with_source_map\n             at ./compiler/rustc_span/src/lib.rs:871:5\n  41: rustc_interface::interface::create_compiler_and_run\n             at ./compiler/rustc_interface/src/interface.rs:202:5\n  42: rustc_interface::interface::run_compiler::{{closure}}\n             at ./compiler/rustc_interface/src/interface.rs:224:12\n  43: rustc_interface::util::setup_callbacks_and_run_in_thread_pool_with_globals::{{closure}}::{{closure}}\n             at ./compiler/rustc_interface/src/util.rs:155:13\n  44: scoped_tls::ScopedKey&lt;T&gt;::set\n             at /home/theodegioanni/.cargo/registry/src/github.com-1ecc6299db9ec823/scoped-tls-1.0.0/src/lib.rs:137:9\n  45: rustc_span::with_session_globals\n             at ./compiler/rustc_span/src/lib.rs:105:5\n  46: rustc_interface::util::setup_callbacks_and_run_in_thread_pool_with_globals::{{closure}}\n             at ./compiler/rustc_interface/src/util.rs:153:9\n  47: rustc_interface::util::scoped_thread::{{closure}}\n             at ./compiler/rustc_interface/src/util.rs:128:24\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&amp;template=ice.md\n\nnote: rustc 1.54.0-dev running on x86_64-unknown-linux-gnu\n\nnote: compiler flags: -Z macro-backtrace -Z binary-dep-depinfo -Z force-unstable-if-unmarked -C opt-level=3 -C embed-bitcode=no -C debuginfo=1 -C debug-assertions=on -C overflow-checks=off -C link-args=-Wl,-rpath,$ORIGIN/../lib -C prefer-dynamic -C embed-bitcode=yes --crate-type dylib --crate-type rlib\n\nnote: some of the compiler flags provided by cargo are hidden\n\nquery stack during panic:\nend of query stack\nerror: aborting due to previous error\n\nerror: could not compile `test`\n\nTo learn more, run the command again with --verbose.\ncommand did not execute successfully: &quot;/home/theodegioanni/github/rust/build/x86_64-unknown-linux-gnu/stage0/bin/cargo&quot; &quot;build&quot; &quot;--target&quot; &quot;x86_64-unknown-linux-gnu&quot; &quot;-Zbinary-dep-depinfo&quot; &quot;-j&quot; &quot;16&quot; &quot;--release&quot; &quot;--features&quot; &quot;panic-unwind backtrace compiler-builtins-c&quot; &quot;--manifest-path&quot; &quot;/home/theodegioanni/github/rust/library/test/Cargo.toml&quot; &quot;--message-format&quot; &quot;json-render-diagnostics&quot;\nexpected success, got: exit code: 101\nfailed to run: /home/theodegioanni/github/rust/build/bootstrap/debug/bootstrap test --bless src/test/mir-opt/separate_const_switch.rs\nBuild completed unsuccessfully in 0:00:04\n</code></pre></div>",
        "id": 238921066,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621108077
    },
    {
        "content": "<p>here is the full error</p>",
        "id": 238921078,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621108083
    },
    {
        "content": "<p>\"funclet\" indicates that this is happening in the unwind path</p>",
        "id": 238921250,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621108285
    },
    {
        "content": "<p>do we have special requirements there to handle funclets, that your pass is maybe violating?</p>",
        "id": 238921258,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621108318
    },
    {
        "content": "<p>since validation isn't failing it's probably not something like jumping from non-cleanup to cleanup from a non-unwind edge</p>",
        "id": 238921354,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621108421
    },
    {
        "content": "<p>That's interesting. So far I've been avoiding to apply the pass to unwind jumps <em>just in case</em>. That it hit something there anyway is puzzling.</p>",
        "id": 238921661,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621108814
    },
    {
        "content": "<p>What I do is abort the optimization if the parent we try to redirect was going to the block from which we started through an unwind-related jump</p>",
        "id": 238921750,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621108886
    },
    {
        "content": "<p>I'm going to push my draft code to my branch if you want to check it out</p>",
        "id": 238921834,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621108958
    },
    {
        "content": "<p>oh well gotta love sweet git issues</p>",
        "id": 238922117,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621109267
    },
    {
        "content": "<p><a href=\"https://github.com/Moxinilian/rust/blob/separate-const-switch/compiler/rustc_mir/src/transform/separate_const_switch.rs\">https://github.com/Moxinilian/rust/blob/separate-const-switch/compiler/rustc_mir/src/transform/separate_const_switch.rs</a></p>",
        "id": 238922978,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621110192
    },
    {
        "content": "<p>I had to recreate my repo from scratch, but here it is</p>",
        "id": 238922985,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621110209
    },
    {
        "content": "<p>(btw <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> if you want to have a look at the code)</p>",
        "id": 238923176,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621110421
    },
    {
        "content": "<p>I've narrowed down what I think caused the bug. I don't have enough battery to investigate further but I think it's on my side, specifically when redirecting call terminators.</p>",
        "id": 238977055,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621170876
    },
    {
        "content": "<p>(still working on this, but only on week-ends currently)</p>",
        "id": 239373104,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621405909
    },
    {
        "content": "<p>Is it necessary for unwind branches to have only one caller ever? (if so, why?)<br>\nIn that case, is there an easy way to copy a basic block that can unwind?</p>",
        "id": 239781663,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621616204
    },
    {
        "content": "<p>I don't know the answer for unwind branches.</p>\n<p>I'd be tempted to solve it by not duplicating a block that can unwind, because duplicating function call sites isn't always a good idea -- it can make a big difference for inlining, for example, where it's often much more profitable to inline a called-from-one-place function than a called-from-two-places one.</p>",
        "id": 239789668,
        "sender_full_name": "scottmcm",
        "timestamp": 1621619916
    },
    {
        "content": "<p>Alright! I'm removing function calls then.<br>\nBetween silently giving up or panicking, which is better practice in case of a logic error in an optimization pass? Or is there something better?</p>",
        "id": 239789841,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621619998
    },
    {
        "content": "<p>As in \"there's a bug in the optimization pass because it encountered something unexpected\"?</p>\n<p>There are a bunch of macros for that like <code>span_bug!</code> that emit an ICE referencing the code.</p>",
        "id": 239790250,
        "sender_full_name": "scottmcm",
        "timestamp": 1621620137
    },
    {
        "content": "<p>Here's an example of that: <a href=\"https://github.com/rust-lang/rust/pull/84811/files#diff-384affc1b4190940f114f3fcebbf969e7e18657a71ef9001da6b223a036687d9R162\">https://github.com/rust-lang/rust/pull/84811/files#diff-384affc1b4190940f114f3fcebbf969e7e18657a71ef9001da6b223a036687d9R162</a></p>\n<p>If it's not a bug, there's the logging macros if you want to record \"hey, I wanted to do this but couldn't because of _____\".</p>",
        "id": 239790569,
        "sender_full_name": "scottmcm",
        "timestamp": 1621620274
    },
    {
        "content": "<p>I meant as a bug, like an unreachable reached</p>",
        "id": 239790834,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621620398
    },
    {
        "content": "<p>So the ICE thing will be great, thanks!</p>",
        "id": 239790863,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621620409
    },
    {
        "content": "<p>urg, it still fails on the \"funclet has two parents things\"</p>",
        "id": 239791459,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621620712
    },
    {
        "content": "<p>i'll try being even more conservative</p>",
        "id": 239791468,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621620718
    },
    {
        "content": "<p>not sure how but I'll try</p>",
        "id": 239791482,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621620723
    },
    {
        "content": "<p>Aside: <a href=\"https://github.com/rust-lang/rust/issues/85365\">#85365</a> got me even more excited for this.  I hadn't realized it would apply even for simple things like <code>.last().unwrap()</code> -- those seem way more likely in real code than the explicit match-of-match that <code>?</code> does.</p>",
        "id": 239791555,
        "sender_full_name": "scottmcm",
        "timestamp": 1621620756
    },
    {
        "content": "<p>yeah same!</p>",
        "id": 239791592,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621620778
    },
    {
        "content": "<p>reminder of what the bug is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span>: <span class=\"nc\">internal</span><span class=\"w\"> </span><span class=\"n\">compiler</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_codegen_ssa</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">mir</span><span class=\"o\">/</span><span class=\"n\">analyze</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">394</span>:<span class=\"mi\">21</span>: <span class=\"nc\">funclet</span><span class=\"w\"> </span><span class=\"n\">bb235</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">parents</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">bb221</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">bb273</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">library</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">201</span>:<span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">201</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">run_tests</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"mi\">202</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">opts</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">TestOpts</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"mi\">203</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">tests</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">TestDescAndFn</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"mi\">204</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">notify_about_test_event</span>: <span class=\"nc\">F</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">388</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"mi\">389</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">^</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 239792275,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621621124
    },
    {
        "content": "<p>I'm going to push the new version of the optimization that covers fewer cases</p>",
        "id": 239792323,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621621148
    },
    {
        "content": "<p><a href=\"https://github.com/Moxinilian/rust/blob/separate-const-switch/compiler/rustc_mir/src/transform/separate_const_switch.rs\">https://github.com/Moxinilian/rust/blob/separate-const-switch/compiler/rustc_mir/src/transform/separate_const_switch.rs</a></p>",
        "id": 239792423,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621621197
    },
    {
        "content": "<p>what the code does:</p>\n<ul>\n<li>find a block that ends in a switch</li>\n<li>track if there is an unique place set before the current basic block that determines the result of the switch (this is not optimal  btw), this is the part that resolves switching over discriminants</li>\n<li>if there is, iterate over the parents that have a reasonable terminator and find if the found determining place is likely to be (transitively) set from a const within that parent block</li>\n<li>if so, add the corresponding edge to a vector of edges to duplicate</li>\n<li>once this is done, iterate over the found edges: copy the target block and replace the reference to the target block in the origin block with the new block</li>\n</ul>",
        "id": 239792803,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621621352
    },
    {
        "content": "<p>(the double pass approach, while suboptimal in terms of generated code, makes the pass relatively fast because it only computes parents once and does not go down the recursion rabbit hole)</p>",
        "id": 239792893,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621621391
    },
    {
        "content": "<p>now as someone said earlier, the fact it is talking about funclets means we are talking about something in an unwing branch</p>",
        "id": 239793189,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621621538
    },
    {
        "content": "<p>which here does not make sense as I'm not even touching them</p>",
        "id": 239793207,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621621546
    },
    {
        "content": "<p>unless there is a switch within an unwind branch</p>",
        "id": 239793225,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621621557
    },
    {
        "content": "<p>that could be it</p>",
        "id": 239793230,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621621560
    },
    {
        "content": "<p>maybe I could just filter them out</p>",
        "id": 239793279,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621621569
    },
    {
        "content": "<p>oh right there's the <code>is_cleanup</code> field, it feels like it was made for that purpose</p>",
        "id": 239793382,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621621625
    },
    {
        "content": "<p>besides unwinding should be a cold path, right</p>",
        "id": 239793634,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621621734
    },
    {
        "content": "<p>it works!!</p>",
        "id": 239794103,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621621972
    },
    {
        "content": "<p>I actually now need to make sure it does get optimized away down the line</p>",
        "id": 239794491,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621622142
    },
    {
        "content": "<p>yep! it works somewhere down the line</p>",
        "id": 239796653,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621623234
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>bb1: {\n          StorageLive(_6);                 // scope 0 at $DIR/separate_const_switch.rs:18:17: 18:18\n          _6 = move ((_1 as Err).0: E);    // scope 0 at $DIR/separate_const_switch.rs:18:17: 18:18\n          StorageLive(_7);                 // scope 2 at $DIR/separate_const_switch.rs:18:42: 18:43\n          _7 = move _6;                    // scope 2 at $DIR/separate_const_switch.rs:18:42: 18:43\n          _12 = const true;                // scope 2 at $DIR/separate_const_switch.rs:18:23: 18:44\n          _13 = const true;                // scope 2 at $DIR/separate_const_switch.rs:18:23: 18:44\n          ((_2 as Break).0: E) = move _7;  // scope 2 at $DIR/separate_const_switch.rs:18:23: 18:44\n          discriminant(_2) = 1;            // scope 2 at $DIR/separate_const_switch.rs:18:23: 18:44\n          StorageDead(_7);                 // scope 2 at $DIR/separate_const_switch.rs:18:43: 18:44\n          StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:18:43: 18:44\n          goto -&gt; bb3;                     // scope 0 at $DIR/separate_const_switch.rs:16:9: 19:10\n      }\n\n      bb2: {\n          StorageLive(_4);                 // scope 0 at $DIR/separate_const_switch.rs:17:16: 17:17\n          _4 = move ((_1 as Ok).0: T);     // scope 0 at $DIR/separate_const_switch.rs:17:16: 17:17\n          StorageLive(_5);                 // scope 1 at $DIR/separate_const_switch.rs:17:44: 17:45\n          _5 = move _4;                    // scope 1 at $DIR/separate_const_switch.rs:17:44: 17:45\n          _12 = const true;                // scope 1 at $DIR/separate_const_switch.rs:17:22: 17:46\n          _13 = const true;                // scope 1 at $DIR/separate_const_switch.rs:17:22: 17:46\n          ((_2 as Continue).0: T) = move _5; // scope 1 at $DIR/separate_const_switch.rs:17:22: 17:46\n          discriminant(_2) = 0;            // scope 1 at $DIR/separate_const_switch.rs:17:22: 17:46\n          StorageDead(_5);                 // scope 1 at $DIR/separate_const_switch.rs:17:45: 17:46\n          StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:17:45: 17:46\n          goto -&gt; bb3;                     // scope 0 at $DIR/separate_const_switch.rs:16:9: 19:10\n      }\n\n      bb3: {\n          _8 = discriminant(_2);           // scope 0 at $DIR/separate_const_switch.rs:21:9: 21:33\n          switchInt(move _8) -&gt; [0_isize: bb5, otherwise: bb4]; // scope 0 at $DIR/separate_const_switch.rs:21:9: 21:33\n      }\n</code></pre></div>",
        "id": 239796765,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621623269
    },
    {
        "content": "<p>in the end becomes</p>",
        "id": 239796779,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621623273
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>      bb1: {\n          StorageLive(_6);                 // scope 0 at $DIR/separate_const_switch.rs:18:17: 18:18\n          _6 = move ((_1 as Err).0: E);    // scope 0 at $DIR/separate_const_switch.rs:18:17: 18:18\n          StorageLive(_7);                 // scope 2 at $DIR/separate_const_switch.rs:18:42: 18:43\n          _7 = move _6;                    // scope 2 at $DIR/separate_const_switch.rs:18:42: 18:43\n          ((_2 as Break).0: E) = move _7;  // scope 2 at $DIR/separate_const_switch.rs:18:23: 18:44\n          discriminant(_2) = 1;            // scope 2 at $DIR/separate_const_switch.rs:18:23: 18:44\n          StorageDead(_7);                 // scope 2 at $DIR/separate_const_switch.rs:18:43: 18:44\n          StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:18:43: 18:44\n          _8 = discriminant(_2);           // scope 0 at $DIR/separate_const_switch.rs:21:9: 21:33\n          switchInt(move _8) -&gt; [0_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:21:9: 21:33\n      }\n\n      bb2: {\n          StorageLive(_4);                 // scope 0 at $DIR/separate_const_switch.rs:17:16: 17:17\n          _4 = move ((_1 as Ok).0: T);     // scope 0 at $DIR/separate_const_switch.rs:17:16: 17:17\n          StorageLive(_5);                 // scope 1 at $DIR/separate_const_switch.rs:17:44: 17:45\n          _5 = move _4;                    // scope 1 at $DIR/separate_const_switch.rs:17:44: 17:45\n          ((_2 as Continue).0: T) = move _5; // scope 1 at $DIR/separate_const_switch.rs:17:22: 17:46\n          discriminant(_2) = 0;            // scope 1 at $DIR/separate_const_switch.rs:17:22: 17:46\n          StorageDead(_5);                 // scope 1 at $DIR/separate_const_switch.rs:17:45: 17:46\n          StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:17:45: 17:46\n          _8 = discriminant(_2);           // scope 0 at $DIR/separate_const_switch.rs:21:9: 21:33\n          switchInt(move _8) -&gt; [0_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:21:9: 21:33\n      }\n</code></pre></div>",
        "id": 239796816,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621623289
    },
    {
        "content": "<p>the switchs seem to not disappear but the propagation is so trivial that I hope LLVM can pick it up</p>",
        "id": 239796942,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621623335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span></p>",
        "id": 239797224,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621623467
    },
    {
        "content": "<p>I'm going to clean up the code and make it more elegant in places now</p>",
        "id": 239797283,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621623485
    },
    {
        "content": "<p>If you can run this pass before <code>const_prop</code> it should pick that up and turn the <code>move _8</code>s into <code>const 0</code> or <code>const 1</code> as appropriate. <code>simplify_branches</code> will then remove the <code>switchInts</code>.</p>",
        "id": 239797395,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1621623541
    },
    {
        "content": "<p>Interestingly I put it just before const prop, and yet it did not pick it up</p>",
        "id": 239797554,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621623604
    },
    {
        "content": "<p>maybe it's because there is still a bunch of indirection</p>",
        "id": 239797624,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621623635
    },
    {
        "content": "<p>once a test I'm doing is done compiling i'll try moving the pass to other places</p>",
        "id": 239797720,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621623662
    },
    {
        "content": "<p>Hmm ... <code>const_prop</code> is pretty conservative if the local is assigned to more than once so that might be why it's not picking that up.</p>",
        "id": 239797727,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1621623665
    },
    {
        "content": "<p>that's something SSA would solve I bet</p>",
        "id": 239797756,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621623679
    },
    {
        "content": "<p>Yeah, there's also an issue about rewriting the pass to use a dataflow analysis which would probably also resolve this issue.</p>",
        "id": 239797826,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1621623718
    },
    {
        "content": "<p>very interesting</p>",
        "id": 239797887,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621623730
    },
    {
        "content": "<p>I'll look that issue up</p>",
        "id": 239797904,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621623737
    },
    {
        "content": "<p>I find optimizing control flow graphs super entertaining</p>",
        "id": 239797936,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621623750
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/80038\">#80038</a> :)</p>",
        "id": 239798144,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1621623819
    },
    {
        "content": "<p>thank you!</p>",
        "id": 239798245,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621623847
    },
    {
        "content": "<p>You're welcome!</p>",
        "id": 239798297,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1621623874
    },
    {
        "content": "<p>Looking great <span class=\"user-mention\" data-user-id=\"409735\">@Théo Degioanni</span>!  I'm also a bit surprised that mir-opt const prop isn't picking it up, but I agree that LLVM should have no problem with it.</p>",
        "id": 239798728,
        "sender_full_name": "scottmcm",
        "timestamp": 1621624057
    },
    {
        "content": "<p>The code is now ready for a PR. Just before doing that I'll look at some generated assembly to brag in the PR description.</p>",
        "id": 239816468,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621633368
    },
    {
        "content": "<p>(for real I want to make sure there definitely is an assembly-level win here)</p>",
        "id": 239816527,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621633402
    },
    {
        "content": "<p>What opt level should I restrict the pass to? I don't exactly know what each value mean</p>",
        "id": 239819176,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621635057
    },
    {
        "content": "<p>hmmm</p>",
        "id": 239819764,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621635456
    },
    {
        "content": "<p>I tried it with this example</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">demo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">?</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 239819781,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621635478
    },
    {
        "content": "<p>before:</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nl\">demo:</span>\n    <span class=\"na\">.cfi_startproc</span>\n    <span class=\"nf\">xorl</span>    <span class=\"nv\">%ecx</span><span class=\"p\">,</span> <span class=\"nv\">%ecx</span>\n    <span class=\"nf\">testl</span>   <span class=\"nv\">%edi</span><span class=\"p\">,</span> <span class=\"nv\">%edi</span>\n    <span class=\"nf\">setne</span>   <span class=\"nv\">%cl</span>\n    <span class=\"nf\">movabsq</span> <span class=\"no\">$-4294967296</span><span class=\"p\">,</span> <span class=\"nv\">%rax</span>\n    <span class=\"nf\">andq</span>    <span class=\"nv\">%rdi</span><span class=\"p\">,</span> <span class=\"nv\">%rax</span>\n    <span class=\"nf\">orq</span> <span class=\"nv\">%rcx</span><span class=\"p\">,</span> <span class=\"nv\">%rax</span>\n    <span class=\"nf\">retq</span>\n</code></pre></div>\n<p>after:</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nl\">demo:</span>\n    <span class=\"na\">.cfi_startproc</span>\n    <span class=\"nf\">movabsq</span> <span class=\"no\">$-4294967296</span><span class=\"p\">,</span> <span class=\"nv\">%rax</span>\n    <span class=\"nf\">andq</span>    <span class=\"nv\">%rdi</span><span class=\"p\">,</span> <span class=\"nv\">%rax</span>\n    <span class=\"nf\">testl</span>   <span class=\"nv\">%edi</span><span class=\"p\">,</span> <span class=\"nv\">%edi</span>\n    <span class=\"nf\">je</span>  <span class=\"no\">.LBB5_1</span>\n    <span class=\"nf\">orq</span> <span class=\"no\">$1</span><span class=\"p\">,</span> <span class=\"nv\">%rax</span>\n    <span class=\"nf\">retq</span>\n<span class=\"nl\">.LBB5_1:</span>\n    <span class=\"nf\">retq</span>\n</code></pre></div>",
        "id": 239819873,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621635526
    },
    {
        "content": "<p>isn't that jump bad?</p>",
        "id": 239819882,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621635535
    },
    {
        "content": "<p>ah I think it's because it doesn't inline it right</p>",
        "id": 239821636,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621636736
    },
    {
        "content": "<p>I don't know how to make it do that however<br>\nAnyway, good night</p>",
        "id": 239821681,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621636790
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"409735\">Théo Degioanni</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Optimizing.20a.20match.20on.20a.20just-constructed.20enum.20.2385133/near/239819176\">said</a>:</p>\n<blockquote>\n<p>What opt level should I restrict the pass to? I don't exactly know what each value mean</p>\n</blockquote>\n<p>For the first PR it'd probably be easiest to put it at some level that doesn't run by default -- that way you can get it checked in with tests and such, but don't have to worry about any potential compiler perf impact.</p>",
        "id": 239826592,
        "sender_full_name": "scottmcm",
        "timestamp": 1621640581
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"409735\">Théo Degioanni</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Optimizing.20a.20match.20on.20a.20just-constructed.20enum.20.2385133/near/239821636\">said</a>:</p>\n<blockquote>\n<p>ah I think it's because it doesn't inline it right</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"307537\">@Noah Lev</span> has been experimenting with <code>#[inline(always)]</code> on <code>branch</code> to try to get past that, see <a href=\"https://github.com/rust-lang/rust/pull/85523\">https://github.com/rust-lang/rust/pull/85523</a></p>\n<p>You could perhaps put that in <code>core</code> yourself and see if you get better optimization results.</p>",
        "id": 239826746,
        "sender_full_name": "scottmcm",
        "timestamp": 1621640733
    },
    {
        "content": "<p>Okay. I'll also try looking at what has been said in the Vec::pop issue.</p>",
        "id": 239846220,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621661186
    },
    {
        "content": "<p>Hmm in fact it does inline it properly. I fear LLVM does not understand that the two paths are actually no-ops.</p>",
        "id": 239847997,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621663272
    },
    {
        "content": "<p>That would make sense if it did not actually propagate the switch. Later today I'll try emitting post-opt LLVM IR to see if that is the case.</p>",
        "id": 239848129,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621663410
    },
    {
        "content": "<p>With a better ConstProp it really would get propagated into an (almost?) identity at the MIR level so I'm not super worried, but for the time being this is weird.</p>",
        "id": 239848395,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621663573
    },
    {
        "content": "<p>Interestingly, I think it woudl also have to realize that when matching initialially, as it outputs</p>\n<div class=\"codehilite\"><pre><span></span><code>switchInt(move _3) -&gt; [0_isize: bb2, otherwise: bb1];\n</code></pre></div>\n<p>it will have to know what otherwise can only be 1 for it to understand  it can assume no change. If so, maybe we'd have to tweak the switch emission so it is a 0: bb2, 1: bb1 and otherwise: unreachable</p>",
        "id": 239848675,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621663862
    },
    {
        "content": "<p>Oh, curious.  Usually the MIR does have the 0/1/unreachable kind of switching in its output.  (LLVM likes changing that back to 0/otherwise, annoyingly, but MIR usually keeps it, I'd thought.)</p>",
        "id": 239850034,
        "sender_full_name": "scottmcm",
        "timestamp": 1621665276
    },
    {
        "content": "<p>Yeah okay this is the LLVM IR that I think rustc generates:</p>\n<div class=\"codehilite\" data-code-language=\"LLVM-MIR\"><pre><span></span><code>; Function Attrs: norecurse nounwind nonlazybind readnone uwtable willreturn\ndefine dso_local i64 @demo(i64 %0) unnamed_addr <span class=\"c\">#4 {</span>\nstart:\n  %_9 = and i64 %0, 4294967295\n  %switch = icmp eq i64 %_9, 0\n  %self.sroa.5.0.extract.shift = and i64 %0, -4294967296\n  br i1 %switch, label %bb1, label %bb2\n\nbb1:                                              ; preds = %start\n  ret i64 %self.sroa.5.0.extract.shift\n\nbb2:                                              ; preds = %start\n  %.sroa.0.0.insert.insert = or i64 %self.sroa.5.0.extract.shift, 1\n  ret i64 %.sroa.0.0.insert.insert\n}\n</code></pre></div>",
        "id": 239854533,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621670311
    },
    {
        "content": "<p>it's understandable it cannot understand what is going on</p>",
        "id": 239854553,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621670330
    },
    {
        "content": "<p>ah no that's after LLVM opt I think</p>",
        "id": 239854776,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621670488
    },
    {
        "content": "<p>okay so rustc does emit the 0, 1, otherwise information in IR actually</p>",
        "id": 239856262,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621672079
    },
    {
        "content": "<p>but it seems like LLVM still can't figure it out</p>",
        "id": 239856303,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621672095
    },
    {
        "content": "<p>yet it should know 0 and 1 are the only possible cases because the otherwise branch is indeed marked unreachable</p>",
        "id": 239856320,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621672130
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/SQ0TZ_uLXtWN9k0Poh3a_pE2/demo.pdf\">demo.pdf</a></p>",
        "id": 239891792,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621708835
    },
    {
        "content": "<p>this is the llvm cfg of the function before LLVM passes</p>",
        "id": 239891809,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621708851
    },
    {
        "content": "<p>What is the MIR output on your example?</p>",
        "id": 239892637,
        "sender_full_name": "cjgillot",
        "timestamp": 1621709689
    },
    {
        "content": "<p>for</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">demo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">?</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>the mir output is</p>\n<div class=\"codehilite\"><pre><span></span><code>fn demo(_1: Result&lt;i32, u32&gt;) -&gt; Result&lt;i32, u32&gt; {\n    debug x =&gt; _1;                       // in scope 0 at test_opt.rs:6:13: 6:14\n    let mut _0: std::result::Result&lt;i32, u32&gt;; // return place in scope 0 at test_opt.rs:6:37: 6:53\n    let mut _2: i32;                     // in scope 0 at test_opt.rs:7:8: 7:10\n    let mut _3: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, u32&gt;, i32&gt;; // in scope 0 at test_opt.rs:7:8: 7:10\n    let mut _4: std::result::Result&lt;i32, u32&gt;; // in scope 0 at test_opt.rs:7:8: 7:9\n    let mut _5: isize;                   // in scope 0 at test_opt.rs:7:9: 7:10\n    let _6: std::result::Result&lt;std::convert::Infallible, u32&gt;; // in scope 0 at test_opt.rs:7:9: 7:10\n    let mut _7: std::result::Result&lt;std::convert::Infallible, u32&gt;; // in scope 0 at test_opt.rs:7:9: 7:10\n    let _8: i32;                         // in scope 0 at test_opt.rs:7:8: 7:10\n    scope 1 {\n        debug residual =&gt; _6;            // in scope 1 at test_opt.rs:7:9: 7:10\n        scope 2 {\n            scope 8 (inlined &lt;Result&lt;i32, u32&gt; as FromResidual&lt;Result&lt;Infallible, u32&gt;&gt;&gt;::from_residual) { // at test_opt.rs:7:8: 7:10\n                debug residual =&gt; _7;    // in scope 8 at test_opt.rs:7:8: 7:10\n                let _15: u32;            // in scope 8 at test_opt.rs:7:8: 7:10\n                let mut _16: u32;        // in scope 8 at test_opt.rs:7:8: 7:10\n                let mut _17: u32;        // in scope 8 at test_opt.rs:7:8: 7:10\n                scope 9 {\n                    debug e =&gt; _15;      // in scope 9 at test_opt.rs:7:8: 7:10\n                    scope 10 (inlined &lt;u32 as From&lt;u32&gt;&gt;::from) { // at test_opt.rs:7:8: 7:10\n                        debug t =&gt; _17;  // in scope 10 at test_opt.rs:7:8: 7:10\n                    }\n                }\n            }\n        }\n    }\n    scope 3 {\n        debug val =&gt; _8;                 // in scope 3 at test_opt.rs:7:8: 7:10\n        scope 4 {\n        }\n    }\n    scope 5 (inlined &lt;Result&lt;i32, u32&gt; as Try&gt;::branch) { // at test_opt.rs:7:8: 7:10\n        debug self =&gt; _4;                // in scope 5 at test_opt.rs:7:8: 7:10\n        let mut _9: isize;               // in scope 5 at test_opt.rs:7:8: 7:10\n        let _10: i32;                    // in scope 5 at test_opt.rs:7:8: 7:10\n        let mut _11: i32;                // in scope 5 at test_opt.rs:7:8: 7:10\n        let _12: u32;                    // in scope 5 at test_opt.rs:7:8: 7:10\n        let mut _13: std::result::Result&lt;std::convert::Infallible, u32&gt;; // in scope 5 at test_opt.rs:7:8: 7:10\n        let mut _14: u32;                // in scope 5 at test_opt.rs:7:8: 7:10\n        scope 6 {\n            debug v =&gt; _10;              // in scope 6 at test_opt.rs:7:8: 7:10\n        }\n        scope 7 {\n            debug e =&gt; _12;              // in scope 7 at test_opt.rs:7:8: 7:10\n        }\n    }\n\n    bb0: {\n        StorageLive(_2);                 // scope 0 at test_opt.rs:7:8: 7:10\n        StorageLive(_3);                 // scope 0 at test_opt.rs:7:8: 7:10\n        StorageLive(_4);                 // scope 0 at test_opt.rs:7:8: 7:9\n        _4 = _1;                         // scope 0 at test_opt.rs:7:8: 7:9\n        StorageLive(_9);                 // scope 0 at test_opt.rs:7:8: 7:10\n        _9 = discriminant(_4);           // scope 5 at test_opt.rs:7:8: 7:10\n        switchInt(move _9) -&gt; [0_isize: bb5, 1_isize: bb3, otherwise: bb4]; // scope 5 at test_opt.rs:7:8: 7:10\n    }\n\n    bb1: {\n        StorageLive(_8);                 // scope 0 at test_opt.rs:7:8: 7:10\n        _8 = ((_3 as Continue).0: i32);  // scope 0 at test_opt.rs:7:8: 7:10\n        _2 = _8;                         // scope 4 at test_opt.rs:7:8: 7:10\n        StorageDead(_8);                 // scope 0 at test_opt.rs:7:9: 7:10\n        ((_0 as Ok).0: i32) = move _2;   // scope 0 at test_opt.rs:7:5: 7:11\n        discriminant(_0) = 0;            // scope 0 at test_opt.rs:7:5: 7:11\n        StorageDead(_2);                 // scope 0 at test_opt.rs:7:10: 7:11\n        StorageDead(_3);                 // scope 0 at test_opt.rs:8:1: 8:2\n        return;                          // scope 0 at test_opt.rs:8:2: 8:2\n    }\n\n    bb2: {\n        StorageLive(_6);                 // scope 0 at test_opt.rs:7:9: 7:10\n        _6 = ((_3 as Break).0: std::result::Result&lt;std::convert::Infallible, u32&gt;); // scope 0 at test_opt.rs:7:9: 7:10\n        StorageLive(_7);                 // scope 2 at test_opt.rs:7:9: 7:10\n        _7 = _6;                         // scope 2 at test_opt.rs:7:9: 7:10\n        StorageLive(_15);                // scope 8 at test_opt.rs:7:8: 7:10\n        _15 = move ((_7 as Err).0: u32); // scope 8 at test_opt.rs:7:8: 7:10\n        StorageLive(_16);                // scope 9 at test_opt.rs:7:8: 7:10\n        StorageLive(_17);                // scope 9 at test_opt.rs:7:8: 7:10\n        _17 = move _15;                  // scope 9 at test_opt.rs:7:8: 7:10\n        _16 = move _17;                  // scope 10 at test_opt.rs:7:8: 7:10\n        StorageDead(_17);                // scope 9 at test_opt.rs:7:8: 7:10\n        ((_0 as Err).0: u32) = move _16; // scope 9 at test_opt.rs:7:8: 7:10\n        discriminant(_0) = 1;            // scope 9 at test_opt.rs:7:8: 7:10\n        StorageDead(_16);                // scope 9 at test_opt.rs:7:8: 7:10\n        StorageDead(_15);                // scope 8 at test_opt.rs:7:8: 7:10\n        StorageDead(_7);                 // scope 2 at test_opt.rs:7:9: 7:10\n        StorageDead(_6);                 // scope 0 at test_opt.rs:7:9: 7:10\n        StorageDead(_2);                 // scope 0 at test_opt.rs:7:10: 7:11\n        StorageDead(_3);                 // scope 0 at test_opt.rs:8:1: 8:2\n        return;                          // scope 0 at test_opt.rs:8:2: 8:2\n    }\n\n    bb3: {\n        StorageLive(_12);                // scope 5 at test_opt.rs:7:8: 7:10\n        _12 = move ((_4 as Err).0: u32); // scope 5 at test_opt.rs:7:8: 7:10\n        StorageLive(_13);                // scope 7 at test_opt.rs:7:8: 7:10\n        StorageLive(_14);                // scope 7 at test_opt.rs:7:8: 7:10\n        _14 = move _12;                  // scope 7 at test_opt.rs:7:8: 7:10\n        ((_13 as Err).0: u32) = move _14; // scope 7 at test_opt.rs:7:8: 7:10\n        discriminant(_13) = 1;           // scope 7 at test_opt.rs:7:8: 7:10\n        StorageDead(_14);                // scope 7 at test_opt.rs:7:8: 7:10\n        ((_3 as Break).0: std::result::Result&lt;std::convert::Infallible, u32&gt;) = move _13; // scope 7 at test_opt.rs:7:8: 7:10\n        discriminant(_3) = 1;            // scope 7 at test_opt.rs:7:8: 7:10\n        StorageDead(_13);                // scope 7 at test_opt.rs:7:8: 7:10\n        StorageDead(_12);                // scope 5 at test_opt.rs:7:8: 7:10\n        StorageDead(_9);                 // scope 0 at test_opt.rs:7:8: 7:10\n        StorageDead(_4);                 // scope 0 at test_opt.rs:7:9: 7:10\n        _5 = discriminant(_3);           // scope 0 at test_opt.rs:7:9: 7:10\n        switchInt(move _5) -&gt; [0_isize: bb1, otherwise: bb2]; // scope 0 at test_opt.rs:7:9: 7:10\n    }\n\n    bb4: {\n        unreachable;                     // scope 5 at test_opt.rs:7:8: 7:10\n    }\n\n    bb5: {\n        StorageLive(_10);                // scope 5 at test_opt.rs:7:8: 7:10\n        _10 = move ((_4 as Ok).0: i32);  // scope 5 at test_opt.rs:7:8: 7:10\n        StorageLive(_11);                // scope 6 at test_opt.rs:7:8: 7:10\n        _11 = move _10;                  // scope 6 at test_opt.rs:7:8: 7:10\n        ((_3 as Continue).0: i32) = move _11; // scope 6 at test_opt.rs:7:8: 7:10\n        discriminant(_3) = 0;            // scope 6 at test_opt.rs:7:8: 7:10\n        StorageDead(_11);                // scope 6 at test_opt.rs:7:8: 7:10\n        StorageDead(_10);                // scope 5 at test_opt.rs:7:8: 7:10\n        StorageDead(_9);                 // scope 0 at test_opt.rs:7:8: 7:10\n        StorageDead(_4);                 // scope 0 at test_opt.rs:7:9: 7:10\n        _5 = discriminant(_3);           // scope 0 at test_opt.rs:7:9: 7:10\n        switchInt(move _5) -&gt; [0_isize: bb1, otherwise: bb2]; // scope 0 at test_opt.rs:7:9: 7:10\n    }\n}\n</code></pre></div>",
        "id": 239892903,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621710002
    },
    {
        "content": "<p>ConstProp does not pick up the constants so we still have switches in the end, and I wonder if that doesn't make LLVM miss it</p>",
        "id": 239893000,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621710041
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/XvliVTgsC68inb-rEP58g72c/demo_after_llvm.pdf\">demo_after_llvm.pdf</a></p>",
        "id": 239893061,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621710116
    },
    {
        "content": "<p>this is the final output out of LLVM</p>",
        "id": 239893063,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621710121
    },
    {
        "content": "<p>My understanding is that LLVM does not understand that it is extracting the enum tag, just to put it back in its result.</p>",
        "id": 239893447,
        "sender_full_name": "cjgillot",
        "timestamp": 1621710454
    },
    {
        "content": "<p>yeah that's correct</p>",
        "id": 239893459,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621710468
    },
    {
        "content": "<p>I don't really know what to do to make it realize that</p>",
        "id": 239893470,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621710475
    },
    {
        "content": "<p>the fact that one of the variables is called %switch makes me believe it incorrectly removes the switches ConstProp failed to simplify</p>",
        "id": 239893701,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621710680
    },
    {
        "content": "<p>The issues is that LLVM has no way to know that %switch is either 0 or 1.</p>",
        "id": 239893711,
        "sender_full_name": "cjgillot",
        "timestamp": 1621710710
    },
    {
        "content": "<p>Sorry, %_9.</p>",
        "id": 239893754,
        "sender_full_name": "cjgillot",
        "timestamp": 1621710726
    },
    {
        "content": "<p>I don't know if %_9 maps to the value being switched over in the first MIR switch or the ones being switched over in the unsimplified MIR switches</p>",
        "id": 239893774,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621710765
    },
    {
        "content": "<p>the thing is, when you look at the IR before LLVM opt, it does have all the information</p>",
        "id": 239893795,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621710800
    },
    {
        "content": "<p>the unsimplified switches are const, and the first switch has three branches: 0 -&gt; somewhere, 1 -&gt; somewhere else, otherwise -&gt; unreachable</p>",
        "id": 239893814,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621710832
    },
    {
        "content": "<p>maybe something to report upstream?</p>",
        "id": 239893877,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621710868
    },
    {
        "content": "<p>I'd love to be able to print CFG graphs after each LLVM pass to see how the code evolves, but there seems to be no easy way to achieve that unfortunately</p>",
        "id": 239894130,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621711131
    },
    {
        "content": "<p>I can try creating a hacky script tho</p>",
        "id": 239894138,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621711143
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/slYaE-ndvQcpPfdFRwcfM3OX/3.pdf\">3.pdf</a></p>",
        "id": 239895718,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621712789
    },
    {
        "content": "<p>interestingly, the 3rd thing it does to the IR is to get rid of the fact that it is only 0 or 1</p>",
        "id": 239895748,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621712834
    },
    {
        "content": "<p>(this pdf file is the state of the IR after the 3rd pass)</p>",
        "id": 239895789,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621712866
    },
    {
        "content": "<p>I believe the culprit to be a pass called \"Simplify the CFG\"</p>",
        "id": 239896639,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621713750
    },
    {
        "content": "<p><a href=\"https://llvm.org/doxygen/SimplifyCFGPass_8cpp_source.html\">https://llvm.org/doxygen/SimplifyCFGPass_8cpp_source.html</a></p>",
        "id": 239896792,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621713911
    },
    {
        "content": "<p>Did you push your code on github?</p>",
        "id": 239896794,
        "sender_full_name": "cjgillot",
        "timestamp": 1621713915
    },
    {
        "content": "<p>I'd like to understand why MIR const_prop does not fire.</p>",
        "id": 239896820,
        "sender_full_name": "cjgillot",
        "timestamp": 1621713939
    },
    {
        "content": "<p>my pass is up to date on my branch, one sec</p>",
        "id": 239896825,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621713951
    },
    {
        "content": "<p><a href=\"https://github.com/Moxinilian/rust/blob/separate-const-switch/compiler/rustc_mir/src/transform/separate_const_switch.rs\">https://github.com/Moxinilian/rust/blob/separate-const-switch/compiler/rustc_mir/src/transform/separate_const_switch.rs</a></p>",
        "id": 239896874,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621713973
    },
    {
        "content": "<p>someone suggested ConstProp does not pick it up because the places it uses are assigned to twice</p>",
        "id": 239896893,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621714001
    },
    {
        "content": "<p>which can be solved by the SSA suggestion, if that is the case</p>",
        "id": 239896898,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621714012
    },
    {
        "content": "<p>Is the question about why does const-prop does not propagate a write of a discriminant, to a subsequent read?</p>",
        "id": 239897125,
        "sender_full_name": "tm",
        "timestamp": 1621714262
    },
    {
        "content": "<p>A  whole local would need to be a const for that to happen.</p>",
        "id": 239897201,
        "sender_full_name": "tm",
        "timestamp": 1621714343
    },
    {
        "content": "<p>I wonder if an even simpler peephole copy prop pass could make sense.</p>\n<p>Like turning <code>discriminant(X) = Y; Z = discriminant(X);</code> into <code>discriminant(X) = Y; Z = Y;</code>.</p>",
        "id": 239897205,
        "sender_full_name": "scottmcm",
        "timestamp": 1621714349
    },
    {
        "content": "<p>I know there's all the NRVO work going on, but that's far more complex than is needed for the case this is hitting...</p>",
        "id": 239897341,
        "sender_full_name": "scottmcm",
        "timestamp": 1621714514
    },
    {
        "content": "<p>Running SimplifyCfg after the separate_const_switch passes allows ConstProp to pick up the optimization.</p>",
        "id": 239897831,
        "sender_full_name": "cjgillot",
        "timestamp": 1621715092
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>// MIR for `demo` after PreCodegen\n\nfn demo(_1: Result&lt;i32, u32&gt;) -&gt; Result&lt;i32, u32&gt; {\n    debug x =&gt; _1;                       // in scope 0 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:8:9: 8:10\n    let mut _0: std::result::Result&lt;i32, u32&gt;; // return place in scope 0 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:8:33: 8:49\n    let mut _2: i32;                     // in scope 0 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n    let mut _3: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, u32&gt;, i32&gt;; // in scope 0 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n    let mut _4: std::result::Result&lt;i32, u32&gt;; // in scope 0 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:9\n    let _5: std::result::Result&lt;std::convert::Infallible, u32&gt;; // in scope 0 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:9: 9:10\n    let mut _6: std::result::Result&lt;std::convert::Infallible, u32&gt;; // in scope 0 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:9: 9:10\n    let _7: i32;                         // in scope 0 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n    scope 1 {\n        debug residual =&gt; _5;            // in scope 1 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:9: 9:10\n        scope 2 {\n            scope 8 (inlined &lt;Result&lt;i32, u32&gt; as FromResidual&lt;Result&lt;Infallible, u32&gt;&gt;&gt;::from_residual) { // at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n                debug residual =&gt; _6;    // in scope 8 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n                let _14: u32;            // in scope 8 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n                let mut _15: u32;        // in scope 8 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n                let mut _16: u32;        // in scope 8 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n                scope 9 {\n                    debug e =&gt; _14;      // in scope 9 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n                    scope 10 (inlined &lt;u32 as From&lt;u32&gt;&gt;::from) { // at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n                        debug t =&gt; _16;  // in scope 10 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n                    }\n                }\n            }\n        }\n    }\n    scope 3 {\n        debug val =&gt; _7;                 // in scope 3 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        scope 4 {\n        }\n    }\n    scope 5 (inlined &lt;Result&lt;i32, u32&gt; as Try&gt;::branch) { // at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        debug self =&gt; _4;                // in scope 5 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        let mut _8: isize;               // in scope 5 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        let _9: i32;                     // in scope 5 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        let mut _10: i32;                // in scope 5 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        let _11: u32;                    // in scope 5 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        let mut _12: std::result::Result&lt;std::convert::Infallible, u32&gt;; // in scope 5 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        let mut _13: u32;                // in scope 5 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        scope 6 {\n            debug v =&gt; _9;               // in scope 6 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        }\n        scope 7 {\n            debug e =&gt; _11;              // in scope 7 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        }\n    }\n\n    bb0: {\n        StorageLive(_2);                 // scope 0 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        StorageLive(_3);                 // scope 0 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        StorageLive(_4);                 // scope 0 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:9\n        _4 = _1;                         // scope 0 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:9\n        StorageLive(_8);                 // scope 0 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        _8 = discriminant(_4);           // scope 5 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        switchInt(move _8) -&gt; [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 5 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n    }\n\n    bb1: {\n        StorageLive(_11);                // scope 5 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        _11 = move ((_4 as Err).0: u32); // scope 5 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        StorageLive(_12);                // scope 7 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        StorageLive(_13);                // scope 7 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        _13 = move _11;                  // scope 7 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        ((_12 as Err).0: u32) = move _13; // scope 7 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        discriminant(_12) = 1;           // scope 7 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        StorageDead(_13);                // scope 7 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        ((_3 as Break).0: std::result::Result&lt;std::convert::Infallible, u32&gt;) = move _12; // scope 7 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        discriminant(_3) = 1;            // scope 7 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        StorageDead(_12);                // scope 7 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        StorageDead(_11);                // scope 5 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        StorageDead(_8);                 // scope 0 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        StorageDead(_4);                 // scope 0 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:9: 9:10\n        StorageLive(_5);                 // scope 0 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:9: 9:10\n        _5 = ((_3 as Break).0: std::result::Result&lt;std::convert::Infallible, u32&gt;); // scope 0 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:9: 9:10\n        StorageLive(_6);                 // scope 2 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:9: 9:10\n        _6 = _5;                         // scope 2 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:9: 9:10\n        StorageLive(_14);                // scope 8 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        _14 = move ((_6 as Err).0: u32); // scope 8 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        StorageLive(_15);                // scope 9 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        StorageLive(_16);                // scope 9 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        _16 = move _14;                  // scope 9 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        _15 = move _16;                  // scope 10 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        StorageDead(_16);                // scope 9 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        ((_0 as Err).0: u32) = move _15; // scope 9 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        discriminant(_0) = 1;            // scope 9 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        StorageDead(_15);                // scope 9 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        StorageDead(_14);                // scope 8 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        StorageDead(_6);                 // scope 2 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:9: 9:10\n        StorageDead(_5);                 // scope 0 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:9: 9:10\n        StorageDead(_2);                 // scope 0 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:10: 9:11\n        StorageDead(_3);                 // scope 0 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:10:1: 10:2\n        return;                          // scope 0 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:10:2: 10:2\n    }\n</code></pre></div>",
        "id": 239897963,
        "sender_full_name": "cjgillot",
        "timestamp": 1621715259
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code> bb2: {\n        unreachable;                     // scope 5 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n    }\n\n    bb3: {\n        StorageLive(_9);                 // scope 5 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        _9 = move ((_4 as Ok).0: i32);   // scope 5 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        StorageLive(_10);                // scope 6 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        _10 = move _9;                   // scope 6 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        ((_3 as Continue).0: i32) = move _10; // scope 6 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        discriminant(_3) = 0;            // scope 6 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        StorageDead(_10);                // scope 6 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        StorageDead(_9);                 // scope 5 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        StorageDead(_8);                 // scope 0 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        StorageDead(_4);                 // scope 0 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:9: 9:10\n        StorageLive(_7);                 // scope 0 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        _7 = ((_3 as Continue).0: i32);  // scope 0 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        _2 = _7;                         // scope 4 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:8: 9:10\n        StorageDead(_7);                 // scope 0 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:9: 9:10\n        ((_0 as Ok).0: i32) = move _2;   // scope 0 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:5: 9:11\n        discriminant(_0) = 0;            // scope 0 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:5: 9:11\n        StorageDead(_2);                 // scope 0 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:9:10: 9:11\n        StorageDead(_3);                 // scope 0 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:10:1: 10:2\n        return;                          // scope 0 at /home/k1000/src/rust/rust/src/test/mir-opt/separate_const_switch.rs:10:2: 10:2\n    }\n}\n</code></pre></div>",
        "id": 239898054,
        "sender_full_name": "cjgillot",
        "timestamp": 1621715388
    },
    {
        "content": "<p>However, the final LLVM IR is not modified.</p>",
        "id": 239898313,
        "sender_full_name": "cjgillot",
        "timestamp": 1621715615
    },
    {
        "content": "<p>Yeah I think it’s an oversight in LLVM. For some reason it does not reason about unreachable blocks at all.</p>",
        "id": 239898858,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621716185
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Optimizing.20a.20match.20on.20a.20just-constructed.20enum.20.2385133/near/239897831\">said</a>:</p>\n<blockquote>\n<p>Running SimplifyCfg after the separate_const_switch passes allows ConstProp to pick up the optimization.</p>\n</blockquote>\n<p>Thank you, I will add that to the PR.</p>",
        "id": 239899183,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621716569
    },
    {
        "content": "<p>Is there a way to be very explicit with LLVM that there are only two values that can reach a switch?</p>",
        "id": 239900406,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621717817
    },
    {
        "content": "<p>Well, according to &lt;<a href=\"https://rust.godbolt.org/z/KqrYGxYW4\">https://rust.godbolt.org/z/KqrYGxYW4</a>&gt; we already emit</p>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code>  <span class=\"nv nv-Anonymous\">%6</span> <span class=\"p\">=</span> <span class=\"k\">load</span> <span class=\"kt\">i32</span><span class=\"p\">,</span> <span class=\"kt\">i32</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%5</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">4</span><span class=\"p\">,</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!10</span><span class=\"p\">,</span> <span class=\"nv\">!range</span> <span class=\"nv nv-Anonymous\">!11</span>\n  <span class=\"nv\">%_2</span> <span class=\"p\">=</span> <span class=\"k\">zext</span> <span class=\"kt\">i32</span> <span class=\"nv nv-Anonymous\">%6</span> <span class=\"k\">to</span> <span class=\"kt\">i64</span><span class=\"p\">,</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!10</span>\n  <span class=\"k\">switch</span> <span class=\"kt\">i64</span> <span class=\"nv\">%_2</span><span class=\"p\">,</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb2</span> <span class=\"p\">[</span>\n    <span class=\"kt\">i64</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb3</span>\n    <span class=\"kt\">i64</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb1</span>\n  <span class=\"p\">],</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!10</span>\n</code></pre></div>\n<p>where</p>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"nv nv-Anonymous\">!11</span> <span class=\"p\">=</span> <span class=\"p\">!{</span><span class=\"kt\">i32</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"kt\">i32</span> <span class=\"m\">2</span><span class=\"p\">}</span>\n</code></pre></div>\n<p>so I don't know that we can be much more explicit than that.</p>",
        "id": 239900654,
        "sender_full_name": "scottmcm",
        "timestamp": 1621718082
    },
    {
        "content": "<p>That said, there's a potentially interesting (and potentially massive, I don't know) project there about removing the <code>zext</code> for that case, since it's clearly not useful, and it's possible that it's somehow interrupting LLVM's knowledge about the range</p>",
        "id": 239900786,
        "sender_full_name": "scottmcm",
        "timestamp": 1621718184
    },
    {
        "content": "<p>(aka have the llvm codegen switch on the &lt;<a href=\"https://doc.rust-lang.org/nightly/std/marker/trait.DiscriminantKind.html\">https://doc.rust-lang.org/nightly/std/marker/trait.DiscriminantKind.html</a>&gt; ::Discriminant instead of always switching on <code>isize</code>.)</p>",
        "id": 239900919,
        "sender_full_name": "scottmcm",
        "timestamp": 1621718354
    },
    {
        "content": "<p>isn't isize the discriminant type by default? that's what the MIR for that IR shows, anyway</p>",
        "id": 239901058,
        "sender_full_name": "simulacrum",
        "timestamp": 1621718487
    },
    {
        "content": "<p>with repr(i32) on a substitute Result enum, the optimized IR doesn't change much:</p>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code> <span class=\"nv\">%.sroa.0.0.extract.trunc</span> <span class=\"p\">=</span> <span class=\"k\">trunc</span> <span class=\"kt\">i64</span> <span class=\"nv nv-Anonymous\">%0</span> <span class=\"k\">to</span> <span class=\"kt\">i32</span>\n  <span class=\"nv\">%switch</span> <span class=\"p\">=</span> <span class=\"k\">icmp</span> <span class=\"k\">eq</span> <span class=\"kt\">i32</span> <span class=\"nv\">%.sroa.0.0.extract.trunc</span><span class=\"p\">,</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!10</span>\n  <span class=\"nv\">%.0</span> <span class=\"p\">=</span> <span class=\"k\">select</span> <span class=\"kt\">i1</span> <span class=\"nv\">%switch</span><span class=\"p\">,</span> <span class=\"kt\">i32</span> <span class=\"m\">123</span><span class=\"p\">,</span> <span class=\"kt\">i32</span> <span class=\"m\">789</span><span class=\"p\">,</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!10</span>\n  <span class=\"k\">ret</span> <span class=\"kt\">i32</span> <span class=\"nv\">%.0</span><span class=\"p\">,</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!11</span>\n</code></pre></div>",
        "id": 239901200,
        "sender_full_name": "simulacrum",
        "timestamp": 1621718666
    },
    {
        "content": "<p>as opposed to:</p>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code>  <span class=\"nv\">%_2</span> <span class=\"p\">=</span> <span class=\"k\">and</span> <span class=\"kt\">i64</span> <span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span> <span class=\"m\">4294967295</span><span class=\"p\">,</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!10</span>\n  <span class=\"nv\">%switch</span> <span class=\"p\">=</span> <span class=\"k\">icmp</span> <span class=\"k\">eq</span> <span class=\"kt\">i64</span> <span class=\"nv\">%_2</span><span class=\"p\">,</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!10</span>\n  <span class=\"nv\">%.0</span> <span class=\"p\">=</span> <span class=\"k\">select</span> <span class=\"kt\">i1</span> <span class=\"nv\">%switch</span><span class=\"p\">,</span> <span class=\"kt\">i32</span> <span class=\"m\">123</span><span class=\"p\">,</span> <span class=\"kt\">i32</span> <span class=\"m\">789</span><span class=\"p\">,</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!10</span>\n  <span class=\"k\">ret</span> <span class=\"kt\">i32</span> <span class=\"nv\">%.0</span><span class=\"p\">,</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!11</span>\n</code></pre></div>",
        "id": 239901210,
        "sender_full_name": "simulacrum",
        "timestamp": 1621718684
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Optimizing.20a.20match.20on.20a.20just-constructed.20enum.20.2385133/near/239900654\">said</a>:</p>\n<blockquote>\n<p>Well, according to &lt;<a href=\"https://rust.godbolt.org/z/KqrYGxYW4\">https://rust.godbolt.org/z/KqrYGxYW4</a>&gt; we already emit</p>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code>  <span class=\"nv nv-Anonymous\">%6</span> <span class=\"p\">=</span> <span class=\"k\">load</span> <span class=\"kt\">i32</span><span class=\"p\">,</span> <span class=\"kt\">i32</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%5</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">4</span><span class=\"p\">,</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!10</span><span class=\"p\">,</span> <span class=\"nv\">!range</span> <span class=\"nv nv-Anonymous\">!11</span>\n  <span class=\"nv\">%_2</span> <span class=\"p\">=</span> <span class=\"k\">zext</span> <span class=\"kt\">i32</span> <span class=\"nv nv-Anonymous\">%6</span> <span class=\"k\">to</span> <span class=\"kt\">i64</span><span class=\"p\">,</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!10</span>\n  <span class=\"k\">switch</span> <span class=\"kt\">i64</span> <span class=\"nv\">%_2</span><span class=\"p\">,</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb2</span> <span class=\"p\">[</span>\n    <span class=\"kt\">i64</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb3</span>\n    <span class=\"kt\">i64</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb1</span>\n  <span class=\"p\">],</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!10</span>\n</code></pre></div>\n<p>where</p>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"nv nv-Anonymous\">!11</span> <span class=\"p\">=</span> <span class=\"p\">!{</span><span class=\"kt\">i32</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"kt\">i32</span> <span class=\"m\">2</span><span class=\"p\">}</span>\n</code></pre></div>\n<p>so I don't know that we can be much more explicit than that.</p>\n</blockquote>\n<p>what is the meaning of <code>!</code> metadata in this content?</p>",
        "id": 239901528,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621719045
    },
    {
        "content": "<p>(I'm relatively new to LLVM IR as well)</p>",
        "id": 239901536,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621719055
    },
    {
        "content": "<p><code>!range !11</code> means that the loaded data lies in the range <code>!11</code>, which is defined as the interval <code>[0, 2)</code>.</p>",
        "id": 239901640,
        "sender_full_name": "cjgillot",
        "timestamp": 1621719178
    },
    {
        "content": "<p>Okay, that info gets completely removed after one of the following passes:<br>\n0:  Instrument function entry/exit with calls to e.g. mcount() (pre inlining)<br>\n1:  Simplify the CFG<br>\n2:  SROA</p>",
        "id": 239901800,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621719303
    },
    {
        "content": "<p>It's probably \"Simplify the CFG\" that does it</p>",
        "id": 239901897,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621719393
    },
    {
        "content": "<p>maybe they just overlooked keeping the metadata</p>",
        "id": 239901904,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621719409
    },
    {
        "content": "<p><code>!range</code> is unfortunately allowed only in rather limited situations: <a href=\"https://llvm.org/docs/LangRef.html#range-metadata\">https://llvm.org/docs/LangRef.html#range-metadata</a></p>\n<p>See <a href=\"https://github.com/rust-lang/rust/issues/49572#issuecomment-444858611\">https://github.com/rust-lang/rust/issues/49572#issuecomment-444858611</a> for a related conversation about how LLVM loses the non-zero-ness of <code>NonZeroU32</code> and friends.</p>",
        "id": 239907209,
        "sender_full_name": "scottmcm",
        "timestamp": 1621725125
    },
    {
        "content": "<p>Bummer</p>",
        "id": 239923538,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621744996
    },
    {
        "content": "<p>I guess the only way forward now is to open an issue upstream</p>",
        "id": 239924545,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621746218
    },
    {
        "content": "<p>I'll try to create a minimal IR file that illustrates the behavior</p>",
        "id": 239924554,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621746235
    },
    {
        "content": "<p>Okay I think I have a good example of the bad behavior:</p>\n<div class=\"codehilite\"><pre><span></span><code>define i64 @demo(i64 %x) {\nentry:\n    switch i64 %x, label %bb3 [\n        i64 0, label %bb1\n        i64 1, label %bb2\n    ]\nbb1:\n    ret i64 0\nbb2:\n    %0 = icmp eq i64 %x, 100 ; this will necessarily be false\n    br i1 %0, label %bb5, label %bb4\nbb3:\n    unreachable\nbb4:\n    ret i64 200\nbb5:\n    ret i64 1\n}\n</code></pre></div>\n<p>gets turned into</p>\n<div class=\"codehilite\"><pre><span></span><code>; ModuleID = &#39;repro.ll&#39;\nsource_filename = &quot;repro.ll&quot;\n\ndefine i64 @demo(i64 %x) {\nentry:\n  %switch = icmp ult i64 %x, 1\n  %0 = icmp eq i64 %x, 100 ; this cmp should be removed later on but the information is lost\n  %. = select i1 %0, i64 1, i64 200\n  %merge = select i1 %switch, i64 0, i64 %.\n  ret i64 %merge\n}\n</code></pre></div>",
        "id": 239929413,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621752128
    },
    {
        "content": "<p>in that transformation, all information about %x being in [0; 1] is lost</p>",
        "id": 239929424,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621752144
    },
    {
        "content": "<p>can you confirm I'm not missing anything here?</p>",
        "id": 239929437,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621752161
    },
    {
        "content": "<p>(it's generating suboptimal code and SimplifyCFG lost the information to optimize that away)</p>",
        "id": 239929872,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621752789
    },
    {
        "content": "<p>Hmm, I wonder what happens if it's <code>i1</code> instead of <code>i64</code>.  Dunno if it'd be worth special-casing 2-variant enums, but maybe...</p>",
        "id": 239930655,
        "sender_full_name": "scottmcm",
        "timestamp": 1621753790
    },
    {
        "content": "<p>(0- and 1-variant enums are already special, but in very different ways.)</p>",
        "id": 239930698,
        "sender_full_name": "scottmcm",
        "timestamp": 1621753808
    },
    {
        "content": "<p>with i1, the cmp is correctly optimized away</p>",
        "id": 239930802,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621753960
    },
    {
        "content": "<p>but it's a bit unfortunate that we would have to 1. specialize 2. have it only work on 2-variant enums when we could definitely profit from that in 3-variant cases for example</p>",
        "id": 239930821,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621754001
    },
    {
        "content": "<p>I'm waiting for an account creation on the LLVM bugtracker, and once it's done I'll submit the problem there</p>",
        "id": 239931018,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621754229
    },
    {
        "content": "<p>Does LLVM do that transform on a 3-option <code>switch</code>?  I wonder if it's the <code>switch</code>-&gt;<code>select</code> transformation that's causing the problem, which would be 2-variant specific.</p>",
        "id": 239931256,
        "sender_full_name": "scottmcm",
        "timestamp": 1621754492
    },
    {
        "content": "<p>ah that makes sense</p>",
        "id": 239931261,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621754506
    },
    {
        "content": "<p>let me try</p>",
        "id": 239931303,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621754529
    },
    {
        "content": "<p>(As usual I'm just guessing here -- I'm no expert in LLVM, nor MIR.)</p>",
        "id": 239931320,
        "sender_full_name": "scottmcm",
        "timestamp": 1621754555
    },
    {
        "content": "<p>On 3-variants it does that too (using a pretty smart trick! it subtracks an offset so variant 0 is negative, variant 1 is 0 et variant 2 is positive)</p>",
        "id": 239931340,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621754602
    },
    {
        "content": "<p>it's doing it on many variant amounts, it can figure out tricks pretty often</p>",
        "id": 239931488,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621754725
    },
    {
        "content": "<p>I think the solution to our problem could simply be for SimplifyCFG to not forget the unreachable case</p>",
        "id": 239931569,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621754831
    },
    {
        "content": "<p>Is it LLVM that decides a SimplifyCFG pass should be ran early, or is that decision made by the front-end user? If so, changing that ordering could maybe affect those results</p>",
        "id": 239931587,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621754862
    },
    {
        "content": "<p>Total shot in the dark: you could see if <code>-Z new-llvm-pass-manager</code> makes a difference.</p>\n<p>AFAIK, we could control the passes more in depth, but generally prefer to follow the order that clang does for C++, as one that's already well tested.</p>",
        "id": 239932680,
        "sender_full_name": "scottmcm",
        "timestamp": 1621756197
    },
    {
        "content": "<p>no luck with the new manager</p>",
        "id": 239933102,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621756752
    },
    {
        "content": "<p>Anyway: this is a blocker. I don't think we can afford the desugaring to regress into a jump. Hopefully we can get some advice for a temporary alternative from LLVM people.</p>",
        "id": 239934032,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621757697
    },
    {
        "content": "<p><a href=\"https://bugs.llvm.org/show_bug.cgi?id=50455\">https://bugs.llvm.org/show_bug.cgi?id=50455</a></p>",
        "id": 240064399,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621869171
    },
    {
        "content": "<p>to be continued</p>",
        "id": 240064413,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621869181
    },
    {
        "content": "<p>Would it make sense to PR what I have in a state where it is not enabled by default until we have this fixed in LLVM?</p>",
        "id": 240095008,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621882485
    },
    {
        "content": "<p>Yes. A lot of mir-opts are disabled by default.</p>",
        "id": 240096127,
        "sender_full_name": "cjgillot",
        "timestamp": 1621882909
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/85646\">https://github.com/rust-lang/rust/pull/85646</a></p>",
        "id": 240115638,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621892300
    },
    {
        "content": "<p>It's up!</p>",
        "id": 240115648,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621892305
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> For some reason I cannot reproduce your results with the SiplifyCfg pass to make ConstProp pick up the optimization, even though I had before. Did you do anything beyond adding an instance of the pass where I added it in the PR?</p>",
        "id": 240223572,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621964259
    },
    {
        "content": "<p>Did you push changes to the PR, with the diff of the ConstProp pass?</p>",
        "id": 240238005,
        "sender_full_name": "cjgillot",
        "timestamp": 1621971020
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Optimizing.20a.20match.20on.20a.20just-constructed.20enum.20.2385133/near/240238005\">said</a>:</p>\n<blockquote>\n<p>Did you push changes to the PR, with the diff of the ConstProp pass?</p>\n</blockquote>\n<p>I did not but the diff is a no-op</p>",
        "id": 240248553,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621975989
    },
    {
        "content": "<p>I'm accumulating a bunch of fixes for your comments and that's why I ended up finding out it was not picking it up anymore</p>",
        "id": 240248635,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621976043
    },
    {
        "content": "<p>The annoying part is that I did not change what gets output for that specific example</p>",
        "id": 240248690,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621976060
    },
    {
        "content": "<p>Maybe i'm just misconfiguring it or something, I'm going to push things</p>",
        "id": 240248707,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621976075
    },
    {
        "content": "<p>(by the way, about the LLVM opt: apparently the range metadata does not get eliminated in the first passes as my CFG visualization suggested, so I'll dig into that some more)</p>",
        "id": 240248773,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621976115
    },
    {
        "content": "<p>Does it work after making function monomorphic?</p>",
        "id": 240249186,
        "sender_full_name": "tm",
        "timestamp": 1621976322
    },
    {
        "content": "<p>The PR uses generic <code>Result&lt;T, E&gt;</code> while earlier example in this thread was using <code>Result&lt;i32, u32&gt;</code>.</p>",
        "id": 240249924,
        "sender_full_name": "tm",
        "timestamp": 1621976643
    },
    {
        "content": "<p>oh wow, it does</p>",
        "id": 240250008,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621976685
    },
    {
        "content": "<p>that's interesting</p>",
        "id": 240250019,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621976697
    },
    {
        "content": "<p>why would it depend on that?</p>",
        "id": 240250028,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621976703
    },
    {
        "content": "<p>(you seem to be very knowledgeable of how ConstProp works)</p>",
        "id": 240250050,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621976717
    },
    {
        "content": "<p>okay now that's really interesting: you don't even need to simplify for it to work, but it only works when it's monomorphic</p>",
        "id": 240252701,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621978167
    },
    {
        "content": "<p>sounds like a ConstProp problem if anything</p>",
        "id": 240252784,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621978208
    },
    {
        "content": "<p>An update on this: a student friend of mine coincidentally stumbled upon my LLVM bug report and suggested adding a <code>-lowerswitch</code> pass before SimplifyCFG in LLVM to make sure the unreachable is not lost</p>",
        "id": 242101128,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623259479
    },
    {
        "content": "<p>I'll try doing this to see if it does the trick</p>",
        "id": 242101181,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623259502
    },
    {
        "content": "<p>Sorry for not updating the PR lately, I've been pretty busy recently (in LLVM, actually) for my current internship</p>",
        "id": 242101209,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623259514
    },
    {
        "content": "<p>I updated the PR with some more git troubles, if anyone has some time to help me resolve it.</p>",
        "id": 242110180,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623263623
    },
    {
        "content": "<p>If not, i'll just copy my changes to a different branch and start over, but that's a bit sad. Unless I can force push a completely different branch to the currently opened branch PR, which would not be too bad.</p>",
        "id": 242110223,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623263641
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"409735\">Théo Degioanni</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Optimizing.20a.20match.20on.20a.20just-constructed.20enum.20.2385133/near/242110223\">said</a>:</p>\n<blockquote>\n<p>Unless I can force push a completely different branch to the currently opened branch PR, which would not be too bad.</p>\n</blockquote>\n<p>You absolutely can.  Which local branch pushes to which remote branch is just metadata -- you can see what goes where in your <code>.git/config</code>.  (See also the <code>--set-upstream</code> flag on <a href=\"https://git-scm.com/docs/git-push\">git push</a>.)</p>",
        "id": 242113538,
        "sender_full_name": "scottmcm",
        "timestamp": 1623265196
    },
    {
        "content": "<p>Okay, great. I’ll do that.</p>",
        "id": 242123813,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623269876
    },
    {
        "content": "<p>unfortunately lowerswitch has the same information loss issue</p>",
        "id": 242139195,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623277791
    },
    {
        "content": "<p>this can probably be fixed in LLVM, but for now I'll try to get that PR mergeable</p>",
        "id": 242139272,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623277820
    },
    {
        "content": "<p>PR is up to date<br>\n<a href=\"https://github.com/rust-lang/rust/pull/85646\">https://github.com/rust-lang/rust/pull/85646</a></p>",
        "id": 242140064,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623278396
    },
    {
        "content": "<p>wow scottmcm you were fast</p>",
        "id": 242140141,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623278422
    },
    {
        "content": "<p>I just noticed a suboptimal aspect of the opt</p>",
        "id": 242140676,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623278876
    },
    {
        "content": "<p>the .skip(1) change is not equivalent to my initial proposal, as if the first block is the only block to set the value as a const, it misses the optimisation</p>",
        "id": 242140748,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623278915
    },
    {
        "content": "<p>i'll restore the previous approach</p>",
        "id": 242140756,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623278923
    },
    {
        "content": "<p>...for what it's worth the outer first loop is immutable and thus trivial to make parallel...</p>",
        "id": 242141624,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623279658
    },
    {
        "content": "<p><code>blocks.par_iter().filter_map(find_edges).flatten().collect();</code></p>",
        "id": 242141766,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623279741
    },
    {
        "content": "<p>I've tried the pass against <a href=\"https://github.com/rust-lang/rust/issues/85365\">https://github.com/rust-lang/rust/issues/85365</a><br>\nWhile it does not seem to help with the copying, it seems to produce more efficient assembly somehow? This is one of the reasons I'd like to find a way to bench it against real code</p>",
        "id": 242232097,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623341755
    },
    {
        "content": "<p>Like maybe it does make for a worst <code>Ok(x?)</code> currently but it might also already help on other fronts? Or maybe it's doing absolutely terrible in other places as well. I'd like to know. I'll bench it with a few projects I can find that have benchmarks, but iirc the CI setup has some perf tests that can be ran, is that right?</p>",
        "id": 242232353,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623341857
    },
    {
        "content": "<p>that is absolutely right, CI does have some automated rustc benchmarks</p>",
        "id": 242235140,
        "sender_full_name": "lqd",
        "timestamp": 1623343113
    },
    {
        "content": "<p>and since I assume you'd like to run it on <a href=\"https://github.com/rust-lang/rust/issues/85646\">#85646</a> I can do that for you</p>",
        "id": 242235621,
        "sender_full_name": "lqd",
        "timestamp": 1623343339
    },
    {
        "content": "<p>however, I see the cargo.lock commit and revert, so if you could just squash the \"un-update itertools\" commit and force push, I'll launch the perf run right after</p>",
        "id": 242235678,
        "sender_full_name": "lqd",
        "timestamp": 1623343377
    },
    {
        "content": "<p>it's not a requirement for the perf run of course, but this commit will have to be squashed anyway before the PR being merged, so might as well take care of it now :)</p>",
        "id": 242235746,
        "sender_full_name": "lqd",
        "timestamp": 1623343411
    },
    {
        "content": "<p>I'll do this right away, thanks!</p>",
        "id": 242237311,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623344145
    },
    {
        "content": "<p>(mais de rien :)</p>",
        "id": 242237381,
        "sender_full_name": "lqd",
        "timestamp": 1623344165
    },
    {
        "content": "<p>squashed!</p>",
        "id": 242237563,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623344260
    },
    {
        "content": "<p>considering the LLVM issue I expect the perf to be regressing overall unfortunately</p>",
        "id": 242237612,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623344281
    },
    {
        "content": "<p>but it's good to have data on it</p>",
        "id": 242237660,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623344287
    },
    {
        "content": "<p>here we gooo</p>",
        "id": 242237765,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623344332
    },
    {
        "content": "<p>I'll let CI run a bit for formatting reasons and so on before launching the perf run, but I'm on it</p>",
        "id": 242237826,
        "sender_full_name": "lqd",
        "timestamp": 1623344357
    },
    {
        "content": "<p>quite possible, also sometimes rustc is not that representative of a workload</p>",
        "id": 242237865,
        "sender_full_name": "lqd",
        "timestamp": 1623344377
    },
    {
        "content": "<p>is your optimization hooked up to run all the time ? or gated being a specific mir-opt-level ?</p>",
        "id": 242238031,
        "sender_full_name": "lqd",
        "timestamp": 1623344435
    },
    {
        "content": "<p>mir-opt-level 4</p>",
        "id": 242238072,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623344456
    },
    {
        "content": "<p>so you're looking for possible regressions even if it doesn't run ?</p>",
        "id": 242238140,
        "sender_full_name": "lqd",
        "timestamp": 1623344485
    },
    {
        "content": "<p>(since it wouldn't run by default on the perf run we'll launch)</p>",
        "id": 242238174,
        "sender_full_name": "lqd",
        "timestamp": 1623344503
    },
    {
        "content": "<p>ah no, I wanted to look at possible regressions if it does run</p>",
        "id": 242238299,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623344553
    },
    {
        "content": "<p>hopefully there would be none in smaller opt-levels</p>",
        "id": 242238317,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623344563
    },
    {
        "content": "<p>is it possible to do a run with opt level 4?</p>",
        "id": 242238446,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623344628
    },
    {
        "content": "<p>it would be easier to add a temporary commit just for the run that lowers the opt gating</p>",
        "id": 242238530,
        "sender_full_name": "lqd",
        "timestamp": 1623344651
    },
    {
        "content": "<p>(and one'd drop the commit after the perf runs are done so that it doesn't land as-is)</p>",
        "id": 242238594,
        "sender_full_name": "lqd",
        "timestamp": 1623344692
    },
    {
        "content": "<p>gotcha, doing it</p>",
        "id": 242238621,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623344705
    },
    {
        "content": "<p>done</p>",
        "id": 242238833,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623344792
    },
    {
        "content": "<p>ok so it'll run for all benches (maybe even check runs)</p>",
        "id": 242238998,
        "sender_full_name": "lqd",
        "timestamp": 1623344871
    },
    {
        "content": "<p>should be good enough to have some data</p>",
        "id": 242239027,
        "sender_full_name": "lqd",
        "timestamp": 1623344880
    },
    {
        "content": "<p>and if not we'll adjust and do other runs</p>",
        "id": 242239082,
        "sender_full_name": "lqd",
        "timestamp": 1623344892
    },
    {
        "content": "<p>interesting that GH disabled CI as soon as you pushed, so I suggest not touching the PR for the time being, lest it goes back to the unapproved state (it shouldn't matter for the try and perf runs but who knows)</p>",
        "id": 242239527,
        "sender_full_name": "lqd",
        "timestamp": 1623345055
    },
    {
        "content": "<p>until we have the perf run data, that is</p>",
        "id": 242239589,
        "sender_full_name": "lqd",
        "timestamp": 1623345077
    },
    {
        "content": "<p>okay!</p>",
        "id": 242239604,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623345084
    },
    {
        "content": "<p>in any case, it's queued</p>",
        "id": 242239630,
        "sender_full_name": "lqd",
        "timestamp": 1623345097
    },
    {
        "content": "<p>and <span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> is on top of things for the review, so let's celebrate with another <span aria-label=\"baguette\" class=\"emoji emoji-1f956\" role=\"img\" title=\"baguette\">:baguette:</span></p>",
        "id": 242239796,
        "sender_full_name": "lqd",
        "timestamp": 1623345158
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> what does \"place projection\" precisely mean?</p>",
        "id": 242240675,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623345517
    },
    {
        "content": "<p>I find the \"only discriminant\" aspect could be more precise generally in the code I currently have</p>",
        "id": 242240704,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623345536
    },
    {
        "content": "<p>like for example if we're only tracking the discriminant in the determining place, surely the <code>is_likely_const</code> function would like to know about that in some way</p>",
        "id": 242240783,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623345576
    },
    {
        "content": "<p>(I'm a bit puzzled  by the CI failure)</p>",
        "id": 242241362,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623345836
    },
    {
        "content": "<p>A MIR Place is a Local along with projections. Projections can be a Deref (*_1), a Field access (_1.0 as type), no projection (just _1), etc. As written, find_determining_place only works as long there is no projection anywhere.</p>",
        "id": 242241491,
        "sender_full_name": "cjgillot",
        "timestamp": 1623345876
    },
    {
        "content": "<p>ah yes, I think this was part of the heuristic nature, to not have to handle aliasing and things like that</p>",
        "id": 242241731,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623345973
    },
    {
        "content": "<p>but if there's a way that is not too slow to do it i'd like to try</p>",
        "id": 242241782,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623346004
    },
    {
        "content": "<p>You can just check there is no such projections.</p>",
        "id": 242241857,
        "sender_full_name": "cjgillot",
        "timestamp": 1623346058
    },
    {
        "content": "<p>Likewise for is_likely_const.</p>",
        "id": 242242629,
        "sender_full_name": "cjgillot",
        "timestamp": 1623346404
    },
    {
        "content": "<p>Speaking of which, I think CopyNonOverlapping is fine and can just be ignored, it's not going to affect what is happening, surely</p>",
        "id": 242243448,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623346731
    },
    {
        "content": "<p>it's only touching memory, I mean</p>",
        "id": 242243479,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623346744
    },
    {
        "content": "<p>I rejected it because I wasn't sure and forgot to mention it</p>",
        "id": 242243541,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623346767
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> not super sure how to handle projections... my understanding is that places are a projection over a value, so I don't understand what is not handled in a satisfactory way currently</p>",
        "id": 242246692,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623348183
    },
    {
        "content": "<p>I think my understanding of places might be incorrect as they are typed with a list of projections, not just one</p>",
        "id": 242246749,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623348216
    },
    {
        "content": "<p>For the most part, you can just bail out of the optimization when there is an projection you can't handle.</p>",
        "id": 242247828,
        "sender_full_name": "cjgillot",
        "timestamp": 1623348740
    },
    {
        "content": "<p>Right, but is there some documentation about the projection abstraction? I missed it entirely while making the pass and it is not obvious to me how it works</p>",
        "id": 242248155,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623348883
    },
    {
        "content": "<p>There is a brief introduction in the dev guide <a href=\"https://rustc-dev-guide.rust-lang.org/mir/index.html\">https://rustc-dev-guide.rust-lang.org/mir/index.html</a><br>\nOtherwise there is the rustc's rustdoc.</p>",
        "id": 242249297,
        "sender_full_name": "cjgillot",
        "timestamp": 1623349376
    },
    {
        "content": "<p>What does it mean for a place to have multiple projections?</p>",
        "id": 242251715,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623350293
    },
    {
        "content": "<p>One after the other like <code>((*_1).0)[3]</code>.</p>",
        "id": 242251802,
        "sender_full_name": "cjgillot",
        "timestamp": 1623350343
    },
    {
        "content": "<p>Oh okay!</p>",
        "id": 242251848,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623350372
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 242251867,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623350383
    },
    {
        "content": "<p>I’ll fix this asap</p>",
        "id": 242251973,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623350419
    },
    {
        "content": "<p>I might want to add a method on Place <code>within(&amp;self, other: &amp;Place) -&gt; Option&lt;bool&gt;</code> that attempts to compute if the self place is a part of the other place, returning none if it can’t tell (for example if it does dereferencing)</p>",
        "id": 242459492,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623515369
    },
    {
        "content": "<p>This might be useful to other opts</p>",
        "id": 242459493,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623515375
    },
    {
        "content": "<p>That would make the change to support projections in the opt rather clean</p>",
        "id": 242459562,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623515455
    },
    {
        "content": "<p>(Instead of comparing target place with tracked place, I would check whether tracked place is within target place)</p>",
        "id": 242459592,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623515512
    },
    {
        "content": "<p>I wonder if this actually is the semantics of the the partialord impl on Place</p>",
        "id": 242459661,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623515581
    },
    {
        "content": "<p>it's hard to tell, that would be unlikely however</p>",
        "id": 242460151,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623516245
    },
    {
        "content": "<p>why is discriminant not a projection?</p>",
        "id": 242463195,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623520710
    },
    {
        "content": "<p>Because the discriminant often isn't stored at a specific offset, but needs to be calculated.</p>",
        "id": 242463322,
        "sender_full_name": "bjorn3",
        "timestamp": 1623520845
    },
    {
        "content": "<p>For example for <code>Option&lt;&amp;u8&gt;</code> the calculation for the discriminant is likely pointer sized word == 0 =&gt; <code>None</code> else <code>Some</code>.</p>",
        "id": 242463351,
        "sender_full_name": "bjorn3",
        "timestamp": 1623520898
    },
    {
        "content": "<p>thank you!</p>",
        "id": 242463964,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1623521685
    },
    {
        "content": "<p>is it guaranteed that when an enum place is affected, the content will always be set before the discriminant?</p>",
        "id": 243179981,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1624032047
    },
    {
        "content": "<p>or, actually, here is a better question: is it guaranteed that an enum affectation will be associated with a <code>discriminant(_x) = n</code>? I've tried with <code>Option&lt;&amp;u32&gt;</code> which generated one, but I'm not sure if it is guaranteed to be</p>",
        "id": 243180308,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1624032211
    },
    {
        "content": "<p>I don't think you should rely on either of those things.  This is an optimization, so it just needs to be sound, not complete.  If it occasionally duplicates a terminal in a place that doesn't optimize that's fine, and if it occasionally doesn't duplicate the terminal in a place where it could have that's also fine.</p>",
        "id": 243180578,
        "sender_full_name": "scottmcm",
        "timestamp": 1624032345
    },
    {
        "content": "<p>right</p>",
        "id": 243180708,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1624032407
    },
    {
        "content": "<p>I'll just fix the discriminant tracking mistake and not care about projections, then</p>",
        "id": 243180743,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1624032427
    },
    {
        "content": "<p>(I'm not entirely sure what you mean by \"enum affectation\" -- certainly <code>_x = _y</code> can also change the discriminant.  And with <code>#[repr(C, u8)]</code> it can be set by writing through a projection.)</p>",
        "id": 243181444,
        "sender_full_name": "scottmcm",
        "timestamp": 1624032844
    },
    {
        "content": "<p>(I meant enum construction, I think)</p>",
        "id": 243181580,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1624032922
    },
    {
        "content": "<p>(like, when one does <code>let x: Option&lt;&amp;u32&gt; = Some(&amp;y)</code>)</p>",
        "id": 243181684,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1624032976
    },
    {
        "content": "<p>(technically I guess setting the discriminant explicitly could not be necessary, because we're setting the enum to be a non-null value and it's using a niche)</p>",
        "id": 243181780,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1624033041
    },
    {
        "content": "<p>(I don't know if other parts of the compiler rely on the discriminant being set anyway)</p>",
        "id": 243181827,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1624033058
    },
    {
        "content": "<p>I'm reasonably confident that an enum variant literal will always set it, because the code generating the MIR from HIR doesn't want to bother checking the layout details to know whether it's done via a niche.</p>\n<p>But I'd still say you shouldn't rely on that for <em>soundness</em> of the optimization.  Just as a nice heuristic for deciding whether to run it.</p>",
        "id": 243182404,
        "sender_full_name": "scottmcm",
        "timestamp": 1624033395
    },
    {
        "content": "<p>yes it was definitely not for soundness</p>",
        "id": 243183030,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1624033789
    },
    {
        "content": "<p>I just wanted to make the analysis finer to address a review on the PR</p>",
        "id": 243183099,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1624033810
    },
    {
        "content": "<p>Depending on where this runs as part of the MIR opt pipeline, I could see things like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">21</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>not setting the discriminant to the same value twice but I don't think we currently have any optimizations that would perform that transformation.</p>",
        "id": 243183678,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1624034173
    },
    {
        "content": "<p>Okay, I wanted at least one so it would have been good. But i'm dropping this because I think it's going to be needlessly complex</p>",
        "id": 243183757,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1624034239
    },
    {
        "content": "<p>Like the approach I wanted would cover cases that would never show up unless I added significant complexity</p>",
        "id": 243183787,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1624034262
    },
    {
        "content": "<p>Hi, I'm looking for a first issue to contribute to. Is this something that would be a first good issue / is it free to pick up? I saw someone started working on it and then closed it</p>",
        "id": 245731650,
        "sender_full_name": "Michael Maitland",
        "timestamp": 1626116320
    },
    {
        "content": "<p>Nothing is closed afaik, the PR for the first stab at this is still open <a href=\"https://github.com/rust-lang/rust/pull/85646\">https://github.com/rust-lang/rust/pull/85646</a></p>",
        "id": 246379208,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1626615428
    }
]