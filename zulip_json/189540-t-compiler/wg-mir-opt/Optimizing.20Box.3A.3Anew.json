[
    {
        "content": "<p>Hello everyone! I was thinking about playing around with the compiler over vacation, and, well, it's changed a bit since I last saw it 5 years ago (wow it's been a while).</p>\n<p>I was thinking about trying to optimize box allocations to avoid blowing the stack when boxing a large array or a deeply nested async function. I noticed that <code>box [5; 4096*4096]</code> will do the right thing and initialize the array with the heap pointer, rather than on the stack and doing a copy, but <code>let x = [5; 4096 * 4096]; box x</code> (and <code>Box::new([5; 4096*4096])</code> if we turn on mir-opt-level=2) allocate on the stack and copy: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=6c9df24d2f6279d9a67d2957da16c5c1\">https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=6c9df24d2f6279d9a67d2957da16c5c1</a></p>\n<p>It seems like the <code>dest_prop</code> optimization should be able to handle this, but it explicitly excludes derefs in the destination since it can't prove a generic pointer isn't pointing at arbitrary memory. My idea though is we could relax this for locally created <code>_X = Box(foo)</code> statements, since we should be able to prove that the pointer is valid, at least for the first write (and no one tries to read from the pointer before we write to it). Does this sound like a reasonable assumption, or are there still soundness issues with doing this?</p>\n<p>Second question, since an optimization like this would help us avoid blowing the stack in a number of places, would it be worthwhile doing this as a cheap separate pass  that could always run (if that's even possible), rather than trying to do this in dest_prop?</p>",
        "id": 217925584,
        "sender_full_name": "Erick Tryzelaar",
        "timestamp": 1606330944
    },
    {
        "content": "<p>hmm, this code produces MIR that even intra-basic-block forwards copy propagation would handle:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">run</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">([</span><span class=\"mi\">9</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">]);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"o\">&amp;*</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u64</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{:x?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">bb0</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">StorageLive</span><span class=\"p\">(</span><span class=\"n\">_1</span><span class=\"p\">);</span><span class=\"w\">                 </span><span class=\"c1\">// scope 0 at ./example.rs:2:9: 2:10</span>\n<span class=\"w\">        </span><span class=\"n\">StorageLive</span><span class=\"p\">(</span><span class=\"n\">_2</span><span class=\"p\">);</span><span class=\"w\">                 </span><span class=\"c1\">// scope 0 at ./example.rs:2:22: 2:30</span>\n<span class=\"w\">        </span><span class=\"n\">_2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">9_</span><span class=\"k\">u64</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">];</span><span class=\"w\">         </span><span class=\"c1\">// scope 0 at ./example.rs:2:22: 2:30</span>\n<span class=\"w\">        </span><span class=\"n\">_1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"p\">([</span><span class=\"kt\">u64</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">]);</span><span class=\"w\">            </span><span class=\"c1\">// scope 2 at ./example.rs:2:13: 2:31</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">_1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"n\">_2</span><span class=\"p\">;</span><span class=\"w\">                 </span><span class=\"c1\">// scope 2 at ./example.rs:2:13: 2:31</span>\n<span class=\"w\">        </span><span class=\"n\">StorageDead</span><span class=\"p\">(</span><span class=\"n\">_2</span><span class=\"p\">);</span><span class=\"w\">                 </span><span class=\"c1\">// scope 0 at ./example.rs:2:30: 2:31</span>\n<span class=\"w\">        </span><span class=\"n\">StorageLive</span><span class=\"p\">(</span><span class=\"n\">_3</span><span class=\"p\">);</span><span class=\"w\">                 </span><span class=\"c1\">// scope 1 at ./example.rs:4:5: 4:15</span>\n<span class=\"w\">        </span><span class=\"n\">StorageLive</span><span class=\"p\">(</span><span class=\"n\">_4</span><span class=\"p\">);</span><span class=\"w\">                 </span><span class=\"c1\">// scope 1 at ./example.rs:4:11: 4:14</span>\n<span class=\"w\">        </span><span class=\"n\">_5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">_1</span><span class=\"p\">);</span><span class=\"w\">                     </span><span class=\"c1\">// scope 1 at ./example.rs:4:11: 4:14</span>\n<span class=\"w\">        </span><span class=\"n\">_4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"n\">_5</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u64</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Pointer</span><span class=\"p\">(</span><span class=\"n\">Unsize</span><span class=\"p\">));</span><span class=\"w\"> </span><span class=\"c1\">// scope 1 at ./example.rs:4:11: 4:14</span>\n<span class=\"w\">        </span><span class=\"n\">_3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"n\">_4</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"k\">return</span>: <span class=\"nc\">bb1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">unwind</span>: <span class=\"nc\">bb3</span><span class=\"p\">];</span><span class=\"w\"> </span><span class=\"c1\">// scope 1 at ./example.rs:4:5: 4:15</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 217929675,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606333100
    },
    {
        "content": "<p>maybe try running that with the pass from <a href=\"https://github.com/rust-lang/rust/pull/76723\">https://github.com/rust-lang/rust/pull/76723</a>?</p>",
        "id": 217929754,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606333148
    },
    {
        "content": "<p>hmm, actually, why doesn't this get const-propagated across the <code>_1 = Box</code>?</p>",
        "id": 217929802,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606333198
    },
    {
        "content": "<p>(code I'm testing with is at <a href=\"https://rust.godbolt.org/z/YjKTnn\">https://rust.godbolt.org/z/YjKTnn</a>)</p>",
        "id": 217929870,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606333227
    },
    {
        "content": "<p>I'm on my phone now, so I'll check later, but I think it has to do with the array type. If you do \"let x = 5; box x\" I think that does do const propagation</p>",
        "id": 217937515,
        "sender_full_name": "Erick Tryzelaar",
        "timestamp": 1606337354
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Optimizing.20Box.3A.3Anew/near/217929802\">said</a>:</p>\n<blockquote>\n<p>hmm, actually, why doesn't this get const-propagated across the <code>_1 = Box</code>?</p>\n</blockquote>\n<p>_1 and _2 could be aliases. Do we have alias analysis on MIR yet?</p>",
        "id": 217951292,
        "sender_full_name": "nagisa",
        "timestamp": 1606347217
    },
    {
        "content": "<p>Lack of alias analysis is a long standing limiter for various propagation passes. If we had one, we'd have propagations since… /me checks.</p>",
        "id": 217951360,
        "sender_full_name": "nagisa",
        "timestamp": 1606347262
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/33628\">2016</a>.</p>",
        "id": 217951384,
        "sender_full_name": "nagisa",
        "timestamp": 1606347304
    },
    {
        "content": "<p><code>_1</code> is freshly allocated, it can't alias anything</p>",
        "id": 217951470,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606347369
    },
    {
        "content": "<p>Right, but you don't have a generic way to know that for an arbitrary MIR.</p>",
        "id": 217951622,
        "sender_full_name": "nagisa",
        "timestamp": 1606347525
    },
    {
        "content": "<p>You could hack in an approximation of this into your optimisation, I guess, but it would have to be super conservative.</p>",
        "id": 217951655,
        "sender_full_name": "nagisa",
        "timestamp": 1606347574
    },
    {
        "content": "<p>But even if there's a pointer to <code>_2</code>, the array could still be propagated into the right-hand side of the assignment</p>",
        "id": 217951714,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606347617
    },
    {
        "content": "<p>In this particular case, just checking if <code>_2</code> ever has its address taken would be enough to rule out aliasing</p>",
        "id": 217951733,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606347644
    },
    {
        "content": "<p>I'm not arguing that you could not, in this particular example.</p>",
        "id": 217951739,
        "sender_full_name": "nagisa",
        "timestamp": 1606347650
    },
    {
        "content": "<p>Let me rephrase myself: if you're thinking of adding some sort of a check to propagation to handle this specific case that would match this exact pattern, that's really a peephole optimisation more suited for something like instcombine</p>",
        "id": 217951790,
        "sender_full_name": "nagisa",
        "timestamp": 1606347710
    },
    {
        "content": "<p>pattern match <code>x = const _; y = Box(_); (*y) = x</code> and replace with <code>y = Box(_); (*y) = const _</code></p>",
        "id": 217951878,
        "sender_full_name": "nagisa",
        "timestamp": 1606347787
    },
    {
        "content": "<p>I strongly suspect that in the current propagation passes they are required to be overly pessimistic in cases like these because there's some MIR generated by some code somewhere that caused this exact pattern to miscompile, forcing implementer to just bail out for now.</p>",
        "id": 217951993,
        "sender_full_name": "nagisa",
        "timestamp": 1606347951
    },
    {
        "content": "<p>I'm not suggesting to add such a special case, I was expecting this to be already handled by the pass, given what I've seen it propagate in practice</p>",
        "id": 217952574,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606348537
    },
    {
        "content": "<p>But I didn't know that we're this close to fixing this long-standing issue with <code>Box</code>, that's pretty cool</p>",
        "id": 217952606,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606348563
    },
    {
        "content": "<p>I suppose a pass that would be more generally useful for <code>Box::new</code> would be one that hoists the <code>Box</code> allocation backwards to then enable dest prop to eliminate the copy. This would ignore side-effects and function calls, which allows non-trivial initializers.</p>",
        "id": 217954438,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606350462
    },
    {
        "content": "<p>Hmm, but dest prop doesn't handle pointers at all, so that would have to be smarter too</p>",
        "id": 217954656,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606350702
    },
    {
        "content": "<p>Ooh something like instcombine could work for a short term fix until something more general comes along</p>",
        "id": 217963878,
        "sender_full_name": "Erick Tryzelaar",
        "timestamp": 1606363592
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"212698\">@Félix Fischer</span> ^ const prop with dataflow use case</p>",
        "id": 217974189,
        "sender_full_name": "oli",
        "timestamp": 1606378248
    },
    {
        "content": "<p>Got a little time to think about this again. Do we have any optimizations that target specific functions, like llvm intrinsics? I was thinking about cheating a little bit in order to do something like:</p>\n<ul>\n<li>Annotate <code>Box::new</code> with a lang item, or some other mechanism to identify this function.</li>\n<li>In the HIR-&gt;MIR pass (or someplace more appropriate), identify calls to <code>Box::new($expr)</code> and directly generate <code>box $expr</code> instead of <code>_1 = $expr; Box::new(move $1)</code></li>\n</ul>\n<p>That'd get us an easy win for direct calls to <code>Box::new([0; 1024])</code>, and might allow const prop, or some other pass, to optimize <code>let x = [0; 1024]; Box::new(x)</code>.</p>",
        "id": 221570460,
        "sender_full_name": "Erick Tryzelaar",
        "timestamp": 1609789319
    },
    {
        "content": "<p>A few targeting intrinsics. MIR building special cases <code>move_val_init</code> to evaluate argument directly into destination without introducing a temporary copy (although there is PR opened that removes it), and intrinsics lowering pass.</p>",
        "id": 221571845,
        "sender_full_name": "tm",
        "timestamp": 1609789885
    }
]