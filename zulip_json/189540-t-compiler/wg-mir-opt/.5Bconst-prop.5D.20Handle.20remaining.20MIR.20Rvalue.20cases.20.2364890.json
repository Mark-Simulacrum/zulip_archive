[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> when you have time, I think it may be more productive for us to have a conversation here rather than on various threads in my PR <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 177905607,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1570799669
    },
    {
        "content": "<blockquote>\n<p>The question is, what's the MIR? If in one case the MIR sets an invalid discriminant and in the other case it doesn't, I'd say the interpreter is perfectly consistent. MIR building is not, but we should not paper over that on later phases.</p>\n</blockquote>\n<p>So for both <code>enum Test { A(u8), B(Empty) }</code> and <code>enum Test { A(u8), B(Empty), C }</code>, the MIR in question is the same:</p>\n<div class=\"codehilite\"><pre><span></span>    bb2: {\n        StorageLive(_3);\n        _3 = move ((_1 as Some).0: Empty);\n        StorageLive(_4);\n        StorageLive(_5);\n        _5 = move _3;\n        ((_4 as B).0: Empty) = move _5;\n        discriminant(_4) = 1;\n        StorageDead(_5);\n        StorageDead(_4);\n        StorageDead(_3);\n        goto -&gt; bb3;\n    }\n</pre></div>\n\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=0b9d6673577a02a59b0db160bf9b6fcc\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=0b9d6673577a02a59b0db160bf9b6fcc\">playground link</a></p>",
        "id": 177906196,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1570800175
    },
    {
        "content": "<p>What's different is that if you eval <code>discriminant(_4) = 1;</code> in miri with <code>enum Test { A(u8), B(Empty) }</code> you get an ICE but if you do it with <code>enum Test { A(u8), B(Empty), C }</code> it runs fine.</p>",
        "id": 177907283,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1570801142
    },
    {
        "content": "<p>See <a href=\"https://github.com/rust-lang/rust/pull/64890#issuecomment-541326824\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/64890#issuecomment-541326824\">https://github.com/rust-lang/rust/pull/64890#issuecomment-541326824</a> : the MIR is the same but the layout is fundamentally different</p>",
        "id": 177989538,
        "sender_full_name": "RalfJ",
        "timestamp": 1570888315
    },
    {
        "content": "<p>I really think the right thing to do is turn these two asserts into <code>throw_ub!(InvalidEnumDiscriminant)</code>. which const_prop ignores. then behavior is also consistent for const_prop ;)</p>",
        "id": 177989599,
        "sender_full_name": "RalfJ",
        "timestamp": 1570888397
    },
    {
        "content": "<p>I don't have an issue with that :)</p>",
        "id": 177989606,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1570888422
    },
    {
        "content": "<p>Which two asserts did you mean specifically?</p>",
        "id": 177989625,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1570888437
    },
    {
        "content": "<p>There's only 1 that I can get to trigger</p>",
        "id": 177989669,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1570888445
    },
    {
        "content": "<p>I assume <a href=\"https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src/librustc_mir/interpret/place.rs#L1039\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src/librustc_mir/interpret/place.rs#L1039\">https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src/librustc_mir/interpret/place.rs#L1039</a> is one</p>",
        "id": 177989700,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1570888504
    },
    {
        "content": "<p>I guess you mean <a href=\"https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src/librustc_mir/interpret/place.rs#L1047\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src/librustc_mir/interpret/place.rs#L1047\">https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src/librustc_mir/interpret/place.rs#L1047</a> as well?</p>",
        "id": 177989757,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1570888564
    },
    {
        "content": "<blockquote>\n<p>I guess you mean <a href=\"https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src/librustc_mir/interpret/place.rs#L1047\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src/librustc_mir/interpret/place.rs#L1047\">https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src/librustc_mir/interpret/place.rs#L1047</a> as well?</p>\n</blockquote>\n<p>yes</p>",
        "id": 177989765,
        "sender_full_name": "RalfJ",
        "timestamp": 1570888585
    },
    {
        "content": "<p>the two are morally the same</p>",
        "id": 177989766,
        "sender_full_name": "RalfJ",
        "timestamp": 1570888588
    },
    {
        "content": "<p>and there must be a third somewhere...</p>",
        "id": 177989767,
        "sender_full_name": "RalfJ",
        "timestamp": 1570888593
    },
    {
        "content": "<p>around 1070</p>",
        "id": 177989774,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1570888609
    },
    {
        "content": "<p>here: <a href=\"https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src/librustc_mir/interpret/place.rs#L1071\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src/librustc_mir/interpret/place.rs#L1071\">https://github.com/rust-lang/rust/blob/026447b9b0816bfc92d8072145a7a330ec8e3298/src/librustc_mir/interpret/place.rs#L1071</a></p>",
        "id": 177989776,
        "sender_full_name": "RalfJ",
        "timestamp": 1570888609
    },
    {
        "content": "<p>yeah</p>",
        "id": 177989778,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1570888614
    },
    {
        "content": "<p>basically rust has 3 ways to represent enums in memory</p>",
        "id": 177989782,
        "sender_full_name": "RalfJ",
        "timestamp": 1570888623
    },
    {
        "content": "<p>so both read _discriminant and write_discriminant have these 3 branches</p>",
        "id": 177989789,
        "sender_full_name": "RalfJ",
        "timestamp": 1570888635
    },
    {
        "content": "<p>Gotcha</p>",
        "id": 177989818,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1570888683
    },
    {
        "content": "<p>That seems reasonable to me and then I can back out the change in <code>const_prop</code></p>",
        "id": 177989854,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1570888700
    },
    {
        "content": "<p>The only other thing I wanted to talk with you about was:</p>\n<blockquote>\n<p>Like, this code we are optimizing is UB if it ever gets executed. const-prop does not generally test for UB, but for some reason it has to detect this UB here... or so?</p>\n</blockquote>",
        "id": 177989950,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1570888816
    },
    {
        "content": "<p>I agree with the rest of your feedback and I can improve comments/whatever as needed</p>",
        "id": 177989954,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1570888834
    },
    {
        "content": "<p>For that in particular, <code>const_prop</code> runs eagerly whenever we optimize MIR so it has to handle code that can't run at all</p>",
        "id": 177989980,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1570888876
    },
    {
        "content": "<blockquote>\n<p>For that in particular, <code>const_prop</code> runs eagerly whenever we optimize MIR so it has to handle code that can't run at all</p>\n</blockquote>\n<p>that was my understanding</p>",
        "id": 177989985,
        "sender_full_name": "RalfJ",
        "timestamp": 1570888886
    },
    {
        "content": "<p>I was just not happy with you needing extra checks before calling write_discriminant</p>",
        "id": 177989991,
        "sender_full_name": "RalfJ",
        "timestamp": 1570888908
    },
    {
        "content": "<p>Sure, that's reasonable</p>",
        "id": 177990035,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1570888922
    },
    {
        "content": "<p>I think we have a good solution for that</p>",
        "id": 177990040,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1570888936
    },
    {
        "content": "<p>but really what happened is that the Miri engine was exploiting that some kinds of MIR are never generated by our MIR builder, so in some places it does <code>assert!</code></p>",
        "id": 177990041,
        "sender_full_name": "RalfJ",
        "timestamp": 1570888942
    },
    {
        "content": "<p>where if users <em>could</em> supply their own MIR those would all be ICEs and we'd need to have proper error handling</p>",
        "id": 177990046,
        "sender_full_name": "RalfJ",
        "timestamp": 1570888959
    },
    {
        "content": "<p>const_prop finds some of these places</p>",
        "id": 177990048,
        "sender_full_name": "RalfJ",
        "timestamp": 1570888963
    },
    {
        "content": "<p>yeah, exactly</p>",
        "id": 177990052,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1570888975
    },
    {
        "content": "<p>Ok, I'll make those changes and add comments to the other stuff you pointed out</p>",
        "id": 177990106,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1570889043
    },
    {
        "content": "<p>Probably won't be until tomorrow or so</p>",
        "id": 177990124,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1570889054
    },
    {
        "content": "<p>Do you want me to make sure you get a chance to review before the PR is r+'d?</p>",
        "id": 177990133,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1570889075
    },
    {
        "content": "<p>no it's okay, we can always follow-up if I still find something to complain about ;)</p>",
        "id": 177990163,
        "sender_full_name": "RalfJ",
        "timestamp": 1570889139
    },
    {
        "content": "<p>haha ok :)</p>",
        "id": 177990165,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1570889148
    },
    {
        "content": "<p>Thanks for the feedback!</p>",
        "id": 177990173,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1570889161
    },
    {
        "content": "<p>sure, thanks for taking it into account :)</p>",
        "id": 177990219,
        "sender_full_name": "RalfJ",
        "timestamp": 1570889178
    },
    {
        "content": "<p>ttyl!</p>",
        "id": 177990222,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1570889185
    }
]