[
    {
        "content": "<ul>\n<li>Are <code>StorageDead</code>s needed before a <code>return</code>?  Or does everything (except <code>_0</code>) implicitly die there anyway?</li>\n<li>Are <code>StorageDead</code>s for things that are already dead (or were never live) a correctness problem?  Or are they handled fine, just undesirable as any unnecessary instruction would be?</li>\n</ul>\n<p>(If I should go read a doc somewhere, please point me there -- I didn't see anything about these in <a href=\"https://rustc-dev-guide.rust-lang.org/mir/index.html\">https://rustc-dev-guide.rust-lang.org/mir/index.html</a> )</p>",
        "id": 239910777,
        "sender_full_name": "scottmcm",
        "timestamp": 1621729315
    },
    {
        "content": "<p>Duplicate StorageDead are not a correctness issue</p>",
        "id": 239941266,
        "sender_full_name": "oli",
        "timestamp": 1621766019
    },
    {
        "content": "<p>They may be needed before return for borrowck. But I don't see why. There are also lots of storagedead that are unnecessary because its local is never borrowed. Technically we can remove all such storage markers and just compute the storage liveness on the fly for llvm optimizations</p>",
        "id": 239941381,
        "sender_full_name": "oli",
        "timestamp": 1621766124
    },
    {
        "content": "<p>Thanks, oli!</p>\n<p>One more question: is the <em>order</em> of the <code>StorageDead</code>s important?  For example, does anything rely on a reference dying before the local it references?  Or is a run of them functionally all handled together, so it doesn't really matter?</p>",
        "id": 239978994,
        "sender_full_name": "scottmcm",
        "timestamp": 1621804979
    },
    {
        "content": "<p>Hmm, good point. I think it may matter to borrowck, but not llvm. Unsure. We could test that by adding an order scrambler mir opt before borrowck</p>",
        "id": 239984450,
        "sender_full_name": "oli",
        "timestamp": 1621810989
    }
]