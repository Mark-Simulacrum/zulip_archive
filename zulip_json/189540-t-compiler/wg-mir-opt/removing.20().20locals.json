[
    {
        "content": "<p>Are there any plans which would get rid of all the <code>()</code> locals generated? I see they survive until LLVM IR which isn't great.</p>",
        "id": 190601231,
        "sender_full_name": "Zoxc",
        "timestamp": 1584199218
    },
    {
        "content": "<p>Yes, but it's blocked on <a href=\"https://github.com/rust-lang/rust/issues/67191\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67191\">#67191</a> because otherwise we start not evaluating constants with <code>()</code> value even if the constant would error if evaluated</p>",
        "id": 190601247,
        "sender_full_name": "oli",
        "timestamp": 1584199314
    },
    {
        "content": "<p>We've actually had this optimization but had to roll back out of that reason.</p>",
        "id": 190601285,
        "sender_full_name": "oli",
        "timestamp": 1584199339
    },
    {
        "content": "<p>Can't we just keep such constant assignments?  What optimization was that?</p>",
        "id": 190601829,
        "sender_full_name": "Zoxc",
        "timestamp": 1584200413
    },
    {
        "content": "<p>That's what we do: <a href=\"https://github.com/rust-lang/rust/blob/42ce9b4e9054d63c8f352f994e2d5dae7d04130f/src/librustc_mir/transform/simplify.rs#L375\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/42ce9b4e9054d63c8f352f994e2d5dae7d04130f/src/librustc_mir/transform/simplify.rs#L375\">https://github.com/rust-lang/rust/blob/42ce9b4e9054d63c8f352f994e2d5dae7d04130f/src/librustc_mir/transform/simplify.rs#L375</a></p>",
        "id": 190601924,
        "sender_full_name": "oli",
        "timestamp": 1584200565
    },
    {
        "content": "<p><code>SimplifyLocals</code> doesn't remove all <code>()</code> locals though. Some are assigned by calls and those stick around. Maybe we'd want something that could purge all ZST locals?</p>",
        "id": 190602099,
        "sender_full_name": "Zoxc",
        "timestamp": 1584200889
    },
    {
        "content": "<p>Hmm... we could replace all <code>Rvalue::Ref</code> to <code>()</code> locals by a constant that is essentially <code>ptr::dangling()</code>. But I don't see how we can get rid of function return places. They need to have a return place</p>",
        "id": 190602383,
        "sender_full_name": "oli",
        "timestamp": 1584201444
    },
    {
        "content": "<p>We could just allow functions to return without a return place. So <code>_3 = const print() -&gt; [return: bb2, unwind: bb4]</code> would be just <code>const print() -&gt; [return: bb2, unwind: bb4]</code>. It would make MIR output more readable too =P</p>",
        "id": 190602457,
        "sender_full_name": "Zoxc",
        "timestamp": 1584201572
    },
    {
        "content": "<p>I don't think borrowing <code>()</code> is very common though, we could perhaps keep that. I think every non-returning call making it's own <code>()</code> local is the problematic case.</p>",
        "id": 190602526,
        "sender_full_name": "Zoxc",
        "timestamp": 1584201652
    },
    {
        "content": "<p>Maybe just removing <code>StorageDead/Live</code> for <code>()</code> locals would help with performance</p>",
        "id": 190602658,
        "sender_full_name": "Zoxc",
        "timestamp": 1584201904
    },
    {
        "content": "<p>I wonder if that would interfere with anything <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> wants to rely on <code>Storage{Live,Dead}</code> for</p>",
        "id": 190604138,
        "sender_full_name": "eddyb",
        "timestamp": 1584204372
    },
    {
        "content": "<p>but I generally agree we should strive for less noisy MIR</p>",
        "id": 190604155,
        "sender_full_name": "eddyb",
        "timestamp": 1584204419
    },
    {
        "content": "<p>Miri shouldn't run on optimized MIR at least (if you want to catch UB)</p>",
        "id": 190604499,
        "sender_full_name": "Zoxc",
        "timestamp": 1584204961
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> ^^ impedance mismatch :P</p>",
        "id": 190606863,
        "sender_full_name": "eddyb",
        "timestamp": 1584208723
    },
    {
        "content": "<p>we can always overload the <code>optimized_mir</code> query if we want to (or set the mir opt level low)</p>",
        "id": 190609200,
        "sender_full_name": "oli",
        "timestamp": 1584212758
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Overloading the <code>optimized_mir</code> query is hard, as <code>rustc_mir</code> doesn't export any mir passes. Some mir passes are mandatory though, like the generator transform and borrowck.</p>",
        "id": 190609420,
        "sender_full_name": "bjorn3",
        "timestamp": 1584213021
    },
    {
        "content": "<p>true, but at mir-opt-level=0 we should only be doing strictly necessary things</p>",
        "id": 190609439,
        "sender_full_name": "oli",
        "timestamp": 1584213069
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/removing.20().20locals/near/190604138\" title=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/removing.20().20locals/near/190604138\">said</a>:</p>\n<blockquote>\n<p>I wonder if that would interfere with anything <span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> wants to rely on <code>Storage{Live,Dead}</code> for</p>\n</blockquote>\n<p>I am not relying on <code>StorageLive/Dead</code> for anything, really. We are just <em>interpreting</em> them in Miri, giving them concrete meaning, and I am trying to align dataflow analyses assumptions with the meaning they are given there.</p>",
        "id": 190640655,
        "sender_full_name": "RalfJ",
        "timestamp": 1584267818
    },
    {
        "content": "<p>I assume with <code>mir-opt-level=0</code>, none of these optimizations happen? That would be good for Miri's ability to still check that the initially created MIR makes sense.</p>",
        "id": 190640703,
        "sender_full_name": "RalfJ",
        "timestamp": 1584267877
    },
    {
        "content": "<p>Yes, that definitely should be the case.</p>",
        "id": 190732741,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1584370353
    }
]