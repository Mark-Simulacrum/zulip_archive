[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> have you investigated this at all?</p>",
        "id": 177251912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570114251
    },
    {
        "content": "<p>I could try to put in some effort to help, prob tomorrow</p>",
        "id": 177251927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570114262
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>, I have a few hours this morning to look at it. Investigating now...</p>",
        "id": 177256792,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1570117118
    },
    {
        "content": "<p>Can you have polymorphic promoted MIR? I thought it had to be monomorphic?</p>",
        "id": 177260917,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1570119800
    },
    {
        "content": "<p>I guess that's allowed since it's doing the same thing on <code>stable</code>/<code>beta</code>. The call to <code>std::mem::size_of::&lt;T::Native&gt;()</code> gets promoted to</p>\n<div class=\"codehilite\"><pre><span></span>promoted[2] in  new: usize = {\n    let mut _0: usize;                   // return place in scope 0 at &lt;::core::macros::assert_eq macros&gt;:3:23: 3:32\n    let mut _1: usize;                   // in scope 0 at src/main.rs:6:19: 6:51\n    scope 1 {\n        scope 2 {\n        }\n    }\n\n    bb0: {\n        _1 = const std::mem::size_of::&lt;&lt;T as ArrowPrimitiveType&gt;::Native&gt;() -&gt; bb1; // bb0[0]: scope 0 at src/main.rs:6:19: 6:51\n                                         // ty::Const\n                                         // + ty: fn() -&gt; usize {std::mem::size_of::&lt;&lt;T as ArrowPrimitiveType&gt;::Native&gt;}\n                                         // + val: Scalar(&lt;ZST&gt;)\n                                         // mir::Constant\n                                         // + span: src/main.rs:6:19: 6:49\n                                         // + user_ty: UserType(0)\n                                         // + literal: Const { ty: fn() -&gt; usize {std::mem::size_of::&lt;&lt;T as ArrowPrimitiveType&gt;::Native&gt;}, val: Scalar(&lt;ZST&gt;) }\n    }\n\n    bb1: {\n        _0 = move _1;                    // bb1[0]: scope 0 at &lt;::core::macros::assert_eq macros&gt;:3:23: 3:32\n        return;                          // bb1[1]: scope 0 at &lt;::core::macros::assert_eq macros&gt;:3:23: 3:32\n    }\n}\n</pre></div>",
        "id": 177261816,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1570120390
    },
    {
        "content": "<p>Made some progress. I don't have a solution yet but here's a few things that jump out to me:</p>\n<p>- <a href=\"https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src/librustc_mir/interpret/terminator.rs#L274\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src/librustc_mir/interpret/terminator.rs#L274\">This</a> is the line that's failing because we can't normalize the type. That's not actually needed at this point because we just want to get at <code>Ty.kind</code> which doesn't need to be normalized. Changing this to just call <code>self.tcx.type_of(instance.def_id())</code> gets us slightly further along.</p>\n<p>- The next thing that fails is <a href=\"https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src/librustc_mir/interpret/terminator.rs#L258\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src/librustc_mir/interpret/terminator.rs#L258\">this</a> where we actually try to call the intrinsic. What's interesting is that <code>M</code> is not <code>ConstPropMachine</code> which bails out of running intrinsics but a <code>CompileTimeInterpreter</code> which will try to eval intrinsics. I believe this is happening because <code>InterpCx::eval_static_to_mplace()</code> calls <code>self.tcx.const_eval_raw()</code> regardless of what the <code>M: Machine</code> is on our context. That seems fishy to me.</p>",
        "id": 177264837,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1570122344
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^^</p>",
        "id": 177264855,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1570122352
    },
    {
        "content": "<p>We may be able to fix this by <code>throw_inval!(TooGeneric)</code> at the right place</p>",
        "id": 177264964,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1570122407
    },
    {
        "content": "<p>Where ever that is... <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 177264972,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1570122411
    },
    {
        "content": "<p>I have a fix assuming <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> approves :) <br>\n<a href=\"https://github.com/rust-lang/rust/pull/65066\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/65066\">https://github.com/rust-lang/rust/pull/65066</a></p>",
        "id": 177268780,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1570124900
    }
]