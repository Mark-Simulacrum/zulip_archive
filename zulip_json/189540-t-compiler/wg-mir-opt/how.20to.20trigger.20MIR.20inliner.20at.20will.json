[
    {
        "content": "<p>I'm trying to fix <a href=\"https://github.com/rust-lang/rust/issues/67586\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67586\">https://github.com/rust-lang/rust/issues/67586</a> and step 0 is to make a self-contained reproduction, presumably relying on MIR inlining</p>",
        "id": 187268836,
        "sender_full_name": "eddyb",
        "timestamp": 1580741707
    },
    {
        "content": "<p>but this doesn't do it <a href=\"https://godbolt.org/z/fgS-hj\" target=\"_blank\" title=\"https://godbolt.org/z/fgS-hj\">https://godbolt.org/z/fgS-hj</a></p>",
        "id": 187268863,
        "sender_full_name": "eddyb",
        "timestamp": 1580741726
    },
    {
        "content": "<p>ftr, it's this snippet, using <code>-Zmir-opt-level=2 --emit=mir -Cdebuginfo=2</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[inline(always)]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">y</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 187268957,
        "sender_full_name": "eddyb",
        "timestamp": 1580741767
    },
    {
        "content": "<p>this works for me locally</p>",
        "id": 187268973,
        "sender_full_name": "oli",
        "timestamp": 1580741780
    },
    {
        "content": "<p>even with <code>--emit=mir</code>?</p>",
        "id": 187268983,
        "sender_full_name": "eddyb",
        "timestamp": 1580741792
    },
    {
        "content": "<p>haven't tested</p>",
        "id": 187268994,
        "sender_full_name": "oli",
        "timestamp": 1580741803
    },
    {
        "content": "<p>but with <code>-Zdump-mir=all</code> it is</p>\n<div class=\"codehilite\"><pre><span></span>// MIR for `foo`\n// source = MirSource { instance: Item(DefId(0:3 ~ foo[8787]::foo[0])), promoted: None }\n// pass_name = Inline\n// disambiguator = before\n\nfn  foo(_1: usize) -&gt; usize {\n    debug x =&gt; _1;                       // in scope 0 at foo.rs:2:8: 2:9\n    let mut _0: usize;                   // return place in scope 0 at foo.rs:2:21: 2:26\n\n    bb0: {\n        _0 = _1;                         // bb0[0]: scope 0 at foo.rs:3:5: 3:6\n        return;                          // bb0[1]: scope 0 at foo.rs:4:2: 4:2\n    }\n}\n</pre></div>",
        "id": 187269006,
        "sender_full_name": "oli",
        "timestamp": 1580741818
    },
    {
        "content": "<p>hmm this is before inlining !?</p>",
        "id": 187269025,
        "sender_full_name": "oli",
        "timestamp": 1580741832
    },
    {
        "content": "<p><code>bar</code> is the one that <code>foo</code> should get inlined into, you can ignore <code>foo</code></p>",
        "id": 187269044,
        "sender_full_name": "eddyb",
        "timestamp": 1580741853
    },
    {
        "content": "<p>rofl</p>",
        "id": 187269053,
        "sender_full_name": "oli",
        "timestamp": 1580741862
    },
    {
        "content": "<p>ups</p>",
        "id": 187269055,
        "sender_full_name": "oli",
        "timestamp": 1580741863
    },
    {
        "content": "<p>ok, doesn't work either</p>",
        "id": 187269064,
        "sender_full_name": "oli",
        "timestamp": 1580741868
    },
    {
        "content": "<p>I'm guessing the weight algorithm is broken for inline-always</p>",
        "id": 187269152,
        "sender_full_name": "oli",
        "timestamp": 1580741905
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125799\">@andjo403</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> do you know anything weird about that the inliner that could cause this?</p>",
        "id": 187269153,
        "sender_full_name": "eddyb",
        "timestamp": 1580741905
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I mean, it doesn't work without it or with just <code>#[inline]</code> either</p>",
        "id": 187269182,
        "sender_full_name": "eddyb",
        "timestamp": 1580741933
    },
    {
        "content": "<p>I should go and read an inline mir-opt test, lol</p>",
        "id": 187269206,
        "sender_full_name": "eddyb",
        "timestamp": 1580741956
    },
    {
        "content": "<p>you have to be kidding me... it's sensitive to the declaration order?!</p>",
        "id": 187269537,
        "sender_full_name": "eddyb",
        "timestamp": 1580742173
    },
    {
        "content": "<p>this works <a href=\"https://godbolt.org/z/XerSJ8\" target=\"_blank\" title=\"https://godbolt.org/z/XerSJ8\">https://godbolt.org/z/XerSJ8</a></p>",
        "id": 187269664,
        "sender_full_name": "eddyb",
        "timestamp": 1580742269
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/c58e09f138075ce6b3079f41f9c2f192a15b896c/src/librustc_mir/transform/inline.rs#L112\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/c58e09f138075ce6b3079f41f9c2f192a15b896c/src/librustc_mir/transform/inline.rs#L112\">https://github.com/rust-lang/rust/blob/c58e09f138075ce6b3079f41f9c2f192a15b896c/src/librustc_mir/transform/inline.rs#L112</a></p>",
        "id": 187269789,
        "sender_full_name": "oli",
        "timestamp": 1580742341
    },
    {
        "content": "<p>this is so terrible Q_Q</p>",
        "id": 187269869,
        "sender_full_name": "eddyb",
        "timestamp": 1580742382
    },
    {
        "content": "<p>I should've just done this from the start: <a href=\"https://godbolt.org/z/6JP9oR\" target=\"_blank\" title=\"https://godbolt.org/z/6JP9oR\">https://godbolt.org/z/6JP9oR</a></p>",
        "id": 187269976,
        "sender_full_name": "eddyb",
        "timestamp": 1580742455
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> how is that not a big issue perma-open until we find a real solution?</p>",
        "id": 187270041,
        "sender_full_name": "eddyb",
        "timestamp": 1580742483
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"n\">debug</span><span class=\"w\"> </span><span class=\"n\">foo_arg</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">_1</span><span class=\"p\">;</span><span class=\"w\">                 </span><span class=\"c1\">// in scope 0 at ./example.rs:1:12: 1:19</span>\n<span class=\"w\">    </span><span class=\"n\">scope</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">debug</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">_1</span><span class=\"p\">;</span><span class=\"w\">                   </span><span class=\"c1\">// in scope 1 at /rustc/9ed29b6ff6aa2e048b09c27af8f62ee3040bdb37/src/libcore/convert/mod.rs:106:26: 106:27</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 187270132,
        "sender_full_name": "eddyb",
        "timestamp": 1580742559
    },
    {
        "content": "<p>this is what I was after, it does trigger a LLVM assertion, and it should be trivial to fix</p>",
        "id": 187270160,
        "sender_full_name": "eddyb",
        "timestamp": 1580742584
    },
    {
        "content": "<p>can I see what <code>rustc</code> invocations <code>compiletest</code> does?!</p>",
        "id": 187276324,
        "sender_full_name": "eddyb",
        "timestamp": 1580746314
    },
    {
        "content": "<p>Maybe <code>./x.py test -vvv</code> works?</p>",
        "id": 187276614,
        "sender_full_name": "bjorn3",
        "timestamp": 1580746484
    },
    {
        "content": "<p>If the test fails, I'm pretty sure the test runner prints out the rustc arguments used</p>",
        "id": 187276650,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1580746502
    },
    {
        "content": "<p>the problem is it doesn't fail :(</p>",
        "id": 187277438,
        "sender_full_name": "eddyb",
        "timestamp": 1580746936
    },
    {
        "content": "<p>but thanks, I can add a syntax error</p>",
        "id": 187277445,
        "sender_full_name": "eddyb",
        "timestamp": 1580746940
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> nope, that just spams more in rustbuild, nothing extra from <code>compiletest</code> compared to <code>-vv</code></p>",
        "id": 187277858,
        "sender_full_name": "eddyb",
        "timestamp": 1580747175
    },
    {
        "content": "<p>ugh in a bin crate I can't force a function to be codegen'd without calling it from <code>main</code>, I really don't like the fragility there :/</p>",
        "id": 187279321,
        "sender_full_name": "eddyb",
        "timestamp": 1580748018
    },
    {
        "content": "<p>I'm not sure the context of what you're trying to do but I believe you can use <code>--emit mir</code> to force it</p>",
        "id": 187279359,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1580748056
    },
    {
        "content": "<p>But that might not work for what you're doing</p>",
        "id": 187279376,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1580748075
    },
    {
        "content": "<p>I need 1. MIR inlining 2. -C debuginfo=2 and 3. codegen to trigger this</p>",
        "id": 187279386,
        "sender_full_name": "eddyb",
        "timestamp": 1580748086
    },
    {
        "content": "<p>Ah, yeah that won't work then</p>",
        "id": 187279409,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1580748107
    },
    {
        "content": "<p>(it's a LLVM verification failure bug)</p>",
        "id": 187279410,
        "sender_full_name": "eddyb",
        "timestamp": 1580748107
    },
    {
        "content": "<p>btw this is the fix I was trying to test <a href=\"https://github.com/rust-lang/rust/pull/68802\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/68802\">https://github.com/rust-lang/rust/pull/68802</a></p>",
        "id": 187286694,
        "sender_full_name": "eddyb",
        "timestamp": 1580752684
    }
]