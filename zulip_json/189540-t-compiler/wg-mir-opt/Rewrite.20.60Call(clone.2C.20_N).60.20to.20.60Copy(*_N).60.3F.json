[
    {
        "content": "<p>An idea inspired by <a href=\"https://github.com/rust-lang/rust/issues/76552\">#76552</a>: <a href=\"https://rust-lang.github.io/rfcs/1521-copy-clone-semantics.html\">https://rust-lang.github.io/rfcs/1521-copy-clone-semantics.html</a> says that it's fine to bitcopy instead of <code>Clone::clone</code> for <code>T: Copy</code>.  Could we just do that as a mir-opt?  It feels plausible that we could do it faster than LLVM can do it via inlining, and would save our eventual inlining pass from needing to do it.  (And, for deeper <code>derive(Clone)</code>s, saves needing to figure out that it's a field-by-field copy before combining the <code>memcpy</code>.)  It's also that many fewer BBs (after simplifycfg) and unwind edges.</p>\n<p>I guess it would work best post-monomorphization, where IIRC we don't run anything, but if nothing else it ought to help out <code>derive(Clone)</code> on anything with a <code>Copy</code> field, which seems pretty common -- <code>usize</code>, every <code>&amp;_</code>, ...</p>\n<p>Demonstration that even for <code>usize</code> fields we currently have <code>clone</code> calls in the optimized MIR: <a href=\"https://rust.godbolt.org/z/be4Eqn\">https://rust.godbolt.org/z/be4Eqn</a></p>\n<p>cc <span class=\"user-mention\" data-user-id=\"324038\">@ridiculous_fish</span></p>",
        "id": 209852212,
        "sender_full_name": "scottmcm",
        "timestamp": 1599873317
    },
    {
        "content": "<p>Ideally we'd do this for T: CouldBeCopy with derived clones I think, though that does go a bit beyond the RFC, otherwise it doesn't apply to Range etc</p>",
        "id": 209853665,
        "sender_full_name": "simulacrum",
        "timestamp": 1599875936
    },
    {
        "content": "<p>Yeah, what I proposed there wouldn't actually solve the mentioned issue, it just inspired it.  Just wanted to drop the idea here before implementing in case the response was \"no, that's disallowed because _________\" or \"that'll be covered by _______ that's already being worked on\".</p>\n<p>(But as you imply, I guess we could add <code>marker::StructuralClone</code> and check on that instead...)</p>",
        "id": 209863901,
        "sender_full_name": "scottmcm",
        "timestamp": 1599884910
    },
    {
        "content": "<p>We'd need it to have more auto-trait behavior I think. I've long been tempted to remove the code generation from the built-in derives and instead call an intrinsic - there's a lot of similar things to this afaik. For example you could partialeq via memcmp instead of recursively calling it on every field</p>",
        "id": 209877723,
        "sender_full_name": "simulacrum",
        "timestamp": 1599910989
    },
    {
        "content": "<p>That is, directly generate MIR for them</p>",
        "id": 209877732,
        "sender_full_name": "simulacrum",
        "timestamp": 1599911014
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Rewrite.20.60Call(clone.2C.20_N).60.20to.20.60Copy(*_N).60.3F/near/209877723\">said</a>:</p>\n<blockquote>\n<p>We'd need it to have more auto-trait behavior I think. I've long been tempted to remove the code generation from the built-in derives and instead call an intrinsic - there's a lot of similar things to this afaik. For example you could partialeq via memcmp instead of recursively calling it on every field</p>\n</blockquote>\n<p>I haven't rechecked in the past year, but in my SAT solver I had to transmute <code>Option&lt;bool&gt;</code> into <code>u8</code> for equality comparison because it would generate (rather unpredictable) branches for every == in the inner loop otherwise.</p>",
        "id": 209877864,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599911235
    },
    {
        "content": "<p>Yep, this is definitely one case where this transform absolutely makes sense but is impossible for a derive macro to detect. I sort of doubt we can have a peephole opt for it too</p>",
        "id": 209878086,
        "sender_full_name": "simulacrum",
        "timestamp": 1599911590
    },
    {
        "content": "<p>Agreed -- we've seen from the attempts at making result match-and-rebuild a no-op that it's awkward doing these things across blocks.</p>",
        "id": 209896796,
        "sender_full_name": "scottmcm",
        "timestamp": 1599939810
    }
]