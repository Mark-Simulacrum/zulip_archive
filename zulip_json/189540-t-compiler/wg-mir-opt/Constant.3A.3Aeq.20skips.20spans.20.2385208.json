[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 238504162,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620836983
    },
    {
        "content": "<p>maybe is better to discuss this here</p>",
        "id": 238504180,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620836992
    },
    {
        "content": "<p>I've just commented on the issue but yeah, it seems to me that this will cause incr. comp. issues</p>",
        "id": 238504289,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620837020
    },
    {
        "content": "<p>unsure if <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>'s idea of avoiding <code>PartialEq</code> impl would or wouldn't have incr. comp. issues</p>",
        "id": 238504363,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620837047
    },
    {
        "content": "<p>Getting rid of the <code>PartialEq</code> impls would fix the violation of the <code>HashStable</code> contract, but you'd still have the incr comp invalidation impl</p>",
        "id": 238506077,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620837730
    },
    {
        "content": "<p>One idea would be to add a <code>compare_for_optimization</code> method, remove the <code>PartialEq</code> impl, and keep hashing the span</p>",
        "id": 238506281,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620837840
    },
    {
        "content": "<p>I think that would also make it easier to understand the optimization passes that need to compare constants</p>",
        "id": 238506376,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620837874
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Constant.3A.3Aeq.20skips.20spans.20.2385208/near/238506281\">said</a>:</p>\n<blockquote>\n<p>One idea would be to add a <code>compare_for_optimization</code> method, remove the <code>PartialEq</code> impl, and keep hashing the span</p>\n</blockquote>\n<p>by remove you meant, leave the derive version of it I guess</p>",
        "id": 238510142,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620839450
    },
    {
        "content": "<p>I meant, you're suggesting to add a <code>compare_for_optimization</code> that does equality without spans and use that on the places that we need to optimize</p>",
        "id": 238510225,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620839493
    },
    {
        "content": "<p>right?</p>",
        "id": 238510231,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620839496
    },
    {
        "content": "<p>I wonder if we can remove the span entirely without a loss in diagnostics. The custom compare function doesn't help with accidental compares or comparing Operands</p>",
        "id": 238514324,
        "sender_full_name": "oli",
        "timestamp": 1620841136
    },
    {
        "content": "<p>We could add a Location -&gt; span map to Body and fill it in at the beginning.but then optimizations would have to adjust that map, which is no better</p>",
        "id": 238514751,
        "sender_full_name": "oli",
        "timestamp": 1620841308
    },
    {
        "content": "<p>Just removing the span would stop us from being able to point exactly at the use site</p>",
        "id": 238514957,
        "sender_full_name": "oli",
        "timestamp": 1620841386
    },
    {
        "content": "<p>Maybe we should pull the spans into the use sites of the operand? That would be redundant with move/copy operands which have a local whose span we can look up</p>",
        "id": 238515253,
        "sender_full_name": "oli",
        "timestamp": 1620841490
    },
    {
        "content": "<p>Though, since these can have projections, the span isn't really pointing to the place, but to the place's base</p>",
        "id": 238515587,
        "sender_full_name": "oli",
        "timestamp": 1620841615
    },
    {
        "content": "<p>So maybe having a span per operand would even improve diagnostics?</p>",
        "id": 238515688,
        "sender_full_name": "oli",
        "timestamp": 1620841654
    },
    {
        "content": "<p>just force pushed what I currently have, it's very WIP</p>",
        "id": 238657268,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620928958
    },
    {
        "content": "<p>it compiles and I did a quick review, left some comments with things that I quickly saw</p>",
        "id": 238657296,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620928975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> if you can take a look and check if this is more or less what you were imagining, would be great</p>",
        "id": 238657396,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620929005
    }
]