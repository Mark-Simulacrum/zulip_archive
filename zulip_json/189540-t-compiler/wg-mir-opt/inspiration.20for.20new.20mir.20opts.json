[
    {
        "content": "<p>If someone wants inspiration for something we should optimize in MIR (that LLVM already optimizes right now), have a look at <a href=\"https://github.com/rust-lang/rust/blob/a0c585713174711b00f56c0f2ffe480ab878e8dc/src/test/mir-opt/issues/issue_59352.num_to_digit.PreCodegen.after.mir\">https://github.com/rust-lang/rust/blob/a0c585713174711b00f56c0f2ffe480ab878e8dc/src/test/mir-opt/issues/issue_59352.num_to_digit.PreCodegen.after.mir</a></p>",
        "id": 222899097,
        "sender_full_name": "oli",
        "timestamp": 1610734016
    },
    {
        "content": "<p>that test has several different things that we need to optimize</p>",
        "id": 222899127,
        "sender_full_name": "oli",
        "timestamp": 1610734027
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>        _10 = discriminant((*_6));       // scope 2 at $DIR/issue-59352.rs:14:8: 14:23\n        _2 = Eq(_10, const 1_isize);     // scope 2 at $DIR/issue-59352.rs:14:8: 14:23\n        switchInt(move _2) -&gt; [false: bb2, otherwise: bb1]; // scope 0 at $DIR/issue-59352.rs:14:5: 14:63\n</code></pre></div>\n<p>I thought we already had something for this, so maybe we just need to turn up the optimization level on that test</p>",
        "id": 222899281,
        "sender_full_name": "oli",
        "timestamp": 1610734086
    },
    {
        "content": "<p>calling a const fn twice with the same arguments should definitely only call it once (<code>to_digits</code> calls)</p>",
        "id": 222899451,
        "sender_full_name": "oli",
        "timestamp": 1610734148
    },
    {
        "content": "<p>variable <code>_5</code> isn't optimized out</p>",
        "id": 222899529,
        "sender_full_name": "oli",
        "timestamp": 1610734177
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/inspiration.20for.20new.20mir.20opts/near/222899451\">said</a>:</p>\n<blockquote>\n<p>calling a const fn twice with the same arguments should definitely only call it once (<code>to_digits</code> calls)</p>\n</blockquote>\n<p>What about <code>const_allocate</code>?</p>",
        "id": 222900773,
        "sender_full_name": "bjorn3",
        "timestamp": 1610734666
    },
    {
        "content": "<p>uuuh <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 222901039,
        "sender_full_name": "oli",
        "timestamp": 1610734787
    },
    {
        "content": "<p>this is gonna be curious... LLVM manages this optimization, so... we'll need to see how/whether we can do it, too</p>",
        "id": 222901169,
        "sender_full_name": "oli",
        "timestamp": 1610734832
    },
    {
        "content": "<p>I mean... in contrast to user visible changes, optimizations are allowed to look at function bodies</p>",
        "id": 222901221,
        "sender_full_name": "oli",
        "timestamp": 1610734854
    },
    {
        "content": "<p>since all that can happen is that we have perf regressions if we stop looking at the function bodies, instead of breaking compiling code</p>",
        "id": 222901274,
        "sender_full_name": "oli",
        "timestamp": 1610734882
    },
    {
        "content": "<p>Hmm, <code>_5</code> local removal should be handled by <code>ConstDebugInfo</code> already. Oh, it was disabled :(.</p>",
        "id": 222901634,
        "sender_full_name": "tm",
        "timestamp": 1610735031
    },
    {
        "content": "<p>Yeah, I have no idea what's going on with the Windows failures for <code>ConstDebugInfo</code></p>",
        "id": 222901754,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1610735068
    },
    {
        "content": "<p>What about a) removing locals used only by var debug info at debuginfo != 2? Alternatively, b) removing var debug info altogether at debuginfo != 2.</p>",
        "id": 222902871,
        "sender_full_name": "tm",
        "timestamp": 1610735465
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"352985\">tm</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/inspiration.20for.20new.20mir.20opts/near/222902871\">said</a>:</p>\n<blockquote>\n<p>What about a) removing locals used only by var debug info at debuginfo != 2? Alternatively, b) removing var debug info altogether at debuginfo != 2.</p>\n</blockquote>\n<p>Gcc has the nice property that changing the debuginfo level doesn't affect codegen at all. This makes it easy to recompile with debuginfo when a build without crashes due to UB. Removing var debuginfo when it isn't used, can affect codegen.</p>",
        "id": 222905574,
        "sender_full_name": "bjorn3",
        "timestamp": 1610736496
    }
]