[
    {
        "content": "<p>I haven't checked in detail, but reviewing <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> 's PR <a href=\"https://github.com/rust-lang/rust/pull/61554/commits/e786f631b815d171051279e0d6cfe055c75bec2e\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61554/commits/e786f631b815d171051279e0d6cfe055c75bec2e\">https://github.com/rust-lang/rust/pull/61554/commits/e786f631b815d171051279e0d6cfe055c75bec2e</a> made me realize that we are collecting all <code>promoted</code>s of a <code>mir::Body</code>, even if they are completely unused (e.g. due to const prop optimizing <code>*&amp;1</code> to <code>1</code>). I'm not sure how to test this, I think I've seen some sort of tests that check for items ending up in the final binary and we may already have promoted tests there. So we should make such a test with mir optimizations enabled, see whether dead promoteds end up in there and then fix it</p>",
        "id": 167456386,
        "sender_full_name": "oli",
        "timestamp": 1559803328
    },
    {
        "content": "<p>Most likely the fix is to implement <code>PlaceBase::Static(box Static{ kind:StaticKind::Promoted...</code> where we currently have <code>StaticKind::Static</code> in <code>collector.rs</code></p>",
        "id": 167456400,
        "sender_full_name": "oli",
        "timestamp": 1559803376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214307\">@Saleem Jaffer</span> this could be an immediate gain, because llvm would need to do less work</p>",
        "id": 171523311,
        "sender_full_name": "oli",
        "timestamp": 1563891955
    },
    {
        "content": "<p>I'll pick this up.</p>",
        "id": 171528422,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1563895261
    },
    {
        "content": "<p><a href=\"https://github.com/saleemjaffer/rust/blob/745c76d657ebbe29265100e5381f8bf326c54567/src/librustc_mir/monomorphize/collector.rs#L664\" target=\"_blank\" title=\"https://github.com/saleemjaffer/rust/blob/745c76d657ebbe29265100e5381f8bf326c54567/src/librustc_mir/monomorphize/collector.rs#L664\">https://github.com/saleemjaffer/rust/blob/745c76d657ebbe29265100e5381f8bf326c54567/src/librustc_mir/monomorphize/collector.rs#L664</a> is the only place in <code>collector.rs</code> where <code>StaticKind::Static</code> exists. How do I proceed with this?</p>",
        "id": 171937391,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1564399664
    },
    {
        "content": "<p>Also <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> could you explain this a bit</p>\n<blockquote>\n<p>made me realize that we are collecting all promoteds of a mir::Body, even if they are completely unused (e.g. due to const prop optimizing *&amp;1 to 1)</p>\n</blockquote>\n<p>If you can explain/guide me to some links about const prop that would be helpful.</p>",
        "id": 171937467,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1564399721
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214307\">@Saleem Jaffer</span> const prop is here <a href=\"https://github.com/rust-lang/rust/blob/8b94e9e9188b65df38a5f1ae723617dc2dfb3155/src/librustc_mir/transform/const_prop.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/8b94e9e9188b65df38a5f1ae723617dc2dfb3155/src/librustc_mir/transform/const_prop.rs\">https://github.com/rust-lang/rust/blob/8b94e9e9188b65df38a5f1ae723617dc2dfb3155/src/librustc_mir/transform/const_prop.rs</a></p>",
        "id": 171942271,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1564404582
    },
    {
        "content": "<p>I believe what <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  is saying is that if you have something like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Const promotion will do this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_promoted</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_promoted</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>but then const prop will notice that you're adding constants and do that for you creating another promoted:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_promoted</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_promoted</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_promoted</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">];</span><span class=\"w\"> </span><span class=\"c1\">//3</span>\n</pre></div>\n\n\n<p>but now we're not really using <code>_promoted[0]</code> or <code>_promoted[1]</code> anymore</p>",
        "id": 171942478,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1564404728
    },
    {
        "content": "<p>So we don't really need to spend the time &amp; cpu cycles to collect them</p>",
        "id": 171942485,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1564404739
    },
    {
        "content": "<p>(Technically this is a bad example because assigning the value to a variable is considered a use, but I think you get the general idea)</p>",
        "id": 171942504,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1564404764
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> So does this mean that there would be no <code>promoted[0]</code> and <code>promoted[1]</code>, but a single promoted for the result of <code>1 + 2</code>, i.e. <code>3</code> wrt the example you mentioned?</p>",
        "id": 171945827,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1564407453
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214307\">@Saleem Jaffer</span> Yeah</p>",
        "id": 171948455,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1564409347
    },
    {
        "content": "<p>Currently though, we don't do anything to avoid collecting unused promoteds so for values that are no longer needed after optimization, we still collect them.</p>",
        "id": 171948569,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1564409409
    },
    {
        "content": "<p>At least, that's my understanding</p>",
        "id": 171948578,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1564409417
    },
    {
        "content": "<p>Thanks for explaining :)</p>",
        "id": 171954093,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1564413045
    },
    {
        "content": "<p>It's even simpler than that. <code>*&amp;1</code> will create a promoted for the <code>1</code>, const prop turns the entire expression into a constant <code>1</code> and we still collect the promoted</p>",
        "id": 171964318,
        "sender_full_name": "oli",
        "timestamp": 1564420014
    },
    {
        "content": "<p>Variables are a bit messy, as <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> noted</p>",
        "id": 171964348,
        "sender_full_name": "oli",
        "timestamp": 1564420046
    },
    {
        "content": "<p>So as a repro, having a library with just <code>pub fn foo() -&gt; i32 { *&amp;1 }</code> should not cause any promoted to be collected, but right now it does</p>",
        "id": 171964473,
        "sender_full_name": "oli",
        "timestamp": 1564420150
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  By “collection” do you mean use the promoted for the LLVM representation?</p>",
        "id": 171964794,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1564420432
    },
    {
        "content": "<p>And also, I checked in <a href=\"http://collector.rs\" target=\"_blank\" title=\"http://collector.rs\">collector.rs</a>. There is only usage site. So how do I proceed with the issue?</p>",
        "id": 171964870,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1564420482
    },
    {
        "content": "<p>Also, in the small example that you mentioned, will there be 2 collections? One for the promoted and the other for the constant?</p>",
        "id": 171966404,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1564421628
    },
    {
        "content": "<p>Yes, the constant one is fine</p>",
        "id": 171978496,
        "sender_full_name": "oli",
        "timestamp": 1564430479
    },
    {
        "content": "<p><a href=\"http://Collector.rs\" target=\"_blank\" title=\"http://Collector.rs\">Collector.rs</a> accesses the promoted vector</p>",
        "id": 171978518,
        "sender_full_name": "oli",
        "timestamp": 1564430506
    },
    {
        "content": "<p>That use site should be removed</p>",
        "id": 171978579,
        "sender_full_name": "oli",
        "timestamp": 1564430528
    },
    {
        "content": "<p>And a new one added in visit static</p>",
        "id": 171978594,
        "sender_full_name": "oli",
        "timestamp": 1564430545
    },
    {
        "content": "<p>Or visit place? I don't remember</p>",
        "id": 171978644,
        "sender_full_name": "oli",
        "timestamp": 1564430605
    },
    {
        "content": "<p>Wherever we match on StaticKind</p>",
        "id": 171978662,
        "sender_full_name": "oli",
        "timestamp": 1564430624
    },
    {
        "content": "<p>Do an exhaustive match</p>",
        "id": 171978677,
        "sender_full_name": "oli",
        "timestamp": 1564430640
    },
    {
        "content": "<p>This is the code in <a href=\"http://collector.rs\" target=\"_blank\" title=\"http://collector.rs\">collector.rs</a></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">visit_place_base</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">place_base</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mir</span>::<span class=\"n\">PlaceBase</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">_context</span>: <span class=\"nc\">mir</span>::<span class=\"n\">visit</span>::<span class=\"n\">PlaceContext</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">location</span>: <span class=\"nc\">Location</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">place_base</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">PlaceBase</span>::<span class=\"n\">Static</span><span class=\"p\">(</span><span class=\"k\">box</span><span class=\"w\"> </span><span class=\"n\">Static</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">kind</span>: <span class=\"nc\">StaticKind</span>::<span class=\"n\">Static</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;visiting static {:?} @ {:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">location</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">mono</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">def_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">should_monomorphize_locally</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">instance</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">MonoItem</span>::<span class=\"n\">Static</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">def_id</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">PlaceBase</span>::<span class=\"n\">Static</span><span class=\"p\">(</span><span class=\"k\">box</span><span class=\"w\"> </span><span class=\"n\">Static</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">kind</span>: <span class=\"nc\">StaticKind</span>::<span class=\"n\">Promoted</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// FIXME: should we handle promoteds here instead of eagerly in collect_neighbours?</span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">PlaceBase</span>::<span class=\"n\">Local</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// Locals have no relevance for collector</span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>There already is an exhaustive match on <code>StaticKind</code> here. Should I handle the <code>FIXME</code> part?</p>",
        "id": 172004928,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1564461907
    },
    {
        "content": "<p>yes <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> Great that there's a FIXME there</p>",
        "id": 172009354,
        "sender_full_name": "oli",
        "timestamp": 1564468200
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 172025903,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1564483770
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <br>\nFrom what I understand we need to do something like this (This code does not compile):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">visit_place_base</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">place_base</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mir</span>::<span class=\"n\">PlaceBase</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">_context</span>: <span class=\"nc\">mir</span>::<span class=\"n\">visit</span>::<span class=\"n\">PlaceContext</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">location</span>: <span class=\"nc\">Location</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">place_base</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">PlaceBase</span>::<span class=\"n\">Static</span><span class=\"p\">(</span><span class=\"k\">box</span><span class=\"w\"> </span><span class=\"n\">Static</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">kind</span>: <span class=\"nc\">StaticKind</span>::<span class=\"n\">Static</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;visiting static {:?} @ {:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">location</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">mono</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">def_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">should_monomorphize_locally</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">instance</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">MonoItem</span>::<span class=\"n\">Static</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">def_id</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">PlaceBase</span>::<span class=\"n\">Static</span><span class=\"p\">(</span><span class=\"k\">box</span><span class=\"w\"> </span><span class=\"n\">Static</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">kind</span>: <span class=\"nc\">StaticKind</span>::<span class=\"n\">Promoted</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">const_eval</span><span class=\"p\">(</span><span class=\"n\">param_env</span><span class=\"p\">.</span><span class=\"n\">and</span><span class=\"p\">(</span><span class=\"n\">cid</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">collect_const</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">substs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{},</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">PlaceBase</span>::<span class=\"n\">Local</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// Locals have no relevance for collector</span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 172122688,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1564576588
    },
    {
        "content": "<p>Basically, I guess in the promoted arm we need to do a <code>const_eval</code> to check whether const prop turns the promoted to a constant?</p>\n<p>In case of the <code>Ok</code> we do a <code>collect_const</code>, but I do not know how do we stop the collector from collecting the promoted.</p>",
        "id": 172122768,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1564576677
    },
    {
        "content": "<p>Hmmm curious. You're right, the collector can const eval, because it's monomorphic. What does the current promotion collection code do? You should be able to copy that</p>",
        "id": 172125687,
        "sender_full_name": "oli",
        "timestamp": 1564578699
    },
    {
        "content": "<p>I think we can unwrap the const eval call</p>",
        "id": 172125696,
        "sender_full_name": "oli",
        "timestamp": 1564578710
    },
    {
        "content": "<p><a href=\"https://github.com/saleemjaffer/rust/blob/745c76d657ebbe29265100e5381f8bf326c54567/src/librustc_mir/monomorphize/collector.rs#L1237\" target=\"_blank\" title=\"https://github.com/saleemjaffer/rust/blob/745c76d657ebbe29265100e5381f8bf326c54567/src/librustc_mir/monomorphize/collector.rs#L1237\">https://github.com/saleemjaffer/rust/blob/745c76d657ebbe29265100e5381f8bf326c54567/src/librustc_mir/monomorphize/collector.rs#L1237</a></p>",
        "id": 172125960,
        "sender_full_name": "oli",
        "timestamp": 1564578862
    },
    {
        "content": "<p>Do that</p>",
        "id": 172125964,
        "sender_full_name": "oli",
        "timestamp": 1564578865
    },
    {
        "content": "<p>XD</p>",
        "id": 172125966,
        "sender_full_name": "oli",
        "timestamp": 1564578867
    },
    {
        "content": "<p>And then remove that for loop</p>",
        "id": 172125976,
        "sender_full_name": "oli",
        "timestamp": 1564578876
    },
    {
        "content": "<p>What's \"monomorphic\"? I've seen this a lot in the mir code.</p>",
        "id": 172126148,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1564579006
    },
    {
        "content": "<p>Haskell wiki has a rather concise definition <a href=\"https://wiki.haskell.org/Monomorphism\" target=\"_blank\" title=\"https://wiki.haskell.org/Monomorphism\">https://wiki.haskell.org/Monomorphism</a></p>",
        "id": 172128386,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1564580695
    },
    {
        "content": "<p>In Rust, a function is monomorphic if it doesn't have any (remaining) const generic parameters, type parameters, or lifetimes.</p>",
        "id": 172128434,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1564580740
    },
    {
        "content": "<p>So</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">example</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>is polymorphic</p>\n<p>but this instance of the function:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">example</span><span class=\"o\">&lt;</span><span class=\"nb\">&#39;static</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>is monomorphic.</p>",
        "id": 172128586,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1564580843
    }
]