[
    {
        "content": "<p>hi <span class=\"user-mention\" data-user-id=\"262681\">@Emanuel Lima</span> </p>\n<p>in <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/optimizing.20matches\">https://rust-lang.zulipchat.com/#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/optimizing.20matches</a> I realized that we have a suboptimal ordering of some optimizations, and if you want, you can use this as a starter issue.</p>",
        "id": 211759046,
        "sender_full_name": "oli",
        "timestamp": 1601472640
    },
    {
        "content": "<p>hmm... that's weird... SimplifyComparisonIntegral is already after MatchBranchSimplification, but they don't seem to be working hand in hand</p>",
        "id": 211759532,
        "sender_full_name": "oli",
        "timestamp": 1601472868
    },
    {
        "content": "<p>Nice, I will take a look into it.</p>",
        "id": 211759784,
        "sender_full_name": "Emanuel Lima",
        "timestamp": 1601472974
    },
    {
        "content": "<p>sec, I have a repro somewhere</p>",
        "id": 211759987,
        "sender_full_name": "oli",
        "timestamp": 1601473076
    },
    {
        "content": "<p>some basic initial instructions: add a new example in <code>src/test/mir-opt</code> and read the <code>README.md</code> in the same folder to see how to dump MIR for a specific function</p>",
        "id": 211760097,
        "sender_full_name": "oli",
        "timestamp": 1601473116
    },
    {
        "content": "<p>then, you can run all that with <code>./x.py test --bless src/test/mir-opt</code> which will automatically generate said mir dumps</p>",
        "id": 211760182,
        "sender_full_name": "oli",
        "timestamp": 1601473152
    },
    {
        "content": "<p>So, here's the repro I was thinking about: <a href=\"https://godbolt.org/z/Pcjsfc\">https://godbolt.org/z/Pcjsfc</a></p>",
        "id": 211760263,
        "sender_full_name": "oli",
        "timestamp": 1601473197
    },
    {
        "content": "<p>basically we want that <code>Eq</code> before the <code>switchInt</code> to be gone, and the <code>switchInt</code> to be <code>switchInt(_3, [1: bb2, otherwise: bb1])</code></p>",
        "id": 211760426,
        "sender_full_name": "oli",
        "timestamp": 1601473250
    },
    {
        "content": "<p>this is theoretically what the <code>SimplifyComparisonIntegral</code> optimization does</p>",
        "id": 211760472,
        "sender_full_name": "oli",
        "timestamp": 1601473266
    },
    {
        "content": "<p>not sure why not in this case</p>",
        "id": 211760488,
        "sender_full_name": "oli",
        "timestamp": 1601473273
    },
    {
        "content": "<p>for debugging you can throw a bunch of <code>trace!</code> invocations into the optimization to get to know it better</p>",
        "id": 211760524,
        "sender_full_name": "oli",
        "timestamp": 1601473291
    },
    {
        "content": "<p>(also make sure to dump the MIR before and after that optimization, so you are always on top of what MIR you're working on)</p>",
        "id": 211760572,
        "sender_full_name": "oli",
        "timestamp": 1601473313
    },
    {
        "content": "<p>edit: wrong guess, we don't actually exit because of my guess</p>",
        "id": 211761387,
        "sender_full_name": "lcnr",
        "timestamp": 1601473640
    },
    {
        "content": "<p>shouldn't <code>SimplifyComparisionIntegral</code> also optimize <a href=\"https://godbolt.org/z/dhjqdK\">https://godbolt.org/z/dhjqdK</a>?</p>",
        "id": 211762356,
        "sender_full_name": "lcnr",
        "timestamp": 1601474074
    },
    {
        "content": "<p>yes... it should</p>",
        "id": 211768575,
        "sender_full_name": "oli",
        "timestamp": 1601476323
    }
]