[
    {
        "content": "<p>I'm working on taint analysis, and am struggling to understand how the <code>mir::TerminatorKind::Call</code> specifies a _function_ using <code>mir::Operand</code>. Does anyone know where I could see this being done in the compiler?</p>",
        "id": 234657747,
        "sender_full_name": "Hilmar Gústafsson",
        "timestamp": 1618486058
    },
    {
        "content": "<p>For direct calls the type of the operand is an <code>FnDef</code> corresponding to the respective function. For indirect calls it is an <code>FnPtr</code>.</p>",
        "id": 234657906,
        "sender_full_name": "bjorn3",
        "timestamp": 1618486138
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Understanding.20.60mir.3A.3ATerminatorKind.3A.3ACall.60/near/234657906\">said</a>:</p>\n<blockquote>\n<p>For direct calls the type of the operand is an <code>FnDef</code> corresponding to the respective function. For indirect calls it is an <code>FnPtr</code>.</p>\n</blockquote>\n<p>Thanks!</p>",
        "id": 234658607,
        "sender_full_name": "Hilmar Gústafsson",
        "timestamp": 1618486469
    },
    {
        "content": "<p>Yep. That's exactly what I'm looking for. :D</p>",
        "id": 234659284,
        "sender_full_name": "Hilmar Gústafsson",
        "timestamp": 1618486807
    },
    {
        "content": "<p>Does anyone know how I would go about constructing this artificially? Right now my best bet is this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">kind</span>: <span class=\"nc\">mir</span>::<span class=\"n\">TerminatorKind</span>::<span class=\"n\">Call</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">func</span>: <span class=\"nc\">mir</span>::<span class=\"n\">Operand</span>::<span class=\"n\">Constant</span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">mir</span>::<span class=\"n\">Constant</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">span</span>: <span class=\"nc\">DUMMY_SP</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user_ty</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">literal</span>: <span class=\"nc\">mir</span>::<span class=\"n\">ConstantKind</span>::<span class=\"n\">Ty</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">ty</span>::<span class=\"n\">Const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">ty</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">ty</span>::<span class=\"n\">TyS</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">kind</span>: <span class=\"nc\">ty</span>::<span class=\"n\">FnDef</span><span class=\"p\">(</span><span class=\"n\">input_fn</span><span class=\"p\">.</span><span class=\"n\">to_def_id</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">List</span>::<span class=\"n\">empty</span><span class=\"p\">()),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">flags</span>: <span class=\"nc\">TypeFlags</span>::<span class=\"n\">empty</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"sd\">/// ???</span>\n<span class=\"w\">                </span><span class=\"n\">outer_exclusive_binder</span>: <span class=\"nc\">DebruijnIndex</span>::<span class=\"n\">MAX</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// ???</span>\n<span class=\"w\">            </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">val</span>: <span class=\"o\">???</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">})),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">args</span>: <span class=\"nc\">vec</span><span class=\"o\">!</span><span class=\"p\">[],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">destination</span>: <span class=\"nb\">Some</span><span class=\"p\">((</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">mir</span>::<span class=\"n\">Place</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">local</span>: <span class=\"nc\">mir</span>::<span class=\"n\">Local</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">private</span>: <span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">projection</span>: <span class=\"nc\">ty</span>::<span class=\"n\">List</span>::<span class=\"n\">empty</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">mir</span>::<span class=\"n\">START_BLOCK</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">cleanup</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">from_hir_call</span>: <span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fn_span</span>: <span class=\"nc\">DUMMY_SP</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">},</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 234827431,
        "sender_full_name": "Hilmar Gústafsson",
        "timestamp": 1618567776
    },
    {
        "content": "<p>You need to use <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#method.mk_fn_def\"><code>tcx.mk_fn_def</code></a> instead of manually constructing the type.</p>",
        "id": 234827766,
        "sender_full_name": "bjorn3",
        "timestamp": 1618567946
    },
    {
        "content": "<p>And to get from <code>ty::Const</code> to <code>&amp;'tcx ty::Const</code> you need to use <code>tcx.mk_const</code>.</p>",
        "id": 234827819,
        "sender_full_name": "bjorn3",
        "timestamp": 1618567983
    },
    {
        "content": "<p>Why do you need to make it yourself by the way?</p>",
        "id": 234828026,
        "sender_full_name": "bjorn3",
        "timestamp": 1618568081
    },
    {
        "content": "<p>Thank you! Oh, I'm just writing a test case for some taint analysis</p>",
        "id": 234828055,
        "sender_full_name": "Hilmar Gústafsson",
        "timestamp": 1618568101
    },
    {
        "content": "<p>It's for our master's thesis, and we're using a simplified MIR, so we need to construct it artificially for now</p>",
        "id": 234828135,
        "sender_full_name": "Hilmar Gústafsson",
        "timestamp": 1618568147
    },
    {
        "content": "<p>MIR is not really meant to be manually constructed. Even miri's test suite just compiles regular rust code.</p>",
        "id": 234828148,
        "sender_full_name": "bjorn3",
        "timestamp": 1618568155
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/miri/issues/196\">https://github.com/rust-lang/miri/issues/196</a></p>",
        "id": 234828227,
        "sender_full_name": "bjorn3",
        "timestamp": 1618568180
    },
    {
        "content": "<p>I see... but it kinda seems like it wouldn't be too bad if we implemented a MIR parser at some point?</p>",
        "id": 234829538,
        "sender_full_name": "Hilmar Gústafsson",
        "timestamp": 1618568808
    },
    {
        "content": "<p>In any case, I figured this was the easiest way to get exactly the MIR that we wanted. I'm not even sure we can construct the simplified MIR using valid Rust code</p>",
        "id": 234829609,
        "sender_full_name": "Hilmar Gústafsson",
        "timestamp": 1618568847
    },
    {
        "content": "<p>But we _will_ be using real Rust code for the final version of the taint analysis, just not this intermediate simplified step</p>",
        "id": 234829767,
        "sender_full_name": "Hilmar Gústafsson",
        "timestamp": 1618568904
    },
    {
        "content": "<p>Nevermind. I just saw <code>ty::GlobalCtxt</code>...</p>",
        "id": 234830397,
        "sender_full_name": "Hilmar Gústafsson",
        "timestamp": 1618569209
    },
    {
        "content": "<p>There is desire to be able to parse some form of MIR for testing, but I don't remember the plan and I don't think I ever properly wrote down <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> 's plan. I think the miri repo has an issue open about it. There may also be an issue in the rustc repo</p>",
        "id": 234831316,
        "sender_full_name": "oli",
        "timestamp": 1618569627
    }
]