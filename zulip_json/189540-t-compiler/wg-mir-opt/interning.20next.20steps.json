[
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I was thinking that, after <a href=\"https://github.com/rust-lang/rust/issues/64922\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64922\">#64922</a>, the next step for interning is probably modifying the <code>MutVisitor</code> so that they don't visit the <em>contents</em> of places</p>",
        "id": 177089934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569958558
    },
    {
        "content": "<p>well, all visitors I guess</p>",
        "id": 177089979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569958565
    },
    {
        "content": "<p>since once we intern we're going to have to visit a place as an atomic thing</p>",
        "id": 177089991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569958584
    },
    {
        "content": "<p>I'm not sure how big a change this will be</p>",
        "id": 177090006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569958597
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I was starting to add the methods we talked about yesterday</p>",
        "id": 177090521,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569958984
    },
    {
        "content": "<p>do you think I should stop that and switch to this?</p>",
        "id": 177090530,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569958994
    },
    {
        "content": "<blockquote>\n<p>since once we intern we're going to have to visit a place as an atomic thing</p>\n</blockquote>\n<p>unsure why is this, we are interning only the projections of a place first, right?</p>",
        "id": 177090592,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569959045
    },
    {
        "content": "<p>if we are interning projections, why do we end visiting a place as an atomic thing?</p>",
        "id": 177090601,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569959063
    },
    {
        "content": "<blockquote>\n<p>So <span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> I was thinking that, after <a href=\"https://github.com/rust-lang/rust/issues/64922\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64922\">#64922</a>, the next step for interning is probably modifying the <code>MutVisitor</code> so that they don't visit the <em>contents</em> of places</p>\n</blockquote>\n<p>If you don't visit contents of places what do you do on each visitor? or how do you emulate what visitors are right now doing?</p>",
        "id": 177090639,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569959105
    },
    {
        "content": "<p>trying to understand exactly what I need to accomplish</p>",
        "id": 177090653,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569959117
    },
    {
        "content": "<blockquote>\n<p>I was starting to add the methods we talked about yesterday</p>\n</blockquote>\n<p>which methods, <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> ?</p>",
        "id": 177091303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569959628
    },
    {
        "content": "<blockquote>\n<p>if we are interning projections, why do we end visiting a place as an atomic thing?</p>\n</blockquote>\n<p>ok well we can visit the \"base\"</p>",
        "id": 177091359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569959644
    },
    {
        "content": "<p>but we can't mut-visit the projections</p>",
        "id": 177091366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569959652
    },
    {
        "content": "<p>because they are interned</p>",
        "id": 177091372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569959658
    },
    {
        "content": "<blockquote>\n<p>If you don't visit contents of places what do you do on each visitor? or how do you emulate what visitors are right now doing?</p>\n</blockquote>\n<p>I guess we have to look at the visitors and see what they do</p>",
        "id": 177091404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569959685
    },
    {
        "content": "<p>for the non-mut visitors, we could have an auxiliary \"place visitor\" trait</p>",
        "id": 177091421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569959698
    },
    {
        "content": "<p>that visits the base/projections as today</p>",
        "id": 177091435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569959707
    },
    {
        "content": "<p>but is always read-only</p>",
        "id": 177091439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569959711
    },
    {
        "content": "<p>for the <em>mut</em> visitors, well, we'll have to look carefully, they may need to do a \"map\" where they produce a new place and then store the whole thing back</p>",
        "id": 177091476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569959752
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>I was starting to add the methods we talked about yesterday</p>\n</blockquote>\n<p>which methods, <span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> ?</p>\n</blockquote>\n<p>I meant, I started to play with the interning process, adding these _intern_predicate like methods</p>",
        "id": 177091573,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569959811
    },
    {
        "content": "<p>ok I got that we can't mut-visit the projections because they are interned</p>",
        "id": 177091782,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569959968
    },
    {
        "content": "<p>the place visitor I guess makes sense</p>",
        "id": 177091815,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569959995
    },
    {
        "content": "<blockquote>\n<p>for the <em>mut</em> visitors, well, we'll have to look carefully, they may need to do a \"map\" where they produce a new place and then store the whole thing back</p>\n</blockquote>\n<p>I wonder then how do you solve this, I guess all you're saying is that we can't just implement the mut visitor because we have an interned structure but we need to mutate that in some different way</p>",
        "id": 177092007,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569960070
    },
    {
        "content": "<p>I guess I'd need to take a look around to see what's exactly the issue</p>",
        "id": 177092030,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569960092
    },
    {
        "content": "<p>so my main question about this is ...</p>",
        "id": 177092047,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569960107
    },
    {
        "content": "<p>are you proposing that I should fix the mut visitors issue before hand? like to leave the code prepared for the interning case?</p>",
        "id": 177092130,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569960144
    },
    {
        "content": "<p>or should I do all at once and fix the visitors once I see the compiler error I'm getting when using <code>List&lt;PlaceElem&lt;'tcx&gt;&gt;</code>?</p>",
        "id": 177092209,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569960183
    },
    {
        "content": "<blockquote>\n<p>I meant, I started to play with the interning process, adding these _intern_predicate like methods</p>\n</blockquote>\n<p>I see. I think that's a bit premature, we should fix the visitor things first.</p>",
        "id": 177093043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569960665
    },
    {
        "content": "<blockquote>\n<p>are you proposing that I should fix the mut visitors issue before hand? like to leave the code prepared for the interning case?</p>\n</blockquote>\n<p>yep</p>",
        "id": 177093062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569960679
    },
    {
        "content": "<p>cool</p>",
        "id": 177093072,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569960688
    },
    {
        "content": "<p>I think you'd be happier trying to debug the visitor changes in isolation :)</p>",
        "id": 177093073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569960689
    },
    {
        "content": "<p>yeah it makes sense</p>",
        "id": 177093101,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569960703
    },
    {
        "content": "<p>in general in the mut version, I guess you get the projection from the arena, modify it locally and reintern it?</p>",
        "id": 177093206,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569960759
    },
    {
        "content": "<p>I mean, I guess you don't mut visit the projection but you still will need to modify it</p>",
        "id": 177093286,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569960779
    },
    {
        "content": "<p>talking about interning, I know that I shouldn't do it for now but I still don't know to what I should change the visitors because I guess I don't understand the problem that the interning process is going to give me</p>",
        "id": 177093403,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569960825
    },
    {
        "content": "<p>So right now, <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/visit/trait.MutVisitor.html#method.visit_place\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/visit/trait.MutVisitor.html#method.visit_place\">visit_place</a> has a <code>&amp;mut Place</code> and since <code>Place</code> owns the <code>Box</code>, <code>visit_place()</code> is free to mutate it</p>",
        "id": 177093575,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569960925
    },
    {
        "content": "<p>Once we start interning, <code>Place</code> will only have a <code>&amp;'tcx Box&lt;[PlaceElem]&gt;</code> or whatever</p>",
        "id": 177093597,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569960953
    },
    {
        "content": "<p>which means the code can no longer mutate the projections</p>",
        "id": 177093624,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569960963
    },
    {
        "content": "<p>It can however mutate the <code>Place</code> so whatever it is currently doing needs to be changed from mutating the projections in the Place directly to generating a new <code>Box&lt;[PlaceElem]&gt;</code> that we can intern and then assign to the <code>&amp;mut Place</code> we have</p>",
        "id": 177093711,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569961020
    },
    {
        "content": "<p>(if I understand correctly)</p>",
        "id": 177093868,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569961132
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> in case I'm totally wrong)</p>",
        "id": 177096846,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569962987
    },
    {
        "content": "<p>that seems reasonable</p>",
        "id": 177097127,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569963162
    },
    {
        "content": "<p>yep, that's it</p>",
        "id": 177110229,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569974820
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm making some progress with this task but I was wondering ...</p>",
        "id": 177179589,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570041680
    },
    {
        "content": "<p>one easy way to solve this is to make visit_projection return a projection</p>",
        "id": 177179604,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570041693
    },
    {
        "content": "<p>and so the rest of the visit_* methods that visit_projection use</p>",
        "id": 177179620,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570041706
    },
    {
        "content": "<p>but that doesn't seem like a great design and even less something that a visitor would do :)</p>",
        "id": 177179702,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570041743
    },
    {
        "content": "<p>the other possibility is to have everything solved on visit_place</p>",
        "id": 177179753,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570041782
    },
    {
        "content": "<p>but still there are visit_ty and visit_local that mutates the thing and we would need those to return a new ty or new local and not to mutate</p>",
        "id": 177179840,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570041837
    },
    {
        "content": "<p>and also, is not a thing of just changing visit_ty to make it return because that one is used in other visitor methods</p>",
        "id": 177179999,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570041948
    },
    {
        "content": "<p>it's more like we need a read only version of those</p>",
        "id": 177180056,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570041965
    },
    {
        "content": "<p>I can provide a solution to this that works still wonder how to properly fit things in the current design</p>",
        "id": 177180107,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570041999
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> yeah so I think we have to be careful what we are talking about here. I'm feeling a bit confused. Today's design has a split:</p>\n<ul>\n<li>the visitor (<code>fn visit(&amp;T)</code>) -- read-only access to the things in the MIR</li>\n<li>the mut visitor (<code>fn visit(&amp;mut T)</code>) -- gives <code>&amp;mut</code> access to the things in the MIR</li>\n</ul>\n<p>Right now, these two visitors always visit the same set of things, but in one case you get to make \"in place\" changes. I think this is overall a nice pattern that we should <em>probably</em> keep, but indeed there is another alternative: you can have what we often call a \"folder\", where the basic signature is <code>fn fold(&amp;T) -&gt; T</code>. But this has the problem that \"read-only\" visits are really wasteful now, so it's often paired with a visitor <code>fn visit(&amp;T)</code>. It's also not great for making small edits. I rather prefer the existing mut visitor, though it might be a good idea to survey the uses and see how often we're really using it.</p>\n<p>This is why I am advocating for moving the \"visit the parts of a place\" <strong>out</strong> from the <strong>MIR visitor</strong> to a separate visitor. So then you can decide how you want to visit those parts, and it can use a distinct strategy -- probably it would just use the <code>TypeFolder</code> methods, actually, since I think the only thing we ever want to visit inside of places is types.</p>",
        "id": 177226219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570093527
    },
    {
        "content": "<p>If you want <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> maybe we can schedule a bit of time to talk over this sync?</p>",
        "id": 177226229,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570093544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yeah, please let's sync about this for a bit</p>",
        "id": 177249712,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570112884
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so I understand what you mean at high level</p>",
        "id": 177284286,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570134099
    },
    {
        "content": "<p>when you say move \"visit the parts of a place\" out from the MIR visitor to a separate visitor</p>",
        "id": 177284388,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570134130
    },
    {
        "content": "<p>I also get that we would need to move out from there things that are going to be interned because MutVisitor won't play nice with that</p>",
        "id": 177284425,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570134159
    },
    {
        "content": "<p>the thing I guess now is how would be MIR Visitor work then?</p>",
        "id": 177284476,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570134198
    },
    {
        "content": "<p>it will call that other visitor to visit place?</p>",
        "id": 177284497,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570134209
    },
    {
        "content": "<p>and I'm also understanding that that other visitor would need to take a read only place or place part or more specifically for this case would be a read only projection and return a new one by using TypeFolder methods</p>",
        "id": 177284700,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570134330
    },
    {
        "content": "<p>just wonder how the pieces fit together</p>",
        "id": 177284746,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570134338
    },
    {
        "content": "<p>The mut visitor can also have <code>fn visit_place_projection(&amp;mut &amp;'tcx [PlaceElem&lt;'tcx&gt;])</code>, so you can mutate, but you have to put back a <code>&amp;'tcx [PlaceElem&lt;'tcx&gt;]</code> in one go</p>",
        "id": 177321003,
        "sender_full_name": "oli",
        "timestamp": 1570179258
    },
    {
        "content": "<p>it could, but I would avoid that</p>",
        "id": 177333588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570192169
    },
    {
        "content": "<p>in particular, if we move towards interning an entire place</p>",
        "id": 177333608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570192188
    },
    {
        "content": "<p>it'll just mean more work</p>",
        "id": 177333613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570192193
    },
    {
        "content": "<p>I think it's easier to consider places a \"leaf\" type for the visitor, much like types</p>",
        "id": 177333680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570192214
    },
    {
        "content": "<p>but I don't have a strong opinion on that</p>",
        "id": 177333697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570192238
    },
    {
        "content": "<p>the more important thing would be to go through the visitors and see how they use the visit place methods</p>",
        "id": 177333703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570192249
    },
    {
        "content": "<p>I get</p>\n<div class=\"codehilite\"><pre><span></span>/home/nmatsakis/.cargo/bin/rg --no-heading --color never &#39;fn visit_place\\(|fn visit_place_base\\(|fn visit_projection\\(&#39;\nlibrustc_codegen_ssa/mir/analyze.rs:245:    fn visit_place(&amp;mut self,\nlibrustc_mir/transform/inline.rs:677:    fn visit_place(&amp;mut self,\nlibrustc_mir/transform/qualify_consts.rs:1094:    fn visit_place_base(\nlibrustc_mir/transform/qualify_consts.rs:1159:    fn visit_projection(\nlibrustc_mir/monomorphize/collector.rs:659:    fn visit_place_base(&amp;mut self,\nlibrustc_mir/transform/generator.rs:103:    fn visit_place(&amp;mut self,\nlibrustc_mir/transform/generator.rs:130:    fn visit_place(&amp;mut self,\nlibrustc_mir/transform/generator.rs:250:    fn visit_place(&amp;mut self,\nlibrustc_mir/transform/check_unsafety.rs:199:    fn visit_place(&amp;mut self,\nlibrustc/mir/visit.rs:147:            fn visit_place(&amp;mut self,\nlibrustc/mir/visit.rs:154:            fn visit_place_base(&amp;mut self,\nlibrustc/mir/visit.rs:161:            fn visit_projection(&amp;mut self,\nlibrustc_mir/transform/check_consts/validation.rs:322:    fn visit_place_base(\nlibrustc_mir/transform/check_consts/validation.rs:407:    fn visit_projection(\nlibrustc_mir/borrow_check/nll/type_check/mod.rs:273:    fn visit_place(&amp;mut self, place: &amp;Place&lt;&#39;tcx&gt;, context: PlaceContext, location: Location) {\nlibrustc_mir/borrow_check/nll/type_check/liveness/polonius.rs:68:    fn visit_place(&amp;mut self, place: &amp;Place&lt;&#39;tcx&gt;, context: PlaceContext, location: Location) {\n</pre></div>",
        "id": 177334069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570192579
    },
    {
        "content": "<p>er that's the wrong list</p>",
        "id": 177334092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570192611
    },
    {
        "content": "<p>but it's a start</p>",
        "id": 177334093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570192612
    },
    {
        "content": "<p>I guess what we <em>most</em> want to check are the <code>MutVisitor</code> cases</p>",
        "id": 177334103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570192621
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I think the main doubt I have is how would the MIR Visitor interact with that place visitor you're suggesting?</p>",
        "id": 177345126,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570200233
    },
    {
        "content": "<p>I understand that we want <code>Place</code> to be a leaf</p>",
        "id": 177345194,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570200248
    },
    {
        "content": "<p>that's clear</p>",
        "id": 177345200,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570200250
    },
    {
        "content": "<p>but once the MIR visitor do visit_place, I understand that we want to use the TypeFolder methods in particular for projections</p>",
        "id": 177345427,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570200364
    },
    {
        "content": "<p>the MIR visitor would do nothing</p>",
        "id": 177363208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570211519
    },
    {
        "content": "<p><strong>individual MIR visitors</strong> might use a type folder or whatever</p>",
        "id": 177363253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570211528
    },
    {
        "content": "<p>that is basically what we do for <code>Ty&lt;'tcx&gt;</code> too, right?</p>",
        "id": 177363274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570211548
    },
    {
        "content": "<blockquote>\n<p>the MIR visitor would do nothing</p>\n</blockquote>\n<p>that is, the MIR visitor <em>trait</em></p>",
        "id": 177363304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570211574
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 177363311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570211581
    },
    {
        "content": "<p>yeah I guess we are talking or thinking about the same idea</p>",
        "id": 177363778,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570211916
    },
    {
        "content": "<p>going to code this and let you know</p>",
        "id": 177363795,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570211929
    },
    {
        "content": "<p>when I was saying what would the visitor do I was mainly referring to the default impl, anyway, let me figure out something</p>",
        "id": 177363851,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570211990
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> we should probably spend a bit of time auditing the visitors</p>",
        "id": 177528194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570460821
    },
    {
        "content": "<p>yeah, I was taking a look at them</p>",
        "id": 177528215,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570460837
    },
    {
        "content": "<p>although I guess it might be useful to kind of convert them one at a time and run tests</p>",
        "id": 177528226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570460842
    },
    {
        "content": "<p>yep</p>",
        "id": 177528249,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570460858
    },
    {
        "content": "<p>( I guess you could e.g. just add a <code>visit_place</code> that does nothing to do that )</p>",
        "id": 177528250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570460858
    },
    {
        "content": "<p>my main question was about how to design reuse on this existing design</p>",
        "id": 177528338,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570460907
    },
    {
        "content": "<p>basically the idea is that we have a visit_place, visit_place_base and visit_projection all of them with default impls</p>",
        "id": 177528398,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570460957
    },
    {
        "content": "<p>what they end doing is traversing all the different parts of the place and end calling visit_ty and visit_local</p>",
        "id": 177528426,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570460977
    },
    {
        "content": "<p>so depending on the visitor some just implement visit_ty and/or visit_local and there are some that roll their own visit_place thing or visit_projection thing</p>",
        "id": 177528491,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570461003
    },
    {
        "content": "<p>yes</p>",
        "id": 177528552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570461055
    },
    {
        "content": "<p>most of them already have some \"core\" thing</p>",
        "id": 177528570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570461071
    },
    {
        "content": "<p>my original question was how to keep a design like this when  we want at least, visit_projection, visit_ty and visit_local only for the case of projections to return new</p>",
        "id": 177528578,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570461073
    },
    {
        "content": "<p>e.g., <code>visit_substs</code> and <code>visit_ty</code></p>",
        "id": 177528585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570461080
    },
    {
        "content": "<p>are both \"leaf\" methods for the visitor</p>",
        "id": 177528590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570461084
    },
    {
        "content": "<p>that have types embedded in them</p>",
        "id": 177528594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570461087
    },
    {
        "content": "<p>because visit_ty and visit_local are used from other parts of the visitor</p>",
        "id": 177528601,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570461090
    },
    {
        "content": "<p>I think we should just go through the visitors 1 by 1</p>",
        "id": 177528633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570461120
    },
    {
        "content": "<p>most of them don't even look at types, I dont' think</p>",
        "id": 177528694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570461131
    },
    {
        "content": "<p>easier to look at specifics than to discuss in the abstract</p>",
        "id": 177528718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570461143
    },
    {
        "content": "<p>yes</p>",
        "id": 177528725,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570461150
    },
    {
        "content": "<p>that's what I was also saying :)</p>",
        "id": 177528728,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570461153
    },
    {
        "content": "<p>ok</p>",
        "id": 177528745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570461164
    },
    {
        "content": "<p>I guess the question is <em>when</em> to do that :)</p>",
        "id": 177528749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570461167
    },
    {
        "content": "<p>I could maybe do that later today if you wanted</p>",
        "id": 177528753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570461173
    },
    {
        "content": "<p>Does <code>Place</code> implement \"type foldable\" btw?</p>",
        "id": 177528814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570461206
    },
    {
        "content": "<p>It does, I think, right?</p>",
        "id": 177528821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570461210
    },
    {
        "content": "<p>yes</p>",
        "id": 177528833,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570461216
    },
    {
        "content": "<p>OK</p>",
        "id": 177528844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570461220
    },
    {
        "content": "<p>actually</p>",
        "id": 177528846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570461222
    },
    {
        "content": "<p>I think I can provide a PR with an idea</p>",
        "id": 177528848,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570461223
    },
    {
        "content": "<p>if you want I could do that right now :)</p>",
        "id": 177528856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570461227
    },
    {
        "content": "<p>I mean, your help will always help me :) but I don't want to make you waste your time :)</p>",
        "id": 177528961,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570461268
    },
    {
        "content": "<p>what if I just start and provide a PR with some code</p>",
        "id": 177528978,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570461278
    },
    {
        "content": "<p>will do something not great from the design if needed to discuss</p>",
        "id": 177528994,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570461294
    },
    {
        "content": "<p>and we can make progress from there</p>",
        "id": 177529004,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570461300
    },
    {
        "content": "<p>ok, that works</p>",
        "id": 177529021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570461305
    },
    {
        "content": "<p>if you want we can aim for some sync time later in case needed (if you have time)</p>",
        "id": 177529048,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570461315
    },
    {
        "content": "<p>hoping that is not needed ;)</p>",
        "id": 177529061,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570461321
    },
    {
        "content": "<p>I think we can basically \"convert\"  all the existing visitors such that</p>",
        "id": 177529068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570461324
    },
    {
        "content": "<p>each of them implements <code>visit_place</code> in a way that does not recurse into the visitor</p>",
        "id": 177529080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570461331
    },
    {
        "content": "<p>then remove <code>visit_place</code> from the visitor</p>",
        "id": 177529086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570461336
    },
    {
        "content": "<p>yeah that was my goal</p>",
        "id": 177529097,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570461345
    },
    {
        "content": "<p>ok</p>",
        "id": 177529103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570461348
    },
    {
        "content": "<p>I guess would led to a lot of code duplication</p>",
        "id": 177529106,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570461354
    },
    {
        "content": "<p>well I'll be around today if you want to ping with specific questions about an individual visitor</p>",
        "id": 177529109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570461358
    },
    {
        "content": "<blockquote>\n<p>I guess would led to a lot of code duplication</p>\n</blockquote>\n<p>maybe, but I bet less than you might think</p>",
        "id": 177529164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570461373
    },
    {
        "content": "<blockquote>\n<p>I guess would led to a lot of code duplication</p>\n</blockquote>\n<p>but this is what I'm hoping to see from real code and stop trying to pre guess things</p>",
        "id": 177529182,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570461392
    },
    {
        "content": "<p>ok, <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>, gonna jump into this right now</p>",
        "id": 177529194,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570461401
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> was trying things out and seeing which <code>MutVisitor</code>s make use of <code>visit_place</code> in a direct or indirect way</p>",
        "id": 177552488,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570477270
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[santiago@galago rust1 (place-mut-visitor-adjusts2)]$ rg -l &quot;impl.*MutVisitor&quot; src/librustc_mir/\nsrc/librustc_mir/transform/no_landing_pads.rs\nsrc/librustc_mir/transform/promote_consts.rs\nsrc/librustc_mir/transform/erase_regions.rs\nsrc/librustc_mir/transform/generator.rs\nsrc/librustc_mir/transform/instcombine.rs\nsrc/librustc_mir/transform/copy_prop.rs\nsrc/librustc_mir/transform/cleanup_post_borrowck.rs\nsrc/librustc_mir/transform/simplify.rs\nsrc/librustc_mir/util/def_use.rs\nsrc/librustc_mir/transform/inline.rs\nsrc/librustc_mir/transform/const_prop.rs\nsrc/librustc_mir/borrow_check/nll/renumber.rs\n</pre></div>",
        "id": 177552529,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570477297
    },
    {
        "content": "<p><code>no_landing_pads</code> seems to be the only one not used</p>",
        "id": 177552639,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570477369
    },
    {
        "content": "<p>going over them</p>",
        "id": 177552650,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570477381
    },
    {
        "content": "<p>just for the sake of discussing about something concrete</p>",
        "id": 177552661,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570477389
    },
    {
        "content": "<p><code>promote_consts</code> -&gt; <a href=\"https://github.com/rust-lang/rust/compare/master...spastorino:place-mut-visitor-adjusts2\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...spastorino:place-mut-visitor-adjusts2\">https://github.com/rust-lang/rust/compare/master...spastorino:place-mut-visitor-adjusts2</a></p>",
        "id": 177552674,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570477401
    },
    {
        "content": "<p>it's not a lot of duplication</p>",
        "id": 177552696,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570477422
    },
    {
        "content": "<p>just duplicating <a href=\"https://github.com/rust-lang/rust/compare/master...spastorino:place-mut-visitor-adjusts2#diff-bfc61a84a9e3b48761db14b8d6772a0aL395\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...spastorino:place-mut-visitor-adjusts2#diff-bfc61a84a9e3b48761db14b8d6772a0aL395\">https://github.com/rust-lang/rust/compare/master...spastorino:place-mut-visitor-adjusts2#diff-bfc61a84a9e3b48761db14b8d6772a0aL395</a></p>",
        "id": 177552699,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570477430
    },
    {
        "content": "<p>and well yeah, the visit place_base and iterate over projections</p>",
        "id": 177552791,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570477460
    },
    {
        "content": "<p>basically all the stuff that's going to be repeated is we would need to visit place_base, iterate over projections and depending on what the <code>MutVisitor</code> does may need to repeat some of that parts too</p>",
        "id": 177552875,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570477515
    },
    {
        "content": "<p>in particular <code>visit_ty</code> and/or <code>visit_local</code></p>",
        "id": 177552894,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570477528
    },
    {
        "content": "<p>if implemented because the default impl is empty, what's why in this case there's nothing related to <code>visit_ty</code></p>",
        "id": 177552960,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570477564
    },
    {
        "content": "<blockquote>\n<p><code>promote_consts</code> -&gt; <a href=\"https://github.com/rust-lang/rust/compare/master...spastorino:place-mut-visitor-adjusts2\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...spastorino:place-mut-visitor-adjusts2\">https://github.com/rust-lang/rust/compare/master...spastorino:place-mut-visitor-adjusts2</a></p>\n</blockquote>\n<p>is that more or less what you were aiming to?, I'm assuming (for now) that projection is immutable but the rest is</p>",
        "id": 177553000,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570477596
    },
    {
        "content": "<p>otherwise I can't <code>visit_place_base</code></p>",
        "id": 177553013,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570477607
    },
    {
        "content": "<p>but I guess it's a first sane step</p>",
        "id": 177553025,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570477615
    },
    {
        "content": "<p>in this particular case the repetition can be easily avoided by provide a function does that the logic</p>",
        "id": 177553584,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570477987
    },
    {
        "content": "<p>hmm <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> yeah that diff looks ok but I agree it's a bit unfortunate; I had forgotten that index places have other places embedded within</p>",
        "id": 177556189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570479541
    },
    {
        "content": "<p>I guess the question is how often this will arise; I could certainly imagine having e.g. a <code>MutPlaceVisitor</code> or something that can extract some of that boilerplate</p>",
        "id": 177556234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570479576
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yeah, I guess I can continue pushing things there and following this way and see how looks like at the end or midroad</p>",
        "id": 177556448,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570479684
    },
    {
        "content": "<p>this <a href=\"https://github.com/rust-lang/rust/compare/master...spastorino:place-mut-visitor-adjusts2\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...spastorino:place-mut-visitor-adjusts2\">https://github.com/rust-lang/rust/compare/master...spastorino:place-mut-visitor-adjusts2</a> may be a bit better <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 177556586,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570479768
    },
    {
        "content": "<blockquote>\n<p>hmm <span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> yeah that diff looks ok but I agree it's a bit unfortunate; I had forgotten that index places have other places embedded within</p>\n</blockquote>\n<p>btw, what did you mean exactly here?, unsure if we think it is unfortunate for the same reasons</p>",
        "id": 177556909,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570479854
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <a href=\"https://github.com/rust-lang/rust/pull/65197\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/65197\">https://github.com/rust-lang/rust/pull/65197</a></p>",
        "id": 177581826,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570506308
    },
    {
        "content": "<p>have gone over all the <code>MutVisitor</code>s and changed the ones that needed to be changed, there's some code repetition we can discussing how to make it look better  :)</p>",
        "id": 177581874,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570506377
    },
    {
        "content": "<p>there are some unrelated changes like <a href=\"https://github.com/rust-lang/rust/pull/65197/commits/f7de6eaa8bed19b0b14081ec087ba82850e944c8\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/65197/commits/f7de6eaa8bed19b0b14081ec087ba82850e944c8\">https://github.com/rust-lang/rust/pull/65197/commits/f7de6eaa8bed19b0b14081ec087ba82850e944c8</a>, I'm now having second thoughts about it because the code is not more coupled, will take a look tomorrow</p>",
        "id": 177581892,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570506432
    },
    {
        "content": "<p>to complete a bit more this discussion, there's the PR</p>",
        "id": 177640468,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570556950
    },
    {
        "content": "<p>we need to get rid of some duplication</p>",
        "id": 177640496,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570556982
    },
    {
        "content": "<p>I've two extra commits on a new branch that try to setup an idea we were discussing with <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 177640577,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570557025
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> for when you read all this stuff</p>",
        "id": 177646516,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570560575
    },
    {
        "content": "<p>I've pushed everything I have for now <a href=\"https://github.com/rust-lang/rust/pull/65197\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/65197\">https://github.com/rust-lang/rust/pull/65197</a></p>",
        "id": 177646522,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570560587
    },
    {
        "content": "<p>the not so great things:</p>",
        "id": 177646615,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570560623
    },
    {
        "content": "<ol>\n<li><a href=\"https://github.com/rust-lang/rust/pull/65197/files#diff-f5c3f3fddb41e941652e84ee86bda82aR785-R892\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/65197/files#diff-f5c3f3fddb41e941652e84ee86bda82aR785-R892\">https://github.com/rust-lang/rust/pull/65197/files#diff-f5c3f3fddb41e941652e84ee86bda82aR785-R892</a> there's this macro, which is not bad per se, the thing is <code>Visitor</code> and <code>MutVisitor</code> start to diverge and also the <code>process_projection*</code> fns doesn't seem to belong really in a visitor</li>\n</ol>",
        "id": 177646693,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570560674
    },
    {
        "content": "<ol start=\"2\">\n<li>there are a bunch of clones like <a href=\"https://github.com/rust-lang/rust/pull/65197/files#diff-cbe990e8f20536f68f97230946f44f79R46\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/65197/files#diff-cbe990e8f20536f68f97230946f44f79R46\">https://github.com/rust-lang/rust/pull/65197/files#diff-cbe990e8f20536f68f97230946f44f79R46</a> but basically all the clones there. We need to clone if we mutate something, but if the projection stays the same we shouldn't. I was talking with <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> about this, we can probably use CoW to avoid that but until we don't intern there's going to be some sort of problem like that. Still I can keep this PR going and do the interning stuff in this one so we don't land regressions.</li>\n</ol>",
        "id": 177646892,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570560799
    },
    {
        "content": "<p>those are the two things that I'd like to discuss a bit, about point <code>1.</code> how to make the design better and about point <code>2.</code> how to get rid of unneeded clones</p>",
        "id": 177646994,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570560847
    },
    {
        "content": "<p>fixed <code>2.</code> so the <a href=\"https://github.com/rust-lang/rust/pull/65197\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/65197\">PR here</a> is ready, the only concern is <code>1.</code> more or less the design of the solution but is ready to be reviewed and discussed /cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 177678356,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570590172
    }
]