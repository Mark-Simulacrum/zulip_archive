[
    {
        "content": "<p>I was reading <a href=\"https://github.com/rust-lang/rust/blob/b2025326088b54fb3f083bebeba14e0a15bf00d3/compiler/rustc_mir/src/dataflow/framework/mod.rs\"><code>rustc_mir::dataflow::framework</code></a> to try to get an understanding of how data-flow analysis is implemented in rustc, but this part confuses me:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">EffectIndex</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">next_in_forward_order</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">effect</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Effect</span>::<span class=\"n\">Before</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Effect</span>::<span class=\"n\">Primary</span><span class=\"p\">.</span><span class=\"n\">at_index</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">statement_index</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Effect</span>::<span class=\"n\">Primary</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Effect</span>::<span class=\"n\">Before</span><span class=\"p\">.</span><span class=\"n\">at_index</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">statement_index</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">next_in_backward_order</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">effect</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Effect</span>::<span class=\"n\">Before</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Effect</span>::<span class=\"n\">Primary</span><span class=\"p\">.</span><span class=\"n\">at_index</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">statement_index</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Effect</span>::<span class=\"n\">Primary</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Effect</span>::<span class=\"n\">Before</span><span class=\"p\">.</span><span class=\"n\">at_index</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">statement_index</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I understand <code>next_in_forward_order</code>:</p>\n<ul>\n<li>If you're before a certain statement, then the next effect is the primary effect at that statement</li>\n<li>If you're at a certain statement, then the next effect is the before effect of the next statement</li>\n</ul>\n<p>But I don't understand <code>next_in_backward_order</code>. It looks to me like it's saying:</p>\n<ul>\n<li>If you're before a statement, then the next effect is the primary effect at that statement -- shouldn't the next effect be the primary at the previous?</li>\n<li>If you're at a statement, then the next effect is the <em>before</em> effect of the previous statement -- shouldn't the next effect be the before of the <em>current</em> statement?</li>\n</ul>\n<p>What is it actually doing?</p>",
        "id": 215263921,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604267305
    },
    {
        "content": "<p>Can someone explain this to me? Thank you so much!</p>",
        "id": 216948046,
        "sender_full_name": "Noah Lev",
        "timestamp": 1605569674
    },
    {
        "content": "<p>I suggest you activate tracing on a specific dataflow analysis and have a detailed look at what happens. Mabye the <code>statement_index</code> isn't the index of the current statement? I think you'll have to look at the callers of <code>next_in_backward_order</code></p>",
        "id": 216976018,
        "sender_full_name": "oli",
        "timestamp": 1605601204
    },
    {
        "content": "<p>Thank you for the suggestion! When you say 'tracing' do you mean something like <a href=\"https://rustc-dev-guide.rust-lang.org/mir/dataflow.html#graphviz-diagrams\">https://rustc-dev-guide.rust-lang.org/mir/dataflow.html#graphviz-diagrams</a>?</p>",
        "id": 217049224,
        "sender_full_name": "Noah Lev",
        "timestamp": 1605640744
    },
    {
        "content": "<p>Or <code>RUSTC_LOG=rustc_mir::dataflow=trace</code>?</p>",
        "id": 217049268,
        "sender_full_name": "Noah Lev",
        "timestamp": 1605640773
    },
    {
        "content": "<p><code>RUSTC_LOG=rustc_mir::dataflow=info</code>. <code>=trace</code> can also be used, but unless you compile rustc yourself with all logging enabled, only info logs and higher are shown under any circumstances.</p>",
        "id": 217056503,
        "sender_full_name": "bjorn3",
        "timestamp": 1605644213
    }
]